<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-instrumentconfig" class="anchor" aria-hidden="true" href="#instrumentconfig"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>InstrumentConfig</h1>
<p><a href="https://orchard-ultrasound-innovation.github.io/InstrumentConfig.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://orchard-ultrasound-innovation.github.io/InstrumentConfig.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a>
<a href="https://github.com/orchard-ultrasound-innovation/InstrumentConfig.jl/actions"><img src="https://github.com/orchard-ultrasound-innovation/InstrumentConfig.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width:100%;"></a>
<a href="https://travis-ci.com/orchard-ultrasound-innovation/InstrumentConfig.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/e08a0ee275b91d24e2cd5621d71c641e3fac3791e3ed5c6eb54ab0e9693f38a1/68747470733a2f2f7472617669732d63692e636f6d2f6f7263686172642d756c747261736f756e642d696e6e6f766174696f6e2f496e737472756d656e74436f6e6669672e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/orchard-ultrasound-innovation/InstrumentConfig.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/orchard-ultrasound-innovation/InstrumentConfig.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/9a90dbe1991c4473c8c2d687b71e9709404417ce7233241267fc4799f907f925/68747470733a2f2f636f6465636f762e696f2f67682f6f7263686172642d756c747261736f756e642d696e6e6f766174696f6e2f496e737472756d656e74436f6e6669672e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/orchard-ultrasound-innovation/InstrumentConfig.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a>
<a href="https://github.com/invenia/BlueStyle"><img src="https://camo.githubusercontent.com/c18fbaa52d94d16b90b19701fc90d289b8a5bb920c74c79bab200b14e75420a4/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c75652d3434393564312e737667" alt="Code Style: Blue" data-canonical-src="https://img.shields.io/badge/code%20style-blue-4495d1.svg" style="max-width:100%;"></a>
<a href="https://github.com/SciML/ColPrac"><img src="https://camo.githubusercontent.com/a6c1efcb19a957860ecb25966a730260b03d6e05380d0c27992ee7f9e3b1feb3/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f436f6c507261632d436f6e7472696275746f72277325323047756964652d626c756576696f6c6574" alt="ColPrac: Contributor's Guide on Collaborative Practices for Community Packages" data-canonical-src="https://img.shields.io/badge/ColPrac-Contributor's%20Guide-blueviolet" style="max-width:100%;"></a></p>
<p>This package contains an interface for saving and reading configuration options from a YAML file. It's especially useful for instrument interface packages.</p>
<p>Inspired by unix config-file/dotfile style configuration.</p>
<p>Your current working directory (normally your julia project root)
is first searched for a config file. If no config is found, your home
directory is then searched for a config file.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>TcpInstruments can be installed using the Julia package manager. From the Julia REPL, type ] to enter the Pkg REPL mode and run</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="pkg&gt; add InstrumentConfig
"><pre>pkg<span class="pl-k">&gt;</span> add InstrumentConfig</pre></div>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<h3><a id="user-content-instrument-functions" class="anchor" aria-hidden="true" href="#instrument-functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Instrument Functions</h3>
<p>This library exports the <code>initialize</code> and <code>terminate</code>
functions so that they can be overridden and implemented
in other packages.</p>
<h3><a id="user-content-configuration" class="anchor" aria-hidden="true" href="#configuration"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Configuration</h3>
<p>Create a new configuration</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="
```julia
const myPkg_config = InstrumentConfig.Config(
    &quot;{desired-name-of-configuration-file}&quot;,
)
"><pre><code>
```julia
const myPkg_config = InstrumentConfig.Config(
    "{desired-name-of-configuration-file}",
)
</code></pre></div>
<p>If you want to automatically package an example/default config you
can do so like this:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt;touch &quot;desired-name.yml&quot;
shell&gt;const myPkg_config = InstrumentConfig.Config(
    &quot;desired-name.yml&quot;,
    @__MODULE__
)
"><pre>julia<span class="pl-k">&gt;</span>touch <span class="pl-s"><span class="pl-pds">"</span>desired-name.yml<span class="pl-pds">"</span></span>
shell<span class="pl-k">&gt;</span><span class="pl-k">const</span> myPkg_config <span class="pl-k">=</span> InstrumentConfig<span class="pl-k">.</span><span class="pl-c1">Config</span>(
    <span class="pl-s"><span class="pl-pds">"</span>desired-name.yml<span class="pl-pds">"</span></span>,
    <span class="pl-c1">@__MODULE__</span>
)</pre></div>
<p>Your config must be in the root folder and have the same config name.</p>
<p>If your config is not in the root of your project but in say your
src folder or somewhere else:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt;touch &quot;src/desired-name.yml&quot;
shell&gt;const myPkg_config = InstrumentConfig.Config(
    &quot;desired-name.yml&quot;,
    @__MODULE__;
    example=&quot;src/desired-name.yml&quot;
)
"><pre>julia<span class="pl-k">&gt;</span>touch <span class="pl-s"><span class="pl-pds">"</span>src/desired-name.yml<span class="pl-pds">"</span></span>
shell<span class="pl-k">&gt;</span><span class="pl-k">const</span> myPkg_config <span class="pl-k">=</span> InstrumentConfig<span class="pl-k">.</span><span class="pl-c1">Config</span>(
    <span class="pl-s"><span class="pl-pds">"</span>desired-name.yml<span class="pl-pds">"</span></span>,
    <span class="pl-c1">@__MODULE__</span>;
    example<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>src/desired-name.yml<span class="pl-pds">"</span></span>
)</pre></div>
<p>Or you might want to have your default config file have a different
name:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt;touch &quot;example_desired_config.yml&quot;
shell&gt;const myPkg_config = InstrumentConfig.Config(
    &quot;desired-name.yml&quot;,
    @__MODULE__;
    example=&quot;src/my-example-desired-name.yml&quot;
)
"><pre>julia<span class="pl-k">&gt;</span>touch <span class="pl-s"><span class="pl-pds">"</span>example_desired_config.yml<span class="pl-pds">"</span></span>
shell<span class="pl-k">&gt;</span><span class="pl-k">const</span> myPkg_config <span class="pl-k">=</span> InstrumentConfig<span class="pl-k">.</span><span class="pl-c1">Config</span>(
    <span class="pl-s"><span class="pl-pds">"</span>desired-name.yml<span class="pl-pds">"</span></span>,
    <span class="pl-c1">@__MODULE__</span>;
    example<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>src/my-example-desired-name.yml<span class="pl-pds">"</span></span>
)</pre></div>
<p>Or if your config is hosted somewhere on the internet</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="const EXAMPLE_FILE = &quot;https://raw.githubusercontent.com/Orchard-Ultrasound-Innovation/TcpInstruments.jl/master/.tcp_instruments.yml&quot; 

const tcp_config = InstrumentConfig.Config(
    &quot;.tcp_instruments.yml&quot;;
    example = EXAMPLE_FILE
)
"><pre><span class="pl-k">const</span> EXAMPLE_FILE <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>https://raw.githubusercontent.com/Orchard-Ultrasound-Innovation/TcpInstruments.jl/master/.tcp_instruments.yml<span class="pl-pds">"</span></span> 

<span class="pl-k">const</span> tcp_config <span class="pl-k">=</span> InstrumentConfig<span class="pl-k">.</span><span class="pl-c1">Config</span>(
    <span class="pl-s"><span class="pl-pds">"</span>.tcp_instruments.yml<span class="pl-pds">"</span></span>;
    example <span class="pl-k">=</span> EXAMPLE_FILE
)</pre></div>
<p>Implement the four main functions</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="# A getter function to be used in your code. Returns a dictionary of the
# loaded config file or loads the config if it has not yet been loaded
get_config() = InstrumentConfig.get_config(myPkg_config)

# If a location for the example/default file is specified
# users can create a global one in their home directory or they can call
# create_config(;dir=pwd()) to load the default config in their
# current working directory (normally the root of their julia project)
create_config(;dir=homedir()) = InstrumentConfig.create_config(myPkg_config; dir=dir)

# Will open the currently loaded config file in the users preferred
# editor( Uses the $EDITOR ENV variable)
edit_config() = InstrumentConfig.edit_config(myPkg_config)

# Loads your specified config file
load_config() = InstrumentConfig.load_config(myPkg_config)
"><pre><span class="pl-c"><span class="pl-c">#</span> A getter function to be used in your code. Returns a dictionary of the</span>
<span class="pl-c"><span class="pl-c">#</span> loaded config file or loads the config if it has not yet been loaded</span>
<span class="pl-en">get_config</span>() <span class="pl-k">=</span> InstrumentConfig<span class="pl-k">.</span><span class="pl-c1">get_config</span>(myPkg_config)

<span class="pl-c"><span class="pl-c">#</span> If a location for the example/default file is specified</span>
<span class="pl-c"><span class="pl-c">#</span> users can create a global one in their home directory or they can call</span>
<span class="pl-c"><span class="pl-c">#</span> create_config(;dir=pwd()) to load the default config in their</span>
<span class="pl-c"><span class="pl-c">#</span> current working directory (normally the root of their julia project)</span>
<span class="pl-en">create_config</span>(;dir<span class="pl-k">=</span><span class="pl-en">homedir</span>()) <span class="pl-k">=</span> InstrumentConfig<span class="pl-k">.</span><span class="pl-c1">create_config</span>(myPkg_config; dir<span class="pl-k">=</span>dir)

<span class="pl-c"><span class="pl-c">#</span> Will open the currently loaded config file in the users preferred</span>
<span class="pl-c"><span class="pl-c">#</span> editor( Uses the $EDITOR ENV variable)</span>
<span class="pl-en">edit_config</span>() <span class="pl-k">=</span> InstrumentConfig<span class="pl-k">.</span><span class="pl-c1">edit_config</span>(myPkg_config)

<span class="pl-c"><span class="pl-c">#</span> Loads your specified config file</span>
<span class="pl-en">load_config</span>() <span class="pl-k">=</span> InstrumentConfig<span class="pl-k">.</span><span class="pl-c1">load_config</span>(myPkg_config)</pre></div>
<p>Your package can now be used as follows:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using YourPackageName; YourPackageName.load_config()
"><pre><span class="pl-k">using</span> YourPackageName; YourPackageName<span class="pl-k">.</span><span class="pl-c1">load_config</span>()</pre></div>
<h2><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example</h2>
<p>The <code>.tcp_instruments.yml</code> file in your project root will be used
as the default. So <code>create_config()</code> will create that file
instead of an empty file.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="const tcp_config = InstrumentConfig.Config(
    &quot;.tcp_instruments.yml&quot;,
    @__MODULE__
)
"><pre><span class="pl-k">const</span> tcp_config <span class="pl-k">=</span> InstrumentConfig<span class="pl-k">.</span><span class="pl-c1">Config</span>(
    <span class="pl-s"><span class="pl-pds">"</span>.tcp_instruments.yml<span class="pl-pds">"</span></span>,
    <span class="pl-c1">@__MODULE__</span>
)</pre></div>
<p>Implement these default functions for your package</p>
<p>Following the <code>tcp_config</code> example created above:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="function get_config()
    return InstrumentConfig.get_config(tcp_config)
end

function create_config(;dir=homedir())
    InstrumentConfig.create_config(tcp_config; dir=dir)
end

function edit_config()
    InstrumentConfig.edit_config(tcp_config)
end

function load_config()
    InstrumentConfig.load_config(tcp_config)
end
"><pre><span class="pl-k">function</span> <span class="pl-en">get_config</span>()
    <span class="pl-k">return</span> InstrumentConfig<span class="pl-k">.</span><span class="pl-c1">get_config</span>(tcp_config)
<span class="pl-k">end</span>

<span class="pl-k">function</span> <span class="pl-en">create_config</span>(;dir<span class="pl-k">=</span><span class="pl-c1">homedir</span>())
    InstrumentConfig<span class="pl-k">.</span><span class="pl-c1">create_config</span>(tcp_config; dir<span class="pl-k">=</span>dir)
<span class="pl-k">end</span>

<span class="pl-k">function</span> <span class="pl-en">edit_config</span>()
    InstrumentConfig<span class="pl-k">.</span><span class="pl-c1">edit_config</span>(tcp_config)
<span class="pl-k">end</span>

<span class="pl-k">function</span> <span class="pl-en">load_config</span>()
    InstrumentConfig<span class="pl-k">.</span><span class="pl-c1">load_config</span>(tcp_config)
<span class="pl-k">end</span></pre></div>
<p>You can add additional functionality to the default functions:</p>
<p>Lets say you want to validate the user's config whenever you load config</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="function my_validation_function(tcp_config)
    ....
end

function load_config()
    InstrumentConfig.load_config(tcp_config)
    my_validation_function(tcp_config)
    @info &quot;My super friendly message&quot;
    additional_malicious_malware_function()
    .... (etc)
end
"><pre><span class="pl-k">function</span> <span class="pl-en">my_validation_function</span>(tcp_config)
    <span class="pl-k">....</span>
<span class="pl-k">end</span>

<span class="pl-k">function</span> <span class="pl-en">load_config</span>()
    InstrumentConfig<span class="pl-k">.</span><span class="pl-c1">load_config</span>(tcp_config)
    <span class="pl-c1">my_validation_function</span>(tcp_config)
    <span class="pl-c1">@info</span> <span class="pl-s"><span class="pl-pds">"</span>My super friendly message<span class="pl-pds">"</span></span>
    <span class="pl-c1">additional_malicious_malware_function</span>()
    <span class="pl-k">....</span> (etc)
<span class="pl-k">end</span></pre></div>
<h2><a id="user-content-packages-that-use-this-library" class="anchor" aria-hidden="true" href="#packages-that-use-this-library"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Packages that use this library</h2>
<ul>
<li><a href="https://github.com/Orchard-Ultrasound-Innovation/ThorlabsLTStage.jl">ThorlabsLTStage</a></li>
<li><a href="https://github.com/Orchard-Ultrasound-Innovation/TcpInstruments.jl">TcpInstruments</a></li>
</ul>
</article></div>