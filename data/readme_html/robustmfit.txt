<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-robustmfitjl" class="anchor" aria-hidden="true" href="#robustmfitjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>RobustMFit.jl</h1>
<p dir="auto"><a href="https://ci.appveyor.com/project/ManuelStapper/robustmfit-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/c5fa55cbcc98e9416ec1f231fc943ccf7247a370fc5aa71a1e01b3e77f0e5f4a/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f327269723164367661333067773368783f7376673d74727565" alt="Build status" data-canonical-src="https://ci.appveyor.com/api/projects/status/2rir1d6va30gw3hx?svg=true" style="max-width: 100%;"></a> <a href="https://codecov.io/gh/ManuelStapper/RobustMFit.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/5ea1f5667964b964cadd7a50e76e95501b45b9bd031a707c2b792ff5d7a3983b/68747470733a2f2f636f6465636f762e696f2f67682f4d616e75656c537461707065722f526f627573744d4669742e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e7376673f746f6b656e3d33574839495852474243" alt="codecov" data-canonical-src="https://codecov.io/gh/ManuelStapper/RobustMFit.jl/branch/main/graph/badge.svg?token=3WH9IXRGBC" style="max-width: 100%;"></a> <a href="https://zenodo.org/badge/latestdoi/525409508" rel="nofollow"><img src="https://camo.githubusercontent.com/b8a47949c40c67f808aac7606fc379ab0323c345d45e21ff1883c830c30762e3/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f3532353430393530382e737667" alt="DOI" data-canonical-src="https://zenodo.org/badge/525409508.svg" style="max-width: 100%;"></a></p>
<p dir="auto">A Julia package to estimate parameters of a univariate distribution robustly by M-estimation. Currently implemented are Tukey, Huber, Andrew and Hampel functions as well as smoothed versions of the latter three. User-defined functions can be added using the <code>NewMFunction.jl</code> template.</p>
<p dir="auto">Different estimation approaches are implemented:</p>
<h2 dir="auto"><a id="user-content-function-types" class="anchor" aria-hidden="true" href="#function-types"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Function types</h2>
<p dir="auto">Estimation can be carried out by minimizing a loss function (ρ-type), finding the root of its derivative (ψ-type) or iteratively by a weight function (w-type).</p>
<h2 dir="auto"><a id="user-content-method-of-moments" class="anchor" aria-hidden="true" href="#method-of-moments"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Method of Moments</h2>
<p dir="auto">The parameters can be estimated either directly or by estimating the raw moments of the distribution and translating them to parameters.</p>
<h2 dir="auto"><a id="user-content-bias-correction" class="anchor" aria-hidden="true" href="#bias-correction"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Bias Correction</h2>
<p dir="auto">Estimation is only unbiased in general if the underlying distribution is symmetric. A potential bias must also be taken into account for symmetric distributions with multiple parameters. Esimating for example the mean of a Normal distribution with symmetric (ρ, ψ or w)-function is unproblematic, but estimating the variance parameter is not, since the distribution of <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="a2eeedc92fe0db3d0b7f770a643a43b1">$X^2$</math-renderer> is asymmetric.</p>
<p dir="auto">The bias can be tackled by a correction term in the <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="a2eeedc92fe0db3d0b7f770a643a43b1">$\psi$</math-renderer> estimation or by using asymmetric (ρ, ψ or w)-functions. For asymmetric functions, different tuning constants are selected for positive and negative input. One of those is kept constant while the other is chosen such that the estimator is consistent.</p>
<h1 dir="auto">
<a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Examples</h1>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="d = Poisson(10)
x = rand(d, 100)

# For ρ-Esimation, Moment based and updating lower tuning constant
λ = Mfit(x, d, Huber(1.5), type=:ρ, MM=true, biasCorr=:L)

# ψ-Estimation, estimate parameters directly, update upper tuning constant
Mfit(x, d, Tukey(4), type = :ψ, MM = false, biasCorr = :U)
# w-Estimation, Moment based, not accounting for asymmetry at all
Mfit(x, d, Tukey(4), type = :ψ, MM = false, biasCorr = :N)
# Or the same, but accounting for it with correction term
Mfit(x, d, Tukey(4), type = :ψ, MM = false, biasCorr = :C)

# Computing the asymptotic variance of the first estimation
AVar(Poisson(λ), Huber(1.5), :L)
# Or estimating it using the sample
AVar(x, Poisso(λ), Huber(1.5), :L)

# Comparing the robust estaimtion with ML estimation by relative asymptotic efficiency
RAE(Poisson(λ), Huber(1.5), :L)"><pre>d <span class="pl-k">=</span> <span class="pl-c1">Poisson</span>(<span class="pl-c1">10</span>)
x <span class="pl-k">=</span> <span class="pl-c1">rand</span>(d, <span class="pl-c1">100</span>)

<span class="pl-c"><span class="pl-c">#</span> For ρ-Esimation, Moment based and updating lower tuning constant</span>
λ <span class="pl-k">=</span> <span class="pl-c1">Mfit</span>(x, d, <span class="pl-c1">Huber</span>(<span class="pl-c1">1.5</span>), type<span class="pl-k">=</span><span class="pl-c1">:ρ</span>, MM<span class="pl-k">=</span><span class="pl-c1">true</span>, biasCorr<span class="pl-k">=</span><span class="pl-c1">:L</span>)

<span class="pl-c"><span class="pl-c">#</span> ψ-Estimation, estimate parameters directly, update upper tuning constant</span>
<span class="pl-c1">Mfit</span>(x, d, <span class="pl-c1">Tukey</span>(<span class="pl-c1">4</span>), type <span class="pl-k">=</span> <span class="pl-c1">:ψ</span>, MM <span class="pl-k">=</span> <span class="pl-c1">false</span>, biasCorr <span class="pl-k">=</span> <span class="pl-c1">:U</span>)
<span class="pl-c"><span class="pl-c">#</span> w-Estimation, Moment based, not accounting for asymmetry at all</span>
<span class="pl-c1">Mfit</span>(x, d, <span class="pl-c1">Tukey</span>(<span class="pl-c1">4</span>), type <span class="pl-k">=</span> <span class="pl-c1">:ψ</span>, MM <span class="pl-k">=</span> <span class="pl-c1">false</span>, biasCorr <span class="pl-k">=</span> <span class="pl-c1">:N</span>)
<span class="pl-c"><span class="pl-c">#</span> Or the same, but accounting for it with correction term</span>
<span class="pl-c1">Mfit</span>(x, d, <span class="pl-c1">Tukey</span>(<span class="pl-c1">4</span>), type <span class="pl-k">=</span> <span class="pl-c1">:ψ</span>, MM <span class="pl-k">=</span> <span class="pl-c1">false</span>, biasCorr <span class="pl-k">=</span> <span class="pl-c1">:C</span>)

<span class="pl-c"><span class="pl-c">#</span> Computing the asymptotic variance of the first estimation</span>
<span class="pl-c1">AVar</span>(<span class="pl-c1">Poisson</span>(λ), <span class="pl-c1">Huber</span>(<span class="pl-c1">1.5</span>), <span class="pl-c1">:L</span>)
<span class="pl-c"><span class="pl-c">#</span> Or estimating it using the sample</span>
<span class="pl-c1">AVar</span>(x, <span class="pl-c1">Poisso</span>(λ), <span class="pl-c1">Huber</span>(<span class="pl-c1">1.5</span>), <span class="pl-c1">:L</span>)

<span class="pl-c"><span class="pl-c">#</span> Comparing the robust estaimtion with ML estimation by relative asymptotic efficiency</span>
<span class="pl-c1">RAE</span>(<span class="pl-c1">Poisson</span>(λ), <span class="pl-c1">Huber</span>(<span class="pl-c1">1.5</span>), <span class="pl-c1">:L</span>)</pre></div>
</article></div>