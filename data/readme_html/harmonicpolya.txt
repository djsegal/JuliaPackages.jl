<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-harmonicpolyajl" class="anchor" aria-hidden="true" href="#harmonicpolyajl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>HarmonicPolya.jl</h1>
<p dir="auto">This is a package for homogeneous polynomial minimization on the sphere using harmonic hierarchies found in <a href="https://arxiv.org/abs/2202.12865" rel="nofollow">Cristancho &amp; Velasco</a> also implementing two required features: polynomial cubature/quadrature rules on the sphere using <a href="https://github.com/JuliaApproximation/FastGaussQuadrature.jl">FastGaussQuadrature</a> and harmonic polynomial analysis on the sphere based on <a href="https://www.ams.org/journals/proc/1995-123-12/S0002-9939-1995-1277092-1/S0002-9939-1995-1277092-1.pdf" rel="nofollow">Axler &amp; Ramey</a>. The implementation of polynomials uses <a href="https://github.com/JuliaAlgebra/DynamicPolynomials.jl">DynamicPolynomials</a> although <a href="https://github.com/JuliaAlgebra/FixedPolynomials.jl">FixedPolynomials</a> is suggested for calculations using quadratures.</p>
<h1 dir="auto"><a id="user-content-quadratures-on-the-sphere" class="anchor" aria-hidden="true" href="#quadratures-on-the-sphere"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Quadratures on the Sphere</h1>
<p dir="auto">The method <code>sphericalquadrature(n,deg)</code> defines the nodes and weights of a quadrature on the <code>n</code>-dimensional sphere <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="a3b0c8ddd21e9992c57ebe2582df0059">$S^{n-1}$</math-renderer> for polynomials of degree <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="a3b0c8ddd21e9992c57ebe2582df0059">$\leq$</math-renderer> <code>deg</code>. Example of usage:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="
julia&gt; using HarmonicPolya

julia&gt; z,w = sphericalquadrature(3,4) #this defines a quadrature on the 3-dimensional sphere for polynomials of degree =&lt; 4

julia&gt; poly(x) = x[1]^2*x[2]^2*x[3]^2 #defines a polynomial function on RR^3 

julia&gt; I = sum(w*.(poly.(z))) #integrates f on the sphere using the quadrature rule
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> HarmonicPolya

julia<span class="pl-k">&gt;</span> z,w <span class="pl-k">=</span> <span class="pl-c1">sphericalquadrature</span>(<span class="pl-c1">3</span>,<span class="pl-c1">4</span>) <span class="pl-c"><span class="pl-c">#</span>this defines a quadrature on the 3-dimensional sphere for polynomials of degree =&lt; 4</span>

julia<span class="pl-k">&gt;</span> <span class="pl-en">poly</span>(x) <span class="pl-k">=</span> x[<span class="pl-c1">1</span>]<span class="pl-k">^</span><span class="pl-c1">2</span><span class="pl-k">*</span>x[<span class="pl-c1">2</span>]<span class="pl-k">^</span><span class="pl-c1">2</span><span class="pl-k">*</span>x[<span class="pl-c1">3</span>]<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-c"><span class="pl-c">#</span>defines a polynomial function on RR^3 </span>

julia<span class="pl-k">&gt;</span> I <span class="pl-k">=</span> <span class="pl-c1">sum</span>(w<span class="pl-k">*</span>.(<span class="pl-c1">poly</span>.(z))) <span class="pl-c"><span class="pl-c">#</span>integrates f on the sphere using the quadrature rule</span>
</pre></div>
<h1 dir="auto">
<a id="user-content-harmonic-analysis-on-the-sphere" class="anchor" aria-hidden="true" href="#harmonic-analysis-on-the-sphere"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Harmonic Analysis on the Sphere</h1>
<p dir="auto">Features three functions: <code>laplacian(poly,vars;power=1)</code> is the laplacian for a polynomial <code>poly</code> from <a href="https://github.com/JuliaAlgebra/DynamicPolynomials.jl">DynamicPolynomials</a> using variables <code>vars</code> to the power of <code>power</code> (default is 1);<code>generatebasissphere(deg,vars)</code> generates a basis for the space of homogeneous harmonic polynomials of degree <code>deg</code> in the variables <code>vars</code>; and <code>harmonicdecomposition(poly,vars)</code> produces a vector representing the decomposition in harmonic components (as a tuple (degree,component) in ascending degree) of the polynomial <code>poly</code> in the variables <code>vars</code>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="
julia&gt; using HarmonicPolya, DynamicPolynomials

julia&gt; @polyvar x[1:3]

julia&gt; u = x[1]^2 + x[2]*x[3] # defines a polynomial in DynamicPolynomials

julia&gt; ∇u = laplacian(u,x) # calculates the laplacian of u

julia&gt; basis = generatebasissphere(3,x) # produces the basis of harmonic polynomials of degree 3 in the variables x

julia&gt; desc = harmonicdecomposition(u,x) # produces a vector with the harmonic decomposition of u in ascending degree

julia&gt; norm = sum(x .* x)

julia&gt; u' = sum( map(v-&gt;norm^(floor(Int,v[1]/2))*v[2],desc)) #reconstructs u from its decomposition (working on a more elegant way)
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> HarmonicPolya, DynamicPolynomials

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@polyvar</span> x[<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">3</span>]

julia<span class="pl-k">&gt;</span> u <span class="pl-k">=</span> x[<span class="pl-c1">1</span>]<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">+</span> x[<span class="pl-c1">2</span>]<span class="pl-k">*</span>x[<span class="pl-c1">3</span>] <span class="pl-c"><span class="pl-c">#</span> defines a polynomial in DynamicPolynomials</span>

julia<span class="pl-k">&gt;</span> ∇u <span class="pl-k">=</span> <span class="pl-c1">laplacian</span>(u,x) <span class="pl-c"><span class="pl-c">#</span> calculates the laplacian of u</span>

julia<span class="pl-k">&gt;</span> basis <span class="pl-k">=</span> <span class="pl-c1">generatebasissphere</span>(<span class="pl-c1">3</span>,x) <span class="pl-c"><span class="pl-c">#</span> produces the basis of harmonic polynomials of degree 3 in the variables x</span>

julia<span class="pl-k">&gt;</span> desc <span class="pl-k">=</span> <span class="pl-c1">harmonicdecomposition</span>(u,x) <span class="pl-c"><span class="pl-c">#</span> produces a vector with the harmonic decomposition of u in ascending degree</span>

julia<span class="pl-k">&gt;</span> norm <span class="pl-k">=</span> <span class="pl-c1">sum</span>(x <span class="pl-k">.*</span> x)

julia<span class="pl-k">&gt;</span> u<span class="pl-k">'</span> <span class="pl-k">=</span> <span class="pl-c1">sum</span>( <span class="pl-c1">map</span>(v<span class="pl-k">-&gt;</span>norm<span class="pl-k">^</span>(<span class="pl-c1">floor</span>(Int,v[<span class="pl-c1">1</span>]<span class="pl-k">/</span><span class="pl-c1">2</span>))<span class="pl-k">*</span>v[<span class="pl-c1">2</span>],desc)) <span class="pl-c"><span class="pl-c">#</span>reconstructs u from its decomposition (working on a more elegant way)</span>
</pre></div>
<h1 dir="auto">
<a id="user-content-polynomial-minimization-on-the-sphere" class="anchor" aria-hidden="true" href="#polynomial-minimization-on-the-sphere"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Polynomial Minimization on the Sphere</h1>
<p dir="auto">The primary function of the package. There are three different methods (as in <a href="https://arxiv.org/abs/2202.12865" rel="nofollow">Cristancho &amp; Velasco</a>): <code>upperbound(poly,vars,m)</code> produces an upper bound on the minimum of the homogeneous polynomial <code>poly</code> in variables <code>vars</code> using a quadrature of degree <code>m</code>; <code>lowerboundsquares(poly,vars,m)</code> produces a lower bound of <code>poly</code> in <code>vars</code> using the hierarchy of pure square powers of degree <code>m</code>; and <code>lowerboundfawzi(poly,vars,m)</code> produces a lower bound of <code>poly</code> in <code>vars</code> using the Fang-Fawzi hierarchy  of degree <code>m</code>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="
julia&gt; using HarmonicPolya, DynamicPolynomials

julia&gt; @polyvar y[1:3]

julia&gt; motzkin = y[1]^2*y[2]^4+ y[1]^4*y[2]^2+y[3]^6-3*y[1]^2*y[2]^2*y[3]^2 #defines the Motzkin polynomial (which is non-negative and homogeneous)

julia&gt; u = upperbound(motzkin,y,20) #upper bound with quadrature of degree 20

julia&gt; ls = lowerboundsquares(motzkin,y,20) #lower bound with squares hierarchy degree 20

julia&gt; lf = lowerboundfawzi(motzkin,y,20) #lower bound with Fang-fawzi hierarchy degree 20
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> HarmonicPolya, DynamicPolynomials

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@polyvar</span> y[<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">3</span>]

julia<span class="pl-k">&gt;</span> motzkin <span class="pl-k">=</span> y[<span class="pl-c1">1</span>]<span class="pl-k">^</span><span class="pl-c1">2</span><span class="pl-k">*</span>y[<span class="pl-c1">2</span>]<span class="pl-k">^</span><span class="pl-c1">4</span><span class="pl-k">+</span> y[<span class="pl-c1">1</span>]<span class="pl-k">^</span><span class="pl-c1">4</span><span class="pl-k">*</span>y[<span class="pl-c1">2</span>]<span class="pl-k">^</span><span class="pl-c1">2</span><span class="pl-k">+</span>y[<span class="pl-c1">3</span>]<span class="pl-k">^</span><span class="pl-c1">6</span><span class="pl-k">-</span><span class="pl-c1">3</span><span class="pl-k">*</span>y[<span class="pl-c1">1</span>]<span class="pl-k">^</span><span class="pl-c1">2</span><span class="pl-k">*</span>y[<span class="pl-c1">2</span>]<span class="pl-k">^</span><span class="pl-c1">2</span><span class="pl-k">*</span>y[<span class="pl-c1">3</span>]<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-c"><span class="pl-c">#</span>defines the Motzkin polynomial (which is non-negative and homogeneous)</span>

julia<span class="pl-k">&gt;</span> u <span class="pl-k">=</span> <span class="pl-c1">upperbound</span>(motzkin,y,<span class="pl-c1">20</span>) <span class="pl-c"><span class="pl-c">#</span>upper bound with quadrature of degree 20</span>

julia<span class="pl-k">&gt;</span> ls <span class="pl-k">=</span> <span class="pl-c1">lowerboundsquares</span>(motzkin,y,<span class="pl-c1">20</span>) <span class="pl-c"><span class="pl-c">#</span>lower bound with squares hierarchy degree 20</span>

julia<span class="pl-k">&gt;</span> lf <span class="pl-k">=</span> <span class="pl-c1">lowerboundfawzi</span>(motzkin,y,<span class="pl-c1">20</span>) <span class="pl-c"><span class="pl-c">#</span>lower bound with Fang-fawzi hierarchy degree 20</span>
</pre></div>
</article></div>