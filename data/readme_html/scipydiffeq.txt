<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-scipydiffeqjl" class="anchor" aria-hidden="true" href="#scipydiffeqjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>SciPyDiffEq.jl</h1>
<p><a href="https://gitter.im/JuliaDiffEq/Lobby?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge&amp;utm_content=badge" rel="nofollow"><img src="https://camo.githubusercontent.com/063a520f1733d1b53d1e2fdb37b70a8016dd36f6/68747470733a2f2f6261646765732e6769747465722e696d2f4a756c69614469666645712f4c6f6262792e737667" alt="Join the chat at https://gitter.im/JuliaDiffEq/Lobby" data-canonical-src="https://badges.gitter.im/JuliaDiffEq/Lobby.svg" style="max-width:100%;"></a>
<a href="https://travis-ci.org/JuliaDiffEq/SciPyDiffEq.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/03fa3601fcfaee036015f068675569a771c912a8/68747470733a2f2f7472617669732d63692e6f72672f4a756c69614469666645712f53636950794469666645712e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaDiffEq/SciPyDiffEq.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p>SciPyDiffEq.jl is a common interface binding for the
<a href="https://docs.scipy.org/doc/scipy/reference/generated/scipy.integrate.solve_ivp.html#scipy.integrate.solve_ivp" rel="nofollow">SciPy solve_ivp module</a>
ordinary differential equation solvers. It uses the
<a href="https://github.com/JuliaPy/PyCall.jl">PyCall.jl</a> interop in order to
send the differential equation over to Python and solve it.</p>
<p>Note that this package isn't for production use and is mostly just for benchmarking
and helping new users migrate models over to Julia.
For more efficient solvers, see the
<a href="https://github.com/JuliaDiffEq/DifferentialEquations.jl">DifferentialEquations.jl documentation</a>.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>To install SciPyDiffEq.jl, use the following:</p>
<div class="highlight highlight-source-julia"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">clone</span>(<span class="pl-s"><span class="pl-pds">"</span>https://github.com/JuliaDiffEq/SciPyDiffEq.jl<span class="pl-pds">"</span></span>)</pre></div>
<h2><a id="user-content-using-scipydiffeqjl" class="anchor" aria-hidden="true" href="#using-scipydiffeqjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Using SciPyDiffEq.jl</h2>
<p>SciPyDiffEq.jl is simply a solver on the DiffEq common interface, so for details see the <a href="https://juliadiffeq.github.io/DiffEqDocs.jl/dev/" rel="nofollow">DifferentialEquations.jl documentation</a>.
The available algorithms are:</p>
<div class="highlight highlight-source-julia"><pre>SciPyDiffEq<span class="pl-k">.</span>RK45
SciPyDiffEq<span class="pl-k">.</span>RK23
SciPyDiffEq<span class="pl-k">.</span>Radau
SciPyDiffEq<span class="pl-k">.</span>BDF
SciPyDiffEq<span class="pl-k">.</span>LSODA</pre></div>
<h2><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example</h2>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> SciPyDiffEq

<span class="pl-k">function</span> <span class="pl-en">lorenz</span>(u,p,t)
 du1 <span class="pl-k">=</span> <span class="pl-c1">10.0</span>(u[<span class="pl-c1">2</span>]<span class="pl-k">-</span>u[<span class="pl-c1">1</span>])
 du2 <span class="pl-k">=</span> u[<span class="pl-c1">1</span>]<span class="pl-k">*</span>(<span class="pl-c1">28.0</span><span class="pl-k">-</span>u[<span class="pl-c1">3</span>]) <span class="pl-k">-</span> u[<span class="pl-c1">2</span>]
 du3 <span class="pl-k">=</span> u[<span class="pl-c1">1</span>]<span class="pl-k">*</span>u[<span class="pl-c1">2</span>] <span class="pl-k">-</span> (<span class="pl-c1">8</span><span class="pl-k">/</span><span class="pl-c1">3</span>)<span class="pl-k">*</span>u[<span class="pl-c1">3</span>]
 [du1, du2, du3]
<span class="pl-k">end</span>
tspan <span class="pl-k">=</span> (<span class="pl-c1">0.0</span>,<span class="pl-c1">10.0</span>)
u0 <span class="pl-k">=</span> [<span class="pl-c1">1.0</span>,<span class="pl-c1">0.0</span>,<span class="pl-c1">0.0</span>]
prob <span class="pl-k">=</span> <span class="pl-c1">ODEProblem</span>(lorenz,u0,tspan)
sol <span class="pl-k">=</span> <span class="pl-c1">solve</span>(prob,SciPyDiffEq<span class="pl-k">.</span><span class="pl-c1">RK45</span>())</pre></div>
<h2><a id="user-content-measuring-overhead" class="anchor" aria-hidden="true" href="#measuring-overhead"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Measuring Overhead</h2>
<p>In the following we can measure the overhead and show that using SciPy from Julia
is about 3x faster than using SciPy with Numba. Using SciPyDiffEq:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> SciPyDiffEq, BenchmarkTools

<span class="pl-k">function</span> <span class="pl-en">lorenz</span>(u,p,t)
    du1 <span class="pl-k">=</span> <span class="pl-c1">10.0</span>(u[<span class="pl-c1">2</span>]<span class="pl-k">-</span>u[<span class="pl-c1">1</span>])
    du2 <span class="pl-k">=</span> u[<span class="pl-c1">1</span>]<span class="pl-k">*</span>(<span class="pl-c1">28.0</span><span class="pl-k">-</span>u[<span class="pl-c1">3</span>]) <span class="pl-k">-</span> u[<span class="pl-c1">2</span>]
    du3 <span class="pl-k">=</span> u[<span class="pl-c1">1</span>]<span class="pl-k">*</span>u[<span class="pl-c1">2</span>] <span class="pl-k">-</span> (<span class="pl-c1">8</span><span class="pl-k">/</span><span class="pl-c1">3</span>)<span class="pl-k">*</span>u[<span class="pl-c1">3</span>]
    [du1, du2, du3]
<span class="pl-k">end</span>
tspan <span class="pl-k">=</span> (<span class="pl-c1">0.0</span>,<span class="pl-c1">100.0</span>)
u0 <span class="pl-k">=</span> [<span class="pl-c1">1.0</span>,<span class="pl-c1">0.0</span>,<span class="pl-c1">0.0</span>]
prob <span class="pl-k">=</span> <span class="pl-c1">ODEProblem</span>(lorenz,u0,tspan)
<span class="pl-c1">@btime</span> sol <span class="pl-k">=</span> <span class="pl-c1">solve</span>(prob,SciPyDiffEq<span class="pl-k">.</span><span class="pl-c1">RK45</span>(),dense<span class="pl-k">=</span><span class="pl-c1">false</span>, abstol<span class="pl-k">=</span><span class="pl-c1">1e-8</span>,reltol<span class="pl-k">=</span><span class="pl-c1">1e-8</span>) <span class="pl-c"><span class="pl-c">#</span> 2.760 s (4426860 allocations: 182.27 MiB)</span></pre></div>
<p>This gives 2.76s. Solving the equivalent problem with SciPy <code>odeint</code> is:</p>
<div class="highlight highlight-source-python"><pre><span class="pl-k">import</span> <span class="pl-s1">numpy</span> <span class="pl-k">as</span> <span class="pl-s1">np</span>
<span class="pl-k">from</span> <span class="pl-s1">scipy</span>.<span class="pl-s1">integrate</span> <span class="pl-k">import</span> <span class="pl-s1">odeint</span>
<span class="pl-k">import</span> <span class="pl-s1">timeit</span>
<span class="pl-k">import</span> <span class="pl-s1">numba</span>
<span class="pl-k">def</span> <span class="pl-en">f</span>(<span class="pl-s1">u</span>, <span class="pl-s1">t</span>):
    <span class="pl-s1">x</span>, <span class="pl-s1">y</span>, <span class="pl-s1">z</span> <span class="pl-c1">=</span> <span class="pl-s1">u</span>
    <span class="pl-k">return</span> [<span class="pl-c1">10.0</span> <span class="pl-c1">*</span> (<span class="pl-s1">y</span> <span class="pl-c1">-</span> <span class="pl-s1">x</span>), <span class="pl-s1">x</span> <span class="pl-c1">*</span> (<span class="pl-c1">28.0</span> <span class="pl-c1">-</span> <span class="pl-s1">z</span>) <span class="pl-c1">-</span> <span class="pl-s1">y</span>, <span class="pl-s1">x</span> <span class="pl-c1">*</span> <span class="pl-s1">y</span> <span class="pl-c1">-</span> <span class="pl-c1">2.66</span> <span class="pl-c1">*</span> <span class="pl-s1">z</span>]

<span class="pl-s1">u0</span> <span class="pl-c1">=</span> [<span class="pl-c1">1.0</span>,<span class="pl-c1">0.0</span>,<span class="pl-c1">0.0</span>]
<span class="pl-s1">tspan</span> <span class="pl-c1">=</span> (<span class="pl-c1">0.</span>, <span class="pl-c1">100.</span>)
<span class="pl-s1">t</span> <span class="pl-c1">=</span> <span class="pl-s1">np</span>.<span class="pl-en">linspace</span>(<span class="pl-c1">0</span>, <span class="pl-c1">100</span>, <span class="pl-c1">1001</span>)
<span class="pl-s1">sol</span> <span class="pl-c1">=</span> <span class="pl-en">odeint</span>(<span class="pl-s1">f</span>, <span class="pl-s1">u0</span>, <span class="pl-s1">t</span>)
<span class="pl-k">def</span> <span class="pl-en">time_func</span>():
    <span class="pl-en">odeint</span>(<span class="pl-s1">f</span>, <span class="pl-s1">u0</span>, <span class="pl-s1">t</span>, <span class="pl-s1">rtol</span> <span class="pl-c1">=</span> <span class="pl-c1">1e-8</span>, <span class="pl-s1">atol</span><span class="pl-c1">=</span><span class="pl-c1">1e-8</span>)

<span class="pl-s1">_t</span> <span class="pl-c1">=</span> <span class="pl-s1">timeit</span>.<span class="pl-v">Timer</span>(<span class="pl-s1">time_func</span>).<span class="pl-en">timeit</span>(<span class="pl-s1">number</span><span class="pl-c1">=</span><span class="pl-c1">100</span>)
<span class="pl-en">print</span>(<span class="pl-s1">_t</span>) <span class="pl-c"># 13.898981100000015 seconds</span></pre></div>
<p>which takes 13.89 seconds. Then using Numba JIT with nopython mode is:</p>
<div class="highlight highlight-source-python"><pre><span class="pl-s1">numba_f</span> <span class="pl-c1">=</span> <span class="pl-s1">numba</span>.<span class="pl-en">jit</span>(<span class="pl-s1">f</span>,<span class="pl-s1">nopython</span><span class="pl-c1">=</span><span class="pl-c1">True</span>)
<span class="pl-en">odeint</span>(<span class="pl-s1">numba_f</span>, <span class="pl-s1">u0</span>, <span class="pl-s1">t</span>,<span class="pl-s1">rtol</span> <span class="pl-c1">=</span> <span class="pl-c1">1e-8</span>, <span class="pl-s1">atol</span><span class="pl-c1">=</span><span class="pl-c1">1e-8</span>)

<span class="pl-k">def</span> <span class="pl-en">time_func</span>():
   <span class="pl-en">odeint</span>(<span class="pl-s1">numba_f</span>, <span class="pl-s1">u0</span>, <span class="pl-s1">t</span>,<span class="pl-s1">rtol</span> <span class="pl-c1">=</span> <span class="pl-c1">1e-8</span>, <span class="pl-s1">atol</span><span class="pl-c1">=</span><span class="pl-c1">1e-8</span>)

<span class="pl-s1">_t</span> <span class="pl-c1">=</span> <span class="pl-s1">timeit</span>.<span class="pl-v">Timer</span>(<span class="pl-s1">time_func</span>).<span class="pl-en">timeit</span>(<span class="pl-s1">number</span><span class="pl-c1">=</span><span class="pl-c1">100</span>)
<span class="pl-en">print</span>(<span class="pl-s1">_t</span>) <span class="pl-c"># 8.05035870000006 seconds</span></pre></div>
<p>which takes 8 seconds. Solving it with SciPy <code>solve_ivp</code> is:</p>
<div class="highlight highlight-source-python"><pre><span class="pl-k">import</span> <span class="pl-s1">numpy</span> <span class="pl-k">as</span> <span class="pl-s1">np</span>
<span class="pl-k">from</span> <span class="pl-s1">scipy</span>.<span class="pl-s1">integrate</span> <span class="pl-k">import</span> <span class="pl-s1">solve_ivp</span>
<span class="pl-k">import</span> <span class="pl-s1">timeit</span>
<span class="pl-k">import</span> <span class="pl-s1">numba</span>
<span class="pl-k">def</span> <span class="pl-en">f</span>(<span class="pl-s1">t</span>,<span class="pl-s1">u</span>):
    <span class="pl-s1">x</span>, <span class="pl-s1">y</span>, <span class="pl-s1">z</span> <span class="pl-c1">=</span> <span class="pl-s1">u</span>
    <span class="pl-k">return</span> [<span class="pl-c1">10.0</span> <span class="pl-c1">*</span> (<span class="pl-s1">y</span> <span class="pl-c1">-</span> <span class="pl-s1">x</span>), <span class="pl-s1">x</span> <span class="pl-c1">*</span> (<span class="pl-c1">28.0</span> <span class="pl-c1">-</span> <span class="pl-s1">z</span>) <span class="pl-c1">-</span> <span class="pl-s1">y</span>, <span class="pl-s1">x</span> <span class="pl-c1">*</span> <span class="pl-s1">y</span> <span class="pl-c1">-</span> <span class="pl-c1">2.66</span> <span class="pl-c1">*</span> <span class="pl-s1">z</span>]

<span class="pl-s1">u0</span> <span class="pl-c1">=</span> [<span class="pl-c1">1.0</span>,<span class="pl-c1">0.0</span>,<span class="pl-c1">0.0</span>]
<span class="pl-s1">tspan</span> <span class="pl-c1">=</span> (<span class="pl-c1">0.0</span>, <span class="pl-c1">100.0</span>)
<span class="pl-s1">t</span> <span class="pl-c1">=</span> <span class="pl-s1">np</span>.<span class="pl-en">linspace</span>(<span class="pl-c1">0</span>, <span class="pl-c1">100</span>, <span class="pl-c1">1001</span>)
<span class="pl-s1">sol</span> <span class="pl-c1">=</span> <span class="pl-en">solve_ivp</span>(<span class="pl-s1">f</span>,(<span class="pl-c1">0.0</span>, <span class="pl-c1">100.0</span>),<span class="pl-s1">u0</span>,<span class="pl-s1">t_eval</span><span class="pl-c1">=</span><span class="pl-s1">t</span>)

<span class="pl-k">def</span> <span class="pl-en">time_func</span>():
    <span class="pl-en">solve_ivp</span>(<span class="pl-s1">f</span>,(<span class="pl-c1">0.0</span>, <span class="pl-c1">100.0</span>),<span class="pl-s1">u0</span>,<span class="pl-s1">t_eval</span><span class="pl-c1">=</span><span class="pl-s1">t</span>)

<span class="pl-s1">_t</span> <span class="pl-c1">=</span> <span class="pl-s1">timeit</span>.<span class="pl-v">Timer</span>(<span class="pl-s1">time_func</span>).<span class="pl-en">timeit</span>(<span class="pl-s1">number</span><span class="pl-c1">=</span><span class="pl-c1">100</span>)
<span class="pl-en">print</span>(<span class="pl-s1">_t</span>) <span class="pl-c"># 15.978812399999999 seconds</span></pre></div>
<p>and</p>
<div class="highlight highlight-source-python"><pre><span class="pl-s1">numba_f</span> <span class="pl-c1">=</span> <span class="pl-s1">numba</span>.<span class="pl-en">jit</span>(<span class="pl-s1">f</span>,<span class="pl-s1">nopython</span><span class="pl-c1">=</span><span class="pl-c1">True</span>)
<span class="pl-s1">sol</span> <span class="pl-c1">=</span> <span class="pl-en">solve_ivp</span>(<span class="pl-s1">numba_f</span>,(<span class="pl-c1">0.0</span>, <span class="pl-c1">100.0</span>),<span class="pl-s1">u0</span>,<span class="pl-s1">t_eval</span><span class="pl-c1">=</span><span class="pl-s1">t</span>)

<span class="pl-k">def</span> <span class="pl-en">time_func</span>():
   <span class="pl-en">solve_ivp</span>(<span class="pl-s1">numba_f</span>,(<span class="pl-c1">0.0</span>, <span class="pl-c1">100.0</span>),<span class="pl-s1">u0</span>,<span class="pl-s1">t_eval</span><span class="pl-c1">=</span><span class="pl-s1">t</span>)

<span class="pl-s1">_t</span> <span class="pl-c1">=</span> <span class="pl-s1">timeit</span>.<span class="pl-v">Timer</span>(<span class="pl-s1">time_func</span>).<span class="pl-en">timeit</span>(<span class="pl-s1">number</span><span class="pl-c1">=</span><span class="pl-c1">100</span>)
<span class="pl-en">print</span>(<span class="pl-s1">_t</span>) <span class="pl-c"># 14.302745000000002 seconds</span></pre></div>
<p>which Numba seems to be unable to effectively accelerate. Together, this
showcases a 3x speedup over the best SciPy+Numba setup by using the Julia based
interface, (and 5x head-to-head via <code>solve_ivp</code>) so overhead concerns in future
benchmarks are gone because any measurement here is accelerating SciPy more
than standard accelerated use.</p>
<h2><a id="user-content-benchmarks" class="anchor" aria-hidden="true" href="#benchmarks"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Benchmarks</h2>
<p>The following benchmarks demonstrate a <strong>50x-1,000x performance advantage for the
pure-Julia methods over the Julia-accelerated (3x) SciPy ODE solvers</strong> across
a range of stiff and non-stiff ODEs. These were ran with Julia 1.2, MATLAB
2019B, deSolve 1.2.5, and SciPy 1.3.1 after verifying negligible overhead on
interop.</p>
<h4><a id="user-content-non-stiff-problem-1-lotka-volterra" class="anchor" aria-hidden="true" href="#non-stiff-problem-1-lotka-volterra"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Non-Stiff Problem 1: Lotka-Volterra</h4>
<div class="highlight highlight-source-julia"><pre>f <span class="pl-k">=</span> <span class="pl-c1">@ode_def_bare</span> LotkaVolterra <span class="pl-k">begin</span>
  dx <span class="pl-k">=</span> a<span class="pl-k">*</span>x <span class="pl-k">-</span> b<span class="pl-k">*</span>x<span class="pl-k">*</span>y
  dy <span class="pl-k">=</span> <span class="pl-k">-</span>c<span class="pl-k">*</span>y <span class="pl-k">+</span> d<span class="pl-k">*</span>x<span class="pl-k">*</span>y
<span class="pl-k">end</span> a b c d
p <span class="pl-k">=</span> [<span class="pl-c1">1.5</span>,<span class="pl-c1">1</span>,<span class="pl-c1">3</span>,<span class="pl-c1">1</span>]
tspan <span class="pl-k">=</span> (<span class="pl-c1">0.0</span>,<span class="pl-c1">10.0</span>)
u0 <span class="pl-k">=</span> [<span class="pl-c1">1.0</span>,<span class="pl-c1">1.0</span>]
prob <span class="pl-k">=</span> <span class="pl-c1">ODEProblem</span>(f,u0,tspan,p)
sol <span class="pl-k">=</span> <span class="pl-c1">solve</span>(prob,<span class="pl-c1">Vern7</span>(),abstol<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">14</span>,reltol<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">14</span>)
test_sol <span class="pl-k">=</span> <span class="pl-c1">TestSolution</span>(sol)

setups <span class="pl-k">=</span> [<span class="pl-c1">Dict</span>(<span class="pl-c1">:alg</span><span class="pl-k">=&gt;</span><span class="pl-c1">DP5</span>())
          <span class="pl-c1">Dict</span>(<span class="pl-c1">:alg</span><span class="pl-k">=&gt;</span><span class="pl-c1">dopri5</span>())
          <span class="pl-c1">Dict</span>(<span class="pl-c1">:alg</span><span class="pl-k">=&gt;</span><span class="pl-c1">Tsit5</span>())
          <span class="pl-c1">Dict</span>(<span class="pl-c1">:alg</span><span class="pl-k">=&gt;</span><span class="pl-c1">Vern7</span>())
          <span class="pl-c1">Dict</span>(<span class="pl-c1">:alg</span><span class="pl-k">=&gt;</span>MATLABDiffEq<span class="pl-k">.</span><span class="pl-c1">ode45</span>())
          <span class="pl-c1">Dict</span>(<span class="pl-c1">:alg</span><span class="pl-k">=&gt;</span>MATLABDiffEq<span class="pl-k">.</span><span class="pl-c1">ode113</span>())
          <span class="pl-c1">Dict</span>(<span class="pl-c1">:alg</span><span class="pl-k">=&gt;</span>SciPyDiffEq<span class="pl-k">.</span><span class="pl-c1">RK45</span>())
          <span class="pl-c1">Dict</span>(<span class="pl-c1">:alg</span><span class="pl-k">=&gt;</span>SciPyDiffEq<span class="pl-k">.</span><span class="pl-c1">LSODA</span>())
          <span class="pl-c1">Dict</span>(<span class="pl-c1">:alg</span><span class="pl-k">=&gt;</span>SciPyDiffEq<span class="pl-k">.</span><span class="pl-c1">odeint</span>())
          <span class="pl-c1">Dict</span>(<span class="pl-c1">:alg</span><span class="pl-k">=&gt;</span>deSolveDiffEq<span class="pl-k">.</span><span class="pl-c1">lsoda</span>())
          <span class="pl-c1">Dict</span>(<span class="pl-c1">:alg</span><span class="pl-k">=&gt;</span>deSolveDiffEq<span class="pl-k">.</span><span class="pl-c1">ode45</span>())
          <span class="pl-c1">Dict</span>(<span class="pl-c1">:alg</span><span class="pl-k">=&gt;</span><span class="pl-c1">CVODE_Adams</span>())
  ]

names <span class="pl-k">=</span> [
  <span class="pl-s"><span class="pl-pds">"</span>Julia: DP5<span class="pl-pds">"</span></span>
  <span class="pl-s"><span class="pl-pds">"</span>Hairer: dopri5<span class="pl-pds">"</span></span>
  <span class="pl-s"><span class="pl-pds">"</span>Julia: Tsit5<span class="pl-pds">"</span></span>
  <span class="pl-s"><span class="pl-pds">"</span>Julia: Vern7<span class="pl-pds">"</span></span>
  <span class="pl-s"><span class="pl-pds">"</span>MATLAB: ode45<span class="pl-pds">"</span></span>
  <span class="pl-s"><span class="pl-pds">"</span>MATLAB: ode113<span class="pl-pds">"</span></span>
  <span class="pl-s"><span class="pl-pds">"</span>SciPy: RK45<span class="pl-pds">"</span></span>
  <span class="pl-s"><span class="pl-pds">"</span>SciPy: LSODA<span class="pl-pds">"</span></span>
  <span class="pl-s"><span class="pl-pds">"</span>SciPy: odeint<span class="pl-pds">"</span></span>
  <span class="pl-s"><span class="pl-pds">"</span>deSolve: lsoda<span class="pl-pds">"</span></span>
  <span class="pl-s"><span class="pl-pds">"</span>deSolve: ode45<span class="pl-pds">"</span></span>
  <span class="pl-s"><span class="pl-pds">"</span>Sundials: Adams<span class="pl-pds">"</span></span>
  ]

abstols <span class="pl-k">=</span> <span class="pl-c1">1.0</span> <span class="pl-k">./</span> <span class="pl-c1">10.0</span> <span class="pl-k">.^</span> (<span class="pl-c1">6</span><span class="pl-k">:</span><span class="pl-c1">13</span>)
reltols <span class="pl-k">=</span> <span class="pl-c1">1.0</span> <span class="pl-k">./</span> <span class="pl-c1">10.0</span> <span class="pl-k">.^</span> (<span class="pl-c1">3</span><span class="pl-k">:</span><span class="pl-c1">10</span>)
wp <span class="pl-k">=</span> <span class="pl-c1">WorkPrecisionSet</span>(prob,abstols,reltols,setups;
                      names <span class="pl-k">=</span> names,
                      appxsol<span class="pl-k">=</span>test_sol,dense<span class="pl-k">=</span><span class="pl-c1">false</span>,
                      save_everystep<span class="pl-k">=</span><span class="pl-c1">false</span>,numruns<span class="pl-k">=</span><span class="pl-c1">100</span>,maxiters<span class="pl-k">=</span><span class="pl-c1">10000000</span>,
                      timeseries_errors<span class="pl-k">=</span><span class="pl-c1">false</span>,verbose<span class="pl-k">=</span><span class="pl-c1">false</span>)
<span class="pl-c1">plot</span>(wp,title<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Non-stiff 1: Lotka-Volterra<span class="pl-pds">"</span></span>)</pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="https://user-images.githubusercontent.com/1814174/71537082-ef42ac00-28e4-11ea-9acc-67dfd9990221.png"><img src="https://user-images.githubusercontent.com/1814174/71537082-ef42ac00-28e4-11ea-9acc-67dfd9990221.png" alt="" style="max-width:100%;"></a></p>
<h4><a id="user-content-non-stiff-problem-2-rigid-body" class="anchor" aria-hidden="true" href="#non-stiff-problem-2-rigid-body"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Non-Stiff Problem 2: Rigid Body</h4>
<div class="highlight highlight-source-julia"><pre>f <span class="pl-k">=</span> <span class="pl-c1">@ode_def_bare</span> RigidBodyBench <span class="pl-k">begin</span>
  dy1  <span class="pl-k">=</span> <span class="pl-k">-</span><span class="pl-c1">2</span><span class="pl-k">*</span>y2<span class="pl-k">*</span>y3
  dy2  <span class="pl-k">=</span> <span class="pl-c1">1.25</span><span class="pl-k">*</span>y1<span class="pl-k">*</span>y3
  dy3  <span class="pl-k">=</span> <span class="pl-k">-</span><span class="pl-c1">0.5</span><span class="pl-k">*</span>y1<span class="pl-k">*</span>y2 <span class="pl-k">+</span> <span class="pl-c1">0.25</span><span class="pl-k">*</span><span class="pl-c1">sin</span>(t)<span class="pl-k">^</span><span class="pl-c1">2</span>
<span class="pl-k">end</span>
prob <span class="pl-k">=</span> <span class="pl-c1">ODEProblem</span>(f,[<span class="pl-c1">1.0</span>;<span class="pl-c1">0.0</span>;<span class="pl-c1">0.9</span>],(<span class="pl-c1">0.0</span>,<span class="pl-c1">100.0</span>))
sol <span class="pl-k">=</span> <span class="pl-c1">solve</span>(prob,<span class="pl-c1">Vern7</span>(),abstol<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">14</span>,reltol<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">14</span>)
test_sol <span class="pl-k">=</span> <span class="pl-c1">TestSolution</span>(sol)

setups <span class="pl-k">=</span> [<span class="pl-c1">Dict</span>(<span class="pl-c1">:alg</span><span class="pl-k">=&gt;</span><span class="pl-c1">DP5</span>())
          <span class="pl-c1">Dict</span>(<span class="pl-c1">:alg</span><span class="pl-k">=&gt;</span><span class="pl-c1">dopri5</span>())
          <span class="pl-c1">Dict</span>(<span class="pl-c1">:alg</span><span class="pl-k">=&gt;</span><span class="pl-c1">Tsit5</span>())
          <span class="pl-c1">Dict</span>(<span class="pl-c1">:alg</span><span class="pl-k">=&gt;</span><span class="pl-c1">Vern7</span>())
          <span class="pl-c1">Dict</span>(<span class="pl-c1">:alg</span><span class="pl-k">=&gt;</span>MATLABDiffEq<span class="pl-k">.</span><span class="pl-c1">ode45</span>())
          <span class="pl-c1">Dict</span>(<span class="pl-c1">:alg</span><span class="pl-k">=&gt;</span>MATLABDiffEq<span class="pl-k">.</span><span class="pl-c1">ode113</span>())
          <span class="pl-c1">Dict</span>(<span class="pl-c1">:alg</span><span class="pl-k">=&gt;</span>SciPyDiffEq<span class="pl-k">.</span><span class="pl-c1">RK45</span>())
          <span class="pl-c1">Dict</span>(<span class="pl-c1">:alg</span><span class="pl-k">=&gt;</span>SciPyDiffEq<span class="pl-k">.</span><span class="pl-c1">LSODA</span>())
          <span class="pl-c1">Dict</span>(<span class="pl-c1">:alg</span><span class="pl-k">=&gt;</span>SciPyDiffEq<span class="pl-k">.</span><span class="pl-c1">odeint</span>())
          <span class="pl-c1">Dict</span>(<span class="pl-c1">:alg</span><span class="pl-k">=&gt;</span>deSolveDiffEq<span class="pl-k">.</span><span class="pl-c1">lsoda</span>())
          <span class="pl-c1">Dict</span>(<span class="pl-c1">:alg</span><span class="pl-k">=&gt;</span>deSolveDiffEq<span class="pl-k">.</span><span class="pl-c1">ode45</span>())
          <span class="pl-c1">Dict</span>(<span class="pl-c1">:alg</span><span class="pl-k">=&gt;</span><span class="pl-c1">CVODE_Adams</span>())
  ]

names <span class="pl-k">=</span> [
  <span class="pl-s"><span class="pl-pds">"</span>Julia: DP5<span class="pl-pds">"</span></span>
  <span class="pl-s"><span class="pl-pds">"</span>Hairer: dopri5<span class="pl-pds">"</span></span>
  <span class="pl-s"><span class="pl-pds">"</span>Julia: Tsit5<span class="pl-pds">"</span></span>
  <span class="pl-s"><span class="pl-pds">"</span>Julia: Vern7<span class="pl-pds">"</span></span>
  <span class="pl-s"><span class="pl-pds">"</span>MATLAB: ode45<span class="pl-pds">"</span></span>
  <span class="pl-s"><span class="pl-pds">"</span>MATLAB: ode113<span class="pl-pds">"</span></span>
  <span class="pl-s"><span class="pl-pds">"</span>SciPy: RK45<span class="pl-pds">"</span></span>
  <span class="pl-s"><span class="pl-pds">"</span>SciPy: LSODA<span class="pl-pds">"</span></span>
  <span class="pl-s"><span class="pl-pds">"</span>SciPy: odeint<span class="pl-pds">"</span></span>
  <span class="pl-s"><span class="pl-pds">"</span>deSolve: lsoda<span class="pl-pds">"</span></span>
  <span class="pl-s"><span class="pl-pds">"</span>deSolve: ode45<span class="pl-pds">"</span></span>
  <span class="pl-s"><span class="pl-pds">"</span>Sundials: Adams<span class="pl-pds">"</span></span>
  ]

abstols <span class="pl-k">=</span> <span class="pl-c1">1.0</span> <span class="pl-k">./</span> <span class="pl-c1">10.0</span> <span class="pl-k">.^</span> (<span class="pl-c1">6</span><span class="pl-k">:</span><span class="pl-c1">13</span>)
reltols <span class="pl-k">=</span> <span class="pl-c1">1.0</span> <span class="pl-k">./</span> <span class="pl-c1">10.0</span> <span class="pl-k">.^</span> (<span class="pl-c1">3</span><span class="pl-k">:</span><span class="pl-c1">10</span>)
wp <span class="pl-k">=</span> <span class="pl-c1">WorkPrecisionSet</span>(prob,abstols,reltols,setups;
                      names <span class="pl-k">=</span> names,
                      appxsol<span class="pl-k">=</span>test_sol,dense<span class="pl-k">=</span><span class="pl-c1">false</span>,
                      save_everystep<span class="pl-k">=</span><span class="pl-c1">false</span>,numruns<span class="pl-k">=</span><span class="pl-c1">100</span>,maxiters<span class="pl-k">=</span><span class="pl-c1">10000000</span>,
                      timeseries_errors<span class="pl-k">=</span><span class="pl-c1">false</span>,verbose<span class="pl-k">=</span><span class="pl-c1">false</span>)
<span class="pl-c1">plot</span>(wp,title<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Non-stiff 2: Rigid-Body<span class="pl-pds">"</span></span>)</pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="https://user-images.githubusercontent.com/1814174/71537083-ef42ac00-28e4-11ea-8dc7-a5dca0518baf.png"><img src="https://user-images.githubusercontent.com/1814174/71537083-ef42ac00-28e4-11ea-8dc7-a5dca0518baf.png" alt="" style="max-width:100%;"></a></p>
<h4><a id="user-content-stiff-problem-1-rober" class="anchor" aria-hidden="true" href="#stiff-problem-1-rober"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Stiff Problem 1: ROBER</h4>
<div class="highlight highlight-source-julia"><pre>rober <span class="pl-k">=</span> <span class="pl-c1">@ode_def</span> <span class="pl-k">begin</span>
  dy₁ <span class="pl-k">=</span> <span class="pl-k">-</span>k₁<span class="pl-k">*</span>y₁<span class="pl-k">+</span>k₃<span class="pl-k">*</span>y₂<span class="pl-k">*</span>y₃
  dy₂ <span class="pl-k">=</span>  k₁<span class="pl-k">*</span>y₁<span class="pl-k">-</span>k₂<span class="pl-k">*</span>y₂<span class="pl-k">^</span><span class="pl-c1">2</span><span class="pl-k">-</span>k₃<span class="pl-k">*</span>y₂<span class="pl-k">*</span>y₃
  dy₃ <span class="pl-k">=</span>  k₂<span class="pl-k">*</span>y₂<span class="pl-k">^</span><span class="pl-c1">2</span>
<span class="pl-k">end</span> k₁ k₂ k₃
prob <span class="pl-k">=</span> <span class="pl-c1">ODEProblem</span>(rober,[<span class="pl-c1">1.0</span>,<span class="pl-c1">0.0</span>,<span class="pl-c1">0.0</span>],(<span class="pl-c1">0.0</span>,<span class="pl-c1">1e5</span>),[<span class="pl-c1">0.04</span>,<span class="pl-c1">3e7</span>,<span class="pl-c1">1e4</span>])
sol <span class="pl-k">=</span> <span class="pl-c1">solve</span>(prob,<span class="pl-c1">CVODE_BDF</span>(),abstol<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">14</span>,reltol<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">14</span>)
test_sol <span class="pl-k">=</span> <span class="pl-c1">TestSolution</span>(sol)

abstols <span class="pl-k">=</span> <span class="pl-c1">1.0</span> <span class="pl-k">./</span> <span class="pl-c1">10.0</span> <span class="pl-k">.^</span> (<span class="pl-c1">7</span><span class="pl-k">:</span><span class="pl-c1">8</span>)
reltols <span class="pl-k">=</span> <span class="pl-c1">1.0</span> <span class="pl-k">./</span> <span class="pl-c1">10.0</span> <span class="pl-k">.^</span> (<span class="pl-c1">3</span><span class="pl-k">:</span><span class="pl-c1">4</span>);

setups <span class="pl-k">=</span> [<span class="pl-c1">Dict</span>(<span class="pl-c1">:alg</span><span class="pl-k">=&gt;</span><span class="pl-c1">Rosenbrock23</span>())
          <span class="pl-c1">Dict</span>(<span class="pl-c1">:alg</span><span class="pl-k">=&gt;</span><span class="pl-c1">TRBDF2</span>())
          <span class="pl-c1">Dict</span>(<span class="pl-c1">:alg</span><span class="pl-k">=&gt;</span><span class="pl-c1">RadauIIA5</span>())
          <span class="pl-c1">Dict</span>(<span class="pl-c1">:alg</span><span class="pl-k">=&gt;</span><span class="pl-c1">rodas</span>())
          <span class="pl-c1">Dict</span>(<span class="pl-c1">:alg</span><span class="pl-k">=&gt;</span><span class="pl-c1">radau</span>())
          <span class="pl-c1">Dict</span>(<span class="pl-c1">:alg</span><span class="pl-k">=&gt;</span>MATLABDiffEq<span class="pl-k">.</span><span class="pl-c1">ode23s</span>())
          <span class="pl-c1">Dict</span>(<span class="pl-c1">:alg</span><span class="pl-k">=&gt;</span>MATLABDiffEq<span class="pl-k">.</span><span class="pl-c1">ode15s</span>())
          <span class="pl-c1">Dict</span>(<span class="pl-c1">:alg</span><span class="pl-k">=&gt;</span>SciPyDiffEq<span class="pl-k">.</span><span class="pl-c1">LSODA</span>())
          <span class="pl-c1">Dict</span>(<span class="pl-c1">:alg</span><span class="pl-k">=&gt;</span>SciPyDiffEq<span class="pl-k">.</span><span class="pl-c1">BDF</span>())
          <span class="pl-c1">Dict</span>(<span class="pl-c1">:alg</span><span class="pl-k">=&gt;</span>SciPyDiffEq<span class="pl-k">.</span><span class="pl-c1">odeint</span>())
          <span class="pl-c1">Dict</span>(<span class="pl-c1">:alg</span><span class="pl-k">=&gt;</span>deSolveDiffEq<span class="pl-k">.</span><span class="pl-c1">lsoda</span>())
          <span class="pl-c1">Dict</span>(<span class="pl-c1">:alg</span><span class="pl-k">=&gt;</span><span class="pl-c1">CVODE_BDF</span>())
          ]

names <span class="pl-k">=</span> [
  <span class="pl-s"><span class="pl-pds">"</span>Julia: Rosenbrock23<span class="pl-pds">"</span></span>
  <span class="pl-s"><span class="pl-pds">"</span>Julia: TRBDF2<span class="pl-pds">"</span></span>
  <span class="pl-s"><span class="pl-pds">"</span>Julia: radau<span class="pl-pds">"</span></span>
  <span class="pl-s"><span class="pl-pds">"</span>Hairer: rodas<span class="pl-pds">"</span></span>
  <span class="pl-s"><span class="pl-pds">"</span>Hairer: radau<span class="pl-pds">"</span></span>
  <span class="pl-s"><span class="pl-pds">"</span>MATLAB: ode23s<span class="pl-pds">"</span></span>
  <span class="pl-s"><span class="pl-pds">"</span>MATLAB: ode15s<span class="pl-pds">"</span></span>
  <span class="pl-s"><span class="pl-pds">"</span>SciPy: LSODA<span class="pl-pds">"</span></span>
  <span class="pl-s"><span class="pl-pds">"</span>SciPy: BDF<span class="pl-pds">"</span></span>
  <span class="pl-s"><span class="pl-pds">"</span>SciPy: odeint<span class="pl-pds">"</span></span>
  <span class="pl-s"><span class="pl-pds">"</span>deSolve: lsoda<span class="pl-pds">"</span></span>
  <span class="pl-s"><span class="pl-pds">"</span>Sundials: CVODE<span class="pl-pds">"</span></span>
  ]

wp <span class="pl-k">=</span> <span class="pl-c1">WorkPrecisionSet</span>(prob,abstols,reltols,setups;
                      names <span class="pl-k">=</span> names,print_names <span class="pl-k">=</span> <span class="pl-c1">true</span>,
                      dense<span class="pl-k">=</span><span class="pl-c1">false</span>,verbose <span class="pl-k">=</span> <span class="pl-c1">false</span>,
                      save_everystep<span class="pl-k">=</span><span class="pl-c1">false</span>,appxsol<span class="pl-k">=</span>test_sol,
                      maxiters<span class="pl-k">=</span><span class="pl-c1">Int</span>(<span class="pl-c1">1e5</span>))
<span class="pl-c1">plot</span>(wp,title<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Stiff 1: ROBER<span class="pl-pds">"</span></span>, legend<span class="pl-k">=</span><span class="pl-c1">:topleft</span>)</pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="https://user-images.githubusercontent.com/1814174/71537080-ef42ac00-28e4-11ea-9abd-37631cd18ad9.png"><img src="https://user-images.githubusercontent.com/1814174/71537080-ef42ac00-28e4-11ea-9abd-37631cd18ad9.png" alt="" style="max-width:100%;"></a></p>
<h4><a id="user-content-stiff-problem-2-hires" class="anchor" aria-hidden="true" href="#stiff-problem-2-hires"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Stiff Problem 2: HIRES</h4>
<div class="highlight highlight-source-julia"><pre>f <span class="pl-k">=</span> <span class="pl-c1">@ode_def</span> Hires <span class="pl-k">begin</span>
  dy1 <span class="pl-k">=</span> <span class="pl-k">-</span><span class="pl-c1">1.71</span><span class="pl-k">*</span>y1 <span class="pl-k">+</span> <span class="pl-c1">0.43</span><span class="pl-k">*</span>y2 <span class="pl-k">+</span> <span class="pl-c1">8.32</span><span class="pl-k">*</span>y3 <span class="pl-k">+</span> <span class="pl-c1">0.0007</span>
  dy2 <span class="pl-k">=</span> <span class="pl-c1">1.71</span><span class="pl-k">*</span>y1 <span class="pl-k">-</span> <span class="pl-c1">8.75</span><span class="pl-k">*</span>y2
  dy3 <span class="pl-k">=</span> <span class="pl-k">-</span><span class="pl-c1">10.03</span><span class="pl-k">*</span>y3 <span class="pl-k">+</span> <span class="pl-c1">0.43</span><span class="pl-k">*</span>y4 <span class="pl-k">+</span> <span class="pl-c1">0.035</span><span class="pl-k">*</span>y5
  dy4 <span class="pl-k">=</span> <span class="pl-c1">8.32</span><span class="pl-k">*</span>y2 <span class="pl-k">+</span> <span class="pl-c1">1.71</span><span class="pl-k">*</span>y3 <span class="pl-k">-</span> <span class="pl-c1">1.12</span><span class="pl-k">*</span>y4
  dy5 <span class="pl-k">=</span> <span class="pl-k">-</span><span class="pl-c1">1.745</span><span class="pl-k">*</span>y5 <span class="pl-k">+</span> <span class="pl-c1">0.43</span><span class="pl-k">*</span>y6 <span class="pl-k">+</span> <span class="pl-c1">0.43</span><span class="pl-k">*</span>y7
  dy6 <span class="pl-k">=</span> <span class="pl-k">-</span><span class="pl-c1">280.0</span><span class="pl-k">*</span>y6<span class="pl-k">*</span>y8 <span class="pl-k">+</span> <span class="pl-c1">0.69</span><span class="pl-k">*</span>y4 <span class="pl-k">+</span> <span class="pl-c1">1.71</span><span class="pl-k">*</span>y5 <span class="pl-k">-</span>
           <span class="pl-c1">0.43</span><span class="pl-k">*</span>y6 <span class="pl-k">+</span> <span class="pl-c1">0.69</span><span class="pl-k">*</span>y7
  dy7 <span class="pl-k">=</span> <span class="pl-c1">280.0</span><span class="pl-k">*</span>y6<span class="pl-k">*</span>y8 <span class="pl-k">-</span> <span class="pl-c1">1.81</span><span class="pl-k">*</span>y7
  dy8 <span class="pl-k">=</span> <span class="pl-k">-</span><span class="pl-c1">280.0</span><span class="pl-k">*</span>y6<span class="pl-k">*</span>y8 <span class="pl-k">+</span> <span class="pl-c1">1.81</span><span class="pl-k">*</span>y7
<span class="pl-k">end</span>

u0 <span class="pl-k">=</span> <span class="pl-c1">zeros</span>(<span class="pl-c1">8</span>)
u0[<span class="pl-c1">1</span>] <span class="pl-k">=</span> <span class="pl-c1">1</span>
u0[<span class="pl-c1">8</span>] <span class="pl-k">=</span> <span class="pl-c1">0.0057</span>
prob <span class="pl-k">=</span> <span class="pl-c1">ODEProblem</span>(f,u0,(<span class="pl-c1">0.0</span>,<span class="pl-c1">321.8122</span>))

sol <span class="pl-k">=</span> <span class="pl-c1">solve</span>(prob,<span class="pl-c1">Rodas5</span>(),abstol<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">14</span>,reltol<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">14</span>)
test_sol <span class="pl-k">=</span> <span class="pl-c1">TestSolution</span>(sol)

abstols <span class="pl-k">=</span> <span class="pl-c1">1.0</span> <span class="pl-k">./</span> <span class="pl-c1">10.0</span> <span class="pl-k">.^</span> (<span class="pl-c1">5</span><span class="pl-k">:</span><span class="pl-c1">8</span>)
reltols <span class="pl-k">=</span> <span class="pl-c1">1.0</span> <span class="pl-k">./</span> <span class="pl-c1">10.0</span> <span class="pl-k">.^</span> (<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">4</span>);

setups <span class="pl-k">=</span> [<span class="pl-c1">Dict</span>(<span class="pl-c1">:alg</span><span class="pl-k">=&gt;</span><span class="pl-c1">Rosenbrock23</span>())
          <span class="pl-c1">Dict</span>(<span class="pl-c1">:alg</span><span class="pl-k">=&gt;</span><span class="pl-c1">TRBDF2</span>())
          <span class="pl-c1">Dict</span>(<span class="pl-c1">:alg</span><span class="pl-k">=&gt;</span><span class="pl-c1">RadauIIA5</span>())
          <span class="pl-c1">Dict</span>(<span class="pl-c1">:alg</span><span class="pl-k">=&gt;</span><span class="pl-c1">rodas</span>())
          <span class="pl-c1">Dict</span>(<span class="pl-c1">:alg</span><span class="pl-k">=&gt;</span><span class="pl-c1">radau</span>())
          <span class="pl-c1">Dict</span>(<span class="pl-c1">:alg</span><span class="pl-k">=&gt;</span>MATLABDiffEq<span class="pl-k">.</span><span class="pl-c1">ode23s</span>())
          <span class="pl-c1">Dict</span>(<span class="pl-c1">:alg</span><span class="pl-k">=&gt;</span>MATLABDiffEq<span class="pl-k">.</span><span class="pl-c1">ode15s</span>())
          <span class="pl-c1">Dict</span>(<span class="pl-c1">:alg</span><span class="pl-k">=&gt;</span>SciPyDiffEq<span class="pl-k">.</span><span class="pl-c1">LSODA</span>())
          <span class="pl-c1">Dict</span>(<span class="pl-c1">:alg</span><span class="pl-k">=&gt;</span>SciPyDiffEq<span class="pl-k">.</span><span class="pl-c1">BDF</span>())
          <span class="pl-c1">Dict</span>(<span class="pl-c1">:alg</span><span class="pl-k">=&gt;</span>SciPyDiffEq<span class="pl-k">.</span><span class="pl-c1">odeint</span>())
          <span class="pl-c1">Dict</span>(<span class="pl-c1">:alg</span><span class="pl-k">=&gt;</span>deSolveDiffEq<span class="pl-k">.</span><span class="pl-c1">lsoda</span>())
          <span class="pl-c1">Dict</span>(<span class="pl-c1">:alg</span><span class="pl-k">=&gt;</span><span class="pl-c1">CVODE_BDF</span>())
          ]

names <span class="pl-k">=</span> [
  <span class="pl-s"><span class="pl-pds">"</span>Julia: Rosenbrock23<span class="pl-pds">"</span></span>
  <span class="pl-s"><span class="pl-pds">"</span>Julia: TRBDF2<span class="pl-pds">"</span></span>
  <span class="pl-s"><span class="pl-pds">"</span>Julia: radau<span class="pl-pds">"</span></span>
  <span class="pl-s"><span class="pl-pds">"</span>Hairer: rodas<span class="pl-pds">"</span></span>
  <span class="pl-s"><span class="pl-pds">"</span>Hairer: radau<span class="pl-pds">"</span></span>
  <span class="pl-s"><span class="pl-pds">"</span>MATLAB: ode23s<span class="pl-pds">"</span></span>
  <span class="pl-s"><span class="pl-pds">"</span>MATLAB: ode15s<span class="pl-pds">"</span></span>
  <span class="pl-s"><span class="pl-pds">"</span>SciPy: LSODA<span class="pl-pds">"</span></span>
  <span class="pl-s"><span class="pl-pds">"</span>SciPy: BDF<span class="pl-pds">"</span></span>
  <span class="pl-s"><span class="pl-pds">"</span>SciPy: odeint<span class="pl-pds">"</span></span>
  <span class="pl-s"><span class="pl-pds">"</span>deSolve: lsoda<span class="pl-pds">"</span></span>
  <span class="pl-s"><span class="pl-pds">"</span>Sundials: CVODE<span class="pl-pds">"</span></span>
  ]

wp <span class="pl-k">=</span> <span class="pl-c1">WorkPrecisionSet</span>(prob,abstols,reltols,setups;
                      names <span class="pl-k">=</span> names,print_names <span class="pl-k">=</span> <span class="pl-c1">true</span>,
                      save_everystep<span class="pl-k">=</span><span class="pl-c1">false</span>,appxsol<span class="pl-k">=</span>test_sol,
                      maxiters<span class="pl-k">=</span><span class="pl-c1">Int</span>(<span class="pl-c1">1e5</span>),numruns<span class="pl-k">=</span><span class="pl-c1">100</span>)
<span class="pl-c1">plot</span>(wp,title<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Stiff 2: Hires<span class="pl-pds">"</span></span>,legend<span class="pl-k">=</span><span class="pl-c1">:topleft</span>)</pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="https://user-images.githubusercontent.com/1814174/71537081-ef42ac00-28e4-11ea-950f-59c762ce9a69.png"><img src="https://user-images.githubusercontent.com/1814174/71537081-ef42ac00-28e4-11ea-950f-59c762ce9a69.png" alt="" style="max-width:100%;"></a></p>
</article></div>