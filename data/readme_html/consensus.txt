<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-consensusjl" class="anchor" aria-hidden="true" href="#consensusjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Consensus.jl</h1>
<p dir="auto"><a href="https://zenodo.org/badge/latestdoi/615268479" rel="nofollow"><img src="https://camo.githubusercontent.com/ebe5ec67bddb3a068bb6f9f7329a4e2f3e40bd44f8970b91c4fbf349712af0e7/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f3631353236383437392e737667" alt="DOI" data-canonical-src="https://zenodo.org/badge/615268479.svg" style="max-width: 100%;"></a>
<a href="https://github.com/rafaelbailo/Consensus.jl/actions/workflows/CI.yml"><img src="https://github.com/rafaelbailo/Consensus.jl/actions/workflows/CI.yml/badge.svg" alt="CI" style="max-width: 100%;"></a></p>
<p dir="auto"><strong>Consensus.jl</strong> is a lightweight, gradient-free, stochastic optimisation package for Julia. It uses <em>Consensus-Based Optimisation</em> (CBO), a flavour of <em>Particle Swarm Optimisation</em> (PSO) first introduced by <a href="http://dx.doi.org/10.1142/S0218202517400061" rel="nofollow">R. Pinnau, C. Totzeck, O. Tse, and S. Martin (2017)</a>. This is a method of global optimisation particularly suited for rough functions, where gradient descent would fail. It is also useful for optimisation in higher dimensions.</p>
<p dir="auto">This package was created and is developed by <a href="https://rafaelbailo.com/" rel="nofollow">Dr Rafael Bailo</a>.</p>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<p dir="auto">The basic command of the library is <code>minimise(f, x0)</code>, where <code>f</code> is the function you want to minimise, and <code>x0</code> is an initial guess. It returns an approximation of the point <code>x</code> that minimises <code>f</code>.</p>
<p dir="auto">You have two options to define the objective function:</p>
<ul dir="auto">
<li><code>x</code> is of type <code>Real</code>, and <code>f</code> is defined as <code>f(x::Real) = ...</code>.</li>
<li><code>x</code> is of type <code>AbstractVector{&lt;:Real}</code>, and <code>f</code> is defined as <code>f(x::AbstractVector{&lt;:Real}) = ...</code>.</li>
</ul>
<h3 dir="auto"><a id="user-content-a-trivial-example" class="anchor" aria-hidden="true" href="#a-trivial-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>A trivial example</h3>
<p dir="auto">We can demonstrate the functionality of the library by minimising the function <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="ccc851b361dd4fb2aeb2b3a24250de06">$f(x)=x^2$</math-renderer>. If you suspect the minimiser is near <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="ccc851b361dd4fb2aeb2b3a24250de06">$x=1$</math-renderer>, you can simply run</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Consensus
f(x) = x^2;
x0 = 1;
x = minimise(f, x0)"><pre><span class="pl-k">using</span> Consensus
<span class="pl-en">f</span>(x) <span class="pl-k">=</span> x<span class="pl-k">^</span><span class="pl-c1">2</span>;
x0 <span class="pl-k">=</span> <span class="pl-c1">1</span>;
x <span class="pl-k">=</span> <span class="pl-c1">minimise</span>(f, x0)</pre></div>
<p dir="auto">to obtain</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; x
1-element Vector{Float64}:
 0.08057420724239409"><pre>julia<span class="pl-k">&gt;</span> x
<span class="pl-c1">1</span><span class="pl-k">-</span>element Vector{Float64}<span class="pl-k">:</span>
 <span class="pl-c1">0.08057420724239409</span></pre></div>
<p dir="auto">Your <code>x</code> may vary, since the method is stochastic. The answer should be close, but not exactly equal, to zero.</p>
<p dir="auto">Behind the scenes, <strong>Consensus.jl</strong> is running the algorithm using <code>N = 50</code> particles per realisation. It runs the <code>M = 100</code> realisations, and returns the averaged result. If you want to parallelise these runs, simply start julia with multiple threads, e.g.:</p>
<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ julia --threads 4"><pre>$ julia --threads 4</pre></div>
<p dir="auto"><strong>Consensus.jl</strong> will then automatically parallelise the optimisation. This is thanks to the functionality of <a href="https://github.com/SciML/StochasticDiffEq.jl">StochasticDiffEq.jl</a>, which is used under the hood to implement the algorithm.</p>
<h3 dir="auto">
<a id="user-content-advanced-options" class="anchor" aria-hidden="true" href="#advanced-options"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Advanced options</h3>
<p dir="auto">There are several parameters that can be customised. The most important are:</p>
<ul dir="auto">
<li>
<code>N</code>: the number of particles per realisation.</li>
<li>
<code>M</code>: the number of realisations, whose results are averaged in the end.</li>
<li>
<code>T</code>: the run time of each realisation. The longer this is, the better the results, but the longer you have to wait for them.</li>
<li>
<code>Δt</code>: the discretisation step of the realisations. Smaller is more accurate, but slower. If the optimisation fails (returns <code>Inf</code> or <code>NaN</code>), making this smaller is likely to help.</li>
<li>
<code>R</code>: the radius of the initial sampling area, which is centred around your intiial guess <code>x0</code>.</li>
<li>
<code>α</code>: the exponential weight. The higher this is, the better the results, but you might need to decrease <code>Δt</code> if <code>α</code> is too large.</li>
</ul>
<p dir="auto">We can run the previous example with custom parameters by calling</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; x2 = minimise(f, x0, N = 30, M = 100, T = 10, Δt = 0.5, R = 2, α = 500)
1-element Vector{Float64}:
 0.0017988128895332278"><pre>julia<span class="pl-k">&gt;</span> x2 <span class="pl-k">=</span> <span class="pl-c1">minimise</span>(f, x0, N <span class="pl-k">=</span> <span class="pl-c1">30</span>, M <span class="pl-k">=</span> <span class="pl-c1">100</span>, T <span class="pl-k">=</span> <span class="pl-c1">10</span>, Δt <span class="pl-k">=</span> <span class="pl-c1">0.5</span>, R <span class="pl-k">=</span> <span class="pl-c1">2</span>, α <span class="pl-k">=</span> <span class="pl-c1">500</span>)
<span class="pl-c1">1</span><span class="pl-k">-</span>element Vector{Float64}<span class="pl-k">:</span>
 <span class="pl-c1">0.0017988128895332278</span></pre></div>
<p dir="auto">For the other parameters, please refer to the paper of <a href="http://dx.doi.org/10.1142/S0218202517400061" rel="nofollow">R. Pinnau, C. Totzeck, O. Tse, and S. Martin (2017)</a>. You can see the default values of the parameters by evaluating <code>Consensus.DEFAULT_OPTIONS</code>.</p>
<h3 dir="auto">
<a id="user-content-non-trivial-examples" class="anchor" aria-hidden="true" href="#non-trivial-examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Non-trivial examples</h3>
<p dir="auto">Since CBO is not a gradient method, it will perform well on rough functions. <strong>Consensus.jl</strong> implements two well-known test cases in any number of dimensions:</p>
<ul dir="auto">
<li>The <a href="https://en.wikipedia.org/wiki/Ackley_function" rel="nofollow">Ackley function</a>.</li>
<li>The <a href="https://en.wikipedia.org/wiki/Rastrigin_function" rel="nofollow">Rastrigin function</a>.</li>
</ul>
<p dir="auto">We can minimise the Ackley function in two dimensions, starting near the point <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="ccc851b361dd4fb2aeb2b3a24250de06">$x=(1,1)$</math-renderer>, by running</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; x3 = minimise(AckleyFunction, [1, 1])
2-element Vector{Float64}:
 0.0024744433653736513
 0.030533227060295706"><pre>julia<span class="pl-k">&gt;</span> x3 <span class="pl-k">=</span> <span class="pl-c1">minimise</span>(AckleyFunction, [<span class="pl-c1">1</span>, <span class="pl-c1">1</span>])
<span class="pl-c1">2</span><span class="pl-k">-</span>element Vector{Float64}<span class="pl-k">:</span>
 <span class="pl-c1">0.0024744433653736513</span>
 <span class="pl-c1">0.030533227060295706</span></pre></div>
<p dir="auto">We can also minimise the Rastrigin function in five dimensions, starting at a random point, with more realisations, and with a larger radius, by running</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; x4 = minimise(RastriginFunction, rand(5), M = 200, R = 5)
5-element Vector{Float64}:
 -0.11973689657393186
  0.07882427348951951
  0.18515501300052115
 -0.06532360247574359
 -0.13132340855939928"><pre>julia<span class="pl-k">&gt;</span> x4 <span class="pl-k">=</span> <span class="pl-c1">minimise</span>(RastriginFunction, <span class="pl-c1">rand</span>(<span class="pl-c1">5</span>), M <span class="pl-k">=</span> <span class="pl-c1">200</span>, R <span class="pl-k">=</span> <span class="pl-c1">5</span>)
<span class="pl-c1">5</span><span class="pl-k">-</span>element Vector{Float64}<span class="pl-k">:</span>
 <span class="pl-k">-</span><span class="pl-c1">0.11973689657393186</span>
  <span class="pl-c1">0.07882427348951951</span>
  <span class="pl-c1">0.18515501300052115</span>
 <span class="pl-k">-</span><span class="pl-c1">0.06532360247574359</span>
 <span class="pl-k">-</span><span class="pl-c1">0.13132340855939928</span></pre></div>
<h3 dir="auto">
<a id="user-content-auxiliary-commands" class="anchor" aria-hidden="true" href="#auxiliary-commands"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Auxiliary commands</h3>
<p dir="auto">There is a <code>maximise(f, x0)</code> method, which simply minimises the function <code>g(x) = -f(x)</code>. Also, if you're that way inclined, you can call <code>minimize(f, x0)</code> and <code>maximize(f, x0)</code>, in the American spelling.</p>
</article></div>