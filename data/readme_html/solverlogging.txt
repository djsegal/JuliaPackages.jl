<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p><a href="https://travis-ci.com/bjack205/SolverLogging.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/2e350e558fb6285f5d25573def159b501c9042ded8301161a1fa077536003f5a/68747470733a2f2f7472617669732d63692e636f6d2f626a61636b3230352f536f6c7665724c6f6767696e672e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/bjack205/SolverLogging.jl.svg?branch=master" style="max-width:100%;"></a></p>
<h1><a id="user-content-solverloggingjl" class="anchor" aria-hidden="true" href="#solverloggingjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>SolverLogging.jl</h1>
<p>This package is built to output tabularized logging information from possibly different levels during an optimization solve.
Each logging level has an associated set of fields that can be written to between outputs to the terminal, when all the fields
are printed on a single line.</p>
<h2><a id="user-content-getting-started" class="anchor" aria-hidden="true" href="#getting-started"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Getting Started</h2>
<h3><a id="user-content-starting-with-a-empty-solver" class="anchor" aria-hidden="true" href="#starting-with-a-empty-solver"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Starting with a Empty Solver</h3>
<p>The easiest way to get started is by building a solver with "empty" levels.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="logger = SolverLogger(InnerLoop)
add_level!(logger, InnerLoop, print_color=:green, indent=4)
add_level!(logger, OuterLoop, print_color=:yellow)
"><pre>logger <span class="pl-k">=</span> <span class="pl-c1">SolverLogger</span>(InnerLoop)
<span class="pl-c1">add_level!</span>(logger, InnerLoop, print_color<span class="pl-k">=</span><span class="pl-c1">:green</span>, indent<span class="pl-k">=</span><span class="pl-c1">4</span>)
<span class="pl-c1">add_level!</span>(logger, OuterLoop, print_color<span class="pl-k">=</span><span class="pl-c1">:yellow</span>)</pre></div>
<p>The first line creates a new <code>SolverLogger</code> with a minimum print level of <code>InnerLoop</code>. The next two lines "register" two
different log levels with the logger, and specify the color and indentation of the output.</p>
<p>We can now log a few pieces of data we'd like to output at the current iteration</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="with_logger(logger) do
    @logmsg InnerLoop :iter value=1 width=4
    @logmsg InnerLoop :cost value=10.2 width=10
    @logmsg InnerLoop :violation value=0.2 width=12
    @logmsg InnerLoop &quot;first iteration&quot;
end
"><pre><span class="pl-c1">with_logger</span>(logger) <span class="pl-k">do</span>
    <span class="pl-c1">@logmsg</span> InnerLoop <span class="pl-c1">:iter</span> value<span class="pl-k">=</span><span class="pl-c1">1</span> width<span class="pl-k">=</span><span class="pl-c1">4</span>
    <span class="pl-c1">@logmsg</span> InnerLoop <span class="pl-c1">:cost</span> value<span class="pl-k">=</span><span class="pl-c1">10.2</span> width<span class="pl-k">=</span><span class="pl-c1">10</span>
    <span class="pl-c1">@logmsg</span> InnerLoop <span class="pl-c1">:violation</span> value<span class="pl-k">=</span><span class="pl-c1">0.2</span> width<span class="pl-k">=</span><span class="pl-c1">12</span>
    <span class="pl-c1">@logmsg</span> InnerLoop <span class="pl-s"><span class="pl-pds">"</span>first iteration<span class="pl-pds">"</span></span>
<span class="pl-k">end</span></pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="images/logging1.png"><img src="images/logging1.png" alt="logging1" style="max-width:100%;"></a></p>
<p>Here we're specifying that the data correspond to the log level <code>InnerLoop</code>, followed by the name of the field, and then
it's value and width. The last log event corresponds to the special "info" field that is used whenever a string is passed
instead of a symbol.</p>
<p>We now print the header row and the data row by specifying the log level we wish to print:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="print_header(logger, InnerLoop)
print_row(logger, InnerLoop)
"><pre><span class="pl-c1">print_header</span>(logger, InnerLoop)
<span class="pl-c1">print_row</span>(logger, InnerLoop)</pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="images/logging2.png"><img src="images/logging2.png" alt="logging2" style="max-width:100%;"></a></p>
<p>This prints the current data to the console and caches the current values. We can now add data for the next iteration
and print again:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="with_logger(logger) do
    @logmsg InnerLoop :iter value=2
    @logmsg InnerLoop :violation value=0.1
end
print_row(logger, InnerLoop)
"><pre><span class="pl-c1">with_logger</span>(logger) <span class="pl-k">do</span>
    <span class="pl-c1">@logmsg</span> InnerLoop <span class="pl-c1">:iter</span> value<span class="pl-k">=</span><span class="pl-c1">2</span>
    <span class="pl-c1">@logmsg</span> InnerLoop <span class="pl-c1">:violation</span> value<span class="pl-k">=</span><span class="pl-c1">0.1</span>
<span class="pl-k">end</span>
<span class="pl-c1">print_row</span>(logger, InnerLoop)</pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="images/logging3.png"><img src="images/logging3.png" alt="logging3" style="max-width:100%;"></a></p>
<p>Note that we don't have to send data to every field: if nothing is sent it will simply print blank.</p>
<p>Let's say we now want to log a new piece of information and want it to print second. We can do this by simply logging
the new field and using the <code>loc</code> keyword that specifies the column of the new entry</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="with_logger(logger) do
    @logmsg InnerLoop :iter value=3
    @logmsg InnerLoop :violation value=0.1
    @logmsg InnerLoop :first value=2 width=10 loc=2
end
print_header(logger, InnerLoop)
print_row(logger, InnerLoop)
"><pre><span class="pl-c1">with_logger</span>(logger) <span class="pl-k">do</span>
    <span class="pl-c1">@logmsg</span> InnerLoop <span class="pl-c1">:iter</span> value<span class="pl-k">=</span><span class="pl-c1">3</span>
    <span class="pl-c1">@logmsg</span> InnerLoop <span class="pl-c1">:violation</span> value<span class="pl-k">=</span><span class="pl-c1">0.1</span>
    <span class="pl-c1">@logmsg</span> InnerLoop <span class="pl-c1">:first</span> value<span class="pl-k">=</span><span class="pl-c1">2</span> width<span class="pl-k">=</span><span class="pl-c1">10</span> loc<span class="pl-k">=</span><span class="pl-c1">2</span>
<span class="pl-k">end</span>
<span class="pl-c1">print_header</span>(logger, InnerLoop)
<span class="pl-c1">print_row</span>(logger, InnerLoop)</pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="images/logging4.png"><img src="images/logging4.png" alt="logging4" style="max-width:100%;"></a></p>
<h3><a id="user-content-additional-log-levels" class="anchor" aria-hidden="true" href="#additional-log-levels"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Additional Log Levels</h3>
<p>We can, at any time, log information to a different level:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="with_logger(logger) do
    @logmsg OuterLoop :iter value=1 width=4
    @logmsg OuterLoop :total value=4 width=4
    @logmsg OuterLoop &quot;outer loop&quot;
    @logmsg OuterLoop &quot;something happened&quot;
end
print_header(logger, OuterLoop)
print_row(logger, OuterLoop)
"><pre><span class="pl-c1">with_logger</span>(logger) <span class="pl-k">do</span>
    <span class="pl-c1">@logmsg</span> OuterLoop <span class="pl-c1">:iter</span> value<span class="pl-k">=</span><span class="pl-c1">1</span> width<span class="pl-k">=</span><span class="pl-c1">4</span>
    <span class="pl-c1">@logmsg</span> OuterLoop <span class="pl-c1">:total</span> value<span class="pl-k">=</span><span class="pl-c1">4</span> width<span class="pl-k">=</span><span class="pl-c1">4</span>
    <span class="pl-c1">@logmsg</span> OuterLoop <span class="pl-s"><span class="pl-pds">"</span>outer loop<span class="pl-pds">"</span></span>
    <span class="pl-c1">@logmsg</span> OuterLoop <span class="pl-s"><span class="pl-pds">"</span>something happened<span class="pl-pds">"</span></span>
<span class="pl-k">end</span>
<span class="pl-c1">print_header</span>(logger, OuterLoop)
<span class="pl-c1">print_row</span>(logger, OuterLoop)</pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="images/logging5.png"><img src="images/logging5.png" alt="logging5" style="max-width:100%;"></a></p>
<p>Here we simply log a different level with new fields and widths and request to print the new level. Note that the special
"info" field can be sent multiple strings, which are simply joined when sent to the output. All other fields replace the
current data if the are written to more than once between output events.</p>
<h3><a id="user-content-unregistered-log-levels" class="anchor" aria-hidden="true" href="#unregistered-log-levels"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Unregistered Log Levels</h3>
<p>If a log level is used that isn't "registered" with the logger, it is sent to <code>logger.default_logger</code>.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="@info &quot;Something interesting&quot;
"><pre><span class="pl-c1">@info</span> <span class="pl-s"><span class="pl-pds">"</span>Something interesting<span class="pl-pds">"</span></span></pre></div>
<p>The default logger can be changed using the corresponding keyword argument:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="SolverLogger(minlevel, default_logger=ConsoleLogger(stderr, minlevel))
"><pre><span class="pl-c1">SolverLogger</span>(minlevel, default_logger<span class="pl-k">=</span><span class="pl-c1">ConsoleLogger</span>(<span class="pl-c1">stderr</span>, minlevel))</pre></div>
<h2><a id="user-content-accessing-the-cached-values" class="anchor" aria-hidden="true" href="#accessing-the-cached-values"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Accessing the Cached Values</h2>
<p>By default, the logger will cache all the data sent to the output. This can be useful if you want to generate a plot of the
values per iteration at the end of the solve. If we want all the cost values for the inner loop we can retrieve them with:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="logger.leveldata[InnerLoop].cache[:cost]
"><pre>logger<span class="pl-k">.</span>leveldata[InnerLoop]<span class="pl-k">.</span>cache[<span class="pl-c1">:cost</span>]</pre></div>
<p>The cache can be cleared for a given level using</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="SolverLogger.clear_cache!(logger.leveldata[loglevel])
"><pre>SolverLogger<span class="pl-k">.</span><span class="pl-c1">clear_cache!</span>(logger<span class="pl-k">.</span>leveldata[loglevel])</pre></div>
<h2><a id="user-content-more-examples" class="anchor" aria-hidden="true" href="#more-examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>More Examples</h2>
<p>See <code>examples/</code> for more examples.</p>
</article></div>