<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-notice-this-package-is-deprecated-for-the-successor-of-this-see-flightsimsjl" class="anchor" aria-hidden="true" href="#notice-this-package-is-deprecated-for-the-successor-of-this-see-flightsimsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>NOTICE: this package is deprecated. For the successor of this, see <a href="https://github.com/JinraeKim/FlightSims.jl">FlightSims.jl</a>.</h1>
<h1 dir="auto"><a id="user-content-lazyfym" class="anchor" aria-hidden="true" href="#lazyfym"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>LazyFym</h1>
<p dir="auto"><strong>LazyFym</strong> is a general-purpose simulator for dynamical systems.</p>
<h2 dir="auto"><a id="user-content-notes" class="anchor" aria-hidden="true" href="#notes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Notes</h2>
<h3 dir="auto"><a id="user-content-origin" class="anchor" aria-hidden="true" href="#origin"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Origin</h3>
<p dir="auto">The origin of the name <code>Fym</code> is from the previous versions of flight (but also general-purpose) simulators:
<a href="https://github.com/fdcl-nrf/fym">fym</a> in <code>Python</code> and <a href="https://github.com/fdcl-nrf/FymEnvs.jl">FymEnvs.jl</a> in <code>Julia</code>.</p>
<h3 dir="auto"><a id="user-content-deprecated" class="anchor" aria-hidden="true" href="#deprecated"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Deprecated</h3>
<p dir="auto">It has taken low priority for now to improve the simulation speed when the time span is very long.</p>
<h2 dir="auto"><a id="user-content-features" class="anchor" aria-hidden="true" href="#features"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Features</h2>
<h3 dir="auto"><a id="user-content-flexible-usage-pattern-and-nested-environments" class="anchor" aria-hidden="true" href="#flexible-usage-pattern-and-nested-environments"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Flexible usage pattern and nested environments</h3>
<p dir="auto">LazyFym is highly based on Julia's pipeline syntax and <a href="https://github.com/JuliaFolds/Transducers.jl">Transducers.jl</a>.
This makes it possible to construct a simulator using Transducers.
Since Transducers are composable, it is highly flexible to make your own simulator.
Also,
LazyFym supports <strong>nested environments</strong> so that users can deal with
complex dynamical systems.</p>
<h3 dir="auto"><a id="user-content-lazy-evaluation" class="anchor" aria-hidden="true" href="#lazy-evaluation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Lazy evaluation</h3>
<p dir="auto">It is possible to lazily evaluate your simulator.
To do so,
you would need to incorporate packages related to lazy evaluation
such as <a href="https://github.com/MikeInnes/Lazy.jl">Lazy.jl</a> and <a href="https://github.com/JuliaArrays/InfiniteArrays.jl">InfiniteArrays.jl</a>.</p>
<h3 dir="auto"><a id="user-content-parallelism" class="anchor" aria-hidden="true" href="#parallelism"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Parallelism</h3>
<p dir="auto">It is not seemingly different from the sequential simulation.
For example,
you can perform simulation with various initial conditions by
replacing <code>collect</code> by <code>tcollect</code> (thread-based) or <code>dcollect</code> (process-based),
which are provided by <code>Transducers.jl</code>.
You should run Julia REPL or execute codes with an appropriate option,
for example, <code>julia -t 4</code> for thread-based parallel simulation.</p>
<h3 dir="auto"><a id="user-content-predefined-environments" class="anchor" aria-hidden="true" href="#predefined-environments"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Predefined environments</h3>
<p dir="auto">LazyFym provides some predefined environments for reproducible codes.
Take a look at <code>src/fymenvs.jl</code>.</p>



<h2 dir="auto"><a id="user-content-interface" class="anchor" aria-hidden="true" href="#interface"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Interface</h2>
<h3 dir="auto"><a id="user-content-types" class="anchor" aria-hidden="true" href="#types"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Types</h3>
<p dir="auto">LazyFym provides a Type <code>Fym</code>.
<code>Fym</code> contains the information of an environment (system),
probably consisting of other <code>Fym</code>s as sub-environments (sub-systems).</p>
<h3 dir="auto"><a id="user-content-with-other-packages" class="anchor" aria-hidden="true" href="#with-other-packages"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>With other packages</h3>
<p dir="auto">LazyFym is highly based on <code>Transducers.jl</code> so various functionalities provided by
<code>Transducers.jl</code> can be applied.
Therefore, it is <strong>highly recommended</strong> to get used to <code>Transducers.jl</code> for the users of LazyFym (e.g., <a href="https://juliafolds.github.io/Transducers.jl/dev/explanation/glossary/" rel="nofollow">glossary of Transducers.jl</a>).
In addition,
the following list of packages would be useful:</p>
<ul dir="auto">
<li><a href="https://github.com/MikeInnes/Lazy.jl">Lazy.jl</a> and <a href="https://github.com/JuliaArrays/InfiniteArrays.jl">InfiniteArrays.jl</a> for dealing with lazy evaluation and infinite array</li>
<li><a href="https://github.com/JuliaArrays/StructArrays.jl">StructArrays.jl</a>, <a href="https://github.com/JuliaData/DataFrames.jl">DataFrames.jl</a>, and <a href="https://github.com/JuliaIO/JLD2.jl">JLD2.jl</a> for handling simulation data</li>
</ul>
<h3 dir="auto"><a id="user-content-quick-start" class="anchor" aria-hidden="true" href="#quick-start"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Quick start</h3>
<p dir="auto">You can also perform numerical simulations with lazy evaluation,
nested custom environments, eager or lazy data postprocessing, and parallel simulation.
Please take a look at directory <code>test</code> (some examples may be omitted).</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using LazyFym
using Transducers

# using Lazy
using InfiniteArrays
using StructArrays
using Random
using Plots, LaTeXStrings
theme(:dark)


function ẋ(env::LazyFym.InputAffineQuadraticCostEnv, x, t)
    u = command(env, x)
    ẋ = LazyFym.ẋ(env, x, t, u)
end
_env = LazyFym.InputAffineQuadraticCostEnv()
command(env, x) = LazyFym.u_optimal(_env, x)  # you can customise it

function initial_condition(env::LazyFym.InputAffineQuadraticCostEnv)
    2*(rand(2) .- 0.5)
end

function postprocess(env::LazyFym.InputAffineQuadraticCostEnv)
    function _postprocess(_datum)
        t = _datum.t
        x = _datum.x
        x1 = _datum.x[1]
        x2 = _datum.x[2]
        u = command(env, x)
        datum = (; t = t, x = x, x1=x1, x2=x2, u = u)
    end
end

function single()
    Random.seed!(1)
    env = LazyFym.InputAffineQuadraticCostEnv()
    t0 = 0.0
    t1 = 5.00
    Δt = 0.01
    ts = t0:Δt:∞
    x0 = initial_condition(env)
    sim(x0) = t -&gt; Sim(env, x0, ts, ẋ) |&gt; TakeWhile(datum -&gt; datum.t &lt;= t) |&gt; Map(postprocess(env)) |&gt; collect |&gt; StructArray
    traj_x0 = sim(x0)
    data = traj_x0(t1)
    # data = @lazy traj_x0(t1);  # for lazy evaluation, see Lazy.jl
    l = @layout [a; b; c]
    p_x1 = plot(data.t, data.x1,
                ylabel=L&quot;x_{1}&quot;, label=nothing, ylim=(-2, 3))
    p_x2 = plot(data.t, data.x2,
                ylabel=L&quot;x_{2}&quot;, label=nothing, ylim=(-2, 3))
    p_u = plot(data.t, data.u,
               xlabel=L&quot;t&quot;, ylabel=L&quot;u&quot;, label=nothing, ylim=(-2, 3))
    p = plot(p_x1, p_x2, p_u, layout = l)
    savefig(p, &quot;figures/single.png&quot;)
end

function parallel()
    Random.seed!(1)
    env = LazyFym.InputAffineQuadraticCostEnv()
    t0 = 0.0
    t1 = 5.00
    Δt = 0.01
    ts = t0:Δt:∞
    num = 10
    x0s = 1:num |&gt; Map(i -&gt; initial_condition(env))
    traj(x0) = Sim(env, x0, ts, ẋ) |&gt; TakeWhile(datum -&gt; datum.t &lt;= t1) |&gt; Map(postprocess(env)) |&gt; collect
    data_parallel = x0s |&gt; Map(x0 -&gt; traj(x0)) |&gt; Map(StructArray) |&gt; tcollect
    # data_parallel_whole = data_parallel |&gt; TCat(Threads.nthreads()) |&gt; collect |&gt; StructArray   # merge data
    l = @layout [a; b; c]
    p_x1 = plot()
    _ = data_parallel |&gt; Map(data -&gt; plot!(p_x1, data.t, data.x1,
                                           ylabel=L&quot;x_{1}&quot;, label=nothing,
                                           ylim=(-2, 3))) |&gt; collect
    p_x2 = plot()
    _ = data_parallel |&gt; Map(data -&gt; plot!(p_x2, data.t, data.x2,
                                           ylabel=L&quot;x_{2}&quot;, label=nothing,
                                           ylim=(-2, 3))) |&gt; collect
    p_u = plot()
    _ = data_parallel |&gt; Map(data -&gt; plot!(p_u, data.t, data.u,
                                           xlabel=L&quot;t&quot;, ylabel=L&quot;u&quot;, label=nothing,
                                           ylim=(-2, 3))) |&gt; collect
    p = plot(p_x1, p_x2, p_u, layout = l)
    savefig(p, &quot;figures/parallel.png&quot;)
end

# single()
# parallel()"><pre><span class="pl-k">using</span> LazyFym
<span class="pl-k">using</span> Transducers

<span class="pl-c"><span class="pl-c">#</span> using Lazy</span>
<span class="pl-k">using</span> InfiniteArrays
<span class="pl-k">using</span> StructArrays
<span class="pl-k">using</span> Random
<span class="pl-k">using</span> Plots, LaTeXStrings
<span class="pl-c1">theme</span>(<span class="pl-c1">:dark</span>)


<span class="pl-k">function</span> <span class="pl-en">ẋ</span>(env<span class="pl-k">::</span><span class="pl-c1">LazyFym.InputAffineQuadraticCostEnv</span>, x, t)
    u <span class="pl-k">=</span> <span class="pl-c1">command</span>(env, x)
    ẋ <span class="pl-k">=</span> LazyFym<span class="pl-k">.</span><span class="pl-c1">ẋ</span>(env, x, t, u)
<span class="pl-k">end</span>
_env <span class="pl-k">=</span> LazyFym<span class="pl-k">.</span><span class="pl-c1">InputAffineQuadraticCostEnv</span>()
<span class="pl-en">command</span>(env, x) <span class="pl-k">=</span> LazyFym<span class="pl-k">.</span><span class="pl-c1">u_optimal</span>(_env, x)  <span class="pl-c"><span class="pl-c">#</span> you can customise it</span>

<span class="pl-k">function</span> <span class="pl-en">initial_condition</span>(env<span class="pl-k">::</span><span class="pl-c1">LazyFym.InputAffineQuadraticCostEnv</span>)
    <span class="pl-c1">2</span><span class="pl-k">*</span>(<span class="pl-c1">rand</span>(<span class="pl-c1">2</span>) <span class="pl-k">.-</span> <span class="pl-c1">0.5</span>)
<span class="pl-k">end</span>

<span class="pl-k">function</span> <span class="pl-en">postprocess</span>(env<span class="pl-k">::</span><span class="pl-c1">LazyFym.InputAffineQuadraticCostEnv</span>)
    <span class="pl-k">function</span> <span class="pl-en">_postprocess</span>(_datum)
        t <span class="pl-k">=</span> _datum<span class="pl-k">.</span>t
        x <span class="pl-k">=</span> _datum<span class="pl-k">.</span>x
        x1 <span class="pl-k">=</span> _datum<span class="pl-k">.</span>x[<span class="pl-c1">1</span>]
        x2 <span class="pl-k">=</span> _datum<span class="pl-k">.</span>x[<span class="pl-c1">2</span>]
        u <span class="pl-k">=</span> <span class="pl-c1">command</span>(env, x)
        datum <span class="pl-k">=</span> (; t <span class="pl-k">=</span> t, x <span class="pl-k">=</span> x, x1<span class="pl-k">=</span>x1, x2<span class="pl-k">=</span>x2, u <span class="pl-k">=</span> u)
    <span class="pl-k">end</span>
<span class="pl-k">end</span>

<span class="pl-k">function</span> <span class="pl-en">single</span>()
    Random<span class="pl-k">.</span><span class="pl-c1">seed!</span>(<span class="pl-c1">1</span>)
    env <span class="pl-k">=</span> LazyFym<span class="pl-k">.</span><span class="pl-c1">InputAffineQuadraticCostEnv</span>()
    t0 <span class="pl-k">=</span> <span class="pl-c1">0.0</span>
    t1 <span class="pl-k">=</span> <span class="pl-c1">5.00</span>
    Δt <span class="pl-k">=</span> <span class="pl-c1">0.01</span>
    ts <span class="pl-k">=</span> t0<span class="pl-k">:</span>Δt<span class="pl-k">:</span>∞
    x0 <span class="pl-k">=</span> <span class="pl-c1">initial_condition</span>(env)
    <span class="pl-en">sim</span>(x0) <span class="pl-k">=</span> t <span class="pl-k">-&gt;</span> <span class="pl-c1">Sim</span>(env, x0, ts, ẋ) <span class="pl-k">|&gt;</span> <span class="pl-c1">TakeWhile</span>(datum <span class="pl-k">-&gt;</span> datum<span class="pl-k">.</span>t <span class="pl-k">&lt;=</span> t) <span class="pl-k">|&gt;</span> <span class="pl-c1">Map</span>(<span class="pl-c1">postprocess</span>(env)) <span class="pl-k">|&gt;</span> collect <span class="pl-k">|&gt;</span> StructArray
    traj_x0 <span class="pl-k">=</span> <span class="pl-c1">sim</span>(x0)
    data <span class="pl-k">=</span> <span class="pl-c1">traj_x0</span>(t1)
    <span class="pl-c"><span class="pl-c">#</span> data = @lazy traj_x0(t1);  # for lazy evaluation, see Lazy.jl</span>
    l <span class="pl-k">=</span> <span class="pl-c1">@layout</span> [a; b; c]
    p_x1 <span class="pl-k">=</span> <span class="pl-c1">plot</span>(data<span class="pl-k">.</span>t, data<span class="pl-k">.</span>x1,
                ylabel<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">L</span>"</span>x_{1}<span class="pl-pds">"</span></span>, label<span class="pl-k">=</span><span class="pl-c1">nothing</span>, ylim<span class="pl-k">=</span>(<span class="pl-k">-</span><span class="pl-c1">2</span>, <span class="pl-c1">3</span>))
    p_x2 <span class="pl-k">=</span> <span class="pl-c1">plot</span>(data<span class="pl-k">.</span>t, data<span class="pl-k">.</span>x2,
                ylabel<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">L</span>"</span>x_{2}<span class="pl-pds">"</span></span>, label<span class="pl-k">=</span><span class="pl-c1">nothing</span>, ylim<span class="pl-k">=</span>(<span class="pl-k">-</span><span class="pl-c1">2</span>, <span class="pl-c1">3</span>))
    p_u <span class="pl-k">=</span> <span class="pl-c1">plot</span>(data<span class="pl-k">.</span>t, data<span class="pl-k">.</span>u,
               xlabel<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">L</span>"</span>t<span class="pl-pds">"</span></span>, ylabel<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">L</span>"</span>u<span class="pl-pds">"</span></span>, label<span class="pl-k">=</span><span class="pl-c1">nothing</span>, ylim<span class="pl-k">=</span>(<span class="pl-k">-</span><span class="pl-c1">2</span>, <span class="pl-c1">3</span>))
    p <span class="pl-k">=</span> <span class="pl-c1">plot</span>(p_x1, p_x2, p_u, layout <span class="pl-k">=</span> l)
    <span class="pl-c1">savefig</span>(p, <span class="pl-s"><span class="pl-pds">"</span>figures/single.png<span class="pl-pds">"</span></span>)
<span class="pl-k">end</span>

<span class="pl-k">function</span> <span class="pl-en">parallel</span>()
    Random<span class="pl-k">.</span><span class="pl-c1">seed!</span>(<span class="pl-c1">1</span>)
    env <span class="pl-k">=</span> LazyFym<span class="pl-k">.</span><span class="pl-c1">InputAffineQuadraticCostEnv</span>()
    t0 <span class="pl-k">=</span> <span class="pl-c1">0.0</span>
    t1 <span class="pl-k">=</span> <span class="pl-c1">5.00</span>
    Δt <span class="pl-k">=</span> <span class="pl-c1">0.01</span>
    ts <span class="pl-k">=</span> t0<span class="pl-k">:</span>Δt<span class="pl-k">:</span>∞
    num <span class="pl-k">=</span> <span class="pl-c1">10</span>
    x0s <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span>num <span class="pl-k">|&gt;</span> <span class="pl-c1">Map</span>(i <span class="pl-k">-&gt;</span> <span class="pl-c1">initial_condition</span>(env))
    <span class="pl-en">traj</span>(x0) <span class="pl-k">=</span> <span class="pl-c1">Sim</span>(env, x0, ts, ẋ) <span class="pl-k">|&gt;</span> <span class="pl-c1">TakeWhile</span>(datum <span class="pl-k">-&gt;</span> datum<span class="pl-k">.</span>t <span class="pl-k">&lt;=</span> t1) <span class="pl-k">|&gt;</span> <span class="pl-c1">Map</span>(<span class="pl-c1">postprocess</span>(env)) <span class="pl-k">|&gt;</span> collect
    data_parallel <span class="pl-k">=</span> x0s <span class="pl-k">|&gt;</span> <span class="pl-c1">Map</span>(x0 <span class="pl-k">-&gt;</span> <span class="pl-c1">traj</span>(x0)) <span class="pl-k">|&gt;</span> <span class="pl-c1">Map</span>(StructArray) <span class="pl-k">|&gt;</span> tcollect
    <span class="pl-c"><span class="pl-c">#</span> data_parallel_whole = data_parallel |&gt; TCat(Threads.nthreads()) |&gt; collect |&gt; StructArray   # merge data</span>
    l <span class="pl-k">=</span> <span class="pl-c1">@layout</span> [a; b; c]
    p_x1 <span class="pl-k">=</span> <span class="pl-c1">plot</span>()
    _ <span class="pl-k">=</span> data_parallel <span class="pl-k">|&gt;</span> <span class="pl-c1">Map</span>(data <span class="pl-k">-&gt;</span> <span class="pl-c1">plot!</span>(p_x1, data<span class="pl-k">.</span>t, data<span class="pl-k">.</span>x1,
                                           ylabel<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">L</span>"</span>x_{1}<span class="pl-pds">"</span></span>, label<span class="pl-k">=</span><span class="pl-c1">nothing</span>,
                                           ylim<span class="pl-k">=</span>(<span class="pl-k">-</span><span class="pl-c1">2</span>, <span class="pl-c1">3</span>))) <span class="pl-k">|&gt;</span> collect
    p_x2 <span class="pl-k">=</span> <span class="pl-c1">plot</span>()
    _ <span class="pl-k">=</span> data_parallel <span class="pl-k">|&gt;</span> <span class="pl-c1">Map</span>(data <span class="pl-k">-&gt;</span> <span class="pl-c1">plot!</span>(p_x2, data<span class="pl-k">.</span>t, data<span class="pl-k">.</span>x2,
                                           ylabel<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">L</span>"</span>x_{2}<span class="pl-pds">"</span></span>, label<span class="pl-k">=</span><span class="pl-c1">nothing</span>,
                                           ylim<span class="pl-k">=</span>(<span class="pl-k">-</span><span class="pl-c1">2</span>, <span class="pl-c1">3</span>))) <span class="pl-k">|&gt;</span> collect
    p_u <span class="pl-k">=</span> <span class="pl-c1">plot</span>()
    _ <span class="pl-k">=</span> data_parallel <span class="pl-k">|&gt;</span> <span class="pl-c1">Map</span>(data <span class="pl-k">-&gt;</span> <span class="pl-c1">plot!</span>(p_u, data<span class="pl-k">.</span>t, data<span class="pl-k">.</span>u,
                                           xlabel<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">L</span>"</span>t<span class="pl-pds">"</span></span>, ylabel<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">L</span>"</span>u<span class="pl-pds">"</span></span>, label<span class="pl-k">=</span><span class="pl-c1">nothing</span>,
                                           ylim<span class="pl-k">=</span>(<span class="pl-k">-</span><span class="pl-c1">2</span>, <span class="pl-c1">3</span>))) <span class="pl-k">|&gt;</span> collect
    p <span class="pl-k">=</span> <span class="pl-c1">plot</span>(p_x1, p_x2, p_u, layout <span class="pl-k">=</span> l)
    <span class="pl-c1">savefig</span>(p, <span class="pl-s"><span class="pl-pds">"</span>figures/parallel.png<span class="pl-pds">"</span></span>)
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> single()</span>
<span class="pl-c"><span class="pl-c">#</span> parallel()</span></pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="./figures/single.png"><img src="./figures/single.png" alt="single" style="max-width: 100%;"></a>
<a target="_blank" rel="noopener noreferrer" href="./figures/parallel.png"><img src="./figures/parallel.png" alt="parallel" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-performance-tips" class="anchor" aria-hidden="true" href="#performance-tips"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Performance Tips</h2>
<h3 dir="auto"><a id="user-content-provide-environment-information" class="anchor" aria-hidden="true" href="#provide-environment-information"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Provide environment information</h3>
<p dir="auto">Since LazyFym automatically calculate the information of environments (including size, flatten_length, etc.)
and may result in performance degeneration,
you should consider extend <code>LazyFym</code> functions for your custom environments such as <code>LazyFym.size</code>
to improve the simulation speed (about 2~3 times faster in most cases).</p>
<h3 dir="auto"><a id="user-content-postprocess-data-after-simulation" class="anchor" aria-hidden="true" href="#postprocess-data-after-simulation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Postprocess data after simulation</h3>
<p dir="auto">Postprocessing will make your simulator slow.
Postprocessing after obtaining simulation data would be beneficial if your simulation itself has bottleneck.</p>





</article></div>