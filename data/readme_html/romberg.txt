<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-rombergjl" class="anchor" aria-hidden="true" href="#rombergjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Romberg.jl</h1>
<p dir="auto"><a href="https://travis-ci.com/fgasdia/Romberg.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/fe9cdea402c17278d48417b542970e4997471cf21546bc1e6d9afc0ea1b4b518/68747470733a2f2f7472617669732d63692e636f6d2f666761736469612f526f6d626572672e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/fgasdia/Romberg.jl.svg?branch=master" style="max-width: 100%;"></a></p>
<p dir="auto">A simple Julia package to perform Romberg integration over discrete 1-dimensional
data.</p>
<p dir="auto"><a href="https://en.wikipedia.org/wiki/Romberg's_method" rel="nofollow">Romberg integration</a> combines trapezoidal integration with <a href="https://github.com/JuliaMath/Richardson.jl">Richardson extrapolation</a> for improved accuracy. This package is
meant to be used for integrating discrete data sampled with equal spacing. If
your integrand can be evaluated at arbitrary points, then other methods are probably a better
choice, e.g. <a href="https://github.com/JuliaMath/QuadGK.jl">QuadGK.jl</a>. Similarly,
if you have discrete data sampled at generic <em>unequally</em> spaced points, you probably
need to use a low-order method like <a href="https://github.com/francescoalemanno/Trapz.jl">Trapz.jl</a>.</p>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<p dir="auto">First, install with the <a href="https://docs.julialang.org/en/v1/stdlib/Pkg/" rel="nofollow">Julia package manager</a>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="] add Romberg"><pre>] add Romberg</pre></div>
<p dir="auto">The Romberg module exports a single function, <code>romberg(x,y)</code>, or alternatively <code>romberg(Δx,y)</code>,
that returns a tuple <code>(I,E)</code> of the estimated integral <code>I</code> and a rough upper bound <code>E</code> on
the error.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Romberg

x = range(0, stop=π, length=2^8+1)
y = sin.(x)

romberg(x, y)"><pre><span class="pl-k">using</span> Romberg

x <span class="pl-k">=</span> <span class="pl-c1">range</span>(<span class="pl-c1">0</span>, stop<span class="pl-k">=</span>π, length<span class="pl-k">=</span><span class="pl-c1">2</span><span class="pl-k">^</span><span class="pl-c1">8</span><span class="pl-k">+</span><span class="pl-c1">1</span>)
y <span class="pl-k">=</span> <span class="pl-c1">sin</span>.(x)

<span class="pl-c1">romberg</span>(x, y)</pre></div>
<h2 dir="auto"><a id="user-content-limitations" class="anchor" aria-hidden="true" href="#limitations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Limitations</h2>
<h3 dir="auto"><a id="user-content-equally-spaced-x" class="anchor" aria-hidden="true" href="#equally-spaced-x"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Equally spaced <code>x</code></h3>
<p dir="auto">Unlike <a href="https://github.com/francescoalemanno/Trapz.jl">Trapz.jl</a>, Romberg
integration is a <a href="https://en.wikipedia.org/wiki/Newton%E2%80%93Cotes_formulas" rel="nofollow">Newton-Cotes</a>
formula which requires each element of <code>x</code> be equally spaced. This is indirectly
enforced in <code>Romberg</code> by requiring <code>x::AbstractRange</code>, or directly by passing the
spacing <code>Δx</code> between points.</p>
<h3 dir="auto"><a id="user-content-most-effective-if-lengthx---1-a-power-of-2" class="anchor" aria-hidden="true" href="#most-effective-if-lengthx---1-a-power-of-2"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Most effective if <code>length(x) - 1</code> a power of 2</h3>
<p dir="auto">Romberg integration works by recursively breaking the integral down into
trapezoidal-rule evaluations using larger and larger spacings <code>Δx</code> and then
extrapolating back towards <code>Δx → 0</code>.   This works by <a href="https://github.com/JuliaMath/Primes.jl">factorizing</a> <code>length(x) - 1</code>,
and therefore works best when <code>length(x) - 1</code> has <strong>many small factors</strong>, ideally
being a power of two.</p>
<p dir="auto">(In the event that <code>length(x) - 1</code> is prime, the <code>romberg</code> function is nearly
equivalent to the trapezoidal rule, since it extrapolates only from 2 points to
<code>length(x)</code> points.)</p>
<h3 dir="auto"><a id="user-content-1-dimensional" class="anchor" aria-hidden="true" href="#1-dimensional"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>1-dimensional</h3>
<p dir="auto">Currently <code>Romberg</code> only allows integration over a single dimension, so
<code>y::AbstractVector</code>.</p>
<h2 dir="auto"><a id="user-content-comparison-to-trapz" class="anchor" aria-hidden="true" href="#comparison-to-trapz"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Comparison to <code>trapz</code></h2>
<p dir="auto">Given the limitations of <code>Romberg</code>, why use it over <code>Trapz</code>? For discrete
samples of an underlying smooth function, Romberg integration can obtain
<em>significantly more accurate</em> estimates at relatively <em>low additional
computational cost</em> over trapezoidal integration for a given number of samples.
Moreover, unlike the trapezoidal rule, the <code>romberg</code> function also <em>returns an error estimate</em>.</p>
<p dir="auto">Here are some examples:</p>
<h3 dir="auto"><a id="user-content-1" class="anchor" aria-hidden="true" href="#1"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>1)</h3>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://render.githubusercontent.com/render/math?math=%5Cdisplaystyle%20%5Cint_0%5E%5Cpi%20%5Csin(x)%20%5C%2C%5Cmathrm%7Bd%7Dx%20%3D%202"><img src="https://render.githubusercontent.com/render/math?math=%5Cdisplaystyle%20%5Cint_0%5E%5Cpi%20%5Csin(x)%20%5C%2C%5Cmathrm%7Bd%7Dx%20%3D%202" alt="\displaystyle \int_0^\pi \sin(x) ,\mathrm{d}x = 2" style="max-width: 100%;"></a></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using BenchmarkTools
using Trapz, Romberg

x = range(0, stop=π, length=2^6+1)
y = sin.(x)
exact_answer = 2

tans = trapz(x, y)
rans, _ = romberg(x, y)"><pre><span class="pl-k">using</span> BenchmarkTools
<span class="pl-k">using</span> Trapz, Romberg

x <span class="pl-k">=</span> <span class="pl-c1">range</span>(<span class="pl-c1">0</span>, stop<span class="pl-k">=</span>π, length<span class="pl-k">=</span><span class="pl-c1">2</span><span class="pl-k">^</span><span class="pl-c1">6</span><span class="pl-k">+</span><span class="pl-c1">1</span>)
y <span class="pl-k">=</span> <span class="pl-c1">sin</span>.(x)
exact_answer <span class="pl-k">=</span> <span class="pl-c1">2</span>

tans <span class="pl-k">=</span> <span class="pl-c1">trapz</span>(x, y)
rans, _ <span class="pl-k">=</span> <span class="pl-c1">romberg</span>(x, y)</pre></div>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; exact_answer - tans
0.0004016113599627502

julia&gt; exact_answer - rans
4.440892098500626e-16"><pre>julia<span class="pl-k">&gt;</span> exact_answer <span class="pl-k">-</span> tans
<span class="pl-c1">0.0004016113599627502</span>

julia<span class="pl-k">&gt;</span> exact_answer <span class="pl-k">-</span> rans
<span class="pl-c1">4.440892098500626e-16</span></pre></div>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; @btime trapz($x, $y);
  340.834 ns (1 allocation: 96 bytes)

julia&gt; @btime romberg($x, $y);
  515.078 ns (1 allocation: 192 bytes)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">trapz</span>(<span class="pl-k">$</span>x, <span class="pl-k">$</span>y);
  <span class="pl-c1">340.834</span> ns (<span class="pl-c1">1</span> allocation<span class="pl-k">:</span> <span class="pl-c1">96</span> bytes)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">romberg</span>(<span class="pl-k">$</span>x, <span class="pl-k">$</span>y);
  <span class="pl-c1">515.078</span> ns (<span class="pl-c1">1</span> allocation<span class="pl-k">:</span> <span class="pl-c1">192</span> bytes)</pre></div>
<p dir="auto">So <code>romberg</code> is ~30% slower than <code>trapz</code>, but achieves nearly machine-precision accuracy,
~12 digits more accurate than <code>trapz</code>. Even if 500 times as many samples of the
function were to be used in <code>trapz</code>, it would still be ~7 digits less accurate than <code>romberg</code>.</p>
<h3 dir="auto"><a id="user-content-2" class="anchor" aria-hidden="true" href="#2"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>2)</h3>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://render.githubusercontent.com/render/math?math=%5Cdisplaystyle%20%5Cint_0%5E1%20x%5E3%20%5C%2C%5Cmathrm%7Bd%7Dx%20%3D%200.25"><img src="https://render.githubusercontent.com/render/math?math=%5Cdisplaystyle%20%5Cint_0%5E1%20x%5E3%20%5C%2C%5Cmathrm%7Bd%7Dx%20%3D%200.25" alt="\displaystyle \int_0^1 x^3 ,\mathrm{d}x = 0.25" style="max-width: 100%;"></a></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="x = range(0, stop=1, length=2^4+1)
y = x.^3
exact_answer = 0.25

tans = trapz(x, y)
rans, _ = romberg(x, y)"><pre>x <span class="pl-k">=</span> <span class="pl-c1">range</span>(<span class="pl-c1">0</span>, stop<span class="pl-k">=</span><span class="pl-c1">1</span>, length<span class="pl-k">=</span><span class="pl-c1">2</span><span class="pl-k">^</span><span class="pl-c1">4</span><span class="pl-k">+</span><span class="pl-c1">1</span>)
y <span class="pl-k">=</span> x<span class="pl-k">.^</span><span class="pl-c1">3</span>
exact_answer <span class="pl-k">=</span> <span class="pl-c1">0.25</span>

tans <span class="pl-k">=</span> <span class="pl-c1">trapz</span>(x, y)
rans, _ <span class="pl-k">=</span> <span class="pl-c1">romberg</span>(x, y)</pre></div>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; exact_answer - tans
-0.0009765625

julia&gt; exact_answer - rans
0.0"><pre>julia<span class="pl-k">&gt;</span> exact_answer <span class="pl-k">-</span> tans
<span class="pl-k">-</span><span class="pl-c1">0.0009765625</span>

julia<span class="pl-k">&gt;</span> exact_answer <span class="pl-k">-</span> rans
<span class="pl-c1">0.0</span></pre></div>
<p dir="auto"><code>romberg</code> is able to obtain the exact answer (and in general is exact for polynomials
of sufficiently low degree), compared to ~3 digits of accuracy
for <code>trapz</code>, at the cost of ~2× the run time.</p>
<h3 dir="auto"><a id="user-content-3" class="anchor" aria-hidden="true" href="#3"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>3)</h3>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://render.githubusercontent.com/render/math?math=%5Cdisplaystyle%20%5Cint_0%5E%5Cpi%20%5Csin(mx)%5Ccos(nx)%20%5C%2C%5Cmathrm%7Bd%7Dx%20%3D%20%5Cfrac%7B2m%7D%7Bm%5E2%20-%20n%5E2%7D%2C%20%5Cquad%20mn%20%5C%3B%20%5Ctext%7Bodd%7D"><img src="https://render.githubusercontent.com/render/math?math=%5Cdisplaystyle%20%5Cint_0%5E%5Cpi%20%5Csin(mx)%5Ccos(nx)%20%5C%2C%5Cmathrm%7Bd%7Dx%20%3D%20%5Cfrac%7B2m%7D%7Bm%5E2%20-%20n%5E2%7D%2C%20%5Cquad%20mn%20%5C%3B%20%5Ctext%7Bodd%7D" alt="\displaystyle \int_0^\pi \sin(mx)\cos(nx) ,\mathrm{d}x = \frac{2m}{m^2 - n^2}, \quad mn ; \text{odd}" style="max-width: 100%;"></a></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="m = 3
n = 4
x = range(0, stop=π, length=2^6+1)
y = sin.(m*x).*cos.(n*x)
exact_answer = 2*m/(m^2 - n^2)

tans = trapz(x, y)
rans, _ = romberg(x, y)"><pre>m <span class="pl-k">=</span> <span class="pl-c1">3</span>
n <span class="pl-k">=</span> <span class="pl-c1">4</span>
x <span class="pl-k">=</span> <span class="pl-c1">range</span>(<span class="pl-c1">0</span>, stop<span class="pl-k">=</span>π, length<span class="pl-k">=</span><span class="pl-c1">2</span><span class="pl-k">^</span><span class="pl-c1">6</span><span class="pl-k">+</span><span class="pl-c1">1</span>)
y <span class="pl-k">=</span> <span class="pl-c1">sin</span>.(m<span class="pl-k">*</span>x)<span class="pl-k">.*</span><span class="pl-c1">cos</span>.(n<span class="pl-k">*</span>x)
exact_answer <span class="pl-k">=</span> <span class="pl-c1">2</span><span class="pl-k">*</span>m<span class="pl-k">/</span>(m<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">-</span> n<span class="pl-k">^</span><span class="pl-c1">2</span>)

tans <span class="pl-k">=</span> <span class="pl-c1">trapz</span>(x, y)
rans, _ <span class="pl-k">=</span> <span class="pl-c1">romberg</span>(x, y)</pre></div>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; exact_answer - tans
0.0012075513578178043

julia&gt; exact_answer - rans
-1.2385595582475872e-7"><pre>julia<span class="pl-k">&gt;</span> exact_answer <span class="pl-k">-</span> tans
<span class="pl-c1">0.0012075513578178043</span>

julia<span class="pl-k">&gt;</span> exact_answer <span class="pl-k">-</span> rans
<span class="pl-k">-</span><span class="pl-c1">1.2385595582475872e-7</span></pre></div>
<p dir="auto"><code>romberg</code> is ~4 digits better accuracy than <code>trapz</code> and ~50% greater run time.</p>
</article></div>