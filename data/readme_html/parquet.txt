<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-parquet" class="anchor" aria-hidden="true" href="#parquet"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Parquet</h1>
<p><a href="https://travis-ci.org/JuliaIO/Parquet.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/d67947b01ed7dea768d96ce89578457a1a3f0631/68747470733a2f2f7472617669732d63692e6f72672f4a756c6961494f2f506172717565742e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaIO/Parquet.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/tanmaykm/parquet-jl-cufdj/branch/master" rel="nofollow"><img src="https://camo.githubusercontent.com/0a9d9172627b14780d077abfdcf0d1358025fd2a/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f6778387076646969657279373472396c2f6272616e63682f6d61737465723f7376673d74727565" alt="Build status" data-canonical-src="https://ci.appveyor.com/api/projects/status/gx8pvdiiery74r9l/branch/master?svg=true" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/JuliaIO/Parquet.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/fd06cc38488716f9e53bee3a5c749da5dee59308/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f4a756c6961494f2f506172717565742e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/JuliaIO/Parquet.jl/badge.svg?branch=master" style="max-width:100%;"></a></p>
<h2><a id="user-content-reader" class="anchor" aria-hidden="true" href="#reader"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Reader</h2>
<p>Load a <a href="https://en.wikipedia.org/wiki/Apache_Parquet" rel="nofollow">parquet file</a>. Only metadata is read initially, data is loaded in chunks on demand. (Note: <a href="https://github.com/queryverse/ParquetFiles.jl">ParquetFiles.jl</a> also provides load support for Parquet files under the FileIO.jl package.)</p>
<p><code>ParFile</code> represents a Parquet file at <code>path</code> open for reading. Options to map logical types can be provided via <code>map_logical_types</code>.</p>
<pre><code>ParFile(path; map_logical_types) =&gt; ParFile
</code></pre>
<p><code>map_logical_types</code> can be one of:</p>
<ul>
<li><code>false</code>: no mapping is done (default)</li>
<li><code>true</code>: default mappings are attempted on all columns (bytearray =&gt; String, int96 =&gt; DateTime)</li>
<li>A user supplied dict mapping column names to a tuple of type and a converter function</li>
</ul>
<p><code>ParFile</code> also keeps a handle to the open file and the file metadata and also holds a LRU cache of raw bytes of the pages read. If the parquet file references other files in its metadata, they will be opened as and when required for reading and closed when they are not needed anymore.</p>
<p>The <code>close</code> method closes the reader, releases open files and makes cached internal data structures available for GC. A <code>ParFile</code> instance must not be used once closed.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Parquet

julia<span class="pl-k">&gt;</span> parfile <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>customer.impala.parquet<span class="pl-pds">"</span></span>;

julia<span class="pl-k">&gt;</span> p <span class="pl-k">=</span> <span class="pl-c1">ParFile</span>(parfile; map_logical_types<span class="pl-k">=</span><span class="pl-c1">true</span>)
Parquet file<span class="pl-k">:</span> customer<span class="pl-k">.</span>impala<span class="pl-k">.</span>parquet
    version<span class="pl-k">:</span> <span class="pl-c1">1</span>
    nrows<span class="pl-k">:</span> <span class="pl-c1">150000</span>
    created by<span class="pl-k">:</span> impala version <span class="pl-c1">1.2</span><span class="pl-k">-</span>INTERNAL (build a462ec42e550c75fccbff98c720f37f3ee9d55a3)
    cached<span class="pl-k">:</span> <span class="pl-c1">0</span> column chunks</pre></div>
<p>Examine the schema.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">nrows</span>(p)
<span class="pl-c1">150000</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">ncols</span>(p)
<span class="pl-c1">8</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">colnames</span>(p)
<span class="pl-c1">8</span><span class="pl-k">-</span>element Array{Array{String,<span class="pl-c1">1</span>},<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 [<span class="pl-s"><span class="pl-pds">"</span>c_custkey<span class="pl-pds">"</span></span>]
 [<span class="pl-s"><span class="pl-pds">"</span>c_name<span class="pl-pds">"</span></span>]
 [<span class="pl-s"><span class="pl-pds">"</span>c_address<span class="pl-pds">"</span></span>]
 [<span class="pl-s"><span class="pl-pds">"</span>c_nationkey<span class="pl-pds">"</span></span>]
 [<span class="pl-s"><span class="pl-pds">"</span>c_phone<span class="pl-pds">"</span></span>]
 [<span class="pl-s"><span class="pl-pds">"</span>c_acctbal<span class="pl-pds">"</span></span>]
 [<span class="pl-s"><span class="pl-pds">"</span>c_mktsegment<span class="pl-pds">"</span></span>]
 [<span class="pl-s"><span class="pl-pds">"</span>c_comment<span class="pl-pds">"</span></span>]

julia<span class="pl-k">&gt;</span> <span class="pl-c1">schema</span>(p)
Schema<span class="pl-k">:</span>
    schema {
      optional INT64 c_custkey
      optional BYTE_ARRAY c_name
      optional BYTE_ARRAY c_address
      optional INT32 c_nationkey
      optional BYTE_ARRAY c_phone
      optional DOUBLE c_acctbal
      optional BYTE_ARRAY c_mktsegment
      optional BYTE_ARRAY c_comment
    }</pre></div>
<p>Create cursor to iterate over batches of column values. Each iteration returns a named tuple of column names with batch of column values. One batch corresponds to one row group of the parquet file.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> cc <span class="pl-k">=</span> Parquet<span class="pl-k">.</span><span class="pl-c1">BatchedColumnsCursor</span>(par)
Batched Columns Cursor on customer<span class="pl-k">.</span>impala<span class="pl-k">.</span>parquet
    rows<span class="pl-k">:</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">150000</span>
    batches<span class="pl-k">:</span> <span class="pl-c1">1</span>
    cols<span class="pl-k">:</span> c_custkey, c_name, c_address, c_nationkey, c_phone, c_acctbal, c_mktsegment, c_comment

julia<span class="pl-k">&gt;</span> batchvals, state <span class="pl-k">=</span> <span class="pl-c1">iterate</span>(cc);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">propertynames</span>(batchvals)
(<span class="pl-c1">:c_custkey</span>, <span class="pl-c1">:c_name</span>, <span class="pl-c1">:c_address</span>, <span class="pl-c1">:c_nationkey</span>, <span class="pl-c1">:c_phone</span>, <span class="pl-c1">:c_acctbal</span>, <span class="pl-c1">:c_mktsegment</span>, <span class="pl-c1">:c_comment</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">length</span>(batchvals<span class="pl-k">.</span>c_name)
<span class="pl-c1">150000</span>

julia<span class="pl-k">&gt;</span> batchvals<span class="pl-k">.</span>c_name[<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">5</span>]
<span class="pl-c1">5</span><span class="pl-k">-</span>element Array{Union{Missing, String},<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-s"><span class="pl-pds">"</span>Customer#000000001<span class="pl-pds">"</span></span>
 <span class="pl-s"><span class="pl-pds">"</span>Customer#000000002<span class="pl-pds">"</span></span>
 <span class="pl-s"><span class="pl-pds">"</span>Customer#000000003<span class="pl-pds">"</span></span>
 <span class="pl-s"><span class="pl-pds">"</span>Customer#000000004<span class="pl-pds">"</span></span>
 <span class="pl-s"><span class="pl-pds">"</span>Customer#000000005<span class="pl-pds">"</span></span></pre></div>
<p>Create cursor to iterate over records. In parallel mode, multiple remote cursors can be created and iterated on in parallel.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> rc <span class="pl-k">=</span> <span class="pl-c1">RecordCursor</span>(p)
Record Cursor on customer<span class="pl-k">.</span>impala<span class="pl-k">.</span>parquet
    rows<span class="pl-k">:</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">150000</span>
    cols<span class="pl-k">:</span> c_custkey, c_name, c_address, c_nationkey, c_phone, c_acctbal, c_mktsegment, c_comment

julia<span class="pl-k">&gt;</span> records <span class="pl-k">=</span> <span class="pl-c1">collect</span>(rc);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">length</span>(records)
<span class="pl-c1">150000</span>

julia<span class="pl-k">&gt;</span> first_record <span class="pl-k">=</span> <span class="pl-c1">first</span>(records);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">isa</span>(first_record, NamedTuple)
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">propertynames</span>(first_record)
(<span class="pl-c1">:c_custkey</span>, <span class="pl-c1">:c_name</span>, <span class="pl-c1">:c_address</span>, <span class="pl-c1">:c_nationkey</span>, <span class="pl-c1">:c_phone</span>, <span class="pl-c1">:c_acctbal</span>, <span class="pl-c1">:c_mktsegment</span>, <span class="pl-c1">:c_comment</span>)

julia<span class="pl-k">&gt;</span> first_record<span class="pl-k">.</span>c_custkey
<span class="pl-c1">1</span>

julia<span class="pl-k">&gt;</span> first_record<span class="pl-k">.</span>c_name
<span class="pl-s"><span class="pl-pds">"</span>Customer#000000001<span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> first_record<span class="pl-k">.</span>c_address
<span class="pl-s"><span class="pl-pds">"</span>IVhzIApeRb ot,c,E<span class="pl-pds">"</span></span></pre></div>
<p>The reader will interpret logical types based on the <code>map_logical_types</code> provided. The following logical type mapping methods are available in the Parquet package and are applied by default if <code>map_logical_types</code> is set to <code>true</code>.</p>
<ul>
<li><code>logical_timestamp(v; offset::Dates.Period=Dates.Second(0))</code>: Applicable for timestamps that are <code>INT96</code> values. Without this they are represented in a <code>Int128</code> type. With this they are converted to <code>DateTime</code> types.</li>
<li><code>logical_string(v): Applicable for strings that are </code>BYTE_ARRAY<code>values. Without this, they are represented in a</code>Vector{UInt8}<code>type. With this they are converted to</code>String` types.</li>
</ul>
<p>Variants of these methods or custom methods can also be applied by caller.</p>
<h2><a id="user-content-writer" class="anchor" aria-hidden="true" href="#writer"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Writer</h2>
<p>You can write any Tables.jl column-accessible table that contains columns of these types and their union with <code>Missing</code>: <code>Int32</code>, <code>Int64</code>, <code>String</code>, <code>Bool</code>, <code>Float32</code>, <code>Float64</code>.</p>
<p>However, <code>CategoricalArray</code>s are not yet supported. Furthermore, these types are not yet supported: <code>Int96</code>, <code>Int128</code>, <code>Date</code>, and <code>DateTime</code>.</p>
<h3><a id="user-content-writer-example" class="anchor" aria-hidden="true" href="#writer-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Writer Example</h3>
<div class="highlight highlight-source-julia"><pre>tbl <span class="pl-k">=</span> (
    int32 <span class="pl-k">=</span> <span class="pl-c1">Int32</span>.(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">1000</span>),
    int64 <span class="pl-k">=</span> <span class="pl-c1">Int64</span>.(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">1000</span>),
    float32 <span class="pl-k">=</span> <span class="pl-c1">Float32</span>.(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">1000</span>),
    float64 <span class="pl-k">=</span> <span class="pl-c1">Float64</span>.(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">1000</span>),
    bool <span class="pl-k">=</span> <span class="pl-c1">rand</span>(Bool, <span class="pl-c1">1000</span>),
    string <span class="pl-k">=</span> [<span class="pl-c1">randstring</span>(<span class="pl-c1">8</span>) <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">1000</span>],
    int32m <span class="pl-k">=</span> <span class="pl-c1">rand</span>([<span class="pl-c1">missing</span>, <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">100.</span><span class="pl-k">..</span>], <span class="pl-c1">1000</span>),
    int64m <span class="pl-k">=</span> <span class="pl-c1">rand</span>([<span class="pl-c1">missing</span>, <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">100.</span><span class="pl-k">..</span>], <span class="pl-c1">1000</span>),
    float32m <span class="pl-k">=</span> <span class="pl-c1">rand</span>([<span class="pl-c1">missing</span>, <span class="pl-c1">Float32</span>.(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">100</span>)<span class="pl-k">...</span>], <span class="pl-c1">1000</span>),
    float64m <span class="pl-k">=</span> <span class="pl-c1">rand</span>([<span class="pl-c1">missing</span>, <span class="pl-c1">Float64</span>.(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">100</span>)<span class="pl-k">...</span>], <span class="pl-c1">1000</span>),
    boolm <span class="pl-k">=</span> <span class="pl-c1">rand</span>([<span class="pl-c1">missing</span>, <span class="pl-c1">true</span>, <span class="pl-c1">false</span>], <span class="pl-c1">1000</span>),
    stringm <span class="pl-k">=</span> <span class="pl-c1">rand</span>([<span class="pl-c1">missing</span>, <span class="pl-s"><span class="pl-pds">"</span>abc<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>def<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>ghi<span class="pl-pds">"</span></span>], <span class="pl-c1">1000</span>)
)

file <span class="pl-k">=</span> <span class="pl-c1">tempname</span>()<span class="pl-k">*</span><span class="pl-s"><span class="pl-pds">"</span>.parquet<span class="pl-pds">"</span></span>
<span class="pl-c1">write_parquet</span>(file, tbl)</pre></div>
</article></div>