<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-parquet" class="anchor" aria-hidden="true" href="#parquet"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Parquet</h1>
<p><a href="https://travis-ci.org/JuliaIO/Parquet.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/84d3b0c5e0c621e4a56b79123039836aace664d6e0eadf06f7f505518bafd539/68747470733a2f2f7472617669732d63692e6f72672f4a756c6961494f2f506172717565742e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaIO/Parquet.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/tanmaykm/parquet-jl-cufdj/branch/master" rel="nofollow"><img src="https://camo.githubusercontent.com/3fb0f2bc374259019c80f410be2d144d1b2cf12bf526aa637409d79efda56d25/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f6778387076646969657279373472396c2f6272616e63682f6d61737465723f7376673d74727565" alt="Build status" data-canonical-src="https://ci.appveyor.com/api/projects/status/gx8pvdiiery74r9l/branch/master?svg=true" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/JuliaIO/Parquet.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/6e4642b30c1bf2960df967e178cf4a484338d663c1216868e3cbea3c05935b74/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f4a756c6961494f2f506172717565742e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/JuliaIO/Parquet.jl/badge.svg?branch=master" style="max-width:100%;"></a></p>
<h2><a id="user-content-reader" class="anchor" aria-hidden="true" href="#reader"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Reader</h2>
<p>A <a href="https://en.wikipedia.org/wiki/Apache_Parquet" rel="nofollow">parquet file</a> or dataset can be loaded using the <code>read_parquet</code> function. A parquet dataset is a directory with multiple parquet files, each of which is a partition belonging to the dataset.</p>
<p><code>read_parquet(path; kwargs...)</code> returns a <code>Parquet.Table</code> or <code>Parquet.Dataset</code>, which is the table contained in the parquet file or dataset in an Tables.jl compatible format.</p>
<p>Options:</p>
<ul>
<li><code>rows</code>: The row range to iterate through, all rows by default. Applicable only when reading a single file.</li>
<li><code>filter</code>: Filter function to apply while loading only a subset of partitions from a dataset. The path to the partition is provided as a parameter.</li>
<li><code>batchsize</code>: Maximum number of rows to read in each batch (default: row count of first row group). Applied only when reading a single file, and to each file when reading a dataset.</li>
<li><code>use_threads</code>: Whether to use threads while reading the file; applicable only for Julia v1.3 and later and switched on by default if julia processes is started with multiple threads.</li>
<li><code>column_generator</code>: Function to generate a partitioned column when not found in the partitioned table. Parameters provided to the function: table, column index, length of column to generate. Default implementation determines column values from the table path.</li>
</ul>
<p>The returned object is a Tables.jl compatible Table and can be converted to other forms, e.g. a <code>DataFrames.DataFrame</code> via</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Parquet, DataFrames
df = DataFrame(read_parquet(path))
"><pre><span class="pl-k">using</span> Parquet, DataFrames
df <span class="pl-k">=</span> <span class="pl-c1">DataFrame</span>(<span class="pl-c1">read_parquet</span>(path))</pre></div>
<p>Partitions in a parquet file or dataset can also be iterated over using an iterator returned by the <code>Tables.partitions</code> method.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Parquet, DataFrames
for partition in Tables.partitions(read_parquet(path))
    df = DataFrame(partition)
    ...
end
"><pre><span class="pl-k">using</span> Parquet, DataFrames
<span class="pl-k">for</span> partition <span class="pl-k">in</span> Tables<span class="pl-k">.</span><span class="pl-c1">partitions</span>(<span class="pl-c1">read_parquet</span>(path))
    df <span class="pl-k">=</span> <span class="pl-c1">DataFrame</span>(partition)
    <span class="pl-k">...</span>
<span class="pl-k">end</span></pre></div>
<h3><a id="user-content-lower-level-reader" class="anchor" aria-hidden="true" href="#lower-level-reader"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Lower Level Reader</h3>
<p>Load a <a href="https://en.wikipedia.org/wiki/Apache_Parquet" rel="nofollow">parquet file</a>. Only metadata is read initially, data is loaded in chunks on demand. (Note: <a href="https://github.com/queryverse/ParquetFiles.jl">ParquetFiles.jl</a> also provides load support for Parquet files under the FileIO.jl package.)</p>
<p><code>Parquet.File</code> represents a Parquet file at <code>path</code> open for reading.</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="Parquet.File(path) =&gt; Parquet.File
"><pre><code>Parquet.File(path) =&gt; Parquet.File
</code></pre></div>
<p><code>Parquet.File</code> keeps a handle to the open file and the file metadata and also holds a weakly referenced cache of page data read. If the parquet file references other files in its metadata, they will be opened as and when required for reading and closed when they are not needed anymore.</p>
<p>The <code>close</code> method closes the reader, releases open files and makes cached internal data structures available for GC. A <code>Parquet.File</code> instance must not be used once closed.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using Parquet

julia&gt; filename = &quot;customer.impala.parquet&quot;;

julia&gt; parquetfile = Parquet.File(filename)
Parquet file: customer.impala.parquet
    version: 1
    nrows: 150000
    created by: impala version 1.2-INTERNAL (build a462ec42e550c75fccbff98c720f37f3ee9d55a3)
    cached: 0 column chunks
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Parquet

julia<span class="pl-k">&gt;</span> filename <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>customer.impala.parquet<span class="pl-pds">"</span></span>;

julia<span class="pl-k">&gt;</span> parquetfile <span class="pl-k">=</span> Parquet<span class="pl-k">.</span><span class="pl-c1">File</span>(filename)
Parquet file<span class="pl-k">:</span> customer<span class="pl-k">.</span>impala<span class="pl-k">.</span>parquet
    version<span class="pl-k">:</span> <span class="pl-c1">1</span>
    nrows<span class="pl-k">:</span> <span class="pl-c1">150000</span>
    created by<span class="pl-k">:</span> impala version <span class="pl-c1">1.2</span><span class="pl-k">-</span>INTERNAL (build a462ec42e550c75fccbff98c720f37f3ee9d55a3)
    cached<span class="pl-k">:</span> <span class="pl-c1">0</span> column chunks</pre></div>
<p>Examine the schema.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; nrows(parquetfile)
150000

julia&gt; ncols(parquetfile)
8

julia&gt; colnames(parquetfile)
8-element Array{Array{String,1},1}:
 [&quot;c_custkey&quot;]
 [&quot;c_name&quot;]
 [&quot;c_address&quot;]
 [&quot;c_nationkey&quot;]
 [&quot;c_phone&quot;]
 [&quot;c_acctbal&quot;]
 [&quot;c_mktsegment&quot;]
 [&quot;c_comment&quot;]

julia&gt; schema(parquetfile)
Schema:
    schema {
      optional INT64 c_custkey
      optional BYTE_ARRAY c_name
      optional BYTE_ARRAY c_address
      optional INT32 c_nationkey
      optional BYTE_ARRAY c_phone
      optional DOUBLE c_acctbal
      optional BYTE_ARRAY c_mktsegment
      optional BYTE_ARRAY c_comment
    }
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">nrows</span>(parquetfile)
<span class="pl-c1">150000</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">ncols</span>(parquetfile)
<span class="pl-c1">8</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">colnames</span>(parquetfile)
<span class="pl-c1">8</span><span class="pl-k">-</span>element Array{Array{String,<span class="pl-c1">1</span>},<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 [<span class="pl-s"><span class="pl-pds">"</span>c_custkey<span class="pl-pds">"</span></span>]
 [<span class="pl-s"><span class="pl-pds">"</span>c_name<span class="pl-pds">"</span></span>]
 [<span class="pl-s"><span class="pl-pds">"</span>c_address<span class="pl-pds">"</span></span>]
 [<span class="pl-s"><span class="pl-pds">"</span>c_nationkey<span class="pl-pds">"</span></span>]
 [<span class="pl-s"><span class="pl-pds">"</span>c_phone<span class="pl-pds">"</span></span>]
 [<span class="pl-s"><span class="pl-pds">"</span>c_acctbal<span class="pl-pds">"</span></span>]
 [<span class="pl-s"><span class="pl-pds">"</span>c_mktsegment<span class="pl-pds">"</span></span>]
 [<span class="pl-s"><span class="pl-pds">"</span>c_comment<span class="pl-pds">"</span></span>]

julia<span class="pl-k">&gt;</span> <span class="pl-c1">schema</span>(parquetfile)
Schema<span class="pl-k">:</span>
    schema {
      optional INT64 c_custkey
      optional BYTE_ARRAY c_name
      optional BYTE_ARRAY c_address
      optional INT32 c_nationkey
      optional BYTE_ARRAY c_phone
      optional DOUBLE c_acctbal
      optional BYTE_ARRAY c_mktsegment
      optional BYTE_ARRAY c_comment
    }</pre></div>
<p>The reader performs logical type conversions automatically for String (from byte arrays), decimals (from fixed length byte arrays) and DateTime (from Int96). It depends on the converted type being populated correctly in the file metadata to detect such conversions. To take care of files where such metadata is not populated, an optional <code>map_logical_types</code> argument can be provided while opening the parquet file. The <code>map_logical_types</code> value must map column names to a tuple of return type and converter functon. Return types of String and DateTime are supported as of now, and default implementations for them are included in the package.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; mapping = Dict([&quot;column_name&quot;] =&gt; (String, Parquet.logical_string));

julia&gt; parquetfile = Parquet.File(&quot;filename&quot;; map_logical_types=mapping);
"><pre>julia<span class="pl-k">&gt;</span> mapping <span class="pl-k">=</span> <span class="pl-c1">Dict</span>([<span class="pl-s"><span class="pl-pds">"</span>column_name<span class="pl-pds">"</span></span>] <span class="pl-k">=&gt;</span> (String, Parquet<span class="pl-k">.</span>logical_string));

julia<span class="pl-k">&gt;</span> parquetfile <span class="pl-k">=</span> Parquet<span class="pl-k">.</span><span class="pl-c1">File</span>(<span class="pl-s"><span class="pl-pds">"</span>filename<span class="pl-pds">"</span></span>; map_logical_types<span class="pl-k">=</span>mapping);</pre></div>
<p>The reader will interpret logical types based on the <code>map_logical_types</code> provided. The following logical type mapping methods are available in the Parquet package.</p>
<ul>
<li><code>logical_timestamp(v; offset=Dates.Second(0))</code>: Applicable for timestamps that are <code>INT96</code> values. This converts the data read as <code>Int128</code> types to <code>DateTime</code> types.</li>
<li><code>logical_string(v)</code>: Applicable for strings that are <code>BYTE_ARRAY</code> values. Without this, they are represented in a <code>Vector{UInt8}</code> type. With this they are converted to <code>String</code> types.</li>
<li><code>logical_decimal(v, precision, scale; use_float=true)</code>: Applicable for reading decimals from <code>FIXED_LEN_BYTE_ARRAY</code>, <code>INT64</code>, or <code>INT32</code> values. This converts the data read as those types to <code>Integer</code>, <code>Float64</code> or <code>Decimal</code> of the given precision and scale, depending on the options provided.</li>
</ul>
<p>Variants of these methods or custom methods can also be applied by caller.</p>
<h3><a id="user-content-batchedcolumnscursor" class="anchor" aria-hidden="true" href="#batchedcolumnscursor"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>BatchedColumnsCursor</h3>
<p>Create cursor to iterate over batches of column values. Each iteration returns a named tuple of column names with batch of column values. Files with nested schemas can not be read with this cursor.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="BatchedColumnsCursor(parquetfile::Parquet.File; kwargs...)
"><pre><span class="pl-c1">BatchedColumnsCursor</span>(parquetfile<span class="pl-k">::</span><span class="pl-c1">Parquet.File</span>; kwargs<span class="pl-k">...</span>)</pre></div>
<p>Cursor options:</p>
<ul>
<li><code>rows</code>: the row range to iterate through, all rows by default.</li>
<li><code>batchsize</code>: maximum number of rows to read in each batch (default: row count of first row group).</li>
<li><code>reusebuffer</code>: boolean to indicate whether to reuse the buffers with every iteration; if each iteration processes the batch and does not need to refer to the same data buffer again, then setting this to <code>true</code> reduces GC pressure and can help significantly while processing large files.</li>
<li><code>use_threads</code>: whether to use threads while reading the file; applicable only for Julia v1.3 and later and switched on by default if julia processes is started with multiple threads.</li>
</ul>
<p>Example:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; typemap = Dict([&quot;c_name&quot;]=&gt;(String,Parquet.logical_string), [&quot;c_address&quot;]=&gt;(String,Parquet.logical_string));

julia&gt; parquetfile = Parquet.File(&quot;customer.impala.parquet&quot;; map_logical_types=typemap);

julia&gt; cc = BatchedColumnsCursor(parquetfile)
Batched Columns Cursor on customer.impala.parquet
    rows: 1:150000
    batches: 1
    cols: c_custkey, c_name, c_address, c_nationkey, c_phone, c_acctbal, c_mktsegment, c_comment

julia&gt; batchvals, state = iterate(cc);

julia&gt; propertynames(batchvals)
(:c_custkey, :c_name, :c_address, :c_nationkey, :c_phone, :c_acctbal, :c_mktsegment, :c_comment)

julia&gt; length(batchvals.c_name)
150000

julia&gt; batchvals.c_name[1:5]
5-element Array{Union{Missing, String},1}:
 &quot;Customer#000000001&quot;
 &quot;Customer#000000002&quot;
 &quot;Customer#000000003&quot;
 &quot;Customer#000000004&quot;
 &quot;Customer#000000005&quot;
"><pre>julia<span class="pl-k">&gt;</span> typemap <span class="pl-k">=</span> <span class="pl-c1">Dict</span>([<span class="pl-s"><span class="pl-pds">"</span>c_name<span class="pl-pds">"</span></span>]<span class="pl-k">=&gt;</span>(String,Parquet<span class="pl-k">.</span>logical_string), [<span class="pl-s"><span class="pl-pds">"</span>c_address<span class="pl-pds">"</span></span>]<span class="pl-k">=&gt;</span>(String,Parquet<span class="pl-k">.</span>logical_string));

julia<span class="pl-k">&gt;</span> parquetfile <span class="pl-k">=</span> Parquet<span class="pl-k">.</span><span class="pl-c1">File</span>(<span class="pl-s"><span class="pl-pds">"</span>customer.impala.parquet<span class="pl-pds">"</span></span>; map_logical_types<span class="pl-k">=</span>typemap);

julia<span class="pl-k">&gt;</span> cc <span class="pl-k">=</span> <span class="pl-c1">BatchedColumnsCursor</span>(parquetfile)
Batched Columns Cursor on customer<span class="pl-k">.</span>impala<span class="pl-k">.</span>parquet
    rows<span class="pl-k">:</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">150000</span>
    batches<span class="pl-k">:</span> <span class="pl-c1">1</span>
    cols<span class="pl-k">:</span> c_custkey, c_name, c_address, c_nationkey, c_phone, c_acctbal, c_mktsegment, c_comment

julia<span class="pl-k">&gt;</span> batchvals, state <span class="pl-k">=</span> <span class="pl-c1">iterate</span>(cc);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">propertynames</span>(batchvals)
(<span class="pl-c1">:c_custkey</span>, <span class="pl-c1">:c_name</span>, <span class="pl-c1">:c_address</span>, <span class="pl-c1">:c_nationkey</span>, <span class="pl-c1">:c_phone</span>, <span class="pl-c1">:c_acctbal</span>, <span class="pl-c1">:c_mktsegment</span>, <span class="pl-c1">:c_comment</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">length</span>(batchvals<span class="pl-k">.</span>c_name)
<span class="pl-c1">150000</span>

julia<span class="pl-k">&gt;</span> batchvals<span class="pl-k">.</span>c_name[<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">5</span>]
<span class="pl-c1">5</span><span class="pl-k">-</span>element Array{Union{Missing, String},<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-s"><span class="pl-pds">"</span>Customer#000000001<span class="pl-pds">"</span></span>
 <span class="pl-s"><span class="pl-pds">"</span>Customer#000000002<span class="pl-pds">"</span></span>
 <span class="pl-s"><span class="pl-pds">"</span>Customer#000000003<span class="pl-pds">"</span></span>
 <span class="pl-s"><span class="pl-pds">"</span>Customer#000000004<span class="pl-pds">"</span></span>
 <span class="pl-s"><span class="pl-pds">"</span>Customer#000000005<span class="pl-pds">"</span></span></pre></div>
<h3><a id="user-content-recordcursor" class="anchor" aria-hidden="true" href="#recordcursor"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>RecordCursor</h3>
<p>Create cursor to iterate over records. In parallel mode, multiple remote cursors can be created and iterated on in parallel.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="RecordCursor(parquetfile::Parquet.File; kwargs...)
"><pre><span class="pl-c1">RecordCursor</span>(parquetfile<span class="pl-k">::</span><span class="pl-c1">Parquet.File</span>; kwargs<span class="pl-k">...</span>)</pre></div>
<p>Cursor options:</p>
<ul>
<li><code>rows</code>: the row range to iterate through, all rows by default.</li>
<li><code>colnames</code>: the column names to retrieve; all by default</li>
</ul>
<p>Example:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; typemap = Dict([&quot;c_name&quot;]=&gt;(String,Parquet.logical_string), [&quot;c_address&quot;]=&gt;(String,Parquet.logical_string));

julia&gt; parquetfile = Parquet.File(&quot;customer.impala.parquet&quot;; map_logical_types=typemap);

julia&gt; rc = RecordCursor(parquetfile)
Record Cursor on customer.impala.parquet
    rows: 1:150000
    cols: c_custkey, c_name, c_address, c_nationkey, c_phone, c_acctbal, c_mktsegment, c_comment

julia&gt; records = collect(rc);

julia&gt; length(records)
150000

julia&gt; first_record = first(records);

julia&gt; isa(first_record, NamedTuple)
true

julia&gt; propertynames(first_record)
(:c_custkey, :c_name, :c_address, :c_nationkey, :c_phone, :c_acctbal, :c_mktsegment, :c_comment)

julia&gt; first_record.c_custkey
1

julia&gt; first_record.c_name
&quot;Customer#000000001&quot;

julia&gt; first_record.c_address
&quot;IVhzIApeRb ot,c,E&quot;
"><pre>julia<span class="pl-k">&gt;</span> typemap <span class="pl-k">=</span> <span class="pl-c1">Dict</span>([<span class="pl-s"><span class="pl-pds">"</span>c_name<span class="pl-pds">"</span></span>]<span class="pl-k">=&gt;</span>(String,Parquet<span class="pl-k">.</span>logical_string), [<span class="pl-s"><span class="pl-pds">"</span>c_address<span class="pl-pds">"</span></span>]<span class="pl-k">=&gt;</span>(String,Parquet<span class="pl-k">.</span>logical_string));

julia<span class="pl-k">&gt;</span> parquetfile <span class="pl-k">=</span> Parquet<span class="pl-k">.</span><span class="pl-c1">File</span>(<span class="pl-s"><span class="pl-pds">"</span>customer.impala.parquet<span class="pl-pds">"</span></span>; map_logical_types<span class="pl-k">=</span>typemap);

julia<span class="pl-k">&gt;</span> rc <span class="pl-k">=</span> <span class="pl-c1">RecordCursor</span>(parquetfile)
Record Cursor on customer<span class="pl-k">.</span>impala<span class="pl-k">.</span>parquet
    rows<span class="pl-k">:</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">150000</span>
    cols<span class="pl-k">:</span> c_custkey, c_name, c_address, c_nationkey, c_phone, c_acctbal, c_mktsegment, c_comment

julia<span class="pl-k">&gt;</span> records <span class="pl-k">=</span> <span class="pl-c1">collect</span>(rc);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">length</span>(records)
<span class="pl-c1">150000</span>

julia<span class="pl-k">&gt;</span> first_record <span class="pl-k">=</span> <span class="pl-c1">first</span>(records);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">isa</span>(first_record, NamedTuple)
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">propertynames</span>(first_record)
(<span class="pl-c1">:c_custkey</span>, <span class="pl-c1">:c_name</span>, <span class="pl-c1">:c_address</span>, <span class="pl-c1">:c_nationkey</span>, <span class="pl-c1">:c_phone</span>, <span class="pl-c1">:c_acctbal</span>, <span class="pl-c1">:c_mktsegment</span>, <span class="pl-c1">:c_comment</span>)

julia<span class="pl-k">&gt;</span> first_record<span class="pl-k">.</span>c_custkey
<span class="pl-c1">1</span>

julia<span class="pl-k">&gt;</span> first_record<span class="pl-k">.</span>c_name
<span class="pl-s"><span class="pl-pds">"</span>Customer#000000001<span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> first_record<span class="pl-k">.</span>c_address
<span class="pl-s"><span class="pl-pds">"</span>IVhzIApeRb ot,c,E<span class="pl-pds">"</span></span></pre></div>
<h2><a id="user-content-writer" class="anchor" aria-hidden="true" href="#writer"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Writer</h2>
<p>You can write any Tables.jl column-accessible table that contains columns of these types and their union with <code>Missing</code>: <code>Int32</code>, <code>Int64</code>, <code>String</code>, <code>Bool</code>, <code>Float32</code>, <code>Float64</code>.</p>
<p>However, <code>CategoricalArray</code>s are not yet supported. Furthermore, these types are not yet supported: <code>Int96</code>, <code>Int128</code>, <code>Date</code>, and <code>DateTime</code>.</p>
<h3><a id="user-content-writer-example" class="anchor" aria-hidden="true" href="#writer-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Writer Example</h3>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="tbl = (
    int32 = Int32.(1:1000),
    int64 = Int64.(1:1000),
    float32 = Float32.(1:1000),
    float64 = Float64.(1:1000),
    bool = rand(Bool, 1000),
    string = [randstring(8) for i in 1:1000],
    int32m = rand([missing, 1:100...], 1000),
    int64m = rand([missing, 1:100...], 1000),
    float32m = rand([missing, Float32.(1:100)...], 1000),
    float64m = rand([missing, Float64.(1:100)...], 1000),
    boolm = rand([missing, true, false], 1000),
    stringm = rand([missing, &quot;abc&quot;, &quot;def&quot;, &quot;ghi&quot;], 1000)
)

file = tempname()*&quot;.parquet&quot;
write_parquet(file, tbl)
"><pre>tbl <span class="pl-k">=</span> (
    int32 <span class="pl-k">=</span> <span class="pl-c1">Int32</span>.(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">1000</span>),
    int64 <span class="pl-k">=</span> <span class="pl-c1">Int64</span>.(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">1000</span>),
    float32 <span class="pl-k">=</span> <span class="pl-c1">Float32</span>.(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">1000</span>),
    float64 <span class="pl-k">=</span> <span class="pl-c1">Float64</span>.(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">1000</span>),
    bool <span class="pl-k">=</span> <span class="pl-c1">rand</span>(Bool, <span class="pl-c1">1000</span>),
    string <span class="pl-k">=</span> [<span class="pl-c1">randstring</span>(<span class="pl-c1">8</span>) <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">1000</span>],
    int32m <span class="pl-k">=</span> <span class="pl-c1">rand</span>([<span class="pl-c1">missing</span>, <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">100.</span><span class="pl-k">..</span>], <span class="pl-c1">1000</span>),
    int64m <span class="pl-k">=</span> <span class="pl-c1">rand</span>([<span class="pl-c1">missing</span>, <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">100.</span><span class="pl-k">..</span>], <span class="pl-c1">1000</span>),
    float32m <span class="pl-k">=</span> <span class="pl-c1">rand</span>([<span class="pl-c1">missing</span>, <span class="pl-c1">Float32</span>.(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">100</span>)<span class="pl-k">...</span>], <span class="pl-c1">1000</span>),
    float64m <span class="pl-k">=</span> <span class="pl-c1">rand</span>([<span class="pl-c1">missing</span>, <span class="pl-c1">Float64</span>.(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">100</span>)<span class="pl-k">...</span>], <span class="pl-c1">1000</span>),
    boolm <span class="pl-k">=</span> <span class="pl-c1">rand</span>([<span class="pl-c1">missing</span>, <span class="pl-c1">true</span>, <span class="pl-c1">false</span>], <span class="pl-c1">1000</span>),
    stringm <span class="pl-k">=</span> <span class="pl-c1">rand</span>([<span class="pl-c1">missing</span>, <span class="pl-s"><span class="pl-pds">"</span>abc<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>def<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>ghi<span class="pl-pds">"</span></span>], <span class="pl-c1">1000</span>)
)

file <span class="pl-k">=</span> <span class="pl-c1">tempname</span>()<span class="pl-k">*</span><span class="pl-s"><span class="pl-pds">"</span>.parquet<span class="pl-pds">"</span></span>
<span class="pl-c1">write_parquet</span>(file, tbl)</pre></div>
</article></div>