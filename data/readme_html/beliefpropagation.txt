<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-beliefpropagationjl" class="anchor" aria-hidden="true" href="#beliefpropagationjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>BeliefPropagation.jl</h1>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/ArtLabBocconi/BeliefPropagation.jl/workflows/CI/badge.svg"><img src="https://github.com/ArtLabBocconi/BeliefPropagation.jl/workflows/CI/badge.svg" alt="CI" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/ArtLabBocconi/BeliefPropagation.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/b7118616f5eb081bdf50f20c534a67d59d3b99976f8df05f6c8818f94c574ee9/68747470733a2f2f636f6465636f762e696f2f67682f4172744c6162426f63636f6e692f42656c69656650726f7061676174696f6e2e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e7376673f746f6b656e3d45574e59504437415358" alt="codecov" data-canonical-src="https://codecov.io/gh/ArtLabBocconi/BeliefPropagation.jl/branch/master/graph/badge.svg?token=EWNYPD7ASX" style="max-width:100%;"></a></p>
<p>Implementation of Belief Propagation (BP) message passing for:</p>
<ul>
<li>Ising model (<code>Ising</code> module)</li>
<li>Minimum weight perfect matching (<code>Matching</code> module)</li>
<li>Minimum weight perfect b-matching (<code>BMatching</code> module)</li>
</ul>
<p>Package is still experimental and not thoroughly tested, use it at your own risk.
Code contributions are very welcome!</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="]add https://github.com/ArtLabBocconi/BeliefPropagation.jl
"><pre>]add https<span class="pl-k">:</span><span class="pl-k">//</span>github<span class="pl-k">.</span>com<span class="pl-k">/</span>ArtLabBocconi<span class="pl-k">/</span>BeliefPropagation<span class="pl-k">.</span>jl</pre></div>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<p>Problem instances can be created using <a href="https://github.com/CarloLucibello/Erdos.jl">Erdos</a> graph library. Problems are passed to  BP methods as Network objects with features attached to edges and vertices.</p>
<h3><a id="user-content-ising" class="anchor" aria-hidden="true" href="#ising"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Ising</h3>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using BeliefPropagation.Ising
using Erdos 

# Create Ising model on ErdosRenyi graph
# with random couplings and constant external field.
net = erdos_renyi(100, 0.02, Network)
eprop!(net, &quot;J&quot;, e -&gt; randn())
vprop!(net, &quot;H&quot;, v -&gt; 1)

## Run Belief Propagation at some temperature
### and extract magnetizations
fg = Ising.run_bp(net, T=2, maxiters=100);
fg.mags
"><pre><span class="pl-k">using</span> BeliefPropagation<span class="pl-k">.</span>Ising
<span class="pl-k">using</span> Erdos 

<span class="pl-c"><span class="pl-c">#</span> Create Ising model on ErdosRenyi graph</span>
<span class="pl-c"><span class="pl-c">#</span> with random couplings and constant external field.</span>
net <span class="pl-k">=</span> <span class="pl-c1">erdos_renyi</span>(<span class="pl-c1">100</span>, <span class="pl-c1">0.02</span>, Network)
<span class="pl-c1">eprop!</span>(net, <span class="pl-s"><span class="pl-pds">"</span>J<span class="pl-pds">"</span></span>, e <span class="pl-k">-&gt;</span> <span class="pl-c1">randn</span>())
<span class="pl-c1">vprop!</span>(net, <span class="pl-s"><span class="pl-pds">"</span>H<span class="pl-pds">"</span></span>, v <span class="pl-k">-&gt;</span> <span class="pl-c1">1</span>)

<span class="pl-c"><span class="pl-c">#</span># Run Belief Propagation at some temperature</span>
<span class="pl-c"><span class="pl-c">#</span>## and extract magnetizations</span>
fg <span class="pl-k">=</span> Ising<span class="pl-k">.</span><span class="pl-c1">run_bp</span>(net, T<span class="pl-k">=</span><span class="pl-c1">2</span>, maxiters<span class="pl-k">=</span><span class="pl-c1">100</span>);
fg<span class="pl-k">.</span>mags</pre></div>
<h3><a id="user-content-matching" class="anchor" aria-hidden="true" href="#matching"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Matching</h3>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using BeliefPropagation.Matching
using Erdos 
using LinearAlgebra

# Create an instance of the random assignment problem
net = CompleteBipartiteGraph(100, 100, Network)
pos = [rand(2) for i in 1:nv(net)]
eprop!(net, &quot;w&quot;, e -&gt; norm(pos[src(e)] .- pos[dst(e)]))

## Run Belief Propagation and obtain optimal cost and matching
E, match = Matching.run_bp(net, maxiters=100);
"><pre><span class="pl-k">using</span> BeliefPropagation<span class="pl-k">.</span>Matching
<span class="pl-k">using</span> Erdos 
<span class="pl-k">using</span> LinearAlgebra

<span class="pl-c"><span class="pl-c">#</span> Create an instance of the random assignment problem</span>
net <span class="pl-k">=</span> <span class="pl-c1">CompleteBipartiteGraph</span>(<span class="pl-c1">100</span>, <span class="pl-c1">100</span>, Network)
pos <span class="pl-k">=</span> [<span class="pl-c1">rand</span>(<span class="pl-c1">2</span>) <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">nv</span>(net)]
<span class="pl-c1">eprop!</span>(net, <span class="pl-s"><span class="pl-pds">"</span>w<span class="pl-pds">"</span></span>, e <span class="pl-k">-&gt;</span> <span class="pl-c1">norm</span>(pos[<span class="pl-c1">src</span>(e)] <span class="pl-k">.-</span> pos[<span class="pl-c1">dst</span>(e)]))

<span class="pl-c"><span class="pl-c">#</span># Run Belief Propagation and obtain optimal cost and matching</span>
E, match <span class="pl-k">=</span> Matching<span class="pl-k">.</span><span class="pl-c1">run_bp</span>(net, maxiters<span class="pl-k">=</span><span class="pl-c1">100</span>);</pre></div>
<p>The algorithm is guaranteed to return exact solutions only on bipartite graphs
(altough it may also work on non-bipartite).</p>
<h3><a id="user-content-b-matching" class="anchor" aria-hidden="true" href="#b-matching"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>B-Matching</h3>
<p>Solve an instance of the minimum-weight perfect b-matching problem.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using BeliefPropagation.BMatching
using Erdos 
using LinearAlgebra

# Create an instance of the random assignment problem
net = CompleteGraph(100, Network)
eprop!(net, &quot;w&quot;, e -&gt; rand())
vprop!(net, &quot;b&quot;, v -&gt; rand(1:5))

## Run Belief Propagation and obtain optimal cost and matching
E, match = BMatching.run_bp(net, maxiters=100);
"><pre><span class="pl-k">using</span> BeliefPropagation<span class="pl-k">.</span>BMatching
<span class="pl-k">using</span> Erdos 
<span class="pl-k">using</span> LinearAlgebra

<span class="pl-c"><span class="pl-c">#</span> Create an instance of the random assignment problem</span>
net <span class="pl-k">=</span> <span class="pl-c1">CompleteGraph</span>(<span class="pl-c1">100</span>, Network)
<span class="pl-c1">eprop!</span>(net, <span class="pl-s"><span class="pl-pds">"</span>w<span class="pl-pds">"</span></span>, e <span class="pl-k">-&gt;</span> <span class="pl-c1">rand</span>())
<span class="pl-c1">vprop!</span>(net, <span class="pl-s"><span class="pl-pds">"</span>b<span class="pl-pds">"</span></span>, v <span class="pl-k">-&gt;</span> <span class="pl-c1">rand</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">5</span>))

<span class="pl-c"><span class="pl-c">#</span># Run Belief Propagation and obtain optimal cost and matching</span>
E, match <span class="pl-k">=</span> BMatching<span class="pl-k">.</span><span class="pl-c1">run_bp</span>(net, maxiters<span class="pl-k">=</span><span class="pl-c1">100</span>);</pre></div>
<h2><a id="user-content-related-packages" class="anchor" aria-hidden="true" href="#related-packages"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Related Packages</h2>
<ul>
<li><a href="https://github.com/CarloLucibello/SAT.jl">SAT.jl</a>: a BP solver for SAT problems.</li>
<li><a href="https://github.com/biaslab/ForneyLab.jl">ForneyLab.jl</a>: Bayesian inference algorithms through message passing on Forney-style factor graphs.</li>
<li><a href="BinaryCommitteeMachineFBP.jl">BinaryCommitteeMachineFBP.jl</a>: Focusing Belief Propagation on commitee machines (neural network with one-hidden layer and a single output) with binary weights.</li>
</ul>
<h2><a id="user-content-todo" class="anchor" aria-hidden="true" href="#todo"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>TODO</h2>
<p>Problems to be implemented:</p>
<ul>
<li>Low Density Parity Check codes (LDPC)</li>
<li>coloring</li>
<li>xorsat</li>
<li>Potts models</li>
<li>Steiner tree</li>
</ul>
<p>Computation of Bethe free energies is also missing.</p>
</article></div>