<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-ltvmodels" class="anchor" aria-hidden="true" href="#ltvmodels"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>LTVModels</h1>
<p><a href="https://travis-ci.org/baggepinnen/LTVModels.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/5b429bc7cb3bc329542cc80219242602da384d3b/68747470733a2f2f7472617669732d63692e6f72672f626167676570696e6e656e2f4c54564d6f64656c732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/baggepinnen/LTVModels.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/baggepinnen/LTVModels.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/422b610ff497fd7d68a615ada9dbd7f68929b873/68747470733a2f2f636f6465636f762e696f2f67682f626167676570696e6e656e2f4c54564d6f64656c732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/baggepinnen/LTVModels.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<h4><a id="user-content-what-is-this-package-for" class="anchor" aria-hidden="true" href="#what-is-this-package-for"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>What is this package for?</h4>
<p>Estimating linear dynamical models with time-varying parameters (LTV models)</p>
<h4><a id="user-content-what-can-ltv-models-be-used-for" class="anchor" aria-hidden="true" href="#what-can-ltv-models-be-used-for"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>What can LTV models be used for?</h4>
<ul>
<li>They can be used to model, simulate and predict the behaviour of time-varying systems.</li>
<li>Change-point detection, by estimating specific time points when the dynamics of a signal or system changes.</li>
<li>Tell your mother about.</li>
</ul>
<h4><a id="user-content-background-and-references" class="anchor" aria-hidden="true" href="#background-and-references"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Background and references</h4>
<p>This repository implements the system-identification methods presented in<br>
<a href="https://www.control.lth.se/staff/fredrik-bagge-carlson/" rel="nofollow">Bagge Carlson, F.</a>, Robertsson, A. &amp; Johansson, R. <a href="https://arxiv.org/abs/1802.09794" rel="nofollow">"Identification of LTV Dynamical Models with Smooth or Discontinuous Time Evolution by means of Convex Optimization"</a> (IEEE ICCA 2018).<br>
And the thesis<br>
<a href="https://www.control.lth.se/staff/fredrik-bagge-carlson/" rel="nofollow">Bagge Carlson, F.</a>, <a href="https://lup.lub.lu.se/search/publication/ffb8dc85-ce12-4f75-8f2b-0881e492f6c0" rel="nofollow">"Machine Learning and System Identification for Estimation in Physical Systems"</a> (PhD Thesis 2018).</p>
<div class="highlight highlight-text-bibtex"><pre><span class="pl-k">@thesis</span>{<span class="pl-en">bagge2018</span>,
  <span class="pl-s">title</span>        = <span class="pl-s"><span class="pl-pds">{</span>Machine Learning and System Identification for Estimation in Physical Systems<span class="pl-pds">}</span></span>,
  <span class="pl-s">author</span>       = <span class="pl-s"><span class="pl-pds">{</span>Bagge Carlson, Fredrik<span class="pl-pds">}</span></span>,
  <span class="pl-s">keyword</span>      = <span class="pl-s"><span class="pl-pds">{</span>Machine Learning,System Identification,Robotics,Spectral estimation,Calibration,State estimation<span class="pl-pds">}</span></span>,
  <span class="pl-s">month</span>        = <span class="pl-s"><span class="pl-pds">{</span>12<span class="pl-pds">}</span></span>,
  <span class="pl-s">type</span>         = <span class="pl-s"><span class="pl-pds">{</span>PhD Thesis<span class="pl-pds">}</span></span>,
  <span class="pl-s">number</span>       = <span class="pl-s"><span class="pl-pds">{</span>TFRT-1122<span class="pl-pds">}</span></span>,
  <span class="pl-s">institution</span>  = <span class="pl-s"><span class="pl-pds">{</span>Dept. Automatic Control, Lund University, Sweden<span class="pl-pds">}</span></span>,
  <span class="pl-s">year</span>         = <span class="pl-s"><span class="pl-pds">{</span>2018<span class="pl-pds">}</span></span>,
  <span class="pl-s">url</span>          = <span class="pl-s"><span class="pl-pds">{</span><span class="pl-pds">}</span></span>,
}</pre></div>
<h1><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Installation</h1>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> Pkg
<span class="pl-s"><span class="pl-pds"><span class="pl-c1">pkg</span>"</span>add LinearTimeVaryingModelsBase<span class="pl-pds">"</span></span>
<span class="pl-s"><span class="pl-pds"><span class="pl-c1">pkg</span>"</span>add https://github.com/baggepinnen/LTVModels.jl<span class="pl-pds">"</span></span>
<span class="pl-k">using</span> LTVModels</pre></div>
<h1><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Usage</h1>
<h2><a id="user-content-overview" class="anchor" aria-hidden="true" href="#overview"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Overview</h2>
<p>The package implements a number of models and methods to fit them. The models are</p>
<ul>
<li>KalmanModel</li>
<li>LTVAutoRegressive</li>
<li>SimpleLTVModel</li>
</ul>
<p>Any model can be instantiated by calling it with an identification-data object and some model-specific parameters, like this</p>
<div class="highlight highlight-source-julia"><pre>y <span class="pl-k">=</span> <span class="pl-c1">randn</span>(<span class="pl-c1">100</span>)
d <span class="pl-k">=</span> <span class="pl-c1">iddata</span>(y)
modelorder <span class="pl-k">=</span> <span class="pl-c1">2</span>
n  <span class="pl-k">=</span> <span class="pl-c1">6</span>
R1 <span class="pl-k">=</span> <span class="pl-c1">I</span>(modelorder)
R2 <span class="pl-k">=</span> [<span class="pl-c1">1e5</span>] <span class="pl-c"><span class="pl-c">#</span> Increase for more smoothing/regularization</span>
P0 <span class="pl-k">=</span> <span class="pl-c1">1e4</span>R1
model <span class="pl-k">=</span> <span class="pl-c1">LTVAutoRegressive</span>(d, R1, R2, P0, extend<span class="pl-k">=</span><span class="pl-c1">true</span>)</pre></div>
<h2><a id="user-content-details" class="anchor" aria-hidden="true" href="#details"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Details</h2>
<p>Usage of many of the functions is demonstrated in <code>tests/runtests.jl</code></p>
<p>To fit a model by solving<br>
minimize ||y-ŷ||² + λ²||Dₓ k||<br>
and to reproduce Fig. 1 in the paper</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> LTVModels, Plots
<span class="pl-c1">gr</span>(size<span class="pl-k">=</span>(<span class="pl-c1">400</span>,<span class="pl-c1">300</span>))
T_ <span class="pl-k">=</span> <span class="pl-c1">400</span>
x,xm,u,n,m <span class="pl-k">=</span> LTVModels<span class="pl-k">.</span><span class="pl-c1">testdata</span>(T_)

d <span class="pl-k">=</span> <span class="pl-c1">iddata</span>(x,u,x)
dm <span class="pl-k">=</span> <span class="pl-c1">iddata</span>(xm,u,xm)

anim <span class="pl-k">=</span> Plots<span class="pl-k">.</span><span class="pl-c1">Animation</span>()
<span class="pl-k">function</span> <span class="pl-en">callback</span>(k)
    model <span class="pl-k">=</span> LTVModels<span class="pl-k">.</span><span class="pl-c1">statevec2model</span>(SimpleLTVModel,k,n,m,<span class="pl-c1">true</span>)
    fig <span class="pl-k">=</span> <span class="pl-c1">plot</span>(LTVModels<span class="pl-k">.</span><span class="pl-c1">flatten</span>(model<span class="pl-k">.</span>At), l<span class="pl-k">=</span>(<span class="pl-c1">2</span>,<span class="pl-c1">:auto</span>), xlabel<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Time index<span class="pl-pds">"</span></span>, ylabel<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Model coefficients<span class="pl-pds">"</span></span>, show<span class="pl-k">=</span><span class="pl-c1">true</span>, ylims<span class="pl-k">=</span>(<span class="pl-k">-</span><span class="pl-c1">0.05</span>, <span class="pl-c1">1</span>))
    <span class="pl-c1">frame</span>(anim, fig)
<span class="pl-k">end</span>

λ <span class="pl-k">=</span> <span class="pl-c1">17</span>
model <span class="pl-k">=</span> <span class="pl-c1">SimpleLTVModel</span>(dm, extend<span class="pl-k">=</span><span class="pl-c1">true</span>)
<span class="pl-c1">@time</span> model <span class="pl-k">=</span> LTVModels<span class="pl-k">.</span><span class="pl-c1">fit_admm</span>(model, dm, λ, extend<span class="pl-k">=</span><span class="pl-c1">true</span>,
                                                iters    <span class="pl-k">=</span> <span class="pl-c1">10000</span>,
                                                D        <span class="pl-k">=</span> <span class="pl-c1">1</span>,
                                                zeroinit <span class="pl-k">=</span> <span class="pl-c1">true</span>,
                                                tol      <span class="pl-k">=</span> <span class="pl-c1">1e-5</span>,
                                                ridge    <span class="pl-k">=</span> <span class="pl-c1">0</span>,
                                                cb       <span class="pl-k">=</span> callback)
<span class="pl-c1">gif</span>(anim, <span class="pl-s"><span class="pl-pds">"</span>admm.gif<span class="pl-pds">"</span></span>, fps <span class="pl-k">=</span> <span class="pl-c1">10</span>)
y <span class="pl-k">=</span> <span class="pl-c1">predict</span>(model,d)
e <span class="pl-k">=</span> x[:,<span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">end</span>] <span class="pl-k">-</span> y[:,<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">end</span><span class="pl-k">-</span><span class="pl-c1">1</span>]
<span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>RMS error: <span class="pl-pds">"</span></span>, LTVModels<span class="pl-k">.</span><span class="pl-c1">rms</span>(e))

At,Bt <span class="pl-k">=</span> model<span class="pl-k">.</span>At,model<span class="pl-k">.</span>Bt
<span class="pl-c1">plot</span>(<span class="pl-c1">flatten</span>(At), l<span class="pl-k">=</span>(<span class="pl-c1">2</span>,<span class="pl-c1">:auto</span>), xlabel<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Time index<span class="pl-pds">"</span></span>, ylabel<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Model coefficients<span class="pl-pds">"</span></span>)
<span class="pl-c1">plot!</span>([<span class="pl-c1">1</span>,T_<span class="pl-k">÷</span><span class="pl-c1">2</span><span class="pl-k">-</span><span class="pl-c1">1</span>], [<span class="pl-c1">0.95</span> <span class="pl-c1">0.1</span>; <span class="pl-c1">0</span> <span class="pl-c1">0.95</span>][:]'<span class="pl-k">.*</span><span class="pl-c1">ones</span>(<span class="pl-c1">2</span>), l<span class="pl-k">=</span>(<span class="pl-c1">:dash</span>,<span class="pl-c1">:black</span>, <span class="pl-c1">1</span>), primary<span class="pl-k">=</span><span class="pl-c1">false</span>)
<span class="pl-c1">plot!</span>([T_<span class="pl-k">÷</span><span class="pl-c1">2</span>,T_], [<span class="pl-c1">0.5</span> <span class="pl-c1">0.05</span>; <span class="pl-c1">0</span> <span class="pl-c1">0.5</span>][:]'<span class="pl-k">.*</span><span class="pl-c1">ones</span>(<span class="pl-c1">2</span>), l<span class="pl-k">=</span>(<span class="pl-c1">:dash</span>,<span class="pl-c1">:black</span>, <span class="pl-c1">1</span>), grid<span class="pl-k">=</span><span class="pl-c1">false</span>, primary<span class="pl-k">=</span><span class="pl-c1">false</span>)
<span class="pl-c1">gui</span>()</pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="figures/admm.gif"><img src="figures/admm.gif" alt="window" style="max-width:100%;"></a></p>
<p>The animation shows the estimated model coefficients <code>k[t] = A[t],B[t]</code> as a function of time <code>t</code> converge as the optimization procedure is running. The final result is Fig. 1 in the paper.</p>
<h2><a id="user-content-fit-model-using-kalman-smoother" class="anchor" aria-hidden="true" href="#fit-model-using-kalman-smoother"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Fit model using Kalman smoother</h2>
<p>Code to fit a model by solving (7) using a Kalman smoother:</p>
<p>The code generates an LTV model <code>A[t], B[t]</code> and time series <code>x,u</code> governed by the model. A model is then fit using a Kalman smoother and the true model coefficients as well as the estimated are plotted. The gif below illustrates how the choice of covariance parameter influences the estimated time-evolution of the model parameters. As <code>R2</code>→∞, the result approaches that of standard least-squares estimation of an LTI model.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> LTVModels, Plots, LinearAlgebra
T <span class="pl-k">=</span> <span class="pl-c1">2_000</span>
A,B,d,n,m,N <span class="pl-k">=</span> LTVModels<span class="pl-k">.</span><span class="pl-c1">testdata</span>(T<span class="pl-k">=</span>T, σ_state_drift<span class="pl-k">=</span><span class="pl-c1">0.001</span>, σ_param_drift<span class="pl-k">=</span><span class="pl-c1">0.001</span>)

<span class="pl-c1">gr</span>(size<span class="pl-k">=</span>(<span class="pl-c1">400</span>,<span class="pl-c1">300</span>))
<span class="pl-en">eye</span>(n) <span class="pl-k">=</span> <span class="pl-c1">Matrix</span><span class="pl-c1">{Float64}</span>(I,n,n)
anim <span class="pl-k">=</span> <span class="pl-c1">@animate</span> <span class="pl-k">for</span> r2 <span class="pl-k">=</span> <span class="pl-c1">exp10</span>.(<span class="pl-c1">range</span>(<span class="pl-k">-</span><span class="pl-c1">3</span>, stop<span class="pl-k">=</span><span class="pl-c1">3</span>, length<span class="pl-k">=</span><span class="pl-c1">10</span>))
    R1          <span class="pl-k">=</span> <span class="pl-c1">0.001</span><span class="pl-k">*</span><span class="pl-c1">eye</span>(n<span class="pl-k">^</span><span class="pl-c1">2</span><span class="pl-k">+</span>n<span class="pl-k">*</span>m)
    R2          <span class="pl-k">=</span> r2<span class="pl-k">*</span><span class="pl-c1">eye</span>(n)
    P0          <span class="pl-k">=</span> <span class="pl-c1">10000</span>R1
    model <span class="pl-k">=</span> <span class="pl-c1">KalmanModel</span>(d,R1,R2,P0,extend<span class="pl-k">=</span><span class="pl-c1">true</span>, D<span class="pl-k">=</span><span class="pl-c1">1</span>)

    <span class="pl-c1">plot</span>(<span class="pl-c1">flatten</span>(A), l<span class="pl-k">=</span>(<span class="pl-c1">2</span>,), xlabel<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Time index<span class="pl-pds">"</span></span>, ylabel<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Model coefficients<span class="pl-pds">"</span></span>, lab<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>True<span class="pl-pds">"</span></span>, c<span class="pl-k">=</span><span class="pl-c1">:red</span>)
    <span class="pl-c1">plot!</span>(<span class="pl-c1">flatten</span>(model<span class="pl-k">.</span>At), l<span class="pl-k">=</span>(<span class="pl-c1">2</span>,), lab<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Estimated<span class="pl-pds">"</span></span>, c<span class="pl-k">=</span><span class="pl-c1">:blue</span>, legend<span class="pl-k">=</span><span class="pl-c1">false</span>)
<span class="pl-k">end</span>
<span class="pl-c1">gif</span>(anim, <span class="pl-s"><span class="pl-pds">"</span>kalman.gif<span class="pl-pds">"</span></span>, fps <span class="pl-k">=</span> <span class="pl-c1">5</span>)
</pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="figures/kalman.gif"><img src="figures/kalman.gif" alt="window" style="max-width:100%;"></a></p>
<h2><a id="user-content-dynamic-programming-solver" class="anchor" aria-hidden="true" href="#dynamic-programming-solver"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Dynamic programming solver</h2>
<p>To solve the optimization problem in section IID, see the function <code>fit_statespace_dp</code> with usage example in the function <a href="https://github.com/baggepinnen/LTVModels.jl/blob/master/src/seg_bellman.jl#L183"><code>benchmark_ss</code></a></p>
<h2><a id="user-content-two-step-procedure" class="anchor" aria-hidden="true" href="#two-step-procedure"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Two-step procedure</h2>
<p>See functions in files <code>peakdetection.jl</code> and function <code>fit_statespace_constrained</code></p>
<h2><a id="user-content-figs-2-3" class="anchor" aria-hidden="true" href="#figs-2-3"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Figs. 2-3</h2>
<p>The simulation of the two-link robot presented in figures 2-3 in the paper is generated using the code in <a href="https://github.com/baggepinnen/LTVModels.jl/blob/master/examples/two_link.jl"><code>two_link.jl</code></a></p>
<h2><a id="user-content-fig-4" class="anchor" aria-hidden="true" href="#fig-4"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Fig. 4</h2>
<p>To appear</p>
<p><a href="https://github.com/baggepinnen/DifferentialDynamicProgramming.jl/tree/dev">DifferentialDynamicProgramming.jl</a></p>
<h2><a id="user-content-lti-estimation" class="anchor" aria-hidden="true" href="#lti-estimation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>LTI estimation</h2>
<p>Estimation of standard LTI systems is provided by <a href="https://github.com/baggepinnen/ControlSystemIdentification.jl">ControlSystemIdentification.jl</a></p>
</article></div>