<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-objectivecjl" class="anchor" aria-hidden="true" href="#objectivecjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>ObjectiveC.jl</h1>
<div class="highlight highlight-source-julia"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">clone</span>(<span class="pl-s"><span class="pl-pds">"</span>ObjectiveC<span class="pl-pds">"</span></span>)</pre></div>
<p>ObjectiveC.jl is an Objective-C bridge for Julia. The library allows you to call Objective-C methods using native syntax:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> ObjectiveC

<span class="pl-c1">@objc</span> [NSString new]</pre></div>
<p>This makes it easy to wrap Objective-C APIs from Julia.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> ObjectiveC

<span class="pl-c1">@classes</span> NSSound

<span class="pl-k">function</span> <span class="pl-en">play</span>(name<span class="pl-k">::</span><span class="pl-c1">String</span>)
  <span class="pl-c1">@objc</span> <span class="pl-k">begin</span>
    sound <span class="pl-k">=</span> [NSSound soundNamed<span class="pl-k">:</span>name]
    <span class="pl-k">if</span> [sound isPlaying] <span class="pl-k">|&gt;</span> bool
      [sound stop]
    <span class="pl-k">end</span>
    [sound play]
  <span class="pl-k">end</span>
<span class="pl-k">end</span>

<span class="pl-c1">play</span>(<span class="pl-s"><span class="pl-pds">"</span>Purr<span class="pl-pds">"</span></span>)</pre></div>
<p>ObjectiveC.jl also supports defining classes, using a variant of Objective-C
syntax (which eschews the interface/implementation distinction):</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">@class</span> type Foo
  @<span class="pl-k">-</span> (Cdouble) multiply<span class="pl-k">:</span>(Cdouble)x by<span class="pl-k">:</span>(Cdouble)y <span class="pl-k">begin</span>
    x<span class="pl-k">*</span>y <span class="pl-c"><span class="pl-c">#</span> Note that this is Julia code</span>
  <span class="pl-k">end</span>
<span class="pl-k">end</span>

<span class="pl-c1">@objc</span> [[Foo new] multiply<span class="pl-k">:</span><span class="pl-c1">5</span> by<span class="pl-k">:</span><span class="pl-c1">3</span>]
<span class="pl-c"><span class="pl-c">#</span>&gt; 15</span></pre></div>
<p>You can leave out the type to default to <code>Object</code>. So long as you don't change
the type of the method, you're able to redefine it on the fly – even if you've
already created instances of the class and used them as delegates.</p>
<h2><a id="user-content-using-cocoa" class="anchor" aria-hidden="true" href="#using-cocoa"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>using Cocoa</h2>
<p>The library provides some basic wrappers for the Cocoa framework for creating
GUIs. Despite having generally nice APIs Objective-C is ridiculously verbose, so
it's handy to have Julia wrappers for most functionality.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> ObjectiveC, Cocoa
Cocoa<span class="pl-k">.</span><span class="pl-c1">init</span>()
win <span class="pl-k">=</span> <span class="pl-c1">window</span>()</pre></div>
<p>This will pop up a window with the title "Julia". Now let's try something more
interesting:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">for</span> α <span class="pl-k">=</span> <span class="pl-c1">linspace</span>(<span class="pl-c1">0</span>,π,<span class="pl-c1">50</span>)
  <span class="pl-c1">@objc</span> [win setAlphaValue<span class="pl-k">:</span><span class="pl-c1">cos</span>(α)<span class="pl-k">^</span><span class="pl-c1">2</span>]
  <span class="pl-c1">sleep</span>(<span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-c1">100</span>)
<span class="pl-k">end</span></pre></div>
<p>You should see the window fade in and out again.</p>
<p>If you're using <a href="http://junolab.org" rel="nofollow">Juno</a>, I encourage you to try uncommenting
<a href="https://github.com/one-more-minute/ObjectiveC.jl/blob/65f8605657a9a5c7bf5eab6cea89c6c431ff332d/src/cocoa/cocoa.jl#L48">this line</a>
and pressing <code>C-Enter</code> to evaluate the class definition (after opening a window
as above). You'll notice that the class is actually redefined on-the-fly, and
you'll hear a popping sound as the <code>tick</code> method is called (and you can do the
reverse to stop the sound, of course).</p>
<h2><a id="user-content-current-limitations" class="anchor" aria-hidden="true" href="#current-limitations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Current Limitations</h2>
<ul>
<li>Julia's FFI doesn't have great support for structs yet, so neither does
ObjectiveC.jl. Luckily structs aren't too common in Objective-C APIs, and
where they are used it's not too difficult to add wrappers (see
<a href="deps/cocoa.m">cocoa.m</a>)</li>
<li>Objective-C calls made from Julia are not as fast as they could be. This
is fine for most GUI-related purposes, since most calls will be callbacks
made by the Objective-C runtime, but may not be suitable for use with
high-performance scientific computing libraries written in Objective-C.</li>
<li>Instance variables are not yet supported on classes.</li>
<li>Probably other things I haven't thought of; ObjectiveC.jl has not been used
for any remotely large projects yet so proceed with caution.</li>
</ul>
</article></div>