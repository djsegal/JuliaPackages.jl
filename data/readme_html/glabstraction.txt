<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-glabstraction" class="anchor" aria-hidden="true" href="#glabstraction"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>GLAbstraction</h1>
<p>A simple library, which makes the use of OpenGL a little bit more convenient and Julian.
If you have any questions, please open an issue.</p>
<p>There are some <a href="tutorials/README.md">tutorials</a> and <a href="https://github.com/JuliaGL/GLAbstraction.jl/tree/master/example">examples</a>.</p>
<h3><a id="user-content-features" class="anchor" aria-hidden="true" href="#features"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Features</h3>
<ul>
<li>Some linear algebrae, to do all kinds of transformations.</li>
<li>All the different glUniform functions are wrapped and the right function is determined via multiple dispatch (works for <a href="https://github.com/SimonDanisch/FixedSizeArrays.jl">FixedSizeArrays</a>, <a href="https://github.com/JuliaGraphics/Colors.jl">Colors</a> and Real numbers)</li>
<li><code>Buffers</code> and <code>Texture</code> objects are wrapped, with best support for arrays of FixedSizeArrays, Colors and Reals.</li>
<li>An Array interface for <code>Buffers</code> and <code>Textures</code>, offering functions like <code>push!</code>, <code>getindex</code>, <code>setindex!</code>, etc for GPU arrays, just like you're used to from Julia Arrays.</li>
<li>Shader loading is simplified and offers templated shaders and interactive editing of shaders and type/error checks.</li>
<li>Offers the type <code>RenderOject</code>, which helps you preparing the OpenGL state to render data with a shader.</li>
<li>Event handling with <a href="https://github.com/JuliaLang/Reactive.jl">Reactive</a></li>
<li>Two camera types (PerspectiveCamera and OrthogonalCamera), which can be instantiated with a list of React signals from GLWindow. You can also supply your own signals.</li>
<li>Some wrappers for often used functions, with embedded error handling and more Julian syntax</li>
</ul>
<h3><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example:</h3>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> ModernGL, GLWindow, GLAbstraction, GLFW, GeometryTypes

window <span class="pl-k">=</span> GLWindow<span class="pl-k">.</span><span class="pl-c1">create_glcontext</span>(<span class="pl-s"><span class="pl-pds">"</span>Example<span class="pl-pds">"</span></span>, resolution<span class="pl-k">=</span>(<span class="pl-c1">512</span>, <span class="pl-c1">512</span>), debugging<span class="pl-k">=</span><span class="pl-c1">true</span>)


<span class="pl-k">const</span> vsh <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds"><span class="pl-c1">vert</span>"""</span></span>
<span class="pl-s">{{GLSL_VERSION}}</span>
<span class="pl-s">in vec2 position;</span>
<span class="pl-s">void main(){</span>
<span class="pl-s">	gl_Position = vec4(position, 0, 1.0);</span>
<span class="pl-s">}</span>
<span class="pl-s"><span class="pl-pds">"""</span></span>
<span class="pl-k">const</span> fsh <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds"><span class="pl-c1">frag</span>"""</span></span>
<span class="pl-s">{{GLSL_VERSION}}</span>
<span class="pl-s">out vec4 outColor;</span>
<span class="pl-s">void main() {</span>
<span class="pl-s">	outColor = vec4(1.0, 1.0, 1.0, 1.0);</span>
<span class="pl-s">}</span>
<span class="pl-s"><span class="pl-pds">"""</span></span>

<span class="pl-k">const</span> triangle <span class="pl-k">=</span> <span class="pl-c1">std_renderobject</span>(
	<span class="pl-c1">Dict</span><span class="pl-c1">{Symbol, Any}</span>(
        <span class="pl-c1">:position</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">Buffer</span>(Point2f0[(<span class="pl-c1">0.0</span>, <span class="pl-c1">0.5</span>), (<span class="pl-c1">0.5</span>, <span class="pl-k">-</span><span class="pl-c1">0.5</span>), (<span class="pl-k">-</span><span class="pl-c1">0.5</span>,<span class="pl-k">-</span><span class="pl-c1">0.5</span>)]),
    ),
	<span class="pl-c1">LazyShader</span>(vsh, fsh)
)

<span class="pl-c1">glClearColor</span>(<span class="pl-c1">0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">1</span>)

<span class="pl-k">while</span> <span class="pl-c1">isopen</span>(window)
  	<span class="pl-c1">glClear</span>(GL_COLOR_BUFFER_BIT <span class="pl-k">|</span> GL_DEPTH_BUFFER_BIT)
    <span class="pl-c1">render</span>(triangle)
  	<span class="pl-c1">swapbuffers</span>(window)
  	<span class="pl-c1">poll_glfw</span>()
<span class="pl-k">end</span>
</pre></div>
<h1><a id="user-content-credits" class="anchor" aria-hidden="true" href="#credits"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Credits</h1>
<p>Thanks for all the great <a href="https://github.com/JuliaGL/GLAbstraction.jl/graphs/contributors">contributions</a></p>
</article></div>