<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-glabstraction" class="anchor" aria-hidden="true" href="#glabstraction"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>GLAbstraction</h1>
<p dir="auto">A simple library, which makes the use of OpenGL a little bit more convenient and Julian.
If you have any questions, please open an issue.</p>
<p dir="auto">There are some <a href="tutorials/README.md">tutorials</a> and <a href="https://github.com/JuliaGL/GLAbstraction.jl/tree/master/example">examples</a>.</p>
<h3 dir="auto"><a id="user-content-features" class="anchor" aria-hidden="true" href="#features"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Features</h3>
<ul dir="auto">
<li>All the different glUniform functions are wrapped and the right function is determined via multiple dispatch (works for <a href="https://github.com/SimonDanisch/FixedSizeArrays.jl">FixedSizeArrays</a>, <a href="https://github.com/JuliaGraphics/Colors.jl">Colors</a> and Real numbers)</li>
<li><code>Buffers</code> and <code>Texture</code> objects are wrapped, with best support for arrays of FixedSizeArrays, Colors and Reals.</li>
<li>An Array interface for <code>Buffers</code> and <code>Textures</code>, offering functions like <code>push!</code>, <code>getindex</code>, <code>setindex!</code>, etc for GPU arrays, just like you're used to from Julia Arrays.</li>
<li>Shader loading is simplified and offers templated shaders and interactive editing of shaders and type/error checks.</li>
<li>Some wrappers for often used functions, with embedded error handling and more Julian syntax</li>
</ul>
<h3 dir="auto"><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example:</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using ModernGL, GeometryTypes, GLAbstraction, GLFW

const GLA = GLAbstraction

window = GLFW.Window(name=&quot;Drawing polygons 5&quot;, resolution=(800,600))
GLA.set_context!(window)

vertex_shader = GLA.vert&quot;&quot;&quot;
#version 150

in vec2 position;
in vec3 color;

out vec3 Color;

void main()
{
    Color = color;
    gl_Position = vec4(position, 0.0, 1.0);
}
&quot;&quot;&quot;

fragment_shader = GLA.frag&quot;&quot;&quot;
# version 150

in vec3 Color;

out vec4 outColor;

void main()
{
    outColor = vec4(Color, 1.0);
}
&quot;&quot;&quot;

prog = GLA.Program(vertex_shader, fragment_shader)

vertex_positions = Point{2,Float32}[(-0.5,  0.5),     
                                    ( 0.5,  0.5),     
                                    ( 0.5, -0.5),     
                                    (-0.5, -0.5)]     

vertex_colors = Vec3f0[(1, 0, 0),                     
                       (0, 1, 0),                     
                       (0, 0, 1),                     
                       (1, 1, 1)]
elements = Face{3,UInt32}[(0,1,2),
                          (2,3,0)]
buffers = GLA.generate_buffers(prog, position = vertex_positions, color = vertex_colors)
vao = GLA.VertexArray(buffers, elements)
glClearColor(0, 0, 0, 1)

while !GLFW.WindowShouldClose(window)
    glClear(GL_COLOR_BUFFER_BIT)
    GLA.bind(prog)
    GLA.bind(vao)
    GLA.draw(vao)
    GLA.unbind(vao) #optional in this case
    GLA.unbind(prog) #optional in this case
    GLFW.SwapBuffers(window)
    GLFW.PollEvents()
    if GLFW.GetKey(window, GLFW.KEY_ESCAPE) == GLFW.PRESS
        GLFW.SetWindowShouldClose(window, true)
    end
end
GLFW.DestroyWindow(window)  # needed if you're running this from the REPL"><pre><span class="pl-k">using</span> ModernGL, GeometryTypes, GLAbstraction, GLFW

<span class="pl-k">const</span> GLA <span class="pl-k">=</span> GLAbstraction

window <span class="pl-k">=</span> GLFW<span class="pl-k">.</span><span class="pl-c1">Window</span>(name<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Drawing polygons 5<span class="pl-pds">"</span></span>, resolution<span class="pl-k">=</span>(<span class="pl-c1">800</span>,<span class="pl-c1">600</span>))
GLA<span class="pl-k">.</span><span class="pl-c1">set_context!</span>(window)

vertex_shader <span class="pl-k">=</span> GLA<span class="pl-k">.</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">vert</span>"""</span></span>
<span class="pl-s">#version 150</span>
<span class="pl-s"></span>
<span class="pl-s">in vec2 position;</span>
<span class="pl-s">in vec3 color;</span>
<span class="pl-s"></span>
<span class="pl-s">out vec3 Color;</span>
<span class="pl-s"></span>
<span class="pl-s">void main()</span>
<span class="pl-s">{</span>
<span class="pl-s">    Color = color;</span>
<span class="pl-s">    gl_Position = vec4(position, 0.0, 1.0);</span>
<span class="pl-s">}</span>
<span class="pl-s"><span class="pl-pds">"""</span></span>

fragment_shader <span class="pl-k">=</span> GLA<span class="pl-k">.</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">frag</span>"""</span></span>
<span class="pl-s"># version 150</span>
<span class="pl-s"></span>
<span class="pl-s">in vec3 Color;</span>
<span class="pl-s"></span>
<span class="pl-s">out vec4 outColor;</span>
<span class="pl-s"></span>
<span class="pl-s">void main()</span>
<span class="pl-s">{</span>
<span class="pl-s">    outColor = vec4(Color, 1.0);</span>
<span class="pl-s">}</span>
<span class="pl-s"><span class="pl-pds">"""</span></span>

prog <span class="pl-k">=</span> GLA<span class="pl-k">.</span><span class="pl-c1">Program</span>(vertex_shader, fragment_shader)

vertex_positions <span class="pl-k">=</span> Point{<span class="pl-c1">2</span>,Float32}[(<span class="pl-k">-</span><span class="pl-c1">0.5</span>,  <span class="pl-c1">0.5</span>),     
                                    ( <span class="pl-c1">0.5</span>,  <span class="pl-c1">0.5</span>),     
                                    ( <span class="pl-c1">0.5</span>, <span class="pl-k">-</span><span class="pl-c1">0.5</span>),     
                                    (<span class="pl-k">-</span><span class="pl-c1">0.5</span>, <span class="pl-k">-</span><span class="pl-c1">0.5</span>)]     

vertex_colors <span class="pl-k">=</span> Vec3f0[(<span class="pl-c1">1</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>),                     
                       (<span class="pl-c1">0</span>, <span class="pl-c1">1</span>, <span class="pl-c1">0</span>),                     
                       (<span class="pl-c1">0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">1</span>),                     
                       (<span class="pl-c1">1</span>, <span class="pl-c1">1</span>, <span class="pl-c1">1</span>)]
elements <span class="pl-k">=</span> Face{<span class="pl-c1">3</span>,UInt32}[(<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">2</span>),
                          (<span class="pl-c1">2</span>,<span class="pl-c1">3</span>,<span class="pl-c1">0</span>)]
buffers <span class="pl-k">=</span> GLA<span class="pl-k">.</span><span class="pl-c1">generate_buffers</span>(prog, position <span class="pl-k">=</span> vertex_positions, color <span class="pl-k">=</span> vertex_colors)
vao <span class="pl-k">=</span> GLA<span class="pl-k">.</span><span class="pl-c1">VertexArray</span>(buffers, elements)
<span class="pl-c1">glClearColor</span>(<span class="pl-c1">0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">1</span>)

<span class="pl-k">while</span> <span class="pl-k">!</span>GLFW<span class="pl-k">.</span><span class="pl-c1">WindowShouldClose</span>(window)
    <span class="pl-c1">glClear</span>(GL_COLOR_BUFFER_BIT)
    GLA<span class="pl-k">.</span><span class="pl-c1">bind</span>(prog)
    GLA<span class="pl-k">.</span><span class="pl-c1">bind</span>(vao)
    GLA<span class="pl-k">.</span><span class="pl-c1">draw</span>(vao)
    GLA<span class="pl-k">.</span><span class="pl-c1">unbind</span>(vao) <span class="pl-c"><span class="pl-c">#</span>optional in this case</span>
    GLA<span class="pl-k">.</span><span class="pl-c1">unbind</span>(prog) <span class="pl-c"><span class="pl-c">#</span>optional in this case</span>
    GLFW<span class="pl-k">.</span><span class="pl-c1">SwapBuffers</span>(window)
    GLFW<span class="pl-k">.</span><span class="pl-c1">PollEvents</span>()
    <span class="pl-k">if</span> GLFW<span class="pl-k">.</span><span class="pl-c1">GetKey</span>(window, GLFW<span class="pl-k">.</span>KEY_ESCAPE) <span class="pl-k">==</span> GLFW<span class="pl-k">.</span>PRESS
        GLFW<span class="pl-k">.</span><span class="pl-c1">SetWindowShouldClose</span>(window, <span class="pl-c1">true</span>)
    <span class="pl-k">end</span>
<span class="pl-k">end</span>
GLFW<span class="pl-k">.</span><span class="pl-c1">DestroyWindow</span>(window)  <span class="pl-c"><span class="pl-c">#</span> needed if you're running this from the REPL</span></pre></div>
<h1 dir="auto"><a id="user-content-credits" class="anchor" aria-hidden="true" href="#credits"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Credits</h1>
<p dir="auto">Thanks for all the great <a href="https://github.com/JuliaGL/GLAbstraction.jl/graphs/contributors">contributions</a></p>
</article></div>