<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-dedataarraysjl" class="anchor" aria-hidden="true" href="#dedataarraysjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>DEDataArrays.jl</h1>
<h2 dir="auto"><a id="user-content-note-this-functionality-is-deprecated-see-the-bottom-for-details" class="anchor" aria-hidden="true" href="#note-this-functionality-is-deprecated-see-the-bottom-for-details"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Note: This functionality is deprecated. See the bottom for details.</h2>
<p dir="auto"><a href="https://gitter.im/JuliaDiffEq/Lobby?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge&amp;utm_content=badge" rel="nofollow"><img src="https://camo.githubusercontent.com/833b89353967086ef3bf7e1d470c469fd93cc80696ae173ffc5fbcf401d2f5af/68747470733a2f2f6261646765732e6769747465722e696d2f4a756c69614469666645712f4c6f6262792e737667" alt="Join the chat at https://gitter.im/JuliaDiffEq/Lobby" data-canonical-src="https://badges.gitter.im/JuliaDiffEq/Lobby.svg" style="max-width: 100%;"></a>
<a href="https://github.com/SciML/DEDataArrays.jl/actions?query=workflow%3ACI"><img src="https://github.com/SciML/DEDataArrays.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a></p>
<p dir="auto">The <code>DEDataArray{T}</code> type allows one to add other "non-continuous" variables
to an array, which can be useful in many modeling situations involving lots of
events. To define an <code>DEDataArray</code>, make a type which subtypes <code>DEDataArray{T}</code>
with a field <code>x</code> for the "array of continuous variables" for which you would
like the differential equation to treat directly. The other fields are treated
as "discrete variables". For example:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="mutable struct MyDataArray{T,1} &lt;: DEDataArray{T,1}
    x::Array{T,1}
    a::T
    b::Symbol
end"><pre><span class="pl-k">mutable struct</span> MyDataArray{T,<span class="pl-c1">1</span>} <span class="pl-k">&lt;:</span> <span class="pl-c1">DEDataArray{T,1}</span>
    x<span class="pl-k">::</span><span class="pl-c1">Array{T,1}</span>
    a<span class="pl-k">::</span><span class="pl-c1">T</span>
    b<span class="pl-k">::</span><span class="pl-c1">Symbol</span>
<span class="pl-k">end</span></pre></div>
<p dir="auto">In this example, our resultant array is a <code>SimType</code>, and its data which is presented
to the differential equation solver will be the array <code>x</code>. Any array which the
differential equation solver can use is allowed to be made as the field <code>x</code>, including
other <code>DEDataArray</code>s. Other than that, you can add whatever fields you please, and
let them be whatever type you please.</p>
<p dir="auto">These extra fields are carried along in the differential equation solver that
the user can use in their <code>f</code> equation and modify via callbacks. For example,
inside of a an update function, it is safe to do:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="function f(du,u,p,t)
  u.a = t
end"><pre><span class="pl-k">function</span> <span class="pl-en">f</span>(du,u,p,t)
  u<span class="pl-k">.</span>a <span class="pl-k">=</span> t
<span class="pl-k">end</span></pre></div>
<p dir="auto">to update the discrete variables (unless the algorithm notes that it does not
step to the endpoint, in which case a callback must be used to update appropriately.)</p>
<p dir="auto">Note that the aliases <code>DEDataVector</code> and <code>DEDataMatrix</code> cover the one and two
dimensional cases.</p>
<h3 dir="auto"><a id="user-content-example-a-control-problem" class="anchor" aria-hidden="true" href="#example-a-control-problem"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example: A Control Problem</h3>
<p dir="auto">In this example we will use a <code>DEDataArray</code> to solve a problem where control parameters
change at various timepoints. First we will build</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="mutable struct SimType{T} &lt;: DEDataVector{T}
    x::Array{T,1}
    f1::T
end"><pre><span class="pl-k">mutable struct</span> SimType{T} <span class="pl-k">&lt;:</span> <span class="pl-c1">DEDataVector{T}</span>
    x<span class="pl-k">::</span><span class="pl-c1">Array{T,1}</span>
    f1<span class="pl-k">::</span><span class="pl-c1">T</span>
<span class="pl-k">end</span></pre></div>
<p dir="auto">as our <code>DEDataVector</code>. It has an extra field <code>f1</code> which we will use as our control
variable. Our ODE function will use this field as follows:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="function f(du,u,p,t)
    du[1] = -0.5*u[1] + u.f1
    du[2] = -0.5*u[2]
end"><pre><span class="pl-k">function</span> <span class="pl-en">f</span>(du,u,p,t)
    du[<span class="pl-c1">1</span>] <span class="pl-k">=</span> <span class="pl-k">-</span><span class="pl-c1">0.5</span><span class="pl-k">*</span>u[<span class="pl-c1">1</span>] <span class="pl-k">+</span> u<span class="pl-k">.</span>f1
    du[<span class="pl-c1">2</span>] <span class="pl-k">=</span> <span class="pl-k">-</span><span class="pl-c1">0.5</span><span class="pl-k">*</span>u[<span class="pl-c1">2</span>]
<span class="pl-k">end</span></pre></div>
<p dir="auto">Now we will setup our control mechanism. It will be a simple setup which uses
set timepoints at which we will change <code>f1</code>. At <code>t=5.0</code> we will want to increase
the value of <code>f1</code>, and at <code>t=8.0</code> we will want to decrease the value of <code>f1</code>. Using
the [<code>DiscreteCallback</code> interface](@ref discrete_callback), we code these conditions
as follows:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="const tstop1 = [5.]
const tstop2 = [8.]


function condition(u,t,integrator)
  t in tstop1
end

function condition2(u,t,integrator)
  t in tstop2
end"><pre><span class="pl-k">const</span> tstop1 <span class="pl-k">=</span> [<span class="pl-c1">5.</span>]
<span class="pl-k">const</span> tstop2 <span class="pl-k">=</span> [<span class="pl-c1">8.</span>]


<span class="pl-k">function</span> <span class="pl-en">condition</span>(u,t,integrator)
  t <span class="pl-k">in</span> tstop1
<span class="pl-k">end</span>

<span class="pl-k">function</span> <span class="pl-en">condition2</span>(u,t,integrator)
  t <span class="pl-k">in</span> tstop2
<span class="pl-k">end</span></pre></div>
<p dir="auto">Now we have to apply an effect when these conditions are reached. When <code>condition</code>
is hit (at <code>t=5.0</code>), we will increase <code>f1</code> to 1.5. When <code>condition2</code> is reached,
we will decrease <code>f1</code> to <code>-1.5</code>. This is done via the functions:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="function affect!(integrator)
  for c in full_cache(integrator)
    c.f1 = 1.5
  end
end

function affect2!(integrator)
  for c in full_cache(integrator)
    c.f1 = -1.5
  end
end"><pre><span class="pl-k">function</span> <span class="pl-en">affect!</span>(integrator)
  <span class="pl-k">for</span> c <span class="pl-k">in</span> <span class="pl-c1">full_cache</span>(integrator)
    c<span class="pl-k">.</span>f1 <span class="pl-k">=</span> <span class="pl-c1">1.5</span>
  <span class="pl-k">end</span>
<span class="pl-k">end</span>

<span class="pl-k">function</span> <span class="pl-en">affect2!</span>(integrator)
  <span class="pl-k">for</span> c <span class="pl-k">in</span> <span class="pl-c1">full_cache</span>(integrator)
    c<span class="pl-k">.</span>f1 <span class="pl-k">=</span> <span class="pl-k">-</span><span class="pl-c1">1.5</span>
  <span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>
<p dir="auto">Notice that we have to loop through the <code>full_cache</code> array (provided by the integrator
interface) to ensure that all internal caches are also updated. With these functions
we can build our callbacks:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="save_positions = (true,true)

cb = DiscreteCallback(condition, affect!, save_positions=save_positions)

save_positions = (false,true)

cb2 = DiscreteCallback(condition2, affect2!, save_positions=save_positions)

cbs = CallbackSet(cb,cb2)"><pre>save_positions <span class="pl-k">=</span> (<span class="pl-c1">true</span>,<span class="pl-c1">true</span>)

cb <span class="pl-k">=</span> <span class="pl-c1">DiscreteCallback</span>(condition, affect!, save_positions<span class="pl-k">=</span>save_positions)

save_positions <span class="pl-k">=</span> (<span class="pl-c1">false</span>,<span class="pl-c1">true</span>)

cb2 <span class="pl-k">=</span> <span class="pl-c1">DiscreteCallback</span>(condition2, affect2!, save_positions<span class="pl-k">=</span>save_positions)

cbs <span class="pl-k">=</span> <span class="pl-c1">CallbackSet</span>(cb,cb2)</pre></div>
<p dir="auto">Now we define our initial condition. We will start at <code>[10.0;10.0]</code> with <code>f1=0.0</code>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="u0 = SimType([10.0;10.0], 0.0)
prob = ODEProblem(f,u0,(0.0,10.0))"><pre>u0 <span class="pl-k">=</span> <span class="pl-c1">SimType</span>([<span class="pl-c1">10.0</span>;<span class="pl-c1">10.0</span>], <span class="pl-c1">0.0</span>)
prob <span class="pl-k">=</span> <span class="pl-c1">ODEProblem</span>(f,u0,(<span class="pl-c1">0.0</span>,<span class="pl-c1">10.0</span>))</pre></div>
<p dir="auto">Lastly we solve the problem. Note that we must pass <code>tstop</code> values of <code>5.0</code> and
<code>8.0</code> to ensure the solver hits those timepoints exactly:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="const tstop = [5.;8.]
sol = solve(prob,Tsit5(),callback = cbs, tstops=tstop)"><pre><span class="pl-k">const</span> tstop <span class="pl-k">=</span> [<span class="pl-c1">5.</span>;<span class="pl-c1">8.</span>]
sol <span class="pl-k">=</span> <span class="pl-c1">solve</span>(prob,<span class="pl-c1">Tsit5</span>(),callback <span class="pl-k">=</span> cbs, tstops<span class="pl-k">=</span>tstop)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://user-images.githubusercontent.com/1814174/127798873-624f3f37-e89b-4938-8088-b51107d278a1.png"><img src="https://user-images.githubusercontent.com/1814174/127798873-624f3f37-e89b-4938-8088-b51107d278a1.png" alt="data_array_plot" style="max-width: 100%;"></a></p>
<p dir="auto">It's clear from the plot how the controls affected the outcome.</p>
<h3 dir="auto"><a id="user-content-data-arrays-vs-parameterized-functions" class="anchor" aria-hidden="true" href="#data-arrays-vs-parameterized-functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Data Arrays vs Parameterized Functions</h3>
<p dir="auto">The reason for using a <code>DEDataArray</code> is because the solution will then save the
control parameters. For example, we can see what the control parameter was at
every timepoint by checking:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="[sol[i].f1 for i in 1:length(sol)]"><pre>[sol[i]<span class="pl-k">.</span>f1 <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">length</span>(sol)]</pre></div>
<p dir="auto">A similar solution can be achieved using a <code>ParameterizedFunction</code>.
We could have instead created our function as:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="function f(du,u,p,t)
    du[1] = -0.5*u[1] + p
    du[2] = -0.5*u[2]
end
u0 = SimType([10.0;10.0], 0.0)
p = 0.0
prob = ODEProblem(f,u0,(0.0,10.0),p)
const tstop = [5.;8.]
sol = solve(prob,Tsit5(),callback = cbs, tstops=tstop)"><pre><span class="pl-k">function</span> <span class="pl-en">f</span>(du,u,p,t)
    du[<span class="pl-c1">1</span>] <span class="pl-k">=</span> <span class="pl-k">-</span><span class="pl-c1">0.5</span><span class="pl-k">*</span>u[<span class="pl-c1">1</span>] <span class="pl-k">+</span> p
    du[<span class="pl-c1">2</span>] <span class="pl-k">=</span> <span class="pl-k">-</span><span class="pl-c1">0.5</span><span class="pl-k">*</span>u[<span class="pl-c1">2</span>]
<span class="pl-k">end</span>
u0 <span class="pl-k">=</span> <span class="pl-c1">SimType</span>([<span class="pl-c1">10.0</span>;<span class="pl-c1">10.0</span>], <span class="pl-c1">0.0</span>)
p <span class="pl-k">=</span> <span class="pl-c1">0.0</span>
prob <span class="pl-k">=</span> <span class="pl-c1">ODEProblem</span>(f,u0,(<span class="pl-c1">0.0</span>,<span class="pl-c1">10.0</span>),p)
<span class="pl-k">const</span> tstop <span class="pl-k">=</span> [<span class="pl-c1">5.</span>;<span class="pl-c1">8.</span>]
sol <span class="pl-k">=</span> <span class="pl-c1">solve</span>(prob,<span class="pl-c1">Tsit5</span>(),callback <span class="pl-k">=</span> cbs, tstops<span class="pl-k">=</span>tstop)</pre></div>
<p dir="auto">where we now change the callbacks to changing the parameter:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="function affect!(integrator)
  integrator.p = 1.5
end

function affect2!(integrator)
  integrator.p = -1.5
end"><pre><span class="pl-k">function</span> <span class="pl-en">affect!</span>(integrator)
  integrator<span class="pl-k">.</span>p <span class="pl-k">=</span> <span class="pl-c1">1.5</span>
<span class="pl-k">end</span>

<span class="pl-k">function</span> <span class="pl-en">affect2!</span>(integrator)
  integrator<span class="pl-k">.</span>p <span class="pl-k">=</span> <span class="pl-k">-</span><span class="pl-c1">1.5</span>
<span class="pl-k">end</span></pre></div>
<p dir="auto">This will also solve the equation and get a similar result. It will also be slightly
faster in some cases. However, if the equation is solved in this manner, there will
be no record of what the parameter was at each timepoint. That is the tradeoff
between <code>DEDataArray</code>s and <code>ParameterizedFunction</code>s.</p>
<h2 dir="auto"><a id="user-content-downsides-of-dedataarrays" class="anchor" aria-hidden="true" href="#downsides-of-dedataarrays"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Downsides of DEDataArrays</h2>
<p dir="auto">DEDataArray is not a good idea. <a href="https://discourse.julialang.org/t/diffeqs-hybrid-continuous-discrete-system-periodic-callback/23791/19?u=chrisrackauckas" rel="nofollow">This explains why</a>. But, this repo will stay alive to keep it around for
people who still want to use it.</p>
<p dir="auto">Note that in OrdinaryDiffEq v6.14.1 explicit support for DEDataArrays in FunctionMap was removed.
PR: <a class="issue-link js-issue-link" data-error-text="Failed to load title" data-id="1259075699" data-permission-text="Title is private" data-url="https://github.com/SciML/OrdinaryDiffEq.jl/issues/1680" data-hovercard-type="pull_request" data-hovercard-url="/SciML/OrdinaryDiffEq.jl/pull/1680/hovercard" href="https://github.com/SciML/OrdinaryDiffEq.jl/pull/1680">SciML/OrdinaryDiffEq.jl#1680</a></p>
<p dir="auto">To get support, evaluate the function:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="function OrdinaryDiffEq.perform_step!(integrator,cache::OrdinaryDiffEq.FunctionMapCache,repeat_step=false)
  OrdinaryDiffEq.@unpack u,uprev,dt,t,f,p = integrator
  alg = OrdinaryDiffEq.unwrap_alg(integrator, nothing)
  OrdinaryDiffEq.@unpack tmp = cache
  if integrator.f != OrdinaryDiffEq.DiffEqBase.DISCRETE_INPLACE_DEFAULT &amp;&amp;
     !(typeof(integrator.f) &lt;: OrdinaryDiffEq.DiffEqBase.EvalFunc &amp;&amp;  integrator.f.f === OrdinaryDiffEq.DiffEqBase.DISCRETE_INPLACE_DEFAULT)
    if OrdinaryDiffEq.FunctionMap_scale_by_time(alg)
      f(tmp, uprev, p, t+dt)
      OrdinaryDiffEq.@muladd OrdinaryDiffEq.@.. broadcast=false u = uprev + dt*tmp
    else
      f(u,uprev,p,t+dt)
    end
    integrator.destats.nf += 1
    if typeof(u) &lt;: DEDataArrays.DEDataArray # Needs to get the fields, since updated uprev
      DEDataArrays.copy_fields!(u,uprev)
    end
  end
end  "><pre><span class="pl-k">function</span> OrdinaryDiffEq<span class="pl-k">.</span><span class="pl-en">perform_step!</span>(integrator,cache<span class="pl-k">::</span><span class="pl-c1">OrdinaryDiffEq.FunctionMapCache</span>,repeat_step<span class="pl-k">=</span><span class="pl-c1">false</span>)
  OrdinaryDiffEq<span class="pl-k">.</span><span class="pl-c1">@unpack</span> u,uprev,dt,t,f,p <span class="pl-k">=</span> integrator
  alg <span class="pl-k">=</span> OrdinaryDiffEq<span class="pl-k">.</span><span class="pl-c1">unwrap_alg</span>(integrator, <span class="pl-c1">nothing</span>)
  OrdinaryDiffEq<span class="pl-k">.</span><span class="pl-c1">@unpack</span> tmp <span class="pl-k">=</span> cache
  <span class="pl-k">if</span> integrator<span class="pl-k">.</span>f <span class="pl-k">!=</span> OrdinaryDiffEq<span class="pl-k">.</span>DiffEqBase<span class="pl-k">.</span>DISCRETE_INPLACE_DEFAULT <span class="pl-k">&amp;&amp;</span>
     <span class="pl-k">!</span>(<span class="pl-c1">typeof</span>(integrator<span class="pl-k">.</span>f) <span class="pl-k">&lt;:</span> <span class="pl-c1">OrdinaryDiffEq.DiffEqBase.EvalFunc</span> <span class="pl-k">&amp;&amp;</span>  integrator<span class="pl-k">.</span>f<span class="pl-k">.</span>f <span class="pl-k">===</span> OrdinaryDiffEq<span class="pl-k">.</span>DiffEqBase<span class="pl-k">.</span>DISCRETE_INPLACE_DEFAULT)
    <span class="pl-k">if</span> OrdinaryDiffEq<span class="pl-k">.</span><span class="pl-c1">FunctionMap_scale_by_time</span>(alg)
      <span class="pl-c1">f</span>(tmp, uprev, p, t<span class="pl-k">+</span>dt)
      OrdinaryDiffEq<span class="pl-k">.</span><span class="pl-c1">@muladd</span> OrdinaryDiffEq<span class="pl-k">.</span><span class="pl-c1">@.</span>. broadcast<span class="pl-k">=</span><span class="pl-c1">false</span> u <span class="pl-k">=</span> uprev <span class="pl-k">+</span> dt<span class="pl-k">*</span>tmp
    <span class="pl-k">else</span>
      <span class="pl-c1">f</span>(u,uprev,p,t<span class="pl-k">+</span>dt)
    <span class="pl-k">end</span>
    integrator<span class="pl-k">.</span>destats<span class="pl-k">.</span>nf <span class="pl-k">+=</span> <span class="pl-c1">1</span>
    <span class="pl-k">if</span> <span class="pl-c1">typeof</span>(u) <span class="pl-k">&lt;:</span> <span class="pl-c1">DEDataArrays.DEDataArray</span> <span class="pl-c"><span class="pl-c">#</span> Needs to get the fields, since updated uprev</span>
      DEDataArrays<span class="pl-k">.</span><span class="pl-c1">copy_fields!</span>(u,uprev)
    <span class="pl-k">end</span>
  <span class="pl-k">end</span>
<span class="pl-k">end</span>  </pre></div>
<p dir="auto">at your own risk.</p>
</article></div>