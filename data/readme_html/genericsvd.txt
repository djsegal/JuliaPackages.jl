<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-genericsvdjl" class="anchor" aria-hidden="true" href="#genericsvdjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>GenericSVD.jl</h1>
<p><a href="https://travis-ci.org/JuliaLinearAlgebra/GenericSVD.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/264132b8ff438e818a13ec7add8eb662b389a2b7/68747470733a2f2f7472617669732d63692e6f72672f4a756c69614c696e656172416c67656272612f47656e657269635356442e6a6c2e7376673f6272616e63683d6d6173746572" alt="Travis Build Status" data-canonical-src="https://travis-ci.org/JuliaLinearAlgebra/GenericSVD.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/simonbyrne/genericsvd-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/5fe2a9d9ded0fdeadb7f1ad718f2b0f990b6053c/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f303937697230713967706f61366c62363f7376673d74727565" alt="AppVeyor Build status" data-canonical-src="https://ci.appveyor.com/api/projects/status/097ir0q9gpoa6lb6?svg=true" style="max-width:100%;"></a></p>
<p>Implements Singular Value Decomposition for generic number types, such as <code>BigFloat</code>, <code>Complex{BigFloat}</code> or <a href="https://github.com/JuliaGeometry/Quaternions.jl"><code>Quaternion</code>s</a>. It internally overloads several Base functions such that existing methods (<code>svd</code>, <code>svdfact</code> and <code>svdvals</code>) should work directly.</p>
<p>It uses a Golub-Kahan 2-stage algorithm of bidiagonalization with Householder reflections, followed by an implicit QR with shift.</p>
<h2><a id="user-content-acknowledgements" class="anchor" aria-hidden="true" href="#acknowledgements"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Acknowledgements</h2>
<p>Based on initial code by Andreas Noack.</p>
<h2><a id="user-content-references" class="anchor" aria-hidden="true" href="#references"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>References</h2>
<ul>
<li>Golub, G. H. and Van Loan, C. F. (2013), "ยง8.6.3 The SVD Algorithm", <em>Matrix Computations</em> (4th ed.), Johns Hopkins University Press, Baltimore, MD, USA.</li>
</ul>
</article></div>