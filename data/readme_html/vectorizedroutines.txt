<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-vectorizedroutinesjl" class="anchor" aria-hidden="true" href="#vectorizedroutinesjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>VectorizedRoutines.jl</h1>
<p><a href="https://travis-ci.org/ChrisRackauckas/VectorizedRoutines.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/eaeb46925765e36b8155580300198b811283b285/68747470733a2f2f7472617669732d63692e6f72672f43687269735261636b6175636b61732f566563746f72697a6564526f7574696e65732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/ChrisRackauckas/VectorizedRoutines.jl.svg?branch=master" style="max-width:100%;"></a> <a href="https://ci.appveyor.com/project/ChrisRackauckas/vectorizedroutines-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/36fc480717e61576554c405b01d4648f27b996ca/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f69663966697066656d746479673439703f7376673d74727565" alt="Build status" data-canonical-src="https://ci.appveyor.com/api/projects/status/if9fipfemtdyg49p?svg=true" style="max-width:100%;"></a></p>
<p>VectorizedRoutines.jl provides a library of familiar and useful vectorized routines. This package hopes to include high-performance, tested, and documented  Julia implementations  of routines which MATLAB/Python/R users would be familiar with. We also welcome generally useful routines for operating on vectors/arrays.</p>
<h1><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Installation</h1>
<p>To install the package, simply use:</p>
<div class="highlight highlight-source-julia"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>VectorizedRoutines<span class="pl-pds">"</span></span>)
<span class="pl-k">using</span> VectorizedRoutines</pre></div>
<p>For the latest features, switch to the master branch via:</p>
<div class="highlight highlight-source-julia"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">checkout</span>(<span class="pl-s"><span class="pl-pds">"</span>VectorizedRoutines<span class="pl-pds">"</span></span>)</pre></div>
<h1><a id="user-content-using-the-package" class="anchor" aria-hidden="true" href="#using-the-package"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Using the Package</h1>
<p>The functions from R/Python/MATLAB are implemented in order to match the functionality
of their appropriate packages. In order to not have namespace issues, they are
contained in appropriate modules, so you would call the MATLAB functions like:</p>
<div class="highlight highlight-source-julia"><pre>mgrid <span class="pl-k">=</span> Matlab<span class="pl-k">.</span><span class="pl-c1">meshgrid</span>(<span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">1</span><span class="pl-k">//</span><span class="pl-c1">4</span><span class="pl-k">:</span><span class="pl-c1">1</span>,<span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">1</span><span class="pl-k">//</span><span class="pl-c1">8</span><span class="pl-k">:</span><span class="pl-c1">1</span>)</pre></div>
<p>and the R functions like:</p>
<div class="highlight highlight-source-julia"><pre>v1<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">5</span>
v2 <span class="pl-k">=</span> <span class="pl-c1">5</span><span class="pl-k">:</span><span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">1</span>
repped <span class="pl-k">=</span> R<span class="pl-k">.</span><span class="pl-c1">rep</span>(v1,v2)</pre></div>
<p>Although these look like they are calling some outside package from these languages,
they are bonafide Julia implementations and thus can handle Julia specific issues
(like using Rational numbers in the meshgrid).</p>
<p>If you want to export the functions to the main namespace, simply use the commands like this:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> VectorizedRoutines<span class="pl-k">.</span>R
<span class="pl-c1">rpois</span>(<span class="pl-c1">1</span>,[<span class="pl-c1">5.2</span>;<span class="pl-c1">3.3</span>]) <span class="pl-c"><span class="pl-c">#</span> Same as R.rpois(1,[5.2;3.3])</span>
</pre></div>
<p>The original Julia vectorized routines offered here do not need to be prefaced:</p>
<div class="highlight highlight-source-julia"><pre>xs <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">26</span>
<span class="pl-c1">pairwise</span>((x,y)<span class="pl-k">-&gt;</span><span class="pl-c1">sqrt</span>(x<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">+</span> y<span class="pl-k">^</span><span class="pl-c1">2</span>), xs)</pre></div>
<h1><a id="user-content-current-functions-and-macros" class="anchor" aria-hidden="true" href="#current-functions-and-macros"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Current Functions and Macros</h1>
<ul>
<li>
<p>MATLAB</p>
<ul>
<li><code>ngrid</code></li>
<li><code>meshgrid</code></li>
<li><code>accumarray</code> (fast)</li>
<li><code>accumarray2</code> (more functionality)</li>
<li>Compatibility Functions:
<ul>
<li><code>disp</code></li>
<li><code>strcat</code></li>
<li><code>num2str</code></li>
<li><code>max</code></li>
<li><code>numel</code></li>
</ul>
</li>
</ul>
</li>
<li>
<p>Python</p>
</li>
<li>
<p>R</p>
<ul>
<li><code>rep</code></li>
<li><code>rep!</code></li>
<li><code>findinterval</code></li>
<li><code>rpois</code> (<a href="http://codereview.stackexchange.com/questions/134926/benchmarks-of-scientific-programming-languages-r-julia-mathematica-matlab-f/135220#135220" rel="nofollow">fast on vectors</a>)</li>
<li><code>rpois!</code></li>
</ul>
</li>
<li>
<p>The package also offers Julia-native vectorized routines that are not found in MATLAB, Python or R.</p>
<ul>
<li><code>multireshape</code> (a reshape which can produce views to multiple arrays)</li>
<li><code>pairwise</code> (apply a function to all pairwise combinations of elements from an array)</li>
<li><code>pairwise!</code></li>
</ul>
</li>
</ul>
</article></div>