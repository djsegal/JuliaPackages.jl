<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-reducewindows" class="anchor" aria-hidden="true" href="#reducewindows"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>ReduceWindows</h1>
<p dir="auto"><a href="https://github.com/jw3126/ReduceWindows.jl/actions/workflows/CI.yml?query=branch%3Amain"><img src="https://github.com/jw3126/ReduceWindows.jl/actions/workflows/CI.yml/badge.svg?branch=main" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/jw3126/ReduceWindows.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/c92e61b63d94895c1ebc714ea65977b882ee7debcdee025c8c2d83ba469aeeb7/68747470733a2f2f636f6465636f762e696f2f67682f6a77333132362f52656475636557696e646f77732e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/jw3126/ReduceWindows.jl/branch/main/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">Apply <code>reduce</code> over a sliding window.</p>
<h1 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h1>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using ReduceWindows
x = [1,2,3,4,5]
reduce_window(+, x, (-1:1,))
# [3, 6, 9, 12, 9]
reduce_window(max, x, (-1:1,))
# [2, 3, 4, 5, 5]
reduce_window(min, x, (-3:0,))
# [1, 1, 1, 1, 2]

x = [1 2 3; 4 5 6]
reduce_window(*, x, (0:1,0:1))
# 40  180  18
# 20   30   6"><pre><span class="pl-k">using</span> ReduceWindows
x <span class="pl-k">=</span> [<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>,<span class="pl-c1">4</span>,<span class="pl-c1">5</span>]
<span class="pl-c1">reduce_window</span>(<span class="pl-k">+</span>, x, (<span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">1</span>,))
<span class="pl-c"><span class="pl-c">#</span> [3, 6, 9, 12, 9]</span>
<span class="pl-c1">reduce_window</span>(max, x, (<span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">1</span>,))
<span class="pl-c"><span class="pl-c">#</span> [2, 3, 4, 5, 5]</span>
<span class="pl-c1">reduce_window</span>(min, x, (<span class="pl-k">-</span><span class="pl-c1">3</span><span class="pl-k">:</span><span class="pl-c1">0</span>,))
<span class="pl-c"><span class="pl-c">#</span> [1, 1, 1, 1, 2]</span>

x <span class="pl-k">=</span> [<span class="pl-c1">1</span> <span class="pl-c1">2</span> <span class="pl-c1">3</span>; <span class="pl-c1">4</span> <span class="pl-c1">5</span> <span class="pl-c1">6</span>]
<span class="pl-c1">reduce_window</span>(<span class="pl-k">*</span>, x, (<span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">1</span>,<span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">1</span>))
<span class="pl-c"><span class="pl-c">#</span> 40  180  18</span>
<span class="pl-c"><span class="pl-c">#</span> 20   30   6</span></pre></div>
<h1 dir="auto"><a id="user-content-speed" class="anchor" aria-hidden="true" href="#speed"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Speed</h1>
<p dir="auto">This package has very competitive performance, especially for large windows.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="arr = randn(500,500)
window = (-50:50, -50:50)
using ImageFiltering: mapwindow
mapwindow(maximum, arr, window) # warmup
out1 = @showtime mapwindow(maximum, arr, window)

using ReduceWindows
reduce_window(max, arr, window) # warmup
out2 = @showtime reduce_window(max, arr, window)
@assert out1 == out2"><pre>arr <span class="pl-k">=</span> <span class="pl-c1">randn</span>(<span class="pl-c1">500</span>,<span class="pl-c1">500</span>)
window <span class="pl-k">=</span> (<span class="pl-k">-</span><span class="pl-c1">50</span><span class="pl-k">:</span><span class="pl-c1">50</span>, <span class="pl-k">-</span><span class="pl-c1">50</span><span class="pl-k">:</span><span class="pl-c1">50</span>)
<span class="pl-k">using</span> ImageFiltering<span class="pl-k">:</span> mapwindow
<span class="pl-c1">mapwindow</span>(maximum, arr, window) <span class="pl-c"><span class="pl-c">#</span> warmup</span>
out1 <span class="pl-k">=</span> <span class="pl-c1">@showtime</span> <span class="pl-c1">mapwindow</span>(maximum, arr, window)

<span class="pl-k">using</span> ReduceWindows
<span class="pl-c1">reduce_window</span>(max, arr, window) <span class="pl-c"><span class="pl-c">#</span> warmup</span>
out2 <span class="pl-k">=</span> <span class="pl-c1">@showtime</span> <span class="pl-c1">reduce_window</span>(max, arr, window)
<span class="pl-c1">@assert</span> out1 <span class="pl-k">==</span> out2</pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="mapwindow(maximum, arr, window): 2.075822 seconds (1.26 M allocations: 227.561 MiB, 0.76% gc time)
reduce_window(max, arr, window): 0.002320 seconds (14 allocations: 7.630 MiB)"><pre class="notranslate"><code>mapwindow(maximum, arr, window): 2.075822 seconds (1.26 M allocations: 227.561 MiB, 0.76% gc time)
reduce_window(max, arr, window): 0.002320 seconds (14 allocations: 7.630 MiB)
</code></pre></div>
<p dir="auto">Naively reducing a windows of size <code>k</code> over an array of size <code>n</code> is <code>O(k*n)</code>.
However the algorithm implemented here is <code>O(log(k)*n)</code> making it practical to reduce over large windows.
This packages also ships an <code>O(n)</code> algorithm, for extremly large windows or very costly ops.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="arr = randn(500,500)
window = (-50:50, -50:50)
using ImageFiltering: mapwindow
using ReduceWindows
const OPCOUNT = Ref(0)
function mymax(x,y)
    OPCOUNT[] += 1
    max(x,y)
end

mapwindow(w-&gt;reduce(mymax, w), arr, window)
opcount_naive = OPCOUNT[]
OPCOUNT[] = 0
reduce_window(mymax, arr, window)
opcount_reduce_window = OPCOUNT[]
@show opcount_naive
@show opcount_reduce_window"><pre>arr <span class="pl-k">=</span> <span class="pl-c1">randn</span>(<span class="pl-c1">500</span>,<span class="pl-c1">500</span>)
window <span class="pl-k">=</span> (<span class="pl-k">-</span><span class="pl-c1">50</span><span class="pl-k">:</span><span class="pl-c1">50</span>, <span class="pl-k">-</span><span class="pl-c1">50</span><span class="pl-k">:</span><span class="pl-c1">50</span>)
<span class="pl-k">using</span> ImageFiltering<span class="pl-k">:</span> mapwindow
<span class="pl-k">using</span> ReduceWindows
<span class="pl-k">const</span> OPCOUNT <span class="pl-k">=</span> <span class="pl-c1">Ref</span>(<span class="pl-c1">0</span>)
<span class="pl-k">function</span> <span class="pl-en">mymax</span>(x,y)
    OPCOUNT[] <span class="pl-k">+=</span> <span class="pl-c1">1</span>
    <span class="pl-c1">max</span>(x,y)
<span class="pl-k">end</span>

<span class="pl-c1">mapwindow</span>(w<span class="pl-k">-&gt;</span><span class="pl-c1">reduce</span>(mymax, w), arr, window)
opcount_naive <span class="pl-k">=</span> OPCOUNT[]
OPCOUNT[] <span class="pl-k">=</span> <span class="pl-c1">0</span>
<span class="pl-c1">reduce_window</span>(mymax, arr, window)
opcount_reduce_window <span class="pl-k">=</span> OPCOUNT[]
<span class="pl-c1">@show</span> opcount_naive
<span class="pl-c1">@show</span> opcount_reduce_window</pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="opcount_naive = 2550010200
opcount_reduce_window = 4775000"><pre class="notranslate"><code>opcount_naive = 2550010200
opcount_reduce_window = 4775000
</code></pre></div>
<h1 dir="auto"><a id="user-content-alternatives" class="anchor" aria-hidden="true" href="#alternatives"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Alternatives</h1>
<ul dir="auto">
<li><a href="https://github.com/JuliaImages/ImageFiltering.jl">ImageFiltering.jl</a> much more features than this packge, but slow for large windows.</li>
<li><a href="https://github.com/jw3126/MeanFilters.jl">MeanFilters.jl</a> fast, lightwight but very narrow usecase.</li>
<li><a href="https://github.com/stev47/StaticKernels.jl">StaticKernels.jl</a> has very good performance for small windows.</li>
</ul>
</article></div>