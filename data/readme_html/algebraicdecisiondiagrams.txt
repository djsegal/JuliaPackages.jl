<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-algebraicdecisiondiagramsjl" class="anchor" aria-hidden="true" href="#algebraicdecisiondiagramsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>AlgebraicDecisionDiagrams.jl</h1>
<p dir="auto"><a href="https://denismaua.github.io/AlgebraicDecisionDiagrams.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://denismaua.github.io/AlgebraicDecisionDiagrams.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/denismaua/AlgebraicDecisionDiagrams.jl/actions"><img src="https://github.com/denismaua/AlgebraicDecisionDiagrams.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a></p>
<p dir="auto">This package implements Algebraic Decision Diagrams <a href="#adds">[2]</a>. It is focused on usability at the expense of optimization.</p>
<h2 dir="auto"><a id="user-content-instalation" class="anchor" aria-hidden="true" href="#instalation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Instalation</h2>
<p dir="auto">In a Julia shell, type:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="import Pkg; Pkg.add(&quot;http://github.com/denismaua/AlgebraicDecisionDiagrams.jl&quot;)"><pre><span class="pl-k">import</span> Pkg; Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>http://github.com/denismaua/AlgebraicDecisionDiagrams.jl<span class="pl-pds">"</span></span>)</pre></div>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<p dir="auto">ADD are represented as parametric linked structures. The easiest way to create and manipulate ADDs is by using operations and constants. Omitting types is equivalent to assuming Boolean constant values (hence BDDs <a href="#bdds">[1]</a>).</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using AlgebraicDecisionDiagrams
# Use alias for convenience
const ADD = AlgebraicDecisionDiagrams 

# Boolean Decision Diagrams

## This creates a positive literal on variable 1
l1 = pliteral(1)
@show ¬l1 # obtains the negation of that literal
@show apply(~,l1) # alternatively, one can apply negation (~) to the function
@show l1 ∧ (¬l1) # contradiction
@show l1 ∨ (¬l1) # tautology

## The BDD in Fig. 7 in Bryant's paper [1]
l2, l3 = pliteral(2), pliteral(3)
@show ¬(l1 ∧ l3) ∨ (l2 ∧ l3)

# Algebraic Decision Diagrams

## Example from Fig. 1 in Bryant's paper, using 0/1 constants [1]
x1, x2, x3 = indicator(Int,1), indicator(Int,2), indicator(Int,3)
@show apply((¬x1)*x2, x1*x3, max)

## Example in Fig. 5 of Bryant's paper, using 0/1 constants [1]
@show ADD.reduce( # return canonical form
    Node(1, # variable index (integer)
        Node(2, # variable index
            zero(Int), # low child -&gt; additivite identity for Int (0)
            indicator(Int,3)
        ), # high child -&gt; indicator node on variable 3
        Node(2,
            indicator(Int,3), # low
            indicator(Int,3)  # high
        )
    )
)

## Example in Fig 1. in Bahar et al. 1997's paper [2]
x0 = indicator(Int,0)
x1 = indicator(Int,2)
y0 = indicator(Int,1)
y1 = indicator(Int,3)
@show graph = Terminal(2)*(¬x0)*(¬x1)*(¬y0)*y1 + Terminal(2)*(¬x0)*(¬x1)*y0*(¬y1) + Terminal(2)*(¬x0)*x1*(¬y0)*y1 + Terminal(2)*(¬x0)*x1*y0*(¬y1) + Terminal(4)*x0*(¬x1)*y0*y1 + Terminal(4)*x0*x1*(¬y0)*y1

## Diagram Traversal
# To collect all nonterminal nodes of the previous diagram
nt = filter(n -&gt; isa(n,Node), collect(graph)) # node are traversed in depth-first order
# now obtain its set of variable indices (without repetition)
@show mapreduce(index,union,nt) # should contain 0,1,2,3

## Matrix examples in page 9
@show f = (¬x0)*(¬y0) + x0*y0
@show g = Terminal(4)*(¬x0) + Terminal(2)*x0
@show h = f + g
@info &quot;Restriction&quot;
@show restrict(h,0,false)
@show h | (1 =&gt; true)
@show (h | (index(x0) =&gt; true)) + (h | (index(x0) =&gt; false))
@show (h | (index(y0) =&gt; true)) + (h | (index(y0) =&gt; false))

# Parametrized ADDs: ADDs with Multilinear Expressions (MLE) constants

const MLE = MultilinearExpression # Alias

## Create some MLE examples
@show a = MLE(2.0,1,3) + MLE(2.0,3)
@show b = MLE(3.0,2) + MLE(1.0,2,4) + MLE(1.0,4)
@show c = a * b

## Now create PADDs
@show x1 = indicator(MLE,1) # equivalent to 
#@show x1 = Node(1, MLE(0.0), MLE(1.0))
@show x2 = indicator(MLE,2) # equivalent to
#@show x2 = Node(2, MLE(0.0), MLE(1.0))
@show x3 = x1 + x2
@show d1 = Node(1, 1 + MLE(-1.0,1), MLE(1,1))
@show m1 = x1 + d1
@show d2 = Node(2, 1 + MLE(-1.0,2), MLE(1,2))
@show m2 = x2 + d2
@show m3 = d1 * d2"><pre><span class="pl-k">using</span> AlgebraicDecisionDiagrams
<span class="pl-c"><span class="pl-c">#</span> Use alias for convenience</span>
<span class="pl-k">const</span> ADD <span class="pl-k">=</span> AlgebraicDecisionDiagrams 

<span class="pl-c"><span class="pl-c">#</span> Boolean Decision Diagrams</span>

<span class="pl-c"><span class="pl-c">#</span># This creates a positive literal on variable 1</span>
l1 <span class="pl-k">=</span> <span class="pl-c1">pliteral</span>(<span class="pl-c1">1</span>)
<span class="pl-c1">@show</span> ¬l1 <span class="pl-c"><span class="pl-c">#</span> obtains the negation of that literal</span>
<span class="pl-c1">@show</span> <span class="pl-c1">apply</span>(<span class="pl-k">~</span>,l1) <span class="pl-c"><span class="pl-c">#</span> alternatively, one can apply negation (~) to the function</span>
<span class="pl-c1">@show</span> l1 ∧ (¬l1) <span class="pl-c"><span class="pl-c">#</span> contradiction</span>
<span class="pl-c1">@show</span> l1 ∨ (¬l1) <span class="pl-c"><span class="pl-c">#</span> tautology</span>

<span class="pl-c"><span class="pl-c">#</span># The BDD in Fig. 7 in Bryant's paper [1]</span>
l2, l3 <span class="pl-k">=</span> <span class="pl-c1">pliteral</span>(<span class="pl-c1">2</span>), <span class="pl-c1">pliteral</span>(<span class="pl-c1">3</span>)
<span class="pl-c1">@show</span> ¬(l1 ∧ l3) ∨ (l2 ∧ l3)

<span class="pl-c"><span class="pl-c">#</span> Algebraic Decision Diagrams</span>

<span class="pl-c"><span class="pl-c">#</span># Example from Fig. 1 in Bryant's paper, using 0/1 constants [1]</span>
x1, x2, x3 <span class="pl-k">=</span> <span class="pl-c1">indicator</span>(Int,<span class="pl-c1">1</span>), <span class="pl-c1">indicator</span>(Int,<span class="pl-c1">2</span>), <span class="pl-c1">indicator</span>(Int,<span class="pl-c1">3</span>)
<span class="pl-c1">@show</span> <span class="pl-c1">apply</span>((¬x1)<span class="pl-k">*</span>x2, x1<span class="pl-k">*</span>x3, max)

<span class="pl-c"><span class="pl-c">#</span># Example in Fig. 5 of Bryant's paper, using 0/1 constants [1]</span>
<span class="pl-c1">@show</span> ADD<span class="pl-k">.</span><span class="pl-c1">reduce</span>( <span class="pl-c"><span class="pl-c">#</span> return canonical form</span>
    <span class="pl-c1">Node</span>(<span class="pl-c1">1</span>, <span class="pl-c"><span class="pl-c">#</span> variable index (integer)</span>
        <span class="pl-c1">Node</span>(<span class="pl-c1">2</span>, <span class="pl-c"><span class="pl-c">#</span> variable index</span>
            <span class="pl-c1">zero</span>(Int), <span class="pl-c"><span class="pl-c">#</span> low child -&gt; additivite identity for Int (0)</span>
            <span class="pl-c1">indicator</span>(Int,<span class="pl-c1">3</span>)
        ), <span class="pl-c"><span class="pl-c">#</span> high child -&gt; indicator node on variable 3</span>
        <span class="pl-c1">Node</span>(<span class="pl-c1">2</span>,
            <span class="pl-c1">indicator</span>(Int,<span class="pl-c1">3</span>), <span class="pl-c"><span class="pl-c">#</span> low</span>
            <span class="pl-c1">indicator</span>(Int,<span class="pl-c1">3</span>)  <span class="pl-c"><span class="pl-c">#</span> high</span>
        )
    )
)

<span class="pl-c"><span class="pl-c">#</span># Example in Fig 1. in Bahar et al. 1997's paper [2]</span>
x0 <span class="pl-k">=</span> <span class="pl-c1">indicator</span>(Int,<span class="pl-c1">0</span>)
x1 <span class="pl-k">=</span> <span class="pl-c1">indicator</span>(Int,<span class="pl-c1">2</span>)
y0 <span class="pl-k">=</span> <span class="pl-c1">indicator</span>(Int,<span class="pl-c1">1</span>)
y1 <span class="pl-k">=</span> <span class="pl-c1">indicator</span>(Int,<span class="pl-c1">3</span>)
<span class="pl-c1">@show</span> graph <span class="pl-k">=</span> <span class="pl-c1">Terminal</span>(<span class="pl-c1">2</span>)<span class="pl-k">*</span>(¬x0)<span class="pl-k">*</span>(¬x1)<span class="pl-k">*</span>(¬y0)<span class="pl-k">*</span>y1 <span class="pl-k">+</span> <span class="pl-c1">Terminal</span>(<span class="pl-c1">2</span>)<span class="pl-k">*</span>(¬x0)<span class="pl-k">*</span>(¬x1)<span class="pl-k">*</span>y0<span class="pl-k">*</span>(¬y1) <span class="pl-k">+</span> <span class="pl-c1">Terminal</span>(<span class="pl-c1">2</span>)<span class="pl-k">*</span>(¬x0)<span class="pl-k">*</span>x1<span class="pl-k">*</span>(¬y0)<span class="pl-k">*</span>y1 <span class="pl-k">+</span> <span class="pl-c1">Terminal</span>(<span class="pl-c1">2</span>)<span class="pl-k">*</span>(¬x0)<span class="pl-k">*</span>x1<span class="pl-k">*</span>y0<span class="pl-k">*</span>(¬y1) <span class="pl-k">+</span> <span class="pl-c1">Terminal</span>(<span class="pl-c1">4</span>)<span class="pl-k">*</span>x0<span class="pl-k">*</span>(¬x1)<span class="pl-k">*</span>y0<span class="pl-k">*</span>y1 <span class="pl-k">+</span> <span class="pl-c1">Terminal</span>(<span class="pl-c1">4</span>)<span class="pl-k">*</span>x0<span class="pl-k">*</span>x1<span class="pl-k">*</span>(¬y0)<span class="pl-k">*</span>y1

<span class="pl-c"><span class="pl-c">#</span># Diagram Traversal</span>
<span class="pl-c"><span class="pl-c">#</span> To collect all nonterminal nodes of the previous diagram</span>
nt <span class="pl-k">=</span> <span class="pl-c1">filter</span>(n <span class="pl-k">-&gt;</span> <span class="pl-c1">isa</span>(n,Node), <span class="pl-c1">collect</span>(graph)) <span class="pl-c"><span class="pl-c">#</span> node are traversed in depth-first order</span>
<span class="pl-c"><span class="pl-c">#</span> now obtain its set of variable indices (without repetition)</span>
<span class="pl-c1">@show</span> <span class="pl-c1">mapreduce</span>(index,union,nt) <span class="pl-c"><span class="pl-c">#</span> should contain 0,1,2,3</span>

<span class="pl-c"><span class="pl-c">#</span># Matrix examples in page 9</span>
<span class="pl-c1">@show</span> f <span class="pl-k">=</span> (¬x0)<span class="pl-k">*</span>(¬y0) <span class="pl-k">+</span> x0<span class="pl-k">*</span>y0
<span class="pl-c1">@show</span> g <span class="pl-k">=</span> <span class="pl-c1">Terminal</span>(<span class="pl-c1">4</span>)<span class="pl-k">*</span>(¬x0) <span class="pl-k">+</span> <span class="pl-c1">Terminal</span>(<span class="pl-c1">2</span>)<span class="pl-k">*</span>x0
<span class="pl-c1">@show</span> h <span class="pl-k">=</span> f <span class="pl-k">+</span> g
<span class="pl-c1">@info</span> <span class="pl-s"><span class="pl-pds">"</span>Restriction<span class="pl-pds">"</span></span>
<span class="pl-c1">@show</span> <span class="pl-c1">restrict</span>(h,<span class="pl-c1">0</span>,<span class="pl-c1">false</span>)
<span class="pl-c1">@show</span> h <span class="pl-k">|</span> (<span class="pl-c1">1</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">true</span>)
<span class="pl-c1">@show</span> (h <span class="pl-k">|</span> (<span class="pl-c1">index</span>(x0) <span class="pl-k">=&gt;</span> <span class="pl-c1">true</span>)) <span class="pl-k">+</span> (h <span class="pl-k">|</span> (<span class="pl-c1">index</span>(x0) <span class="pl-k">=&gt;</span> <span class="pl-c1">false</span>))
<span class="pl-c1">@show</span> (h <span class="pl-k">|</span> (<span class="pl-c1">index</span>(y0) <span class="pl-k">=&gt;</span> <span class="pl-c1">true</span>)) <span class="pl-k">+</span> (h <span class="pl-k">|</span> (<span class="pl-c1">index</span>(y0) <span class="pl-k">=&gt;</span> <span class="pl-c1">false</span>))

<span class="pl-c"><span class="pl-c">#</span> Parametrized ADDs: ADDs with Multilinear Expressions (MLE) constants</span>

<span class="pl-k">const</span> MLE <span class="pl-k">=</span> MultilinearExpression <span class="pl-c"><span class="pl-c">#</span> Alias</span>

<span class="pl-c"><span class="pl-c">#</span># Create some MLE examples</span>
<span class="pl-c1">@show</span> a <span class="pl-k">=</span> <span class="pl-c1">MLE</span>(<span class="pl-c1">2.0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">3</span>) <span class="pl-k">+</span> <span class="pl-c1">MLE</span>(<span class="pl-c1">2.0</span>,<span class="pl-c1">3</span>)
<span class="pl-c1">@show</span> b <span class="pl-k">=</span> <span class="pl-c1">MLE</span>(<span class="pl-c1">3.0</span>,<span class="pl-c1">2</span>) <span class="pl-k">+</span> <span class="pl-c1">MLE</span>(<span class="pl-c1">1.0</span>,<span class="pl-c1">2</span>,<span class="pl-c1">4</span>) <span class="pl-k">+</span> <span class="pl-c1">MLE</span>(<span class="pl-c1">1.0</span>,<span class="pl-c1">4</span>)
<span class="pl-c1">@show</span> c <span class="pl-k">=</span> a <span class="pl-k">*</span> b

<span class="pl-c"><span class="pl-c">#</span># Now create PADDs</span>
<span class="pl-c1">@show</span> x1 <span class="pl-k">=</span> <span class="pl-c1">indicator</span>(MLE,<span class="pl-c1">1</span>) <span class="pl-c"><span class="pl-c">#</span> equivalent to </span>
<span class="pl-c"><span class="pl-c">#</span>@show x1 = Node(1, MLE(0.0), MLE(1.0))</span>
<span class="pl-c1">@show</span> x2 <span class="pl-k">=</span> <span class="pl-c1">indicator</span>(MLE,<span class="pl-c1">2</span>) <span class="pl-c"><span class="pl-c">#</span> equivalent to</span>
<span class="pl-c"><span class="pl-c">#</span>@show x2 = Node(2, MLE(0.0), MLE(1.0))</span>
<span class="pl-c1">@show</span> x3 <span class="pl-k">=</span> x1 <span class="pl-k">+</span> x2
<span class="pl-c1">@show</span> d1 <span class="pl-k">=</span> <span class="pl-c1">Node</span>(<span class="pl-c1">1</span>, <span class="pl-c1">1</span> <span class="pl-k">+</span> <span class="pl-c1">MLE</span>(<span class="pl-k">-</span><span class="pl-c1">1.0</span>,<span class="pl-c1">1</span>), <span class="pl-c1">MLE</span>(<span class="pl-c1">1</span>,<span class="pl-c1">1</span>))
<span class="pl-c1">@show</span> m1 <span class="pl-k">=</span> x1 <span class="pl-k">+</span> d1
<span class="pl-c1">@show</span> d2 <span class="pl-k">=</span> <span class="pl-c1">Node</span>(<span class="pl-c1">2</span>, <span class="pl-c1">1</span> <span class="pl-k">+</span> <span class="pl-c1">MLE</span>(<span class="pl-k">-</span><span class="pl-c1">1.0</span>,<span class="pl-c1">2</span>), <span class="pl-c1">MLE</span>(<span class="pl-c1">1</span>,<span class="pl-c1">2</span>))
<span class="pl-c1">@show</span> m2 <span class="pl-k">=</span> x2 <span class="pl-k">+</span> d2
<span class="pl-c1">@show</span> m3 <span class="pl-k">=</span> d1 <span class="pl-k">*</span> d2</pre></div>
<h2 dir="auto"><a id="user-content-license" class="anchor" aria-hidden="true" href="#license"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>License</h2>
<p dir="auto">(C) Denis Deratani Mauá. See LICENSE file.</p>
<h2 dir="auto"><a id="user-content-references" class="anchor" aria-hidden="true" href="#references"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>References</h2>
<p dir="auto">For more information on ADDs and BDDs see:</p>
<p dir="auto"><a name="user-content-bdds">[1]</a>: Bryant, Randal E. Graph-based algorithms for boolean function manipulation. Computers, IEEE Transactions on 100, no. 8 (1986): 677-691.</p>
<p dir="auto"><a name="user-content-adds">[2]</a>: Bahar, R. Iris, Erica A. Frohm, Charles M. Gaona, Gary D. Hachtel, Enrico Macii, Abelardo Pardo, and Fabio Somenzi. Algebraic decision diagrams and their applications. Formal methods in system design 10, no. 2-3 (1997): 171-206.</p>
</article></div>