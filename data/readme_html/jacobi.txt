<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-jacobi" class="anchor" aria-hidden="true" href="#jacobi"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Jacobi</h1>
<p><a href="https://travis-ci.org/pjabardo/Jacobi.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/3a64292384f5124f646684ab64b24e450d78e59a/68747470733a2f2f7472617669732d63692e6f72672f706a61626172646f2f4a61636f62692e6a6c2e706e67" alt="Build Status" data-canonical-src="https://travis-ci.org/pjabardo/Jacobi.jl.png" style="max-width:100%;"></a></p>
<p>A library that implements Jacobi polynomials and Gauss
quadrature related operations.</p>
<h2><a id="user-content-notebook" class="anchor" aria-hidden="true" href="#notebook"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Notebook</h2>
<p>In the notebooks directory there are tow notebooks, as follows, that shows the basic usage of the library.</p>
<ul>
<li><a href="http://nbviewer.ipython.org/github/pjabardo/Jacobi.jl/blob/master/notebooks/polynomials.ipynb" rel="nofollow">Calculation of some orthogonal polynomials and their zeros</a></li>
<li><a href="http://nbviewer.ipython.org/github/pjabardo/Jacobi.jl/blob/master/notebooks/gauss-quad.ipynb" rel="nofollow">Gauss-type qudrature, interpolation and differentiation</a></li>
</ul>
<h2><a id="user-content-jacobi-polynomials" class="anchor" aria-hidden="true" href="#jacobi-polynomials"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Jacobi polynomials</h2>
<p>Jacobi polynomials  $P_n^{a,b}(x)$ are implemented in function
<code>jacobi(x, n, a, b)</code> where <code>x</code> is where you want to calculate the
polynomial of degree <code>n</code> with weights <code>a</code> and <code>b</code>.</p>
<p>To calculate the derivative of jacobi polynomials, use function
<code>djacobi(x, n, a, b)</code>.</p>
<p>When calculating the weights of Gaussian qudrature, it is necessary to determine
the zeros of Jacobi polynomials. The function <code>jacobi_zeros(m, a, b)</code> calculates the
zeros of a Jacobi polynomial of degree <code>m</code> with weights <code>a</code> and <code>b</code>. Also present
is the non allocating function <code>jacobi_zeros!(m, a, b, x)</code>.</p>
<p>Legendre polynomials are a special case when a and b are zero.
Function <code>legendre(x, n)</code> implements this simpler recurrence relation.</p>
<p>Also available are Chebyshev polynomials and the respective derivatives and zeros:</p>
<ul>
<li><code>chebyshev(x, n)</code> Chebyshev polynomial of the first kind $T_n(x)$.</li>
<li><code>chebyshev2(x, n)</code> Chebyshev polynomial of the second kind $U_n(x)$.</li>
<li><code>chebyshev_zeros(n)</code> and <code>chebyshev2_zeros(n)</code> Roots of Chebyshev polynomials</li>
<li><code>chebyshev_zeros!(n, x)</code> and <code>chebyshev2_zeros!(n, x)</code> Roots of Chebyshev polynomials</li>
</ul>
<h2><a id="user-content-gauss-quadrature" class="anchor" aria-hidden="true" href="#gauss-quadrature"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Gauss Quadrature</h2>
<p>Gaussian quadrature is commonly used to evaluate integrals numerically. To evaluate
integrals using Gaussian quadrature, a set of nodes and its corresponding weights must
be known. In the most basic algorithm, no node can be specified by the user. It is
often convenient to include one or both ends of the domain and this provides
different quadrature rules.</p>
<p>The different quadrature rules implemented are:</p>
<ul>
<li>Gauss-Jacobi, where no nodes are specified (extension <code>gj</code>).</li>
<li>Gauss-Lobatto-Jacobi, where both ends of the domain are included (extension <code>glj</code>).</li>
<li>Gauss-Radau-Jacobi, where the node -1 (leftmost end of the domain) is included
(extension <code>grjm</code>).</li>
<li>Gauss-Radau-Jacobi, where the node +1 (rightmost end of the domain) is included
(extension <code>grjp</code>).</li>
</ul>
<p>These formulations implement the numerical integration of
$$
\int_{-1}^1 (1-x)^a(1+x)^b f(x)dx
$$</p>
<p>The functions <code>zgj</code>, <code>zglj</code>, <code>zgrjm</code> and <code>zgrjp</code> calculate the nodes of the quadrature
rule. The corresponding weights are calculated using functions <code>wgj</code>, <code>wglj</code>,
<code>wgrjm</code> and <code>wgrjp</code>. Of course in both cases, the weights <code>a</code> and <code>b</code>must be specified.</p>
<p>As an example</p>
<pre><code>fun(x) = sin(x)
z = zglj(5, 0.0, 0.0)
w = wglj(z, 0.0, 0.0)
f = fun(z)
Ix = sum(w .* f)
</code></pre>
<p>where <code>Ix</code> is the estimate of the integral.</p>
<p>Gaussian quadrature is useful because it allows the exact integration of polynomials
using few nodes (the exact order depends on the quadrature rule cited above).</p>
<p>But there is another advantage: the nodes of the quadrature rule is very convenient for
interpolating functions using high order polynomials and is commonly used in high order
finite element procedures such as hp-FEM or spectral element method. In these
applications, it is necessary to compute derivatives and interpolate data from
different grids.</p>
<p>The functions <code>dgj</code>, <code>dglj</code>, <code>dgrjm</code> and <code>drjp</code> calculates the derivative matrix as
shown in the example that follows:</p>
<pre><code>fun(x) = sin(x)
z = zglj(5, 0.0, 0.0)
D = dglj(z, 0.0, 0.0)
f = fun(z)
df = D * f
</code></pre>
<p>where <code>df</code> is an estimate of the derivative of the function at the quadrature nodes.</p>
<p>Another important operation is interpolation. If a function is known at some nodes,
in this case the quadrature nodes, how can we accurately interpolate the function on
other nodes? Since we know the nodes, Lagrangian interpolation is the best way.
The function <code>lagrange</code> implements the standard  definition of the Langrangian
interpolation.  The example below plots the Lagrangian interpolators of
the Gauss-Lobatto-Jacobi quadrature points for 5 nodes.</p>
<pre><code>using PyPlot
Q = 5
z = zglj(Q)
nx = 201
x = -1.0:0.01:1.0
y = zeros(nx, Q)
for k = 1:Q, i=1:nx
  y[i,k] = lagrange(k, x[i], z)
end

for k=1:Q
  plot(x, y[:,k])
end
</code></pre>
<p>If the operation above is to be repeated often, pre-calculating the Lagrangian
interpolators is useful and an Interpolation matrix can be calculated. The
following example illustrates the use of the interpolation matrix that can
be computed with the function <code>interp_mat</code>.</p>
<pre><code>using PyPlot
Q = 5
z = zglj(Q)
nx = 201
x = -1.0:0.01:1.0
ye = sin(pi*z)
ye2 = sin(pi*x)
Im = interp_mat(x, z)
y = Im * ye
plot(z, ye, "o")
plot(x, ye2, "r-")
plot(x, y, "b-")
</code></pre>
<p>increasing the number of quadrature points the interpolated function (blue line)
becomes more accurate.</p>
<h2><a id="user-content-references" class="anchor" aria-hidden="true" href="#references"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>References</h2>
<p>This package was implemented using both references below.</p>
<ul>
<li>Spectral/hp Element Methods for CFD, 2nd edition, Karniadakis and Sherwin, 2005.</li>
<li>NIST Handbook of Mathematical Functions (<a href="http://dlmf.nist.gov/18" rel="nofollow">http://dlmf.nist.gov/18</a>)</li>
</ul>
</article></div>