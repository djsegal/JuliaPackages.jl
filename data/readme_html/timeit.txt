<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-timeit" class="anchor" aria-hidden="true" href="#timeit"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>TimeIt</h1>
<p>This module exports a <code>@timeit</code> macro that works similarly to the <code>%timeit</code>
magic in IPython.</p>
<p><strong>THIS PACKAGE IS DEPRECATED: It no longer works correctly on Julia v0.7+ due to scoping changes in Julia. Use <code>@btime</code> from <a href="https://github.com/JuliaCI/BenchmarkTools.jl">BenchmarkTools.jl</a> instead.</strong></p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Installation</h2>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> Pkg<span class="pl-k">.</span><span class="pl-c1">clone</span>(<span class="pl-s"><span class="pl-pds">"</span>git://github.com/kbarbary/TimeIt.jl.git<span class="pl-pds">"</span></span>)</pre></div>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Usage</h2>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> TimeIt

julia<span class="pl-k">&gt;</span> x <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">10000</span>); y <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">10000</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@timeit</span> x <span class="pl-k">.*</span> y;
<span class="pl-c1">10000</span> loops, best of <span class="pl-c1">3</span><span class="pl-k">:</span> <span class="pl-c1">13.71</span> µs per loop</pre></div>
<p>The time per loop in seconds is returned, so you can do <code>t = @timeit x .* y</code>
to record the timing.</p>
<h2><a id="user-content-caveats" class="anchor" aria-hidden="true" href="#caveats"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Caveats</h2>
<p><em>TL;DR: For a more rigorous benchmarking experience, check out
<a href="https://github.com/johnmyleswhite/Benchmarks.jl">Benchmarks.jl</a>.</em></p>
<ol>
<li>
<p><strong>The macro will give inaccurate results for expressions that take less than about 1 µs.</strong></p>
<p><code>@timeit</code> wraps the supplied expression in a loop with an appropriate number of iterations and times the execution. For example, <code>@timeit x .* y</code> becomes something like</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span> record start time</span>
<span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10000</span>
    val <span class="pl-k">=</span> x <span class="pl-k">.*</span> y
<span class="pl-k">end</span>
<span class="pl-c"><span class="pl-c">#</span> record end time</span></pre></div>
<p>As such, when you run <code>@timeit x .* y</code> in global scope (at
the REPL), you're running a loop in global scope, which has a
non-negligible overhead. Even a do-nothing expression takes a
minimum of about 100 ns per iteration:</p>
<pre><code>julia&gt; @timeit nothing
1000000 loops, best of 3: 98.05 ns per loop
</code></pre>
<p>For expressions that take more than approximately 1µs, this
overhead becomes negligible.</p>
</li>
<li>
<p><strong>All typical Julia performance gotchas about global scope still apply.</strong></p>
<p>Again, because the loop is in global scope, complex expressions will have
poor performance. Consider an alternative way to compute <code>x .* y</code>:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">@timeit</span> [x[i] <span class="pl-k">*</span> y[i] <span class="pl-k">for</span> i<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">length</span>(x)]
<span class="pl-c1">100</span> loops, best of <span class="pl-c1">3</span><span class="pl-k">:</span> <span class="pl-c1">3.06</span> ms per loop</pre></div>
<p>Placing this expression in a function results in a factor of 100 speed-up:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-en">f</span>(x, y) <span class="pl-k">=</span> [x[i] <span class="pl-k">*</span> y[i] <span class="pl-k">for</span> i<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">length</span>(x)]
f (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@timeit</span> <span class="pl-c1">f</span>(x, y)
<span class="pl-c1">10000</span> loops, best of <span class="pl-c1">3</span><span class="pl-k">:</span> <span class="pl-c1">32.44</span> µs per loop</pre></div>
</li>
</ol>
</article></div>