<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-symbolicquantumfieldtheoryjl" class="anchor" aria-hidden="true" href="#symbolicquantumfieldtheoryjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>SymbolicQuantumFieldTheory.jl</h1>
<p dir="auto"><a href="https://github.com/CianLM/QFT.jl/actions/workflows/CI.yml?query=branch%3Amain"><img src="https://github.com/CianLM/QFT.jl/actions/workflows/CI.yml/badge.svg?branch=main" alt="Build Status" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-symbolic-quantum-field-theory-in-julia" class="anchor" aria-hidden="true" href="#symbolic-quantum-field-theory-in-julia"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Symbolic Quantum Field Theory in Julia</h2>
<p dir="auto">This package is in active development and is not production ready. Feel free to reach out with suggestions/issues.</p>
<p dir="auto">Documentation is under construction. See <code>test.ipynb</code> for LaTeX printing and more example usage.</p>
<h2 dir="auto"><a id="user-content-basic-syntax" class="anchor" aria-hidden="true" href="#basic-syntax"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Basic Syntax</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using QFT
using Symbolics
@operator ScalarField a
@syms p q"><pre><span class="pl-k">using</span> QFT
<span class="pl-k">using</span> Symbolics
<span class="pl-c1">@operator</span> ScalarField a
<span class="pl-c1">@syms</span> p q</pre></div>
<p dir="auto">where <code>a</code> is the name of the operator and <code>p</code> and <code>q</code> are the momenta.</p>
<p dir="auto">We can use these objects with</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="comm(a(p),a(q)')
normalorder(a(p) * a(q)')
a(p)'^2 * a(q)' * vacuum()
ℋ = E(q) * a(q)' * a(q)
integrate(ℋ * a(p)', q)"><pre><span class="pl-c1">comm</span>(<span class="pl-c1">a</span>(p),<span class="pl-c1">a</span>(q)<span class="pl-k">'</span>)
<span class="pl-c1">normalorder</span>(<span class="pl-c1">a</span>(p) <span class="pl-k">*</span> <span class="pl-c1">a</span>(q)<span class="pl-k">'</span>)
<span class="pl-c1">a</span>(p)<span class="pl-k">'</span><span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">*</span> <span class="pl-c1">a</span>(q)<span class="pl-k">'</span> <span class="pl-k">*</span> <span class="pl-c1">vacuum</span>()
ℋ <span class="pl-k">=</span> <span class="pl-c1">E</span>(q) <span class="pl-k">*</span> <span class="pl-c1">a</span>(q)<span class="pl-k">'</span> <span class="pl-k">*</span> <span class="pl-c1">a</span>(q)
<span class="pl-c1">integrate</span>(ℋ <span class="pl-k">*</span> <span class="pl-c1">a</span>(p)<span class="pl-k">'</span>, q)</pre></div>
<p dir="auto">which returns <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="8550fc857422c5b3f256d03050fa0952">$2\pi * E(p) a_p^\dagger \ket{0}$</math-renderer> in a Jupyter notebook and <code>2π*E(p)a_p^†|0⟩</code> otherwise.</p>
<h2 dir="auto">
<a id="user-content-defining-a-custom-commutation-relation" class="anchor" aria-hidden="true" href="#defining-a-custom-commutation-relation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Defining a Custom Commutation Relation</h2>
<p dir="auto">We can define a custom commutation relation between operators in a field using a natural syntax with the <code>@comm</code> macro.</p>
<p dir="auto"><em>Note</em>. To do this we need to</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="import QFT.comm"><pre><span class="pl-k">import</span> QFT<span class="pl-k">.</span>comm</pre></div>
<p dir="auto">as the <code>comm</code> function will be overloaded with your custom relation.</p>
<p dir="auto">Then,</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@field YourField
@operators YourField b c
@comm [b(p), c(q)'] = f(p,q)"><pre><span class="pl-c1">@field</span> YourField
<span class="pl-c1">@operators</span> YourField b c
<span class="pl-c1">@comm</span> [<span class="pl-c1">b</span>(p), <span class="pl-c1">c</span>(q)<span class="pl-k">'</span>] <span class="pl-k">=</span> <span class="pl-c1">f</span>(p,q)</pre></div>
<p dir="auto">for any <code>f(p,q)</code>.
This defines the commutation relation such that the commutator is now given by</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@syms k l 
comm(b(k), c(l)') # returns f(k,l)"><pre><span class="pl-c1">@syms</span> k l 
<span class="pl-c1">comm</span>(<span class="pl-c1">b</span>(k), <span class="pl-c1">c</span>(l)<span class="pl-k">'</span>) <span class="pl-c"><span class="pl-c">#</span> returns f(k,l)</span></pre></div>
<p dir="auto">where Julia has replaced <code>p</code> and <code>q</code> with <code>k</code> and <code>l</code> appropriately. Multiple indices are also supported with <code>@comm [b(p,q), c(r,s)'] = f(p,q,r,s)</code>.</p>
</article></div>