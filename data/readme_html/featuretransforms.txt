<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-featuretransforms" class="anchor" aria-hidden="true" href="#featuretransforms"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>FeatureTransforms</h1>
<p><a href="https://invenia.github.io/FeatureTransforms.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://invenia.github.io/FeatureTransforms.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a>
<a href="https://github.com/Invenia/FeatureTransforms.jl/actions?query=workflow%3ACI"><img src="https://github.com/Invenia/FeatureTransforms.jl/workflows/CI/badge.svg" alt="CI" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/invenia/FeatureTransforms.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/a6af780d7cbc971d115ccde2adbe78f06a5ef3176d97a18b5ada3a29cd8bf8b1/68747470733a2f2f636f6465636f762e696f2f67682f696e76656e69612f466561747572655472616e73666f726d732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/invenia/FeatureTransforms.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a>
<a href="https://github.com/invenia/BlueStyle"><img src="https://camo.githubusercontent.com/c18fbaa52d94d16b90b19701fc90d289b8a5bb920c74c79bab200b14e75420a4/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c75652d3434393564312e737667" alt="Code Style: Blue" data-canonical-src="https://img.shields.io/badge/code%20style-blue-4495d1.svg" style="max-width:100%;"></a>
<a href="https://github.com/SciML/ColPrac"><img src="https://camo.githubusercontent.com/a6c1efcb19a957860ecb25966a730260b03d6e05380d0c27992ee7f9e3b1feb3/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f436f6c507261632d436f6e7472696275746f72277325323047756964652d626c756576696f6c6574" alt="ColPrac: Contributor's Guide on Collaborative Practices for Community Packages" data-canonical-src="https://img.shields.io/badge/ColPrac-Contributor's%20Guide-blueviolet" style="max-width:100%;"></a></p>
<p>FeatureTransforms.jl provides utilities for performing feature engineering in machine learning pipelines with support for <code>AbstractArray</code>s and <a href="https://github.com/JuliaData/Tables.jl"><code>Table</code></a>s.</p>
<h2><a id="user-content-getting-started" class="anchor" aria-hidden="true" href="#getting-started"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Getting Started</h2>
<p>There are a few key parts to the Transforms.jl API, refer to the documentation for each to learn more.</p>
<ol>
<li><code>Transform</code>s are callable types that define certain operations to be performed on data, for example, normalizating or computing a linear combination. Refer to the <a href="https://invenia.github.io/FeatureTransforms.jl/stable/transforms" rel="nofollow">Guide to Transforms</a> to learn how they are defined and used on various types of input.</li>
<li>The <code>apply</code>, <code>apply!</code> and <code>apply_append</code> methods are used to implement <code>Transform</code>s in various ways. Consult the <a href="https://invenia.github.io/FeatureTransforms.jl/stable/examples" rel="nofollow">Examples Section</a> for a guide to some typical use cases. See also the example below.</li>
<li>The <a href="https://invenia.github.io/FeatureTransforms.jl/stable/transform_interface" rel="nofollow">Transform Interface</a> is used when you want to encapsulate sequences of <code>Transform</code>s in an end-to-end feature engineering pipeline.</li>
<li>For a full list of currently implemented <code>Transform</code>s, consult the <a href="https://invenia.github.io/FeatureTransforms.jl/stable/api" rel="nofollow">API</a>.</li>
</ol>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using Pkg; Pkg.add(&quot;FeatureTransforms&quot;)
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Pkg; Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>FeatureTransforms<span class="pl-pds">"</span></span>)</pre></div>
<h2><a id="user-content-quickstart" class="anchor" aria-hidden="true" href="#quickstart"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Quickstart</h2>
<p>Load in the dependencies and construct some toy data.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using DataFrames, FeatureTransforms

julia&gt; df = DataFrame(:a=&gt;[1, 2, 3, 4, 5], :b=&gt;[5, 4, 3, 2, 1], :c=&gt;[2, 1, 3, 1, 3])
5×3 DataFrame
 Row │ a      b      c     
     │ Int64  Int64  Int64 
─────┼─────────────────────
   1 │     1      5      2
   2 │     2      4      1
   3 │     3      3      3
   4 │     4      2      1
   5 │     5      1      3
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> DataFrames, FeatureTransforms

julia<span class="pl-k">&gt;</span> df <span class="pl-k">=</span> <span class="pl-c1">DataFrame</span>(<span class="pl-c1">:a</span><span class="pl-k">=&gt;</span>[<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">4</span>, <span class="pl-c1">5</span>], <span class="pl-c1">:b</span><span class="pl-k">=&gt;</span>[<span class="pl-c1">5</span>, <span class="pl-c1">4</span>, <span class="pl-c1">3</span>, <span class="pl-c1">2</span>, <span class="pl-c1">1</span>], <span class="pl-c1">:c</span><span class="pl-k">=&gt;</span>[<span class="pl-c1">2</span>, <span class="pl-c1">1</span>, <span class="pl-c1">3</span>, <span class="pl-c1">1</span>, <span class="pl-c1">3</span>])
<span class="pl-c1">5</span><span class="pl-k">×</span><span class="pl-c1">3</span> DataFrame
 Row │ a      b      c     
     │ Int64  Int64  Int64 
─────┼─────────────────────
   <span class="pl-c1">1</span> │     <span class="pl-c1">1</span>      <span class="pl-c1">5</span>      <span class="pl-c1">2</span>
   <span class="pl-c1">2</span> │     <span class="pl-c1">2</span>      <span class="pl-c1">4</span>      <span class="pl-c1">1</span>
   <span class="pl-c1">3</span> │     <span class="pl-c1">3</span>      <span class="pl-c1">3</span>      <span class="pl-c1">3</span>
   <span class="pl-c1">4</span> │     <span class="pl-c1">4</span>      <span class="pl-c1">2</span>      <span class="pl-c1">1</span>
   <span class="pl-c1">5</span> │     <span class="pl-c1">5</span>      <span class="pl-c1">1</span>      <span class="pl-c1">3</span></pre></div>
<p>Next, we construct the <code>Transform</code> that we want to perform on the data.
This can be done one of three ways:</p>
<ol>
<li><code>apply</code> which does not mutate the underlying data,</li>
<li><code>apply!</code> which <em>does</em> mutate the underlying data,</li>
<li><code>apply_append</code> which will <code>apply</code> transform then <code>append</code> the result to a copy of the input.</li>
</ol>
<p>All <code>Transforms</code> support the non-mutating <code>apply</code> and <code>apply_append</code> methods, but any <code>Transform</code> that changes the type or dimension of the input does not support the mutating <code>apply!</code>.</p>
<p>In any case, the return type will be the same as the input, so if you provide an <code>Array</code> you get back an <code>Array</code>, and if you provide a <code>Table</code> you get back a <code>Table</code>.
Here we are working with a <code>DataFrame</code>, so the return will always be a <code>DataFrame</code>:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; p = Power(3);

julia&gt; FeatureTransforms.apply(df, p; cols=[:a], header=[:a3])
5×1 DataFrame
 Row │ a3    
     │ Int64 
─────┼───────
   1 │     1
   2 │     8
   3 │    27
   4 │    64
   5 │   125

julia&gt; FeatureTransforms.apply!(df, p; cols=[:a])
5×3 DataFrame
 Row │ a      b      c
     │ Int64  Int64  Int64
─────┼─────────────────────
   1 │     1      5      2
   2 │     8      4      1
   3 │    27      3      3
   4 │    64      2      1
   5 │   125      1      3

julia&gt; FeatureTransforms.apply_append(df, p; cols=[:a], header=[:a3])
5×4 DataFrame
 Row │ a      b      c      a3    
     │ Int64  Int64  Int64  Int64 
─────┼────────────────────────────
   1 │     1      5      2      1
   2 │     2      4      1      8
   3 │     3      3      3     27
   4 │     4      2      1     64
   5 │     5      1      3    125

"><pre>julia<span class="pl-k">&gt;</span> p <span class="pl-k">=</span> <span class="pl-c1">Power</span>(<span class="pl-c1">3</span>);

julia<span class="pl-k">&gt;</span> FeatureTransforms<span class="pl-k">.</span><span class="pl-c1">apply</span>(df, p; cols<span class="pl-k">=</span>[<span class="pl-c1">:a</span>], header<span class="pl-k">=</span>[<span class="pl-c1">:a3</span>])
<span class="pl-c1">5</span><span class="pl-k">×</span><span class="pl-c1">1</span> DataFrame
 Row │ a3    
     │ Int64 
─────┼───────
   <span class="pl-c1">1</span> │     <span class="pl-c1">1</span>
   <span class="pl-c1">2</span> │     <span class="pl-c1">8</span>
   <span class="pl-c1">3</span> │    <span class="pl-c1">27</span>
   <span class="pl-c1">4</span> │    <span class="pl-c1">64</span>
   <span class="pl-c1">5</span> │   <span class="pl-c1">125</span>

julia<span class="pl-k">&gt;</span> FeatureTransforms<span class="pl-k">.</span><span class="pl-c1">apply!</span>(df, p; cols<span class="pl-k">=</span>[<span class="pl-c1">:a</span>])
<span class="pl-c1">5</span><span class="pl-k">×</span><span class="pl-c1">3</span> DataFrame
 Row │ a      b      c
     │ Int64  Int64  Int64
─────┼─────────────────────
   <span class="pl-c1">1</span> │     <span class="pl-c1">1</span>      <span class="pl-c1">5</span>      <span class="pl-c1">2</span>
   <span class="pl-c1">2</span> │     <span class="pl-c1">8</span>      <span class="pl-c1">4</span>      <span class="pl-c1">1</span>
   <span class="pl-c1">3</span> │    <span class="pl-c1">27</span>      <span class="pl-c1">3</span>      <span class="pl-c1">3</span>
   <span class="pl-c1">4</span> │    <span class="pl-c1">64</span>      <span class="pl-c1">2</span>      <span class="pl-c1">1</span>
   <span class="pl-c1">5</span> │   <span class="pl-c1">125</span>      <span class="pl-c1">1</span>      <span class="pl-c1">3</span>

julia<span class="pl-k">&gt;</span> FeatureTransforms<span class="pl-k">.</span><span class="pl-c1">apply_append</span>(df, p; cols<span class="pl-k">=</span>[<span class="pl-c1">:a</span>], header<span class="pl-k">=</span>[<span class="pl-c1">:a3</span>])
<span class="pl-c1">5</span><span class="pl-k">×</span><span class="pl-c1">4</span> DataFrame
 Row │ a      b      c      a3    
     │ Int64  Int64  Int64  Int64 
─────┼────────────────────────────
   <span class="pl-c1">1</span> │     <span class="pl-c1">1</span>      <span class="pl-c1">5</span>      <span class="pl-c1">2</span>      <span class="pl-c1">1</span>
   <span class="pl-c1">2</span> │     <span class="pl-c1">2</span>      <span class="pl-c1">4</span>      <span class="pl-c1">1</span>      <span class="pl-c1">8</span>
   <span class="pl-c1">3</span> │     <span class="pl-c1">3</span>      <span class="pl-c1">3</span>      <span class="pl-c1">3</span>     <span class="pl-c1">27</span>
   <span class="pl-c1">4</span> │     <span class="pl-c1">4</span>      <span class="pl-c1">2</span>      <span class="pl-c1">1</span>     <span class="pl-c1">64</span>
   <span class="pl-c1">5</span> │     <span class="pl-c1">5</span>      <span class="pl-c1">1</span>      <span class="pl-c1">3</span>    <span class="pl-c1">125</span>
</pre></div>
<p>As an extra convenience, you can call the <code>Transform</code> type directly, which emulates calling <code>apply</code>:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; ohe = OneHotEncoding(1:3);

julia&gt; lc = LinearCombination([1, -10]);

julia&gt; ohe_df = ohe(df; cols=[:c], header=[:cat1, :cat2, :cat3])

julia&gt; lc_df = lc(df; cols=[:a, :b], header=[:ab]);

julia&gt; df = hcat(df, lc_df, ohe_df)
5×7 DataFrame
 Row │ a      b      c      ab     cat1   cat2   cat3  
     │ Int64  Int64  Int64  Int64  Bool   Bool   Bool  
─────┼─────────────────────────────────────────────────
   1 │     1      5      2    -49  false   true  false
   2 │     8      4      1    -32   true  false  false
   3 │    27      3      3     -3  false  false   true
   4 │    64      2      1     44   true  false  false
   5 │   125      1      3    115  false  false   true

"><pre>julia<span class="pl-k">&gt;</span> ohe <span class="pl-k">=</span> <span class="pl-c1">OneHotEncoding</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">3</span>);

julia<span class="pl-k">&gt;</span> lc <span class="pl-k">=</span> <span class="pl-c1">LinearCombination</span>([<span class="pl-c1">1</span>, <span class="pl-k">-</span><span class="pl-c1">10</span>]);

julia<span class="pl-k">&gt;</span> ohe_df <span class="pl-k">=</span> <span class="pl-c1">ohe</span>(df; cols<span class="pl-k">=</span>[<span class="pl-c1">:c</span>], header<span class="pl-k">=</span>[<span class="pl-c1">:cat1</span>, <span class="pl-c1">:cat2</span>, <span class="pl-c1">:cat3</span>])

julia<span class="pl-k">&gt;</span> lc_df <span class="pl-k">=</span> <span class="pl-c1">lc</span>(df; cols<span class="pl-k">=</span>[<span class="pl-c1">:a</span>, <span class="pl-c1">:b</span>], header<span class="pl-k">=</span>[<span class="pl-c1">:ab</span>]);

julia<span class="pl-k">&gt;</span> df <span class="pl-k">=</span> <span class="pl-c1">hcat</span>(df, lc_df, ohe_df)
<span class="pl-c1">5</span><span class="pl-k">×</span><span class="pl-c1">7</span> DataFrame
 Row │ a      b      c      ab     cat1   cat2   cat3  
     │ Int64  Int64  Int64  Int64  Bool   Bool   Bool  
─────┼─────────────────────────────────────────────────
   <span class="pl-c1">1</span> │     <span class="pl-c1">1</span>      <span class="pl-c1">5</span>      <span class="pl-c1">2</span>    <span class="pl-k">-</span><span class="pl-c1">49</span>  <span class="pl-c1">false</span>   <span class="pl-c1">true</span>  <span class="pl-c1">false</span>
   <span class="pl-c1">2</span> │     <span class="pl-c1">8</span>      <span class="pl-c1">4</span>      <span class="pl-c1">1</span>    <span class="pl-k">-</span><span class="pl-c1">32</span>   <span class="pl-c1">true</span>  <span class="pl-c1">false</span>  <span class="pl-c1">false</span>
   <span class="pl-c1">3</span> │    <span class="pl-c1">27</span>      <span class="pl-c1">3</span>      <span class="pl-c1">3</span>     <span class="pl-k">-</span><span class="pl-c1">3</span>  <span class="pl-c1">false</span>  <span class="pl-c1">false</span>   <span class="pl-c1">true</span>
   <span class="pl-c1">4</span> │    <span class="pl-c1">64</span>      <span class="pl-c1">2</span>      <span class="pl-c1">1</span>     <span class="pl-c1">44</span>   <span class="pl-c1">true</span>  <span class="pl-c1">false</span>  <span class="pl-c1">false</span>
   <span class="pl-c1">5</span> │   <span class="pl-c1">125</span>      <span class="pl-c1">1</span>      <span class="pl-c1">3</span>    <span class="pl-c1">115</span>  <span class="pl-c1">false</span>  <span class="pl-c1">false</span>   <span class="pl-c1">true</span>
</pre></div>
</article></div>