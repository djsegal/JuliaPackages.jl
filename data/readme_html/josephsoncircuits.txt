<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-josephsoncircuitsjl" class="anchor" aria-hidden="true" href="#josephsoncircuitsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>JosephsonCircuits.jl</h1>
<p dir="auto"><a href="https://codecov.io/gh/kpobrien/JosephsonCircuits.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/e6cf4a8255379d4f862c46305c0e2bd462c5726855ce4e8887ff796ff54e8b95/68747470733a2f2f636f6465636f762e696f2f67682f6b706f627269656e2f4a6f73657068736f6e43697263756974732e6a6c2f6272616e63682f6d61696e2f6772617068732f62616467652e737667" alt="Code coverage" data-canonical-src="https://codecov.io/gh/kpobrien/JosephsonCircuits.jl/branch/main/graphs/badge.svg" style="max-width: 100%;"></a>
<a href="https://github.com/kpobrien/JosephsonCircuits.jl/actions?query=workflow"><img src="https://github.com/kpobrien/JosephsonCircuits.jl/actions/workflows/CI.yml/badge.svg" alt="Build Status" style="max-width: 100%;"></a></p>
<p dir="auto"><a href="https://github.com/kpobrien/JosephsonCircuits.jl">JosephsonCircuits.jl</a> is a high-performance frequency domain simulator for nonlinear circuits containing Josephson junctions, capacitors, inductors, mutual inductors, and resistors. <a href="https://github.com/kpobrien/JosephsonCircuits.jl">JosephsonCircuits.jl</a> simulates the frequency domain behavior using a variant [1] of nodal analysis [2] and the harmonic balance method [3-5] with an analytic Jacobian. Noise performance, quantified by quantum efficiency, is efficiently simulated through an adjoint method.</p>
<p dir="auto">Frequency dependent circuit parameters are supported to model realistic impedance environments or dissipative components. Dissipation can be modeled by capacitors with an imaginary capacitance or frequency dependent resistors.</p>
<p dir="auto"><a href="https://github.com/kpobrien/JosephsonCircuits.jl">JosephsonCircuits.jl</a> supports the following:</p>
<ul dir="auto">
<li>Nonlinear simulations in which the user defines a circuit, the drive current, frequency, and number of harmonics and the code calculates the node flux or node voltage at each harmonic.</li>
<li>Linearized simulations about the nonlinear operating point calculated above. This simulates the small signal response of a periodically time varying linear circuit and is useful for simulating parametric amplification and frequency conversion in the undepleted (strong) pump limit. Calculation of node fluxes (or node voltages) and scattering parameters of the linearized circuit [4-5].</li>
<li>Linear simulations of linear circuits. Calculation of node fluxes (or node voltages) and scattering parameters.</li>
<li>Calculation of symbolic capacitance and inverse inductance matrices.</li>
</ul>
<p dir="auto">As detailed in [6], we find excellent agreement with <a href="https://www.keysight.com/us/en/products/software/pathwave-design-software/pathwave-advanced-design-system.html" rel="nofollow">Keysight ADS</a> simulations and Fourier analysis of time domain simulation performed by <a href="http://wrcad.com/wrspice.html" rel="nofollow">WRSPICE</a>.</p>
<p dir="auto"><strong>Warning:</strong> this package is under heavy development and there will be breaking changes. We will keep the examples updated to ease the burden of any breaking changes.</p>
<h1 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation:</h1>
<p dir="auto">To install the latest release of the package, <a href="https://julialang.org/downloads/" rel="nofollow">install Julia</a>, start Julia, and enter the following command:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="using Pkg
Pkg.add(&quot;JosephsonCircuits&quot;)"><pre class="notranslate"><code>using Pkg
Pkg.add("JosephsonCircuits")
</code></pre></div>
<p dir="auto">To install the development version, start Julia and enter the command:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="using Pkg
Pkg.add(name=&quot;JosephsonCircuits&quot;,rev=&quot;main&quot;)"><pre class="notranslate"><code>using Pkg
Pkg.add(name="JosephsonCircuits",rev="main")
</code></pre></div>
<p dir="auto">To run the examples below, you will need to install Plots.jl using the command:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="Pkg.add(&quot;Plots&quot;)"><pre class="notranslate"><code>Pkg.add("Plots")
</code></pre></div>
<p dir="auto">If you get errors when running the examples, please try installing the latest version of Julia and updating to the latest version of JosephsonCircuits.jl by running:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="Pkg.update()"><pre class="notranslate"><code>Pkg.update()
</code></pre></div>
<p dir="auto">Then check that you are running the latest version of the package with:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="Pkg.status()"><pre class="notranslate"><code>Pkg.status()
</code></pre></div>
<h1 dir="auto"><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Examples:</h1>
<h2 dir="auto"><a id="user-content-josephson-parametric-amplifier" class="anchor" aria-hidden="true" href="#josephson-parametric-amplifier"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Josephson parametric amplifier</h2>
<p dir="auto">A driven nonlinear LC resonator.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using JosephsonCircuits
using Plots

@variables R Cc Lj Cj
circuit = [
    (&quot;P1&quot;,&quot;1&quot;,&quot;0&quot;,1),
    (&quot;R1&quot;,&quot;1&quot;,&quot;0&quot;,R),
    (&quot;C1&quot;,&quot;1&quot;,&quot;2&quot;,Cc),
    (&quot;Lj1&quot;,&quot;2&quot;,&quot;0&quot;,Lj),
    (&quot;C2&quot;,&quot;2&quot;,&quot;0&quot;,Cj)]

circuitdefs = Dict(
    Lj =&gt;1000.0e-12,
    Cc =&gt; 100.0e-15,
    Cj =&gt; 1000.0e-15,
    R =&gt; 50.0)

ws = 2*pi*(4.5:0.001:5.0)*1e9
wp = (2*pi*4.75001*1e9,)
Ip = 0.00565e-6
sources = [(mode=(1,),port=1,current=Ip)]
Npumpharmonics = (16,)
Nmodulationharmonics = (8,)

@time jpa = hbsolve(ws, wp, sources, Nmodulationharmonics,
    Npumpharmonics, circuit, circuitdefs)

plot(
    jpa.linearized.w/(2*pi*1e9),
    10*log10.(abs2.(
        jpa.linearized.S(
            outputmode=(0,),
            outputport=1,
            inputmode=(0,),
            inputport=1,
            freqindex=:
        ),
    )),
    xlabel=&quot;Frequency (GHz)&quot;,
    ylabel=&quot;Gain (dB)&quot;,
)"><pre><span class="pl-k">using</span> JosephsonCircuits
<span class="pl-k">using</span> Plots

<span class="pl-c1">@variables</span> R Cc Lj Cj
circuit <span class="pl-k">=</span> [
    (<span class="pl-s"><span class="pl-pds">"</span>P1<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>1<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>0<span class="pl-pds">"</span></span>,<span class="pl-c1">1</span>),
    (<span class="pl-s"><span class="pl-pds">"</span>R1<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>1<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>0<span class="pl-pds">"</span></span>,R),
    (<span class="pl-s"><span class="pl-pds">"</span>C1<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>1<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>2<span class="pl-pds">"</span></span>,Cc),
    (<span class="pl-s"><span class="pl-pds">"</span>Lj1<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>2<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>0<span class="pl-pds">"</span></span>,Lj),
    (<span class="pl-s"><span class="pl-pds">"</span>C2<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>2<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>0<span class="pl-pds">"</span></span>,Cj)]

circuitdefs <span class="pl-k">=</span> <span class="pl-c1">Dict</span>(
    Lj <span class="pl-k">=&gt;</span><span class="pl-c1">1000.0e-12</span>,
    Cc <span class="pl-k">=&gt;</span> <span class="pl-c1">100.0e-15</span>,
    Cj <span class="pl-k">=&gt;</span> <span class="pl-c1">1000.0e-15</span>,
    R <span class="pl-k">=&gt;</span> <span class="pl-c1">50.0</span>)

ws <span class="pl-k">=</span> <span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">pi</span><span class="pl-k">*</span>(<span class="pl-c1">4.5</span><span class="pl-k">:</span><span class="pl-c1">0.001</span><span class="pl-k">:</span><span class="pl-c1">5.0</span>)<span class="pl-k">*</span><span class="pl-c1">1e9</span>
wp <span class="pl-k">=</span> (<span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">pi</span><span class="pl-k">*</span><span class="pl-c1">4.75001</span><span class="pl-k">*</span><span class="pl-c1">1e9</span>,)
Ip <span class="pl-k">=</span> <span class="pl-c1">0.00565e-6</span>
sources <span class="pl-k">=</span> [(mode<span class="pl-k">=</span>(<span class="pl-c1">1</span>,),port<span class="pl-k">=</span><span class="pl-c1">1</span>,current<span class="pl-k">=</span>Ip)]
Npumpharmonics <span class="pl-k">=</span> (<span class="pl-c1">16</span>,)
Nmodulationharmonics <span class="pl-k">=</span> (<span class="pl-c1">8</span>,)

<span class="pl-c1">@time</span> jpa <span class="pl-k">=</span> <span class="pl-c1">hbsolve</span>(ws, wp, sources, Nmodulationharmonics,
    Npumpharmonics, circuit, circuitdefs)

<span class="pl-c1">plot</span>(
    jpa<span class="pl-k">.</span>linearized<span class="pl-k">.</span>w<span class="pl-k">/</span>(<span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">pi</span><span class="pl-k">*</span><span class="pl-c1">1e9</span>),
    <span class="pl-c1">10</span><span class="pl-k">*</span><span class="pl-c1">log10</span>.(<span class="pl-c1">abs2</span>.(
        jpa<span class="pl-k">.</span>linearized<span class="pl-k">.</span><span class="pl-c1">S</span>(
            outputmode<span class="pl-k">=</span>(<span class="pl-c1">0</span>,),
            outputport<span class="pl-k">=</span><span class="pl-c1">1</span>,
            inputmode<span class="pl-k">=</span>(<span class="pl-c1">0</span>,),
            inputport<span class="pl-k">=</span><span class="pl-c1">1</span>,
            freqindex<span class="pl-k">=</span>:
        ),
    )),
    xlabel<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Frequency (GHz)<span class="pl-pds">"</span></span>,
    ylabel<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Gain (dB)<span class="pl-pds">"</span></span>,
)</pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="  0.003080 seconds (57.81 k allocations: 6.391 MiB)"><pre class="notranslate"><code>  0.003080 seconds (57.81 k allocations: 6.391 MiB)
</code></pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/f28e9e83d772a318c4c302f354c67014e1773cbdfc8e8dcc25bf907f9a6e21e7/68747470733a2f2f7163652e6d69742e6564752f4a6f73657068736f6e43697263756974732e6a6c2f6a70612e706e67"><img src="https://camo.githubusercontent.com/f28e9e83d772a318c4c302f354c67014e1773cbdfc8e8dcc25bf907f9a6e21e7/68747470733a2f2f7163652e6d69742e6564752f4a6f73657068736f6e43697263756974732e6a6c2f6a70612e706e67" alt="JPA simulation" data-canonical-src="https://qce.mit.edu/JosephsonCircuits.jl/jpa.png" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-josephson-traveling-wave-parametric-amplifier-jtwpa" class="anchor" aria-hidden="true" href="#josephson-traveling-wave-parametric-amplifier-jtwpa"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Josephson traveling wave parametric amplifier (JTWPA)</h2>
<p dir="auto">Circuit parameters from <a href="https://www.science.org/doi/10.1126/science.aaa8525" rel="nofollow">here</a>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using JosephsonCircuits
using Plots

@variables Rleft Rright Cg Lj Cj Cc Cr Lr
circuit = Tuple{String,String,String,Num}[]

# port on the input side
push!(circuit,(&quot;P$(1)_$(0)&quot;,&quot;1&quot;,&quot;0&quot;,1))
push!(circuit,(&quot;R$(1)_$(0)&quot;,&quot;1&quot;,&quot;0&quot;,Rleft))
Nj=2048
pmrpitch = 4
#first half cap to ground
push!(circuit,(&quot;C$(1)_$(0)&quot;,&quot;1&quot;,&quot;0&quot;,Cg/2))
#middle caps and jj's
push!(circuit,(&quot;Lj$(1)_$(2)&quot;,&quot;1&quot;,&quot;2&quot;,Lj)) 
push!(circuit,(&quot;C$(1)_$(2)&quot;,&quot;1&quot;,&quot;2&quot;,Cj)) 

j=2
for i = 2:Nj-1
    
    if mod(i,pmrpitch) == pmrpitch÷2

        # make the jj cell with modified capacitance to ground
        push!(circuit,(&quot;C$(j)_$(0)&quot;,&quot;$(j)&quot;,&quot;$(0)&quot;,Cg-Cc))
        push!(circuit,(&quot;Lj$(j)_$(j+2)&quot;,&quot;$(j)&quot;,&quot;$(j+2)&quot;,Lj))

        push!(circuit,(&quot;C$(j)_$(j+2)&quot;,&quot;$(j)&quot;,&quot;$(j+2)&quot;,Cj))
        
        #make the pmr
        push!(circuit,(&quot;C$(j)_$(j+1)&quot;,&quot;$(j)&quot;,&quot;$(j+1)&quot;,Cc))
        push!(circuit,(&quot;C$(j+1)_$(0)&quot;,&quot;$(j+1)&quot;,&quot;$(0)&quot;,Cr))
        push!(circuit,(&quot;L$(j+1)_$(0)&quot;,&quot;$(j+1)&quot;,&quot;$(0)&quot;,Lr))
        
        # increment the index
        j+=1
    else
        push!(circuit,(&quot;C$(j)_$(0)&quot;,&quot;$(j)&quot;,&quot;$(0)&quot;,Cg))
        push!(circuit,(&quot;Lj$(j)_$(j+1)&quot;,&quot;$(j)&quot;,&quot;$(j+1)&quot;,Lj))
        push!(circuit,(&quot;C$(j)_$(j+1)&quot;,&quot;$(j)&quot;,&quot;$(j+1)&quot;,Cj))
    end
    
    # increment the index
    j+=1

end

#last jj
push!(circuit,(&quot;C$(j)_$(0)&quot;,&quot;$(j)&quot;,&quot;$(0)&quot;,Cg/2))
push!(circuit,(&quot;R$(j)_$(0)&quot;,&quot;$(j)&quot;,&quot;$(0)&quot;,Rright))
# port on the output side
push!(circuit,(&quot;P$(j)_$(0)&quot;,&quot;$(j)&quot;,&quot;$(0)&quot;,2))

circuitdefs = Dict(
    Lj =&gt; IctoLj(3.4e-6),
    Cg =&gt; 45.0e-15,
    Cc =&gt; 30.0e-15,
    Cr =&gt;  2.8153e-12,
    Lr =&gt; 1.70e-10,
    Cj =&gt; 55e-15,
    Rleft =&gt; 50.0,
    Rright =&gt; 50.0,
)

ws=2*pi*(1.0:0.1:14)*1e9
wp=(2*pi*7.12*1e9,)
Ip=1.85e-6
sources = [(mode=(1,),port=1,current=Ip)]
Npumpharmonics = (20,)
Nmodulationharmonics = (10,)

@time rpm = hbsolve(ws, wp, sources, Nmodulationharmonics,
    Npumpharmonics, circuit, circuitdefs)

p1=plot(ws/(2*pi*1e9),
    10*log10.(abs2.(rpm.linearized.S(
            outputmode=(0,),
            outputport=2,
            inputmode=(0,),
            inputport=1,
            freqindex=:),
    )),
    ylim=(-40,30),label=&quot;S21&quot;,
    xlabel=&quot;Signal Frequency (GHz)&quot;,
    legend=:bottomright,
    title=&quot;Scattering Parameters&quot;,
    ylabel=&quot;dB&quot;)

plot!(ws/(2*pi*1e9),
    10*log10.(abs2.(rpm.linearized.S((0,),1,(0,),2,:))),
    label=&quot;S12&quot;,
    )

plot!(ws/(2*pi*1e9),
    10*log10.(abs2.(rpm.linearized.S((0,),1,(0,),1,:))),
    label=&quot;S11&quot;,
    )

plot!(ws/(2*pi*1e9),
    10*log10.(abs2.(rpm.linearized.S((0,),2,(0,),2,:))),
    label=&quot;S22&quot;,
    )

p2=plot(ws/(2*pi*1e9),
    rpm.linearized.QE((0,),2,(0,),1,:)./rpm.linearized.QEideal((0,),2,(0,),1,:),    
    ylim=(0,1.05),
    title=&quot;Quantum efficiency&quot;,legend=false,
    ylabel=&quot;QE/QE_ideal&quot;,xlabel=&quot;Signal Frequency (GHz)&quot;);

p3=plot(ws/(2*pi*1e9),
    10*log10.(abs2.(rpm.linearized.S(:,2,(0,),1,:)')),
    ylim=(-40,30),
    xlabel=&quot;Signal Frequency (GHz)&quot;,
    legend=false,
    title=&quot;All idlers&quot;,
    ylabel=&quot;dB&quot;)

p4=plot(ws/(2*pi*1e9),
    1 .- rpm.linearized.CM((0,),2,:),    
    legend=false,title=&quot;Commutation \n relation error&quot;,
    ylabel=&quot;Commutation \n relation error&quot;,xlabel=&quot;Signal Frequency (GHz)&quot;);

plot(p1, p2, p3, p4, layout = (2, 2))"><pre><span class="pl-k">using</span> JosephsonCircuits
<span class="pl-k">using</span> Plots

<span class="pl-c1">@variables</span> Rleft Rright Cg Lj Cj Cc Cr Lr
circuit <span class="pl-k">=</span> Tuple{String,String,String,Num}[]

<span class="pl-c"><span class="pl-c">#</span> port on the input side</span>
<span class="pl-c1">push!</span>(circuit,(<span class="pl-s"><span class="pl-pds">"</span>P<span class="pl-v">$(<span class="pl-c1">1</span>)</span>_<span class="pl-v">$(<span class="pl-c1">0</span>)</span><span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>1<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>0<span class="pl-pds">"</span></span>,<span class="pl-c1">1</span>))
<span class="pl-c1">push!</span>(circuit,(<span class="pl-s"><span class="pl-pds">"</span>R<span class="pl-v">$(<span class="pl-c1">1</span>)</span>_<span class="pl-v">$(<span class="pl-c1">0</span>)</span><span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>1<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>0<span class="pl-pds">"</span></span>,Rleft))
Nj<span class="pl-k">=</span><span class="pl-c1">2048</span>
pmrpitch <span class="pl-k">=</span> <span class="pl-c1">4</span>
<span class="pl-c"><span class="pl-c">#</span>first half cap to ground</span>
<span class="pl-c1">push!</span>(circuit,(<span class="pl-s"><span class="pl-pds">"</span>C<span class="pl-v">$(<span class="pl-c1">1</span>)</span>_<span class="pl-v">$(<span class="pl-c1">0</span>)</span><span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>1<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>0<span class="pl-pds">"</span></span>,Cg<span class="pl-k">/</span><span class="pl-c1">2</span>))
<span class="pl-c"><span class="pl-c">#</span>middle caps and jj's</span>
<span class="pl-c1">push!</span>(circuit,(<span class="pl-s"><span class="pl-pds">"</span>Lj<span class="pl-v">$(<span class="pl-c1">1</span>)</span>_<span class="pl-v">$(<span class="pl-c1">2</span>)</span><span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>1<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>2<span class="pl-pds">"</span></span>,Lj)) 
<span class="pl-c1">push!</span>(circuit,(<span class="pl-s"><span class="pl-pds">"</span>C<span class="pl-v">$(<span class="pl-c1">1</span>)</span>_<span class="pl-v">$(<span class="pl-c1">2</span>)</span><span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>1<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>2<span class="pl-pds">"</span></span>,Cj)) 

j<span class="pl-k">=</span><span class="pl-c1">2</span>
<span class="pl-k">for</span> i <span class="pl-k">=</span> <span class="pl-c1">2</span><span class="pl-k">:</span>Nj<span class="pl-k">-</span><span class="pl-c1">1</span>
    
    <span class="pl-k">if</span> <span class="pl-c1">mod</span>(i,pmrpitch) <span class="pl-k">==</span> pmrpitch<span class="pl-k">÷</span><span class="pl-c1">2</span>

        <span class="pl-c"><span class="pl-c">#</span> make the jj cell with modified capacitance to ground</span>
        <span class="pl-c1">push!</span>(circuit,(<span class="pl-s"><span class="pl-pds">"</span>C<span class="pl-v">$(j)</span>_<span class="pl-v">$(<span class="pl-c1">0</span>)</span><span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span><span class="pl-v">$(j)</span><span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span><span class="pl-v">$(<span class="pl-c1">0</span>)</span><span class="pl-pds">"</span></span>,Cg<span class="pl-k">-</span>Cc))
        <span class="pl-c1">push!</span>(circuit,(<span class="pl-s"><span class="pl-pds">"</span>Lj<span class="pl-v">$(j)</span>_<span class="pl-v">$(j<span class="pl-k">+</span><span class="pl-c1">2</span>)</span><span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span><span class="pl-v">$(j)</span><span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span><span class="pl-v">$(j<span class="pl-k">+</span><span class="pl-c1">2</span>)</span><span class="pl-pds">"</span></span>,Lj))

        <span class="pl-c1">push!</span>(circuit,(<span class="pl-s"><span class="pl-pds">"</span>C<span class="pl-v">$(j)</span>_<span class="pl-v">$(j<span class="pl-k">+</span><span class="pl-c1">2</span>)</span><span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span><span class="pl-v">$(j)</span><span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span><span class="pl-v">$(j<span class="pl-k">+</span><span class="pl-c1">2</span>)</span><span class="pl-pds">"</span></span>,Cj))
        
        <span class="pl-c"><span class="pl-c">#</span>make the pmr</span>
        <span class="pl-c1">push!</span>(circuit,(<span class="pl-s"><span class="pl-pds">"</span>C<span class="pl-v">$(j)</span>_<span class="pl-v">$(j<span class="pl-k">+</span><span class="pl-c1">1</span>)</span><span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span><span class="pl-v">$(j)</span><span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span><span class="pl-v">$(j<span class="pl-k">+</span><span class="pl-c1">1</span>)</span><span class="pl-pds">"</span></span>,Cc))
        <span class="pl-c1">push!</span>(circuit,(<span class="pl-s"><span class="pl-pds">"</span>C<span class="pl-v">$(j<span class="pl-k">+</span><span class="pl-c1">1</span>)</span>_<span class="pl-v">$(<span class="pl-c1">0</span>)</span><span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span><span class="pl-v">$(j<span class="pl-k">+</span><span class="pl-c1">1</span>)</span><span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span><span class="pl-v">$(<span class="pl-c1">0</span>)</span><span class="pl-pds">"</span></span>,Cr))
        <span class="pl-c1">push!</span>(circuit,(<span class="pl-s"><span class="pl-pds">"</span>L<span class="pl-v">$(j<span class="pl-k">+</span><span class="pl-c1">1</span>)</span>_<span class="pl-v">$(<span class="pl-c1">0</span>)</span><span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span><span class="pl-v">$(j<span class="pl-k">+</span><span class="pl-c1">1</span>)</span><span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span><span class="pl-v">$(<span class="pl-c1">0</span>)</span><span class="pl-pds">"</span></span>,Lr))
        
        <span class="pl-c"><span class="pl-c">#</span> increment the index</span>
        j<span class="pl-k">+=</span><span class="pl-c1">1</span>
    <span class="pl-k">else</span>
        <span class="pl-c1">push!</span>(circuit,(<span class="pl-s"><span class="pl-pds">"</span>C<span class="pl-v">$(j)</span>_<span class="pl-v">$(<span class="pl-c1">0</span>)</span><span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span><span class="pl-v">$(j)</span><span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span><span class="pl-v">$(<span class="pl-c1">0</span>)</span><span class="pl-pds">"</span></span>,Cg))
        <span class="pl-c1">push!</span>(circuit,(<span class="pl-s"><span class="pl-pds">"</span>Lj<span class="pl-v">$(j)</span>_<span class="pl-v">$(j<span class="pl-k">+</span><span class="pl-c1">1</span>)</span><span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span><span class="pl-v">$(j)</span><span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span><span class="pl-v">$(j<span class="pl-k">+</span><span class="pl-c1">1</span>)</span><span class="pl-pds">"</span></span>,Lj))
        <span class="pl-c1">push!</span>(circuit,(<span class="pl-s"><span class="pl-pds">"</span>C<span class="pl-v">$(j)</span>_<span class="pl-v">$(j<span class="pl-k">+</span><span class="pl-c1">1</span>)</span><span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span><span class="pl-v">$(j)</span><span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span><span class="pl-v">$(j<span class="pl-k">+</span><span class="pl-c1">1</span>)</span><span class="pl-pds">"</span></span>,Cj))
    <span class="pl-k">end</span>
    
    <span class="pl-c"><span class="pl-c">#</span> increment the index</span>
    j<span class="pl-k">+=</span><span class="pl-c1">1</span>

<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span>last jj</span>
<span class="pl-c1">push!</span>(circuit,(<span class="pl-s"><span class="pl-pds">"</span>C<span class="pl-v">$(j)</span>_<span class="pl-v">$(<span class="pl-c1">0</span>)</span><span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span><span class="pl-v">$(j)</span><span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span><span class="pl-v">$(<span class="pl-c1">0</span>)</span><span class="pl-pds">"</span></span>,Cg<span class="pl-k">/</span><span class="pl-c1">2</span>))
<span class="pl-c1">push!</span>(circuit,(<span class="pl-s"><span class="pl-pds">"</span>R<span class="pl-v">$(j)</span>_<span class="pl-v">$(<span class="pl-c1">0</span>)</span><span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span><span class="pl-v">$(j)</span><span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span><span class="pl-v">$(<span class="pl-c1">0</span>)</span><span class="pl-pds">"</span></span>,Rright))
<span class="pl-c"><span class="pl-c">#</span> port on the output side</span>
<span class="pl-c1">push!</span>(circuit,(<span class="pl-s"><span class="pl-pds">"</span>P<span class="pl-v">$(j)</span>_<span class="pl-v">$(<span class="pl-c1">0</span>)</span><span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span><span class="pl-v">$(j)</span><span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span><span class="pl-v">$(<span class="pl-c1">0</span>)</span><span class="pl-pds">"</span></span>,<span class="pl-c1">2</span>))

circuitdefs <span class="pl-k">=</span> <span class="pl-c1">Dict</span>(
    Lj <span class="pl-k">=&gt;</span> <span class="pl-c1">IctoLj</span>(<span class="pl-c1">3.4e-6</span>),
    Cg <span class="pl-k">=&gt;</span> <span class="pl-c1">45.0e-15</span>,
    Cc <span class="pl-k">=&gt;</span> <span class="pl-c1">30.0e-15</span>,
    Cr <span class="pl-k">=&gt;</span>  <span class="pl-c1">2.8153e-12</span>,
    Lr <span class="pl-k">=&gt;</span> <span class="pl-c1">1.70e-10</span>,
    Cj <span class="pl-k">=&gt;</span> <span class="pl-c1">55e-15</span>,
    Rleft <span class="pl-k">=&gt;</span> <span class="pl-c1">50.0</span>,
    Rright <span class="pl-k">=&gt;</span> <span class="pl-c1">50.0</span>,
)

ws<span class="pl-k">=</span><span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">pi</span><span class="pl-k">*</span>(<span class="pl-c1">1.0</span><span class="pl-k">:</span><span class="pl-c1">0.1</span><span class="pl-k">:</span><span class="pl-c1">14</span>)<span class="pl-k">*</span><span class="pl-c1">1e9</span>
wp<span class="pl-k">=</span>(<span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">pi</span><span class="pl-k">*</span><span class="pl-c1">7.12</span><span class="pl-k">*</span><span class="pl-c1">1e9</span>,)
Ip<span class="pl-k">=</span><span class="pl-c1">1.85e-6</span>
sources <span class="pl-k">=</span> [(mode<span class="pl-k">=</span>(<span class="pl-c1">1</span>,),port<span class="pl-k">=</span><span class="pl-c1">1</span>,current<span class="pl-k">=</span>Ip)]
Npumpharmonics <span class="pl-k">=</span> (<span class="pl-c1">20</span>,)
Nmodulationharmonics <span class="pl-k">=</span> (<span class="pl-c1">10</span>,)

<span class="pl-c1">@time</span> rpm <span class="pl-k">=</span> <span class="pl-c1">hbsolve</span>(ws, wp, sources, Nmodulationharmonics,
    Npumpharmonics, circuit, circuitdefs)

p1<span class="pl-k">=</span><span class="pl-c1">plot</span>(ws<span class="pl-k">/</span>(<span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">pi</span><span class="pl-k">*</span><span class="pl-c1">1e9</span>),
    <span class="pl-c1">10</span><span class="pl-k">*</span><span class="pl-c1">log10</span>.(<span class="pl-c1">abs2</span>.(rpm<span class="pl-k">.</span>linearized<span class="pl-k">.</span><span class="pl-c1">S</span>(
            outputmode<span class="pl-k">=</span>(<span class="pl-c1">0</span>,),
            outputport<span class="pl-k">=</span><span class="pl-c1">2</span>,
            inputmode<span class="pl-k">=</span>(<span class="pl-c1">0</span>,),
            inputport<span class="pl-k">=</span><span class="pl-c1">1</span>,
            freqindex<span class="pl-k">=</span>:),
    )),
    ylim<span class="pl-k">=</span>(<span class="pl-k">-</span><span class="pl-c1">40</span>,<span class="pl-c1">30</span>),label<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>S21<span class="pl-pds">"</span></span>,
    xlabel<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Signal Frequency (GHz)<span class="pl-pds">"</span></span>,
    legend<span class="pl-k">=</span><span class="pl-c1">:bottomright</span>,
    title<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Scattering Parameters<span class="pl-pds">"</span></span>,
    ylabel<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>dB<span class="pl-pds">"</span></span>)

<span class="pl-c1">plot!</span>(ws<span class="pl-k">/</span>(<span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">pi</span><span class="pl-k">*</span><span class="pl-c1">1e9</span>),
    <span class="pl-c1">10</span><span class="pl-k">*</span><span class="pl-c1">log10</span>.(<span class="pl-c1">abs2</span>.(rpm<span class="pl-k">.</span>linearized<span class="pl-k">.</span><span class="pl-c1">S</span>((<span class="pl-c1">0</span>,),<span class="pl-c1">1</span>,(<span class="pl-c1">0</span>,),<span class="pl-c1">2</span>,:))),
    label<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>S12<span class="pl-pds">"</span></span>,
    )

<span class="pl-c1">plot!</span>(ws<span class="pl-k">/</span>(<span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">pi</span><span class="pl-k">*</span><span class="pl-c1">1e9</span>),
    <span class="pl-c1">10</span><span class="pl-k">*</span><span class="pl-c1">log10</span>.(<span class="pl-c1">abs2</span>.(rpm<span class="pl-k">.</span>linearized<span class="pl-k">.</span><span class="pl-c1">S</span>((<span class="pl-c1">0</span>,),<span class="pl-c1">1</span>,(<span class="pl-c1">0</span>,),<span class="pl-c1">1</span>,:))),
    label<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>S11<span class="pl-pds">"</span></span>,
    )

<span class="pl-c1">plot!</span>(ws<span class="pl-k">/</span>(<span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">pi</span><span class="pl-k">*</span><span class="pl-c1">1e9</span>),
    <span class="pl-c1">10</span><span class="pl-k">*</span><span class="pl-c1">log10</span>.(<span class="pl-c1">abs2</span>.(rpm<span class="pl-k">.</span>linearized<span class="pl-k">.</span><span class="pl-c1">S</span>((<span class="pl-c1">0</span>,),<span class="pl-c1">2</span>,(<span class="pl-c1">0</span>,),<span class="pl-c1">2</span>,:))),
    label<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>S22<span class="pl-pds">"</span></span>,
    )

p2<span class="pl-k">=</span><span class="pl-c1">plot</span>(ws<span class="pl-k">/</span>(<span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">pi</span><span class="pl-k">*</span><span class="pl-c1">1e9</span>),
    rpm<span class="pl-k">.</span>linearized<span class="pl-k">.</span><span class="pl-c1">QE</span>((<span class="pl-c1">0</span>,),<span class="pl-c1">2</span>,(<span class="pl-c1">0</span>,),<span class="pl-c1">1</span>,:)<span class="pl-k">./</span>rpm<span class="pl-k">.</span>linearized<span class="pl-k">.</span><span class="pl-c1">QEideal</span>((<span class="pl-c1">0</span>,),<span class="pl-c1">2</span>,(<span class="pl-c1">0</span>,),<span class="pl-c1">1</span>,:),    
    ylim<span class="pl-k">=</span>(<span class="pl-c1">0</span>,<span class="pl-c1">1.05</span>),
    title<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Quantum efficiency<span class="pl-pds">"</span></span>,legend<span class="pl-k">=</span><span class="pl-c1">false</span>,
    ylabel<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>QE/QE_ideal<span class="pl-pds">"</span></span>,xlabel<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Signal Frequency (GHz)<span class="pl-pds">"</span></span>);

p3<span class="pl-k">=</span><span class="pl-c1">plot</span>(ws<span class="pl-k">/</span>(<span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">pi</span><span class="pl-k">*</span><span class="pl-c1">1e9</span>),
    <span class="pl-c1">10</span><span class="pl-k">*</span><span class="pl-c1">log10</span>.(<span class="pl-c1">abs2</span>.(rpm<span class="pl-k">.</span>linearized<span class="pl-k">.</span><span class="pl-c1">S</span>(:,<span class="pl-c1">2</span>,(<span class="pl-c1">0</span>,),<span class="pl-c1">1</span>,:)<span class="pl-k">'</span>)),
    ylim<span class="pl-k">=</span>(<span class="pl-k">-</span><span class="pl-c1">40</span>,<span class="pl-c1">30</span>),
    xlabel<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Signal Frequency (GHz)<span class="pl-pds">"</span></span>,
    legend<span class="pl-k">=</span><span class="pl-c1">false</span>,
    title<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>All idlers<span class="pl-pds">"</span></span>,
    ylabel<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>dB<span class="pl-pds">"</span></span>)

p4<span class="pl-k">=</span><span class="pl-c1">plot</span>(ws<span class="pl-k">/</span>(<span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">pi</span><span class="pl-k">*</span><span class="pl-c1">1e9</span>),
    <span class="pl-c1">1</span> <span class="pl-k">.-</span> rpm<span class="pl-k">.</span>linearized<span class="pl-k">.</span><span class="pl-c1">CM</span>((<span class="pl-c1">0</span>,),<span class="pl-c1">2</span>,:),    
    legend<span class="pl-k">=</span><span class="pl-c1">false</span>,title<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Commutation <span class="pl-cce">\n</span> relation error<span class="pl-pds">"</span></span>,
    ylabel<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Commutation <span class="pl-cce">\n</span> relation error<span class="pl-pds">"</span></span>,xlabel<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Signal Frequency (GHz)<span class="pl-pds">"</span></span>);

<span class="pl-c1">plot</span>(p1, p2, p3, p4, layout <span class="pl-k">=</span> (<span class="pl-c1">2</span>, <span class="pl-c1">2</span>))</pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="  2.959010 seconds (257.75 k allocations: 2.392 GiB, 0.21% gc time)"><pre class="notranslate"><code>  2.959010 seconds (257.75 k allocations: 2.392 GiB, 0.21% gc time)
</code></pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/2c278912eacea56c4089b65b1599e33e68d34c5ad0e209132de6ef9e34e5f1a0/68747470733a2f2f7163652e6d69742e6564752f4a6f73657068736f6e43697263756974732e6a6c2f756e69666f726d2e706e67"><img src="https://camo.githubusercontent.com/2c278912eacea56c4089b65b1599e33e68d34c5ad0e209132de6ef9e34e5f1a0/68747470733a2f2f7163652e6d69742e6564752f4a6f73657068736f6e43697263756974732e6a6c2f756e69666f726d2e706e67" alt="JTWPA simulation" data-canonical-src="https://qce.mit.edu/JosephsonCircuits.jl/uniform.png" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-floquet-jtwpa" class="anchor" aria-hidden="true" href="#floquet-jtwpa"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Floquet JTWPA</h2>
<p dir="auto">Circuit parameters from <a href="https://journals.aps.org/prxquantum/abstract/10.1103/PRXQuantum.3.020306" rel="nofollow">here</a>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using JosephsonCircuits
using Plots

@variables Rleft Rright Lj Cg Cc Cr Lr Cj

weightwidth = 745
weight = (n,Nnodes,weightwidth) -&gt; exp(-(n - Nnodes/2)^2/(weightwidth)^2)
Nj=2000
pmrpitch = 8

# define the circuit components
circuit = Tuple{String,String,String,Num}[]

# port on the left side
push!(circuit,(&quot;P$(1)_$(0)&quot;,&quot;1&quot;,&quot;0&quot;,1))
push!(circuit,(&quot;R$(1)_$(0)&quot;,&quot;1&quot;,&quot;0&quot;,Rleft))

#first half cap to ground
push!(circuit,(&quot;C$(1)_$(0)&quot;,&quot;1&quot;,&quot;0&quot;,Cg/2*weight(1-0.5,Nj,weightwidth)))
#middle caps and jj's
push!(circuit,(&quot;Lj$(1)_$(2)&quot;,&quot;1&quot;,&quot;2&quot;,Lj*weight(1,Nj,weightwidth))) 
push!(circuit,(&quot;C$(1)_$(2)&quot;,&quot;1&quot;,&quot;2&quot;,Cj/weight(1,Nj,weightwidth))) 
    
j=2
for i = 2:Nj-1
    
    if mod(i,pmrpitch) == pmrpitch÷2

        # make the jj cell with modified capacitance to ground
        push!(circuit,(&quot;C$(j)_$(0)&quot;,&quot;$(j)&quot;,&quot;$(0)&quot;,(Cg-Cc)*weight(i-0.5,Nj,weightwidth)))
        push!(circuit,(&quot;Lj$(j)_$(j+2)&quot;,&quot;$(j)&quot;,&quot;$(j+2)&quot;,Lj*weight(i,Nj,weightwidth)))

        push!(circuit,(&quot;C$(j)_$(j+2)&quot;,&quot;$(j)&quot;,&quot;$(j+2)&quot;,Cj/weight(i,Nj,weightwidth)))
        
        #make the pmr
        push!(circuit,(&quot;C$(j)_$(j+1)&quot;,&quot;$(j)&quot;,&quot;$(j+1)&quot;,Cc*weight(i-0.5,Nj,weightwidth)))
        push!(circuit,(&quot;C$(j+1)_$(0)&quot;,&quot;$(j+1)&quot;,&quot;$(0)&quot;,Cr))
        push!(circuit,(&quot;L$(j+1)_$(0)&quot;,&quot;$(j+1)&quot;,&quot;$(0)&quot;,Lr))
        
        # increment the index
        j+=1
    else
        push!(circuit,(&quot;C$(j)_$(0)&quot;,&quot;$(j)&quot;,&quot;$(0)&quot;,Cg*weight(i-0.5,Nj,weightwidth)))
        push!(circuit,(&quot;Lj$(j)_$(j+1)&quot;,&quot;$(j)&quot;,&quot;$(j+1)&quot;,Lj*weight(i,Nj,weightwidth)))
        push!(circuit,(&quot;C$(j)_$(j+1)&quot;,&quot;$(j)&quot;,&quot;$(j+1)&quot;,Cj/weight(i,Nj,weightwidth)))
    end
    
    # increment the index
    j+=1

end

#last jj
push!(circuit,(&quot;C$(j)_$(0)&quot;,&quot;$(j)&quot;,&quot;$(0)&quot;,Cg/2*weight(Nj-0.5,Nj,weightwidth)))
push!(circuit,(&quot;R$(j)_$(0)&quot;,&quot;$(j)&quot;,&quot;$(0)&quot;,Rright))
push!(circuit,(&quot;P$(j)_$(0)&quot;,&quot;$(j)&quot;,&quot;$(0)&quot;,2))

circuitdefs = Dict(
    Rleft =&gt; 50.0,
    Rright =&gt; 50.0,
    Lj =&gt; IctoLj(1.75e-6),
    Cg =&gt; 76.6e-15,
    Cc =&gt; 40.0e-15,
    Cr =&gt;  1.533e-12,
    Lr =&gt; 2.47e-10,
    Cj =&gt; 40e-15,
)  

ws=2*pi*(1.0:0.1:14)*1e9
wp=(2*pi*7.9*1e9,)
Ip=1.1e-6
sources = [(mode=(1,),port=1,current=Ip)]
Npumpharmonics = (20,)
Nmodulationharmonics = (10,)

@time floquet = hbsolve(ws, wp, sources, Nmodulationharmonics,
    Npumpharmonics, circuit, circuitdefs)

p1=plot(ws/(2*pi*1e9),
    10*log10.(abs2.(floquet.linearized.S((0,),2,(0,),1,:))),
    ylim=(-40,30),label=&quot;S21&quot;,
    xlabel=&quot;Signal Frequency (GHz)&quot;,
    legend=:bottomright,
    title=&quot;Scattering Parameters&quot;,
    ylabel=&quot;dB&quot;)

plot!(ws/(2*pi*1e9),
    10*log10.(abs2.(floquet.linearized.S((0,),1,(0,),2,:))),
    label=&quot;S12&quot;,
    )

plot!(ws/(2*pi*1e9),
    10*log10.(abs2.(floquet.linearized.S((0,),1,(0,),1,:))),
    label=&quot;S11&quot;,
    )

plot!(ws/(2*pi*1e9),
    10*log10.(abs2.(floquet.linearized.S((0,),2,(0,),2,:))),
    label=&quot;S22&quot;,
    )

p2=plot(ws/(2*pi*1e9),
    floquet.linearized.QE((0,),2,(0,),1,:)./floquet.linearized.QEideal((0,),2,(0,),1,:),    
    ylim=(0.99,1.001),
    title=&quot;Quantum efficiency&quot;,legend=false,
    ylabel=&quot;QE/QE_ideal&quot;,xlabel=&quot;Signal Frequency (GHz)&quot;);

p3=plot(ws/(2*pi*1e9),
    10*log10.(abs2.(floquet.linearized.S(:,2,(0,),1,:)')),
    ylim=(-40,30),label=&quot;S21&quot;,
    xlabel=&quot;Signal Frequency (GHz)&quot;,
    legend=false,
    title=&quot;All idlers&quot;,
    ylabel=&quot;dB&quot;)


p4=plot(ws/(2*pi*1e9),
    1 .- floquet.linearized.CM((0,),2,:),
    legend=false,title=&quot;Commutation \n relation error&quot;,
    ylabel=&quot;Commutation \n relation error&quot;,xlabel=&quot;Signal Frequency (GHz)&quot;);

plot(p1, p2, p3,p4,layout = (2, 2))"><pre><span class="pl-k">using</span> JosephsonCircuits
<span class="pl-k">using</span> Plots

<span class="pl-c1">@variables</span> Rleft Rright Lj Cg Cc Cr Lr Cj

weightwidth <span class="pl-k">=</span> <span class="pl-c1">745</span>
weight <span class="pl-k">=</span> (n,Nnodes,weightwidth) <span class="pl-k">-&gt;</span> <span class="pl-c1">exp</span>(<span class="pl-k">-</span>(n <span class="pl-k">-</span> Nnodes<span class="pl-k">/</span><span class="pl-c1">2</span>)<span class="pl-k">^</span><span class="pl-c1">2</span><span class="pl-k">/</span>(weightwidth)<span class="pl-k">^</span><span class="pl-c1">2</span>)
Nj<span class="pl-k">=</span><span class="pl-c1">2000</span>
pmrpitch <span class="pl-k">=</span> <span class="pl-c1">8</span>

<span class="pl-c"><span class="pl-c">#</span> define the circuit components</span>
circuit <span class="pl-k">=</span> Tuple{String,String,String,Num}[]

<span class="pl-c"><span class="pl-c">#</span> port on the left side</span>
<span class="pl-c1">push!</span>(circuit,(<span class="pl-s"><span class="pl-pds">"</span>P<span class="pl-v">$(<span class="pl-c1">1</span>)</span>_<span class="pl-v">$(<span class="pl-c1">0</span>)</span><span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>1<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>0<span class="pl-pds">"</span></span>,<span class="pl-c1">1</span>))
<span class="pl-c1">push!</span>(circuit,(<span class="pl-s"><span class="pl-pds">"</span>R<span class="pl-v">$(<span class="pl-c1">1</span>)</span>_<span class="pl-v">$(<span class="pl-c1">0</span>)</span><span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>1<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>0<span class="pl-pds">"</span></span>,Rleft))

<span class="pl-c"><span class="pl-c">#</span>first half cap to ground</span>
<span class="pl-c1">push!</span>(circuit,(<span class="pl-s"><span class="pl-pds">"</span>C<span class="pl-v">$(<span class="pl-c1">1</span>)</span>_<span class="pl-v">$(<span class="pl-c1">0</span>)</span><span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>1<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>0<span class="pl-pds">"</span></span>,Cg<span class="pl-k">/</span><span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">weight</span>(<span class="pl-c1">1</span><span class="pl-k">-</span><span class="pl-c1">0.5</span>,Nj,weightwidth)))
<span class="pl-c"><span class="pl-c">#</span>middle caps and jj's</span>
<span class="pl-c1">push!</span>(circuit,(<span class="pl-s"><span class="pl-pds">"</span>Lj<span class="pl-v">$(<span class="pl-c1">1</span>)</span>_<span class="pl-v">$(<span class="pl-c1">2</span>)</span><span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>1<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>2<span class="pl-pds">"</span></span>,Lj<span class="pl-k">*</span><span class="pl-c1">weight</span>(<span class="pl-c1">1</span>,Nj,weightwidth))) 
<span class="pl-c1">push!</span>(circuit,(<span class="pl-s"><span class="pl-pds">"</span>C<span class="pl-v">$(<span class="pl-c1">1</span>)</span>_<span class="pl-v">$(<span class="pl-c1">2</span>)</span><span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>1<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>2<span class="pl-pds">"</span></span>,Cj<span class="pl-k">/</span><span class="pl-c1">weight</span>(<span class="pl-c1">1</span>,Nj,weightwidth))) 
    
j<span class="pl-k">=</span><span class="pl-c1">2</span>
<span class="pl-k">for</span> i <span class="pl-k">=</span> <span class="pl-c1">2</span><span class="pl-k">:</span>Nj<span class="pl-k">-</span><span class="pl-c1">1</span>
    
    <span class="pl-k">if</span> <span class="pl-c1">mod</span>(i,pmrpitch) <span class="pl-k">==</span> pmrpitch<span class="pl-k">÷</span><span class="pl-c1">2</span>

        <span class="pl-c"><span class="pl-c">#</span> make the jj cell with modified capacitance to ground</span>
        <span class="pl-c1">push!</span>(circuit,(<span class="pl-s"><span class="pl-pds">"</span>C<span class="pl-v">$(j)</span>_<span class="pl-v">$(<span class="pl-c1">0</span>)</span><span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span><span class="pl-v">$(j)</span><span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span><span class="pl-v">$(<span class="pl-c1">0</span>)</span><span class="pl-pds">"</span></span>,(Cg<span class="pl-k">-</span>Cc)<span class="pl-k">*</span><span class="pl-c1">weight</span>(i<span class="pl-k">-</span><span class="pl-c1">0.5</span>,Nj,weightwidth)))
        <span class="pl-c1">push!</span>(circuit,(<span class="pl-s"><span class="pl-pds">"</span>Lj<span class="pl-v">$(j)</span>_<span class="pl-v">$(j<span class="pl-k">+</span><span class="pl-c1">2</span>)</span><span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span><span class="pl-v">$(j)</span><span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span><span class="pl-v">$(j<span class="pl-k">+</span><span class="pl-c1">2</span>)</span><span class="pl-pds">"</span></span>,Lj<span class="pl-k">*</span><span class="pl-c1">weight</span>(i,Nj,weightwidth)))

        <span class="pl-c1">push!</span>(circuit,(<span class="pl-s"><span class="pl-pds">"</span>C<span class="pl-v">$(j)</span>_<span class="pl-v">$(j<span class="pl-k">+</span><span class="pl-c1">2</span>)</span><span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span><span class="pl-v">$(j)</span><span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span><span class="pl-v">$(j<span class="pl-k">+</span><span class="pl-c1">2</span>)</span><span class="pl-pds">"</span></span>,Cj<span class="pl-k">/</span><span class="pl-c1">weight</span>(i,Nj,weightwidth)))
        
        <span class="pl-c"><span class="pl-c">#</span>make the pmr</span>
        <span class="pl-c1">push!</span>(circuit,(<span class="pl-s"><span class="pl-pds">"</span>C<span class="pl-v">$(j)</span>_<span class="pl-v">$(j<span class="pl-k">+</span><span class="pl-c1">1</span>)</span><span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span><span class="pl-v">$(j)</span><span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span><span class="pl-v">$(j<span class="pl-k">+</span><span class="pl-c1">1</span>)</span><span class="pl-pds">"</span></span>,Cc<span class="pl-k">*</span><span class="pl-c1">weight</span>(i<span class="pl-k">-</span><span class="pl-c1">0.5</span>,Nj,weightwidth)))
        <span class="pl-c1">push!</span>(circuit,(<span class="pl-s"><span class="pl-pds">"</span>C<span class="pl-v">$(j<span class="pl-k">+</span><span class="pl-c1">1</span>)</span>_<span class="pl-v">$(<span class="pl-c1">0</span>)</span><span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span><span class="pl-v">$(j<span class="pl-k">+</span><span class="pl-c1">1</span>)</span><span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span><span class="pl-v">$(<span class="pl-c1">0</span>)</span><span class="pl-pds">"</span></span>,Cr))
        <span class="pl-c1">push!</span>(circuit,(<span class="pl-s"><span class="pl-pds">"</span>L<span class="pl-v">$(j<span class="pl-k">+</span><span class="pl-c1">1</span>)</span>_<span class="pl-v">$(<span class="pl-c1">0</span>)</span><span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span><span class="pl-v">$(j<span class="pl-k">+</span><span class="pl-c1">1</span>)</span><span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span><span class="pl-v">$(<span class="pl-c1">0</span>)</span><span class="pl-pds">"</span></span>,Lr))
        
        <span class="pl-c"><span class="pl-c">#</span> increment the index</span>
        j<span class="pl-k">+=</span><span class="pl-c1">1</span>
    <span class="pl-k">else</span>
        <span class="pl-c1">push!</span>(circuit,(<span class="pl-s"><span class="pl-pds">"</span>C<span class="pl-v">$(j)</span>_<span class="pl-v">$(<span class="pl-c1">0</span>)</span><span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span><span class="pl-v">$(j)</span><span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span><span class="pl-v">$(<span class="pl-c1">0</span>)</span><span class="pl-pds">"</span></span>,Cg<span class="pl-k">*</span><span class="pl-c1">weight</span>(i<span class="pl-k">-</span><span class="pl-c1">0.5</span>,Nj,weightwidth)))
        <span class="pl-c1">push!</span>(circuit,(<span class="pl-s"><span class="pl-pds">"</span>Lj<span class="pl-v">$(j)</span>_<span class="pl-v">$(j<span class="pl-k">+</span><span class="pl-c1">1</span>)</span><span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span><span class="pl-v">$(j)</span><span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span><span class="pl-v">$(j<span class="pl-k">+</span><span class="pl-c1">1</span>)</span><span class="pl-pds">"</span></span>,Lj<span class="pl-k">*</span><span class="pl-c1">weight</span>(i,Nj,weightwidth)))
        <span class="pl-c1">push!</span>(circuit,(<span class="pl-s"><span class="pl-pds">"</span>C<span class="pl-v">$(j)</span>_<span class="pl-v">$(j<span class="pl-k">+</span><span class="pl-c1">1</span>)</span><span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span><span class="pl-v">$(j)</span><span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span><span class="pl-v">$(j<span class="pl-k">+</span><span class="pl-c1">1</span>)</span><span class="pl-pds">"</span></span>,Cj<span class="pl-k">/</span><span class="pl-c1">weight</span>(i,Nj,weightwidth)))
    <span class="pl-k">end</span>
    
    <span class="pl-c"><span class="pl-c">#</span> increment the index</span>
    j<span class="pl-k">+=</span><span class="pl-c1">1</span>

<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span>last jj</span>
<span class="pl-c1">push!</span>(circuit,(<span class="pl-s"><span class="pl-pds">"</span>C<span class="pl-v">$(j)</span>_<span class="pl-v">$(<span class="pl-c1">0</span>)</span><span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span><span class="pl-v">$(j)</span><span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span><span class="pl-v">$(<span class="pl-c1">0</span>)</span><span class="pl-pds">"</span></span>,Cg<span class="pl-k">/</span><span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">weight</span>(Nj<span class="pl-k">-</span><span class="pl-c1">0.5</span>,Nj,weightwidth)))
<span class="pl-c1">push!</span>(circuit,(<span class="pl-s"><span class="pl-pds">"</span>R<span class="pl-v">$(j)</span>_<span class="pl-v">$(<span class="pl-c1">0</span>)</span><span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span><span class="pl-v">$(j)</span><span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span><span class="pl-v">$(<span class="pl-c1">0</span>)</span><span class="pl-pds">"</span></span>,Rright))
<span class="pl-c1">push!</span>(circuit,(<span class="pl-s"><span class="pl-pds">"</span>P<span class="pl-v">$(j)</span>_<span class="pl-v">$(<span class="pl-c1">0</span>)</span><span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span><span class="pl-v">$(j)</span><span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span><span class="pl-v">$(<span class="pl-c1">0</span>)</span><span class="pl-pds">"</span></span>,<span class="pl-c1">2</span>))

circuitdefs <span class="pl-k">=</span> <span class="pl-c1">Dict</span>(
    Rleft <span class="pl-k">=&gt;</span> <span class="pl-c1">50.0</span>,
    Rright <span class="pl-k">=&gt;</span> <span class="pl-c1">50.0</span>,
    Lj <span class="pl-k">=&gt;</span> <span class="pl-c1">IctoLj</span>(<span class="pl-c1">1.75e-6</span>),
    Cg <span class="pl-k">=&gt;</span> <span class="pl-c1">76.6e-15</span>,
    Cc <span class="pl-k">=&gt;</span> <span class="pl-c1">40.0e-15</span>,
    Cr <span class="pl-k">=&gt;</span>  <span class="pl-c1">1.533e-12</span>,
    Lr <span class="pl-k">=&gt;</span> <span class="pl-c1">2.47e-10</span>,
    Cj <span class="pl-k">=&gt;</span> <span class="pl-c1">40e-15</span>,
)  

ws<span class="pl-k">=</span><span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">pi</span><span class="pl-k">*</span>(<span class="pl-c1">1.0</span><span class="pl-k">:</span><span class="pl-c1">0.1</span><span class="pl-k">:</span><span class="pl-c1">14</span>)<span class="pl-k">*</span><span class="pl-c1">1e9</span>
wp<span class="pl-k">=</span>(<span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">pi</span><span class="pl-k">*</span><span class="pl-c1">7.9</span><span class="pl-k">*</span><span class="pl-c1">1e9</span>,)
Ip<span class="pl-k">=</span><span class="pl-c1">1.1e-6</span>
sources <span class="pl-k">=</span> [(mode<span class="pl-k">=</span>(<span class="pl-c1">1</span>,),port<span class="pl-k">=</span><span class="pl-c1">1</span>,current<span class="pl-k">=</span>Ip)]
Npumpharmonics <span class="pl-k">=</span> (<span class="pl-c1">20</span>,)
Nmodulationharmonics <span class="pl-k">=</span> (<span class="pl-c1">10</span>,)

<span class="pl-c1">@time</span> floquet <span class="pl-k">=</span> <span class="pl-c1">hbsolve</span>(ws, wp, sources, Nmodulationharmonics,
    Npumpharmonics, circuit, circuitdefs)

p1<span class="pl-k">=</span><span class="pl-c1">plot</span>(ws<span class="pl-k">/</span>(<span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">pi</span><span class="pl-k">*</span><span class="pl-c1">1e9</span>),
    <span class="pl-c1">10</span><span class="pl-k">*</span><span class="pl-c1">log10</span>.(<span class="pl-c1">abs2</span>.(floquet<span class="pl-k">.</span>linearized<span class="pl-k">.</span><span class="pl-c1">S</span>((<span class="pl-c1">0</span>,),<span class="pl-c1">2</span>,(<span class="pl-c1">0</span>,),<span class="pl-c1">1</span>,:))),
    ylim<span class="pl-k">=</span>(<span class="pl-k">-</span><span class="pl-c1">40</span>,<span class="pl-c1">30</span>),label<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>S21<span class="pl-pds">"</span></span>,
    xlabel<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Signal Frequency (GHz)<span class="pl-pds">"</span></span>,
    legend<span class="pl-k">=</span><span class="pl-c1">:bottomright</span>,
    title<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Scattering Parameters<span class="pl-pds">"</span></span>,
    ylabel<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>dB<span class="pl-pds">"</span></span>)

<span class="pl-c1">plot!</span>(ws<span class="pl-k">/</span>(<span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">pi</span><span class="pl-k">*</span><span class="pl-c1">1e9</span>),
    <span class="pl-c1">10</span><span class="pl-k">*</span><span class="pl-c1">log10</span>.(<span class="pl-c1">abs2</span>.(floquet<span class="pl-k">.</span>linearized<span class="pl-k">.</span><span class="pl-c1">S</span>((<span class="pl-c1">0</span>,),<span class="pl-c1">1</span>,(<span class="pl-c1">0</span>,),<span class="pl-c1">2</span>,:))),
    label<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>S12<span class="pl-pds">"</span></span>,
    )

<span class="pl-c1">plot!</span>(ws<span class="pl-k">/</span>(<span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">pi</span><span class="pl-k">*</span><span class="pl-c1">1e9</span>),
    <span class="pl-c1">10</span><span class="pl-k">*</span><span class="pl-c1">log10</span>.(<span class="pl-c1">abs2</span>.(floquet<span class="pl-k">.</span>linearized<span class="pl-k">.</span><span class="pl-c1">S</span>((<span class="pl-c1">0</span>,),<span class="pl-c1">1</span>,(<span class="pl-c1">0</span>,),<span class="pl-c1">1</span>,:))),
    label<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>S11<span class="pl-pds">"</span></span>,
    )

<span class="pl-c1">plot!</span>(ws<span class="pl-k">/</span>(<span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">pi</span><span class="pl-k">*</span><span class="pl-c1">1e9</span>),
    <span class="pl-c1">10</span><span class="pl-k">*</span><span class="pl-c1">log10</span>.(<span class="pl-c1">abs2</span>.(floquet<span class="pl-k">.</span>linearized<span class="pl-k">.</span><span class="pl-c1">S</span>((<span class="pl-c1">0</span>,),<span class="pl-c1">2</span>,(<span class="pl-c1">0</span>,),<span class="pl-c1">2</span>,:))),
    label<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>S22<span class="pl-pds">"</span></span>,
    )

p2<span class="pl-k">=</span><span class="pl-c1">plot</span>(ws<span class="pl-k">/</span>(<span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">pi</span><span class="pl-k">*</span><span class="pl-c1">1e9</span>),
    floquet<span class="pl-k">.</span>linearized<span class="pl-k">.</span><span class="pl-c1">QE</span>((<span class="pl-c1">0</span>,),<span class="pl-c1">2</span>,(<span class="pl-c1">0</span>,),<span class="pl-c1">1</span>,:)<span class="pl-k">./</span>floquet<span class="pl-k">.</span>linearized<span class="pl-k">.</span><span class="pl-c1">QEideal</span>((<span class="pl-c1">0</span>,),<span class="pl-c1">2</span>,(<span class="pl-c1">0</span>,),<span class="pl-c1">1</span>,:),    
    ylim<span class="pl-k">=</span>(<span class="pl-c1">0.99</span>,<span class="pl-c1">1.001</span>),
    title<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Quantum efficiency<span class="pl-pds">"</span></span>,legend<span class="pl-k">=</span><span class="pl-c1">false</span>,
    ylabel<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>QE/QE_ideal<span class="pl-pds">"</span></span>,xlabel<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Signal Frequency (GHz)<span class="pl-pds">"</span></span>);

p3<span class="pl-k">=</span><span class="pl-c1">plot</span>(ws<span class="pl-k">/</span>(<span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">pi</span><span class="pl-k">*</span><span class="pl-c1">1e9</span>),
    <span class="pl-c1">10</span><span class="pl-k">*</span><span class="pl-c1">log10</span>.(<span class="pl-c1">abs2</span>.(floquet<span class="pl-k">.</span>linearized<span class="pl-k">.</span><span class="pl-c1">S</span>(:,<span class="pl-c1">2</span>,(<span class="pl-c1">0</span>,),<span class="pl-c1">1</span>,:)<span class="pl-k">'</span>)),
    ylim<span class="pl-k">=</span>(<span class="pl-k">-</span><span class="pl-c1">40</span>,<span class="pl-c1">30</span>),label<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>S21<span class="pl-pds">"</span></span>,
    xlabel<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Signal Frequency (GHz)<span class="pl-pds">"</span></span>,
    legend<span class="pl-k">=</span><span class="pl-c1">false</span>,
    title<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>All idlers<span class="pl-pds">"</span></span>,
    ylabel<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>dB<span class="pl-pds">"</span></span>)


p4<span class="pl-k">=</span><span class="pl-c1">plot</span>(ws<span class="pl-k">/</span>(<span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">pi</span><span class="pl-k">*</span><span class="pl-c1">1e9</span>),
    <span class="pl-c1">1</span> <span class="pl-k">.-</span> floquet<span class="pl-k">.</span>linearized<span class="pl-k">.</span><span class="pl-c1">CM</span>((<span class="pl-c1">0</span>,),<span class="pl-c1">2</span>,:),
    legend<span class="pl-k">=</span><span class="pl-c1">false</span>,title<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Commutation <span class="pl-cce">\n</span> relation error<span class="pl-pds">"</span></span>,
    ylabel<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Commutation <span class="pl-cce">\n</span> relation error<span class="pl-pds">"</span></span>,xlabel<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Signal Frequency (GHz)<span class="pl-pds">"</span></span>);

<span class="pl-c1">plot</span>(p1, p2, p3,p4,layout <span class="pl-k">=</span> (<span class="pl-c1">2</span>, <span class="pl-c1">2</span>))</pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="  2.079267 seconds (456.63 k allocations: 1.997 GiB, 0.48% gc time)"><pre class="notranslate"><code>  2.079267 seconds (456.63 k allocations: 1.997 GiB, 0.48% gc time)
</code></pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/6c268fc0e2bd27b106c7b24f64b91e64ad64cc10ee3f35f14e76e2cb57a06fe9/68747470733a2f2f7163652e6d69742e6564752f4a6f73657068736f6e43697263756974732e6a6c2f666c6f717565742e706e67"><img src="https://camo.githubusercontent.com/6c268fc0e2bd27b106c7b24f64b91e64ad64cc10ee3f35f14e76e2cb57a06fe9/68747470733a2f2f7163652e6d69742e6564752f4a6f73657068736f6e43697263756974732e6a6c2f666c6f717565742e706e67" alt="Floquet JTWPA simulation" data-canonical-src="https://qce.mit.edu/JosephsonCircuits.jl/floquet.png" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-floquet-jtwpa-with-dissipation" class="anchor" aria-hidden="true" href="#floquet-jtwpa-with-dissipation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Floquet JTWPA with dissipation</h2>
<p dir="auto">Dissipation due to capacitors with dielectric loss, parameterized by a loss tangent. Run the above code block to define the circuit then run the following:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="results = []
tandeltas = [1.0e-6,1.0e-3, 2.0e-3, 3.0e-3]
for tandelta in tandeltas
    circuitdefs = Dict(
        Rleft =&gt; 50,
        Rright =&gt; 50,
        Lj =&gt; IctoLj(1.75e-6),
        Cg =&gt; 76.6e-15/(1+im*tandelta),
        Cc =&gt; 40.0e-15/(1+im*tandelta),
        Cr =&gt; 1.533e-12/(1+im*tandelta),
        Lr =&gt; 2.47e-10,
        Cj =&gt; 40e-15,
    )  
    wp=(2*pi*7.9*1e9,)
    ws=2*pi*(1.0:0.1:14)*1e9
    Ip=1.1e-6*(1+125*tandelta)
    sources = [(mode=(1,),port=1,current=Ip)]
    Npumpharmonics = (20,)
    Nmodulationharmonics = (10,)
    @time floquet = hbsolve(ws, wp, sources, Nmodulationharmonics,
        Npumpharmonics, circuit, circuitdefs)
    push!(results,floquet)
end

p1 = plot(title=&quot;Gain (S21)&quot;)
for i = 1:length(results)
        plot!(ws/(2*pi*1e9),
            10*log10.(abs2.(results[i].linearized.S((0,),2,(0,),1,:))),
            ylim=(-60,30),label=&quot;tanδ=$(tandeltas[i])&quot;,
            legend=:bottomleft,
            xlabel=&quot;Signal Frequency (GHz)&quot;,ylabel=&quot;dB&quot;)
end

p2 = plot(title=&quot;Quantum Efficiency&quot;)
for i = 1:length(results)
        plot!(ws/(2*pi*1e9),
            results[i].linearized.QE((0,),2,(0,),1,:)./results[i].linearized.QEideal((0,),2,(0,),1,:),
            ylim=(0.6,1.05),legend=false,
            title=&quot;Quantum efficiency&quot;,
            ylabel=&quot;QE/QE_ideal&quot;,xlabel=&quot;Signal Frequency (GHz)&quot;)
end

p3 = plot(title=&quot;Reverse Gain (S12)&quot;)
for i = 1:length(results)
        plot!(ws/(2*pi*1e9),
            10*log10.(abs2.(results[i].linearized.S((0,),1,(0,),2,:))),
            ylim=(-10,1),legend=false,
            xlabel=&quot;Signal Frequency (GHz)&quot;,ylabel=&quot;dB&quot;)
end

p4 = plot(title=&quot;Commutation \n relation error&quot;)
for i = 1:length(results)
        plot!(ws/(2*pi*1e9),
            1 .- results[i].linearized.CM((0,),2,:),
            legend=false,
            ylabel=&quot;Commutation\n relation error&quot;,xlabel=&quot;Signal Frequency (GHz)&quot;)
end

plot(p1, p2, p3,p4,layout = (2, 2))"><pre>results <span class="pl-k">=</span> []
tandeltas <span class="pl-k">=</span> [<span class="pl-c1">1.0e-6</span>,<span class="pl-c1">1.0e-3</span>, <span class="pl-c1">2.0e-3</span>, <span class="pl-c1">3.0e-3</span>]
<span class="pl-k">for</span> tandelta <span class="pl-k">in</span> tandeltas
    circuitdefs <span class="pl-k">=</span> <span class="pl-c1">Dict</span>(
        Rleft <span class="pl-k">=&gt;</span> <span class="pl-c1">50</span>,
        Rright <span class="pl-k">=&gt;</span> <span class="pl-c1">50</span>,
        Lj <span class="pl-k">=&gt;</span> <span class="pl-c1">IctoLj</span>(<span class="pl-c1">1.75e-6</span>),
        Cg <span class="pl-k">=&gt;</span> <span class="pl-c1">76.6e-15</span><span class="pl-k">/</span>(<span class="pl-c1">1</span><span class="pl-k">+</span>im<span class="pl-k">*</span>tandelta),
        Cc <span class="pl-k">=&gt;</span> <span class="pl-c1">40.0e-15</span><span class="pl-k">/</span>(<span class="pl-c1">1</span><span class="pl-k">+</span>im<span class="pl-k">*</span>tandelta),
        Cr <span class="pl-k">=&gt;</span> <span class="pl-c1">1.533e-12</span><span class="pl-k">/</span>(<span class="pl-c1">1</span><span class="pl-k">+</span>im<span class="pl-k">*</span>tandelta),
        Lr <span class="pl-k">=&gt;</span> <span class="pl-c1">2.47e-10</span>,
        Cj <span class="pl-k">=&gt;</span> <span class="pl-c1">40e-15</span>,
    )  
    wp<span class="pl-k">=</span>(<span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">pi</span><span class="pl-k">*</span><span class="pl-c1">7.9</span><span class="pl-k">*</span><span class="pl-c1">1e9</span>,)
    ws<span class="pl-k">=</span><span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">pi</span><span class="pl-k">*</span>(<span class="pl-c1">1.0</span><span class="pl-k">:</span><span class="pl-c1">0.1</span><span class="pl-k">:</span><span class="pl-c1">14</span>)<span class="pl-k">*</span><span class="pl-c1">1e9</span>
    Ip<span class="pl-k">=</span><span class="pl-c1">1.1e-6</span><span class="pl-k">*</span>(<span class="pl-c1">1</span><span class="pl-k">+</span><span class="pl-c1">125</span><span class="pl-k">*</span>tandelta)
    sources <span class="pl-k">=</span> [(mode<span class="pl-k">=</span>(<span class="pl-c1">1</span>,),port<span class="pl-k">=</span><span class="pl-c1">1</span>,current<span class="pl-k">=</span>Ip)]
    Npumpharmonics <span class="pl-k">=</span> (<span class="pl-c1">20</span>,)
    Nmodulationharmonics <span class="pl-k">=</span> (<span class="pl-c1">10</span>,)
    <span class="pl-c1">@time</span> floquet <span class="pl-k">=</span> <span class="pl-c1">hbsolve</span>(ws, wp, sources, Nmodulationharmonics,
        Npumpharmonics, circuit, circuitdefs)
    <span class="pl-c1">push!</span>(results,floquet)
<span class="pl-k">end</span>

p1 <span class="pl-k">=</span> <span class="pl-c1">plot</span>(title<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Gain (S21)<span class="pl-pds">"</span></span>)
<span class="pl-k">for</span> i <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">length</span>(results)
        <span class="pl-c1">plot!</span>(ws<span class="pl-k">/</span>(<span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">pi</span><span class="pl-k">*</span><span class="pl-c1">1e9</span>),
            <span class="pl-c1">10</span><span class="pl-k">*</span><span class="pl-c1">log10</span>.(<span class="pl-c1">abs2</span>.(results[i]<span class="pl-k">.</span>linearized<span class="pl-k">.</span><span class="pl-c1">S</span>((<span class="pl-c1">0</span>,),<span class="pl-c1">2</span>,(<span class="pl-c1">0</span>,),<span class="pl-c1">1</span>,:))),
            ylim<span class="pl-k">=</span>(<span class="pl-k">-</span><span class="pl-c1">60</span>,<span class="pl-c1">30</span>),label<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>tanδ=<span class="pl-v">$(tandeltas[i])</span><span class="pl-pds">"</span></span>,
            legend<span class="pl-k">=</span><span class="pl-c1">:bottomleft</span>,
            xlabel<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Signal Frequency (GHz)<span class="pl-pds">"</span></span>,ylabel<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>dB<span class="pl-pds">"</span></span>)
<span class="pl-k">end</span>

p2 <span class="pl-k">=</span> <span class="pl-c1">plot</span>(title<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Quantum Efficiency<span class="pl-pds">"</span></span>)
<span class="pl-k">for</span> i <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">length</span>(results)
        <span class="pl-c1">plot!</span>(ws<span class="pl-k">/</span>(<span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">pi</span><span class="pl-k">*</span><span class="pl-c1">1e9</span>),
            results[i]<span class="pl-k">.</span>linearized<span class="pl-k">.</span><span class="pl-c1">QE</span>((<span class="pl-c1">0</span>,),<span class="pl-c1">2</span>,(<span class="pl-c1">0</span>,),<span class="pl-c1">1</span>,:)<span class="pl-k">./</span>results[i]<span class="pl-k">.</span>linearized<span class="pl-k">.</span><span class="pl-c1">QEideal</span>((<span class="pl-c1">0</span>,),<span class="pl-c1">2</span>,(<span class="pl-c1">0</span>,),<span class="pl-c1">1</span>,:),
            ylim<span class="pl-k">=</span>(<span class="pl-c1">0.6</span>,<span class="pl-c1">1.05</span>),legend<span class="pl-k">=</span><span class="pl-c1">false</span>,
            title<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Quantum efficiency<span class="pl-pds">"</span></span>,
            ylabel<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>QE/QE_ideal<span class="pl-pds">"</span></span>,xlabel<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Signal Frequency (GHz)<span class="pl-pds">"</span></span>)
<span class="pl-k">end</span>

p3 <span class="pl-k">=</span> <span class="pl-c1">plot</span>(title<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Reverse Gain (S12)<span class="pl-pds">"</span></span>)
<span class="pl-k">for</span> i <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">length</span>(results)
        <span class="pl-c1">plot!</span>(ws<span class="pl-k">/</span>(<span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">pi</span><span class="pl-k">*</span><span class="pl-c1">1e9</span>),
            <span class="pl-c1">10</span><span class="pl-k">*</span><span class="pl-c1">log10</span>.(<span class="pl-c1">abs2</span>.(results[i]<span class="pl-k">.</span>linearized<span class="pl-k">.</span><span class="pl-c1">S</span>((<span class="pl-c1">0</span>,),<span class="pl-c1">1</span>,(<span class="pl-c1">0</span>,),<span class="pl-c1">2</span>,:))),
            ylim<span class="pl-k">=</span>(<span class="pl-k">-</span><span class="pl-c1">10</span>,<span class="pl-c1">1</span>),legend<span class="pl-k">=</span><span class="pl-c1">false</span>,
            xlabel<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Signal Frequency (GHz)<span class="pl-pds">"</span></span>,ylabel<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>dB<span class="pl-pds">"</span></span>)
<span class="pl-k">end</span>

p4 <span class="pl-k">=</span> <span class="pl-c1">plot</span>(title<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Commutation <span class="pl-cce">\n</span> relation error<span class="pl-pds">"</span></span>)
<span class="pl-k">for</span> i <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">length</span>(results)
        <span class="pl-c1">plot!</span>(ws<span class="pl-k">/</span>(<span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">pi</span><span class="pl-k">*</span><span class="pl-c1">1e9</span>),
            <span class="pl-c1">1</span> <span class="pl-k">.-</span> results[i]<span class="pl-k">.</span>linearized<span class="pl-k">.</span><span class="pl-c1">CM</span>((<span class="pl-c1">0</span>,),<span class="pl-c1">2</span>,:),
            legend<span class="pl-k">=</span><span class="pl-c1">false</span>,
            ylabel<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Commutation<span class="pl-cce">\n</span> relation error<span class="pl-pds">"</span></span>,xlabel<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Signal Frequency (GHz)<span class="pl-pds">"</span></span>)
<span class="pl-k">end</span>

<span class="pl-c1">plot</span>(p1, p2, p3,p4,layout <span class="pl-k">=</span> (<span class="pl-c1">2</span>, <span class="pl-c1">2</span>))</pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="  3.815835 seconds (470.00 k allocations: 2.303 GiB, 0.22% gc time)
  3.800166 seconds (470.59 k allocations: 2.310 GiB, 0.29% gc time)
  3.824690 seconds (470.75 k allocations: 2.317 GiB, 0.19% gc time)
  3.838721 seconds (470.75 k allocations: 2.317 GiB, 0.18% gc time)"><pre class="notranslate"><code>  3.815835 seconds (470.00 k allocations: 2.303 GiB, 0.22% gc time)
  3.800166 seconds (470.59 k allocations: 2.310 GiB, 0.29% gc time)
  3.824690 seconds (470.75 k allocations: 2.317 GiB, 0.19% gc time)
  3.838721 seconds (470.75 k allocations: 2.317 GiB, 0.18% gc time)
</code></pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/f37ff43aa8e718ec18cf0352d451243831e0871958641ea1797c837a383758b1/68747470733a2f2f7163652e6d69742e6564752f4a6f73657068736f6e43697263756974732e6a6c2f666c6f717565746c6f7373792e706e67"><img src="https://camo.githubusercontent.com/f37ff43aa8e718ec18cf0352d451243831e0871958641ea1797c837a383758b1/68747470733a2f2f7163652e6d69742e6564752f4a6f73657068736f6e43697263756974732e6a6c2f666c6f717565746c6f7373792e706e67" alt="Floquet JTWPA simulation with loss" data-canonical-src="https://qce.mit.edu/JosephsonCircuits.jl/floquetlossy.png" style="max-width: 100%;"></a></p>
<h1 dir="auto"><a id="user-content-performance-tips" class="anchor" aria-hidden="true" href="#performance-tips"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Performance tips:</h1>
<p dir="auto">Simulations of the linearized system can be effectively parallelized, so we suggest starting Julia with the number of threads equal to the number of physical cores. See the <a href="https://docs.julialang.org/en/v1/manual/multi-threading" rel="nofollow">Julia documentation</a> for the procedure.</p>
<h1 dir="auto"><a id="user-content-references" class="anchor" aria-hidden="true" href="#references"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>References:</h1>
<ol dir="auto">
<li>Andrew J. Kerman "Efficient numerical simulation of complex Josephson quantum circuits" <a href="https://doi.org/10.48550/arXiv.2010.14929" rel="nofollow">arXiv:2010.14929 (2020)</a></li>
<li>Jiří Vlach and Kishore Singhal "Computer Methods for Circuit Analysis and Design" 2nd edition, <a href="https://link.springer.com/book/9780442011949" rel="nofollow">Springer New York, NY (1993)</a></li>
<li>Stephen A. Maas "Nonlinear Microwave and RF Circuits" 2nd edition, <a href="https://us.artechhouse.com/Nonlinear-Microwave-and-RF-Circuits-Second-Edition-P1097.aspx" rel="nofollow">Artech House (1997)</a></li>
<li>José Carlos Pedro, David E. Root, Jianjun Xu, and Luís Cótimos Nunes. "Nonlinear Circuit Simulation and Modeling: Fundamentals for Microwave Design" The Cambridge RF and Microwave Engineering Series, <a href="https://www.cambridge.org/core/books/nonlinear-circuit-simulation-and-modeling/1705F3B449B4313A2BE890599DAC0E38" rel="nofollow">Cambridge University Press (2018)</a></li>
<li>David E. Root, Jan Verspecht, Jason Horn, and Mihai Marcu. "X-Parameters: Characterization, Modeling, and Design of Nonlinear RF and Microwave Components" The Cambridge RF and microwave engineering series, <a href="https://www.cambridge.org/sb/academic/subjects/engineering/rf-and-microwave-engineering/x-parameters-characterization-modeling-and-design-nonlinear-rf-and-microwave-components" rel="nofollow">Cambridge University Press (2013)</a></li>
<li>Kaidong Peng, Rick Poore, Philip Krantz, David E. Root, and Kevin P. O'Brien "X-parameter based design and simulation of Josephson traveling-wave parametric amplifiers for quantum computing applications" <a href="http://arxiv.org/abs/2211.05328" rel="nofollow">IEEE International Conference on Quantum Computing &amp; Engineering (QCE22) (2022)</a></li>
</ol>
<h1 dir="auto"><a id="user-content-philosophy" class="anchor" aria-hidden="true" href="#philosophy"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Philosophy:</h1>
<p dir="auto">The motivation for developing this package is to simulate the gain and noise performance of ultra low noise amplifiers for quantum computing applications such as the <a href="https://www.science.org/doi/10.1126/science.aaa8525" rel="nofollow">Josephson traveling-wave parametric amplifier</a>, which have thousands of linear and nonlinear circuit elements.</p>
<p dir="auto">We prioritize speed (including compile time and time to first use), simplicity, and scalability.</p>
<h1 dir="auto"><a id="user-content-future-developments" class="anchor" aria-hidden="true" href="#future-developments"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Future developments:</h1>
<ul dir="auto">
<li>Design optimization.</li>
<li>More nonlinear components such as kinetic inductors.</li>
<li>Time domain simulations.</li>
</ul>
<h1 dir="auto"><a id="user-content-related-packages-and-software" class="anchor" aria-hidden="true" href="#related-packages-and-software"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Related packages and software:</h1>
<ul dir="auto">
<li><a href="https://github.com/JuliaComputing/Xyce.jl">Xyce.jl</a> provides a wrapper for <a href="https://xyce.sandia.gov/" rel="nofollow">Xyce</a>, the open source parallel circuit simulator from Sandia National Laboratories which can perform time domain and harmonic balance method simulations.</li>
<li><a href="https://github.com/JuliaComputing/Ngspice.jl">NgSpice.jl</a> and <a href="https://github.com/cstook/LTspice.jl">LTspice.jl</a> provide wrappers for <a href="http://ngspice.sourceforge.net/" rel="nofollow">NgSpice</a> and <a href="https://www.analog.com/en/design-center/design-tools-and-calculators/ltspice-simulator.html" rel="nofollow">LTspice</a>, respectively.</li>
<li><a href="https://github.com/SciML/ModelingToolkit.jl">ModelingToolkit.jl</a> supports time domain circuit simulations from <a href="https://mtk.sciml.ai/stable/tutorials/acausal_components" rel="nofollow">scratch</a> and using their <a href="https://docs.sciml.ai/ModelingToolkitStandardLibrary/stable/tutorials/rc_circuit/" rel="nofollow">standard library</a></li>
<li><a href="https://github.com/HSU-ANT/ACME.jl">ACME.jl</a> simulates electrical circuits in the time domain with an emphasis on audio effect circuits.</li>
<li><a href="https://cedar-eda.com" rel="nofollow">Cedar EDA</a> is a Julia-based commercial cloud service for circuit simulations.</li>
<li><a href="https://www.keysight.com/us/en/products/software/pathwave-design-software/pathwave-advanced-design-system.html" rel="nofollow">Keysight ADS</a>, <a href="https://www.awr.com/" rel="nofollow">Cadence AWR</a>, <a href="https://www.cadence.com/en_US/home/tools/custom-ic-analog-rf-design/circuit-simulation/spectre-rf-option.html" rel="nofollow">Cadence Spectre RF</a>, and <a href="http://qucs.sourceforge.net/" rel="nofollow">Qucs</a> are capable of time and frequency domain analysis of nonlinear circuits. <a href="http://wrcad.com/wrspice.html" rel="nofollow">WRSPICE</a> performs time domain simulations of Josephson junction containing circuits and frequency domain simulations of linear circuits.</li>
</ul>
<h1 dir="auto"><a id="user-content-funding" class="anchor" aria-hidden="true" href="#funding"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Funding</h1>
<p dir="auto">We gratefully acknowledge funding from the <a href="https://aws.amazon.com/blogs/quantum-computing/announcing-the-opening-of-the-aws-center-for-quantum-computing/" rel="nofollow">AWS Center for Quantum Computing</a> and the <a href="https://cqe.mit.edu/" rel="nofollow">MIT Center for Quantum Engineering (CQE)</a>.</p>
</article></div>