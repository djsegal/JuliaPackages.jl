<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-unsafepointersjl" class="anchor" aria-hidden="true" href="#unsafepointersjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>UnsafePointers.jl</h1>
<p dir="auto">Convenient (but unsafe) pointer accesses.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# In C you do this:
p-&gt;second_field[3] = 9

# In Julia you do this:
unsafe_store!(unsafe_load(unsafe_load(p) + fieldoffset(eltype(p), 2)) + 3*sizeof(fieldtype(eltype(p), 2)), 9)

# Now you can do this:
q = UnsafePtr(p)
q.second_field[][4] = 9"><pre><span class="pl-c"><span class="pl-c">#</span> In C you do this:</span>
p<span class="pl-k">-&gt;</span>second_field[<span class="pl-c1">3</span>] <span class="pl-k">=</span> <span class="pl-c1">9</span>

<span class="pl-c"><span class="pl-c">#</span> In Julia you do this:</span>
<span class="pl-c1">unsafe_store!</span>(<span class="pl-c1">unsafe_load</span>(<span class="pl-c1">unsafe_load</span>(p) <span class="pl-k">+</span> <span class="pl-c1">fieldoffset</span>(<span class="pl-c1">eltype</span>(p), <span class="pl-c1">2</span>)) <span class="pl-k">+</span> <span class="pl-c1">3</span><span class="pl-k">*</span><span class="pl-c1">sizeof</span>(<span class="pl-c1">fieldtype</span>(<span class="pl-c1">eltype</span>(p), <span class="pl-c1">2</span>)), <span class="pl-c1">9</span>)

<span class="pl-c"><span class="pl-c">#</span> Now you can do this:</span>
q <span class="pl-k">=</span> <span class="pl-c1">UnsafePtr</span>(p)
q<span class="pl-k">.</span>second_field[][<span class="pl-c1">4</span>] <span class="pl-k">=</span> <span class="pl-c1">9</span></pre></div>
<p dir="auto">This package exports one type, <code>UnsafePtr{T}</code>, which behaves similarly to a regular <code>Ptr{T}</code> but has some convenient (but unsafe) pointer access semantics.</p>
<p dir="auto">Useful for example for accessing or modifying data exposed by C interfaces through pointers.</p>
<h2 dir="auto"><a id="user-content-install" class="anchor" aria-hidden="true" href="#install"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Install</h2>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="pkg&gt; add UnsafePointers"><pre class="notranslate"><code>pkg&gt; add UnsafePointers
</code></pre></div>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="UnsafePtr{T}(r)"><pre><span class="pl-c1">UnsafePtr</span><span class="pl-c1">{T}</span>(r)</pre></div>
<p dir="auto">A pointer to the contents of <code>r</code> which may be a <code>Ptr</code>, <code>Ref</code>, <code>Array</code>, <code>String</code> or anything with a <code>pointer(r)</code> method.</p>
<p dir="auto"><code>T</code> specifies the element type and is optional.</p>
<p dir="auto">It has convenient (but unsafe) semantics:</p>
<ul dir="auto">
<li><code>p[]</code> dereferences the element, and can be assigned to.</li>
<li><code>p[i]</code> dereferences the <code>i</code>th element, assuming the pointer points to an array.</li>
<li><code>p.name</code> is an <code>UnsafePtr</code> to the <code>name</code> field of <code>p[]</code>. For tuples, <code>p._n</code> refers to the <code>n</code>th field.</li>
<li><code>p+i</code> is an <code>UnsafePtr</code> to the <code>i</code>th next element. <code>(p+i-1)[]</code> and <code>p[i]</code> are equivalent.</li>
<li><code>p-q</code> is the number of elements between <code>p</code> and <code>q</code>, so that <code>p === q+(p-q)</code>.</li>
<li>Iteration yields <code>p[1]</code>, <code>p[2]</code>, ... forever.</li>
<li><code>Array(p, dims...)</code> is an array view of contiguous data pointed to by <code>p</code> (equivalent to <code>unsafe_wrap(Array, pointer(p), dims)</code>).</li>
<li><code>p[idxs]</code>/<code>view(p, idxs)</code> is an array/view of the <code>i</code>th element for each <code>i âˆˆ idxs</code>.</li>
<li><code>String(p, [length])</code> converts <code>p</code> to a string (equivalent to <code>unsafe_string(pointer(p), length)</code>).</li>
</ul>
<p dir="auto">The first four operations have these C equivalents: <code>*p</code>, <code>p[i-1]</code>, <code>&amp;(p-&gt;name)</code> and <code>p+i</code>.</p>
<p dir="auto">If the result of dereferencing is pointer-like then an <code>UnsafePtr</code> is returned instead (see <code>doautowrap</code>). Use <code>p[!,i]</code> or <code>unsafe_load(p,i)</code> to get the original value.</p>
<h2 dir="auto"><a id="user-content-safety" class="anchor" aria-hidden="true" href="#safety"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Safety</h2>
<p dir="auto">It is the caller's responsibility to ensure that the pointer remains valid, e.g. by ensuring that <code>r</code> is not garbage collected.</p>
<p dir="auto">You will likely crash Julia if you assign to a non-bitstype value.</p>
<h2 dir="auto"><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example</h2>
<p dir="auto">Here we access and modify the individual fields of a (mutable) reference to a (immutable) named tuple.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="r = Ref((a=1, b=(2, 3)))
@show r[]            # (a = 1, b = (2, 3))
p = UnsafePtr(r)
p.a[] = 99
p.b._2[] *= 10
@show r[]            # (a = 99, b = (2, 30))
@show Array(p.a, 3)  # [99, 2, 30]"><pre>r <span class="pl-k">=</span> <span class="pl-c1">Ref</span>((a<span class="pl-k">=</span><span class="pl-c1">1</span>, b<span class="pl-k">=</span>(<span class="pl-c1">2</span>, <span class="pl-c1">3</span>)))
<span class="pl-c1">@show</span> r[]            <span class="pl-c"><span class="pl-c">#</span> (a = 1, b = (2, 3))</span>
p <span class="pl-k">=</span> <span class="pl-c1">UnsafePtr</span>(r)
p<span class="pl-k">.</span>a[] <span class="pl-k">=</span> <span class="pl-c1">99</span>
p<span class="pl-k">.</span>b<span class="pl-k">.</span>_2[] <span class="pl-k">*=</span> <span class="pl-c1">10</span>
<span class="pl-c1">@show</span> r[]            <span class="pl-c"><span class="pl-c">#</span> (a = 99, b = (2, 30))</span>
<span class="pl-c1">@show</span> <span class="pl-c1">Array</span>(p<span class="pl-k">.</span>a, <span class="pl-c1">3</span>)  <span class="pl-c"><span class="pl-c">#</span> [99, 2, 30]</span></pre></div>
</article></div>