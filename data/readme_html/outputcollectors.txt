<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h2 dir="auto"><a id="user-content-outputcollectorsjl" class="anchor" aria-hidden="true" href="#outputcollectorsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>OutputCollectors.jl</h2>
<p dir="auto"><a href="https://github.com/JuliaPackaging/OutputCollectors.jl/actions/workflows/ci.yml"><img src="https://github.com/JuliaPackaging/OutputCollectors.jl/actions/workflows/ci.yml/badge.svg" alt="CI" style="max-width: 100%;"></a></p>
<p dir="auto"><a href="https://juliapackaging.github.io/OutputCollectors.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://juliapackaging.github.io/OutputCollectors.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/56f8252ba8e9d3f0b810769543f77823d2fe031ce560d4c2d69fb1fcad800383/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6c61746573742d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-latest-blue.svg" style="max-width: 100%;"></a></p>
<p dir="auto"><a href="https://coveralls.io/github/JuliaPackaging/OutputCollectors.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/d7feedbfcc7a4fb8e54d68199d035d172bb2c491cfab39eeb71b6434ac85804b/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f4a756c69615061636b6167696e672f4f7574707574436f6c6c6563746f72732e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/JuliaPackaging/OutputCollectors.jl/badge.svg?branch=master" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/JuliaPackaging/OutputCollectors.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/2578314769bb81d4921bb01db1f5d6d6fe67278db45213f4c5d7cec1d6233b5e/68747470733a2f2f636f6465636f762e696f2f67682f4a756c69615061636b6167696e672f4f7574707574436f6c6c6563746f72732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/JuliaPackaging/OutputCollectors.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">This package lets you capture subprocess <code>stdout</code> and <code>stderr</code> streams
independently, resynthesizing and colorizing the streams appropriately.</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto"><code>OutputCollectors.jl</code> can be installed with <a href="https://julialang.github.io/Pkg.jl/v1/" rel="nofollow">Julia built-in package
manager</a>.  In a Julia session, after
entering the package manager mode with <code>]</code>, run the command</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="add OutputCollectors.jl"><pre class="notranslate"><code>add OutputCollectors.jl
</code></pre></div>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using OutputCollectors

julia&gt; script = &quot;&quot;&quot;
       #!/bin/sh
       echo 1
       sleep 1
       echo 2 &gt;&amp;2
       sleep 1
       echo 3
       sleep 1
       echo 4
       &quot;&quot;&quot;
&quot;#!/bin/sh\necho 1\nsleep 1\necho 2 &gt;&amp;2\nsleep 1\necho 3\nsleep 1\necho 4\n&quot;

julia&gt; oc = OutputCollector(`sh -c $script`; verbose = true);

julia&gt; [22:42:30] 1
[22:42:31] 2
[22:42:32] 3
[22:42:33] 4
julia&gt;

julia&gt; merge(oc)
&quot;1\n2\n3\n4\n&quot;

julia&gt; merge(oc; colored = true)
&quot;1\n\e[31m2\n\e[39m3\n4\n&quot;

julia&gt; tail(oc; len = 2)
&quot;3\n4\n&quot;

julia&gt; collect_stdout(oc)
&quot;1\n3\n4\n&quot;

julia&gt; collect_stderr(oc)
&quot;2\n&quot;"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> OutputCollectors

julia<span class="pl-k">&gt;</span> script <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"""</span></span>
<span class="pl-s">       #!/bin/sh</span>
<span class="pl-s">       echo 1</span>
<span class="pl-s">       sleep 1</span>
<span class="pl-s">       echo 2 &gt;&amp;2</span>
<span class="pl-s">       sleep 1</span>
<span class="pl-s">       echo 3</span>
<span class="pl-s">       sleep 1</span>
<span class="pl-s">       echo 4</span>
<span class="pl-s">       <span class="pl-pds">"""</span></span>
<span class="pl-s"><span class="pl-pds">"</span>#!/bin/sh<span class="pl-cce">\n</span>echo 1<span class="pl-cce">\n</span>sleep 1<span class="pl-cce">\n</span>echo 2 &gt;&amp;2<span class="pl-cce">\n</span>sleep 1<span class="pl-cce">\n</span>echo 3<span class="pl-cce">\n</span>sleep 1<span class="pl-cce">\n</span>echo 4<span class="pl-cce">\n</span><span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> oc <span class="pl-k">=</span> <span class="pl-c1">OutputCollector</span>(<span class="pl-s"><span class="pl-pds">`</span>sh -c $script<span class="pl-pds">`</span></span>; verbose <span class="pl-k">=</span> <span class="pl-c1">true</span>);

julia<span class="pl-k">&gt;</span> [<span class="pl-c1">22</span><span class="pl-k">:</span><span class="pl-c1">42</span><span class="pl-k">:</span><span class="pl-c1">30</span>] <span class="pl-c1">1</span>
[<span class="pl-c1">22</span><span class="pl-k">:</span><span class="pl-c1">42</span><span class="pl-k">:</span><span class="pl-c1">31</span>] <span class="pl-c1">2</span>
[<span class="pl-c1">22</span><span class="pl-k">:</span><span class="pl-c1">42</span><span class="pl-k">:</span><span class="pl-c1">32</span>] <span class="pl-c1">3</span>
[<span class="pl-c1">22</span><span class="pl-k">:</span><span class="pl-c1">42</span><span class="pl-k">:</span><span class="pl-c1">33</span>] <span class="pl-c1">4</span>
julia<span class="pl-k">&gt;</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">merge</span>(oc)
<span class="pl-s"><span class="pl-pds">"</span>1<span class="pl-cce">\n</span>2<span class="pl-cce">\n</span>3<span class="pl-cce">\n</span>4<span class="pl-cce">\n</span><span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">merge</span>(oc; colored <span class="pl-k">=</span> <span class="pl-c1">true</span>)
<span class="pl-s"><span class="pl-pds">"</span>1<span class="pl-cce">\n\e</span>[31m2<span class="pl-cce">\n\e</span>[39m3<span class="pl-cce">\n</span>4<span class="pl-cce">\n</span><span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">tail</span>(oc; len <span class="pl-k">=</span> <span class="pl-c1">2</span>)
<span class="pl-s"><span class="pl-pds">"</span>3<span class="pl-cce">\n</span>4<span class="pl-cce">\n</span><span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">collect_stdout</span>(oc)
<span class="pl-s"><span class="pl-pds">"</span>1<span class="pl-cce">\n</span>3<span class="pl-cce">\n</span>4<span class="pl-cce">\n</span><span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">collect_stderr</span>(oc)
<span class="pl-s"><span class="pl-pds">"</span>2<span class="pl-cce">\n</span><span class="pl-pds">"</span></span></pre></div>
</article></div>