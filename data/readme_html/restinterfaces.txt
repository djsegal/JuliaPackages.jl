<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-restinterfacesjl" class="anchor" aria-hidden="true" href="#restinterfacesjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>RestInterfaces.jl</h1>
<p dir="auto"><a href="https://www.repostatus.org/#active" rel="nofollow"><img src="https://camo.githubusercontent.com/2261082c77808ea734741b12e535d02d23c4101f6b8dfec807f4ddc5ef2eeec0/68747470733a2f2f7777772e7265706f7374617475732e6f72672f6261646765732f6c61746573742f6163746976652e737667" alt="Project Status: Active – The project has reached a stable, usable state and is being actively developed." data-canonical-src="https://www.repostatus.org/badges/latest/active.svg" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-overview" class="anchor" aria-hidden="true" href="#overview"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Overview</h2>
<p dir="auto">This is a lightweight Julia library for implementing basic REST APIs. It was created to provide a means of programming these APIs using interfaces. It sits on-top of the venerable <a href="https://github.com/JuliaWeb/HTTP.jl">HTTP.jl</a>.</p>
<h2 dir="auto"><a id="user-content-an-example" class="anchor" aria-hidden="true" href="#an-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>An Example</h2>
<p dir="auto">The following is an example of a small Hello, World! server.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using HTTP
# HttpError-themed exceptions can be found here; these acheive a special synergy
# with the error-handling middleware we're using below
using RestInterfaces.HttpErrors: unprocessable_entity
# As one might have guessed, abstractions over HttpMethods
using RestInterfaces.HttpMethods: Get, Post
# Several pre-made middleware functions can be found here
# This one converts HttpErrors into Http.Responses
using RestInterfaces.Middleware: handle_errors
# Composable routers with minimal pattern-matching facilities
using RestInterfaces.Middleware.Routers: Router, route
# Resource abstractions
using RestInterfaces.Resources
# THE Resource abstraction
using RestInterfaces.Resources: Resource
# Utilities for extracting information from HTTP.Requests
using RestInterfaces.Utils: json_payload, query_parameters

# Mutable state-- a fake backend
name_state = &quot;World&quot;

## `Hello` resource

# Implement the `Resource` interface by subtyping `Resources.Resource` and extending
# `deserialize`, `process`, and `serialize` for an HttpMethod and the
# specialized resource type
struct Hello &lt;: Resource end

# Post

Resources.deserialize(::Post, ::Hello, req) = json_payload(req) |&gt; x -&gt; x[:name]

function Resources.process(::Post, ::Hello, name::String)
  global name_state
  name_state = name
  return nothing
end

Resources.serialize(::Post, ::Hello, ::Nothing) = HTTP.Response(201);

# Get

function Resources.deserialize(::Get, ::Hello, req)
  global name_state
  return query_parameters(req) |&gt; x -&gt; get(x, &quot;name&quot;, name_state)
end

function Resources.process(::Get, ::Hello, name::String)
  if name === &quot;Tokyo&quot;
    unprocessable_entity(&quot;Cannot greet Tokyo; ignorant of Japanese\n&quot;)
  end
  if name === &quot;Tbilisi&quot;
    return &quot;გამარჯობა, თბილისი!&quot;
  end
  return &quot;Hello, $(name)!\n&quot;
end

Resources.serialize(::Get, ::Hello, greeting::String) = HTTP.Response(200, greeting)

## Server

# Extend this method so that the router can match requests to this resource
Resources.path(::Hello) = &quot;/hello&quot;

# Register routes to a router
router = Router(
  &quot;&quot;,
  [
    Hello() =&gt; Post(), 
    Hello() =&gt; Get(),
  ]
)

# Stack middleware and serve on localhost:8081
route(router) |&gt; handle_errors |&gt; HTTP.serve"><pre><span class="pl-k">using</span> HTTP
<span class="pl-c"><span class="pl-c">#</span> HttpError-themed exceptions can be found here; these acheive a special synergy</span>
<span class="pl-c"><span class="pl-c">#</span> with the error-handling middleware we're using below</span>
<span class="pl-k">using</span> RestInterfaces<span class="pl-k">.</span>HttpErrors<span class="pl-k">:</span> unprocessable_entity
<span class="pl-c"><span class="pl-c">#</span> As one might have guessed, abstractions over HttpMethods</span>
<span class="pl-k">using</span> RestInterfaces<span class="pl-k">.</span>HttpMethods<span class="pl-k">:</span> Get, Post
<span class="pl-c"><span class="pl-c">#</span> Several pre-made middleware functions can be found here</span>
<span class="pl-c"><span class="pl-c">#</span> This one converts HttpErrors into Http.Responses</span>
<span class="pl-k">using</span> RestInterfaces<span class="pl-k">.</span>Middleware<span class="pl-k">:</span> handle_errors
<span class="pl-c"><span class="pl-c">#</span> Composable routers with minimal pattern-matching facilities</span>
<span class="pl-k">using</span> RestInterfaces<span class="pl-k">.</span>Middleware<span class="pl-k">.</span>Routers<span class="pl-k">:</span> Router, route
<span class="pl-c"><span class="pl-c">#</span> Resource abstractions</span>
<span class="pl-k">using</span> RestInterfaces<span class="pl-k">.</span>Resources
<span class="pl-c"><span class="pl-c">#</span> THE Resource abstraction</span>
<span class="pl-k">using</span> RestInterfaces<span class="pl-k">.</span>Resources<span class="pl-k">:</span> Resource
<span class="pl-c"><span class="pl-c">#</span> Utilities for extracting information from HTTP.Requests</span>
<span class="pl-k">using</span> RestInterfaces<span class="pl-k">.</span>Utils<span class="pl-k">:</span> json_payload, query_parameters

<span class="pl-c"><span class="pl-c">#</span> Mutable state-- a fake backend</span>
name_state <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>World<span class="pl-pds">"</span></span>

<span class="pl-c"><span class="pl-c">#</span># `Hello` resource</span>

<span class="pl-c"><span class="pl-c">#</span> Implement the `Resource` interface by subtyping `Resources.Resource` and extending</span>
<span class="pl-c"><span class="pl-c">#</span> `deserialize`, `process`, and `serialize` for an HttpMethod and the</span>
<span class="pl-c"><span class="pl-c">#</span> specialized resource type</span>
<span class="pl-k">struct</span> Hello <span class="pl-k">&lt;:</span> <span class="pl-c1">Resource</span> <span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> Post</span>

Resources<span class="pl-k">.</span><span class="pl-en">deserialize</span>(<span class="pl-k">::</span><span class="pl-c1">Post</span>, <span class="pl-k">::</span><span class="pl-c1">Hello</span>, req) <span class="pl-k">=</span> <span class="pl-c1">json_payload</span>(req) <span class="pl-k">|&gt;</span> x <span class="pl-k">-&gt;</span> x[<span class="pl-c1">:name</span>]

<span class="pl-k">function</span> Resources<span class="pl-k">.</span><span class="pl-en">process</span>(<span class="pl-k">::</span><span class="pl-c1">Post</span>, <span class="pl-k">::</span><span class="pl-c1">Hello</span>, name<span class="pl-k">::</span><span class="pl-c1">String</span>)
  <span class="pl-k">global</span> name_state
  name_state <span class="pl-k">=</span> name
  <span class="pl-k">return</span> <span class="pl-c1">nothing</span>
<span class="pl-k">end</span>

Resources<span class="pl-k">.</span><span class="pl-en">serialize</span>(<span class="pl-k">::</span><span class="pl-c1">Post</span>, <span class="pl-k">::</span><span class="pl-c1">Hello</span>, <span class="pl-k">::</span><span class="pl-c1">Nothing</span>) <span class="pl-k">=</span> HTTP<span class="pl-k">.</span><span class="pl-c1">Response</span>(<span class="pl-c1">201</span>);

<span class="pl-c"><span class="pl-c">#</span> Get</span>

<span class="pl-k">function</span> Resources<span class="pl-k">.</span><span class="pl-en">deserialize</span>(<span class="pl-k">::</span><span class="pl-c1">Get</span>, <span class="pl-k">::</span><span class="pl-c1">Hello</span>, req)
  <span class="pl-k">global</span> name_state
  <span class="pl-k">return</span> <span class="pl-c1">query_parameters</span>(req) <span class="pl-k">|&gt;</span> x <span class="pl-k">-&gt;</span> <span class="pl-c1">get</span>(x, <span class="pl-s"><span class="pl-pds">"</span>name<span class="pl-pds">"</span></span>, name_state)
<span class="pl-k">end</span>

<span class="pl-k">function</span> Resources<span class="pl-k">.</span><span class="pl-en">process</span>(<span class="pl-k">::</span><span class="pl-c1">Get</span>, <span class="pl-k">::</span><span class="pl-c1">Hello</span>, name<span class="pl-k">::</span><span class="pl-c1">String</span>)
  <span class="pl-k">if</span> name <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">"</span>Tokyo<span class="pl-pds">"</span></span>
    <span class="pl-c1">unprocessable_entity</span>(<span class="pl-s"><span class="pl-pds">"</span>Cannot greet Tokyo; ignorant of Japanese<span class="pl-cce">\n</span><span class="pl-pds">"</span></span>)
  <span class="pl-k">end</span>
  <span class="pl-k">if</span> name <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">"</span>Tbilisi<span class="pl-pds">"</span></span>
    <span class="pl-k">return</span> <span class="pl-s"><span class="pl-pds">"</span>გამარჯობა, თბილისი!<span class="pl-pds">"</span></span>
  <span class="pl-k">end</span>
  <span class="pl-k">return</span> <span class="pl-s"><span class="pl-pds">"</span>Hello, <span class="pl-v">$(name)</span>!<span class="pl-cce">\n</span><span class="pl-pds">"</span></span>
<span class="pl-k">end</span>

Resources<span class="pl-k">.</span><span class="pl-en">serialize</span>(<span class="pl-k">::</span><span class="pl-c1">Get</span>, <span class="pl-k">::</span><span class="pl-c1">Hello</span>, greeting<span class="pl-k">::</span><span class="pl-c1">String</span>) <span class="pl-k">=</span> HTTP<span class="pl-k">.</span><span class="pl-c1">Response</span>(<span class="pl-c1">200</span>, greeting)

<span class="pl-c"><span class="pl-c">#</span># Server</span>

<span class="pl-c"><span class="pl-c">#</span> Extend this method so that the router can match requests to this resource</span>
Resources<span class="pl-k">.</span><span class="pl-en">path</span>(<span class="pl-k">::</span><span class="pl-c1">Hello</span>) <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>/hello<span class="pl-pds">"</span></span>

<span class="pl-c"><span class="pl-c">#</span> Register routes to a router</span>
router <span class="pl-k">=</span> <span class="pl-c1">Router</span>(
  <span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>,
  [
    <span class="pl-c1">Hello</span>() <span class="pl-k">=&gt;</span> <span class="pl-c1">Post</span>(), 
    <span class="pl-c1">Hello</span>() <span class="pl-k">=&gt;</span> <span class="pl-c1">Get</span>(),
  ]
)

<span class="pl-c"><span class="pl-c">#</span> Stack middleware and serve on localhost:8081</span>
<span class="pl-c1">route</span>(router) <span class="pl-k">|&gt;</span> handle_errors <span class="pl-k">|&gt;</span> HTTP<span class="pl-k">.</span>serve</pre></div>
<p dir="auto">A client might then see something like...</p>
<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ curl -i -X GET &quot;localhost:8081/hello&quot;
HTTP/1.1 200 OK
Transfer-Encoding: chunked

Hello, World!
$ curl -i -X POST --data '{&quot;name&quot;:&quot;Boston&quot;}' &quot;localhost:8081/hello&quot;
HTTP/1.1 201 Created
Transfer-Encoding: chunked

$ curl &quot;localhost:8081/hello&quot;
Hello, Boston!
$ curl &quot;localhost:8081/hello?name=Lagos&quot;
Hello, Lagos!
$ curl &quot;localhost:8081/hello?name=Tbilisi&quot;
გამარჯობა, თბილისი!
$ curl -i &quot;localhost:8081/hello?name=Tokyo&quot;
HTTP/1.1 422 Unprocessable Entity
Transfer-Encoding: chunked

422 Unprocessable Entity - Cannot greet Tokyo; ignorant of Japanese
$ curl -i -X DELETE &quot;localhost:8081/hello&quot;
HTTP/1.1 405 Method Not Allowed
Transfer-Encoding: chunked

405 Method Not Allowed - DELETE not allowed for path"><pre>$ curl -i -X GET <span class="pl-s"><span class="pl-pds">"</span>localhost:8081/hello<span class="pl-pds">"</span></span>
HTTP/1.1 200 OK
Transfer-Encoding: chunked

Hello, World<span class="pl-k">!</span>
$ curl -i -X POST --data <span class="pl-s"><span class="pl-pds">'</span>{"name":"Boston"}<span class="pl-pds">'</span></span> <span class="pl-s"><span class="pl-pds">"</span>localhost:8081/hello<span class="pl-pds">"</span></span>
HTTP/1.1 201 Created
Transfer-Encoding: chunked

$ curl <span class="pl-s"><span class="pl-pds">"</span>localhost:8081/hello<span class="pl-pds">"</span></span>
Hello, Boston<span class="pl-k">!</span>
$ curl <span class="pl-s"><span class="pl-pds">"</span>localhost:8081/hello?name=Lagos<span class="pl-pds">"</span></span>
Hello, Lagos<span class="pl-k">!</span>
$ curl <span class="pl-s"><span class="pl-pds">"</span>localhost:8081/hello?name=Tbilisi<span class="pl-pds">"</span></span>
გამარჯობა, თბილისი<span class="pl-k">!</span>
$ curl -i <span class="pl-s"><span class="pl-pds">"</span>localhost:8081/hello?name=Tokyo<span class="pl-pds">"</span></span>
HTTP/1.1 422 Unprocessable Entity
Transfer-Encoding: chunked

422 Unprocessable Entity - Cannot greet Tokyo<span class="pl-k">;</span> ignorant of Japanese
$ curl -i -X DELETE <span class="pl-s"><span class="pl-pds">"</span>localhost:8081/hello<span class="pl-pds">"</span></span>
HTTP/1.1 405 Method Not Allowed
Transfer-Encoding: chunked

405 Method Not Allowed - DELETE not allowed <span class="pl-k">for</span> path</pre></div>
<h2 dir="auto"><a id="user-content-alternatives" class="anchor" aria-hidden="true" href="#alternatives"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Alternatives</h2>
<ul dir="auto">
<li><a href="https://github.com/JuliaWeb/Mux.jl">Mux.jl</a> is a lightweight layer on top of HTTP.jl that can be used to accomplish the same things that RestInterfaces.jl can accomplish. It is more general and more mature than RestInterfaces.jl is, but I am personally not a fan of the callback-style API.</li>
</ul>
</article></div>