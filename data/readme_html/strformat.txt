<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-strformat" class="anchor" aria-hidden="true" href="#strformat"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>StrFormat</h1>
<p dir="auto"><a href="https://github.com/JuliaString/StrFormat.jl.git"><img src="https://camo.githubusercontent.com/449a681635dc7d9c4cb177c01d0382ce811e71537e6a503baf2af4ace64e57ac/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f72656c656173652f4a756c6961537472696e672f537472466f726d61742e6a6c2e737667" alt="" data-canonical-src="https://img.shields.io/github/release/JuliaString/StrFormat.jl.svg" style="max-width: 100%;"></a> <a href="https://github.com/JuliaString/StrFormat.jl.git"><img src="https://camo.githubusercontent.com/741101983ddd6fc5a67cbb934206e8565dad56967fc2582ab6c15e13799cc6e8/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f72656c656173652d646174652f4a756c6961537472696e672f537472466f726d61742e6a6c2e737667" alt="" data-canonical-src="https://img.shields.io/github/release-date/JuliaString/StrFormat.jl.svg" style="max-width: 100%;"></a> <a href="LICENSE.md"><img src="https://camo.githubusercontent.com/bbf49a2eb96e6f718803f2493bd7aa3baae61abb09b7f8fc185a94e08c504dc6/687474703a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d627269676874677265656e2e7376673f7374796c653d666c6174" alt="" data-canonical-src="http://img.shields.io/badge/license-MIT-brightgreen.svg?style=flat" style="max-width: 100%;"></a> <a href="https://github.com/JuliaString/StrFormat.jl/issues"><img src="https://camo.githubusercontent.com/f5054ffcd4245c10d3ec85ef059e07aacf787b560f83ad4aec2236364437d097/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f6e747269627574696f6e732d77656c636f6d652d627269676874677265656e2e7376673f7374796c653d666c6174" alt="contributions welcome" data-canonical-src="https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat" style="max-width: 100%;"></a></p>
<table>
<thead>
<tr>
<th align="center"><strong>Julia Version</strong></th>
<th align="center"><strong>Unit Tests</strong></th>
<th align="center"><strong>Coverage</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><a href="https://github.com/JuliaLang/Julia"><img src="https://camo.githubusercontent.com/514feca078cec1d0f876174356358ac616bed330b2a880fa65daca3148ead714/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f72656c656173652f4a756c69614c616e672f6a756c69612e737667" alt="" data-canonical-src="https://img.shields.io/github/release/JuliaLang/julia.svg" style="max-width: 100%;"></a></td>
<td align="center"><a href="https://travis-ci.org/JuliaString/StrFormat.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/86e66a6ab5440a4644a50d6fb4622f4c245f312f2ee4a8c8ff8fc69172c8af69/68747470733a2f2f7472617669732d63692e6f72672f4a756c6961537472696e672f537472466f726d61742e6a6c2e737667" alt="" data-canonical-src="https://travis-ci.org/JuliaString/StrFormat.jl.svg" style="max-width: 100%;"></a></td>
<td align="center"><a href="https://codecov.io/gh/JuliaString/StrFormat.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/5505788ae0a1aec928eba884721127e001babf406d80f545a74ea392a7c692a9/68747470733a2f2f636f6465636f762e696f2f67682f4a756c6961537472696e672f537472466f726d61742e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="" data-canonical-src="https://codecov.io/gh/JuliaString/StrFormat.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></td>
</tr>
<tr>
<td align="center">Julia Latest</td>
<td align="center"><a href="https://travis-ci.org/JuliaString/StrFormat.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/9ed6d21e42197cef3aa899094f6d8fed047670fa5f093f7c8017eefce4f658b9/68747470733a2f2f7472617669732d63692e6f72672f4a756c6961537472696e672f537472466f726d61742e6a6c2e7376673f6272616e63683d6d6173746572" alt="" data-canonical-src="https://travis-ci.org/JuliaString/StrFormat.jl.svg?branch=master" style="max-width: 100%;"></a></td>
<td align="center"><a href="https://codecov.io/gh/JuliaString/StrFormat.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/5505788ae0a1aec928eba884721127e001babf406d80f545a74ea392a7c692a9/68747470733a2f2f636f6465636f762e696f2f67682f4a756c6961537472696e672f537472466f726d61742e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="" data-canonical-src="https://codecov.io/gh/JuliaString/StrFormat.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></td>
</tr>
</tbody>
</table>
<p dir="auto">The following extra format sequences (see <a href="https://github.com/JuliaString/StrLiterals.jl">StrLiterals</a> for the full specification) are added:</p>
<ul dir="auto">
<li>
<p dir="auto"><code>\%&lt;ccc&gt;&lt;formatcode&gt;(arguments)</code> is interpolated as a call to <code>cfmt("&lt;cccc&gt;&lt;formatcode&gt;",arguments)</code>, where <code>&lt;ccc&gt;&lt;formatcode&gt;</code> is a C-style format string.</p>
</li>
<li>
<p dir="auto"><code>\%(arguments)</code> is interpolated as a call to <code>fmt(arguments)</code>.
This is especially useful when defaults have been set for the type of the first argument.</p>
</li>
<li>
<p dir="auto"><code>fmt_default!{T}(::Type{T}, syms::Symbol...; kwargs...)</code> sets the defaults for a particular type.</p>
</li>
<li>
<p dir="auto"><code>fmt_default!(syms::Symbol...; kwargs...)</code> sets the defaults for all types.</p>
</li>
</ul>
<p dir="auto">Symbols that can currently be used are: <code>:ljust</code> or <code>:left</code>, <code>:rjust</code> or <code>:right</code>, <code>:commas</code>, <code>:zpad</code> or <code>:zeropad</code>, and <code>:ipre</code> or <code>:prefix</code>.</p>
<ul dir="auto">
<li><code>reset!{T}(::Type{T})</code> resets the defaults for a particular type.</li>
<li><code>defaultSpec(x)</code> will return the defaults for the type of x, and</li>
<li><code>defaultSpec{T}(::Type{T})</code> will return the defaults for the given type.</li>
</ul>
<p dir="auto">There is currently support for Python style formatting, although that is a work-in-progress,
and I am intending to improve the syntax to make it as close as possible to Python's 3.6 format strings.
Currently, the syntax is <code>\{&lt;formatstring&gt;}(expression)</code>, however I plan on changing it shortly to <code>\{expression}</code> (equivalent to <code>pyfmt("", expression)</code>, and <code>\{expression;formatstring}</code> (equivalent to <code>pyfmt("formatstring", expression)</code>.</p>
</article></div>