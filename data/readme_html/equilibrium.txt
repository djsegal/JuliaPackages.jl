<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-equilibriumjl" class="anchor" aria-hidden="true" href="#equilibriumjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Equilibrium.jl</h1>
<p>Equilibrium.jl provides tools for working with solutions of the Grad-Shafranov Equation.</p>
<h2><a id="user-content-abstractequilibrium-api" class="anchor" aria-hidden="true" href="#abstractequilibrium-api"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>AbstractEquilibrium API</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Equilibrium
typeof(S) &lt;: AbstractEquilibrium

psi = S(r, z) # Poloidal flux at r,z
gradpsi = psi_gradient(S, r, z)

B = Bfield(S, r, z)
Bp = poloidal_Bfield(S, r, z)

J = Jfield(S, r, z)
Jp = poloidal_Jfield(S, r, z)

F = poloidal_current(S, psi)
Fprime = poloidal_current_gradient(S, psi)

p = pressure(S, psi)
pprime = pressure_gradient(S, psi)

V = electric_potential(S, psi)
gradV = electric_potential_gradient(S, psi)

q = safety_factor(S, psi)

maxis = magnetic_axis(S)

btip = B0Ip_sign(S)

rlims, zlims = limits(S)

psi_lims = psi_limits(S)

cc = cocos(S) # Return COCOS structure

fs = flux_surface(S, psi) # returns a boundary object

"><pre><span class="pl-k">using</span> Equilibrium
<span class="pl-c1">typeof</span>(S) <span class="pl-k">&lt;:</span> <span class="pl-c1">AbstractEquilibrium</span>

psi <span class="pl-k">=</span> <span class="pl-c1">S</span>(r, z) <span class="pl-c"><span class="pl-c">#</span> Poloidal flux at r,z</span>
gradpsi <span class="pl-k">=</span> <span class="pl-c1">psi_gradient</span>(S, r, z)

B <span class="pl-k">=</span> <span class="pl-c1">Bfield</span>(S, r, z)
Bp <span class="pl-k">=</span> <span class="pl-c1">poloidal_Bfield</span>(S, r, z)

J <span class="pl-k">=</span> <span class="pl-c1">Jfield</span>(S, r, z)
Jp <span class="pl-k">=</span> <span class="pl-c1">poloidal_Jfield</span>(S, r, z)

F <span class="pl-k">=</span> <span class="pl-c1">poloidal_current</span>(S, psi)
Fprime <span class="pl-k">=</span> <span class="pl-c1">poloidal_current_gradient</span>(S, psi)

p <span class="pl-k">=</span> <span class="pl-c1">pressure</span>(S, psi)
pprime <span class="pl-k">=</span> <span class="pl-c1">pressure_gradient</span>(S, psi)

V <span class="pl-k">=</span> <span class="pl-c1">electric_potential</span>(S, psi)
gradV <span class="pl-k">=</span> <span class="pl-c1">electric_potential_gradient</span>(S, psi)

q <span class="pl-k">=</span> <span class="pl-c1">safety_factor</span>(S, psi)

maxis <span class="pl-k">=</span> <span class="pl-c1">magnetic_axis</span>(S)

btip <span class="pl-k">=</span> <span class="pl-c1">B0Ip_sign</span>(S)

rlims, zlims <span class="pl-k">=</span> <span class="pl-c1">limits</span>(S)

psi_lims <span class="pl-k">=</span> <span class="pl-c1">psi_limits</span>(S)

cc <span class="pl-k">=</span> <span class="pl-c1">cocos</span>(S) <span class="pl-c"><span class="pl-c">#</span> Return COCOS structure</span>

fs <span class="pl-k">=</span> <span class="pl-c1">flux_surface</span>(S, psi) <span class="pl-c"><span class="pl-c">#</span> returns a boundary object</span>
</pre></div>
<h2><a id="user-content-solovev-equilibrium" class="anchor" aria-hidden="true" href="#solovev-equilibrium"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Solov'ev Equilibrium</h2>
<p>Solov'ev Equilibrium are analytic solutions to the Grad-Shafranov equation where the p' and FF' are constant.
The resulting Grad-Shafranov equation takes the form <code>Δ⋆ψ = α + (1-α)x²</code> where <code>α</code> is some constant.
The boundary conditions are found using a plasma shape parameterization.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="
# ITER parameters
δ = 0.33        # Triangularity
ϵ = 0.32        # Inverse aspect ratio a/R0
κ = 1.7         # Elongation
B0 = 5.3        # Magnitude of Toroidal field at R0 [T]
R0 = 6.2        # Major Radius [m]
qstar = 1.57    # Kink safety factor
alpha = -0.155  # constant

S = solovev(B0, R0, ϵ, δ, κ, alpha, qstar,B0_dir=1,Ip_dir=1)

SolovevEquilibrium
  B0 = 2.0 [T]
  R0 = 6.2 [m]
  ϵ  = 0.32
  δ  = 0.33
  κ  = 1.7
  α  = -0.155
  q⋆ = 1.57
  βp = 1.1837605469381924
  βt = 0.049177281028224634
  σ  = 1
  diverted  = false
  symmetric = true
"><pre><span class="pl-c"><span class="pl-c">#</span> ITER parameters</span>
δ <span class="pl-k">=</span> <span class="pl-c1">0.33</span>        <span class="pl-c"><span class="pl-c">#</span> Triangularity</span>
ϵ <span class="pl-k">=</span> <span class="pl-c1">0.32</span>        <span class="pl-c"><span class="pl-c">#</span> Inverse aspect ratio a/R0</span>
κ <span class="pl-k">=</span> <span class="pl-c1">1.7</span>         <span class="pl-c"><span class="pl-c">#</span> Elongation</span>
B0 <span class="pl-k">=</span> <span class="pl-c1">5.3</span>        <span class="pl-c"><span class="pl-c">#</span> Magnitude of Toroidal field at R0 [T]</span>
R0 <span class="pl-k">=</span> <span class="pl-c1">6.2</span>        <span class="pl-c"><span class="pl-c">#</span> Major Radius [m]</span>
qstar <span class="pl-k">=</span> <span class="pl-c1">1.57</span>    <span class="pl-c"><span class="pl-c">#</span> Kink safety factor</span>
alpha <span class="pl-k">=</span> <span class="pl-k">-</span><span class="pl-c1">0.155</span>  <span class="pl-c"><span class="pl-c">#</span> constant</span>

S <span class="pl-k">=</span> <span class="pl-c1">solovev</span>(B0, R0, ϵ, δ, κ, alpha, qstar,B0_dir<span class="pl-k">=</span><span class="pl-c1">1</span>,Ip_dir<span class="pl-k">=</span><span class="pl-c1">1</span>)

SolovevEquilibrium
  B0 <span class="pl-k">=</span> <span class="pl-c1">2.0</span> [T]
  R0 <span class="pl-k">=</span> <span class="pl-c1">6.2</span> [m]
  ϵ  <span class="pl-k">=</span> <span class="pl-c1">0.32</span>
  δ  <span class="pl-k">=</span> <span class="pl-c1">0.33</span>
  κ  <span class="pl-k">=</span> <span class="pl-c1">1.7</span>
  α  <span class="pl-k">=</span> <span class="pl-k">-</span><span class="pl-c1">0.155</span>
  q⋆ <span class="pl-k">=</span> <span class="pl-c1">1.57</span>
  βp <span class="pl-k">=</span> <span class="pl-c1">1.1837605469381924</span>
  βt <span class="pl-k">=</span> <span class="pl-c1">0.049177281028224634</span>
  σ  <span class="pl-k">=</span> <span class="pl-c1">1</span>
  diverted  <span class="pl-k">=</span> <span class="pl-c1">false</span>
  symmetric <span class="pl-k">=</span> <span class="pl-c1">true</span></pre></div>
<h2><a id="user-content-efit-equilibrium" class="anchor" aria-hidden="true" href="#efit-equilibrium"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>EFIT Equilibrium</h2>
<p>EFIT geqdsk files are a commonly used file format.
Here we provide routines for converting the GEQDSK files into an Equilibrium object.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using EFIT

g = readg(&quot;g000001.01000&quot;)
M = efit(g, clockwise_phi=false) # direction of phi needed to determine COCOS ID
wall = Wall(g)

in_vessel(wall, r, z)

# or
# M, wall = read_geqdsk(&quot;g000001.01000&quot;,clockwise_phi=false)

"><pre><span class="pl-k">using</span> EFIT

g <span class="pl-k">=</span> <span class="pl-c1">readg</span>(<span class="pl-s"><span class="pl-pds">"</span>g000001.01000<span class="pl-pds">"</span></span>)
M <span class="pl-k">=</span> <span class="pl-c1">efit</span>(g, clockwise_phi<span class="pl-k">=</span><span class="pl-c1">false</span>) <span class="pl-c"><span class="pl-c">#</span> direction of phi needed to determine COCOS ID</span>
wall <span class="pl-k">=</span> <span class="pl-c1">Wall</span>(g)

<span class="pl-c1">in_vessel</span>(wall, r, z)

<span class="pl-c"><span class="pl-c">#</span> or</span>
<span class="pl-c"><span class="pl-c">#</span> M, wall = read_geqdsk("g000001.01000",clockwise_phi=false)</span>
</pre></div>
<h2><a id="user-content-cocos-tokamak-coordinate-conventions" class="anchor" aria-hidden="true" href="#cocos-tokamak-coordinate-conventions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>COCOS: Tokamak Coordinate Conventions</h2>
<p>We provide routines for working determining, transforming, and checking COCOS's.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; cocos(3)
COCOS = 3
 e_Bp  = 0
 σ_Bp  = -1
 σ_RΦZ = (R,Φ,Z): 1
 σ_ρθΦ = (ρ,Φ,θ): -1
 Φ from top: CCW
 θ from front: CCW
 ψ_ref: Decreasing assuming +Ip, +B0
 sign(q) = -1 assuming +Ip, +B0
 sign(p') = 1 assuming +Ip, +B0

julia&gt; transform_cocos(3,1)
Dict{Any, Any} with 14 entries:
  &quot;Z&quot;        =&gt; 1.0
  &quot;Q&quot;        =&gt; -1
  &quot;P&quot;        =&gt; 1.0
  &quot;B&quot;        =&gt; 1.0
  &quot;F_FPRIME&quot; =&gt; -1.0
  &quot;ψ&quot;        =&gt; -1.0
  &quot;TOR&quot;      =&gt; 1.0
  &quot;Φ&quot;        =&gt; 1.0
  &quot;PSI&quot;      =&gt; -1.0
  &quot;I&quot;        =&gt; 1.0
  &quot;J&quot;        =&gt; 1.0
  &quot;R&quot;        =&gt; 1.0
  &quot;F&quot;        =&gt; 1.0
  &quot;PPRIME&quot;   =&gt; -1.0
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">cocos</span>(<span class="pl-c1">3</span>)
COCOS <span class="pl-k">=</span> <span class="pl-c1">3</span>
 e_Bp  <span class="pl-k">=</span> <span class="pl-c1">0</span>
 σ_Bp  <span class="pl-k">=</span> <span class="pl-k">-</span><span class="pl-c1">1</span>
 σ_RΦZ <span class="pl-k">=</span> (R,Φ,Z)<span class="pl-k">:</span> <span class="pl-c1">1</span>
 σ_ρθΦ <span class="pl-k">=</span> (ρ,Φ,θ)<span class="pl-k">:</span> <span class="pl-k">-</span><span class="pl-c1">1</span>
 Φ from top<span class="pl-k">:</span> CCW
 θ from front<span class="pl-k">:</span> CCW
 ψ_ref<span class="pl-k">:</span> Decreasing assuming <span class="pl-k">+</span>Ip, <span class="pl-k">+</span>B0
 <span class="pl-en">sign</span>(q) <span class="pl-k">=</span> <span class="pl-k">-</span><span class="pl-c1">1</span> assuming <span class="pl-k">+</span>Ip, <span class="pl-k">+</span>B0
 <span class="pl-en">sign</span>(p<span class="pl-k">'</span>) <span class="pl-k">=</span> <span class="pl-c1">1</span> assuming <span class="pl-k">+</span>Ip, <span class="pl-k">+</span>B0

julia<span class="pl-k">&gt;</span> <span class="pl-c1">transform_cocos</span>(<span class="pl-c1">3</span>,<span class="pl-c1">1</span>)
Dict{Any, Any} with <span class="pl-c1">14</span> entries<span class="pl-k">:</span>
  <span class="pl-s"><span class="pl-pds">"</span>Z<span class="pl-pds">"</span></span>        <span class="pl-k">=&gt;</span> <span class="pl-c1">1.0</span>
  <span class="pl-s"><span class="pl-pds">"</span>Q<span class="pl-pds">"</span></span>        <span class="pl-k">=&gt;</span> <span class="pl-k">-</span><span class="pl-c1">1</span>
  <span class="pl-s"><span class="pl-pds">"</span>P<span class="pl-pds">"</span></span>        <span class="pl-k">=&gt;</span> <span class="pl-c1">1.0</span>
  <span class="pl-s"><span class="pl-pds">"</span>B<span class="pl-pds">"</span></span>        <span class="pl-k">=&gt;</span> <span class="pl-c1">1.0</span>
  <span class="pl-s"><span class="pl-pds">"</span>F_FPRIME<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-k">-</span><span class="pl-c1">1.0</span>
  <span class="pl-s"><span class="pl-pds">"</span>ψ<span class="pl-pds">"</span></span>        <span class="pl-k">=&gt;</span> <span class="pl-k">-</span><span class="pl-c1">1.0</span>
  <span class="pl-s"><span class="pl-pds">"</span>TOR<span class="pl-pds">"</span></span>      <span class="pl-k">=&gt;</span> <span class="pl-c1">1.0</span>
  <span class="pl-s"><span class="pl-pds">"</span>Φ<span class="pl-pds">"</span></span>        <span class="pl-k">=&gt;</span> <span class="pl-c1">1.0</span>
  <span class="pl-s"><span class="pl-pds">"</span>PSI<span class="pl-pds">"</span></span>      <span class="pl-k">=&gt;</span> <span class="pl-k">-</span><span class="pl-c1">1.0</span>
  <span class="pl-s"><span class="pl-pds">"</span>I<span class="pl-pds">"</span></span>        <span class="pl-k">=&gt;</span> <span class="pl-c1">1.0</span>
  <span class="pl-s"><span class="pl-pds">"</span>J<span class="pl-pds">"</span></span>        <span class="pl-k">=&gt;</span> <span class="pl-c1">1.0</span>
  <span class="pl-s"><span class="pl-pds">"</span>R<span class="pl-pds">"</span></span>        <span class="pl-k">=&gt;</span> <span class="pl-c1">1.0</span>
  <span class="pl-s"><span class="pl-pds">"</span>F<span class="pl-pds">"</span></span>        <span class="pl-k">=&gt;</span> <span class="pl-c1">1.0</span>
  <span class="pl-s"><span class="pl-pds">"</span>PPRIME<span class="pl-pds">"</span></span>   <span class="pl-k">=&gt;</span> <span class="pl-k">-</span><span class="pl-c1">1.0</span></pre></div>
<h2><a id="user-content-boundaries" class="anchor" aria-hidden="true" href="#boundaries"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Boundaries</h2>
<p>Equilibrium.jl also provides routines for working with boundries such as walls or flux surfaces. Internally boundaries are stored as a list of points forming a polygon.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="
fs = flux_surface(S, psi) # alternatively fs = boundary(S, psi)

in_plasma(fs, r, z) # or in_vessel(fs, r, z), in_boundary(fs, r, z)

cicumference(fs)

area(fs) # Area enclosed by the boundary

volume(fs) # assuming toroidal symmetry. F can be a vector with the same length as fs or a function of (r,z)

average(fs, F) # Average F over the boundary

area_average(fs, F) # average F over the area

volume_average(fs, F) # average F over the volume
"><pre>fs <span class="pl-k">=</span> <span class="pl-c1">flux_surface</span>(S, psi) <span class="pl-c"><span class="pl-c">#</span> alternatively fs = boundary(S, psi)</span>

<span class="pl-c1">in_plasma</span>(fs, r, z) <span class="pl-c"><span class="pl-c">#</span> or in_vessel(fs, r, z), in_boundary(fs, r, z)</span>

<span class="pl-c1">cicumference</span>(fs)

<span class="pl-c1">area</span>(fs) <span class="pl-c"><span class="pl-c">#</span> Area enclosed by the boundary</span>

<span class="pl-c1">volume</span>(fs) <span class="pl-c"><span class="pl-c">#</span> assuming toroidal symmetry. F can be a vector with the same length as fs or a function of (r,z)</span>

<span class="pl-c1">average</span>(fs, F) <span class="pl-c"><span class="pl-c">#</span> Average F over the boundary</span>

<span class="pl-c1">area_average</span>(fs, F) <span class="pl-c"><span class="pl-c">#</span> average F over the area</span>

<span class="pl-c1">volume_average</span>(fs, F) <span class="pl-c"><span class="pl-c">#</span> average F over the volume</span></pre></div>
</article></div>