<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-mpskitjl" class="anchor" aria-hidden="true" href="#mpskitjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>MPSKit.jl</h1>
<p dir="auto"><a href="https://maartenvd.github.io/MPSKit.jl/dev/" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="docs" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a> <a href="https://codecov.io/gh/maartenvd/MPSKit.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/c9a9b939bd0628d8e0192f46fc58b8282477b5f4ba7c57cc764f4ccf7215850e/68747470733a2f2f636f6465636f762e696f2f67682f6d61617274656e76642f4d50534b69742e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/maartenvd/MPSKit.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a> <a target="_blank" rel="noopener noreferrer" href="https://github.com/maartenvd/MPSKit.jl/workflows/CI/badge.svg"><img src="https://github.com/maartenvd/MPSKit.jl/workflows/CI/badge.svg" alt="CI" style="max-width: 100%;"></a></p>
<p dir="auto">Contains code for tackling 1 dimensional quantum (and 2d classical) problems using tensor network algorithms. While it is still in beta, exported algorithms should just work. If you encounter an issue, feel free to open a bug report.</p>
<p dir="auto">We implemented different algorithms for finding the groundstate (both finite and infinite systems), performing time evolution, finding excitations and much more. Check out the <a href="https://maartenvd.github.io/MPSKit.jl/dev/#Tutorials-1" rel="nofollow">tutorials</a> or <a href="https://github.com/maartenvd/MPSKit.jl/tree/master/examples">examples</a> (the documentation itself is still quite terse).</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">First, install this package by opening julia and pressing "]". Then type</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="pkg&gt; add MPSKit"><pre>pkg<span class="pl-k">&gt;</span> add MPSKit</pre></div>
<p dir="auto">MPSKit works on Tensormap objects, which are defined in <a href="https://github.com/Jutho/TensorKit.jl">another package</a>.
You will have to add this pacakge as well to create the basic building blocks.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="pkg&gt; add TensorKit"><pre>pkg<span class="pl-k">&gt;</span> add TensorKit</pre></div>
<p dir="auto">Last but not least, we have already implemented a few hamiltonians in <a href="https://github.com/maartenvd/MPSKitModels.jl">MPSKitModels.jl</a>. It is recommended to install this package too.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="pkg&gt; add MPSKitModels"><pre>pkg<span class="pl-k">&gt;</span> add MPSKitModels</pre></div>
<h2 dir="auto"><a id="user-content-quickstart" class="anchor" aria-hidden="true" href="#quickstart"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Quickstart</h2>
<p dir="auto">After following the installation process, you should now be able to call</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using MPSKit,MPSKitModels,TensorKit"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> MPSKit,MPSKitModels,TensorKit</pre></div>
<p dir="auto">You can create a random 1 site periodic infinite mps (bond dimension 10) by calling</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; state = InfiniteMPS([ℂ^2],[ℂ^10]);"><pre>julia<span class="pl-k">&gt;</span> state <span class="pl-k">=</span> <span class="pl-c1">InfiniteMPS</span>([ℂ<span class="pl-k">^</span><span class="pl-c1">2</span>],[ℂ<span class="pl-k">^</span><span class="pl-c1">10</span>]);</pre></div>
<p dir="auto">We can use a pre-defined hamiltonian from MPSKitModels</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; hamiltonian = nonsym_ising_ham();"><pre>julia<span class="pl-k">&gt;</span> hamiltonian <span class="pl-k">=</span> <span class="pl-c1">nonsym_ising_ham</span>();</pre></div>
<p dir="auto">And find the groundstate</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; (groundstate,_) = find_groundstate(state,hamiltonian,VUMPS());"><pre>julia<span class="pl-k">&gt;</span> (groundstate,_) <span class="pl-k">=</span> <span class="pl-c1">find_groundstate</span>(state,hamiltonian,<span class="pl-c1">VUMPS</span>());</pre></div>
</article></div>