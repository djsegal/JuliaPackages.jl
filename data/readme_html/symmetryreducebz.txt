<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p dir="auto"><a href="https://jerjorg.github.io/SymmetryReduceBZ.jl/" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Documentation" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://travis-ci.com/jerjorg/SymmetryReduceBZ.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/3b1cda7b64fd928c5229507ea06c10045672a7d9fa4eea3029c0f2ce102ce4e1/68747470733a2f2f7472617669732d63692e636f6d2f6a65726a6f72672f53796d6d65747279526564756365425a2e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/jerjorg/SymmetryReduceBZ.jl.svg?branch=master" style="max-width: 100%;"></a>
<a href="https://coveralls.io/github/jerjorg/SymmetryReduceBZ.jl?branch=master&amp;service=github" rel="nofollow"><img src="https://camo.githubusercontent.com/f5f16a36eafb89c1aee0cb6fd7ef25de1312006fec6a50f0d45cd14816ab8989/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f6a65726a6f72672f53796d6d65747279526564756365425a2e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/jerjorg/SymmetryReduceBZ.jl/badge.svg?branch=master" style="max-width: 100%;"></a></p>
<h1 dir="auto"><a id="user-content-symmetryreducebz" class="anchor" aria-hidden="true" href="#symmetryreducebz"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>SymmetryReduceBZ</h1>
<p dir="auto">The primary purpose of <code>SymmetryReduceBZ</code> is to calculate the irreducible
Brillouin zone (IBZ) for crystal structures in 2D or 3D provided the real-space
lattice vectors, atom positions, and atom types. It also contains methods for
making unit cells primitive and lattice reduction. See the User Guide in the
<a href="https://jerjorg.github.io/SymmetryReduceBZ.jl/" rel="nofollow">documentation</a> for more details
and usage examples in Python. Details of the algorithm are explained <a href="https://arxiv.org/abs/2104.05856" rel="nofollow">here</a>.</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto"><code>SymmetryReduceBZ</code> is a registered Julia package and can be installed using
Julia's package manager <code>Pkg</code>.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="using Pkg
Pkg.add(&quot;SymmetryReduceBZ&quot;)"><pre class="notranslate"><code>using Pkg
Pkg.add("SymmetryReduceBZ")
</code></pre></div>
<h2 dir="auto"><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Examples</h2>
<p dir="auto">To calculate the irreducible Brillouin zone, provide the lattice and atomic
basis to <code>calc_ibz</code>. The IBZ will be returned as either a convex hull or
intersection of half spaces.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="import SymmetryReduceBZ.Lattices: genlat_CUB
import SymmetryReduceBZ.Symmetry: calc_ibz
a = 2.0
real_latvecs = genlat_CUB(a)
atom_types = [0,0]
atom_pos = Array([0 0 0; 0.5 0.5 0.5]')
ibzformat = &quot;convex hull&quot;
coordinates = &quot;Cartesian&quot;
makeprim = false
convention = &quot;ordinary&quot;
ibz = calc_ibz(real_latvecs,atom_types,atom_pos,coordinates,ibzformat,
  makeprim,convention)"><pre lang="@example" class="notranslate"><code>import SymmetryReduceBZ.Lattices: genlat_CUB
import SymmetryReduceBZ.Symmetry: calc_ibz
a = 2.0
real_latvecs = genlat_CUB(a)
atom_types = [0,0]
atom_pos = Array([0 0 0; 0.5 0.5 0.5]')
ibzformat = "convex hull"
coordinates = "Cartesian"
makeprim = false
convention = "ordinary"
ibz = calc_ibz(real_latvecs,atom_types,atom_pos,coordinates,ibzformat,
  makeprim,convention)
</code></pre></div>
<p dir="auto">The arguments for <code>calc_ibz</code> are as follows:</p>
<ul dir="auto">
<li><code>real_latvecs</code>: the real-space lattice vectors as columns of a matrix.</li>
<li><code>atom_types</code>: a vector of atom types as integers.</li>
<li><code>atom_pos</code>: the positions of atoms in the crystal structure as columns of a matrix.</li>
<li><code>coordinates</code>: indicates the atoms are in <code>"lattice"</code> or <code>"Cartesian"</code>
coordinates.</li>
<li><code>ibzformat</code>: the format of the irreducible Brillouin zone. Options include
<code>"convex hull"</code> and <code>"half-space"</code>.</li>
<li><code>makeprim</code>: make the unit cell primitive before calculating the IBZ if
<code>true</code>.</li>
<li><code>convention</code>: the convention used to go between real and reciprocal space. The
two conventions are <code>"ordinary"</code> (temporal) frequency and <code>"angular"</code>
frequency.</li>
<li><code>rtol=sqrt(eps(float(maximum(real_latvecs))))</code>: (optional) a relative tolerance for floating-point comparisons.</li>
<li><code>atol=1e-9</code>: (optional) an absolute tolerance for floating-point comparisons.</li>
</ul>
<p dir="auto">The vertices of the ibz are accessed with <code>ibz.points[ibz.vertices,:]</code>. The
vertices of the IBZ and <code>ibz.points</code> should be the same. The rows of the array
are the vertices of the IBZ in Cartesian coordinates. Other attributes of the
IBZ are accessible, such as the volume <code>ibz.volume</code>. The faces of the IBZ are
calculated with</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="import SymmetryReduceBZ.Utilities: get_uniquefacets
indices = get_uniquefacets(ibz)
facets = [ibz.points[ind] for ind=indices]"><pre class="notranslate"><code>import SymmetryReduceBZ.Utilities: get_uniquefacets
indices = get_uniquefacets(ibz)
facets = [ibz.points[ind] for ind=indices]
</code></pre></div>
<p dir="auto"><code>facets</code> is a list of points at the corners of each facet. The function
<code>get_uniquefacets</code> returns the indices of points that lie on the same facet. The
facets are also available through <code>ibz.simplices</code> as simplices, but often multiple simplices
lie on the same facet. See the <a href="https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.ConvexHull.html" rel="nofollow">documentation</a> for SciPy
for additional attributes of the IBZ.</p>
<p dir="auto">The function <code>plot_convexhulls</code> is useful for visualizing the Brillouin zone
and irreducible Brillouin zone. The arguments are the same as those from
<code>calc_ibz</code>.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="import SymmetryReduceBZ.Plotting: plot_convexhulls
import SymmetryReduceBZ.Lattices: genlat_CUB
a = 2.0
real_latvecs = genlat_CUB(a)
atom_types = [0,0]
atom_pos = Array([0 0 0; 0.5 0.5 0.5]')
coordinates = &quot;Cartesian&quot;
makeprim = false
convention = &quot;ordinary&quot;
ax=plot_convexhulls(real_latvecs,atom_types,atom_pos,coordinates,
  makeprim,convention)"><pre lang="@example" class="notranslate"><code>import SymmetryReduceBZ.Plotting: plot_convexhulls
import SymmetryReduceBZ.Lattices: genlat_CUB
a = 2.0
real_latvecs = genlat_CUB(a)
atom_types = [0,0]
atom_pos = Array([0 0 0; 0.5 0.5 0.5]')
coordinates = "Cartesian"
makeprim = false
convention = "ordinary"
ax=plot_convexhulls(real_latvecs,atom_types,atom_pos,coordinates,
  makeprim,convention)
</code></pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/jerjorg/SymmetryReduceBZ.jl/blob/master/plots/ibz.png"><img src="https://github.com/jerjorg/SymmetryReduceBZ.jl/raw/master/plots/ibz.png" alt="IBZ" style="max-width: 100%;"></a></p>
<p dir="auto">The functions <code>plot_2Dconvexhull</code> and <code>plot_3Dconvexhull</code> allow greater customization of
the appearance of the convex hull.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="import SymmetryReduceBZ.Symmetry: calc_bz, calc_ibz
import SymmetryReduceBZ.Plotting: plot_2Dconvexhull
using PyPlot
real_latvecs = [1 0; 0 1]
convention=&quot;ordinary&quot;
atom_types=[0]
atom_pos = Array([0 0]')
coords = &quot;Cartesian&quot;
ibzformat = &quot;convex hull&quot;
makeprim=false
bz = calc_bz(real_latvecs,atom_types,atom_pos,coords,ibzformat,makeprim,convention)
ibz = calc_ibz(real_latvecs,atom_types,atom_pos,coords,ibzformat,makeprim,convention)
ax = plot_2Dconvexhull(bz,facecolor=&quot;deepskyblue&quot;,linewidth=3,edgecolor=&quot;cyan&quot;,alpha=0.2)
ax = plot_2Dconvexhull(ibz,ax;facecolor=&quot;coral&quot;,linewidth=3,edgecolor=&quot;magenta&quot;,alpha=0.4)
axis(&quot;off&quot;)"><pre lang="@example" class="notranslate"><code>import SymmetryReduceBZ.Symmetry: calc_bz, calc_ibz
import SymmetryReduceBZ.Plotting: plot_2Dconvexhull
using PyPlot
real_latvecs = [1 0; 0 1]
convention="ordinary"
atom_types=[0]
atom_pos = Array([0 0]')
coords = "Cartesian"
ibzformat = "convex hull"
makeprim=false
bz = calc_bz(real_latvecs,atom_types,atom_pos,coords,ibzformat,makeprim,convention)
ibz = calc_ibz(real_latvecs,atom_types,atom_pos,coords,ibzformat,makeprim,convention)
ax = plot_2Dconvexhull(bz,facecolor="deepskyblue",linewidth=3,edgecolor="cyan",alpha=0.2)
ax = plot_2Dconvexhull(ibz,ax;facecolor="coral",linewidth=3,edgecolor="magenta",alpha=0.4)
axis("off")
</code></pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/jerjorg/SymmetryReduceBZ.jl/blob/master/plots/ibz-3.png"><img src="https://github.com/jerjorg/SymmetryReduceBZ.jl/raw/master/plots/ibz-3.png" alt="IBZ" style="max-width: 100%;"></a></p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="import SymmetryReduceBZ.Symmetry: calc_bz, calc_ibz
import SymmetryReduceBZ.Plotting: plot_3Dconvexhull
using PyPlot
real_latvecs = [1 0 0; 0 1 0; 0 0 1]
convention=&quot;ordinary&quot;
atom_types=[0]
atom_pos = Array([0 0 0]')
coords = &quot;Cartesian&quot;
bzformat = &quot;convex hull&quot;
makeprim=false
bz = calc_bz(real_latvecs,atom_types,atom_pos,coords,bzformat,makeprim,convention)
ibz = calc_ibz(real_latvecs,atom_types,atom_pos,coords,bzformat,makeprim,convention)
fig = figure()
ax = fig.add_subplot(111, projection=&quot;3d&quot;)
ax = plot_3Dconvexhull(ibz,ax,facecolors=&quot;pink&quot;,alpha=1,edgecolors=&quot;black&quot;,linewidths = 1)
ax = plot_3Dconvexhull(bz,ax,facecolors=&quot;deepskyblue&quot;,edgecolors=&quot;white&quot;,linewidths=1,alpha=0.2)
axis(&quot;off&quot;)"><pre lang="@example" class="notranslate"><code>import SymmetryReduceBZ.Symmetry: calc_bz, calc_ibz
import SymmetryReduceBZ.Plotting: plot_3Dconvexhull
using PyPlot
real_latvecs = [1 0 0; 0 1 0; 0 0 1]
convention="ordinary"
atom_types=[0]
atom_pos = Array([0 0 0]')
coords = "Cartesian"
bzformat = "convex hull"
makeprim=false
bz = calc_bz(real_latvecs,atom_types,atom_pos,coords,bzformat,makeprim,convention)
ibz = calc_ibz(real_latvecs,atom_types,atom_pos,coords,bzformat,makeprim,convention)
fig = figure()
ax = fig.add_subplot(111, projection="3d")
ax = plot_3Dconvexhull(ibz,ax,facecolors="pink",alpha=1,edgecolors="black",linewidths = 1)
ax = plot_3Dconvexhull(bz,ax,facecolors="deepskyblue",edgecolors="white",linewidths=1,alpha=0.2)
axis("off")
</code></pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/jerjorg/SymmetryReduceBZ.jl/blob/master/plots/ibz-2.png"><img src="https://github.com/jerjorg/SymmetryReduceBZ.jl/raw/master/plots/ibz-2.png" alt="IBZ" style="max-width: 100%;"></a></p>
</article></div>