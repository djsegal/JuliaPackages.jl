<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p dir="auto"><code>Problox.jl</code> is a small DSL for <em>probabilistic logic programming</em> which wraps <a href="https://dtai.cs.kuleuven.be/problog/" rel="nofollow">ProbLog</a> - a wonderful, well-supported library which extends <a href="https://en.wikipedia.org/wiki/Prolog" rel="nofollow">Prolog</a> with probabilistic constructs.</p>
<p dir="auto">Here's the DSL in action:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="net = @problox begin
    C = variable(:C);
    coin(:c1);
    coin(:c2);
    (0.4 :: heads(C), 0.6 :: tails(C)) :- coin(C);
    win &lt;&lt; heads(C);
    query(win);
end"><pre>net <span class="pl-k">=</span> <span class="pl-c1">@problox</span> <span class="pl-k">begin</span>
    C <span class="pl-k">=</span> <span class="pl-c1">variable</span>(<span class="pl-c1">:C</span>);
    <span class="pl-c1">coin</span>(<span class="pl-c1">:c1</span>);
    <span class="pl-c1">coin</span>(<span class="pl-c1">:c2</span>);
    (<span class="pl-c1">0.4</span> <span class="pl-k">::</span> <span class="pl-c1">heads</span>(C), <span class="pl-c1">0.6</span> <span class="pl-k">::</span> <span class="pl-c1">tails</span>(C)) :<span class="pl-k">-</span> <span class="pl-c1">coin</span>(C);
    win <span class="pl-k">&lt;&lt;</span> <span class="pl-c1">heads</span>(C);
    <span class="pl-c1">query</span>(win);
<span class="pl-k">end</span></pre></div>
<p dir="auto">As long as you've got everything straightened out with <code>PyCall</code>, this will compile to a <code>PyObject</code> representing ProbLog's <code>SimpleProgram</code>.</p>
<p dir="auto">You can evaluate the compiled representation directly in Julia. For example,</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="println(evaluate(net))"><pre><span class="pl-c1">println</span>(<span class="pl-c1">evaluate</span>(net))</pre></div>
<p dir="auto">will return</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Dict{Any,Any}(PyObject win =&gt; 0.64)"><pre><span class="pl-c1">Dict</span><span class="pl-c1">{Any,Any}</span>(PyObject win <span class="pl-k">=&gt;</span> <span class="pl-c1">0.64</span>)</pre></div>
<p dir="auto">You can, of course, use some of Julia's nice abstractions.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# Generates worlds :)
@problox function generator(p, q)
    C = variable(:C);
    coin(:c1);
    coin(:c2);
    (p :: heads(C), q :: tails(C)) :- coin(C);
    win &lt;&lt; heads(C);
    query(win);
end"><pre><span class="pl-c"><span class="pl-c">#</span> Generates worlds :)</span>
<span class="pl-c1">@problox</span> <span class="pl-k">function</span> <span class="pl-en">generator</span>(p, q)
    C <span class="pl-k">=</span> <span class="pl-c1">variable</span>(<span class="pl-c1">:C</span>);
    <span class="pl-c1">coin</span>(<span class="pl-c1">:c1</span>);
    <span class="pl-c1">coin</span>(<span class="pl-c1">:c2</span>);
    (p <span class="pl-k">::</span> <span class="pl-c1">heads</span>(C), q <span class="pl-k">::</span> <span class="pl-c1">tails</span>(C)) :<span class="pl-k">-</span> <span class="pl-c1">coin</span>(C);
    win <span class="pl-k">&lt;&lt;</span> <span class="pl-c1">heads</span>(C);
    <span class="pl-c1">query</span>(win);
<span class="pl-k">end</span></pre></div>
<p dir="auto">Here's a world generator. This defines a function which produces worlds which you can evaluate with <code>evaluate</code>.</p>
<p dir="auto">If you want to work at a lower-level, there's a set of direct APIs through <code>PyCall</code> for building programs.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# This is a simple program in the direct Python interfaces.
C = Var(&quot;C&quot;)
p = SimpleProgram()
p.add_fact(coin(Constant(&quot;c1&quot;)))
p.add_fact(coin(Constant(&quot;c2&quot;)))
p.add_clause(AnnotatedDisjunction([heads(C, p=0.4), tails(C, p=0.6)], coin(C)))
p.add_clause(win &lt;&lt; heads(C))
p.add_fact(query(win))"><pre><span class="pl-c"><span class="pl-c">#</span> This is a simple program in the direct Python interfaces.</span>
C <span class="pl-k">=</span> <span class="pl-c1">Var</span>(<span class="pl-s"><span class="pl-pds">"</span>C<span class="pl-pds">"</span></span>)
p <span class="pl-k">=</span> <span class="pl-c1">SimpleProgram</span>()
p<span class="pl-k">.</span><span class="pl-c1">add_fact</span>(<span class="pl-c1">coin</span>(<span class="pl-c1">Constant</span>(<span class="pl-s"><span class="pl-pds">"</span>c1<span class="pl-pds">"</span></span>)))
p<span class="pl-k">.</span><span class="pl-c1">add_fact</span>(<span class="pl-c1">coin</span>(<span class="pl-c1">Constant</span>(<span class="pl-s"><span class="pl-pds">"</span>c2<span class="pl-pds">"</span></span>)))
p<span class="pl-k">.</span><span class="pl-c1">add_clause</span>(<span class="pl-c1">AnnotatedDisjunction</span>([<span class="pl-c1">heads</span>(C, p<span class="pl-k">=</span><span class="pl-c1">0.4</span>), <span class="pl-c1">tails</span>(C, p<span class="pl-k">=</span><span class="pl-c1">0.6</span>)], <span class="pl-c1">coin</span>(C)))
p<span class="pl-k">.</span><span class="pl-c1">add_clause</span>(win <span class="pl-k">&lt;&lt;</span> <span class="pl-c1">heads</span>(C))
p<span class="pl-k">.</span><span class="pl-c1">add_fact</span>(<span class="pl-c1">query</span>(win))</pre></div>
<p dir="auto">This might be useful if you'd like to hook this up to some other system.</p>
</article></div>