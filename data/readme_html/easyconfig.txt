<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p dir="auto"><a href="https://github.com/joshday/EasyConfig.jl/actions?query=workflow%3ACI+branch%3Amaster"><img src="https://github.com/joshday/EasyConfig.jl/workflows/CI/badge.svg" alt="Build status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/joshday/EasyConfig.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/df2c36bc115004ab4427b988f17739c60f2027163fe3b4757912873743c756a0/68747470733a2f2f636f6465636f762e696f2f67682f6a6f73686461792f45617379436f6e6669672e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/joshday/EasyConfig.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a>
<a href="https://juliahub.com/ui/Packages/EasyConfig/tMFix?t=2" rel="nofollow"><img src="https://camo.githubusercontent.com/65403c247ee0790c86a2b2c16386128039b4f89c2152bfc22da1065855975ebd/68747470733a2f2f6a756c69616875622e636f6d2f646f63732f45617379436f6e6669672f646570732e737667" alt="deps" data-canonical-src="https://juliahub.com/docs/EasyConfig/deps.svg" style="max-width: 100%;"></a>
<a href="https://juliahub.com/ui/Packages/EasyConfig/tMFix" rel="nofollow"><img src="https://camo.githubusercontent.com/5fac5aa942b4a3fbda70355f26ea18e07e01febadbaac69084f04682920f2698/68747470733a2f2f6a756c69616875622e636f6d2f646f63732f45617379436f6e6669672f76657273696f6e2e737667" alt="version" data-canonical-src="https://juliahub.com/docs/EasyConfig/version.svg" style="max-width: 100%;"></a>
<a href="https://juliahub.com/ui/Packages/EasyConfig/tMFix" rel="nofollow"><img src="https://camo.githubusercontent.com/065f7e2550de623cc14a79b4acd84a2788d41e4e0fc466571fcdc6b5142717ea/68747470733a2f2f6a756c69616875622e636f6d2f646f63732f45617379436f6e6669672f706b676576616c2e737667" alt="pkgeval" data-canonical-src="https://juliahub.com/docs/EasyConfig/pkgeval.svg" style="max-width: 100%;"></a></p>
<h1 align="center" dir="auto"><a id="user-content-easyconfig" class="anchor" aria-hidden="true" href="#easyconfig"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>EasyConfig</h1>
<ul dir="auto">
<li><strong>EasyConfig</strong> provides an easy-to-use nested <code>AbstractDict{Symbol, Any}</code> data structure.</li>
<li>The advantages over other <code>AbstractDict/NamedTuple</code>s are:</li>
</ul>
<h1 dir="auto"><a id="user-content-1-intermediate-levels-are-created-on-the-fly" class="anchor" aria-hidden="true" href="#1-intermediate-levels-are-created-on-the-fly"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>1) Intermediate levels are created on the fly:</h1>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="c = Config()
c.one.two.three = 1"><pre>c <span class="pl-k">=</span> <span class="pl-c1">Config</span>()
c<span class="pl-k">.</span>one<span class="pl-k">.</span>two<span class="pl-k">.</span>three <span class="pl-k">=</span> <span class="pl-c1">1</span></pre></div>
<ul dir="auto">
<li>This is <em>super</em> convenient for working with JSON specs (e.g. <a href="https://github.com/JuliaComputing/PlotlyLight.jl">PlotlyLight.jl</a>).</li>
<li>As you'd expect, you can <code>JSON3.write(c)</code> into a JSON string.</li>
</ul>
<br>
<p dir="auto">Compare this to <code>OrderedDict</code> and <code>NamedTuple</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="c = OrderedDict(:one =&gt; OrderedDict(:two =&gt; OrderedDict(:three =&gt; 1)))

c = (one = (two = (three = 1,),),)

c = (; one = (;two = (;three = 1)))"><pre>c <span class="pl-k">=</span> <span class="pl-c1">OrderedDict</span>(<span class="pl-c1">:one</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">OrderedDict</span>(<span class="pl-c1">:two</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">OrderedDict</span>(<span class="pl-c1">:three</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1</span>)))

c <span class="pl-k">=</span> (one <span class="pl-k">=</span> (two <span class="pl-k">=</span> (three <span class="pl-k">=</span> <span class="pl-c1">1</span>,),),)

c <span class="pl-k">=</span> (; one <span class="pl-k">=</span> (;two <span class="pl-k">=</span> (;three <span class="pl-k">=</span> <span class="pl-c1">1</span>)))</pre></div>
<p dir="auto"><br><br></p>
<h3 dir="auto"><a id="user-content-2-any-combination-of-symbolabstractstring-with-getpropertygetindex-works" class="anchor" aria-hidden="true" href="#2-any-combination-of-symbolabstractstring-with-getpropertygetindex-works"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>2) Any combination of <code>Symbol</code>/<code>AbstractString</code> with (<code>getproperty</code>/<code>getindex</code>) works.</h3>
<ul dir="auto">
<li>For working with <code>Config</code>s <em>interactively</em>, <code>getproperty</code> is the most convenient to work with.</li>
<li>For working with <code>Config</code>s <em>programmatically</em>, <code>getindex</code> is the most convenient to work with.</li>
<li>This gives you the best of both worlds.</li>
</ul>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# getproperty
c.one.two.three
c.&quot;one&quot;.&quot;two&quot;.&quot;three&quot;

# getindex
c[:one][:two][:three]
c[&quot;one&quot;][&quot;two&quot;][&quot;three&quot;]

# mix and match
c[&quot;one&quot;].two.&quot;three&quot;"><pre><span class="pl-c"><span class="pl-c">#</span> getproperty</span>
c<span class="pl-k">.</span>one<span class="pl-k">.</span>two<span class="pl-k">.</span>three
c.<span class="pl-s"><span class="pl-pds">"</span>one<span class="pl-pds">"</span></span>.<span class="pl-s"><span class="pl-pds">"</span>two<span class="pl-pds">"</span></span>.<span class="pl-s"><span class="pl-pds">"</span>three<span class="pl-pds">"</span></span>

<span class="pl-c"><span class="pl-c">#</span> getindex</span>
c[<span class="pl-c1">:one</span>][<span class="pl-c1">:two</span>][<span class="pl-c1">:three</span>]
c[<span class="pl-s"><span class="pl-pds">"</span>one<span class="pl-pds">"</span></span>][<span class="pl-s"><span class="pl-pds">"</span>two<span class="pl-pds">"</span></span>][<span class="pl-s"><span class="pl-pds">"</span>three<span class="pl-pds">"</span></span>]

<span class="pl-c"><span class="pl-c">#</span> mix and match</span>
c[<span class="pl-s"><span class="pl-pds">"</span>one<span class="pl-pds">"</span></span>]<span class="pl-k">.</span>two.<span class="pl-s"><span class="pl-pds">"</span>three<span class="pl-pds">"</span></span></pre></div>
<ul dir="auto">
<li>You can similarly use <code>setproperty!</code>/<code>setindex!</code> in the same way:</li>
</ul>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="c[&quot;one&quot;].two.&quot;three&quot; = 5

c.one.two.three == 5  # true"><pre>c[<span class="pl-s"><span class="pl-pds">"</span>one<span class="pl-pds">"</span></span>]<span class="pl-k">.</span>two.<span class="pl-s"><span class="pl-pds">"</span>three<span class="pl-pds">"</span></span> <span class="pl-k">=</span> <span class="pl-c1">5</span>

c<span class="pl-k">.</span>one<span class="pl-k">.</span>two<span class="pl-k">.</span>three <span class="pl-k">==</span> <span class="pl-c1">5</span>  <span class="pl-c"><span class="pl-c">#</span> true</span></pre></div>
<p dir="auto"><br><br></p>
<h2 dir="auto"><a id="user-content-note" class="anchor" aria-hidden="true" href="#note"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Note</h2>
<ul dir="auto">
<li>If you try to access something that doesn't exist, an empty <code>Config()</code> will sit there.</li>
<li>This is a consequence of creating intermediate levels on the fly.</li>
<li>Clean up stranded empty <code>Config</code>s with <code>delete_empty!(::Config)</code>.</li>
</ul>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="c = Config()

c.one.two.three.four.five.six == Config()

# Internally we make the assumption that empty Config's shouldn't be there.
# Some functions will therefore call `delete_empty!` under the hood:
isempty(c) == true"><pre>c <span class="pl-k">=</span> <span class="pl-c1">Config</span>()

c<span class="pl-k">.</span>one<span class="pl-k">.</span>two<span class="pl-k">.</span>three<span class="pl-k">.</span>four<span class="pl-k">.</span>five<span class="pl-k">.</span>six <span class="pl-k">==</span> <span class="pl-c1">Config</span>()

<span class="pl-c"><span class="pl-c">#</span> Internally we make the assumption that empty Config's shouldn't be there.</span>
<span class="pl-c"><span class="pl-c">#</span> Some functions will therefore call `delete_empty!` under the hood:</span>
<span class="pl-c1">isempty</span>(c) <span class="pl-k">==</span> <span class="pl-c1">true</span></pre></div>
</article></div>