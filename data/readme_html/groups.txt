<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-groups" class="anchor" aria-hidden="true" href="#groups"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Groups</h1>
<p dir="auto"><a href="https://github.com/kalmarek/Groups.jl/actions/workflows/ci.yml"><img src="https://github.com/kalmarek/Groups.jl/actions/workflows/ci.yml/badge.svg" alt="CI" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/kalmarek/Groups.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/22c731c1bd2888ed90bbbdeec8a7b714584e59010dab250754ca1f165af732a3/68747470733a2f2f636f6465636f762e696f2f67682f6b616c6d6172656b2f47726f7570732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/kalmarek/Groups.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">An implementation of finitely-presented groups together with normalization (using Knuth-Bendix procedure).</p>
<p dir="auto">The package implements <code>AbstractFPGroup</code> with three concrete types: <code>FreeGroup</code>, <code>FPGroup</code> and <code>AutomorphismGroup</code>. Here's an example usage:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using Groups, GroupsCore

julia&gt; A = Alphabet([:a, :A, :b, :B, :c, :C], [2, 1, 4, 3, 6, 5])
Alphabet of Symbol
  1. a   (inverse of: A)
  2. A   (inverse of: a)
  3. b   (inverse of: B)
  4. B   (inverse of: b)
  5. c   (inverse of: C)
  6. C   (inverse of: c)

julia&gt; F = FreeGroup(A)
free group on 3 generators

julia&gt; a,b,c = gens(F)
3-element Vector{FPGroupElement{FreeGroup{Symbol, KnuthBendix.LenLex{Symbol}}, …}}:
 a
 b
 c

julia&gt; a*inv(a)
(id)

julia&gt; (a*b)^2
a*b*a*b

julia&gt; commutator(a, b)
A*B*a*b

julia&gt; x = a*b; y = inv(b)*a;

julia&gt; x*y
a^2"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Groups, GroupsCore

julia<span class="pl-k">&gt;</span> A <span class="pl-k">=</span> <span class="pl-c1">Alphabet</span>([<span class="pl-c1">:a</span>, <span class="pl-c1">:A</span>, <span class="pl-c1">:b</span>, <span class="pl-c1">:B</span>, <span class="pl-c1">:c</span>, <span class="pl-c1">:C</span>], [<span class="pl-c1">2</span>, <span class="pl-c1">1</span>, <span class="pl-c1">4</span>, <span class="pl-c1">3</span>, <span class="pl-c1">6</span>, <span class="pl-c1">5</span>])
Alphabet of Symbol
  <span class="pl-c1">1.</span> a   (inverse of<span class="pl-k">:</span> A)
  <span class="pl-c1">2.</span> A   (inverse of<span class="pl-k">:</span> a)
  <span class="pl-c1">3.</span> b   (inverse of<span class="pl-k">:</span> B)
  <span class="pl-c1">4.</span> B   (inverse of<span class="pl-k">:</span> b)
  <span class="pl-c1">5.</span> c   (inverse of<span class="pl-k">:</span> C)
  <span class="pl-c1">6.</span> C   (inverse of<span class="pl-k">:</span> c)

julia<span class="pl-k">&gt;</span> F <span class="pl-k">=</span> <span class="pl-c1">FreeGroup</span>(A)
free group on <span class="pl-c1">3</span> generators

julia<span class="pl-k">&gt;</span> a,b,c <span class="pl-k">=</span> <span class="pl-c1">gens</span>(F)
<span class="pl-c1">3</span><span class="pl-k">-</span>element Vector{FPGroupElement{FreeGroup{Symbol, KnuthBendix<span class="pl-k">.</span>LenLex{Symbol}}, …}}<span class="pl-k">:</span>
 a
 b
 c

julia<span class="pl-k">&gt;</span> a<span class="pl-k">*</span><span class="pl-c1">inv</span>(a)
(id)

julia<span class="pl-k">&gt;</span> (a<span class="pl-k">*</span>b)<span class="pl-k">^</span><span class="pl-c1">2</span>
a<span class="pl-k">*</span>b<span class="pl-k">*</span>a<span class="pl-k">*</span>b

julia<span class="pl-k">&gt;</span> <span class="pl-c1">commutator</span>(a, b)
A<span class="pl-k">*</span>B<span class="pl-k">*</span>a<span class="pl-k">*</span>b

julia<span class="pl-k">&gt;</span> x <span class="pl-k">=</span> a<span class="pl-k">*</span>b; y <span class="pl-k">=</span> <span class="pl-c1">inv</span>(b)<span class="pl-k">*</span>a;

julia<span class="pl-k">&gt;</span> x<span class="pl-k">*</span>y
a<span class="pl-k">^</span><span class="pl-c1">2</span></pre></div>
<h2 dir="auto"><a id="user-content-fpgroup" class="anchor" aria-hidden="true" href="#fpgroup"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>FPGroup</h2>
<p dir="auto">Let's create a quotient of the free group above:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; ε = one(F)
(id)

julia&gt; G = FPGroup(F, [a^2 =&gt; ε, b^3=&gt; ε, (a*b)^7=&gt;ε, (a*b*a*inv(b))^6 =&gt; ε, commutator(a, c) =&gt; ε, commutator(b, c) =&gt; ε ], max_rules=100)
┌ Warning: Maximum number of rules (100) reached.
│ The rewriting system may not be confluent.
│ You may retry `knuthbendix` with a larger `max_rules` kwarg.
└ @ KnuthBendix ~/.julia/packages/KnuthBendix/6ME1b/src/knuthbendix_base.jl:8
Finitely presented group generated by:
        { a  b  c },
subject to relations:
                                             a^2 =&gt; (id)
                                             b^3 =&gt; (id)
                     a*b*a*b*a*b*a*b*a*b*a*b*a*b =&gt; (id)
 a*b*a*B*a*b*a*B*a*b*a*B*a*b*a*B*a*b*a*B*a*b*a*B =&gt; (id)
                                         A*C*a*c =&gt; (id)
                                         B*C*b*c =&gt; (id)"><pre>julia<span class="pl-k">&gt;</span> ε <span class="pl-k">=</span> <span class="pl-c1">one</span>(F)
(id)

julia<span class="pl-k">&gt;</span> G <span class="pl-k">=</span> <span class="pl-c1">FPGroup</span>(F, [a<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">=&gt;</span> ε, b<span class="pl-k">^</span><span class="pl-c1">3</span><span class="pl-k">=&gt;</span> ε, (a<span class="pl-k">*</span>b)<span class="pl-k">^</span><span class="pl-c1">7</span><span class="pl-k">=&gt;</span>ε, (a<span class="pl-k">*</span>b<span class="pl-k">*</span>a<span class="pl-k">*</span><span class="pl-c1">inv</span>(b))<span class="pl-k">^</span><span class="pl-c1">6</span> <span class="pl-k">=&gt;</span> ε, <span class="pl-c1">commutator</span>(a, c) <span class="pl-k">=&gt;</span> ε, <span class="pl-c1">commutator</span>(b, c) <span class="pl-k">=&gt;</span> ε ], max_rules<span class="pl-k">=</span><span class="pl-c1">100</span>)
┌ Warning<span class="pl-k">:</span> Maximum number of rules (<span class="pl-c1">100</span>) reached.
│ The rewriting system may not be confluent.
│ You may retry <span class="pl-s"><span class="pl-pds">`</span>knuthbendix<span class="pl-pds">`</span></span> with a larger <span class="pl-s"><span class="pl-pds">`</span>max_rules<span class="pl-pds">`</span></span> kwarg.
└ @ KnuthBendix <span class="pl-k">~</span><span class="pl-k">/</span><span class="pl-k">.</span>julia<span class="pl-k">/</span>packages<span class="pl-k">/</span>KnuthBendix<span class="pl-k">/</span><span class="pl-c1">6</span>ME1b<span class="pl-k">/</span>src<span class="pl-k">/</span>knuthbendix_base<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">8</span>
Finitely presented group generated by<span class="pl-k">:</span>
        { a  b  c },
subject to relations<span class="pl-k">:</span>
                                             a<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">=&gt;</span> (id)
                                             b<span class="pl-k">^</span><span class="pl-c1">3</span> <span class="pl-k">=&gt;</span> (id)
                     a<span class="pl-k">*</span>b<span class="pl-k">*</span>a<span class="pl-k">*</span>b<span class="pl-k">*</span>a<span class="pl-k">*</span>b<span class="pl-k">*</span>a<span class="pl-k">*</span>b<span class="pl-k">*</span>a<span class="pl-k">*</span>b<span class="pl-k">*</span>a<span class="pl-k">*</span>b<span class="pl-k">*</span>a<span class="pl-k">*</span>b <span class="pl-k">=&gt;</span> (id)
 a<span class="pl-k">*</span>b<span class="pl-k">*</span>a<span class="pl-k">*</span>B<span class="pl-k">*</span>a<span class="pl-k">*</span>b<span class="pl-k">*</span>a<span class="pl-k">*</span>B<span class="pl-k">*</span>a<span class="pl-k">*</span>b<span class="pl-k">*</span>a<span class="pl-k">*</span>B<span class="pl-k">*</span>a<span class="pl-k">*</span>b<span class="pl-k">*</span>a<span class="pl-k">*</span>B<span class="pl-k">*</span>a<span class="pl-k">*</span>b<span class="pl-k">*</span>a<span class="pl-k">*</span>B<span class="pl-k">*</span>a<span class="pl-k">*</span>b<span class="pl-k">*</span>a<span class="pl-k">*</span>B <span class="pl-k">=&gt;</span> (id)
                                         A<span class="pl-k">*</span>C<span class="pl-k">*</span>a<span class="pl-k">*</span>c <span class="pl-k">=&gt;</span> (id)
                                         B<span class="pl-k">*</span>C<span class="pl-k">*</span>b<span class="pl-k">*</span>c <span class="pl-k">=&gt;</span> (id)</pre></div>
<p dir="auto">As you can see from the warning, the Knuth-Bendix procedure has not completed successfully. This means that we only are able to <strong>approximate the word problem</strong> in <code>G</code>, i.e. if the equality (<code>==</code>) of two group elements may return <code>false</code> even if group elements are equal. Let us try with a larger maximal number of rules in the underlying rewriting system.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; G = FPGroup(F, [a^2 =&gt; ε, b^3=&gt; ε, (a*b)^7=&gt;ε, (a*b*a*inv(b))^6 =&gt; ε, commutator(a, c) =&gt; ε, commutator(b, c) =&gt; ε ], max_rules=500)
Finitely presented group generated by:
        { a  b  c },
subject to relations:
                                             a^2 =&gt; (id)
                                             b^3 =&gt; (id)
                     a*b*a*b*a*b*a*b*a*b*a*b*a*b =&gt; (id)
 a*b*a*B*a*b*a*B*a*b*a*B*a*b*a*B*a*b*a*B*a*b*a*B =&gt; (id)
                                         A*C*a*c =&gt; (id)
                                         B*C*b*c =&gt; (id)
"><pre>julia<span class="pl-k">&gt;</span> G <span class="pl-k">=</span> <span class="pl-c1">FPGroup</span>(F, [a<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">=&gt;</span> ε, b<span class="pl-k">^</span><span class="pl-c1">3</span><span class="pl-k">=&gt;</span> ε, (a<span class="pl-k">*</span>b)<span class="pl-k">^</span><span class="pl-c1">7</span><span class="pl-k">=&gt;</span>ε, (a<span class="pl-k">*</span>b<span class="pl-k">*</span>a<span class="pl-k">*</span><span class="pl-c1">inv</span>(b))<span class="pl-k">^</span><span class="pl-c1">6</span> <span class="pl-k">=&gt;</span> ε, <span class="pl-c1">commutator</span>(a, c) <span class="pl-k">=&gt;</span> ε, <span class="pl-c1">commutator</span>(b, c) <span class="pl-k">=&gt;</span> ε ], max_rules<span class="pl-k">=</span><span class="pl-c1">500</span>)
Finitely presented group generated by<span class="pl-k">:</span>
        { a  b  c },
subject to relations<span class="pl-k">:</span>
                                             a<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">=&gt;</span> (id)
                                             b<span class="pl-k">^</span><span class="pl-c1">3</span> <span class="pl-k">=&gt;</span> (id)
                     a<span class="pl-k">*</span>b<span class="pl-k">*</span>a<span class="pl-k">*</span>b<span class="pl-k">*</span>a<span class="pl-k">*</span>b<span class="pl-k">*</span>a<span class="pl-k">*</span>b<span class="pl-k">*</span>a<span class="pl-k">*</span>b<span class="pl-k">*</span>a<span class="pl-k">*</span>b<span class="pl-k">*</span>a<span class="pl-k">*</span>b <span class="pl-k">=&gt;</span> (id)
 a<span class="pl-k">*</span>b<span class="pl-k">*</span>a<span class="pl-k">*</span>B<span class="pl-k">*</span>a<span class="pl-k">*</span>b<span class="pl-k">*</span>a<span class="pl-k">*</span>B<span class="pl-k">*</span>a<span class="pl-k">*</span>b<span class="pl-k">*</span>a<span class="pl-k">*</span>B<span class="pl-k">*</span>a<span class="pl-k">*</span>b<span class="pl-k">*</span>a<span class="pl-k">*</span>B<span class="pl-k">*</span>a<span class="pl-k">*</span>b<span class="pl-k">*</span>a<span class="pl-k">*</span>B<span class="pl-k">*</span>a<span class="pl-k">*</span>b<span class="pl-k">*</span>a<span class="pl-k">*</span>B <span class="pl-k">=&gt;</span> (id)
                                         A<span class="pl-k">*</span>C<span class="pl-k">*</span>a<span class="pl-k">*</span>c <span class="pl-k">=&gt;</span> (id)
                                         B<span class="pl-k">*</span>C<span class="pl-k">*</span>b<span class="pl-k">*</span>c <span class="pl-k">=&gt;</span> (id)
</pre></div>
<p dir="auto">This time there was no warning, i.e. Knuth-Bendix completion was successful and we may treat the equality (<code>==</code>) as the <strong>true mathematical equality</strong>. Note that <code>G</code> is the direct product of <code>ℤ = ⟨ c ⟩</code> and a quotient of van Dyck <code>(2,3,7)</code>-group. Let's create a random word and reduce it as an element of <code>G</code>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using Random; Random.seed!(1); w = Groups.Word(rand(1:length(A), 16));

julia&gt; length(w), w # word of itself
(16, 1·3·5·4·6·2·5·5·5·2·4·3·2·1·4·4)

julia&gt; f = F(w) # freely reduced w
a*b*c*B*C*A*c^3*A*B^2

julia&gt; length(word(f)), word(f) # the underlying word in F
(12, 1·3·5·4·6·2·5·5·5·2·4·4)

julia&gt; g = G(w) # w as an element of G
a*b*c^3

julia&gt; length(word(g)), word(g) # the underlying word in G
(5, 1·3·5·5·5)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Random; Random<span class="pl-k">.</span><span class="pl-c1">seed!</span>(<span class="pl-c1">1</span>); w <span class="pl-k">=</span> Groups<span class="pl-k">.</span><span class="pl-c1">Word</span>(<span class="pl-c1">rand</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">length</span>(A), <span class="pl-c1">16</span>));

julia<span class="pl-k">&gt;</span> <span class="pl-c1">length</span>(w), w <span class="pl-c"><span class="pl-c">#</span> word of itself</span>
(<span class="pl-c1">16</span>, <span class="pl-c1">1</span>·<span class="pl-c1">3</span>·<span class="pl-c1">5</span>·<span class="pl-c1">4</span>·<span class="pl-c1">6</span>·<span class="pl-c1">2</span>·<span class="pl-c1">5</span>·<span class="pl-c1">5</span>·<span class="pl-c1">5</span>·<span class="pl-c1">2</span>·<span class="pl-c1">4</span>·<span class="pl-c1">3</span>·<span class="pl-c1">2</span>·<span class="pl-c1">1</span>·<span class="pl-c1">4</span>·<span class="pl-c1">4</span>)

julia<span class="pl-k">&gt;</span> f <span class="pl-k">=</span> <span class="pl-c1">F</span>(w) <span class="pl-c"><span class="pl-c">#</span> freely reduced w</span>
a<span class="pl-k">*</span>b<span class="pl-k">*</span>c<span class="pl-k">*</span>B<span class="pl-k">*</span>C<span class="pl-k">*</span>A<span class="pl-k">*</span>c<span class="pl-k">^</span><span class="pl-c1">3</span><span class="pl-k">*</span>A<span class="pl-k">*</span>B<span class="pl-k">^</span><span class="pl-c1">2</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">length</span>(<span class="pl-c1">word</span>(f)), <span class="pl-c1">word</span>(f) <span class="pl-c"><span class="pl-c">#</span> the underlying word in F</span>
(<span class="pl-c1">12</span>, <span class="pl-c1">1</span>·<span class="pl-c1">3</span>·<span class="pl-c1">5</span>·<span class="pl-c1">4</span>·<span class="pl-c1">6</span>·<span class="pl-c1">2</span>·<span class="pl-c1">5</span>·<span class="pl-c1">5</span>·<span class="pl-c1">5</span>·<span class="pl-c1">2</span>·<span class="pl-c1">4</span>·<span class="pl-c1">4</span>)

julia<span class="pl-k">&gt;</span> g <span class="pl-k">=</span> <span class="pl-c1">G</span>(w) <span class="pl-c"><span class="pl-c">#</span> w as an element of G</span>
a<span class="pl-k">*</span>b<span class="pl-k">*</span>c<span class="pl-k">^</span><span class="pl-c1">3</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">length</span>(<span class="pl-c1">word</span>(g)), <span class="pl-c1">word</span>(g) <span class="pl-c"><span class="pl-c">#</span> the underlying word in G</span>
(<span class="pl-c1">5</span>, <span class="pl-c1">1</span>·<span class="pl-c1">3</span>·<span class="pl-c1">5</span>·<span class="pl-c1">5</span>·<span class="pl-c1">5</span>)</pre></div>
<p dir="auto">As we can see the underlying words change according to where they are reduced.
Note that a word <code>w</code> (of type <code>Word &lt;: AbstractWord</code>) is just a sequence of numbers -- indices of letters of an <code>Alphabet</code>. Without the alphabet <code>w</code> has no intrinsic meaning.</p>
<h2 dir="auto"><a id="user-content-automorphism-groups" class="anchor" aria-hidden="true" href="#automorphism-groups"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Automorphism Groups</h2>
<p dir="auto">Relatively complete is the support for the automorphisms of free groups generated by transvections (or Nielsen generators):</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; saut = SpecialAutomorphismGroup(F, max_rules=1000)
automorphism group of free group on 3 generators

julia&gt; S = gens(saut)
12-element Vector{Automorphism{FreeGroup{Symbol, KnuthBendix.LenLex{Symbol}}, …}}:
 ϱ₁.₂
 ϱ₁.₃
 ϱ₂.₁
 ϱ₂.₃
 ϱ₃.₁
 ϱ₃.₂
 λ₁.₂
 λ₁.₃
 λ₂.₁
 λ₂.₃
 λ₃.₁
 λ₃.₂

julia&gt; x, y, z = S[1], S[12], S[6];

julia&gt; f = x*y*inv(z);

julia&gt; g = inv(z)*y*x;

julia&gt; word(f), word(g)
(1·23·12, 12·23·1)
"><pre>julia<span class="pl-k">&gt;</span> saut <span class="pl-k">=</span> <span class="pl-c1">SpecialAutomorphismGroup</span>(F, max_rules<span class="pl-k">=</span><span class="pl-c1">1000</span>)
automorphism group of free group on <span class="pl-c1">3</span> generators

julia<span class="pl-k">&gt;</span> S <span class="pl-k">=</span> <span class="pl-c1">gens</span>(saut)
<span class="pl-c1">12</span><span class="pl-k">-</span>element Vector{Automorphism{FreeGroup{Symbol, KnuthBendix<span class="pl-k">.</span>LenLex{Symbol}}, …}}<span class="pl-k">:</span>
 ϱ₁.₂
 ϱ₁.₃
 ϱ₂.₁
 ϱ₂.₃
 ϱ₃.₁
 ϱ₃.₂
 λ₁.₂
 λ₁.₃
 λ₂.₁
 λ₂.₃
 λ₃.₁
 λ₃.₂

julia<span class="pl-k">&gt;</span> x, y, z <span class="pl-k">=</span> S[<span class="pl-c1">1</span>], S[<span class="pl-c1">12</span>], S[<span class="pl-c1">6</span>];

julia<span class="pl-k">&gt;</span> f <span class="pl-k">=</span> x<span class="pl-k">*</span>y<span class="pl-k">*</span><span class="pl-c1">inv</span>(z);

julia<span class="pl-k">&gt;</span> g <span class="pl-k">=</span> <span class="pl-c1">inv</span>(z)<span class="pl-k">*</span>y<span class="pl-k">*</span>x;

julia<span class="pl-k">&gt;</span> <span class="pl-c1">word</span>(f), <span class="pl-c1">word</span>(g)
(<span class="pl-c1">1</span>·<span class="pl-c1">23</span>·<span class="pl-c1">12</span>, <span class="pl-c1">12</span>·<span class="pl-c1">23</span>·<span class="pl-c1">1</span>)
</pre></div>
<p dir="auto">Even though there is no known finite, confluent rewriting system for automorphism groupsof the free group (so Knuth-Bendix did not finish successfully) we have another ace in our sleeve to solve the word problem: evaluation.
Lets have a look at the images of generators under those automorphisms:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; evaluate(f) # or to be more verbose...
(a*b, b, b*c*B)

julia&gt; Groups.domain(g)
(a, b, c)

julia&gt; Groups.evaluate!(Groups.domain(g), g)
(a*b, b, b*c*B)
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">evaluate</span>(f) <span class="pl-c"><span class="pl-c">#</span> or to be more verbose...</span>
(a<span class="pl-k">*</span>b, b, b<span class="pl-k">*</span>c<span class="pl-k">*</span>B)

julia<span class="pl-k">&gt;</span> Groups<span class="pl-k">.</span><span class="pl-c1">domain</span>(g)
(a, b, c)

julia<span class="pl-k">&gt;</span> Groups<span class="pl-k">.</span><span class="pl-c1">evaluate!</span>(Groups<span class="pl-k">.</span><span class="pl-c1">domain</span>(g), g)
(a<span class="pl-k">*</span>b, b, b<span class="pl-k">*</span>c<span class="pl-k">*</span>B)
</pre></div>
<p dir="auto">Since these automorphism map the standard generating set to the same new generating set, they should be considered as equal! And indeed they are:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; f == g
true"><pre>julia<span class="pl-k">&gt;</span> f <span class="pl-k">==</span> g
<span class="pl-c1">true</span></pre></div>
<p dir="auto">This is what is happening behind the scenes:</p>
<ol dir="auto">
<li>words are reduced using a rewriting system</li>
<li>if resulting words are equal <code>true</code> is returned</li>
<li>if they are not equal <code>Groups.equality_data</code> is computed for each argument (here: the images of generators) and the result of comparison is returned.</li>
</ol>
<p dir="auto">Moreover we try to amortize the cost of computing those images. That is a hash of <code>equality_daata</code> is lazily stored in each group element and used as needed. Essentially only if <code>true</code> is returned, but comparison of words returns <code>false</code> recomputation of images is needed (to guard against hash collisions).</p>
<hr>
<p dir="auto">This package was developed for computations in <a href="https://arxiv.org/abs/1712.07167" rel="nofollow">1712.07167</a> and in <a href="https://arxiv.org/abs/1812.03456" rel="nofollow">1812.03456</a>. If you happen to use this package please cite either of them.</p>
</article></div>