<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-galoisfieldsjl---finite-fields-for-julia" class="anchor" aria-hidden="true" href="#galoisfieldsjl---finite-fields-for-julia"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>GaloisFields.jl - finite fields for Julia</h1>
<table>
<thead>
<tr>
<th align="center"><strong>Build Status</strong></th>
<th align="center"><strong>Test coverage</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><a href="https://travis-ci.org/tkluck/GaloisFields.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/c8c59c1fddcfffe9e99c61f9bee60799914f8cb0/68747470733a2f2f7472617669732d63692e6f72672f746b6c75636b2f47616c6f69734669656c64732e6a6c2e7376673f6272616e63683d6d6173746572" alt="" data-canonical-src="https://travis-ci.org/tkluck/GaloisFields.jl.svg?branch=master" style="max-width:100%;"></a> <a href="https://ci.appveyor.com/project/tkluck/galoisfields-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/dee19e970f96a2ba00ac972b1c0a71bc7d4764ab/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f3734746930637837686f6e6b3832796a3f7376673d74727565" alt="" data-canonical-src="https://ci.appveyor.com/api/projects/status/74ti0cx7honk82yj?svg=true" style="max-width:100%;"></a></td>
<td align="center"><a href="https://codecov.io/gh/tkluck/GaloisFields.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/56076a69de41a695be82926d40422a8187037864/68747470733a2f2f636f6465636f762e696f2f67682f746b6c75636b2f47616c6f69734669656c64732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage Status" data-canonical-src="https://codecov.io/gh/tkluck/GaloisFields.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></td>
</tr>
</tbody>
</table>
<h2><a id="user-content-introduction" class="anchor" aria-hidden="true" href="#introduction"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Introduction</h2>
<p>This module defines types representing <a href="https://en.wikipedia.org/wiki/Finite_field" rel="nofollow">finite fields</a>. It
supports both fields of prime order and of prime power order.</p>
<h2><a id="user-content-synopsis" class="anchor" aria-hidden="true" href="#synopsis"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Synopsis</h2>
<p>The easiest way to create Galois fields is with the <code>@GaloisField</code> and <code>@GaloisField!</code>
macros. Typically, you use the former for a field of prime order and the latter
for a field of prime power order. In the prime power case, you pass a display
name / variable name for the primitive element.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> GaloisFields

<span class="pl-k">const</span> F <span class="pl-k">=</span> <span class="pl-c1">@GaloisField</span> <span class="pl-c1">29</span>     <span class="pl-c"><span class="pl-c">#</span> ‚Ñ§/29‚Ñ§</span>
<span class="pl-k">const</span> G <span class="pl-k">=</span> <span class="pl-c1">@GaloisField!</span> <span class="pl-c1">27</span> Œ≤   <span class="pl-c"><span class="pl-c">#</span> degree-3 extension of ‚Ñ§/3‚Ñ§; multiplicatively generated by Œ≤</span>

<span class="pl-c1">F</span>(<span class="pl-c1">2</span>)<span class="pl-k">^</span><span class="pl-c1">29</span> <span class="pl-k">==</span> <span class="pl-c1">F</span>(<span class="pl-c1">2</span>)
Œ≤<span class="pl-k">^</span><span class="pl-c1">27</span> <span class="pl-k">==</span> Œ≤</pre></div>
<p>The exclamation mark <code>!</code> is intended to convey that the macro has a side-effect:
for example, in the code above, it assigns a variable called <code>Œ≤</code>.</p>
<p>The macros also accept special symbols for specifying the field. This is more
difficult to type (<a href="https://docs.julialang.org/en/v1.1/manual/unicode-input/#Unicode-Input-1" rel="nofollow">docs</a>) but more elegant to read:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">const</span> F <span class="pl-k">=</span> <span class="pl-c1">@GaloisField</span> ‚Ñ§<span class="pl-k">/</span><span class="pl-c1">29</span>‚Ñ§
<span class="pl-k">const</span> G <span class="pl-k">=</span> <span class="pl-c1">@GaloisField</span> ùîΩ‚ÇÇ‚Çá Œ≤</pre></div>
<p>If you want to pass your own generator for the representation of a field
of order <code>q = p^n</code>, you can:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">const</span> F <span class="pl-k">=</span> <span class="pl-c1">@GaloisField!</span> ùîΩ‚ÇÉ Œ≤<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">+</span> Œ≤ <span class="pl-k">+</span> <span class="pl-c1">2</span>
Œ≤<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">+</span> Œ≤ <span class="pl-k">+</span> <span class="pl-c1">2</span> <span class="pl-k">==</span> <span class="pl-c1">0</span></pre></div>
<p>Lastly, there's also function interfaces in cases where macros are not
appropriate:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">const</span> F <span class="pl-k">=</span> <span class="pl-c1">GaloisField</span>(<span class="pl-c1">29</span>)               <span class="pl-c"><span class="pl-c">#</span> ‚Ñ§/29‚Ñ§</span>
<span class="pl-k">const</span> G, Œ≤ <span class="pl-k">=</span> <span class="pl-c1">GaloisField</span>(<span class="pl-c1">81</span>, :Œ≤)        <span class="pl-c"><span class="pl-c">#</span> degree-4 extension of ‚Ñ§/3‚Ñ§</span>
<span class="pl-k">const</span> G, Œ≤ <span class="pl-k">=</span> <span class="pl-c1">GaloisField</span>(<span class="pl-c1">3</span>, <span class="pl-c1">4</span>, :Œ≤)      <span class="pl-c"><span class="pl-c">#</span> same; avoid having to factorize 81</span>
<span class="pl-k">const</span> F, Œ≤ <span class="pl-k">=</span> <span class="pl-c1">GaloisField</span>(<span class="pl-c1">3</span>, :Œ≤ <span class="pl-k">=&gt;</span> [<span class="pl-c1">2</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">2</span>, <span class="pl-c1">1</span>]) <span class="pl-c"><span class="pl-c">#</span> same; pass our own custom minimum polynomial</span></pre></div>
<h2><a id="user-content-fast-multiplications" class="anchor" aria-hidden="true" href="#fast-multiplications"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Fast multiplications</h2>
<p>In some cases, we make use of <a href="https://en.wikipedia.org/wiki/Zech's_logarithm" rel="nofollow">Zech's logarithms</a> for faster multiplications.
By default, this happens if the order of the field is less than <code>2^16</code>, if the
characteristic is not 2, and if the primitive element is also a multiplicative
generator. However, you can override this by calling either of</p>
<div class="highlight highlight-source-julia"><pre>GaloisFields<span class="pl-k">.</span><span class="pl-c1">enable_zech_multiplication</span>(F)
GaloisFields<span class="pl-k">.</span><span class="pl-c1">disable_zech_multiplication</span>(F)</pre></div>
<p><em>before</em> doing any multiplication operation. If you call this function on a
field whose primitive element is <em>not</em> a multiplicative generator, this will
throw a warning.</p>
<h2><a id="user-content-conversions" class="anchor" aria-hidden="true" href="#conversions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Conversions</h2>
<p>If you specify your own minimum polynomial, we make no assumptions about
conversions between fields. For example, when defining</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">const</span> F <span class="pl-k">=</span> <span class="pl-c1">@GaloisField!</span> ùîΩ‚ÇÇ Œ≤<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">+</span> Œ≤ <span class="pl-k">+</span> <span class="pl-c1">1</span>
<span class="pl-k">const</span> G <span class="pl-k">=</span> <span class="pl-c1">@GaloisField!</span> ùîΩ‚ÇÇ Œ≥<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">+</span> Œ≥ <span class="pl-k">+</span> <span class="pl-c1">1</span></pre></div>
<p>an operation like</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">G</span>(Œ≤)</pre></div>
<p>will throw an error. The mathematical reason is that  the fields <code>F</code> and <code>G</code>
are isomorphic, but there is two different isomorphisms. ("They are not <em>canonically</em>
isomorphic.") To choose an identification, you can use the <code>identify</code> function
(which is not exported by default, so we use its full path):</p>
<div class="highlight highlight-source-julia"><pre>GaloisFields<span class="pl-k">.</span><span class="pl-c1">identify</span>(Œ≤ <span class="pl-k">=&gt;</span> Œ≥<span class="pl-k">^</span><span class="pl-c1">2</span>)
GaloisFields<span class="pl-k">.</span><span class="pl-c1">identify</span>(Œ≥ <span class="pl-k">=&gt;</span> Œ≤<span class="pl-k">^</span><span class="pl-c1">2</span>)</pre></div>
<p>This allows for conversions such as</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">G</span>(Œ≤)
<span class="pl-c1">convert</span>(F, Œ≥ <span class="pl-k">+</span> <span class="pl-c1">1</span>)</pre></div>
<p>The inner workings of this distinction are based on the symbol names. So
if you define <code>F</code> and <code>G</code> with the <em>same</em> symbol and minimum polynomial:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">const</span> F <span class="pl-k">=</span> <span class="pl-c1">@GaloisField!</span> ùîΩ‚ÇÇ Œ≤<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">+</span> Œ≤ <span class="pl-k">+</span> <span class="pl-c1">1</span>
<span class="pl-k">const</span> G <span class="pl-k">=</span> <span class="pl-c1">@GaloisField!</span> ùîΩ‚ÇÇ Œ≤<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">+</span> Œ≤ <span class="pl-k">+</span> <span class="pl-c1">1</span></pre></div>
<p>then they are just considered equal and conversions work without extra work.</p>
<h2><a id="user-content-conversions-for-the-default-minimum-polynomials" class="anchor" aria-hidden="true" href="#conversions-for-the-default-minimum-polynomials"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Conversions for the default minimum polynomials</h2>
<p>If you do not specify a minimum polynomial, for example by using</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">const</span> F <span class="pl-k">=</span> <span class="pl-c1">@GaloisField!</span> ùîΩ‚Çà‚ÇÅ Œ≤
<span class="pl-k">const</span> G <span class="pl-k">=</span> <span class="pl-c1">@GaloisField!</span> ùîΩ‚Çâ Œ≥</pre></div>
<p>then we use <a href="https://en.wikipedia.org/wiki/Conway_polynomial_(finite_fields)" rel="nofollow">Conway polynomials</a>. They have special compatibility
relations between them, allowing conversions:</p>
<div class="highlight highlight-source-julia"><pre>Œ≤<span class="pl-k">^</span><span class="pl-c1">10</span> <span class="pl-k">==</span> Œ≥</pre></div>
<p>This works provided <code>F</code> and <code>G</code> have the same characteristic <code>p</code>. If the order
of either is a power of the other, we convert into the bigger field. If not, we
convert both into the field of order <code>p^N</code>, where <code>N</code> is the least common
multiple of the extension degrees of <code>F</code> and <code>G</code> over ‚Ñ§/p‚Ñ§.</p>
<h2><a id="user-content-constructing-a-tower-of-field-extensions" class="anchor" aria-hidden="true" href="#constructing-a-tower-of-field-extensions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Constructing a tower of field extensions</h2>
<p>In some applications of finite fields it is convenient to use extensions
of already defined finite field, i. e. the extensions of the type
<code>G</code> of power <code>q^m</code> over <code>F</code> of power <code>q</code> where <code>q = p^n</code> for some integers <code>m, n</code>.
It is possible to construct an extension of already defined finite field:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span> creating field with 29 elements</span>
F <span class="pl-k">=</span> <span class="pl-c1">@GaloisField</span> <span class="pl-c1">29</span>
<span class="pl-c"><span class="pl-c">#</span> the polynom x^2 - 2 is irreducible over F29</span>
G <span class="pl-k">=</span> <span class="pl-c1">@GaloisField!</span> F x<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">-</span> <span class="pl-c1">2</span>
<span class="pl-c"><span class="pl-c">#</span> the polynom y^3 + 2y - 2 if irreducible over G</span>
H <span class="pl-k">=</span> <span class="pl-c1">@GaloisField!</span> G   y<span class="pl-k">^</span><span class="pl-c1">3</span> <span class="pl-k">+</span> <span class="pl-c1">2</span>y <span class="pl-k">-</span> <span class="pl-c1">2</span>
<span class="pl-c"><span class="pl-c">#</span> G is a subfield of H</span>
<span class="pl-c"><span class="pl-c">#</span> H has |G|^3 elements</span></pre></div>
<h2><a id="user-content-acknowledgements" class="anchor" aria-hidden="true" href="#acknowledgements"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Acknowledgements</h2>
<p>This package uses <a href="http://www.math.rwth-aachen.de/~Frank.Luebeck/index.html" rel="nofollow">Frank L√ºbeck's</a> <a href="http://www.math.rwth-aachen.de/~Frank.Luebeck/data/ConwayPol/index.html?LANG=en" rel="nofollow">database of Conway polynomials</a>.
For security, we make a <a href="https://gist.githubusercontent.com/tkluck/e1cd1746c69aa17e4a37114d22649627/raw/7fbe9763fae27f14924262ad03606f1c3af4400e/CPImport.txt" rel="nofollow">copy available over https</a> for this package.
It is downloaded as part of the install process.</p>
</article></div>