<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-pomdpmodels" class="anchor" aria-hidden="true" href="#pomdpmodels"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>POMDPModels</h1>
<p dir="auto"><a href="https://github.com/JuliaPOMDP/POMDPModels.jl/actions/workflows/CI.yml"><img src="https://github.com/JuliaPOMDP/POMDPModels.jl/actions/workflows/CI.yml/badge.svg" alt="CI" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/JuliaPOMDP/POMDPModels.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/6b94ea3342ca9631f67d336889f123f2afbecf23a11d3ffe69a69a1c23e698fa/68747470733a2f2f636f6465636f762e696f2f67682f4a756c6961504f4d44502f504f4d44504d6f64656c732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e7376673f746f6b656e3d78504c69545033495674" alt="codecov" data-canonical-src="https://codecov.io/gh/JuliaPOMDP/POMDPModels.jl/branch/master/graph/badge.svg?token=xPLiTP3IVt" style="max-width: 100%;"></a></p>
<p dir="auto">This package provides the following models for POMDPs.jl:</p>
<ul dir="auto">
<li><a href="src/gridworld.jl">SimpleGridWorld</a></li>
<li><a href="src/TigerPOMDPs.jl">Tiger</a></li>
<li><a href="src/CryingBabies.jl">Crying Baby</a></li>
<li><a href="src/Random.jl">Random</a></li>
<li><a href="src/MountainCar.jl">Mountain Car</a></li>
<li><a href="src/InvertedPendulum.jl">Inverted Pendulum</a></li>
<li><a href="src/TMazes.jl">T-Maze</a></li>
<li><a href="src/MiniHallway.jl">MiniHallway</a></li>
<li><a href="src/LightDark.jl">LightDark</a></li>
<li><a href="src/Tabular.jl">Tabular</a></li>
</ul>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<p dir="auto">To use POMDPModels, simply load it and initialize a model. Note: to interact with the models using the POMDPs.jl interface, you must also import POMDPs. The model supports the basic functions required by many of the JuliaPOMDP solvers. For example:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using POMDPs
using POMDPModels

pomdp = TigerPOMDP()
# do what you would do with a POMDP model, for example use QMDP to solve it
using QMDP
solver = QMDPSolver()
policy = solve(solver, pomdp) # compute a pomdp policy"><pre><span class="pl-k">using</span> POMDPs
<span class="pl-k">using</span> POMDPModels

pomdp <span class="pl-k">=</span> <span class="pl-c1">TigerPOMDP</span>()
<span class="pl-c"><span class="pl-c">#</span> do what you would do with a POMDP model, for example use QMDP to solve it</span>
<span class="pl-k">using</span> QMDP
solver <span class="pl-k">=</span> <span class="pl-c1">QMDPSolver</span>()
policy <span class="pl-k">=</span> <span class="pl-c1">solve</span>(solver, pomdp) <span class="pl-c"><span class="pl-c">#</span> compute a pomdp policy</span></pre></div>
<p dir="auto">You can initialize the other pomdp types in the module in the following way:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using POMDPModels

pomdp = TigerPOMDP()
pomdp = BabyPOMDP()
pomdp = RandomPOMDP()

mdp = GridWorld()
mdp = RandomMDP()"><pre><span class="pl-k">using</span> POMDPModels

pomdp <span class="pl-k">=</span> <span class="pl-c1">TigerPOMDP</span>()
pomdp <span class="pl-k">=</span> <span class="pl-c1">BabyPOMDP</span>()
pomdp <span class="pl-k">=</span> <span class="pl-c1">RandomPOMDP</span>()

mdp <span class="pl-k">=</span> <span class="pl-c1">GridWorld</span>()
mdp <span class="pl-k">=</span> <span class="pl-c1">RandomMDP</span>()</pre></div>
</article></div>