<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-sherlogsjl" class="anchor" aria-hidden="true" href="#sherlogsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Sherlogs.jl</h1>
<p><a href="https://github.com/milankl/Sherlogs.jl/actions/workflows/CI.yml"><img src="https://github.com/milankl/Sherlogs.jl/actions/workflows/CI.yml/badge.svg" alt="CI" style="max-width:100%;"></a>
<a href="https://zenodo.org/badge/latestdoi/214412644" rel="nofollow"><img src="https://camo.githubusercontent.com/c374b6ea5b6f7f7a35ee89ec148b3f3019de957481f27a38c41fbc7f0087e880/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f3231343431323634342e737667" alt="DOI" data-canonical-src="https://zenodo.org/badge/214412644.svg" style="max-width:100%;"></a></p>
<p>If Sherlock Holmes was a number format.</p>
<p>Sherlogs.jl provides a number format <code>Sherlog64</code> that behaves like <code>Float64</code>, but inspects your code by logging all arithmetic results into a 16bit bitpattern histogram. On the fly.</p>
<p>What's the largest number occuring in your algorithm/model/function/package? What's the smallest? And is your code ready for 16bit? Sherlog will let you know.</p>
<p>A 32bit version is provided as <code>Sherlog32</code>, which behaves like <code>Float32</code>.
A 16bit version is provided as <code>Sherlog16{T}</code>, which uses <code>T</code> for computations as well as for logging. If <code>T</code> not provided it falls back to <code>Float16</code>.</p>
<h2><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example</h2>
<p>What are the numbers that occur when solving a linear equation system?</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using Sherlogs
julia&gt; A = Sherlog64.(rand(1000,1000));
julia&gt; b = Sherlog64.(rand(1000));
julia&gt; x = A\b;
julia&gt; lb = get_logbook()
65536-element LogBook(1091, 192, 234, 181, 206, … , 0, 0, 0, 0, 0, 0)
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Sherlogs
julia<span class="pl-k">&gt;</span> A <span class="pl-k">=</span> <span class="pl-c1">Sherlog64</span>.(<span class="pl-c1">rand</span>(<span class="pl-c1">1000</span>,<span class="pl-c1">1000</span>));
julia<span class="pl-k">&gt;</span> b <span class="pl-k">=</span> <span class="pl-c1">Sherlog64</span>.(<span class="pl-c1">rand</span>(<span class="pl-c1">1000</span>));
julia<span class="pl-k">&gt;</span> x <span class="pl-k">=</span> A<span class="pl-k">\</span>b;
julia<span class="pl-k">&gt;</span> lb <span class="pl-k">=</span> <span class="pl-c1">get_logbook</span>()
<span class="pl-c1">65536</span><span class="pl-k">-</span>element <span class="pl-c1">LogBook</span>(<span class="pl-c1">1091</span>, <span class="pl-c1">192</span>, <span class="pl-c1">234</span>, <span class="pl-c1">181</span>, <span class="pl-c1">206</span>, … , <span class="pl-c1">0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>)</pre></div>
<p><code>lb</code> is now a Float16 (by default) bitpattern histogram <code>LogBook</code>. This tells us for example that  0 - the zero bitpattern <code>0x00...00</code> (i.e. the first entry of <code>lb</code>) occured 1091 times in the LU decomposition (which is used in the \-operation). Use <code>get_logbook()</code> to retrieve the <code>LogBook</code>, use <code>reset_logbook()</code> to set the counters back to 0. Other 16bit number formats that are used as bins for the histogram can be used by specifying the parametric type <code>Sherlog64{T,i}</code>. The second parameter <code>i</code> (in 1:32) is an integer that specifies which logbook to use.</p>
<h2><a id="user-content-example-bitpattern-histogram" class="anchor" aria-hidden="true" href="#example-bitpattern-histogram"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example bitpattern histogram</h2>
<p><a target="_blank" rel="noopener noreferrer" href="figs/matrixsolve.png?raw=true"><img src="figs/matrixsolve.png?raw=true" alt="bitpattern" title="Bitpattern Histogram" style="max-width:100%;"></a></p>
<p>This is the bitpattern histogram for the uniformly distributed U(0,1) input data, once represented with <code>Float16</code> (blue). Using <code>Sherlog64</code> inside the solver <code>A\b</code>, creates a bitpattern histogram for that algorithm (LU-decomposition) (orange).
The x-axis is ranging from bitpattern <code>0x0000</code> to <code>0xffff</code> but for readability relabelled with the respective decimal numbers. The entropy is denoted with <code>H</code>. A uniform distribution has maximum entropy of 16bit. The script for this example can be found <a href="https://github.com/milankl/Sherlogs.jl/blob/master/example/matrix_solve.jl">here</a>)</p>
<h2><a id="user-content-performance" class="anchor" aria-hidden="true" href="#performance"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Performance</h2>
<p>Logging the arithmetic results comes with overhead (the allocations are just preallocations).</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using BenchmarkTools, Lorenz96, BFloat16s
julia&gt; @btime L96(Float32,N=100000);
  26.321 ms (200023 allocations: 97.66 MiB)
julia&gt; @btime L96(Sherlog32{BFloat16,1},N=100000);
  346.052 ms (200023 allocations: 97.66 MiB)
julia&gt; @btime L96(Sherlog32{Float16,1},N=100000);
  1.098 s (200023 allocations: 97.66 MiB)
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> BenchmarkTools, Lorenz96, BFloat16s
julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">L96</span>(Float32,N<span class="pl-k">=</span><span class="pl-c1">100000</span>);
  <span class="pl-c1">26.321</span> ms (<span class="pl-c1">200023</span> allocations<span class="pl-k">:</span> <span class="pl-c1">97.66</span> MiB)
julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">L96</span>(Sherlog32{BFloat16,<span class="pl-c1">1</span>},N<span class="pl-k">=</span><span class="pl-c1">100000</span>);
  <span class="pl-c1">346.052</span> ms (<span class="pl-c1">200023</span> allocations<span class="pl-k">:</span> <span class="pl-c1">97.66</span> MiB)
julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">L96</span>(Sherlog32{Float16,<span class="pl-c1">1</span>},N<span class="pl-k">=</span><span class="pl-c1">100000</span>);
  <span class="pl-c1">1.098</span> s (<span class="pl-c1">200023</span> allocations<span class="pl-k">:</span> <span class="pl-c1">97.66</span> MiB)</pre></div>
<p>which depends on the number system used for binning.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>Sherlogs is a registered package, so simply do</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; ] add Sherlogs
"><pre>julia<span class="pl-k">&gt;</span> ] add Sherlogs</pre></div>
<p>where <code>]</code> opens the package manager.</p>
</article></div>