<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><p><a href="https://www.repostatus.org/#active" rel="nofollow"><img src="https://camo.githubusercontent.com/d4be6350729a998160a3fe274a352bfe5644eaf2/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f7265706f5f7374617475732d6163746976652d627269676874677265656e" alt="Project Status: Active – The project has reached a stable, usable state and is being actively developed." data-canonical-src="https://img.shields.io/badge/repo_status-active-brightgreen" style="max-width:100%;"></a>
<a href="https://travis-ci.com/milankl/Sherlogs.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/69b6945bca5b5d6f8ed3efcbfe044adec09f050a/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f636f6d2f6d696c616e6b6c2f536865726c6f67732e6a6c3f6c6162656c3d4c696e75782532302532362532306f7378266c6f676f3d747261766973" alt="Travis" data-canonical-src="https://img.shields.io/travis/com/milankl/Sherlogs.jl?label=Linux%20%26%20osx&amp;logo=travis" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/milankl/Sherlogs-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/eb9fb11533bda41ce06ea03e336f10e8526a8b0f/68747470733a2f2f696d672e736869656c64732e696f2f6170707665796f722f63692f6d696c616e6b6c2f536865726c6f67732d6a6c3f6c6162656c3d57696e646f7773266c6f676f3d6170707665796f72266c6f676f436f6c6f723d7768697465" alt="AppVeyor" data-canonical-src="https://img.shields.io/appveyor/ci/milankl/Sherlogs-jl?label=Windows&amp;logo=appveyor&amp;logoColor=white" style="max-width:100%;"></a>
<a href="https://cirrus-ci.com/github/milankl/Sherlogs.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/2576e114b2d8614e0a2b2c0b44454e15808ba5ee/68747470733a2f2f696d672e736869656c64732e696f2f6369727275732f6769746875622f6d696c616e6b6c2f536865726c6f67732e6a6c3f6c6162656c3d46726565425344266c6f676f3d6369727275732d6369266c6f676f436f6c6f723d7768697465" alt="Cirrus CI" data-canonical-src="https://img.shields.io/cirrus/github/milankl/Sherlogs.jl?label=FreeBSD&amp;logo=cirrus-ci&amp;logoColor=white" style="max-width:100%;"></a>
<a href="https://zenodo.org/badge/latestdoi/214412644" rel="nofollow"><img src="https://camo.githubusercontent.com/06fdfdc538ac98e30d8acb079613748b81306e7c/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f3231343431323634342e737667" alt="DOI" data-canonical-src="https://zenodo.org/badge/214412644.svg" style="max-width:100%;"></a></p>
<h1><a id="user-content-sherlogsjl" class="anchor" aria-hidden="true" href="#sherlogsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Sherlogs.jl</h1>
<p>If Sherlock Holmes was a number format.</p>
<p>Sherlogs.jl provides a number format <code>Sherlog64</code> that behaves like <code>Float64</code>, but inspects your code by logging all arithmetic results into a 16bit bitpattern histogram. On the fly.</p>
<p>What's the largest number occuring in your algorithm/model/function/package? What's the smallest? And is your code ready for 16bit? Sherlog will let you know.</p>
<p>A 32bit version is provided as <code>Sherlog32</code>, which behaves like <code>Float32</code>.
A 16bit version is provided as <code>Sherlog16{T}</code>, which uses <code>T</code> for computations as well as for logging. If <code>T</code> not provided it falls back to <code>Float16</code>.</p>
<h1><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Example</h1>
<p>What are the numbers that occur when solving a linear equation system?</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Sherlogs
julia<span class="pl-k">&gt;</span> A <span class="pl-k">=</span> <span class="pl-c1">Sherlog64</span>.(<span class="pl-c1">rand</span>(<span class="pl-c1">1000</span>,<span class="pl-c1">1000</span>));
julia<span class="pl-k">&gt;</span> b <span class="pl-k">=</span> <span class="pl-c1">Sherlog64</span>.(<span class="pl-c1">rand</span>(<span class="pl-c1">1000</span>));
julia<span class="pl-k">&gt;</span> x <span class="pl-k">=</span> A<span class="pl-k">\</span>b;
julia<span class="pl-k">&gt;</span> lb <span class="pl-k">=</span> <span class="pl-c1">get_logbook</span>()
<span class="pl-c1">65536</span><span class="pl-k">-</span>element <span class="pl-c1">LogBook</span>(<span class="pl-c1">1091</span>, <span class="pl-c1">192</span>, <span class="pl-c1">234</span>, <span class="pl-c1">181</span>, <span class="pl-c1">206</span>, … , <span class="pl-c1">0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>)</pre></div>
<p><code>lb</code> is now a Float16 (by default) bitpattern histogram <code>LogBook</code>. This tells us for example that  0 - the zero bitpattern <code>0x00...00</code> (i.e. the first entry of <code>lb</code>) occured 1091 times in the LU decomposition (which is used in the \-operation). Use <code>get_logbook()</code> to retrieve the <code>LogBook</code>, use <code>reset_logbook()</code> to set the counters back to 0. Other 16bit number formats that are used as bins for the histogram can be used by specifying the parametric type <code>Sherlog64{T,i}</code>. The second parameter <code>i</code> (in 1:32) is an integer that specifies which logbook to use.</p>
<h1><a id="user-content-example-bitpattern-histogram" class="anchor" aria-hidden="true" href="#example-bitpattern-histogram"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Example bitpattern histogram</h1>
<p><a target="_blank" rel="noopener noreferrer" href="figs/matrixsolve.png?raw=true"><img src="figs/matrixsolve.png?raw=true" alt="bitpattern" title="Bitpattern Histogram" style="max-width:100%;"></a></p>
<p>This is the bitpattern histogram for the uniformly distributed U(0,1) input data, once represented with <code>Float16</code> (blue). Using <code>Sherlog64</code> inside the solver <code>A\b</code>, creates a bitpattern histogram for that algorithm (LU-decomposition) (orange).
The x-axis is ranging from bitpattern <code>0x0000</code> to <code>0xffff</code> but for readability relabelled with the respective decimal numbers. The entropy is denoted with <code>H</code>. A uniform distribution has maximum entropy of 16bit. The script for this example can be found <a href="https://github.com/milankl/Sherlogs.jl/blob/master/example/matrix_solve.jl">here</a>)</p>
<h1><a id="user-content-performance" class="anchor" aria-hidden="true" href="#performance"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Performance</h1>
<p>Logging the arithmetic results comes with overhead (the allocations are just preallocations).</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> BenchmarkTools, Lorenz96, BFloat16s
julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">L96</span>(Float32,N<span class="pl-k">=</span><span class="pl-c1">100000</span>);
  <span class="pl-c1">26.321</span> ms (<span class="pl-c1">200023</span> allocations<span class="pl-k">:</span> <span class="pl-c1">97.66</span> MiB)
julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">L96</span>(Sherlog32{BFloat16,<span class="pl-c1">1</span>},N<span class="pl-k">=</span><span class="pl-c1">100000</span>);
  <span class="pl-c1">346.052</span> ms (<span class="pl-c1">200023</span> allocations<span class="pl-k">:</span> <span class="pl-c1">97.66</span> MiB)
julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">L96</span>(Sherlog32{Float16,<span class="pl-c1">1</span>},N<span class="pl-k">=</span><span class="pl-c1">100000</span>);
  <span class="pl-c1">1.098</span> s (<span class="pl-c1">200023</span> allocations<span class="pl-k">:</span> <span class="pl-c1">97.66</span> MiB)</pre></div>
<p>which depends on the number system used for binning.</p>
<h1><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Installation</h1>
<p>Sherlogs is a registered package, do</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> ] add Sherlogs</pre></div>
</article></div>