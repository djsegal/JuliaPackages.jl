<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-tensorcorejl" class="anchor" aria-hidden="true" href="#tensorcorejl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>TensorCore.jl</h1>
<p dir="auto"><a href="https://JuliaMath.github.io/TensorCore.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/JuliaMath/TensorCore.jl/actions?query=workflow%3ACI"><img src="https://github.com/JuliaMath/TensorCore.jl/workflows/CI/badge.svg" alt="CI" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/JuliaMath/TensorCore.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/9ab09a4e159808f508dfa6c18952f8bb450d04ffa927404a1448fb144c73d84e/68747470733a2f2f636f6465636f762e696f2f67682f4a756c69614d6174682f54656e736f72436f72652e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/JuliaMath/TensorCore.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">This package is intended as a lightweight foundation for tensor operations across the Julia ecosystem.
Currently it exports three operations:</p>
<ul dir="auto">
<li><code>hadamard</code> elementwise multiplication, with unicode operator <code>⊙</code>,</li>
<li><code>tensor</code> product preserves all dimensions, operator <code>⊗</code>, and</li>
<li><code>boxdot</code> contracts neighbouring dimensions, named after the unicode <code>⊡</code>.</li>
</ul>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using TensorCore

julia&gt; A = [1 2 3; 4 5 6]; B = [7 8 9; 0 10 20];

julia&gt; A ⊙ B  # hadamard(A, B)
2×3 Matrix{Int64}:
 7  16   27
 0  50  120

julia&gt; V = [1, 10];

julia&gt; C = A ⊗ V  # tensor(A, V)
2×3×2 Array{Int64, 3}:
[:, :, 1] =
 1  2  3
 4  5  6

[:, :, 2] =
 10  20  30
 40  50  60

julia&gt; summary(A ⊗ B)
&quot;2×3×2×3 Array{Int64, 4}&quot;

julia&gt; C ⊡ V  # boxdot(C, V)
2×3 Matrix{Int64}:
 101  202  303
 404  505  606

julia&gt; summary(C ⊡ rand(2,5,7))
&quot;2×3×5×7 Array{Float64, 4}&quot;"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> TensorCore

julia<span class="pl-k">&gt;</span> A <span class="pl-k">=</span> [<span class="pl-c1">1</span> <span class="pl-c1">2</span> <span class="pl-c1">3</span>; <span class="pl-c1">4</span> <span class="pl-c1">5</span> <span class="pl-c1">6</span>]; B <span class="pl-k">=</span> [<span class="pl-c1">7</span> <span class="pl-c1">8</span> <span class="pl-c1">9</span>; <span class="pl-c1">0</span> <span class="pl-c1">10</span> <span class="pl-c1">20</span>];

julia<span class="pl-k">&gt;</span> A ⊙ B  <span class="pl-c"><span class="pl-c">#</span> hadamard(A, B)</span>
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">3</span> Matrix{Int64}<span class="pl-k">:</span>
 <span class="pl-c1">7</span>  <span class="pl-c1">16</span>   <span class="pl-c1">27</span>
 <span class="pl-c1">0</span>  <span class="pl-c1">50</span>  <span class="pl-c1">120</span>

julia<span class="pl-k">&gt;</span> V <span class="pl-k">=</span> [<span class="pl-c1">1</span>, <span class="pl-c1">10</span>];

julia<span class="pl-k">&gt;</span> C <span class="pl-k">=</span> A ⊗ V  <span class="pl-c"><span class="pl-c">#</span> tensor(A, V)</span>
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">2</span> Array{Int64, <span class="pl-c1">3</span>}<span class="pl-k">:</span>
[:, :, <span class="pl-c1">1</span>] <span class="pl-k">=</span>
 <span class="pl-c1">1</span>  <span class="pl-c1">2</span>  <span class="pl-c1">3</span>
 <span class="pl-c1">4</span>  <span class="pl-c1">5</span>  <span class="pl-c1">6</span>

[:, :, <span class="pl-c1">2</span>] <span class="pl-k">=</span>
 <span class="pl-c1">10</span>  <span class="pl-c1">20</span>  <span class="pl-c1">30</span>
 <span class="pl-c1">40</span>  <span class="pl-c1">50</span>  <span class="pl-c1">60</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">summary</span>(A ⊗ B)
<span class="pl-s"><span class="pl-pds">"</span>2×3×2×3 Array{Int64, 4}<span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> C ⊡ V  <span class="pl-c"><span class="pl-c">#</span> boxdot(C, V)</span>
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">3</span> Matrix{Int64}<span class="pl-k">:</span>
 <span class="pl-c1">101</span>  <span class="pl-c1">202</span>  <span class="pl-c1">303</span>
 <span class="pl-c1">404</span>  <span class="pl-c1">505</span>  <span class="pl-c1">606</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">summary</span>(C ⊡ <span class="pl-c1">rand</span>(<span class="pl-c1">2</span>,<span class="pl-c1">5</span>,<span class="pl-c1">7</span>))
<span class="pl-s"><span class="pl-pds">"</span>2×3×5×7 Array{Float64, 4}<span class="pl-pds">"</span></span></pre></div>
</article></div>