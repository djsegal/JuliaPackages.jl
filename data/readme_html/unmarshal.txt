<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-unmarshal" class="anchor" aria-hidden="true" href="#unmarshal"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Unmarshal</h1>
<h3><a id="user-content-unmarshalling-parsed-format-dictionaries-into-julia-objects" class="anchor" aria-hidden="true" href="#unmarshalling-parsed-format-dictionaries-into-julia-objects"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Unmarshalling parsed format dictionaries into Julia Objects</h3>
<p><a href="https://travis-ci.org/lwabeke/Unmarshal.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/0fe50fb6c98aad8d16b02e79f9b72b72f366d320/68747470733a2f2f7472617669732d63692e6f72672f6c776162656b652f556e6d61727368616c2e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/lwabeke/Unmarshal.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p><a href="https://coveralls.io/github/lwabeke/Unmarshal.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/15194d97a5a945bad58135e830618084c2605b47/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f6c776162656b652f556e6d61727368616c2e6a6c2f62616467652e737667" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/lwabeke/Unmarshal.jl/badge.svg" style="max-width:100%;"></a></p>
<p><a href="http://codecov.io/github/lwabeke/Unmarshal.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/a5d2d0b2d088c1a466d2d6de9a9fc9e2a28b9dd5/687474703a2f2f636f6465636f762e696f2f6769746875622f6c776162656b652f556e6d61727368616c2e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/lwabeke/Unmarshal.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
<p><strong>Installation</strong>: <code>pkg&gt; add Unmarshal</code></p>
<h2><a id="user-content-basic-usage" class="anchor" aria-hidden="true" href="#basic-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Basic Usage</h2>
<p>This package has currently only been tested with unmarshalling of JSON objects, but the intention is to in future also test it for working on other data formats.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">import</span> Unmarshal

<span class="pl-k">using</span> JSON

input <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>{ <span class="pl-cce">\"</span>bar<span class="pl-cce">\"</span>: { <span class="pl-cce">\"</span>baz<span class="pl-cce">\"</span>: 17 }, <span class="pl-cce">\"</span>foo<span class="pl-cce">\"</span>: 3.14 }<span class="pl-pds">"</span></span>

<span class="pl-k">struct</span> Bar
    baz<span class="pl-k">::</span><span class="pl-c1">Int</span>
<span class="pl-k">end</span>

<span class="pl-k">struct</span> Foo
    bar<span class="pl-k">::</span><span class="pl-c1">Bar</span>
<span class="pl-k">end</span>

Unmarshal<span class="pl-k">.</span><span class="pl-c1">unmarshal</span>(Foo, JSON<span class="pl-k">.</span><span class="pl-c1">parse</span>(input))
<span class="pl-c"><span class="pl-c">#</span> Foo(Bar(17))</span>
jstring <span class="pl-k">=</span> JSON<span class="pl-k">.</span><span class="pl-c1">json</span>(<span class="pl-c1">ones</span>(Float64, <span class="pl-c1">3</span>))
<span class="pl-c"><span class="pl-c">#</span>"[1.0,1.0,1.0]"</span>

Unmarshal<span class="pl-k">.</span><span class="pl-c1">unmarshal</span>(Array{Float64}, JSON<span class="pl-k">.</span><span class="pl-c1">parse</span>(jstring))
<span class="pl-c"><span class="pl-c">#</span>3-element Array{Float64,1}:</span>
<span class="pl-c"><span class="pl-c">#</span> [ 1.0 ; 1.0 ; 1.0 ]</span></pre></div>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> LazyJSON

<span class="pl-c"><span class="pl-c">#</span>"[1.0,1.0,1.0]"</span>

Unmarshal<span class="pl-k">.</span><span class="pl-c1">unmarshal</span>(Array{Float64}, JSON<span class="pl-k">.</span><span class="pl-c1">parse</span>(jstring))
<span class="pl-c"><span class="pl-c">#</span>3-element Array{Float64,1}:</span>
<span class="pl-c"><span class="pl-c">#</span> [ 1.0 ; 1.0 ; 1.0 ]</span></pre></div>
<h2><a id="user-content-documentation" class="anchor" aria-hidden="true" href="#documentation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Documentation</h2>
<div class="highlight highlight-source-julia"><pre>Unmarshal<span class="pl-k">.</span><span class="pl-c1">unmarshal</span>(MyType, parseOutput, verbose <span class="pl-k">=</span> <span class="pl-c1">false</span> )</pre></div>
<p>Builds on object of type :MyType from the dictionary produced by JSON.parse or now also LazyJSON.parse. Set verbose to true to get debug information about the type hierarchy beging unmarshalled. This might be useful in tracking down mismatches between the JSON object and the Julia type definition.</p>
</article></div>