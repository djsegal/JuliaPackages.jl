<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-hdf5logger" class="anchor" aria-hidden="true" href="#hdf5logger"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>HDF5Logger</h1>
<p dir="auto"><a href="https://travis-ci.org/tuckermcclure/HDF5Logger.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/a50059bb92e0b6b74b5ea3bf4872ce28c60d6122cfafafd444c78de5ed9b02f1/68747470733a2f2f7472617669732d63692e6f72672f7475636b65726d63636c7572652f484446354c6f676765722e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/tuckermcclure/HDF5Logger.jl.svg?branch=master" style="max-width: 100%;"></a>
<a href="https://ci.appveyor.com/project/tuckermcclure/hdf5logger-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/2223df689c41673c8cba2b15a575512284603857f85e79abf7c0cf79a9242811/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f6769746875622f7475636b65726d63636c7572652f484446354c6f676765722e6a6c3f7376673d74727565" alt="Appveyor Build Status" data-canonical-src="https://ci.appveyor.com/api/projects/status/github/tuckermcclure/HDF5Logger.jl?svg=true" style="max-width: 100%;"></a>
<a href="http://codecov.io/github/tuckermcclure/HDF5Logger.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/5cf324f4a6760e178bfee89e5ff29eb72483caba318edcd2dc7653c8a02c6536/687474703a2f2f636f6465636f762e696f2f6769746875622f7475636b65726d63636c7572652f484446354c6f676765722e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/tuckermcclure/HDF5Logger.jl/coverage.svg?branch=master" style="max-width: 100%;"></a></p>

<p dir="auto">This package creates a logger for storing individual frames of data over time. The frames can be scalars or arrays of any dimension, and the size must be fixed from sample to sample. Further, the total number of samples to log for each source must be known in advance. This keeps the logging very fast. It's useful, for instance, when one is running a simulation, some value in the sim needs to be logged every X seconds, and the end time of the simulation is known, so the total number of samples that will be needed is also known.</p>
<h2 dir="auto"><a id="user-content-simple-example" class="anchor" aria-hidden="true" href="#simple-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Simple Example</h2>
<p dir="auto">Create a logger. This actually creates and opens the HDF5 file.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using HDF5Logger
log = Log(&quot;my_log.h5&quot;)"><pre><span class="pl-k">using</span> HDF5Logger
log <span class="pl-k">=</span> <span class="pl-c1">Log</span>(<span class="pl-s"><span class="pl-pds">"</span>my_log.h5<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">Add a couple of streams. Suppose we'll log a 3-element gyro reading and a 3-element accelerometer signal each a total of 100 times.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="num_samples = 100
example_gyro_reading = [0., 0., 0.]
example_accel_reading = [0., 0., 0.]

# Preallocate space for these signals.
add!(log, &quot;/sensors/gyro&quot;,  example_gyro_reading, num_samples)
add!(log, &quot;/sensors/accel&quot;, example_accel_reading, num_samples)"><pre>num_samples <span class="pl-k">=</span> <span class="pl-c1">100</span>
example_gyro_reading <span class="pl-k">=</span> [<span class="pl-c1">0.</span>, <span class="pl-c1">0.</span>, <span class="pl-c1">0.</span>]
example_accel_reading <span class="pl-k">=</span> [<span class="pl-c1">0.</span>, <span class="pl-c1">0.</span>, <span class="pl-c1">0.</span>]

<span class="pl-c"><span class="pl-c">#</span> Preallocate space for these signals.</span>
<span class="pl-c1">add!</span>(log, <span class="pl-s"><span class="pl-pds">"</span>/sensors/gyro<span class="pl-pds">"</span></span>,  example_gyro_reading, num_samples)
<span class="pl-c1">add!</span>(log, <span class="pl-s"><span class="pl-pds">"</span>/sensors/accel<span class="pl-pds">"</span></span>, example_accel_reading, num_samples)</pre></div>
<p dir="auto">Log the first sample of each.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="log!(log, &quot;/sensors/gyro&quot;,  [1., 2., 3.])
log!(log, &quot;/sensors/accel&quot;, [4., 5., 6.])
# We can now log to each of these signals 99 more times."><pre><span class="pl-c1">log!</span>(log, <span class="pl-s"><span class="pl-pds">"</span>/sensors/gyro<span class="pl-pds">"</span></span>,  [<span class="pl-c1">1.</span>, <span class="pl-c1">2.</span>, <span class="pl-c1">3.</span>])
<span class="pl-c1">log!</span>(log, <span class="pl-s"><span class="pl-pds">"</span>/sensors/accel<span class="pl-pds">"</span></span>, [<span class="pl-c1">4.</span>, <span class="pl-c1">5.</span>, <span class="pl-c1">6.</span>])
<span class="pl-c"><span class="pl-c">#</span> We can now log to each of these signals 99 more times.</span></pre></div>
<p dir="auto">Always clean up.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="close!(log);"><pre><span class="pl-c1">close!</span>(log);</pre></div>
<p dir="auto">Did that work?</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using HDF5 # Use the regular HDF5 package to load what we logged.
h5open(&quot;my_log.h5&quot;, &quot;r&quot;) do file
    gyro_data  = read(file, &quot;/sensors/gyro&quot;)
    accel_data = read(file, &quot;/sensors/accel&quot;)
    display(gyro_data[:,1])
    display(accel_data[:,1])
end"><pre><span class="pl-k">using</span> HDF5 <span class="pl-c"><span class="pl-c">#</span> Use the regular HDF5 package to load what we logged.</span>
<span class="pl-c1">h5open</span>(<span class="pl-s"><span class="pl-pds">"</span>my_log.h5<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>r<span class="pl-pds">"</span></span>) <span class="pl-k">do</span> file
    gyro_data  <span class="pl-k">=</span> <span class="pl-c1">read</span>(file, <span class="pl-s"><span class="pl-pds">"</span>/sensors/gyro<span class="pl-pds">"</span></span>)
    accel_data <span class="pl-k">=</span> <span class="pl-c1">read</span>(file, <span class="pl-s"><span class="pl-pds">"</span>/sensors/accel<span class="pl-pds">"</span></span>)
    <span class="pl-c1">display</span>(gyro_data[:,<span class="pl-c1">1</span>])
    <span class="pl-c1">display</span>(accel_data[:,<span class="pl-c1">1</span>])
<span class="pl-k">end</span></pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="3-element Array{Float64,1}:
1.00
2.00
3.00
3-element Array{Float64,1}:
4.00
5.00
6.00"><pre class="notranslate"><code>3-element Array{Float64,1}:
1.00
2.00
3.00
3-element Array{Float64,1}:
4.00
5.00
6.00
</code></pre></div>
<p dir="auto">Yep!</p>
<p dir="auto">The same process works with scalars, matrices, integers, etc.</p>
</article></div>