<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-namedaxesarrays" class="anchor" aria-hidden="true" href="#namedaxesarrays"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>NamedAxesArrays</h1>
<p><a href="https://travis-ci.org/timholy/NamedAxesArrays.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/679d7febee3d49658853aab9416a2697129d2f0e/68747470733a2f2f7472617669732d63692e6f72672f74696d686f6c792f4e616d6564417865734172726179732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/timholy/NamedAxesArrays.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p>This package (not yet functional) for the Julia language will allow you to index arrays using names for the individual axes.
This permits one to implement algorithms that are oblivious to the storage order of the underlying arrays.
In contrast to similar approaches in <a href="https://github.com/timholy/Images.jl">Images.jl</a> and <a href="https://github.com/davidavdav/NamedArrays">NamedArrays.jl</a>,
this should enable implementation of all basic operations without introducing any runtime overhead.</p>
<p>A brief demo of some of the intended functionality:</p>
<div class="highlight highlight-source-julia"><pre>A <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">3</span>, <span class="pl-c1">5</span>, <span class="pl-c1">10</span>)
B <span class="pl-k">=</span> <span class="pl-c1">NamedAxesArray</span>(A, (<span class="pl-c1">:x</span>, <span class="pl-c1">:y</span>, <span class="pl-c1">:z</span>))
Bslice <span class="pl-k">=</span> B[<span class="pl-c1">Ax</span><span class="pl-c1">{:y}</span>(<span class="pl-c1">3</span>)]  <span class="pl-c"><span class="pl-c">#</span> equivalent to `slice(B, :, 3, :)`</span>

<span class="pl-c"><span class="pl-c">#</span> Compute the intensity-weighted mean along the z axis</span>
Itotal <span class="pl-k">=</span> sumz <span class="pl-k">=</span> <span class="pl-c1">0.0</span>
<span class="pl-k">for</span> iter <span class="pl-k">in</span> <span class="pl-c1">eachelement</span>(B)  <span class="pl-c"><span class="pl-c">#</span> traverses in storage order for cache efficiency</span>
    I <span class="pl-k">=</span> B[iter]  <span class="pl-c"><span class="pl-c">#</span> intensity in a single voxel</span>
    Itotal <span class="pl-k">+=</span> I
    sumz <span class="pl-k">+=</span> I <span class="pl-k">*</span> iter<span class="pl-k">.</span>z  <span class="pl-c"><span class="pl-c">#</span> iter.z "looks up" the current z position</span>
<span class="pl-k">end</span>
meanz <span class="pl-k">=</span> sumz<span class="pl-k">/</span>Itotal</pre></div>
<p>The intention is that all of these operations are just as efficient as they would be if you used traditional position-based indexing with all the inherent assumptions about the storage order of <code>B</code>.</p>
</article></div>