<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-naparijl" class="anchor" aria-hidden="true" href="#naparijl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Napari.jl</h1>
<p>This project is a Julia language wrapper around <a href="https://github.com/napari/napari">Napari</a>, a multi-dimensional image viewer for Python. The project is undergoing rapid development and is at a prerelease stage.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>First, we recommend that you configure <a href="https://github.com/JuliaPy/PyCall.jl">PyCall.jl</a> and install <a href="https://github.com/napari/napari">Napari</a> into the Python environment
used by PyCall.jl. To install Napari, you can try either the <code>Napari.install_with_pip()</code> or <code>Napari.install_with_conda()</code> methods although these are not tested.</p>
<p>This package is currently not in the Julia registry. To install, add it directly from Github as follows:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Pkg
Pkg.add(&quot;Napari&quot;)
# Alternatively, use the following to get the development version
# Pkg.add(&quot;https://github.com/mkitti/Napari.jl.git&quot;)
using Napari # Will use pyimport_conda(&quot;Napari&quot;) unless parse(Bool, ENV[&quot;NAPARI_JL_USE_CONDA&quot;]) == false
"><pre><span class="pl-k">using</span> Pkg
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>Napari<span class="pl-pds">"</span></span>)
<span class="pl-c"><span class="pl-c">#</span> Alternatively, use the following to get the development version</span>
<span class="pl-c"><span class="pl-c">#</span> Pkg.add("https://github.com/mkitti/Napari.jl.git")</span>
<span class="pl-k">using</span> Napari <span class="pl-c"><span class="pl-c">#</span> Will use pyimport_conda("Napari") unless parse(Bool, ENV["NAPARI_JL_USE_CONDA"]) == false</span></pre></div>
<h2><a id="user-content-quick-start" class="anchor" aria-hidden="true" href="#quick-start"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Quick Start</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Napari
@view_image Napari.astronaut()
"><pre><span class="pl-k">using</span> Napari
<span class="pl-c1">@view_image</span> Napari<span class="pl-k">.</span><span class="pl-c1">astronaut</span>()</pre></div>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<p>Napari.jl exports <code>napari</code> which is a <code>PyObject</code> referring to the <code>napari</code> module as imported by <a href="https://github.com/JuliaPy/PyCall.jl">PyCall.jl</a>. This means that you can use the Pythonic syntax as provided by PyCall.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Napari

random_noise = rand(UInt8, 512,512)
napari.view_image( random_noise )

using PyCall

astronaut = pyimport(&quot;skimage.data&quot;).astronaut()
viewer = napari.view_image(astronaut)
viewer.add_image(astronaut[:,:,1])
"><pre><span class="pl-k">using</span> Napari

random_noise <span class="pl-k">=</span> <span class="pl-c1">rand</span>(UInt8, <span class="pl-c1">512</span>,<span class="pl-c1">512</span>)
napari<span class="pl-k">.</span><span class="pl-c1">view_image</span>( random_noise )

<span class="pl-k">using</span> PyCall

astronaut <span class="pl-k">=</span> <span class="pl-c1">pyimport</span>(<span class="pl-s"><span class="pl-pds">"</span>skimage.data<span class="pl-pds">"</span></span>)<span class="pl-k">.</span><span class="pl-c1">astronaut</span>()
viewer <span class="pl-k">=</span> napari<span class="pl-k">.</span><span class="pl-c1">view_image</span>(astronaut)
viewer<span class="pl-k">.</span><span class="pl-c1">add_image</span>(astronaut[:,:,<span class="pl-c1">1</span>])</pre></div>
<p>Compare this to using Napari from Python via this Julia script:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using PyCall

py&quot;&quot;&quot;
from skimage import data
import napari

astronaut = data.astronaut()
napari.view_image( astronaut )
&quot;&quot;&quot;
"><pre><span class="pl-k">using</span> PyCall

<span class="pl-c1">py</span><span class="pl-pds">"""</span><span class="pl-s1"></span>
<span class="pl-s1"><span class="pl-k">from</span> skimage <span class="pl-k">import</span> data</span>
<span class="pl-s1"><span class="pl-k">import</span> napari</span>
<span class="pl-s1"></span>
<span class="pl-s1">astronaut <span class="pl-k">=</span> data.astronaut()</span>
<span class="pl-s1">napari.view_image( astronaut )</span>
<span class="pl-s1"></span><span class="pl-pds">"""</span></pre></div>
<p>You may notice that the label of the image layer is "astronaut" while using Python but is just "Image" when using Julia. This is because the magic naming of the layer is dependent on Python's <code>inspect</code> package, which does not extend into Julia.</p>
<p>To improve the situation, Napari.jl provides a set of macros that provides similar magic naming functionality.</p>
<p>The first macro is <code>@namekw</code> which just adds a name keyword argument to any function.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using PyCall
astronaut = pyimport(&quot;skimage.data&quot;).astronaut()

viewer = @namekw napari.view_image( astronaut ) # Adds name = &quot;astronaut&quot; keyword argument
@namekw viewer.add_labels( astronaut[:,:,1] .&gt; 100 ) # Adds name = &quot;astronaut[:,:,1] .&gt; 100&quot; keyword argument
"><pre><span class="pl-k">using</span> PyCall
astronaut <span class="pl-k">=</span> <span class="pl-c1">pyimport</span>(<span class="pl-s"><span class="pl-pds">"</span>skimage.data<span class="pl-pds">"</span></span>)<span class="pl-k">.</span><span class="pl-c1">astronaut</span>()

viewer <span class="pl-k">=</span> <span class="pl-c1">@namekw</span> napari<span class="pl-k">.</span><span class="pl-c1">view_image</span>( astronaut ) <span class="pl-c"><span class="pl-c">#</span> Adds name = "astronaut" keyword argument</span>
<span class="pl-c1">@namekw</span> viewer<span class="pl-k">.</span><span class="pl-c1">add_labels</span>( astronaut[:,:,<span class="pl-c1">1</span>] <span class="pl-k">.&gt;</span> <span class="pl-c1">100</span> ) <span class="pl-c"><span class="pl-c">#</span> Adds name = "astronaut[:,:,1] .&gt; 100" keyword argument</span></pre></div>
<p>For convenience, this package also provides and exports the following macros.</p>
<p><code>@view_*</code>:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="@view_image(expr; kwargs...)   # Equivalent to napari.view_image(expr; name = string( :(expr) ), kwargs... )
@view_points(expr; kwargs...)  # Equivalent to napari.view_points(expr; name = string( :(expr) ), kwargs... )
@view_labels(expr; kwargs...)  # Equivalent to napari.view_labels(expr; name = string( :(expr) ), kwargs... )
@view_shapes(expr; kwargs...)  # Equivalent to napari.view_shapes(expr; name = string( :(expr) ), kwargs... )
@view_surface(expr; kwargs...) # Equivalent to napari.view_surface(expr; name = string( :(expr) ), kwargs... )
@view_vectors(expr; kwargs...) # Equivalent to napari.view_vectors(expr; name = string( :(expr) ), kwargs... )
@view_tracks(expr; kwargs...)  # Equivalent to napari.view_tracks(expr; name = string( :(expr) ), kwargs... )
"><pre><span class="pl-c1">@view_image</span>(expr; kwargs<span class="pl-k">...</span>)   <span class="pl-c"><span class="pl-c">#</span> Equivalent to napari.view_image(expr; name = string( :(expr) ), kwargs... )</span>
<span class="pl-c1">@view_points</span>(expr; kwargs<span class="pl-k">...</span>)  <span class="pl-c"><span class="pl-c">#</span> Equivalent to napari.view_points(expr; name = string( :(expr) ), kwargs... )</span>
<span class="pl-c1">@view_labels</span>(expr; kwargs<span class="pl-k">...</span>)  <span class="pl-c"><span class="pl-c">#</span> Equivalent to napari.view_labels(expr; name = string( :(expr) ), kwargs... )</span>
<span class="pl-c1">@view_shapes</span>(expr; kwargs<span class="pl-k">...</span>)  <span class="pl-c"><span class="pl-c">#</span> Equivalent to napari.view_shapes(expr; name = string( :(expr) ), kwargs... )</span>
<span class="pl-c1">@view_surface</span>(expr; kwargs<span class="pl-k">...</span>) <span class="pl-c"><span class="pl-c">#</span> Equivalent to napari.view_surface(expr; name = string( :(expr) ), kwargs... )</span>
<span class="pl-c1">@view_vectors</span>(expr; kwargs<span class="pl-k">...</span>) <span class="pl-c"><span class="pl-c">#</span> Equivalent to napari.view_vectors(expr; name = string( :(expr) ), kwargs... )</span>
<span class="pl-c1">@view_tracks</span>(expr; kwargs<span class="pl-k">...</span>)  <span class="pl-c"><span class="pl-c">#</span> Equivalent to napari.view_tracks(expr; name = string( :(expr) ), kwargs... )</span></pre></div>
<p><code>@add_*</code>:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="@add_image(viewer, expr; kwargs...)   # Equvivalent to `viewer.add_image(expr; kwargs...)
@add_points(viewer, expr; kwargs...)  # Equvivalent to `viewer.add_points(expr; kwargs...)
@add_labels(viewer, expr; kwargs...)  # Equvivalent to `viewer.add_labels(expr; kwargs...)
@add_shapes(viewer, expr; kwargs...)  # Equvivalent to `viewer.add_shapes(expr; kwargs...)
@add_surface(viewer, expr; kwargs...) # Equvivalent to `viewer.add_surface(expr; kwargs...)
@add_vectors(viewer, expr; kwargs...) # Equvivalent to `viewer.add_vectors(expr; kwargs...)
@add_tracks(viewer, expr; kwargs...)  # Equvivalent to `viewer.add_tracks(expr; kwargs...)
"><pre><span class="pl-c1">@add_image</span>(viewer, expr; kwargs<span class="pl-k">...</span>)   <span class="pl-c"><span class="pl-c">#</span> Equvivalent to `viewer.add_image(expr; kwargs...)</span>
<span class="pl-c1">@add_points</span>(viewer, expr; kwargs<span class="pl-k">...</span>)  <span class="pl-c"><span class="pl-c">#</span> Equvivalent to `viewer.add_points(expr; kwargs...)</span>
<span class="pl-c1">@add_labels</span>(viewer, expr; kwargs<span class="pl-k">...</span>)  <span class="pl-c"><span class="pl-c">#</span> Equvivalent to `viewer.add_labels(expr; kwargs...)</span>
<span class="pl-c1">@add_shapes</span>(viewer, expr; kwargs<span class="pl-k">...</span>)  <span class="pl-c"><span class="pl-c">#</span> Equvivalent to `viewer.add_shapes(expr; kwargs...)</span>
<span class="pl-c1">@add_surface</span>(viewer, expr; kwargs<span class="pl-k">...</span>) <span class="pl-c"><span class="pl-c">#</span> Equvivalent to `viewer.add_surface(expr; kwargs...)</span>
<span class="pl-c1">@add_vectors</span>(viewer, expr; kwargs<span class="pl-k">...</span>) <span class="pl-c"><span class="pl-c">#</span> Equvivalent to `viewer.add_vectors(expr; kwargs...)</span>
<span class="pl-c1">@add_tracks</span>(viewer, expr; kwargs<span class="pl-k">...</span>)  <span class="pl-c"><span class="pl-c">#</span> Equvivalent to `viewer.add_tracks(expr; kwargs...)</span></pre></div>
<p>You can then use these macros to view images in Napari, and the expressions will be used as labels for the image layers.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using PyCall
astronaut = pyimport(&quot;skimage.data&quot;).astronaut()

using Napari
viewer = @view_image(astronaut) # The macros can be used with parentheses
@add_labels viewer astronaut[:,:,1] .&gt; 100 # They macros can also be used without parentheses and commas
"><pre><span class="pl-k">using</span> PyCall
astronaut <span class="pl-k">=</span> <span class="pl-c1">pyimport</span>(<span class="pl-s"><span class="pl-pds">"</span>skimage.data<span class="pl-pds">"</span></span>)<span class="pl-k">.</span><span class="pl-c1">astronaut</span>()

<span class="pl-k">using</span> Napari
viewer <span class="pl-k">=</span> <span class="pl-c1">@view_image</span>(astronaut) <span class="pl-c"><span class="pl-c">#</span> The macros can be used with parentheses</span>
<span class="pl-c1">@add_labels</span> viewer astronaut[:,:,<span class="pl-c1">1</span>] <span class="pl-k">.&gt;</span> <span class="pl-c1">100</span> <span class="pl-c"><span class="pl-c">#</span> They macros can also be used without parentheses and commas</span></pre></div>
<h2><a id="user-content-overloading-interfaces-for-types" class="anchor" aria-hidden="true" href="#overloading-interfaces-for-types"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Overloading interfaces for types</h2>
<p>The macros above actually call <code>Napari.view_[layer](data, ... )</code> and <code>Napari.add_[layer](viewer, data, ...)</code>.</p>
<p>These functions may be overloaded for specific types of data and to take advantage of multiple dispatch.</p>
<p>Currently, this package overloads <code>Napari.view_image</code> for the following types:</p>
<ul>
<li><code>ImageMeta</code> from <code>ImageMetadata</code></li>
<li><code>AxisArray{Gray{T}}</code> from AxisArrays</li>
<li><code>AbstractArray{C} where C &lt;: Colorant{T,3} where T &lt;: FixedPoint</code> from <code>Images</code></li>
<li><code>AbstractArray{C} where C &lt;: Colorant{T,4} where T &lt;: FixedPoint</code> from <code>Images</code></li>
<li><code>AbstractArray{C} where C &lt;: Colorant{T,1} where T &lt;: FixedPoint</code> from <code>Images</code></li>
<li><code>AbstractArray{C} where C &lt;: TransparentColor{Gray}</code> from <code>Images</code></li>
</ul>
<p>For other Julia types, you can overload these methods by importing the appropriate methods:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="import Napari: view_image, add_image
"><pre><span class="pl-k">import</span> Napari<span class="pl-k">:</span> view_image, add_image</pre></div>
<h2><a id="user-content-compatability-with-napari" class="anchor" aria-hidden="true" href="#compatability-with-napari"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Compatability with Napari</h2>
<p>This package has been tested against Napari release versions 0.3.9 and 0.4.6.</p>
<h2><a id="user-content-advanced" class="anchor" aria-hidden="true" href="#advanced"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Advanced</h2>
<p>This package defaults to using pyqt5 and uses <code>PyCall.pygui_start(:qt5)</code> to initialize the the QT event loop.
Set environmental variable <code>NAPARI_JL_QT</code> to "false" to disable this. In that case, the GUI event loop must
be initialized manually.</p>
<h2><a id="user-content-history" class="anchor" aria-hidden="true" href="#history"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>History</h2>
<p>It is based around an earlier script, <code>napari.jl</code>, by Mark Kittisopikul that was posted as a <a href="https://gist.github.com/mkitti/2f7c5fc3d3f8b0d15dd13f6d67b0e73d">gist</a> in Janaruy 2020.</p>
<h2><a id="user-content-license" class="anchor" aria-hidden="true" href="#license"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>License</h2>
<p>This package is licensed under the <a href="https://github.com/mkitti/Napari.jl/blob/main/LICENSE">3-Clause "Revised" BSD License</a>.</p>
</article></div>