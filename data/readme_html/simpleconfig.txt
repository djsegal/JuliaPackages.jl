<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-simpleconfig" class="anchor" aria-hidden="true" href="#simpleconfig"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>SimpleConfig</h1>
<p dir="auto"><a href="https://github.com/avik-pal/SimpleConfig.jl/actions/workflows/CI.yml"><img src="https://github.com/avik-pal/SimpleConfig.jl/actions/workflows/CI.yml/badge.svg" alt="CI" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/avik-pal/SimpleConfig.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/43713bb55d8a339d7080ae4e26a9e42840f8ee4e4ebb35f3d731c3912252b36c/68747470733a2f2f636f6465636f762e696f2f67682f6176696b2d70616c2f53696d706c65436f6e6669672e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e7376673f746f6b656e3d706c6b73456836705547" alt="codecov" data-canonical-src="https://codecov.io/gh/avik-pal/SimpleConfig.jl/branch/main/graph/badge.svg?token=plksEh6pUG" style="max-width: 100%;"></a>
<a href="https://github.com/SciML/ColPrac"><img src="https://camo.githubusercontent.com/a6c1efcb19a957860ecb25966a730260b03d6e05380d0c27992ee7f9e3b1feb3/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f436f6c507261632d436f6e7472696275746f72277325323047756964652d626c756576696f6c6574" alt="ColPrac: Contributor's Guide on Collaborative Practices for Community Packages" data-canonical-src="https://img.shields.io/badge/ColPrac-Contributor's%20Guide-blueviolet" style="max-width: 100%;"></a>
<a href="https://github.com/SciML/SciMLStyle"><img src="https://camo.githubusercontent.com/3e16f03bad047817fbc07f49307817ed7919ef79c339dc75ad4ce813012c3e0b/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f6c6162656c3d636f64652532307374796c65266d6573736167653d5363694d4c26636f6c6f723d393535386232266c6162656c436f6c6f723d333839383236" alt="SciML Code Style" data-canonical-src="https://img.shields.io/static/v1?label=code%20style&amp;message=SciML&amp;color=9558b2&amp;labelColor=389826" style="max-width: 100%;"></a>
<a href="https://pkgs.genieframework.com?packages=SimpleConfig" rel="nofollow"><img src="https://camo.githubusercontent.com/2eca75ece09b636f30608b2ba63e9935884bd03b7e5ea9b008c193014f412e87/68747470733a2f2f736869656c64732e696f2f656e64706f696e743f75726c3d68747470733a2f2f706b67732e67656e69656672616d65776f726b2e636f6d2f6170692f76312f62616467652f53696d706c65436f6e666967" alt="Package Downloads" data-canonical-src="https://shields.io/endpoint?url=https://pkgs.genieframework.com/api/v1/badge/SimpleConfig" style="max-width: 100%;"></a></p>
<p dir="auto">Composes <a href="https://configurations.rogerluo.dev/dev/" rel="nofollow">Configurations.jl</a> with
<a href="https://carlobaldassi.github.io/ArgParse.jl/stable/" rel="nofollow">ArgParse.jl</a> making it easier to
write config files.</p>
<p dir="auto">For users from the python world, this is similar to the functionality provided by
<a href="https://github.com/google/ml_collections#config-flags">ml_collections</a>.</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">To install the module, use Julia's package manager: start pkg mode by pressing ] and then
enter:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="(v1.7) pkg&gt; add SimpleConfig"><pre>(v1.<span class="pl-c1">7</span>) pkg<span class="pl-k">&gt;</span> add SimpleConfig</pre></div>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<h3 dir="auto"><a id="user-content-quickstart" class="anchor" aria-hidden="true" href="#quickstart"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>QuickStart</h3>
<p dir="auto">This package simply extends <code>Configurations.jl</code>. Follow the tutorial in its
<a href="https://configurations.rogerluo.dev/stable/quick-start/" rel="nofollow">documentation</a>, to define a
configuration. For example:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using SimpleConfig

@option struct SchedulerConfig
  name::String = &quot;cosine&quot;
  min_learning_rate::Float32 = 1f-4
end

@option struct OptimizerConfig
  name::String = &quot;adam&quot;
  learning_rate::Float32 = 3f-3
  scheduler::SchedulerConfig
end

@option struct ModelConfig
  backbone::String = &quot;resnet18&quot;
  stage_size = [2, 2, 2, 2]
end

@option struct ExperimentConfig
  global_seed::Int64 = 0
  optimizer::OptimizerConfig
  model::ModelConfig
end"><pre><span class="pl-k">using</span> SimpleConfig

<span class="pl-c1">@option</span> <span class="pl-k">struct</span> SchedulerConfig
  name<span class="pl-k">::</span><span class="pl-c1">String</span> <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>cosine<span class="pl-pds">"</span></span>
  min_learning_rate<span class="pl-k">::</span><span class="pl-c1">Float32</span> <span class="pl-k">=</span> <span class="pl-c1">1f-4</span>
<span class="pl-k">end</span>

<span class="pl-c1">@option</span> <span class="pl-k">struct</span> OptimizerConfig
  name<span class="pl-k">::</span><span class="pl-c1">String</span> <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>adam<span class="pl-pds">"</span></span>
  learning_rate<span class="pl-k">::</span><span class="pl-c1">Float32</span> <span class="pl-k">=</span> <span class="pl-c1">3f-3</span>
  scheduler<span class="pl-k">::</span><span class="pl-c1">SchedulerConfig</span>
<span class="pl-k">end</span>

<span class="pl-c1">@option</span> <span class="pl-k">struct</span> ModelConfig
  backbone<span class="pl-k">::</span><span class="pl-c1">String</span> <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>resnet18<span class="pl-pds">"</span></span>
  stage_size <span class="pl-k">=</span> [<span class="pl-c1">2</span>, <span class="pl-c1">2</span>, <span class="pl-c1">2</span>, <span class="pl-c1">2</span>]
<span class="pl-k">end</span>

<span class="pl-c1">@option</span> <span class="pl-k">struct</span> ExperimentConfig
  global_seed<span class="pl-k">::</span><span class="pl-c1">Int64</span> <span class="pl-k">=</span> <span class="pl-c1">0</span>
  optimizer<span class="pl-k">::</span><span class="pl-c1">OptimizerConfig</span>
  model<span class="pl-k">::</span><span class="pl-c1">ModelConfig</span>
<span class="pl-k">end</span></pre></div>
<p dir="auto">One way to initialize the configuration would be to use the <code>from_dict</code> function from
Configurations.jl. For example:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Configurations

defaults = Dict(&quot;global_seed&quot; =&gt; 0,
                &quot;optimizer&quot; =&gt; Dict(&quot;name&quot; =&gt; &quot;adam&quot;, &quot;learning_rate&quot; =&gt; 3f-3,
                                    &quot;scheduler&quot; =&gt; Dict(&quot;name&quot; =&gt; &quot;cosine&quot;,
                                                        &quot;min_learning_rate&quot; =&gt; 1f-4)),
                &quot;model&quot; =&gt; Dict(&quot;backbone&quot; =&gt; &quot;resnet18&quot;, &quot;stage_size&quot; =&gt; [2, 2, 2, 2]))

cfg = from_dict(ExperimentConfig, defaults)"><pre><span class="pl-k">using</span> Configurations

defaults <span class="pl-k">=</span> <span class="pl-c1">Dict</span>(<span class="pl-s"><span class="pl-pds">"</span>global_seed<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">0</span>,
                <span class="pl-s"><span class="pl-pds">"</span>optimizer<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">Dict</span>(<span class="pl-s"><span class="pl-pds">"</span>name<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>adam<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>learning_rate<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">3f-3</span>,
                                    <span class="pl-s"><span class="pl-pds">"</span>scheduler<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">Dict</span>(<span class="pl-s"><span class="pl-pds">"</span>name<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>cosine<span class="pl-pds">"</span></span>,
                                                        <span class="pl-s"><span class="pl-pds">"</span>min_learning_rate<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1f-4</span>)),
                <span class="pl-s"><span class="pl-pds">"</span>model<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">Dict</span>(<span class="pl-s"><span class="pl-pds">"</span>backbone<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>resnet18<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>stage_size<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> [<span class="pl-c1">2</span>, <span class="pl-c1">2</span>, <span class="pl-c1">2</span>, <span class="pl-c1">2</span>]))

cfg <span class="pl-k">=</span> <span class="pl-c1">from_dict</span>(ExperimentConfig, defaults)</pre></div>
<p dir="auto">The main problem with this approach is that it is hard to use use in scripts, or when
running batch experiments with different configurations. We provide a simple function
<code>define_configuration</code>, which automatically creates a argparse settings, so that the
configurations can be updated using command line arguments.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="cfg = define_configuration(ExperimentConfig, defaults)"><pre>cfg <span class="pl-k">=</span> <span class="pl-c1">define_configuration</span>(ExperimentConfig, defaults)</pre></div>
<p dir="auto">This simple line in your script will allow you to update the configuration via command
line arguments. The structure is extremely self-explainatory, run the script using
<code>--help</code> to see the available options.</p>
<h3 dir="auto"><a id="user-content-basic-example-script" class="anchor" aria-hidden="true" href="#basic-example-script"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Basic Example Script</h3>
<p dir="auto">If we run the script <code>examples/script_dict.jl</code> with the following command:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ julia --project=. examples/script_dict.jl --help

usage: script_dict.jl [--cfg.global_seed CFG.GLOBAL_SEED]
                      [--cfg.optimizer.name CFG.OPTIMIZER.NAME]
                      [--cfg.optimizer.learning_rate CFG.OPTIMIZER.LEARNING_RATE]
                                            [--cfg.optimizer.scheduler.name CFG.OPTIMIZER.SCHEDULER.NAME]
                                            [--cfg.optimizer.scheduler.min_learning_rate CFG.OPTIMIZER.SCHEDULER.MIN_LEARNING_RATE]
                      [--cfg.model.backbone CFG.MODEL.BACKBONE]
                      [--cfg.model.stage_size CFG.MODEL.STAGE_SIZE]
                      [-h]

optional arguments:
  --cfg.global_seed CFG.GLOBAL_SEED
                        (type: Int64, default: 0)
  --cfg.optimizer.name CFG.OPTIMIZER.NAME
                        (default: &quot;adam&quot;)
  --cfg.optimizer.learning_rate CFG.OPTIMIZER.LEARNING_RATE
                        (type: Float32, default: 0.003)
  --cfg.optimizer.scheduler.name CFG.OPTIMIZER.SCHEDULER.NAME
                        (default: &quot;cosine&quot;)
  --cfg.optimizer.scheduler.min_learning_rate CFG.OPTIMIZER.SCHEDULER.MIN_LEARNING_RATE
                        (type: Float32, default: 0.0001)
  --cfg.model.backbone CFG.MODEL.BACKBONE
                        (default: &quot;resnet18&quot;)
  --cfg.model.stage_size CFG.MODEL.STAGE_SIZE
                        (type: Vector{Int64}, default: [2, 2, 2, 2])
  -h, --help            show this help message and exit"><pre><span class="pl-k">$</span> julia <span class="pl-k">--</span>project<span class="pl-k">=</span>. examples<span class="pl-k">/</span>script_dict<span class="pl-k">.</span>jl <span class="pl-k">--</span>help

usage<span class="pl-k">:</span> script_dict<span class="pl-k">.</span>jl [<span class="pl-k">--</span>cfg<span class="pl-k">.</span>global_seed CFG<span class="pl-k">.</span>GLOBAL_SEED]
                      [<span class="pl-k">--</span>cfg<span class="pl-k">.</span>optimizer<span class="pl-k">.</span>name CFG<span class="pl-k">.</span>OPTIMIZER<span class="pl-k">.</span>NAME]
                      [<span class="pl-k">--</span>cfg<span class="pl-k">.</span>optimizer<span class="pl-k">.</span>learning_rate CFG<span class="pl-k">.</span>OPTIMIZER<span class="pl-k">.</span>LEARNING_RATE]
                                            [<span class="pl-k">--</span>cfg<span class="pl-k">.</span>optimizer<span class="pl-k">.</span>scheduler<span class="pl-k">.</span>name CFG<span class="pl-k">.</span>OPTIMIZER<span class="pl-k">.</span>SCHEDULER<span class="pl-k">.</span>NAME]
                                            [<span class="pl-k">--</span>cfg<span class="pl-k">.</span>optimizer<span class="pl-k">.</span>scheduler<span class="pl-k">.</span>min_learning_rate CFG<span class="pl-k">.</span>OPTIMIZER<span class="pl-k">.</span>SCHEDULER<span class="pl-k">.</span>MIN_LEARNING_RATE]
                      [<span class="pl-k">--</span>cfg<span class="pl-k">.</span>model<span class="pl-k">.</span>backbone CFG<span class="pl-k">.</span>MODEL<span class="pl-k">.</span>BACKBONE]
                      [<span class="pl-k">--</span>cfg<span class="pl-k">.</span>model<span class="pl-k">.</span>stage_size CFG<span class="pl-k">.</span>MODEL<span class="pl-k">.</span>STAGE_SIZE]
                      [<span class="pl-k">-</span>h]

optional arguments<span class="pl-k">:</span>
  <span class="pl-k">--</span>cfg<span class="pl-k">.</span>global_seed CFG<span class="pl-k">.</span>GLOBAL_SEED
                        (type<span class="pl-k">:</span> Int64, default<span class="pl-k">:</span> <span class="pl-c1">0</span>)
  <span class="pl-k">--</span>cfg<span class="pl-k">.</span>optimizer<span class="pl-k">.</span>name CFG<span class="pl-k">.</span>OPTIMIZER<span class="pl-k">.</span>NAME
                        (default<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>adam<span class="pl-pds">"</span></span>)
  <span class="pl-k">--</span>cfg<span class="pl-k">.</span>optimizer<span class="pl-k">.</span>learning_rate CFG<span class="pl-k">.</span>OPTIMIZER<span class="pl-k">.</span>LEARNING_RATE
                        (type<span class="pl-k">:</span> Float32, default<span class="pl-k">:</span> <span class="pl-c1">0.003</span>)
  <span class="pl-k">--</span>cfg<span class="pl-k">.</span>optimizer<span class="pl-k">.</span>scheduler<span class="pl-k">.</span>name CFG<span class="pl-k">.</span>OPTIMIZER<span class="pl-k">.</span>SCHEDULER<span class="pl-k">.</span>NAME
                        (default<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>cosine<span class="pl-pds">"</span></span>)
  <span class="pl-k">--</span>cfg<span class="pl-k">.</span>optimizer<span class="pl-k">.</span>scheduler<span class="pl-k">.</span>min_learning_rate CFG<span class="pl-k">.</span>OPTIMIZER<span class="pl-k">.</span>SCHEDULER<span class="pl-k">.</span>MIN_LEARNING_RATE
                        (type<span class="pl-k">:</span> Float32, default<span class="pl-k">:</span> <span class="pl-c1">0.0001</span>)
  <span class="pl-k">--</span>cfg<span class="pl-k">.</span>model<span class="pl-k">.</span>backbone CFG<span class="pl-k">.</span>MODEL<span class="pl-k">.</span>BACKBONE
                        (default<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>resnet18<span class="pl-pds">"</span></span>)
  <span class="pl-k">--</span>cfg<span class="pl-k">.</span>model<span class="pl-k">.</span>stage_size CFG<span class="pl-k">.</span>MODEL<span class="pl-k">.</span>STAGE_SIZE
                        (type<span class="pl-k">:</span> Vector{Int64}, default<span class="pl-k">:</span> [<span class="pl-c1">2</span>, <span class="pl-c1">2</span>, <span class="pl-c1">2</span>, <span class="pl-c1">2</span>])
  <span class="pl-k">-</span>h, <span class="pl-k">--</span>help            show this help message and exit</pre></div>
<h3 dir="auto"><a id="user-content-specifying-defaults-in-config-files" class="anchor" aria-hidden="true" href="#specifying-defaults-in-config-files"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Specifying Defaults in Config Files</h3>
<p dir="auto">Specifying defaults in a dictionary in the script is not great for version controlling
experiments. Typically we recommend storing the defaults in config files, and use
command line arguments for hyper-parameters like <code>seed</code>. In this case, we need to make
a very simple change.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="cfg = define_configuration(ExperimentConfig, filename)"><pre>cfg <span class="pl-k">=</span> <span class="pl-c1">define_configuration</span>(ExperimentConfig, filename)</pre></div>
<p dir="auto">where <code>filename</code> can be a <code>.toml</code>, <code>.yml</code> or <code>.json</code> file. See <code>examples/script_file.jl</code>
for an example script.</p>
<h3 dir="auto"><a id="user-content-logging-configuration" class="anchor" aria-hidden="true" href="#logging-configuration"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Logging Configuration</h3>
<p dir="auto">Logging a deeply nested struct is typically not supported OOTB by most loggers. We provide
a simple function <code>flatten_configuration</code> which takes the configuration and returns a
single level dictionary which can be easily logged.</p>
<h2 dir="auto"><a id="user-content-known-issues" class="anchor" aria-hidden="true" href="#known-issues"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Known Issues</h2>
<ol dir="auto">
<li>
<p dir="auto">Using field types like <code>Symbol</code> doesn't work with loading the defaults from a file.</p>
</li>
<li>
<p dir="auto"><code>NTuple</code>s parsing is implemented via type piracy.</p>
</li>
</ol>
</article></div>