<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-genericschur" class="anchor" aria-hidden="true" href="#genericschur"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>GenericSchur</h1>

<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/ae2f538d678a8e76c5493d870c59fbf928b14906e41227a07af5bbf3566b5068/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6966656379636c652d6d61747572696e672d626c75652e737667"><img src="https://camo.githubusercontent.com/ae2f538d678a8e76c5493d870c59fbf928b14906e41227a07af5bbf3566b5068/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6966656379636c652d6d61747572696e672d626c75652e737667" alt="Lifecycle" data-canonical-src="https://img.shields.io/badge/lifecycle-maturing-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/RalphAS/GenericSchur.jl/actions"><img src="https://github.com/RalphAS/GenericSchur.jl/workflows/CI/badge.svg" alt="GitHub CI Build Status" style="max-width: 100%;"></a>
<a href="http://codecov.io/github/RalphAS/GenericSchur.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/a5bb31edad6485a0899649acc014b4799be1075d91873b86022cd9b03b79eb8a/687474703a2f2f636f6465636f762e696f2f6769746875622f52616c706841532f47656e6572696353636875722e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/RalphAS/GenericSchur.jl/coverage.svg?branch=master" style="max-width: 100%;"></a>
<a href="https://RalphAS.github.io/GenericSchur.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Documentation" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-eigen-analysis-of-matrices-with-generic-floating-point-element-types-in-julia" class="anchor" aria-hidden="true" href="#eigen-analysis-of-matrices-with-generic-floating-point-element-types-in-julia"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Eigen-analysis of matrices with generic floating-point element types in Julia</h2>
<p dir="auto">The Schur decomposition is the workhorse for eigensystem analysis of
dense matrices. The diagonal eigen-decomposition of normal
(especially Hermitian) matrices is an important special case,
but for non-normal matrices the Schur form is often more useful.</p>
<p dir="auto">The purpose of this package is to extend the <code>schur!</code> and related
functions of the standard library to number types not handled by
LAPACK, such as <code>Complex{BigFloat}, Complex{Float128}</code> (from
Quadmath.jl), etc.  For these, the <code>schur!</code>, <code>eigvals!</code>, and <code>eigen!</code>
functions in the <code>LinearAlgebra</code> standard library are overloaded here,
and may be accessed through the usual <code>schur</code>, <code>eigvals</code>, and <code>eigen</code>
wrappers:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="A = your_matrix_generator()
S = schur(A)"><pre>A <span class="pl-k">=</span> <span class="pl-c1">your_matrix_generator</span>()
S <span class="pl-k">=</span> <span class="pl-c1">schur</span>(A)</pre></div>
<p dir="auto">The result <code>S</code> is a <code>LinearAlgebra.Schur</code> object, with the properties <code>T</code>,
<code>Z=vectors</code>, and <code>values</code>.</p>
<p dir="auto">The unexported <code>gschur</code> and <code>gschur!</code> functions are available for types
normally handled by the LAPACK wrappers in <code>LinearAlgebra</code>.</p>
<h3 dir="auto"><a id="user-content-complex-matrices" class="anchor" aria-hidden="true" href="#complex-matrices"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Complex matrices</h3>
<p dir="auto">For square matrices of complex element type,
this package provides a full Schur decomposition:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="A::StridedMatrix{C} where {C &lt;: Complex} == Z * T * adjoint(Z)"><pre>A<span class="pl-k">::</span><span class="pl-c1">StridedMatrix{C}</span> <span class="pl-k">where</span> {C <span class="pl-k">&lt;:</span> <span class="pl-c1">Complex</span>} <span class="pl-k">==</span> Z <span class="pl-k">*</span> T <span class="pl-k">*</span> <span class="pl-c1">adjoint</span>(Z)</pre></div>
<p dir="auto">where <code>T</code> is upper-triangular and <code>Z</code> is unitary, both with the same element
type as <code>A</code>. (See below for real matrices.)</p>
<p dir="auto">The algorithm is essentially the unblocked, serial, single-shift Francis (QR)
scheme used in the complex LAPACK routines. Balancing is also available.</p>
<h3 dir="auto"><a id="user-content-eigenvectors" class="anchor" aria-hidden="true" href="#eigenvectors"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Eigenvectors</h3>
<p dir="auto">Right and left eigenvectors are available from complex Schur factorizations,
using</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="S = schur(A)
VR = eigvecs(S)
VL = eigvecs(S,left=true)"><pre>S <span class="pl-k">=</span> <span class="pl-c1">schur</span>(A)
VR <span class="pl-k">=</span> <span class="pl-c1">eigvecs</span>(S)
VL <span class="pl-k">=</span> <span class="pl-c1">eigvecs</span>(S,left<span class="pl-k">=</span><span class="pl-c1">true</span>)</pre></div>
<h4 dir="auto"><a id="user-content-normalization" class="anchor" aria-hidden="true" href="#normalization"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Normalization</h4>
<p dir="auto">As of v0.4, eigenvectors as returned from our <code>eigen</code> and <code>eigvecs</code> methods
for the standard problem have unit Euclidean norm. This accords with the
current (undocumented) behavior of <code>LinearAlgebra</code> methods. (Previously a
convention based on low-level LAPACK routines was used here.)</p>
<h3 dir="auto"><a id="user-content-real-decompositions" class="anchor" aria-hidden="true" href="#real-decompositions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Real decompositions</h3>
<p dir="auto">A quasi-triangular "real Schur" decomposition of real matrices is also
provided:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="A::StridedMatrix{R} where {R &lt;: Real} == Z * T * transpose(Z)"><pre>A<span class="pl-k">::</span><span class="pl-c1">StridedMatrix{R}</span> <span class="pl-k">where</span> {R <span class="pl-k">&lt;:</span> <span class="pl-c1">Real</span>} <span class="pl-k">==</span> Z <span class="pl-k">*</span> T <span class="pl-k">*</span> <span class="pl-c1">transpose</span>(Z)</pre></div>
<p dir="auto">where <code>T</code> is quasi-upper-triangular and <code>Z</code> is orthogonal, both with the
same element type as <code>A</code>.  This is what you get by invoking the above-mentioned
functions with matrix arguments whose element type <code>T &lt;: Real</code>.
The result is in standard form, so
pair-blocks (and therefore rank-2 invariant subspaces) should be fully resolved.</p>
<p dir="auto">Eigenvectors are not currently available for the "real Schur" forms.
But don't despair; one can convert a standard quasi-triangular real <code>Schur</code>
into a complex <code>Schur</code> with the <code>triangularize</code> function provided here.</p>
<h2 dir="auto"><a id="user-content-balancing" class="anchor" aria-hidden="true" href="#balancing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Balancing</h2>
<p dir="auto">The accuracy of eigenvalues and eigenvectors may be improved for some
matrices by use of a similarity transform which reduces the matrix
norm.  This is done by default in the <code>eigen!</code> method, and may also be
handled explicitly via the <code>balance!</code> function provided here:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Ab, B = balance!(copy(A))
S = schur(Ab)
v = eigvecs(S)
lmul!(B, v) # to get the eigenvectors of A"><pre>Ab, B <span class="pl-k">=</span> <span class="pl-c1">balance!</span>(<span class="pl-c1">copy</span>(A))
S <span class="pl-k">=</span> <span class="pl-c1">schur</span>(Ab)
v <span class="pl-k">=</span> <span class="pl-c1">eigvecs</span>(S)
<span class="pl-c1">lmul!</span>(B, v) <span class="pl-c"><span class="pl-c">#</span> to get the eigenvectors of A</span></pre></div>
<p dir="auto">More details are in the function docstring. Although the balancing function
also does permutations to isolate trivial subspaces, the Schur routines do not
yet exploit this opportunity for reduced workload.</p>
<h2 dir="auto"><a id="user-content-subspaces-condition-and-all-that" class="anchor" aria-hidden="true" href="#subspaces-condition-and-all-that"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Subspaces, condition, and all that.</h2>
<p dir="auto">Methods for reordering a Schur decomposition (<code>ordschur</code>) and computing
condition numbers (<code>eigvalscond</code>) and subspace separation (<code>subspacesep</code>)
are provided.
Tests to date suggest that behavior is analogous
to the LAPACK routines on which the implementation is based.</p>
<h2 dir="auto"><a id="user-content-generalized-eigensystems" class="anchor" aria-hidden="true" href="#generalized-eigensystems"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Generalized eigensystems</h2>
<p dir="auto">Methods for the generalized eigenvalue problem (matrix pencils) with
<code>Complex</code> element types are available as of release 0.3.0;
in particular, extension of <code>schur(A,B)</code> from LinearAlgebra.
The algorithms are translated from LAPACK, but this implementation has
had limited testing. (Note that it is easy to check the decomposition
of a particular case ex post facto.)</p>
<p dir="auto">Corresponding functions for reordering and condition
estimation are included. Tests to date suggest that behavior is analogous
to LAPACK.</p>
<p dir="auto">Right eigenvectors of generalized problems are available with
<code>V = eigvecs(S::GeneralizedSchur{&lt;:Complex})</code>. Column <code>j</code> of <code>V</code> satisfies
<code>S.beta[j] * A * v ≈ S.alpha[j] * B * v</code>.
These currently have a peculiar norm intended to be compatible with LAPACK
conventions.</p>
<h2 dir="auto"><a id="user-content-acknowledgements" class="anchor" aria-hidden="true" href="#acknowledgements"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Acknowledgements</h2>
<p dir="auto">This package incorporates or elaborates several methods from Andreas Noack's
<a href="http://github.com/JuliaLinearAlgebra/GenericLinearAlgebra.jl">GenericLinearAlgebra.jl</a> package,
and includes translations from <a href="http://www.netlib.org/lapack/index.html" rel="nofollow">LAPACK</a> code.</p>
</article></div>