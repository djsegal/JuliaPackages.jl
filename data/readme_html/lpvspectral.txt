<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-lpvspectral" class="anchor" aria-hidden="true" href="#lpvspectral"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>LPVSpectral</h1>
<p><a href="https://github.com/baggepinnen/LPVSpectral.jl/actions"><img src="https://github.com/baggepinnen/LPVSpectral.jl/workflows/CI/badge.svg" alt="CI" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/baggepinnen/LPVSpectral.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/f1f648b02059c4bcdd4bf47300d5a92f73aaacee/68747470733a2f2f636f6465636f762e696f2f67682f626167676570696e6e656e2f4c5056537065637472616c2e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/baggepinnen/LPVSpectral.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p>A toolbox for least-squares spectral estimation, sparse spectral estimation and Linear Parameter-Varying (LPV) spectral estimation. Contains an implementation of the spectral estimation method presented in
<a href="http://lup.lub.lu.se/record/ac32368e-e199-44ff-b76a-36668ac7d595" rel="nofollow">Bagge Carlson et al. "Linear Parameter-Varying Spectral Decomposition." 2017 American Control Conference.</a></p>
<div class="highlight highlight-text-bibtex"><pre><span class="pl-k">@inproceedings</span>{<span class="pl-en">bagge2017spectral</span>,
  <span class="pl-s">title</span>        = <span class="pl-s"><span class="pl-pds">{</span>Linear Parameter-Varying Spectral Decomposition<span class="pl-pds">}</span></span>,
  <span class="pl-s">author</span>       = <span class="pl-s"><span class="pl-pds">{</span>Bagge Carlson, Fredrik and Robertsson, Anders and Johansson, Rolf<span class="pl-pds">}</span></span>,
  <span class="pl-s">booktitle</span>    = <span class="pl-s"><span class="pl-pds">{</span>2017 American Control Conference (ACC)<span class="pl-pds">}</span></span>,
  <span class="pl-s">year</span>         = <span class="pl-s"><span class="pl-pds">{</span>2017<span class="pl-pds">}</span></span>,
}</pre></div>
<p>Extensions (sparse estimation methods) to the above article were developed in
<a href="https://www.control.lth.se/staff/fredrik-bagge-carlson/" rel="nofollow">Bagge Carlson, F.</a>, <a href="https://lup.lub.lu.se/search/publication/ffb8dc85-ce12-4f75-8f2b-0881e492f6c0" rel="nofollow">"Machine Learning and System Identification for Estimation in Physical Systems"</a> (PhD Thesis 2018).</p>
<div class="highlight highlight-text-bibtex"><pre><span class="pl-k">@thesis</span>{<span class="pl-en">bagge2018</span>,
  <span class="pl-s">title</span>        = <span class="pl-s"><span class="pl-pds">{</span>Machine Learning and System Identification for Estimation in Physical Systems<span class="pl-pds">}</span></span>,
  <span class="pl-s">author</span>       = <span class="pl-s"><span class="pl-pds">{</span>Bagge Carlson, Fredrik<span class="pl-pds">}</span></span>,
  <span class="pl-s">keyword</span>      = <span class="pl-s"><span class="pl-pds">{</span>Machine Learning,System Identification,Robotics,Spectral estimation,Calibration,State estimation<span class="pl-pds">}</span></span>,
  <span class="pl-s">month</span>        = <span class="pl-s"><span class="pl-pds">{</span>12<span class="pl-pds">}</span></span>,
  <span class="pl-s">type</span>         = <span class="pl-s"><span class="pl-pds">{</span>PhD Thesis<span class="pl-pds">}</span></span>,
  <span class="pl-s">number</span>       = <span class="pl-s"><span class="pl-pds">{</span>TFRT-1122<span class="pl-pds">}</span></span>,
  <span class="pl-s">institution</span>  = <span class="pl-s"><span class="pl-pds">{</span>Dept. Automatic Control, Lund University, Sweden<span class="pl-pds">}</span></span>,
  <span class="pl-s">year</span>         = <span class="pl-s"><span class="pl-pds">{</span>2018<span class="pl-pds">}</span></span>,
  <span class="pl-s">url</span>          = <span class="pl-s"><span class="pl-pds">{</span>https://lup.lub.lu.se/search/publication/ffb8dc85-ce12-4f75-8f2b-0881e492f6c0<span class="pl-pds">}</span></span>,
}</pre></div>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Installation</h2>
<p><code>import Pkg; Pkg.add("LPVSpectral")</code></p>
<h1><a id="user-content-list-of-functions" class="anchor" aria-hidden="true" href="#list-of-functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>List of functions</h1>
<p>This package provides tools for general least-squares spectral analysis, check out the functions</p>
<pre><code>ls_spectral             # Least-squares spectral analysis
ls_sparse_spectral      # Least-squares sparse (L0) spectral analysis (uses ADMM)
tls_spectral            # Total Least-squares spectral analysis
ls_windowpsd            # Windowed Least-squares spectral analysis (sparse estimates available, see kwarg `estimator`)
ls_windowcsd            # Windowed Least-squares cross-spectral density estimation (sparse estimates available, see kwarg `estimator`)
ls_cohere               # Least-squares cross coherence estimation (sparse estimates available, see kwarg `estimator`)
ls_spectral_lpv         # LPV spectral decomposition
ls_sparse_spectral_lpv  # LPV spectral decomposition with group-lasso penalty on frequencies (uses ADMM)
ls_windowpsd_lpv        # Windowed power spectral density estimation with LPV method

mel                     # Compute Mel projection matrix
melspectrogram          # Standard Mel spectrogram
mfcc                    # Mel cepstrum spectrogram
</code></pre>
<p>The functions that estimate sparse spectra require the user to manually import <code>using ProximalOperators</code>.</p>
<p>All function have docstrings available in the REPL. The general pattern is</p>
<div class="highlight highlight-source-julia"><pre>x,f <span class="pl-k">=</span> <span class="pl-c1">ls_XXX</span>(y,t,f<span class="pl-k">=</span><span class="pl-c1">default_freqs</span>(t) [, W]; kwargs<span class="pl-k">...</span>)</pre></div>
<p>where <code>x</code> are the complex Fourier coefficients and <code>f</code> are the frequency points. If no frequency vector is supplied, the default is to assume a sample time of 1 and use an equidistant grid from 0 to 0.5 of <code>length(t)÷2</code>.
<code>W</code> is an optional weight vector of <code>length(y)</code> for weighted least-squares estimation. Some methods accept keyword arguments, these methods are <code>ls_windowpsd, ls_windowcsd, ls_cohere</code> and the keywords and their defaults are
<code>nw = 10, noverlap = -1, window_func=rect, estimator=ls_spectral</code>.</p>
<h1><a id="user-content-sparse-spectral-estimation" class="anchor" aria-hidden="true" href="#sparse-spectral-estimation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Sparse spectral estimation</h1>
<p>We provide a number of ways to estimate spare spectra. These functions require the user to manually load <code>using ProximalOperators</code>.</p>
<h2><a id="user-content-l-regularized-spectral-estimation" class="anchor" aria-hidden="true" href="#l-regularized-spectral-estimation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>L₁ regularized spectral estimation</h2>
<p>Minimize ||y-Ax||₂² + λ||x||₁ where x are the Fourier coefficients. Promotes a sparse spectrum</p>
<div class="highlight highlight-source-julia"><pre>x <span class="pl-k">=</span> <span class="pl-c1">ls_sparse_spectral</span>(y,t,ω; proxg<span class="pl-k">=</span><span class="pl-c1">NormL1</span>(λ), tol<span class="pl-k">=</span><span class="pl-c1">1e-9</span>, printerval<span class="pl-k">=</span><span class="pl-c1">1000</span>, iters<span class="pl-k">=</span><span class="pl-c1">30000</span>, μ<span class="pl-k">=</span><span class="pl-c1">0.000001</span>)</pre></div>
<h2><a id="user-content-l-regularized-spectral-estimation-1" class="anchor" aria-hidden="true" href="#l-regularized-spectral-estimation-1"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>L₀ regularized spectral estimation</h2>
<p>Minimize ||y-Ax||₂² + λ||x||₀ where x are the Fourier coefficients. Promotes a sparse spectrum</p>
<div class="highlight highlight-source-julia"><pre>x <span class="pl-k">=</span> <span class="pl-c1">ls_sparse_spectral</span>(y,t,ω; proxg<span class="pl-k">=</span><span class="pl-c1">NormL0</span>(λ), tol<span class="pl-k">=</span><span class="pl-c1">1e-9</span>, printerval<span class="pl-k">=</span><span class="pl-c1">1000</span>, iters<span class="pl-k">=</span><span class="pl-c1">30000</span>, μ<span class="pl-k">=</span><span class="pl-c1">0.000001</span>)</pre></div>
<h2><a id="user-content-l-constrained-spectral-estimation" class="anchor" aria-hidden="true" href="#l-constrained-spectral-estimation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>L₀ constrained spectral estimation</h2>
<p>Minimize ||y-Ax||₂² s.t. ||x||₀ ≦ r where x are the Fourier coefficients. Enforces an <code>r</code>-sparse spectrum</p>
<div class="highlight highlight-source-julia"><pre>x <span class="pl-k">=</span> <span class="pl-c1">ls_sparse_spectral</span>(y,t,ω; proxg<span class="pl-k">=</span><span class="pl-c1">IndBallL0</span>(r), tol<span class="pl-k">=</span><span class="pl-c1">1e-9</span>, printerval<span class="pl-k">=</span><span class="pl-c1">1000</span>, iters<span class="pl-k">=</span><span class="pl-c1">30000</span>, μ<span class="pl-k">=</span><span class="pl-c1">0.000001</span>)</pre></div>
<h2><a id="user-content-sparse-lpv-spectral-estimation" class="anchor" aria-hidden="true" href="#sparse-lpv-spectral-estimation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Sparse LPV spectral estimation</h2>
<p>See detailed example below and Bagge 2018.</p>
<div class="highlight highlight-source-julia"><pre>se <span class="pl-k">=</span> <span class="pl-c1">ls_sparse_spectral_lpv</span>(Y,X,V,ω_test,Nv; λ <span class="pl-k">=</span> <span class="pl-c1">0.1</span>, normalize <span class="pl-k">=</span> normal, tol<span class="pl-k">=</span><span class="pl-c1">1e-8</span>, printerval<span class="pl-k">=</span><span class="pl-c1">100</span>, iters<span class="pl-k">=</span><span class="pl-c1">6000</span>)</pre></div>
<h1><a id="user-content-lpv-spectral-estimation" class="anchor" aria-hidden="true" href="#lpv-spectral-estimation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>LPV spectral estimation</h1>
<p>We demonstrate the usage of the package with a simple example using simulated data, details can be found in the paper.</p>
<h2><a id="user-content-signal-generation" class="anchor" aria-hidden="true" href="#signal-generation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Signal generation</h2>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> LPVSpectral, Plots, LaTeXStrings, DSP

<span class="pl-s"><span class="pl-pds">"""</span></span>
<span class="pl-s">`y,v,x = generate_signal(f,w,N)`</span>
<span class="pl-s"></span>
<span class="pl-s">`f` is a vector of functions `f(v)` that determine the functional dependence of the spectrum upon the velocity, one function for each frequency in `w`  both the amplitude and the phase are determined from these functions</span>
<span class="pl-s"></span>
<span class="pl-s">`w` is a vector of frequencies for which to estimate the spectrum</span>
<span class="pl-s"></span>
<span class="pl-s">`y,v,x` are output signal, sample points and scheduling variable respectively</span>
<span class="pl-s"><span class="pl-pds">"""</span></span>
<span class="pl-k">function</span> <span class="pl-en">generate_signal</span>(f,w,N, modphase<span class="pl-k">=</span><span class="pl-c1">false</span>)
    x <span class="pl-k">=</span> <span class="pl-c1">sort</span>(<span class="pl-c1">10</span><span class="pl-c1">rand</span>(N)) <span class="pl-c"><span class="pl-c">#</span> Sample points</span>
    v <span class="pl-k">=</span> <span class="pl-c1">range</span>(<span class="pl-c1">0</span>, stop<span class="pl-k">=</span><span class="pl-c1">1</span>, length<span class="pl-k">=</span>N) <span class="pl-c"><span class="pl-c">#</span> Scheduling variable</span>

    <span class="pl-c"><span class="pl-c">#</span> generate output signal</span>
    dependence_matrix <span class="pl-k">=</span> Float64[f[(i<span class="pl-k">-</span><span class="pl-c1">1</span>)<span class="pl-k">%</span><span class="pl-c1">length</span>(f)<span class="pl-k">+</span><span class="pl-c1">1</span>](v) <span class="pl-k">for</span> v <span class="pl-k">in</span> v, i <span class="pl-k">in</span> <span class="pl-c1">eachindex</span>(w)] <span class="pl-c"><span class="pl-c">#</span> N x nw</span>
    frequency_matrix  <span class="pl-k">=</span> [<span class="pl-c1">cos</span>(w<span class="pl-k">*</span>x <span class="pl-k">-</span><span class="pl-c1">0.5</span>modphase<span class="pl-k">*</span>(dependence_matrix[i,j])) <span class="pl-k">for</span> (i,x) <span class="pl-k">in</span> <span class="pl-c1">enumerate</span>(x), (j,w) <span class="pl-k">in</span> <span class="pl-c1">enumerate</span>(w)] <span class="pl-c"><span class="pl-c">#</span> N x nw</span>
    y <span class="pl-k">=</span> <span class="pl-c1">sum</span>(dependence_matrix<span class="pl-k">.*</span>frequency_matrix,dims<span class="pl-k">=</span><span class="pl-c1">2</span>)[:] <span class="pl-c"><span class="pl-c">#</span> Sum over all frequencies</span>
    y <span class="pl-k">+=</span> <span class="pl-c1">0.1</span><span class="pl-c1">randn</span>(<span class="pl-c1">size</span>(y))
    y,v,x,frequency_matrix, dependence_matrix
<span class="pl-k">end</span>

N      <span class="pl-k">=</span> <span class="pl-c1">500</span> <span class="pl-c"><span class="pl-c">#</span> Number of training data points</span>
f      <span class="pl-k">=</span> [v<span class="pl-k">-&gt;</span><span class="pl-c1">2</span>v<span class="pl-k">^</span><span class="pl-c1">2</span>, v<span class="pl-k">-&gt;</span><span class="pl-c1">2</span><span class="pl-k">/</span>(<span class="pl-c1">5</span>v<span class="pl-k">+</span><span class="pl-c1">1</span>), v<span class="pl-k">-&gt;</span><span class="pl-c1">3</span><span class="pl-c1">exp</span>(<span class="pl-k">-</span><span class="pl-c1">10</span><span class="pl-k">*</span>(v<span class="pl-k">-</span><span class="pl-c1">0.5</span>)<span class="pl-k">^</span><span class="pl-c1">2</span>),] <span class="pl-c"><span class="pl-c">#</span> Functional dependences on the scheduling variable</span>
w      <span class="pl-k">=</span> <span class="pl-c1">2</span>π<span class="pl-k">.*</span>[<span class="pl-c1">2</span>,<span class="pl-c1">10</span>,<span class="pl-c1">20</span>] <span class="pl-c"><span class="pl-c">#</span> Frequency vector</span>
w_test <span class="pl-k">=</span> <span class="pl-c1">2</span>π<span class="pl-k">.*</span>(<span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">25</span>) <span class="pl-c"><span class="pl-c">#</span> Test Frequency vector, set w_test = w for a nice function visualization</span>

Y,V,X,frequency_matrix, dependence_matrix <span class="pl-k">=</span> <span class="pl-c1">generate_signal</span>(f,w,N, <span class="pl-c1">true</span>)</pre></div>
<h2><a id="user-content-signal-analysis" class="anchor" aria-hidden="true" href="#signal-analysis"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Signal analysis</h2>
<p>We now make use of the spectral estimation method presented in the paper:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span> Options for spectral estimation</span>
λ      <span class="pl-k">=</span> <span class="pl-c1">0.02</span> <span class="pl-c"><span class="pl-c">#</span> Regularization parameter</span>
λs     <span class="pl-k">=</span> <span class="pl-c1">1</span>    <span class="pl-c"><span class="pl-c">#</span> Regularization parameter group-lasso</span>
normal <span class="pl-k">=</span> <span class="pl-c1">true</span> <span class="pl-c"><span class="pl-c">#</span> Use normalized basis functions</span>
Nv     <span class="pl-k">=</span> <span class="pl-c1">50</span>   <span class="pl-c"><span class="pl-c">#</span> Number of basis functions</span>

se  <span class="pl-k">=</span> <span class="pl-c1">ls_spectral_lpv</span>(Y,X,V,w_test,Nv; λ <span class="pl-k">=</span> λ, normalize <span class="pl-k">=</span> normal) <span class="pl-c"><span class="pl-c">#</span> Perform LPV spectral estimation</span>
ses <span class="pl-k">=</span> <span class="pl-c1">ls_sparse_spectral_lpv</span>(Y,X,V,w_test,Nv; λ <span class="pl-k">=</span> λs, normalize <span class="pl-k">=</span> normal, tol<span class="pl-k">=</span><span class="pl-c1">1e-8</span>, printerval<span class="pl-k">=</span><span class="pl-c1">100</span>, iters<span class="pl-k">=</span><span class="pl-c1">6000</span>) <span class="pl-c"><span class="pl-c">#</span> Same as above but with a group-lasso penalty on frequencies, promoting a solution with a sparse set of frequencies. Can be used to identify a sparse spectrum, i.e. to find w among w_test.</span></pre></div>
<p>All that remains now is to visualize the result, along with the result of standard spectral estimation methods.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">plot</span>(X,[Y V], linewidth<span class="pl-k">=</span>[<span class="pl-c1">1</span> <span class="pl-c1">2</span>], lab<span class="pl-k">=</span>[<span class="pl-s"><span class="pl-pds">"</span><span class="pl-cce">\$</span>y_t<span class="pl-cce">\$</span><span class="pl-pds">"</span></span> <span class="pl-s"><span class="pl-pds">"</span><span class="pl-cce">\$</span>v_t<span class="pl-cce">\$</span><span class="pl-pds">"</span></span>], xlabel<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">L</span>"</span>$x$ (sampling points)<span class="pl-pds">"</span></span>, title<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">L</span>"</span>Test signal $y_t$ and scheduling signal $v_t$<span class="pl-pds">"</span></span>, legend<span class="pl-k">=</span><span class="pl-c1">true</span>, xlims<span class="pl-k">=</span>(<span class="pl-c1">0</span>,<span class="pl-c1">10</span>), grid<span class="pl-k">=</span><span class="pl-c1">false</span>, c<span class="pl-k">=</span>[<span class="pl-c1">:cyan</span> <span class="pl-c1">:blue</span>])
<span class="pl-c1">plot</span>(se; normalization<span class="pl-k">=</span><span class="pl-c1">:none</span>, dims<span class="pl-k">=</span><span class="pl-c1">2</span>, l<span class="pl-k">=</span><span class="pl-c1">:solid</span>, c <span class="pl-k">=</span> [<span class="pl-c1">:red</span> <span class="pl-c1">:green</span> <span class="pl-c1">:blue</span>], fillalpha<span class="pl-k">=</span><span class="pl-c1">0.5</span>, nMC <span class="pl-k">=</span> <span class="pl-c1">5000</span>, fillcolor<span class="pl-k">=</span>[<span class="pl-c1">RGBA</span>(<span class="pl-c1">1</span>,<span class="pl-c1">.5</span>,<span class="pl-c1">.5</span>,<span class="pl-c1">.5</span>) <span class="pl-c1">RGBA</span>(<span class="pl-c1">.5</span>,<span class="pl-c1">1</span>,<span class="pl-c1">.5</span>,<span class="pl-c1">.5</span>) <span class="pl-c1">RGBA</span>(<span class="pl-c1">.5</span>,<span class="pl-c1">.5</span>,<span class="pl-c1">1</span>,<span class="pl-c1">.5</span>)], linewidth<span class="pl-k">=</span><span class="pl-c1">2</span>, bounds<span class="pl-k">=</span><span class="pl-c1">true</span>, lab<span class="pl-k">=</span><span class="pl-c1">reshape</span>([<span class="pl-s"><span class="pl-pds">"</span>Est. <span class="pl-cce">\$\\</span>omega = <span class="pl-v">$(<span class="pl-c1">round</span>(w<span class="pl-k">/</span>π))</span><span class="pl-cce">\\</span>pi <span class="pl-cce">\$</span><span class="pl-pds">"</span></span> <span class="pl-k">for</span> w <span class="pl-k">in</span> w_test],<span class="pl-c1">1</span>,:), phase <span class="pl-k">=</span> <span class="pl-c1">false</span>)
<span class="pl-c1">plot!</span>(V,dependence_matrix, title<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">L</span>"</span>Functional dependencies $A(<span class="pl-cce">\o</span>mega,v)$<span class="pl-pds">"</span></span>, xlabel<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">L</span>"</span>$v$<span class="pl-pds">"</span></span>, ylabel<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">L</span>"</span>$A(<span class="pl-cce">\o</span>mega,v)$<span class="pl-pds">"</span></span>, c <span class="pl-k">=</span> [<span class="pl-c1">:red</span> <span class="pl-c1">:green</span> <span class="pl-c1">:blue</span>], l<span class="pl-k">=</span><span class="pl-c1">:dot</span>, linewidth<span class="pl-k">=</span><span class="pl-c1">2</span>,lab<span class="pl-k">=</span><span class="pl-c1">reshape</span>([<span class="pl-s"><span class="pl-pds">"</span>True <span class="pl-cce">\$\\</span>omega = <span class="pl-v">$(<span class="pl-c1">round</span>(w<span class="pl-k">/</span>π))</span><span class="pl-cce">\\</span>pi<span class="pl-cce">\$</span><span class="pl-pds">"</span></span> <span class="pl-k">for</span> w <span class="pl-k">in</span> w],<span class="pl-c1">1</span>,:), grid<span class="pl-k">=</span><span class="pl-c1">false</span>)

<span class="pl-c"><span class="pl-c">#</span> Plot regular spectrum</span>
spectrum_lpv   <span class="pl-k">=</span> <span class="pl-c1">psd</span>(se) <span class="pl-c"><span class="pl-c">#</span> Calculate power spectral density</span>
spectrum_lpvs  <span class="pl-k">=</span> <span class="pl-c1">psd</span>(ses) <span class="pl-c"><span class="pl-c">#</span> Calculate sparse power spectral density</span>
fs             <span class="pl-k">=</span> N<span class="pl-k">/</span>(X[<span class="pl-c1">end</span>]<span class="pl-k">-</span>X[<span class="pl-c1">1</span>]) <span class="pl-c"><span class="pl-c">#</span> This is the (approximate) sampling freqency of the generated signal</span>
spectrum_per   <span class="pl-k">=</span> DSP<span class="pl-k">.</span><span class="pl-c1">periodogram</span>(Y, fs<span class="pl-k">=</span>fs)
spectrum_welch <span class="pl-k">=</span> DSP<span class="pl-k">.</span><span class="pl-c1">welch_pgram</span>(Y, fs<span class="pl-k">=</span>fs)
<span class="pl-c1">plot</span>(<span class="pl-c1">2</span>π<span class="pl-k">*</span><span class="pl-c1">collect</span>(spectrum_per<span class="pl-k">.</span>freq), spectrum_per<span class="pl-k">.</span>power, lab<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Periodogram<span class="pl-pds">"</span></span>, l<span class="pl-k">=</span><span class="pl-c1">:path</span>, m<span class="pl-k">=</span><span class="pl-c1">:none</span>, yscale<span class="pl-k">=</span><span class="pl-c1">:log10</span>, c<span class="pl-k">=</span><span class="pl-c1">:cyan</span>)
<span class="pl-c1">plot!</span>(<span class="pl-c1">2</span>π<span class="pl-k">*</span><span class="pl-c1">collect</span>(spectrum_welch<span class="pl-k">.</span>freq), spectrum_welch<span class="pl-k">.</span>power, lab<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Welch<span class="pl-pds">"</span></span>, l<span class="pl-k">=</span><span class="pl-c1">:path</span>, m<span class="pl-k">=</span><span class="pl-c1">:none</span>, yscale<span class="pl-k">=</span><span class="pl-c1">:log10</span>, linewidth<span class="pl-k">=</span><span class="pl-c1">2</span>, c<span class="pl-k">=</span><span class="pl-c1">:blue</span>)
<span class="pl-c1">plot!</span>(w_test,spectrum_lpv<span class="pl-k">/</span>fs, xlabel<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">L</span>"</span>$<span class="pl-cce">\o</span>mega$ [rad/s]<span class="pl-pds">"</span></span>, ylabel<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Spectral density<span class="pl-pds">"</span></span>, ylims<span class="pl-k">=</span>(<span class="pl-k">-</span><span class="pl-c1">Inf</span>,<span class="pl-c1">Inf</span>), grid<span class="pl-k">=</span><span class="pl-c1">false</span>, lab<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>LPV<span class="pl-pds">"</span></span>, l<span class="pl-k">=</span><span class="pl-c1">:scatter</span>, m<span class="pl-k">=</span><span class="pl-c1">:o</span>, yscale<span class="pl-k">=</span><span class="pl-c1">:log10</span>, c<span class="pl-k">=</span><span class="pl-c1">:orange</span>)
<span class="pl-c1">plot!</span>(w_test,spectrum_lpvs<span class="pl-k">/</span>fs, lab<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Sparse LPV<span class="pl-pds">"</span></span>, l<span class="pl-k">=</span><span class="pl-c1">:scatter</span>, m<span class="pl-k">=</span><span class="pl-c1">:o</span>, c<span class="pl-k">=</span><span class="pl-c1">:green</span>)</pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="figs/gen_sig.png"><img src="figs/gen_sig.png" alt="window" style="max-width:100%;"></a>
<a target="_blank" rel="noopener noreferrer" href="figs/func_est.png"><img src="figs/func_est.png" alt="window" style="max-width:100%;"></a>
<a target="_blank" rel="noopener noreferrer" href="figs/spectrum.png"><img src="figs/spectrum.png" alt="window" style="max-width:100%;"></a></p>
<p>When the three frequencies in w have been identified, <code>w_test</code> can be replaced by <code>w</code> for a nicer plot. As indicated by the last figure, the sparse estimate using group-lasso is better at identifying the three frequency components present (with a small bias in the estimation of the true frequencies).</p>
<h1><a id="user-content-plotting" class="anchor" aria-hidden="true" href="#plotting"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Plotting</h1>
<p>This package defines a recipe for plotting of periodogram types from <code>DSP.jl</code>. You can thus type</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> LPVSpectral, DSP, Plots
<span class="pl-c1">plot</span>(<span class="pl-c1">periodogram</span>(y))
<span class="pl-c1">plot</span>(<span class="pl-c1">welch_pgram</span>(y))
<span class="pl-c1">plot</span>(<span class="pl-c1">melspectrogram</span>(y)) <span class="pl-c"><span class="pl-c">#</span> melspectrogram, mel, mfcc are defined in this package</span></pre></div>
</article></div>