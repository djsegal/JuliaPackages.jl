<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-formfactor" class="anchor" aria-hidden="true" href="#formfactor"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>FormFactor</h1>
<p dir="auto"><a href="https://github.com/nuzhat07/FormFactor.jl/actions/workflows/CI.yml"><img src="https://github.com/nuzhat07/FormFactor.jl/actions/workflows/CI.yml/badge.svg" alt="CI" style="max-width: 100%;"></a></p>
<p dir="auto"><a href="https://travis-ci.com/nuzhat07/FormFactor.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/0afcd47e62501c98db5dcc708d8f5b8e3488638d9f16e845abb8ee511035bd1f/68747470733a2f2f7472617669732d63692e636f6d2f6e757a68617430372f466f726d466163746f722e6a6c2e7376673f6272616e63683d6d61696e" alt="Build Status" data-canonical-src="https://travis-ci.com/nuzhat07/FormFactor.jl.svg?branch=main" style="max-width: 100%;"></a>
<a href="https://ci.appveyor.com/project/nuzhat07/FormFactor-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/4ded5264bfd993df3540f9c6a2d95ad16e0443ffbf7597a5dd37affeb272f56f/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f6769746875622f6e757a68617430372f466f726d466163746f722e6a6c3f7376673d74727565" alt="Build Status" data-canonical-src="https://ci.appveyor.com/api/projects/status/github/nuzhat07/FormFactor.jl?svg=true" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/nuzhat07/FormFactor.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/3635338c485d5bae319ee54ce8d9c0a35bfacdea7556bed9ff3e4354942c075d/68747470733a2f2f636f6465636f762e696f2f67682f6e757a68617430372f466f726d466163746f722e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/nuzhat07/FormFactor.jl/branch/main/graph/badge.svg" style="max-width: 100%;"></a>
<a href="https://coveralls.io/github/nuzhat07/FormFactor.jl?branch=main" rel="nofollow"><img src="https://camo.githubusercontent.com/3fdd12168007ebe01f7785907e2d638c303441e7e9853406d7b0303de5e2af05/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f6e757a68617430372f466f726d466163746f722e6a6c2f62616467652e7376673f6272616e63683d6d61696e" alt="Coverage" data-canonical-src="https://coveralls.io/repos/github/nuzhat07/FormFactor.jl/badge.svg?branch=main" style="max-width: 100%;"></a></p>
<p dir="auto"><strong>Introduction</strong></p>
<p dir="auto">This is a repository for atomic form factor calculation. The function "mform(n1::Int64, l1::Int64, m1::Int64, n2::Int64, l2::Int64, ρ::Float64, q::Float64)" will calculate the form factor and the input of this function are</p>
<ul dir="auto">
<li>n1, l1, m1 are the quantum numbers of the initial particle and n2, l2 are the quantum numbers of the final particle.</li>
<li>ρ is the ratio of Bohr radii of the initial and final particle. We are using the length in the units of Bohr radius of initial particle.</li>
<li>q is the transferred momentum in atomic unit. Atomic units: qatomic units = q/ (μcα), where α is the fine structure constant, μ is the reduced mass of the hydrogen-like atom.</li>
</ul>
<p dir="auto"><strong>Installation</strong></p>
<p dir="auto">To install this package one has to do</p>
<ul dir="auto">
<li>In the Julia REPL package mode <code>pkg&gt; add https://github.com/nuzhat07/FormFactor.jl.git</code></li>
<li><code>julia&gt; import FormFactor</code></li>
<li><code>julia&gt; using FormFactor</code></li>
<li><code>julia&gt; mform(1,0,0,1,0,1.0,0.66)</code>
We have added another function in our package which can compute form factor for independent direction of transferred momentum. The mformq function has arguments are <code>mformq(n1,l1,m1,n2,l2,m2,ρ,q,theta)</code>. Theta will define the azimuthal angle between the transferred momentum and quantization axis.</li>
</ul>
<p dir="auto"><strong>Fortran code</strong></p>
<p dir="auto">The author of <a href="#1">[1]</a> implemented a different algorithm in Fortran to calculate atomic form factor. To compare the computation time, we have changed the <em>ffdiff.f</em> file of the package <code>https://elsevier.digitalcommonsdata.com/datasets/ddy58t53dz/1</code> and computed the computation time.</p>
<div class="highlight highlight-source-fortran notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="*
*
* *** Test program to calculate electron-hydrogen scattering cross
* *** sections.
*
************************************************************************
*
     IMPLICIT NONE
     INTEGER N, L, M
     DOUBLE PRECISION DIFOFA
*
     WRITE(6,*) '                                      '
     WRITE(6,*) '** ******************************** **'
     WRITE(6,*) '**                                  **'
     WRITE(6,*) '**  This Output File gives us the   **'
     WRITE(6,*) '**                                  **'
     WRITE(6,*) '**  absolute value of the result    **'
     WRITE(6,*) '**                                  **'
     WRITE(6,*) '**  of subtracting 1. to the form   **'
     WRITE(6,*) '**                                  **'
     WRITE(6,*) '**  form factor of a state at the   **'
     WRITE(6,*) '**                                  **'
     WRITE(6,*) '**  origin. The expected result is  **'
     WRITE(6,*) '**                                  **'
     WRITE(6,*) '**  0.                              **'
     WRITE(6,*) '** ******************************** **'
     WRITE(6,*) '                                      '
     WRITE(6,*) '--------------------------------------'
     WRITE(6,*) '|  N |  L |  M |  | FFactor(0.66)|   |'
     WRITE(6,*) '--------------------------------------'
     DO 1 N=1,30
           DO 2 L=0,N-1
             DO 3 M=0,L
              WRITE(6,101) N,L,M,ABS(DIFOFA(N,L,M,N,L,M,0.66D0))
         3            CONTINUE
         2          CONTINUE
         1       CONTINUE
     WRITE(6,*) '--------------------------------------'
*
101  FORMAT(' | ',3(I2,' | '),ES11.2E3,'      | ')
     END"><pre><span class="pl-c"><span class="pl-c">*</span></span>
<span class="pl-c"><span class="pl-c">*</span></span>
<span class="pl-c"><span class="pl-c">*</span> *** Test program to calculate electron-hydrogen scattering cross</span>
<span class="pl-c"><span class="pl-c">*</span> *** sections.</span>
<span class="pl-c"><span class="pl-c">*</span></span>
<span class="pl-c"><span class="pl-c">*</span>***********************************************************************</span>
<span class="pl-c"><span class="pl-c">*</span></span>
     <span class="pl-k">IMPLICIT NONE</span>
     <span class="pl-k">INTEGER</span> N, L, M
     <span class="pl-k">DOUBLE PRECISION</span> DIFOFA
<span class="pl-c"><span class="pl-c">*</span></span>
     <span class="pl-k">WRITE</span>(<span class="pl-c1">6</span>,<span class="pl-k">*</span>) <span class="pl-s"><span class="pl-pds">'</span>                                      <span class="pl-pds">'</span></span>
     <span class="pl-k">WRITE</span>(<span class="pl-c1">6</span>,<span class="pl-k">*</span>) <span class="pl-s"><span class="pl-pds">'</span>** ******************************** **<span class="pl-pds">'</span></span>
     <span class="pl-k">WRITE</span>(<span class="pl-c1">6</span>,<span class="pl-k">*</span>) <span class="pl-s"><span class="pl-pds">'</span>**                                  **<span class="pl-pds">'</span></span>
     <span class="pl-k">WRITE</span>(<span class="pl-c1">6</span>,<span class="pl-k">*</span>) <span class="pl-s"><span class="pl-pds">'</span>**  This Output File gives us the   **<span class="pl-pds">'</span></span>
     <span class="pl-k">WRITE</span>(<span class="pl-c1">6</span>,<span class="pl-k">*</span>) <span class="pl-s"><span class="pl-pds">'</span>**                                  **<span class="pl-pds">'</span></span>
     <span class="pl-k">WRITE</span>(<span class="pl-c1">6</span>,<span class="pl-k">*</span>) <span class="pl-s"><span class="pl-pds">'</span>**  absolute value of the result    **<span class="pl-pds">'</span></span>
     <span class="pl-k">WRITE</span>(<span class="pl-c1">6</span>,<span class="pl-k">*</span>) <span class="pl-s"><span class="pl-pds">'</span>**                                  **<span class="pl-pds">'</span></span>
     <span class="pl-k">WRITE</span>(<span class="pl-c1">6</span>,<span class="pl-k">*</span>) <span class="pl-s"><span class="pl-pds">'</span>**  of subtracting 1. to the form   **<span class="pl-pds">'</span></span>
     <span class="pl-k">WRITE</span>(<span class="pl-c1">6</span>,<span class="pl-k">*</span>) <span class="pl-s"><span class="pl-pds">'</span>**                                  **<span class="pl-pds">'</span></span>
     <span class="pl-k">WRITE</span>(<span class="pl-c1">6</span>,<span class="pl-k">*</span>) <span class="pl-s"><span class="pl-pds">'</span>**  form factor of a state at the   **<span class="pl-pds">'</span></span>
     <span class="pl-k">WRITE</span>(<span class="pl-c1">6</span>,<span class="pl-k">*</span>) <span class="pl-s"><span class="pl-pds">'</span>**                                  **<span class="pl-pds">'</span></span>
     <span class="pl-k">WRITE</span>(<span class="pl-c1">6</span>,<span class="pl-k">*</span>) <span class="pl-s"><span class="pl-pds">'</span>**  origin. The expected result is  **<span class="pl-pds">'</span></span>
     <span class="pl-k">WRITE</span>(<span class="pl-c1">6</span>,<span class="pl-k">*</span>) <span class="pl-s"><span class="pl-pds">'</span>**                                  **<span class="pl-pds">'</span></span>
     <span class="pl-k">WRITE</span>(<span class="pl-c1">6</span>,<span class="pl-k">*</span>) <span class="pl-s"><span class="pl-pds">'</span>**  0.                              **<span class="pl-pds">'</span></span>
     <span class="pl-k">WRITE</span>(<span class="pl-c1">6</span>,<span class="pl-k">*</span>) <span class="pl-s"><span class="pl-pds">'</span>** ******************************** **<span class="pl-pds">'</span></span>
     <span class="pl-k">WRITE</span>(<span class="pl-c1">6</span>,<span class="pl-k">*</span>) <span class="pl-s"><span class="pl-pds">'</span>                                      <span class="pl-pds">'</span></span>
     <span class="pl-k">WRITE</span>(<span class="pl-c1">6</span>,<span class="pl-k">*</span>) <span class="pl-s"><span class="pl-pds">'</span>--------------------------------------<span class="pl-pds">'</span></span>
     <span class="pl-k">WRITE</span>(<span class="pl-c1">6</span>,<span class="pl-k">*</span>) <span class="pl-s"><span class="pl-pds">'</span>|  N |  L |  M |  | FFactor(0.66)|   |<span class="pl-pds">'</span></span>
     <span class="pl-k">WRITE</span>(<span class="pl-c1">6</span>,<span class="pl-k">*</span>) <span class="pl-s"><span class="pl-pds">'</span>--------------------------------------<span class="pl-pds">'</span></span>
     <span class="pl-k">DO</span> <span class="pl-c1">1</span> N<span class="pl-k">=</span><span class="pl-c1">1</span>,<span class="pl-c1">30</span>
           <span class="pl-k">DO</span> <span class="pl-c1">2</span> L<span class="pl-k">=</span><span class="pl-c1">0</span>,N<span class="pl-c1">-1</span>
             <span class="pl-k">DO</span> <span class="pl-c1">3</span> M<span class="pl-k">=</span><span class="pl-c1">0</span>,L
              <span class="pl-k">WRITE</span>(<span class="pl-c1">6</span>,<span class="pl-c1">101</span>) N,L,M,<span class="pl-k">ABS</span>(DIFOFA(N,L,M,N,L,M,<span class="pl-c1">0.66D0</span>))
         <span class="pl-c1">3</span>            <span class="pl-k">CONTINUE</span>
         <span class="pl-c1">2</span>          <span class="pl-k">CONTINUE</span>
         <span class="pl-c1">1</span>       <span class="pl-k">CONTINUE</span>
     <span class="pl-k">WRITE</span>(<span class="pl-c1">6</span>,<span class="pl-k">*</span>) <span class="pl-s"><span class="pl-pds">'</span>--------------------------------------<span class="pl-pds">'</span></span>
<span class="pl-c"><span class="pl-c">*</span></span>
<span class="pl-c1">101</span>  <span class="pl-k">FORMAT</span>(<span class="pl-s"><span class="pl-pds">'</span> | <span class="pl-pds">'</span></span>,<span class="pl-c1">3</span>(I2,<span class="pl-s"><span class="pl-pds">'</span> | <span class="pl-pds">'</span></span>),ES11.<span class="pl-c1">2E3</span>,<span class="pl-s"><span class="pl-pds">'</span>      | <span class="pl-pds">'</span></span>)
     END</pre></div>
<p dir="auto">The author of <a href="#2">[2]</a> implemented the same algorithm in Fortran for equal masses as we. To compare the computation time with this Fortran code, we have used the <em>crsmumu.f</em> file from the MuMuPy package <code>https://data.mendeley.com/datasets/nr6y34yg29/1</code> <a href="#2">[2]</a> and written a <em>main.f</em> file.</p>
<div class="highlight highlight-source-fortran notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="   PROGRAM FORM
     IMPLICIT NONE
     INTEGER n1,m1,l1,array1(2)
     REAL*8 Q, FTRANS
     LOGICAL loop
     EXTERNAL FTRANS
     PARAMETER (Q = 0.66D0)
     PARAMETER (array1 = (/0, 1/))
     WRITE(*,*)
     loop = .true.
     IF(loop.eqv..true.) THEN 
       DO n1=1,30
         DO l1=0,n1-1
           DO m1=0,l1
              WRITE(6,101) n1, l1, m1, ABS(FTRANS(array1,n1,l1,m1,n1,
    &amp;       l1,m1,0.66D0))
           END DO
         END DO
      END DO
     ELSE
        WRITE(6,102) 2, 1, 1, 2, 1, 1, ABS(FTRANS(array1,2,1,
    &amp;          1,2,1,1,0.66D0))    
     END IF
     IF(loop.eqv..true.) THEN
101     FORMAT(' | ',3(I2,' | '),ES11.2E3,' | ')
     ELSE
102     FORMAT(' | ',6(I2,' | '),ES11.2E3,' | ')
     END IF
     END PROGRAM FORM"><pre>   <span class="pl-k">PROGRAM</span> FORM
     <span class="pl-k">IMPLICIT NONE</span>
     <span class="pl-k">INTEGER</span> n1,m1,l1,array1(<span class="pl-c1">2</span>)
     <span class="pl-k">REAL</span><span class="pl-k">*</span><span class="pl-c1">8</span> Q, FTRANS
     <span class="pl-k">LOGICAL</span> loop
     <span class="pl-k">EXTERNAL</span> FTRANS
     <span class="pl-k">PARAMETER</span> (Q <span class="pl-k">=</span> <span class="pl-c1">0.66D0</span>)
     <span class="pl-k">PARAMETER</span> (array1 <span class="pl-k">=</span> (<span class="pl-k">/</span><span class="pl-c1">0</span>, <span class="pl-c1">1</span><span class="pl-k">/</span>))
     <span class="pl-k">WRITE</span>(<span class="pl-k">*</span>,<span class="pl-k">*</span>)
     loop <span class="pl-k">=</span> <span class="pl-c1">.true.</span>
     <span class="pl-k">IF</span>(loop<span class="pl-k">.eqv.</span><span class="pl-c1">.true.</span>) <span class="pl-k">THEN</span> 
       <span class="pl-k">DO</span> n1<span class="pl-k">=</span><span class="pl-c1">1</span>,<span class="pl-c1">30</span>
         <span class="pl-k">DO</span> l1<span class="pl-k">=</span><span class="pl-c1">0</span>,n1<span class="pl-c1">-1</span>
           <span class="pl-k">DO</span> m1<span class="pl-k">=</span><span class="pl-c1">0</span>,l1
              <span class="pl-k">WRITE</span>(<span class="pl-c1">6</span>,<span class="pl-c1">101</span>) n1, l1, m1, <span class="pl-k">ABS</span>(FTRANS(array1,n1,l1,m1,n1,
    &amp;       l1,m1,<span class="pl-c1">0.66D0</span>))
           <span class="pl-k">END DO</span>
         <span class="pl-k">END DO</span>
      <span class="pl-k">END DO</span>
     <span class="pl-k">ELSE</span>
        <span class="pl-k">WRITE</span>(<span class="pl-c1">6</span>,<span class="pl-c1">102</span>) <span class="pl-c1">2</span>, <span class="pl-c1">1</span>, <span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">1</span>, <span class="pl-c1">1</span>, <span class="pl-k">ABS</span>(FTRANS(array1,<span class="pl-c1">2</span>,<span class="pl-c1">1</span>,
    &amp;          <span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-c1">0.66D0</span>))    
     <span class="pl-k">END IF</span>
     <span class="pl-k">IF</span>(loop<span class="pl-k">.eqv.</span><span class="pl-c1">.true.</span>) <span class="pl-k">THEN</span>
<span class="pl-c1">101</span>     <span class="pl-k">FORMAT</span>(<span class="pl-s"><span class="pl-pds">'</span> | <span class="pl-pds">'</span></span>,<span class="pl-c1">3</span>(I2,<span class="pl-s"><span class="pl-pds">'</span> | <span class="pl-pds">'</span></span>),ES11.<span class="pl-c1">2E3</span>,<span class="pl-s"><span class="pl-pds">'</span> | <span class="pl-pds">'</span></span>)
     <span class="pl-k">ELSE</span>
<span class="pl-c1">102</span>     <span class="pl-k">FORMAT</span>(<span class="pl-s"><span class="pl-pds">'</span> | <span class="pl-pds">'</span></span>,<span class="pl-c1">6</span>(I2,<span class="pl-s"><span class="pl-pds">'</span> | <span class="pl-pds">'</span></span>),ES11.<span class="pl-c1">2E3</span>,<span class="pl-s"><span class="pl-pds">'</span> | <span class="pl-pds">'</span></span>)
     <span class="pl-k">END IF</span>
     <span class="pl-k">END PROGRAM</span> FORM</pre></div>
<h2 dir="auto"><a id="user-content-references" class="anchor" aria-hidden="true" href="#references"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>References</h2>
<p dir="auto"><a id="user-content-1">[1]</a>
C. S. Ríos and J. S. Silva,
An implementation of atomic form factors,
Computer Physics Communications 151, (2003).</p>
<p dir="auto"><a id="user-content-2">[2]</a>
A. Uskov, A. Alizzi, and Z. Silagadze,
MuMuPy: A dimuonium-matter interaction calculator,
Computer Physics Communications 276 (2022).</p>
</article></div>