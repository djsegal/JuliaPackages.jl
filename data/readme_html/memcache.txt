<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-julia-memcache-client" class="anchor" aria-hidden="true" href="#julia-memcache-client"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Julia Memcache Client</h1>
<p><a href="https://travis-ci.org/tanmaykm/Memcache.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/815bc91a67c20eba9541f5a2189e054b7b776b64/68747470733a2f2f7472617669732d63692e6f72672f74616e6d61796b6d2f4d656d63616368652e6a6c2e706e67" alt="Build Status" data-canonical-src="https://travis-ci.org/tanmaykm/Memcache.jl.png" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/tanmaykm/Memcache.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/8af54cfd64c1ce9295ba25ee035c92742cb97d8c/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f74616e6d61796b6d2f4d656d63616368652e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/tanmaykm/Memcache.jl/badge.svg?branch=master" style="max-width:100%;"></a></p>
<p>A pure Julia client for memcached servers. All <a href="https://github.com/memcached/memcached/wiki/Commands">memcached commands</a> as of memcached version 1.4.17 are implemented.</p>
<p>Both numbers and strings are stored in plain string format so as to be interoperable with other memcached client libraries. Other Julia types are stored in their serialized form.</p>
<p>Type <code>MemcacheClient</code> represents a connection to a single memcached server instance.</p>
<p>Type <code>MemcacheClients</code> wraps over multiple <code>MemcacheClient</code> instances to provide distributed cache across more than one memcached server instances. Operations are routed to appropriate server based on key hash value.</p>
<h3><a id="user-content-methods" class="anchor" aria-hidden="true" href="#methods"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Methods</h3>
<ul>
<li>Setting and getting data: <code>set</code>, <code>cas</code>, <code>add</code>, <code>replace</code>, <code>append</code>, <code>prepend</code>, <code>incr</code>, <code>decr</code>, <code>get</code>, <code>touch</code></li>
<li>Administration: <code>stats</code>, <code>version</code>, <code>flush_all</code>, <code>close</code>, <code>slabs_reassign</code>, <code>slabs_automove</code>, <code>quit</code></li>
</ul>
<p>All methods are supported for both <code>MemcacheClient</code> and <code>MemcacheClients</code>, but results of administration commands would return and array of responses from all servers. See memcached command documentation for details of administration commands.</p>
<p>Below is an illustration of using the most common commands.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Memcache

julia<span class="pl-k">&gt;</span> <span class="pl-c"><span class="pl-c">#</span> create a client connection</span>

julia<span class="pl-k">&gt;</span> mc <span class="pl-k">=</span> <span class="pl-c1">MemcacheClient</span>(<span class="pl-s"><span class="pl-pds">"</span>localhost<span class="pl-pds">"</span></span>, <span class="pl-c1">11211</span>);

julia<span class="pl-k">&gt;</span> 

julia<span class="pl-k">&gt;</span> <span class="pl-c"><span class="pl-c">#</span> simple set and get</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">set</span>(mc, <span class="pl-s"><span class="pl-pds">"</span>key1<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>val1<span class="pl-pds">"</span></span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">set</span>(mc, <span class="pl-s"><span class="pl-pds">"</span>key2<span class="pl-pds">"</span></span>, <span class="pl-c1">2</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">get</span>(mc, <span class="pl-s"><span class="pl-pds">"</span>key1<span class="pl-pds">"</span></span>)
<span class="pl-s"><span class="pl-pds">"</span>val1<span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> 

julia<span class="pl-k">&gt;</span> <span class="pl-c"><span class="pl-c">#</span> multi get</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">get</span>(mc, <span class="pl-s"><span class="pl-pds">"</span>key1<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>key2<span class="pl-pds">"</span></span>)
[<span class="pl-s"><span class="pl-pds">"</span>key1<span class="pl-pds">"</span></span><span class="pl-k">=&gt;</span><span class="pl-s"><span class="pl-pds">"</span>val1<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>key2<span class="pl-pds">"</span></span><span class="pl-k">=&gt;</span><span class="pl-c1">2</span>]

julia<span class="pl-k">&gt;</span> 

julia<span class="pl-k">&gt;</span> <span class="pl-c"><span class="pl-c">#</span> increment, decrement</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">incr</span>(mc, <span class="pl-s"><span class="pl-pds">"</span>key2<span class="pl-pds">"</span></span>, <span class="pl-c1">8</span>)
<span class="pl-c1">10</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">decr</span>(mc, <span class="pl-s"><span class="pl-pds">"</span>key2<span class="pl-pds">"</span></span>, <span class="pl-c1">3</span>)
<span class="pl-c1">7</span>

julia<span class="pl-k">&gt;</span> 

julia<span class="pl-k">&gt;</span> <span class="pl-c"><span class="pl-c">#</span> append, prepend</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">append</span>(mc, <span class="pl-s"><span class="pl-pds">"</span>key1<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>--<span class="pl-pds">"</span></span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">prepend</span>(mc, <span class="pl-s"><span class="pl-pds">"</span>key1<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>--<span class="pl-pds">"</span></span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">get</span>(mc, <span class="pl-s"><span class="pl-pds">"</span>key1<span class="pl-pds">"</span></span>)
<span class="pl-s"><span class="pl-pds">"</span>--val1--<span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> 

julia<span class="pl-k">&gt;</span> <span class="pl-c"><span class="pl-c">#</span> cas</span>

julia<span class="pl-k">&gt;</span> res <span class="pl-k">=</span> <span class="pl-c1">get</span>(mc, <span class="pl-s"><span class="pl-pds">"</span>key1<span class="pl-pds">"</span></span>, cas<span class="pl-k">=</span><span class="pl-c1">true</span>)
[<span class="pl-s"><span class="pl-pds">"</span>key1<span class="pl-pds">"</span></span><span class="pl-k">=&gt;</span>(<span class="pl-s"><span class="pl-pds">"</span>--val1--<span class="pl-pds">"</span></span>,<span class="pl-c1">40</span>)]

julia<span class="pl-k">&gt;</span> val,casval <span class="pl-k">=</span> res[<span class="pl-s"><span class="pl-pds">"</span>key1<span class="pl-pds">"</span></span>]
(<span class="pl-s"><span class="pl-pds">"</span>--val1--<span class="pl-pds">"</span></span>,<span class="pl-c1">40</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">cas</span>(mc, <span class="pl-s"><span class="pl-pds">"</span>key1<span class="pl-pds">"</span></span>, <span class="pl-c1">2</span>, casval)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">get</span>(mc, <span class="pl-s"><span class="pl-pds">"</span>key1<span class="pl-pds">"</span></span>)
<span class="pl-c1">2</span></pre></div>
<h3><a id="user-content-todo" class="anchor" aria-hidden="true" href="#todo"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>TODO</h3>
<ul>
<li>compression</li>
<li>optimize multi get for <code>MemcacheClients</code></li>
</ul>
</article></div>