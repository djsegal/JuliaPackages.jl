<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-tablereaderjl" class="anchor" aria-hidden="true" href="#tablereaderjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>TableReader.jl</h1>
<p><a href="https://bicycle1885.github.io/TableReader.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/f7b92a177c912c1cc007fc9b40f17ff3ee3bb414/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Docs Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://bicycle1885.github.io/TableReader.jl/latest" rel="nofollow"><img src="https://camo.githubusercontent.com/57bae07ecd50a99519ad0516d91f4ec8f0f48e12/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6c61746573742d626c75652e737667" alt="Docs Latest" data-canonical-src="https://img.shields.io/badge/docs-latest-blue.svg" style="max-width:100%;"></a>
<a href="https://travis-ci.com/bicycle1885/TableReader.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/84f45430dc831926cfb0fc5eec1cafc8057ef4ad/68747470733a2f2f7472617669732d63692e636f6d2f62696379636c65313838352f5461626c655265616465722e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/bicycle1885/TableReader.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/bicycle1885/TableReader.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/5c97eb5641ba0c7a0db36f10b082faa210df0c00/68747470733a2f2f636f6465636f762e696f2f67682f62696379636c65313838352f5461626c655265616465722e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/bicycle1885/TableReader.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p>TableReader.jl does not waste your time.</p>
<p>Features:</p>
<ul>
<li>Carefully optimized for speed.</li>
<li>Transparently decompresses gzip, xz, and zstd data.</li>
<li>Read data from a local file, a remote file, or a running process.</li>
</ul>
<p>Here is a quick benchmark of start-up time:</p>
<pre><code>~/w/TableReader (master|…) $ julia
               _
   _       _ _(_)_     |  Documentation: https://docs.julialang.org
  (_)     | (_) (_)    |
   _ _   _| |_  __ _   |  Type "?" for help, "]?" for Pkg help.
  | | | | | | |/ _` |  |
  | | |_| | | | (_| |  |  Version 1.1.0 (2019-01-21)
 _/ |\__'_|_|_|\__'_|  |  Official https://julialang.org/ release
|__/                   |

julia&gt; using TableReader

julia&gt; @time readcsv("data/iris.csv");  # start-up time
  2.301008 seconds (2.80 M allocations: 139.657 MiB, 1.82% gc time)

~/w/TableReader (master|…) $ julia -q
julia&gt; using CSV, DataFrames

julia&gt; @time DataFrame(CSV.File("data/iris.csv"));  # start-up time
  7.443172 seconds (33.26 M allocations: 1.389 GiB, 9.05% gc time)

~/w/TableReader (master|…) $ julia -q
julia&gt; using CSVFiles, DataFrames

julia&gt; @time DataFrame(load("data/iris.csv"));  # start-up time
 12.578236 seconds (47.81 M allocations: 2.217 GiB, 9.87% gc time)
</code></pre>
<p>And the parsing throughput of TableReader.jl is often ~1.5-3.0 times faster
than those of pandas and other Julia packages. See <a href="https://discourse.julialang.org/t/ann-tablereader-jl-a-fast-and-simple-csv-parser/22335" rel="nofollow">this
post</a>
for more selling points.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Installation</h2>
<p>Start a new session by the <code>julia</code> command, hit the <kbd>]</kbd> key to change
the mode, and run <code>add TableReader</code> in the <code>pkg&gt;</code> prompt.</p>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Usage</h2>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span> This takes the three functions into the current scope:</span>
<span class="pl-c"><span class="pl-c">#</span>   - readdlm</span>
<span class="pl-c"><span class="pl-c">#</span>   - readcsv</span>
<span class="pl-c"><span class="pl-c">#</span>   - readtsv</span>
<span class="pl-k">using</span> TableReader

<span class="pl-c"><span class="pl-c">#</span> Read a CSV file and return a DataFrame object.</span>
dataframe <span class="pl-k">=</span> <span class="pl-c1">readcsv</span>(<span class="pl-s"><span class="pl-pds">"</span>somefile.csv<span class="pl-pds">"</span></span>)

<span class="pl-c"><span class="pl-c">#</span> Automatic delimiter detection.</span>
dataframe <span class="pl-k">=</span> <span class="pl-c1">readdlm</span>(<span class="pl-s"><span class="pl-pds">"</span>somefile.txt<span class="pl-pds">"</span></span>)

<span class="pl-c"><span class="pl-c">#</span> Read gzip/xz/zstd compressed files.</span>
dataframe <span class="pl-k">=</span> <span class="pl-c1">readcsv</span>(<span class="pl-s"><span class="pl-pds">"</span>somefile.csv.gz<span class="pl-pds">"</span></span>)

<span class="pl-c"><span class="pl-c">#</span> Read a remote file as downloading.</span>
dataframe <span class="pl-k">=</span> <span class="pl-c1">readcsv</span>(<span class="pl-s"><span class="pl-pds">"</span>https://example.com/somefile.csv<span class="pl-pds">"</span></span>)

<span class="pl-c"><span class="pl-c">#</span> Read stdout from a process.</span>
dataframe <span class="pl-k">=</span> <span class="pl-c1">readcsv</span>(<span class="pl-s"><span class="pl-pds">`</span>unzip -p data.zip somefile.csv<span class="pl-pds">`</span></span>)</pre></div>
<p>The following parameters are available:</p>
<ul>
<li><code>delim</code>: specify the delimiter character</li>
<li><code>quot</code>: specify the quotation character</li>
<li><code>trim</code>: trim space around fields</li>
<li><code>lzstring</code>: parse excess leading zeros as strings</li>
<li><code>skip</code>: skip the leading lines</li>
<li><code>skipblank</code>: skip blank lines</li>
<li><code>comment</code>: specify the leading sequence of comment lines</li>
<li><code>colnames</code>: set the column names</li>
<li><code>normalizenames</code>:  "normalize" column names into valid Julia (DataFrame) identifier symbols</li>
<li><code>hasheader</code>: notify the parser the existence of a header</li>
<li><code>chunkbits</code>: set the size of a chunk</li>
</ul>
<p>See the docstring of <code>readdlm</code> for more details.</p>
<h2><a id="user-content-design" class="anchor" aria-hidden="true" href="#design"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Design</h2>
<p>TableReader.jl is aimed at users who want to keep the easy things easy.  It
exports three functions: <code>readdlm</code>, <code>readcsv</code>, and <code>readtsv</code>. <code>readdlm</code> is at
the core of the package, and the other two functions are a thin wrapper that
calls <code>readdlm</code> with some default parameters; <code>readcsv</code> is for CSV files and
<code>readtsv</code> is for TSV files. These functions always return a data frame object
of DataFrames.jl. No other functions except the three are exported from this
package.</p>
<p>Things happen transparently:</p>
<ol>
<li>The functions detect compression from data so users do not need to specify
any parameters to notify the fact.</li>
<li>The data types of columns are guessed from data (integers, floats, bools,
dates, datetimes, strings, and missings are supported).</li>
<li>If the data source looks like a URL, it is downloaded with the curl command.</li>
<li><code>readdlm</code> detects the delimiter of fields from data (of course, you can
force a specific delimiter using the <code>delim</code> parameter).</li>
</ol>
<p>The three functions takes an object as the source of tabular data to read. It
may be a filename, a URL string, a command, or any kind of I/O objects.  For
example, the following examples will work as you expect:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">readcsv</span>(<span class="pl-s"><span class="pl-pds">"</span>path/to/filename.csv<span class="pl-pds">"</span></span>)
<span class="pl-c1">readcsv</span>(<span class="pl-s"><span class="pl-pds">"</span>https://example.com/path/to/filename.csv<span class="pl-pds">"</span></span>)
<span class="pl-c1">readcsv</span>(<span class="pl-s"><span class="pl-pds">`</span>unzip -p path/to/dataset.zip filename.csv<span class="pl-pds">`</span></span>)
<span class="pl-c1">readcsv</span>(<span class="pl-c1">IOBuffer</span>(some_csv_data))</pre></div>
<p>To reduce memory usage, the parser reads data chunk by chunk and the data types
are guessed using the buffered data in the first chunk. If the chunk size is
not enough to detect the types correctly, the parser will fail when it detects
unexpected data fields. You can expand the chunk size by the <code>chunkbits</code>
parameter; the default size is <code>chunkbits = 20</code>, which means 2^20 bytes (= 1
MiB).  If you set the value to zero (i.e., <code>chunkbits = 0</code>), the parser reads
the whole data file into a buffer without chunking it. This theoretically never
mistakes the data types in exchange for higher memory usage.</p>
<h2><a id="user-content-limitations" class="anchor" aria-hidden="true" href="#limitations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Limitations</h2>
<p>The tokenizer cannot handle extremely long fields in a data file. The length of
a token is encoded using 24-bit integer, and therefore a cell that is longer
than or equal to 16 MiB will result in parsing failure. This is not likely to
happen, but please be careful if, for example, there are columns that contain
long strings.  Also, the size of a chunk is limited up to 64 GiB; you cannot
disable chunking if the data size is larger than that.</p>
</article></div>