<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-partialfunctions" class="anchor" aria-hidden="true" href="#partialfunctions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>PartialFunctions</h1>
<p><a href="https://archermarx.github.io/PartialFunctions.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://archermarx.github.io/PartialFunctions.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a>
<a href="https://travis-ci.com/archermarx/PartialFunctions.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/a6791ac34c09a026b2ea8ad6808ba5c26b0391851b25d733ed3da80341e6e604/68747470733a2f2f7472617669732d63692e636f6d2f6172636865726d6172782f5061727469616c46756e6374696f6e732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/archermarx/PartialFunctions.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/archermarx/PartialFunctions.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/ade3ccbbcdcc8bfb2683928c1eb36a6099cdfdc719a9594f0067452cbff171b5/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f6172636865726d6172782f5061727469616c46756e6374696f6e732e6a6c2f62616467652e706e673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/archermarx/PartialFunctions.jl/badge.png?branch=master" style="max-width:100%;"></a></p>
<p>This is a small Julia package that makes partial function application as simple as possible</p>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<p>To apply an argument <code>x</code> to a function <code>f</code>, use the <code>$</code> binary operator like so</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; f $ x
f(x, ...)
"><pre>julia<span class="pl-k">&gt;</span> f <span class="pl-k">$</span> x
<span class="pl-c1">f</span>(x, <span class="pl-k">...</span>)</pre></div>
<p>To apply multiple arguments, wrap them in a <code>Tuple</code>, like you would a normal function call</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; f $ (x, y, z)
f(x, y, z, ...)
"><pre>julia<span class="pl-k">&gt;</span> f <span class="pl-k">$</span> (x, y, z)
<span class="pl-c1">f</span>(x, y, z, <span class="pl-k">...</span>)</pre></div>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; f = println $ ((&quot;This is&quot;, &quot;a Tuple&quot;),)
println((&quot;This is&quot;, &quot;a Tuple&quot;), ...)

julia&gt; f(&quot;, and this is an additional argument&quot;)
(&quot;This is&quot;, &quot;a Tuple&quot;), and this is an additional argument
"><pre>julia<span class="pl-k">&gt;</span> f <span class="pl-k">=</span> println <span class="pl-k">$</span> ((<span class="pl-s"><span class="pl-pds">"</span>This is<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>a Tuple<span class="pl-pds">"</span></span>),)
<span class="pl-c1">println</span>((<span class="pl-s"><span class="pl-pds">"</span>This is<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>a Tuple<span class="pl-pds">"</span></span>), <span class="pl-k">...</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">f</span>(<span class="pl-s"><span class="pl-pds">"</span>, and this is an additional argument<span class="pl-pds">"</span></span>)
(<span class="pl-s"><span class="pl-pds">"</span>This is<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>a Tuple<span class="pl-pds">"</span></span>), and this is an additional argument</pre></div>
<h2><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Examples</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using PartialFunctions

julia&gt; a(x) = x^2
a (generic function with 1 method)

julia&gt; f = map $ a
map(a, ...)

julia&gt; f([1,2,3])
3-element Array{Int64,1}:
 1
 4
 9
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> PartialFunctions

julia<span class="pl-k">&gt;</span> <span class="pl-en">a</span>(x) <span class="pl-k">=</span> x<span class="pl-k">^</span><span class="pl-c1">2</span>
a (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> f <span class="pl-k">=</span> map <span class="pl-k">$</span> a
<span class="pl-c1">map</span>(a, <span class="pl-k">...</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">f</span>([<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>])
<span class="pl-c1">3</span><span class="pl-k">-</span>element Array{Int64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">1</span>
 <span class="pl-c1">4</span>
 <span class="pl-c1">9</span></pre></div>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; simonsays = println $ &quot;Simon says: &quot;
println(&quot;Simon says: &quot;, ...)

julia&gt; simonsays(&quot;Partial function application is cool!&quot;)
Simon says: Partial function application is cool!

julia&gt; typeof(simonsays)
PartialFunctions.PartialFunction{typeof(println),Tuple{String}}
"><pre>julia<span class="pl-k">&gt;</span> simonsays <span class="pl-k">=</span> println <span class="pl-k">$</span> <span class="pl-s"><span class="pl-pds">"</span>Simon says: <span class="pl-pds">"</span></span>
<span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>Simon says: <span class="pl-pds">"</span></span>, <span class="pl-k">...</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">simonsays</span>(<span class="pl-s"><span class="pl-pds">"</span>Partial function application is cool!<span class="pl-pds">"</span></span>)
Simon says<span class="pl-k">:</span> Partial <span class="pl-k">function</span> application is cool!

julia<span class="pl-k">&gt;</span> <span class="pl-c1">typeof</span>(simonsays)
PartialFunctions<span class="pl-k">.</span>PartialFunction{<span class="pl-c1">typeof</span>(println),Tuple{String}}</pre></div>
<h2><a id="user-content-the-reverse-pipe" class="anchor" aria-hidden="true" href="#the-reverse-pipe"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>The Reverse Pipe</h2>
<p>PartialFunctions also exports the <code>&lt;|</code>, or "reverse pipe" operator, which can be used to apply the arguments succeeding it to the function preceding it. This operator has low precedence, making it useful when chaining function calls if one wants to avoid a lot of parentheses</p>
<p>Here's an extremely contrived example to add a bunch of numbers together</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; (+) $ 2 $ 3 $ 5 $ 10 &lt;| 12
32
"><pre>julia<span class="pl-k">&gt;</span> (<span class="pl-k">+</span>) <span class="pl-k">$</span> <span class="pl-c1">2</span> <span class="pl-k">$</span> <span class="pl-c1">3</span> <span class="pl-k">$</span> <span class="pl-c1">5</span> <span class="pl-k">$</span> <span class="pl-c1">10</span> <span class="pl-k">&lt;</span><span class="pl-k">|</span> <span class="pl-c1">12</span>
<span class="pl-c1">32</span></pre></div>
<p>Unlike the normal pipe (<code>|&gt;</code>), it can also be used with tuples of arguments</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; (+) &lt;| (1, 2)...
3
"><pre>julia<span class="pl-k">&gt;</span> (<span class="pl-k">+</span>) <span class="pl-k">&lt;</span><span class="pl-k">|</span> (<span class="pl-c1">1</span>, <span class="pl-c1">2</span>)<span class="pl-k">...</span>
<span class="pl-c1">3</span></pre></div>
<p>Passing an empty tuple calls the preceding function with zero arguments</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; a = isequal $ (1, 2)
isequal(1, 2, ...)

julia&gt; isequal $ (1, 2) &lt;| ()   # equivalent to a() or isequal(1, 2)
false
"><pre>julia<span class="pl-k">&gt;</span> a <span class="pl-k">=</span> isequal <span class="pl-k">$</span> (<span class="pl-c1">1</span>, <span class="pl-c1">2</span>)
<span class="pl-c1">isequal</span>(<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-k">...</span>)

julia<span class="pl-k">&gt;</span> isequal <span class="pl-k">$</span> (<span class="pl-c1">1</span>, <span class="pl-c1">2</span>) <span class="pl-k">&lt;</span><span class="pl-k">|</span> ()   <span class="pl-c"><span class="pl-c">#</span> equivalent to a() or isequal(1, 2)</span>
<span class="pl-c1">false</span></pre></div>
</article></div>