<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p dir="auto"><a href="https://JuliaGNSS.github.io/Tracking.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://JuliaGNSS.github.io/Tracking.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://zenodo.org/badge/latestdoi/171484097" rel="nofollow"><img src="https://camo.githubusercontent.com/24daa182292086b98a1fdad80fef6fddd88159e97c9d20a9ce37de4213017692/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f3137313438343039372e737667" alt="DOI" data-canonical-src="https://zenodo.org/badge/171484097.svg" style="max-width: 100%;"></a>
<a href="https://travis-ci.org/JuliaGNSS/Tracking.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/90981a3b575ceb152946fd6bc754e6c2329937092ff8d3a400c5cb39dab7d5f7/68747470733a2f2f7472617669732d63692e6f72672f4a756c6961474e53532f547261636b696e672e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaGNSS/Tracking.jl.svg?branch=master" style="max-width: 100%;"></a>
<a href="https://coveralls.io/github/JuliaGNSS/Tracking.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/7275c1b5171f4ee5d306db004e9e9af97e94e85329442457c032fa65a0bb6347/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f4a756c6961474e53532f547261636b696e672e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/JuliaGNSS/Tracking.jl/badge.svg?branch=master" style="max-width: 100%;"></a></p>
<h1 dir="auto"><a id="user-content-tracking" class="anchor" aria-hidden="true" href="#tracking"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Tracking</h1>
<p dir="auto">This implements a basic tracking functionality for GNSS signals. The correlation is done in the interval of PRNs. Each call of the tracking function returns the current code phase, Doppler, the Carrier-to-Noise-Density-Ratio (CN0), data bits, number of data bits and the last correlator output.</p>
<h2 dir="auto"><a id="user-content-features" class="anchor" aria-hidden="true" href="#features"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Features</h2>
<ul dir="auto">
<li>Supports GPS L1 / L5 and Galileo E1B</li>
<li>CN0 estimation</li>
<li>Secondary code detection</li>
<li>Bit detection</li>
<li>Phased array tracking</li>
<li>GPU acceleration (CUDA)</li>
</ul>
<h2 dir="auto"><a id="user-content-getting-started" class="anchor" aria-hidden="true" href="#getting-started"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Getting started</h2>
<p dir="auto">Install:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; ]
pkg&gt; add Tracking"><pre>julia<span class="pl-k">&gt;</span> ]
pkg<span class="pl-k">&gt;</span> add Tracking</pre></div>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using GNSSSignals
using Tracking
using Tracking: Hz
carrier_doppler = 1000Hz
code_phase = 50
sampling_frequency = 2.5e6Hz
prn = 1
gpsl1 = GPSL1()
state = TrackingState(prn, gpsl1, carrier_doppler, code_phase)
results = track(signal, state, sampling_frequency)
next_results = track(next_signal, get_state(results), sampling_frequency)"><pre><span class="pl-k">using</span> GNSSSignals
<span class="pl-k">using</span> Tracking
<span class="pl-k">using</span> Tracking<span class="pl-k">:</span> Hz
carrier_doppler <span class="pl-k">=</span> <span class="pl-c1">1000</span>Hz
code_phase <span class="pl-k">=</span> <span class="pl-c1">50</span>
sampling_frequency <span class="pl-k">=</span> <span class="pl-c1">2.5e6</span>Hz
prn <span class="pl-k">=</span> <span class="pl-c1">1</span>
gpsl1 <span class="pl-k">=</span> <span class="pl-c1">GPSL1</span>()
state <span class="pl-k">=</span> <span class="pl-c1">TrackingState</span>(prn, gpsl1, carrier_doppler, code_phase)
results <span class="pl-k">=</span> <span class="pl-c1">track</span>(signal, state, sampling_frequency)
next_results <span class="pl-k">=</span> <span class="pl-c1">track</span>(next_signal, <span class="pl-c1">get_state</span>(results), sampling_frequency)</pre></div>
<p dir="auto">If you'd like to track several signals at once (e.g. in the case of phased antenna arrays), you will have to specify the optional parameter <code>num_ants::NumAnts{N}</code> and pass a beamforming function to the <code>track</code> function:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="state = TrackingState(prn, gpsl1, carrier_doppler, code_phase, num_ants = NumAnts(4)) # 4 antenna channels
results = track(signal, state, sampling_frequency, post_corr_filter = x -&gt; x[1]) # Post corr filter is optional"><pre>state <span class="pl-k">=</span> <span class="pl-c1">TrackingState</span>(prn, gpsl1, carrier_doppler, code_phase, num_ants <span class="pl-k">=</span> <span class="pl-c1">NumAnts</span>(<span class="pl-c1">4</span>)) <span class="pl-c"><span class="pl-c">#</span> 4 antenna channels</span>
results <span class="pl-k">=</span> <span class="pl-c1">track</span>(signal, state, sampling_frequency, post_corr_filter <span class="pl-k">=</span> x <span class="pl-k">-&gt;</span> x[<span class="pl-c1">1</span>]) <span class="pl-c"><span class="pl-c">#</span> Post corr filter is optional</span></pre></div>
<h3 dir="auto"><a id="user-content-usage-with-cudajl" class="anchor" aria-hidden="true" href="#usage-with-cudajl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage with <code>CUDA.jl</code></h3>
<p dir="auto">This package supports accelerating the tracking loop by using the GPU. At the moment support is only provided for <code>CUDA.jl</code>. If you'd like to use this option, you'd have to opt-in by providing the following argument upon creating an <code>AbstractGNSS</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="gpsl1_gpu = GPSL1(use_gpu = Val(true))"><pre>gpsl1_gpu <span class="pl-k">=</span> <span class="pl-c1">GPSL1</span>(use_gpu <span class="pl-k">=</span> <span class="pl-c1">Val</span>(<span class="pl-c1">true</span>))</pre></div>
<p dir="auto">Beware that <code>num_samples</code> must be provided explicitly upon creating a <code>TrackingState</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="state_gpu = TrackingState(prn, gpsl1_gpu, carrier_doppler, code_phase, num_samples = N)"><pre>state_gpu <span class="pl-k">=</span> <span class="pl-c1">TrackingState</span>(prn, gpsl1_gpu, carrier_doppler, code_phase, num_samples <span class="pl-k">=</span> N)</pre></div>
<p dir="auto">Moreover, your signal must be a <code>StructArray{ComplexF32}</code> of <code>CuArray{Float32}</code> type:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using StructArrays
signal_cu = CuArray{ComplexF32}(signal_cpu)
signal_gpu = StructArray(signal_cu)"><pre><span class="pl-k">using</span> StructArrays
signal_cu <span class="pl-k">=</span> <span class="pl-c1">CuArray</span><span class="pl-c1">{ComplexF32}</span>(signal_cpu)
signal_gpu <span class="pl-k">=</span> <span class="pl-c1">StructArray</span>(signal_cu)</pre></div>
<p dir="auto">Otherwise the usage is identical to the example provided above, including the case for multi-antenna tracking:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="results_gpu = track(signal_gpu, state_gpu, sampling_frequency)
next_results_gpu = track(next_signal_gpu, get_state(results_gpu), sampling_frequency)"><pre>results_gpu <span class="pl-k">=</span> <span class="pl-c1">track</span>(signal_gpu, state_gpu, sampling_frequency)
next_results_gpu <span class="pl-k">=</span> <span class="pl-c1">track</span>(next_signal_gpu, <span class="pl-c1">get_state</span>(results_gpu), sampling_frequency)</pre></div>
</article></div>