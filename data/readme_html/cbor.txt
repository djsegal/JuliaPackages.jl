<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-cborjl" class="anchor" aria-hidden="true" href="#cborjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>CBOR.jl</h1>
<p><a href="https://travis-ci.org/saurvs/CBOR.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/b94d37174c4000eb85dbd2a80ffd03df25b6a360/68747470733a2f2f7472617669732d63692e6f72672f7361757276732f43424f522e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/saurvs/CBOR.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/saurvs/cbor-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/39aa75db440de1292fea4701090579dd2d0584ee/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f6d75646233347172786a6839687564323f7376673d74727565" alt="Build Status" data-canonical-src="https://ci.appveyor.com/api/projects/status/mudb34qrxjh9hud2?svg=true" style="max-width:100%;"></a>
<a href="https://github.com/saurvs/jl/blob/master/LICENSE.md"><img src="https://camo.githubusercontent.com/890acbdcb87868b382af9a4b1fac507b9659d9bf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/license-MIT-blue.svg" style="max-width:100%;"></a></p>
<p><strong>CBOR.jl</strong> is a Julia package for working with the <strong>CBOR</strong> data format,
providing straightforward encoding and decoding for Julia types.</p>
<h2><a id="user-content-about-cbor" class="anchor" aria-hidden="true" href="#about-cbor"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>About CBOR</h2>
<p>The <strong>Concise Binary Object Representation</strong> is a data format that's based upon
an extension of the JSON data model, whose stated design goals
include: small code size, small message size, and
extensibility without the need for version negotiation. The format is formally
defined in <a href="https://tools.ietf.org/html/rfc7049" rel="nofollow">RFC 7049</a>.</p>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Usage</h2>
<p>Add the package</p>
<div class="highlight highlight-source-julia"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>CBOR<span class="pl-pds">"</span></span>)</pre></div>
<p>and add the module</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> CBOR</pre></div>
<h3><a id="user-content-encoding-and-decoding" class="anchor" aria-hidden="true" href="#encoding-and-decoding"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Encoding and Decoding</h3>
<p>Encoding and decoding follow the simple pattern</p>
<div class="highlight highlight-source-julia"><pre>bytes <span class="pl-k">=</span> <span class="pl-c1">encode</span>(data)

data <span class="pl-k">=</span> <span class="pl-c1">decode</span>(bytes)</pre></div>
<p>where <code>bytes</code> is of type <code>Array{UInt8, 1}</code>, and <code>data</code> returned from <code>decode()</code>
is <em>usually</em> of the same type that was passed into <code>encode()</code> but always
contains the original data.</p>
<h4><a id="user-content-primitive-integers" class="anchor" aria-hidden="true" href="#primitive-integers"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Primitive Integers</h4>
<p>All <code>Signed</code> and <code>Unsigned</code> types, <em>except</em> <code>Int128</code> and <code>UInt128</code>, are encoded
as CBOR <code>Type 0</code> or <code>Type 1</code></p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">&gt;</span> <span class="pl-c1">encode</span>(<span class="pl-c1">21</span>)
<span class="pl-c1">1</span><span class="pl-k">-</span>element Array{UInt8,<span class="pl-c1">1</span>}<span class="pl-k">:</span> <span class="pl-c1">0x15</span>

<span class="pl-k">&gt;</span> <span class="pl-c1">encode</span>(<span class="pl-k">-</span><span class="pl-c1">135713</span>)
<span class="pl-c1">5</span><span class="pl-k">-</span>element Array{UInt8,<span class="pl-c1">1</span>}<span class="pl-k">:</span> <span class="pl-c1">0x3a</span> <span class="pl-c1">0x00</span> <span class="pl-c1">0x02</span> <span class="pl-c1">0x12</span> <span class="pl-c1">0x20</span>

<span class="pl-k">&gt;</span> bytes <span class="pl-k">=</span> <span class="pl-c1">encode</span>(<span class="pl-c1">typemax</span>(UInt64))
<span class="pl-c1">9</span><span class="pl-k">-</span>element Array{UInt8,<span class="pl-c1">1</span>}<span class="pl-k">:</span> <span class="pl-c1">0x1b</span> <span class="pl-c1">0xff</span> <span class="pl-c1">0xff</span> <span class="pl-c1">0xff</span> <span class="pl-c1">0xff</span> <span class="pl-c1">0xff</span> <span class="pl-c1">0xff</span> <span class="pl-c1">0xff</span> <span class="pl-c1">0xff</span>

<span class="pl-k">&gt;</span> <span class="pl-c1">decode</span>(bytes)
<span class="pl-c1">18446744073709551615</span></pre></div>
<h4><a id="user-content-byte-strings" class="anchor" aria-hidden="true" href="#byte-strings"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Byte Strings</h4>
<p>An <code>AbstractVector{UInt8}</code> is encoded as CBOR <code>Type 2</code></p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">&gt;</span> <span class="pl-c1">encode</span>(UInt8[x<span class="pl-k">*</span>x <span class="pl-k">for</span> x <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>])
<span class="pl-c1">11</span><span class="pl-k">-</span>element Array{UInt8, <span class="pl-c1">1</span>}<span class="pl-k">:</span> <span class="pl-c1">0x4a</span> <span class="pl-c1">0x01</span> <span class="pl-c1">0x04</span> <span class="pl-c1">0x09</span> <span class="pl-c1">0x10</span> <span class="pl-c1">0x19</span> <span class="pl-c1">0x24</span> <span class="pl-c1">0x31</span> <span class="pl-c1">0x40</span> <span class="pl-c1">0x51</span> <span class="pl-c1">0x64</span></pre></div>
<h4><a id="user-content-strings" class="anchor" aria-hidden="true" href="#strings"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Strings</h4>
<p><code>String</code> are encoded as CBOR <code>Type 3</code></p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">&gt;</span> <span class="pl-c1">encode</span>(<span class="pl-s"><span class="pl-pds">"</span>Valar morghulis<span class="pl-pds">"</span></span>)
<span class="pl-c1">16</span><span class="pl-k">-</span>element Array{UInt8,<span class="pl-c1">1</span>}<span class="pl-k">:</span> <span class="pl-c1">0x4f</span> <span class="pl-c1">0x56</span> <span class="pl-c1">0x61</span> <span class="pl-c1">0x6c</span> <span class="pl-c1">0x61</span> <span class="pl-k">...</span> <span class="pl-c1">0x68</span> <span class="pl-c1">0x75</span> <span class="pl-c1">0x6c</span> <span class="pl-c1">0x69</span> <span class="pl-c1">0x73</span>

<span class="pl-k">&gt;</span> bytes <span class="pl-k">=</span> <span class="pl-c1">encode</span>(<span class="pl-s"><span class="pl-pds">"</span>אתה יכול לקחת את סוס אל המים, אבל אתה לא יכול להוכיח שום דבר אמיתי<span class="pl-pds">"</span></span>)
<span class="pl-c1">119</span><span class="pl-k">-</span>element Array{UInt8,<span class="pl-c1">1</span>}<span class="pl-k">:</span> <span class="pl-c1">0x78</span> <span class="pl-c1">0x75</span> <span class="pl-c1">0xd7</span> <span class="pl-c1">0x90</span> <span class="pl-c1">0xd7</span> <span class="pl-k">...</span> <span class="pl-c1">0x99</span> <span class="pl-c1">0xd7</span> <span class="pl-c1">0xaa</span> <span class="pl-c1">0xd7</span> <span class="pl-c1">0x99</span>

<span class="pl-k">&gt;</span> <span class="pl-c1">decode</span>(bytes)
<span class="pl-s"><span class="pl-pds">"</span>אתה יכול לקחת את סוס אל המים, אבל אתה לא יכול להוכיח שום דבר אמיתי<span class="pl-pds">"</span></span></pre></div>
<h4><a id="user-content-floats" class="anchor" aria-hidden="true" href="#floats"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Floats</h4>
<p><code>Float64</code>, <code>Float32</code> and <code>Float16</code> are encoded as CBOR <code>Type 7</code></p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">&gt;</span> <span class="pl-c1">encode</span>(<span class="pl-c1">1.23456789e-300</span>)
<span class="pl-c1">9</span><span class="pl-k">-</span>element Array{UInt8, <span class="pl-c1">1</span>}<span class="pl-k">:</span> <span class="pl-c1">0xfb</span> <span class="pl-c1">0x01</span> <span class="pl-c1">0xaa</span> <span class="pl-c1">0x74</span> <span class="pl-c1">0xfe</span> <span class="pl-c1">0x1c</span> <span class="pl-c1">0x13</span> <span class="pl-c1">0x2c</span> <span class="pl-c1">0x0e</span>

<span class="pl-k">&gt;</span> bytes <span class="pl-k">=</span> <span class="pl-c1">encode</span>(<span class="pl-c1">Float32</span>(pi))
<span class="pl-c1">5</span><span class="pl-k">-</span>element Array{UInt8, <span class="pl-c1">1</span>}<span class="pl-k">:</span> <span class="pl-c1">0xfa</span> <span class="pl-c1">0x40</span> <span class="pl-c1">0x49</span> <span class="pl-c1">0x0f</span> <span class="pl-c1">0xdb</span>

<span class="pl-k">&gt;</span> <span class="pl-c1">decode</span>(bytes)
<span class="pl-c1">3.1415927</span>f0</pre></div>
<h4><a id="user-content-arrays" class="anchor" aria-hidden="true" href="#arrays"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Arrays</h4>
<p><code>AbstractVector</code> and <code>Tuple</code> types, except of course <code>AbstractVector{UInt8}</code>,
are encoded as CBOR <code>Type 4</code></p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">&gt;</span> bytes <span class="pl-k">=</span> <span class="pl-c1">encode</span>((<span class="pl-k">-</span><span class="pl-c1">7</span>, <span class="pl-k">-</span><span class="pl-c1">8</span>, <span class="pl-k">-</span><span class="pl-c1">9</span>))
<span class="pl-c1">4</span><span class="pl-k">-</span>element Array{UInt8, <span class="pl-c1">1</span>}<span class="pl-k">:</span> <span class="pl-c1">0x83</span> <span class="pl-c1">0x26</span> <span class="pl-c1">0x27</span> <span class="pl-c1">0x28</span>

<span class="pl-k">&gt;</span> <span class="pl-c1">decode</span>(bytes)
<span class="pl-c1">3</span><span class="pl-k">-</span>element Array{Any, <span class="pl-c1">1</span>}<span class="pl-k">:</span> <span class="pl-k">-</span><span class="pl-c1">7</span> <span class="pl-k">-</span><span class="pl-c1">8</span> <span class="pl-k">-</span><span class="pl-c1">9</span>

<span class="pl-k">&gt;</span> bytes <span class="pl-k">=</span> <span class="pl-c1">encode</span>([<span class="pl-s"><span class="pl-pds">"</span>Open<span class="pl-pds">"</span></span>, <span class="pl-c1">1</span>, <span class="pl-c1">4</span>, <span class="pl-c1">9.0</span>, <span class="pl-s"><span class="pl-pds">"</span>the pod bay doors hal<span class="pl-pds">"</span></span>])
<span class="pl-c1">39</span><span class="pl-k">-</span>element Array{UInt8, <span class="pl-c1">1</span>}<span class="pl-k">:</span> <span class="pl-c1">0x85</span> <span class="pl-c1">0x44</span> <span class="pl-c1">0x4f</span> <span class="pl-c1">0x70</span> <span class="pl-c1">0x65</span> <span class="pl-k">...</span> <span class="pl-c1">0x73</span> <span class="pl-c1">0x20</span> <span class="pl-c1">0x68</span> <span class="pl-c1">0x61</span> <span class="pl-c1">0x6c</span>

<span class="pl-k">&gt;</span> <span class="pl-c1">decode</span>(bytes)
<span class="pl-c1">5</span><span class="pl-k">-</span>element Array{Any, <span class="pl-c1">1</span>}<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>Open<span class="pl-pds">"</span></span> <span class="pl-c1">1</span> <span class="pl-c1">4</span> <span class="pl-c1">9.0</span> <span class="pl-s"><span class="pl-pds">"</span>the pod bay doors hal<span class="pl-pds">"</span></span>

<span class="pl-k">&gt;</span> bytes <span class="pl-k">=</span> <span class="pl-c1">encode</span>([<span class="pl-c1">log2</span>(x) <span class="pl-k">for</span> x <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>])
<span class="pl-c1">91</span><span class="pl-k">-</span>element Array{UInt8, <span class="pl-c1">1</span>}<span class="pl-k">:</span> <span class="pl-c1">0x8a</span> <span class="pl-c1">0xfb</span> <span class="pl-c1">0x00</span> <span class="pl-c1">0x00</span> <span class="pl-c1">0x00</span> <span class="pl-k">...</span> <span class="pl-c1">0x4f</span> <span class="pl-c1">0x09</span> <span class="pl-c1">0x79</span> <span class="pl-c1">0xa3</span> <span class="pl-c1">0x71</span>

<span class="pl-k">&gt;</span> <span class="pl-c1">decode</span>(bytes)
<span class="pl-c1">10</span><span class="pl-k">-</span>element Array{Any, <span class="pl-c1">1</span>}<span class="pl-k">:</span> <span class="pl-c1">0.0</span> <span class="pl-c1">1.0</span> <span class="pl-c1">1.58496</span> <span class="pl-c1">2.0</span> <span class="pl-c1">2.32193</span> <span class="pl-c1">2.58496</span> <span class="pl-c1">2.80735</span> <span class="pl-c1">3.0</span> <span class="pl-c1">3.16993</span> <span class="pl-c1">3.32193</span></pre></div>
<h4><a id="user-content-maps" class="anchor" aria-hidden="true" href="#maps"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Maps</h4>
<p>An <code>AbstractDict</code> type is encoded as CBOR <code>Type 5</code></p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">&gt;</span> d <span class="pl-k">=</span> <span class="pl-c1">Dict</span>()
<span class="pl-k">&gt;</span> d[<span class="pl-s"><span class="pl-pds">"</span>GNU's<span class="pl-pds">"</span></span>] <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>not UNIX<span class="pl-pds">"</span></span>
<span class="pl-k">&gt;</span> d[<span class="pl-c1">Float64</span>(e)] <span class="pl-k">=</span> [<span class="pl-c1">2</span>, <span class="pl-s"><span class="pl-pds">"</span>+<span class="pl-pds">"</span></span>, <span class="pl-c1">0.718281828459045</span>]

<span class="pl-k">&gt;</span> bytes <span class="pl-k">=</span> <span class="pl-c1">encode</span>(d)
<span class="pl-c1">38</span><span class="pl-k">-</span>element Array{UInt8, <span class="pl-c1">1</span>}<span class="pl-k">:</span> <span class="pl-c1">0xa2</span> <span class="pl-c1">0x65</span> <span class="pl-c1">0x47</span> <span class="pl-c1">0x4e</span> <span class="pl-c1">0x55</span> <span class="pl-k">...</span> <span class="pl-c1">0x28</span> <span class="pl-c1">0x6f</span> <span class="pl-c1">0x8a</span> <span class="pl-c1">0xd2</span> <span class="pl-c1">0x56</span>

<span class="pl-k">&gt;</span> <span class="pl-c1">decode</span>(bytes)
Dict{Any,Any} with <span class="pl-c1">2</span> entries<span class="pl-k">:</span>
  <span class="pl-s"><span class="pl-pds">"</span>GNU's<span class="pl-pds">"</span></span>           <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>not UNIX<span class="pl-pds">"</span></span>
  <span class="pl-c1">2.718281828459045</span> <span class="pl-k">=&gt;</span> Any[<span class="pl-c1">0x02</span>, <span class="pl-s"><span class="pl-pds">"</span>+<span class="pl-pds">"</span></span>, <span class="pl-c1">0.718281828459045</span>]</pre></div>
<h4><a id="user-content-tagging" class="anchor" aria-hidden="true" href="#tagging"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Tagging</h4>
<p>To <em>tag</em> one of the above types, encode a <code>Tag</code> with <code>first</code> being an
<strong>non-negative</strong> integer, and <code>second</code> being the data you want to tag.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">&gt;</span> bytes <span class="pl-k">=</span> <span class="pl-c1">encode</span>(<span class="pl-c1">Tag</span>(<span class="pl-c1">80</span>, <span class="pl-s"><span class="pl-pds">"</span>web servers<span class="pl-pds">"</span></span>))

<span class="pl-k">&gt;</span> data <span class="pl-k">=</span> <span class="pl-c1">decode</span>(bytes)
<span class="pl-c1">0x50</span><span class="pl-k">=&gt;</span><span class="pl-s"><span class="pl-pds">"</span>HTTP Web Server<span class="pl-pds">"</span></span></pre></div>
<p>There exists an <a href="http://www.iana.org/assignments/cbor-tags/cbor-tags.xhtml" rel="nofollow">IANA registery</a>
which assigns certain meanings to tags; for example, a string tagged
with a value of <code>32</code> is to be interpreted as a
<a href="https://tools.ietf.org/html/rfc3986" rel="nofollow">Uniform Resource Locater</a>. To decode a
tagged CBOR data item, and then to automatically interpret the meaning of the
tag, use <code>decode_with_iana</code>.</p>
<p>For example, a Julia <code>BigInt</code> type is encoded as an <code>Array{UInt8, 1}</code> containing
the bytes of it's hexadecimal representation, and tagged with a value of <code>2</code> or
<code>3</code></p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">&gt;</span> b <span class="pl-k">=</span> <span class="pl-c1">BigInt</span>(<span class="pl-c1">factorial</span>(<span class="pl-c1">20</span>))
<span class="pl-c1">2432902008176640000</span>

<span class="pl-k">&gt;</span> bytes <span class="pl-k">=</span> <span class="pl-c1">encode</span>(b <span class="pl-k">*</span> b <span class="pl-k">*</span> <span class="pl-k">-</span>b)
<span class="pl-c1">34</span><span class="pl-k">-</span>element Array{UInt8,<span class="pl-c1">1</span>}<span class="pl-k">:</span> <span class="pl-c1">0xc3</span> <span class="pl-c1">0x58</span> <span class="pl-c1">0x1f</span> <span class="pl-c1">0x13</span> <span class="pl-c1">0xd4</span> <span class="pl-k">...</span> <span class="pl-c1">0xff</span> <span class="pl-c1">0xff</span> <span class="pl-c1">0xff</span> <span class="pl-c1">0xff</span> <span class="pl-c1">0xff</span></pre></div>
<p>To decode <code>bytes</code> <em>without</em> interpreting the meaning of the tag, use <code>decode</code></p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">&gt;</span> <span class="pl-c1">decode</span>(bytes)
<span class="pl-c1">0x03</span> <span class="pl-k">=&gt;</span> UInt8[<span class="pl-c1">0x96</span>, <span class="pl-c1">0x58</span>, <span class="pl-c1">0xd1</span>, <span class="pl-c1">0x85</span>, <span class="pl-c1">0xdb</span> <span class="pl-k">..</span> <span class="pl-c1">0xff</span> <span class="pl-c1">0xff</span> <span class="pl-c1">0xff</span> <span class="pl-c1">0xff</span> <span class="pl-c1">0xff</span>]</pre></div>
<p>To decode <code>bytes</code> and to interpret the meaning of the tag, use
<code>decode_with_iana</code></p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">&gt;</span> <span class="pl-c1">decode_with_iana</span>(bytes)
<span class="pl-k">-</span><span class="pl-c1">14400376622525549608547603031202889616850944000000000000</span></pre></div>
<p>Currently, only <code>BigInt</code> is supported for automatically tagged encoding and
decoding; more Julia types will be added in the future.</p>
<h4><a id="user-content-composite-types" class="anchor" aria-hidden="true" href="#composite-types"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Composite Types</h4>
<p>A generic <code>DataType</code> that isn't one of the above types is encoded through
<code>encode</code> using reflection. This is supported only if all of the fields of the
type belong to one of the above types.</p>
<p>For example, say you have a user-defined type <code>Point</code></p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">mutable struct</span> Point
    x<span class="pl-k">::</span><span class="pl-c1">Int64</span>
    y<span class="pl-k">::</span><span class="pl-c1">Float64</span>
    space<span class="pl-k">::</span><span class="pl-c1">String</span>
<span class="pl-k">end</span>

point <span class="pl-k">=</span> <span class="pl-c1">Point</span>(<span class="pl-c1">1</span>, <span class="pl-c1">3.4</span>, <span class="pl-s"><span class="pl-pds">"</span>Euclidean<span class="pl-pds">"</span></span>)</pre></div>
<p>When <code>point</code> is passed into <code>encode</code>, it is first converted to a <code>Dict</code>
containing the symbolic names of it's fields as keys associated to their
respective values and a <code>"type"</code> key associated to the type's
symbolic name, like so</p>
<div class="highlight highlight-source-julia"><pre>Dict{Any, Any} with <span class="pl-c1">3</span> entries<span class="pl-k">:</span>
  <span class="pl-s"><span class="pl-pds">"</span>x<span class="pl-pds">"</span></span>     <span class="pl-k">=&gt;</span> <span class="pl-c1">0x01</span>
  <span class="pl-s"><span class="pl-pds">"</span>type<span class="pl-pds">"</span></span>  <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>Point<span class="pl-pds">"</span></span>
  <span class="pl-s"><span class="pl-pds">"</span>y<span class="pl-pds">"</span></span>     <span class="pl-k">=&gt;</span> <span class="pl-c1">3.4</span>
  <span class="pl-s"><span class="pl-pds">"</span>space<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>Euclidean<span class="pl-pds">"</span></span></pre></div>
<p>The <code>Dict</code> is then encoded as CBOR <code>Type 5</code>.</p>
<h4><a id="user-content-indefinite-length-collections" class="anchor" aria-hidden="true" href="#indefinite-length-collections"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Indefinite length collections</h4>
<p>To encode collections of <em>indefinite</em> length, you can just wrap any iterator
in the <code>CBOR.UndefLength</code> type. Make sure that your Iterator knows their eltype
to e.g. create a bytestring / string / Dict <em>indefinite</em> length encoding.
The eltype mapping is:</p>
<div class="highlight highlight-source-julia"><pre>Vector{UInt8} <span class="pl-k">-&gt;</span> bytestring
String <span class="pl-k">-&gt;</span> bytestring
Pair <span class="pl-k">-&gt;</span> Dict
Any <span class="pl-k">-&gt;</span> List</pre></div>
<p>If the eltype is unknown, but you still want to enforce it, use this constructor:</p>
<div class="highlight highlight-source-julia"><pre>CBOR<span class="pl-k">.</span><span class="pl-c1">UndefLength</span><span class="pl-c1">{String}</span>(iter)</pre></div>
<p>First create some julia iterator with unknown length</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">function</span> <span class="pl-en">producer</span>(ch<span class="pl-k">::</span><span class="pl-c1">Channel</span>)
    <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>
        <span class="pl-c1">put!</span>(ch,i<span class="pl-k">*</span>i)
    <span class="pl-k">end</span>
<span class="pl-k">end</span>
iter <span class="pl-k">=</span> <span class="pl-c1">Channel</span>(producer)</pre></div>
<p>encode it with UndefLength</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">&gt;</span> <span class="pl-c1">encode</span>(<span class="pl-c1">UndefLength</span>(iter))
<span class="pl-c1">18</span><span class="pl-k">-</span>element Array{UInt8, <span class="pl-c1">1</span>}<span class="pl-k">:</span> <span class="pl-c1">0x9f</span> <span class="pl-c1">0x01</span> <span class="pl-c1">0x04</span> <span class="pl-c1">0x09</span> <span class="pl-c1">0x10</span> <span class="pl-k">...</span> <span class="pl-c1">0x18</span> <span class="pl-c1">0x51</span> <span class="pl-c1">0x18</span> <span class="pl-c1">0x64</span> <span class="pl-c1">0xff</span>

<span class="pl-k">&gt;</span> <span class="pl-c1">decode</span>(bytes)
[<span class="pl-c1">1</span>, <span class="pl-c1">4</span>, <span class="pl-c1">9</span>, <span class="pl-c1">16</span>, <span class="pl-c1">25</span>, <span class="pl-c1">36</span>, <span class="pl-c1">49</span>, <span class="pl-c1">64</span>, <span class="pl-c1">81</span>, <span class="pl-c1">100</span>]</pre></div>
<p>While encoding an indefinite length <code>Map</code>, produce first the key and then the
value for each key-value pair, or produce pairs!</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">function</span> <span class="pl-en">cubes</span>(ch<span class="pl-k">::</span><span class="pl-c1">Channel</span>)
    <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>
        <span class="pl-c1">put!</span>(ch, i)       <span class="pl-c"><span class="pl-c">#</span> key</span>
        <span class="pl-c1">put!</span>(ch, i<span class="pl-k">*</span>i<span class="pl-k">*</span>i)   <span class="pl-c"><span class="pl-c">#</span> value</span>
    <span class="pl-k">end</span>
<span class="pl-k">end</span>

<span class="pl-k">&gt;</span> bytes <span class="pl-k">=</span> <span class="pl-c1">encode</span>(<span class="pl-c1">UndefLength</span><span class="pl-c1">{Pair}</span>(<span class="pl-c1">Channel</span>(cubes)))
<span class="pl-c1">34</span><span class="pl-k">-</span>element Array{UInt8, <span class="pl-c1">1</span>}<span class="pl-k">:</span> <span class="pl-c1">0xbf</span> <span class="pl-c1">0x01</span> <span class="pl-c1">0x01</span> <span class="pl-c1">0x02</span> <span class="pl-c1">0x08</span> <span class="pl-k">...</span> <span class="pl-c1">0x0a</span> <span class="pl-c1">0x19</span> <span class="pl-c1">0x03</span> <span class="pl-c1">0xe8</span> <span class="pl-c1">0xff</span>

<span class="pl-k">&gt;</span> <span class="pl-c1">decode</span>(bytes)
<span class="pl-c1">Dict</span>(<span class="pl-c1">7</span><span class="pl-k">=&gt;</span><span class="pl-c1">343</span>,<span class="pl-c1">4</span><span class="pl-k">=&gt;</span><span class="pl-c1">64</span>,<span class="pl-c1">9</span><span class="pl-k">=&gt;</span><span class="pl-c1">729</span>,<span class="pl-c1">10</span><span class="pl-k">=&gt;</span><span class="pl-c1">1000</span>,<span class="pl-c1">2</span><span class="pl-k">=&gt;</span><span class="pl-c1">8</span>,<span class="pl-c1">3</span><span class="pl-k">=&gt;</span><span class="pl-c1">27</span>,<span class="pl-c1">5</span><span class="pl-k">=&gt;</span><span class="pl-c1">125</span>,<span class="pl-c1">8</span><span class="pl-k">=&gt;</span><span class="pl-c1">512</span>,<span class="pl-c1">6</span><span class="pl-k">=&gt;</span><span class="pl-c1">216</span>,<span class="pl-c1">1</span><span class="pl-k">=&gt;</span><span class="pl-c1">1</span>)</pre></div>
<p>Note that when an indefinite length CBOR <code>Type 2</code> or <code>Type 3</code> is decoded,
the result is a <em>concatenation</em> of the individual elements.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">function</span> <span class="pl-en">producer</span>(ch<span class="pl-k">::</span><span class="pl-c1">Channel</span>)
    <span class="pl-k">for</span> c <span class="pl-k">in</span> [<span class="pl-s"><span class="pl-pds">"</span>F<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>ire<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span> <span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>and<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span> <span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Blo<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>od<span class="pl-pds">"</span></span>]
        <span class="pl-c1">put!</span>(ch,c)
    <span class="pl-k">end</span>
<span class="pl-k">end</span>

<span class="pl-k">&gt;</span> bytes <span class="pl-k">=</span> <span class="pl-c1">encode</span>(<span class="pl-c1">UndefLength</span><span class="pl-c1">{String}</span>(<span class="pl-c1">Channel</span>(producer)))
<span class="pl-c1">23</span><span class="pl-k">-</span>element Array{UInt8, <span class="pl-c1">1</span>}<span class="pl-k">:</span> <span class="pl-c1">0x7f</span> <span class="pl-c1">0x61</span> <span class="pl-c1">0x46</span> <span class="pl-c1">0x63</span> <span class="pl-c1">0x69</span> <span class="pl-k">...</span> <span class="pl-c1">0x6f</span> <span class="pl-c1">0x62</span> <span class="pl-c1">0x6f</span> <span class="pl-c1">0x64</span> <span class="pl-c1">0xff</span>

<span class="pl-k">&gt;</span> <span class="pl-c1">decode</span>(bytes)
<span class="pl-s"><span class="pl-pds">"</span>Fire and Blood<span class="pl-pds">"</span></span></pre></div>
<h3><a id="user-content-caveats" class="anchor" aria-hidden="true" href="#caveats"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Caveats</h3>
<p>Encoding a <code>UInt128</code> and an <code>Int128</code> isn't supported; use a <code>BigInt</code> instead.</p>
<p>Decoding CBOR data that isn't well-formed is unpredictable.</p>
</article></div>