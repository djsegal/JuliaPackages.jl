<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-horizonsjl" class="anchor" aria-hidden="true" href="#horizonsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>HORIZONS.jl</h1>
<p><a href="https://github.com/PerezHz/HORIZONS.jl/actions"><img src="https://github.com/PerezHz/HORIZONS.jl/workflows/CI/badge.svg" alt="Build status" style="max-width:100%;"></a></p>
<p><a href="https://codecov.io/gh/PerezHz/HORIZONS.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/3c0a7eda7a482d5d6dd36af70524b1724f9c8a2f8d23c066476c103d64b8fdbc/68747470733a2f2f636f6465636f762e696f2f67682f506572657a487a2f484f52495a4f4e532e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/PerezHz/HORIZONS.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a> <a href="https://coveralls.io/github/PerezHz/HORIZONS.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/1ecf092e7b10523868f95ab53c493c52a2c30000be7c1b87abc57daf1c9fd3db/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f506572657a487a2f484f52495a4f4e532e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/PerezHz/HORIZONS.jl/badge.svg?branch=master" style="max-width:100%;"></a></p>
<p>An interface to NASA-JPL <a href="https://ssd.jpl.nasa.gov/?horizons" rel="nofollow">HORIZONS</a> system in
<a href="http://julialang.org" rel="nofollow">Julia</a>.</p>
<h2><a id="user-content-author" class="anchor" aria-hidden="true" href="#author"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Author</h2>
<ul>
<li><a href="https://www.linkedin.com/in/perezhz" rel="nofollow">Jorge A. Pérez-Hernández</a>,
Instituto de Ciencias Físicas, Universidad Nacional Autónoma de México (UNAM)</li>
</ul>
<p>Comments, suggestions, and improvements are welcome and appreciated.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p><code>HORIZONS.jl</code> is a registered Julia package and may be installed
from the Julia REPL doing <code>import Pkg; Pkg.add("HORIZONS")</code>. Current stable
release is <code>v0.3.0</code>, which is compatible with Julia 1.0, 1.3 and 1.4.</p>
<h2><a id="user-content-external-dependencies" class="anchor" aria-hidden="true" href="#external-dependencies"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>External dependencies</h2>
<p>Connection to the HORIZONS machine is done via the <code>telnet</code> command line
utility, which should be locally installed and enabled. File downloading is done via <code>ftp</code>.</p>
<h2><a id="user-content-usage-examples" class="anchor" aria-hidden="true" href="#usage-examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage examples</h2>
<p>The <code>horizons()</code> function is a shortcut to the HORIZONS <code>telnet</code> interface
prompt from the Julia REPL:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using HORIZONS

julia&gt; horizons() # get Horizons prompt from the Julia REPL
JPL Horizons, version 4.70
Type '?' for brief help, '?!' for details,
'-' for previous prompt, 'x' to exit
System news updated June 08, 2020

Horizons&gt;
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> HORIZONS

julia<span class="pl-k">&gt;</span> <span class="pl-c1">horizons</span>() <span class="pl-c"><span class="pl-c">#</span> get Horizons prompt from the Julia REPL</span>
JPL Horizons, version <span class="pl-c1">4.70</span>
Type <span class="pl-s"><span class="pl-pds">'</span>?<span class="pl-pds">'</span></span> <span class="pl-k">for</span> brief help, <span class="pl-s"><span class="pl-pds">'</span>?!<span class="pl-pds">'</span></span> <span class="pl-k">for</span> details,
<span class="pl-s"><span class="pl-pds">'</span>-<span class="pl-pds">'</span></span> <span class="pl-k">for</span> previous prompt, <span class="pl-s"><span class="pl-pds">'</span>x<span class="pl-pds">'</span></span> to exit
System news updated June <span class="pl-c1">08</span>, <span class="pl-c1">2020</span>

Horizons<span class="pl-k">&gt;</span></pre></div>
<p><code>HORIZONS.jl</code> also has Julia functions which for some of the scripts authored by
Jon D. Giorgini for automated generation of small-body binary SPK files and tables.
These scripts were originally written in <code>expect</code>, and can be found at the
JPL's Solar System Dynamics group ftp server <code>ftp://ssd.jpl.nasa.gov/pub/ssd/SCRIPTS/</code>.
Below, we describe the functions <code>smb_spk</code>, <code>smb_spk_ele</code> and <code>vec_tbl</code>.</p>
<h3><a id="user-content-smb_spk" class="anchor" aria-hidden="true" href="#smb_spk"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><code>smb_spk</code></h3>
<p>The <code>smb_spk</code> function automates generation and downloading of Solar System
small-bodies binary SPK files from HORIZONS:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using HORIZONS, Dates

# generate a binary SPK file for asteroid 99942 Apophis covering from 2021 to 2029
ftp_name, local_file = smb_spk(&quot;b&quot;, &quot;DES= 2099942;&quot;, DateTime(2021,Jan,1), DateTime(2029,Apr,13))

isfile(local_file) # check that the binary SPK file `local_file` exists
"><pre><span class="pl-k">using</span> HORIZONS, Dates

<span class="pl-c"><span class="pl-c">#</span> generate a binary SPK file for asteroid 99942 Apophis covering from 2021 to 2029</span>
ftp_name, local_file <span class="pl-k">=</span> <span class="pl-c1">smb_spk</span>(<span class="pl-s"><span class="pl-pds">"</span>b<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>DES= 2099942;<span class="pl-pds">"</span></span>, <span class="pl-c1">DateTime</span>(<span class="pl-c1">2021</span>,Jan,<span class="pl-c1">1</span>), <span class="pl-c1">DateTime</span>(<span class="pl-c1">2029</span>,Apr,<span class="pl-c1">13</span>))

<span class="pl-c1">isfile</span>(local_file) <span class="pl-c"><span class="pl-c">#</span> check that the binary SPK file `local_file` exists</span></pre></div>
<p>Binary SPK files (i.e., extension <code>.bsp</code>) can be read using e.g.
<a href="https://github.com/JuliaAstro/SPICE.jl"><code>SPICE.jl</code></a>:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="# import Pkg; Pkg.add(&quot;SPICE&quot;) # uncomment this line to add `SPICE.jl` to current environment
using SPICE, Dates
furnsh(local_file)
et = 86400*(datetime2julian(DateTime(2024,3,1)) - 2.451545e6)
pv = spkgeo(2099942, et, &quot;J2000&quot;, 0)
"><pre><span class="pl-c"><span class="pl-c">#</span> import Pkg; Pkg.add("SPICE") # uncomment this line to add `SPICE.jl` to current environment</span>
<span class="pl-k">using</span> SPICE, Dates
<span class="pl-c1">furnsh</span>(local_file)
et <span class="pl-k">=</span> <span class="pl-c1">86400</span><span class="pl-k">*</span>(<span class="pl-c1">datetime2julian</span>(<span class="pl-c1">DateTime</span>(<span class="pl-c1">2024</span>,<span class="pl-c1">3</span>,<span class="pl-c1">1</span>)) <span class="pl-k">-</span> <span class="pl-c1">2.451545e6</span>)
pv <span class="pl-k">=</span> <span class="pl-c1">spkgeo</span>(<span class="pl-c1">2099942</span>, et, <span class="pl-s"><span class="pl-pds">"</span>J2000<span class="pl-pds">"</span></span>, <span class="pl-c1">0</span>)</pre></div>
<h3><a id="user-content-smb_spk_ele" class="anchor" aria-hidden="true" href="#smb_spk_ele"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><code>smb_spk_ele</code></h3>
<p><code>HORIZONS.jl</code> function <code>smb_spk_ele</code> generates <code>.bsp</code> binary SPK files for
small-bodies from a set of osculating orbital elements at a given epoch:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using HORIZONS, Dates

epoch = 2449526.5 # Osculating elements epoch, in Barycentric Dynamical Time (TDB)
ec = 0.6570220840219289 # Orbital eccentricity
qr = 0.5559654280797371 # Perihelion distance
tp = 2449448.890787227 # Julian date of perihelion passage
om = 78.10766874391773 # Longitude of ascending node
w = 77.40198125423228 # Argument of perihelion
inc = 24.4225258251465 # Inclination

start_time = DateTime(2021,Jan,1)
stop_time = DateTime(2022,Jan,1)

# generate a binary SPK file for asteroid 1990 MU at `epoch`
ftp_name, local_file = smb_spk_ele(&quot;b&quot;, &quot;1990 MU&quot;, start_time, stop_time, epoch, ec, qr, tp, om, w, inc)

isfile(local_file) # check that the binary SPK was downloaded
"><pre><span class="pl-k">using</span> HORIZONS, Dates

epoch <span class="pl-k">=</span> <span class="pl-c1">2449526.5</span> <span class="pl-c"><span class="pl-c">#</span> Osculating elements epoch, in Barycentric Dynamical Time (TDB)</span>
ec <span class="pl-k">=</span> <span class="pl-c1">0.6570220840219289</span> <span class="pl-c"><span class="pl-c">#</span> Orbital eccentricity</span>
qr <span class="pl-k">=</span> <span class="pl-c1">0.5559654280797371</span> <span class="pl-c"><span class="pl-c">#</span> Perihelion distance</span>
tp <span class="pl-k">=</span> <span class="pl-c1">2449448.890787227</span> <span class="pl-c"><span class="pl-c">#</span> Julian date of perihelion passage</span>
om <span class="pl-k">=</span> <span class="pl-c1">78.10766874391773</span> <span class="pl-c"><span class="pl-c">#</span> Longitude of ascending node</span>
w <span class="pl-k">=</span> <span class="pl-c1">77.40198125423228</span> <span class="pl-c"><span class="pl-c">#</span> Argument of perihelion</span>
inc <span class="pl-k">=</span> <span class="pl-c1">24.4225258251465</span> <span class="pl-c"><span class="pl-c">#</span> Inclination</span>

start_time <span class="pl-k">=</span> <span class="pl-c1">DateTime</span>(<span class="pl-c1">2021</span>,Jan,<span class="pl-c1">1</span>)
stop_time <span class="pl-k">=</span> <span class="pl-c1">DateTime</span>(<span class="pl-c1">2022</span>,Jan,<span class="pl-c1">1</span>)

<span class="pl-c"><span class="pl-c">#</span> generate a binary SPK file for asteroid 1990 MU at `epoch`</span>
ftp_name, local_file <span class="pl-k">=</span> <span class="pl-c1">smb_spk_ele</span>(<span class="pl-s"><span class="pl-pds">"</span>b<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>1990 MU<span class="pl-pds">"</span></span>, start_time, stop_time, epoch, ec, qr, tp, om, w, inc)

<span class="pl-c1">isfile</span>(local_file) <span class="pl-c"><span class="pl-c">#</span> check that the binary SPK was downloaded</span></pre></div>
<h3><a id="user-content-vec_tbl" class="anchor" aria-hidden="true" href="#vec_tbl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><code>vec_tbl</code></h3>
<p><code>HORIZONS.jl</code> function <code>vec_tbl</code> allows the user to generate vector tables for
designated objects and save the output into a file:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="# date variables for start and stop times
t_start = DateTime(2029,4,13)
t_stop = Date(2029,4,14)

# step size (allowed types: Period, Int, String)
δt = Hour(1) # 1 hour step size

# generate tables and save output to Apophis.txt in current directory:
vec_tbl(&quot;Apophis&quot;, &quot;Apophis.txt&quot;, t_start, t_stop, δt; CENTER=&quot;@ssb&quot;, REF_PLANE=&quot;FRAME&quot;, OUT_UNITS=2, CSV_FORMAT=true, VEC_TABLE=2)
"><pre><span class="pl-c"><span class="pl-c">#</span> date variables for start and stop times</span>
t_start <span class="pl-k">=</span> <span class="pl-c1">DateTime</span>(<span class="pl-c1">2029</span>,<span class="pl-c1">4</span>,<span class="pl-c1">13</span>)
t_stop <span class="pl-k">=</span> <span class="pl-c1">Date</span>(<span class="pl-c1">2029</span>,<span class="pl-c1">4</span>,<span class="pl-c1">14</span>)

<span class="pl-c"><span class="pl-c">#</span> step size (allowed types: Period, Int, String)</span>
δt <span class="pl-k">=</span> <span class="pl-c1">Hour</span>(<span class="pl-c1">1</span>) <span class="pl-c"><span class="pl-c">#</span> 1 hour step size</span>

<span class="pl-c"><span class="pl-c">#</span> generate tables and save output to Apophis.txt in current directory:</span>
<span class="pl-c1">vec_tbl</span>(<span class="pl-s"><span class="pl-pds">"</span>Apophis<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Apophis.txt<span class="pl-pds">"</span></span>, t_start, t_stop, δt; CENTER<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>@ssb<span class="pl-pds">"</span></span>, REF_PLANE<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>FRAME<span class="pl-pds">"</span></span>, OUT_UNITS<span class="pl-k">=</span><span class="pl-c1">2</span>, CSV_FORMAT<span class="pl-k">=</span><span class="pl-c1">true</span>, VEC_TABLE<span class="pl-k">=</span><span class="pl-c1">2</span>)</pre></div>
<p>Note that <code>CENTER</code>, <code>REF_PLANE</code>, etc., are keyword arguments. If they are omitted
from the <code>vec_tbl</code> call, then they will take default values:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="δt = 1 #return only one step

# generate tables with default values and save output to Apophis.txt in current directory:

vec_tbl(&quot;Apophis&quot;, &quot;Apophis.txt&quot;, t_start, t_stop, δt)
"><pre>δt <span class="pl-k">=</span> <span class="pl-c1">1</span> <span class="pl-c"><span class="pl-c">#</span>return only one step</span>

<span class="pl-c"><span class="pl-c">#</span> generate tables with default values and save output to Apophis.txt in current directory:</span>

<span class="pl-c1">vec_tbl</span>(<span class="pl-s"><span class="pl-pds">"</span>Apophis<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Apophis.txt<span class="pl-pds">"</span></span>, t_start, t_stop, δt)</pre></div>
<p>More details about default values of keyword arguments are available in the
<code>vec_tbl</code> docstrings.</p>
<p>If the output file is not specified, then <code>vec_tbl</code> returns the output as a
string, which may be then used for further processing within Julia:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="δt = &quot;2 hours&quot; # 2 hour step size

# save into `apophisvt::String` the output from HORIZONS
apophisvt = vec_tbl(&quot;Apophis&quot;, t_start, t_stop, δt)

# do stuff with `apophisvt` inside julia...
"><pre>δt <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>2 hours<span class="pl-pds">"</span></span> <span class="pl-c"><span class="pl-c">#</span> 2 hour step size</span>

<span class="pl-c"><span class="pl-c">#</span> save into `apophisvt::String` the output from HORIZONS</span>
apophisvt <span class="pl-k">=</span> <span class="pl-c1">vec_tbl</span>(<span class="pl-s"><span class="pl-pds">"</span>Apophis<span class="pl-pds">"</span></span>, t_start, t_stop, δt)

<span class="pl-c"><span class="pl-c">#</span> do stuff with `apophisvt` inside julia...</span></pre></div>
<p>Julia's broadcasting allows the user to get many vector tables at once:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using HORIZONS

julia&gt; IDs = string.([99942, 90000033])
2-element Array{String,1}:
 &quot;99942&quot;
 &quot;90000033&quot;

julia&gt; local_files = string.(IDs,&quot;.txt&quot;)
2-element Array{String,1}:
 &quot;99942.txt&quot;
 &quot;90000033.txt&quot;

julia&gt; vec_tbl.(IDs, local_files, t_start, t_stop, δt) #save output to local files 99942.txt and 90000033.txt in current folder
2-element Array{Void,1}:
 nothing
 nothing

julia&gt;
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> HORIZONS

julia<span class="pl-k">&gt;</span> IDs <span class="pl-k">=</span> <span class="pl-c1">string</span>.([<span class="pl-c1">99942</span>, <span class="pl-c1">90000033</span>])
<span class="pl-c1">2</span><span class="pl-k">-</span>element Array{String,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-s"><span class="pl-pds">"</span>99942<span class="pl-pds">"</span></span>
 <span class="pl-s"><span class="pl-pds">"</span>90000033<span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> local_files <span class="pl-k">=</span> <span class="pl-c1">string</span>.(IDs,<span class="pl-s"><span class="pl-pds">"</span>.txt<span class="pl-pds">"</span></span>)
<span class="pl-c1">2</span><span class="pl-k">-</span>element Array{String,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-s"><span class="pl-pds">"</span>99942.txt<span class="pl-pds">"</span></span>
 <span class="pl-s"><span class="pl-pds">"</span>90000033.txt<span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">vec_tbl</span>.(IDs, local_files, t_start, t_stop, δt) <span class="pl-c"><span class="pl-c">#</span>save output to local files 99942.txt and 90000033.txt in current folder</span>
<span class="pl-c1">2</span><span class="pl-k">-</span>element Array{Void,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">nothing</span>
 <span class="pl-c1">nothing</span>

julia<span class="pl-k">&gt;</span></pre></div>
<p>Additionally, the <code>vec_tbl_csv</code> function returns HORIZONS output both as an
<code>Array{Any,2}</code> and a CSV-formatted <code>String</code>, which
can in turn be used to construct a <code>DataFrame</code> (requires
<a href="https://github.com/JuliaData/DataFrames.jl">DataFrames.jl</a> to be installed):</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using HORIZONS, DataFrames

dt0 = Date(2000)
dtmax = Date(2015)
δt = Year(1)

#tbl is an Array{Any,2}; str is a String with CSV format
tbl, str = vec_tbl_csv(&quot;1950 DA&quot;, dt0, dtmax, δt;
    VEC_TABLE = &quot;2&quot;, REF_PLANE=&quot;F&quot;, CENTER=&quot;coord&quot;, COORD_TYPE=&quot;C&quot;, SITE_COORD=&quot;1,45,45&quot;);

mydataframe = readtable(IOBuffer(str))
"><pre><span class="pl-k">using</span> HORIZONS, DataFrames

dt0 <span class="pl-k">=</span> <span class="pl-c1">Date</span>(<span class="pl-c1">2000</span>)
dtmax <span class="pl-k">=</span> <span class="pl-c1">Date</span>(<span class="pl-c1">2015</span>)
δt <span class="pl-k">=</span> <span class="pl-c1">Year</span>(<span class="pl-c1">1</span>)

<span class="pl-c"><span class="pl-c">#</span>tbl is an Array{Any,2}; str is a String with CSV format</span>
tbl, str <span class="pl-k">=</span> <span class="pl-c1">vec_tbl_csv</span>(<span class="pl-s"><span class="pl-pds">"</span>1950 DA<span class="pl-pds">"</span></span>, dt0, dtmax, δt;
    VEC_TABLE <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>2<span class="pl-pds">"</span></span>, REF_PLANE<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>F<span class="pl-pds">"</span></span>, CENTER<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>coord<span class="pl-pds">"</span></span>, COORD_TYPE<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>C<span class="pl-pds">"</span></span>, SITE_COORD<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>1,45,45<span class="pl-pds">"</span></span>);

mydataframe <span class="pl-k">=</span> <span class="pl-c1">readtable</span>(<span class="pl-c1">IOBuffer</span>(str))</pre></div>
<p>Then, <code>mydataframe</code> is a 16×8 <code>DataFrame</code>:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="# mydataframe:
# 16×8 DataFrames.DataFrame
│ Row │ JDTDB     │ Calendar_Date_TDB                │ X          │ Y          │ Z          │ VX      │ VY       │ VZ       │
├─────┼───────────┼──────────────────────────────────┼────────────┼────────────┼────────────┼─────────┼──────────┼──────────┤
│ 1   │ 2.45154e6 │ &quot;A.D. 2000-Jan-01 00:00:00.0000&quot; │ 3.49475e8  │ 2.10629e7  │ 5.71688e7  │ 25.2192 │ 15.1321  │ 9.42222  │
│ 2   │ 2.45191e6 │ &quot;A.D. 2001-Jan-01 00:00:00.0000&quot; │ -6.98285e7 │ 2.58022e7  │ 5.45238e7  │ 14.9524 │ -12.6021 │ -10.6881 │
│ 3   │ 2.45228e6 │ &quot;A.D. 2002-Jan-01 00:00:00.0000&quot; │ 3.61348e8  │ -5.69666e7 │ 1.54172e6  │ 31.3711 │ 17.5209  │ 11.1536  │
│ 4   │ 2.45264e6 │ &quot;A.D. 2003-Jan-01 00:00:00.0000&quot; │ 4.38864e7  │ 1.05596e8  │ 1.13413e8  │ 12.2543 │ -1.86915 │ -2.97705 │
│ 5   │ 2.45301e6 │ &quot;A.D. 2004-Jan-01 00:00:00.0000&quot; │ 3.22054e8  │ -1.46042e8 │ -6.27119e7 │ 39.9381 │ 18.0432  │ 11.7154  │
│ 6   │ 2.45337e6 │ &quot;A.D. 2005-Jan-01 00:00:00.0000&quot; │ 1.58117e8  │ 1.26817e8  │ 1.30187e8  │ 14.1172 │ 5.18222  │ 2.03615  │
│ 7   │ 2.45374e6 │ &quot;A.D. 2006-Jan-01 00:00:00.0000&quot; │ 2.16183e8  │ -2.27991e8 │ -1.22995e8 │ 52.494  │ 15.0644  │ 9.69931  │
│ 8   │ 2.4541e6  │ &quot;A.D. 2007-Jan-01 00:00:00.0000&quot; │ 2.52251e8  │ 1.08971e8  │ 1.18844e8  │ 17.5583 │ 9.77493  │ 5.43963  │
│ 9   │ 2.45447e6 │ &quot;A.D. 2008-Jan-01 00:00:00.0000&quot; │ 7.88944e6  │ -2.43067e8 │ -1.36722e8 │ 65.0567 │ -6.41305 │ -5.42335 │
│ 10  │ 2.45483e6 │ &quot;A.D. 2009-Jan-01 00:00:00.0000&quot; │ 3.21987e8  │ 6.3783e7   │ 8.74408e7  │ 21.7692 │ 13.586   │ 8.1631   │
│ 11  │ 2.4552e6  │ &quot;A.D. 2010-Jan-01 00:00:00.0000&quot; │ -1.15663e8 │ -7.63649e7 │ -1.92427e7 │ 27.1975 │ -22.6347 │ -17.6561 │
│ 12  │ 2.45556e6 │ &quot;A.D. 2011-Jan-01 00:00:00.0000&quot; │ 3.57936e8  │ -3.91115e6 │ 3.95854e7  │ 27.1418 │ 16.0684  │ 10.0908  │
│ 13  │ 2.45593e6 │ &quot;A.D. 2012-Jan-01 00:00:00.0000&quot; │ -3.42864e7 │ 6.17015e7  │ 8.08374e7  │ 13.0119 │ -8.54587 │ -7.70992 │
│ 14  │ 2.45629e6 │ &quot;A.D. 2013-Jan-01 00:00:00.0000&quot; │ 3.55506e8  │ -8.52031e7 │ -1.86717e7 │ 33.8279 │ 18.0591  │ 11.5473  │
│ 15  │ 2.45666e6 │ &quot;A.D. 2014-Jan-01 00:00:00.0000&quot; │ 8.32588e7  │ 1.17897e8  │ 1.22693e8  │ 12.6344 │ 0.803698 │ -1.08723 │
│ 16  │ 2.45702e6 │ &quot;A.D. 2015-Jan-01 00:00:00.0000&quot; │ 2.96116e8  │ -1.75053e8 │ -8.37231e7 │ 43.4907 │ 17.7757  │ 11.5517  │
"><pre><code># mydataframe:
# 16×8 DataFrames.DataFrame
│ Row │ JDTDB     │ Calendar_Date_TDB                │ X          │ Y          │ Z          │ VX      │ VY       │ VZ       │
├─────┼───────────┼──────────────────────────────────┼────────────┼────────────┼────────────┼─────────┼──────────┼──────────┤
│ 1   │ 2.45154e6 │ "A.D. 2000-Jan-01 00:00:00.0000" │ 3.49475e8  │ 2.10629e7  │ 5.71688e7  │ 25.2192 │ 15.1321  │ 9.42222  │
│ 2   │ 2.45191e6 │ "A.D. 2001-Jan-01 00:00:00.0000" │ -6.98285e7 │ 2.58022e7  │ 5.45238e7  │ 14.9524 │ -12.6021 │ -10.6881 │
│ 3   │ 2.45228e6 │ "A.D. 2002-Jan-01 00:00:00.0000" │ 3.61348e8  │ -5.69666e7 │ 1.54172e6  │ 31.3711 │ 17.5209  │ 11.1536  │
│ 4   │ 2.45264e6 │ "A.D. 2003-Jan-01 00:00:00.0000" │ 4.38864e7  │ 1.05596e8  │ 1.13413e8  │ 12.2543 │ -1.86915 │ -2.97705 │
│ 5   │ 2.45301e6 │ "A.D. 2004-Jan-01 00:00:00.0000" │ 3.22054e8  │ -1.46042e8 │ -6.27119e7 │ 39.9381 │ 18.0432  │ 11.7154  │
│ 6   │ 2.45337e6 │ "A.D. 2005-Jan-01 00:00:00.0000" │ 1.58117e8  │ 1.26817e8  │ 1.30187e8  │ 14.1172 │ 5.18222  │ 2.03615  │
│ 7   │ 2.45374e6 │ "A.D. 2006-Jan-01 00:00:00.0000" │ 2.16183e8  │ -2.27991e8 │ -1.22995e8 │ 52.494  │ 15.0644  │ 9.69931  │
│ 8   │ 2.4541e6  │ "A.D. 2007-Jan-01 00:00:00.0000" │ 2.52251e8  │ 1.08971e8  │ 1.18844e8  │ 17.5583 │ 9.77493  │ 5.43963  │
│ 9   │ 2.45447e6 │ "A.D. 2008-Jan-01 00:00:00.0000" │ 7.88944e6  │ -2.43067e8 │ -1.36722e8 │ 65.0567 │ -6.41305 │ -5.42335 │
│ 10  │ 2.45483e6 │ "A.D. 2009-Jan-01 00:00:00.0000" │ 3.21987e8  │ 6.3783e7   │ 8.74408e7  │ 21.7692 │ 13.586   │ 8.1631   │
│ 11  │ 2.4552e6  │ "A.D. 2010-Jan-01 00:00:00.0000" │ -1.15663e8 │ -7.63649e7 │ -1.92427e7 │ 27.1975 │ -22.6347 │ -17.6561 │
│ 12  │ 2.45556e6 │ "A.D. 2011-Jan-01 00:00:00.0000" │ 3.57936e8  │ -3.91115e6 │ 3.95854e7  │ 27.1418 │ 16.0684  │ 10.0908  │
│ 13  │ 2.45593e6 │ "A.D. 2012-Jan-01 00:00:00.0000" │ -3.42864e7 │ 6.17015e7  │ 8.08374e7  │ 13.0119 │ -8.54587 │ -7.70992 │
│ 14  │ 2.45629e6 │ "A.D. 2013-Jan-01 00:00:00.0000" │ 3.55506e8  │ -8.52031e7 │ -1.86717e7 │ 33.8279 │ 18.0591  │ 11.5473  │
│ 15  │ 2.45666e6 │ "A.D. 2014-Jan-01 00:00:00.0000" │ 8.32588e7  │ 1.17897e8  │ 1.22693e8  │ 12.6344 │ 0.803698 │ -1.08723 │
│ 16  │ 2.45702e6 │ "A.D. 2015-Jan-01 00:00:00.0000" │ 2.96116e8  │ -1.75053e8 │ -8.37231e7 │ 43.4907 │ 17.7757  │ 11.5517  │
</code></pre></div>
<h2><a id="user-content-license" class="anchor" aria-hidden="true" href="#license"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>License</h2>
<p><code>HORIZONS.jl</code> is licensed under the <a href="./LICENSE.md">MIT "Expat" license</a>.</p>
<h2><a id="user-content-acknowledgments" class="anchor" aria-hidden="true" href="#acknowledgments"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Acknowledgments</h2>
<p>The <a href="https://ssd.jpl.nasa.gov/?horizons" rel="nofollow">HORIZONS</a> system itself is the work of several people at JPL:</p>
<ul>
<li>Design/implementation :
<ul>
<li>Jon Giorgini</li>
<li>Don Yeomans</li>
</ul>
</li>
<li>Cognizant Eng.:
<ul>
<li>Jon Giorgini</li>
</ul>
</li>
<li>Major body ephemerides:
<ul>
<li>William Folkner (Planetary ephemerides)</li>
<li>Bob Jacobson    (Satellites)</li>
<li>Marina Brozovic (Satellites)</li>
</ul>
</li>
<li>Contributors:
<ul>
<li>Alan Chamberlin (web interface, database)</li>
<li>Paul Chodas     (some subroutines)</li>
<li>The NAIF group  (SPICELIB) (esp. Chuck Acton, Bill Taber, Nat Bachman)</li>
</ul>
</li>
</ul>
<p>Translation from the original <code>expect</code> scripts to Julia was done using the
<a href="https://gitlab.com/wavexx/Expect.jl" rel="nofollow">Expect.jl</a> package.</p>
<h2><a id="user-content-references" class="anchor" aria-hidden="true" href="#references"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>References</h2>
<ul>
<li><a href="https://ssd.jpl.nasa.gov/?horizons_doc" rel="nofollow">HORIZONS documentation (HTML)</a></li>
<li>Giorgini, J.D., Yeomans, D.K., Chamberlin, A.B., Chodas, P.W.,
Jacobson, R.A., Keesey, M.S., Lieske, J.H., Ostro, S.J.,
Standish, E.M., Wimberly, R.N., "JPL's On-Line Solar System Data
Service", Bulletin of the American Astronomical Society, Vol 28,
No. 3, p. 1158, 1996.</li>
</ul>
</article></div>