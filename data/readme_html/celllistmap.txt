<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p align="center" dir="auto">
<a target="_blank" rel="noopener noreferrer nofollow" href="https://raw.githubusercontent.com/m3g/CellListMap.jl/main/docs/src/assets/logo.svg"><img src="https://raw.githubusercontent.com/m3g/CellListMap.jl/main/docs/src/assets/logo.svg" style="max-width: 100%;"></a>
</p>
<h1 dir="auto"><a id="user-content-celllistmapjl" class="anchor" aria-hidden="true" href="#celllistmapjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>CellListMap.jl</h1>
<p dir="auto">This package is for computing interactions or any other property that is dependent on the distances between pairs of two- or three-dimensional particles, within a cutoff. It maps a function to be computed pairwise using cell lists, using periodic boundary conditions of any type. Parallel and serial implementations can be used.</p>
<p dir="auto">It allows the fast computation of any quantity from the pairs that are within the desired cutoff, for example pairwise potentials and forces, neighbor lists, minimum distances, an average distance or an histogram of distances, etc. This is done by passing the function to be evaluated as a parameter of the <code>map_pairwise!</code> function.</p>
<p dir="auto">The user guide provides direct examples of each of these applications.</p>
<h3 dir="auto"><a id="user-content-user-guide--httpsm3ggithubiocelllistmapjl" class="anchor" aria-hidden="true" href="#user-guide--httpsm3ggithubiocelllistmapjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>
<br>
<p align="center" dir="auto">
USER GUIDE: <br> 
<a href="https://m3g.github.io/CellListMap.jl" rel="nofollow">https://m3g.github.io/CellListMap.jl</a>
</p>
<br>
</h3>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">Download and install Julia for your platform from <a href="https://julialang.org/downloads/" rel="nofollow">this http url</a>. Version 1.6 or greater is required.</p>
<p dir="auto">Install it as usual for registered Julia packages:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; import Pkg

julia&gt; Pkg.add(&quot;CellListMap&quot;)"><pre lang="julia-repl" class="notranslate"><code>julia&gt; import Pkg

julia&gt; Pkg.add("CellListMap")
</code></pre></div>
<h2 dir="auto"><a id="user-content-brief-overview" class="anchor" aria-hidden="true" href="#brief-overview"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Brief overview</h2>
<p dir="auto">The main function is <code>map_parwise!</code>:</p>
<p dir="auto">If the analysis is performed on the pairs of a single vector <code>x</code> (<code>n*(n-1)/2</code> pairs), the function can be called with:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="map_pairwise!(f::Function,output,box::Box,cl::CellList)"><pre><span class="pl-c1">map_pairwise!</span>(f<span class="pl-k">::</span><span class="pl-c1">Function</span>,output,box<span class="pl-k">::</span><span class="pl-c1">Box</span>,cl<span class="pl-k">::</span><span class="pl-c1">CellList</span>)</pre></div>
<p dir="auto">while if two distinct sets of points are provided (<code>n*m</code> pairs), it is called with:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="map_pairwise!(f::Function,output,box::Box,cl::CellListPair)"><pre><span class="pl-c1">map_pairwise!</span>(f<span class="pl-k">::</span><span class="pl-c1">Function</span>,output,box<span class="pl-k">::</span><span class="pl-c1">Box</span>,cl<span class="pl-k">::</span><span class="pl-c1">CellListPair</span>)</pre></div>
<p dir="auto">where the <code>cl</code> variable of type <code>CellList</code> or <code>CellListPair</code> contains the cell lists built from the coordinates of the system, and <code>box</code> contains the system box properties.</p>
<p dir="auto">These functions will run over every pair of particles which are closer than <code>box.cutoff</code> and compute the (squared) Euclidean distance between the particles, considering the periodic boundary conditions given
in the <code>Box</code> structure. If the distance is smaller than the cutoff, a user defined function <code>f</code> of the coordinates of the two particles will be computed.</p>
<p dir="auto">The function <code>f</code> receives six arguments as input:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="f(x,y,i,j,d2,output)"><pre><span class="pl-c1">f</span>(x,y,i,j,d2,output)</pre></div>
<p dir="auto">Which are the coordinates of one particle, the coordinates of the second particle, the index of the first particle, the index of the second particle, the squared distance between them, and the <code>output</code> variable. It has also to return the same <code>output</code> variable. Thus, <code>f</code> may or not mutate <code>output</code>, but in either case it must return it.  The squared distance <code>d2</code> is computed   internally for comparison with the <code>cutoff</code>, and is passed to the <code>f</code> because many times it is used for the desired computation. Thus, the function <code>f</code> that is passed to <code>map_pairwise!</code> must be always of the form:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="function f(x,y,i,j,d2,output)
    # update output
    return output
end"><pre><span class="pl-k">function</span> <span class="pl-en">f</span>(x,y,i,j,d2,output)
    <span class="pl-c"><span class="pl-c">#</span> update output</span>
    <span class="pl-k">return</span> output
<span class="pl-k">end</span></pre></div>
<p dir="auto">and the user can define more or less parameters or additional data required to compute the function using closures, as shown in the examples.</p>
<p dir="auto">Parallel calculations are the default if more than one thread is available. Use <code>parallel=false</code> as an optional argument to <code>map_pairwise!</code> to run the serial version instead.</p>
<h2 dir="auto"><a id="user-content-some-benchmarks" class="anchor" aria-hidden="true" href="#some-benchmarks"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Some benchmarks</h2>
<p dir="auto">The goal here is to provide a good implementation of cell lists. We compare it with the implementation of the nice cython/python <a href="https://github.com/astropy/halotools">halotools</a> package, in the computation of an histogram of mean pairwise velocities.</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/lmiq/PairVelocities/blob/main/data/cd_v0.5.3.png"><img src="https://github.com/lmiq/PairVelocities/raw/main/data/cd_v0.5.3.png" style="max-width: 100%;"></a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/lmiq/PairVelocities/blob/main/data/cv_v0.5.3.png"><img src="https://github.com/lmiq/PairVelocities/raw/main/data/cv_v0.5.3.png" style="max-width: 100%;"></a></p>
<p dir="auto">The full test is available <a href="https://github.com/lmiq/PairVelocities">at this</a> repository. And we kindly thank <a href="https://github.com/florpi">Carolina Cuesta</a> for providing the example. These benchmarks were run on an Intel i7 8th gen laptop, with 4 cores (8 threads).</p>
<h2 dir="auto"><a id="user-content-citation" class="anchor" aria-hidden="true" href="#citation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Citation</h2>
<p dir="auto">If you use this software and need to cite it, please use the following reference:</p>
<p dir="auto">L. Martínez, <em>CellListMap.jl: Efficient and customizable cell list implementation for calculation of pairwise particle properties within a cutoff.</em> Computer Physics Communications, 279, 108452, 2022. <a href="https://doi.org/10.1016/j.cpc.2022.108452" rel="nofollow">https://doi.org/10.1016/j.cpc.2022.108452</a></p>
<p dir="auto"><a href="https://github.com/m3g/CellListMap.jl/actions"><img src="https://camo.githubusercontent.com/a3c11e90b199e4d91b21617cbf3fb1c877929af12c5c8af200c2cda007a141b8/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6275696c642d70617373696e672d677265656e" alt="Tests" data-canonical-src="https://img.shields.io/badge/build-passing-green" style="max-width: 100%;"></a>
<a href="https://pkgs.genieframework.com?packages=CellListMap" rel="nofollow"><img src="https://camo.githubusercontent.com/94b09046d3785fe2038d92f58a656804dedb77f178ad74daccd80d4873b71a73/68747470733a2f2f736869656c64732e696f2f656e64706f696e743f75726c3d68747470733a2f2f706b67732e67656e69656672616d65776f726b2e636f6d2f6170692f76312f62616467652f43656c6c4c6973744d6170" alt="CellListMap Downloads" data-canonical-src="https://shields.io/endpoint?url=https://pkgs.genieframework.com/api/v1/badge/CellListMap" style="max-width: 100%;"></a></p>
</article></div>