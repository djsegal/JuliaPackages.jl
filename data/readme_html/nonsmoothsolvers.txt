<div id="readme" class="org" data-path="readme.org"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-nonsmoothsolversjl" class="anchor" aria-hidden="true" href="#nonsmoothsolversjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>NonSmoothSolvers.jl</h1>
<p dir="auto"><a href="https://GillesBareilles.github.io/NonSmoothSolvers.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="https://img.shields.io/badge/docs-stable-blue.svg" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
  <a href="https://GillesBareilles.github.io/NonSmoothSolvers.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="https://img.shields.io/badge/docs-dev-blue.svg" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
  <a href="https://github.com/GillesBareilles/NonSmoothSolvers.jl/actions/workflows/CI.yml?query=branch%3Amaster"><img src="https://github.com/GillesBareilles/NonSmoothSolvers.jl/actions/workflows/CI.yml/badge.svg?branch=master" alt="https://github.com/GillesBareilles/NonSmoothSolvers.jl/actions/workflows/CI.yml/badge.svg?branch=master" style="max-width: 100%;"></a>
  <a href="https://codecov.io/gh/GillesBareilles/NonSmoothSolvers.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/b42c4b7b7dd5c1be082e85ccf5d5bfd7cde496919ea78b42bb257be37d29ca66/68747470733a2f2f636f6465636f762e696f2f67682f47696c6c657342617265696c6c65732f4e6f6e536d6f6f7468536f6c766572732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="https://codecov.io/gh/GillesBareilles/NonSmoothSolvers.jl/branch/master/graph/badge.svg" data-canonical-src="https://codecov.io/gh/GillesBareilles/NonSmoothSolvers.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a>
  <a href="https://github.com/invenia/BlueStyle"><img src="https://camo.githubusercontent.com/c18fbaa52d94d16b90b19701fc90d289b8a5bb920c74c79bab200b14e75420a4/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c75652d3434393564312e737667" alt="https://img.shields.io/badge/code%20style-blue-4495d1.svg" data-canonical-src="https://img.shields.io/badge/code%20style-blue-4495d1.svg" style="max-width: 100%;"></a></p>
<p dir="auto">This package implements algorithms for nonsmooth optimization.
  The implementations follow closely the related papers, tuning parameters is advisable to get the best of the methods.
  Comments and suggestions are more than welcome, get in touch via mail or an issue!</p>
<p dir="auto"><b>Setup</b> is as follows: in a julia REPL (default environment):</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Pkg
Pkg.update()
Pkg.Registry.add(RegistrySpec(url = &quot;https://github.com/GillesBareilles/OptimRegistry.jl&quot;))
Pkg.add(&quot;NonSmoothSolvers&quot;)"><pre><span class="pl-k">using</span> Pkg
Pkg<span class="pl-k">.</span><span class="pl-c1">update</span>()
Pkg<span class="pl-k">.</span>Registry<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-c1">RegistrySpec</span>(url <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>https://github.com/GillesBareilles/OptimRegistry.jl<span class="pl-pds">"</span></span>))
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>NonSmoothSolvers<span class="pl-pds">"</span></span>)</pre></div>
<h1 dir="auto"><a id="user-content-solvers" class="anchor" aria-hidden="true" href="#solvers"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Solvers</h1>
<p dir="auto">The generic solvers implemented are:</p>
<ul dir="auto">
  <li>Nonsmooth BFGS
    <blockquote>
      <p dir="auto"><b>Nonsmooth optimization via quasi-Newton methods</b>, Adrian S. Lewis, Michael L. Overton, 2012</p>
    </blockquote>
  </li>
  <li>VU bundle
    <blockquote>
      <p dir="auto"><b>A VU-algorithm for Convex Minimization</b>, R. Mifflin &amp; C. Sagastizábal, Mathematical Programming, 2005</p>
    </blockquote>
  </li>
  <li>Gradient Sampling
    <blockquote>
      <p dir="auto"><b>Gradient Sampling Methods for Nonsmooth Optimization</b>, J.V. Burke, F.E. Curtis, A.S. Lewis, M.L. Overton, L.E.A. Sims, 2018.</p>
    </blockquote>
  </li>
</ul>
<h1 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h1>
<h2 dir="auto"><a id="user-content-defining-a-problem" class="anchor" aria-hidden="true" href="#defining-a-problem"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Defining a problem</h2>
<p dir="auto">A general nonsmooth optimization problem may be implemented following <a href="https://github.com/GillesBareilles/NonSmoothProblems.jl">~NonSmoothProblems.jl~</a>’ interface:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using NonSmoothProblems
using NonSmoothSolvers

struct Simplel1 &lt;: NonSmoothProblems.NonSmoothPb end

F(::Simplel1, x) = norm(x, 1)
∂F_elt(::Simplel1, x) = sign.(x)
is_differentiable(::Simplel1, x) = length(filter(xᵢ -&gt; xᵢ == 0, x)) &gt; 0"><pre><span class="pl-k">using</span> NonSmoothProblems
<span class="pl-k">using</span> NonSmoothSolvers

<span class="pl-k">struct</span> Simplel1 <span class="pl-k">&lt;:</span> <span class="pl-c1">NonSmoothProblems.NonSmoothPb</span> <span class="pl-k">end</span>

<span class="pl-en">F</span>(<span class="pl-k">::</span><span class="pl-c1">Simplel1</span>, x) <span class="pl-k">=</span> <span class="pl-c1">norm</span>(x, <span class="pl-c1">1</span>)
<span class="pl-en">∂F_elt</span>(<span class="pl-k">::</span><span class="pl-c1">Simplel1</span>, x) <span class="pl-k">=</span> <span class="pl-c1">sign</span>.(x)
<span class="pl-en">is_differentiable</span>(<span class="pl-k">::</span><span class="pl-c1">Simplel1</span>, x) <span class="pl-k">=</span> <span class="pl-c1">length</span>(<span class="pl-c1">filter</span>(xᵢ <span class="pl-k">-&gt;</span> xᵢ <span class="pl-k">==</span> <span class="pl-c1">0</span>, x)) <span class="pl-k">&gt;</span> <span class="pl-c1">0</span></pre></div>
<p dir="auto">Note that <a href="https://github.com/GillesBareilles/NonSmoothProblems.jl">~NonSmoothProblems.jl~</a> implements some nonsmooth problems (maximum of quadratics, maximum eigenvalue).</p>
<h2 dir="auto"><a id="user-content-running-a-solver" class="anchor" aria-hidden="true" href="#running-a-solver"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Running a solver</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="n = 10
pb = Simplel1()
x = rand(n)
optparams = OptimizerParams(iterations_limit=20, trace_length=20)

o = GradientSampling(x)
xfinal_gs, tr = optimize!(pb, o, x; optparams)

o = NSBFGS()
xfinal_nsbfgs, tr = optimize!(pb, o, x; optparams)

o = VUbundle()
xfinal_vu, tr = optimize!(pb, o, x; optparams)"><pre>n <span class="pl-k">=</span> <span class="pl-c1">10</span>
pb <span class="pl-k">=</span> <span class="pl-c1">Simplel1</span>()
x <span class="pl-k">=</span> <span class="pl-c1">rand</span>(n)
optparams <span class="pl-k">=</span> <span class="pl-c1">OptimizerParams</span>(iterations_limit<span class="pl-k">=</span><span class="pl-c1">20</span>, trace_length<span class="pl-k">=</span><span class="pl-c1">20</span>)

o <span class="pl-k">=</span> <span class="pl-c1">GradientSampling</span>(x)
xfinal_gs, tr <span class="pl-k">=</span> <span class="pl-c1">optimize!</span>(pb, o, x; optparams)

o <span class="pl-k">=</span> <span class="pl-c1">NSBFGS</span>()
xfinal_nsbfgs, tr <span class="pl-k">=</span> <span class="pl-c1">optimize!</span>(pb, o, x; optparams)

o <span class="pl-k">=</span> <span class="pl-c1">VUbundle</span>()
xfinal_vu, tr <span class="pl-k">=</span> <span class="pl-c1">optimize!</span>(pb, o, x; optparams)</pre></div>
<p dir="auto">Other problems:</p>
<ul dir="auto">
  <li>the historical <i>MaxQuad</i>, <i>Numerical  Optimisation</i>, BGLS, p. 153 (2nd edition):</li>
</ul>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="pb = MaxQuadBGLS()
x = zeros(10) .+ 1"><pre>pb <span class="pl-k">=</span> <span class="pl-c1">MaxQuadBGLS</span>()
x <span class="pl-k">=</span> <span class="pl-c1">zeros</span>(<span class="pl-c1">10</span>) <span class="pl-k">.+</span> <span class="pl-c1">1</span></pre></div>
<ul dir="auto">
  <li>a maximum of two quadratics:</li>
</ul>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="pb = MaxQuadAL()
x = zeros(2) .+ 1"><pre>pb <span class="pl-k">=</span> <span class="pl-c1">MaxQuadAL</span>()
x <span class="pl-k">=</span> <span class="pl-c1">zeros</span>(<span class="pl-c1">2</span>) <span class="pl-k">.+</span> <span class="pl-c1">1</span></pre></div>
<h2 dir="auto"><a id="user-content-input-parameters-output-values" class="anchor" aria-hidden="true" href="#input-parameters-output-values"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Input parameters, output values</h2>
<p dir="auto">The <code>optimize!</code> function accepts:</p>
<ul dir="auto">
  <li>several convergence checkers, possibly defined by the user;</li>
  <li>several policies of data recording and displaying along iterations;</li>
</ul>
<p dir="auto">The output is the (final) point generated by the optimization procedure, and a trace object. This object is a vector of <code>OptimizationState</code>, an immutable object which holds relevant indicators values at the end of an iteration, such as <code>it</code>, <code>time</code>, <code>F_x</code>, <code>norm_step</code>. The user can add his custom indicators by passing a callback function to <code>optimize!</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="getx(optimizer, optimizerstate) = deepcopy(os.x)
optimstate_extensions = OrderedDict{Symbol, Function}(:x =&gt; getx)

o = NSBFGS()
xfinal_nsbfgs, tr = optimize!(pb, o, x; optparams, optimstate_extensions)"><pre><span class="pl-en">getx</span>(optimizer, optimizerstate) <span class="pl-k">=</span> <span class="pl-c1">deepcopy</span>(os<span class="pl-k">.</span>x)
optimstate_extensions <span class="pl-k">=</span> <span class="pl-c1">OrderedDict</span><span class="pl-c1">{Symbol, Function}</span>(<span class="pl-c1">:x</span> <span class="pl-k">=&gt;</span> getx)

o <span class="pl-k">=</span> <span class="pl-c1">NSBFGS</span>()
xfinal_nsbfgs, tr <span class="pl-k">=</span> <span class="pl-c1">optimize!</span>(pb, o, x; optparams, optimstate_extensions)</pre></div>
<h2 dir="auto"><a id="user-content-notes" class="anchor" aria-hidden="true" href="#notes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Notes</h2>
<p dir="auto">Method calls may be (roughly) timed using <code>TimerOutputs</code>. This functionality is turned on/off by calling <code>TimerOutputs.enable_debug_timings(NonSmoothProblems)</code> and <code>TimerOutputs.disable_debug_timings(NonSmoothProblems)</code>.</p>
<h3 dir="auto"><a id="user-content-efficiency-of-nsbfgs" class="anchor" aria-hidden="true" href="#efficiency-of-nsbfgs"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Efficiency of nsBFGS</h3>
<p dir="auto">Profiling of the nsBFGS shows that more than 90% of the time is spent in the line search, calling oracles `F`, `∂F_elt` and `is_differentiable`.</p>
<p dir="auto">In some cases it faster to compute all these at once rather than separately.
  “`julia
  using NonSmoothProblems, NonSmoothSolvers, StatProfilerHTML
  pb = MaxQuadBGLS(Float64)
  o = NSBFGS{Float64}()
  function toto(n)
  for i = 1:n
  state=NSS.initial_state(o, ones(10), pb)
  NSS.update_iterate!(state, o, pb)
  end
  end
  toto(1); @profilehtml toto(10000)
  “`</p>
<h3 dir="auto"><a id="user-content-efficiency-of-gradient-sampling" class="anchor" aria-hidden="true" href="#efficiency-of-gradient-sampling"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Efficiency of gradient sampling</h3>
<p dir="auto">Same method as above, with `o = GradientSampling(x)`.</p>
<p dir="auto">Most of the time is spent with the resolution of the QP.</p>
<h1 dir="auto"><a id="user-content-notes-1" class="anchor" aria-hidden="true" href="#notes-1"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Notes</h1>
<p dir="auto">This is a work in progress. In particular, there may be bugs in algorithms, and the todo list is:</p>
<ul dir="auto">
  <li>[ ] list features of <code>optimize!</code>;</li>
</ul>
</article></div>