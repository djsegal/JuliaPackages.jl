<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-objectstores" class="anchor" aria-hidden="true" href="#objectstores"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>ObjectStores</h1>
<p dir="auto">This package defines an abstract type, <code>ObjectStore</code>, and a common API for accessing object storage.
This allows you to swap storage back-ends without changing your code.</p>
<p dir="auto">Storage back-ends include in-memory, local disk and cloud-based object storage.</p>
<h1 dir="auto"><a id="user-content-what-is-an-object-store" class="anchor" aria-hidden="true" href="#what-is-an-object-store"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>What is an object store?</h1>
<p dir="auto">In an object store, data is stored as objects and objects are grouped into buckets.</p>
<p dir="auto">Concrete examples of object stores include:</p>
<ul dir="auto">
<li><a href="https://github.com/JockLawrie/LocalDiskObjectStores.jl">LocalDiskObjectStores.jl</a>, which uses the local file system to store objects (files) in buckets (directories).</li>
<li><a href="https://github.com/JockLawrie/GoogleCloudObjectStores.jl">GoogleCloudObjectStores.jl</a>, which uses Google Cloud Storage.</li>
</ul>
<h1 dir="auto"><a id="user-content-permissions" class="anchor" aria-hidden="true" href="#permissions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Permissions</h1>
<p dir="auto">An object store's access to buckets and objects is controlled using the small but flexible <a href="https://github.com/JockLawrie/Authorization.jl">Authorization.jl</a> framework.
This framework allows both fine-grained access control for specific buckets and objects, as well as more coarse access control such as uniform access for all buckets and/or objects. Please read the <a href="https://github.com/JockLawrie/Authorization.jl">README</a> to understand how to access buckets and objects can be controlled.</p>
<p dir="auto"><strong>NOTE:</strong> An <code>ObjectStore</code> cannot act on (create/read/delete) buckets or objects that are outside the root bucket.</p>
<h1 dir="auto"><a id="user-content-example-usage" class="anchor" aria-hidden="true" href="#example-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example Usage</h1>
<p dir="auto">See the examples and tests in <a href="https://github.com/JockLawrie/LocalDiskObjectStores.jl">LocalDiskObjectStores.jl</a> and <a href="https://github.com/JockLawrie/GoogleCloudObjectStores.jl">GoogleCloudObjectStores.jl</a>, which uses the local file system as the storage back-end.</p>
<h1 dir="auto"><a id="user-content-api" class="anchor" aria-hidden="true" href="#api"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>API</h1>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="store = T(args...)  # Constructor for some T &lt;: ObjectStore

# Set access permissions
setpermission!(store, :bucket, Permission(false, true, false, false))  # Bucket access is cRud (read-only) without expiry
setpermission!(store, :object, Permission(false, true, false, false))  # Object access is cRud (read-only) without expiry

# Allow CRUD (read/write) access for 5 minutes to objects in the bucket called &quot;mybucket&quot;
setpermission!(store, r&quot;^rootbucket/mybucket/.+&quot;, Permission(true, true, true, true, now() + Minute(5)))

# Buckets
createbucket!(store, &quot;mybucket&quot;)  # Create mybucket in the root bucket
listcontents(store,  &quot;mybucket&quot;)  # List the contents of rootbucket/mybucket. Return nothing if it doesn't exist
deletebucket!(store, &quot;mybucket&quot;)  # Delete rootbucket/mybucket if it exists

# Objects
store[&quot;mybucket/myobject&quot;] = value     # Create/update. Not possible if the bucket doesn't exist.
store[&quot;mybucket/myobject&quot;]             # Read. Returns nothing if the object doesn't exist.
delete!(store, &quot;mybucket/myobject&quot;)

# Conveniences
isbucket(store,  bucketname)  # True if bucketname refers to a bucket
isobject(store,  objectname)  # True if objectname refers to an object

# Permission queries
p = getpermission(store, bucket_or_object)  # Get the permission settings for the specific bucket/object
setexpiry!(store, now() + Hour(1))          # Set an expiry for all the buckets/objects that the store has access to

haspermission(store, bucket_or_object, :create)  # True if the store has :create access to the bucket/object
permissions_conflict(store, &quot;mybucket&quot;)          # True if the rules that define the store's access to &quot;mybucket&quot; conflict"><pre>store <span class="pl-k">=</span> <span class="pl-c1">T</span>(args<span class="pl-k">...</span>)  <span class="pl-c"><span class="pl-c">#</span> Constructor for some T &lt;: ObjectStore</span>

<span class="pl-c"><span class="pl-c">#</span> Set access permissions</span>
<span class="pl-c1">setpermission!</span>(store, <span class="pl-c1">:bucket</span>, <span class="pl-c1">Permission</span>(<span class="pl-c1">false</span>, <span class="pl-c1">true</span>, <span class="pl-c1">false</span>, <span class="pl-c1">false</span>))  <span class="pl-c"><span class="pl-c">#</span> Bucket access is cRud (read-only) without expiry</span>
<span class="pl-c1">setpermission!</span>(store, <span class="pl-c1">:object</span>, <span class="pl-c1">Permission</span>(<span class="pl-c1">false</span>, <span class="pl-c1">true</span>, <span class="pl-c1">false</span>, <span class="pl-c1">false</span>))  <span class="pl-c"><span class="pl-c">#</span> Object access is cRud (read-only) without expiry</span>

<span class="pl-c"><span class="pl-c">#</span> Allow CRUD (read/write) access for 5 minutes to objects in the bucket called "mybucket"</span>
<span class="pl-c1">setpermission!</span>(store, <span class="pl-sr"><span class="pl-pds">r"</span>^rootbucket/mybucket/.+<span class="pl-pds">"</span></span>, <span class="pl-c1">Permission</span>(<span class="pl-c1">true</span>, <span class="pl-c1">true</span>, <span class="pl-c1">true</span>, <span class="pl-c1">true</span>, <span class="pl-c1">now</span>() <span class="pl-k">+</span> <span class="pl-c1">Minute</span>(<span class="pl-c1">5</span>)))

<span class="pl-c"><span class="pl-c">#</span> Buckets</span>
<span class="pl-c1">createbucket!</span>(store, <span class="pl-s"><span class="pl-pds">"</span>mybucket<span class="pl-pds">"</span></span>)  <span class="pl-c"><span class="pl-c">#</span> Create mybucket in the root bucket</span>
<span class="pl-c1">listcontents</span>(store,  <span class="pl-s"><span class="pl-pds">"</span>mybucket<span class="pl-pds">"</span></span>)  <span class="pl-c"><span class="pl-c">#</span> List the contents of rootbucket/mybucket. Return nothing if it doesn't exist</span>
<span class="pl-c1">deletebucket!</span>(store, <span class="pl-s"><span class="pl-pds">"</span>mybucket<span class="pl-pds">"</span></span>)  <span class="pl-c"><span class="pl-c">#</span> Delete rootbucket/mybucket if it exists</span>

<span class="pl-c"><span class="pl-c">#</span> Objects</span>
store[<span class="pl-s"><span class="pl-pds">"</span>mybucket/myobject<span class="pl-pds">"</span></span>] <span class="pl-k">=</span> value     <span class="pl-c"><span class="pl-c">#</span> Create/update. Not possible if the bucket doesn't exist.</span>
store[<span class="pl-s"><span class="pl-pds">"</span>mybucket/myobject<span class="pl-pds">"</span></span>]             <span class="pl-c"><span class="pl-c">#</span> Read. Returns nothing if the object doesn't exist.</span>
<span class="pl-c1">delete!</span>(store, <span class="pl-s"><span class="pl-pds">"</span>mybucket/myobject<span class="pl-pds">"</span></span>)

<span class="pl-c"><span class="pl-c">#</span> Conveniences</span>
<span class="pl-c1">isbucket</span>(store,  bucketname)  <span class="pl-c"><span class="pl-c">#</span> True if bucketname refers to a bucket</span>
<span class="pl-c1">isobject</span>(store,  objectname)  <span class="pl-c"><span class="pl-c">#</span> True if objectname refers to an object</span>

<span class="pl-c"><span class="pl-c">#</span> Permission queries</span>
p <span class="pl-k">=</span> <span class="pl-c1">getpermission</span>(store, bucket_or_object)  <span class="pl-c"><span class="pl-c">#</span> Get the permission settings for the specific bucket/object</span>
<span class="pl-c1">setexpiry!</span>(store, <span class="pl-c1">now</span>() <span class="pl-k">+</span> <span class="pl-c1">Hour</span>(<span class="pl-c1">1</span>))          <span class="pl-c"><span class="pl-c">#</span> Set an expiry for all the buckets/objects that the store has access to</span>

<span class="pl-c1">haspermission</span>(store, bucket_or_object, <span class="pl-c1">:create</span>)  <span class="pl-c"><span class="pl-c">#</span> True if the store has :create access to the bucket/object</span>
<span class="pl-c1">permissions_conflict</span>(store, <span class="pl-s"><span class="pl-pds">"</span>mybucket<span class="pl-pds">"</span></span>)          <span class="pl-c"><span class="pl-c">#</span> True if the rules that define the store's access to "mybucket" conflict</span></pre></div>
</article></div>