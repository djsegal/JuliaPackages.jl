<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-spiderjl" class="anchor" aria-hidden="true" href="#spiderjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Spider.jl</h1>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/emstoudenmire/Spider.jl/workflows/Tests/badge.svg"><img src="https://github.com/emstoudenmire/Spider.jl/workflows/Tests/badge.svg" alt="Tests" style="max-width: 100%;"></a></p>
<p dir="auto">Spider is a static website generator written in Julia that requires minimal setup,
essentially no fixed conventions (e.g. no required directory structure), and is highly
extensible.</p>
<p dir="auto">By default, all Spider does is walk the directory tree of a specified source directory,
converting any Markdown (.md) files into html, and putting the resulting .html files
into the same directory tree but underneath a specified output directory.
Any other files not having the .md extension are copied over unchanged.</p>
<h2 dir="auto"><a id="user-content-plugins" class="anchor" aria-hidden="true" href="#plugins"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Plugins</h2>
<p dir="auto">Spider allows development of plugins which have a wide latitude in terms of how they
work. A plugin is any Julia type <code>P</code> which overloads one or both of the following functions:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="process_source!(P,
                source::AbstractString,
                fileinfo::FileInfo;
                args...)::String
 
process_html(P,
             html::AbstractString,
             fileinfo::FileInfo;
             args...)::String"><pre class="notranslate"><code>process_source!(P,
                source::AbstractString,
                fileinfo::FileInfo;
                args...)::String
 
process_html(P,
             html::AbstractString,
             fileinfo::FileInfo;
             args...)::String
</code></pre></div>
<p dir="auto">The <code>process_source!</code> function is run first for each plugin in the order provided to the
<code>run_spider</code> function. It is passed the plugin object <code>P</code>, the contents of the source file
as a string <code>source</code>, and a <code>FileInfo = Dict{String,String}</code> dictionary with useful information
about the file currently being processed.</p>
<p dir="auto">After <code>process_source!</code> is called for each plugin, the<code>process_html</code> function is
run for each plugin. It is passed the plugin object <code>P</code>, the contents of the html file
resulting from parsing the source file, and a <code>FileInfo = Dict{String,String}</code> dictionary
with useful information about the file currently being processed.</p>
</article></div>