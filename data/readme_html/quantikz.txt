<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-quantikzjl" class="anchor" aria-hidden="true" href="#quantikzjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Quantikz.jl</h1>
<p><a href="https://krastanov.github.io/Quantikz/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Documentation of latest stable version" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://krastanov.github.io/Quantikz/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Documentation of dev version" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a>
<a href="https://github.com/Krastanov/Quantikz/actions?query=workflow%3ACI+branch%3Amain"><img src="https://camo.githubusercontent.com/6a3951d28f545833c82e957c15d7fc9420cbc147fd9cf4328db18dfcf79775c6/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f776f726b666c6f772f7374617475732f4b72617374616e6f762f5175616e74696b7a2f4349" alt="GitHub Workflow Status" data-canonical-src="https://img.shields.io/github/workflow/status/Krastanov/Quantikz/CI" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/Krastanov/Quantikz" rel="nofollow"><img src="https://camo.githubusercontent.com/bbc79c3bc6916c39c2b2d3dcdbf351f185cc00f28c7e0e2d1b8a15f91453d5d1/68747470733a2f2f696d672e736869656c64732e696f2f636f6465636f762f632f67682f4b72617374616e6f762f5175616e74696b7a3f6c6162656c3d636f6465636f76" alt="Test coverage from codecov" data-canonical-src="https://img.shields.io/codecov/c/gh/Krastanov/Quantikz?label=codecov" style="max-width:100%;"></a></p>
<p><a href="https://quantikz.krastanov.org/" rel="nofollow"><img src="https://camo.githubusercontent.com/d027b370a3818bf451cf411e90cc6095d40f33397de99246d98c645d48e508ca/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c69766525323064656d6f2d72656e6465722532306369726375697473253230696e253230796f757225323062726f777365722d626c756576696f6c6574" alt="Live demo" data-canonical-src="https://img.shields.io/badge/live%20demo-render%20circuits%20in%20your%20browser-blueviolet" style="max-width:100%;"></a></p>
<p>A minimal package for drawing quantum circuits using the <code>quantikz</code> and <code>tikz</code> TeX libraries.</p>
<p>To install it use:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="] add Quantikz
"><pre>] add Quantikz</pre></div>
<p>The library can generate <code>tex</code>, <code>pdf</code>, and <code>png</code> files, as well as live previews. It does not require anything to be installed on your system (the <code>tex</code> and image manipulation dependencies are handled by Julia, with <code>Tectonic.jl</code> and <code>FileIO.jl</code>). If you want to generate another image type, simply use <code>FileIO</code>.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="circuit = [CNOT(1,2),Measurement(2)]
displaycircuit(circuit) # you can set a scale parameter
"><pre>circuit <span class="pl-k">=</span> [<span class="pl-c1">CNOT</span>(<span class="pl-c1">1</span>,<span class="pl-c1">2</span>),<span class="pl-c1">Measurement</span>(<span class="pl-c1">2</span>)]
<span class="pl-c1">displaycircuit</span>(circuit) <span class="pl-c"><span class="pl-c">#</span> you can set a scale parameter</span></pre></div>
<p>To save a png/pdf file:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="savecircuit(circuit, &quot;file.png&quot;) # you can set a scale parameter
savecircuit(circuit, &quot;file.pdf&quot;)
"><pre><span class="pl-c1">savecircuit</span>(circuit, <span class="pl-s"><span class="pl-pds">"</span>file.png<span class="pl-pds">"</span></span>) <span class="pl-c"><span class="pl-c">#</span> you can set a scale parameter</span>
<span class="pl-c1">savecircuit</span>(circuit, <span class="pl-s"><span class="pl-pds">"</span>file.pdf<span class="pl-pds">"</span></span>)</pre></div>
<p>You can view the corresponding TeX string or save it to file with:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="circuit2string(circuit)
savetex(circuit, &quot;file.tex&quot;)
"><pre><span class="pl-c1">circuit2string</span>(circuit)
<span class="pl-c1">savetex</span>(circuit, <span class="pl-s"><span class="pl-pds">"</span>file.tex<span class="pl-pds">"</span></span>)</pre></div>
<h2><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="circuit = [
    CNOT(1,2), CPHASE(2,3), SWAP(3,4),
    H(5), P(6), Id(7),
    U(&quot;\\frac{\\phi}{4}&quot;,8),
    Measurement(&quot;X&quot;,1), Measurement([2,3],2), ClassicalDecision(&quot;U&quot;,[3,5],2),
    Measurement(&quot;M&quot;,[5,6],1),
    MultiControlU(&quot;G&quot;,[2,8],[7,3],[4,5,6])]
"><pre>circuit <span class="pl-k">=</span> [
    <span class="pl-c1">CNOT</span>(<span class="pl-c1">1</span>,<span class="pl-c1">2</span>), <span class="pl-c1">CPHASE</span>(<span class="pl-c1">2</span>,<span class="pl-c1">3</span>), <span class="pl-c1">SWAP</span>(<span class="pl-c1">3</span>,<span class="pl-c1">4</span>),
    <span class="pl-c1">H</span>(<span class="pl-c1">5</span>), <span class="pl-c1">P</span>(<span class="pl-c1">6</span>), <span class="pl-c1">Id</span>(<span class="pl-c1">7</span>),
    <span class="pl-c1">U</span>(<span class="pl-s"><span class="pl-pds">"</span><span class="pl-cce">\\</span>frac{<span class="pl-cce">\\</span>phi}{4}<span class="pl-pds">"</span></span>,<span class="pl-c1">8</span>),
    <span class="pl-c1">Measurement</span>(<span class="pl-s"><span class="pl-pds">"</span>X<span class="pl-pds">"</span></span>,<span class="pl-c1">1</span>), <span class="pl-c1">Measurement</span>([<span class="pl-c1">2</span>,<span class="pl-c1">3</span>],<span class="pl-c1">2</span>), <span class="pl-c1">ClassicalDecision</span>(<span class="pl-s"><span class="pl-pds">"</span>U<span class="pl-pds">"</span></span>,[<span class="pl-c1">3</span>,<span class="pl-c1">5</span>],<span class="pl-c1">2</span>),
    <span class="pl-c1">Measurement</span>(<span class="pl-s"><span class="pl-pds">"</span>M<span class="pl-pds">"</span></span>,[<span class="pl-c1">5</span>,<span class="pl-c1">6</span>],<span class="pl-c1">1</span>),
    <span class="pl-c1">MultiControlU</span>(<span class="pl-s"><span class="pl-pds">"</span>G<span class="pl-pds">"</span></span>,[<span class="pl-c1">2</span>,<span class="pl-c1">8</span>],[<span class="pl-c1">7</span>,<span class="pl-c1">3</span>],[<span class="pl-c1">4</span>,<span class="pl-c1">5</span>,<span class="pl-c1">6</span>])]</pre></div>
<p>In standard mode:
<a target="_blank" rel="noopener noreferrer" href="./docs/src/example_compact.png"><img src="./docs/src/example_compact.png" alt="" style="max-width:100%;"></a></p>
<p>And expanded for easier identification:
<a target="_blank" rel="noopener noreferrer" href="./docs/src/example.png"><img src="./docs/src/example.png" alt="" style="max-width:100%;"></a></p>
<h2><a id="user-content-built-in-quantum-circuit-operations" class="anchor" aria-hidden="true" href="#built-in-quantum-circuit-operations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Built-in quantum circuit operations</h2>
<p><code>CNOT</code>, <code>CPHASE</code>, <code>SWAP</code>, <code>H</code>, <code>P</code>, <code>Id</code>, a generic single qubit gate <code>U</code>, a generic measurement <code>Measurement</code>, a classically conditioned gate <code>ClassicalDecision</code>, and a parity check measurement <code>ParityMeasurement</code>.</p>
<p>The general purpose <code>MultiControl(controls, ocontrols, targets, targetXs)</code> can be used to create an arbitrary combination of muticontrol multiqubit gates. Each argument lists the indices of qubits that should get a certain symbol: <code>controls</code> is filled circles, <code>ocontrols</code> is empty circles, <code>targets</code> is the NOT symbol, and <code>targetXs</code> is the X symbols.</p>
<p>For named controled gates use <code>MultiControlU(str, controls, ocontrols, targets)</code>.</p>
<p>For noise events, you can use <code>Noise(targets)</code> or <code>NoiseAll()</code>.</p>
<p>For examples of these operations, see the <a href="https://github.com/Krastanov/Quantikz/blob/main/Quantikz.ipynb">attached notebook</a>.</p>
<h2><a id="user-content-custom-objects" class="anchor" aria-hidden="true" href="#custom-objects"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Custom objects</h2>
<p>For your <code>CustomQuantumOperation</code> simply define a <code>QuantikzOp(op::CustomQuantumOperation)</code> that converts your object to one of the built-in objects.</p>
<p>If you need more freedom for your custom quantum operation, simply define:</p>
<ul>
<li><code>update_table!(table,step,op::CustomQuantumOperation)</code> that directly modifies the <code>quantikz</code> table</li>
<li><code>affectedqubits(op::CustomQuantumOperation)</code> that gives the indices of qubits involved in the operation.</li>
<li>(optional) <code>affectedbits(op)</code> that gives the indices of classical bits in use (empty by default)</li>
<li>(optional) <code>neededancillaries(op)</code> that gives the number of temporary ancillary qubits to reserve (0 by default)</li>
<li>(optional) <code>nsteps(op)</code> that gives the number of steps involved in the gate (1 by default)</li>
<li>(optional) <code>deleteoutputs(op)</code> that gives which qubits to be deleted, e.g., their lines removed (empty by default)</li>
</ul>
<p>Instead of returning an array of indices <code>affectedqubits</code> can also return the lazy slice <code>ibegin:iend</code> (from <code>EndpointRanges.jl</code>) which tells the layout engine that all qubits are used in this stage of the circuit.</p>
<p>Internally, this library converts the array of circuit operations to a 2D array of <code>quantikz</code> macros which is then converted to a single TeX string, which is then compiled with a call to <code>Tectonic.jl</code>.</p>
<h2><a id="user-content-under-the-hood" class="anchor" aria-hidden="true" href="#under-the-hood"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Under the hood</h2>
<p>If you need some of the more advanced features of the <code>quantikz</code> TeX macros that are not implemented here yet, you can edit the string directly, or more conveniently, you can generate the 2D array of macros that makes up the string:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt; circuit2table([CNOT(1,2),CNOT(2,3)])
3×4 Array{String,2}:
 &quot;\\qw&quot;  &quot;\\ctrl{1}&quot;  &quot;\\qw&quot;       &quot;\\qw&quot;
 &quot;\\qw&quot;  &quot;\\targ{}&quot;   &quot;\\ctrl{1}&quot;  &quot;\\qw&quot;
 &quot;\\qw&quot;  &quot;\\qw&quot;       &quot;\\targ{}&quot;   &quot;\\qw&quot;
"><pre><code>julia&gt; circuit2table([CNOT(1,2),CNOT(2,3)])
3×4 Array{String,2}:
 "\\qw"  "\\ctrl{1}"  "\\qw"       "\\qw"
 "\\qw"  "\\targ{}"   "\\ctrl{1}"  "\\qw"
 "\\qw"  "\\qw"       "\\targ{}"   "\\qw"
</code></pre></div>
<p><code>table2string</code> (and <code>string2image</code>) can be used for the final conversion.</p>
<h3><a id="user-content-latex-free-alternatives" class="anchor" aria-hidden="true" href="#latex-free-alternatives"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>LaTeX-free alternatives</h3>
<p>An alternative is the <a href="https://github.com/QuantumBFS/YaoPlots.jl"><code>YaoPlots.jl</code></a> which can draw directly from Julia (does not shell out to ImageMagick and Ghostscript). <code>YaoPlots.jl</code> however does not support LaTeX.</p>
</article></div>