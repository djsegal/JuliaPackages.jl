<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-cacheddicts" class="anchor" aria-hidden="true" href="#cacheddicts"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>CachedDicts</h1>
<p dir="auto"><a href="https://jw3126.github.io/CachedDicts.jl/stable/" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://jw3126.github.io/CachedDicts.jl/dev/" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/jw3126/CachedDicts.jl/actions/workflows/CI.yml?query=branch%3Amain"><img src="https://github.com/jw3126/CachedDicts.jl/actions/workflows/CI.yml/badge.svg?branch=main" alt="Build Status" style="max-width: 100%;"></a></p>
<p dir="auto">Attach a cache to your <code>AbstractDict</code>.</p>
<h1 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h1>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using CachedDicts
d = CachedDicts(cache, storage)::AbstractDict"><pre><span class="pl-k">using</span> CachedDicts
d <span class="pl-k">=</span> <span class="pl-c1">CachedDicts</span>(cache, storage)<span class="pl-k">::</span><span class="pl-c1">AbstractDict</span></pre></div>
<p dir="auto">Here <code>cache</code> and <code>storage</code> can be arbitrary <code>AbstractDict{K,V}</code>.
Where reading from <code>storage</code> is slow (e.g. disk lookup) and reading from <code>cache</code> is fast.</p>
<h1 dir="auto"><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example</h1>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using CachedDicts
using LRUCache

mutable struct SlowDict &lt;: AbstractDict{String, Int}
    dict::Dict{String,Int}
    nslow_calls::Int
end
SlowDict() = SlowDict(Dict{String,Int}(), 0)
for f in [:length, :get, :setindex!, :iterate, :delete!, :empty!]
    @eval (Base.$f)(d::SlowDict, args...) = $(f)(d.dict, args...)
end
function Base.getindex(o::SlowDict, key)
    # slow
    sleep(1e-2)
    o.nslow_calls += 1
    o.dict[key]
end

d_slow = SlowDict()
d_slow[&quot;1&quot;] = 1
d_slow[&quot;2&quot;] = 2

d_slow[&quot;1&quot;]
@assert d_slow.nslow_calls == 1
d_slow[&quot;1&quot;]
@assert d_slow.nslow_calls == 2
d_slow[&quot;1&quot;]
@assert d_slow.nslow_calls == 3

cache = LRU{String,Int}(maxsize=2)
d = CachedDict(cache, d_slow)
@assert d_slow.nslow_calls == 3
d[&quot;1&quot;]
# subsequent calls are cached
@assert d_slow.nslow_calls == 4
d[&quot;1&quot;]
@assert d_slow.nslow_calls == 4
d[&quot;1&quot;]
@assert d_slow.nslow_calls == 4"><pre><span class="pl-k">using</span> CachedDicts
<span class="pl-k">using</span> LRUCache

<span class="pl-k">mutable struct</span> SlowDict <span class="pl-k">&lt;:</span> <span class="pl-c1">AbstractDict{String, Int}</span>
    dict<span class="pl-k">::</span><span class="pl-c1">Dict{String,Int}</span>
    nslow_calls<span class="pl-k">::</span><span class="pl-c1">Int</span>
<span class="pl-k">end</span>
<span class="pl-en">SlowDict</span>() <span class="pl-k">=</span> <span class="pl-c1">SlowDict</span>(<span class="pl-c1">Dict</span><span class="pl-c1">{String,Int}</span>(), <span class="pl-c1">0</span>)
<span class="pl-k">for</span> f <span class="pl-k">in</span> [<span class="pl-c1">:length</span>, <span class="pl-c1">:get</span>, <span class="pl-c1">:setindex!</span>, <span class="pl-c1">:iterate</span>, <span class="pl-c1">:delete!</span>, <span class="pl-c1">:empty!</span>]
    <span class="pl-c1">@eval</span> (Base.<span class="pl-k">$</span>f)(d<span class="pl-k">::</span><span class="pl-c1">SlowDict</span>, args<span class="pl-k">...</span>) <span class="pl-k">=</span> <span class="pl-k">$</span>(f)(d<span class="pl-k">.</span>dict, args<span class="pl-k">...</span>)
<span class="pl-k">end</span>
<span class="pl-k">function</span> Base<span class="pl-k">.</span><span class="pl-en">getindex</span>(o<span class="pl-k">::</span><span class="pl-c1">SlowDict</span>, key)
    <span class="pl-c"><span class="pl-c">#</span> slow</span>
    <span class="pl-c1">sleep</span>(<span class="pl-c1">1e-2</span>)
    o<span class="pl-k">.</span>nslow_calls <span class="pl-k">+=</span> <span class="pl-c1">1</span>
    o<span class="pl-k">.</span>dict[key]
<span class="pl-k">end</span>

d_slow <span class="pl-k">=</span> <span class="pl-c1">SlowDict</span>()
d_slow[<span class="pl-s"><span class="pl-pds">"</span>1<span class="pl-pds">"</span></span>] <span class="pl-k">=</span> <span class="pl-c1">1</span>
d_slow[<span class="pl-s"><span class="pl-pds">"</span>2<span class="pl-pds">"</span></span>] <span class="pl-k">=</span> <span class="pl-c1">2</span>

d_slow[<span class="pl-s"><span class="pl-pds">"</span>1<span class="pl-pds">"</span></span>]
<span class="pl-c1">@assert</span> d_slow<span class="pl-k">.</span>nslow_calls <span class="pl-k">==</span> <span class="pl-c1">1</span>
d_slow[<span class="pl-s"><span class="pl-pds">"</span>1<span class="pl-pds">"</span></span>]
<span class="pl-c1">@assert</span> d_slow<span class="pl-k">.</span>nslow_calls <span class="pl-k">==</span> <span class="pl-c1">2</span>
d_slow[<span class="pl-s"><span class="pl-pds">"</span>1<span class="pl-pds">"</span></span>]
<span class="pl-c1">@assert</span> d_slow<span class="pl-k">.</span>nslow_calls <span class="pl-k">==</span> <span class="pl-c1">3</span>

cache <span class="pl-k">=</span> <span class="pl-c1">LRU</span><span class="pl-c1">{String,Int}</span>(maxsize<span class="pl-k">=</span><span class="pl-c1">2</span>)
d <span class="pl-k">=</span> <span class="pl-c1">CachedDict</span>(cache, d_slow)
<span class="pl-c1">@assert</span> d_slow<span class="pl-k">.</span>nslow_calls <span class="pl-k">==</span> <span class="pl-c1">3</span>
d[<span class="pl-s"><span class="pl-pds">"</span>1<span class="pl-pds">"</span></span>]
<span class="pl-c"><span class="pl-c">#</span> subsequent calls are cached</span>
<span class="pl-c1">@assert</span> d_slow<span class="pl-k">.</span>nslow_calls <span class="pl-k">==</span> <span class="pl-c1">4</span>
d[<span class="pl-s"><span class="pl-pds">"</span>1<span class="pl-pds">"</span></span>]
<span class="pl-c1">@assert</span> d_slow<span class="pl-k">.</span>nslow_calls <span class="pl-k">==</span> <span class="pl-c1">4</span>
d[<span class="pl-s"><span class="pl-pds">"</span>1<span class="pl-pds">"</span></span>]
<span class="pl-c1">@assert</span> d_slow<span class="pl-k">.</span>nslow_calls <span class="pl-k">==</span> <span class="pl-c1">4</span></pre></div>
</article></div>