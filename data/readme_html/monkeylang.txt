<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-monkeylang" class="anchor" aria-hidden="true" href="#monkeylang"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>MonkeyLang</h1>
<p dir="auto"><a href="https://juliahub.com/ui/Packages/MonkeyLang/cQN5X" rel="nofollow"><img src="https://camo.githubusercontent.com/8c7eea32b20fd50a20f1e4dd326eeff92d54af7ab409b7d10551001975eaed51/68747470733a2f2f6a756c69616875622e636f6d2f646f63732f4d6f6e6b65794c616e672f76657273696f6e2e737667" alt="version" data-canonical-src="https://juliahub.com/docs/MonkeyLang/version.svg" style="max-width: 100%;"></a>
<a href="https://github.com/lucifer1004/MonkeyLang.jl/actions/workflows/CI.yml?query=branch%3Amain"><img src="https://github.com/lucifer1004/MonkeyLang.jl/actions/workflows/CI.yml/badge.svg?branch=main" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/lucifer1004/MonkeyLang.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/7ddfe70112e1b0983c4e57465338c1ca0a554190dc6c4a19c88a76df97a31a84/68747470733a2f2f636f6465636f762e696f2f67682f6c756369666572313030342f4d6f6e6b65794c616e672e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/lucifer1004/MonkeyLang.jl/branch/main/graph/badge.svg" style="max-width: 100%;"></a></p>
<blockquote>
<p dir="auto">Monkey Programming Language written in Julia.</p>
</blockquote>
<p dir="auto"><strong>Table of Contents</strong></p>
<ul dir="auto">
<li><a href="#monkeylang">MonkeyLang</a>
<ul dir="auto">
<li><a href="#using-monkey-in-julia">Using Monkey in Julia</a></li>
<li><a href="#compile-monkeylangjl-to-a-standalone-executable">Compile MonkeyLang.jl to a standalone executable</a></li>
<li><a href="#start-the-repl">Start the REPL</a></li>
<li><a href="#documentation">Documentation</a>
<ul dir="auto">
<li><a href="#summary">Summary</a></li>
<li><a href="#syntax-overview">Syntax overview</a>
<ul dir="auto">
<li><a href="#if">If</a></li>
<li><a href="#while">While</a></li>
<li><a href="#operators">Operators</a></li>
<li><a href="#return">Return</a></li>
</ul>
</li>
<li><a href="#variable-bindings">Variable bindings</a></li>
<li><a href="#scopes">Scopes</a>
<ul dir="auto">
<li><a href="#global-scope">Global Scope</a></li>
<li><a href="#local-scope">Local Scope</a></li>
<li><a href="#closure-scope">Closure Scope</a></li>
<li><a href="#currentclosure-scope">CurrentClosure Scope</a></li>
</ul>
</li>
<li><a href="#literals">Literals</a>
<ul dir="auto">
<li><a href="#integer">INTEGER</a></li>
<li><a href="#boolean">BOOLEAN</a></li>
<li><a href="#null">NULL</a></li>
<li><a href="#string">STRING</a></li>
<li><a href="#array">ARRAY</a></li>
<li><a href="#hash">HASH</a></li>
<li><a href="#function">FUNCTION</a></li>
</ul>
</li>
<li><a href="#built-in-functions">Built-in Functions</a>
<ul dir="auto">
<li><a href="#typearg1-string"><code>type(&lt;arg1&gt;): STRING</code></a></li>
<li><a href="#putsarg1-arg2--null"><code>puts(&lt;arg1&gt;, &lt;arg2&gt;, ...): NULL</code></a></li>
<li><a href="#lenarg-integer"><code>len(&lt;arg&gt;): INTEGER</code></a></li>
<li><a href="#firstarg-string-string--null"><code>first(&lt;arg: STRING&gt;): STRING | NULL</code></a></li>
<li><a href="#firstarg-array-any"><code>first(&lt;arg: Array&gt;): any</code></a></li>
<li><a href="#lastarg-string-string--null"><code>last(&lt;arg: String&gt;): STRING | NULL</code></a></li>
<li><a href="#lastarg-array-any"><code>last(&lt;arg: Array&gt;): any</code></a></li>
<li><a href="#restarg-string-string--null"><code>rest(&lt;arg: STRING&gt;): STRING | NULL</code></a></li>
<li><a href="#restarg-array-array--null"><code>rest(&lt;arg: ARRAY&gt;): ARRAY | NULL</code></a></li>
<li><a href="#pusharg1-array-arg2-array"><code>push(&lt;arg1: ARRAY&gt;, &lt;arg2&gt;): ARRAY</code></a></li>
<li><a href="#pusharg1-hash-arg2-arg3-hash"><code>push(&lt;arg1: HASH&gt;, &lt;arg2&gt;, &lt;arg3&gt;): HASH</code></a></li>
</ul>
</li>
<li><a href="#advanced-examples">Advanced examples</a>
<ul dir="auto">
<li><a href="#a-custom-map-function">A custom <code>map</code> function</a></li>
<li><a href="#a-custom-reduce-function">A custom <code>reduce</code> function</a></li>
</ul>
</li>
<li><a href="#macro-system">Macro System</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 dir="auto"><a id="user-content-using-monkey-in-julia" class="anchor" aria-hidden="true" href="#using-monkey-in-julia"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Using Monkey in Julia</h2>
<p dir="auto">You can start the REPL within Julia:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using MonkeyLang

start_repl()"><pre><span class="pl-k">using</span> MonkeyLang

<span class="pl-c1">start_repl</span>()</pre></div>
<p dir="auto">Or you can evaluate Monkey programs using string macros:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using MonkeyLang

a = 2

monkey_eval&quot;let b = $a; puts(b)&quot;

monkey_vm&quot;let c = [$a, $a]; puts(c)&quot;

monkey_julia&quot;let d = {$a: $a}; puts(d)&quot;"><pre><span class="pl-k">using</span> MonkeyLang

a <span class="pl-k">=</span> <span class="pl-c1">2</span>

<span class="pl-s"><span class="pl-pds"><span class="pl-c1">monkey_eval</span>"</span>let b = $a; puts(b)<span class="pl-pds">"</span></span>

<span class="pl-s"><span class="pl-pds"><span class="pl-c1">monkey_vm</span>"</span>let c = [$a, $a]; puts(c)<span class="pl-pds">"</span></span>

<span class="pl-s"><span class="pl-pds"><span class="pl-c1">monkey_julia</span>"</span>let d = {$a: $a}; puts(d)<span class="pl-pds">"</span></span></pre></div>
<h2 dir="auto"><a id="user-content-compile-monkeylangjl-to-a-standalone-executable" class="anchor" aria-hidden="true" href="#compile-monkeylangjl-to-a-standalone-executable"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Compile MonkeyLang.jl to a standalone executable</h2>
<p dir="auto">Clone the repo, and run <code>make build</code> in the root directory.</p>
<blockquote>
<p dir="auto">Caution: The compilation may take up to ~5 minutes.</p>
</blockquote>
<h2 dir="auto"><a id="user-content-start-the-repl" class="anchor" aria-hidden="true" href="#start-the-repl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Start the REPL</h2>
<p dir="auto">You can start the REPL in a Julia script or in the Julia REPL:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="import Pkg; Pkg.add(&quot;MonkeyLang&quot;)

using MonkeyLang

MonkeyLang.start_repl()
MonkeyLang.start_repl(; use_vm = true) # use VM"><pre><span class="pl-k">import</span> Pkg; Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>MonkeyLang<span class="pl-pds">"</span></span>)

<span class="pl-k">using</span> MonkeyLang

MonkeyLang<span class="pl-k">.</span><span class="pl-c1">start_repl</span>()
MonkeyLang<span class="pl-k">.</span><span class="pl-c1">start_repl</span>(; use_vm <span class="pl-k">=</span> <span class="pl-c1">true</span>) <span class="pl-c"><span class="pl-c">#</span> use VM</span></pre></div>
<p dir="auto">You can press <code>Ctrl-C</code> or <code>Ctrl-D</code> to exit the REPL.</p>
<p dir="auto">If you have compiled <code>MonkeyLang.jl</code> locally, then you can directly start the REPL by:</p>
<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="./monkey repl
./monkey repl --vm # use VM"><pre>./monkey repl
./monkey repl --vm <span class="pl-c"><span class="pl-c">#</span> use VM</span></pre></div>
<h2 dir="auto"><a id="user-content-documentation" class="anchor" aria-hidden="true" href="#documentation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Documentation</h2>
<p dir="auto">I created the document with reference to <a href="https://interpreterbook.com/#the-monkey-programming-language" rel="nofollow">Writing An Interpreter In Go</a> and <a href="https://github.com/wadackel/rs-monkey-lang">rs-monkey-lang</a>.</p>
<p dir="auto"><g-emoji class="g-emoji" alias="warning" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/26a0.png">⚠️</g-emoji> <strong>Please note that there may be some mistakes.</strong></p>
<h3 dir="auto"><a id="user-content-summary" class="anchor" aria-hidden="true" href="#summary"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Summary</h3>
<ul dir="auto">
<li>C-like syntax</li>
<li>variable bindings</li>
<li>first-class and higher-order functions • closures</li>
<li>arithmetic expressions</li>
<li>built-in functions</li>
</ul>
<h3 dir="auto"><a id="user-content-syntax-overview" class="anchor" aria-hidden="true" href="#syntax-overview"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Syntax overview</h3>
<p dir="auto">An example of Fibonacci function.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="let fibonacci = fn(x) {
  if (x == 0) {
    0;
  } else {
    if (x == 1) {
      1;
    } else {
      fibonacci(x - 1) + fibonacci(x - 2);
    }
  }
};

fibonacci(10);"><pre><span class="pl-k">let</span> fibonacci <span class="pl-k">=</span> <span class="pl-c1">fn</span>(x) {
  <span class="pl-k">if</span> (x <span class="pl-k">==</span> <span class="pl-c1">0</span>) {
    <span class="pl-c1">0</span>;
  } <span class="pl-k">else</span> {
    <span class="pl-k">if</span> (x <span class="pl-k">==</span> <span class="pl-c1">1</span>) {
      <span class="pl-c1">1</span>;
    } <span class="pl-k">else</span> {
      <span class="pl-c1">fibonacci</span>(x <span class="pl-k">-</span> <span class="pl-c1">1</span>) <span class="pl-k">+</span> <span class="pl-c1">fibonacci</span>(x <span class="pl-k">-</span> <span class="pl-c1">2</span>);
    }
  }
};

<span class="pl-c1">fibonacci</span>(<span class="pl-c1">10</span>);</pre></div>
<h4 dir="auto"><a id="user-content-if" class="anchor" aria-hidden="true" href="#if"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>If</h4>
<p dir="auto">It supports the general <code>if</code>. <code>else</code> exists, but <code>else if</code> does not exist.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="if (true) {
  10;
} else {
  5;
}"><pre><span class="pl-k">if</span> (<span class="pl-c1">true</span>) {
  <span class="pl-c1">10</span>;
} <span class="pl-k">else</span> {
  <span class="pl-c1">5</span>;
}</pre></div>
<h4 dir="auto"><a id="user-content-while" class="anchor" aria-hidden="true" href="#while"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>While</h4>
<p dir="auto">It also supports <code>while</code> loops.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="let x = 5;
while (x &gt; 0) {
  puts(x);
  x = x - 1;
}"><pre><span class="pl-k">let</span> x <span class="pl-k">=</span> <span class="pl-c1">5</span>;
<span class="pl-k">while</span> (x <span class="pl-k">&gt;</span> <span class="pl-c1">0</span>) {
  <span class="pl-c1">puts</span>(x);
  x <span class="pl-k">=</span> x <span class="pl-k">-</span> <span class="pl-c1">1</span>;
}</pre></div>
<h4 dir="auto"><a id="user-content-operators" class="anchor" aria-hidden="true" href="#operators"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Operators</h4>
<p dir="auto">It supports the general operations.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="1 + 2 + (3 * 4) - (10 / 5);
!true;
!false;
+10;
-5;
&quot;Hello&quot; + &quot; &quot; + &quot;World&quot;;"><pre><span class="pl-c1">1</span> <span class="pl-k">+</span> <span class="pl-c1">2</span> <span class="pl-k">+</span> (<span class="pl-c1">3</span> <span class="pl-k">*</span> <span class="pl-c1">4</span>) <span class="pl-k">-</span> (<span class="pl-c1">10</span> <span class="pl-k">/</span> <span class="pl-c1">5</span>);
<span class="pl-k">!</span><span class="pl-c1">true</span>;
<span class="pl-k">!</span><span class="pl-c1">false</span>;
<span class="pl-k">+</span><span class="pl-c1">10</span>;
<span class="pl-k">-</span><span class="pl-c1">5</span>;
<span class="pl-s"><span class="pl-pds">"</span>Hello<span class="pl-pds">"</span></span> <span class="pl-k">+</span> <span class="pl-s"><span class="pl-pds">"</span> <span class="pl-pds">"</span></span> <span class="pl-k">+</span> <span class="pl-s"><span class="pl-pds">"</span>World<span class="pl-pds">"</span></span>;</pre></div>
<h4 dir="auto"><a id="user-content-return" class="anchor" aria-hidden="true" href="#return"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Return</h4>
<p dir="auto">It returns the value immediately. No further processing will be executed.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="if (true) {
  return;
}"><pre><span class="pl-k">if</span> (<span class="pl-c1">true</span>) {
  <span class="pl-k">return</span>;
}</pre></div>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="let identity = fn(x) {
  return x;
};

identity(&quot;Monkey&quot;);"><pre><span class="pl-k">let</span> identity <span class="pl-k">=</span> <span class="pl-c1">fn</span>(x) {
  <span class="pl-k">return</span> x;
};

<span class="pl-c1">identity</span>(<span class="pl-s"><span class="pl-pds">"</span>Monkey<span class="pl-pds">"</span></span>);</pre></div>
<h3 dir="auto"><a id="user-content-variable-bindings" class="anchor" aria-hidden="true" href="#variable-bindings"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Variable bindings</h3>
<p dir="auto">Variable bindings, such as those supported by many programming languages, are implemented. Variables can be defined using the <code>let</code> keyword. Variables cannot be redefined in the same scope, but they can be reassigned.</p>
<p dir="auto"><strong>Format:</strong></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="let &lt;identifier&gt; = &lt;expression&gt;; # Define

&lt;identifier&gt; = &lt;expression&gt;; # Reassign"><pre><span class="pl-k">let</span> <span class="pl-k">&lt;</span>identifier<span class="pl-k">&gt;</span> <span class="pl-k">=</span> <span class="pl-k">&lt;</span>expression<span class="pl-k">&gt;</span>; <span class="pl-c"><span class="pl-c">#</span> Define</span>

<span class="pl-k">&lt;</span>identifier<span class="pl-k">&gt;</span> <span class="pl-k">=</span> <span class="pl-k">&lt;</span>expression<span class="pl-k">&gt;</span>; <span class="pl-c"><span class="pl-c">#</span> Reassign</span></pre></div>
<p dir="auto"><strong>Example:</strong></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="let x = 0;
let y = 10;
let foobar = add(5, 5);
let alias = foobar;
let identity = fn(x) { x };

x = x + 1;
y = x - y;"><pre><span class="pl-k">let</span> x <span class="pl-k">=</span> <span class="pl-c1">0</span>;
<span class="pl-k">let</span> y <span class="pl-k">=</span> <span class="pl-c1">10</span>;
<span class="pl-k">let</span> foobar <span class="pl-k">=</span> <span class="pl-c1">add</span>(<span class="pl-c1">5</span>, <span class="pl-c1">5</span>);
<span class="pl-k">let</span> alias <span class="pl-k">=</span> foobar;
<span class="pl-k">let</span> identity <span class="pl-k">=</span> <span class="pl-c1">fn</span>(x) { x };

x <span class="pl-k">=</span> x <span class="pl-k">+</span> <span class="pl-c1">1</span>;
y <span class="pl-k">=</span> x <span class="pl-k">-</span> y;</pre></div>
<h3 dir="auto"><a id="user-content-scopes" class="anchor" aria-hidden="true" href="#scopes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Scopes</h3>
<p dir="auto">In Monkey, there are types of scopes:</p>
<h4 dir="auto"><a id="user-content-global-scope" class="anchor" aria-hidden="true" href="#global-scope"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Global Scope</h4>
<p dir="auto">Variables defined at the top level are visible everywhere, and can be modified from anywhere.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="let x = 2; # `x` is a global variable

let f = fn() { 
  let g = fn() { 
    x = x + 1; # Modifies the global variable `x`
    return x; 
  } 
  return g; 
}

let g = f();
puts(g()); # 3
puts(g()); # 4

let h = f();
puts(h()); # 5
puts(h()); # 6"><pre><span class="pl-k">let</span> x <span class="pl-k">=</span> <span class="pl-c1">2</span>; <span class="pl-c"><span class="pl-c">#</span> `x` is a global variable</span>

<span class="pl-k">let</span> f <span class="pl-k">=</span> <span class="pl-c1">fn</span>() { 
  <span class="pl-k">let</span> g <span class="pl-k">=</span> <span class="pl-c1">fn</span>() { 
    x <span class="pl-k">=</span> x <span class="pl-k">+</span> <span class="pl-c1">1</span>; <span class="pl-c"><span class="pl-c">#</span> Modifies the global variable `x`</span>
    <span class="pl-k">return</span> x; 
  } 
  <span class="pl-k">return</span> g; 
}

<span class="pl-k">let</span> g <span class="pl-k">=</span> <span class="pl-c1">f</span>();
<span class="pl-c1">puts</span>(<span class="pl-c1">g</span>()); <span class="pl-c"><span class="pl-c">#</span> 3</span>
<span class="pl-c1">puts</span>(<span class="pl-c1">g</span>()); <span class="pl-c"><span class="pl-c">#</span> 4</span>

<span class="pl-k">let</span> h <span class="pl-k">=</span> <span class="pl-c1">f</span>();
<span class="pl-c1">puts</span>(<span class="pl-c1">h</span>()); <span class="pl-c"><span class="pl-c">#</span> 5</span>
<span class="pl-c1">puts</span>(<span class="pl-c1">h</span>()); <span class="pl-c"><span class="pl-c">#</span> 6</span></pre></div>
<h4 dir="auto"><a id="user-content-local-scope" class="anchor" aria-hidden="true" href="#local-scope"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Local Scope</h4>
<p dir="auto">Variables defined within while loops or functions are of this scope. They can be modified from the same scope, or inner while loops' scopes.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="let x = 1;

while (x &gt; 0) {
  x = x - 1;
  let y = 1; # `y` is a local variable
  while (y &gt; 0) {
    y = y - 1; # Modifies the local variable `y`
  }
  puts(y); # 0
}"><pre><span class="pl-k">let</span> x <span class="pl-k">=</span> <span class="pl-c1">1</span>;

<span class="pl-k">while</span> (x <span class="pl-k">&gt;</span> <span class="pl-c1">0</span>) {
  x <span class="pl-k">=</span> x <span class="pl-k">-</span> <span class="pl-c1">1</span>;
  <span class="pl-k">let</span> y <span class="pl-k">=</span> <span class="pl-c1">1</span>; <span class="pl-c"><span class="pl-c">#</span> `y` is a local variable</span>
  <span class="pl-k">while</span> (y <span class="pl-k">&gt;</span> <span class="pl-c1">0</span>) {
    y <span class="pl-k">=</span> y <span class="pl-k">-</span> <span class="pl-c1">1</span>; <span class="pl-c"><span class="pl-c">#</span> Modifies the local variable `y`</span>
  }
  <span class="pl-c1">puts</span>(y); <span class="pl-c"><span class="pl-c">#</span> 0</span>
}</pre></div>
<h4 dir="auto"><a id="user-content-closure-scope" class="anchor" aria-hidden="true" href="#closure-scope"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Closure Scope</h4>
<p dir="auto">A function captures all non-global variables visible to it as its free variables. These variables can be modified from within the function.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="let f = fn() { 
  let x = 2; 
  let g = fn() { 
    x = x + 1; # `x` is captured as a free variable
    return x; 
  } 
  return g; 
}

let g = f();
puts(g()); # 3
puts(g()); # 4

let h = f();
puts(h()); # 3, since in function `f`, `x` remains unchanged.
puts(h()); # 4"><pre><span class="pl-k">let</span> f <span class="pl-k">=</span> <span class="pl-c1">fn</span>() { 
  <span class="pl-k">let</span> x <span class="pl-k">=</span> <span class="pl-c1">2</span>; 
  <span class="pl-k">let</span> g <span class="pl-k">=</span> <span class="pl-c1">fn</span>() { 
    x <span class="pl-k">=</span> x <span class="pl-k">+</span> <span class="pl-c1">1</span>; <span class="pl-c"><span class="pl-c">#</span> `x` is captured as a free variable</span>
    <span class="pl-k">return</span> x; 
  } 
  <span class="pl-k">return</span> g; 
}

<span class="pl-k">let</span> g <span class="pl-k">=</span> <span class="pl-c1">f</span>();
<span class="pl-c1">puts</span>(<span class="pl-c1">g</span>()); <span class="pl-c"><span class="pl-c">#</span> 3</span>
<span class="pl-c1">puts</span>(<span class="pl-c1">g</span>()); <span class="pl-c"><span class="pl-c">#</span> 4</span>

<span class="pl-k">let</span> h <span class="pl-k">=</span> <span class="pl-c1">f</span>();
<span class="pl-c1">puts</span>(<span class="pl-c1">h</span>()); <span class="pl-c"><span class="pl-c">#</span> 3, since in function `f`, `x` remains unchanged.</span>
<span class="pl-c1">puts</span>(<span class="pl-c1">h</span>()); <span class="pl-c"><span class="pl-c">#</span> 4</span></pre></div>
<h4 dir="auto"><a id="user-content-currentclosure-scope" class="anchor" aria-hidden="true" href="#currentclosure-scope"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>CurrentClosure Scope</h4>
<p dir="auto">Specially, a named function being defined is of this scope. It cannot be modified from within its body.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="let f = fn(x) {
  f = 3; # ERROR: cannot reassign the current function being defined: f
}"><pre><span class="pl-k">let</span> f <span class="pl-k">=</span> <span class="pl-c1">fn</span>(x) {
  f <span class="pl-k">=</span> <span class="pl-c1">3</span>; <span class="pl-c"><span class="pl-c">#</span> ERROR: cannot reassign the current function being defined: f</span>
}</pre></div>
<p dir="auto">But redefinition is OK:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="let f = fn(x) {
  let f = x + x;
  puts(f);
}

f(3); # 6"><pre><span class="pl-k">let</span> f <span class="pl-k">=</span> <span class="pl-c1">fn</span>(x) {
  <span class="pl-k">let</span> f <span class="pl-k">=</span> x <span class="pl-k">+</span> x;
  <span class="pl-c1">puts</span>(f);
}

<span class="pl-c1">f</span>(<span class="pl-c1">3</span>); <span class="pl-c"><span class="pl-c">#</span> 6</span></pre></div>
<h3 dir="auto"><a id="user-content-literals" class="anchor" aria-hidden="true" href="#literals"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Literals</h3>
<p dir="auto">Five types of literals are implemented.</p>
<h4 dir="auto"><a id="user-content-integer" class="anchor" aria-hidden="true" href="#integer"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>INTEGER</h4>
<p dir="auto"><code>INTEGER</code> represents an integer value. Floating point numbers can not be handled.</p>
<p dir="auto"><strong>Format:</strong></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="[-+]?[1-9][0-9]*;"><pre>[<span class="pl-k">-+</span>]?[<span class="pl-c1">1</span><span class="pl-k">-</span><span class="pl-c1">9</span>][<span class="pl-c1">0</span><span class="pl-k">-</span><span class="pl-c1">9</span>]<span class="pl-k">*</span>;</pre></div>
<p dir="auto"><strong>Example:</strong></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="10;
1234;"><pre><span class="pl-c1">10</span>;
<span class="pl-c1">1234</span>;</pre></div>
<h4 dir="auto"><a id="user-content-boolean" class="anchor" aria-hidden="true" href="#boolean"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>BOOLEAN</h4>
<p dir="auto"><code>BOOLEAN</code> represents a boolean value.</p>
<p dir="auto"><strong>Format:</strong></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="true | false;"><pre><span class="pl-c1">true</span> <span class="pl-k">|</span> <span class="pl-c1">false</span>;</pre></div>
<p dir="auto"><strong>Example:</strong></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="true;
false;

let truthy = !false;
let falsy = !true;"><pre><span class="pl-c1">true</span>;
<span class="pl-c1">false</span>;

<span class="pl-k">let</span> truthy <span class="pl-k">=</span> <span class="pl-k">!</span><span class="pl-c1">false</span>;
<span class="pl-k">let</span> falsy <span class="pl-k">=</span> <span class="pl-k">!</span><span class="pl-c1">true</span>;</pre></div>
<h4 dir="auto"><a id="user-content-null" class="anchor" aria-hidden="true" href="#null"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>NULL</h4>
<p dir="auto"><code>NULL</code> represents null. When used as a condition, <code>NULL</code> is evaluated as falsy.</p>
<p dir="auto"><strong>Format:</strong></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="null;"><pre>null;</pre></div>
<p dir="auto"><strong>Example:</strong></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="if (null) { 2 } else { 3 }; # 3"><pre><span class="pl-k">if</span> (null) { <span class="pl-c1">2</span> } <span class="pl-k">else</span> { <span class="pl-c1">3</span> }; <span class="pl-c"><span class="pl-c">#</span> 3</span></pre></div>
<h4 dir="auto"><a id="user-content-string" class="anchor" aria-hidden="true" href="#string"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>STRING</h4>
<p dir="auto"><code>STRING</code> represents a string. Only double quotes can be used.</p>
<p dir="auto"><code>STRING</code>s can be concatenated with <code>"+"</code>.</p>
<p dir="auto"><strong>Format:</strong></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="&quot;&lt;value&gt;&quot;;"><pre><span class="pl-s"><span class="pl-pds">"</span>&lt;value&gt;<span class="pl-pds">"</span></span>;</pre></div>
<p dir="auto"><strong>Example:</strong></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="&quot;Monkey Programming Language&quot;; # &quot;Monkey Programming Language&quot;;
&quot;Hello&quot; + &quot; &quot; + &quot;World&quot;; # &quot;Hello World&quot;"><pre><span class="pl-s"><span class="pl-pds">"</span>Monkey Programming Language<span class="pl-pds">"</span></span>; <span class="pl-c"><span class="pl-c">#</span> "Monkey Programming Language";</span>
<span class="pl-s"><span class="pl-pds">"</span>Hello<span class="pl-pds">"</span></span> <span class="pl-k">+</span> <span class="pl-s"><span class="pl-pds">"</span> <span class="pl-pds">"</span></span> <span class="pl-k">+</span> <span class="pl-s"><span class="pl-pds">"</span>World<span class="pl-pds">"</span></span>; <span class="pl-c"><span class="pl-c">#</span> "Hello World"</span></pre></div>
<h4 dir="auto"><a id="user-content-array" class="anchor" aria-hidden="true" href="#array"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>ARRAY</h4>
<p dir="auto"><code>ARRAY</code> represents an ordered contiguous element. Each element can contain different data types.</p>
<p dir="auto"><strong>Format:</strong></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="[&lt;expression&gt;, &lt;expression&gt;, ...];"><pre>[<span class="pl-k">&lt;</span>expression<span class="pl-k">&gt;</span>, <span class="pl-k">&lt;</span>expression<span class="pl-k">&gt;</span>, <span class="pl-k">...</span>];</pre></div>
<p dir="auto"><strong>Example:</strong></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="[1, 2, 3 + 3, fn(x) { x }, add(2, 2), true];"><pre>[<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span> <span class="pl-k">+</span> <span class="pl-c1">3</span>, <span class="pl-c1">fn</span>(x) { x }, <span class="pl-c1">add</span>(<span class="pl-c1">2</span>, <span class="pl-c1">2</span>), <span class="pl-c1">true</span>];</pre></div>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="let arr = [1, true, fn(x) { x }];

arr[0];
arr[1];
arr[2](10);
arr[1 + 1](10);"><pre><span class="pl-k">let</span> arr <span class="pl-k">=</span> [<span class="pl-c1">1</span>, <span class="pl-c1">true</span>, <span class="pl-c1">fn</span>(x) { x }];

arr[<span class="pl-c1">0</span>];
arr[<span class="pl-c1">1</span>];
arr[<span class="pl-c1">2</span>](<span class="pl-c1">10</span>);
arr[<span class="pl-c1">1</span> <span class="pl-k">+</span> <span class="pl-c1">1</span>](<span class="pl-c1">10</span>);</pre></div>
<h4 dir="auto"><a id="user-content-hash" class="anchor" aria-hidden="true" href="#hash"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>HASH</h4>
<p dir="auto"><code>HASH</code> expresses data associating keys with values.</p>
<p dir="auto"><strong>Format:</strong></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="{ &lt;expression&gt;: &lt;expression&gt;, &lt;expression&gt;: &lt;expression&gt;, ... };"><pre>{ <span class="pl-k">&lt;</span>expression<span class="pl-k">&gt;:</span> <span class="pl-k">&lt;</span>expression<span class="pl-k">&gt;</span>, <span class="pl-k">&lt;</span>expression<span class="pl-k">&gt;:</span> <span class="pl-k">&lt;</span>expression<span class="pl-k">&gt;</span>, <span class="pl-k">...</span> };</pre></div>
<p dir="auto"><strong>Example:</strong></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="let hash = {
  &quot;name&quot;: &quot;Jimmy&quot;,
  &quot;age&quot;: 72,
  true: &quot;a boolean&quot;,
  99: &quot;an integer&quot;
};

hash[&quot;name&quot;];
hash[&quot;a&quot; + &quot;ge&quot;];
hash[true];
hash[99];
hash[100 - 1];"><pre><span class="pl-k">let</span> hash <span class="pl-k">=</span> {
  <span class="pl-s"><span class="pl-pds">"</span>name<span class="pl-pds">"</span></span>: <span class="pl-s"><span class="pl-pds">"</span>Jimmy<span class="pl-pds">"</span></span>,
  <span class="pl-s"><span class="pl-pds">"</span>age<span class="pl-pds">"</span></span>: <span class="pl-c1">72</span>,
  <span class="pl-c1">true</span><span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>a boolean<span class="pl-pds">"</span></span>,
  <span class="pl-c1">99</span><span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>an integer<span class="pl-pds">"</span></span>
};

hash[<span class="pl-s"><span class="pl-pds">"</span>name<span class="pl-pds">"</span></span>];
hash[<span class="pl-s"><span class="pl-pds">"</span>a<span class="pl-pds">"</span></span> <span class="pl-k">+</span> <span class="pl-s"><span class="pl-pds">"</span>ge<span class="pl-pds">"</span></span>];
hash[<span class="pl-c1">true</span>];
hash[<span class="pl-c1">99</span>];
hash[<span class="pl-c1">100</span> <span class="pl-k">-</span> <span class="pl-c1">1</span>];</pre></div>
<h4 dir="auto"><a id="user-content-function" class="anchor" aria-hidden="true" href="#function"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>FUNCTION</h4>
<p dir="auto"><code>FUNCTION</code> supports functions like those supported by other programming languages.</p>
<p dir="auto"><strong>Format:</strong></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="fn (&lt;parameter one&gt;, &lt;parameter two&gt;, ...) { &lt;block statement&gt; };"><pre>fn (<span class="pl-k">&lt;</span>parameter one<span class="pl-k">&gt;</span>, <span class="pl-k">&lt;</span>parameter two<span class="pl-k">&gt;</span>, <span class="pl-k">...</span>) { <span class="pl-k">&lt;</span>block statement<span class="pl-k">&gt;</span> };</pre></div>
<p dir="auto"><strong>Example:</strong></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="let add = fn(x, y) {
  return x + y;
};

add(10, 20);"><pre><span class="pl-k">let</span> add <span class="pl-k">=</span> <span class="pl-c1">fn</span>(x, y) {
  <span class="pl-k">return</span> x <span class="pl-k">+</span> y;
};

<span class="pl-c1">add</span>(<span class="pl-c1">10</span>, <span class="pl-c1">20</span>);</pre></div>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="let add = fn(x, y) {
  x + y;
};

add(10, 20);"><pre><span class="pl-k">let</span> add <span class="pl-k">=</span> <span class="pl-c1">fn</span>(x, y) {
  x <span class="pl-k">+</span> y;
};

<span class="pl-c1">add</span>(<span class="pl-c1">10</span>, <span class="pl-c1">20</span>);</pre></div>
<p dir="auto">If <code>return</code> does not exist, it returns the result of the last evaluated expression.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="let addThree = fn(x) { x + 3 };
let callTwoTimes = fn(x, f) { f(f(x)) };

callTwoTimes(3, addThree);"><pre><span class="pl-k">let</span> addThree <span class="pl-k">=</span> <span class="pl-c1">fn</span>(x) { x <span class="pl-k">+</span> <span class="pl-c1">3</span> };
<span class="pl-k">let</span> callTwoTimes <span class="pl-k">=</span> <span class="pl-c1">fn</span>(x, f) { <span class="pl-c1">f</span>(<span class="pl-c1">f</span>(x)) };

<span class="pl-c1">callTwoTimes</span>(<span class="pl-c1">3</span>, addThree);</pre></div>
<p dir="auto">Passing around functions, higher-order functions and closures will also work.</p>
<blockquote>
<p dir="auto">The evaluation order of function parameters is <strong>left to right</strong>.</p>
</blockquote>
<p dir="auto">So a memoized Fibonacci function should be implemented like:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="let d = {}

let fibonacci = fn(x) {
    if (x == 0) {
        0
    } else {
        if (x == 1) {
            1;
        } else {
            if (type(d[x]) == &quot;NULL&quot;) {
                # You cannot use `d = push(d, x, fibonacci(x - 1) + fibonacci(x - 2))`
                # since `d` is evaluated first, which means it will not be updated
                # when `fibonacci(x - 1)` and `fibonacci(x - 2)` are called.
                let g = fibonacci(x - 1) + fibonacci(x - 2);
                d = push(d, x, g);
            }

            d[x];
        }
    }
};

fibonacci(35);"><pre><span class="pl-k">let</span> d <span class="pl-k">=</span> {}

<span class="pl-k">let</span> fibonacci <span class="pl-k">=</span> <span class="pl-c1">fn</span>(x) {
    <span class="pl-k">if</span> (x <span class="pl-k">==</span> <span class="pl-c1">0</span>) {
        <span class="pl-c1">0</span>
    } <span class="pl-k">else</span> {
        <span class="pl-k">if</span> (x <span class="pl-k">==</span> <span class="pl-c1">1</span>) {
            <span class="pl-c1">1</span>;
        } <span class="pl-k">else</span> {
            <span class="pl-k">if</span> (<span class="pl-c1">type</span>(d[x]) <span class="pl-k">==</span> <span class="pl-s"><span class="pl-pds">"</span>NULL<span class="pl-pds">"</span></span>) {
                <span class="pl-c"><span class="pl-c">#</span> You cannot use `d = push(d, x, fibonacci(x - 1) + fibonacci(x - 2))`</span>
                <span class="pl-c"><span class="pl-c">#</span> since `d` is evaluated first, which means it will not be updated</span>
                <span class="pl-c"><span class="pl-c">#</span> when `fibonacci(x - 1)` and `fibonacci(x - 2)` are called.</span>
                <span class="pl-k">let</span> g <span class="pl-k">=</span> <span class="pl-c1">fibonacci</span>(x <span class="pl-k">-</span> <span class="pl-c1">1</span>) <span class="pl-k">+</span> <span class="pl-c1">fibonacci</span>(x <span class="pl-k">-</span> <span class="pl-c1">2</span>);
                d <span class="pl-k">=</span> <span class="pl-c1">push</span>(d, x, g);
            }

            d[x];
        }
    }
};

<span class="pl-c1">fibonacci</span>(<span class="pl-c1">35</span>);</pre></div>
<h3 dir="auto"><a id="user-content-built-in-functions" class="anchor" aria-hidden="true" href="#built-in-functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Built-in Functions</h3>
<p dir="auto">You can use the following built-in functions <g-emoji class="g-emoji" alias="rocket" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f680.png">🚀</g-emoji></p>
<h4 dir="auto"><a id="user-content-typearg1-string" class="anchor" aria-hidden="true" href="#typearg1-string"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>type(&lt;arg1&gt;): STRING</code></h4>
<p dir="auto">Return the type of <code>arg1</code> as a <code>STRING</code>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="type(1); # INTEGER
type(&quot;123&quot;); # STRING
type(false); # BOOLEAN"><pre><span class="pl-c1">type</span>(<span class="pl-c1">1</span>); <span class="pl-c"><span class="pl-c">#</span> INTEGER</span>
<span class="pl-c1">type</span>(<span class="pl-s"><span class="pl-pds">"</span>123<span class="pl-pds">"</span></span>); <span class="pl-c"><span class="pl-c">#</span> STRING</span>
<span class="pl-c1">type</span>(<span class="pl-c1">false</span>); <span class="pl-c"><span class="pl-c">#</span> BOOLEAN</span></pre></div>
<h4 dir="auto"><a id="user-content-putsarg1-arg2--null" class="anchor" aria-hidden="true" href="#putsarg1-arg2--null"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>puts(&lt;arg1&gt;, &lt;arg2&gt;, ...): NULL</code></h4>
<p dir="auto">It outputs the specified value to <code>stdout</code>. In the case of Playground, it is output to <code>console</code>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="puts(&quot;Hello&quot;);
puts(&quot;World!&quot;);"><pre><span class="pl-c1">puts</span>(<span class="pl-s"><span class="pl-pds">"</span>Hello<span class="pl-pds">"</span></span>);
<span class="pl-c1">puts</span>(<span class="pl-s"><span class="pl-pds">"</span>World!<span class="pl-pds">"</span></span>);</pre></div>
<h4 dir="auto"><a id="user-content-lenarg-integer" class="anchor" aria-hidden="true" href="#lenarg-integer"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>len(&lt;arg&gt;): INTEGER</code></h4>
<ul dir="auto">
<li>For <code>STRING</code>, it returns the number of characters.</li>
<li>For <code>ARRAY</code>, it returns the number of elements.</li>
<li>For <code>HASH</code>, it returns the number of key-value pairs.</li>
</ul>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="len(&quot;Monkey&quot;); # 6
len([0, 1, 2]); # 3
len({1: 2, 2: 3}); # 2"><pre><span class="pl-c1">len</span>(<span class="pl-s"><span class="pl-pds">"</span>Monkey<span class="pl-pds">"</span></span>); <span class="pl-c"><span class="pl-c">#</span> 6</span>
<span class="pl-c1">len</span>([<span class="pl-c1">0</span>, <span class="pl-c1">1</span>, <span class="pl-c1">2</span>]); <span class="pl-c"><span class="pl-c">#</span> 3</span>
<span class="pl-c1">len</span>({<span class="pl-c1">1</span><span class="pl-k">:</span> <span class="pl-c1">2</span>, <span class="pl-c1">2</span><span class="pl-k">:</span> <span class="pl-c1">3</span>}); <span class="pl-c"><span class="pl-c">#</span> 2</span></pre></div>
<h4 dir="auto"><a id="user-content-firstarg-string-string--null" class="anchor" aria-hidden="true" href="#firstarg-string-string--null"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>first(&lt;arg: STRING&gt;): STRING | NULL</code></h4>
<p dir="auto">Returns the character at the beginning of a <code>STRING</code>. If the <code>STRING</code> is empty, return <code>NULL</code> instead.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="first(&quot;123&quot;); # &quot;1&quot;
first(&quot;&quot;); # null"><pre><span class="pl-c1">first</span>(<span class="pl-s"><span class="pl-pds">"</span>123<span class="pl-pds">"</span></span>); <span class="pl-c"><span class="pl-c">#</span> "1"</span>
<span class="pl-c1">first</span>(<span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>); <span class="pl-c"><span class="pl-c">#</span> null</span></pre></div>
<h4 dir="auto"><a id="user-content-firstarg-array-any" class="anchor" aria-hidden="true" href="#firstarg-array-any"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>first(&lt;arg: Array&gt;): any</code></h4>
<p dir="auto">Returns the element at the beginning of an <code>ARRAY</code>. If the <code>ARRAY</code> is empty, return <code>NULL</code> instead.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="first([0, 1, 2]); # 0
first([]); # null"><pre><span class="pl-c1">first</span>([<span class="pl-c1">0</span>, <span class="pl-c1">1</span>, <span class="pl-c1">2</span>]); <span class="pl-c"><span class="pl-c">#</span> 0</span>
<span class="pl-c1">first</span>([]); <span class="pl-c"><span class="pl-c">#</span> null</span></pre></div>
<h4 dir="auto"><a id="user-content-lastarg-string-string--null" class="anchor" aria-hidden="true" href="#lastarg-string-string--null"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>last(&lt;arg: String&gt;): STRING | NULL</code></h4>
<p dir="auto">Returns the element at the last of a <code>STRING</code>. If the <code>STRING</code> is empty, return <code>NULL</code> instead.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="last(&quot;123&quot;); # &quot;3&quot;
last(&quot;&quot;); # null"><pre><span class="pl-c1">last</span>(<span class="pl-s"><span class="pl-pds">"</span>123<span class="pl-pds">"</span></span>); <span class="pl-c"><span class="pl-c">#</span> "3"</span>
<span class="pl-c1">last</span>(<span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>); <span class="pl-c"><span class="pl-c">#</span> null</span></pre></div>
<h4 dir="auto"><a id="user-content-lastarg-array-any" class="anchor" aria-hidden="true" href="#lastarg-array-any"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>last(&lt;arg: Array&gt;): any</code></h4>
<p dir="auto">Returns the element at the last of an <code>ARRAY</code>. If the <code>ARRAY</code> is empty, return <code>NULL</code> instead.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="last([0, 1, 2]); # 2
last([]) # null"><pre><span class="pl-c1">last</span>([<span class="pl-c1">0</span>, <span class="pl-c1">1</span>, <span class="pl-c1">2</span>]); <span class="pl-c"><span class="pl-c">#</span> 2</span>
<span class="pl-c1">last</span>([]) <span class="pl-c"><span class="pl-c">#</span> null</span></pre></div>
<h4 dir="auto"><a id="user-content-restarg-string-string--null" class="anchor" aria-hidden="true" href="#restarg-string-string--null"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>rest(&lt;arg: STRING&gt;): STRING | NULL</code></h4>
<p dir="auto">Returns a new <code>STRING</code> with the first element removed. If the <code>STRING</code> is empty, return <code>Null</code> instead.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="rest(&quot;123&quot;); # &quot;23&quot;
rest(&quot;&quot;); # null"><pre><span class="pl-c1">rest</span>(<span class="pl-s"><span class="pl-pds">"</span>123<span class="pl-pds">"</span></span>); <span class="pl-c"><span class="pl-c">#</span> "23"</span>
<span class="pl-c1">rest</span>(<span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>); <span class="pl-c"><span class="pl-c">#</span> null</span></pre></div>
<h4 dir="auto"><a id="user-content-restarg-array-array--null" class="anchor" aria-hidden="true" href="#restarg-array-array--null"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>rest(&lt;arg: ARRAY&gt;): ARRAY | NULL</code></h4>
<p dir="auto">Returns a new <code>ARRAY</code> with the first element removed. If the <code>ARRAY</code> is empty, return <code>NULL</code> instead.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="rest([0, 1, 2]); # [1, 2]
rest([]); # null"><pre><span class="pl-c1">rest</span>([<span class="pl-c1">0</span>, <span class="pl-c1">1</span>, <span class="pl-c1">2</span>]); <span class="pl-c"><span class="pl-c">#</span> [1, 2]</span>
<span class="pl-c1">rest</span>([]); <span class="pl-c"><span class="pl-c">#</span> null</span></pre></div>
<h4 dir="auto"><a id="user-content-pusharg1-array-arg2-array" class="anchor" aria-hidden="true" href="#pusharg1-array-arg2-array"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>push(&lt;arg1: ARRAY&gt;, &lt;arg2&gt;): ARRAY</code></h4>
<p dir="auto">Returns a new <code>ARRAY</code> with the element specified at the end added.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="push([0, 1], 2); # [0, 1, 2]"><pre><span class="pl-c1">push</span>([<span class="pl-c1">0</span>, <span class="pl-c1">1</span>], <span class="pl-c1">2</span>); <span class="pl-c"><span class="pl-c">#</span> [0, 1, 2]</span></pre></div>
<h4 dir="auto"><a id="user-content-pusharg1-hash-arg2-arg3-hash" class="anchor" aria-hidden="true" href="#pusharg1-hash-arg2-arg3-hash"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>push(&lt;arg1: HASH&gt;, &lt;arg2&gt;, &lt;arg3&gt;): HASH</code></h4>
<p dir="auto">Returns a new <code>HASH</code> with <code>arg2: arg3</code> added. If <code>arg2</code> already exists, the value will be updated with <code>arg3</code>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="push({0: 1}, 1, 2); # {1:2, 0:1}
push({0: 1}, 0, 3); # {0:3}"><pre><span class="pl-c1">push</span>({<span class="pl-c1">0</span><span class="pl-k">:</span> <span class="pl-c1">1</span>}, <span class="pl-c1">1</span>, <span class="pl-c1">2</span>); <span class="pl-c"><span class="pl-c">#</span> {1:2, 0:1}</span>
<span class="pl-c1">push</span>({<span class="pl-c1">0</span><span class="pl-k">:</span> <span class="pl-c1">1</span>}, <span class="pl-c1">0</span>, <span class="pl-c1">3</span>); <span class="pl-c"><span class="pl-c">#</span> {0:3}</span></pre></div>
<h3 dir="auto"><a id="user-content-advanced-examples" class="anchor" aria-hidden="true" href="#advanced-examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Advanced examples</h3>
<h4 dir="auto"><a id="user-content-a-custom-map-function" class="anchor" aria-hidden="true" href="#a-custom-map-function"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>A custom <code>map</code> function</h4>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="let map = fn(arr, f) {
  let iter = fn(arr, accumulated) { 
    if (len(arr) == 0) {  
      accumulated 
    } else { 
      iter(rest(arr), push(accumulated, f(first(arr)))); 
    } 
  };

  iter(arr, []);
};

let a = [1, 2, 3, 4];
let double = fn(x) { x * 2};
map(a, double); # [2, 4, 6, 8]"><pre><span class="pl-k">let</span> map <span class="pl-k">=</span> <span class="pl-c1">fn</span>(arr, f) {
  <span class="pl-k">let</span> iter <span class="pl-k">=</span> <span class="pl-c1">fn</span>(arr, accumulated) { 
    <span class="pl-k">if</span> (<span class="pl-c1">len</span>(arr) <span class="pl-k">==</span> <span class="pl-c1">0</span>) {  
      accumulated 
    } <span class="pl-k">else</span> { 
      <span class="pl-c1">iter</span>(<span class="pl-c1">rest</span>(arr), <span class="pl-c1">push</span>(accumulated, <span class="pl-c1">f</span>(<span class="pl-c1">first</span>(arr)))); 
    } 
  };

  <span class="pl-c1">iter</span>(arr, []);
};

<span class="pl-k">let</span> a <span class="pl-k">=</span> [<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">4</span>];
<span class="pl-k">let</span> double <span class="pl-k">=</span> <span class="pl-c1">fn</span>(x) { x <span class="pl-k">*</span> <span class="pl-c1">2</span>};
<span class="pl-c1">map</span>(a, double); <span class="pl-c"><span class="pl-c">#</span> [2, 4, 6, 8]</span></pre></div>
<h4 dir="auto"><a id="user-content-a-custom-reduce-function" class="anchor" aria-hidden="true" href="#a-custom-reduce-function"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>A custom <code>reduce</code> function</h4>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="let reduce = fn(arr, initial, f) {
  let iter = fn(arr, result) {
    if (len(arr) == 0) {
      result
    } else { 
      iter(rest(arr), f(result, first(arr)))
    }
  }

  iter(arr, initial)
}

let sum = fn(arr) { 
  reduce(arr, 0, fn(initial, el) { initial + el })
}

sum([1, 2, 3, 4, 5]); # 15"><pre><span class="pl-k">let</span> reduce <span class="pl-k">=</span> <span class="pl-c1">fn</span>(arr, initial, f) {
  <span class="pl-k">let</span> iter <span class="pl-k">=</span> <span class="pl-c1">fn</span>(arr, result) {
    <span class="pl-k">if</span> (<span class="pl-c1">len</span>(arr) <span class="pl-k">==</span> <span class="pl-c1">0</span>) {
      result
    } <span class="pl-k">else</span> { 
      <span class="pl-c1">iter</span>(<span class="pl-c1">rest</span>(arr), <span class="pl-c1">f</span>(result, <span class="pl-c1">first</span>(arr)))
    }
  }

  <span class="pl-c1">iter</span>(arr, initial)
}

<span class="pl-k">let</span> sum <span class="pl-k">=</span> <span class="pl-c1">fn</span>(arr) { 
  <span class="pl-c1">reduce</span>(arr, <span class="pl-c1">0</span>, <span class="pl-c1">fn</span>(initial, el) { initial <span class="pl-k">+</span> el })
}

<span class="pl-c1">sum</span>([<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">4</span>, <span class="pl-c1">5</span>]); <span class="pl-c"><span class="pl-c">#</span> 15</span></pre></div>
<h3 dir="auto"><a id="user-content-macro-system" class="anchor" aria-hidden="true" href="#macro-system"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Macro System</h3>
<p dir="auto">Now that the <a href="https://interpreterbook.com/lost/" rel="nofollow">Lost Chapter</a> has been implemented, <code>MonkeyLang.jl</code> provides a powerful macro system.</p>
<p dir="auto">Here is an example:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="let unless = macro(condition, consequence, alternative) {
    quote(if (!(unquote(condition))) {
        unquote(consequence);
    } else {
        unquote(alternative);
    });
};

unless(10 &gt; 5, puts(&quot;not greater&quot;), puts(&quot;greater&quot;)); # greater"><pre><span class="pl-k">let</span> unless <span class="pl-k">=</span> <span class="pl-k">macro</span>(condition, consequence, alternative) {
    <span class="pl-c1">quote</span>(<span class="pl-k">if</span> (<span class="pl-k">!</span>(<span class="pl-c1">unquote</span>(condition))) {
        <span class="pl-c1">unquote</span>(consequence);
    } <span class="pl-k">else</span> {
        <span class="pl-c1">unquote</span>(alternative);
    });
};

<span class="pl-c1">unless</span>(<span class="pl-c1">10</span> <span class="pl-k">&gt;</span> <span class="pl-c1">5</span>, <span class="pl-c1">puts</span>(<span class="pl-s"><span class="pl-pds">"</span>not greater<span class="pl-pds">"</span></span>), <span class="pl-c1">puts</span>(<span class="pl-s"><span class="pl-pds">"</span>greater<span class="pl-pds">"</span></span>)); <span class="pl-c"><span class="pl-c">#</span> greater</span></pre></div>
<blockquote>
<p dir="auto">In the REPL, you need to enter all the contents in a single line without <code>\n</code> characters.</p>
</blockquote>
<hr>
<p dir="auto">Enjoy Monkey <g-emoji class="g-emoji" alias="monkey_face" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f435.png">🐵</g-emoji> !</p>
<hr>
</article></div>