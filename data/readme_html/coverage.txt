<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-coveragejl" class="anchor" aria-hidden="true" href="#coveragejl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Coverage.jl</h1>
<p><a href="https://travis-ci.org/JuliaCI/Coverage.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/ae179cc915e46390fd566c01ac9a853319f63570/68747470733a2f2f7472617669732d63692e6f72672f4a756c696143492f436f7665726167652e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaCI/Coverage.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/JuliaCI/coverage-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/d4bb59d279cb798bb9e0b065ae8f98a7376d234a/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f3037666b726e6a37307365766f716e793f7376673d74727565" alt="Build status" data-canonical-src="https://ci.appveyor.com/api/projects/status/07fkrnj70sevoqny?svg=true" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/JuliaCI/Coverage.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/50135e6ef0619a4005e9cce428ae0f55edc3e807/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f4a756c696143492f436f7665726167652e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/JuliaCI/Coverage.jl/badge.svg?branch=master" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/JuliaCI/Coverage.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/0beb625e5b53658ac7d1799b7952cb476627ab2a/68747470733a2f2f636f6465636f762e696f2f67682f4a756c696143492f436f7665726167652e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/JuliaCI/Coverage.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p><strong>"Take Julia code coverage and memory allocation results, do useful things with them"</strong></p>
<p><strong>Code coverage</strong>: Julia can track how many times, if any, each line of your code is run. This is useful for measuring how much of your code base your tests actually test, and can reveal the parts of your code that are not tested and might be hiding a bug. You can use Coverage.jl to summarize the results of this tracking, or to send them to a service like <a href="https://coveralls.io" rel="nofollow">Coveralls.io</a> or <a href="https://codecov.io/github/JuliaCI" rel="nofollow">Codecov.io</a>.</p>
<p><strong>Memory allocation</strong>: Julia can track how much memory is allocated by each line of your code. This can reveal problems like type instability, or operations that you might have thought were cheap (in terms of memory allocated) but aren't (i.e. accidental copying).</p>
<h2><a id="user-content-comparison-of-coverage-packages" class="anchor" aria-hidden="true" href="#comparison-of-coverage-packages"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Comparison of coverage packages</h2>
<ul>
<li><a href="https://github.com/JuliaCI/CoverageTools.jl">CoverageTools.jl</a>: core functionality for processing code coverage and memory allocation results</li>
<li><strong><a href="https://github.com/JuliaCI/Coverage.jl">Coverage.jl</a> (this package): allows you to take coverage results and submit them to online web services such as Codecov.io and Coveralls.io</strong></li>
</ul>
<p>Most users will want to use <a href="https://github.com/JuliaCI/Coverage.jl">Coverage.jl</a>.</p>
<h2><a id="user-content-working-locally" class="anchor" aria-hidden="true" href="#working-locally"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Working locally</h2>
<h3><a id="user-content-code-coverage" class="anchor" aria-hidden="true" href="#code-coverage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Code coverage</h3>
<p><em>Step 1:</em> Navigate to your test directory, and run julia with the <code>--code-coverage</code> option:</p>
<div class="highlight highlight-source-shell"><pre>julia --code-coverage=user
julia --code-coverage=tracefile-%p.info --code-coverage=user  <span class="pl-c"><span class="pl-c">#</span> available in Julia v1.1+</span></pre></div>
<p><em>Step 2:</em> Run your tests (e.g., <code>include("runtests.jl")</code>) and quit Julia. (If you use <code>Pkg.test</code> to run your tests, set the <code>coverage</code> keyword argument to <code>true</code>, i.e. <code>Pkg.test("MyPkg"; coverage=true)</code>.)</p>
<p><em>Step 3:</em> Navigate to the top-level directory of your package, restart Julia (with no special flags) and analyze your code coverage:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> Coverage
<span class="pl-c"><span class="pl-c">#</span> process '*.cov' files</span>
coverage <span class="pl-k">=</span> <span class="pl-c1">process_folder</span>() <span class="pl-c"><span class="pl-c">#</span> defaults to src/; alternatively, supply the folder name as argument</span>
coverage <span class="pl-k">=</span> <span class="pl-c1">append!</span>(coverage, <span class="pl-c1">process_folder</span>(<span class="pl-s"><span class="pl-pds">"</span>deps<span class="pl-pds">"</span></span>))
<span class="pl-c"><span class="pl-c">#</span> process '*.info' files</span>
coverage <span class="pl-k">=</span> <span class="pl-c1">merge_coverage_counts</span>(coverage, <span class="pl-c1">filter!</span>(
    <span class="pl-k">let</span> prefixes <span class="pl-k">=</span> (<span class="pl-c1">joinpath</span>(<span class="pl-c1">pwd</span>(), <span class="pl-s"><span class="pl-pds">"</span>src<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>),
                    <span class="pl-c1">joinpath</span>(<span class="pl-c1">pwd</span>(), <span class="pl-s"><span class="pl-pds">"</span>deps<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>))
        c <span class="pl-k">-&gt;</span> <span class="pl-c1">any</span>(p <span class="pl-k">-&gt;</span> <span class="pl-c1">startswith</span>(c<span class="pl-k">.</span>filename, p), prefixes)
    <span class="pl-k">end</span>,
    LCOV<span class="pl-k">.</span><span class="pl-c1">readfolder</span>(<span class="pl-s"><span class="pl-pds">"</span>test<span class="pl-pds">"</span></span>)))
<span class="pl-c"><span class="pl-c">#</span> Get total coverage for all Julia files</span>
covered_lines, total_lines <span class="pl-k">=</span> <span class="pl-c1">get_summary</span>(coverage)
<span class="pl-c"><span class="pl-c">#</span> Or process a single file</span>
<span class="pl-c1">@show</span> <span class="pl-c1">get_summary</span>(<span class="pl-c1">process_file</span>(<span class="pl-c1">joinpath</span>(<span class="pl-s"><span class="pl-pds">"</span>src<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>MyPkg.jl<span class="pl-pds">"</span></span>)))</pre></div>
<p>The fraction of total coverage is equal to <code>covered_lines/total_lines</code>.</p>
<p>To discover which functions lack testing, browse through the <code>*.cov</code> files in your <code>src/</code>
directory and look for lines starting with <code>-</code> or <code>0</code> - those lines were never executed.
Numbers larger than 0 are counts of the number of times the respective line was executed.</p>
<h3><a id="user-content-memory-allocation" class="anchor" aria-hidden="true" href="#memory-allocation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Memory allocation</h3>
<p>Start julia with</p>
<div class="highlight highlight-source-shell"><pre>julia --track-allocation=user</pre></div>
<p>Then:</p>
<ul>
<li>Run whatever commands you wish to test. This first run is to ensure that everything is compiled (because compilation allocates memory).</li>
<li>Call <code>Profile.clear_malloc_data()</code>)</li>
<li>Run your commands again</li>
<li>Quit julia</li>
</ul>
<p>Finally, navigate to the directory holding your source code. Start julia (without command-line flags), and analyze the results using</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> Coverage
<span class="pl-c1">analyze_malloc</span>(dirnames)  <span class="pl-c"><span class="pl-c">#</span> could be "." for the current directory, or "src", etc.</span></pre></div>
<p>This will return a vector of <code>MallocInfo</code> objects, specifying the number of bytes allocated, the file name, and the line number.
These are sorted in increasing order of allocation size.</p>
<h3><a id="user-content-lcov-export" class="anchor" aria-hidden="true" href="#lcov-export"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>LCOV export</h3>
<p>There are many tools to work with LCOV info-format files as generated by the <code>geninfo</code> tool. Coverage.jl can generate these files:</p>
<div class="highlight highlight-source-julia"><pre>coverage <span class="pl-k">=</span> <span class="pl-c1">process_folder</span>()
LCOV<span class="pl-k">.</span><span class="pl-c1">writefile</span>(<span class="pl-s"><span class="pl-pds">"</span>coverage-lcov.info<span class="pl-pds">"</span></span>, coverage)</pre></div>
<h3><a id="user-content-cleaning-up-cov-files" class="anchor" aria-hidden="true" href="#cleaning-up-cov-files"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Cleaning up .cov files</h3>
<p>When using Coverage.jl locally, over time a lot of <code>.cov</code> files can accumulate. Coverage.jl provides the <code>clean_folder</code> and <code>clean_file</code> methods to either clean up all <code>.cov</code> files in a directory (and subdirectories) or only clean the <code>.cov</code> files associated with a specific source file.</p>
<h2><a id="user-content-tracking-coverage-with-codecovio" class="anchor" aria-hidden="true" href="#tracking-coverage-with-codecovio"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Tracking Coverage with <a href="https://codecov.io" rel="nofollow">Codecov.io</a></h2>
<p><a href="https://codecov.io" rel="nofollow">Codecov.io</a> is a test coverage tracking tool that integrates with your continuous integration servers (e.g. <a href="https://travis-ci.org/" rel="nofollow">TravisCI</a>) or with HTTP POSTs from your very own computer at home.</p>
<ol>
<li>
<p>Enable <a href="https://codecov.io" rel="nofollow">Codecov.io</a> for your repository.</p>
<ul>
<li>If it is public on GitHub and you are using using Travis, CircleCI or
Appveyor, this is all you need to do. You can sign into Codecov using your
Github identity.</li>
<li>Otherwise you will need to define a <code>CODECOV_TOKEN</code> environment variable
with the Repository Upload Token available under the Codecov settings.</li>
</ul>
</li>
<li>
<p>Use the command line option when you run your tests:</p>
<ul>
<li>Either with something like <code>julia --code-coverage test/runtests.jl</code>, or</li>
<li>with something like  <code>julia -e 'Pkg.test("MyPkg", coverage=true)'</code></li>
</ul>
</li>
<li>
<p>Configure your CI service to upload coverage data:</p>
<ul>
<li>
<p>If you are using Travis with <code>language: julia</code>, simply add <code>codecov: true</code>
to your <code>.travis.yml</code>.</p>
</li>
<li>
<p>You can also add the following to the end of your <code>.travis.yml</code>. This
line downloads this package, collects the per-file coverage data, then
bundles it up and submits to Codecov. Coverage.jl assumes that the
working directory is the package directory, so it changes to that first
(so don't forget to replace <code>MyPkg</code> with your package's name!</p>
</li>
<li>
<p>On Travis CI:</p>
<div class="highlight highlight-source-yaml"><pre><span class="pl-ent">after_success</span>:
- <span class="pl-s">julia -e 'using Pkg; Pkg.add("Coverage"); using Coverage; Codecov.submit(process_folder())'</span></pre></div>
</li>
<li>
<p>On AppVeyor:</p>
<div class="highlight highlight-source-yaml"><pre><span class="pl-ent">after_test</span>:
- <span class="pl-s">C:\projects\julia\bin\julia -e "using Pkg; Pkg.add(\"Coverage\"); using Coverage; Codecov.submit(process_folder())"</span></pre></div>
</li>
<li>
<p>If you're running coverage on your own machine and want to upload results
to Codecov, make a bash script like the following:</p>
<div class="highlight highlight-source-shell"><pre><span class="pl-c"><span class="pl-c">#!</span>/bin/bash</span>
CODECOV_TOKEN=<span class="pl-smi">$YOUR_TOKEN_HERE</span> julia -e <span class="pl-s"><span class="pl-pds">'</span>using Pkg; using Coverage; Codecov.submit_local(process_folder())<span class="pl-pds">'</span></span></pre></div>
</li>
</ul>
</li>
</ol>
<h2><a id="user-content-tracking-coverage-with-coverallsio" class="anchor" aria-hidden="true" href="#tracking-coverage-with-coverallsio"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Tracking Coverage with <a href="https://coveralls.io" rel="nofollow">Coveralls.io</a></h2>
<p><a href="https://coveralls.io" rel="nofollow">Coveralls.io</a> is a test coverage tracking tool that integrates with your continuous integration solution (e.g. <a href="https://travis-ci.org/" rel="nofollow">TravisCI</a>).</p>
<ol>
<li>
<p>Enable <a href="https://coveralls.io" rel="nofollow">Coveralls.io</a> for your repository. If it is
public on GitHub and you are using TravisCI, this is all you need to do. If
you are using AppVeyor, you need to add a secure environment variable
called <code>COVERALLS_TOKEN</code> to your <code>.appveyor.yml</code> (see
<a href="https://www.appveyor.com/docs/build-configuration/#secure-variables" rel="nofollow">here</a>).
Your repo token can be found in your Coveralls repo settings. If neither of
these are true, please submit an issue, and we can work on adding
additional functionality for your use case.</p>
</li>
<li>
<p>Activate the <code>--code-coverage</code> command line option when you run your tests</p>
<ul>
<li>Either with something like <code>julia --code-coverage test/runtests.jl</code>, or</li>
<li>with something like  <code>julia -e 'Pkg.test("MyPkg", coverage=true)'</code></li>
</ul>
</li>
<li>
<p>Configure your CI service to upload coverage data:</p>
<ul>
<li>
<p>If you are using Travis with <code>language: julia</code>, simply add <code>coveralls: true</code>
to your <code>.travis.yml</code>.</p>
</li>
<li>
<p>You can also add the following to the end of your <code>.travis.yml</code>. This
line downloads this package, collects the per-file coverage data, then
bundles it up and submits to Coveralls. Coverage.jl assumes that the
working directory is the package directory, so it changes to that first
(so don't forget to replace <code>MyPkg</code> with your package's name!</p>
</li>
<li>
<p>On Travis CI:</p>
<div class="highlight highlight-source-yaml"><pre><span class="pl-ent">after_success</span>:
- <span class="pl-s">julia -e 'using Pkg; Pkg.add("Coverage"); using Coverage; Coveralls.submit(process_folder())'</span></pre></div>
</li>
<li>
<p>On AppVeyor:</p>
<div class="highlight highlight-source-yaml"><pre><span class="pl-ent">after_test</span>:
- <span class="pl-s">C:\projects\julia\bin\julia -e "using Pkg; Pkg.add(\"Coverage\"); using Coverage; Coveralls.submit(process_folder())"</span></pre></div>
</li>
</ul>
</li>
<li>
<p>If you are uploading from multiple jobs, you'll need to tell Coveralls to merge the results after all CI jobs have completed. See <a href="https://docs.coveralls.io/parallel-build-webhook" rel="nofollow">https://docs.coveralls.io/parallel-build-webhook</a> for general instructions.</p>
<p>For Travis, this can be achieved by adding the following to <code>.travis.yml</code>:</p>
<pre><code> env:
   global:
     - COVERALLS_PARALLEL=true
 notifications:
   webhooks: https://coveralls.io/webhook
</code></pre>
</li>
</ol>
<h2><a id="user-content-a-note-for-advanced-users" class="anchor" aria-hidden="true" href="#a-note-for-advanced-users"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>A note for advanced users</h2>
<p>Coverage tracking in Julia is not yet quite perfect. One problem is that (at
least in certain scenarios), the coverage data emitted by Julia does not mark
functions which are never called (and thus are not covered) as code. Thus,
they end up being treated like comments, and are <em>not</em> counted as uncovered
code, even though they clearly are. This can arbitrarily inflate coverage
scores, and in the extreme case could even result in a project showing 100%
coverage even though it contains not a single test.</p>
<p>To overcome this, Coverage.jl applies a workaround which ensures that all
lines of code in all functions of your project are properly marked as "this is
code". This resolves the problem of over reporting coverage.</p>
<p>Unfortunately, this workaround itself can have negative consequences, and lead
to under reporting coverage, for the following reason: when Julia compiles
code with inlining and optimizations, it can happen that some lines of Julia
code do not correspond to any generated machine code; in that case, Julia's
code coverage tracking will never mark these lines as executed, and also won't
mark them as code. One may now argue whether this is a bug in itself or not,
but that's how it is, and normally would be fine -- except that our workaround
now does mark these lines as code, but code which now never has a chance as
being marked as executed.</p>
<p>We may be able to improve our workaround to deal with this better in the
future (see also <a href="https://github.com/JuliaCI/Coverage.jl/pull/188">https://github.com/JuliaCI/Coverage.jl/pull/188</a>), but this
has not yet been done and it is unclear whether it will take care of all
instances. Even better would be if Julia improved the coverage information it
produces to be on par with what e.g. C compilers like GCC and clang produce.
Since it is unclear when or if any of these will happen, we have added an
expert option which allows Julia module owners to disable our workaround code,
by setting the environment variable <code>DISABLE_AMEND_COVERAGE_FROM_SRC</code> to
<code>yes</code>.</p>
<p>For Travis, this can be achieved by adding the following to <code>.travis.yml</code>:</p>
<pre><code>env:
  global:
    - DISABLE_AMEND_COVERAGE_FROM_SRC=yes
</code></pre>
<p>For AppVeyor, add this to <code>.appveyor.yml</code>:</p>
<pre><code>environment:
  DISABLE_AMEND_COVERAGE_FROM_SRC: yes
</code></pre>
<h2><a id="user-content-some-julia-packages-using-coveragejl" class="anchor" aria-hidden="true" href="#some-julia-packages-using-coveragejl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Some Julia packages using Coverage.jl</h2>
<p><em>Pull requests to add your package welcome (or open an issue)</em></p>
<ul>
<li><a href="https://github.com/carlobaldassi/ArgParse.jl">ArgParse.jl</a></li>
<li><a href="https://github.com/giordano/AstroLib.jl">AstroLib.jl</a></li>
<li><a href="https://github.com/ssfrr/AudioIO.jl">AudioIO.jl</a></li>
<li><a href="https://github.com/AugurProject/Augur.jl">Augur.jl</a></li>
<li><a href="https://github.com/julian-gehring/Bootstrap.jl">Bootstrap.jl</a></li>
<li><a href="https://github.com/scheidan/CAIRS.jl">CAIRS.jl</a></li>
<li><a href="https://github.com/Balinus/ClimateTools.jl">ClimateTools.jl</a></li>
<li><a href="https://github.com/pwl/DASSL.jl">DASSL.jl</a></li>
<li><a href="https://github.com/JuliaStats/DataFrames.jl">DataFrames.jl</a></li>
<li><a href="https://github.com/tensorjack/Decimals.jl">Decimals.jl</a></li>
<li><a href="https://github.com/JuliaStats/Distributions.jl">Distributions.jl</a></li>
<li><a href="https://github.com/JuliaDSP/DSP.jl">DSP.jl</a></li>
<li><a href="https://github.com/carlobaldassi/ExtractMacro.jl">ExtractMacro.jl</a></li>
<li><a href="https://github.com/carlobaldassi/FastaIO.jl">FastaIO.jl</a></li>
<li><a href="https://github.com/tensorjack/FiniteStateMachine.jl">FiniteStateMachine.jl</a></li>
<li><a href="https://github.com/FourierFlows/FourierFlows.jl">FourierFlows.jl</a></li>
<li><a href="https://github.com/dcjones/Gadfly.jl">Gadfly.jl</a></li>
<li><a href="https://github.com/skariel/GeometricalPredicates.jl">GeometricalPredicates.jl</a></li>
<li><a href="https://github.com/vtjnash/Glob.jl">Glob.jl</a></li>
<li><a href="https://github.com/svs14/GradientBoost.jl">GradientBoost.jl</a></li>
<li><a href="https://github.com/sbromberger/GraphCentrality.jl">GraphCentrality.jl</a></li>
<li><a href="https://github.com/IainNZ/GraphLayout.jl">GraphLayout.jl</a></li>
<li><a href="https://github.com/JuliaLang/Homebrew.jl">Homebrew.jl</a></li>
<li><a href="https://github.com/JuliaLang/HttpParser.jl">HttpParser.jl</a></li>
<li><a href="https://github.com/BioJulia/IntervalTrees.jl">IntervalTrees.jl</a></li>
<li><a href="https://github.com/sbromberger/IPNets.jl">IPNets.jl</a></li>
<li><a href="https://github.com/tensorjack/JointMoments.jl">JointMoments.jl</a></li>
<li><a href="https://github.com/JuliaOpt/JuMP.jl">JuMP.jl</a></li>
<li><a href="https://github.com/jakebolewski/LibGit2.jl">LibGit2.jl</a></li>
<li><a href="https://github.com/JuliaGraphs/LightGraphs.jl">LightGraphs.jl</a></li>
<li><a href="https://github.com/cdsousa/LinearExpressions.jl">LinearExpressions.jl</a></li>
<li><a href="https://github.com/svs14/Orchestra.jl">Orchestra.jl</a></li>
<li><a href="https://github.com/JuliaLang/ODE.jl">ODE.jl</a></li>
<li><a href="https://github.com/joshday/OnlineStats.jl">OnlineStats.jl</a></li>
<li><a href="https://github.com/JuliaGPU/OpenCL.jl">OpenCL.jl</a></li>
<li><a href="https://github.com/tedsteiner/OpenStreetMap.jl">OpenStreetMap.jl</a></li>
<li><a href="https://github.com/dirkschumacher/PValueAdjust.jl">PValueAdjust.jl</a></li>
<li><a href="https://github.com/spencerlyon2/QuantEcon.jl">QuantEcon.jl</a></li>
<li><a href="https://github.com/vincentarelbundock/QuantileRegression.jl">QuantileRegression.jl</a></li>
<li><a href="https://github.com/IainNZ/RationalSimplex.jl">RationalSimplex.jl</a></li>
<li><a href="https://github.com/joejimbo/RDF.jl">RDF.jl</a></li>
<li><a href="https://github.com/loladiro/Requests.jl">Requests.jl</a></li>
<li><a href="https://github.com/ylxdzsw/Restful.jl">Restful.jl</a></li>
<li><a href="https://github.com/cdsousa/Robotics.jl">Robotics.jl</a></li>
<li><a href="https://github.com/jbn/RouletteWheels.jl">RouletteWheels.jl</a></li>
<li><a href="https://github.com/tk3369/SASLib.jl">SASLib.jl</a></li>
<li><a href="https://github.com/BenLauwens/SimJulia.jl">SimJulia.jl</a></li>
<li><a href="https://github.com/loladiro/SIUnits.jl">SIUnits.jl</a></li>
<li><a href="https://github.com/JuliaStats/StatsBase.jl">StatsBase.jl</a></li>
<li><a href="https://github.com/PerezHz/TaylorIntegration.jl">TaylorIntegration.jl</a></li>
<li><a href="https://github.com/JuliaDiff/TaylorSeries.jl">TaylorSeries.jl</a></li>
<li><a href="https://github.com/carlobaldassi/TextWrap.jl">TextWrap.jl</a></li>
<li><a href="https://github.com/cgroll/TimeData.jl">TimeData.jl</a></li>
<li><a href="https://github.com/astrieanna/TypeCheck.jl">TypeCheck.jl</a></li>
<li><a href="https://github.com/ajkeller34/Unitful.jl">Unitful.jl</a></li>
<li><a href="https://github.com/loladiro/URIParser.jl">URIParser.jl</a></li>
<li><a href="https://github.com/loladiro/URITemplate.jl">URITemplate.jl</a></li>
<li><a href="https://github.com/tchajed/Voting.jl">Voting.jl</a></li>
<li><a href="https://github.com/dancasimiro/WAV.jl">WAV.jl</a></li>
<li><a href="https://github.com/mpastell/Weave.jl">Weave.jl</a></li>
<li><a href="https://github.com/tensorjack/WeightedStats.jl">WeightedStats.jl</a></li>
<li><a href="https://github.com/dcjones/YAML.jl">YAML.jl</a></li>
</ul>
</article></div>