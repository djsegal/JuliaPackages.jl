<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-twofast" class="anchor" aria-hidden="true" href="#twofast"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>TwoFAST</h1>
<p dir="auto"><strong>Master Branch:</strong>
<a href="https://travis-ci.org/hsgg/TwoFAST.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/26819acfe4c368de807965121c2cc8d3de004ab24a1c402d1862adf3f790b865/68747470733a2f2f7472617669732d63692e6f72672f687367672f54776f464153542e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/hsgg/TwoFAST.jl.svg?branch=master" style="max-width: 100%;"></a>
<a href="http://codecov.io/github/hsgg/TwoFAST.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/2766d1395ec7e5b7717b10db8d087691816162729b8bb3db1ee5cccde0746119/687474703a2f2f636f6465636f762e696f2f6769746875622f687367672f54776f464153542e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/hsgg/TwoFAST.jl/coverage.svg?branch=master" style="max-width: 100%;"></a></p>
<p dir="auto"><strong>Next Branch:</strong>
<a href="https://travis-ci.org/hsgg/TwoFAST.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/589b26c65b34aad99838e812765577486677a73428fdad049df47b61dc7448f8/68747470733a2f2f7472617669732d63692e6f72672f687367672f54776f464153542e6a6c2e7376673f6272616e63683d6e657874" alt="Build Status" data-canonical-src="https://travis-ci.org/hsgg/TwoFAST.jl.svg?branch=next" style="max-width: 100%;"></a>
<a href="http://codecov.io/github/hsgg/TwoFAST.jl?branch=next" rel="nofollow"><img src="https://camo.githubusercontent.com/dd424eb794c78eebc9b2caac900dc90dc96ffceb8e114be1c640361a2a3f9910/687474703a2f2f636f6465636f762e696f2f6769746875622f687367672f54776f464153542e6a6c2f636f7665726167652e7376673f6272616e63683d6e657874" alt="codecov.io" data-canonical-src="http://codecov.io/github/hsgg/TwoFAST.jl/coverage.svg?branch=next" style="max-width: 100%;"></a></p>
<p dir="auto">The 2-FAST (<em>2-point function from Fast and Accurate Spherical bessel
Transform</em>) algorithm is implemented here in the <a href="https://julialang.org" rel="nofollow">Julia</a>
programming language. It computes integrals over one and two spherical Bessel
functions as they frequently occur in cosmology.</p>
<p dir="auto">The algorithm is documented in the paper <a href="https://journals.aps.org/prd/abstract/10.1103/PhysRevD.97.023504" rel="nofollow">Fast and Accurate Computation of
Projected Two-point functions</a>,
<a href="https://arxiv.org/abs/1709.02401" rel="nofollow">arXiv link</a>,
<a href="https://ui.adsabs.harvard.edu/abs/2018PhRvD..97b3504G/abstract" rel="nofollow">ADS link</a>.</p>
<p dir="auto">To install in Julia-1.0, press <code>]</code> to enter package mode, and then</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="   pkg&gt; add TwoFAST"><pre>   pkg<span class="pl-k">&gt;</span> add TwoFAST</pre></div>
<h2 dir="auto"><a id="user-content-minimal-example" class="anchor" aria-hidden="true" href="#minimal-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Minimal example</h2>
<p dir="auto">Load the module:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="    using TwoFAST"><pre>    <span class="pl-k">using</span> TwoFAST</pre></div>
<p dir="auto">For both minimal examples we need a power spectrum. For example, we can use the
one in the <code>test/</code> subdirectory of this project:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="    using Dierckx
    using DelimitedFiles
    path = homedir() * &quot;/.julia/packages/TwoFAST/&quot;
    path *= readdir(path)[1]
    path *= &quot;/test/data/planck_base_plikHM_TTTEEE_lowTEB_lensing_post_BAO_H070p6_JLA_matterpower.dat&quot;
    d = readdlm(path, comments=true)
    pk = Spline1D(d[:,1], d[:,2])"><pre>    <span class="pl-k">using</span> Dierckx
    <span class="pl-k">using</span> DelimitedFiles
    path <span class="pl-k">=</span> <span class="pl-c1">homedir</span>() <span class="pl-k">*</span> <span class="pl-s"><span class="pl-pds">"</span>/.julia/packages/TwoFAST/<span class="pl-pds">"</span></span>
    path <span class="pl-k">*=</span> <span class="pl-c1">readdir</span>(path)[<span class="pl-c1">1</span>]
    path <span class="pl-k">*=</span> <span class="pl-s"><span class="pl-pds">"</span>/test/data/planck_base_plikHM_TTTEEE_lowTEB_lensing_post_BAO_H070p6_JLA_matterpower.dat<span class="pl-pds">"</span></span>
    d <span class="pl-k">=</span> <span class="pl-c1">readdlm</span>(path, comments<span class="pl-k">=</span><span class="pl-c1">true</span>)
    pk <span class="pl-k">=</span> <span class="pl-c1">Spline1D</span>(d[:,<span class="pl-c1">1</span>], d[:,<span class="pl-c1">2</span>])</pre></div>
<p dir="auto">To calculate the real-space correlation function, use</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="    N = 1024    # number of points to use in the Fourier transform
    kmax = 1e3  # maximum k-value
    kmin = 1e-5 # minimum k-value
    r0 = 1e-3   # minimum r-value (should be ~1/kmax)

    print(&quot;ξ(r), ℓ=0, ν=0: &quot;)
    r00, xi00 = xicalc(pk, 0, 0; N=N, kmin=kmin, kmax=kmax, r0=r0)

    print(&quot;ξ(r), ℓ=0, ν=-2:&quot;)
    r, xi0m2 = xicalc(pk, 0, -2; N=N, kmin=kmin, kmax=kmax, r0=r0)"><pre>    N <span class="pl-k">=</span> <span class="pl-c1">1024</span>    <span class="pl-c"><span class="pl-c">#</span> number of points to use in the Fourier transform</span>
    kmax <span class="pl-k">=</span> <span class="pl-c1">1e3</span>  <span class="pl-c"><span class="pl-c">#</span> maximum k-value</span>
    kmin <span class="pl-k">=</span> <span class="pl-c1">1e-5</span> <span class="pl-c"><span class="pl-c">#</span> minimum k-value</span>
    r0 <span class="pl-k">=</span> <span class="pl-c1">1e-3</span>   <span class="pl-c"><span class="pl-c">#</span> minimum r-value (should be ~1/kmax)</span>

    <span class="pl-c1">print</span>(<span class="pl-s"><span class="pl-pds">"</span>ξ(r), ℓ=0, ν=0: <span class="pl-pds">"</span></span>)
    r00, xi00 <span class="pl-k">=</span> <span class="pl-c1">xicalc</span>(pk, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>; N<span class="pl-k">=</span>N, kmin<span class="pl-k">=</span>kmin, kmax<span class="pl-k">=</span>kmax, r0<span class="pl-k">=</span>r0)

    <span class="pl-c1">print</span>(<span class="pl-s"><span class="pl-pds">"</span>ξ(r), ℓ=0, ν=-2:<span class="pl-pds">"</span></span>)
    r, xi0m2 <span class="pl-k">=</span> <span class="pl-c1">xicalc</span>(pk, <span class="pl-c1">0</span>, <span class="pl-k">-</span><span class="pl-c1">2</span>; N<span class="pl-k">=</span>N, kmin<span class="pl-k">=</span>kmin, kmax<span class="pl-k">=</span>kmax, r0<span class="pl-k">=</span>r0)</pre></div>
<p dir="auto">To calculate the integrals over two spherical Bessel functions, we first
calculate the Fourier kernels at the highest needed ℓ. This is done with the
structure <code>F21EllCache</code>. Then, we generate the full <em>Mll</em>-cache for each ℓ.
This will automatically store the result in the file <code>out/MlCache/MlCache.bin</code>,
and all related info will be stored in the structure <code>MlCache</code>. Finally, to
actually calculate the <em>wljj</em>-terms we call the function <code>calcwljj()</code>. However,
to store the <em>wljj</em>-terms, we need to create the output arrays, and write a
function, <code>outfunc()</code>, that will store them in the arrays. The function
<code>outfunc()</code> will be called for each ℓ in the array <code>ell</code>. Here's an example:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="    N = 4096
    chi0 = 1e-3
    kmin = 1e-5
    kmax = 1e3
    q = 1.1
    ell = [42]  # only ell=42 for this run
    RR = [0.6, 0.7, 0.8, 0.9, 1.0]

    # calculate M_ll at high ell, result gets saved to a file:
    f21cache = F21EllCache(maximum(ell), RR, N; q=q, kmin=kmin, kmax=kmax, χ0=chi0)
    write(&quot;out/F21EllCache&quot;, f21cache)

    # calculate all M_ll, result gets saved to a file:
    mlcache = MlCache(ell, &quot;out/F21EllCache&quot;, &quot;out/MlCache&quot;)
    write(&quot;out/MlCache&quot;, mlcache)

    # calculate wljj:
    w00 = Array{Float64}(undef, N, length(RR))
    w02 = Array{Float64}(undef, N, length(RR))
    function outfunc(wjj, ell, rr, RR)
        if ell == 42
            w00[:,:] = wjj[1]
            w02[:,:] = wjj[2]
        end
    end
    rr = calcwljj(pk, RR; ell=ell, kmin=kmin, kmax=kmax, N=N, r0=chi0, q=q, outfunc=outfunc, cachefile=&quot;out/MlCache/MlCache.bin&quot;)"><pre>    N <span class="pl-k">=</span> <span class="pl-c1">4096</span>
    chi0 <span class="pl-k">=</span> <span class="pl-c1">1e-3</span>
    kmin <span class="pl-k">=</span> <span class="pl-c1">1e-5</span>
    kmax <span class="pl-k">=</span> <span class="pl-c1">1e3</span>
    q <span class="pl-k">=</span> <span class="pl-c1">1.1</span>
    ell <span class="pl-k">=</span> [<span class="pl-c1">42</span>]  <span class="pl-c"><span class="pl-c">#</span> only ell=42 for this run</span>
    RR <span class="pl-k">=</span> [<span class="pl-c1">0.6</span>, <span class="pl-c1">0.7</span>, <span class="pl-c1">0.8</span>, <span class="pl-c1">0.9</span>, <span class="pl-c1">1.0</span>]

    <span class="pl-c"><span class="pl-c">#</span> calculate M_ll at high ell, result gets saved to a file:</span>
    f21cache <span class="pl-k">=</span> <span class="pl-c1">F21EllCache</span>(<span class="pl-c1">maximum</span>(ell), RR, N; q<span class="pl-k">=</span>q, kmin<span class="pl-k">=</span>kmin, kmax<span class="pl-k">=</span>kmax, χ0<span class="pl-k">=</span>chi0)
    <span class="pl-c1">write</span>(<span class="pl-s"><span class="pl-pds">"</span>out/F21EllCache<span class="pl-pds">"</span></span>, f21cache)

    <span class="pl-c"><span class="pl-c">#</span> calculate all M_ll, result gets saved to a file:</span>
    mlcache <span class="pl-k">=</span> <span class="pl-c1">MlCache</span>(ell, <span class="pl-s"><span class="pl-pds">"</span>out/F21EllCache<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>out/MlCache<span class="pl-pds">"</span></span>)
    <span class="pl-c1">write</span>(<span class="pl-s"><span class="pl-pds">"</span>out/MlCache<span class="pl-pds">"</span></span>, mlcache)

    <span class="pl-c"><span class="pl-c">#</span> calculate wljj:</span>
    w00 <span class="pl-k">=</span> <span class="pl-c1">Array</span><span class="pl-c1">{Float64}</span>(undef, N, <span class="pl-c1">length</span>(RR))
    w02 <span class="pl-k">=</span> <span class="pl-c1">Array</span><span class="pl-c1">{Float64}</span>(undef, N, <span class="pl-c1">length</span>(RR))
    <span class="pl-k">function</span> <span class="pl-en">outfunc</span>(wjj, ell, rr, RR)
        <span class="pl-k">if</span> ell <span class="pl-k">==</span> <span class="pl-c1">42</span>
            w00[:,:] <span class="pl-k">=</span> wjj[<span class="pl-c1">1</span>]
            w02[:,:] <span class="pl-k">=</span> wjj[<span class="pl-c1">2</span>]
        <span class="pl-k">end</span>
    <span class="pl-k">end</span>
    rr <span class="pl-k">=</span> <span class="pl-c1">calcwljj</span>(pk, RR; ell<span class="pl-k">=</span>ell, kmin<span class="pl-k">=</span>kmin, kmax<span class="pl-k">=</span>kmax, N<span class="pl-k">=</span>N, r0<span class="pl-k">=</span>chi0, q<span class="pl-k">=</span>q, outfunc<span class="pl-k">=</span>outfunc, cachefile<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>out/MlCache/MlCache.bin<span class="pl-pds">"</span></span>)</pre></div>
</article></div>