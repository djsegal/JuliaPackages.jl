<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-dynamicprogrammingjl" class="anchor" aria-hidden="true" href="#dynamicprogrammingjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>DynamicProgramming.jl</h1>
<p dir="auto">A Julia package for discrete stochastic dynamic programming.</p>
<table>
<thead>
<tr>
<th align="center"><strong>Build Status</strong></th>
<th align="center"><strong>Coverage</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><a href="https://travis-ci.org/odow/DynamicProgramming.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/9a7b50bb137353ac0ccd43d35c1761cd3da131f6043cf2ac7c33f8ba112f53ac/68747470733a2f2f7472617669732d63692e6f72672f6f646f772f44796e616d696350726f6772616d6d696e672e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/odow/DynamicProgramming.jl.svg?branch=master" style="max-width: 100%;"></a></td>
<td align="center"><a href="https://codecov.io/github/odow/DynamicProgramming.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/febe089aae8754ab6f899a01b7502611aff0357d7c54b0c87864a1c21dcf39ce/68747470733a2f2f636f6465636f762e696f2f6769746875622f6f646f772f44796e616d696350726f6772616d6d696e672e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="Codecov branch" data-canonical-src="https://codecov.io/github/odow/DynamicProgramming.jl/coverage.svg?branch=master" style="max-width: 100%;"></a></td>
</tr>
</tbody>
</table>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">This package is not yet registered. <strong>Until it is, things may change. It is perfectly
usable but should not be considered stable</strong>.</p>
<p dir="auto">You can install it by typing</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; Pkg.add(url=&quot;https://github.com/odow/DynamicProgramming.jl&quot;)"><pre>julia<span class="pl-k">&gt;</span> Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(url<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>https://github.com/odow/DynamicProgramming.jl<span class="pl-pds">"</span></span>)</pre></div>
<h2 dir="auto"><a id="user-content-initialise-model" class="anchor" aria-hidden="true" href="#initialise-model"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Initialise Model</h2>
<p dir="auto">A SDP model is stored in the <code>SDPModel</code> type. A <code>SDPModel</code> can be intialised
using the following <code>SDPModel() do ... end</code> block structure:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="m = SDPModel(
        stages = 1.   # Int
        sense  = :Min # Symbol (:Min or :Max)
    ) do sp, t

        ... problem definition ...

end"><pre>m <span class="pl-k">=</span> <span class="pl-c1">SDPModel</span>(
        stages <span class="pl-k">=</span> <span class="pl-c1">1.</span>   <span class="pl-c"><span class="pl-c">#</span> Int</span>
        sense  <span class="pl-k">=</span> <span class="pl-c1">:Min</span> <span class="pl-c"><span class="pl-c">#</span> Symbol (:Min or :Max)</span>
    ) <span class="pl-k">do</span> sp, t

        <span class="pl-k">...</span> problem definition <span class="pl-k">...</span>

<span class="pl-k">end</span></pre></div>
<p dir="auto"><code>sp</code> can be given any name but refers to the <em>stage problem</em>. <code>t</code> can also be
given any name, but refers to an index that runs from <code>1</code> to <code>T</code> where <code>T</code> is
the number of stages.</p>
<p dir="auto">Inside the <code>SDPModel</code> definition, we define our subproblems. We first need to
add some state variables, some control (or action) variables, and some noise (or
stochastic) variables.</p>
<h2 dir="auto"><a id="user-content-initialise-variables" class="anchor" aria-hidden="true" href="#initialise-variables"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Initialise Variables</h2>
<p dir="auto">States can be added with the following macro:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@states(sp, begin
    x in linspace(0, 1, 10)
end)"><pre><span class="pl-c1">@states</span>(sp, <span class="pl-k">begin</span>
    x <span class="pl-k">in</span> <span class="pl-c1">linspace</span>(<span class="pl-c1">0</span>, <span class="pl-c1">1</span>, <span class="pl-c1">10</span>)
<span class="pl-k">end</span>)</pre></div>
<p dir="auto">This creates a state variable <code>x</code> that is discretised into the set
<code>linspace(0, 1, 10)</code>. Note that currently, all state dimensions get converted
into <code>Float64</code> representations. The discretisation should be any type that can
be converted to a <code>Vector{Float64}</code> type.</p>
<p dir="auto">Controls can be added with the <code>@controls</code> macro that has similar syntax.
However there is less restriction on the type. The discretisation should just be
an iterable subtype of <code>AbstractVector</code>.</p>
<p dir="auto">Noise (or stochastic variables) can be added with the <code>@noises</code> macro:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@noises(sp, begin
    u in DiscreteDistribution([1,2,3], [0.5, 0.25, 0.25])
    v in 1:10
end)"><pre><span class="pl-c1">@noises</span>(sp, <span class="pl-k">begin</span>
    u <span class="pl-k">in</span> <span class="pl-c1">DiscreteDistribution</span>([<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>], [<span class="pl-c1">0.5</span>, <span class="pl-c1">0.25</span>, <span class="pl-c1">0.25</span>])
    v <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>
<span class="pl-k">end</span>)</pre></div>
<p dir="auto">In contrast to the other two macros, there is a slight subtlety. The
discretisations can either be subtypes of <code>AbstractVector</code> (in which case their
realisations are assumed to be uniformly sampled), or a <code>DiscreteDistribution</code>.</p>
<p dir="auto">The <code>DiscreteDistribution</code> constructor is
<code>DiscreteDistribution(observations::AbstractVector, probability::AbstractVector)</code>.
This realisations <code>observations</code> are sampled with probability <code>probability</code>.</p>
<p dir="auto">If more than one noise is defined, then the multiple noises are assumed to be
independent.</p>
<h2 dir="auto"><a id="user-content-dynamics" class="anchor" aria-hidden="true" href="#dynamics"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Dynamics</h2>
<p dir="auto">You must provide a function that takes four inputs.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="function foo(states_out, states, controls, noises)
end"><pre><span class="pl-k">function</span> <span class="pl-en">foo</span>(states_out, states, controls, noises)
<span class="pl-k">end</span></pre></div>
<p dir="auto">However, we prefer the anonymous function syntax:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="dynamics!(sp) do y, x, u, w
        ... definitions ...
end"><pre><span class="pl-c1">dynamics!</span>(sp) <span class="pl-k">do</span> y, x, u, w
        <span class="pl-k">...</span> definitions <span class="pl-k">...</span>
<span class="pl-k">end</span></pre></div>
<p dir="auto">This anonymous function must take the current state <code>x</code>,  a control <code>u</code> and a
noise <code>w</code> and update the new state <code>y</code>.</p>
<p dir="auto">You can refer to model variables using the <code>[]</code> indexing operator. For example,
if we defined a state variable <code>quantity</code>, we could refer it as <code>x[quantity]</code>.</p>
<p dir="auto">By thinking about variable scopes it is possible to encapsulate all the
necessary data into this syntax.</p>
<p dir="auto"><strong>Important:</strong> the function should return a single <code>Float64</code> value corresponding
to the cost (or profit) accrued in the current stage.</p>
<h2 dir="auto"><a id="user-content-terminal-objective" class="anchor" aria-hidden="true" href="#terminal-objective"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Terminal Objective</h2>
<p dir="auto">The terminal objective function takes as input a vector of the final state at
the end of the finite time horizon. It returns a single <code>Float64</code> value
corresponding to the cost (or profit) of ending in that state.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="terminalobjective!(sp) do x
        ... definitions ...
end"><pre><span class="pl-c1">terminalobjective!</span>(sp) <span class="pl-k">do</span> x
        <span class="pl-k">...</span> definitions <span class="pl-k">...</span>
<span class="pl-k">end</span></pre></div>
<h2 dir="auto"><a id="user-content-constraints" class="anchor" aria-hidden="true" href="#constraints"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Constraints</h2>
<p dir="auto">The constraints function takes as input vectors for the initial state, control
and noise. It should return a single <code>Bool</code> value indicating if the state,
control, noise combination is feasible. Typically this can be implemented by a
chained series of boolean comparisons.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="constraints!(sp) do x, u, w
        ... definitions ...
end"><pre><span class="pl-c1">constraints!</span>(sp) <span class="pl-k">do</span> x, u, w
        <span class="pl-k">...</span> definitions <span class="pl-k">...</span>
<span class="pl-k">end</span></pre></div>
<h2 dir="auto"><a id="user-content-solve" class="anchor" aria-hidden="true" href="#solve"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Solve</h2>
<p dir="auto">The <code>solve</code> function takes as input the initalised <code>SDPModel</code> object, as well as
two keyword arguments.</p>
<p dir="auto">The <code>realisation</code> must be one of <code>WaitAndSee</code>, <code>HereAndNow</code> or <code>ExpectedValue</code>.</p>
<p dir="auto">The <code>WaitAndSee</code> model observes the noise before choosing the optimal control.
The <code>HereAndNow</code> model chooses the best control before observing the noise.
The <code>ExpectedValue</code> model substitutes the noise for the expected value of each
independent noise.</p>
<p dir="auto">The <code>riskmeasure</code> is a nested <code>λE[x] + (1-λ)CVaRᵦ[x]</code>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="solve(m::SDPModel,
    realisation=WaitAndSee,
    riskmeasure=NestedCVaR(beta=0.5, lambda=0.5)
)"><pre><span class="pl-c1">solve</span>(m<span class="pl-k">::</span><span class="pl-c1">SDPModel</span>,
    realisation<span class="pl-k">=</span>WaitAndSee,
    riskmeasure<span class="pl-k">=</span><span class="pl-c1">NestedCVaR</span>(beta<span class="pl-k">=</span><span class="pl-c1">0.5</span>, lambda<span class="pl-k">=</span><span class="pl-c1">0.5</span>)
)</pre></div>
<h2 dir="auto"><a id="user-content-simulate" class="anchor" aria-hidden="true" href="#simulate"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Simulate</h2>
<p dir="auto">Once a <code>SDPModel</code> has been solved, it is possible to simulate the performance of
the policy using the function <code>simulate(m::SDPModel, N::Int; kwargs...)</code>.
<code>m</code> is the solved <code>SDPModel</code> to be simulated. <code>N</code> is the number of realisations
to perform. Initial values for the state variables are given via the keyword
arguments.</p>
<p dir="auto">For example:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="results = simulate(m,
    500,
    contracts  = 0,
    price      = 4.5,
    production = 0.
)"><pre>results <span class="pl-k">=</span> <span class="pl-c1">simulate</span>(m,
    <span class="pl-c1">500</span>,
    contracts  <span class="pl-k">=</span> <span class="pl-c1">0</span>,
    price      <span class="pl-k">=</span> <span class="pl-c1">4.5</span>,
    production <span class="pl-k">=</span> <span class="pl-c1">0.</span>
)</pre></div>
<h2 dir="auto"><a id="user-content-visualise" class="anchor" aria-hidden="true" href="#visualise"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Visualise</h2>
<p dir="auto">It is possible to create an interactive visualisation of the simulated policy
with the <code>@visualise</code> macro. The following keywords should be wrapped with
parentheses.</p>
<ul dir="auto">
<li><code>"cumulative"  = false</code> Plot the cumulation of the variable over stages</li>
<li><code>"title"       = ""</code> Plot title</li>
<li><code>"xlabel"      = "Stages"</code> Label for x axis</li>
<li><code>"ylabel"      = ""</code> Label for y axis</li>
<li><code>"interpolate" = "linear"</code> D3.js interpolation method to use. See the <a href="https://github.com/d3/d3/wiki/SVG-Shapes#line_interpolate">D3 wiki</a> for more.</li>
</ul>
<p dir="auto">The following example gives an example of possible syntax:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@visualise(results, stage, replication, begin
    results[:Current][stage][replication],  (title=&quot;Accumulated Profit&quot;, ylabel=&quot;Accumulated Profit (\$)&quot;, cumulative=true)
    results[:x][stage][replication],    (title=&quot;Value of a State&quot;, ylabel=&quot;Level&quot;)
    results[:u][stage][replication],    (title=&quot;Value of a Control&quot;)
    results[:w][stage][replication],    (title=&quot;Value of a Noise&quot;, interpolate=&quot;step&quot;)
end)"><pre><span class="pl-c1">@visualise</span>(results, stage, replication, <span class="pl-k">begin</span>
    results[<span class="pl-c1">:Current</span>][stage][replication],  (title<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Accumulated Profit<span class="pl-pds">"</span></span>, ylabel<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Accumulated Profit (<span class="pl-cce">\$</span>)<span class="pl-pds">"</span></span>, cumulative<span class="pl-k">=</span><span class="pl-c1">true</span>)
    results[<span class="pl-c1">:x</span>][stage][replication],    (title<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Value of a State<span class="pl-pds">"</span></span>, ylabel<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Level<span class="pl-pds">"</span></span>)
    results[<span class="pl-c1">:u</span>][stage][replication],    (title<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Value of a Control<span class="pl-pds">"</span></span>)
    results[<span class="pl-c1">:w</span>][stage][replication],    (title<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Value of a Noise<span class="pl-pds">"</span></span>, interpolate<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>step<span class="pl-pds">"</span></span>)
<span class="pl-k">end</span>)</pre></div>
</article></div>