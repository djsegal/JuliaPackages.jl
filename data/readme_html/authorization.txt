<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-authorizationjl" class="anchor" aria-hidden="true" href="#authorizationjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Authorization.jl</h1>
<p>A small but flexible API for controlling an <strong>authenticated</strong> client's access to resources.</p>
<p>Some use cases are listed at the bottom of this README.</p>
<h2><a id="user-content-resources" class="anchor" aria-hidden="true" href="#resources"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Resources</h2>
<p>All resources (subtypes of <code>AbstractResource</code>) have an <code>id</code>.
Resources may also have fields other than <code>id</code>.</p>
<h2><a id="user-content-clients" class="anchor" aria-hidden="true" href="#clients"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Clients</h2>
<p>A client is a type (subtype of <code>AbstractClient</code>) that represents an entity wishing to access some resources.
Clients may represent users, web apps, data storage clients, etc.</p>
<h2><a id="user-content-permissions" class="anchor" aria-hidden="true" href="#permissions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Permissions</h2>
<p>A client's access to a resource is determined by its <code>Permission</code> for the resource.
The <code>Permission</code> type is defined as:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="struct Permission
    create::Bool
    read::Bool
    update::Bool
    delete::Bool
    expiry::DateTime
end
"><pre><span class="pl-k">struct</span> Permission
    create<span class="pl-k">::</span><span class="pl-c1">Bool</span>
    read<span class="pl-k">::</span><span class="pl-c1">Bool</span>
    update<span class="pl-k">::</span><span class="pl-c1">Bool</span>
    delete<span class="pl-k">::</span><span class="pl-c1">Bool</span>
    expiry<span class="pl-k">::</span><span class="pl-c1">DateTime</span>
<span class="pl-k">end</span></pre></div>
<p>Permissions created without an expiry are given an (almost) infinite expiry.</p>
<p>A client can loosely be thought of as a mapping from resources to <code>Permission</code>s.</p>
<p>More precisely, the mapping is a hierarchy of 3 maps.</p>
<p>As we move up the hierarchy:</p>
<ul>
<li>Each level maps a smaller set of resources to permissions than the previous level.</li>
<li>The permissions override those specified at the previous level.</li>
</ul>
<p>The levels are:</p>
<ol>
<li>
<p>At the bottom of the hierarchy is the map from resource type to permission.
This allows the same permission to be applied to all resources with the same type.
For example a client may have read-only access to the entire local system.
In this case the resources are directories and files and the associated permission is <code>Permission(false, true, false, false, expiry)</code>.</p>
</li>
<li>
<p>In the middle of the hierarchy is the map from resource ID pattern (<code>Regex</code>s) to permission.
This mapping overrides the permissions specified in the type-to-permission mapping.
Continuing our file system example, the same client could also have write access to a particular directory using this mapping.</p>
</li>
<li>
<p>At the top of the hierarchy is the map from resource ID to permission.
This mapping allows access control for specific resources.</p>
</li>
</ol>
<p>This framework allows both fine-grained and somewhat coarse access control within the same client, provided the permissions don't conflict within a level of the hierarchy (test for conflicts via <code>permissions_conflict(client, resourceid)</code>).</p>
<p>Here's a quick sample of the API:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="# Allow cRud (read-only) access without expiry to resources with type resource_type
setpermission!(client, resource_type, Permission(false, true, false, false))

# Allow CRUD (read/write) access for 5 minutes to resources with IDs starting with &quot;mycollection/&quot;
setpermission!(client, r&quot;mycollection/*&quot;, Permission(true, true, true, true, now() + Minute(5)))

p = getpermission(client, resource)  # Get the permission settings for the specific resource
setexpiry!(client, now() + Hour(1))  # Set an expiry for all the resources that the client has access to

haspermission(client, resource, :create)    # True if the client has :create access to the resource
permissions_conflict(client, &quot;myresource&quot;)  # True if the rules that define the client's access to the resource with ID &quot;myresource&quot; conflict
"><pre><span class="pl-c"><span class="pl-c">#</span> Allow cRud (read-only) access without expiry to resources with type resource_type</span>
<span class="pl-c1">setpermission!</span>(client, resource_type, <span class="pl-c1">Permission</span>(<span class="pl-c1">false</span>, <span class="pl-c1">true</span>, <span class="pl-c1">false</span>, <span class="pl-c1">false</span>))

<span class="pl-c"><span class="pl-c">#</span> Allow CRUD (read/write) access for 5 minutes to resources with IDs starting with "mycollection/"</span>
<span class="pl-c1">setpermission!</span>(client, <span class="pl-sr"><span class="pl-pds">r"</span>mycollection/*<span class="pl-pds">"</span></span>, <span class="pl-c1">Permission</span>(<span class="pl-c1">true</span>, <span class="pl-c1">true</span>, <span class="pl-c1">true</span>, <span class="pl-c1">true</span>, <span class="pl-c1">now</span>() <span class="pl-k">+</span> <span class="pl-c1">Minute</span>(<span class="pl-c1">5</span>)))

p <span class="pl-k">=</span> <span class="pl-c1">getpermission</span>(client, resource)  <span class="pl-c"><span class="pl-c">#</span> Get the permission settings for the specific resource</span>
<span class="pl-c1">setexpiry!</span>(client, <span class="pl-c1">now</span>() <span class="pl-k">+</span> <span class="pl-c1">Hour</span>(<span class="pl-c1">1</span>))  <span class="pl-c"><span class="pl-c">#</span> Set an expiry for all the resources that the client has access to</span>

<span class="pl-c1">haspermission</span>(client, resource, <span class="pl-c1">:create</span>)    <span class="pl-c"><span class="pl-c">#</span> True if the client has :create access to the resource</span>
<span class="pl-c1">permissions_conflict</span>(client, <span class="pl-s"><span class="pl-pds">"</span>myresource<span class="pl-pds">"</span></span>)  <span class="pl-c"><span class="pl-c">#</span> True if the rules that define the client's access to the resource with ID "myresource" conflict</span></pre></div>
<h2><a id="user-content-accessing-resources" class="anchor" aria-hidden="true" href="#accessing-resources"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Accessing Resources</h2>
<p>Use <code>haspermission(client, resource, action)</code> to determine whether the client has permission to act on the resource (create/read/update/delete).
Here the <code>action</code> is one of <code>:create</code>, <code>:read</code>, <code>:update</code>, <code>:delete</code>.</p>
<p>This package also provides <code>create!</code>, <code>read</code>, <code>update!</code> and <code>delete!</code>.
Each has the same signature, namely <code>(client, resource, args...)</code>.
Each works as follows:</p>
<ul>
<li>Check whether the client has permission to act on the resource.
<ul>
<li>If so, act on the resource.
<ul>
<li>If all is well, return <code>nothing</code> when creating/updating/deleting, and return <code>(true, value)</code> when reading</li>
<li>Else return an error message when creating/updating/deleting, and return <code>(false, error message)</code> when reading</li>
</ul>
</li>
<li>Else return an error message when creating/updating/deleting, and return <code>(false, error message)</code> when reading</li>
</ul>
</li>
</ul>
<h2><a id="user-content-use-cases" class="anchor" aria-hidden="true" href="#use-cases"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Use Cases</h2>
<h3><a id="user-content-object-storage" class="anchor" aria-hidden="true" href="#object-storage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Object Storage</h3>
<p>In object storage, data is stored as objects and objects are grouped into buckets.
The <a href="https://github.com/JockLawrie/ObjectStores.jl">ObjectStores</a> package defines a common API for object storage that allows the storage back-end to be swapped without changing any code.</p>
<p>Examples of object stores include:</p>
<ul>
<li><a href="https://github.com/JockLawrie/LocalDiskObjectStores.jl">LocalDiskObjectStores.jl</a>, which uses the local file system to store objects (files) in buckets (directories).</li>
<li><a href="https://github.com/JockLawrie/GoogleCloudObjectStores.jl">GoogleCloudObjectStores.jl</a>, which uses Google Cloud Storage as the storage back-end.</li>
</ul>
<p>This authorization framework is used to control access to buckets and objects.</p>
<h3><a id="user-content-web-app-authorization" class="anchor" aria-hidden="true" href="#web-app-authorization"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Web app authorization</h3>
<p>Authorization.jl can be used to implement web-app sessions.</p>
<p>Suppose a user's access is determined by his/her subscription to an app.</p>
<p>Then, for example, <code>setpermission!(client, App, permission)</code> sets permissions for all resources related to the app with type <code>App</code>.
Also, <code>setexpiry(client, expiry)</code> can be used to set an expiry on all resources to which the client has access.
The client can then be used as the session object.
When a request comes in, the client and requested resource can be identified from the request (and perhaps server state).
Determining whether the client has permission to access the resource is then a matter of calling <code>haspermission</code>.</p>
<h2><a id="user-content-developing-a-new-client" class="anchor" aria-hidden="true" href="#developing-a-new-client"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Developing a new client</h2>
<p>If you are developing a new client for some resources and would like to use this framework:</p>
<ol>
<li>
<p>Ensure that the type of your client is a subtype of <code>AbstractClient</code>.
Concrete subtypes are required to include some mandatory fields - see the <code>AbstractClient</code> dosctring.
You can also include fields that are specific to your client type.</p>
</li>
<li>
<p>Similarly, ensure that the types of your resources are subtypes of <code>AbstractResource</code>.
Also ensure that your concrete subtypes of <code>AbstractResource</code> have an <code>id::String</code> field.</p>
</li>
</ol>
</article></div>