<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-meanfilters" class="anchor" aria-hidden="true" href="#meanfilters"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>MeanFilters</h1>
<p dir="auto"><a href="https://github.com/jw3126/MeanFilters.jl/actions"><img src="https://github.com/jw3126/MeanFilters.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/jw3126/MeanFilters.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/51acf2871f8c8bafa408c17c543d077b7940f06679d4bd63e7dd9a427f0cb9c1/68747470733a2f2f636f6465636f762e696f2f67682f6a77333132362f4d65616e46696c746572732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/jw3126/MeanFilters.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">The goal of this package is to solve one very narrow problem: compute the mean over a sliding window:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using MeanFilters: meanfilter

julia&gt; meanfilter([1,2,3,4], (-1:1,))
4-element Vector{Float64}:
 1.5
 2.0
 3.0
 3.5

julia&gt; meanfilter([1 2 3; 4 5 6], (0:0,-1:1))
2×3 Matrix{Float64}:
 1.5  2.0  2.5
 4.5  5.0  5.5"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> MeanFilters<span class="pl-k">:</span> meanfilter

julia<span class="pl-k">&gt;</span> <span class="pl-c1">meanfilter</span>([<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>,<span class="pl-c1">4</span>], (<span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">1</span>,))
<span class="pl-c1">4</span><span class="pl-k">-</span>element Vector{Float64}<span class="pl-k">:</span>
 <span class="pl-c1">1.5</span>
 <span class="pl-c1">2.0</span>
 <span class="pl-c1">3.0</span>
 <span class="pl-c1">3.5</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">meanfilter</span>([<span class="pl-c1">1</span> <span class="pl-c1">2</span> <span class="pl-c1">3</span>; <span class="pl-c1">4</span> <span class="pl-c1">5</span> <span class="pl-c1">6</span>], (<span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">0</span>,<span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">1</span>))
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">3</span> Matrix{Float64}<span class="pl-k">:</span>
 <span class="pl-c1">1.5</span>  <span class="pl-c1">2.0</span>  <span class="pl-c1">2.5</span>
 <span class="pl-c1">4.5</span>  <span class="pl-c1">5.0</span>  <span class="pl-c1">5.5</span></pre></div>
<p dir="auto">In most cases you likely want to use <a href="https://github.com/JuliaImages/ImageFiltering.jl">ImageFiltering.jl</a> instead. Advantages of this package over <a href="https://github.com/JuliaImages/ImageFiltering.jl">ImageFiltering.jl</a> are:</p>
<ul dir="auto">
<li>Tiny dependency</li>
<li>Specialized algorithm for mean, which has decent performance for large windows:</li>
</ul>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using ImageFiltering
using BenchmarkTools
using MeanFilters

arr = randn(1000, 1000)
window = (-50:50, -20:20)
ker = fill(1/prod(length, window), window...)
out1 = @btime imfilter(arr, ker, NA())
out2 = @btime meanfilter(arr, window)
@assert out1 ≈ out2"><pre><span class="pl-k">using</span> ImageFiltering
<span class="pl-k">using</span> BenchmarkTools
<span class="pl-k">using</span> MeanFilters

arr <span class="pl-k">=</span> <span class="pl-c1">randn</span>(<span class="pl-c1">1000</span>, <span class="pl-c1">1000</span>)
window <span class="pl-k">=</span> (<span class="pl-k">-</span><span class="pl-c1">50</span><span class="pl-k">:</span><span class="pl-c1">50</span>, <span class="pl-k">-</span><span class="pl-c1">20</span><span class="pl-k">:</span><span class="pl-c1">20</span>)
ker <span class="pl-k">=</span> <span class="pl-c1">fill</span>(<span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-c1">prod</span>(length, window), window<span class="pl-k">...</span>)
out1 <span class="pl-k">=</span> <span class="pl-c1">@btime</span> <span class="pl-c1">imfilter</span>(arr, ker, <span class="pl-c1">NA</span>())
out2 <span class="pl-k">=</span> <span class="pl-c1">@btime</span> <span class="pl-c1">meanfilter</span>(arr, window)
<span class="pl-c1">@assert</span> out1 <span class="pl-k">≈</span> out2</pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="  45.249 ms (443 allocations: 109.50 MiB)
  3.074 ms (247 allocations: 15.28 MiB)"><pre class="notranslate"><code>  45.249 ms (443 allocations: 109.50 MiB)
  3.074 ms (247 allocations: 15.28 MiB)
</code></pre></div>
</article></div>