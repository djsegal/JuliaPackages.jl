<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-chooseoptimizer" class="anchor" aria-hidden="true" href="#chooseoptimizer"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>ChooseOptimizer</h1>
<p><a href="https://travis-ci.com/scheinerman/ChooseOptimizer.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/d920f9b4a40bbf65d72f2f5ec68f7b4abe38006bf410ba19eabc1d0a8ad91ab2/68747470733a2f2f7472617669732d63692e636f6d2f73636865696e65726d616e2f43686f6f73654f7074696d697a65722e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/scheinerman/ChooseOptimizer.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p>This module is a tool to select different optimization engines.</p>
<p>Many of my modules rely on integer linear programming and use <code>JuMP</code>
and the like to solve the ILPs. This module makes switching between
different optimization engines easier.</p>
<h2><a id="user-content-selecting-and-using-a-solver" class="anchor" aria-hidden="true" href="#selecting-and-using-a-solver"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Selecting and using a solver</h2>
<p>The <code>set_solver</code> function is used to select the optimization package
desired. Without any arguments it selects the <code>Cbc</code> optimizer. Otherwise,
<code>set_solver(NAME)</code> is used to choose the desired optimizer, e.g.,
<code>set_solver(Gurobi)</code>. (For this to work, this must follow
<code>using Gurboi</code>.)</p>
<p>The function <code>get_solver</code> is a replacement for <code>JuMP</code>'s
<code>with_solver</code> function. Instead of this:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="MOD = Model(with_solver(Cbc.Optimizer))
"><pre><code>MOD = Model(with_solver(Cbc.Optimizer))
</code></pre></div>
<p>we do this:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="MOD = Model(get_solver())
"><pre><code>MOD = Model(get_solver())
</code></pre></div>
<h2><a id="user-content-selecting-and-using-solver-options" class="anchor" aria-hidden="true" href="#selecting-and-using-solver-options"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Selecting and using solver options</h2>
<p>Solver options can be set up using these functions:</p>
<ul>
<li><code>set_solver_options(kwd, val)</code> adds the option whose name is
given by the symbol <code>kwd</code> to be the value <code>val</code>. To add several
options, use this several times.</li>
<li><code>set_solver_options(d::Dict)</code> adds all the key/value entries
in <code>d</code> as options by repeated calls to <code>set_solver_options(key,value)</code>.</li>
<li><code>clear_solver_options()</code> erases all solver options.</li>
<li><code>get_solver_options()</code> returns a dictionary of the options that
are currently set.</li>
</ul>
<p>When a <code>JuMP</code> model is created using <code>Model(get_solver())</code> the
options are passed along.</p>
<p>Note that each call to <code>get_solver</code> clears all options.</p>
<h4><a id="user-content-verbose-output" class="anchor" aria-hidden="true" href="#verbose-output"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Verbose output</h4>
<p>The <code>set_solver_verbose()</code> function can be used to tell the solver to
be verbose in its operation. Alternatively, <code>set_solver_verbose(false)</code>
suppresses output.</p>
<p>The action of <code>set_solver_verbose</code> is through <code>set_solver_options</code>.</p>
<p>At present, this function only knows how to do this for the <code>Cbc</code>, <code>GLPK</code>, and
<code>Gurobi</code> optimizers.</p>
</article></div>