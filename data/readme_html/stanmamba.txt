<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-stanmamba" class="anchor" aria-hidden="true" href="#stanmamba"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>StanMamba</h1>
<p><a href="https://travis-ci.org/StanJulia/StanMamba.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/53978894bb4d80f8a51fa8910e3be887cbb17df04baf232c1ed3efbdcc6f6aeb/68747470733a2f2f7472617669732d63692e6f72672f5374616e4a756c69612f5374616e4d616d62612e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/StanJulia/StanMamba.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p><a href="https://coveralls.io/github/StanJulia/StanMamba.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/a9d38c948fd51ca0d2e8470c4bfa651fa6e62780b3b282a6b688d18e12f17c6d/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f5374616e4a756c69612f5374616e4d616d62612e6a6c2f62616467652e7376673f6272616e63683d6d617374657226736572766963653d676974687562" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/StanJulia/StanMamba.jl/badge.svg?branch=master&amp;service=github" style="max-width:100%;"></a></p>
<p><a href="http://codecov.io/github/StanJulia/StanMamba.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/7f6d0178a3d4717d214a2470e822025e41babed00fb30d6a40ec71573505a2f5/687474703a2f2f636f6465636f762e696f2f6769746875622f5374616e4a756c69612f5374616e4d616d62612e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/StanJulia/StanMamba.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
<h1><a id="user-content-introduction" class="anchor" aria-hidden="true" href="#introduction"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Introduction</h1>
<p>StanMamba generates a Mamba.Chains object from the draws generated by CmdStan.</p>
<h2><a id="user-content-example-usage" class="anchor" aria-hidden="true" href="#example-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example usage</h2>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="using CmdStan, StanMamba, Test, Statistics

ProjDir = dirname(@__FILE__)
cd(ProjDir) do

  bernoullimodel = &quot;
  data { 
    int&lt;lower=1&gt; N; 
    int&lt;lower=0,upper=1&gt; y[N];
  } 
  parameters {
    real&lt;lower=0,upper=1&gt; theta;
  } 
  model {
    theta ~ beta(1,1);
    y ~ bernoulli(theta);
  }
  &quot;

  observeddata = [
    Dict(&quot;N&quot; =&gt; 10, &quot;y&quot; =&gt; [0, 1, 0, 1, 0, 0, 0, 0, 0, 1]),
    Dict(&quot;N&quot; =&gt; 10, &quot;y&quot; =&gt; [0, 1, 0, 0, 0, 0, 1, 0, 0, 1]),
    Dict(&quot;N&quot; =&gt; 10, &quot;y&quot; =&gt; [0, 0, 0, 0, 0, 0, 1, 0, 1, 1]),
    Dict(&quot;N&quot; =&gt; 10, &quot;y&quot; =&gt; [0, 0, 0, 1, 0, 0, 0, 1, 0, 1])
  ]

  global stanmodel, rc, chains, cnames
  stanmodel = Stanmodel(num_samples=1200, thin=2, name=&quot;bernoulli&quot;, 
    model=bernoullimodel, output_format=:mambachains);

  rc, chains, cnames = stan(stanmodel, observeddata, ProjDir, diagnostics=false,
    CmdStanDir=CMDSTAN_HOME);
    
  @test 0.1 &lt;  mean(chains.value[:, 8, :] ) &lt; 0.6

end # cd

"><pre><code>using CmdStan, StanMamba, Test, Statistics

ProjDir = dirname(@__FILE__)
cd(ProjDir) do

  bernoullimodel = "
  data { 
    int&lt;lower=1&gt; N; 
    int&lt;lower=0,upper=1&gt; y[N];
  } 
  parameters {
    real&lt;lower=0,upper=1&gt; theta;
  } 
  model {
    theta ~ beta(1,1);
    y ~ bernoulli(theta);
  }
  "

  observeddata = [
    Dict("N" =&gt; 10, "y" =&gt; [0, 1, 0, 1, 0, 0, 0, 0, 0, 1]),
    Dict("N" =&gt; 10, "y" =&gt; [0, 1, 0, 0, 0, 0, 1, 0, 0, 1]),
    Dict("N" =&gt; 10, "y" =&gt; [0, 0, 0, 0, 0, 0, 1, 0, 1, 1]),
    Dict("N" =&gt; 10, "y" =&gt; [0, 0, 0, 1, 0, 0, 0, 1, 0, 1])
  ]

  global stanmodel, rc, chains, cnames
  stanmodel = Stanmodel(num_samples=1200, thin=2, name="bernoulli", 
    model=bernoullimodel, output_format=:mambachains);

  rc, chains, cnames = stan(stanmodel, observeddata, ProjDir, diagnostics=false,
    CmdStanDir=CMDSTAN_HOME);
    
  @test 0.1 &lt;  mean(chains.value[:, 8, :] ) &lt; 0.6

end # cd

</code></pre></div>
<p>It is also possible to do the conversion after the call to stan():</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="  stanmodel = Stanmodel(num_samples=1200, thin=2, name=&quot;bernoulli&quot;, 
    model=bernoullimodel);

  rc, sims, cnames = stan(stanmodel, observeddata, ProjDir, diagnostics=false,
    CmdStanDir=CMDSTAN_HOME);
  
  @test 0.1 &lt;  mean(sims[:, 8, :] ) &lt; 0.6
  
  chains = convert_a3d(sims, cnames, Val(:mambachains))
    
  @test 0.1 &lt;  mean(chains.value[:, 8, :] ) &lt; 0.6
"><pre><code>  stanmodel = Stanmodel(num_samples=1200, thin=2, name="bernoulli", 
    model=bernoullimodel);

  rc, sims, cnames = stan(stanmodel, observeddata, ProjDir, diagnostics=false,
    CmdStanDir=CMDSTAN_HOME);
  
  @test 0.1 &lt;  mean(sims[:, 8, :] ) &lt; 0.6
  
  chains = convert_a3d(sims, cnames, Val(:mambachains))
    
  @test 0.1 &lt;  mean(chains.value[:, 8, :] ) &lt; 0.6
</code></pre></div>
<h2><a id="user-content-further-examples" class="anchor" aria-hidden="true" href="#further-examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Further examples</h2>
<p>A separate package, StanMambaExamples.jl, will contain the Mamba based
examples originally in Stan.jl.</p>
</article></div>