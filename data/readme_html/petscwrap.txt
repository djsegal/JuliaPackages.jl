<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p><a href="https://bmxam.github.io/PetscWrap.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/32a535a58c99ab0db9628a55aae1e2986db282419fc1d0a15b1cdac215651fcc/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d7265642e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-red.svg" style="max-width:100%;"></a>
<a href="https://bmxam.github.io/PetscWrap.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a></p>
<h1><a id="user-content-petscwrapjl" class="anchor" aria-hidden="true" href="#petscwrapjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>PetscWrap.jl</h1>
<p>PetscWrap.jl is a parallel Julia wrapper for the (awesome) <a href="https://www.mcs.anl.gov/petsc/" rel="nofollow">PETSc</a> library. It can be considered as a fork from the <a href="https://github.com/gridap/GridapPETSc.jl">GridapPetsc.jl</a> and <a href="https://github.com/JuliaParallel/PETSc.jl">Petsc.jl</a> projects : these two projects have extensively inspired this project, and some code has even been directly copied.</p>
<p>The main differences with the two aformentionned projects are:</p>
<ul>
<li>parallel support : you can solve linear systems on multiple core with <code>mpirun -n 4 julia foo.jl</code>;</li>
<li>no dependance to other Julia packages except <code>MPI.jl</code>;</li>
<li>possibility to switch from one PETSc "arch" to another;</li>
<li>less PETSc API functions wrappers for now.</li>
</ul>
<p>Note that the primary objective of this project is to enable the wrapper of the SLEPc library through the <a href="https://github.com/bmxam/SlepcWrap.jl">SlepcWrap.jl</a> project.</p>
<h2><a id="user-content-how-to-install-it" class="anchor" aria-hidden="true" href="#how-to-install-it"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>How to install it</h2>
<p>You must have installed the PETSc library on your computer and set the two following environment variables : <code>PETSC_DIR</code> and <code>PETSC_ARCH</code>.</p>
<p>At run time, PetscWrap.jl looks for the <code>libpetsc.so</code> using these environment variables and "load" the library.</p>
<p>To install the package, use the Julia package manager:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="pkg&gt; add PetscWrap
"><pre>pkg<span class="pl-k">&gt;</span> add PetscWrap</pre></div>
<h2><a id="user-content-contribute" class="anchor" aria-hidden="true" href="#contribute"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Contribute</h2>
<p>Any contribution(s) and/or remark(s) are welcome! If you need a function that is not wrapped yet but you don't think you are capable of contributing, post an issue with a minimum working example.</p>
<h2><a id="user-content-petsc-compat" class="anchor" aria-hidden="true" href="#petsc-compat"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>PETSc compat.</h2>
<p>This version of PetscWrap.jl has been tested with petsc-3.13. Complex numbers are supported.</p>
<h2><a id="user-content-how-to-use-it" class="anchor" aria-hidden="true" href="#how-to-use-it"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>How to use it</h2>
<p>PETSc methods wrappers share the same name as their C equivalent : for instance <code>MatCreate</code> or <code>MatSetValue</code>. Furthermore, an optional "higher level" API, referred to as "fancy", is exposed : for instance <code>create_matrix</code> or <code>A[i,j] = v</code>). Note that this second way of manipulating PETSc will evolve according the package's author needs while the first one will try to follow PETSc official API.</p>
<p>You will find examples of use by building the documentation: <code>julia PetscWrap.jl/docs/make.jl</code>. Here is one of the examples:</p>
<h3><a id="user-content-a-first-demo" class="anchor" aria-hidden="true" href="#a-first-demo"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>A first demo</h3>
<p>This example serves as a test since this project doesn't have a "testing" procedure yet. In this example,
the equation <code>u'(x) = 2</code> with <code>u(0) = 0</code> is solved on the domain <code>[0,1]</code> using a backward finite
difference scheme.</p>
<p>In this example, PETSc classic method names are used. For more fancy names, check the fancy version.</p>
<p>Note that the way we achieve things in the document can be highly improved and the purpose of this example
is only demonstrate some method calls to give an overview.</p>
<p>To run this example, execute : <code>mpirun -n your_favorite_positive_integer julia example1.jl</code></p>
<p>Import package</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using PetscWrap
"><pre><span class="pl-k">using</span> PetscWrap</pre></div>
<p>Initialize PETSc. Command line arguments passed to Julia are parsed by PETSc. Alternatively, you can
also provide "command line arguments by defining them in a string, for instance
<code>PetscInitialize("-ksp_monitor_short -ksp_gmres_cgs_refinement_type refine_always")</code> or by providing each argument in
separate strings : <code>PetscInitialize(["-ksp_monitor_short", "-ksp_gmres_cgs_refinement_type", "refine_always")</code></p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="PetscInitialize()
"><pre><span class="pl-c1">PetscInitialize</span>()</pre></div>
<p>Number of mesh points and mesh step</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="n = 11
Δx = 1. / (n - 1)
"><pre>n <span class="pl-k">=</span> <span class="pl-c1">11</span>
Δx <span class="pl-k">=</span> <span class="pl-c1">1.</span> <span class="pl-k">/</span> (n <span class="pl-k">-</span> <span class="pl-c1">1</span>)</pre></div>
<p>Create a matrix and a vector</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="A = MatCreate()
b = VecCreate()
"><pre>A <span class="pl-k">=</span> <span class="pl-c1">MatCreate</span>()
b <span class="pl-k">=</span> <span class="pl-c1">VecCreate</span>()</pre></div>
<p>Set the size of the different objects, leaving PETSC to decide how to distribute. Note that we should
set the number of preallocated non-zeros to increase performance.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="MatSetSizes(A, PETSC_DECIDE, PETSC_DECIDE, n, n)
VecSetSizes(b, PETSC_DECIDE, n)
"><pre><span class="pl-c1">MatSetSizes</span>(A, PETSC_DECIDE, PETSC_DECIDE, n, n)
<span class="pl-c1">VecSetSizes</span>(b, PETSC_DECIDE, n)</pre></div>
<p>We can then use command-line options to set our matrix/vectors.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="MatSetFromOptions(A)
VecSetFromOptions(b)
"><pre><span class="pl-c1">MatSetFromOptions</span>(A)
<span class="pl-c1">VecSetFromOptions</span>(b)</pre></div>
<p>Finish the set up</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="MatSetUp(A)
VecSetUp(b)
"><pre><span class="pl-c1">MatSetUp</span>(A)
<span class="pl-c1">VecSetUp</span>(b)</pre></div>
<p>Let's build the right hand side vector. We first get the range of rows of <code>b</code> handled by the local processor.
As in PETSc, the <code>rstart, rend = *GetOwnershipRange</code> methods indicate the first row handled by the local processor
(starting at 0), and the last row (which is <code>rend-1</code>). This may be disturbing for non-regular PETSc users. Checkout
the fancy version of this example for a more Julia-like convention.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="b_start, b_end = VecGetOwnershipRange(b)
"><pre>b_start, b_end <span class="pl-k">=</span> <span class="pl-c1">VecGetOwnershipRange</span>(b)</pre></div>
<p>Now let's build the right hand side vector. Their are various ways to do this, this is just one.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="n_loc = VecGetLocalSize(b) # Note that n_loc = b_end - b_start...
VecSetValues(b, collect(b_start:b_end-1), 2 * ones(n_loc))
"><pre>n_loc <span class="pl-k">=</span> <span class="pl-c1">VecGetLocalSize</span>(b) <span class="pl-c"><span class="pl-c">#</span> Note that n_loc = b_end - b_start...</span>
<span class="pl-c1">VecSetValues</span>(b, <span class="pl-c1">collect</span>(b_start<span class="pl-k">:</span>b_end<span class="pl-k">-</span><span class="pl-c1">1</span>), <span class="pl-c1">2</span> <span class="pl-k">*</span> <span class="pl-c1">ones</span>(n_loc))</pre></div>
<p>And here is the differentiation matrix. Rembember that PETSc.MatSetValues simply ignores negatives rows indices.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="A_start, A_end = MatGetOwnershipRange(A)
for i in A_start:A_end-1
    MatSetValues(A, [i], [i-1, i], [-1. 1.] / Δx, INSERT_VALUES) # MatSetValues(A, I, J, V, INSERT_VALUES)
end
"><pre>A_start, A_end <span class="pl-k">=</span> <span class="pl-c1">MatGetOwnershipRange</span>(A)
<span class="pl-k">for</span> i <span class="pl-k">in</span> A_start<span class="pl-k">:</span>A_end<span class="pl-k">-</span><span class="pl-c1">1</span>
    <span class="pl-c1">MatSetValues</span>(A, [i], [i<span class="pl-k">-</span><span class="pl-c1">1</span>, i], [<span class="pl-k">-</span><span class="pl-c1">1.</span> <span class="pl-c1">1.</span>] <span class="pl-k">/</span> Δx, INSERT_VALUES) <span class="pl-c"><span class="pl-c">#</span> MatSetValues(A, I, J, V, INSERT_VALUES)</span>
<span class="pl-k">end</span></pre></div>
<p>Set boundary condition (only the proc handling index <code>0</code> is acting)</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="(b_start == 0) &amp;&amp; VecSetValue(b, 0, 0.)
"><pre>(b_start <span class="pl-k">==</span> <span class="pl-c1">0</span>) <span class="pl-k">&amp;&amp;</span> <span class="pl-c1">VecSetValue</span>(b, <span class="pl-c1">0</span>, <span class="pl-c1">0.</span>)</pre></div>
<p>Assemble matrices</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="MatAssemblyBegin(A, MAT_FINAL_ASSEMBLY)
VecAssemblyBegin(b)
MatAssemblyEnd(A, MAT_FINAL_ASSEMBLY)
VecAssemblyEnd(b)
"><pre><span class="pl-c1">MatAssemblyBegin</span>(A, MAT_FINAL_ASSEMBLY)
<span class="pl-c1">VecAssemblyBegin</span>(b)
<span class="pl-c1">MatAssemblyEnd</span>(A, MAT_FINAL_ASSEMBLY)
<span class="pl-c1">VecAssemblyEnd</span>(b)</pre></div>
<p>At this point, you can inspect <code>A</code> or <code>b</code> using a viewer (stdout by default), simply call</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="MatView(A)
VecView(b)
"><pre><span class="pl-c1">MatView</span>(A)
<span class="pl-c1">VecView</span>(b)</pre></div>
<p>Set up the linear solver</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="ksp = KSPCreate()
KSPSetOperators(ksp, A, A)
KSPSetFromOptions(ksp)
KSPSetUp(ksp)
"><pre>ksp <span class="pl-k">=</span> <span class="pl-c1">KSPCreate</span>()
<span class="pl-c1">KSPSetOperators</span>(ksp, A, A)
<span class="pl-c1">KSPSetFromOptions</span>(ksp)
<span class="pl-c1">KSPSetUp</span>(ksp)</pre></div>
<p>Solve the system. We first allocate the solution using the <code>VecDuplicate</code> method.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="x = VecDuplicate(b)
KSPSolve(ksp, b, x)
"><pre>x <span class="pl-k">=</span> <span class="pl-c1">VecDuplicate</span>(b)
<span class="pl-c1">KSPSolve</span>(ksp, b, x)</pre></div>
<p>Print the solution</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="VecView(x)
"><pre><span class="pl-c1">VecView</span>(x)</pre></div>
<p>Access the solution (this part is under development), getting a Julia array; and then restore it</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="array, ref = VecGetArray(x) # do something with array
@show array
VecRestoreArray(x, ref)
"><pre>array, ref <span class="pl-k">=</span> <span class="pl-c1">VecGetArray</span>(x) <span class="pl-c"><span class="pl-c">#</span> do something with array</span>
<span class="pl-c1">@show</span> array
<span class="pl-c1">VecRestoreArray</span>(x, ref)</pre></div>
<p>Free memory</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="MatDestroy(A)
VecDestroy(b)
VecDestroy(x)
"><pre><span class="pl-c1">MatDestroy</span>(A)
<span class="pl-c1">VecDestroy</span>(b)
<span class="pl-c1">VecDestroy</span>(x)</pre></div>
<p>Finalize Petsc</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="PetscFinalize()

"><pre><span class="pl-c1">PetscFinalize</span>()
</pre></div>
</article></div>