<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-varpro-variable-projection-for-nonlinear-least-squares-problems" class="anchor" aria-hidden="true" href="#varpro-variable-projection-for-nonlinear-least-squares-problems"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Varpro: Variable Projection for Nonlinear Least Squares Problems</h1>
<p dir="auto">Model fitting is often approached as an optimization problem where the
sum of the model errors are minimized by optimizing the model
parameters.  If some of the model parameters are non-linear, then a
non-linear optimization algorithm must be used.  This can be
inefficient if some of the parameters are, in fact, linear.</p>
<p dir="auto">The Varpro algorithm recasts the problem so that only the nonlinear
parameters need to be considered by the nonlinear optimizer.  For more
details see the references below and the embedded docs in the source
code.</p>
<p dir="auto">This Julia code is a translation and extension the of the Matlab code
that can be found <a href="http://www.cs.umd.edu/~oleary/software/varpro.m" rel="nofollow">here</a>.
The extensions involve handling complex inputs and a complex model (although
the optimization objective function remains real since the objective is
essentially the L2 norm of the residual (error) vector).</p>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<p dir="auto">The best way to learn how to use Varpro is to read reference [4].  The usage
in Julia differs somewhat from the MATLAB version.  With this version, we
first set up a FitContext by calling the constructor as in the following</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="ctx = FitContext(y, t, w, x_init, n, ind, f_exp, g_exp)"><pre class="notranslate"><code>ctx = FitContext(y, t, w, x_init, n, ind, f_exp, g_exp)
</code></pre></div>
<p dir="auto">All of these are required parameters.  The vector <strong>y</strong> is the data we
wish to fit sampled at the times <strong>t</strong> (or whatever is the independent
variable).  The vector <strong>w</strong> is a weight vector for selectively
weighting the data, all ones is usually a good first step. The vector
<strong>x_init</strong> is the starting guess for the nonlinear parameters.  Note
that both <strong>y</strong> and <strong>x_init</strong> can be either real or complex, but
they both must share the same type.  The integer <strong>n</strong> is the number
of basis functions, which is also the number of linear parameters.
The matrix <strong>ind</strong> specifies the structure of the dphi matrix (see
[4]).  The functions <strong>f_exp</strong> and <strong>g_exp</strong> calculate the phi and
dphi matrices.</p>
<p dir="auto">The following is a complete example of fitting the H1 strain ringdown
values of the recently discovered gravity wave GW150914 [5].</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="using Varpro
using PyPlot
using DelimitedFiles

function f_exp(alpha, ctx)
    for j = 1:ctx.n
        for i in 1:ctx.m
            ctx.phi[i, j] = exp(-alpha[j] * ctx.t[i])
        end
    end
    ctx.phi
end

function g_exp(alpha, ctx)
    for i in 1:ctx.m
        ctx.dphi[i, :] = -ctx.t[i] * ctx.phi[i, :]
    end
    ctx.dphi
end

&quot;&quot;&quot; Fit n complex exponentials to the measured data &quot;&quot;&quot;
function exp_fit(n, y, t)
    w = ones(length(t))
    ind = [collect(1:n)'; collect(1:n)']
    x_init = complex.(0.1*rand(n), 2.0*rand(n))  
    ctx = FitContext(y, t, w, x_init, n, ind, f_exp, g_exp)
    (alpha, c, wresid, resid_norm, y_est, regression) = varpro(ctx)
end

function main()
    h1 = readdlm(&quot;h1_whitened.txt&quot;)
    t = h1[:, 1]
    y = complex.(h1[:, 2])  # must be complex to match x_init
    x, c, r, r_norm, y_est, reg = exp_fit(6, y, t)
    println(&quot;Norm of residual error: &quot;, r_norm)
    plot(t, real(y), &quot;o&quot;, label=&quot;measured H1 strain&quot;)
    plot(t, real(y_est), label=&quot;modeled H1 strain&quot;)
    xlabel(&quot;Time&quot;)
    ylabel(&quot;Strain&quot;)
    title(&quot;H1 Ringdown Model&quot;)
    legend(loc=&quot;upper right&quot;)
    savefig(&quot;modeled_GW150914_strain.png&quot;)
end

main()"><pre class="notranslate"><code>using Varpro
using PyPlot
using DelimitedFiles

function f_exp(alpha, ctx)
    for j = 1:ctx.n
        for i in 1:ctx.m
            ctx.phi[i, j] = exp(-alpha[j] * ctx.t[i])
        end
    end
    ctx.phi
end

function g_exp(alpha, ctx)
    for i in 1:ctx.m
        ctx.dphi[i, :] = -ctx.t[i] * ctx.phi[i, :]
    end
    ctx.dphi
end

""" Fit n complex exponentials to the measured data """
function exp_fit(n, y, t)
    w = ones(length(t))
    ind = [collect(1:n)'; collect(1:n)']
    x_init = complex.(0.1*rand(n), 2.0*rand(n))  
    ctx = FitContext(y, t, w, x_init, n, ind, f_exp, g_exp)
    (alpha, c, wresid, resid_norm, y_est, regression) = varpro(ctx)
end

function main()
    h1 = readdlm("h1_whitened.txt")
    t = h1[:, 1]
    y = complex.(h1[:, 2])  # must be complex to match x_init
    x, c, r, r_norm, y_est, reg = exp_fit(6, y, t)
    println("Norm of residual error: ", r_norm)
    plot(t, real(y), "o", label="measured H1 strain")
    plot(t, real(y_est), label="modeled H1 strain")
    xlabel("Time")
    ylabel("Strain")
    title("H1 Ringdown Model")
    legend(loc="upper right")
    savefig("modeled_GW150914_strain.png")
end

main()
</code></pre></div>
<p dir="auto">The above code produces the following figure:</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="modeled_GW150914_strain.png"><img src="modeled_GW150914_strain.png" alt="alt-text" title="Greetings Programs!" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-nonlinear-optimizer" class="anchor" aria-hidden="true" href="#nonlinear-optimizer"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Nonlinear optimizer</h2>
<p dir="auto">Varpro depends upon having an underlying nonlinear optimization algorithm.
Here we default to use <a href="https://github.com/macd/NL2sol.f">NL2sol</a> a venerable
FORTRAN code from the early 1980s. That code is compiled to <strong>NL2sol_jll</strong>
which is then further wrapped by <a href="https://github.com/macd/NL2sol.jl">NL2sol.jl</a>
which is used here. The code and theory behind it are discussed in [6] and
[7]</p>
<h2 dir="auto"><a id="user-content-limitations" class="anchor" aria-hidden="true" href="#limitations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Limitations</h2>
<p dir="auto">Only supported in Julia 1.4 and later.</p>
<p dir="auto">If you are fitting a sum of exponentials, a common use case for
Varpro, note that it can be a tricky business. If the optimzer takes a
step too large in one parameter, the other parameters may be swamped
and the problem doesn't have full rank at the current value of x.
Varpro tries to take care of this with the SVD and then regularizing
by throwing away small singular values and reducing the dimensionality
of the problem.  This doesn't always work.</p>
<h2 dir="auto"><a id="user-content-references" class="anchor" aria-hidden="true" href="#references"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>References</h2>
<p dir="auto">[1] Golub, G.H., Pereyra, V.: "The differentiation of pseudoinverses and
nonlinear least squares problems whose variables separate". SIAM Journal
on Numerical Analysis 10, pp 413-432 (1973)</p>
<p dir="auto">[2] Golub, G.H., Pereyra, V.: "Separable nonlinear least squares: The variable
projection method and its applications". Inverse Problems 19 (2), R1–R26 (2003)</p>
<p dir="auto">[3] Pereyra, V., Scherer, eds:  "Exponential Data Fitting and its Applications"
Bentham Books, ISBN: 978-1-60805-048-2 (2010)</p>
<p dir="auto">[4] Dianne P. O'Leary, Bert W. Rust: "Variable projection for nonlinear least squares
problems".  Computational Optimization and Applications April 2013, Volume 54,
Issue 3, pp 579-593  Available <a href="http://www.cs.umd.edu/~oleary/software/varpro.pdf" rel="nofollow">here</a></p>
<p dir="auto">[5] B. P. Abbott el. al. "ASTROPHYSICAL IMPLICATIONS OF THE BINARY BLACK HOLE MERGER GW150914"
The Astrophysical Journal Letters, Volume 818, Number 2</p>
<p dir="auto">[6] J.E. Dennis, D.M. Gay, R.E. Welsch, "An Adaptive Nonlinear
Least-Squares Algorithm", ACM Transactions on Mathematical Software
(TOMS), Volume 7 Issue 3, Sept. 1981, pp 348-368, ACM New York, NY, USA
<a href="http://dl.acm.org/citation.cfm?id=355965&amp;CFID=660003329&amp;CFTOKEN=25049918" rel="nofollow">see here</a></p>
<p dir="auto">[7] J.E. Dennis, D.M. Gay, R.E. Welsch, "Algorithm 573: NL2SOL—An Adaptive
Nonlinear Least-Squares Algorithm", ACM Transactions on Mathematical
Software (TOMS), Volume 7 Issue 3, Sept. 1981, pp 369-383, ACM New
York, NY, USA <a href="http://dl.acm.org/citation.cfm?id=355966" rel="nofollow">see here</a></p>
</article></div>