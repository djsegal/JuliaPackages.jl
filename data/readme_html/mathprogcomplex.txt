<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-mathprogcomplexjl" class="anchor" aria-hidden="true" href="#mathprogcomplexjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>MathProgComplex.jl</h1>
<p>Dev:
<a href="https://travis-ci.org/JulieSliwak/MathProgComplex.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/14e1e48b817b4ce925957f6e3e30f6b1163ee0ac/68747470733a2f2f7472617669732d63692e6f72672f4a756c6965536c6977616b2f4d61746850726f67436f6d706c65782e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JulieSliwak/MathProgComplex.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/JulieSliwak/MathProgComplex.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/0be4de4d7e78eeda52d236a25a6307b98401fc02/68747470733a2f2f636f6465636f762e696f2f67682f4a756c6965536c6977616b2f4d61746850726f67436f6d706c65782e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/JulieSliwak/MathProgComplex.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p>The <code>MathProgComplex</code> module is a tool for polynomial optimization problems with complex variables. These problems consist in optimizing a generic complex multivariate polynomial function, subject to some complex polynomial equality and inequality constraints.
The <code>MathProgComplex</code> module enables:</p>
<ul>
<li>the manipulation of multivariate polynomials with complex numbers to construct polynomial optimization problems with complex variables (POP-C).</li>
<li>the evaluation of polynomials, for example the objective and the constraints of a (POP-C) from points</li>
<li>the resolution of a (POP-C) via a JuMP model</li>
<li>the export of a (POP-C) to be solved using another language</li>
</ul>
<h2><a id="user-content-setting-julia-for-custom-modules" class="anchor" aria-hidden="true" href="#setting-julia-for-custom-modules"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Setting Julia for custom modules</h2>
<p>The modules need to be accessible from julia's path to be loaded with the <code>using</code> command.
This can be done by running <code>push!(LOAD_PATH, "location/of/modules")</code>, which will update the path for the current session.</p>
<p>The path can be updated at every start of a Julia session by adding the command to the <code>.juliarc.jl</code> file, which should be located (or created) at the location given by <code>homedir()</code>.</p>
<h2><a id="user-content-structures" class="anchor" aria-hidden="true" href="#structures"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Structures</h2>
<p>The <code>MathProgComplex</code> environment provides a structure and methods for working with <strong>complex polynomial optimization problems</strong> subject to <strong>polynomial constraints</strong>. It is based on a polynomial environment that allows to work on polynomial objects with natural operations (+, -, *, conj, |.|^2).</p>
<h3><a id="user-content-polynomials" class="anchor" aria-hidden="true" href="#polynomials"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Polynomials</h3>
<ul>
<li>The base type is <code>Variable</code>: it is a structure with a name (a string) and a type (Complex, Real or Bool).</li>
</ul>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> MathProgComplex
a <span class="pl-k">=</span> <span class="pl-c1">Variable</span>(<span class="pl-s"><span class="pl-pds">"</span>a<span class="pl-pds">"</span></span>, Complex)
b <span class="pl-k">=</span> <span class="pl-c1">Variable</span>(<span class="pl-s"><span class="pl-pds">"</span>b<span class="pl-pds">"</span></span>, Real)
c <span class="pl-k">=</span> <span class="pl-c1">Variable</span>(<span class="pl-s"><span class="pl-pds">"</span>c<span class="pl-pds">"</span></span>, Bool)</pre></div>
<p>From <code>Variable</code> type, <code>Exponent</code> and <code>Polynomial</code> can be constructed by calling the respective constructors or with algebraic operations (+, -, *, conj, |.|).</p>
<ul>
<li>An <code>Exponent</code> is a product of <code>Variables</code>.</li>
</ul>
<div class="highlight highlight-source-julia"><pre>expo1 <span class="pl-k">=</span> a<span class="pl-k">*</span>b
expo2 <span class="pl-k">=</span> <span class="pl-c1">conj</span>(a)<span class="pl-k">^</span><span class="pl-c1">3</span><span class="pl-k">*</span>b<span class="pl-k">^</span><span class="pl-c1">5</span>
expo3 <span class="pl-k">=</span> <span class="pl-c1">abs2</span>(a) <span class="pl-c"><span class="pl-c">#</span> =a*conj(a)</span></pre></div>
<ul>
<li>A <code>Polynomial</code> is a sum of <code>Exponents</code> times complex numbers.</li>
</ul>
<div class="highlight highlight-source-julia"><pre>p <span class="pl-k">=</span> <span class="pl-c1">3</span><span class="pl-k">*</span>expo1 <span class="pl-k">+</span> (<span class="pl-c1">4</span><span class="pl-k">+</span><span class="pl-c1">2im</span>)<span class="pl-k">*</span>expo2 <span class="pl-k">+</span><span class="pl-c1">2im</span><span class="pl-k">*</span>expo3</pre></div>
<ul>
<li>The <code>Point</code> type holds the variables at which polynomials can be evaluated.</li>
</ul>
<h4><a id="user-content-implemented-methods" class="anchor" aria-hidden="true" href="#implemented-methods"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Implemented methods</h4>
<pre><code>- isconst, isone
- evaluate
- abs2, conj
- is_homogeneous: tests if p(exp(iϕ)X) = p(X) ∀X∈R^n, Φ∈R (phaseinvariant  equation)
- cplx2real: convert the provided object to a tuple of real and imaginary part, expressed with real and imaginary part variables.
</code></pre>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> MathProgComplex

a <span class="pl-k">=</span> <span class="pl-c1">Variable</span>(<span class="pl-s"><span class="pl-pds">"</span>a<span class="pl-pds">"</span></span>, Complex)
b <span class="pl-k">=</span> <span class="pl-c1">Variable</span>(<span class="pl-s"><span class="pl-pds">"</span>b<span class="pl-pds">"</span></span>, Real)
p <span class="pl-k">=</span> a<span class="pl-k">*</span><span class="pl-c1">conj</span>(a) <span class="pl-k">+</span> b <span class="pl-k">+</span> <span class="pl-c1">2</span>

<span class="pl-c1">print</span>(p)
<span class="pl-c"><span class="pl-c">#</span> 2 + b + conj(a) * a</span>

pt <span class="pl-k">=</span> <span class="pl-c1">Point</span>([a, b], [<span class="pl-c1">1</span><span class="pl-k">+</span><span class="pl-c1">2im</span>, <span class="pl-c1">1</span><span class="pl-k">+</span>im])
<span class="pl-c1">print</span>(pt)
<span class="pl-c"><span class="pl-c">#</span> a 1 + 2im</span>
<span class="pl-c"><span class="pl-c">#</span> b 1</span>

pt <span class="pl-k">=</span> pt <span class="pl-k">-</span> <span class="pl-c1">Point</span>([a], [<span class="pl-c1">1</span>])
<span class="pl-c1">print</span>(pt)
<span class="pl-c"><span class="pl-c">#</span> a 0 + 2im</span>
<span class="pl-c"><span class="pl-c">#</span> b 1</span>

val <span class="pl-k">=</span> <span class="pl-c1">evaluate</span>(p, pt) <span class="pl-c"><span class="pl-c">#</span> 7.0 + 0.0im</span>

p_real, p_imag <span class="pl-k">=</span> <span class="pl-c1">cplx2real</span>(p)
pt_r <span class="pl-k">=</span> <span class="pl-c1">cplx2real</span>(pt)
val_real <span class="pl-k">=</span> <span class="pl-c1">evaluate</span>(p_real, pt_r) <span class="pl-c"><span class="pl-c">#</span> 7.0</span>
val_imag <span class="pl-k">=</span> <span class="pl-c1">evaluate</span>(p_imag, pt_r) <span class="pl-c"><span class="pl-c">#</span> 0</span></pre></div>
<h3><a id="user-content-polynomial-optimization-problems" class="anchor" aria-hidden="true" href="#polynomial-optimization-problems"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Polynomial optimization problems</h3>
<ul>
<li>
<p>A <code>Constraint</code> structure holds a <code>Polynomial</code> and complex upper and lower bounds.</p>
</li>
<li>
<p>A <code>Problem</code> is made up of:</p>
<ul>
<li>the collection of <code>Variable</code>s of the problem (updated internally),</li>
<li>a <code>Polynomial</code> objective,</li>
<li>several named <code>constraint</code>s.</li>
</ul>
</li>
</ul>
<h4><a id="user-content-implemented-methods-1" class="anchor" aria-hidden="true" href="#implemented-methods-1"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Implemented methods</h4>
<ul>
<li>get_objective, set_objective!</li>
<li>get_variables, get_variabletype, has_variable, add_variable!</li>
<li>get_constraint, get_constraints, has_constraint, constraint_type, add_constraint!, rm_constraint!</li>
<li>get_slacks, get_minslack</li>
<li>pb_cplx2real: converts the problem variables, objective and constraints to real expressions function of real and imaginary part of the original problem variables.</li>
</ul>
<p>Here is a full example, more can be found in the <code>examples</code> and <code>test</code> directories.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> MathProgComplex

a <span class="pl-k">=</span> <span class="pl-c1">Variable</span>(<span class="pl-s"><span class="pl-pds">"</span>a<span class="pl-pds">"</span></span>, Complex)
b <span class="pl-k">=</span> <span class="pl-c1">Variable</span>(<span class="pl-s"><span class="pl-pds">"</span>b<span class="pl-pds">"</span></span>, Real)
p_obj <span class="pl-k">=</span> <span class="pl-c1">abs2</span>(a) <span class="pl-k">+</span> <span class="pl-c1">abs2</span>(b) <span class="pl-k">+</span> <span class="pl-c1">2</span>
p_cstr1 <span class="pl-k">=</span> <span class="pl-c1">3</span>a <span class="pl-k">+</span> b <span class="pl-k">+</span> <span class="pl-c1">2</span>
p_cstr2 <span class="pl-k">=</span> <span class="pl-c1">abs2</span>(b) <span class="pl-k">+</span> <span class="pl-c1">5</span>a<span class="pl-k">*</span>b <span class="pl-k">+</span> <span class="pl-c1">2</span>

pb <span class="pl-k">=</span> <span class="pl-c1">Problem</span>()

<span class="pl-c1">set_objective!</span>(pb, p_obj)

<span class="pl-c1">add_constraint!</span>(pb, <span class="pl-s"><span class="pl-pds">"</span>Cstr 1<span class="pl-pds">"</span></span>, p_cstr1 <span class="pl-k">&lt;&lt;</span> (<span class="pl-c1">3</span><span class="pl-k">+</span><span class="pl-c1">5im</span>)) <span class="pl-c"><span class="pl-c">#</span> 2 + (3.0)*a + b &lt; 3 + 5im</span>

<span class="pl-c1">add_constraint!</span>(pb, <span class="pl-s"><span class="pl-pds">"</span>Cstr 2<span class="pl-pds">"</span></span>, (<span class="pl-c1">2</span><span class="pl-k">-</span>im) <span class="pl-k">&lt;&lt;</span> p_cstr2 <span class="pl-k">&lt;&lt;</span> (<span class="pl-c1">3</span><span class="pl-k">+</span><span class="pl-c1">7im</span>)) <span class="pl-c"><span class="pl-c">#</span> 2 - 1im &lt; 2 + (5.0)*a * b + b^2 &lt; 3 + 7im</span>

<span class="pl-c1">add_constraint!</span>(pb, <span class="pl-s"><span class="pl-pds">"</span>Cstr 3<span class="pl-pds">"</span></span>, p_cstr2 <span class="pl-k">==</span> <span class="pl-c1">0</span>) <span class="pl-c"><span class="pl-c">#</span> 2 + (5.0)*a * b + b^2 = 0</span>


<span class="pl-c1">print</span>(pb)
<span class="pl-c"><span class="pl-c">#</span> ▶ variables: a b </span>
<span class="pl-c"><span class="pl-c">#</span> ▶ objective: 2 + conj(a) * a + b^2</span>
<span class="pl-c"><span class="pl-c">#</span> ▶ constraints: </span>
<span class="pl-c"><span class="pl-c">#</span>  →     Cstr 1: 2 + (3.0)*a + b &lt; 3 + 5im</span>
<span class="pl-c"><span class="pl-c">#</span>  →     Cstr 2: 2 - 1im &lt; 2 + (5.0)*a * b + b^2 &lt; 3 + 7im</span>
<span class="pl-c"><span class="pl-c">#</span>  →     Cstr 3: 2 + (5.0)*a * b + b^2 = 0</span>

pt_sol <span class="pl-k">=</span> <span class="pl-c1">Point</span>([a, b], [<span class="pl-c1">1</span>, <span class="pl-c1">1</span><span class="pl-k">+</span><span class="pl-c1">2im</span>])
<span class="pl-c1">print</span>(<span class="pl-s"><span class="pl-pds">"</span>slack by constraint at given point:<span class="pl-cce">\n</span><span class="pl-pds">"</span></span>, <span class="pl-c1">get_slacks</span>(pb, pt_sol))
<span class="pl-c"><span class="pl-c">#</span> slack by constraint at given point:</span>
<span class="pl-c"><span class="pl-c">#</span> Cstr 1 -3.0 + 5.0im</span>
<span class="pl-c"><span class="pl-c">#</span> Cstr 2 -5.0 + 1.0im</span>
<span class="pl-c"><span class="pl-c">#</span> Cstr 3 -8.0 - 0.0im</span></pre></div>
<h3><a id="user-content-resolution" class="anchor" aria-hidden="true" href="#resolution"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Resolution</h3>
<p>The polynomial optimization problems can be converted into JuMP models or be exported into formatted text files to be used in another language.</p>
<h4><a id="user-content-using-jump" class="anchor" aria-hidden="true" href="#using-jump"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Using JuMP</h4>
<div class="highlight highlight-source-julia"><pre>m, JuMPvar <span class="pl-k">=</span> <span class="pl-c1">get_JuMP_cartesian_model</span>(pb, solver)
<span class="pl-c1">solve</span>(m)</pre></div>
<h4><a id="user-content-using-file-export" class="anchor" aria-hidden="true" href="#using-file-export"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Using file export</h4>
<p>The <code>.dat</code> text format used in this module allows storing polynomial optimization problems in inary, Real or Complex variables, along with a scalar value for each variable (a point).</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">export_to_dat</span>(pb, amplexportpath, point)
<span class="pl-c1">run_knitro</span>(amplexportpath, amplscriptpath)</pre></div>
</article></div>