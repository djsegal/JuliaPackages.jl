<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-retry" class="anchor" aria-hidden="true" href="#retry"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Retry</h1>
<p>Macros for simplified exception handling.</p>
<p><code>@repeat try</code>, <code>@retry</code>, <code>@delay_retry</code>, <code>@protected try</code>, <code>@ignore</code>.</p>
<p><a href="https://travis-ci.org/samoconnor/Retry.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/6f94fac65adc731ef4dbe4e4670089166720ba6a/68747470733a2f2f7472617669732d63692e6f72672f73616d6f636f6e6e6f722f52657472792e6a6c2e737667" alt="Build Status" data-canonical-src="https://travis-ci.org/samoconnor/Retry.jl.svg" style="max-width:100%;"></a></p>
<h2><a id="user-content-exception-handling-in-julia" class="anchor" aria-hidden="true" href="#exception-handling-in-julia"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Exception Handling In Julia</h2>
<p>Julia's <code>try/catch</code> statement catches all exceptions regardless of type
or error code.</p>
<p>The <a href="http://docs.julialang.org/en/latest/manual/control-flow/#the-try-catch-statement" rel="nofollow">examples in the Julia manual</a>
involve mathematical errors that occur in the immediate context of
the <code>try</code> block. The examples assume that there is no possibility
of unexpected exceptions and hence no need to <code>rethrow()</code>. For
many technical computing tasks this is probably reasonable.</p>
<p>However, typical systems-programming tasks must deal with with
multi-layered distributed service stacks, interfaces to external
systems and resource contention. These problems demand fine-grained
exception filtering, simple expression of retry loops and confidence
that unexpected exceptions are not unintentionally caught and ignored.</p>
<p>Julia's <code>catch</code> block can include conditional logic to take appropriate
action according to error type/code; and to rethrow exceptions that
are not handled. However, this approach can seem cumbersome in
comparison to the richer exception handling mechanisms provided in
some systems programming languages. A simple careless omission of
<code>retrhow()</code> at the end of a catch block causes all exceptions to
be ignored resulting in behaviour that can be very hard to debug.</p>
<h2><a id="user-content-protected-try" class="anchor" aria-hidden="true" href="#protected-try"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><code>@protected try</code></h2>
<p>The <code>@protected try</code> macro extends <code>try/catch</code> to:</p>
<ul>
<li>automatically insert <code>rethow()</code> at the end of the <code>catch</code> block, and</li>
<li>provide an unambiguous syntax for handling specific errors.</li>
</ul>
<p>Consider the following call to Create an authentication profile for an
AWS EC2 virtual machine.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">try</span> 

    <span class="pl-c1">iam</span>(aws, Action <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>CreateInstanceProfile<span class="pl-pds">"</span></span>, InstanceProfileName <span class="pl-k">=</span> name)

<span class="pl-k">catch</span> e
    <span class="pl-k">if</span> <span class="pl-k">!</span>(<span class="pl-c1">typeof</span>(e) <span class="pl-k">==</span> AWSException <span class="pl-k">&amp;&amp;</span> e<span class="pl-k">.</span>code <span class="pl-k">==</span> <span class="pl-s"><span class="pl-pds">"</span>EntityAlreadyExists<span class="pl-pds">"</span></span>)
        <span class="pl-c1">rethrow</span>(e)
    <span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>
<p><code>@protected try</code> allows this to be simplified to:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">@protected</span> <span class="pl-k">try</span> 

    <span class="pl-c1">iam</span>(aws, Action <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>CreateInstanceProfile<span class="pl-pds">"</span></span>, InstanceProfileName <span class="pl-k">=</span> name)

<span class="pl-k">catch</span> e
    <span class="pl-c1">@ignore</span> <span class="pl-k">if</span> e<span class="pl-k">.</span>code <span class="pl-k">==</span> <span class="pl-s"><span class="pl-pds">"</span>EntityAlreadyExists<span class="pl-pds">"</span></span> <span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>
<p>Note that the <code>@ignore if</code> statement does not check <code>typeof(e)</code> before
accessing <code>e.code</code>. The <code>@ignore if</code> condition is wrapped in an inner
<code>try/catch</code> block such that any exceptions thrown by the condition are
treated the same as the condition being <code>false</code>. The code generated
by <code>@protected try</code> is:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">try</span>

    <span class="pl-c1">iam</span>(aws, Action <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>CreateInstanceProfile<span class="pl-pds">"</span></span>, InstanceProfileName <span class="pl-k">=</span> name)

<span class="pl-k">catch</span> e
    <span class="pl-k">try</span>
        <span class="pl-k">if</span> e<span class="pl-k">.</span>code <span class="pl-k">==</span> <span class="pl-s"><span class="pl-pds">"</span>EntityAlreadyExists<span class="pl-pds">"</span></span>
            e <span class="pl-k">=</span> <span class="pl-c1">nothing</span>
        <span class="pl-k">end</span>
    <span class="pl-k">end</span>
    e <span class="pl-k">==</span> <span class="pl-c1">nothing</span> <span class="pl-k">||</span> <span class="pl-c1">rethrow</span>(e)
<span class="pl-k">end</span></pre></div>
<h2><a id="user-content-repeat-n-try" class="anchor" aria-hidden="true" href="#repeat-n-try"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><code>@repeat n try</code></h2>
<p>The <code>@repeat n try</code> macro retains the automatic <code>rethrow()</code> and <code>@ignore if</code> features of <code>@protected try</code> and adds support for automatic retry.</p>
<p>The following example tries four times to download an object from S3.
If the object was only recently created, the storage replica serving the
<code>GET</code> request may not yet have a copy of it, so it is sometimes necessary to
retry the request. The <code>@delay_retry if</code> statement implements an
<a href="http://docs.aws.amazon.com/general/latest/gr/api-retries.html" rel="nofollow">exponential backoff algorithm</a> with randomised jitter to provide timely retries while avoiding
un-due load on the server.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">@repeat</span> <span class="pl-c1">4</span> <span class="pl-k">try</span>

   <span class="pl-k">return</span> <span class="pl-c1">s3</span>(aws, <span class="pl-s"><span class="pl-pds">"</span>GET<span class="pl-pds">"</span></span>, bucket, path)

<span class="pl-k">catch</span> e
    <span class="pl-c1">@delay_retry</span> <span class="pl-k">if</span> e<span class="pl-k">.</span>code <span class="pl-k">in</span> [<span class="pl-s"><span class="pl-pds">"</span>NoSuchBucket<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>NoSuchKey<span class="pl-pds">"</span></span>] <span class="pl-k">end</span>
<span class="pl-k">end</span>
</pre></div>
<p>If an exception is still raised on the fourth attempt <code>rethrow()</code> is called
so the exception can be dealt with by a different stack frame.</p>
<p>The code generated by the example above is:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">begin</span>

    delay <span class="pl-k">=</span> <span class="pl-c1">0.05</span>
    result <span class="pl-k">=</span> <span class="pl-c1">false</span>

    <span class="pl-k">for</span> i <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">4</span>

        result <span class="pl-k">=</span> <span class="pl-k">try</span>

            <span class="pl-k">return</span> <span class="pl-c1">s3</span>(aws,<span class="pl-s"><span class="pl-pds">"</span>GET<span class="pl-pds">"</span></span>,bucket,path)

        <span class="pl-k">catch</span> e

            <span class="pl-k">try</span>
                <span class="pl-k">if</span> e<span class="pl-k">.</span>code <span class="pl-k">in</span> [<span class="pl-s"><span class="pl-pds">"</span>NoSuchBucket<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>NoSuchKey<span class="pl-pds">"</span></span>]
                    <span class="pl-k">if</span> (i <span class="pl-k">&lt;</span> <span class="pl-c1">4</span>)
                        <span class="pl-c1">sleep</span>(delay <span class="pl-k">*</span> (<span class="pl-c1">0.8</span> <span class="pl-k">+</span> (<span class="pl-c1">0.4</span> <span class="pl-k">*</span> <span class="pl-c1">rand</span>())))
                        delay <span class="pl-k">*=</span> <span class="pl-c1">10</span>
                        <span class="pl-k">continue</span>
                    <span class="pl-k">end</span>
                <span class="pl-k">end</span>
            <span class="pl-k">catch</span>
            <span class="pl-k">end</span>

            e <span class="pl-k">==</span> <span class="pl-c1">nothing</span> <span class="pl-k">||</span> <span class="pl-c1">rethrow</span>(e)
        <span class="pl-k">end</span>
        <span class="pl-k">break</span>
    <span class="pl-k">end</span>

    result
<span class="pl-k">end</span></pre></div>
<p>The next example deals with two different temporary network/server
exceptions that warrant a delayed retry; and another that can be re-tried
immediately by re-directing to a different server.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">@repeat</span> <span class="pl-c1">4</span> <span class="pl-k">try</span> 

    <span class="pl-k">return</span> <span class="pl-c1">http_attempt</span>(request)

<span class="pl-k">catch</span> e

    <span class="pl-c1">@delay_retry</span> <span class="pl-k">if</span> <span class="pl-c1">typeof</span>(e) <span class="pl-k">==</span> UVError <span class="pl-k">end</span>

    <span class="pl-c1">@delay_retry</span> <span class="pl-k">if</span> <span class="pl-c1">http_status</span>(e) <span class="pl-k">&lt;</span> <span class="pl-c1">200</span> <span class="pl-k">&amp;&amp;</span>
                    <span class="pl-c1">http_status</span>(e) <span class="pl-k">&gt;=</span> <span class="pl-c1">500</span> <span class="pl-k">end</span>

    <span class="pl-c1">@retry</span> <span class="pl-k">if</span> <span class="pl-c1">http_status</span>(e) <span class="pl-k">in</span> [<span class="pl-c1">301</span>, <span class="pl-c1">302</span>, <span class="pl-c1">307</span>]
        request<span class="pl-k">.</span>uri <span class="pl-k">=</span> <span class="pl-c1">URI</span>(<span class="pl-c1">headers</span>(e)[<span class="pl-s"><span class="pl-pds">"</span>Location<span class="pl-pds">"</span></span>])
    <span class="pl-k">end</span>

<span class="pl-k">end</span>
</pre></div>
<p>The final example deals with creating an SQS queue. If the queue already
exists it must be deleted before creation is re-tried.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">@repeat</span> <span class="pl-c1">4</span> <span class="pl-k">try</span>

    r <span class="pl-k">=</span> <span class="pl-c1">sqs</span>(aws, Action <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>CreateQueue<span class="pl-pds">"</span></span>, QueueName <span class="pl-k">=</span> name)
    <span class="pl-k">return</span> <span class="pl-k">=</span> <span class="pl-c1">XML</span>(r)[<span class="pl-c1">:QueueUrl</span>]

<span class="pl-k">catch</span> e

    <span class="pl-c1">@retry</span> <span class="pl-k">if</span> e<span class="pl-k">.</span>code <span class="pl-k">==</span> <span class="pl-s"><span class="pl-pds">"</span>QueueAlreadyExists<span class="pl-pds">"</span></span>
        <span class="pl-c1">sqs_delete_queue</span>(aws, name)
    <span class="pl-k">end</span>

    <span class="pl-c1">@retry</span> <span class="pl-k">if</span> e<span class="pl-k">.</span>code <span class="pl-k">==</span> <span class="pl-s"><span class="pl-pds">"</span>AWS.SimpleQueueService.QueueDeletedRecently<span class="pl-pds">"</span></span>
        <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"""</span>Waiting 1 minute to re-create Queue "<span class="pl-v">$name</span>"...<span class="pl-pds">"""</span></span>)
        <span class="pl-c1">sleep</span>(<span class="pl-c1">60</span>)
    <span class="pl-k">end</span>
<span class="pl-k">end</span>
</pre></div>
<p><em>The examples above are taken from <a href="https://github.com/samoconnor/OCAWS.jl">OCAWS.jl</a></em></p>
</article></div>