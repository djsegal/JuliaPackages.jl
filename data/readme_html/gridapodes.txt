<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-gridapodes" class="anchor" aria-hidden="true" href="#gridapodes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>GridapODEs</h1>
<p><a href="https://gridap.github.io/GridapODEs.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://gridap.github.io/GridapODEs.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a>
<a href="https://github.com/gridap/GridapODEs.jl/actions?query=workflow%3ACI"><img src="https://github.com/gridap/GridapODEs.jl/workflows/CI/badge.svg?branch=master" alt="Build Status" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/gridap/GridapODEs.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/d9aa6e675e4262c1abdac6b2a28a5b24983f80a99add950283099810c5e03bad/68747470733a2f2f636f6465636f762e696f2f67682f6772696461702f4772696461704f4445732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/gridap/GridapODEs.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/gridap/GridapODEs.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/438860712f462d9a76a4f6c7dc843c3062f951e652f8329d819ed95c68109f22/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f6772696461702f4772696461704f4445732e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coveralls" data-canonical-src="https://coveralls.io/repos/github/gridap/GridapODEs.jl/badge.svg?branch=master" style="max-width:100%;"></a></p>
<p>This package provides time integration tools for <code>Gridap</code>. As an example, the following code solves the heat equation.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Gridap
using ForwardDiff
using GridapODEs.ODETools
using GridapODEs.TransientFETools

import Gridap: ∇
import GridapODEs.TransientFETools: ∂t

θ = 0.5

u(x,t) = (1.0-x[1])*x[1]*(1.0-x[2])*x[2]*t
u(t) = x -&gt; u(x,t)

f(t) = x -&gt; ∂t(u)(x,t)-Δ(u(t))(x) # or ∂t(u)(t)(x)-Δ(u(t))(x)

domain = (0,1,0,1)
partition = (4,4)
model = CartesianDiscreteModel(domain,partition)

order = 2

reffe = ReferenceFE(lagrangian,Float64,order)
V0 = FESpace(
  model,
  reffe,
  conformity=:H1, 
  dirichlet_tags=&quot;boundary&quot;
)

U = TransientTrialFESpace(V0,u)

Ω = Triangulation(model)
degree = 2*order
dΩ = Measure(Ω,degree)

a(u,v) = ∫( ∇(v)⋅∇(u) )dΩ
b(v,t) = ∫( v*f(t) )dΩ
m(u,v) = ∫( v*u )dΩ

res(t,u,ut,v) = a(u,v) + m(ut,v) - b(v,t)
jac(t,u,ut,du,v) = a(du,v)
jac_t(t,u,ut,dut,v) = m(dut,v)

op = TransientFEOperator(res,jac,jac_t,U,V0)

t0 = 0.0
tF = 1.0
dt = 0.1

U0 = U(0.0)
uh0 = interpolate_everywhere(u(0.0),U0)

ls = LUSolver()
odes = ThetaMethod(ls,dt,θ)
solver = TransientFESolver(odes)
sol_t = solve(solver,op,uh0,t0,tF)

for (uh_tn, tn) in sol_t
  # Here we have the solution uh_tn at tn
end
"><pre><span class="pl-k">using</span> Gridap
<span class="pl-k">using</span> ForwardDiff
<span class="pl-k">using</span> GridapODEs<span class="pl-k">.</span>ODETools
<span class="pl-k">using</span> GridapODEs<span class="pl-k">.</span>TransientFETools

<span class="pl-k">import</span> Gridap<span class="pl-k">:</span> ∇
<span class="pl-k">import</span> GridapODEs<span class="pl-k">.</span>TransientFETools<span class="pl-k">:</span> ∂t

θ <span class="pl-k">=</span> <span class="pl-c1">0.5</span>

<span class="pl-en">u</span>(x,t) <span class="pl-k">=</span> (<span class="pl-c1">1.0</span><span class="pl-k">-</span>x[<span class="pl-c1">1</span>])<span class="pl-k">*</span>x[<span class="pl-c1">1</span>]<span class="pl-k">*</span>(<span class="pl-c1">1.0</span><span class="pl-k">-</span>x[<span class="pl-c1">2</span>])<span class="pl-k">*</span>x[<span class="pl-c1">2</span>]<span class="pl-k">*</span>t
<span class="pl-en">u</span>(t) <span class="pl-k">=</span> x <span class="pl-k">-&gt;</span> <span class="pl-c1">u</span>(x,t)

<span class="pl-en">f</span>(t) <span class="pl-k">=</span> x <span class="pl-k">-&gt;</span> <span class="pl-c1">∂t</span>(u)(x,t)<span class="pl-k">-</span><span class="pl-c1">Δ</span>(<span class="pl-c1">u</span>(t))(x) <span class="pl-c"><span class="pl-c">#</span> or ∂t(u)(t)(x)-Δ(u(t))(x)</span>

domain <span class="pl-k">=</span> (<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>)
partition <span class="pl-k">=</span> (<span class="pl-c1">4</span>,<span class="pl-c1">4</span>)
model <span class="pl-k">=</span> <span class="pl-c1">CartesianDiscreteModel</span>(domain,partition)

order <span class="pl-k">=</span> <span class="pl-c1">2</span>

reffe <span class="pl-k">=</span> <span class="pl-c1">ReferenceFE</span>(lagrangian,Float64,order)
V0 <span class="pl-k">=</span> <span class="pl-c1">FESpace</span>(
  model,
  reffe,
  conformity<span class="pl-k">=</span><span class="pl-c1">:H1</span>, 
  dirichlet_tags<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>boundary<span class="pl-pds">"</span></span>
)

U <span class="pl-k">=</span> <span class="pl-c1">TransientTrialFESpace</span>(V0,u)

Ω <span class="pl-k">=</span> <span class="pl-c1">Triangulation</span>(model)
degree <span class="pl-k">=</span> <span class="pl-c1">2</span><span class="pl-k">*</span>order
dΩ <span class="pl-k">=</span> <span class="pl-c1">Measure</span>(Ω,degree)

<span class="pl-en">a</span>(u,v) <span class="pl-k">=</span> <span class="pl-c1">∫</span>( <span class="pl-c1">∇</span>(v)<span class="pl-k">⋅</span><span class="pl-c1">∇</span>(u) )dΩ
<span class="pl-en">b</span>(v,t) <span class="pl-k">=</span> <span class="pl-c1">∫</span>( v<span class="pl-k">*</span><span class="pl-c1">f</span>(t) )dΩ
<span class="pl-en">m</span>(u,v) <span class="pl-k">=</span> <span class="pl-c1">∫</span>( v<span class="pl-k">*</span>u )dΩ

<span class="pl-en">res</span>(t,u,ut,v) <span class="pl-k">=</span> <span class="pl-c1">a</span>(u,v) <span class="pl-k">+</span> <span class="pl-c1">m</span>(ut,v) <span class="pl-k">-</span> <span class="pl-c1">b</span>(v,t)
<span class="pl-en">jac</span>(t,u,ut,du,v) <span class="pl-k">=</span> <span class="pl-c1">a</span>(du,v)
<span class="pl-en">jac_t</span>(t,u,ut,dut,v) <span class="pl-k">=</span> <span class="pl-c1">m</span>(dut,v)

op <span class="pl-k">=</span> <span class="pl-c1">TransientFEOperator</span>(res,jac,jac_t,U,V0)

t0 <span class="pl-k">=</span> <span class="pl-c1">0.0</span>
tF <span class="pl-k">=</span> <span class="pl-c1">1.0</span>
dt <span class="pl-k">=</span> <span class="pl-c1">0.1</span>

U0 <span class="pl-k">=</span> <span class="pl-c1">U</span>(<span class="pl-c1">0.0</span>)
uh0 <span class="pl-k">=</span> <span class="pl-c1">interpolate_everywhere</span>(<span class="pl-c1">u</span>(<span class="pl-c1">0.0</span>),U0)

ls <span class="pl-k">=</span> <span class="pl-c1">LUSolver</span>()
odes <span class="pl-k">=</span> <span class="pl-c1">ThetaMethod</span>(ls,dt,θ)
solver <span class="pl-k">=</span> <span class="pl-c1">TransientFESolver</span>(odes)
sol_t <span class="pl-k">=</span> <span class="pl-c1">solve</span>(solver,op,uh0,t0,tF)

<span class="pl-k">for</span> (uh_tn, tn) <span class="pl-k">in</span> sol_t
  <span class="pl-c"><span class="pl-c">#</span> Here we have the solution uh_tn at tn</span>
<span class="pl-k">end</span></pre></div>
</article></div>