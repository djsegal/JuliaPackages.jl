<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-gridapodes" class="anchor" aria-hidden="true" href="#gridapodes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>GridapODEs</h1>
<p><a href="https://gridap.github.io/GridapODEs.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/f7b92a177c912c1cc007fc9b40f17ff3ee3bb414/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://gridap.github.io/GridapODEs.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/3e353c26ddfe819150acbc732248f4f2a37f5175/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a>
<a href="https://travis-ci.com/gridap/GridapODEs.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/db5575f4f87e4500a097b5cca29021ef7fc5ac2b/68747470733a2f2f7472617669732d63692e636f6d2f6772696461702f4772696461704f4445732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/gridap/GridapODEs.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/gridap/GridapODEs.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/aa0bf463fa5a2d3193dde49d802c9a66251be13c/68747470733a2f2f636f6465636f762e696f2f67682f6772696461702f4772696461704f4445732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/gridap/GridapODEs.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/gridap/GridapODEs.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/6fdfc4f7b6a10eb5596169e60f2ea9194eb3281c/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f6772696461702f4772696461704f4445732e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coveralls" data-canonical-src="https://coveralls.io/repos/github/gridap/GridapODEs.jl/badge.svg?branch=master" style="max-width:100%;"></a></p>
<p>This package provides time integration tools for <code>Gridap</code>. As an example, the following code solves the heat equation.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> Gridap
<span class="pl-k">using</span> ForwardDiff
<span class="pl-k">using</span> GridapODEs<span class="pl-k">.</span>ODETools
<span class="pl-k">using</span> GridapODEs<span class="pl-k">.</span>TransientFETools

<span class="pl-k">import</span> Gridap<span class="pl-k">:</span> ∇
<span class="pl-k">import</span> GridapODEs<span class="pl-k">.</span>TransientFETools<span class="pl-k">:</span> ∂t

θ <span class="pl-k">=</span> <span class="pl-c1">0.5</span>

<span class="pl-en">u</span>(x,t) <span class="pl-k">=</span> (<span class="pl-c1">1.0</span><span class="pl-k">-</span>x[<span class="pl-c1">1</span>])<span class="pl-k">*</span>x[<span class="pl-c1">1</span>]<span class="pl-k">*</span>(<span class="pl-c1">1.0</span><span class="pl-k">-</span>x[<span class="pl-c1">2</span>])<span class="pl-k">*</span>x[<span class="pl-c1">2</span>]<span class="pl-k">*</span>t
<span class="pl-en">u</span>(t<span class="pl-k">::</span><span class="pl-c1">Real</span>) <span class="pl-k">=</span> x <span class="pl-k">-&gt;</span> <span class="pl-c1">u</span>(x,t)
∂<span class="pl-en">tu</span>(t) <span class="pl-k">=</span> x <span class="pl-k">-&gt;</span> ForwardDiff<span class="pl-k">.</span><span class="pl-c1">derivative</span>(<span class="pl-c1">v</span>(x),t)
∂<span class="pl-en">tu</span>(x,t) <span class="pl-k">=</span> ∂<span class="pl-c1">tu</span>(t)(x)

<span class="pl-en">f</span>(t) <span class="pl-k">=</span> x <span class="pl-k">-&gt;</span> <span class="pl-c1">1.0</span>

domain <span class="pl-k">=</span> (<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>)
partition <span class="pl-k">=</span> (<span class="pl-c1">4</span>,<span class="pl-c1">4</span>)
model <span class="pl-k">=</span> <span class="pl-c1">CartesianDiscreteModel</span>(domain,partition)

order <span class="pl-k">=</span> <span class="pl-c1">2</span>

V0 <span class="pl-k">=</span> <span class="pl-c1">FESpace</span>(
  reffe<span class="pl-k">=</span><span class="pl-c1">:Lagrangian</span>, order<span class="pl-k">=</span>order, valuetype<span class="pl-k">=</span>Float64,
  conformity<span class="pl-k">=</span><span class="pl-c1">:H1</span>, model<span class="pl-k">=</span>model, dirichlet_tags<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>boundary<span class="pl-pds">"</span></span>)

U <span class="pl-k">=</span> <span class="pl-c1">TransientTrialFESpace</span>(V0,u)

trian <span class="pl-k">=</span> <span class="pl-c1">Triangulation</span>(model)
degree <span class="pl-k">=</span> <span class="pl-c1">2</span><span class="pl-k">*</span>order
quad <span class="pl-k">=</span> <span class="pl-c1">CellQuadrature</span>(trian,degree)

<span class="pl-en">a</span>(u,v) <span class="pl-k">=</span> <span class="pl-c1">∇</span>(v)<span class="pl-k">*</span><span class="pl-c1">∇</span>(u)
<span class="pl-en">b</span>(v,t) <span class="pl-k">=</span> v<span class="pl-k">*</span><span class="pl-c1">f</span>(t)

<span class="pl-en">res</span>(t,u,ut,v) <span class="pl-k">=</span> <span class="pl-c1">a</span>(u,v) <span class="pl-k">+</span> ut<span class="pl-k">*</span>v <span class="pl-k">-</span> <span class="pl-c1">b</span>(v,t)
<span class="pl-en">jac</span>(t,u,ut,du,v) <span class="pl-k">=</span> <span class="pl-c1">a</span>(du,v)
<span class="pl-en">jac_t</span>(t,u,ut,dut,v) <span class="pl-k">=</span> dut<span class="pl-k">*</span>v

t_Ω <span class="pl-k">=</span> <span class="pl-c1">FETerm</span>(res,jac,jac_t,trian,quad)
op <span class="pl-k">=</span> <span class="pl-c1">TransientFEOperator</span>(U,V0,t_Ω)

t0 <span class="pl-k">=</span> <span class="pl-c1">0.0</span>
tF <span class="pl-k">=</span> <span class="pl-c1">1.0</span>
dt <span class="pl-k">=</span> <span class="pl-c1">0.1</span>

U0 <span class="pl-k">=</span> <span class="pl-c1">U</span>(<span class="pl-c1">0.0</span>)
uh0 <span class="pl-k">=</span> <span class="pl-c1">interpolate_everywhere</span>(U0,<span class="pl-c1">u</span>(<span class="pl-c1">0.0</span>))

ls <span class="pl-k">=</span> <span class="pl-c1">LUSolver</span>()
odes <span class="pl-k">=</span> <span class="pl-c1">ThetaMethod</span>(ls,dt,θ)
solver <span class="pl-k">=</span> <span class="pl-c1">TransientFESolver</span>(odes)
sol_t <span class="pl-k">=</span> <span class="pl-c1">solve</span>(solver,op,uh0,t0,tF)

<span class="pl-k">for</span> (uh_tn, tn) <span class="pl-k">in</span> sol_t
  <span class="pl-c"><span class="pl-c">#</span> Here we have the solution uh_tn at tn</span>
<span class="pl-k">end</span></pre></div>
</article></div>