<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-portable-hardware-locality-hwloc" class="anchor" aria-hidden="true" href="#portable-hardware-locality-hwloc"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Portable Hardware Locality (Hwloc)</h1>
<p><a href="https://travis-ci.org/JuliaParallel/Hwloc.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/8c1bf09cc1e997d66c3984dbe9b0d233c7c71271/68747470733a2f2f7472617669732d63692e6f72672f4a756c6961506172616c6c656c2f48776c6f632e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaParallel/Hwloc.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/eschnett/hwloc-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/2065d3775ee7d61c383ad0b9f238f70b83780b98/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f3567646461793032356b64346e6934383f7376673d74727565" alt="Build status" data-canonical-src="https://ci.appveyor.com/api/projects/status/5gdday025kd4ni48?svg=true" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/JuliaParallel/Hwloc.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/beed6e172eec39468797f327a436fa86c504416c/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f4a756c6961506172616c6c656c2f48776c6f632e6a6c2f62616467652e7376673f6272616e63683d6d617374657226736572766963653d676974687562" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/JuliaParallel/Hwloc.jl/badge.svg?branch=master&amp;service=github" style="max-width:100%;"></a></p>
<p>This Julia package wraps the hwloc library.</p>
<p>The Portable Hardware Locality (hwloc) software package provides a
portable abstraction (across OS, versions, architectures, ...) of the
hierarchical topology of modern architectures, including NUMA memory
nodes, sockets, shared caches, cores and simultaneous multithreading.
It also gathers various system attributes such as cache and memory
information as well as the locality of I/O devices such as network
interfaces, InfiniBand HCAs or GPUs. It primarily aims at helping
applications with gathering information about modern computing
hardware so as to exploit it accordingly and efficiently.</p>
<p><a href="http://www.open-mpi.org/projects/hwloc/" rel="nofollow">http://www.open-mpi.org/projects/hwloc/</a></p>
<h1><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Usage</h1>
<p>The Julia module Hwloc provides a high-level wrapper of the hwloc
library; that is, hwloc's data structure are translated into Julia
types that contain the same information, but are modified to look
"natural" in Julia. Low-level administrative tasks are hidden.</p>
<p>The most important function is <code>Hwloc.topology_load</code>, which examines
the current node's hardware topology (memories, caches, cores, etc.),
and returns a tree structure describing this topology. This
corresponds to the output of the <code>lstopo</code> program.</p>
<pre><code>import Hwloc
topology = Hwloc.topology_load()
println("Machine topology:")
print(topology)
</code></pre>
<p>This outputs the full information, such as:</p>
<pre><code>D0: L0 P0 Machine  
    D1: L0 P0 Node  
        D2: L0 P0 Cache  Cache{size=8388608,depth=3,linesize=64,associativity=0,type=Unified}
            D3: L0 P0 Cache  Cache{size=262144,depth=2,linesize=64,associativity=8,type=Unified}
                D4: L0 P0 Cache  Cache{size=32768,depth=1,linesize=64,associativity=0,type=Data}
                    D5: L0 P0 Core  
                        D6: L0 P0 PU  
                        D6: L1 P1 PU  
            D3: L1 P1 Cache  Cache{size=262144,depth=2,linesize=64,associativity=8,type=Unified}
                D4: L1 P1 Cache  Cache{size=32768,depth=1,linesize=64,associativity=0,type=Data}
                    D5: L1 P1 Core  
                        D6: L2 P2 PU  
                        D6: L3 P3 PU  
            D3: L2 P2 Cache  Cache{size=262144,depth=2,linesize=64,associativity=8,type=Unified}
                D4: L2 P2 Cache  Cache{size=32768,depth=1,linesize=64,associativity=0,type=Data}
                    D5: L2 P2 Core  
                        D6: L4 P4 PU  
                        D6: L5 P5 PU  
            D3: L3 P3 Cache  Cache{size=262144,depth=2,linesize=64,associativity=8,type=Unified}
                D4: L3 P3 Cache  Cache{size=32768,depth=1,linesize=64,associativity=0,type=Data}
                    D5: L3 P3 Core  
                        D6: L6 P6 PU  
                        D6: L7 P7 PU  
</code></pre>
<p>Often, one only wants an overview of the topology, omitting details.
The function <code>Hwloc.getinfo</code> does this, similar to the output of the
<code>hwloc-info</code> program.</p>
<pre><code>import Hwloc
topology = Hwloc.topology_load()
summary = Hwloc.getinfo(topology)
println("Machine overview:")
for obj in summary
    obj_type = obj[1]
    count = obj[2]
    println("$count $obj_type")
end
</code></pre>
<p>This may output:</p>
<pre><code>1 Machine
1 Node
1 Cache
4 Cache
4 Cache
4 Core
8 PU
</code></pre>
<h2><a id="user-content-obtaining-particular-information" class="anchor" aria-hidden="true" href="#obtaining-particular-information"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Obtaining particular information:</h2>
<p>The number of (physical) cores and virtual cores (PUs):</p>
<pre><code>import Hwloc
topology = Hwloc.topology_load()
counts = Hwloc.histmap(topology)
ncores = counts[:Core]
npus = counts[:PU]
println("This machine has $ncores cores and $npus PUs (processing units)")
</code></pre>
<p>This may print:</p>
<pre><code>This machine has 4 cores and 8 PUs (processing units)
</code></pre>
<p>A shortcut is also provided for the number of (physical) cores:</p>
<pre><code>import Hwloc
ncores = Hwloc.num_physical_cores()
</code></pre>
<p>The L1 cache properties:</p>
<pre><code>import Hwloc
topology = Hwloc.topology_load()
l1cache = first(filter(t-&gt;t.type_==:Cache &amp;&amp; t.attr.depth==1, topology)).attr
println("L1 cache information: $l1cache")
</code></pre>
<p>This may print:</p>
<pre><code>L1 cache information: Cache{size=32768,depth=1,linesize=64,associativity=0,type=Data}
</code></pre>
</article></div>