<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-portable-hardware-locality-hwloc" class="anchor" aria-hidden="true" href="#portable-hardware-locality-hwloc"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Portable Hardware Locality (Hwloc)</h1>
<p dir="auto"><a href="https://github.com/JuliaParallel/Hwloc.jl/actions"><img src="https://github.com/JuliaParallel/Hwloc.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/JuliaParallel/Hwloc.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/af55e28bc36eb4a6305da376f87f28e5205e19ea089a58cac3b04b683f07e813/68747470733a2f2f636f6465636f762e696f2f67682f4a756c6961506172616c6c656c2f48776c6f632e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/JuliaParallel/Hwloc.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">Hwloc.jl is a high-level wrapper of the
<a href="http://www.open-mpi.org/projects/hwloc/" rel="nofollow">hwloc library</a>. It examines the current machine's
hardware topology (memories, caches, cores, etc.) and provides
Julia functions to visualize and access this information conveniently.</p>
<p dir="auto">Taken from the <a href="http://www.open-mpi.org/projects/hwloc/" rel="nofollow">hwloc website</a>:</p>
<blockquote>
<p dir="auto">The Portable Hardware Locality (hwloc) software package provides a portable abstraction (across OS, versions, architectures, ...) of the hierarchical topology of modern architectures, including NUMA memory nodes, sockets, shared caches, cores and simultaneous multithreading. It also gathers various system attributes such as cache and memory information as well as the locality of I/O devices such as network interfaces, InfiniBand HCAs or GPUs.</p>
<p dir="auto">hwloc primarily aims at helping applications with gathering information about increasingly complex parallel computing platforms so as to exploit them accordingly and efficiently.</p>
</blockquote>
<h1 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h1>
<p dir="auto">Perhaps the most important function is <code>Hwloc.topology()</code> which
displays a tree structure describing the system topology. This
roughly corresponds to the output of the <code>lstopo</code> program (non-GUI version).
On my laptop this gives the following output:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using Hwloc

julia&gt; topology()
Machine (16.0 GB)
    Package L#0 P#0 (16.0 GB)
        NUMANode (16.0 GB)
        L3 (12.0 MB)
            L2 (256.0 kB) + L1 (32.0 kB) + Core L#0 P#0 
                PU L#0 P#0 
                PU L#1 P#1 
            L2 (256.0 kB) + L1 (32.0 kB) + Core L#1 P#1 
                PU L#2 P#2 
                PU L#3 P#3 
            L2 (256.0 kB) + L1 (32.0 kB) + Core L#2 P#2 
                PU L#4 P#4 
                PU L#5 P#5 
            L2 (256.0 kB) + L1 (32.0 kB) + Core L#3 P#3 
                PU L#6 P#6 
                PU L#7 P#7 
            L2 (256.0 kB) + L1 (32.0 kB) + Core L#4 P#4 
                PU L#8 P#8 
                PU L#9 P#9 
            L2 (256.0 kB) + L1 (32.0 kB) + Core L#5 P#5 
                PU L#10 P#10 
                PU L#11 P#11"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Hwloc

julia<span class="pl-k">&gt;</span> <span class="pl-c1">topology</span>()
Machine (<span class="pl-c1">16.0</span> GB)
    Package L<span class="pl-c"><span class="pl-c">#</span>0 P#0 (16.0 GB)</span>
        NUMANode (<span class="pl-c1">16.0</span> GB)
        L3 (<span class="pl-c1">12.0</span> MB)
            L2 (<span class="pl-c1">256.0</span> kB) <span class="pl-k">+</span> L1 (<span class="pl-c1">32.0</span> kB) <span class="pl-k">+</span> Core L<span class="pl-c"><span class="pl-c">#</span>0 P#0 </span>
                PU L<span class="pl-c"><span class="pl-c">#</span>0 P#0 </span>
                PU L<span class="pl-c"><span class="pl-c">#</span>1 P#1 </span>
            L2 (<span class="pl-c1">256.0</span> kB) <span class="pl-k">+</span> L1 (<span class="pl-c1">32.0</span> kB) <span class="pl-k">+</span> Core L<span class="pl-c"><span class="pl-c">#</span>1 P#1 </span>
                PU L<span class="pl-c"><span class="pl-c">#</span>2 P#2 </span>
                PU L<span class="pl-c"><span class="pl-c">#</span>3 P#3 </span>
            L2 (<span class="pl-c1">256.0</span> kB) <span class="pl-k">+</span> L1 (<span class="pl-c1">32.0</span> kB) <span class="pl-k">+</span> Core L<span class="pl-c"><span class="pl-c">#</span>2 P#2 </span>
                PU L<span class="pl-c"><span class="pl-c">#</span>4 P#4 </span>
                PU L<span class="pl-c"><span class="pl-c">#</span>5 P#5 </span>
            L2 (<span class="pl-c1">256.0</span> kB) <span class="pl-k">+</span> L1 (<span class="pl-c1">32.0</span> kB) <span class="pl-k">+</span> Core L<span class="pl-c"><span class="pl-c">#</span>3 P#3 </span>
                PU L<span class="pl-c"><span class="pl-c">#</span>6 P#6 </span>
                PU L<span class="pl-c"><span class="pl-c">#</span>7 P#7 </span>
            L2 (<span class="pl-c1">256.0</span> kB) <span class="pl-k">+</span> L1 (<span class="pl-c1">32.0</span> kB) <span class="pl-k">+</span> Core L<span class="pl-c"><span class="pl-c">#</span>4 P#4 </span>
                PU L<span class="pl-c"><span class="pl-c">#</span>8 P#8 </span>
                PU L<span class="pl-c"><span class="pl-c">#</span>9 P#9 </span>
            L2 (<span class="pl-c1">256.0</span> kB) <span class="pl-k">+</span> L1 (<span class="pl-c1">32.0</span> kB) <span class="pl-k">+</span> Core L<span class="pl-c"><span class="pl-c">#</span>5 P#5 </span>
                PU L<span class="pl-c"><span class="pl-c">#</span>10 P#10 </span>
                PU L<span class="pl-c"><span class="pl-c">#</span>11 P#11</span></pre></div>
<p dir="auto">Often, one is only interested in a summary of this topology.
The function <code>topology_info()</code> provides such a compact description, which is loosely similar to the output of the <code>hwloc-info</code> command-line application.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; topology_info()
Machine: 1 (16.0 GB)
 Package: 1 (16.0 GB)
  NUMANode: 1 (16.0 GB)
   L3Cache: 1 (12.0 MB)
    L2Cache: 6 (256.0 KB)
     L1Cache: 6 (32.0 KB)
      Core: 6
       PU: 12"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">topology_info</span>()
Machine<span class="pl-k">:</span> <span class="pl-c1">1</span> (<span class="pl-c1">16.0</span> GB)
 Package<span class="pl-k">:</span> <span class="pl-c1">1</span> (<span class="pl-c1">16.0</span> GB)
  NUMANode<span class="pl-k">:</span> <span class="pl-c1">1</span> (<span class="pl-c1">16.0</span> GB)
   L3Cache<span class="pl-k">:</span> <span class="pl-c1">1</span> (<span class="pl-c1">12.0</span> MB)
    L2Cache<span class="pl-k">:</span> <span class="pl-c1">6</span> (<span class="pl-c1">256.0</span> KB)
     L1Cache<span class="pl-k">:</span> <span class="pl-c1">6</span> (<span class="pl-c1">32.0</span> KB)
      Core<span class="pl-k">:</span> <span class="pl-c1">6</span>
       PU<span class="pl-k">:</span> <span class="pl-c1">12</span></pre></div>
<p dir="auto">If you prefer a more verbose graphical visualization you may consider using <code>topology_graphical()</code>:</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://user-images.githubusercontent.com/187980/192498088-712d7ff0-c8ac-4535-b386-c08d3d0eddb3.png"><img width="1806" alt="Screenshot 2022-09-27 at 12 06 57" src="https://user-images.githubusercontent.com/187980/192498088-712d7ff0-c8ac-4535-b386-c08d3d0eddb3.png" style="max-width: 100%;"></a></p>
<p dir="auto">(Note that as of now this may not produce colorful output on all systems.)</p>
<h2 dir="auto"><a id="user-content-obtaining-particular-information" class="anchor" aria-hidden="true" href="#obtaining-particular-information"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Obtaining particular information:</h2>
<h3 dir="auto"><a id="user-content-number-of-cores-numa-nodes-and-sockets" class="anchor" aria-hidden="true" href="#number-of-cores-numa-nodes-and-sockets"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Number of cores, NUMA nodes, and sockets</h3>
<p dir="auto"><code>Hwloc</code> exports a few convenience functions for obtaining particularly import information,
such as the number of physical and virtual cores (i.e. processing units), NUMA nodes, and sockets / packages:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; num_physical_cores()
6

julia&gt; num_virtual_cores()
12

julia&gt; num_numa_nodes()
1

julia&gt; num_packages()
1"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">num_physical_cores</span>()
<span class="pl-c1">6</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">num_virtual_cores</span>()
<span class="pl-c1">12</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">num_numa_nodes</span>()
<span class="pl-c1">1</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">num_packages</span>()
<span class="pl-c1">1</span></pre></div>
<p dir="auto">One may also use <code>getinfo()</code> to programmatically access some of the output of <code>topology_info()</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; getinfo()
Dict{Symbol,Int64} with 8 entries:
  :L2Cache  =&gt; 6
  :NUMANode =&gt; 1
  :Core     =&gt; 6
  :Package  =&gt; 1
  :L1Cache  =&gt; 6
  :Machine  =&gt; 1
  :PU       =&gt; 12
  :L3Cache  =&gt; 1"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">getinfo</span>()
Dict{Symbol,Int64} with <span class="pl-c1">8</span> entries<span class="pl-k">:</span>
  <span class="pl-c1">:L2Cache</span>  <span class="pl-k">=&gt;</span> <span class="pl-c1">6</span>
  <span class="pl-c1">:NUMANode</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1</span>
  <span class="pl-c1">:Core</span>     <span class="pl-k">=&gt;</span> <span class="pl-c1">6</span>
  <span class="pl-c1">:Package</span>  <span class="pl-k">=&gt;</span> <span class="pl-c1">1</span>
  <span class="pl-c1">:L1Cache</span>  <span class="pl-k">=&gt;</span> <span class="pl-c1">6</span>
  <span class="pl-c1">:Machine</span>  <span class="pl-k">=&gt;</span> <span class="pl-c1">1</span>
  <span class="pl-c1">:PU</span>       <span class="pl-k">=&gt;</span> <span class="pl-c1">12</span>
  <span class="pl-c1">:L3Cache</span>  <span class="pl-k">=&gt;</span> <span class="pl-c1">1</span></pre></div>
<h3 dir="auto"><a id="user-content-cache-properties" class="anchor" aria-hidden="true" href="#cache-properties"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Cache properties</h3>
<p dir="auto">Assuming that multiple caches of the same level (e.g. L1) have identical properties, one can use the convenience functions <code>cachesize()</code> and <code>cachelinesize()</code> to obtain the relevant sizes in Bytes:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; cachesize()
(L1 = 32768, L2 = 262144, L3 = 12582912)

julia&gt; cachelinesize()
(L1 = 64, L2 = 64, L3 = 64)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">cachesize</span>()
(L1 <span class="pl-k">=</span> <span class="pl-c1">32768</span>, L2 <span class="pl-k">=</span> <span class="pl-c1">262144</span>, L3 <span class="pl-k">=</span> <span class="pl-c1">12582912</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">cachelinesize</span>()
(L1 <span class="pl-k">=</span> <span class="pl-c1">64</span>, L2 <span class="pl-k">=</span> <span class="pl-c1">64</span>, L3 <span class="pl-k">=</span> <span class="pl-c1">64</span>)</pre></div>
<p dir="auto">Otherwise, there are the following more specific functions available:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; @show Hwloc.l1cache_sizes();
       @show Hwloc.l2cache_sizes();
       @show Hwloc.l3cache_sizes();
Hwloc.l1cache_sizes() = [32768, 32768, 32768, 32768, 32768, 32768]
Hwloc.l2cache_sizes() = [262144, 262144, 262144, 262144, 262144, 262144]
Hwloc.l3cache_sizes() = [12582912]"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">@show</span> Hwloc<span class="pl-k">.</span><span class="pl-c1">l1cache_sizes</span>();
       <span class="pl-c1">@show</span> Hwloc<span class="pl-k">.</span><span class="pl-c1">l2cache_sizes</span>();
       <span class="pl-c1">@show</span> Hwloc<span class="pl-k">.</span><span class="pl-c1">l3cache_sizes</span>();
Hwloc<span class="pl-k">.</span><span class="pl-en">l1cache_sizes</span>() <span class="pl-k">=</span> [<span class="pl-c1">32768</span>, <span class="pl-c1">32768</span>, <span class="pl-c1">32768</span>, <span class="pl-c1">32768</span>, <span class="pl-c1">32768</span>, <span class="pl-c1">32768</span>]
Hwloc<span class="pl-k">.</span><span class="pl-en">l2cache_sizes</span>() <span class="pl-k">=</span> [<span class="pl-c1">262144</span>, <span class="pl-c1">262144</span>, <span class="pl-c1">262144</span>, <span class="pl-c1">262144</span>, <span class="pl-c1">262144</span>, <span class="pl-c1">262144</span>]
Hwloc<span class="pl-k">.</span><span class="pl-en">l3cache_sizes</span>() <span class="pl-k">=</span> [<span class="pl-c1">12582912</span>]</pre></div>
<h3 dir="auto"><a id="user-content-manual-access" class="anchor" aria-hidden="true" href="#manual-access"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Manual access</h3>
<p dir="auto">To manually traverse and investigate the system topology tree, one may use <code>gettopology()</code> to
obtain the top-level <code>Hwloc.Object</code>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; topo = gettopology()
Hwloc.Object: Machine

julia&gt; fieldnames(typeof(topo))
(:type_, :os_index, :name, :attr, :mem, :depth, :logical_index, :children, :memory_children)

julia&gt; Hwloc.children(topo)
1-element Array{Hwloc.Object,1}:
 Hwloc.Object: Package

julia&gt; Hwloc.children(topo.children[1])
1-element Array{Hwloc.Object,1}:
 Hwloc.Object: L3Cache

julia&gt; l2cache = Hwloc.children(topo.children[1].children[1])[1]
Hwloc.Object: L2Cache

julia&gt; Hwloc.attributes(l2cache)
Cache{size=262144,depth=2,linesize=64,associativity=4,type=Unified}

julia&gt; l2cache |&gt; print_topology
L2 (256.0 kB) + L1 (32.0 kB) + Core L#0 P#0 
    PU L#0 P#0 
    PU L#1 P#1"><pre>julia<span class="pl-k">&gt;</span> topo <span class="pl-k">=</span> <span class="pl-c1">gettopology</span>()
Hwloc<span class="pl-k">.</span>Object<span class="pl-k">:</span> Machine

julia<span class="pl-k">&gt;</span> <span class="pl-c1">fieldnames</span>(<span class="pl-c1">typeof</span>(topo))
(<span class="pl-c1">:type_</span>, <span class="pl-c1">:os_index</span>, <span class="pl-c1">:name</span>, <span class="pl-c1">:attr</span>, <span class="pl-c1">:mem</span>, <span class="pl-c1">:depth</span>, <span class="pl-c1">:logical_index</span>, <span class="pl-c1">:children</span>, <span class="pl-c1">:memory_children</span>)

julia<span class="pl-k">&gt;</span> Hwloc<span class="pl-k">.</span><span class="pl-c1">children</span>(topo)
<span class="pl-c1">1</span><span class="pl-k">-</span>element Array{Hwloc<span class="pl-k">.</span>Object,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 Hwloc<span class="pl-k">.</span>Object<span class="pl-k">:</span> Package

julia<span class="pl-k">&gt;</span> Hwloc<span class="pl-k">.</span><span class="pl-c1">children</span>(topo<span class="pl-k">.</span>children[<span class="pl-c1">1</span>])
<span class="pl-c1">1</span><span class="pl-k">-</span>element Array{Hwloc<span class="pl-k">.</span>Object,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 Hwloc<span class="pl-k">.</span>Object<span class="pl-k">:</span> L3Cache

julia<span class="pl-k">&gt;</span> l2cache <span class="pl-k">=</span> Hwloc<span class="pl-k">.</span><span class="pl-c1">children</span>(topo<span class="pl-k">.</span>children[<span class="pl-c1">1</span>]<span class="pl-k">.</span>children[<span class="pl-c1">1</span>])[<span class="pl-c1">1</span>]
Hwloc<span class="pl-k">.</span>Object<span class="pl-k">:</span> L2Cache

julia<span class="pl-k">&gt;</span> Hwloc<span class="pl-k">.</span><span class="pl-c1">attributes</span>(l2cache)
Cache{size<span class="pl-k">=</span><span class="pl-c1">262144</span>,depth<span class="pl-k">=</span><span class="pl-c1">2</span>,linesize<span class="pl-k">=</span><span class="pl-c1">64</span>,associativity<span class="pl-k">=</span><span class="pl-c1">4</span>,type<span class="pl-k">=</span>Unified}

julia<span class="pl-k">&gt;</span> l2cache <span class="pl-k">|&gt;</span> print_topology
L2 (<span class="pl-c1">256.0</span> kB) <span class="pl-k">+</span> L1 (<span class="pl-c1">32.0</span> kB) <span class="pl-k">+</span> Core L<span class="pl-c"><span class="pl-c">#</span>0 P#0 </span>
    PU L<span class="pl-c"><span class="pl-c">#</span>0 P#0 </span>
    PU L<span class="pl-c"><span class="pl-c">#</span>1 P#1</span></pre></div>
<p dir="auto">Topology elements of type <code>Hwloc.Object</code> also are Julia iterators. One can thus readily traverse the corresponding part of the topology tree:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; for obj in l2cache
           @show hwloc_typeof(obj)
       end
hwloc_typeof(obj) = :L2Cache
hwloc_typeof(obj) = :L1Cache
hwloc_typeof(obj) = :Core
hwloc_typeof(obj) = :PU
hwloc_typeof(obj) = :PU

julia&gt; collect(obj for obj in l2cache)
5-element Array{Hwloc.Object,1}:
 Hwloc.Object: L2Cache
 Hwloc.Object: L1Cache
 Hwloc.Object: Core
 Hwloc.Object: PU
 Hwloc.Object: PU

julia&gt; count(hwloc_isa(:PU), l2cache)
2

julia&gt; collectobjects(:PU, l2cache)
2-element Array{Hwloc.Object,1}:
 Hwloc.Object: PU
 Hwloc.Object: PU"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">for</span> obj <span class="pl-k">in</span> l2cache
           <span class="pl-c1">@show</span> <span class="pl-c1">hwloc_typeof</span>(obj)
       <span class="pl-k">end</span>
<span class="pl-en">hwloc_typeof</span>(obj) <span class="pl-k">=</span> <span class="pl-c1">:L2Cache</span>
<span class="pl-en">hwloc_typeof</span>(obj) <span class="pl-k">=</span> <span class="pl-c1">:L1Cache</span>
<span class="pl-en">hwloc_typeof</span>(obj) <span class="pl-k">=</span> <span class="pl-c1">:Core</span>
<span class="pl-en">hwloc_typeof</span>(obj) <span class="pl-k">=</span> <span class="pl-c1">:PU</span>
<span class="pl-en">hwloc_typeof</span>(obj) <span class="pl-k">=</span> <span class="pl-c1">:PU</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">collect</span>(obj <span class="pl-k">for</span> obj <span class="pl-k">in</span> l2cache)
<span class="pl-c1">5</span><span class="pl-k">-</span>element Array{Hwloc<span class="pl-k">.</span>Object,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 Hwloc<span class="pl-k">.</span>Object<span class="pl-k">:</span> L2Cache
 Hwloc<span class="pl-k">.</span>Object<span class="pl-k">:</span> L1Cache
 Hwloc<span class="pl-k">.</span>Object<span class="pl-k">:</span> Core
 Hwloc<span class="pl-k">.</span>Object<span class="pl-k">:</span> PU
 Hwloc<span class="pl-k">.</span>Object<span class="pl-k">:</span> PU

julia<span class="pl-k">&gt;</span> <span class="pl-c1">count</span>(<span class="pl-c1">hwloc_isa</span>(<span class="pl-c1">:PU</span>), l2cache)
<span class="pl-c1">2</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">collectobjects</span>(<span class="pl-c1">:PU</span>, l2cache)
<span class="pl-c1">2</span><span class="pl-k">-</span>element Array{Hwloc<span class="pl-k">.</span>Object,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 Hwloc<span class="pl-k">.</span>Object<span class="pl-k">:</span> PU
 Hwloc<span class="pl-k">.</span>Object<span class="pl-k">:</span> PU</pre></div>
<h3 dir="auto"><a id="user-content-manual-topology-query" class="anchor" aria-hidden="true" href="#manual-topology-query"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Manual topology query</h3>
<p dir="auto">On the first call of <code>gettopology()</code>, Hwloc.jl examines the current machine's
hardware topology and caches the result in <code>Hwloc.machine_topology</code>.
To manually query the system topology one may use <code>Hwloc.topology_load</code>
which directly <code>ccall</code>s into <code>libhwloc</code> and directly returns the
resulting <code>Hwloc.Object</code>.</p>
</article></div>