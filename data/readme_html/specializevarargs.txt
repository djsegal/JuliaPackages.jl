<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p><a href="https://travis-ci.com/MasonProtter/SpecializeVarargs.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/8deadf3a53d608e0106a68ab34ff4e731a00be65d44a09f48ad5d4d05a7129b4/68747470733a2f2f7472617669732d63692e636f6d2f4d61736f6e50726f747465722f5370656369616c697a65566172617267732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/MasonProtter/SpecializeVarargs.jl.svg?branch=master" style="max-width:100%;"></a></p>
<h1><a id="user-content-specializevarargsjl" class="anchor" aria-hidden="true" href="#specializevarargsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>SpecializeVarargs.jl</h1>
<p>SpecializeVarargs.jl does one thing: force to julia to create and specialize on a given number of varadic arguments. This is likely only useful to people doing very complicated codegen in high performance situations, e.g. in Cassette overdub methods like those used in <a href="https://github.com/YingboMa/ForwardDiff2.jl">ForwardDiff2.jl</a>.</p>
<p>To install, simply open the <code>pkg</code> repl mode with <code>]</code> from the regular julia REPL and type</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="pkg&gt; add SpecializeVarargs
"><pre>pkg<span class="pl-k">&gt;</span> add SpecializeVarargs</pre></div>
<p>or do</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using Pkg; pkg&quot;add SpecializeVarargs&quot;
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Pkg; <span class="pl-s"><span class="pl-pds"><span class="pl-c1">pkg</span>"</span>add SpecializeVarargs<span class="pl-pds">"</span></span></pre></div>
<p>from the julia repl.</p>
<h3><a id="user-content-performance-example" class="anchor" aria-hidden="true" href="#performance-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Performance Example</h3>
<details>
 
<p>
</p><p>Here's a <a href="https://github.com/jrevels/Cassette.jl">Cassette.jl</a> example from the manual on <a href="https://jrevels.github.io/Cassette.jl/stable/contextualdispatch.html" rel="nofollow">contextual dispatch</a> where SpecializeVarargs.jl can give a performance boost:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using SpecializeVarargs
using Cassette

Cassette.@context TraceCtx

mutable struct Trace
    current::Vector{Any}
    stack::Vector{Any}
    Trace() = new(Any[], Any[])
end

function enter!(t::Trace, args...)
    pair = args =&gt; Any[]
    push!(t.current, pair)
    push!(t.stack, t.current)
    t.current = pair.second
    return nothing
end

function exit!(t::Trace)
    t.current = pop!(t.stack)
    return nothing
end

Cassette.prehook(ctx::TraceCtx, args...) = enter!(ctx.metadata, args...)
Cassette.posthook(ctx::TraceCtx, args...) = exit!(ctx.metadata)

trace = Trace()
x, y, z = rand(3)
f(x, y, z) = x*y + y*z

julia&gt; @btime Cassette.overdub(TraceCtx(metadata = trace), () -&gt; f(x, y, z))
  3.315 μs (41 allocations: 1.48 KiB)
0.2360528466104866
"><pre><span class="pl-k">using</span> SpecializeVarargs
<span class="pl-k">using</span> Cassette

Cassette<span class="pl-k">.</span><span class="pl-c1">@context</span> TraceCtx

<span class="pl-k">mutable struct</span> Trace
    current<span class="pl-k">::</span><span class="pl-c1">Vector{Any}</span>
    stack<span class="pl-k">::</span><span class="pl-c1">Vector{Any}</span>
    <span class="pl-en">Trace</span>() <span class="pl-k">=</span> <span class="pl-c1">new</span>(Any[], Any[])
<span class="pl-k">end</span>

<span class="pl-k">function</span> <span class="pl-en">enter!</span>(t<span class="pl-k">::</span><span class="pl-c1">Trace</span>, args<span class="pl-k">...</span>)
    pair <span class="pl-k">=</span> args <span class="pl-k">=&gt;</span> Any[]
    <span class="pl-c1">push!</span>(t<span class="pl-k">.</span>current, pair)
    <span class="pl-c1">push!</span>(t<span class="pl-k">.</span>stack, t<span class="pl-k">.</span>current)
    t<span class="pl-k">.</span>current <span class="pl-k">=</span> pair<span class="pl-k">.</span>second
    <span class="pl-k">return</span> <span class="pl-c1">nothing</span>
<span class="pl-k">end</span>

<span class="pl-k">function</span> <span class="pl-en">exit!</span>(t<span class="pl-k">::</span><span class="pl-c1">Trace</span>)
    t<span class="pl-k">.</span>current <span class="pl-k">=</span> <span class="pl-c1">pop!</span>(t<span class="pl-k">.</span>stack)
    <span class="pl-k">return</span> <span class="pl-c1">nothing</span>
<span class="pl-k">end</span>

Cassette<span class="pl-k">.</span><span class="pl-en">prehook</span>(ctx<span class="pl-k">::</span><span class="pl-c1">TraceCtx</span>, args<span class="pl-k">...</span>) <span class="pl-k">=</span> <span class="pl-c1">enter!</span>(ctx<span class="pl-k">.</span>metadata, args<span class="pl-k">...</span>)
Cassette<span class="pl-k">.</span><span class="pl-en">posthook</span>(ctx<span class="pl-k">::</span><span class="pl-c1">TraceCtx</span>, args<span class="pl-k">...</span>) <span class="pl-k">=</span> <span class="pl-c1">exit!</span>(ctx<span class="pl-k">.</span>metadata)

trace <span class="pl-k">=</span> <span class="pl-c1">Trace</span>()
x, y, z <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">3</span>)
<span class="pl-en">f</span>(x, y, z) <span class="pl-k">=</span> x<span class="pl-k">*</span>y <span class="pl-k">+</span> y<span class="pl-k">*</span>z

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> Cassette<span class="pl-k">.</span><span class="pl-c1">overdub</span>(<span class="pl-c1">TraceCtx</span>(metadata <span class="pl-k">=</span> trace), () <span class="pl-k">-&gt;</span> <span class="pl-c1">f</span>(x, y, z))
  <span class="pl-c1">3.315</span> μs (<span class="pl-c1">41</span> allocations<span class="pl-k">:</span> <span class="pl-c1">1.48</span> KiB)
<span class="pl-c1">0.2360528466104866</span></pre></div>
<p>Now let's redefine the <code>enter!</code> function using SpecializeVarargs's macro <code>@specialize_vararg</code>:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; @specialize_vararg 5 function enter!(t::Trace, args...)
           pair = args =&gt; Any[]
           push!(t.current, pair)
           push!(t.stack, t.current)
           t.current = pair.second
           return nothing
       end
enter! (generic function with 6 methods)

julia&gt; @btime Cassette.overdub(TraceCtx(metadata = trace), () -&gt; f(x, y, z))
  1.540 μs (27 allocations: 1.17 KiB)
0.2360528466104866
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">@specialize_vararg</span> <span class="pl-c1">5</span> <span class="pl-k">function</span> <span class="pl-en">enter!</span>(t<span class="pl-k">::</span><span class="pl-c1">Trace</span>, args<span class="pl-k">...</span>)
           pair <span class="pl-k">=</span> args <span class="pl-k">=&gt;</span> Any[]
           <span class="pl-c1">push!</span>(t<span class="pl-k">.</span>current, pair)
           <span class="pl-c1">push!</span>(t<span class="pl-k">.</span>stack, t<span class="pl-k">.</span>current)
           t<span class="pl-k">.</span>current <span class="pl-k">=</span> pair<span class="pl-k">.</span>second
           <span class="pl-k">return</span> <span class="pl-c1">nothing</span>
       <span class="pl-k">end</span>
enter! (generic <span class="pl-k">function</span> with <span class="pl-c1">6</span> methods)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> Cassette<span class="pl-k">.</span><span class="pl-c1">overdub</span>(<span class="pl-c1">TraceCtx</span>(metadata <span class="pl-k">=</span> trace), () <span class="pl-k">-&gt;</span> <span class="pl-c1">f</span>(x, y, z))
  <span class="pl-c1">1.540</span> μs (<span class="pl-c1">27</span> allocations<span class="pl-k">:</span> <span class="pl-c1">1.17</span> KiB)
<span class="pl-c1">0.2360528466104866</span></pre></div>
<p>Nice!</p>
<p></p>
</details>
<h3><a id="user-content-what-is-the-macro-doing" class="anchor" aria-hidden="true" href="#what-is-the-macro-doing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>What is the macro doing?</h3>
<details>
 
<p>
</p><p>The macro <code>@specialize_vararg</code>, called like <code>@specialize_vararg N fdef</code> where <code>N</code> is an integer literal and <code>fdef</code> is a varadic function definition, will create literal methods for the function defined in <code>fdef</code> for up to <code>N</code> arguments before falling back on a traditional vararg definition. We can exapand the macro to see what exactly it's doing:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using SpecializeVarargs

julia&gt; @macroexpand @specialize_vararg 3 f(x, my_varargs...) = length(my_varargs)
quote
    function f(x, var&quot;##arg1#402&quot;::var&quot;##T1#403&quot;; ) where var&quot;##T1#403&quot;
        my_varargs = (var&quot;##arg1#402&quot;,)
        length(my_varargs)
    end
    function f(x, var&quot;##arg1#404&quot;::var&quot;##T1#406&quot;, var&quot;##arg2#405&quot;::var&quot;##T2#407&quot;; ) where {var&quot;##T1#406&quot;, var&quot;##T2#407&quot;}
        my_varargs = (var&quot;##arg1#404&quot;, var&quot;##arg2#405&quot;)
        length(my_varargs)
    end
    function f(x, var&quot;##arg1#409&quot;::var&quot;##T1#412&quot;, var&quot;##arg2#410&quot;::var&quot;##T2#413&quot;, var&quot;##arg3#411&quot;::var&quot;##T3#414&quot;, var&quot;##args#408&quot;...; ) where {var&quot;##T1#412&quot;, var&quot;##T2#413&quot;, var&quot;##T3#414&quot;}
        my_varargs = (var&quot;##arg1#409&quot;, var&quot;##arg2#410&quot;, var&quot;##arg3#411&quot;, var&quot;##args#408&quot;...)
        length(my_varargs)
    end
end
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> SpecializeVarargs

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@macroexpand</span> <span class="pl-c1">@specialize_vararg</span> <span class="pl-c1">3</span> <span class="pl-en">f</span>(x, my_varargs<span class="pl-k">...</span>) <span class="pl-k">=</span> <span class="pl-c1">length</span>(my_varargs)
<span class="pl-k">quote</span>
    <span class="pl-k">function</span> <span class="pl-en">f</span>(x, <span class="pl-c1">var"##arg1#402"</span><span class="pl-k">::</span><span class="pl-c1">var"##T1#403"</span>; ) <span class="pl-k">where</span> <span class="pl-c1">var"##T1#403"</span>
        my_varargs <span class="pl-k">=</span> (<span class="pl-c1">var"##arg1#402"</span>,)
        <span class="pl-c1">length</span>(my_varargs)
    <span class="pl-k">end</span>
    <span class="pl-k">function</span> <span class="pl-en">f</span>(x, <span class="pl-c1">var"##arg1#404"</span><span class="pl-k">::</span><span class="pl-c1">var"##T1#406"</span>, <span class="pl-c1">var"##arg2#405"</span><span class="pl-k">::</span><span class="pl-c1">var"##T2#407"</span>; ) <span class="pl-k">where</span> {<span class="pl-c1">var"##T1#406"</span>, <span class="pl-c1">var"##T2#407"</span>}
        my_varargs <span class="pl-k">=</span> (<span class="pl-c1">var"##arg1#404"</span>, <span class="pl-c1">var"##arg2#405"</span>)
        <span class="pl-c1">length</span>(my_varargs)
    <span class="pl-k">end</span>
    <span class="pl-k">function</span> <span class="pl-en">f</span>(x, <span class="pl-c1">var"##arg1#409"</span><span class="pl-k">::</span><span class="pl-c1">var"##T1#412"</span>, <span class="pl-c1">var"##arg2#410"</span><span class="pl-k">::</span><span class="pl-c1">var"##T2#413"</span>, <span class="pl-c1">var"##arg3#411"</span><span class="pl-k">::</span><span class="pl-c1">var"##T3#414"</span>, <span class="pl-c1">var"##args#408"</span><span class="pl-k">...</span>; ) <span class="pl-k">where</span> {<span class="pl-c1">var"##T1#412"</span>, <span class="pl-c1">var"##T2#413"</span>, <span class="pl-c1">var"##T3#414"</span>}
        my_varargs <span class="pl-k">=</span> (<span class="pl-c1">var"##arg1#409"</span>, <span class="pl-c1">var"##arg2#410"</span>, <span class="pl-c1">var"##arg3#411"</span>, <span class="pl-c1">var"##args#408"</span><span class="pl-k">...</span>)
        <span class="pl-c1">length</span>(my_varargs)
    <span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>
<p></p>
</details>
<h3><a id="user-content-nested-macros" class="anchor" aria-hidden="true" href="#nested-macros"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Nested macros</h3>
<details>
 
<p>
</p><p>SpecializeVarargs can handle functions defined with macros in front of them as well (e.g. <code>@inbounds</code>), and will forward those macros to the created methods:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; @macroexpand1 @specialize_vararg 3 @foo @bar function f(x::T, args...) where T
           typeof(args)
       end
quote
    @foo @bar(function f(x::T, var&quot;##arg1#415&quot;::var&quot;##T1#416&quot;; ) where {T, var&quot;##T1#416&quot;}
                args = (var&quot;##arg1#415&quot;,)
                typeof(args)
            end)
    @foo @bar(function f(x::T, var&quot;##arg1#417&quot;::var&quot;##T1#419&quot;, var&quot;##arg2#418&quot;::var&quot;##T2#420&quot;; ) where {T, var&quot;##T1#419&quot;, var&quot;##T2#420&quot;}
                args = (var&quot;##arg1#417&quot;, var&quot;##arg2#418&quot;)
                typeof(args)
            end)
    @foo @bar(function f(x::T, var&quot;##arg1#422&quot;::var&quot;##T1#425&quot;, var&quot;##arg2#423&quot;::var&quot;##T2#426&quot;, var&quot;##arg3#424&quot;::var&quot;##T3#427&quot;, var&quot;##args#421&quot;...; ) where {T, var&quot;##T1#425&quot;, var&quot;##T2#426&quot;, var&quot;##T3#427&quot;}
                args = (var&quot;##arg1#422&quot;, var&quot;##arg2#423&quot;, var&quot;##arg3#424&quot;, var&quot;##args#421&quot;...)
                typeof(args)
            end)
end
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">@macroexpand1</span> <span class="pl-c1">@specialize_vararg</span> <span class="pl-c1">3</span> <span class="pl-c1">@foo</span> <span class="pl-c1">@bar</span> <span class="pl-k">function</span> <span class="pl-en">f</span>(x<span class="pl-k">::</span><span class="pl-c1">T</span>, args<span class="pl-k">...</span>) <span class="pl-k">where</span> T
           <span class="pl-c1">typeof</span>(args)
       <span class="pl-k">end</span>
<span class="pl-k">quote</span>
    <span class="pl-c1">@foo</span> <span class="pl-c1">@bar</span>(<span class="pl-k">function</span> <span class="pl-en">f</span>(x<span class="pl-k">::</span><span class="pl-c1">T</span>, <span class="pl-c1">var"##arg1#415"</span><span class="pl-k">::</span><span class="pl-c1">var"##T1#416"</span>; ) <span class="pl-k">where</span> {T, <span class="pl-c1">var"##T1#416"</span>}
                args <span class="pl-k">=</span> (<span class="pl-c1">var"##arg1#415"</span>,)
                <span class="pl-c1">typeof</span>(args)
            <span class="pl-k">end</span>)
    <span class="pl-c1">@foo</span> <span class="pl-c1">@bar</span>(<span class="pl-k">function</span> <span class="pl-en">f</span>(x<span class="pl-k">::</span><span class="pl-c1">T</span>, <span class="pl-c1">var"##arg1#417"</span><span class="pl-k">::</span><span class="pl-c1">var"##T1#419"</span>, <span class="pl-c1">var"##arg2#418"</span><span class="pl-k">::</span><span class="pl-c1">var"##T2#420"</span>; ) <span class="pl-k">where</span> {T, <span class="pl-c1">var"##T1#419"</span>, <span class="pl-c1">var"##T2#420"</span>}
                args <span class="pl-k">=</span> (<span class="pl-c1">var"##arg1#417"</span>, <span class="pl-c1">var"##arg2#418"</span>)
                <span class="pl-c1">typeof</span>(args)
            <span class="pl-k">end</span>)
    <span class="pl-c1">@foo</span> <span class="pl-c1">@bar</span>(<span class="pl-k">function</span> <span class="pl-en">f</span>(x<span class="pl-k">::</span><span class="pl-c1">T</span>, <span class="pl-c1">var"##arg1#422"</span><span class="pl-k">::</span><span class="pl-c1">var"##T1#425"</span>, <span class="pl-c1">var"##arg2#423"</span><span class="pl-k">::</span><span class="pl-c1">var"##T2#426"</span>, <span class="pl-c1">var"##arg3#424"</span><span class="pl-k">::</span><span class="pl-c1">var"##T3#427"</span>, <span class="pl-c1">var"##args#421"</span><span class="pl-k">...</span>; ) <span class="pl-k">where</span> {T, <span class="pl-c1">var"##T1#425"</span>, <span class="pl-c1">var"##T2#426"</span>, <span class="pl-c1">var"##T3#427"</span>}
                args <span class="pl-k">=</span> (<span class="pl-c1">var"##arg1#422"</span>, <span class="pl-c1">var"##arg2#423"</span>, <span class="pl-c1">var"##arg3#424"</span>, <span class="pl-c1">var"##args#421"</span><span class="pl-k">...</span>)
                <span class="pl-c1">typeof</span>(args)
            <span class="pl-k">end</span>)
<span class="pl-k">end</span></pre></div>
<p></p>
</details>
<h3><a id="user-content-fallback-code" class="anchor" aria-hidden="true" href="#fallback-code"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Fallback code</h3>
<details>
 
<p>
</p><p>You can specify fallback code which is only run in the case where splatting occurs. You do this by including code like <code>fallback = ...</code> after the function definition</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; @macroexpand1 @specialize_vararg 2 function h(args...)
           *(args...)
       end fallback = return false
quote
    function h(var&quot;##arg1#428&quot;::var&quot;##T1#429&quot;; ) where var&quot;##T1#429&quot;
        args = (var&quot;##arg1#428&quot;,)
        (*)(args...)
    end
    function h(var&quot;##arg1#431&quot;::var&quot;##T1#433&quot;, var&quot;##arg2#432&quot;::var&quot;##T2#434&quot;, var&quot;##args#430&quot;...; ) where {var&quot;##T1#433&quot;, var&quot;##T2#434&quot;}
        args = (var&quot;##arg1#431&quot;, var&quot;##arg2#432&quot;, var&quot;##args#430&quot;...)
        return false
        (*)(args...)
    end
end
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">@macroexpand1</span> <span class="pl-c1">@specialize_vararg</span> <span class="pl-c1">2</span> <span class="pl-k">function</span> <span class="pl-en">h</span>(args<span class="pl-k">...</span>)
           <span class="pl-k">*</span>(args<span class="pl-k">...</span>)
       <span class="pl-k">end</span> fallback <span class="pl-k">=</span> <span class="pl-k">return</span> <span class="pl-c1">false</span>
<span class="pl-k">quote</span>
    <span class="pl-k">function</span> <span class="pl-en">h</span>(<span class="pl-c1">var"##arg1#428"</span><span class="pl-k">::</span><span class="pl-c1">var"##T1#429"</span>; ) <span class="pl-k">where</span> <span class="pl-c1">var"##T1#429"</span>
        args <span class="pl-k">=</span> (<span class="pl-c1">var"##arg1#428"</span>,)
        (<span class="pl-k">*</span>)(args<span class="pl-k">...</span>)
    <span class="pl-k">end</span>
    <span class="pl-k">function</span> <span class="pl-en">h</span>(<span class="pl-c1">var"##arg1#431"</span><span class="pl-k">::</span><span class="pl-c1">var"##T1#433"</span>, <span class="pl-c1">var"##arg2#432"</span><span class="pl-k">::</span><span class="pl-c1">var"##T2#434"</span>, <span class="pl-c1">var"##args#430"</span><span class="pl-k">...</span>; ) <span class="pl-k">where</span> {<span class="pl-c1">var"##T1#433"</span>, <span class="pl-c1">var"##T2#434"</span>}
        args <span class="pl-k">=</span> (<span class="pl-c1">var"##arg1#431"</span>, <span class="pl-c1">var"##arg2#432"</span>, <span class="pl-c1">var"##args#430"</span><span class="pl-k">...</span>)
        <span class="pl-k">return</span> <span class="pl-c1">false</span>
        (<span class="pl-k">*</span>)(args<span class="pl-k">...</span>)
    <span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>
<p>Notice that in the second method above, the function will just immediately exit and return <code>false</code>.</p>
<p>It should also be noted that if you're applying a macro to your function definition and you want a fallback method, you need to enclose the macro with parentheses because, for example,</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="@specialize_vararg 3 @inline f(x...) = sum(x) fallback = (&quot;hi&quot;)
"><pre><span class="pl-c1">@specialize_vararg</span> <span class="pl-c1">3</span> <span class="pl-c1">@inline</span> <span class="pl-en">f</span>(x<span class="pl-k">...</span>) <span class="pl-k">=</span> <span class="pl-c1">sum</span>(x) fallback <span class="pl-k">=</span> (<span class="pl-s"><span class="pl-pds">"</span>hi<span class="pl-pds">"</span></span>)</pre></div>
<p>will be parsed as</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="@specialize_vararg(3, @inline(f(x...) = sum(x), fallback = (&quot;hi&quot;)))
"><pre><span class="pl-c1">@specialize_vararg</span>(<span class="pl-c1">3</span>, <span class="pl-c1">@inline</span>(<span class="pl-en">f</span>(x<span class="pl-k">...</span>) <span class="pl-k">=</span> <span class="pl-c1">sum</span>(x), fallback <span class="pl-k">=</span> (<span class="pl-s"><span class="pl-pds">"</span>hi<span class="pl-pds">"</span></span>)))</pre></div>
<p>instead of the desired</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="@specialize_vararg(3, @inline(f(x...) = sum(x)), fallback = (&quot;hi&quot;))
"><pre><span class="pl-c1">@specialize_vararg</span>(<span class="pl-c1">3</span>, <span class="pl-c1">@inline</span>(<span class="pl-en">f</span>(x<span class="pl-k">...</span>) <span class="pl-k">=</span> <span class="pl-c1">sum</span>(x)), fallback <span class="pl-k">=</span> (<span class="pl-s"><span class="pl-pds">"</span>hi<span class="pl-pds">"</span></span>))</pre></div>
<p></p>
</details>
<h3><a id="user-content-vararg-type-constraints" class="anchor" aria-hidden="true" href="#vararg-type-constraints"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Vararg type constraints</h3>
<details>
 
<p>
</p><p>The <code>@specialize_vararg</code> macro also supports adding type constraints to the varargs:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; @macroexpand1 @specialize_vararg 3 function g(args::T...) where {T&lt;:Int}
           *(args...)
       end
quote
    function g(var&quot;##arg1#435&quot;::var&quot;##T1#436&quot;; ) where {T &lt;: Int, var&quot;##T1#436&quot; &lt;: T}
        args = (var&quot;##arg1#435&quot;,)
        (*)(args...)
    end
    function g(var&quot;##arg1#437&quot;::var&quot;##T1#439&quot;, var&quot;##arg2#438&quot;::var&quot;##T2#440&quot;; ) where {T &lt;: Int, var&quot;##T1#439&quot; &lt;: T, var&quot;##T2#440&quot; &lt;: T}
        args = (var&quot;##arg1#437&quot;, var&quot;##arg2#438&quot;)
        (*)(args...)
    end
    function g(var&quot;##arg1#442&quot;::var&quot;##T1#445&quot;, var&quot;##arg2#443&quot;::var&quot;##T2#446&quot;, var&quot;##arg3#444&quot;::var&quot;##T3#447&quot;, var&quot;##args#441&quot;::T...; ) where {T &lt;: Int, var&quot;##T1#445&quot; &lt;: T, var&quot;##T2#446&quot; &lt;: T, var&quot;##T3#447&quot; &lt;: T}
        args = (var&quot;##arg1#442&quot;, var&quot;##arg2#443&quot;, var&quot;##arg3#444&quot;, var&quot;##args#441&quot;...)
        (*)(args...)
    end
end
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">@macroexpand1</span> <span class="pl-c1">@specialize_vararg</span> <span class="pl-c1">3</span> <span class="pl-k">function</span> <span class="pl-en">g</span>(args<span class="pl-k">::</span><span class="pl-c1">T...</span>) <span class="pl-k">where</span> {T<span class="pl-k">&lt;:</span><span class="pl-c1">Int</span>}
           <span class="pl-k">*</span>(args<span class="pl-k">...</span>)
       <span class="pl-k">end</span>
<span class="pl-k">quote</span>
    <span class="pl-k">function</span> <span class="pl-en">g</span>(<span class="pl-c1">var"##arg1#435"</span><span class="pl-k">::</span><span class="pl-c1">var"##T1#436"</span>; ) <span class="pl-k">where</span> {T <span class="pl-k">&lt;:</span> <span class="pl-c1">Int</span>, <span class="pl-c1">var"##T1#436"</span> <span class="pl-k">&lt;:</span> <span class="pl-c1">T</span>}
        args <span class="pl-k">=</span> (<span class="pl-c1">var"##arg1#435"</span>,)
        (<span class="pl-k">*</span>)(args<span class="pl-k">...</span>)
    <span class="pl-k">end</span>
    <span class="pl-k">function</span> <span class="pl-en">g</span>(<span class="pl-c1">var"##arg1#437"</span><span class="pl-k">::</span><span class="pl-c1">var"##T1#439"</span>, <span class="pl-c1">var"##arg2#438"</span><span class="pl-k">::</span><span class="pl-c1">var"##T2#440"</span>; ) <span class="pl-k">where</span> {T <span class="pl-k">&lt;:</span> <span class="pl-c1">Int</span>, <span class="pl-c1">var"##T1#439"</span> <span class="pl-k">&lt;:</span> <span class="pl-c1">T</span>, <span class="pl-c1">var"##T2#440"</span> <span class="pl-k">&lt;:</span> <span class="pl-c1">T</span>}
        args <span class="pl-k">=</span> (<span class="pl-c1">var"##arg1#437"</span>, <span class="pl-c1">var"##arg2#438"</span>)
        (<span class="pl-k">*</span>)(args<span class="pl-k">...</span>)
    <span class="pl-k">end</span>
    <span class="pl-k">function</span> <span class="pl-en">g</span>(<span class="pl-c1">var"##arg1#442"</span><span class="pl-k">::</span><span class="pl-c1">var"##T1#445"</span>, <span class="pl-c1">var"##arg2#443"</span><span class="pl-k">::</span><span class="pl-c1">var"##T2#446"</span>, <span class="pl-c1">var"##arg3#444"</span><span class="pl-k">::</span><span class="pl-c1">var"##T3#447"</span>, <span class="pl-c1">var"##args#441"</span><span class="pl-k">::</span><span class="pl-c1">T...</span>; ) <span class="pl-k">where</span> {T <span class="pl-k">&lt;:</span> <span class="pl-c1">Int</span>, <span class="pl-c1">var"##T1#445"</span> <span class="pl-k">&lt;:</span> <span class="pl-c1">T</span>, <span class="pl-c1">var"##T2#446"</span> <span class="pl-k">&lt;:</span> <span class="pl-c1">T</span>, <span class="pl-c1">var"##T3#447"</span> <span class="pl-k">&lt;:</span> <span class="pl-c1">T</span>}
        args <span class="pl-k">=</span> (<span class="pl-c1">var"##arg1#442"</span>, <span class="pl-c1">var"##arg2#443"</span>, <span class="pl-c1">var"##arg3#444"</span>, <span class="pl-c1">var"##args#441"</span><span class="pl-k">...</span>)
        (<span class="pl-k">*</span>)(args<span class="pl-k">...</span>)
    <span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>
<p></p>
</details>
</article></div>