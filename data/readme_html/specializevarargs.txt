<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><p><a href="https://travis-ci.com/MasonProtter/SpecializeVarargs.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/ab1723cbaf33929cc2bcdf6a2c1315c476be490b/68747470733a2f2f7472617669732d63692e636f6d2f4d61736f6e50726f747465722f5370656369616c697a65566172617267732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/MasonProtter/SpecializeVarargs.jl.svg?branch=master" style="max-width:100%;"></a></p>
<h1><a id="user-content-specializevarargsjl" class="anchor" aria-hidden="true" href="#specializevarargsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>SpecializeVarargs.jl</h1>
<p>SpecializeVarargs.jl does one thing: force to julia to create and specialize on a given number of varadic arguments. This is likely only useful to people doing very complicated codegen in high performance situations, e.g. in Cassette overdub methods like those used in <a href="https://github.com/YingboMa/ForwardDiff2.jl">ForwardDiff2.jl</a>.</p>
<p>To install, simply open the <code>pkg</code> repl mode with <code>]</code> from the regular julia REPL and type</p>
<div class="highlight highlight-source-julia"><pre>pkg<span class="pl-k">&gt;</span> add SpecializeVarargs</pre></div>
<p>or do</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Pkg; <span class="pl-s"><span class="pl-pds"><span class="pl-c1">pkg</span>"</span>add SpecializeVarargs<span class="pl-pds">"</span></span></pre></div>
<p>from the julia repl.</p>
<h3><a id="user-content-performance-example" class="anchor" aria-hidden="true" href="#performance-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Performance Example</h3>
<details>
 
<p>
</p><p>Here's a <a href="https://github.com/jrevels/Cassette.jl">Cassette.jl</a> example from the manual on <a href="https://jrevels.github.io/Cassette.jl/stable/contextualdispatch.html" rel="nofollow">contextual dispatch</a> where SpecializeVarargs.jl can give a performance boost:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> SpecializeVarargs
<span class="pl-k">using</span> Cassette

Cassette<span class="pl-k">.</span><span class="pl-c1">@context</span> TraceCtx

<span class="pl-k">mutable struct</span> Trace
    current<span class="pl-k">::</span><span class="pl-c1">Vector{Any}</span>
    stack<span class="pl-k">::</span><span class="pl-c1">Vector{Any}</span>
    <span class="pl-en">Trace</span>() <span class="pl-k">=</span> <span class="pl-c1">new</span>(Any[], Any[])
<span class="pl-k">end</span>

<span class="pl-k">function</span> <span class="pl-en">enter!</span>(t<span class="pl-k">::</span><span class="pl-c1">Trace</span>, args<span class="pl-k">...</span>)
    pair <span class="pl-k">=</span> args <span class="pl-k">=&gt;</span> Any[]
    <span class="pl-c1">push!</span>(t<span class="pl-k">.</span>current, pair)
    <span class="pl-c1">push!</span>(t<span class="pl-k">.</span>stack, t<span class="pl-k">.</span>current)
    t<span class="pl-k">.</span>current <span class="pl-k">=</span> pair<span class="pl-k">.</span>second
    <span class="pl-k">return</span> <span class="pl-c1">nothing</span>
<span class="pl-k">end</span>

<span class="pl-k">function</span> <span class="pl-en">exit!</span>(t<span class="pl-k">::</span><span class="pl-c1">Trace</span>)
    t<span class="pl-k">.</span>current <span class="pl-k">=</span> <span class="pl-c1">pop!</span>(t<span class="pl-k">.</span>stack)
    <span class="pl-k">return</span> <span class="pl-c1">nothing</span>
<span class="pl-k">end</span>

Cassette<span class="pl-k">.</span><span class="pl-en">prehook</span>(ctx<span class="pl-k">::</span><span class="pl-c1">TraceCtx</span>, args<span class="pl-k">...</span>) <span class="pl-k">=</span> <span class="pl-c1">enter!</span>(ctx<span class="pl-k">.</span>metadata, args<span class="pl-k">...</span>)
Cassette<span class="pl-k">.</span><span class="pl-en">posthook</span>(ctx<span class="pl-k">::</span><span class="pl-c1">TraceCtx</span>, args<span class="pl-k">...</span>) <span class="pl-k">=</span> <span class="pl-c1">exit!</span>(ctx<span class="pl-k">.</span>metadata)

trace <span class="pl-k">=</span> <span class="pl-c1">Trace</span>()
x, y, z <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">3</span>)
<span class="pl-en">f</span>(x, y, z) <span class="pl-k">=</span> x<span class="pl-k">*</span>y <span class="pl-k">+</span> y<span class="pl-k">*</span>z

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> Cassette<span class="pl-k">.</span><span class="pl-c1">overdub</span>(<span class="pl-c1">TraceCtx</span>(metadata <span class="pl-k">=</span> trace), () <span class="pl-k">-&gt;</span> <span class="pl-c1">f</span>(x, y, z))
  <span class="pl-c1">3.315</span> μs (<span class="pl-c1">41</span> allocations<span class="pl-k">:</span> <span class="pl-c1">1.48</span> KiB)
<span class="pl-c1">0.2360528466104866</span></pre></div>
<p>Now let's redefine the <code>enter!</code> function using SpecializeVarargs's macro <code>@specialize_vararg</code>:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">@specialize_vararg</span> <span class="pl-c1">5</span> <span class="pl-k">function</span> <span class="pl-en">enter!</span>(t<span class="pl-k">::</span><span class="pl-c1">Trace</span>, args<span class="pl-k">...</span>)
           pair <span class="pl-k">=</span> args <span class="pl-k">=&gt;</span> Any[]
           <span class="pl-c1">push!</span>(t<span class="pl-k">.</span>current, pair)
           <span class="pl-c1">push!</span>(t<span class="pl-k">.</span>stack, t<span class="pl-k">.</span>current)
           t<span class="pl-k">.</span>current <span class="pl-k">=</span> pair<span class="pl-k">.</span>second
           <span class="pl-k">return</span> <span class="pl-c1">nothing</span>
       <span class="pl-k">end</span>
enter! (generic <span class="pl-k">function</span> with <span class="pl-c1">6</span> methods)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> Cassette<span class="pl-k">.</span><span class="pl-c1">overdub</span>(<span class="pl-c1">TraceCtx</span>(metadata <span class="pl-k">=</span> trace), () <span class="pl-k">-&gt;</span> <span class="pl-c1">f</span>(x, y, z))
  <span class="pl-c1">1.540</span> μs (<span class="pl-c1">27</span> allocations<span class="pl-k">:</span> <span class="pl-c1">1.17</span> KiB)
<span class="pl-c1">0.2360528466104866</span></pre></div>
<p>Nice!</p>
<p></p>
</details>
<h3><a id="user-content-what-is-the-macro-doing" class="anchor" aria-hidden="true" href="#what-is-the-macro-doing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>What is the macro doing?</h3>
<details>
 
<p>
</p><p>The macro <code>@specialize_vararg</code>, called like <code>@specialize_vararg N fdef</code> where <code>N</code> is an integer literal and <code>fdef</code> is a varadic function definition, will create literal methods for the function defined in <code>fdef</code> for up to <code>N</code> arguments before falling back on a traditional vararg definition. We can exapand the macro to see what exactly it's doing:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> SpecializeVarargs

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@macroexpand</span> <span class="pl-c1">@specialize_vararg</span> <span class="pl-c1">3</span> <span class="pl-en">f</span>(x, my_varargs<span class="pl-k">...</span>) <span class="pl-k">=</span> <span class="pl-c1">length</span>(my_varargs)
<span class="pl-k">quote</span>
    <span class="pl-k">function</span> <span class="pl-en">f</span>(x, <span class="pl-s"><span class="pl-pds"><span class="pl-c1">var</span>"</span>##arg1#402<span class="pl-pds">"</span></span><span class="pl-k">::</span><span class="pl-c1">var"##T1#403"</span>; ) <span class="pl-k">where</span> <span class="pl-s"><span class="pl-pds"><span class="pl-c1">var</span>"</span>##T1#403<span class="pl-pds">"</span></span>
        my_varargs <span class="pl-k">=</span> (<span class="pl-s"><span class="pl-pds"><span class="pl-c1">var</span>"</span>##arg1#402<span class="pl-pds">"</span></span>,)
        <span class="pl-c1">length</span>(my_varargs)
    <span class="pl-k">end</span>
    <span class="pl-k">function</span> <span class="pl-en">f</span>(x, <span class="pl-s"><span class="pl-pds"><span class="pl-c1">var</span>"</span>##arg1#404<span class="pl-pds">"</span></span><span class="pl-k">::</span><span class="pl-c1">var"##T1#406"</span>, <span class="pl-s"><span class="pl-pds"><span class="pl-c1">var</span>"</span>##arg2#405<span class="pl-pds">"</span></span><span class="pl-k">::</span><span class="pl-c1">var"##T2#407"</span>; ) <span class="pl-k">where</span> {<span class="pl-s"><span class="pl-pds"><span class="pl-c1">var</span>"</span>##T1#406<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds"><span class="pl-c1">var</span>"</span>##T2#407<span class="pl-pds">"</span></span>}
        my_varargs <span class="pl-k">=</span> (<span class="pl-s"><span class="pl-pds"><span class="pl-c1">var</span>"</span>##arg1#404<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds"><span class="pl-c1">var</span>"</span>##arg2#405<span class="pl-pds">"</span></span>)
        <span class="pl-c1">length</span>(my_varargs)
    <span class="pl-k">end</span>
    <span class="pl-k">function</span> <span class="pl-en">f</span>(x, <span class="pl-s"><span class="pl-pds"><span class="pl-c1">var</span>"</span>##arg1#409<span class="pl-pds">"</span></span><span class="pl-k">::</span><span class="pl-c1">var"##T1#412"</span>, <span class="pl-s"><span class="pl-pds"><span class="pl-c1">var</span>"</span>##arg2#410<span class="pl-pds">"</span></span><span class="pl-k">::</span><span class="pl-c1">var"##T2#413"</span>, <span class="pl-s"><span class="pl-pds"><span class="pl-c1">var</span>"</span>##arg3#411<span class="pl-pds">"</span></span><span class="pl-k">::</span><span class="pl-c1">var"##T3#414"</span>, <span class="pl-s"><span class="pl-pds"><span class="pl-c1">var</span>"</span>##args#408<span class="pl-pds">"</span></span><span class="pl-k">...</span>; ) <span class="pl-k">where</span> {<span class="pl-s"><span class="pl-pds"><span class="pl-c1">var</span>"</span>##T1#412<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds"><span class="pl-c1">var</span>"</span>##T2#413<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds"><span class="pl-c1">var</span>"</span>##T3#414<span class="pl-pds">"</span></span>}
        my_varargs <span class="pl-k">=</span> (<span class="pl-s"><span class="pl-pds"><span class="pl-c1">var</span>"</span>##arg1#409<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds"><span class="pl-c1">var</span>"</span>##arg2#410<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds"><span class="pl-c1">var</span>"</span>##arg3#411<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds"><span class="pl-c1">var</span>"</span>##args#408<span class="pl-pds">"</span></span><span class="pl-k">...</span>)
        <span class="pl-c1">length</span>(my_varargs)
    <span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>
<p></p>
</details>
<h3><a id="user-content-nested-macros" class="anchor" aria-hidden="true" href="#nested-macros"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Nested macros</h3>
<details>
 
<p>
</p><p>SpecializeVarargs can handle functions defined with macros in front of them as well (e.g. <code>@inbounds</code>), and will forward those macros to the created methods:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">@macroexpand1</span> <span class="pl-c1">@specialize_vararg</span> <span class="pl-c1">3</span> <span class="pl-c1">@foo</span> <span class="pl-c1">@bar</span> <span class="pl-k">function</span> <span class="pl-en">f</span>(x<span class="pl-k">::</span><span class="pl-c1">T</span>, args<span class="pl-k">...</span>) <span class="pl-k">where</span> T
           <span class="pl-c1">typeof</span>(args)
       <span class="pl-k">end</span>
<span class="pl-k">quote</span>
    <span class="pl-c1">@foo</span> <span class="pl-c1">@bar</span>(<span class="pl-k">function</span> <span class="pl-en">f</span>(x<span class="pl-k">::</span><span class="pl-c1">T</span>, <span class="pl-s"><span class="pl-pds"><span class="pl-c1">var</span>"</span>##arg1#415<span class="pl-pds">"</span></span><span class="pl-k">::</span><span class="pl-c1">var"##T1#416"</span>; ) <span class="pl-k">where</span> {T, <span class="pl-s"><span class="pl-pds"><span class="pl-c1">var</span>"</span>##T1#416<span class="pl-pds">"</span></span>}
                args <span class="pl-k">=</span> (<span class="pl-s"><span class="pl-pds"><span class="pl-c1">var</span>"</span>##arg1#415<span class="pl-pds">"</span></span>,)
                <span class="pl-c1">typeof</span>(args)
            <span class="pl-k">end</span>)
    <span class="pl-c1">@foo</span> <span class="pl-c1">@bar</span>(<span class="pl-k">function</span> <span class="pl-en">f</span>(x<span class="pl-k">::</span><span class="pl-c1">T</span>, <span class="pl-s"><span class="pl-pds"><span class="pl-c1">var</span>"</span>##arg1#417<span class="pl-pds">"</span></span><span class="pl-k">::</span><span class="pl-c1">var"##T1#419"</span>, <span class="pl-s"><span class="pl-pds"><span class="pl-c1">var</span>"</span>##arg2#418<span class="pl-pds">"</span></span><span class="pl-k">::</span><span class="pl-c1">var"##T2#420"</span>; ) <span class="pl-k">where</span> {T, <span class="pl-s"><span class="pl-pds"><span class="pl-c1">var</span>"</span>##T1#419<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds"><span class="pl-c1">var</span>"</span>##T2#420<span class="pl-pds">"</span></span>}
                args <span class="pl-k">=</span> (<span class="pl-s"><span class="pl-pds"><span class="pl-c1">var</span>"</span>##arg1#417<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds"><span class="pl-c1">var</span>"</span>##arg2#418<span class="pl-pds">"</span></span>)
                <span class="pl-c1">typeof</span>(args)
            <span class="pl-k">end</span>)
    <span class="pl-c1">@foo</span> <span class="pl-c1">@bar</span>(<span class="pl-k">function</span> <span class="pl-en">f</span>(x<span class="pl-k">::</span><span class="pl-c1">T</span>, <span class="pl-s"><span class="pl-pds"><span class="pl-c1">var</span>"</span>##arg1#422<span class="pl-pds">"</span></span><span class="pl-k">::</span><span class="pl-c1">var"##T1#425"</span>, <span class="pl-s"><span class="pl-pds"><span class="pl-c1">var</span>"</span>##arg2#423<span class="pl-pds">"</span></span><span class="pl-k">::</span><span class="pl-c1">var"##T2#426"</span>, <span class="pl-s"><span class="pl-pds"><span class="pl-c1">var</span>"</span>##arg3#424<span class="pl-pds">"</span></span><span class="pl-k">::</span><span class="pl-c1">var"##T3#427"</span>, <span class="pl-s"><span class="pl-pds"><span class="pl-c1">var</span>"</span>##args#421<span class="pl-pds">"</span></span><span class="pl-k">...</span>; ) <span class="pl-k">where</span> {T, <span class="pl-s"><span class="pl-pds"><span class="pl-c1">var</span>"</span>##T1#425<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds"><span class="pl-c1">var</span>"</span>##T2#426<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds"><span class="pl-c1">var</span>"</span>##T3#427<span class="pl-pds">"</span></span>}
                args <span class="pl-k">=</span> (<span class="pl-s"><span class="pl-pds"><span class="pl-c1">var</span>"</span>##arg1#422<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds"><span class="pl-c1">var</span>"</span>##arg2#423<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds"><span class="pl-c1">var</span>"</span>##arg3#424<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds"><span class="pl-c1">var</span>"</span>##args#421<span class="pl-pds">"</span></span><span class="pl-k">...</span>)
                <span class="pl-c1">typeof</span>(args)
            <span class="pl-k">end</span>)
<span class="pl-k">end</span></pre></div>
<p></p>
</details>
<h3><a id="user-content-fallback-code" class="anchor" aria-hidden="true" href="#fallback-code"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Fallback code</h3>
<details>
 
<p>
</p><p>You can specify fallback code which is only run in the case where splatting occurs. You do this by including code like <code>fallback = ...</code> after the function definition</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">@macroexpand1</span> <span class="pl-c1">@specialize_vararg</span> <span class="pl-c1">2</span> <span class="pl-k">function</span> <span class="pl-en">h</span>(args<span class="pl-k">...</span>)
           <span class="pl-k">*</span>(args<span class="pl-k">...</span>)
       <span class="pl-k">end</span> fallback <span class="pl-k">=</span> <span class="pl-k">return</span> <span class="pl-c1">false</span>
<span class="pl-k">quote</span>
    <span class="pl-k">function</span> <span class="pl-en">h</span>(<span class="pl-s"><span class="pl-pds"><span class="pl-c1">var</span>"</span>##arg1#428<span class="pl-pds">"</span></span><span class="pl-k">::</span><span class="pl-c1">var"##T1#429"</span>; ) <span class="pl-k">where</span> <span class="pl-s"><span class="pl-pds"><span class="pl-c1">var</span>"</span>##T1#429<span class="pl-pds">"</span></span>
        args <span class="pl-k">=</span> (<span class="pl-s"><span class="pl-pds"><span class="pl-c1">var</span>"</span>##arg1#428<span class="pl-pds">"</span></span>,)
        (<span class="pl-k">*</span>)(args<span class="pl-k">...</span>)
    <span class="pl-k">end</span>
    <span class="pl-k">function</span> <span class="pl-en">h</span>(<span class="pl-s"><span class="pl-pds"><span class="pl-c1">var</span>"</span>##arg1#431<span class="pl-pds">"</span></span><span class="pl-k">::</span><span class="pl-c1">var"##T1#433"</span>, <span class="pl-s"><span class="pl-pds"><span class="pl-c1">var</span>"</span>##arg2#432<span class="pl-pds">"</span></span><span class="pl-k">::</span><span class="pl-c1">var"##T2#434"</span>, <span class="pl-s"><span class="pl-pds"><span class="pl-c1">var</span>"</span>##args#430<span class="pl-pds">"</span></span><span class="pl-k">...</span>; ) <span class="pl-k">where</span> {<span class="pl-s"><span class="pl-pds"><span class="pl-c1">var</span>"</span>##T1#433<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds"><span class="pl-c1">var</span>"</span>##T2#434<span class="pl-pds">"</span></span>}
        args <span class="pl-k">=</span> (<span class="pl-s"><span class="pl-pds"><span class="pl-c1">var</span>"</span>##arg1#431<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds"><span class="pl-c1">var</span>"</span>##arg2#432<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds"><span class="pl-c1">var</span>"</span>##args#430<span class="pl-pds">"</span></span><span class="pl-k">...</span>)
        <span class="pl-k">return</span> <span class="pl-c1">false</span>
        (<span class="pl-k">*</span>)(args<span class="pl-k">...</span>)
    <span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>
<p>Notice that in the second method above, the function will just immediately exit and return <code>false</code>.</p>
<p>It should also be noted that if you're applying a macro to your function definition and you want a fallback method, you need to enclose the macro with parentheses because, for example,</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">@specialize_vararg</span> <span class="pl-c1">3</span> <span class="pl-c1">@inline</span> <span class="pl-en">f</span>(x<span class="pl-k">...</span>) <span class="pl-k">=</span> <span class="pl-c1">sum</span>(x) fallback <span class="pl-k">=</span> (<span class="pl-s"><span class="pl-pds">"</span>hi<span class="pl-pds">"</span></span>)</pre></div>
<p>will be parsed as</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">@specialize_vararg</span>(<span class="pl-c1">3</span>, <span class="pl-c1">@inline</span>(<span class="pl-en">f</span>(x<span class="pl-k">...</span>) <span class="pl-k">=</span> <span class="pl-c1">sum</span>(x), fallback <span class="pl-k">=</span> (<span class="pl-s"><span class="pl-pds">"</span>hi<span class="pl-pds">"</span></span>)))</pre></div>
<p>instead of the desired</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">@specialize_vararg</span>(<span class="pl-c1">3</span>, <span class="pl-c1">@inline</span>(<span class="pl-en">f</span>(x<span class="pl-k">...</span>) <span class="pl-k">=</span> <span class="pl-c1">sum</span>(x)), fallback <span class="pl-k">=</span> (<span class="pl-s"><span class="pl-pds">"</span>hi<span class="pl-pds">"</span></span>))</pre></div>
<p></p>
</details>
<h3><a id="user-content-vararg-type-constraints" class="anchor" aria-hidden="true" href="#vararg-type-constraints"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Vararg type constraints</h3>
<details>
 
<p>
</p><p>The <code>@specialize_vararg</code> macro also supports adding type constraints to the varargs:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">@macroexpand1</span> <span class="pl-c1">@specialize_vararg</span> <span class="pl-c1">3</span> <span class="pl-k">function</span> <span class="pl-en">g</span>(args<span class="pl-k">::</span><span class="pl-c1">T...</span>) <span class="pl-k">where</span> {T<span class="pl-k">&lt;:</span><span class="pl-c1">Int</span>}
           <span class="pl-k">*</span>(args<span class="pl-k">...</span>)
       <span class="pl-k">end</span>
<span class="pl-k">quote</span>
    <span class="pl-k">function</span> <span class="pl-en">g</span>(<span class="pl-s"><span class="pl-pds"><span class="pl-c1">var</span>"</span>##arg1#435<span class="pl-pds">"</span></span><span class="pl-k">::</span><span class="pl-c1">var"##T1#436"</span>; ) <span class="pl-k">where</span> {T <span class="pl-k">&lt;:</span> <span class="pl-c1">Int</span>, <span class="pl-s"><span class="pl-pds"><span class="pl-c1">var</span>"</span>##T1#436<span class="pl-pds">"</span></span> <span class="pl-k">&lt;:</span> <span class="pl-c1">T</span>}
        args <span class="pl-k">=</span> (<span class="pl-s"><span class="pl-pds"><span class="pl-c1">var</span>"</span>##arg1#435<span class="pl-pds">"</span></span>,)
        (<span class="pl-k">*</span>)(args<span class="pl-k">...</span>)
    <span class="pl-k">end</span>
    <span class="pl-k">function</span> <span class="pl-en">g</span>(<span class="pl-s"><span class="pl-pds"><span class="pl-c1">var</span>"</span>##arg1#437<span class="pl-pds">"</span></span><span class="pl-k">::</span><span class="pl-c1">var"##T1#439"</span>, <span class="pl-s"><span class="pl-pds"><span class="pl-c1">var</span>"</span>##arg2#438<span class="pl-pds">"</span></span><span class="pl-k">::</span><span class="pl-c1">var"##T2#440"</span>; ) <span class="pl-k">where</span> {T <span class="pl-k">&lt;:</span> <span class="pl-c1">Int</span>, <span class="pl-s"><span class="pl-pds"><span class="pl-c1">var</span>"</span>##T1#439<span class="pl-pds">"</span></span> <span class="pl-k">&lt;:</span> <span class="pl-c1">T</span>, <span class="pl-s"><span class="pl-pds"><span class="pl-c1">var</span>"</span>##T2#440<span class="pl-pds">"</span></span> <span class="pl-k">&lt;:</span> <span class="pl-c1">T</span>}
        args <span class="pl-k">=</span> (<span class="pl-s"><span class="pl-pds"><span class="pl-c1">var</span>"</span>##arg1#437<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds"><span class="pl-c1">var</span>"</span>##arg2#438<span class="pl-pds">"</span></span>)
        (<span class="pl-k">*</span>)(args<span class="pl-k">...</span>)
    <span class="pl-k">end</span>
    <span class="pl-k">function</span> <span class="pl-en">g</span>(<span class="pl-s"><span class="pl-pds"><span class="pl-c1">var</span>"</span>##arg1#442<span class="pl-pds">"</span></span><span class="pl-k">::</span><span class="pl-c1">var"##T1#445"</span>, <span class="pl-s"><span class="pl-pds"><span class="pl-c1">var</span>"</span>##arg2#443<span class="pl-pds">"</span></span><span class="pl-k">::</span><span class="pl-c1">var"##T2#446"</span>, <span class="pl-s"><span class="pl-pds"><span class="pl-c1">var</span>"</span>##arg3#444<span class="pl-pds">"</span></span><span class="pl-k">::</span><span class="pl-c1">var"##T3#447"</span>, <span class="pl-s"><span class="pl-pds"><span class="pl-c1">var</span>"</span>##args#441<span class="pl-pds">"</span></span><span class="pl-k">::</span><span class="pl-c1">T...</span>; ) <span class="pl-k">where</span> {T <span class="pl-k">&lt;:</span> <span class="pl-c1">Int</span>, <span class="pl-s"><span class="pl-pds"><span class="pl-c1">var</span>"</span>##T1#445<span class="pl-pds">"</span></span> <span class="pl-k">&lt;:</span> <span class="pl-c1">T</span>, <span class="pl-s"><span class="pl-pds"><span class="pl-c1">var</span>"</span>##T2#446<span class="pl-pds">"</span></span> <span class="pl-k">&lt;:</span> <span class="pl-c1">T</span>, <span class="pl-s"><span class="pl-pds"><span class="pl-c1">var</span>"</span>##T3#447<span class="pl-pds">"</span></span> <span class="pl-k">&lt;:</span> <span class="pl-c1">T</span>}
        args <span class="pl-k">=</span> (<span class="pl-s"><span class="pl-pds"><span class="pl-c1">var</span>"</span>##arg1#442<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds"><span class="pl-c1">var</span>"</span>##arg2#443<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds"><span class="pl-c1">var</span>"</span>##arg3#444<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds"><span class="pl-c1">var</span>"</span>##args#441<span class="pl-pds">"</span></span><span class="pl-k">...</span>)
        (<span class="pl-k">*</span>)(args<span class="pl-k">...</span>)
    <span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>
<p></p>
</details>
</article></div>