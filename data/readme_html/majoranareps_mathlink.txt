<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p dir="auto">This README gives a brief introduction to the MajoranaReps package.</p>
<h2 dir="auto"><a id="user-content-the-majoranas" class="anchor" aria-hidden="true" href="#the-majoranas"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>The Majoranas</h2>
<p dir="auto">For the time being there are only 4 types of majoranas <code>bx</code>, <code>by</code>, <code>bz</code> and <code>c</code>,
since the package was developed with the Kitaev Honeycomb Model in mind.</p>
<p dir="auto">The vacuums is thus organised such that <code>by(j)|0&gt; == -i*bx(j)|0&gt;</code>, <code>bz(j)|0&gt; == -i*c(j)|0&gt;</code>. There transforamtions are applied automatically.
This both of these lines will evaluate to true</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="im*bx(1)*Ket() == -by(1)*Ket()
im*c(1)*Ket() == -bz(1)*Ket()"><pre class="notranslate"><code>im*bx(1)*Ket() == -by(1)*Ket()
im*c(1)*Ket() == -bz(1)*Ket()
</code></pre></div>
<h2 dir="auto"><a id="user-content-inner-products" class="anchor" aria-hidden="true" href="#inner-products"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Inner products</h2>
<p dir="auto">The package supports inner products through the constructions</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="IP = OpInnerProd(State1,State2)

IP = OpInnerProd(State1,Operator,State2)"><pre class="notranslate"><code>IP = OpInnerProd(State1,State2)

IP = OpInnerProd(State1,Operator,State2)
</code></pre></div>
<p dir="auto">The inner product automatically handles vector quantities. For instance, if one defines two different bases</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="Basis1 = [ bx(1)*Ket(), bx(2)*Ket(), bx(3)*Ket(),bx(1)*bx(2)*bx(3)*Ket()]
Basis2 = [ by(1)*Ket(), by(2)*Ket(), by(3)*Ket(),by(1)*by(2)*by(3)*Ket()]"><pre class="notranslate"><code>Basis1 = [ bx(1)*Ket(), bx(2)*Ket(), bx(3)*Ket(),bx(1)*bx(2)*bx(3)*Ket()]
Basis2 = [ by(1)*Ket(), by(2)*Ket(), by(3)*Ket(),by(1)*by(2)*by(3)*Ket()]
</code></pre></div>
<p dir="auto">and then apply <code>OpInnerProd(Basis1,Basis2)</code> one will as a result get the 4x4 array</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="4×4 Array{Complex{Int64},2}:
 0-1im  0+0im  0+0im  0+0im
 0+0im  0-1im  0+0im  0+0im
 0+0im  0+0im  0-1im  0+0im
 0+0im  0+0im  0+0im  0+1im"><pre class="notranslate"><code>4×4 Array{Complex{Int64},2}:
 0-1im  0+0im  0+0im  0+0im
 0+0im  0-1im  0+0im  0+0im
 0+0im  0+0im  0-1im  0+0im
 0+0im  0+0im  0+0im  0+1im
</code></pre></div>
<h2 dir="auto"><a id="user-content-mathlink" class="anchor" aria-hidden="true" href="#mathlink"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>MathLink</h2>
<p dir="auto">The package also supports the use of <a href="https://github.com/JuliaInterop/MathLink.jl">MathLink</a> and <a href="https://github.com/fremling/MathLinkExtras.jl">MathLinkExtras</a> syntax for algebraic prefactors.
This allows for constructions like  <code>W"a"*bx(1)</code> or <code>W`-I b`*by(1)</code></p>
<p dir="auto">NB: <code>MathLink</code> needs to be loaded before invoking <code>MajoranaReps</code> the first time.</p>
<h1 dir="auto"><a id="user-content-majoranareps_mathlinkjl" class="anchor" aria-hidden="true" href="#majoranareps_mathlinkjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>MajoranaReps_MathLink.jl</h1>
</article></div>