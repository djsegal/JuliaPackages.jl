<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-commonrlspaces" class="anchor" aria-hidden="true" href="#commonrlspaces"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>CommonRLSpaces</h1>
<p dir="auto"><a href="https://github.com/JuliaReinforcementLearning/CommonRLSpaces.jl/actions/workflows/CI.yml?query=branch%3Amain"><img src="https://github.com/JuliaReinforcementLearning/CommonRLSpaces.jl/actions/workflows/CI.yml/badge.svg?branch=main" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/JuliaReinforcementLearning/CommonRLSpaces.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/8eb19f6bda0ae1c2bdb1e4ce7d094259b4bd549d50543e363bc5db3c4b9efa23/68747470733a2f2f636f6465636f762e696f2f67682f4a756c69615265696e666f7263656d656e744c6561726e696e672f436f6d6d6f6e524c5370616365732e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/JuliaReinforcementLearning/CommonRLSpaces.jl/branch/main/graph/badge.svg" style="max-width: 100%;"></a>
<a href="https://github.com/invenia/BlueStyle"><img src="https://camo.githubusercontent.com/c18fbaa52d94d16b90b19701fc90d289b8a5bb920c74c79bab200b14e75420a4/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c75652d3434393564312e737667" alt="Code Style: Blue" data-canonical-src="https://img.shields.io/badge/code%20style-blue-4495d1.svg" style="max-width: 100%;"></a>
<a href="https://JuliaCI.github.io/NanosoldierReports/pkgeval_badges/report.html" rel="nofollow"><img src="https://camo.githubusercontent.com/0fbda7f6ce6dcfac347057b091ae93683e7cbd6cfdd547a5f31324acc2c3cf99/68747470733a2f2f4a756c696143492e6769746875622e696f2f4e616e6f736f6c646965725265706f7274732f706b676576616c5f6261646765732f432f436f6d6d6f6e524c5370616365732e737667" alt="PkgEval" data-canonical-src="https://JuliaCI.github.io/NanosoldierReports/pkgeval_badges/C/CommonRLSpaces.svg" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-introduction" class="anchor" aria-hidden="true" href="#introduction"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Introduction</h2>
<p dir="auto">A space is simply a set of objects. In a reinforcement learning context, spaces define the sets of possible states, actions, and observations.</p>
<p dir="auto">In Julia, spaces can be represented by a variety of objects. For instance, a small discrete action set might be represented with <code>["up", "left", "down", "right"]</code>, or an interval of real numbers might be represented with an object from the <a href="https://github.com/JuliaMath/IntervalSets.jl"><code>IntervalSets</code></a> package. In general, the space defined by any Julia object is the set of objects <code>x</code> for which <code>x in space</code> returns <code>true</code>.</p>
<p dir="auto">In addition to establishing the definition above, this package provides three useful tools:</p>
<ol dir="auto">
<li>Traits to communicate about the properties of spaces, e.g. whether they are continuous or discrete, how many subspaces they have, and how to interact with them.</li>
<li>Functions such as <code>product</code> for constructing more complex spaces</li>
<li>Constructors to for spaces whose elements are arrays, such as <code>ArraySpace</code> and <code>Box</code>.</li>
</ol>
<h2 dir="auto"><a id="user-content-concepts-and-interface" class="anchor" aria-hidden="true" href="#concepts-and-interface"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Concepts and Interface</h2>
<h3 dir="auto"><a id="user-content-interface-for-all-spaces" class="anchor" aria-hidden="true" href="#interface-for-all-spaces"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Interface for all spaces</h3>
<p dir="auto">Since a space is simply a set of objects, a wide variety of common Julia types including <code>Vector</code>, <code>Set</code>, <code>Tuple</code>, and <code>Dict</code><sup>1</sup>can represent a space.
Because of this inclusive definition, there is a very minimal interface that all spaces are expected to implement. Specifically, it consists of</p>
<ul dir="auto">
<li><code>in(x, space)</code>, which tests whether <code>x</code> is a member of the set <code>space</code> (this can also be called with the <code>x in space</code> syntax).</li>
<li><code>rand(space)</code>, which returns a valid member of the set<sup>2</sup>.</li>
<li><code>eltype(space)</code>, which returns the type of the elements in the space.</li>
</ul>
<p dir="auto">In addition, the <code>SpaceStyle</code> trait is always defined. Calling <code>SpaceStyle(space)</code> will return either a <code>FiniteSpaceStyle</code>, <code>ContinuousSpaceStyle</code>, <code>HybridSpaceStyle</code>, or an <code>UnknownSpaceStyle</code> object.</p>
<h3 dir="auto"><a id="user-content-finite-discrete-spaces" class="anchor" aria-hidden="true" href="#finite-discrete-spaces"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Finite discrete spaces</h3>
<p dir="auto">Spaces with a finite number of elements have <code>FiniteSpaceStyle</code>. These spaces are guaranteed to be iterable, implementing Julia's <a href="https://docs.julialang.org/en/v1/manual/interfaces/" rel="nofollow">iteration interface</a>. In particular <code>collect(space)</code> will return all elements in an array.</p>
<h3 dir="auto"><a id="user-content-continuous-spaces" class="anchor" aria-hidden="true" href="#continuous-spaces"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Continuous spaces</h3>
<p dir="auto">Continuous spaces represent sets that have an uncountable number of elements they have a <code>SpaceStyle</code> of type <code>ContinuousSpaceStyle</code>. CommonRLSpaces does not adopt a rigorous mathematical definition of a continuous set, but, roughly, elements in the interior of a continuous space have other elements very close to them.</p>
<p dir="auto">Continuous spaces have some additional interface functions:</p>
<ul dir="auto">
<li><code>bounds(space)</code> returns upper and lower bounds in a tuple. For example, if <code>space</code> is a unit circle, <code>bounds(space)</code> will return <code>([-1.0, -1.0], [1.0, 1.0])</code>. This allows agents to choose policies that appropriately cover the space e.g. a normal distribution with a mean of <code>mean(bounds(space))</code> and a standard deviation of half the distance between the bounds.</li>
<li><code>clamp(x, space)</code> returns an element of <code>space</code> that is near <code>x</code>. i.e. if <code>space</code> is a unit circle, <code>clamp([2.0, 0.0], space)</code> might return <code>[1.0, 0.0]</code>. This allows for a convenient way for an agent to find a valid action if they sample actions from a distribution that doesn't match the space exactly (e.g. a normal distribution).</li>
<li><code>clamp!(x, space)</code>, similar to <code>clamp</code>, but clamps <code>x</code> in place.</li>
</ul>
<h3 dir="auto"><a id="user-content-hybrid-spaces" class="anchor" aria-hidden="true" href="#hybrid-spaces"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Hybrid spaces</h3>
<p dir="auto">The interface for hybrid continuous-discrete spaces is currently planned, but not yet defined. If the space style is not <code>FiniteSpaceStyle</code> or <code>ContinuousSpaceStyle</code>, it is <code>UnknownSpaceStyle</code>.</p>
<h3 dir="auto"><a id="user-content-spaces-of-arrays" class="anchor" aria-hidden="true" href="#spaces-of-arrays"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Spaces of arrays</h3>
<p dir="auto">[need to figure this out, but I think <code>elsize(space)</code> should return the size of the arrays in the space]</p>
<h3 dir="auto"><a id="user-content-cartesian-products-of-spaces" class="anchor" aria-hidden="true" href="#cartesian-products-of-spaces"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Cartesian products of spaces</h3>
<p dir="auto">The Cartesian product of two spaces <code>a</code> and <code>b</code> can be constructed with <code>c = product(a, b)</code>.</p>
<p dir="auto">The exact form of the resulting space is unspecified and should be considered an implementation detail. The only guarantees are (1) that there will be one unique element of <code>c</code> for every combination of one object from <code>a</code> and one object from <code>b</code> and (2) that the resulting space conforms to the interface above.</p>
<p dir="auto">The <code>TupleSpaceProduct</code> constructor provides a specialized Cartesian product where each element is a tuple, i.e. <code>TupleSpaceProduct(a, b)</code> has elements of type <code>Tuple{eltype(a), eltype(b)}</code>.</p>
<hr>
<p dir="auto"><sup>1</sup>Note: the elements of a space represented by a <code>Dict</code> are key-value <code>Pair</code>s.
<sup>2</sup>[TODO: should we make any guarantees about whether <code>rand(space)</code> is drawn from a uniform distribution?]</p>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<h3 dir="auto"><a id="user-content-construction" class="anchor" aria-hidden="true" href="#construction"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Construction</h3>
<table>
<thead>
<tr>
<th align="left">Category</th>
<th align="left">Style</th>
<th align="left">Example</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left">Enumerable discrete space</td>
<td align="left"><code>FiniteSpaceStyle{()}()</code></td>
<td align="left"><code>(:cat, :dog)</code>, <code>0:1</code>, <code>["a","b","c"]</code></td>
</tr>
<tr>
<td align="left">One dimensional continuous space</td>
<td align="left"><code>ContinuousSpaceStyle{()}()</code></td>
<td align="left"><code>-1.2..3.3</code>, <code>Interval(1.0, 2.0)</code></td>
</tr>
<tr>
<td align="left">Multi-dimensional discrete space</td>
<td align="left"><code>FiniteSpaceStyle{(3,4)}()</code></td>
<td align="left"><code>ArraySpace((:cat, :dog), 3, 4)</code>, <code>ArraySpace(0:1, 3, 4)</code>, <code>ArraySpace(1:2, 3, 4)</code>, <code>ArraySpace(Bool, 3, 4)</code></td>
</tr>
<tr>
<td align="left">Multi-dimensional variable discrete space</td>
<td align="left"><code>FiniteSpaceStyle{(2,)}()</code></td>
<td align="left"><code>product((:cat, :dog), (:litchi, :longan, :mango))</code>, <code>product(-1:1, (false, true))</code></td>
</tr>
<tr>
<td align="left">Multi-dimensional continuous space</td>
<td align="left"><code>ContinuousSpaceStyle{(2,)}()</code> or <code>ContinuousSpaceStyle{(3,4)}()</code></td>
<td align="left"><code>Box([-1.0, -2.0], [2.0, 4.0])</code>, <code>product(-1.2..3.3, -4.6..5.0)</code>, <code>ArraySpace(-1.2..3.3, 3, 4)</code>, <code>ArraySpace(Float32, 3, 4)</code></td>
</tr>
<tr>
<td align="left">Multi-dimensional hybrid space [planned for future]</td>
<td align="left"><code>HybridSpaceStyle{(2,),()}()</code></td>
<td align="left"><code>product(-1.2..3.3, -4.6..5.0, [:cat, :dog])</code>, <code>product(Box([-1.0, -2.0], [2.0, 4.0]), [1,2,3])</code></td>
</tr>
</tbody>
</table>
<h3 dir="auto"><a id="user-content-api" class="anchor" aria-hidden="true" href="#api"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>API</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using CommonRLSpaces

julia&gt; s = (:litchi, :longan, :mango)

julia&gt; rand(s)
:litchi

julia&gt; rand(s) in s
true

julia&gt; length(s)
3"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> CommonRLSpaces

julia<span class="pl-k">&gt;</span> s <span class="pl-k">=</span> (<span class="pl-c1">:litchi</span>, <span class="pl-c1">:longan</span>, <span class="pl-c1">:mango</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">rand</span>(s)
<span class="pl-c1">:litchi</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">rand</span>(s) <span class="pl-k">in</span> s
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">length</span>(s)
<span class="pl-c1">3</span></pre></div>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; s = ArraySpace(1:5, 2,3)
CommonRLSpaces.RepeatedSpace{UnitRange{Int64}, Tuple{Int64, Int64}}(1:5, (2, 3))

julia&gt; rand(s)
2×3 Matrix{Int64}:
 4  1  1
 3  2  2

julia&gt; rand(s) in s
true

julia&gt; SpaceStyle(s)
FiniteSpaceStyle()

julia&gt; elsize(s)
(2, 3)"><pre>julia<span class="pl-k">&gt;</span> s <span class="pl-k">=</span> <span class="pl-c1">ArraySpace</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">5</span>, <span class="pl-c1">2</span>,<span class="pl-c1">3</span>)
CommonRLSpaces<span class="pl-k">.</span><span class="pl-c1">RepeatedSpace</span><span class="pl-c1">{UnitRange{Int64}, Tuple{Int64, Int64}}</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">5</span>, (<span class="pl-c1">2</span>, <span class="pl-c1">3</span>))

julia<span class="pl-k">&gt;</span> <span class="pl-c1">rand</span>(s)
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">3</span> Matrix{Int64}<span class="pl-k">:</span>
 <span class="pl-c1">4</span>  <span class="pl-c1">1</span>  <span class="pl-c1">1</span>
 <span class="pl-c1">3</span>  <span class="pl-c1">2</span>  <span class="pl-c1">2</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">rand</span>(s) <span class="pl-k">in</span> s
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">SpaceStyle</span>(s)
<span class="pl-c1">FiniteSpaceStyle</span>()

julia<span class="pl-k">&gt;</span> <span class="pl-c1">elsize</span>(s)
(<span class="pl-c1">2</span>, <span class="pl-c1">3</span>)</pre></div>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; s = product(-1..1, 0..1)
Box{StaticArraysCore.SVector{2, Float64}}([-1.0, 0.0], [1.0, 1.0])

julia&gt; rand(s)
2-element StaticArraysCore.SVector{2, Float64} with indices SOneTo(2):
 0.03049072910834738
 0.6295234114874269

julia&gt; rand(s) in s
true

julia&gt; SpaceStyle(s)
ContinuousSpaceStyle()

julia&gt; elsize(s)
(2,)

julia&gt; bounds(s)
([-1.0, 0.0], [1.0, 1.0])

julia&gt; clamp([5, 5], s)
2-element StaticArraysCore.SizedVector{2, Float64, Vector{Float64}} with indices SOneTo(2):
 1.0
 1.0"><pre>julia<span class="pl-k">&gt;</span> s <span class="pl-k">=</span> <span class="pl-c1">product</span>(<span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">..</span><span class="pl-c1">1</span>, <span class="pl-c1">0</span><span class="pl-k">..</span><span class="pl-c1">1</span>)
<span class="pl-c1">Box</span><span class="pl-c1">{StaticArraysCore.SVector{2, Float64}}</span>([<span class="pl-k">-</span><span class="pl-c1">1.0</span>, <span class="pl-c1">0.0</span>], [<span class="pl-c1">1.0</span>, <span class="pl-c1">1.0</span>])

julia<span class="pl-k">&gt;</span> <span class="pl-c1">rand</span>(s)
<span class="pl-c1">2</span><span class="pl-k">-</span>element StaticArraysCore<span class="pl-k">.</span>SVector{<span class="pl-c1">2</span>, Float64} with indices <span class="pl-c1">SOneTo</span>(<span class="pl-c1">2</span>)<span class="pl-k">:</span>
 <span class="pl-c1">0.03049072910834738</span>
 <span class="pl-c1">0.6295234114874269</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">rand</span>(s) <span class="pl-k">in</span> s
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">SpaceStyle</span>(s)
<span class="pl-c1">ContinuousSpaceStyle</span>()

julia<span class="pl-k">&gt;</span> <span class="pl-c1">elsize</span>(s)
(<span class="pl-c1">2</span>,)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">bounds</span>(s)
([<span class="pl-k">-</span><span class="pl-c1">1.0</span>, <span class="pl-c1">0.0</span>], [<span class="pl-c1">1.0</span>, <span class="pl-c1">1.0</span>])

julia<span class="pl-k">&gt;</span> <span class="pl-c1">clamp</span>([<span class="pl-c1">5</span>, <span class="pl-c1">5</span>], s)
<span class="pl-c1">2</span><span class="pl-k">-</span>element StaticArraysCore<span class="pl-k">.</span>SizedVector{<span class="pl-c1">2</span>, Float64, Vector{Float64}} with indices <span class="pl-c1">SOneTo</span>(<span class="pl-c1">2</span>)<span class="pl-k">:</span>
 <span class="pl-c1">1.0</span>
 <span class="pl-c1">1.0</span></pre></div>
</article></div>