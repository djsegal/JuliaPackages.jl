<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-evolutionarymodelingtools" class="anchor" aria-hidden="true" href="#evolutionarymodelingtools"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>EvolutionaryModelingTools</h1>
<p dir="auto"><a href="https://github.com/wangl-cc/EvolutionaryModelingTools.jl/actions/workflows/ci.yml"><img src="https://github.com/wangl-cc/EvolutionaryModelingTools.jl/actions/workflows/ci.yml/badge.svg?branch=master" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/wangl-cc/EvolutionaryModelingTools.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/e5aa3101ce3877a559de6b7b37051c80c27e334be3871311fac7df5fcd491f76/68747470733a2f2f636f6465636f762e696f2f67682f77616e676c2d63632f45766f6c7574696f6e6172794d6f64656c696e67546f6f6c732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/wangl-cc/EvolutionaryModelingTools.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a>
<a href="https://github.com/wangl-cc/EvolutionaryModelingTools.jl/blob/master/LICENSE"><img src="https://camo.githubusercontent.com/5ea2bd2844feb951857ee40815c6a6bc42405323404f373db11713370a161368/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f77616e676c2d63632f45766f6c7574696f6e6172794d6f64656c696e67546f6f6c732e6a6c" alt="GitHub" data-canonical-src="https://img.shields.io/github/license/wangl-cc/EvolutionaryModelingTools.jl" style="max-width: 100%;"></a>
<a href="https://wangl-cc.github.io/EvolutionaryModelingTools.jl/stable/" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Docs stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://wangl-cc.github.io/EvolutionaryModelingTools.jl/dev/" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Docs dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a></p>
<p dir="auto">A simple package provides an easy way to build evolutionary biology models
and simulate them by Gillespie's direct method algorithm.</p>
<h2 dir="auto"><a id="user-content-why" class="anchor" aria-hidden="true" href="#why"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Why?</h2>
<p dir="auto"><a href="https://github.com/SciML/DifferentialEquations.jl"><code>DifferentialEquations.jl</code></a>
is a brilliant suite solving deferential equations,
including simulating jump process with Gillespie algorithm, and it is a very good choice.
However, it is not suitable for solving differential equations
with "variable length" state,
which is the main reason why I created this package.</p>
<p dir="auto">For example, in a <a href="https://en.wikipedia.org/wiki/Compartmental_models_in_epidemiology#The_SIR_model" rel="nofollow">SIR model</a>,
the host population is composed of "Susceptible", "Infected" and "Recovered".</p>
<p dir="auto">In a normal case, there are only one type of "host" and one type "virus" in the system.
Thus the state of host population can be represent as a vector <code>u = [S, I, R]</code>,
In a complex case, the host population can be composed of many types of "host" and infected by many types of "virus".
In a system with <code>n</code> types of "hosts" and <code>m</code> types of "viruses",
the state of host population can also be represented as a vector
by concatenating the state of each component of host <code>u = vcat(S, vec(I), vec(R))</code>,
where <code>S</code> is a vector of length <code>n</code> and <code>I</code>, <code>R</code> are matrixes of size <code>n × m</code>.
However, in evolutionary biology,
the "mutation" and "extinction" will change the types of hosts and viruses,
which means the <code>n</code> and <code>m</code> changes during the evolution,
and the length of the state vector <code>u</code> will also change.</p>
<h2 dir="auto"><a id="user-content-how-to-use" class="anchor" aria-hidden="true" href="#how-to-use"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>How to use?</h2>
<p dir="auto">The package <a href="https://github.com/SciML/Catalyst.jl"><code>Catalyst.jl</code></a> provides a simple way
to build biochemical reaction for <code>DifferentialEquations.jl</code>.
Similarly, this package provides a macro <code>@reaction_eq</code> which generate reaction(s),
with given equation.</p>
<p dir="auto">For example, the infect reaction of above SIR model with multi-type of viruses can be defined as:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@reaction_eq infect β S + I[i] --&gt; 2I[i]"><pre><span class="pl-c1">@reaction_eq</span> infect β S <span class="pl-k">+</span> I[i] <span class="pl-k">--&gt;</span> <span class="pl-c1">2</span>I[i]</pre></div>
<p dir="auto">where <code>i</code> donates the virus type.  The equation <code>S + I[i] --&gt; 2I[i]</code> means
the an host infected by the virus <code>i</code> infect a susceptible host with rate <code>β</code>,
then convert the the susceptible host to a infectious host.
This expression will not only generate one reaction but a group of reactions trough the index <code>i</code>.</p>
<p dir="auto">However, the mutation and extinction can not be defined easily by the macro <code>@reaction_eq</code> currently.
Thus the alternative macro <code>@reaction</code> provides a low-level way to build reaction(s)</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@reaction mutation begin
    @quickloop μ * I[i]
    begin
        i = ind[1]
        I[i] -= 1 # the host individual is converted to another type
        push!(I, 1) # add a new type of infectious host to the system
        push!(α, randn() + α[i]) # the virulence of the new host type is generated randomly with mean `α[i]`
    end
end"><pre><span class="pl-c1">@reaction</span> mutation <span class="pl-k">begin</span>
    <span class="pl-c1">@quickloop</span> μ <span class="pl-k">*</span> I[i]
    <span class="pl-k">begin</span>
        i <span class="pl-k">=</span> ind[<span class="pl-c1">1</span>]
        I[i] <span class="pl-k">-=</span> <span class="pl-c1">1</span> <span class="pl-c"><span class="pl-c">#</span> the host individual is converted to another type</span>
        <span class="pl-c1">push!</span>(I, <span class="pl-c1">1</span>) <span class="pl-c"><span class="pl-c">#</span> add a new type of infectious host to the system</span>
        <span class="pl-c1">push!</span>(α, <span class="pl-c1">randn</span>() <span class="pl-k">+</span> α[i]) <span class="pl-c"><span class="pl-c">#</span> the virulence of the new host type is generated randomly with mean `α[i]`</span>
    <span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>
<p dir="auto">This expression defined mutation of virus which contains two parts:</p>
<ol dir="auto">
<li>The <code>@quickloop μ * I[i]</code> defines how to calculate the rate of mutation,</li>
<li>The <code>begin ... end</code> block defines what happens when the host is mutated,
where <code>ind</code> is a preserved variable which is used to store the index of the mutated host.</li>
</ol>
<p dir="auto">Once you have defined all reactions, put them together as a tuple:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="reactions = (infect, mutation, ...)"><pre>reactions <span class="pl-k">=</span> (infect, mutation, <span class="pl-k">...</span>)</pre></div>
<p dir="auto">and define the initial state and parameters of the system as a named tuple:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="params = (β = 0.1, μ = 0.001, ..., S = scalar(100), I = [1], R = [0], α = [0.5])"><pre>params <span class="pl-k">=</span> (β <span class="pl-k">=</span> <span class="pl-c1">0.1</span>, μ <span class="pl-k">=</span> <span class="pl-c1">0.001</span>, <span class="pl-k">...</span>, S <span class="pl-k">=</span> <span class="pl-c1">scalar</span>(<span class="pl-c1">100</span>), I <span class="pl-k">=</span> [<span class="pl-c1">1</span>], R <span class="pl-k">=</span> [<span class="pl-c1">0</span>], α <span class="pl-k">=</span> [<span class="pl-c1">0.5</span>])</pre></div>
<p dir="auto">where the <code>scalar</code> will create a type similar to <code>Number</code>,
but it can be update in-place like <code>Ref</code> like <code>S[] += 1</code>.</p>
<p dir="auto">Once reaction and parameters is defined, you can use <code>gillespie</code> to simulate the system:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="max_time = 100 # the maximum time of simulation
params′, t, term = gillespie(max_time, params, reactions)"><pre>max_time <span class="pl-k">=</span> <span class="pl-c1">100</span> <span class="pl-c"><span class="pl-c">#</span> the maximum time of simulation</span>
params′, t, term <span class="pl-k">=</span> <span class="pl-c1">gillespie</span>(max_time, params, reactions)</pre></div>
<p dir="auto">where the <code>gillespie</code> function returns an tuple <code>t, ps′, term</code>
where <code>t</code> is the time when the simulation ends, <code>params′</code> is an updated <code>params</code>,
and <code>term</code> is a flag indicating whether the simulation is finished after the maximum time
or break with given flag.</p>
<p dir="auto"><strong>Note</strong>: Changes of the state will not be recorded by default,
but you can use my another package <code>RecordedArrays</code> to record them, like this:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using RecordedArrays
c = DiscreteClock(max_time) # clock store information of max_time
S = recorded(DynamicEntry, c, 100) # create a recorded number as S with the clock c
I = recorded(DynamicEntry, c, [1]) # create a recorded vector as I with the clock c
R = recorded(DynamicEntry, c, [0]) # create a recorded vector as R with the clock c
α = recorded(StaticEntry, c, [0.5]) # create a recorded vector as α with the clock c
params = (; β = 0.1, μ = 0.001, ..., S, I, R, α) # create new params with recorded S, I, R, α
gillespie(c, params, reactions) # run the simulation with the clock and new params"><pre><span class="pl-k">using</span> RecordedArrays
c <span class="pl-k">=</span> <span class="pl-c1">DiscreteClock</span>(max_time) <span class="pl-c"><span class="pl-c">#</span> clock store information of max_time</span>
S <span class="pl-k">=</span> <span class="pl-c1">recorded</span>(DynamicEntry, c, <span class="pl-c1">100</span>) <span class="pl-c"><span class="pl-c">#</span> create a recorded number as S with the clock c</span>
I <span class="pl-k">=</span> <span class="pl-c1">recorded</span>(DynamicEntry, c, [<span class="pl-c1">1</span>]) <span class="pl-c"><span class="pl-c">#</span> create a recorded vector as I with the clock c</span>
R <span class="pl-k">=</span> <span class="pl-c1">recorded</span>(DynamicEntry, c, [<span class="pl-c1">0</span>]) <span class="pl-c"><span class="pl-c">#</span> create a recorded vector as R with the clock c</span>
α <span class="pl-k">=</span> <span class="pl-c1">recorded</span>(StaticEntry, c, [<span class="pl-c1">0.5</span>]) <span class="pl-c"><span class="pl-c">#</span> create a recorded vector as α with the clock c</span>
params <span class="pl-k">=</span> (; β <span class="pl-k">=</span> <span class="pl-c1">0.1</span>, μ <span class="pl-k">=</span> <span class="pl-c1">0.001</span>, <span class="pl-k">...</span>, S, I, R, α) <span class="pl-c"><span class="pl-c">#</span> create new params with recorded S, I, R, α</span>
<span class="pl-c1">gillespie</span>(c, params, reactions) <span class="pl-c"><span class="pl-c">#</span> run the simulation with the clock and new params</span></pre></div>
<p dir="auto">More information about <code>RecordedArrays</code>, see its
<a href="https://wangl-cc.github.io/RecordedArrays.jl/dev" rel="nofollow">documentation</a>.</p>
</article></div>