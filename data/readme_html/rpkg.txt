<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-rpkgjl" class="anchor" aria-hidden="true" href="#rpkgjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>RPkg.jl</h1>
<p dir="auto"><strong>An R Package Manager from Julia with <g-emoji class="g-emoji" alias="heart" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2764.png">❤️</g-emoji></strong></p>
<p dir="auto"><code>RPkg.jl</code> is a meta package built on top of <code>RCall.jl</code>. Even though <code>RCall.jl</code> functions try as much as they can, to blur the lines between R syntax and Julia syntax in a Julia session, R package management is an area where the user is forced to write R scripts. Through <code>RPKg.jl</code> we are introducing Julia <code>Pkg</code> style syntax for managing your R-packages while using <code>RCall</code>. <code>RPkg</code> also exposes all the functions from <code>RCall</code>, so you don't have to load it separately.</p>
<h3 dir="auto"><a id="user-content-apis" class="anchor" aria-hidden="true" href="#apis"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>APIs</h3>
<table>
<thead>
<tr>
<th align="left">Function</th>
<th align="left">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left"><code>RPkg.add()</code></td>
<td align="left">Add package(s)</td>
</tr>
<tr>
<td align="left"><code>RPkg.rm()</code></td>
<td align="left">Remove package(s)</td>
</tr>
<tr>
<td align="left"><code>RPkg.activate()</code></td>
<td align="left">Activate the Project Environment in the current working directory</td>
</tr>
<tr>
<td align="left"><code>RPkg.instantiate()</code></td>
<td align="left">Create a new Project Environment</td>
</tr>
<tr>
<td align="left"><code>RPkg.status()</code></td>
<td align="left">List the packages in your Environment</td>
</tr>
<tr>
<td align="left"><code>RPkg.update()</code></td>
<td align="left">Update package(s)</td>
</tr>
<tr>
<td align="left"><code>RPkg.build()</code></td>
<td align="left">re-Build package(s)</td>
</tr>
<tr>
<td align="left"><code>RPkg.resolve()</code></td>
<td align="left">Resolve dependency issues in the project enviornment</td>
</tr>
</tbody>
</table>
<p dir="auto"><strong>Note: <code>RPkg</code> supports installation via CRAN and GitHub</strong></p>
<ul dir="auto">
<li>To install packages from CRAN, <code>RPkg.add("pkgname")</code>
<ul dir="auto">
<li>If you want to install multiple packages, <code>RPkg.add("Pkg1", "Pkg2", "Pkg3")</code></li>
</ul>
</li>
<li>The option to install packages from GitHub only works in local r-project enviornments. So first run <code>RPkg.instantiate()</code> before proceeding to the following steps:
<ul dir="auto">
<li>To install packages from GitHub URL, you first need to install <code>devtools</code> using <code>RPkg</code>, then using the <code>RPkg.add("username/reponame")</code> syntax you can install the package from GitHub repo.
<ul dir="auto">
<li>For eg., if you want to install the package from <a href="https://github.com/ralmond/CPTtools">https://github.com/ralmond/CPTtools</a>, then after having the devtools insalled you can use <code>RPkg.add("ralmond/CPTtools")</code>.</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 dir="auto"><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using RPkg
julia&gt; RPkg.add(&quot;bnlearn&quot;)
julia&gt; @rlibrary bnlearn # @rlibrary is a macro from RCall"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> RPkg
julia<span class="pl-k">&gt;</span> RPkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>bnlearn<span class="pl-pds">"</span></span>)
julia<span class="pl-k">&gt;</span> <span class="pl-c1">@rlibrary</span> bnlearn <span class="pl-c"><span class="pl-c">#</span> @rlibrary is a macro from RCall</span></pre></div>
<h3 dir="auto"><a id="user-content-know-issues" class="anchor" aria-hidden="true" href="#know-issues"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Know issues:</h3>
<ul dir="auto">
<li>In Windows machines, <code>RPkg</code> only works inside a local project environment. So before attempting to install any packages using <code>RPkg</code>, you need to create a local project enviornmnet using <code>RPkg.instanitate()</code>.</li>
<li><code>RPkg.status()</code> is broken</li>
</ul>
</article></div>