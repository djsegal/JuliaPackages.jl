<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-greenfunc" class="anchor" aria-hidden="true" href="#greenfunc"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>GreenFunc</h1>
<p dir="auto"><a href="https://numericalEFT.github.io/GreenFunc.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://numericalEFT.github.io/GreenFunc.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/numericalEFT/GreenFunc.jl/actions/workflows/CI.yml?query=branch%3Amaster"><img src="https://github.com/numericalEFT/GreenFunc.jl/actions/workflows/CI.yml/badge.svg?branch=master" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/numericalEFT/GreenFunc.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/9b98f00ed1931785d33706f0df3c89f1fed1d82fbcf965335416c28c432ef8f0/68747470733a2f2f636f6465636f762e696f2f67682f6e756d65726963616c4546542f477265656e46756e632e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/numericalEFT/GreenFunc.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">GreenFunc.jl is a differentiable numerical framework to manipulate multidimensional Green's functions.</p>
<h2 dir="auto"><a id="user-content-features" class="anchor" aria-hidden="true" href="#features"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Features</h2>
<ul dir="auto">
<li><code>MeshArray</code> type as an array defined on meshes, which provides a generic data structure for Green's functions, vertex functions or any other correlation/response functions.</li>
<li>Structured (non-)uniform Brillouin Zone meshes powered by the package <a href="https://github.com/numericalEFT/BrillouinZoneMeshes.jl"><code>BrillouinZoneMeshes.jl</code></a>.</li>
<li>Structured (non-)uniform temporal meshes for (imaginary-)time or (Matsubara-)frequency domains powered by the pacakge <a href="https://github.com/numericalEFT/CompositeGrids.jl"><code>CompositeGrids.jl</code></a>.</li>
<li>Compat representation based on the Discrete Lehmann representation (DLR) powered by the package <a href="https://github.com/numericalEFT/Lehmann.jl"><code>Lehmann.jl</code></a>.</li>
<li>Accurate and fast Fourier transform.</li>
<li>Interface to the <a href="https://triqs.github.io/" rel="nofollow"><code>TRIQS</code></a> library.</li>
</ul>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">This package has been registered. So, simply type <code>import Pkg; Pkg.add("GreenFunc")</code> in the Julia REPL to install.</p>
<h2 dir="auto"><a id="user-content-basic-usage" class="anchor" aria-hidden="true" href="#basic-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Basic Usage</h2>
<h3 dir="auto"><a id="user-content-example-1-greens-function-of-a-single-level" class="anchor" aria-hidden="true" href="#example-1-greens-function-of-a-single-level"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example 1: Green's function of a single level</h3>
<p dir="auto">We first show how to use <code>MeshArray</code> to present Green's function of a single-level quantum system filled with spinless fermionic particles. We assume that the system could exchange particles and energy with the environment so that it's equilibrium state is a grand canonical ensemble. The single-particle Green's function then has a simple form in Matsubara-frequency representation:  <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="4c45b084c8dcf619746bd10ae352162a">$G(ωₙ) = \frac{1}{(iωₙ - E)}$</math-renderer> where <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="4c45b084c8dcf619746bd10ae352162a">$E$</math-renderer> is the level energy. We show how to generate and manipulate this Green's function.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="    using GreenFunc

    β = 100.0; E = 1.0 # inverse temperature and the level energy
    ωₙ_mesh = MeshGrids.ImFreq(100.0, FERMION; Euv = 100E) # UV energy cutoff is 100 times larger than the level energy
    Gn =  MeshArray(ωₙ_mesh; dtype=ComplexF64); # Green's function defined on the ωₙ_mesh

    for (n, ωₙ) in enumerate(Gn.mesh[1])
        Gn[n] = 1/(ωₙ*im - E)
    end"><pre>    <span class="pl-k">using</span> GreenFunc

    β <span class="pl-k">=</span> <span class="pl-c1">100.0</span>; E <span class="pl-k">=</span> <span class="pl-c1">1.0</span> <span class="pl-c"><span class="pl-c">#</span> inverse temperature and the level energy</span>
    ωₙ_mesh <span class="pl-k">=</span> MeshGrids<span class="pl-k">.</span><span class="pl-c1">ImFreq</span>(<span class="pl-c1">100.0</span>, FERMION; Euv <span class="pl-k">=</span> <span class="pl-c1">100</span>E) <span class="pl-c"><span class="pl-c">#</span> UV energy cutoff is 100 times larger than the level energy</span>
    Gn <span class="pl-k">=</span>  <span class="pl-c1">MeshArray</span>(ωₙ_mesh; dtype<span class="pl-k">=</span>ComplexF64); <span class="pl-c"><span class="pl-c">#</span> Green's function defined on the ωₙ_mesh</span>

    <span class="pl-k">for</span> (n, ωₙ) <span class="pl-k">in</span> <span class="pl-c1">enumerate</span>(Gn<span class="pl-k">.</span>mesh[<span class="pl-c1">1</span>])
        Gn[n] <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">/</span>(ωₙ<span class="pl-k">*</span>im <span class="pl-k">-</span> E)
    <span class="pl-k">end</span></pre></div>
<ul dir="auto">
<li>
<p dir="auto">Green's function describes correlations between two or more spacetime events. The spacetime continuum needs to be discretized into spatial and temporal meshes. This example demonstrates how to define a one-body Green's function on a temporal mesh. The package provides three types of temporal meshes: imaginary-time grid, Matsubara-frequency grid, and DLR grid. The latter provides a generic compressed representation for Green's functions (We will show how to use DLR later).  Correspondingly, They can be created with the <code>ImTime</code>, <code>ImFreq</code>, and <code>DLRFreq</code> methods. The user needs to specify the inverse temperature, whether the particle is fermion or boson (using the constant <code>FERMION</code> or <code>BOSON</code>). Internally, a set of non-uniform grid points optimized for the given inverse temperature and the cutoff energy will be created with the given parameters.</p>
</li>
<li>
<p dir="auto">Once the meshes are created, one can define a <code>MeshArray</code> on them to represent the Green's function <code>Gn</code>. The constructor of <code>MeshArray</code> takes a set of meshes and initializes a multi-dimensional array. Each mesh corresponds to one dimension of the array. The data type of the <code>MeshArray</code> is specified by the optional keyword argument <code>dtype</code>, which is set to <code>Float64</code> by default. You can access the meshes (stored as a tuple) with <code>Gn.mesh</code> and the array data with <code>Gn.data</code>.</p>
</li>
<li>
<p dir="auto">By default, <code>Gn.data</code> is left undefined if not specified by the user. To initialize it, one can either use the optional keyword argument <code>data</code> in the constructor or use the iterator interface of the meshes and the <code>MeshArray</code>.</p>
</li>
</ul>
<h3 dir="auto">
<a id="user-content-example-2-greens-function-of-a-free-electron-gas" class="anchor" aria-hidden="true" href="#example-2-greens-function-of-a-free-electron-gas"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example 2: Green's function of a free electron gas</h3>
<p dir="auto">Now let us show how to create a Green's function of a free electron gas. Unlike the spinless fermionic particle, the electron is a spin-1/2 particle so that it has two inner states. In free space, it has a kinetic energy <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="4c45b084c8dcf619746bd10ae352162a">$ϵ_q = q^2-E$</math-renderer> (we use the unit where <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="4c45b084c8dcf619746bd10ae352162a">$m_e = 1/2$</math-renderer>). The Green's function in Matsubara-frequency space is then given by the following equation: <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="4c45b084c8dcf619746bd10ae352162a">$G_n = G_{\sigma_1, \sigma_2}(q,\omega_n) = \frac{1}{i \omega_n - \epsilon_q}$</math-renderer>, where <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="4c45b084c8dcf619746bd10ae352162a">$\sigma_i$</math-renderer> denotes the spins of the incoming and the outgoing electron in the propagator. We inherit the Matsubara-frequency grid from the first example. We show how to use the <code>CompositeGrids</code> package to generate momentum grids and how to treat the multiple inner states and the meshes with <code>MeshArray</code>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="    using GreenFunc, CompositeGrids
    β = 100.0; E = 1.0 # inverse temperature and the level energy
    ωₙ_mesh = MeshGrids.ImFreq(100.0, FERMION; Euv = 100E) # UV energy cutoff is 100 times larger than the level energy
    kmesh = SimpleGrid.Uniform{Float64}([0.0, 10.0], 50); # initialze an uniform momentum grid
    G_n =  MeshArray(1:2, 1:2, kmesh, ωₙ_mesh; dtype=ComplexF64); # Green's function of free electron gas with 2x2 innerstates

    for ind in eachindex(G_n)
        q = G_n.mesh[3][ind[3]]
        ω_n = G_n.mesh[4][ind[4]]
        G_n[ind] = 1/(ω_n*im - (q^2-E))
    end"><pre>    <span class="pl-k">using</span> GreenFunc, CompositeGrids
    β <span class="pl-k">=</span> <span class="pl-c1">100.0</span>; E <span class="pl-k">=</span> <span class="pl-c1">1.0</span> <span class="pl-c"><span class="pl-c">#</span> inverse temperature and the level energy</span>
    ωₙ_mesh <span class="pl-k">=</span> MeshGrids<span class="pl-k">.</span><span class="pl-c1">ImFreq</span>(<span class="pl-c1">100.0</span>, FERMION; Euv <span class="pl-k">=</span> <span class="pl-c1">100</span>E) <span class="pl-c"><span class="pl-c">#</span> UV energy cutoff is 100 times larger than the level energy</span>
    kmesh <span class="pl-k">=</span> SimpleGrid<span class="pl-k">.</span><span class="pl-c1">Uniform</span><span class="pl-c1">{Float64}</span>([<span class="pl-c1">0.0</span>, <span class="pl-c1">10.0</span>], <span class="pl-c1">50</span>); <span class="pl-c"><span class="pl-c">#</span> initialze an uniform momentum grid</span>
    G_n <span class="pl-k">=</span>  <span class="pl-c1">MeshArray</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span>, <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span>, kmesh, ωₙ_mesh; dtype<span class="pl-k">=</span>ComplexF64); <span class="pl-c"><span class="pl-c">#</span> Green's function of free electron gas with 2x2 innerstates</span>

    <span class="pl-k">for</span> ind <span class="pl-k">in</span> <span class="pl-c1">eachindex</span>(G_n)
        q <span class="pl-k">=</span> G_n<span class="pl-k">.</span>mesh[<span class="pl-c1">3</span>][ind[<span class="pl-c1">3</span>]]
        ω_n <span class="pl-k">=</span> G_n<span class="pl-k">.</span>mesh[<span class="pl-c1">4</span>][ind[<span class="pl-c1">4</span>]]
        G_n[ind] <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">/</span>(ω_n<span class="pl-k">*</span>im <span class="pl-k">-</span> (q<span class="pl-k">^</span><span class="pl-c1">2</span><span class="pl-k">-</span>E))
    <span class="pl-k">end</span></pre></div>
<ul dir="auto">
<li>
<p dir="auto">One can generate various types of grids with the <code>CompositeGrids</code> package. The <code>SimpleGrid</code> module here provides several basic grids, such as uniform grids and logarithmically dense grids. The<code> Uniform</code> method here generates a 1D linearly spaced grid. The user has to specify the number of grid points <code>N</code> and the boundary points <code>[min, max]</code>. One can also combine arbitrary numbers of <code>SimpleGrid</code> subgrids with a user-specified pattern defined by a <code>panel grid</code>. These more advanced grids optimized for different purposes can be found in this <a href="https://github.com/numericalEFT/CompositeGrids.jl">link</a>.</p>
</li>
<li>
<p dir="auto">The constructor of <code>MeshArray</code> can take any iterable objects as one of its meshes. Therefore for discrete inner states such as spins, one can simply use a <code>1:2</code>, which is a <code>UnitRange{Int64}</code> object.</p>
</li>
</ul>
<h3 dir="auto">
<a id="user-content-example-3-greens-function-of-a-hubbard-lattice" class="anchor" aria-hidden="true" href="#example-3-greens-function-of-a-hubbard-lattice"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example 3: Green's function of a Hubbard lattice</h3>
<p dir="auto">Now we show how to generate a multi-dimensional Green's function on a Brillouin Zone meshe. We calculate the Green's function of a free spinless Fermi gas on a square lattice. It has a tight-binding dispersion <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="4c45b084c8dcf619746bd10ae352162a">$\epsilon_q = -2t(\cos(q_x)+\cos(q_y))$</math-renderer>, which gives
<math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="4c45b084c8dcf619746bd10ae352162a">$G(q, \omega_n) = \frac{1}{i\omega_n - \epsilon_q}$</math-renderer>.
The momentum is defined on the first Brillouin zone captured by a 2D k-mesh.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="    using GreenFunc
    using GreenFunc: BrillouinZoneMeshes

    DIM, nk = 2, 8
    lattice = Matrix([1.0 0; 0 1]')
    br = BrillouinZoneMeshes.BZMeshes.Cell(lattice=lattice)
    bzmesh = BrillouinZoneMeshes.BZMeshes.UniformBZMesh(cell=br, size=(nk, nk))
    ωₙmesh = ImFreq(10.0, FERMION)
    g_freq =  MeshArray(bzmesh, ωₙmesh; dtype=ComplexF64)

    t = 1.0
    for ind in eachindex(g_freq)
        q = g_freq.mesh[1][ind[1]]
        ωₙ = g_freq.mesh[2][ind[2]]
        g_freq[ind] = 1/(ωₙ*im - (-2*t*sum(cos.(q))))
    end"><pre>    <span class="pl-k">using</span> GreenFunc
    <span class="pl-k">using</span> GreenFunc<span class="pl-k">:</span> BrillouinZoneMeshes

    DIM, nk <span class="pl-k">=</span> <span class="pl-c1">2</span>, <span class="pl-c1">8</span>
    lattice <span class="pl-k">=</span> <span class="pl-c1">Matrix</span>([<span class="pl-c1">1.0</span> <span class="pl-c1">0</span>; <span class="pl-c1">0</span> <span class="pl-c1">1</span>]<span class="pl-k">'</span>)
    br <span class="pl-k">=</span> BrillouinZoneMeshes<span class="pl-k">.</span>BZMeshes<span class="pl-k">.</span><span class="pl-c1">Cell</span>(lattice<span class="pl-k">=</span>lattice)
    bzmesh <span class="pl-k">=</span> BrillouinZoneMeshes<span class="pl-k">.</span>BZMeshes<span class="pl-k">.</span><span class="pl-c1">UniformBZMesh</span>(cell<span class="pl-k">=</span>br, size<span class="pl-k">=</span>(nk, nk))
    ωₙmesh <span class="pl-k">=</span> <span class="pl-c1">ImFreq</span>(<span class="pl-c1">10.0</span>, FERMION)
    g_freq <span class="pl-k">=</span>  <span class="pl-c1">MeshArray</span>(bzmesh, ωₙmesh; dtype<span class="pl-k">=</span>ComplexF64)

    t <span class="pl-k">=</span> <span class="pl-c1">1.0</span>
    <span class="pl-k">for</span> ind <span class="pl-k">in</span> <span class="pl-c1">eachindex</span>(g_freq)
        q <span class="pl-k">=</span> g_freq<span class="pl-k">.</span>mesh[<span class="pl-c1">1</span>][ind[<span class="pl-c1">1</span>]]
        ωₙ <span class="pl-k">=</span> g_freq<span class="pl-k">.</span>mesh[<span class="pl-c1">2</span>][ind[<span class="pl-c1">2</span>]]
        g_freq[ind] <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">/</span>(ωₙ<span class="pl-k">*</span>im <span class="pl-k">-</span> (<span class="pl-k">-</span><span class="pl-c1">2</span><span class="pl-k">*</span>t<span class="pl-k">*</span><span class="pl-c1">sum</span>(<span class="pl-c1">cos</span>.(q))))
    <span class="pl-k">end</span></pre></div>
<ul dir="auto">
<li>For lattice systems with multi-dimensional Brillouin zone, the momentum grids internally generated with the <a href="https://github.com/numericalEFT/BrillouinZoneMeshes.jl"><code>BrillouinZoneMeshes.jl</code></a> package. Here a <code>UniformMesh{DIM,N}(origin, latvec)</code> generates a linearly spaced momentum mesh on the first Brillouin zone defined by origin and lattice vectors given. For more detail, see the <a href="https://github.com/numericalEFT/BrillouinZoneMeshes.jl">link</a>.</li>
</ul>
<h3 dir="auto">
<a id="user-content-example-4--fourier-transform-of-greens-function-with-dlr" class="anchor" aria-hidden="true" href="#example-4--fourier-transform-of-greens-function-with-dlr"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example 4:  Fourier Transform of Green's function with DLR</h3>
<p dir="auto">DLR provides a compact representation for one-body Green's functions. At a temperature <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="4c45b084c8dcf619746bd10ae352162a">$T$</math-renderer> and an accuracy level <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="4c45b084c8dcf619746bd10ae352162a">$\epsilon$</math-renderer>, it represents a generic Green's function with only <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="4c45b084c8dcf619746bd10ae352162a">$\log (1/T) \log (1/\epsilon)$</math-renderer> basis functions labeled by a set of real frequency grid points. It enables fast Fourier transform and interpolation between the imaginary-time and the Matsubara-frequency representations with a cost <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="4c45b084c8dcf619746bd10ae352162a">$O(\log (1/T) \log (1/\epsilon))$</math-renderer>. <code>GreenFunc.jl</code> provide DLR through the package <a href="https://github.com/numericalEFT/Lehmann.jl"><code>Lehmann.jl</code></a>.</p>
<p dir="auto">In the following example, we demonstrate how to perform DLR-based Fourier transform in <code>GreenFunc.jl</code> between the imaginary-time and the Matsubara-frequency domains back and forth through the DLR representation.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="    using GreenFunc, CompositeGrids

    β = 100.0; E = 1.0 # inverse temperature and the level energy
    ωₙ_mesh = ImFreq(100.0, FERMION; Euv = 100E) # UV energy cutoff is 100 times larger than the level energy
    kmesh = SimpleGrid.Uniform{Float64}([0.0, 10.0], 50); # initialze an uniform momentum grid
    G_n =  MeshArray(1:2, 1:2, kmesh, ωₙ_mesh; dtype=ComplexF64); # Green's function of free electron gas with 2x2 innerstates

    for ind in eachindex(G_n)
        q = G_n.mesh[3][ind[3]]
        ω_n = G_n.mesh[4][ind[4]]
        G_n[ind] = 1/(im*ω_n - (q^2-E))
    end

    G_dlr = to_dlr(G_n) # convert G_n to DLR space 
    G_tau = to_imtime(G_dlr) # convert G_dlr to the imaginary-time domain 

    #alternative, you can use the pipe operator
    G_tau = G_n |&gt; to_dlr |&gt; to_imtime #Fourier transform to (k, tau) domain
"><pre>    <span class="pl-k">using</span> GreenFunc, CompositeGrids

    β <span class="pl-k">=</span> <span class="pl-c1">100.0</span>; E <span class="pl-k">=</span> <span class="pl-c1">1.0</span> <span class="pl-c"><span class="pl-c">#</span> inverse temperature and the level energy</span>
    ωₙ_mesh <span class="pl-k">=</span> <span class="pl-c1">ImFreq</span>(<span class="pl-c1">100.0</span>, FERMION; Euv <span class="pl-k">=</span> <span class="pl-c1">100</span>E) <span class="pl-c"><span class="pl-c">#</span> UV energy cutoff is 100 times larger than the level energy</span>
    kmesh <span class="pl-k">=</span> SimpleGrid<span class="pl-k">.</span><span class="pl-c1">Uniform</span><span class="pl-c1">{Float64}</span>([<span class="pl-c1">0.0</span>, <span class="pl-c1">10.0</span>], <span class="pl-c1">50</span>); <span class="pl-c"><span class="pl-c">#</span> initialze an uniform momentum grid</span>
    G_n <span class="pl-k">=</span>  <span class="pl-c1">MeshArray</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span>, <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span>, kmesh, ωₙ_mesh; dtype<span class="pl-k">=</span>ComplexF64); <span class="pl-c"><span class="pl-c">#</span> Green's function of free electron gas with 2x2 innerstates</span>

    <span class="pl-k">for</span> ind <span class="pl-k">in</span> <span class="pl-c1">eachindex</span>(G_n)
        q <span class="pl-k">=</span> G_n<span class="pl-k">.</span>mesh[<span class="pl-c1">3</span>][ind[<span class="pl-c1">3</span>]]
        ω_n <span class="pl-k">=</span> G_n<span class="pl-k">.</span>mesh[<span class="pl-c1">4</span>][ind[<span class="pl-c1">4</span>]]
        G_n[ind] <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">/</span>(im<span class="pl-k">*</span>ω_n <span class="pl-k">-</span> (q<span class="pl-k">^</span><span class="pl-c1">2</span><span class="pl-k">-</span>E))
    <span class="pl-k">end</span>

    G_dlr <span class="pl-k">=</span> <span class="pl-c1">to_dlr</span>(G_n) <span class="pl-c"><span class="pl-c">#</span> convert G_n to DLR space </span>
    G_tau <span class="pl-k">=</span> <span class="pl-c1">to_imtime</span>(G_dlr) <span class="pl-c"><span class="pl-c">#</span> convert G_dlr to the imaginary-time domain </span>

    <span class="pl-c"><span class="pl-c">#</span>alternative, you can use the pipe operator</span>
    G_tau <span class="pl-k">=</span> G_n <span class="pl-k">|&gt;</span> to_dlr <span class="pl-k">|&gt;</span> to_imtime <span class="pl-c"><span class="pl-c">#</span>Fourier transform to (k, tau) domain</span>
</pre></div>
<p dir="auto">The imaginary-time Green's function after the Fourier transform shoud be consistent with the analytic solution <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="4c45b084c8dcf619746bd10ae352162a">$G_{\tau} = -e^{-\tau \epsilon_q}/(1+e^{-\beta \epsilon_q})$</math-renderer>.</p>
<ul dir="auto">
<li>
<p dir="auto">For any Green's function that has at least one imaginary-temporal grid (<code>ImTime</code>, <code>ImFreq</code>, and <code>DLRFreq</code>) in meshes, we provide a set of operations (<code>to_dlr</code>, <code>to_imfreq</code> and <code>to_imtime</code>) to bridge the DLR space with imaginary-time and Matsubara-frequency space. By default, all these functions find the dimension of the imaginary-temporal mesh within Green's function meshes and perform the transformation with respect to it. Alternatively, one can specify the dimension with the optional keyword argument <code>dim</code>. Be careful that the original version of DLR is only guaranteed to work with one-body Green's function.</p>
</li>
<li>
<p dir="auto">Once a spectral density <code>G_dlr</code> in DLR space is obtained, one can use <code>to_imfreq</code> or <code>to_imtime</code> methods to reconstruct the Green's function in the corresponding space. By default, <code>to_imfreq</code> and <code>to_imtime</code> uses an optimized imaginary-time or Matsubara-frequency grid from the DLR. User can assign a target imaginary-time or Matsubara-frequency grid if necessary.</p>
</li>
<li>
<p dir="auto">Combining <code>to_dlr</code>, <code>to_imfreq</code> and <code>to_imtime</code> allows both <em>interpolation</em> as well as <em>Fourier transform</em>.</p>
</li>
<li>
<p dir="auto">Since the spectral density <code>G_dlr</code> can be reused whenever the user wants to change the grid points of Green's function (normally through interpolation that lost more accuracy than DLR transform), we encourage the user always to keep the <code>G_dlr</code> objects. If the intermediate DLR Green's function is not needed, the user can use piping operator <code>|&gt;</code> as shown to do Fourier transform directly between <code>ImFreq</code> and <code>ImTime</code> in one line.</p>
</li>
</ul>
<h2 dir="auto">
<a id="user-content-interface-with-triqs" class="anchor" aria-hidden="true" href="#interface-with-triqs"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Interface with TRIQS</h2>
<p dir="auto">TRIQS (Toolbox for Research on Interacting Quantum Systems) is a scientific project providing a set of C++ and Python libraries for the study of interacting quantum systems. We provide a direct interface to convert TRIQS objects, such as the temporal meshes, the Brillouin zone meshes, and the  multi-dimensional (blocked) Green's functions, to the equivalent objects in our package. It would help TRIQS users to make use of our package without worrying about the different internal data structures.</p>
<p dir="auto">The interface is provided by an independent package <a href="https://github.com/numericalEFT/NEFTInterface.jl"><code>NEFTInterface.jl</code></a>. We provide several examples of interfacing TRIQS and <code>GreenFunc.jl</code> in the <a href="https://github.com/numericalEFT/NEFTInterface.jl"><code>NEFTInterface.jl</code> README</a>.</p>
</article></div>