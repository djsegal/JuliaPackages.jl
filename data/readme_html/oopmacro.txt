<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-oopmacro" class="anchor" aria-hidden="true" href="#oopmacro"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>OOPMacro</h1>
<p>A Julia package for writing Julia in Object Oriented Programming style.</p>
<hr>
<h2><a id="user-content-usage-example" class="anchor" aria-hidden="true" href="#usage-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage Example</h2>
<h3><a id="user-content-basic" class="anchor" aria-hidden="true" href="#basic"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Basic</h3>
<p>Use <code>@class</code> to define a <code>class</code>. Defining functions is just as the same as in plain julia. Generic function/keyword arguments are all supported.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using OOPMacro

@class SimpleCls begin
    field0
    field1::Int
    field2::Int

    #= Supports different style of function declaration =#
    fun0(self::SimpleCls, x) = self.field0 + x
    fun1(self, x, y) = begin
        self.field1 + x
    end
    function fun2(self, x)
        self.field2 + x
    end

    #= Generic function is also supported =#
    fun0{T&lt;:Int}(self::SimpleCls, x::T) = self.field0 + x
    fun1{T&lt;:Int}(self, x::T, y::T) = begin
        self.field1 + x
    end
    function fun2{T&lt;:Int}(self, x::T)
        self.field2 + x
    end
end

@class SimpleCls1 begin
    field0::Int
    fun0(self, x, y=1) = self.field0 + x + y
    fun1(self, x, y=1; z=2) = self.field0 + x + y + z
end

s = SimpleCls(0,1,2)
fun0(s, 1)

s1 = SimpleCls1(0)
fun1(s1, 1, 2, z=3)

"><pre><span class="pl-k">using</span> OOPMacro

<span class="pl-c1">@class</span> SimpleCls <span class="pl-k">begin</span>
    field0
    field1<span class="pl-k">::</span><span class="pl-c1">Int</span>
    field2<span class="pl-k">::</span><span class="pl-c1">Int</span>

    <span class="pl-c"><span class="pl-c">#=</span> Supports different style of function declaration <span class="pl-c">=#</span></span>
    <span class="pl-en">fun0</span>(self<span class="pl-k">::</span><span class="pl-c1">SimpleCls</span>, x) <span class="pl-k">=</span> self<span class="pl-k">.</span>field0 <span class="pl-k">+</span> x
    <span class="pl-en">fun1</span>(self, x, y) <span class="pl-k">=</span> <span class="pl-k">begin</span>
        self<span class="pl-k">.</span>field1 <span class="pl-k">+</span> x
    <span class="pl-k">end</span>
    <span class="pl-k">function</span> <span class="pl-en">fun2</span>(self, x)
        self<span class="pl-k">.</span>field2 <span class="pl-k">+</span> x
    <span class="pl-k">end</span>

    <span class="pl-c"><span class="pl-c">#=</span> Generic function is also supported <span class="pl-c">=#</span></span>
    <span class="pl-en">fun0</span><span class="pl-c1">{T&lt;:Int}</span>(self<span class="pl-k">::</span><span class="pl-c1">SimpleCls</span>, x<span class="pl-k">::</span><span class="pl-c1">T</span>) <span class="pl-k">=</span> self<span class="pl-k">.</span>field0 <span class="pl-k">+</span> x
    <span class="pl-en">fun1</span><span class="pl-c1">{T&lt;:Int}</span>(self, x<span class="pl-k">::</span><span class="pl-c1">T</span>, y<span class="pl-k">::</span><span class="pl-c1">T</span>) <span class="pl-k">=</span> <span class="pl-k">begin</span>
        self<span class="pl-k">.</span>field1 <span class="pl-k">+</span> x
    <span class="pl-k">end</span>
    <span class="pl-k">function</span> <span class="pl-en">fun2</span><span class="pl-c1">{T&lt;:Int}</span>(self, x<span class="pl-k">::</span><span class="pl-c1">T</span>)
        self<span class="pl-k">.</span>field2 <span class="pl-k">+</span> x
    <span class="pl-k">end</span>
<span class="pl-k">end</span>

<span class="pl-c1">@class</span> SimpleCls1 <span class="pl-k">begin</span>
    field0<span class="pl-k">::</span><span class="pl-c1">Int</span>
    <span class="pl-en">fun0</span>(self, x, y<span class="pl-k">=</span><span class="pl-c1">1</span>) <span class="pl-k">=</span> self<span class="pl-k">.</span>field0 <span class="pl-k">+</span> x <span class="pl-k">+</span> y
    <span class="pl-en">fun1</span>(self, x, y<span class="pl-k">=</span><span class="pl-c1">1</span>; z<span class="pl-k">=</span><span class="pl-c1">2</span>) <span class="pl-k">=</span> self<span class="pl-k">.</span>field0 <span class="pl-k">+</span> x <span class="pl-k">+</span> y <span class="pl-k">+</span> z
<span class="pl-k">end</span>

s <span class="pl-k">=</span> <span class="pl-c1">SimpleCls</span>(<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">2</span>)
<span class="pl-c1">fun0</span>(s, <span class="pl-c1">1</span>)

s1 <span class="pl-k">=</span> <span class="pl-c1">SimpleCls1</span>(<span class="pl-c1">0</span>)
<span class="pl-c1">fun1</span>(s1, <span class="pl-c1">1</span>, <span class="pl-c1">2</span>, z<span class="pl-k">=</span><span class="pl-c1">3</span>)
</pre></div>
<p>Note that instead of <code>s.fun0(1)</code>, we use <code>fun0(s,1)</code>.
It's possible to make the former style works, but with great performance cost</p>
<h3><a id="user-content-constructor" class="anchor" aria-hidden="true" href="#constructor"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Constructor</h3>
<p>You can use native julia constructor.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using OOPMacro

@class ConsNative begin
    field1::Int
    field2::Int
    ConsNative(f1) = begin
        self = new(f1)
        self.field2 = f1
        self
    end
end
cNative = ConsNative(2)
"><pre><span class="pl-k">using</span> OOPMacro

<span class="pl-c1">@class</span> ConsNative <span class="pl-k">begin</span>
    field1<span class="pl-k">::</span><span class="pl-c1">Int</span>
    field2<span class="pl-k">::</span><span class="pl-c1">Int</span>
    <span class="pl-en">ConsNative</span>(f1) <span class="pl-k">=</span> <span class="pl-k">begin</span>
        self <span class="pl-k">=</span> <span class="pl-c1">new</span>(f1)
        self<span class="pl-k">.</span>field2 <span class="pl-k">=</span> f1
        self
    <span class="pl-k">end</span>
<span class="pl-k">end</span>
cNative <span class="pl-k">=</span> <span class="pl-c1">ConsNative</span>(<span class="pl-c1">2</span>)</pre></div>
<p>Alternatively, use python style <code>__init__</code> provide by OOPMacro:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using OOPMacro
@class ConInit3 begin
    field1::Int
    field2::Int
    __init__(self, f1=1; f2=1) = begin
        self.field1 = f1
        if f1&gt;f2
            self.field2 = f1
        else
            self.field2 = f2
        end
    end
end

cInit3b = ConInit3(2,f2=3)
"><pre><span class="pl-k">using</span> OOPMacro
<span class="pl-c1">@class</span> ConInit3 <span class="pl-k">begin</span>
    field1<span class="pl-k">::</span><span class="pl-c1">Int</span>
    field2<span class="pl-k">::</span><span class="pl-c1">Int</span>
    <span class="pl-en">__init__</span>(self, f1<span class="pl-k">=</span><span class="pl-c1">1</span>; f2<span class="pl-k">=</span><span class="pl-c1">1</span>) <span class="pl-k">=</span> <span class="pl-k">begin</span>
        self<span class="pl-k">.</span>field1 <span class="pl-k">=</span> f1
        <span class="pl-k">if</span> f1<span class="pl-k">&gt;</span>f2
            self<span class="pl-k">.</span>field2 <span class="pl-k">=</span> f1
        <span class="pl-k">else</span>
            self<span class="pl-k">.</span>field2 <span class="pl-k">=</span> f2
        <span class="pl-k">end</span>
    <span class="pl-k">end</span>
<span class="pl-k">end</span>

cInit3b <span class="pl-k">=</span> <span class="pl-c1">ConInit3</span>(<span class="pl-c1">2</span>,f2<span class="pl-k">=</span><span class="pl-c1">3</span>)</pre></div>
<h3><a id="user-content-inheritance" class="anchor" aria-hidden="true" href="#inheritance"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Inheritance</h3>
<p>Concrete class inheritance supported! Multiple class inheritance is also supported. Call super just like in python!!</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using OOPMacro
using Base.Test

@class Parent begin
    pfield::Int
    pfun(self) = self.pfield
    pfunAdd(self,x) = self.pfield + x
end

@class Parent2 begin
    pfield2::Int
    pfun(self) = self.pfield2
    pfunAdd(self,x) = self.pfield2 + x
end

@class Child(Parent, Parent2) begin
    cfield::Int
    pfun(self) = self.cfield
    pfunAdd(self,x) = self.cfield + x
    cfunSuper(self) = @super Parent pfun(self)
    cfunAddSuper(self, x) = @super Parent pfunAdd(self, x)
    cfunSuper2(self) = @super Parent2 pfun(self)
    cfunAddSuper2(self, x) = @super Parent2 pfunAdd(self, x)
end

p = Parent(0)
c = Child(0,1,2)
pvalue = p.pfield
pvalue2 = c.pfield2
cvalue = c.cfield
@test pfun(p) == pvalue
@test pfun(c) == cvalue
@test pfunAdd(p,1) == pvalue + 1
@test pfunAdd(c,1) == cvalue + 1
@test_throws(MethodError, pfunAdd(c,&quot;a&quot;))

@test cfunSuper(c) == pvalue
@test cfunAddSuper(c,1) == pvalue+1

@test cfunSuper2(c) == pvalue2
@test cfunAddSuper2(c,1) == pvalue2+1
"><pre><span class="pl-k">using</span> OOPMacro
<span class="pl-k">using</span> Base<span class="pl-k">.</span>Test

<span class="pl-c1">@class</span> Parent <span class="pl-k">begin</span>
    pfield<span class="pl-k">::</span><span class="pl-c1">Int</span>
    <span class="pl-en">pfun</span>(self) <span class="pl-k">=</span> self<span class="pl-k">.</span>pfield
    <span class="pl-en">pfunAdd</span>(self,x) <span class="pl-k">=</span> self<span class="pl-k">.</span>pfield <span class="pl-k">+</span> x
<span class="pl-k">end</span>

<span class="pl-c1">@class</span> Parent2 <span class="pl-k">begin</span>
    pfield2<span class="pl-k">::</span><span class="pl-c1">Int</span>
    <span class="pl-en">pfun</span>(self) <span class="pl-k">=</span> self<span class="pl-k">.</span>pfield2
    <span class="pl-en">pfunAdd</span>(self,x) <span class="pl-k">=</span> self<span class="pl-k">.</span>pfield2 <span class="pl-k">+</span> x
<span class="pl-k">end</span>

<span class="pl-c1">@class</span> <span class="pl-c1">Child</span>(Parent, Parent2) <span class="pl-k">begin</span>
    cfield<span class="pl-k">::</span><span class="pl-c1">Int</span>
    <span class="pl-en">pfun</span>(self) <span class="pl-k">=</span> self<span class="pl-k">.</span>cfield
    <span class="pl-en">pfunAdd</span>(self,x) <span class="pl-k">=</span> self<span class="pl-k">.</span>cfield <span class="pl-k">+</span> x
    <span class="pl-en">cfunSuper</span>(self) <span class="pl-k">=</span> <span class="pl-c1">@super</span> Parent <span class="pl-c1">pfun</span>(self)
    <span class="pl-en">cfunAddSuper</span>(self, x) <span class="pl-k">=</span> <span class="pl-c1">@super</span> Parent <span class="pl-c1">pfunAdd</span>(self, x)
    <span class="pl-en">cfunSuper2</span>(self) <span class="pl-k">=</span> <span class="pl-c1">@super</span> Parent2 <span class="pl-c1">pfun</span>(self)
    <span class="pl-en">cfunAddSuper2</span>(self, x) <span class="pl-k">=</span> <span class="pl-c1">@super</span> Parent2 <span class="pl-c1">pfunAdd</span>(self, x)
<span class="pl-k">end</span>

p <span class="pl-k">=</span> <span class="pl-c1">Parent</span>(<span class="pl-c1">0</span>)
c <span class="pl-k">=</span> <span class="pl-c1">Child</span>(<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">2</span>)
pvalue <span class="pl-k">=</span> p<span class="pl-k">.</span>pfield
pvalue2 <span class="pl-k">=</span> c<span class="pl-k">.</span>pfield2
cvalue <span class="pl-k">=</span> c<span class="pl-k">.</span>cfield
<span class="pl-c1">@test</span> <span class="pl-c1">pfun</span>(p) <span class="pl-k">==</span> pvalue
<span class="pl-c1">@test</span> <span class="pl-c1">pfun</span>(c) <span class="pl-k">==</span> cvalue
<span class="pl-c1">@test</span> <span class="pl-c1">pfunAdd</span>(p,<span class="pl-c1">1</span>) <span class="pl-k">==</span> pvalue <span class="pl-k">+</span> <span class="pl-c1">1</span>
<span class="pl-c1">@test</span> <span class="pl-c1">pfunAdd</span>(c,<span class="pl-c1">1</span>) <span class="pl-k">==</span> cvalue <span class="pl-k">+</span> <span class="pl-c1">1</span>
<span class="pl-c1">@test_throws</span>(MethodError, <span class="pl-c1">pfunAdd</span>(c,<span class="pl-s"><span class="pl-pds">"</span>a<span class="pl-pds">"</span></span>))

<span class="pl-c1">@test</span> <span class="pl-c1">cfunSuper</span>(c) <span class="pl-k">==</span> pvalue
<span class="pl-c1">@test</span> <span class="pl-c1">cfunAddSuper</span>(c,<span class="pl-c1">1</span>) <span class="pl-k">==</span> pvalue<span class="pl-k">+</span><span class="pl-c1">1</span>

<span class="pl-c1">@test</span> <span class="pl-c1">cfunSuper2</span>(c) <span class="pl-k">==</span> pvalue2
<span class="pl-c1">@test</span> <span class="pl-c1">cfunAddSuper2</span>(c,<span class="pl-c1">1</span>) <span class="pl-k">==</span> pvalue2<span class="pl-k">+</span><span class="pl-c1">1</span></pre></div>
<h1><a id="user-content-future-work" class="anchor" aria-hidden="true" href="#future-work"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Future Work</h1>
<ul>
<li>write unit test for each function in clsUtil and OOPMacroImpl</li>
<li>override getproperty() to make more natural usage of
'methods'</li>
<li>maybe don't require manually setting the self arg when declaring methods; rather specify @static if it is not a object method</li>
<li>Type generic parameter ??</li>
</ul>
</article></div>