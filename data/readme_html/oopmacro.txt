<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-oopmacro" class="anchor" aria-hidden="true" href="#oopmacro"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>OOPMacro</h1>
<p>A Julia package for writing Julia in Object Oriented Programming style.</p>
<hr>
<h2><a id="user-content-usage-example" class="anchor" aria-hidden="true" href="#usage-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Usage Example</h2>
<h3><a id="user-content-basic" class="anchor" aria-hidden="true" href="#basic"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Basic</h3>
<p>Use <code>@class</code> to define a <code>class</code>. Defining functions is just as the same as in plain julia. Generic function/keyword arguments are all supported.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> OOPMacro

<span class="pl-c1">@class</span> SimpleCls <span class="pl-k">begin</span>
    field0
    field1<span class="pl-k">::</span><span class="pl-c1">Int</span>
    field2<span class="pl-k">::</span><span class="pl-c1">Int</span>

    <span class="pl-c"><span class="pl-c">#=</span> Supports different style of function declaration <span class="pl-c">=#</span></span>
    <span class="pl-en">fun0</span>(self<span class="pl-k">::</span><span class="pl-c1">SimpleCls</span>, x) <span class="pl-k">=</span> self<span class="pl-k">.</span>field0 <span class="pl-k">+</span> x
    <span class="pl-en">fun1</span>(self, x, y) <span class="pl-k">=</span> <span class="pl-k">begin</span>
        self<span class="pl-k">.</span>field1 <span class="pl-k">+</span> x
    <span class="pl-k">end</span>
    <span class="pl-k">function</span> <span class="pl-en">fun2</span>(self, x)
        self<span class="pl-k">.</span>field2 <span class="pl-k">+</span> x
    <span class="pl-k">end</span>

    <span class="pl-c"><span class="pl-c">#=</span> Generic function is also supported <span class="pl-c">=#</span></span>
    <span class="pl-en">fun0</span><span class="pl-c1">{T&lt;:Int}</span>(self<span class="pl-k">::</span><span class="pl-c1">SimpleCls</span>, x<span class="pl-k">::</span><span class="pl-c1">T</span>) <span class="pl-k">=</span> self<span class="pl-k">.</span>field0 <span class="pl-k">+</span> x
    <span class="pl-en">fun1</span><span class="pl-c1">{T&lt;:Int}</span>(self, x<span class="pl-k">::</span><span class="pl-c1">T</span>, y<span class="pl-k">::</span><span class="pl-c1">T</span>) <span class="pl-k">=</span> <span class="pl-k">begin</span>
        self<span class="pl-k">.</span>field1 <span class="pl-k">+</span> x
    <span class="pl-k">end</span>
    <span class="pl-k">function</span> <span class="pl-en">fun2</span><span class="pl-c1">{T&lt;:Int}</span>(self, x<span class="pl-k">::</span><span class="pl-c1">T</span>)
        self<span class="pl-k">.</span>field2 <span class="pl-k">+</span> x
    <span class="pl-k">end</span>
<span class="pl-k">end</span>

<span class="pl-c1">@class</span> SimpleCls1 <span class="pl-k">begin</span>
    field0<span class="pl-k">::</span><span class="pl-c1">Int</span>
    <span class="pl-en">fun0</span>(self, x, y<span class="pl-k">=</span><span class="pl-c1">1</span>) <span class="pl-k">=</span> self<span class="pl-k">.</span>field0 <span class="pl-k">+</span> x <span class="pl-k">+</span> y
    <span class="pl-en">fun1</span>(self, x, y<span class="pl-k">=</span><span class="pl-c1">1</span>; z<span class="pl-k">=</span><span class="pl-c1">2</span>) <span class="pl-k">=</span> self<span class="pl-k">.</span>field0 <span class="pl-k">+</span> x <span class="pl-k">+</span> y <span class="pl-k">+</span> z
<span class="pl-k">end</span>

s <span class="pl-k">=</span> <span class="pl-c1">SimpleCls</span>(<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">2</span>)
<span class="pl-c1">fun0</span>(s, <span class="pl-c1">1</span>)

s1 <span class="pl-k">=</span> <span class="pl-c1">SimpleCls1</span>(<span class="pl-c1">0</span>)
<span class="pl-c1">fun1</span>(s1, <span class="pl-c1">1</span>, <span class="pl-c1">2</span>, z<span class="pl-k">=</span><span class="pl-c1">3</span>)
</pre></div>
<p>Note that instead of <code>s.fun0(1)</code>, we use <code>fun0(s,1)</code>.
It's possible to make the former style works, but with great performance cost</p>
<h3><a id="user-content-constructor" class="anchor" aria-hidden="true" href="#constructor"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Constructor</h3>
<p>You can use native julia constructor.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> OOPMacro

<span class="pl-c1">@class</span> ConsNative <span class="pl-k">begin</span>
    field1<span class="pl-k">::</span><span class="pl-c1">Int</span>
    field2<span class="pl-k">::</span><span class="pl-c1">Int</span>
    <span class="pl-en">ConsNative</span>(f1) <span class="pl-k">=</span> <span class="pl-k">begin</span>
        self <span class="pl-k">=</span> <span class="pl-c1">new</span>(f1)
        self<span class="pl-k">.</span>field2 <span class="pl-k">=</span> f1
        self
    <span class="pl-k">end</span>
<span class="pl-k">end</span>
cNative <span class="pl-k">=</span> <span class="pl-c1">ConsNative</span>(<span class="pl-c1">2</span>)</pre></div>
<p>Alternatively, use python style <code>__init__</code> provide by OOPMacro:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> OOPMacro
<span class="pl-c1">@class</span> ConInit3 <span class="pl-k">begin</span>
    field1<span class="pl-k">::</span><span class="pl-c1">Int</span>
    field2<span class="pl-k">::</span><span class="pl-c1">Int</span>
    <span class="pl-en">__init__</span>(self, f1<span class="pl-k">=</span><span class="pl-c1">1</span>; f2<span class="pl-k">=</span><span class="pl-c1">1</span>) <span class="pl-k">=</span> <span class="pl-k">begin</span>
        self<span class="pl-k">.</span>field1 <span class="pl-k">=</span> f1
        <span class="pl-k">if</span> f1<span class="pl-k">&gt;</span>f2
            self<span class="pl-k">.</span>field2 <span class="pl-k">=</span> f1
        <span class="pl-k">else</span>
            self<span class="pl-k">.</span>field2 <span class="pl-k">=</span> f2
        <span class="pl-k">end</span>
    <span class="pl-k">end</span>
<span class="pl-k">end</span>

cInit3b <span class="pl-k">=</span> <span class="pl-c1">ConInit3</span>(<span class="pl-c1">2</span>,f2<span class="pl-k">=</span><span class="pl-c1">3</span>)</pre></div>
<h3><a id="user-content-inheritance" class="anchor" aria-hidden="true" href="#inheritance"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Inheritance</h3>
<p>Concrete class inheritance supported! Multiple class inheritance is also supported. Call super just like in python!!</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> OOPMacro
<span class="pl-k">using</span> Base<span class="pl-k">.</span>Test

<span class="pl-c1">@class</span> Parent <span class="pl-k">begin</span>
    pfield<span class="pl-k">::</span><span class="pl-c1">Int</span>
    <span class="pl-en">pfun</span>(self) <span class="pl-k">=</span> self<span class="pl-k">.</span>pfield
    <span class="pl-en">pfunAdd</span>(self,x) <span class="pl-k">=</span> self<span class="pl-k">.</span>pfield <span class="pl-k">+</span> x
<span class="pl-k">end</span>

<span class="pl-c1">@class</span> Parent2 <span class="pl-k">begin</span>
    pfield2<span class="pl-k">::</span><span class="pl-c1">Int</span>
    <span class="pl-en">pfun</span>(self) <span class="pl-k">=</span> self<span class="pl-k">.</span>pfield2
    <span class="pl-en">pfunAdd</span>(self,x) <span class="pl-k">=</span> self<span class="pl-k">.</span>pfield2 <span class="pl-k">+</span> x
<span class="pl-k">end</span>

<span class="pl-c1">@class</span> <span class="pl-c1">Child</span>(Parent, Parent2) <span class="pl-k">begin</span>
    cfield<span class="pl-k">::</span><span class="pl-c1">Int</span>
    <span class="pl-en">pfun</span>(self) <span class="pl-k">=</span> self<span class="pl-k">.</span>cfield
    <span class="pl-en">pfunAdd</span>(self,x) <span class="pl-k">=</span> self<span class="pl-k">.</span>cfield <span class="pl-k">+</span> x
    <span class="pl-en">cfunSuper</span>(self) <span class="pl-k">=</span> <span class="pl-c1">@super</span> Parent <span class="pl-c1">pfun</span>(self)
    <span class="pl-en">cfunAddSuper</span>(self, x) <span class="pl-k">=</span> <span class="pl-c1">@super</span> Parent <span class="pl-c1">pfunAdd</span>(self, x)
    <span class="pl-en">cfunSuper2</span>(self) <span class="pl-k">=</span> <span class="pl-c1">@super</span> Parent2 <span class="pl-c1">pfun</span>(self)
    <span class="pl-en">cfunAddSuper2</span>(self, x) <span class="pl-k">=</span> <span class="pl-c1">@super</span> Parent2 <span class="pl-c1">pfunAdd</span>(self, x)
<span class="pl-k">end</span>

p <span class="pl-k">=</span> <span class="pl-c1">Parent</span>(<span class="pl-c1">0</span>)
c <span class="pl-k">=</span> <span class="pl-c1">Child</span>(<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">2</span>)
pvalue <span class="pl-k">=</span> p<span class="pl-k">.</span>pfield
pvalue2 <span class="pl-k">=</span> c<span class="pl-k">.</span>pfield2
cvalue <span class="pl-k">=</span> c<span class="pl-k">.</span>cfield
<span class="pl-c1">@test</span> <span class="pl-c1">pfun</span>(p) <span class="pl-k">==</span> pvalue
<span class="pl-c1">@test</span> <span class="pl-c1">pfun</span>(c) <span class="pl-k">==</span> cvalue
<span class="pl-c1">@test</span> <span class="pl-c1">pfunAdd</span>(p,<span class="pl-c1">1</span>) <span class="pl-k">==</span> pvalue <span class="pl-k">+</span> <span class="pl-c1">1</span>
<span class="pl-c1">@test</span> <span class="pl-c1">pfunAdd</span>(c,<span class="pl-c1">1</span>) <span class="pl-k">==</span> cvalue <span class="pl-k">+</span> <span class="pl-c1">1</span>
<span class="pl-c1">@test_throws</span>(MethodError, <span class="pl-c1">pfunAdd</span>(c,<span class="pl-s"><span class="pl-pds">"</span>a<span class="pl-pds">"</span></span>))

<span class="pl-c1">@test</span> <span class="pl-c1">cfunSuper</span>(c) <span class="pl-k">==</span> pvalue
<span class="pl-c1">@test</span> <span class="pl-c1">cfunAddSuper</span>(c,<span class="pl-c1">1</span>) <span class="pl-k">==</span> pvalue<span class="pl-k">+</span><span class="pl-c1">1</span>

<span class="pl-c1">@test</span> <span class="pl-c1">cfunSuper2</span>(c) <span class="pl-k">==</span> pvalue2
<span class="pl-c1">@test</span> <span class="pl-c1">cfunAddSuper2</span>(c,<span class="pl-c1">1</span>) <span class="pl-k">==</span> pvalue2<span class="pl-k">+</span><span class="pl-c1">1</span></pre></div>
<h1><a id="user-content-future-work" class="anchor" aria-hidden="true" href="#future-work"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Future Work</h1>
<ul>
<li>write unit test for each function in clsUtil and OOPMacroImpl</li>
<li>override getproperty() to make more natural usage of
'methods'</li>
<li>maybe don't require manually setting the self arg when declaring methods; rathre specify @static if it is not a object method</li>
<li>Type generic parameter ??</li>
</ul>
</article></div>