<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-pencilarrays" class="anchor" aria-hidden="true" href="#pencilarrays"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>PencilArrays</h1>
<p><a href="https://jipolanco.github.io/PencilArrays.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://jipolanco.github.io/PencilArrays.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a></p>
<p><a href="https://github.com/jipolanco/PencilArrays.jl/actions"><img src="https://github.com/jipolanco/PencilArrays.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/jipolanco/PencilArrays.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/774d614271432c339bae5b78c05aa597d35dc3de88fd669359935853dc86e241/68747470733a2f2f636f6465636f762e696f2f67682f6a69706f6c616e636f2f50656e63696c4172726179732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/jipolanco/PencilArrays.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p>Distributed Julia arrays using the MPI protocol.</p>
<p>This package provides a convenient framework for working with multidimensional
Julia arrays distributed among MPI processes.</p>
<p>The name of this package originates from the decomposition of 3D domains along
two out of three dimensions, sometimes called <em>pencil</em> decomposition.
This is illustrated by the figure below, which represents a distributed 3D array.
Each coloured block is managed by a different MPI process.</p>
<p align="center">
  <br>
  <a target="_blank" rel="noopener noreferrer" href="docs/src/img/pencils.svg"><img width="85%" alt="Pencil decomposition of 3D domains" src="docs/src/img/pencils.svg" style="max-width:100%;"></a>
</p>
<p>More generally, PencilArrays can decompose arrays of arbitrary dimension <code>N</code>,
along an arbitrary number of subdimensions <code>M &lt; N</code>.
(In the image above, <code>N = 3</code> and <code>M = 2</code>.)</p>
<p>PencilArrays is the basis for the
<a href="https://github.com/jipolanco/PencilFFTs.jl">PencilFFTs</a> package, which
provides efficient and highly scalable distributed FFTs.</p>
<h2><a id="user-content-features" class="anchor" aria-hidden="true" href="#features"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Features</h2>
<ul>
<li>
<p>distribution of <code>N</code>-dimensional arrays among MPI processes;</p>
</li>
<li>
<p>decomposition of arrays along an arbitrary subset of dimensions;</p>
</li>
<li>
<p>transpositions between different decomposition configurations, using
point-to-point and collective MPI communications;</p>
</li>
<li>
<p>zero-cost, convenient dimension permutations using <a href="https://github.com/jipolanco/StaticPermutations.jl">StaticPermutations</a>;</p>
</li>
<li>
<p>convenient parallel I/O using either MPI-IO or the <a href="https://portal.hdfgroup.org/display/HDF5/Parallel+HDF5" rel="nofollow">Parallel
HDF5</a> libraries;</p>
</li>
<li>
<p>distributed FFTs and related transforms via the
<a href="https://github.com/jipolanco/PencilFFTs.jl">PencilFFTs</a> package.</p>
</li>
</ul>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>PencilArrays can be installed using the Julia package manager:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt; ] add PencilArrays
"><pre><code>julia&gt; ] add PencilArrays
</code></pre></div>
<h2><a id="user-content-quick-start" class="anchor" aria-hidden="true" href="#quick-start"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Quick start</h2>
<p>The following example assumes that the code is executed on 12 MPI processes.
The processes are distributed on a 3×4 grid, as in the figure above.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using MPI
using PencilArrays
using LinearAlgebra: transpose!

MPI.Init()
comm = MPI.COMM_WORLD       # we assume MPI.Comm_size(comm) == 12
rank = MPI.Comm_rank(comm)  # rank of local process, in 0:11

# Define MPI Cartesian topology: distribute processes on a 3×4 grid.
topology = MPITopology(comm, (3, 4))

# Let's decompose 3D arrays along dimensions (2, 3).
# This corresponds to the &quot;x-pencil&quot; configuration in the figure.
# This configuration is described by a Pencil object.
dims_global = (42, 31, 29)  # global dimensions of the array
decomp_dims = (2, 3)
pen_x = Pencil(topology, dims_global, decomp_dims)

# We can now allocate distributed arrays in the x-pencil configuration.
Ax = PencilArray{Float64}(undef, pen_x)
fill!(Ax, rank * π)  # each process locally fills its part of the array
parent(Ax)           # parent array holding the local data (here, an Array{Float64,3})
size(Ax)             # size of local part
size_global(Ax)      # total size of the array = (42, 31, 29)

# Create another pencil configuration, decomposing along dimensions (1, 3).
# We could use the same constructor as before, but it's recommended to reuse the
# previous Pencil instead.
pen_y = Pencil(pen_x, decomp_dims=(1, 3))

# Now transpose from the x-pencil to the y-pencil configuration, redistributing
# the data initially in Ax.
Ay = PencilArray{Float64}(undef, pen_y)
transpose!(Ay, Ax)
"><pre><span class="pl-k">using</span> MPI
<span class="pl-k">using</span> PencilArrays
<span class="pl-k">using</span> LinearAlgebra<span class="pl-k">:</span> transpose!

MPI<span class="pl-k">.</span><span class="pl-c1">Init</span>()
comm <span class="pl-k">=</span> MPI<span class="pl-k">.</span>COMM_WORLD       <span class="pl-c"><span class="pl-c">#</span> we assume MPI.Comm_size(comm) == 12</span>
rank <span class="pl-k">=</span> MPI<span class="pl-k">.</span><span class="pl-c1">Comm_rank</span>(comm)  <span class="pl-c"><span class="pl-c">#</span> rank of local process, in 0:11</span>

<span class="pl-c"><span class="pl-c">#</span> Define MPI Cartesian topology: distribute processes on a 3×4 grid.</span>
topology <span class="pl-k">=</span> <span class="pl-c1">MPITopology</span>(comm, (<span class="pl-c1">3</span>, <span class="pl-c1">4</span>))

<span class="pl-c"><span class="pl-c">#</span> Let's decompose 3D arrays along dimensions (2, 3).</span>
<span class="pl-c"><span class="pl-c">#</span> This corresponds to the "x-pencil" configuration in the figure.</span>
<span class="pl-c"><span class="pl-c">#</span> This configuration is described by a Pencil object.</span>
dims_global <span class="pl-k">=</span> (<span class="pl-c1">42</span>, <span class="pl-c1">31</span>, <span class="pl-c1">29</span>)  <span class="pl-c"><span class="pl-c">#</span> global dimensions of the array</span>
decomp_dims <span class="pl-k">=</span> (<span class="pl-c1">2</span>, <span class="pl-c1">3</span>)
pen_x <span class="pl-k">=</span> <span class="pl-c1">Pencil</span>(topology, dims_global, decomp_dims)

<span class="pl-c"><span class="pl-c">#</span> We can now allocate distributed arrays in the x-pencil configuration.</span>
Ax <span class="pl-k">=</span> <span class="pl-c1">PencilArray</span><span class="pl-c1">{Float64}</span>(undef, pen_x)
<span class="pl-c1">fill!</span>(Ax, rank <span class="pl-k">*</span> π)  <span class="pl-c"><span class="pl-c">#</span> each process locally fills its part of the array</span>
<span class="pl-c1">parent</span>(Ax)           <span class="pl-c"><span class="pl-c">#</span> parent array holding the local data (here, an Array{Float64,3})</span>
<span class="pl-c1">size</span>(Ax)             <span class="pl-c"><span class="pl-c">#</span> size of local part</span>
<span class="pl-c1">size_global</span>(Ax)      <span class="pl-c"><span class="pl-c">#</span> total size of the array = (42, 31, 29)</span>

<span class="pl-c"><span class="pl-c">#</span> Create another pencil configuration, decomposing along dimensions (1, 3).</span>
<span class="pl-c"><span class="pl-c">#</span> We could use the same constructor as before, but it's recommended to reuse the</span>
<span class="pl-c"><span class="pl-c">#</span> previous Pencil instead.</span>
pen_y <span class="pl-k">=</span> <span class="pl-c1">Pencil</span>(pen_x, decomp_dims<span class="pl-k">=</span>(<span class="pl-c1">1</span>, <span class="pl-c1">3</span>))

<span class="pl-c"><span class="pl-c">#</span> Now transpose from the x-pencil to the y-pencil configuration, redistributing</span>
<span class="pl-c"><span class="pl-c">#</span> the data initially in Ax.</span>
Ay <span class="pl-k">=</span> <span class="pl-c1">PencilArray</span><span class="pl-c1">{Float64}</span>(undef, pen_y)
<span class="pl-c1">transpose!</span>(Ay, Ax)</pre></div>
</article></div>