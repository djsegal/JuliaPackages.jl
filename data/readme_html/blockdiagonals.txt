<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-blockdiagonalsjl" class="anchor" aria-hidden="true" href="#blockdiagonalsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>BlockDiagonals.jl</h1>
<p dir="auto"><a href="https://invenia.github.io/BlockDiagonals.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://invenia.github.io/BlockDiagonals.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/Invenia/BlockDiagonals.jl/actions?query=workflow%3ACI"><img src="https://github.com/invenia/BlockDiagonals.jl/workflows/CI/badge.svg" alt="CI" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/invenia/BlockDiagonals.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/9ba803050e9ab3a0acfcabb2363d21a4d115b3a608a3187ffdd0f7c6b9e3053a/68747470733a2f2f636f6465636f762e696f2f67682f696e76656e69612f426c6f636b446961676f6e616c732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/invenia/BlockDiagonals.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a>
<a href="https://github.com/invenia/BlueStyle"><img src="https://camo.githubusercontent.com/c18fbaa52d94d16b90b19701fc90d289b8a5bb920c74c79bab200b14e75420a4/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c75652d3434393564312e737667" alt="code style blue" data-canonical-src="https://img.shields.io/badge/code%20style-blue-4495d1.svg" style="max-width: 100%;"></a></p>
<p dir="auto">Functionality for working efficiently with <a href="https://en.wikipedia.org/wiki/Block_matrix#Block_diagonal_matrices" rel="nofollow">block diagonal matrices</a>.
<em>Note that non-square blocks are allowed</em>, similarly to <a href="https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.block_diag.html" rel="nofollow"><code>scipy.block_diag</code></a>, but in contrast to the mathematical definition above.</p>
<p dir="auto">Construct a <code>BlockDiagonal</code> matrix by passing in only the non-zero blocks on the diagonal, and use it as a regular matrix</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using BlockDiagonals

julia&gt; bm = BlockDiagonal([rand(2, 3), ones(3, 2)])
5×5 BlockDiagonal{Float64, Matrix{Float64}}:
 0.289276  0.994487  0.287658  0.0  0.0
 0.659821  0.334724  0.780973  0.0  0.0
 0.0       0.0       0.0       1.0  1.0
 0.0       0.0       0.0       1.0  1.0
 0.0       0.0       0.0       1.0  1.0

julia&gt; v = ones(5);

julia&gt; bm * v
5-element Vector{Float64}:
 1.5714204086879524
 1.7755185907265039
 2.0
 2.0
 2.0

julia&gt; svd(bm)
SVD{Float64, Float64, Matrix{Float64}}
U factor:
5×4 Matrix{Float64}:
  0.0      -0.70666   -0.707553   0.0
  0.0      -0.707553   0.70666    0.0
 -0.57735   0.0        0.0       -0.57735
 -0.57735   0.0        0.0        0.788675
 -0.57735   0.0        0.0       -0.211325
singular values:
4-element Vector{Float64}:
 2.4494897427831783
 1.3801377610748038
 0.6387290946600256
 0.0
Vt factor:
4×5 Matrix{Float64}:
  0.0        0.0        0.0       -0.707107  -0.707107
 -0.486385  -0.680801  -0.547667   0.0        0.0
  0.409549  -0.731322   0.545379   0.0        0.0
  0.0        0.0        0.0       -0.707107   0.707107"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> BlockDiagonals

julia<span class="pl-k">&gt;</span> bm <span class="pl-k">=</span> <span class="pl-c1">BlockDiagonal</span>([<span class="pl-c1">rand</span>(<span class="pl-c1">2</span>, <span class="pl-c1">3</span>), <span class="pl-c1">ones</span>(<span class="pl-c1">3</span>, <span class="pl-c1">2</span>)])
<span class="pl-c1">5</span><span class="pl-k">×</span><span class="pl-c1">5</span> BlockDiagonal{Float64, Matrix{Float64}}<span class="pl-k">:</span>
 <span class="pl-c1">0.289276</span>  <span class="pl-c1">0.994487</span>  <span class="pl-c1">0.287658</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>
 <span class="pl-c1">0.659821</span>  <span class="pl-c1">0.334724</span>  <span class="pl-c1">0.780973</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>
 <span class="pl-c1">0.0</span>       <span class="pl-c1">0.0</span>       <span class="pl-c1">0.0</span>       <span class="pl-c1">1.0</span>  <span class="pl-c1">1.0</span>
 <span class="pl-c1">0.0</span>       <span class="pl-c1">0.0</span>       <span class="pl-c1">0.0</span>       <span class="pl-c1">1.0</span>  <span class="pl-c1">1.0</span>
 <span class="pl-c1">0.0</span>       <span class="pl-c1">0.0</span>       <span class="pl-c1">0.0</span>       <span class="pl-c1">1.0</span>  <span class="pl-c1">1.0</span>

julia<span class="pl-k">&gt;</span> v <span class="pl-k">=</span> <span class="pl-c1">ones</span>(<span class="pl-c1">5</span>);

julia<span class="pl-k">&gt;</span> bm <span class="pl-k">*</span> v
<span class="pl-c1">5</span><span class="pl-k">-</span>element Vector{Float64}<span class="pl-k">:</span>
 <span class="pl-c1">1.5714204086879524</span>
 <span class="pl-c1">1.7755185907265039</span>
 <span class="pl-c1">2.0</span>
 <span class="pl-c1">2.0</span>
 <span class="pl-c1">2.0</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">svd</span>(bm)
SVD{Float64, Float64, Matrix{Float64}}
U factor<span class="pl-k">:</span>
<span class="pl-c1">5</span><span class="pl-k">×</span><span class="pl-c1">4</span> Matrix{Float64}<span class="pl-k">:</span>
  <span class="pl-c1">0.0</span>      <span class="pl-k">-</span><span class="pl-c1">0.70666</span>   <span class="pl-k">-</span><span class="pl-c1">0.707553</span>   <span class="pl-c1">0.0</span>
  <span class="pl-c1">0.0</span>      <span class="pl-k">-</span><span class="pl-c1">0.707553</span>   <span class="pl-c1">0.70666</span>    <span class="pl-c1">0.0</span>
 <span class="pl-k">-</span><span class="pl-c1">0.57735</span>   <span class="pl-c1">0.0</span>        <span class="pl-c1">0.0</span>       <span class="pl-k">-</span><span class="pl-c1">0.57735</span>
 <span class="pl-k">-</span><span class="pl-c1">0.57735</span>   <span class="pl-c1">0.0</span>        <span class="pl-c1">0.0</span>        <span class="pl-c1">0.788675</span>
 <span class="pl-k">-</span><span class="pl-c1">0.57735</span>   <span class="pl-c1">0.0</span>        <span class="pl-c1">0.0</span>       <span class="pl-k">-</span><span class="pl-c1">0.211325</span>
singular values<span class="pl-k">:</span>
<span class="pl-c1">4</span><span class="pl-k">-</span>element Vector{Float64}<span class="pl-k">:</span>
 <span class="pl-c1">2.4494897427831783</span>
 <span class="pl-c1">1.3801377610748038</span>
 <span class="pl-c1">0.6387290946600256</span>
 <span class="pl-c1">0.0</span>
Vt factor<span class="pl-k">:</span>
<span class="pl-c1">4</span><span class="pl-k">×</span><span class="pl-c1">5</span> Matrix{Float64}<span class="pl-k">:</span>
  <span class="pl-c1">0.0</span>        <span class="pl-c1">0.0</span>        <span class="pl-c1">0.0</span>       <span class="pl-k">-</span><span class="pl-c1">0.707107</span>  <span class="pl-k">-</span><span class="pl-c1">0.707107</span>
 <span class="pl-k">-</span><span class="pl-c1">0.486385</span>  <span class="pl-k">-</span><span class="pl-c1">0.680801</span>  <span class="pl-k">-</span><span class="pl-c1">0.547667</span>   <span class="pl-c1">0.0</span>        <span class="pl-c1">0.0</span>
  <span class="pl-c1">0.409549</span>  <span class="pl-k">-</span><span class="pl-c1">0.731322</span>   <span class="pl-c1">0.545379</span>   <span class="pl-c1">0.0</span>        <span class="pl-c1">0.0</span>
  <span class="pl-c1">0.0</span>        <span class="pl-c1">0.0</span>        <span class="pl-c1">0.0</span>       <span class="pl-k">-</span><span class="pl-c1">0.707107</span>   <span class="pl-c1">0.707107</span></pre></div>
<p dir="auto">Additional functionality includes</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; nblocks(bm)
2

julia&gt; blocks(bm)
2-element Vector{Matrix{Float64}}:
 [0.2892758623451861 0.9944869494674535 0.2876575968753128; 0.6598212430288488 0.33472423873340906 0.780973108964246]
 [1.0 1.0; 1.0 1.0; 1.0 1.0]

julia&gt; blocksizes(bm)
2-element Vector{Tuple{Int64, Int64}}:
 (2, 3)
 (3, 2)

julia&gt; blocksize(bm, 1)
(2, 3)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">nblocks</span>(bm)
<span class="pl-c1">2</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">blocks</span>(bm)
<span class="pl-c1">2</span><span class="pl-k">-</span>element Vector{Matrix{Float64}}<span class="pl-k">:</span>
 [<span class="pl-c1">0.2892758623451861</span> <span class="pl-c1">0.9944869494674535</span> <span class="pl-c1">0.2876575968753128</span>; <span class="pl-c1">0.6598212430288488</span> <span class="pl-c1">0.33472423873340906</span> <span class="pl-c1">0.780973108964246</span>]
 [<span class="pl-c1">1.0</span> <span class="pl-c1">1.0</span>; <span class="pl-c1">1.0</span> <span class="pl-c1">1.0</span>; <span class="pl-c1">1.0</span> <span class="pl-c1">1.0</span>]

julia<span class="pl-k">&gt;</span> <span class="pl-c1">blocksizes</span>(bm)
<span class="pl-c1">2</span><span class="pl-k">-</span>element Vector{Tuple{Int64, Int64}}<span class="pl-k">:</span>
 (<span class="pl-c1">2</span>, <span class="pl-c1">3</span>)
 (<span class="pl-c1">3</span>, <span class="pl-c1">2</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">blocksize</span>(bm, <span class="pl-c1">1</span>)
(<span class="pl-c1">2</span>, <span class="pl-c1">3</span>)</pre></div>
</article></div>