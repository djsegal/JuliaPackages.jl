<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-prettydoc" class="anchor" aria-hidden="true" href="#prettydoc"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>PrettyDoc</h1>

<p dir="auto"><a href="https://thautwarm.github.io/PrettyDoc.jl/dev/" rel="nofollow"><img src="https://camo.githubusercontent.com/9b3e5e92b12de8cba13c1c219aba7e57a68cf50383a62664ec19e7ee4a7bbf31/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d415049732d626c75652e737667" alt="API" data-canonical-src="https://img.shields.io/badge/docs-APIs-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/thautwarm/PrettyDoc.jl/actions/workflows/CI.yml?query=branch%3Amain"><img src="https://github.com/thautwarm/PrettyDoc.jl/actions/workflows/CI.yml/badge.svg?branch=main" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/thautwarm/PrettyDoc.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/b730da12b26271e14032f6bc5d2caf876c42a3c106d2c64257082b013c7fddfe/68747470733a2f2f636f6465636f762e696f2f67682f74686175747761726d2f507265747479446f632e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/thautwarm/PrettyDoc.jl/branch/main/graph/badge.svg" style="max-width: 100%;"></a></p>
<blockquote>
<p dir="auto">The idea is to combine a Document out of many small components, then using a layouter to convert it to an easily renderable SimpleDocStream</p>
</blockquote>
<p dir="auto">This is an easy-to-use and lightweight text layout combinator library.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="import PrettyDoc as PD
const squote = &quot;\&quot;&quot;
struct Block
    name::String
    contents::Union{String, Vector{Block}}
end

function render_block(self::Block)
    if self.contents isa Vector
        return PD.vsep(
            PD.seg(self.name) + PD.seg(&quot;{&quot;),
            PD.vsep(map(render_block, self.contents)) &gt;&gt; 4,
            PD.seg(&quot;}&quot;)
        )
    end
    return PD.seg(self.name) + PD.seg(squote * escape_string(self.contents) * squote)
end

block = Block(
    &quot;A&quot;,
    [
        Block(&quot;C&quot;, &quot;ccc&quot;),
        Block(&quot;B&quot;,
            [
                Block(&quot;C&quot;, &quot;ccc&quot;),
            ]
        ),
        Block(&quot;C&quot;, &quot;ccc&quot;),
        Block(&quot;C&quot;, &quot;ccc&quot;),
    ]
)

string(render_block(block))"><pre><span class="pl-k">import</span> PrettyDoc <span class="pl-k">as</span> PD
<span class="pl-k">const</span> squote <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span><span class="pl-cce">\"</span><span class="pl-pds">"</span></span>
<span class="pl-k">struct</span> Block
    name<span class="pl-k">::</span><span class="pl-c1">String</span>
    contents<span class="pl-k">::</span><span class="pl-c1">Union{String, Vector{Block}}</span>
<span class="pl-k">end</span>

<span class="pl-k">function</span> <span class="pl-en">render_block</span>(self<span class="pl-k">::</span><span class="pl-c1">Block</span>)
    <span class="pl-k">if</span> self<span class="pl-k">.</span>contents <span class="pl-k">isa</span> Vector
        <span class="pl-k">return</span> PD<span class="pl-k">.</span><span class="pl-c1">vsep</span>(
            PD<span class="pl-k">.</span><span class="pl-c1">seg</span>(self<span class="pl-k">.</span>name) <span class="pl-k">+</span> PD<span class="pl-k">.</span><span class="pl-c1">seg</span>(<span class="pl-s"><span class="pl-pds">"</span>{<span class="pl-pds">"</span></span>),
            PD<span class="pl-k">.</span><span class="pl-c1">vsep</span>(<span class="pl-c1">map</span>(render_block, self<span class="pl-k">.</span>contents)) <span class="pl-k">&gt;&gt;</span> <span class="pl-c1">4</span>,
            PD<span class="pl-k">.</span><span class="pl-c1">seg</span>(<span class="pl-s"><span class="pl-pds">"</span>}<span class="pl-pds">"</span></span>)
        )
    <span class="pl-k">end</span>
    <span class="pl-k">return</span> PD<span class="pl-k">.</span><span class="pl-c1">seg</span>(self<span class="pl-k">.</span>name) <span class="pl-k">+</span> PD<span class="pl-k">.</span><span class="pl-c1">seg</span>(squote <span class="pl-k">*</span> <span class="pl-c1">escape_string</span>(self<span class="pl-k">.</span>contents) <span class="pl-k">*</span> squote)
<span class="pl-k">end</span>

block <span class="pl-k">=</span> <span class="pl-c1">Block</span>(
    <span class="pl-s"><span class="pl-pds">"</span>A<span class="pl-pds">"</span></span>,
    [
        <span class="pl-c1">Block</span>(<span class="pl-s"><span class="pl-pds">"</span>C<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>ccc<span class="pl-pds">"</span></span>),
        <span class="pl-c1">Block</span>(<span class="pl-s"><span class="pl-pds">"</span>B<span class="pl-pds">"</span></span>,
            [
                <span class="pl-c1">Block</span>(<span class="pl-s"><span class="pl-pds">"</span>C<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>ccc<span class="pl-pds">"</span></span>),
            ]
        ),
        <span class="pl-c1">Block</span>(<span class="pl-s"><span class="pl-pds">"</span>C<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>ccc<span class="pl-pds">"</span></span>),
        <span class="pl-c1">Block</span>(<span class="pl-s"><span class="pl-pds">"</span>C<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>ccc<span class="pl-pds">"</span></span>),
    ]
)

<span class="pl-c1">string</span>(<span class="pl-c1">render_block</span>(block))</pre></div>
<p dir="auto">=&gt;</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="A {
    C &quot;ccc&quot;
    B {
        C &quot;ccc&quot;
    }
    C &quot;ccc&quot;
    C &quot;ccc&quot;
}"><pre class="notranslate"><code>A {
    C "ccc"
    B {
        C "ccc"
    }
    C "ccc"
    C "ccc"
}
</code></pre></div>
<p dir="auto">See <a href="https://thautwarm.github.io/PrettyDoc.jl/dev/" rel="nofollow">the API documentation</a> for the available combinator functions.</p>
</article></div>