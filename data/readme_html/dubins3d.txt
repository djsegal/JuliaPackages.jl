<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-3d-dubins-paths" class="anchor" aria-hidden="true" href="#3d-dubins-paths"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>3D Dubins Paths</h1>
<p><a href="https://travis-ci.com/comrob/Dubins3D.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/3bf3521c599965d1962378afdc6051ae86c35022621ee52e97d3a46e8fa7a3b1/68747470733a2f2f7472617669732d63692e636f6d2f636f6d726f622f447562696e7333442e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/comrob/Dubins3D.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p>This pakage provides 3D Dubins paths between two prescribed configuration. It provides smooth trajectories for fixed-wing aircraft while both curvature and pitch angle constraints are met.</p>
<p>Full description is provided in the following paper.</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="@INPROCEEDINGS{vana20minimal, 
    TITLE        = {{Minimal 3D Dubins Path with Bounded Curvature and Pitch Angle}}, 
    AUTHOR       = {V{\'a}{\v{n}}a, Petr and Neto, Armando Alves and Faigl, Jan and Macharet, Douglas G}, 
    BOOKTITLE    = {2020 IEEE International Conference on Robotics and Automation (ICRA)}, 
    PAGES        = {8497--8503},
    YEAR         = {2020}, 
    ORGANIZATION = {IEEE}
}
"><pre><code>@INPROCEEDINGS{vana20minimal, 
    TITLE        = {{Minimal 3D Dubins Path with Bounded Curvature and Pitch Angle}}, 
    AUTHOR       = {V{\'a}{\v{n}}a, Petr and Neto, Armando Alves and Faigl, Jan and Macharet, Douglas G}, 
    BOOKTITLE    = {2020 IEEE International Conference on Robotics and Automation (ICRA)}, 
    PAGES        = {8497--8503},
    YEAR         = {2020}, 
    ORGANIZATION = {IEEE}
}
</code></pre></div>
<h2><a id="user-content-3d-dubins-path-example" class="anchor" aria-hidden="true" href="#3d-dubins-path-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>3D Dubins path example</h2>
<p><a target="_blank" rel="noopener noreferrer" href="https://raw.githubusercontent.com/petvana/images/master/dubins3d/example-3d.png"><img src="https://raw.githubusercontent.com/petvana/images/master/dubins3d/example-3d.png" width="500" style="max-width:100%;"></a></p>
(Green represents the provided path, red is based on the minimum turing radius.)
<h3><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h3>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Pkg
Pkg.add(&quot;Dubins3D.jl&quot;)
"><pre><span class="pl-k">using</span> Pkg
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>Dubins3D.jl<span class="pl-pds">"</span></span>)</pre></div>
<h2><a id="user-content-basic-usage" class="anchor" aria-hidden="true" href="#basic-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Basic usage</h2>
<p>See example/basic.jl</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Dubins3D

# Convert degreees to radians
deg2rad(x) = pi * x / 180.

# Initial and final configurations [x, y, z, heading angle, pitch angle]
qi = [200., 500., 200., deg2rad(180.), deg2rad(-5.)]
qf = [500., 350., 100., deg2rad(0.), deg2rad(-5.)]
# Minimum turning radius
rhomin = 40.
# Pich angle constraints [min_pitch, max_pitch]
pitchlims = deg2rad.([-15., 20.])

maneuver = DubinsManeuver3D(qi, qf, rhomin, pitchlims)

# Length of the 3D Dubins path
@show maneuver.length

# Sample the manever by 500 samples
samples = compute_sampling(maneuver; numberOfSamples = 500)
# First and last samples - should be equal to qi and qf
@show samples[1]
@show samples[end]
"><pre><span class="pl-k">using</span> Dubins3D

<span class="pl-c"><span class="pl-c">#</span> Convert degreees to radians</span>
<span class="pl-en">deg2rad</span>(x) <span class="pl-k">=</span> <span class="pl-c1">pi</span> <span class="pl-k">*</span> x <span class="pl-k">/</span> <span class="pl-c1">180.</span>

<span class="pl-c"><span class="pl-c">#</span> Initial and final configurations [x, y, z, heading angle, pitch angle]</span>
qi <span class="pl-k">=</span> [<span class="pl-c1">200.</span>, <span class="pl-c1">500.</span>, <span class="pl-c1">200.</span>, <span class="pl-c1">deg2rad</span>(<span class="pl-c1">180.</span>), <span class="pl-c1">deg2rad</span>(<span class="pl-k">-</span><span class="pl-c1">5.</span>)]
qf <span class="pl-k">=</span> [<span class="pl-c1">500.</span>, <span class="pl-c1">350.</span>, <span class="pl-c1">100.</span>, <span class="pl-c1">deg2rad</span>(<span class="pl-c1">0.</span>), <span class="pl-c1">deg2rad</span>(<span class="pl-k">-</span><span class="pl-c1">5.</span>)]
<span class="pl-c"><span class="pl-c">#</span> Minimum turning radius</span>
rhomin <span class="pl-k">=</span> <span class="pl-c1">40.</span>
<span class="pl-c"><span class="pl-c">#</span> Pich angle constraints [min_pitch, max_pitch]</span>
pitchlims <span class="pl-k">=</span> <span class="pl-c1">deg2rad</span>.([<span class="pl-k">-</span><span class="pl-c1">15.</span>, <span class="pl-c1">20.</span>])

maneuver <span class="pl-k">=</span> <span class="pl-c1">DubinsManeuver3D</span>(qi, qf, rhomin, pitchlims)

<span class="pl-c"><span class="pl-c">#</span> Length of the 3D Dubins path</span>
<span class="pl-c1">@show</span> maneuver<span class="pl-k">.</span>length

<span class="pl-c"><span class="pl-c">#</span> Sample the manever by 500 samples</span>
samples <span class="pl-k">=</span> <span class="pl-c1">compute_sampling</span>(maneuver; numberOfSamples <span class="pl-k">=</span> <span class="pl-c1">500</span>)
<span class="pl-c"><span class="pl-c">#</span> First and last samples - should be equal to qi and qf</span>
<span class="pl-c1">@show</span> samples[<span class="pl-c1">1</span>]
<span class="pl-c1">@show</span> samples[<span class="pl-c1">end</span>]</pre></div>
</article></div>