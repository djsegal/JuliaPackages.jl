<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-pathweightsamplingjl" class="anchor" aria-hidden="true" href="#pathweightsamplingjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>PathWeightSampling.jl</h1>
<p dir="auto"><a href="https://github.com/manuel-rhdt/PathWeightSampling.jl/actions/workflows/ci-pipeline.yml"><img src="https://github.com/manuel-rhdt/PathWeightSampling.jl/actions/workflows/ci-pipeline.yml/badge.svg" alt="CI" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/manuel-rhdt/PathWeightSampling.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/e365304f09b7130d3f585f27ffe9828f708c884218a48a67740cab9fd9cdd21a/68747470733a2f2f636f6465636f762e696f2f67682f6d616e75656c2d726864742f5061746857656967687453616d706c696e672e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e7376673f746f6b656e3d51304a46523952425a36" alt="codecov" data-canonical-src="https://codecov.io/gh/manuel-rhdt/PathWeightSampling.jl/branch/master/graph/badge.svg?token=Q0JFR9RBZ6" style="max-width: 100%;"></a>
<a href="https://zenodo.org/badge/latestdoi/268234770" rel="nofollow"><img src="https://camo.githubusercontent.com/e68552c3857a58b8025bb8ef857b62a17b66273405606af13c00807128ea0fe6/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f3236383233343737302e737667" alt="DOI" data-canonical-src="https://zenodo.org/badge/268234770.svg" style="max-width: 100%;"></a>
<a href="https://manuel-rhdt.github.io/PathWeightSampling.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://manuel-rhdt.github.io/PathWeightSampling.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a></p>
<p dir="auto">PathWeightSampling.jl is a Julia package to compute information transmission rates using the novel Path Weight Sampling (PWS) method.</p>
<h2 dir="auto"><a id="user-content-documentation" class="anchor" aria-hidden="true" href="#documentation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Documentation</h2>
<p dir="auto">The <a href="https://manuel-rhdt.github.io/PathWeightSampling.jl/" rel="nofollow">documentation for PathWeightSampling.jl</a> is hosted on github.</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">For instructions for how to install Julia itself, see the <a href="https://julialang.org" rel="nofollow">official website</a>.</p>
<p dir="auto">To install this package, type from the Julia REPL</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; import Pkg; Pkg.add(&quot;PathWeightSampling&quot;)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">import</span> Pkg; Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>PathWeightSampling<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">Alternatively, you can install this package by starting Julia, typing <code>]</code> and then</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="pkg&gt; add PathWeightSampling"><pre>pkg<span class="pl-k">&gt;</span> add PathWeightSampling</pre></div>
<h2 dir="auto"><a id="user-content-quick-start" class="anchor" aria-hidden="true" href="#quick-start"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Quick Start</h2>
<p dir="auto">After installation, the package can be loaded from directly from julia.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using PathWeightSampling"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> PathWeightSampling</pre></div>
<p dir="auto">We then need a <em>system</em> of reactions for which we want to compute the mutual information. We can use one of the included example systems, such as a simple model for gene expression.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; system = PathWeightSampling.gene_expression_system()
SimpleSystem with 4 reactions
Input variables: S(t)
Output variables: X(t)
Initial condition:
    S(t) = 50
    X(t) = 50
Parameters:
    κ = 50.0
    λ = 1.0
    ρ = 10.0
    μ = 10.0"><pre>julia<span class="pl-k">&gt;</span> system <span class="pl-k">=</span> PathWeightSampling<span class="pl-k">.</span><span class="pl-c1">gene_expression_system</span>()
SimpleSystem with <span class="pl-c1">4</span> reactions
Input variables<span class="pl-k">:</span> <span class="pl-c1">S</span>(t)
Output variables<span class="pl-k">:</span> <span class="pl-c1">X</span>(t)
Initial condition<span class="pl-k">:</span>
    <span class="pl-en">S</span>(t) <span class="pl-k">=</span> <span class="pl-c1">50</span>
    <span class="pl-en">X</span>(t) <span class="pl-k">=</span> <span class="pl-c1">50</span>
Parameters<span class="pl-k">:</span>
    κ <span class="pl-k">=</span> <span class="pl-c1">50.0</span>
    λ <span class="pl-k">=</span> <span class="pl-c1">1.0</span>
    ρ <span class="pl-k">=</span> <span class="pl-c1">10.0</span>
    μ <span class="pl-k">=</span> <span class="pl-c1">10.0</span></pre></div>
<p dir="auto">This specific model is very simple, consisting of only 4 reactions:</p>
<ul dir="auto">
<li>∅ → S with rate <em>κ</em></li>
<li>S → ∅ with rate <em>λ</em></li>
<li>S → S + X with rate <em>ρ</em></li>
<li>X → ∅ with rate <em>μ</em></li>
</ul>
<p dir="auto">S represents the input and X represents the output. The values of the parameters
can be inspected from the output above.
For this system, we can perform
a PWS simulation to compute the mutual information between its input and output trajectories:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; result = mutual_information(system, DirectMCEstimate(256), num_samples=1000)"><pre>julia<span class="pl-k">&gt;</span> result <span class="pl-k">=</span> <span class="pl-c1">mutual_information</span>(system, <span class="pl-c1">DirectMCEstimate</span>(<span class="pl-c1">256</span>), num_samples<span class="pl-k">=</span><span class="pl-c1">1000</span>)</pre></div>
<p dir="auto">Here we just made a default choice for which marginalization algorithm to use (see <a href="https://manuel-rhdt.github.io/PathWeightSampling.jl/" rel="nofollow">documentation</a> for more details).
This computation takes approximately a minute on a typical laptop. The result is a
<code>DataFrame</code> with three columns and 1000 rows:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="1000×3 DataFrame
  Row │ TimeConditional  TimeMarginal  MutualInformation                 
      │ Float64          Float64       Vector{Float64}                   
──────┼──────────────────────────────────────────────────────────────────
    1 │     0.000180898     0.0508378  [0.0, -0.67167, 0.388398, -0.343…
  ⋮   │        ⋮              ⋮                        ⋮
 1000 │     0.00020897      0.0694072  [0.0, 0.254173, 0.362607, 0.2584…
                                                         998 rows omitted"><pre><span class="pl-c1">1000</span><span class="pl-k">×</span><span class="pl-c1">3</span> DataFrame
  Row │ TimeConditional  TimeMarginal  MutualInformation                 
      │ Float64          Float64       Vector{Float64}                   
──────┼──────────────────────────────────────────────────────────────────
    <span class="pl-c1">1</span> │     <span class="pl-c1">0.000180898</span>     <span class="pl-c1">0.0508378</span>  [<span class="pl-c1">0.0</span>, <span class="pl-k">-</span><span class="pl-c1">0.67167</span>, <span class="pl-c1">0.388398</span>, <span class="pl-k">-</span><span class="pl-c1">0.343</span>…
  ⋮   │        ⋮              ⋮                        ⋮
 <span class="pl-c1">1000</span> │     <span class="pl-c1">0.00020897</span>      <span class="pl-c1">0.0694072</span>  [<span class="pl-c1">0.0</span>, <span class="pl-c1">0.254173</span>, <span class="pl-c1">0.362607</span>, <span class="pl-c1">0.2584</span>…
                                                         <span class="pl-c1">998</span> rows omitted</pre></div>
<p dir="auto">Each row represents one Monte Carlo sample.</p>
<ul dir="auto">
<li><code>TimeConditional</code> is the CPU time in seconds for the computation of the conditional probability P(<strong>x</strong>|<strong>s</strong>)</li>
<li><code>TimeMarginal</code> is the CPU time in seconds for the computation of the marginal probability P(<strong>x</strong>|<strong>s</strong>)</li>
<li><code>MutualInformation</code> is the resulting mutual information estimate. This is a vector for each sample giving the mutual information for trajectories of different durations. The durations to which these individual values correspond is given by</li>
</ul>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; system.dtimes
0.0:0.1:2.0"><pre>julia<span class="pl-k">&gt;</span> system<span class="pl-k">.</span>dtimes
<span class="pl-c1">0.0</span><span class="pl-k">:</span><span class="pl-c1">0.1</span><span class="pl-k">:</span><span class="pl-c1">2.0</span></pre></div>
<p dir="auto">So we computed the mutual information for trajectories of duration <code>0.0, 0.1, 0.2, ..., 2.0</code>.</p>
<p dir="auto">We can plot the results (assuming the package Plots.jl is installed):</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using Plots, Statistics
julia&gt; plot(
           system.dtimes,
           mean(result.MutualInformation),
           legend=false,
           xlabel=&quot;trajectory duration&quot;,
           ylabel=&quot;mutual information (nats)&quot;
       )"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Plots, Statistics
julia<span class="pl-k">&gt;</span> <span class="pl-c1">plot</span>(
           system<span class="pl-k">.</span>dtimes,
           <span class="pl-c1">mean</span>(result<span class="pl-k">.</span>MutualInformation),
           legend<span class="pl-k">=</span><span class="pl-c1">false</span>,
           xlabel<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>trajectory duration<span class="pl-pds">"</span></span>,
           ylabel<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>mutual information (nats)<span class="pl-pds">"</span></span>
       )</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="docs/src/assets/example_plot.svg"><img src="docs/src/assets/example_plot.svg" alt="Plot of the mutual information as a function of trajectory duration for the simple gene expression system." style="max-width: 100%;"></a></p>
<p dir="auto">Here we plot <code>mean(result.MutualInformation)</code>, i.e. we compute the average of our Monte Carlo samples, which is the PWS estimate for the mutual information.</p>
<p dir="auto">More examples and a guide can be found in the <a href="https://manuel-rhdt.github.io/PathWeightSampling.jl/" rel="nofollow">documentation</a></p>
<h2 dir="auto"><a id="user-content-acknowledgments" class="anchor" aria-hidden="true" href="#acknowledgments"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Acknowledgments</h2>
<p dir="auto">This work was performed at the research institute <a href="https://amolf.nl" rel="nofollow">AMOLF</a>.
This project has received funding from the European Research Council (ERC) under the European Union’s Horizon 2020 research and innovation program (grant agreement No. 885065)
and was financially supported by the Dutch Research Council (NWO) through the “Building a Synthetic Cell (BaSyC)” Gravitation grant (024.003.019).</p>
<p dir="auto"><a href="https://www.nwo.nl" rel="nofollow"><img src="docs/src/assets/logo-nwo.svg" alt="Logo NWO" style="max-width: 100%;"></a>
<a href="https://amolf.nl" rel="nofollow"><img src="docs/src/assets/logo-amolf.svg" alt="Logo AMOLF" style="max-width: 100%;"></a>
<a href="https://www.basyc.nl" rel="nofollow"><img src="docs/src/assets/logo-basyc.png" alt="Logo BaSyC" style="max-width: 100%;"></a></p>
</article></div>