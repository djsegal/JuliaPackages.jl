<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-diffeqbiologicaljl" class="anchor" aria-hidden="true" href="#diffeqbiologicaljl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>DiffEqBiological.jl</h1>
<p><a href="https://gitter.im/JuliaDiffEq/Lobby?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge&amp;utm_content=badge" rel="nofollow"><img src="https://camo.githubusercontent.com/063a520f1733d1b53d1e2fdb37b70a8016dd36f6/68747470733a2f2f6261646765732e6769747465722e696d2f4a756c69614469666645712f4c6f6262792e737667" alt="Join the chat at https://gitter.im/JuliaDiffEq/Lobby" data-canonical-src="https://badges.gitter.im/JuliaDiffEq/Lobby.svg" style="max-width:100%;"></a>
<a href="https://travis-ci.org/JuliaDiffEq/DiffEqBiological.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/8fde6c44314daa83c3fa207b160c27e4f18e51be/68747470733a2f2f7472617669732d63692e6f72672f4a756c69614469666645712f44696666457142696f6c6f676963616c2e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaDiffEq/DiffEqBiological.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/ChrisRackauckas/diffeqbiological-jl/branch/master" rel="nofollow"><img src="https://camo.githubusercontent.com/bee2d9bcbc048de230b40c51c128cf78bb2b9c6d/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f6769746875622f4a756c69614469666645712f44696666457142696f6c6f676963616c2e6a6c3f6272616e63683d6d6173746572267376673d74727565" alt="Build status" data-canonical-src="https://ci.appveyor.com/api/projects/status/github/JuliaDiffEq/DiffEqBiological.jl?branch=master&amp;svg=true" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/JuliaDiffEq/DiffEqBiological.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/4c041d73e4d3649053735396aee367772064ec71/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f4a756c69614469666645712f44696666457142696f6c6f676963616c2e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/JuliaDiffEq/DiffEqBiological.jl/badge.svg?branch=master" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/JuliaDiffEq/DiffEqBiological.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/79f1f3fc080f669ed92dfbb5ea295ca862a2d162/68747470733a2f2f636f6465636f762e696f2f67682f4a756c69614469666645712f44696666457142696f6c6f676963616c2e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov.io" data-canonical-src="https://codecov.io/gh/JuliaDiffEq/DiffEqBiological.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p>DiffEqBiological.jl provides a domain specific language (DSL) for defining
chemical reaction networks in Julia. It interfaces with the broader
<a href="http://juliadiffeq.org" rel="nofollow">DifferentialEquations.jl</a> infrastructure to enable the
easy generation and solution of corresponding mass action ODE models, Chemical
Langevin SDE models, and stochastic chemical kinetics jump models. These
generated models can also be used in higher level DifferentialEquations.jl
packages (e.g. for sensitivity analysis, parameter estimation, etc).</p>
<p>Here we give a brief introduction to using the DiffEqBiological package, with
a focus on how to define reaction networks, and a minimal example showing how to
create and solve ODE, SDE and jump models.</p>
<p>More detailed documentation is available from:</p>
<ul>
<li>Several DiffEqBiological tutorials are available as part of the
<a href="https://github.com/JuliaDiffEq/DiffEqTutorials.jl">DiffEqTutorials Modeling
Examples</a>. Both html and
interactive IJulia notebook versions are provided there. These include
<ul>
<li>An introductory tutorial showing how to specify and solve both ODE and
stochastic versions of the
<a href="https://en.wikipedia.org/wiki/Repressilator" rel="nofollow">repressilator</a>.</li>
<li>A tutorial exploring the DiffEqBiological API for querying network
properties, which also illustrates how to programmatically and incrementally construct and
solve a network model using the API.</li>
<li>A tutorial showing how to use the wrapped <a href="https://www.juliahomotopycontinuation.org/" rel="nofollow">HomotopyContinuation.jl</a>
functionality to find steady-states and make bifurcation plots.</li>
</ul>
</li>
<li>Full documentation of the DSL syntax, with information on the generated rate
functions and models is available in the <a href="http://docs.juliadiffeq.org/dev/models/biological" rel="nofollow">DifferentialEquations.jl Chemical
Reaction Models
documentation</a>.</li>
<li>API documentation showing how to retrieve network information from a
generated <code>reaction_network</code> is available
<a href="http://docs.juliadiffeq.org/dev/apis/diffeqbio" rel="nofollow">here</a>.</li>
</ul>
<h2><a id="user-content-the-reaction-dsl" class="anchor" aria-hidden="true" href="#the-reaction-dsl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>The Reaction DSL</h2>
<p>The <code>@reaction_network</code> DSL allows for the definition of reaction networks using
a simple format. Its input is a set of chemical reactions, from which it
generates a reaction network object which can be used as input to <code>ODEProblem</code>,
<code>SteadyStateProblem</code>, <code>SDEProblem</code> and <code>JumpProblem</code> constructors.</p>
<p>The basic syntax is</p>
<div class="highlight highlight-source-julia"><pre>rn <span class="pl-k">=</span> <span class="pl-c1">@reaction_network</span> rType <span class="pl-k">begin</span>
  <span class="pl-c1">2.0</span>, X <span class="pl-k">+</span> Y <span class="pl-k">--&gt;</span> XY               
  <span class="pl-c1">1.0</span>, XY <span class="pl-k">--&gt;</span> Z            
<span class="pl-k">end</span></pre></div>
<p>where each line corresponds to a chemical reaction. The (optional) input <code>rType</code>
designates the type of this instance (all instances will inherit from the
abstract type <code>AbstractReactionNetwork</code>).</p>
<p>The DSL has many features:</p>
<ul>
<li>It supports many different arrow types, corresponding to different directions
of reactions and different rate laws:
<div class="highlight highlight-source-julia"><pre>rn <span class="pl-k">=</span> <span class="pl-c1">@reaction_network</span> <span class="pl-k">begin</span>
  <span class="pl-c1">1.0</span>, X <span class="pl-k">+</span> Y <span class="pl-k">--&gt;</span> XY               
  <span class="pl-c1">1.0</span>, X <span class="pl-k">+</span> Y → XY      
  <span class="pl-c1">1.0</span>, XY ← X <span class="pl-k">+</span> Y      
  <span class="pl-c1">2.0</span>, X <span class="pl-k">+</span> Y ↔ XY               
<span class="pl-k">end</span></pre></div>
</li>
<li>It allows multiple reactions to be defined simultaneously on one line. The
following two networks are equivalent:
<div class="highlight highlight-source-julia"><pre>rn1 <span class="pl-k">=</span> <span class="pl-c1">@reaction_network</span> <span class="pl-k">begin</span>
  (<span class="pl-c1">1.0</span>,<span class="pl-c1">2.0</span>), (S1,S2) → P             
<span class="pl-k">end</span>
rn2 <span class="pl-k">=</span> <span class="pl-c1">@reaction_network</span> <span class="pl-k">begin</span>
  <span class="pl-c1">1.0</span>, S1 → P     
  <span class="pl-c1">2.0</span>, S2 → P
<span class="pl-k">end</span></pre></div>
</li>
<li>It allows the use of symbols to represent reaction rate parameters, with their
numeric values specified during problem construction. i.e., the previous
example could be given by
<div class="highlight highlight-source-julia"><pre>rn2 <span class="pl-k">=</span> <span class="pl-c1">@reaction_network</span> <span class="pl-k">begin</span>
  k1, S1 → P     
  k2, S2 → P
<span class="pl-k">end</span> k1 k2 </pre></div>
with <code>k1</code> and <code>k2</code> corresponding to the reaction rates.</li>
<li>Rate law functions can be pre-defined and used within the DSL:
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">@reaction_func</span> <span class="pl-en">myHill</span>(x) <span class="pl-k">=</span> <span class="pl-c1">2.0</span><span class="pl-k">*</span>x<span class="pl-k">^</span><span class="pl-c1">3</span><span class="pl-k">/</span>(x<span class="pl-k">^</span><span class="pl-c1">3</span><span class="pl-k">+</span><span class="pl-c1">1.5</span><span class="pl-k">^</span><span class="pl-c1">3</span>)
rn <span class="pl-k">=</span> <span class="pl-c1">@reaction_network</span> <span class="pl-k">begin</span>
  <span class="pl-c1">myHill</span>(X), ∅ → X
<span class="pl-k">end</span></pre></div>
</li>
<li>Pre-made rate laws for Hill and Michaelis-Menten reactions are provided:
<div class="highlight highlight-source-julia"><pre>rn1 <span class="pl-k">=</span> <span class="pl-c1">@reaction_network</span> <span class="pl-k">begin</span>
  <span class="pl-c1">hill</span>(X,v,K,n), ∅ → X
  <span class="pl-c1">mm</span>(X,v,K), ∅ → X
<span class="pl-k">end</span> v K n</pre></div>
</li>
<li>Simple rate law functions of the species populations can be used within the DSL:
<div class="highlight highlight-source-julia"><pre>rn <span class="pl-k">=</span> <span class="pl-c1">@reaction_network</span> <span class="pl-k">begin</span>
  <span class="pl-c1">2.0</span><span class="pl-k">*</span>X<span class="pl-k">^</span><span class="pl-c1">2</span>, <span class="pl-c1">0</span> → X <span class="pl-k">+</span> Y
  <span class="pl-c1">gamma</span>(Y)<span class="pl-k">/</span><span class="pl-c1">5</span>, X → ∅
  pi<span class="pl-k">*</span>X<span class="pl-k">/</span>Y, Y → ∅
<span class="pl-k">end</span></pre></div>
</li>
</ul>
<p>For sufficiently large and structured network models it can often be easier to
specify some reactions through a programmatic API. For this reason the
<code>@min_reaction_network</code> and <code>@empty_reaction_network</code> macros, along with the
corresponding <code>addspecies!</code>, <code>addparam!</code> and <code>addreaction!</code> modifier functions,
are provided in the
<a href="http://docs.juliadiffeq.org/dev/apis/diffeqbio#Functions-to-Add-Species,-Parameters-and-Reactions-to-a-Network-1" rel="nofollow">API</a>.</p>
<h2><a id="user-content-diffeqbiological-api-for-querying-network-information" class="anchor" aria-hidden="true" href="#diffeqbiological-api-for-querying-network-information"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>DiffEqBiological API for Querying Network Information</h2>
<p>A variety of network information is calculated by the <code>reaction_network</code> macro,
and can then be retrieved using the <a href="http://docs.juliadiffeq.org/dev/apis/diffeqbio" rel="nofollow">DiffEqBiological
API</a>. This includes</p>
<ul>
<li>Orderings of species and reactions
<div class="highlight highlight-source-julia"><pre>  <span class="pl-c1">speciesmap</span>(rn)
  <span class="pl-c1">paramsmap</span>(rn)</pre></div>
</li>
<li>Reaction stoichiometries
<div class="highlight highlight-source-julia"><pre>  <span class="pl-c1">substratestoich</span>(rn, rxidx)
  <span class="pl-c1">productstoich</span>(rn, rxidx)
  <span class="pl-c1">netstoich</span>(rn, rxidx)</pre></div>
</li>
<li>Expressions corresponding to the functions determining the deterministic and
stochastic terms within resulting ODE, SDE or jump models
<div class="highlight highlight-source-julia"><pre>  ode_exprs <span class="pl-k">=</span> <span class="pl-c1">odeexprs</span>(rn)
  jacobian_exprs <span class="pl-k">=</span> <span class="pl-c1">jacobianexprs</span>(rn)
  noise_expr <span class="pl-k">=</span> <span class="pl-c1">noiseexprs</span>(rn)
  rate_exprs,affect_exprs <span class="pl-k">=</span> <span class="pl-c1">jumpexprs</span>(rn)  </pre></div>
These can be used to generate LaTeX expressions corresponding to the system
using packages such as <a href="https://github.com/korsbo/Latexify.jl"><code>Latexify</code></a>.</li>
<li>Dependency graphs
<div class="highlight highlight-source-julia"><pre>  <span class="pl-c1">rxtospecies_depgraph</span>(rn)
  <span class="pl-c1">speciestorx_depgraph</span>(rn)
  <span class="pl-c1">rxtorx_depgraph</span>(rn)</pre></div>
</li>
</ul>
<p>and more.</p>
<h2><a id="user-content-simulating-ode-steady-state-sde-and-jump-problems" class="anchor" aria-hidden="true" href="#simulating-ode-steady-state-sde-and-jump-problems"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Simulating ODE, Steady-State, SDE and Jump Problems</h2>
<p>Once a reaction network has been created it can be passed as input to either one
of the <code>ODEProblem</code>, <code>SteadyStateProblem</code>, <code>SDEProblem</code> or <code>JumpProblem</code>
constructors.</p>
<div class="highlight highlight-source-julia"><pre>  probODE <span class="pl-k">=</span> <span class="pl-c1">ODEProblem</span>(rn, args<span class="pl-k">...</span>; kwargs<span class="pl-k">...</span>)      
  probSS <span class="pl-k">=</span> <span class="pl-c1">SteadyStateProblem</span>(rn, args<span class="pl-k">...</span>; kwargs<span class="pl-k">...</span>)
  probSDE <span class="pl-k">=</span> <span class="pl-c1">SDEProblem</span>(rn, args<span class="pl-k">...</span>; kwargs<span class="pl-k">...</span>)
  probJump <span class="pl-k">=</span> <span class="pl-c1">JumpProblem</span>(prob, <span class="pl-c1">Direct</span>(), rn)</pre></div>
<p>The output problems may then be used as input to the solvers of
<a href="http://juliadiffeq.org/" rel="nofollow">DifferentialEquations.jl</a>. <em>Note</em>, the noise used by
the <code>SDEProblem</code> will correspond to the Chemical Langevin Equations.</p>
<p>As an example, consider models for a simple birth-death process:</p>
<div class="highlight highlight-source-julia"><pre>rs <span class="pl-k">=</span> <span class="pl-c1">@reaction_network</span> <span class="pl-k">begin</span>
  c1, X <span class="pl-k">--&gt;</span> <span class="pl-c1">2</span>X
  c2, X <span class="pl-k">--&gt;</span> <span class="pl-c1">0</span>
  c3, <span class="pl-c1">0</span> <span class="pl-k">--&gt;</span> X
<span class="pl-k">end</span> c1 c2 c3
params <span class="pl-k">=</span> (<span class="pl-c1">1.0</span>,<span class="pl-c1">2.0</span>,<span class="pl-c1">50.</span>)
tspan <span class="pl-k">=</span> (<span class="pl-c1">0.</span>,<span class="pl-c1">4.</span>)
u0 <span class="pl-k">=</span> [<span class="pl-c1">5.</span>]

<span class="pl-c"><span class="pl-c">#</span> solve ODEs</span>
oprob <span class="pl-k">=</span> <span class="pl-c1">ODEProblem</span>(rs, u0, tspan, params)
osol  <span class="pl-k">=</span> <span class="pl-c1">solve</span>(oprob, <span class="pl-c1">Tsit5</span>())

<span class="pl-c"><span class="pl-c">#</span> solve for Steady-States</span>
ssprob <span class="pl-k">=</span> <span class="pl-c1">SteadyStateProblem</span>(rs, u0, params)
sssol  <span class="pl-k">=</span> <span class="pl-c1">solve</span>(ssprob, <span class="pl-c1">SSRootfind</span>())

<span class="pl-c"><span class="pl-c">#</span> solve Chemical Langevin SDEs</span>
sprob <span class="pl-k">=</span> <span class="pl-c1">SDEProblem</span>(rs, u0, tspan, params)
ssol  <span class="pl-k">=</span> <span class="pl-c1">solve</span>(sprob, <span class="pl-c1">EM</span>(), dt<span class="pl-k">=</span><span class="pl-c1">.01</span>)

<span class="pl-c"><span class="pl-c">#</span> solve JumpProblem using Gillespie's Direct Method</span>
u0 <span class="pl-k">=</span> [<span class="pl-c1">5</span>]
dprob <span class="pl-k">=</span> <span class="pl-c1">DiscreteProblem</span>(rs, u0, tspan, params)
jprob <span class="pl-k">=</span> <span class="pl-c1">JumpProblem</span>(dprob, <span class="pl-c1">Direct</span>(), rs)
jsol <span class="pl-k">=</span> <span class="pl-c1">solve</span>(jprob, <span class="pl-c1">SSAStepper</span>())</pre></div>
<h2><a id="user-content-importing-predefined-networks" class="anchor" aria-hidden="true" href="#importing-predefined-networks"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Importing Predefined Networks</h2>
<p><a href="https://github.com/isaacsas/ReactionNetworkImporters.jl">ReactionNetworkImporters.jl</a>
can load several different types of predefined networks into DiffEqBiological
<code>reaction_network</code>s. These include</p>
<ul>
<li>A subset of BioNetGen .net files that can be generated from a BioNetGen language file (.bngl). (.net files can be generated using the <code>generate_network</code> command within BioNetGen.)</li>
<li>Reaction networks specified by dense or sparse matrices encoding the stoichiometry of substrates and products within each reaction.</li>
<li>Networks defined by the basic file format used by the <a href="https://www.cosbi.eu/research/prototypes/rssa" rel="nofollow">RSSA</a> group at COSBI in their <a href="https://www.cosbi.eu/prototypes/jLiexDeBIgFV4zxwnKiW97oc4BjTtIoRGajqdUz4.zip" rel="nofollow">model collection</a>.</li>
</ul>
<h2><a id="user-content-finding-steady-states" class="anchor" aria-hidden="true" href="#finding-steady-states"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Finding steady states</h2>
<p>The steady states of a reaction network can be found using homotopy continuation (as implemented by <a href="https://github.com/isaacsas/ReactionNetworkImporters.jl">HomotopyContinuation.jl</a>). This method is limited to polynomial systems, which includes reaction network not containing non-polynomial rates in the reaction rates (such as logarithms and non integer exponents). <em>Note, both the steady-state and the bifurcation diagram functionality only fully support Julia 1.1 and greater.</em></p>
<p>The basic syntax is</p>
<div class="highlight highlight-source-julia"><pre>rn <span class="pl-k">=</span> <span class="pl-c1">@reaction_network</span> <span class="pl-k">begin</span> 
  (<span class="pl-c1">1.</span>,<span class="pl-c1">2.</span>), <span class="pl-c1">0</span> ↔ X               
<span class="pl-k">end</span>
ss <span class="pl-k">=</span> <span class="pl-c1">steady_states</span>(rn,params)</pre></div>
<p>and with parameters</p>
<div class="highlight highlight-source-julia"><pre>rn <span class="pl-k">=</span> <span class="pl-c1">@reaction_network</span> <span class="pl-k">begin</span> 
  (p,d), <span class="pl-c1">0</span> ↔ X               
<span class="pl-k">end</span> p d
params <span class="pl-k">=</span> [<span class="pl-c1">1.</span>, <span class="pl-c1">2.</span>]
ss <span class="pl-k">=</span> <span class="pl-c1">steady_states</span>(rn,params)</pre></div>
<p>the stability of a steady state (or a vector of several) can be determined by the <code>stability</code> function:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">stability</span>(ss,rn,params)</pre></div>
<p>Here the <code>@reaction_network</code> creates a multivariate polynomial and stores in the <code>equilibrate_content</code> field in the reaction network structure. The <code>steady_state</code> method the inserts the corresponding parameter values and solves the polynomial system. The exception is if there exists a parameter as an exponent (typically <code>n</code> in a hill function). In this case the steady state polynomial can first be created in the <code>steady_state</code> method. If one plans to solve a polynomial a large number of times with the same value of <code>n</code>, then one can get a speed-up by first fixing that value using the <code>fix_parameters</code> function:</p>
<div class="highlight highlight-source-julia"><pre>rn <span class="pl-k">=</span> <span class="pl-c1">@reaction_network</span> <span class="pl-k">begin</span> 
  (<span class="pl-c1">hill</span>(X,v,K,n),d), <span class="pl-c1">0</span> ↔ X               
<span class="pl-k">end</span> v K n d
<span class="pl-c1">fix_parameters</span>(rn,n<span class="pl-k">=</span><span class="pl-c1">4</span>)
<span class="pl-k">for</span> i <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10000</span>
  params <span class="pl-k">=</span> [i, <span class="pl-c1">2.5</span>, <span class="pl-c1">4</span>, <span class="pl-c1">0.1</span>]    <span class="pl-c"><span class="pl-c">#</span>The value of 'n' here doesn't really matter, however, the field must exist.</span>
  ss <span class="pl-k">=</span> <span class="pl-c1">steady_states</span>(rn,params)</pre></div>
<p>Some networks may have an infinite set of steady states, and which one is interested in depends on the initial conditions. For these networks some additional information is required (typically some concentrations which sums to a fixed value). This information can be added through the <code>@add_constraint</code> macro:</p>
<div class="highlight highlight-source-julia"><pre>rn <span class="pl-k">=</span> <span class="pl-c1">@reaction_network</span> <span class="pl-k">begin</span> 
  (k1,k2), X ↔ Y              
<span class="pl-k">end</span> k1 k2
params <span class="pl-k">=</span> [<span class="pl-c1">2.</span>,<span class="pl-c1">1.</span>]
<span class="pl-c1">@add_constraint</span> rn X<span class="pl-k">+</span>Y<span class="pl-k">=</span><span class="pl-c1">2.</span>
<span class="pl-c1">steady_states</span>(rn,params)</pre></div>
<p>The <code>@add_constraint</code> macro may contain parameters, as long as these are declared in the network.</p>
<div class="highlight highlight-source-julia"><pre>rn <span class="pl-k">=</span> <span class="pl-c1">@reaction_network</span> <span class="pl-k">begin</span> 
  (k1,k2), X ↔ Y              
<span class="pl-k">end</span> k1 k2 C_tot
params <span class="pl-k">=</span> [<span class="pl-c1">2.</span>,<span class="pl-c1">1.</span>,<span class="pl-c1">2.</span>]
<span class="pl-c1">@add_constraint</span> rn X<span class="pl-k">+</span>Y<span class="pl-k">=</span>C_tot
<span class="pl-c1">steady_states</span>(rn,params)</pre></div>
<p>The <code>@add_constraints</code> macro can be used to add several constraints at the same time.</p>
<div class="highlight highlight-source-julia"><pre>rn <span class="pl-k">=</span> <span class="pl-c1">@reaction_network</span> <span class="pl-k">begin</span> 
  (k1,k2), X ↔ Y        
  (k3,k4), V ↔ W              
<span class="pl-k">end</span> k1 k2 k3 k4
params <span class="pl-k">=</span> [<span class="pl-c1">2.</span>,<span class="pl-c1">1.</span>,<span class="pl-c1">1.</span>,<span class="pl-c1">2.</span>]
<span class="pl-c1">@add_constraints</span> rn <span class="pl-k">begin</span>
  X <span class="pl-k">+</span> Y <span class="pl-k">=</span> <span class="pl-c1">2.</span>
  V <span class="pl-k">+</span> W <span class="pl-k">=</span> <span class="pl-c1">4.</span>
<span class="pl-k">end</span>
<span class="pl-c1">steady_states</span>(rn,params)</pre></div>
<h2><a id="user-content-making-bifurcation-diagram" class="anchor" aria-hidden="true" href="#making-bifurcation-diagram"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Making bifurcation diagram</h2>
<p>For any system for which we can find steady states, we can also make bifurcation diagrams.</p>
<div class="highlight highlight-source-julia"><pre>rn <span class="pl-k">=</span> <span class="pl-c1">@reaction_network</span> <span class="pl-k">begin</span> 
  (p,d), <span class="pl-c1">0</span> ↔ X               
<span class="pl-k">end</span> p d
params <span class="pl-k">=</span> [<span class="pl-c1">1.</span>,<span class="pl-c1">2.</span>] <span class="pl-c"><span class="pl-c">#</span>The value of 'p' here doesn't really matter, however, the field must exist.</span>
bif <span class="pl-k">=</span> <span class="pl-c1">bifurcations</span>(rn, params, <span class="pl-c1">:p</span>, (<span class="pl-c1">0.1</span>,<span class="pl-c1">5.</span>))</pre></div>
<p>These can then be plotted.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">plot</span>(bif)</pre></div>
<p>In the plot blue values correspond to stable steady states, red to unstable. Also, cyan correspond to stable steady states with imaginary eigen values and orange to unstable steady states with imaginary eigen values.</p>
<p>In addition to the normal bifurcation diagram (varying a single parameter over a continuous range) there are three more types available.</p>
<p>A bifurcation grid varies a single parameter over a set of discrete values</p>
<div class="highlight highlight-source-julia"><pre>bif_grid <span class="pl-k">=</span> <span class="pl-c1">bifurcation_grid</span>(rn, params, <span class="pl-c1">:p</span>, <span class="pl-c1">1.</span>:<span class="pl-c1">5.</span>)</pre></div>
<p>A two dimensional bifurcation grid varies two different parameters over a grid of discrete values.</p>
<div class="highlight highlight-source-julia"><pre>bif_grid_2d <span class="pl-k">=</span> <span class="pl-c1">bifurcation_grid_2d</span>(rn, params, <span class="pl-c1">:p</span>, <span class="pl-c1">1.</span>:<span class="pl-c1">5.</span>, <span class="pl-c1">:d</span>, <span class="pl-c1">2.</span>:<span class="pl-c1">10.</span>)</pre></div>
<p>A bifurcation diagram grid first varies a single variable over a discrete grid of values. Then, for each such value, in varies a second variable over a continuous interval to create a bifurcation grid.</p>
<div class="highlight highlight-source-julia"><pre>bif_grid_dia <span class="pl-k">=</span> <span class="pl-c1">bifurcation_grid_diagram</span>(rn, params, <span class="pl-c1">:p</span>, <span class="pl-c1">1.</span>:<span class="pl-c1">5.</span>, <span class="pl-c1">:d</span>, (<span class="pl-c1">2.</span>,<span class="pl-c1">10.</span>))</pre></div>
<p>All of these can be plotted.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">plot</span>(bif_grid)
<span class="pl-c1">plot</span>(bif_grid_2d)
<span class="pl-c1">plot</span>(bif_grid_dia)</pre></div>
<pre><code></code></pre>
</article></div>