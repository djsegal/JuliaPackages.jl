<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-cuthillmckeejl" class="anchor" aria-hidden="true" href="#cuthillmckeejl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>CuthillMcKee.jl</h1>
<p dir="auto"><a href="https://rleegates.github.io/CuthillMcKee.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://rleegates.github.io/CuthillMcKee.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://travis-ci.com/rleegates/CuthillMcKee.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/7b94808a8092621d33721654e8b1d7b15c5a530bd35900344c7b2353595b6759/68747470733a2f2f7472617669732d63692e636f6d2f726c656567617465732f43757468696c6c4d634b65652e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/rleegates/CuthillMcKee.jl.svg?branch=master" style="max-width: 100%;"></a>
<a href="https://ci.appveyor.com/project/rleegates/CuthillMcKee-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/46a139ceb99f86bfa1a2f55e15a5f2784e40ffbf3ba9ceaecac1b16c92014402/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f6769746875622f726c656567617465732f43757468696c6c4d634b65652e6a6c3f7376673d74727565" alt="Build Status" data-canonical-src="https://ci.appveyor.com/api/projects/status/github/rleegates/CuthillMcKee.jl?svg=true" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/rleegates/CuthillMcKee.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/7cbe4ff646cef91f91740438032ff364770831da42665146407223bf101bf502/68747470733a2f2f636f6465636f762e696f2f67682f726c656567617465732f43757468696c6c4d634b65652e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/rleegates/CuthillMcKee.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a>
<a href="https://coveralls.io/github/rleegates/CuthillMcKee.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/f93b5321cd921154182d5f95b23e63c212a39ec602af3918c8e720ce3683e8c2/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f726c656567617465732f43757468696c6c4d634b65652e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coveralls" data-canonical-src="https://coveralls.io/repos/github/rleegates/CuthillMcKee.jl/badge.svg?branch=master" style="max-width: 100%;"></a></p>
<p dir="auto">The Cuthill McKee graph permutation algorithm for Julia.</p>
<p dir="auto">The algorithm is based on the <a href="http://ciprian-zavoianu.blogspot.com/2009/01/project-bandwidth-reduction.html" rel="nofollow">description</a> of the RCM permutation by Ciprian Zavoianu.</p>
<p dir="auto">Installation (latest tagged version):</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Pkg
Pkg.add(&quot;CuthillMcKee&quot;)"><pre><span class="pl-k">using</span> Pkg
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>CuthillMcKee<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">Installation (from master):</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Pkg
Pkg.add(PackageSpec(url=&quot;https://github.com/rleegates/CuthillMcKee.jl.git&quot;))"><pre><span class="pl-k">using</span> Pkg
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-c1">PackageSpec</span>(url<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>https://github.com/rleegates/CuthillMcKee.jl.git<span class="pl-pds">"</span></span>))</pre></div>
<p dir="auto">Example:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using SparseArrays, CuthillMcKee, UnicodePlots, LinearAlgebra
N = 500_000
A = sprand(N, N, 1/N)
A = A+A'+30I
b = rand(N)
@time p = symrcm(A)
ip = symrcm(A, true, true)
AP = rcmpermute(A)
@assert norm( (AP*b[p])[ip]-A*b ) &lt; 1e-12
display(spy(A))"><pre><span class="pl-k">using</span> SparseArrays, CuthillMcKee, UnicodePlots, LinearAlgebra
N <span class="pl-k">=</span> <span class="pl-c1">500_000</span>
A <span class="pl-k">=</span> <span class="pl-c1">sprand</span>(N, N, <span class="pl-c1">1</span><span class="pl-k">/</span>N)
A <span class="pl-k">=</span> A<span class="pl-k">+</span>A<span class="pl-k">'</span><span class="pl-k">+</span><span class="pl-c1">30</span>I
b <span class="pl-k">=</span> <span class="pl-c1">rand</span>(N)
<span class="pl-c1">@time</span> p <span class="pl-k">=</span> <span class="pl-c1">symrcm</span>(A)
ip <span class="pl-k">=</span> <span class="pl-c1">symrcm</span>(A, <span class="pl-c1">true</span>, <span class="pl-c1">true</span>)
AP <span class="pl-k">=</span> <span class="pl-c1">rcmpermute</span>(A)
<span class="pl-c1">@assert</span> <span class="pl-c1">norm</span>( (AP<span class="pl-k">*</span>b[p])[ip]<span class="pl-k">-</span>A<span class="pl-k">*</span>b ) <span class="pl-k">&lt;</span> <span class="pl-c1">1e-12</span>
<span class="pl-c1">display</span>(<span class="pl-c1">spy</span>(A))</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/rleegates/Images/blob/master/prercm.png?raw=true"><img src="https://github.com/rleegates/Images/raw/master/prercm.png?raw=true" alt="pre_rcm_sparsity" width="200" style="max-width: 100%;"></a></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="display(spy(AP))"><pre><span class="pl-c1">display</span>(<span class="pl-c1">spy</span>(AP))</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/rleegates/Images/blob/master/postrcm.png?raw=true"><img src="https://github.com/rleegates/Images/raw/master/postrcm.png?raw=true" alt="pre_rcm_sparsity" width="200" style="max-width: 100%;"></a></p>
</article></div>