<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-olsjl" class="anchor" aria-hidden="true" href="#olsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>ols.jl</h1>
<p>Julia type for multiple (multivariate) regression using OLS. Performs least squared regression on linear equations of multiple independent variables</p>
<p>Author: Adam Savitzky</p>
<p>Ported from the Python implemented by Vincent Nijs
<a href="http://www.scipy.org/Cookbook/OLS?action=AttachFile&amp;do=get&amp;target=ols.0.2.py" rel="nofollow">http://www.scipy.org/Cookbook/OLS?action=AttachFile&amp;do=get&amp;target=ols.0.2.py</a></p>
<p>OLS can be used on the following types of equations:</p>
<div class="highlight highlight-source-julia"><pre>y <span class="pl-k">=</span> a1 <span class="pl-k">*</span> x1 <span class="pl-k">+</span> a2 <span class="pl-k">*</span> x2 <span class="pl-k">+</span> <span class="pl-k">...</span> <span class="pl-k">+</span> an <span class="pl-k">*</span> xn
Y <span class="pl-k">=</span> AX <span class="pl-k">+</span> E</pre></div>
<h1><a id="user-content-input" class="anchor" aria-hidden="true" href="#input"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Input</h1>
<div class="highlight highlight-source-julia"><pre>y <span class="pl-k">=</span> dependent variable
y_varnm <span class="pl-k">=</span> string with the variable label <span class="pl-k">for</span> y
x <span class="pl-k">=</span> independent variables, note that a constant is added by default
x_varnm <span class="pl-k">=</span> list of variable labels <span class="pl-k">for</span> the independent variables</pre></div>
<h1><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Usage</h1>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span># Instantiate a new ols type</span>
reg <span class="pl-k">=</span> <span class="pl-c1">ols</span>(y, x, <span class="pl-s"><span class="pl-pds">"</span>y<span class="pl-pds">"</span></span>, [<span class="pl-s"><span class="pl-pds">"</span>x1<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>x2<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>x3<span class="pl-pds">"</span></span>])
<span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>Coefficientss: <span class="pl-v">$(reg<span class="pl-k">.</span>b)</span><span class="pl-pds">"</span></span>)
<span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>R-Squared: <span class="pl-v">$(reg<span class="pl-k">.</span>R2)</span><span class="pl-pds">"</span></span>)
<span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>F-Statistic: <span class="pl-v">$(reg<span class="pl-k">.</span>F)</span><span class="pl-pds">"</span></span>)
<span class="pl-c1">summary</span>(reg)</pre></div>
<p>All available output:</p>
<ul>
<li>b::Array{Float, 1} - Coefficients that minimize squared error</li>
<li>nobs::Int - Number of observations</li>
<li>ncoef::Int - Number of coefficients</li>
<li>df_e::Int - Degrees of freedom in error</li>
<li>df_r::Int - Degrees of freedom in result</li>
<li>er::Array - Error vector</li>
<li>sse::Float - Sum of the squared errors</li>
<li>se::Array{Float, 1} - Standard Error (deviation)</li>
<li>t::Array{Float} - T-statistic vector (one for each xi)</li>
<li>#p::Array - T-statistic p-value (not implemented)</li>
<li>R2::Float - R-Squared</li>
<li>R2adj::Float - Adjusted R-Squared (based on how many dof)</li>
<li>F::Float - F-statistic (one for each xi)</li>
<li>#Fpv::Float - F-statistic p-value (not implemented)</li>
</ul>
</article></div>