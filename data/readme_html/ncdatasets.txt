<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-ncdatasets" class="anchor" aria-hidden="true" href="#ncdatasets"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>NCDatasets</h1>
<p dir="auto"><a href="https://github.com/Alexander-Barth/NCDatasets.jl/actions"><img src="https://github.com/Alexander-Barth/NCDatasets.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a>
<a href="http://app.codecov.io/github/Alexander-Barth/NCDatasets.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/42a91f3b86366dba9571b4696694e5329e1789cf3b87458bef20c409804c0111/687474703a2f2f636f6465636f762e696f2f6769746875622f416c6578616e6465722d42617274682f4e4344617461736574732e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/Alexander-Barth/NCDatasets.jl/coverage.svg?branch=master" style="max-width: 100%;"></a>
<a href="https://alexander-barth.github.io/NCDatasets.jl/stable/" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="documentation stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://alexander-barth.github.io/NCDatasets.jl/dev/" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="documentation dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a></p>
<p dir="auto"><code>NCDatasets</code> allows one to read and create netCDF files.
NetCDF data set and attribute list behave like Julia dictionaries and variables like Julia arrays. This package implements the <a href="https://github.com/JuliaGeo/CommonDataModel.jl">CommonDataModel.jl</a> interface, which mean that the datasets can be accessed in the same way as GRIB files opened with <a href="https://github.com/JuliaGeo/GRIBDatasets.jl">GRIBDatasets.jl</a>.</p>
<p dir="auto">The module <code>NCDatasets</code> provides support for the following <a href="http://cfconventions.org/" rel="nofollow">netCDF CF conventions</a>:</p>
<ul dir="auto">
<li><code>_FillValue</code> will be returned as <code>missing</code> (<a href="https://docs.julialang.org/en/v1/manual/missing/" rel="nofollow">more information</a>)</li>
<li><code>scale_factor</code> and <code>add_offset</code> are applied if present</li>
<li>time variables (recognized by the <code>units</code> attribute) are returned as <code>DateTime</code> objects.</li>
<li>Support of the <a href="http://cfconventions.org/Data/cf-conventions/cf-conventions-1.7/cf-conventions.html#calendar" rel="nofollow">CF calendars</a> (standard, gregorian, proleptic gregorian, julian, all leap, no leap, 360 day)</li>
<li>The raw data can also be accessed (without the transformations above).</li>
<li><a href="http://cfconventions.org/Data/cf-conventions/cf-conventions-1.7/cf-conventions.html#_contiguous_ragged_array_representation" rel="nofollow">Contiguous ragged array representation</a></li>
</ul>
<p dir="auto">Other features include:</p>
<ul dir="auto">
<li>Support for NetCDF 4 compression and variable-length arrays (i.e. arrays of vectors where each vector can have potentailly a different length)</li>
<li>The module also includes an utility function <a href="https://alexander-barth.github.io/NCDatasets.jl/stable/dataset/#NCDatasets.ncgen" rel="nofollow"><code>ncgen</code></a> which generates the Julia code that would produce a netCDF file with the same metadata as a template netCDF file.</li>
</ul>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">Inside the Julia shell, you can download and install the package by issuing:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Pkg
Pkg.add(&quot;NCDatasets&quot;)"><pre><span class="pl-k">using</span> Pkg
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>NCDatasets<span class="pl-pds">"</span></span>)</pre></div>
<h1 dir="auto"><a id="user-content-manual" class="anchor" aria-hidden="true" href="#manual"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Manual</h1>
<p dir="auto">This Manual is a quick introduction in using NCDatasets.jl. For more details you can read the <a href="https://alexander-barth.github.io/NCDatasets.jl/stable/" rel="nofollow">stable</a> or <a href="https://alexander-barth.github.io/NCDatasets.jl/latest/" rel="nofollow">latest</a> documentation.</p>
<ul dir="auto">
<li><a href="#explore-the-content-of-a-netcdf-file">Explore the content of a netCDF file</a></li>
<li><a href="#load-a-netcdf-file">Load a netCDF file</a></li>
<li><a href="#create-a-netcdf-file">Create a netCDF file</a></li>
<li><a href="#edit-an-existing-netcdf-file">Edit an existing netCDF file</a></li>
</ul>
<h2 dir="auto"><a id="user-content-explore-the-content-of-a-netcdf-file" class="anchor" aria-hidden="true" href="#explore-the-content-of-a-netcdf-file"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Explore the content of a netCDF file</h2>
<p dir="auto">Before reading the data from a netCDF file, it is often useful to explore the list of variables and attributes defined in it.</p>
<p dir="auto">For interactive use, the following commands (without ending semicolon) display the content of the file similarly to <code>ncdump -h file.nc</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using NCDatasets
ds = Dataset(&quot;file.nc&quot;)"><pre><span class="pl-k">using</span> NCDatasets
ds <span class="pl-k">=</span> <span class="pl-c1">Dataset</span>(<span class="pl-s"><span class="pl-pds">"</span>file.nc<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">This creates the central structure of NCDatasets.jl, <code>Dataset</code>, which represents the contents of the netCDF file (without immediatelly loading everything in memory). <code>NCDataset</code> is an alias for <code>Dataset</code>.</p>
<p dir="auto">The following displays the information just for the variable <code>varname</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="ds[&quot;varname&quot;]"><pre>ds[<span class="pl-s"><span class="pl-pds">"</span>varname<span class="pl-pds">"</span></span>]</pre></div>
<p dir="auto">while to get the global attributes you can do:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="ds.attrib"><pre>ds<span class="pl-k">.</span>attrib</pre></div>
<p dir="auto">which produces a listing like:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="Dataset: file.nc
Group: /

Dimensions
   time = 115

Variables
  time   (115)
    Datatype:    Float64
    Dimensions:  time
    Attributes:
     calendar             = gregorian
     standard_name        = time
     units                = days since 1950-01-01 00:00:00
[...]"><pre class="notranslate"><code>Dataset: file.nc
Group: /

Dimensions
   time = 115

Variables
  time   (115)
    Datatype:    Float64
    Dimensions:  time
    Attributes:
     calendar             = gregorian
     standard_name        = time
     units                = days since 1950-01-01 00:00:00
[...]
</code></pre></div>
<h2 dir="auto"><a id="user-content-load-a-netcdf-file" class="anchor" aria-hidden="true" href="#load-a-netcdf-file"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Load a netCDF file</h2>
<p dir="auto">Loading a variable with known structure can be achieved by accessing the variables and attributes directly by their name.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# The mode &quot;r&quot; stands for read-only. The mode &quot;r&quot; is the default mode and the parameter can be omitted.
ds = Dataset(&quot;/tmp/test.nc&quot;,&quot;r&quot;)
v = ds[&quot;temperature&quot;]

# load a subset
subdata = v[10:30,30:5:end]

# load all data
data = v[:,:]

# load all data ignoring attributes like scale_factor, add_offset, _FillValue and time units
data2 = v.var[:,:]


# load an attribute
unit = v.attrib[&quot;units&quot;]
close(ds)"><pre><span class="pl-c"><span class="pl-c">#</span> The mode "r" stands for read-only. The mode "r" is the default mode and the parameter can be omitted.</span>
ds <span class="pl-k">=</span> <span class="pl-c1">Dataset</span>(<span class="pl-s"><span class="pl-pds">"</span>/tmp/test.nc<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>r<span class="pl-pds">"</span></span>)
v <span class="pl-k">=</span> ds[<span class="pl-s"><span class="pl-pds">"</span>temperature<span class="pl-pds">"</span></span>]

<span class="pl-c"><span class="pl-c">#</span> load a subset</span>
subdata <span class="pl-k">=</span> v[<span class="pl-c1">10</span><span class="pl-k">:</span><span class="pl-c1">30</span>,<span class="pl-c1">30</span><span class="pl-k">:</span><span class="pl-c1">5</span><span class="pl-k">:</span><span class="pl-c1">end</span>]

<span class="pl-c"><span class="pl-c">#</span> load all data</span>
data <span class="pl-k">=</span> v[:,:]

<span class="pl-c"><span class="pl-c">#</span> load all data ignoring attributes like scale_factor, add_offset, _FillValue and time units</span>
data2 <span class="pl-k">=</span> v<span class="pl-k">.</span>var[:,:]


<span class="pl-c"><span class="pl-c">#</span> load an attribute</span>
unit <span class="pl-k">=</span> v<span class="pl-k">.</span>attrib[<span class="pl-s"><span class="pl-pds">"</span>units<span class="pl-pds">"</span></span>]
<span class="pl-c1">close</span>(ds)</pre></div>
<p dir="auto">In the example above, the subset can also be loaded with:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="subdata = Dataset(&quot;/tmp/test.nc&quot;)[&quot;temperature&quot;][10:30,30:5:end]"><pre>subdata <span class="pl-k">=</span> <span class="pl-c1">Dataset</span>(<span class="pl-s"><span class="pl-pds">"</span>/tmp/test.nc<span class="pl-pds">"</span></span>)[<span class="pl-s"><span class="pl-pds">"</span>temperature<span class="pl-pds">"</span></span>][<span class="pl-c1">10</span><span class="pl-k">:</span><span class="pl-c1">30</span>,<span class="pl-c1">30</span><span class="pl-k">:</span><span class="pl-c1">5</span><span class="pl-k">:</span><span class="pl-c1">end</span>]</pre></div>
<p dir="auto">This might be useful in an interactive session. However, the file <code>test.nc</code> is not directly closed (closing the file will be triggered by Julia's garbage collector), which can be a problem if you open many files. On Linux the number of opened files is often limited to 1024 (soft limit). If you write to a file, you should also always close the file to make sure that the data is properly written to the disk.</p>
<p dir="auto">An alternative way to ensure the file has been closed is to use a <code>do</code> block: the file will be closed automatically when leaving the block.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="data = Dataset(filename,&quot;r&quot;) do ds
    ds[&quot;temperature&quot;][:,:]
end # ds is closed"><pre>data <span class="pl-k">=</span> <span class="pl-c1">Dataset</span>(filename,<span class="pl-s"><span class="pl-pds">"</span>r<span class="pl-pds">"</span></span>) <span class="pl-k">do</span> ds
    ds[<span class="pl-s"><span class="pl-pds">"</span>temperature<span class="pl-pds">"</span></span>][:,:]
<span class="pl-k">end</span> <span class="pl-c"><span class="pl-c">#</span> ds is closed</span></pre></div>
<h2 dir="auto"><a id="user-content-create-a-netcdf-file" class="anchor" aria-hidden="true" href="#create-a-netcdf-file"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Create a netCDF file</h2>
<p dir="auto">The following gives an example of how to create a netCDF file by defining dimensions, variables and attributes.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using NCDatasets
using DataStructures
# This creates a new NetCDF file /tmp/test.nc.
# The mode &quot;c&quot; stands for creating a new file (clobber)
ds = Dataset(&quot;/tmp/test.nc&quot;,&quot;c&quot;)

# Define the dimension &quot;lon&quot; and &quot;lat&quot; with the size 100 and 110 resp.
defDim(ds,&quot;lon&quot;,100)
defDim(ds,&quot;lat&quot;,110)

# Define a global attribute
ds.attrib[&quot;title&quot;] = &quot;this is a test file&quot;

# Define the variables temperature with the attribute units
v = defVar(ds,&quot;temperature&quot;,Float32,(&quot;lon&quot;,&quot;lat&quot;), attrib = OrderedDict(
    &quot;units&quot; =&gt; &quot;degree Celsius&quot;))

# add additional attributes
v.attrib[&quot;comments&quot;] = &quot;this is a string attribute with Unicode Ω ∈ ∑ ∫ f(x) dx&quot;

# Generate some example data
data = [Float32(i+j) for i = 1:100, j = 1:110]

# write a single column
v[:,1] = data[:,1]

# write a the complete data set
v[:,:] = data

close(ds)"><pre><span class="pl-k">using</span> NCDatasets
<span class="pl-k">using</span> DataStructures
<span class="pl-c"><span class="pl-c">#</span> This creates a new NetCDF file /tmp/test.nc.</span>
<span class="pl-c"><span class="pl-c">#</span> The mode "c" stands for creating a new file (clobber)</span>
ds <span class="pl-k">=</span> <span class="pl-c1">Dataset</span>(<span class="pl-s"><span class="pl-pds">"</span>/tmp/test.nc<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>c<span class="pl-pds">"</span></span>)

<span class="pl-c"><span class="pl-c">#</span> Define the dimension "lon" and "lat" with the size 100 and 110 resp.</span>
<span class="pl-c1">defDim</span>(ds,<span class="pl-s"><span class="pl-pds">"</span>lon<span class="pl-pds">"</span></span>,<span class="pl-c1">100</span>)
<span class="pl-c1">defDim</span>(ds,<span class="pl-s"><span class="pl-pds">"</span>lat<span class="pl-pds">"</span></span>,<span class="pl-c1">110</span>)

<span class="pl-c"><span class="pl-c">#</span> Define a global attribute</span>
ds<span class="pl-k">.</span>attrib[<span class="pl-s"><span class="pl-pds">"</span>title<span class="pl-pds">"</span></span>] <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>this is a test file<span class="pl-pds">"</span></span>

<span class="pl-c"><span class="pl-c">#</span> Define the variables temperature with the attribute units</span>
v <span class="pl-k">=</span> <span class="pl-c1">defVar</span>(ds,<span class="pl-s"><span class="pl-pds">"</span>temperature<span class="pl-pds">"</span></span>,Float32,(<span class="pl-s"><span class="pl-pds">"</span>lon<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>lat<span class="pl-pds">"</span></span>), attrib <span class="pl-k">=</span> <span class="pl-c1">OrderedDict</span>(
    <span class="pl-s"><span class="pl-pds">"</span>units<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>degree Celsius<span class="pl-pds">"</span></span>))

<span class="pl-c"><span class="pl-c">#</span> add additional attributes</span>
v<span class="pl-k">.</span>attrib[<span class="pl-s"><span class="pl-pds">"</span>comments<span class="pl-pds">"</span></span>] <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>this is a string attribute with Unicode Ω ∈ ∑ ∫ f(x) dx<span class="pl-pds">"</span></span>

<span class="pl-c"><span class="pl-c">#</span> Generate some example data</span>
data <span class="pl-k">=</span> [<span class="pl-c1">Float32</span>(i<span class="pl-k">+</span>j) <span class="pl-k">for</span> i <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">100</span>, j <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">110</span>]

<span class="pl-c"><span class="pl-c">#</span> write a single column</span>
v[:,<span class="pl-c1">1</span>] <span class="pl-k">=</span> data[:,<span class="pl-c1">1</span>]

<span class="pl-c"><span class="pl-c">#</span> write a the complete data set</span>
v[:,:] <span class="pl-k">=</span> data

<span class="pl-c1">close</span>(ds)</pre></div>
<h2 dir="auto"><a id="user-content-edit-an-existing-netcdf-file" class="anchor" aria-hidden="true" href="#edit-an-existing-netcdf-file"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Edit an existing netCDF file</h2>
<p dir="auto">When you need to modify variables or attributes in a netCDF file, you have
to open it with the <code>"a"</code> option. Here, for example, we add a global attribute <em>creator</em> to the
file created in the previous step.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="ds = Dataset(&quot;/tmp/test.nc&quot;,&quot;a&quot;)
ds.attrib[&quot;creator&quot;] = &quot;your name&quot;
close(ds);"><pre>ds <span class="pl-k">=</span> <span class="pl-c1">Dataset</span>(<span class="pl-s"><span class="pl-pds">"</span>/tmp/test.nc<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>a<span class="pl-pds">"</span></span>)
ds<span class="pl-k">.</span>attrib[<span class="pl-s"><span class="pl-pds">"</span>creator<span class="pl-pds">"</span></span>] <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>your name<span class="pl-pds">"</span></span>
<span class="pl-c1">close</span>(ds);</pre></div>
<h1 dir="auto"><a id="user-content-benchmark" class="anchor" aria-hidden="true" href="#benchmark"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Benchmark</h1>
<p dir="auto">The benchmark loads a variable of the size 1000x500x100 in slices of 1000x500
(applying the scaling of the CF conventions)
and computes the maximum of each slice and the average of each maximum over all slices.
This operation is repeated 100 times.
The code is available at <a href="https://github.com/Alexander-Barth/NCDatasets.jl/tree/master/test/perf">https://github.com/Alexander-Barth/NCDatasets.jl/tree/master/test/perf</a> .</p>
<table>
<thead>
<tr>
<th align="left">Module</th>
<th align="right">median</th>
<th align="right">minimum</th>
<th align="right">mean</th>
<th align="right">std. dev.</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left">R-ncdf4</td>
<td align="right">0.572</td>
<td align="right">0.550</td>
<td align="right">0.575</td>
<td align="right">0.023</td>
</tr>
<tr>
<td align="left">python-netCDF4</td>
<td align="right">0.504</td>
<td align="right">0.498</td>
<td align="right">0.505</td>
<td align="right">0.003</td>
</tr>
<tr>
<td align="left">julia-NCDatasets</td>
<td align="right">0.228</td>
<td align="right">0.212</td>
<td align="right">0.226</td>
<td align="right">0.005</td>
</tr>
</tbody>
</table>
<p dir="auto">All runtimes are in seconds.
Julia 1.6.0 (with NCDatasets b953bf5), R 3.4.4 (with ncdf4 1.17) and Python 3.6.9 (with netCDF4 1.5.4).
This CPU is a i7-7700.</p>
<h1 dir="auto"><a id="user-content-filing-an-issue" class="anchor" aria-hidden="true" href="#filing-an-issue"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Filing an issue</h1>
<p dir="auto">When you file an issue, please include sufficient information that would <em>allow somebody else to reproduce the issue</em>, in particular:</p>
<ol dir="auto">
<li>Provide the code that generates the issue.</li>
<li>If necessary to run your code, provide the used netCDF file(s).</li>
<li>Make your code and netCDF file(s) as simple as possible (while still showing the error and being runnable). A big thank you for the 5-star-premium-gold users who do not forget this point! <g-emoji class="g-emoji" alias="+1" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f44d.png">👍</g-emoji><g-emoji class="g-emoji" alias="medal_sports" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f3c5.png">🏅</g-emoji><g-emoji class="g-emoji" alias="trophy" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f3c6.png">🏆</g-emoji></li>
<li>The full error message that you are seeing (in particular file names and line numbers of the stack-trace).</li>
<li>Which version of Julia and <code>NCDatasets</code> are you using? Please include the output of:</li>
</ol>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="versioninfo()
using Pkg
Pkg.installed()[&quot;NCDatasets&quot;]"><pre class="notranslate"><code>versioninfo()
using Pkg
Pkg.installed()["NCDatasets"]
</code></pre></div>
<ol start="6" dir="auto">
<li>Does <code>NCDatasets</code> pass its test suite? Please include the output of:</li>
</ol>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Pkg
Pkg.test(&quot;NCDatasets&quot;)"><pre><span class="pl-k">using</span> Pkg
Pkg<span class="pl-k">.</span><span class="pl-c1">test</span>(<span class="pl-s"><span class="pl-pds">"</span>NCDatasets<span class="pl-pds">"</span></span>)</pre></div>
<h1 dir="auto"><a id="user-content-alternative" class="anchor" aria-hidden="true" href="#alternative"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Alternative</h1>
<p dir="auto">The package <a href="https://github.com/JuliaGeo/NetCDF.jl">NetCDF.jl</a> from Fabian Gans and contributors is an alternative to this package which supports a more Matlab/Octave-like interface for reading and writing NetCDF files.</p>
<h1 dir="auto"><a id="user-content-credits" class="anchor" aria-hidden="true" href="#credits"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Credits</h1>
<p dir="auto"><code>netcdf_c.jl</code>, <code>build.jl</code> and the error handling code of the NetCDF C API are from NetCDF.jl by Fabian Gans (Max-Planck-Institut für Biogeochemie, Jena, Germany) released under the MIT license.</p>





</article></div>