<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-sodshocktube" class="anchor" aria-hidden="true" href="#sodshocktube"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>SodShockTube</h1>
<p dir="auto"><a href="https://github.com/archermarx/SodShockTube.jl/actions"><img src="https://github.com/archermarx/SodShockTube.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a></p>
<p dir="auto">This is a pure-Julia implementation of the python Sod Shock tube solver by ibackus (<a href="https://github.com/ibackus/sod-shocktube">https://github.com/ibackus/sod-shocktube</a>), which is "a fork of the Riemann solver implemented at <a href="https://gitlab.com/fantaz/Riemann_exact" rel="nofollow">https://gitlab.com/fantaz/Riemann_exact</a>, which is itself just a pythonic clone of the fortran code by Bruce Fryxell."</p>
<p dir="auto">The Sod Shock Tube Problem is a standard test problem in computational fluid dynamics. It is especially useful in the development of shock-capturing numerical schemes. This package allows users to set up and run Sod Shock Tube problems with user-configurable geometry and user-defined left and right states.</p>
<h1 dir="auto"><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example</h1>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="
# Set up a shock tube problem
problem = ShockTubeProblem(
    geometry = (0.0, 1.0, 0.5), # left edge, right edge, initial shock location
    left_state = (ρ = 1.0, u = 0.0, p = 1.0),
    right_state = (ρ = 0.125, u = 0.0, p = 0.1),
    t = 0.1,
    γ = 1.4
);

xs = LinRange(0.0, 1.0, 500); # x locations at which to solve

positions, regions, values = solve(problem, xs);"><pre><span class="pl-c"><span class="pl-c">#</span> Set up a shock tube problem</span>
problem <span class="pl-k">=</span> <span class="pl-c1">ShockTubeProblem</span>(
    geometry <span class="pl-k">=</span> (<span class="pl-c1">0.0</span>, <span class="pl-c1">1.0</span>, <span class="pl-c1">0.5</span>), <span class="pl-c"><span class="pl-c">#</span> left edge, right edge, initial shock location</span>
    left_state <span class="pl-k">=</span> (ρ <span class="pl-k">=</span> <span class="pl-c1">1.0</span>, u <span class="pl-k">=</span> <span class="pl-c1">0.0</span>, p <span class="pl-k">=</span> <span class="pl-c1">1.0</span>),
    right_state <span class="pl-k">=</span> (ρ <span class="pl-k">=</span> <span class="pl-c1">0.125</span>, u <span class="pl-k">=</span> <span class="pl-c1">0.0</span>, p <span class="pl-k">=</span> <span class="pl-c1">0.1</span>),
    t <span class="pl-k">=</span> <span class="pl-c1">0.1</span>,
    γ <span class="pl-k">=</span> <span class="pl-c1">1.4</span>
);

xs <span class="pl-k">=</span> <span class="pl-c1">LinRange</span>(<span class="pl-c1">0.0</span>, <span class="pl-c1">1.0</span>, <span class="pl-c1">500</span>); <span class="pl-c"><span class="pl-c">#</span> x locations at which to solve</span>

positions, regions, values <span class="pl-k">=</span> <span class="pl-c1">solve</span>(problem, xs);</pre></div>
<p dir="auto">This should give the following result</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; positions
Dict{String, Float64} with 4 entries:
  &quot;Shock&quot;                 =&gt; 1.17522
  &quot;Foot of rarefaction&quot;   =&gt; 0.992973
  &quot;Head of rarefaction&quot;   =&gt; 0.881678
  &quot;Contact Discontinuity&quot; =&gt; 1.09275

julia&gt; regions
Dict{String, Any} with 5 entries:
  &quot;Region 5&quot; =&gt; (0.1, 0.125, 0.0)
  &quot;Region 1&quot; =&gt; (1.0, 1.0, 0.0)
  &quot;Region 4&quot; =&gt; (0.30313, 0.265574, 0.927453)
  &quot;Region 3&quot; =&gt; (0.30313, 0.426319, 0.927453)
  &quot;Region 2&quot; =&gt; &quot;RAREFACTION&quot;"><pre lang="julia-repl" class="notranslate"><code>julia&gt; positions
Dict{String, Float64} with 4 entries:
  "Shock"                 =&gt; 1.17522
  "Foot of rarefaction"   =&gt; 0.992973
  "Head of rarefaction"   =&gt; 0.881678
  "Contact Discontinuity" =&gt; 1.09275

julia&gt; regions
Dict{String, Any} with 5 entries:
  "Region 5" =&gt; (0.1, 0.125, 0.0)
  "Region 1" =&gt; (1.0, 1.0, 0.0)
  "Region 4" =&gt; (0.30313, 0.265574, 0.927453)
  "Region 3" =&gt; (0.30313, 0.426319, 0.927453)
  "Region 2" =&gt; "RAREFACTION"
</code></pre></div>
<p dir="auto">We can use Makie (or other plotting package of choice) to plot our result</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using CairoMakie
f = Figure(resolution = (1000, 1000))
ax_ρ = Axis(f[1,1], xlabel = &quot;x&quot;, ylabel = &quot;ρ&quot;, title = &quot;Density&quot;)
ax_u = Axis(f[2,1], xlabel = &quot;x&quot;, ylabel = &quot;u&quot;, title = &quot;Velocity&quot;)
ax_p = Axis(f[1,2], xlabel = &quot;x&quot;, ylabel = &quot;p&quot;, title = &quot;Pressure&quot;)
ax_E = Axis(f[2,2], xlabel = &quot;x&quot;, ylabel = &quot;E&quot;, title = &quot;Stagnation Energy&quot;)

opts = (;linewidth = 4)

lines!(ax_ρ, values.x, values.ρ; opts...)
lines!(ax_u, values.x, values.u; opts...)
lines!(ax_p, values.x, values.p; opts...)
lines!(ax_E, values.x, values.e; opts...)

display(f)"><pre><span class="pl-k">using</span> CairoMakie
f <span class="pl-k">=</span> <span class="pl-c1">Figure</span>(resolution <span class="pl-k">=</span> (<span class="pl-c1">1000</span>, <span class="pl-c1">1000</span>))
ax_ρ <span class="pl-k">=</span> <span class="pl-c1">Axis</span>(f[<span class="pl-c1">1</span>,<span class="pl-c1">1</span>], xlabel <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>x<span class="pl-pds">"</span></span>, ylabel <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>ρ<span class="pl-pds">"</span></span>, title <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>Density<span class="pl-pds">"</span></span>)
ax_u <span class="pl-k">=</span> <span class="pl-c1">Axis</span>(f[<span class="pl-c1">2</span>,<span class="pl-c1">1</span>], xlabel <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>x<span class="pl-pds">"</span></span>, ylabel <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>u<span class="pl-pds">"</span></span>, title <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>Velocity<span class="pl-pds">"</span></span>)
ax_p <span class="pl-k">=</span> <span class="pl-c1">Axis</span>(f[<span class="pl-c1">1</span>,<span class="pl-c1">2</span>], xlabel <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>x<span class="pl-pds">"</span></span>, ylabel <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>p<span class="pl-pds">"</span></span>, title <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>Pressure<span class="pl-pds">"</span></span>)
ax_E <span class="pl-k">=</span> <span class="pl-c1">Axis</span>(f[<span class="pl-c1">2</span>,<span class="pl-c1">2</span>], xlabel <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>x<span class="pl-pds">"</span></span>, ylabel <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>E<span class="pl-pds">"</span></span>, title <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>Stagnation Energy<span class="pl-pds">"</span></span>)

opts <span class="pl-k">=</span> (;linewidth <span class="pl-k">=</span> <span class="pl-c1">4</span>)

<span class="pl-c1">lines!</span>(ax_ρ, values<span class="pl-k">.</span>x, values<span class="pl-k">.</span>ρ; opts<span class="pl-k">...</span>)
<span class="pl-c1">lines!</span>(ax_u, values<span class="pl-k">.</span>x, values<span class="pl-k">.</span>u; opts<span class="pl-k">...</span>)
<span class="pl-c1">lines!</span>(ax_p, values<span class="pl-k">.</span>x, values<span class="pl-k">.</span>p; opts<span class="pl-k">...</span>)
<span class="pl-c1">lines!</span>(ax_E, values<span class="pl-k">.</span>x, values<span class="pl-k">.</span>e; opts<span class="pl-k">...</span>)

<span class="pl-c1">display</span>(f)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/archermarx/SodShockTube.jl/blob/main/test/fig.png"><img src="https://github.com/archermarx/SodShockTube.jl/raw/main/test/fig.png" alt="" style="max-width: 100%;"></a></p>
</article></div>