<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-rectangle" class="anchor" aria-hidden="true" href="#rectangle"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Rectangle</h1>
<p><a href="https://travis-ci.org/sambitdash/Rectangle.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/6cb3f1535718cf73e780adcb278c71ed4207f00d/68747470733a2f2f7472617669732d63692e6f72672f73616d626974646173682f52656374616e676c652e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/sambitdash/Rectangle.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/sambitdash/rectangle-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/ab662eaa546cfabf9faab2105755af0f75ba8d87/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f767439693376316d6e646965376e6b773f7376673d74727565" alt="Build status" data-canonical-src="https://ci.appveyor.com/api/projects/status/vt9i3v1mndie7nkw?svg=true" style="max-width:100%;"></a>
<a href="http://codecov.io/github/sambitdash/Rectangle.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/0f2d52d36193a1f46f35aeff35baa3ec206eedac/687474703a2f2f636f6465636f762e696f2f6769746875622f73616d626974646173682f52656374616e676c652e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/sambitdash/Rectangle.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
<p>This is a simplified rectangle library for simple tasks with 2-D rectangles.
While the library will be enhanced for further functionalities, this will not be made to
work for higher dimensions. The numeric data types for most operations are preserved to the
extent practicable. However, where there is a natural affinity for the results to be <code>Float</code>
those are given emphasis. Currently the following methods are available.</p>
<h2><a id="user-content-methods-for-2-d-rectangles" class="anchor" aria-hidden="true" href="#methods-for-2-d-rectangles"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Methods for 2-D Rectangles</h2>
<ul>
<li><code>w(r)</code> - Width</li>
<li><code>h(r)</code> - Height</li>
<li><code>area(r)</code> - Area</li>
<li><code>perimeter(r)</code> - Perimeter</li>
<li>Lines methods for rectangle ABCD
<ul>
<li><code>vlines(r)</code> - returns line segments (AB, DC)</li>
<li><code>hlines(r)</code> - returns line segments (AD, BC)</li>
<li><code>lines(r)</code>  - returns line segments [AB, DC, AD, BC]</li>
<li><code>olines(r)</code> - returns line segments [AB, BC, CD, DA]</li>
<li><code>diags(r)</code>  - returns line segments [AC, BD]</li>
</ul>
</li>
<li><code>union(r1, r2)</code> - Union of two rectangles resulting in a larger rectangle.</li>
<li><code>intersect(r1, r2)</code> - Intersection of two rectangles.</li>
<li><code>intersects(r1, r2)</code> - If rectangle <code>r1</code> and <code>r2</code> intersect each other.</li>
<li><code>intersects(r, l)</code> - If rectangle <code>r</code> and line <code>l</code> intersect each other.</li>
<li><code>inside(p, r)</code> - Point <code>p</code> is inside rectangle <code>r</code></li>
<li><code>inside(ri, ro)</code> - Rectangle <code>ri</code> is fully enclosed in <code>ro</code></li>
<li><code>cg(r)</code> - Center of gravity of the rectangle <code>r</code></li>
<li><code>to_plot_shape(r)</code> - <code>Shape</code> object to be used in <code>Plots</code> library.</li>
<li><code>projectX(r1, r2)</code> - Find overlap regions when projected onto X-axis.</li>
<li><code>projectY(r1, r2)</code> - Find overlap regions when projected onto Y-axis</li>
<li><code>visibleX(r1, r2)</code>, <code>visibleY(r1, r2)</code> - Projects the rectangles along the X-axis
(Y-axis) and returns a rectangle area which is completely visible from both rectangles.</li>
<li><code>has_x_overlap(r1, r2)</code>, <code>has_y_overlap(r1, r2)</code> - If rectangles have overlap along the
x-direction (y-direction).</li>
<li><code>avg_min_dist(r1, r2)</code> - Rectangles are essentially point sets. Hence, one can
perceive existence of a minimum distance of one point in <code>r1</code> from <code>r2</code>. Similar, distance
would also exist for every point in <code>r2</code> from <code>r1</code>.</li>
<li><code>min_dist(r1, r2)</code> - The gap between two rectangular regions. If there is overlap along a
specific direction 0 will be returned.</li>
<li><code>create_ordered_map(rects, values; dir=1, reverseMax=zero(T))</code> - Ordered list of
rectangles and associate data values. <code>dir=1</code> orders the rectangles
by <code>x-axis</code> first and <code>2</code> by <code>y-axis</code>. <code>reverseMax</code> parameter provides the primary index
to be sorted by reverse order. If the value of <code>reverseMax &gt; zero(T)</code> then the ranges are
subtracted from the range parameters so that they are sorted in a reverse order. This is
particularly useful to return values of intersect in a reverse order from top to bottom
or right to left.</li>
<li><code>intersect(ordered_rect_map, rect)</code> - Return all the values for rectangles that intersect
with <code>rect</code>.</li>
<li><code>insert_rect!(ordered_rect_map, rect, value)</code> - Insert value associated with the <code>rect</code>.</li>
<li><code>delete_rect!(ordered_rect_map, rect)</code> - Delete associated value for the <code>rect</code>. Returns
the associated value.</li>
<li><code>vline_xsection(rect, vlines)</code> - Given a Rectangle and a set of already
sorted set of vertical lines ordered left to right, provides the indices that
intersect the rectangle.</li>
<li><code>hline_xsection(rect, hlines)</code> - Given a Rectangle and a set of a sorted set
of horizontal lines ordered top to bottom, provides the indices that intersect
the rectangle.</li>
</ul>
<h2><a id="user-content-methods-for-2-d-lines" class="anchor" aria-hidden="true" href="#methods-for-2-d-lines"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Methods for 2-D Lines</h2>
<ul>
<li><code>Line</code> - Representation of a line in 2-D.</li>
<li><code>isHorizontal(l)</code>, <code>isVertical(l)</code> - Returns if the line are horizontal or vertical</li>
<li><code>length(l)</code> - Length of the line</li>
<li><code>reverse(l)</code> - for a line AB returns line BA.</li>
<li><code>parallelogram_area(l, p)</code> - The area formed by the parallelogram formed by the line and
a point.</li>
<li><code>ratio(l,p)</code> - if point <code>p</code> lies on line <code>l</code>, then it will divide the line at a ratio
<code>r : (1-r)</code> otherwise <code>nothing</code></li>
<li><code>div(l, r)</code> - the point that divides the line <code>l</code> at ratio <code>r : (1-r)</code></li>
<li><code>intersects(l1, l2)</code> - if line <code>l1</code> intersects <code>l2</code>.</li>
<li><code>vert_asc(l1, l2)</code> - <code>isless</code> function  that can be used to sort vertical lines
in ascending order (left to right).</li>
<li><code>horiz_desc(l1, l2)</code> - <code>isless</code> function  that can be used to sort horizonal
lines in descending order (top to bottom).</li>
</ul>
<h2><a id="user-content-methods-for-commonly-used-data-structures" class="anchor" aria-hidden="true" href="#methods-for-commonly-used-data-structures"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Methods for Commonly Used Data Structures</h2>
<p>Searching and sorting the data are very common with simple geometrical objects like lines
and rectangles in 2-D. Hence, simplified implementations of the following data structures
are provided here. If you are looking out for more elaborate packages you can look at
<code>DataStructures.jl</code> or other such advanced data structure packages. Currently, only
<code>insert!</code> and <code>delete!</code> operations are supported.</p>
<h3><a id="user-content-binary-search-tree" class="anchor" aria-hidden="true" href="#binary-search-tree"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Binary Search Tree</h3>
<h3><a id="user-content-red-and-black-tree" class="anchor" aria-hidden="true" href="#red-and-black-tree"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Red and Black Tree</h3>
<h3><a id="user-content-interval-tree" class="anchor" aria-hidden="true" href="#interval-tree"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Interval Tree</h3>
<h2><a id="user-content-contribution" class="anchor" aria-hidden="true" href="#contribution"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Contribution</h2>
<p>Pull Requests and Issues are ways to submit changes and enhancements.</p>
</article></div>