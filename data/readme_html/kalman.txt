<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p dir="auto"><a href="https://travis-ci.org/mschauer/Kalman.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/4d119ff89ff46f36bb8e068beb89b81f82e3ddbcadb2b2a96c65b88554816c28/68747470733a2f2f7472617669732d63692e6f72672f6d736368617565722f4b616c6d616e2e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/mschauer/Kalman.jl.svg?branch=master" style="max-width: 100%;"></a></p>
<p dir="auto"><a href="https://mschauer.github.io/Kalman.jl/latest/" rel="nofollow"><img src="https://camo.githubusercontent.com/56f8252ba8e9d3f0b810769543f77823d2fe031ce560d4c2d69fb1fcad800383/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6c61746573742d626c75652e737667" alt="Latest" data-canonical-src="https://img.shields.io/badge/docs-latest-blue.svg" style="max-width: 100%;"></a></p>
<h1 dir="auto"><a id="user-content-kalman" class="anchor" aria-hidden="true" href="#kalman"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Kalman</h1>
<p dir="auto">Flexible filtering and smoothing in Julia. <code>Kalman</code> uses <a href="https://github.com/mschauer/DynamicIterators.jl"><code>DynamicIterators</code></a> (an iterator protocol for dynamic data dependent and controlled processes) and
<a href="https://github.com/mschauer/GaussianDistributions.jl"><code>GaussianDistributions</code></a> (Gaussian distributions as abstraction for the uncertain state)
to implement flexible online Kalman filtering.</p>
<p dir="auto">The package provides tools to filter and smooth and conditionally sample the state space system</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="x[k] = Φx[k−1] + b + w[k],    w[k] ∼ N(0, Q)

y[k] = Hx[k] + v[k],    v[k] ∼ N(0, R)"><pre class="notranslate"><code>x[k] = Φx[k−1] + b + w[k],    w[k] ∼ N(0, Q)

y[k] = Hx[k] + v[k],    v[k] ∼ N(0, R)
</code></pre></div>
<h2 dir="auto"><a id="user-content-how-to-use" class="anchor" aria-hidden="true" href="#how-to-use"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>How to use</h2>
<p dir="auto">One way, and maybe <em>the</em> way, to use this package is to use <code>Gaussian</code> from <code>GaussianDistributions.jl</code> as representation of mean and uncertainty of a filter and call <code>Kalman.correct</code> to implement the correction step in a Kalman filter:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Kalman, GaussianDistributions, LinearAlgebra
using GaussianDistributions: ⊕ # independent sum of Gaussian r.v.
using Statistics

# prior for time 0
x0 = [-1., 1.]
P0 = Matrix(1.0I, 2, 2)

# dynamics
Φ = [0.8 0.2; -0.1 0.8]
b = zeros(2)
Q = [0.2 0.0; 0.0 0.5]

# observation
H = [1.0 0.0]
R = Matrix(0.3I, 1, 1)

# (mock) data
ys = [[-1.77], [-0.78], [-1.28], [-1.06], [-3.65], [-2.47], [-0.06], [-0.91], [-0.80], [1.48]]


# filter (assuming first observation at time 1)
N = length(ys)

p = Gaussian(x0, P0)
ps = [p] # vector of filtered Gaussians
for i in 1:N
    global p
    # predict
    p = Φ*p ⊕ Gaussian(zero(x0), Q) #same as Gaussian(Φ*p.μ, Φ*p.Σ*Φ' + Q)
    # correct
    p, yres, _ = Kalman.correct(Kalman.JosephForm(), p, (Gaussian(ys[i], R), H))
    push!(ps, p) # save filtered density
end

using Plots

p1 = scatter(1:N, first.(ys), color=&quot;red&quot;, label=&quot;observations y&quot;)
plot!(p1, 0:N, [mean(p)[1] for p in ps], color=&quot;orange&quot;, label=&quot;filtered x1&quot;, grid=false, ribbon=[sqrt(cov(p)[1,1]) for p in ps], fillalpha=.5)
plot!(p1, 0:N, [mean(p)[2] for p in ps], color=&quot;blue&quot;, label=&quot;filtered x2&quot;, grid=false, ribbon=[sqrt(cov(p)[2,2]) for p in ps], fillalpha=.5)

savefig(p1, &quot;filter.png&quot;)"><pre><span class="pl-k">using</span> Kalman, GaussianDistributions, LinearAlgebra
<span class="pl-k">using</span> GaussianDistributions<span class="pl-k">:</span> ⊕ <span class="pl-c"><span class="pl-c">#</span> independent sum of Gaussian r.v.</span>
<span class="pl-k">using</span> Statistics

<span class="pl-c"><span class="pl-c">#</span> prior for time 0</span>
x0 <span class="pl-k">=</span> [<span class="pl-k">-</span><span class="pl-c1">1.</span>, <span class="pl-c1">1.</span>]
P0 <span class="pl-k">=</span> <span class="pl-c1">Matrix</span>(<span class="pl-c1">1.0</span>I, <span class="pl-c1">2</span>, <span class="pl-c1">2</span>)

<span class="pl-c"><span class="pl-c">#</span> dynamics</span>
Φ <span class="pl-k">=</span> [<span class="pl-c1">0.8</span> <span class="pl-c1">0.2</span>; <span class="pl-k">-</span><span class="pl-c1">0.1</span> <span class="pl-c1">0.8</span>]
b <span class="pl-k">=</span> <span class="pl-c1">zeros</span>(<span class="pl-c1">2</span>)
Q <span class="pl-k">=</span> [<span class="pl-c1">0.2</span> <span class="pl-c1">0.0</span>; <span class="pl-c1">0.0</span> <span class="pl-c1">0.5</span>]

<span class="pl-c"><span class="pl-c">#</span> observation</span>
H <span class="pl-k">=</span> [<span class="pl-c1">1.0</span> <span class="pl-c1">0.0</span>]
R <span class="pl-k">=</span> <span class="pl-c1">Matrix</span>(<span class="pl-c1">0.3</span>I, <span class="pl-c1">1</span>, <span class="pl-c1">1</span>)

<span class="pl-c"><span class="pl-c">#</span> (mock) data</span>
ys <span class="pl-k">=</span> [[<span class="pl-k">-</span><span class="pl-c1">1.77</span>], [<span class="pl-k">-</span><span class="pl-c1">0.78</span>], [<span class="pl-k">-</span><span class="pl-c1">1.28</span>], [<span class="pl-k">-</span><span class="pl-c1">1.06</span>], [<span class="pl-k">-</span><span class="pl-c1">3.65</span>], [<span class="pl-k">-</span><span class="pl-c1">2.47</span>], [<span class="pl-k">-</span><span class="pl-c1">0.06</span>], [<span class="pl-k">-</span><span class="pl-c1">0.91</span>], [<span class="pl-k">-</span><span class="pl-c1">0.80</span>], [<span class="pl-c1">1.48</span>]]


<span class="pl-c"><span class="pl-c">#</span> filter (assuming first observation at time 1)</span>
N <span class="pl-k">=</span> <span class="pl-c1">length</span>(ys)

p <span class="pl-k">=</span> <span class="pl-c1">Gaussian</span>(x0, P0)
ps <span class="pl-k">=</span> [p] <span class="pl-c"><span class="pl-c">#</span> vector of filtered Gaussians</span>
<span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span>N
    <span class="pl-k">global</span> p
    <span class="pl-c"><span class="pl-c">#</span> predict</span>
    p <span class="pl-k">=</span> Φ<span class="pl-k">*</span>p ⊕ <span class="pl-c1">Gaussian</span>(<span class="pl-c1">zero</span>(x0), Q) <span class="pl-c"><span class="pl-c">#</span>same as Gaussian(Φ*p.μ, Φ*p.Σ*Φ' + Q)</span>
    <span class="pl-c"><span class="pl-c">#</span> correct</span>
    p, yres, _ <span class="pl-k">=</span> Kalman<span class="pl-k">.</span><span class="pl-c1">correct</span>(Kalman<span class="pl-k">.</span><span class="pl-c1">JosephForm</span>(), p, (<span class="pl-c1">Gaussian</span>(ys[i], R), H))
    <span class="pl-c1">push!</span>(ps, p) <span class="pl-c"><span class="pl-c">#</span> save filtered density</span>
<span class="pl-k">end</span>

<span class="pl-k">using</span> Plots

p1 <span class="pl-k">=</span> <span class="pl-c1">scatter</span>(<span class="pl-c1">1</span><span class="pl-k">:</span>N, <span class="pl-c1">first</span>.(ys), color<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>red<span class="pl-pds">"</span></span>, label<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>observations y<span class="pl-pds">"</span></span>)
<span class="pl-c1">plot!</span>(p1, <span class="pl-c1">0</span><span class="pl-k">:</span>N, [<span class="pl-c1">mean</span>(p)[<span class="pl-c1">1</span>] <span class="pl-k">for</span> p <span class="pl-k">in</span> ps], color<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>orange<span class="pl-pds">"</span></span>, label<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>filtered x1<span class="pl-pds">"</span></span>, grid<span class="pl-k">=</span><span class="pl-c1">false</span>, ribbon<span class="pl-k">=</span>[<span class="pl-c1">sqrt</span>(<span class="pl-c1">cov</span>(p)[<span class="pl-c1">1</span>,<span class="pl-c1">1</span>]) <span class="pl-k">for</span> p <span class="pl-k">in</span> ps], fillalpha<span class="pl-k">=</span>.<span class="pl-c1">5</span>)
<span class="pl-c1">plot!</span>(p1, <span class="pl-c1">0</span><span class="pl-k">:</span>N, [<span class="pl-c1">mean</span>(p)[<span class="pl-c1">2</span>] <span class="pl-k">for</span> p <span class="pl-k">in</span> ps], color<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>blue<span class="pl-pds">"</span></span>, label<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>filtered x2<span class="pl-pds">"</span></span>, grid<span class="pl-k">=</span><span class="pl-c1">false</span>, ribbon<span class="pl-k">=</span>[<span class="pl-c1">sqrt</span>(<span class="pl-c1">cov</span>(p)[<span class="pl-c1">2</span>,<span class="pl-c1">2</span>]) <span class="pl-k">for</span> p <span class="pl-k">in</span> ps], fillalpha<span class="pl-k">=</span>.<span class="pl-c1">5</span>)

<span class="pl-c1">savefig</span>(p1, <span class="pl-s"><span class="pl-pds">"</span>filter.png<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://raw.githubusercontent.com/mschauer/Kalman.jl/master/filter.png"><img src="https://raw.githubusercontent.com/mschauer/Kalman.jl/master/filter.png" alt="Filtered trajectory with uncertainty" style="max-width: 100%;"></a></p>
<p dir="auto">A very similar example of tracking a 2D trajectory can be found <a href="example/trajectory_tracking/kalman.jl">here</a>.</p>
<h2 dir="auto"><a id="user-content-interface" class="anchor" aria-hidden="true" href="#interface"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Interface</h2>
<p dir="auto">The same might be achieved using interface functions</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using DynamicIterators, GaussianDistributions, Kalman, LinearAlgebra

# Define linear evolution
Φ = [0.8 0.5; -0.1 0.8]
b = zeros(2)
Q = [0.2 0.0; 0.0 1.0]

E = LinearEvolution(Φ, Gaussian(b, Q))

# Define observation scheme
H = [1.0 0.0]
R = Matrix(1.0I, 1, 1)

O = LinearObservation(E, H, R)

# Prior
x0 = [1., 0.]
P0 = Matrix(1.0I, 2, 2)

# Observations (mock)
Y = [1 =&gt; [1.14326], 2 =&gt; [-0.271804], 3 =&gt; [-0.00512675]]

# Filter
Xf, ll = kalmanfilter(O, 0 =&gt; Gaussian(x0, P0), Y)
@show Xf
"><pre><span class="pl-k">using</span> DynamicIterators, GaussianDistributions, Kalman, LinearAlgebra

<span class="pl-c"><span class="pl-c">#</span> Define linear evolution</span>
Φ <span class="pl-k">=</span> [<span class="pl-c1">0.8</span> <span class="pl-c1">0.5</span>; <span class="pl-k">-</span><span class="pl-c1">0.1</span> <span class="pl-c1">0.8</span>]
b <span class="pl-k">=</span> <span class="pl-c1">zeros</span>(<span class="pl-c1">2</span>)
Q <span class="pl-k">=</span> [<span class="pl-c1">0.2</span> <span class="pl-c1">0.0</span>; <span class="pl-c1">0.0</span> <span class="pl-c1">1.0</span>]

E <span class="pl-k">=</span> <span class="pl-c1">LinearEvolution</span>(Φ, <span class="pl-c1">Gaussian</span>(b, Q))

<span class="pl-c"><span class="pl-c">#</span> Define observation scheme</span>
H <span class="pl-k">=</span> [<span class="pl-c1">1.0</span> <span class="pl-c1">0.0</span>]
R <span class="pl-k">=</span> <span class="pl-c1">Matrix</span>(<span class="pl-c1">1.0</span>I, <span class="pl-c1">1</span>, <span class="pl-c1">1</span>)

O <span class="pl-k">=</span> <span class="pl-c1">LinearObservation</span>(E, H, R)

<span class="pl-c"><span class="pl-c">#</span> Prior</span>
x0 <span class="pl-k">=</span> [<span class="pl-c1">1.</span>, <span class="pl-c1">0.</span>]
P0 <span class="pl-k">=</span> <span class="pl-c1">Matrix</span>(<span class="pl-c1">1.0</span>I, <span class="pl-c1">2</span>, <span class="pl-c1">2</span>)

<span class="pl-c"><span class="pl-c">#</span> Observations (mock)</span>
Y <span class="pl-k">=</span> [<span class="pl-c1">1</span> <span class="pl-k">=&gt;</span> [<span class="pl-c1">1.14326</span>], <span class="pl-c1">2</span> <span class="pl-k">=&gt;</span> [<span class="pl-k">-</span><span class="pl-c1">0.271804</span>], <span class="pl-c1">3</span> <span class="pl-k">=&gt;</span> [<span class="pl-k">-</span><span class="pl-c1">0.00512675</span>]]

<span class="pl-c"><span class="pl-c">#</span> Filter</span>
Xf, ll <span class="pl-k">=</span> <span class="pl-c1">kalmanfilter</span>(O, <span class="pl-c1">0</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">Gaussian</span>(x0, P0), Y)
<span class="pl-c1">@show</span> Xf
</pre></div>
<h2 dir="auto"><a id="user-content-implementation" class="anchor" aria-hidden="true" href="#implementation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Implementation</h2>
<p dir="auto">As said, filtering is implemented via the DynamicIterator protocol. It is worthwhile to look at
a possible the implementation of <code>kalmanfilter</code> to see how filtering can be integrated into online algorithms (run in a local scope to avoid <code>UndefVarError: ystate not defined</code>.)</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# `Y` is the data iterator, iterating over pairs of  `t =&gt; v` of time `t` and observation `v`
# `O` is the dynamical filter iterator, iterating over pairs `t =&gt; u` where
#     u::Tuple{&lt;:Gaussian,&lt;:Gaussian,Float64}
# is the tuple of filtered state, the predicted state and the log likelihood

# Initialise data iterator

ϕ = iterate(Y)
ϕ === nothing &amp;&amp; error(&quot;no observations&quot;)
(t, v), ystate = ϕ

# Initialise dynamical filter with first data point `t =&gt; v`
# and the `prior::Pair{Int,&lt;:Gaussian}`, a pair of initial time and initial state
prior = 0 =&gt; Gaussian(x0, P0)

ϕ = dyniterate(O, Start(Kalman.Filter(prior, 0.0)), t =&gt; v)
ϕ === nothing &amp;&amp; error(&quot;no observations&quot;)
(t, u), state = ϕ

X = [t =&gt; u[1]]
while true

    # Advance data iterator
    
    ϕ = iterate(Y, ystate)
    ϕ === nothing &amp;&amp; break
    (t, v), ystate = ϕ

    # Advance filter with new data `t =&gt; v`
    
    ϕ = dyniterate(O, state, t =&gt; v)
    ϕ === nothing &amp;&amp; break
    (t, u), state = ϕ
    
    # Do something with the result `t =&gt; u` (here: saving it)
    
    push!(X, t =&gt; u[1]) # save filtered state
end
ll = u[3] # likelihood
@show  X, ll"><pre><span class="pl-c"><span class="pl-c">#</span> `Y` is the data iterator, iterating over pairs of  `t =&gt; v` of time `t` and observation `v`</span>
<span class="pl-c"><span class="pl-c">#</span> `O` is the dynamical filter iterator, iterating over pairs `t =&gt; u` where</span>
<span class="pl-c"><span class="pl-c">#</span>     u::Tuple{&lt;:Gaussian,&lt;:Gaussian,Float64}</span>
<span class="pl-c"><span class="pl-c">#</span> is the tuple of filtered state, the predicted state and the log likelihood</span>

<span class="pl-c"><span class="pl-c">#</span> Initialise data iterator</span>

ϕ <span class="pl-k">=</span> <span class="pl-c1">iterate</span>(Y)
ϕ <span class="pl-k">===</span> <span class="pl-c1">nothing</span> <span class="pl-k">&amp;&amp;</span> <span class="pl-c1">error</span>(<span class="pl-s"><span class="pl-pds">"</span>no observations<span class="pl-pds">"</span></span>)
(t, v), ystate <span class="pl-k">=</span> ϕ

<span class="pl-c"><span class="pl-c">#</span> Initialise dynamical filter with first data point `t =&gt; v`</span>
<span class="pl-c"><span class="pl-c">#</span> and the `prior::Pair{Int,&lt;:Gaussian}`, a pair of initial time and initial state</span>
prior <span class="pl-k">=</span> <span class="pl-c1">0</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">Gaussian</span>(x0, P0)

ϕ <span class="pl-k">=</span> <span class="pl-c1">dyniterate</span>(O, <span class="pl-c1">Start</span>(Kalman<span class="pl-k">.</span><span class="pl-c1">Filter</span>(prior, <span class="pl-c1">0.0</span>)), t <span class="pl-k">=&gt;</span> v)
ϕ <span class="pl-k">===</span> <span class="pl-c1">nothing</span> <span class="pl-k">&amp;&amp;</span> <span class="pl-c1">error</span>(<span class="pl-s"><span class="pl-pds">"</span>no observations<span class="pl-pds">"</span></span>)
(t, u), state <span class="pl-k">=</span> ϕ

X <span class="pl-k">=</span> [t <span class="pl-k">=&gt;</span> u[<span class="pl-c1">1</span>]]
<span class="pl-k">while</span> <span class="pl-c1">true</span>

    <span class="pl-c"><span class="pl-c">#</span> Advance data iterator</span>
    
    ϕ <span class="pl-k">=</span> <span class="pl-c1">iterate</span>(Y, ystate)
    ϕ <span class="pl-k">===</span> <span class="pl-c1">nothing</span> <span class="pl-k">&amp;&amp;</span> <span class="pl-k">break</span>
    (t, v), ystate <span class="pl-k">=</span> ϕ

    <span class="pl-c"><span class="pl-c">#</span> Advance filter with new data `t =&gt; v`</span>
    
    ϕ <span class="pl-k">=</span> <span class="pl-c1">dyniterate</span>(O, state, t <span class="pl-k">=&gt;</span> v)
    ϕ <span class="pl-k">===</span> <span class="pl-c1">nothing</span> <span class="pl-k">&amp;&amp;</span> <span class="pl-k">break</span>
    (t, u), state <span class="pl-k">=</span> ϕ
    
    <span class="pl-c"><span class="pl-c">#</span> Do something with the result `t =&gt; u` (here: saving it)</span>
    
    <span class="pl-c1">push!</span>(X, t <span class="pl-k">=&gt;</span> u[<span class="pl-c1">1</span>]) <span class="pl-c"><span class="pl-c">#</span> save filtered state</span>
<span class="pl-k">end</span>
ll <span class="pl-k">=</span> u[<span class="pl-c1">3</span>] <span class="pl-c"><span class="pl-c">#</span> likelihood</span>
<span class="pl-c1">@show</span>  X, ll</pre></div>
</article></div>