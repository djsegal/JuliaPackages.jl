<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p><a href="https://travis-ci.org/mschauer/Kalman.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/c6bfb1bb102153b8863fb4f23cdefcd42710b43b/68747470733a2f2f7472617669732d63692e6f72672f6d736368617565722f4b616c6d616e2e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/mschauer/Kalman.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p><a href="https://mschauer.github.io/Kalman.jl/latest/" rel="nofollow"><img src="https://camo.githubusercontent.com/57bae07ecd50a99519ad0516d91f4ec8f0f48e12/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6c61746573742d626c75652e737667" alt="Latest" data-canonical-src="https://img.shields.io/badge/docs-latest-blue.svg" style="max-width:100%;"></a></p>
<h1><a id="user-content-kalman" class="anchor" aria-hidden="true" href="#kalman"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Kalman</h1>
<p>Flexible filtering and smoothing in Julia. <code>Kalman</code> uses <a href="https://github.com/mschauer/DynamicIterators.jl"><code>DynamicIterators</code></a> (an iterator protocol for dynamic data dependent and controlled processes) and
<a href="https://github.com/mschauer/GaussianDistributions.jl"><code>GaussianDistributions</code></a> (Gaussian distributions as abstraction for the uncertain state)
to implement flexible online Kalman filtering.</p>
<h2><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example</h2>
<p>For the state space system</p>
<pre><code>x[k] = Φx[k−1] + b + w[k],    w[k] ∼ N(0, Q)

y[k] = Hx[k] + v[k],    v[k] ∼ N(0, R)
</code></pre>
<p>define</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> GaussianDistributions
<span class="pl-k">using</span> DynamicIterators

<span class="pl-c"><span class="pl-c">#</span> Define linear evolution</span>
Φ <span class="pl-k">=</span> [<span class="pl-c1">0.8</span> <span class="pl-c1">0.5</span>; <span class="pl-k">-</span><span class="pl-c1">0.1</span> <span class="pl-c1">0.8</span>]
b <span class="pl-k">=</span> <span class="pl-c1">zeros</span>(<span class="pl-c1">2</span>)
Q <span class="pl-k">=</span> [<span class="pl-c1">0.2</span> <span class="pl-c1">0.0</span>; <span class="pl-c1">0.0</span> <span class="pl-c1">1.0</span>]

E <span class="pl-k">=</span> <span class="pl-c1">LinearEvolution</span>(Φ, <span class="pl-c1">Gaussian</span>(b, Q))

<span class="pl-c"><span class="pl-c">#</span> Define observation scheme</span>
H <span class="pl-k">=</span> [<span class="pl-c1">1.0</span> <span class="pl-c1">0.0</span>]
R <span class="pl-k">=</span> <span class="pl-c1">Matrix</span>(<span class="pl-c1">1.0</span>I, <span class="pl-c1">1</span>, <span class="pl-c1">1</span>)

O <span class="pl-k">=</span> <span class="pl-c1">LinearObservation</span>(E, H, R)

<span class="pl-c"><span class="pl-c">#</span> Prior</span>
x0 <span class="pl-k">=</span> [<span class="pl-c1">1.</span>, <span class="pl-c1">0.</span>]
P0 <span class="pl-k">=</span> <span class="pl-c1">Matrix</span>(<span class="pl-c1">1.0</span>I, <span class="pl-c1">2</span>, <span class="pl-c1">2</span>)

<span class="pl-c"><span class="pl-c">#</span> Observations (mock)</span>
Y <span class="pl-k">=</span> [<span class="pl-c1">1</span> <span class="pl-k">=&gt;</span> [<span class="pl-c1">1.14326</span>], <span class="pl-c1">2</span> <span class="pl-k">=&gt;</span> [<span class="pl-k">-</span><span class="pl-c1">0.271804</span>], <span class="pl-c1">3</span> <span class="pl-k">=&gt;</span> [<span class="pl-k">-</span><span class="pl-c1">0.00512675</span>]]

<span class="pl-c"><span class="pl-c">#</span> Filter</span>
Xf, ll <span class="pl-k">=</span> <span class="pl-c1">kalmanfilter</span>(O, <span class="pl-c1">0</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">Gaussian</span>(x0, P0), Y)
<span class="pl-c1">@show</span> Xf
</pre></div>
<h2><a id="user-content-implementation" class="anchor" aria-hidden="true" href="#implementation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Implementation</h2>
<p>As said, filtering is implemented via the DynamicIterator protocol. It is worthwhile to look at
a possible the implementation of <code>kalmanfilter</code> to see how filtering can be integrated into online algorithms (run in a local scope to avoid <code>UndefVarError: ystate not defined</code>.)</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span> `Y` is the data iterator, iterating over pairs of  `t =&gt; v` of time `t` and observation `v`</span>
<span class="pl-c"><span class="pl-c">#</span> `O` is the dynamical filter iterator, iterating over pairs `t =&gt; u` where</span>
<span class="pl-c"><span class="pl-c">#</span>     u::Tuple{&lt;:Gaussian,&lt;:Gaussian,Float64}</span>
<span class="pl-c"><span class="pl-c">#</span> is the tuple of filtered state, the predicted state and the log likelihood</span>

<span class="pl-c"><span class="pl-c">#</span> Initialise data iterator</span>

ϕ <span class="pl-k">=</span> <span class="pl-c1">iterate</span>(Y)
ϕ <span class="pl-k">===</span> <span class="pl-c1">nothing</span> <span class="pl-k">&amp;&amp;</span> <span class="pl-c1">error</span>(<span class="pl-s"><span class="pl-pds">"</span>no observations<span class="pl-pds">"</span></span>)
(t, v), ystate <span class="pl-k">=</span> ϕ

<span class="pl-c"><span class="pl-c">#</span> Initialise dynamical filter with first data point `t =&gt; v`</span>
<span class="pl-c"><span class="pl-c">#</span> and the `prior::Pair{Int,&lt;:Gaussian}`, a pair of initial time and initial state</span>

ϕ <span class="pl-k">=</span> <span class="pl-c1">dyniterate</span>(O, <span class="pl-c1">Start</span>(Kalman<span class="pl-k">.</span><span class="pl-c1">Filter</span>(prior, <span class="pl-c1">0.0</span>)), t <span class="pl-k">=&gt;</span> v)
ϕ <span class="pl-k">===</span> <span class="pl-c1">nothing</span> <span class="pl-k">&amp;&amp;</span> <span class="pl-c1">error</span>(<span class="pl-s"><span class="pl-pds">"</span>no observations<span class="pl-pds">"</span></span>)
(t, u), state <span class="pl-k">=</span> ϕ

X <span class="pl-k">=</span> <span class="pl-c1">trajectory</span>((t <span class="pl-k">=&gt;</span> u[<span class="pl-c1">1</span>],))
<span class="pl-k">while</span> <span class="pl-c1">true</span>

    <span class="pl-c"><span class="pl-c">#</span> Advance data iterator</span>
    
    ϕ <span class="pl-k">=</span> <span class="pl-c1">iterate</span>(Y, ystate)
    ϕ <span class="pl-k">===</span> <span class="pl-c1">nothing</span> <span class="pl-k">&amp;&amp;</span> <span class="pl-k">break</span>
    (t, v), ystate <span class="pl-k">=</span> ϕ

    <span class="pl-c"><span class="pl-c">#</span> Advance filter with new data `t =&gt; v`</span>
    
    ϕ <span class="pl-k">=</span> <span class="pl-c1">dyniterate</span>(O, state, t <span class="pl-k">=&gt;</span> v)
    ϕ <span class="pl-k">===</span> <span class="pl-c1">nothing</span> <span class="pl-k">&amp;&amp;</span> <span class="pl-k">break</span>
    (t, u), state <span class="pl-k">=</span> ϕ
    
    <span class="pl-c"><span class="pl-c">#</span> Do something with the result `t =&gt; u` (here: saving it)</span>
    
    <span class="pl-c1">push!</span>(X, t <span class="pl-k">=&gt;</span> u[<span class="pl-c1">1</span>]) <span class="pl-c"><span class="pl-c">#</span> save filtered state</span>
<span class="pl-k">end</span>
ll <span class="pl-k">=</span> u[<span class="pl-c1">3</span>] <span class="pl-c"><span class="pl-c">#</span> likelihood</span>
<span class="pl-c1">@show</span>  X, ll</pre></div>
</article></div>