<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-chemistryfeaturizationjl" class="anchor" aria-hidden="true" href="#chemistryfeaturizationjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>ChemistryFeaturization.jl</h1>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/aced-differentiate/ChemistryFeaturization.jl/workflows/Run%20tests/badge.svg"><img src="https://github.com/aced-differentiate/ChemistryFeaturization.jl/workflows/Run%20tests/badge.svg" alt="Run tests" style="max-width:100%;"></a><a href="https://codecov.io/gh/aced-differentiate/ChemistryFeaturization.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/0704ed559d8631e391b95f6bac0797782ab7ac27001a2128f6d26f7ee352db35/68747470733a2f2f636f6465636f762e696f2f67682f616365642d646966666572656e74696174652f4368656d6973747279466561747572697a6174696f6e2e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/aced-differentiate/ChemistryFeaturization.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p>Unified graph building and featurizing for Weave.jl, AtomicGraphNets.jl, and (maybe soon) more!</p>
<p>Documentation is starting to be built in the <a href="https://github.com/aced-differentiate/ChemistryFeaturization.jl/wiki">wiki</a>!</p>
<p>This package is currently focused on bulk systems. For organic molecules, <a href="https://github.com/mojaie/MolecularGraph.jl">MolecularGraph</a> is recommended.
PubChem stores many molecular features for the compounds they catalog, and their data can be accessed via <a href="https://github.com/JuliaHealth/PubChemCrawler.jl">PubChemCrawler</a>.</p>
<h2><a id="user-content-features" class="anchor" aria-hidden="true" href="#features"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Features</h2>
<h3><a id="user-content-graph-building-and-featurization-from-cif-files" class="anchor" aria-hidden="true" href="#graph-building-and-featurization-from-cif-files"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Graph-building and featurization from CIF files</h3>
<ul>
<li>Build graphs (as <a href="https://github.com/JuliaGraphs/SimpleWeightedGraphs.jl">SimpleWeightedGraphs</a>) from CIF files using <a href="https://github.com/JuliaPy/PyCall.jl">PyCall</a> to <a href="https://pymatgen.org" rel="nofollow">pymatgen</a> functions</li>
<li>Visualization using <a href="https://github.com/JuliaGraphs/GraphPlot.jl">GraphPlot</a>, check out the <code>visualize_graph</code> function in the <code>graph_functions.jl</code> file, you can make pretty pictures like these, whether the graph is simpler or more complicated (thickness of connections indicates weight of edge in graph (higher weights for nearer neighbors)):</li>
</ul>
<p><a target="_blank" rel="noopener noreferrer" href="img/graph_EuMgTl2.png"><img src="img/graph_EuMgTl2.png" alt="graph_EuMgTl2" width="300" height="221" style="max-width:100%;"></a><a target="_blank" rel="noopener noreferrer" href="img/graph_K4W4O14.png"><img src="img/graph_K4W4O14.png" alt="graph_K4W414O14" width="305" height="221" style="max-width:100%;"></a>
(NB: this animation's syntax is slightly out of date, new one to come!)</p>
<ul>
<li>Flexible featurization (currently onehot-style) and decoding: choose features to include, level of discretization, etc., and directly decode feature vectors to check values:</li>
</ul>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt; features = Symbol.([&quot;Group&quot;, &quot;Row&quot;, &quot;Block&quot;, &quot;Atomic mass&quot;, &quot;Atomic radius&quot;, &quot;X&quot;])
6-element Array{Symbol,1}:
 :Group
 :Row
 :Block
 Symbol(&quot;Atomic mass&quot;)
 Symbol(&quot;Atomic radius&quot;)
 :X

julia&gt; atom_feature_vecs, featurization = make_feature_vectors(features)
[ Info: 16 elements were dropped so that all features are defined.

julia&gt; decode_feature_vector(atom_feature_vecs[&quot;Si&quot;], featurization)
Dict{Symbol,Any} with 6 entries:
  Symbol(&quot;Atomic mass&quot;)   =&gt; (27.1071, 53.2064)
  Symbol(&quot;Atomic radius&quot;) =&gt; (0.955, 1.19)
  :Group                  =&gt; 14
  :Row                    =&gt; 3
  :Block                  =&gt; &quot;p&quot;
  :X                      =&gt; (1.684, 2.012)
"><pre><code>julia&gt; features = Symbol.(["Group", "Row", "Block", "Atomic mass", "Atomic radius", "X"])
6-element Array{Symbol,1}:
 :Group
 :Row
 :Block
 Symbol("Atomic mass")
 Symbol("Atomic radius")
 :X

julia&gt; atom_feature_vecs, featurization = make_feature_vectors(features)
[ Info: 16 elements were dropped so that all features are defined.

julia&gt; decode_feature_vector(atom_feature_vecs["Si"], featurization)
Dict{Symbol,Any} with 6 entries:
  Symbol("Atomic mass")   =&gt; (27.1071, 53.2064)
  Symbol("Atomic radius") =&gt; (0.955, 1.19)
  :Group                  =&gt; 14
  :Row                    =&gt; 3
  :Block                  =&gt; "p"
  :X                      =&gt; (1.684, 2.012)
</code></pre></div>
<h3><a id="user-content-smiles-input" class="anchor" aria-hidden="true" href="#smiles-input"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>SMILES input</h3>
<p>Sean to add...</p>
<h2><a id="user-content-requirements" class="anchor" aria-hidden="true" href="#requirements"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Requirements</h2>
<ul>
<li>Julia 1.4+</li>
<li>packages listed in <code>Project.toml</code></li>
<li>In addition, you will need your <code>PyCall</code> to have access to the <code>pymatgen</code> package, which can be added using <code>Conda.jl</code> as: <code>Conda.add("pymatgen"; channel="conda-forge")</code>, as well as the <code>rdkit</code> package (<code>Conda.add("rdkit"; channel="conda-forge")</code>)</li>
</ul>
<h2><a id="user-content-future-plans" class="anchor" aria-hidden="true" href="#future-plans"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Future Plans:</h2>
<ul>
<li>"hybrid" featurizations using features from multiple paradigms if available</li>
<li>more input file formats? e.g. <a href="https://github.com/aspuru-guzik-group/selfies">SELFIES</a></li>
</ul>
</article></div>