<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-the-ensemble-julia-package" class="anchor" aria-hidden="true" href="#the-ensemble-julia-package"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>The Ensemble Julia Package</h1>
<p><a href="https://travis-ci.org/farr/Ensemble.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/8c51a04b095df1b6e097e23d2054bcec1ed19f35/68747470733a2f2f7472617669732d63692e6f72672f666172722f456e73656d626c652e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/farr/Ensemble.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p>The Ensemble package implements in Julia various stochastic samplers based on
the "stretch move" for ensembles of walkers described by <a href="https://goo.gl/EFNVCz" rel="nofollow">Goodman &amp; Weare
(2010)</a>, and popularised in the
<a href="http://dan.iel.fm/emcee/current/" rel="nofollow">emcee</a> package from <a href="http://adsabs.harvard.edu/abs/2013PASP..125..306F" rel="nofollow">Foreman-Mackey, et al
(2013)</a>.</p>
<p>In addition to a basic implementation of the Goodman &amp; Weare MCMC
algorithm in the <code>EnsembleSampler</code> module, this algorithm forms the
basis of a number of other stochastic sampling algorithms:</p>
<ul>
<li>
<p>A nested sampling algorithm based around the stretch move from
Goodman &amp; Weare in <code>EnsembleNest</code>.</p>
</li>
<li>
<p>A combination MCMC/Gibbs sampling method in <code>EnsembleGibbs</code>.</p>
</li>
<li>
<p>A parallel-tempered MCMC (PTMCMC) in <code>EnsemblePTSampler</code> that automatically
tunes the chain temperature following an algorithm similar to <a href="https://ui.adsabs.harvard.edu/#abs/2016MNRAS.455.1919V/abstract" rel="nofollow">Vousden, Farr,
&amp; Mandel
(2016)</a>.</p>
</li>
<li>
<p>A bare-bones implementation of the <code>kombine</code> sampler described in <a href="https://www.authorea.com/users/13383/articles/16558-going-farrther-kombine-an-ensemble-sampler-optimized-for-multi-modal-distributions/_show_article" rel="nofollow">Farr &amp; Farr
(in
prep)</a>
in <code>EnesmbleKombine</code>.  This module is missing the automatic burnin
determination and the bells-and-whistles from the Python package described in
that paper, but is a fully-functional multi-modal KDE sampler.</p>
</li>
<li>
<p>Various support libraries for stochastic sampling with these
packages:</p>
<ul>
<li>
<p>Computation of autocorrelation lengths following the spirit, if
not the algorithm, of
<a href="http://www.math.nyu.edu/faculty/goodman/software/acor/" rel="nofollow">Goodman's implementation</a>
of <a href="http://www.stat.unc.edu/faculty/cji/Sokal.pdf" rel="nofollow">Sokal's</a>
definition of the autocorrelation length in the module <code>Acor</code>.</p>
</li>
<li>
<p>Various useful re-parameterisations of constrained parameters to
remove the constraints in the <code>Parameterizations</code> module.  Most of
these are taken from the
<a href="http://mc-stan.org/documentation/" rel="nofollow">Stan Users Manual</a>.</p>
</li>
<li>
<p>A basic
<a href="https://en.wikipedia.org/wiki/Powell's_method" rel="nofollow">Powell's method</a>
optimiser in the <code>Optimize</code> module.</p>
</li>
<li>
<p>A stable implementation of the <code>logsumexp</code> function in the <code>Stats</code>
module.</p>
</li>
</ul>
</li>
</ul>
<p>The <code>Ensemble</code> module exports these various sub-modules as top-level identifiers.</p>
</article></div>