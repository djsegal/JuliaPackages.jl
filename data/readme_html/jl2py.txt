<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-jl2py" class="anchor" aria-hidden="true" href="#jl2py"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Jl2Py</h1>
<p dir="auto"><a href="https://lucifer1004.github.io/Jl2Py.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://lucifer1004.github.io/Jl2Py.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/lucifer1004/Jl2Py.jl/actions/workflows/CI.yml?query=branch%3Amain"><img src="https://github.com/lucifer1004/Jl2Py.jl/actions/workflows/CI.yml/badge.svg?branch=main" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/lucifer1004/Jl2Py.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/b655c82db510636d853f093c27c12cf2f9f041127b9069094e58f15f4754738c/68747470733a2f2f636f6465636f762e696f2f67682f6c756369666572313030342f4a6c3250792e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/lucifer1004/Jl2Py.jl/branch/main/graph/badge.svg" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Examples</h2>
<p dir="auto">Conversion results of <a href="https://github.com/JuliaCN/LeetCode.jl/blob/master/src/problems/1.two-sum.jl">LeetCode.jl - 1. Two Sum</a></p>
<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="def two_sum(nums: List[int], target: int, /) -&gt; Union[None, Tuple[int, int]]:
    seen = {}
    for (i, n) in enumerate(nums):
        m = target - n
        if haskey(seen, m):
            return (seen[m], i)
        else:
            seen[n] = i"><pre><span class="pl-k">def</span> <span class="pl-en">two_sum</span>(<span class="pl-s1">nums</span>: <span class="pl-v">List</span>[<span class="pl-s1">int</span>], <span class="pl-s1">target</span>: <span class="pl-s1">int</span>, <span class="pl-c1">/</span>) <span class="pl-c1">-&gt;</span> <span class="pl-v">Union</span>[<span class="pl-c1">None</span>, <span class="pl-v">Tuple</span>[<span class="pl-s1">int</span>, <span class="pl-s1">int</span>]]:
    <span class="pl-s1">seen</span> <span class="pl-c1">=</span> {}
    <span class="pl-k">for</span> (<span class="pl-s1">i</span>, <span class="pl-s1">n</span>) <span class="pl-c1">in</span> <span class="pl-en">enumerate</span>(<span class="pl-s1">nums</span>):
        <span class="pl-s1">m</span> <span class="pl-c1">=</span> <span class="pl-s1">target</span> <span class="pl-c1">-</span> <span class="pl-s1">n</span>
        <span class="pl-k">if</span> <span class="pl-en">haskey</span>(<span class="pl-s1">seen</span>, <span class="pl-s1">m</span>):
            <span class="pl-k">return</span> (<span class="pl-s1">seen</span>[<span class="pl-s1">m</span>], <span class="pl-s1">i</span>)
        <span class="pl-k">else</span>:
            <span class="pl-s1">seen</span>[<span class="pl-s1">n</span>] <span class="pl-c1">=</span> <span class="pl-s1">i</span></pre></div>
<p dir="auto">Conversion results of <a href="https://github.com/JuliaCN/LeetCode.jl/blob/master/src/problems/2.add-two-numbers.jl">LeetCode.jl - 2. Add Two Numbers</a></p>
<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="def add_two_numbers(l1: ListNode, l2: ListNode, /) -&gt; ListNode:
    carry = 0
    fake_head = cur = ListNode()
    while not isnothing(l1) or (not isnothing(l2) or not iszero(carry)):
        (v1, v2) = (0, 0)
        if not isnothing(l1):
            v1 = val(l1)
            l1 = next(l1)
        if not isnothing(l2):
            v2 = val(l2)
            l2 = next(l2)
        (carry, v) = divrem(v1 + v2 + carry, 10)
        next_inplace(cur, ListNode(v))
        cur = next(cur)
        val_inplace(cur, v)
    return next(fake_head)"><pre><span class="pl-k">def</span> <span class="pl-en">add_two_numbers</span>(<span class="pl-s1">l1</span>: <span class="pl-v">ListNode</span>, <span class="pl-s1">l2</span>: <span class="pl-v">ListNode</span>, <span class="pl-c1">/</span>) <span class="pl-c1">-&gt;</span> <span class="pl-v">ListNode</span>:
    <span class="pl-s1">carry</span> <span class="pl-c1">=</span> <span class="pl-c1">0</span>
    <span class="pl-s1">fake_head</span> <span class="pl-c1">=</span> <span class="pl-s1">cur</span> <span class="pl-c1">=</span> <span class="pl-v">ListNode</span>()
    <span class="pl-k">while</span> <span class="pl-c1">not</span> <span class="pl-en">isnothing</span>(<span class="pl-s1">l1</span>) <span class="pl-c1">or</span> (<span class="pl-c1">not</span> <span class="pl-en">isnothing</span>(<span class="pl-s1">l2</span>) <span class="pl-c1">or</span> <span class="pl-c1">not</span> <span class="pl-en">iszero</span>(<span class="pl-s1">carry</span>)):
        (<span class="pl-s1">v1</span>, <span class="pl-s1">v2</span>) <span class="pl-c1">=</span> (<span class="pl-c1">0</span>, <span class="pl-c1">0</span>)
        <span class="pl-k">if</span> <span class="pl-c1">not</span> <span class="pl-en">isnothing</span>(<span class="pl-s1">l1</span>):
            <span class="pl-s1">v1</span> <span class="pl-c1">=</span> <span class="pl-en">val</span>(<span class="pl-s1">l1</span>)
            <span class="pl-s1">l1</span> <span class="pl-c1">=</span> <span class="pl-en">next</span>(<span class="pl-s1">l1</span>)
        <span class="pl-k">if</span> <span class="pl-c1">not</span> <span class="pl-en">isnothing</span>(<span class="pl-s1">l2</span>):
            <span class="pl-s1">v2</span> <span class="pl-c1">=</span> <span class="pl-en">val</span>(<span class="pl-s1">l2</span>)
            <span class="pl-s1">l2</span> <span class="pl-c1">=</span> <span class="pl-en">next</span>(<span class="pl-s1">l2</span>)
        (<span class="pl-s1">carry</span>, <span class="pl-s1">v</span>) <span class="pl-c1">=</span> <span class="pl-en">divrem</span>(<span class="pl-s1">v1</span> <span class="pl-c1">+</span> <span class="pl-s1">v2</span> <span class="pl-c1">+</span> <span class="pl-s1">carry</span>, <span class="pl-c1">10</span>)
        <span class="pl-en">next_inplace</span>(<span class="pl-s1">cur</span>, <span class="pl-v">ListNode</span>(<span class="pl-s1">v</span>))
        <span class="pl-s1">cur</span> <span class="pl-c1">=</span> <span class="pl-en">next</span>(<span class="pl-s1">cur</span>)
        <span class="pl-en">val_inplace</span>(<span class="pl-s1">cur</span>, <span class="pl-s1">v</span>)
    <span class="pl-k">return</span> <span class="pl-en">next</span>(<span class="pl-s1">fake_head</span>)</pre></div>
<p dir="auto">We can see that we only need to define a few polyfill functions to make the generated Python code work.</p>
</article></div>