<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-simplecrystalsjl" class="anchor" aria-hidden="true" href="#simplecrystalsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>SimpleCrystals.jl</h1>
<p dir="auto"><a href="https://ci.appveyor.com/project/ejmeitz/simplecrystals-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/e402373a6fbf4b5e503d4516f43fa72a162c0110cb2ecc745428df62f15935f6/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f6b6430313670636d3965706b31786b393f7376673d74727565" alt="Build Status" data-canonical-src="https://ci.appveyor.com/api/projects/status/kd016pcm9epk1xk9?svg=true" style="max-width: 100%;"></a>
<a href="https://opensource.org/licenses/MIT" rel="nofollow"><img src="https://camo.githubusercontent.com/fd551ba4b042d89480347a0e74e31af63b356b2cac1116c7b80038f41b04a581/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d4d49542d677265656e2e737667" alt="License: MIT" data-canonical-src="https://img.shields.io/badge/License-MIT-green.svg" style="max-width: 100%;"></a>
<a href="https://github.com/ejmeitz/SimpleCrystals.jl/releases/latest"><img src="https://camo.githubusercontent.com/037a575ae5026b633212bfbf67df5c8116c1302cc84baf834e7be52d18765867/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f72656c656173652f656a6d6569747a2f53696d706c654372797374616c732e6a6c2e737667" alt="Latest release" data-canonical-src="https://img.shields.io/github/release/ejmeitz/SimpleCrystals.jl.svg" style="max-width: 100%;"></a>
<a href="https://ejmeitz.github.io/SimpleCrystals.jl/stable/" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Documentation stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a></p>
<p dir="auto">SimpleCrystals.jl is an interface for creating crystal geometries for molecular simulation within Julia. SimpleCrystals implements all 3D and 2D Bravais lattices (e.g. FCC &amp; BCC) and allows users to define a custom basis to create polyatomic Bravais lattices or to create non-Bravais crystal structures. The <a href="https://github.com/JuliaMolSim/AtomsBase.jl">AtomsBase</a> interface is implemented to make use with other Julian molecular simulation software simple. There is no support for reading in crystal structures from other software (e.g. CIF files). SimpleCrystals is intended to provide a quick, lightweight method for generating atomic coordinates without leaving Julia.</p>
<h4 dir="auto"><a id="user-content-monoatomic-bravais-lattices" class="anchor" aria-hidden="true" href="#monoatomic-bravais-lattices"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Monoatomic Bravais Lattices:</h4>
<p dir="auto">Whenever possible crystals are implemented using a conventional unit cell so that patterning a simulation cell is simple. A trinclinic boundary will work for the remaining lattices.</p>
<p dir="auto">SimpleCrystals.jl re-exports <a href="https://painterqubits.github.io/Unitful.jl/stable/" rel="nofollow">Unitful.jl</a> and <a href="https://github.com/JuliaArrays/StaticArrays.jl">StatcArrays.jl</a> and can handle any atomic symbols from <a href="https://github.com/JuliaPhysics/PeriodicTable.jl">PeriodicTable.jl</a>. For example, the code below creates an FCC crystal of carbon with a conventional cell that is 5.4 Angstroms. The cell is patterened 4 times in the x, y, and z directions. The coordinates can be obtained in code with the <code>atoms</code> member variable or saved to a XYZ file with <code>to_xyz()</code>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="a = 5.4u&quot;Å&quot;
fcc_crystal = FCC(a, :C, SVector(4,4,4))
atoms = fcc_crystal.atoms
to_xyz(fcc_crystal, raw&quot;./positions_fcc.xyz&quot;)"><pre>a <span class="pl-k">=</span> <span class="pl-c1">5.4</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>Å<span class="pl-pds">"</span></span>
fcc_crystal <span class="pl-k">=</span> <span class="pl-c1">FCC</span>(a, <span class="pl-c1">:C</span>, <span class="pl-c1">SVector</span>(<span class="pl-c1">4</span>,<span class="pl-c1">4</span>,<span class="pl-c1">4</span>))
atoms <span class="pl-k">=</span> fcc_crystal<span class="pl-k">.</span>atoms
<span class="pl-c1">to_xyz</span>(fcc_crystal, <span class="pl-s"><span class="pl-c1">raw</span><span class="pl-pds">"</span>./positions_fcc.xyz<span class="pl-pds">"</span></span>)</pre></div>
<h4 dir="auto"><a id="user-content-3d-bravais-lattices" class="anchor" aria-hidden="true" href="#3d-bravais-lattices"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>3D Bravais Lattices</h4>
<p dir="auto">All 3D Bravais lattices created from the SimpleCrystal's API and visualized in <a href="https://ovito.org/" rel="nofollow">OVITO</a>. The radius of the atoms is chosen arbitrarily in OVITO.</p>
<table>
    <tbody><tr>
        <th>Crystal Family</th>
        <th align="center">Primitive</th>
        <th align="center">Base Centered</th>
        <th align="center">Body Centered</th>
        <th align="center">Face Centered</th>
    </tr>
    <tr>
        <td align="center"><strong>Cubic</strong><br>a = b = c<br>α = β = γ = 90°</td>
        <td align="center"> <a target="_blank" rel="noopener noreferrer" href="https://github.com/ejmeitz/SimpleCrystals.jl/raw/main/assets/SC.png"><img src="https://github.com/ejmeitz/SimpleCrystals.jl/raw/main/assets/SC.png" alt="1" width="160px" height="120px" style="max-width: 100%;"></a> </td>
        <td align="center"></td>
        <td align="center"> <a target="_blank" rel="noopener noreferrer" href="https://github.com/ejmeitz/SimpleCrystals.jl/raw/main/assets/BCC.png"><img src="https://github.com/ejmeitz/SimpleCrystals.jl/raw/main/assets/BCC.png" alt="2" width="160px" height="120px" style="max-width: 100%;"></a> </td>
        <td align="center"> <a target="_blank" rel="noopener noreferrer" href="https://github.com/ejmeitz/SimpleCrystals.jl/raw/main/assets/FCC.png"><img src="https://github.com/ejmeitz/SimpleCrystals.jl/raw/main/assets/FCC.png" alt="2" width="160px" height="120px" style="max-width: 100%;"></a> </td>
    </tr>
    <tr>
        <td align="center"><strong>Triclinic</strong><br>a ≠ b ≠ c<br>α ≠ β ≠ γ</td>
        <td align="center"> <a target="_blank" rel="noopener noreferrer" href="https://github.com/ejmeitz/SimpleCrystals.jl/raw/main/assets/triclinic.png"><img src="https://github.com/ejmeitz/SimpleCrystals.jl/raw/main/assets/triclinic.png" alt="1" width="160px" height="120px" style="max-width: 100%;"></a> </td>
        <td align="center"></td>
        <td align="center"></td>
        <td align="center"></td>
    </tr>
    <tr>
        <td align="center"><strong>Monoclinic</strong><br>a ≠ b ≠ c<br>α = γ = 90°, β</td>
        <td align="center"> <a target="_blank" rel="noopener noreferrer" href="https://github.com/ejmeitz/SimpleCrystals.jl/raw/main/assets/monoclinic.png"><img src="https://github.com/ejmeitz/SimpleCrystals.jl/raw/main/assets/monoclinic.png" alt="1" width="160px" height="120px" style="max-width: 100%;"></a> </td>
        <td align="center"> <a target="_blank" rel="noopener noreferrer" href="https://github.com/ejmeitz/SimpleCrystals.jl/raw/main/assets/mono_base_centered.png"><img src="https://github.com/ejmeitz/SimpleCrystals.jl/raw/main/assets/mono_base_centered.png" alt="2" width="160px" height="120px" style="max-width: 100%;"></a> </td>
        <td align="center"></td>
        <td align="center"></td>
    </tr>
    <tr>
        <td align="center"><strong>Orthorhombic</strong><br>a ≠ b ≠ c<br>α = β = γ = 90°</td>
        <td align="center"> <a target="_blank" rel="noopener noreferrer" href="https://github.com/ejmeitz/SimpleCrystals.jl/raw/main/assets/ortho.png"><img src="https://github.com/ejmeitz/SimpleCrystals.jl/raw/main/assets/ortho.png" alt="1" width="160px" height="120px" style="max-width: 100%;"></a> </td>
        <td align="center"> <a target="_blank" rel="noopener noreferrer" href="https://github.com/ejmeitz/SimpleCrystals.jl/raw/main/assets/ortho_base.png"><img src="https://github.com/ejmeitz/SimpleCrystals.jl/raw/main/assets/ortho_base.png" alt="2" width="160px" height="120px" style="max-width: 100%;"></a> </td>
        <td align="center"> <a target="_blank" rel="noopener noreferrer" href="https://github.com/ejmeitz/SimpleCrystals.jl/raw/main/assets/ortho_body.png"><img src="https://github.com/ejmeitz/SimpleCrystals.jl/raw/main/assets/ortho_body.png" alt="2" width="160px" height="120px" style="max-width: 100%;"></a> </td>
        <td align="center"> <a target="_blank" rel="noopener noreferrer" href="https://github.com/ejmeitz/SimpleCrystals.jl/raw/main/assets/ortho_fcc.png"><img src="https://github.com/ejmeitz/SimpleCrystals.jl/raw/main/assets/ortho_fcc.png" alt="2" width="160px" height="120px" style="max-width: 100%;"></a> </td>
    </tr>
    <tr>
        <td align="center"><strong>Tetragonal</strong><br>a = b ≠ c<br> α = β = γ = 90°</td>
        <td align="center"> <a target="_blank" rel="noopener noreferrer" href="https://github.com/ejmeitz/SimpleCrystals.jl/raw/main/assets/tetragonal.png"><img src="https://github.com/ejmeitz/SimpleCrystals.jl/raw/main/assets/tetragonal.png" alt="1" width="160px" height="120px" style="max-width: 100%;"></a> </td>
        <td align="center"></td>
        <td align="center"> <a target="_blank" rel="noopener noreferrer" href="https://github.com/ejmeitz/SimpleCrystals.jl/raw/main/assets/tetragonal_body.png"><img src="https://github.com/ejmeitz/SimpleCrystals.jl/raw/main/assets/tetragonal_body.png" alt="2" width="160px" height="120px" style="max-width: 100%;"></a> </td>
        <td align="center"></td>
    </tr>
    <tr>
        <td align="center"><strong>Hexagonal (Rhombohedral)</strong><br>a = b = c<br>α = β = γ</td>
        <td align="center"> <a target="_blank" rel="noopener noreferrer" href="https://github.com/ejmeitz/SimpleCrystals.jl/raw/main/assets/rhomb.png"><img src="https://github.com/ejmeitz/SimpleCrystals.jl/raw/main/assets/rhomb.png" alt="1" width="160px" height="120px" style="max-width: 100%;"></a> </td>
        <td align="center"></td>
        <td align="center"></td>
        <td align="center"></td>
    </tr>
      <tr>
        <td align="center"><strong>Hexagonal</strong><br>a, c<br>α = β = 90°, γ = 120°</td>
        <td align="center"> <a target="_blank" rel="noopener noreferrer" href="https://github.com/ejmeitz/SimpleCrystals.jl/raw/main/assets/hex_3d.png"><img src="https://github.com/ejmeitz/SimpleCrystals.jl/raw/main/assets/hex_3d.png" alt="1" width="160px" height="120px" style="max-width: 100%;"></a> </td>
        <td align="center"></td>
        <td align="center"></td>
        <td align="center"></td>
    </tr>
</tbody></table>
<h4 dir="auto"><a id="user-content-other-3d-structrues" class="anchor" aria-hidden="true" href="#other-3d-structrues"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Other 3D Structrues</h4>
<p dir="auto">Diamond and HCP are also implemented as part of the API:</p>
<table>
    <tbody><tr>
        <td align="center">Diamond</td>
        <td align="center">HCP</td>
    </tr>
    <tr>
        <td align="center"> <a target="_blank" rel="noopener noreferrer" href="https://github.com/ejmeitz/SimpleCrystals.jl/raw/main/assets/diamond.png"><img src="https://github.com/ejmeitz/SimpleCrystals.jl/raw/main/assets/diamond.png" alt="2" width="160px" height="120px" style="max-width: 100%;"></a> </td>
        <td align="center"> <a target="_blank" rel="noopener noreferrer" href="https://github.com/ejmeitz/SimpleCrystals.jl/raw/main/assets/HCP.png"><img src="https://github.com/ejmeitz/SimpleCrystals.jl/raw/main/assets/HCP.png" alt="2" width="160px" height="120px" style="max-width: 100%;"></a> </td>
    </tr>
</tbody></table>
<h4 dir="auto"><a id="user-content-2d-bravais-lattices" class="anchor" aria-hidden="true" href="#2d-bravais-lattices"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>2D Bravais Lattices</h4>
<p dir="auto">All 2D Bravais lattices created from the SimpleCrystal's API and visualized in <a href="https://ovito.org/" rel="nofollow">OVITO</a>.</p>
<table>
    <tbody><tr>
        <th>Crystal Family</th>
        <th align="center">Primitive</th>
        <th align="center">Centered</th>
    </tr>
    <tr>
        <td><strong>Monoclinic</strong><br>a ≠ b<br>θ ≠ 90°</td>
        <td align="center"> <a target="_blank" rel="noopener noreferrer" href="https://github.com/ejmeitz/SimpleCrystals.jl/raw/main/assets/oblique.png"><img src="https://github.com/ejmeitz/SimpleCrystals.jl/raw/main/assets/oblique.png" alt="1" width="160px" height="120px" style="max-width: 100%;"></a> </td>
        <td align="center"></td>
    </tr>
    <tr>
        <td><strong>Orthorhombic</strong><br>a ≠ b<br>θ = 90°</td>
        <td align="center"> <a target="_blank" rel="noopener noreferrer" href="https://github.com/ejmeitz/SimpleCrystals.jl/raw/main/assets/rect.png"><img src="https://github.com/ejmeitz/SimpleCrystals.jl/raw/main/assets/rect.png" alt="1" width="160px" height="120px" style="max-width: 100%;"></a> </td>
        <td align="center"> <a target="_blank" rel="noopener noreferrer" href="https://github.com/ejmeitz/SimpleCrystals.jl/raw/main/assets/rect_centered.png"><img src="https://github.com/ejmeitz/SimpleCrystals.jl/raw/main/assets/rect_centered.png" alt="2" width="160px" height="120px" style="max-width: 100%;"></a> </td>
    </tr>
    <tr>
        <td><strong>Tetragonal</strong><br>a = b<br>θ = 90°</td>
        <td align="center"> <a target="_blank" rel="noopener noreferrer" href="https://github.com/ejmeitz/SimpleCrystals.jl/raw/main/assets/square.png"><img src="https://github.com/ejmeitz/SimpleCrystals.jl/raw/main/assets/square.png" alt="1" width="160px" height="120px" style="max-width: 100%;"></a> </td>
        <td align="center"></td>
    </tr>
    <tr>
        <td><strong>Hexagonal</strong><br>θ = 120°</td>
        <td align="center"> <a target="_blank" rel="noopener noreferrer" href="https://github.com/ejmeitz/SimpleCrystals.jl/raw/main/assets/hex_2d.png"><img src="https://github.com/ejmeitz/SimpleCrystals.jl/raw/main/assets/hex_2d.png" alt="1" width="160px" height="120px" style="max-width: 100%;"></a> </td>
        <td align="center"></td>
    </tr>
</tbody></table>
<h4 dir="auto"><a id="user-content-other-2d-structures" class="anchor" aria-hidden="true" href="#other-2d-structures"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Other 2D Structures</h4>
<p dir="auto">The honeycomb lattice is the only 2D non-bravais lattice implemented as part of the SimpleCrystals API.</p>
<table>
    <tbody><tr><th align="center">Honeycomb</th>
    </tr><tr>
        <td align="center"> <a target="_blank" rel="noopener noreferrer" href="https://github.com/ejmeitz/SimpleCrystals.jl/raw/main/assets/honeycomb.png"><img src="https://github.com/ejmeitz/SimpleCrystals.jl/raw/main/assets/honeycomb.png" alt="1" width="160px" height="120px" style="max-width: 100%;"></a> </td>
    </tr>
</tbody></table>
<h4 dir="auto"><a id="user-content-user-defined-crystal-structures" class="anchor" aria-hidden="true" href="#user-defined-crystal-structures"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>User Defined Crystal Structures</h4>
<p dir="auto">The SimpleCrystals API is not exhaustive, but provides an interface to create non-bravais crystals and polyatomic crystals. For example, the Diamond crystal structure (which is a part of the API) is defined as simple cubic Bravais lattice with an 8 atom basis. Diamond is more naturally thought of as an FCC lattice with a 2 atom basis, but that would require a triclinic boundary.</p>
<p dir="auto">The code below defines the BravaisLattice() object as a primitive, cubic lattice (simple cubic) with lattice parameter <code>a</code>. Then the basis is constructed as a list of Atom() objects. In this example, each basis atom is the same element but that could easily be changed. Finally, the Crystal() object is constructed from the BravaisLattice object and the list of basis atoms.</p>
<p dir="auto"></p><div class="Box Box--condensed my-2">
  <div class="Box-header f6">
    <p class="mb-0 text-bold">
      <a href="https://github.com/ejmeitz/SimpleCrystals.jl/blob/0ccc3f28e81d2c0aa5087039a52e94038520bad4/src/Crystals.jl#L99-L110">SimpleCrystals.jl/src/Crystals.jl</a>
    </p>
    <p class="mb-0 color-fg-muted">
        Lines 99 to 110
      in
      <a data-pjax="true" class="commit-tease-sha" href="/ejmeitz/SimpleCrystals.jl/commit/0ccc3f28e81d2c0aa5087039a52e94038520bad4">0ccc3f2</a>
    </p>
  </div>
  <div itemprop="text" class="Box-body p-0 blob-wrapper blob-wrapper-embedded data">
    <table class="highlight tab-size mb-0 js-file-line-container" data-tab-size="8" data-paste-markdown-skip="">

        <tbody><tr class="border-0">
          <td id="L99" class="blob-num border-0 px-3 py-0 color-bg-default" data-line-number="99"></td>
          <td id="LC99" class="blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line"> <span class="pl-k">function</span> <span class="pl-en">Diamond</span>(a, atomic_symbol<span class="pl-k">::</span><span class="pl-c1">Symbol</span>; charge <span class="pl-k">=</span> <span class="pl-c1">0.0</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>C<span class="pl-pds">"</span></span>) </td>
        </tr>

        <tr class="border-0">
          <td id="L100" class="blob-num border-0 px-3 py-0 color-bg-default" data-line-number="100"></td>
          <td id="LC100" class="blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line">     lattice <span class="pl-k">=</span> <span class="pl-c1">BravaisLattice</span>(<span class="pl-c1">Cubic</span>(a), <span class="pl-c1">Primitive</span>()) </td>
        </tr>

        <tr class="border-0">
          <td id="L101" class="blob-num border-0 px-3 py-0 color-bg-default" data-line-number="101"></td>
          <td id="LC101" class="blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line">     basis <span class="pl-k">=</span> [<span class="pl-c1">Atom</span>(atomic_symbol, <span class="pl-c1">SVector</span>(<span class="pl-c1">zero</span>(a),<span class="pl-c1">zero</span>(a),<span class="pl-c1">zero</span>(a)), charge <span class="pl-k">=</span> charge), </td>
        </tr>

        <tr class="border-0">
          <td id="L102" class="blob-num border-0 px-3 py-0 color-bg-default" data-line-number="102"></td>
          <td id="LC102" class="blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line">              <span class="pl-c1">Atom</span>(atomic_symbol, <span class="pl-c1">SVector</span>(<span class="pl-c1">zero</span>(a), <span class="pl-c1">0.5</span><span class="pl-k">*</span>a, <span class="pl-c1">0.5</span><span class="pl-k">*</span>a), charge <span class="pl-k">=</span> charge), </td>
        </tr>

        <tr class="border-0">
          <td id="L103" class="blob-num border-0 px-3 py-0 color-bg-default" data-line-number="103"></td>
          <td id="LC103" class="blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line">              <span class="pl-c1">Atom</span>(atomic_symbol, <span class="pl-c1">SVector</span>(<span class="pl-c1">0.5</span><span class="pl-k">*</span>a, <span class="pl-c1">zero</span>(a), <span class="pl-c1">0.5</span><span class="pl-k">*</span>a), charge <span class="pl-k">=</span> charge), </td>
        </tr>

        <tr class="border-0">
          <td id="L104" class="blob-num border-0 px-3 py-0 color-bg-default" data-line-number="104"></td>
          <td id="LC104" class="blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line">              <span class="pl-c1">Atom</span>(atomic_symbol, <span class="pl-c1">SVector</span>(<span class="pl-c1">0.5</span><span class="pl-k">*</span>a, <span class="pl-c1">0.5</span><span class="pl-k">*</span>a, <span class="pl-c1">zero</span>(a)), charge <span class="pl-k">=</span> charge), </td>
        </tr>

        <tr class="border-0">
          <td id="L105" class="blob-num border-0 px-3 py-0 color-bg-default" data-line-number="105"></td>
          <td id="LC105" class="blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line">              <span class="pl-c1">Atom</span>(atomic_symbol, <span class="pl-c1">SVector</span>(<span class="pl-c1">0.25</span><span class="pl-k">*</span>a, <span class="pl-c1">0.25</span><span class="pl-k">*</span>a, <span class="pl-c1">0.25</span><span class="pl-k">*</span>a), charge <span class="pl-k">=</span> charge), </td>
        </tr>

        <tr class="border-0">
          <td id="L106" class="blob-num border-0 px-3 py-0 color-bg-default" data-line-number="106"></td>
          <td id="LC106" class="blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line">              <span class="pl-c1">Atom</span>(atomic_symbol, <span class="pl-c1">SVector</span>(<span class="pl-c1">0.25</span><span class="pl-k">*</span>a, <span class="pl-c1">0.75</span><span class="pl-k">*</span>a, <span class="pl-c1">0.75</span><span class="pl-k">*</span>a), charge <span class="pl-k">=</span> charge), </td>
        </tr>

        <tr class="border-0">
          <td id="L107" class="blob-num border-0 px-3 py-0 color-bg-default" data-line-number="107"></td>
          <td id="LC107" class="blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line">              <span class="pl-c1">Atom</span>(atomic_symbol, <span class="pl-c1">SVector</span>(<span class="pl-c1">0.75</span><span class="pl-k">*</span>a, <span class="pl-c1">0.25</span><span class="pl-k">*</span>a, <span class="pl-c1">0.75</span><span class="pl-k">*</span>a), charge <span class="pl-k">=</span> charge), </td>
        </tr>

        <tr class="border-0">
          <td id="L108" class="blob-num border-0 px-3 py-0 color-bg-default" data-line-number="108"></td>
          <td id="LC108" class="blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line">              <span class="pl-c1">Atom</span>(atomic_symbol, <span class="pl-c1">SVector</span>(<span class="pl-c1">0.75</span><span class="pl-k">*</span>a, <span class="pl-c1">0.75</span><span class="pl-k">*</span>a, <span class="pl-c1">0.25</span><span class="pl-k">*</span>a), charge <span class="pl-k">=</span> charge)] </td>
        </tr>

        <tr class="border-0">
          <td id="L109" class="blob-num border-0 px-3 py-0 color-bg-default" data-line-number="109"></td>
          <td id="LC109" class="blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line">     <span class="pl-k">return</span> <span class="pl-c1">Crystal</span>(lattice,basis) </td>
        </tr>

        <tr class="border-0">
          <td id="L110" class="blob-num border-0 px-3 py-0 color-bg-default" data-line-number="110"></td>
          <td id="LC110" class="blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line"> <span class="pl-k">end</span> </td>
        </tr>
    </tbody></table>
  </div>
</div>
<p></p>
<p dir="auto">Similarly, we can create NaCl (not in the API) which can be thought of as a simple cubic lattice with an 8 atom basis or two intertwined FCC lattices.</p>
<p dir="auto">2-Atom Basis SC:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="function NaCl1(a, N::SVector{3})
    lattice = BravaisLattice(CubicLattice(a), Primitive())
    basis = [Atom(:Na, SVector(zero(a), zero(a), zero(a)), charge = 1.0u&quot;q&quot;),
             Atom(:Na, SVector(0.5*a,zero(a),0.5*a), charge = 1.0u&quot;q&quot;),
             Atom(:Na, SVector(zero(a), 0.5*a, 0.5*a), charge = 1.0u&quot;q&quot;),
             Atom(:Na, SVector(0.5*a,0.5*a,zero(a)), charge = 1.0u&quot;q&quot;),
             Atom(:Cl, SVector(0.5*a, zero(a), zero(a)), charge = -1.0u&quot;q&quot;),
             Atom(:Cl, SVector(zero(a), 0.5*a, zero(a)), charge = -1.0u&quot;q&quot;),
             Atom(:Cl, SVector(zero(a),zero(a),0.5*a), charge = -1.0u&quot;q&quot;),
             Atom(:Cl, SVector(0.5*a, 0.5*a, 0.5*a), charge = -1.0u&quot;q&quot;)]
    return Crystal(lattice,basis,N)
end"><pre><span class="pl-k">function</span> <span class="pl-en">NaCl1</span>(a, N<span class="pl-k">::</span><span class="pl-c1">SVector{3}</span>)
    lattice <span class="pl-k">=</span> <span class="pl-c1">BravaisLattice</span>(<span class="pl-c1">CubicLattice</span>(a), <span class="pl-c1">Primitive</span>())
    basis <span class="pl-k">=</span> [<span class="pl-c1">Atom</span>(<span class="pl-c1">:Na</span>, <span class="pl-c1">SVector</span>(<span class="pl-c1">zero</span>(a), <span class="pl-c1">zero</span>(a), <span class="pl-c1">zero</span>(a)), charge <span class="pl-k">=</span> <span class="pl-c1">1.0</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>q<span class="pl-pds">"</span></span>),
             <span class="pl-c1">Atom</span>(<span class="pl-c1">:Na</span>, <span class="pl-c1">SVector</span>(<span class="pl-c1">0.5</span><span class="pl-k">*</span>a,<span class="pl-c1">zero</span>(a),<span class="pl-c1">0.5</span><span class="pl-k">*</span>a), charge <span class="pl-k">=</span> <span class="pl-c1">1.0</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>q<span class="pl-pds">"</span></span>),
             <span class="pl-c1">Atom</span>(<span class="pl-c1">:Na</span>, <span class="pl-c1">SVector</span>(<span class="pl-c1">zero</span>(a), <span class="pl-c1">0.5</span><span class="pl-k">*</span>a, <span class="pl-c1">0.5</span><span class="pl-k">*</span>a), charge <span class="pl-k">=</span> <span class="pl-c1">1.0</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>q<span class="pl-pds">"</span></span>),
             <span class="pl-c1">Atom</span>(<span class="pl-c1">:Na</span>, <span class="pl-c1">SVector</span>(<span class="pl-c1">0.5</span><span class="pl-k">*</span>a,<span class="pl-c1">0.5</span><span class="pl-k">*</span>a,<span class="pl-c1">zero</span>(a)), charge <span class="pl-k">=</span> <span class="pl-c1">1.0</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>q<span class="pl-pds">"</span></span>),
             <span class="pl-c1">Atom</span>(<span class="pl-c1">:Cl</span>, <span class="pl-c1">SVector</span>(<span class="pl-c1">0.5</span><span class="pl-k">*</span>a, <span class="pl-c1">zero</span>(a), <span class="pl-c1">zero</span>(a)), charge <span class="pl-k">=</span> <span class="pl-k">-</span><span class="pl-c1">1.0</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>q<span class="pl-pds">"</span></span>),
             <span class="pl-c1">Atom</span>(<span class="pl-c1">:Cl</span>, <span class="pl-c1">SVector</span>(<span class="pl-c1">zero</span>(a), <span class="pl-c1">0.5</span><span class="pl-k">*</span>a, <span class="pl-c1">zero</span>(a)), charge <span class="pl-k">=</span> <span class="pl-k">-</span><span class="pl-c1">1.0</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>q<span class="pl-pds">"</span></span>),
             <span class="pl-c1">Atom</span>(<span class="pl-c1">:Cl</span>, <span class="pl-c1">SVector</span>(<span class="pl-c1">zero</span>(a),<span class="pl-c1">zero</span>(a),<span class="pl-c1">0.5</span><span class="pl-k">*</span>a), charge <span class="pl-k">=</span> <span class="pl-k">-</span><span class="pl-c1">1.0</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>q<span class="pl-pds">"</span></span>),
             <span class="pl-c1">Atom</span>(<span class="pl-c1">:Cl</span>, <span class="pl-c1">SVector</span>(<span class="pl-c1">0.5</span><span class="pl-k">*</span>a, <span class="pl-c1">0.5</span><span class="pl-k">*</span>a, <span class="pl-c1">0.5</span><span class="pl-k">*</span>a), charge <span class="pl-k">=</span> <span class="pl-k">-</span><span class="pl-c1">1.0</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>q<span class="pl-pds">"</span></span>)]
    <span class="pl-k">return</span> <span class="pl-c1">Crystal</span>(lattice,basis,N)
<span class="pl-k">end</span></pre></div>
<p dir="auto">Intertwined FCC:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="function NaCl2(a, N::SVector{3})
    lattice = BravaisLattice(CubicLattice(a), FaceCentered())
    basis = [Atom(:Na, SVector(zero(a), zero(a), zero(a)), charge = 1.0u&quot;q&quot;),
             Atom(:Cl, SVector(0.5*a, zero(a), zero(a)), charge = -1.0u&quot;q&quot;)]
    return Crystal(lattice,basis,N)
end"><pre><span class="pl-k">function</span> <span class="pl-en">NaCl2</span>(a, N<span class="pl-k">::</span><span class="pl-c1">SVector{3}</span>)
    lattice <span class="pl-k">=</span> <span class="pl-c1">BravaisLattice</span>(<span class="pl-c1">CubicLattice</span>(a), <span class="pl-c1">FaceCentered</span>())
    basis <span class="pl-k">=</span> [<span class="pl-c1">Atom</span>(<span class="pl-c1">:Na</span>, <span class="pl-c1">SVector</span>(<span class="pl-c1">zero</span>(a), <span class="pl-c1">zero</span>(a), <span class="pl-c1">zero</span>(a)), charge <span class="pl-k">=</span> <span class="pl-c1">1.0</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>q<span class="pl-pds">"</span></span>),
             <span class="pl-c1">Atom</span>(<span class="pl-c1">:Cl</span>, <span class="pl-c1">SVector</span>(<span class="pl-c1">0.5</span><span class="pl-k">*</span>a, <span class="pl-c1">zero</span>(a), <span class="pl-c1">zero</span>(a)), charge <span class="pl-k">=</span> <span class="pl-k">-</span><span class="pl-c1">1.0</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>q<span class="pl-pds">"</span></span>)]
    <span class="pl-k">return</span> <span class="pl-c1">Crystal</span>(lattice,basis,N)
<span class="pl-k">end</span></pre></div>
<p dir="auto">Both methods yield the same structure with periodic boundary conditions, but the first function uses a conventional cell so the result is much easier to see and create a simulation box for. Whenever possible use a conventional cell (simple cubic lattice). Note that to use both of these functions the lattice parameter a is the distance between Na atoms (or Cl atoms) not the Na-Cl distance as the basis places the atoms at the proper 0.5*a spacing.</p>
<table>
<tbody><tr>
    <th align="center">Conventional Cell</th>
    <th align="center">FCC Unit Cell</th>
</tr>
<tr>
    <td align="center"><a target="_blank" rel="noopener noreferrer" href="https://github.com/ejmeitz/SimpleCrystals.jl/raw/main/assets/NaCl_8atom_basis.png"><img src="https://github.com/ejmeitz/SimpleCrystals.jl/raw/main/assets/NaCl_8atom_basis.png" alt="1" width="320px" height="240px" style="max-width: 100%;"></a></td>
    <td align="center"><a target="_blank" rel="noopener noreferrer" href="https://github.com/ejmeitz/SimpleCrystals.jl/raw/main/assets/nacl_fcc_basis.png"><img src="https://github.com/ejmeitz/SimpleCrystals.jl/raw/main/assets/nacl_fcc_basis.png" alt="1" width="320px" height="240px" style="max-width: 100%;"></a></td>
</tr>
</tbody></table>
<h4 dir="auto"><a id="user-content-file-io" class="anchor" aria-hidden="true" href="#file-io"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>File I/O</h4>
<p dir="auto">Using one of the built-in crystal objects (e.g. FCC) or a user-defined crystal you can call the <code>to_xyz()</code> function to print out a .xyz file with a chosen number of unit cells. For example, to get the coordinates for 4 unit-cells in the x, y and z directions for FCC you could use the following code:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="a = 5.4u&quot;Å&quot;
fcc_crystal = FCC(a, :C, SVector(4,4,4))
to_xyz(fcc_crystal, raw&quot;C:\Users\ejmei\Desktop\positions_fcc.xyz&quot;)"><pre>a <span class="pl-k">=</span> <span class="pl-c1">5.4</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>Å<span class="pl-pds">"</span></span>
fcc_crystal <span class="pl-k">=</span> <span class="pl-c1">FCC</span>(a, <span class="pl-c1">:C</span>, <span class="pl-c1">SVector</span>(<span class="pl-c1">4</span>,<span class="pl-c1">4</span>,<span class="pl-c1">4</span>))
<span class="pl-c1">to_xyz</span>(fcc_crystal, <span class="pl-s"><span class="pl-c1">raw</span><span class="pl-pds">"</span>C:\Users\ejmei\Desktop\positions_fcc.xyz<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">To get the list of atoms in code you can use the <code>atoms</code> member variable. The code below will return the array of atoms that the to_xyz() function builds internally. AlLternatively, you can loop over the crystal object which will iterate through the <code>crystal.atoms</code> list.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="a = 5.4u&quot;Å&quot;
fcc_crystal = FCC(a, :C, SVector(2,2,2))
atoms = fcc_crystal.atoms

for atom in fcc_crystal
    #do something
end"><pre>a <span class="pl-k">=</span> <span class="pl-c1">5.4</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>Å<span class="pl-pds">"</span></span>
fcc_crystal <span class="pl-k">=</span> <span class="pl-c1">FCC</span>(a, <span class="pl-c1">:C</span>, <span class="pl-c1">SVector</span>(<span class="pl-c1">2</span>,<span class="pl-c1">2</span>,<span class="pl-c1">2</span>))
atoms <span class="pl-k">=</span> fcc_crystal<span class="pl-k">.</span>atoms

<span class="pl-k">for</span> atom <span class="pl-k">in</span> fcc_crystal
    <span class="pl-c"><span class="pl-c">#</span>do something</span>
<span class="pl-k">end</span></pre></div>
</article></div>