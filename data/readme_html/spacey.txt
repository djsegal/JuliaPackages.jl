<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-spaceyjl" class="anchor" aria-hidden="true" href="#spaceyjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Spacey.jl</h1>
<p dir="auto"><a href="https://github.com/glwhart/Spacey.jl/actions/workflows/Runtests.yml"><img src="https://github.com/glwhart/Spacey.jl/actions/workflows/Runtests.yml/badge.svg" alt="Runtests" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/glwhart/Spacey.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/f8a524a2ff9e040290dd41323dc76e8da3929d817a3e4409223b0d22d80f09fb/68747470733a2f2f636f6465636f762e696f2f67682f676c77686172742f5370616365792e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e7376673f746f6b656e3d4f594150465a49323849" alt="codecov" data-canonical-src="https://codecov.io/gh/glwhart/Spacey.jl/branch/main/graph/badge.svg?token=OYAPFZI28I" style="max-width: 100%;"></a></p>
<p dir="auto">The package provides functions related to finding the spacegroup of a crystal. (The spacegroup of a crystal is useful in the context density functional theory calculations, computational materials science, and machine learning for materials prediction.)</p>
<p dir="auto">This package will eventually provide all of the functionality of the <a href="https://github.com/msg-byu/enumlib">enumlib package</a> and some additional functionality, useful for machine learning applications and materials science. In this pre-release version, only a pointgroup finder is provided, as well as a "snap to symmetry" function for unit cells.</p>
<p dir="auto">One of the unique features of the package is its robustness to finite-precision issues, a constant bane of other spacegroup codes.</p>
<p dir="auto">A few simple examples are provided below. This package finds symmetries very efficiently* by relying on the assumption that the basis is as compact as possible. To assure the most compact basis, this code first reduces the input basis vectors to a "Minkowski-reduced" basis. (See <a href="https://github.com/glwhart/MinkowskiReduction.jl">MinkowskiReduce.jl</a>)</p>
<p dir="auto">(* Normally efficiency is not important, since finding the symmmetryies is a relatively quick computation, but when the symmetries of tens of thousands of cases are needed in just a second or two, as in <a href="https://github.com/msg-byu/autoGR">autoGR</a>, efficiency becomes essential.)</p>
<h2 dir="auto"><a id="user-content-example-1-hexagonal-lattice" class="anchor" aria-hidden="true" href="#example-1-hexagonal-lattice"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example 1: Hexagonal lattice</h2>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; u,v,w = ([1, 0, 0], [0.5, √3/2, 0.0], [0.0, 0.0, √(8/3)])
([1, 0, 0], [0.5, 0.8660254037844386, 0.0], [0.0, 0.0, 1.632993161855452])

julia&gt; pointGroup(u,v,w)
24-element Vector{Matrix{Int64}}:
 [-1 0 0; -1 1 0; 0 0 -1]
...
 [1 0 0; 1 -1 0; 0 0 1]"><pre class="notranslate"><code>julia&gt; u,v,w = ([1, 0, 0], [0.5, √3/2, 0.0], [0.0, 0.0, √(8/3)])
([1, 0, 0], [0.5, 0.8660254037844386, 0.0], [0.0, 0.0, 1.632993161855452])

julia&gt; pointGroup(u,v,w)
24-element Vector{Matrix{Int64}}:
 [-1 0 0; -1 1 0; 0 0 -1]
...
 [1 0 0; 1 -1 0; 0 0 1]
</code></pre></div>
<p dir="auto">By default the output is is "direct coordinates", the transformation matrices showing integer combinations of the basis that yield equivalent, but rotated basis vectors.</p>
<h2 dir="auto"><a id="user-content-example-2-rhombohedral-lattice-arbitrary-rotation-of-coordinate-system" class="anchor" aria-hidden="true" href="#example-2-rhombohedral-lattice-arbitrary-rotation-of-coordinate-system"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example 2: Rhombohedral lattice, arbitrary rotation of coordinate system</h2>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content=" julia&gt; u = [1, 1, 2]; v = [1, 2, 1];  w = [2, 1, 1];

julia&gt; u, v, w = threeDrotation(u, v, w, π / 3, π / 5, π / 7)
([1.0328466951537383, 1.855345731770484, 1.2210323173082058], [-0.2604424479658839, 2.2850084410500355, 0.8431525103014423], [0.7968127453125833, 2.3142904165695555, -0.09565206052008146])

julia&gt; length(pointGroup(u, v, w)) == 12
true

julia&gt; pointGroup(u, v, w)
12-element Vector{Matrix{Int64}}:
 [-1 0 0; -1 1 1; 0 0 -1]
 [-1 1 0; -1 0 -1; 0 0 1]
 [-1 0 0; 0 -1 0; 0 0 -1]
 [-1 1 0; 0 1 0; 0 0 1]
 [0 -1 -1; -1 0 -1; 0 0 1]
 [0 1 1; -1 1 1; 0 0 -1]
 [0 -1 -1; 1 -1 -1; 0 0 1]
 [0 1 1; 1 0 1; 0 0 -1]
 [1 -1 0; 0 -1 0; 0 0 -1]
 [1 0 0; 0 1 0; 0 0 1]
 [1 -1 0; 1 0 1; 0 0 -1]
 [1 0 0; 1 -1 -1; 0 0 1]"><pre class="notranslate"><code> julia&gt; u = [1, 1, 2]; v = [1, 2, 1];  w = [2, 1, 1];

julia&gt; u, v, w = threeDrotation(u, v, w, π / 3, π / 5, π / 7)
([1.0328466951537383, 1.855345731770484, 1.2210323173082058], [-0.2604424479658839, 2.2850084410500355, 0.8431525103014423], [0.7968127453125833, 2.3142904165695555, -0.09565206052008146])

julia&gt; length(pointGroup(u, v, w)) == 12
true

julia&gt; pointGroup(u, v, w)
12-element Vector{Matrix{Int64}}:
 [-1 0 0; -1 1 1; 0 0 -1]
 [-1 1 0; -1 0 -1; 0 0 1]
 [-1 0 0; 0 -1 0; 0 0 -1]
 [-1 1 0; 0 1 0; 0 0 1]
 [0 -1 -1; -1 0 -1; 0 0 1]
 [0 1 1; -1 1 1; 0 0 -1]
 [0 -1 -1; 1 -1 -1; 0 0 1]
 [0 1 1; 1 0 1; 0 0 -1]
 [1 -1 0; 0 -1 0; 0 0 -1]
 [1 0 0; 0 1 0; 0 0 1]
 [1 -1 0; 1 0 1; 0 0 -1]
 [1 0 0; 1 -1 -1; 0 0 1]
</code></pre></div>
<h2 dir="auto"><a id="user-content-example-3-slightly-distorted-cubic-case-snap-back-to-perfect-cubic-cell" class="anchor" aria-hidden="true" href="#example-3-slightly-distorted-cubic-case-snap-back-to-perfect-cubic-cell"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example 3: Slightly distorted cubic case, "snap back" to perfect cubic cell</h2>
<p dir="auto">The lattice vectors are not quite orthogonal, not quite all the same length. First <code>pointGroup_robust</code> gets the symmetries that <em>should</em> be present for a perfect cubic cell. <code>snapToSymmetry</code> then finds the perfect cubic cell that is <em>as close as possible</em> to the original cell.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; u = [1+.01,0,0]; v = [0.,1-.01,0]; w = [0,0,1-.001];

julia&gt; ops = pointGroup_robust(u,v,w)
48-element Vector{Matrix{Int64}}:
 [-1 0 0; 0 -1 0; 0 0 -1]
 [-1 0 0; 0 -1 0; 0 0 1]
 [-1 0 0; 0 0 -1; 0 -1 0]
 [-1 0 0; 0 0 1; 0 -1 0]
 [-1 0 0; 0 0 -1; 0 1 0]
 [-1 0 0; 0 0 1; 0 1 0]
 [-1 0 0; 0 1 0; 0 0 -1]
 [-1 0 0; 0 1 0; 0 0 1]
 [0 -1 0; -1 0 0; 0 0 -1]
 ⋮
 [1 0 0; 0 -1 0; 0 0 -1]
 [1 0 0; 0 -1 0; 0 0 1]
 [1 0 0; 0 0 -1; 0 -1 0]
 [1 0 0; 0 0 1; 0 -1 0]
 [1 0 0; 0 0 -1; 0 1 0]
 [1 0 0; 0 0 1; 0 1 0]
 [1 0 0; 0 1 0; 0 0 -1]
 [1 0 0; 0 1 0; 0 0 1]
a,b,c,newops = snapToSymmetry(u,v,w,ops)
([0.9996332321644671, -1.1098158305294557e-16, 3.329447491588367e-16], [0.0, 0.9996332321644675, -3.330557677480862e-16], [0.0, -3.330557677480862e-16, 0.9996332321644676], [[-1 0 0; 0 -1 0; 0 0 -1], [-1 0 0; 0 -1 0; 0 0 1], [-1 0 0; 0 0 -1; 0 -1 0], [-1 0 0; 0 0 1; 0 -1 0], [-1 0 0; 0 0 -1; 0 1 0], [-1 0 0; 0 0 1; 0 1 0], [-1 0 0; 0 1 0; 0 0 -1], [-1 0 0; 0 1 0; 0 0 1], [0 -1 0; -1 0 0; 0 0 -1], [0 -1 0; -1 0 0; 0 0 1]  …  [0 1 0; 1 0 0; 0 0 -1], [0 1 0; 1 0 0; 0 0 1], [1 0 0; 0 -1 0; 0 0 -1], [1 0 0; 0 -1 0; 0 0 1], [1 0 0; 0 0 -1; 0 -1 0], [1 0 0; 0 0 1; 0 -1 0], [1 0 0; 0 0 -1; 0 1 0], [1 0 0; 0 0 1; 0 1 0], [1 0 0; 0 1 0; 0 0 -1], [1 0 0; 0 1 0; 0 0 1]])"><pre class="notranslate"><code>julia&gt; u = [1+.01,0,0]; v = [0.,1-.01,0]; w = [0,0,1-.001];

julia&gt; ops = pointGroup_robust(u,v,w)
48-element Vector{Matrix{Int64}}:
 [-1 0 0; 0 -1 0; 0 0 -1]
 [-1 0 0; 0 -1 0; 0 0 1]
 [-1 0 0; 0 0 -1; 0 -1 0]
 [-1 0 0; 0 0 1; 0 -1 0]
 [-1 0 0; 0 0 -1; 0 1 0]
 [-1 0 0; 0 0 1; 0 1 0]
 [-1 0 0; 0 1 0; 0 0 -1]
 [-1 0 0; 0 1 0; 0 0 1]
 [0 -1 0; -1 0 0; 0 0 -1]
 ⋮
 [1 0 0; 0 -1 0; 0 0 -1]
 [1 0 0; 0 -1 0; 0 0 1]
 [1 0 0; 0 0 -1; 0 -1 0]
 [1 0 0; 0 0 1; 0 -1 0]
 [1 0 0; 0 0 -1; 0 1 0]
 [1 0 0; 0 0 1; 0 1 0]
 [1 0 0; 0 1 0; 0 0 -1]
 [1 0 0; 0 1 0; 0 0 1]
a,b,c,newops = snapToSymmetry(u,v,w,ops)
([0.9996332321644671, -1.1098158305294557e-16, 3.329447491588367e-16], [0.0, 0.9996332321644675, -3.330557677480862e-16], [0.0, -3.330557677480862e-16, 0.9996332321644676], [[-1 0 0; 0 -1 0; 0 0 -1], [-1 0 0; 0 -1 0; 0 0 1], [-1 0 0; 0 0 -1; 0 -1 0], [-1 0 0; 0 0 1; 0 -1 0], [-1 0 0; 0 0 -1; 0 1 0], [-1 0 0; 0 0 1; 0 1 0], [-1 0 0; 0 1 0; 0 0 -1], [-1 0 0; 0 1 0; 0 0 1], [0 -1 0; -1 0 0; 0 0 -1], [0 -1 0; -1 0 0; 0 0 1]  …  [0 1 0; 1 0 0; 0 0 -1], [0 1 0; 1 0 0; 0 0 1], [1 0 0; 0 -1 0; 0 0 -1], [1 0 0; 0 -1 0; 0 0 1], [1 0 0; 0 0 -1; 0 -1 0], [1 0 0; 0 0 1; 0 -1 0], [1 0 0; 0 0 -1; 0 1 0], [1 0 0; 0 0 1; 0 1 0], [1 0 0; 0 1 0; 0 0 -1], [1 0 0; 0 1 0; 0 0 1]])
</code></pre></div>
</article></div>