<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-package-charfuncpricing" class="anchor" aria-hidden="true" href="#package-charfuncpricing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Package CharFuncPricing</h1>
<table>
<thead>
<tr>
<th align="center">Status</th>
<th align="center">Coverage</th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><a href="https://travis-ci.org/jherekhealy/CharFuncPricing.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/dc1b9eca19b643f635ace4c83e66c8730fd3ae19dbf25401eca7f34a0e2aff7c/68747470733a2f2f7472617669732d63692e6f72672f6a686572656b6865616c792f4368617246756e6350726963696e672e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/jherekhealy/CharFuncPricing.jl.svg?branch=master" style="max-width:100%;"></a></td>
<td align="center"><a href="http://codecov.io/github/jherekhealy/CharFuncPricing.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/277b30a2ac4daee5d90830c662dd7c06fd020dd5a6a83fab7c54ee769bd5d263/687474703a2f2f636f6465636f762e696f2f6769746875622f6a686572656b6865616c792f4368617246756e6350726963696e672e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/jherekhealy/CharFuncPricing.jl/coverage.svg?branch=master" style="max-width:100%;"></a></td>
</tr>
</tbody>
</table>
<p>Julia package to provide reference European option prices for stochastic volatility models with a known characteristic function, such as the Heston stochastic volatility model. For the Heston and Schobel-Zhu models, a function provides the first, second and fourth cumulants through analytical formulas.</p>
<p>The code is not meant for production purpose and does not always cater for corner cases. It however supports arbitrary precision via the Nemo package.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>In a Julia REPL, enter <code>pkg</code> mode (by pressing <code>]</code>) and run:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="(v1.0) pkg&gt; add CharFuncPricing
"><pre>(v1.<span class="pl-c1">0</span>) pkg<span class="pl-k">&gt;</span> add CharFuncPricing</pre></div>
<p><a href="https://julialang.org" rel="nofollow">Julia</a> version 1.2 or higher is required.</p>
<h2><a id="user-content-cos-method" class="anchor" aria-hidden="true" href="#cos-method"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Cos method</h2>
<h3><a id="user-content-float64-usage" class="anchor" aria-hidden="true" href="#float64-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Float64 Usage</h3>
<p>Start by creating a <code>HestonParams</code> structure, which represents the parameters of the Heston model: v0, κ, θ, ρ, σ.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="params = HestonParams(v0, κ, θ, ρ, σ)
"><pre>params <span class="pl-k">=</span> <span class="pl-c1">HestonParams</span>(v0, κ, θ, ρ, σ)</pre></div>
<p>Then make a <code>CosCharFuncPricer</code> structure via <code>makeCosCharFuncPricer</code>. This function will store the relevant <code>m</code> values of the characteristic function for the range [a,b] defined by <code>l</code> deviations using the cumulants rule <code>a = c1 - l * sqrt(c2+sqrt(c4))</code>, <code>b = c1 + l * sqrt(c2+sqrt(c4))</code>.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="cf = DefaultCharFunc(params)
pricer = makeCosCharFuncPricer(cf, τ, m, l)  
"><pre>cf <span class="pl-k">=</span> <span class="pl-c1">DefaultCharFunc</span>(params)
pricer <span class="pl-k">=</span> <span class="pl-c1">makeCosCharFuncPricer</span>(cf, τ, m, l)  </pre></div>
<p>And price vanilla call and puts of a given strike as following</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="priceEuropean(pricer, false, strike, forward, τ, df)
"><pre><span class="pl-c1">priceEuropean</span>(pricer, <span class="pl-c1">false</span>, strike, forward, τ, df)</pre></div>
<p>The second parameter specifies whether we want to price a call (true) or a put (false). The last parameter specifies the discount factor to maturity.</p>
<p>The first, second and fourth cumulants are given by</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="c1,c2,c4 = computeCumulants(params, τ)
"><pre>c1,c2,c4 <span class="pl-k">=</span> <span class="pl-c1">computeCumulants</span>(params, τ)</pre></div>
<h3><a id="user-content-nemo-usage" class="anchor" aria-hidden="true" href="#nemo-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Nemo Usage</h3>
<p>The only difference is to make sure the parameters are of ArbField type (real arbitrary precision), the function <code>makeCosCharFuncPricer</code> should also be called on the AcbField type.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Nemo
R = ArbField(256)
CC = AcbField(256)
cf = NemoCharFunc{HestonParams{arb}}(params, CC)
pricer = makeCosCharFuncPricer(cf, τ, m, l)
"><pre><span class="pl-k">using</span> Nemo
R <span class="pl-k">=</span> <span class="pl-c1">ArbField</span>(<span class="pl-c1">256</span>)
CC <span class="pl-k">=</span> <span class="pl-c1">AcbField</span>(<span class="pl-c1">256</span>)
cf <span class="pl-k">=</span> <span class="pl-c1">NemoCharFunc</span><span class="pl-c1">{HestonParams{arb}}</span>(params, CC)
pricer <span class="pl-k">=</span> <span class="pl-c1">makeCosCharFuncPricer</span>(cf, τ, m, l)</pre></div>
<h3><a id="user-content-float64-example" class="anchor" aria-hidden="true" href="#float64-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Float64 Example</h3>
<p>Here is how to price a put option with parameters</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="r=0.01; q=0.02
κ=4.0; θ=0.25; σ=1.0; ρ=-0.5; v0=0.04
τ = 1.0
spot = 100.0; strike = 80.0
spot *= exp((r - q) * τ)
df = exp(-r * τ)
params = HestonParams(v0, κ, θ, ρ, σ)
cf = DefaultCharFunc(params)
l = 32; m = 1024
pricer = makeCosCharFuncPricer(cf, τ, m, l)
priceEuropean(pricer, false, strike, spot, τ, df)
"><pre>r<span class="pl-k">=</span><span class="pl-c1">0.01</span>; q<span class="pl-k">=</span><span class="pl-c1">0.02</span>
κ<span class="pl-k">=</span><span class="pl-c1">4.0</span>; θ<span class="pl-k">=</span><span class="pl-c1">0.25</span>; σ<span class="pl-k">=</span><span class="pl-c1">1.0</span>; ρ<span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">0.5</span>; v0<span class="pl-k">=</span><span class="pl-c1">0.04</span>
τ <span class="pl-k">=</span> <span class="pl-c1">1.0</span>
spot <span class="pl-k">=</span> <span class="pl-c1">100.0</span>; strike <span class="pl-k">=</span> <span class="pl-c1">80.0</span>
spot <span class="pl-k">*=</span> <span class="pl-c1">exp</span>((r <span class="pl-k">-</span> q) <span class="pl-k">*</span> τ)
df <span class="pl-k">=</span> <span class="pl-c1">exp</span>(<span class="pl-k">-</span>r <span class="pl-k">*</span> τ)
params <span class="pl-k">=</span> <span class="pl-c1">HestonParams</span>(v0, κ, θ, ρ, σ)
cf <span class="pl-k">=</span> <span class="pl-c1">DefaultCharFunc</span>(params)
l <span class="pl-k">=</span> <span class="pl-c1">32</span>; m <span class="pl-k">=</span> <span class="pl-c1">1024</span>
pricer <span class="pl-k">=</span> <span class="pl-c1">makeCosCharFuncPricer</span>(cf, τ, m, l)
<span class="pl-c1">priceEuropean</span>(pricer, <span class="pl-c1">false</span>, strike, spot, τ, df)</pre></div>
<p>The result is <code>7.95887811325676</code>.</p>
<h3><a id="user-content-nemo-example" class="anchor" aria-hidden="true" href="#nemo-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Nemo Example</h3>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Nemo
using CharFuncPricing

R = ArbField(256)
CC = AcbField(256)
r = R(QQ(1, 100)); q = R(QQ(2, 100))
κ = R(4.0); θ = R(QQ(1, 4)); σ = R(1.0); v0 = R(QQ(4, 100)); ρ = R(-0.5);
τ = R(1.0)
spot = R(100); strike = R(80)
isCall = false
spot *= exp((r - q) * τ)
df = exp(-r * τ)
params = HestonParams(v0, κ, θ, ρ, σ)
cf = NemoCharFunc{HestonParams{arb}}(params, CC)
l = 48; m = 1024*4
pricer = makeCosCharFuncPricer(cf, τ, m, l)
priceEuropean(pricer, isCall, strike, spot, τ, df)
"><pre><span class="pl-k">using</span> Nemo
<span class="pl-k">using</span> CharFuncPricing

R <span class="pl-k">=</span> <span class="pl-c1">ArbField</span>(<span class="pl-c1">256</span>)
CC <span class="pl-k">=</span> <span class="pl-c1">AcbField</span>(<span class="pl-c1">256</span>)
r <span class="pl-k">=</span> <span class="pl-c1">R</span>(<span class="pl-c1">QQ</span>(<span class="pl-c1">1</span>, <span class="pl-c1">100</span>)); q <span class="pl-k">=</span> <span class="pl-c1">R</span>(<span class="pl-c1">QQ</span>(<span class="pl-c1">2</span>, <span class="pl-c1">100</span>))
κ <span class="pl-k">=</span> <span class="pl-c1">R</span>(<span class="pl-c1">4.0</span>); θ <span class="pl-k">=</span> <span class="pl-c1">R</span>(<span class="pl-c1">QQ</span>(<span class="pl-c1">1</span>, <span class="pl-c1">4</span>)); σ <span class="pl-k">=</span> <span class="pl-c1">R</span>(<span class="pl-c1">1.0</span>); v0 <span class="pl-k">=</span> <span class="pl-c1">R</span>(<span class="pl-c1">QQ</span>(<span class="pl-c1">4</span>, <span class="pl-c1">100</span>)); ρ <span class="pl-k">=</span> <span class="pl-c1">R</span>(<span class="pl-k">-</span><span class="pl-c1">0.5</span>);
τ <span class="pl-k">=</span> <span class="pl-c1">R</span>(<span class="pl-c1">1.0</span>)
spot <span class="pl-k">=</span> <span class="pl-c1">R</span>(<span class="pl-c1">100</span>); strike <span class="pl-k">=</span> <span class="pl-c1">R</span>(<span class="pl-c1">80</span>)
isCall <span class="pl-k">=</span> <span class="pl-c1">false</span>
spot <span class="pl-k">*=</span> <span class="pl-c1">exp</span>((r <span class="pl-k">-</span> q) <span class="pl-k">*</span> τ)
df <span class="pl-k">=</span> <span class="pl-c1">exp</span>(<span class="pl-k">-</span>r <span class="pl-k">*</span> τ)
params <span class="pl-k">=</span> <span class="pl-c1">HestonParams</span>(v0, κ, θ, ρ, σ)
cf <span class="pl-k">=</span> <span class="pl-c1">NemoCharFunc</span><span class="pl-c1">{HestonParams{arb}}</span>(params, CC)
l <span class="pl-k">=</span> <span class="pl-c1">48</span>; m <span class="pl-k">=</span> <span class="pl-c1">1024</span><span class="pl-k">*</span><span class="pl-c1">4</span>
pricer <span class="pl-k">=</span> <span class="pl-c1">makeCosCharFuncPricer</span>(cf, τ, m, l)
<span class="pl-c1">priceEuropean</span>(pricer, isCall, strike, spot, τ, df)</pre></div>
<p>The result is:</p>
<p><code>7.95887811325676828521326060761429303089865693725960319205094095681790030 +/- 4.83e-72</code>.</p>
<p>With <code>l=64; m=1024*8</code>, we obtain:</p>
<p><code>7.95887811325676828521326060761429303089865693725960319205094095681878397 +/- 3.71e-72</code>.</p>
<h2><a id="user-content-andersen-lake" class="anchor" aria-hidden="true" href="#andersen-lake"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Andersen-Lake</h2>
<h3><a id="user-content-float64-example-1" class="anchor" aria-hidden="true" href="#float64-example-1"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Float64 Example</h3>
<p>It starts similarly as for the Cos method, the only change is how to build the pricer variable.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="pricer = ALCharFuncPricer(cf)
priceEuropean(pricer, false, strike, spot, τ, df)
"><pre>pricer <span class="pl-k">=</span> <span class="pl-c1">ALCharFuncPricer</span>(cf)
<span class="pl-c1">priceEuropean</span>(pricer, <span class="pl-c1">false</span>, strike, spot, τ, df)</pre></div>
<p>The result is <code>7.9588781132567705</code>.</p>
<h3><a id="user-content-bigfloat-example" class="anchor" aria-hidden="true" href="#bigfloat-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>BigFloat Example</h3>
<p>We use BigFloat for the Heston parameters and option characteristics, as well as in the quadrature tolerance.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="r=BigFloat(&quot;0.01&quot;); q=BigFloat(&quot;0.02&quot;)
κ=BigFloat(4.0); θ=BigFloat(&quot;0.25&quot;); σ=BigFloat(1.0); ρ=BigFloat(&quot;-0.5&quot;); v0=BigFloat(&quot;0.04&quot;)
τ = BigFloat(1.0)
spot = BigFloat(100.0); strike = BigFloat(80.0)
spot *= exp((r - q) * τ)
df = exp(-r * τ)
params = HestonParams(v0, κ, θ, ρ, σ)
cf = DefaultCharFunc{HestonParams{BigFloat},Complex{BigFloat}}(params)
quad = TanhSinhQuadrature(800, BigFloat(1e-200))
pricer = ALCharFuncPricer(cf,quad)
priceEuropean(pricer, false, strike, spot, τ, df)
"><pre>r<span class="pl-k">=</span><span class="pl-c1">BigFloat</span>(<span class="pl-s"><span class="pl-pds">"</span>0.01<span class="pl-pds">"</span></span>); q<span class="pl-k">=</span><span class="pl-c1">BigFloat</span>(<span class="pl-s"><span class="pl-pds">"</span>0.02<span class="pl-pds">"</span></span>)
κ<span class="pl-k">=</span><span class="pl-c1">BigFloat</span>(<span class="pl-c1">4.0</span>); θ<span class="pl-k">=</span><span class="pl-c1">BigFloat</span>(<span class="pl-s"><span class="pl-pds">"</span>0.25<span class="pl-pds">"</span></span>); σ<span class="pl-k">=</span><span class="pl-c1">BigFloat</span>(<span class="pl-c1">1.0</span>); ρ<span class="pl-k">=</span><span class="pl-c1">BigFloat</span>(<span class="pl-s"><span class="pl-pds">"</span>-0.5<span class="pl-pds">"</span></span>); v0<span class="pl-k">=</span><span class="pl-c1">BigFloat</span>(<span class="pl-s"><span class="pl-pds">"</span>0.04<span class="pl-pds">"</span></span>)
τ <span class="pl-k">=</span> <span class="pl-c1">BigFloat</span>(<span class="pl-c1">1.0</span>)
spot <span class="pl-k">=</span> <span class="pl-c1">BigFloat</span>(<span class="pl-c1">100.0</span>); strike <span class="pl-k">=</span> <span class="pl-c1">BigFloat</span>(<span class="pl-c1">80.0</span>)
spot <span class="pl-k">*=</span> <span class="pl-c1">exp</span>((r <span class="pl-k">-</span> q) <span class="pl-k">*</span> τ)
df <span class="pl-k">=</span> <span class="pl-c1">exp</span>(<span class="pl-k">-</span>r <span class="pl-k">*</span> τ)
params <span class="pl-k">=</span> <span class="pl-c1">HestonParams</span>(v0, κ, θ, ρ, σ)
cf <span class="pl-k">=</span> <span class="pl-c1">DefaultCharFunc</span><span class="pl-c1">{HestonParams{BigFloat},Complex{BigFloat}}</span>(params)
quad <span class="pl-k">=</span> <span class="pl-c1">TanhSinhQuadrature</span>(<span class="pl-c1">800</span>, <span class="pl-c1">BigFloat</span>(<span class="pl-c1">1e-200</span>))
pricer <span class="pl-k">=</span> <span class="pl-c1">ALCharFuncPricer</span>(cf,quad)
<span class="pl-c1">priceEuropean</span>(pricer, <span class="pl-c1">false</span>, strike, spot, τ, df)</pre></div>
<p>The result is</p>
<p><code>7.95887811325676828521326060761429303089865693725960319205094095681918541918632</code></p>
<h2><a id="user-content-adaptive-flinn" class="anchor" aria-hidden="true" href="#adaptive-flinn"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Adaptive Flinn</h2>
<p>This is the adaptive Flinn quadrature using the transformation to (-1, 1) interval. No truncation is involved.</p>
<h3><a id="user-content-float64-example-2" class="anchor" aria-hidden="true" href="#float64-example-2"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Float64 Example</h3>
<p>With a quadrature tolerance of 1e-8:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="pricer = AdaptiveFlinnCharFuncPricer(cf, τ, qTol = 1e-8)
priceEuropean(pricer, false, strike, spot, τ, df)
"><pre>pricer <span class="pl-k">=</span> <span class="pl-c1">AdaptiveFlinnCharFuncPricer</span>(cf, τ, qTol <span class="pl-k">=</span> <span class="pl-c1">1e-8</span>)
<span class="pl-c1">priceEuropean</span>(pricer, <span class="pl-c1">false</span>, strike, spot, τ, df)</pre></div>
<p>The result is <code>7.958878112874899</code></p>
<h3><a id="user-content-bigfloat-example-1" class="anchor" aria-hidden="true" href="#bigfloat-example-1"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>BigFloat Example</h3>
<p>The adaptive Flinn pricer works with high accuracy, but does not perform very well then. It is more intended for the calculation of prices with a absolute error tolerance of around 1e-8 or 1e-10.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="pricer = AdaptiveFlinnCharFuncPricer(cf, τ, qTol = BigFloat(1e-24))
priceEuropean(pricer, false, strike, spot, τ, df)
"><pre>pricer <span class="pl-k">=</span> <span class="pl-c1">AdaptiveFlinnCharFuncPricer</span>(cf, τ, qTol <span class="pl-k">=</span> <span class="pl-c1">BigFloat</span>(<span class="pl-c1">1e-24</span>))
<span class="pl-c1">priceEuropean</span>(pricer, <span class="pl-c1">false</span>, strike, spot, τ, df)</pre></div>
<p>The result is</p>
<p><code>7.958878113256768285213257572750089190600415520655780637746847607110529890012863</code></p>
<p>and the effective accuracy is 3e-24. In total, <code>length(pricer.kcos[1,:])=31511</code> points are used, compared to 295 for an tolerance of 1e-10. For a tolerance of 1e-32, 450799 points are used. This means that algorithm is asymptotically linear on this example.</p>
<h2><a id="user-content-testing" class="anchor" aria-hidden="true" href="#testing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Testing</h2>
<p>In a Julia REPL session, enter <code>pkg</code> mode and run <code>test CharFuncPricing</code>.</p>
<p>Unit tests verify the call and put option prices against the <a href="https://financepress.com/2019/02/15/heston-model-reference-prices/" rel="nofollow">reference prices</a> of Alan Lewis in double and arbitrary precision. In fact, the implementation here gives more precise results (minimum accuracy of 1e-60 while Alan Lewis numbers are only accurate up to 1e-25).</p>
<p>Cumulants are checked against a Taylor series algorithmic differentiation.</p>
<h2><a id="user-content-references" class="anchor" aria-hidden="true" href="#references"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>References</h2>
<p>Andersen, L.B.G. and Lake, M. (2018) [Robust high-precision option pricing by
Fourier transforms: Contour deformations and double-exponential quadrature](SSRN 3231626)</p>
<p>Fang, F. and Oosterlee, C. W. (2008) <a href="https://epubs.siam.org/doi/abs/10.1137/080718061" rel="nofollow">A novel pricing method for European options based on Fourier-cosine series expansions</a></p>
<p>Healy, J. (2021) <a href="">Applied Quantitative Finance for Equity Derivatives</a></p>
<p>Le Floc'h, F. (2018) <a href="https://arxiv.org/abs/2005.13248" rel="nofollow">More Robust Pricing of European Options Based on Fourier Cosine Series Expansions</a></p>
<p>Le Floc'h, F. (2020) <a href="">An adaptive Filon quadrature for stochastic volatility
models</a></p>
</article></div>