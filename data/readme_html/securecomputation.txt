<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-securecomputationjl" class="anchor" aria-hidden="true" href="#securecomputationjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>SecureComputation.jl</h1>
<p>Secure multiparty computation in Julia</p>
<p>Implements Shamir's secret sharing scheme to distribute a number, and the BGW88 protocol for calculating + and * over the resulting numeric representation.</p>
<h2><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example</h2>
<p>Example from <a href="https://en.wikipedia.org/wiki/Shamir%27s_Secret_Sharing#Solution" rel="nofollow">Wikipedia</a></p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> SecureComputation

F <span class="pl-k">=</span> GF{Int,<span class="pl-c1">1613</span>} <span class="pl-c"><span class="pl-c">#</span>Galois field (finite field, integers mod 1613, perform compute in native Int)</span>

secret <span class="pl-k">=</span> <span class="pl-c1">F</span>(<span class="pl-c1">1234</span>)
x <span class="pl-k">=</span> <span class="pl-c1">shamir</span>(<span class="pl-c1">6</span>, secret, F[<span class="pl-c1">166</span>, <span class="pl-c1">94</span>]) <span class="pl-c"><span class="pl-c">#</span> == DistributedShares(1:6, F[1494, 329, 965, 176, 1188, 775])</span>

<span class="pl-c1">unshamir</span>(x) <span class="pl-c"><span class="pl-c">#</span> == secret</span>

<span class="pl-c"><span class="pl-c">#</span>With 2 random coefficients, you only need 2+1 = 3 pieces to reconstruct the secret</span>
<span class="pl-c1">unshamir</span>(x[<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">3</span>]) <span class="pl-c"><span class="pl-c">#</span> == secret</span></pre></div>
<p>A more realistic example using the Intel hardware CSPRNG</p>
<pre><code>F = GF{BigInt,1000000004191}
secret = F(1234567890)
x = shamir(RdRand(), 100, 39, secret)
unshamir(x) # == secret

#If I have just 39 pieces, I can also reconstruct the number
unshamir(x[1:39])  # == secret
</code></pre>
<p>An example showing a simple matrix computation</p>
<pre><code>using LinearAlgebra, SecureComputation
F = GF{BigInt,1000000004191}
M = rand(RdRand(), F, 3, 3)
MM = shamir.(100, M)
Z=lu(MM)
istril(unshamir.(Z.L)) #true
</code></pre>
</article></div>