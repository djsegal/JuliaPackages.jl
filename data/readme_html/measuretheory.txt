<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-measuretheory" class="anchor" aria-hidden="true" href="#measuretheory"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>MeasureTheory</h1>
<p><a href="https://cscherrer.github.io/MeasureTheory.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://cscherrer.github.io/MeasureTheory.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a>
<a href="https://github.com/cscherrer/MeasureTheory.jl/actions"><img src="https://github.com/cscherrer/MeasureTheory.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/cscherrer/MeasureTheory.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/c643f6bbc0a9bce6150fdc612d6740f8ba2df06dac07bc0b57212d4da7e3b2e5/68747470733a2f2f636f6465636f762e696f2f67682f6373636865727265722f4d6561737572655468656f72792e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/cscherrer/MeasureTheory.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p><code>MeasureTheory.jl</code> is a package for building and reasoning about measures.</p>
<h1><a id="user-content-why" class="anchor" aria-hidden="true" href="#why"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Why?</h1>
<p>A distribution (as in Distributions.jl) is also called a <em>probability measure</em>, and carries with it the constraint of adding (or integrating) to one. Statistical work usually requires this "at the end of the day", but enforcing it at each step of a computation can have considerable overhead.</p>
<p>As a generalization of the concept of volume, measures also have applications outside of probability theory.</p>
<h1><a id="user-content-goals" class="anchor" aria-hidden="true" href="#goals"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Goals</h1>
<h2><a id="user-content-distributionsjl-compatibility" class="anchor" aria-hidden="true" href="#distributionsjl-compatibility"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Distributions.jl Compatibility</h2>
<p>Distirbutions.jl is wildly popular, and is large enough that replacing it all at once would be a major undertaking.</p>
<p>Instead, we should aim to make any Distribution easily usable as a Measure. We'll most likely implement this using an <code>IsMeasure</code> trait.</p>
<h2><a id="user-content-absolute-continuity" class="anchor" aria-hidden="true" href="#absolute-continuity"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Absolute Continuity</h2>
<p>For two measures μ,ν on a set X, we say μ is <em>absolutely continuous</em> with respect to ν if ν(A)=0 implies μ(A)=0 for every measurable subset A of X.</p>
<p>The following are equivalent:</p>
<ol>
<li>μ ≪ ν</li>
<li>μ is absolutely continuous wrt ν</li>
<li>There exists a function f such that μ = ∫f dν</li>
</ol>
<p>So we'll need a <code>≪</code> operator. Note that <code>≪</code> is not antisymmetric; it's common for both <code>μ ≪ ν</code> and  <code>ν ≪ μ</code> to hold.</p>
<p>If <code>μ ≪ ν</code> and  <code>ν ≪ μ</code>, we say μ and ν are <em>equivalent</em> and write <code>μ ≃ ν</code>. (This is often written as <code>μ ~ ν</code>, but we reserve <code>~</code> for random variables following a distribution, as is common in the literature and probabilistic programming languages.)</p>
<p>If we collapse the equivalence classes (under ≃), <code>≪</code> becomes a partial order.</p>
<p><em>We need ≃ and ≪ to be fast</em>. If the support of a measure can be determined statically from its type, we can define ≃ and ≪ as generated functions.</p>
<h2><a id="user-content-radon-nikodym-derivatives" class="anchor" aria-hidden="true" href="#radon-nikodym-derivatives"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Radon-Nikodym Derivatives</h2>
<p>One of the equivalent conditions above was "There exists a function f such that μ = ∫f dν". In this case, <code>f</code> is called a <em>Radon-Nikodym derivative</em>, or (less formally) a <em>density</em>. In this case we often write <code>f = dμ/dν</code>.</p>
<p>For any measures μ and ν with μ≪ν, we should be represent this.</p>
<h2><a id="user-content-integration" class="anchor" aria-hidden="true" href="#integration"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Integration</h2>
<p>More generally, we'll need to be able to represent change of measure as above, <code>∫f dν</code>. We'll need an <code>Integral</code> type</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="struct Integral{F,M}
    f::F
    μ::M
end
"><pre><span class="pl-k">struct</span> Integral{F,M}
    f<span class="pl-k">::</span><span class="pl-c1">F</span>
    μ<span class="pl-k">::</span><span class="pl-c1">M</span>
<span class="pl-k">end</span></pre></div>
<p>Then we'll have a function <code>∫</code>. For cases where μ = ∫f dν,  <code>∫(f, ν)</code> will just return <code>μ</code> (we can do this based on the types). For unknown cases (which will be most of them), we'll return <code>∫(f, ν) = Integral(f, ν)</code>.</p>
<h2><a id="user-content-measure-combinators" class="anchor" aria-hidden="true" href="#measure-combinators"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Measure Combinators</h2>
<p>It should be very easy to build new measures from existing ones. This can be done using, for example,</p>
<ul>
<li>restriction</li>
<li>product measure</li>
<li>superposition</li>
<li>pushforward</li>
</ul>
<p>There's also function spaces, but this gets much trickier. We'll need to determine a good way to reason about this.</p>
<h2><a id="user-content-more" class="anchor" aria-hidden="true" href="#more"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>More???</h2>
<p>This is very much a work in progress. If there are things you think we should have as goals, please add an issue with the <code>goals</code> label.</p>
<hr>
<h1><a id="user-content-old-stuff" class="anchor" aria-hidden="true" href="#old-stuff"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Old Stuff</h1>
<p><strong>WARNING: The current README is very developer-oriented. Casual use will be much simpler</strong></p>
<p>For an example, let's walk through the construction of <code>src/probability/Normal</code>.</p>
<p>First, we have</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="@measure Normal
"><pre><span class="pl-c1">@measure</span> Normal</pre></div>
<p>this is just a little helper function, and is equivalent to</p>
<h1><a id="user-content-todo-clean-up" class="anchor" aria-hidden="true" href="#todo-clean-up"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>TODO: Clean up</h1>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="quote
    #= /home/chad/git/Measures.jl/src/Measures.jl:55 =#
    struct Normal{var&quot;#10#P&quot;, var&quot;#11#X&quot;} &lt;: Measures.AbstractMeasure{var&quot;#11#X&quot;}
        #= /home/chad/git/Measures.jl/src/Measures.jl:56 =#
        par::var&quot;#10#P&quot;
    end
    #= /home/chad/git/Measures.jl/src/Measures.jl:59 =#
    function Normal(var&quot;#13#nt&quot;::Measures.NamedTuple)
        #= /home/chad/git/Measures.jl/src/Measures.jl:59 =#
        #= /home/chad/git/Measures.jl/src/Measures.jl:60 =#
        var&quot;#12#P&quot; = Measures.typeof(var&quot;#13#nt&quot;)
        #= /home/chad/git/Measures.jl/src/Measures.jl:61 =#
        return Normal{var&quot;#12#P&quot;, Measures.eltype(Normal{var&quot;#12#P&quot;})}
    end
    #= /home/chad/git/Measures.jl/src/Measures.jl:64 =#
    Normal(; var&quot;#14#kwargs&quot;...) = begin
            #= /home/chad/git/Measures.jl/src/Measures.jl:64 =#
            Normal((; var&quot;#14#kwargs&quot;...))
        end
    #= /home/chad/git/Measures.jl/src/Measures.jl:66 =#
    (var&quot;#8#basemeasure&quot;(var&quot;#15#μ&quot;::Normal{var&quot;#16#P&quot;, var&quot;#17#X&quot;}) where {var&quot;#16#P&quot;, var&quot;#17#X&quot;}) = begin
            #= /home/chad/git/Measures.jl/src/Measures.jl:66 =#
            Lebesgue{var&quot;#17#X&quot;}
        end
    #= /home/chad/git/Measures.jl/src/Measures.jl:68 =#
    (var&quot;#9#≪&quot;(::Normal{var&quot;#19#P&quot;, var&quot;#20#X&quot;}, ::Lebesgue{var&quot;#20#X&quot;}) where {var&quot;#19#P&quot;, var&quot;#20#X&quot;}) = begin
            #= /home/chad/git/Measures.jl/src/Measures.jl:68 =#
            true
        end
end
"><pre><span class="pl-k">quote</span>
    <span class="pl-c"><span class="pl-c">#=</span> /home/chad/git/Measures.jl/src/Measures.jl:55 <span class="pl-c">=#</span></span>
    <span class="pl-k">struct</span> Normal{<span class="pl-c1">var"#10#P"</span>, <span class="pl-c1">var"#11#X"</span>} <span class="pl-k">&lt;:</span> <span class="pl-c1">Measures.AbstractMeasure{var"#11#X"}</span>
        <span class="pl-c"><span class="pl-c">#=</span> /home/chad/git/Measures.jl/src/Measures.jl:56 <span class="pl-c">=#</span></span>
        par<span class="pl-k">::</span><span class="pl-c1">var"#10#P"</span>
    <span class="pl-k">end</span>
    <span class="pl-c"><span class="pl-c">#=</span> /home/chad/git/Measures.jl/src/Measures.jl:59 <span class="pl-c">=#</span></span>
    <span class="pl-k">function</span> <span class="pl-en">Normal</span>(<span class="pl-c1">var"#13#nt"</span><span class="pl-k">::</span><span class="pl-c1">Measures.NamedTuple</span>)
        <span class="pl-c"><span class="pl-c">#=</span> /home/chad/git/Measures.jl/src/Measures.jl:59 <span class="pl-c">=#</span></span>
        <span class="pl-c"><span class="pl-c">#=</span> /home/chad/git/Measures.jl/src/Measures.jl:60 <span class="pl-c">=#</span></span>
        <span class="pl-c1">var"#12#P"</span> <span class="pl-k">=</span> Measures<span class="pl-k">.</span><span class="pl-c1">typeof</span>(<span class="pl-c1">var"#13#nt"</span>)
        <span class="pl-c"><span class="pl-c">#=</span> /home/chad/git/Measures.jl/src/Measures.jl:61 <span class="pl-c">=#</span></span>
        <span class="pl-k">return</span> Normal{<span class="pl-c1">var"#12#P"</span>, Measures<span class="pl-k">.</span><span class="pl-c1">eltype</span>(Normal{<span class="pl-c1">var"#12#P"</span>})}
    <span class="pl-k">end</span>
    <span class="pl-c"><span class="pl-c">#=</span> /home/chad/git/Measures.jl/src/Measures.jl:64 <span class="pl-c">=#</span></span>
    <span class="pl-en">Normal</span>(; <span class="pl-c1">var"#14#kwargs"</span><span class="pl-k">...</span>) <span class="pl-k">=</span> <span class="pl-k">begin</span>
            <span class="pl-c"><span class="pl-c">#=</span> /home/chad/git/Measures.jl/src/Measures.jl:64 <span class="pl-c">=#</span></span>
            <span class="pl-c1">Normal</span>((; <span class="pl-c1">var"#14#kwargs"</span><span class="pl-k">...</span>))
        <span class="pl-k">end</span>
    <span class="pl-c"><span class="pl-c">#=</span> /home/chad/git/Measures.jl/src/Measures.jl:66 <span class="pl-c">=#</span></span>
    (<span class="pl-c1">var"#8#basemeasure"</span>(<span class="pl-c1">var"#15#μ"</span><span class="pl-k">::</span><span class="pl-c1">Normal{var"#16#P", var"#17#X"}</span>) <span class="pl-k">where</span> {<span class="pl-c1">var"#16#P"</span>, <span class="pl-c1">var"#17#X"</span>}) <span class="pl-k">=</span> <span class="pl-k">begin</span>
            <span class="pl-c"><span class="pl-c">#=</span> /home/chad/git/Measures.jl/src/Measures.jl:66 <span class="pl-c">=#</span></span>
            Lebesgue{<span class="pl-c1">var"#17#X"</span>}
        <span class="pl-k">end</span>
    <span class="pl-c"><span class="pl-c">#=</span> /home/chad/git/Measures.jl/src/Measures.jl:68 <span class="pl-c">=#</span></span>
    (<span class="pl-c1">var"#9#≪"</span>(<span class="pl-k">::</span><span class="pl-c1">Normal{var"#19#P", var"#20#X"}</span>, <span class="pl-k">::</span><span class="pl-c1">Lebesgue{var"#20#X"}</span>) <span class="pl-k">where</span> {<span class="pl-c1">var"#19#P"</span>, <span class="pl-c1">var"#20#X"</span>}) <span class="pl-k">=</span> <span class="pl-k">begin</span>
            <span class="pl-c"><span class="pl-c">#=</span> /home/chad/git/Measures.jl/src/Measures.jl:68 <span class="pl-c">=#</span></span>
            <span class="pl-c1">true</span>
        <span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>
<p>Next we have</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="Normal(μ::Real, σ::Real) = Normal(μ=μ, σ=σ)
"><pre><span class="pl-en">Normal</span>(μ<span class="pl-k">::</span><span class="pl-c1">Real</span>, σ<span class="pl-k">::</span><span class="pl-c1">Real</span>) <span class="pl-k">=</span> <span class="pl-c1">Normal</span>(μ<span class="pl-k">=</span>μ, σ<span class="pl-k">=</span>σ)</pre></div>
<p>This defines a default. If we just give two numbers as arguments (but no names), we'll assume this parameterization.</p>
<p>Next need to define a <code>eltype</code> function. This takes a constructor (here <code>Normal</code>) and a parameter, and tells us the space for which this defines a measure. Let's define this in terms of the types of the parameters,</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="eltype(::Type{Normal}, ::Type{NamedTuple{(:μ, :σ), Tuple{A, B}}}) where {A,B} = promote_type(A,B)
"><pre><span class="pl-en">eltype</span>(<span class="pl-k">::</span><span class="pl-c1">Type{Normal}</span>, <span class="pl-k">::</span><span class="pl-c1">Type{NamedTuple{(:μ, :σ), Tuple{A, B}}}</span>) <span class="pl-k">where</span> {A,B} <span class="pl-k">=</span> <span class="pl-c1">promote_type</span>(A,B)</pre></div>
<p>That's still kind of boring, so let's build the density. For this, we need to implement the trait</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="@trait Density{M,X} where {X = domain{M}} begin
    basemeasure :: [M] =&gt; Measure{X}
    logdensity :: [M, X] =&gt; Real
end
"><pre><span class="pl-c1">@trait</span> Density{M,X} <span class="pl-k">where</span> {X <span class="pl-k">=</span> domain{M}} <span class="pl-k">begin</span>
    basemeasure <span class="pl-k">::</span> [M] <span class="pl-k">=&gt;</span> Measure{X}
    logdensity <span class="pl-k">::</span> [M, X] <span class="pl-k">=&gt;</span> Real
<span class="pl-k">end</span></pre></div>
<p>A density doesn't exist by itself, but is defined relative to some <em>base measure</em>. For a normal distribution this is just Lebesgue measure on the real numbers. That, together with the usual Gaussian log-density, gives us</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="@implement Density{Normal{X,P},X} where {X, P &lt;: NamedTuple{(:μ, :σ)}} begin
    basemeasure(d) = Lebesgue(X)
    logdensity(d, x) = - (log(2) + log(π)) / 2 - log(d.par.σ)  - (x - d.par.μ)^2 / (2 * d.par.σ^2)
end
"><pre><span class="pl-c1">@implement</span> Density{Normal{X,P},X} <span class="pl-k">where</span> {X, P <span class="pl-k">&lt;:</span> <span class="pl-c1">NamedTuple{(:μ, :σ)}</span>} <span class="pl-k">begin</span>
    <span class="pl-en">basemeasure</span>(d) <span class="pl-k">=</span> <span class="pl-c1">Lebesgue</span>(X)
    <span class="pl-en">logdensity</span>(d, x) <span class="pl-k">=</span> <span class="pl-k">-</span> (<span class="pl-c1">log</span>(<span class="pl-c1">2</span>) <span class="pl-k">+</span> <span class="pl-c1">log</span>(π)) <span class="pl-k">/</span> <span class="pl-c1">2</span> <span class="pl-k">-</span> <span class="pl-c1">log</span>(d<span class="pl-k">.</span>par<span class="pl-k">.</span>σ)  <span class="pl-k">-</span> (x <span class="pl-k">-</span> d<span class="pl-k">.</span>par<span class="pl-k">.</span>μ)<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">/</span> (<span class="pl-c1">2</span> <span class="pl-k">*</span> d<span class="pl-k">.</span>par<span class="pl-k">.</span>σ<span class="pl-k">^</span><span class="pl-c1">2</span>)
<span class="pl-k">end</span></pre></div>
<p>Now we can compute the log-density:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; logdensity(Normal(0.0, 0.5), 1.0)
-2.2257913526447273
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">logdensity</span>(<span class="pl-c1">Normal</span>(<span class="pl-c1">0.0</span>, <span class="pl-c1">0.5</span>), <span class="pl-c1">1.0</span>)
<span class="pl-k">-</span><span class="pl-c1">2.2257913526447273</span></pre></div>
<p>And just to check that our default is working,</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; logdensity(Normal(μ=0.0, σ=0.5), 1.0)
-2.2257913526447273
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">logdensity</span>(<span class="pl-c1">Normal</span>(μ<span class="pl-k">=</span><span class="pl-c1">0.0</span>, σ<span class="pl-k">=</span><span class="pl-c1">0.5</span>), <span class="pl-c1">1.0</span>)
<span class="pl-k">-</span><span class="pl-c1">2.2257913526447273</span></pre></div>
<p>What about other parameterizations? Sure, no problem. Here's a way to write this for mean <code>μ</code> (as before), but using the <em>precision</em> (inverse of the variance) instead of standard deviation:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="eltype(::Type{Normal}, ::Type{NamedTuple{(:μ, :τ), Tuple{A, B}}}) where {A,B} = promote_type(A,B)

@implement Density{Normal{X,P},X} where {X, P &lt;: NamedTuple{(:μ, :τ)}} begin
    basemeasure(d) = Lebesgue(X)
    logdensity(d, x) = - (log(2) + log(π) - log(d.par.τ)  + d.par.τ * (x - d.par.μ)^2) / 2
end
"><pre><span class="pl-en">eltype</span>(<span class="pl-k">::</span><span class="pl-c1">Type{Normal}</span>, <span class="pl-k">::</span><span class="pl-c1">Type{NamedTuple{(:μ, :τ), Tuple{A, B}}}</span>) <span class="pl-k">where</span> {A,B} <span class="pl-k">=</span> <span class="pl-c1">promote_type</span>(A,B)

<span class="pl-c1">@implement</span> Density{Normal{X,P},X} <span class="pl-k">where</span> {X, P <span class="pl-k">&lt;:</span> <span class="pl-c1">NamedTuple{(:μ, :τ)}</span>} <span class="pl-k">begin</span>
    <span class="pl-en">basemeasure</span>(d) <span class="pl-k">=</span> <span class="pl-c1">Lebesgue</span>(X)
    <span class="pl-en">logdensity</span>(d, x) <span class="pl-k">=</span> <span class="pl-k">-</span> (<span class="pl-c1">log</span>(<span class="pl-c1">2</span>) <span class="pl-k">+</span> <span class="pl-c1">log</span>(π) <span class="pl-k">-</span> <span class="pl-c1">log</span>(d<span class="pl-k">.</span>par<span class="pl-k">.</span>τ)  <span class="pl-k">+</span> d<span class="pl-k">.</span>par<span class="pl-k">.</span>τ <span class="pl-k">*</span> (x <span class="pl-k">-</span> d<span class="pl-k">.</span>par<span class="pl-k">.</span>μ)<span class="pl-k">^</span><span class="pl-c1">2</span>) <span class="pl-k">/</span> <span class="pl-c1">2</span>
<span class="pl-k">end</span></pre></div>
<p>And another check:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; logdensity(Normal(μ=0.0, τ=4.0), 1.0)
-2.2257913526447273
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">logdensity</span>(<span class="pl-c1">Normal</span>(μ<span class="pl-k">=</span><span class="pl-c1">0.0</span>, τ<span class="pl-k">=</span><span class="pl-c1">4.0</span>), <span class="pl-c1">1.0</span>)
<span class="pl-k">-</span><span class="pl-c1">2.2257913526447273</span></pre></div>
<p>We can combine measures in a few ways, for now just <em>scaling</em> and <em>superposition</em>:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; 2.0*Lebesgue(Float64) + Normal(0.0,1.0)
SuperpositionMeasure{Float64,2}((MeasureTheory.WeightedMeasure{Float64,Float64}(2.0, Lebesgue{Float64}()), Normal{NamedTuple{(:μ, :σ),Tuple{Float64,Float64}},Float64}((μ = 0.0, σ = 1.0))))
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">2.0</span><span class="pl-k">*</span><span class="pl-c1">Lebesgue</span>(Float64) <span class="pl-k">+</span> <span class="pl-c1">Normal</span>(<span class="pl-c1">0.0</span>,<span class="pl-c1">1.0</span>)
<span class="pl-c1">SuperpositionMeasure</span><span class="pl-c1">{Float64,2}</span>((MeasureTheory<span class="pl-k">.</span><span class="pl-c1">WeightedMeasure</span><span class="pl-c1">{Float64,Float64}</span>(<span class="pl-c1">2.0</span>, <span class="pl-c1">Lebesgue</span><span class="pl-c1">{Float64}</span>()), <span class="pl-c1">Normal</span><span class="pl-c1">{NamedTuple{(:μ, :σ),Tuple{Float64,Float64}},Float64}</span>((μ <span class="pl-k">=</span> <span class="pl-c1">0.0</span>, σ <span class="pl-k">=</span> <span class="pl-c1">1.0</span>))))</pre></div>
<hr>
<p>For an easy way to find expressions for the common log-densities, see <a href="https://gist.github.com/cscherrer/47f0fc7597b4ffc11186d54cc4d8e577">this gist</a></p>
<h2><a id="user-content-support" class="anchor" aria-hidden="true" href="#support"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Support</h2>
<p><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/fcb05bc3ba4e426d789e08b5ceb288324c11a4881da808feea3e3c17fe223ff1/68747470733a2f2f706c616e74696e672e73706163652f73706f6e736f722f506c616e74696e6753706163652d73706f6e736f722d332e706e67"><img src="https://camo.githubusercontent.com/fcb05bc3ba4e426d789e08b5ceb288324c11a4881da808feea3e3c17fe223ff1/68747470733a2f2f706c616e74696e672e73706163652f73706f6e736f722f506c616e74696e6753706163652d73706f6e736f722d332e706e67" alt="Planting Space" data-canonical-src="https://planting.space/sponsor/PlantingSpace-sponsor-3.png" style="max-width:100%;"></a></p>
<h2><a id="user-content-stargazers-over-time" class="anchor" aria-hidden="true" href="#stargazers-over-time"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Stargazers over time</h2>
<p><a href="https://starchart.cc/cscherrer/MeasureTheory.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/1153effea922e8c047bb92fad9c4d70e5b8f657956e3af055382909c258ec84b/68747470733a2f2f7374617263686172742e63632f6373636865727265722f4d6561737572655468656f72792e6a6c2e737667" alt="Stargazers over time" data-canonical-src="https://starchart.cc/cscherrer/MeasureTheory.jl.svg" style="max-width:100%;"></a></p>
</article></div>