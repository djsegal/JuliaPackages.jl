<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p dir="auto"><a href="https://evetion.github.io/GeoAcceleratedArrays.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://evetion.github.io/GeoAcceleratedArrays.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/evetion/GeoAcceleratedArrays.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/b2d08be39ed867a622abe4f981780027bfe880c50fc6a161f76314adaee179c2/68747470733a2f2f636f6465636f762e696f2f67682f65766574696f6e2f47656f416363656c6572617465644172726179732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/evetion/GeoAcceleratedArrays.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<h1 dir="auto"><a id="user-content-geoacceleratedarrays" class="anchor" aria-hidden="true" href="#geoacceleratedarrays"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>GeoAcceleratedArrays</h1>
<p dir="auto">Accelerate Arrays using Spatial Indexes.</p>
<p dir="auto">Combines <a href="https://github.com/andyferris/AcceleratedArrays.jl">AcceleratedArrays</a> with <a href="https://github.com/JuliaGeo/LibSpatialIndex.jl">LibSpatialIndex</a>, speeding up area of interest queries, without having to do exact intersections on all geometries.
Takes inspiration from the Python <a href="https://github.com/Toblerity/rtree">rtree</a> package.</p>
<p dir="auto">Note that as the acceleration works by using the extents of geometries, the filtered list of geometries is not guaranteed to intersect, we only guarantee that all intersecting geometries are present.</p>
<h2 dir="auto"><a id="user-content-install" class="anchor" aria-hidden="true" href="#install"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Install</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="] add GeoAcceleratedArrays"><pre>] add GeoAcceleratedArrays</pre></div>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<p dir="auto">Apply a spatial index on a Vector with geometries using <code>accelerate</code>, after which one can quickly find the intersecting extents for a given area of interest by <code>findall</code> with the <code>in</code> predicate.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="AA = accelerate(A, RTreeIndex)
findall(in(aoi), AA)"><pre>AA <span class="pl-k">=</span> <span class="pl-c1">accelerate</span>(A, RTreeIndex)
<span class="pl-c1">findall</span>(<span class="pl-c1">in</span>(aoi), AA)</pre></div>
<h2 dir="auto"><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using GeoAcceleratedArrays
using LibGEOS  # or any other GeoInterface compatible geometries

p1 = readgeom(&quot;POLYGON((0 0,1 0,1 1,0 0))&quot;)
p2 = readgeom(&quot;POLYGON((0 0,-1 0,-1 -1,0 0))&quot;)

acc_polys = accelerate([p1, p2], RTreeIndex)
2-element Vector{Polygon} + RTreeIndex with Extents.Extent{(:X, :Y), Tuple{Tuple{Float64, Float64}, Tuple{Float64, Float64}}}((X = (-1.0, 1.0), Y = (-1.0, 1.0))):
 Polygon(Ptr{Nothing} @0x00006000030d2d00)
 Polygon(Ptr{Nothing} @0x00006000030d23a0)

aoi = Extents.Extent(X=(0.5, 1), Y=(0.5, 1))
Extent(X = (0.5, 1.0), Y = (0.5, 1.0))

indices = findall(in(aoi), acc_polys)
1-element Vector{Int64}:
 1"><pre><span class="pl-k">using</span> GeoAcceleratedArrays
<span class="pl-k">using</span> LibGEOS  <span class="pl-c"><span class="pl-c">#</span> or any other GeoInterface compatible geometries</span>

p1 <span class="pl-k">=</span> <span class="pl-c1">readgeom</span>(<span class="pl-s"><span class="pl-pds">"</span>POLYGON((0 0,1 0,1 1,0 0))<span class="pl-pds">"</span></span>)
p2 <span class="pl-k">=</span> <span class="pl-c1">readgeom</span>(<span class="pl-s"><span class="pl-pds">"</span>POLYGON((0 0,-1 0,-1 -1,0 0))<span class="pl-pds">"</span></span>)

acc_polys <span class="pl-k">=</span> <span class="pl-c1">accelerate</span>([p1, p2], RTreeIndex)
<span class="pl-c1">2</span><span class="pl-k">-</span>element Vector{Polygon} <span class="pl-k">+</span> RTreeIndex with Extents<span class="pl-k">.</span><span class="pl-c1">Extent</span><span class="pl-c1">{(:X, :Y), Tuple{Tuple{Float64, Float64}, Tuple{Float64, Float64}}}</span>((X <span class="pl-k">=</span> (<span class="pl-k">-</span><span class="pl-c1">1.0</span>, <span class="pl-c1">1.0</span>), Y <span class="pl-k">=</span> (<span class="pl-k">-</span><span class="pl-c1">1.0</span>, <span class="pl-c1">1.0</span>)))<span class="pl-k">:</span>
 <span class="pl-c1">Polygon</span>(Ptr{Nothing} @<span class="pl-c1">0x00006000030d2d00</span>)
 <span class="pl-c1">Polygon</span>(Ptr{Nothing} @<span class="pl-c1">0x00006000030d23a0</span>)

aoi <span class="pl-k">=</span> Extents<span class="pl-k">.</span><span class="pl-c1">Extent</span>(X<span class="pl-k">=</span>(<span class="pl-c1">0.5</span>, <span class="pl-c1">1</span>), Y<span class="pl-k">=</span>(<span class="pl-c1">0.5</span>, <span class="pl-c1">1</span>))
<span class="pl-c1">Extent</span>(X <span class="pl-k">=</span> (<span class="pl-c1">0.5</span>, <span class="pl-c1">1.0</span>), Y <span class="pl-k">=</span> (<span class="pl-c1">0.5</span>, <span class="pl-c1">1.0</span>))

indices <span class="pl-k">=</span> <span class="pl-c1">findall</span>(<span class="pl-c1">in</span>(aoi), acc_polys)
<span class="pl-c1">1</span><span class="pl-k">-</span>element Vector{Int64}<span class="pl-k">:</span>
 <span class="pl-c1">1</span></pre></div>
</article></div>