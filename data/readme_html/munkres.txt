<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-munkres" class="anchor" aria-hidden="true" href="#munkres"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Munkres</h1>
<p>Julia implementation of the
<a href="https://en.wikipedia.org/wiki/Hungarian_algorithm" rel="nofollow">Hungarian algorithm</a>
for the optimal assignment problem: Given N workers and M jobs, find a minimal
cost assignment of one job to each worker.</p>
<p><a href="https://travis-ci.org/FugroRoames/Munkres.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/67861e367ea85148949c2882a3387e436c6d2994/68747470733a2f2f7472617669732d63692e6f72672f467567726f526f616d65732f4d756e6b7265732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/FugroRoames/Munkres.jl.svg?branch=master" style="max-width:100%;"></a></p>
<h2><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Examples</h2>
<p>A synthetic example with a simple solution.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span> Each worker-job combination has a random cost</span>
cost <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">4</span>,<span class="pl-c1">4</span>)
<span class="pl-c"><span class="pl-c">#</span> However, each worker can do a certain job with zero cost</span>
best_jobs <span class="pl-k">=</span> [<span class="pl-c1">3</span>,<span class="pl-c1">4</span>,<span class="pl-c1">1</span>,<span class="pl-c1">2</span>]
<span class="pl-k">for</span> (i,j) <span class="pl-k">in</span> <span class="pl-c1">enumerate</span>(best_jobs); cost[i,j] <span class="pl-k">=</span> <span class="pl-c1">0</span>; <span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> Compute optimal assignment given the cost</span>
computed_best_jobs <span class="pl-k">=</span> <span class="pl-c1">munkres</span>(cost)

<span class="pl-c1">@assert</span> best_jobs <span class="pl-k">==</span> computed_best_jobs</pre></div>
<p>Example output:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> cost <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">4</span>,<span class="pl-c1">4</span>)
<span class="pl-c1">4</span>x4 Array{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">0.455632</span>  <span class="pl-c1">0.0972016</span>  <span class="pl-c1">0.807122</span>  <span class="pl-c1">0.806295</span>
 <span class="pl-c1">0.933324</span>  <span class="pl-c1">0.280094</span>   <span class="pl-c1">0.261727</span>  <span class="pl-c1">0.235289</span>
 <span class="pl-c1">0.53323</span>   <span class="pl-c1">0.408037</span>   <span class="pl-c1">0.935853</span>  <span class="pl-c1">0.62243</span>
 <span class="pl-c1">0.08281</span>   <span class="pl-c1">0.147279</span>   <span class="pl-c1">0.649129</span>  <span class="pl-c1">0.910296</span>

julia<span class="pl-k">&gt;</span> best_jobs <span class="pl-k">=</span> [<span class="pl-c1">3</span>,<span class="pl-c1">4</span>,<span class="pl-c1">1</span>,<span class="pl-c1">2</span>]
<span class="pl-c1">4</span><span class="pl-k">-</span>element Array{Int64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">3</span>
 <span class="pl-c1">4</span>
 <span class="pl-c1">1</span>
 <span class="pl-c1">2</span>

julia<span class="pl-k">&gt;</span> <span class="pl-k">for</span> (i,j) <span class="pl-k">in</span> <span class="pl-c1">enumerate</span>(best_jobs); cost[i,j] <span class="pl-k">=</span> <span class="pl-c1">0</span>; <span class="pl-k">end</span>

julia<span class="pl-k">&gt;</span> computed_best_jobs <span class="pl-k">=</span> <span class="pl-c1">munkres</span>(cost)
<span class="pl-c1">4</span><span class="pl-k">-</span>element Array{Int64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">3</span>
 <span class="pl-c1">4</span>
 <span class="pl-c1">1</span>
 <span class="pl-c1">2</span>
</pre></div>
</article></div>