<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-munkres" class="anchor" aria-hidden="true" href="#munkres"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Munkres</h1>
<p dir="auto">Julia implementation of the
<a href="https://en.wikipedia.org/wiki/Hungarian_algorithm" rel="nofollow">Hungarian algorithm</a>
for the optimal assignment problem: Given N workers and M jobs, find a minimal
cost assignment of one job to each worker.</p>
<p dir="auto"><a href="https://travis-ci.org/FugroRoames/Munkres.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/1cd497bdccb7906ddd189a4e333130b419496b8d30981f59fe01ffb595f369a0/68747470733a2f2f7472617669732d63692e6f72672f467567726f526f616d65732f4d756e6b7265732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/FugroRoames/Munkres.jl.svg?branch=master" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Examples</h2>
<p dir="auto">A synthetic example with a simple solution.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# Each worker-job combination has a random cost
cost = rand(4,4)
# However, each worker can do a certain job with zero cost
best_jobs = [3,4,1,2]
for (i,j) in enumerate(best_jobs); cost[i,j] = 0; end

# Compute optimal assignment given the cost
computed_best_jobs = munkres(cost)

@assert best_jobs == computed_best_jobs"><pre><span class="pl-c"><span class="pl-c">#</span> Each worker-job combination has a random cost</span>
cost <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">4</span>,<span class="pl-c1">4</span>)
<span class="pl-c"><span class="pl-c">#</span> However, each worker can do a certain job with zero cost</span>
best_jobs <span class="pl-k">=</span> [<span class="pl-c1">3</span>,<span class="pl-c1">4</span>,<span class="pl-c1">1</span>,<span class="pl-c1">2</span>]
<span class="pl-k">for</span> (i,j) <span class="pl-k">in</span> <span class="pl-c1">enumerate</span>(best_jobs); cost[i,j] <span class="pl-k">=</span> <span class="pl-c1">0</span>; <span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> Compute optimal assignment given the cost</span>
computed_best_jobs <span class="pl-k">=</span> <span class="pl-c1">munkres</span>(cost)

<span class="pl-c1">@assert</span> best_jobs <span class="pl-k">==</span> computed_best_jobs</pre></div>
<p dir="auto">Example output:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; cost = rand(4,4)
4x4 Array{Float64,2}:
 0.455632  0.0972016  0.807122  0.806295
 0.933324  0.280094   0.261727  0.235289
 0.53323   0.408037   0.935853  0.62243
 0.08281   0.147279   0.649129  0.910296

julia&gt; best_jobs = [3,4,1,2]
4-element Array{Int64,1}:
 3
 4
 1
 2

julia&gt; for (i,j) in enumerate(best_jobs); cost[i,j] = 0; end

julia&gt; computed_best_jobs = munkres(cost)
4-element Array{Int64,1}:
 3
 4
 1
 2
"><pre>julia<span class="pl-k">&gt;</span> cost <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">4</span>,<span class="pl-c1">4</span>)
<span class="pl-c1">4</span>x4 Array{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">0.455632</span>  <span class="pl-c1">0.0972016</span>  <span class="pl-c1">0.807122</span>  <span class="pl-c1">0.806295</span>
 <span class="pl-c1">0.933324</span>  <span class="pl-c1">0.280094</span>   <span class="pl-c1">0.261727</span>  <span class="pl-c1">0.235289</span>
 <span class="pl-c1">0.53323</span>   <span class="pl-c1">0.408037</span>   <span class="pl-c1">0.935853</span>  <span class="pl-c1">0.62243</span>
 <span class="pl-c1">0.08281</span>   <span class="pl-c1">0.147279</span>   <span class="pl-c1">0.649129</span>  <span class="pl-c1">0.910296</span>

julia<span class="pl-k">&gt;</span> best_jobs <span class="pl-k">=</span> [<span class="pl-c1">3</span>,<span class="pl-c1">4</span>,<span class="pl-c1">1</span>,<span class="pl-c1">2</span>]
<span class="pl-c1">4</span><span class="pl-k">-</span>element Array{Int64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">3</span>
 <span class="pl-c1">4</span>
 <span class="pl-c1">1</span>
 <span class="pl-c1">2</span>

julia<span class="pl-k">&gt;</span> <span class="pl-k">for</span> (i,j) <span class="pl-k">in</span> <span class="pl-c1">enumerate</span>(best_jobs); cost[i,j] <span class="pl-k">=</span> <span class="pl-c1">0</span>; <span class="pl-k">end</span>

julia<span class="pl-k">&gt;</span> computed_best_jobs <span class="pl-k">=</span> <span class="pl-c1">munkres</span>(cost)
<span class="pl-c1">4</span><span class="pl-k">-</span>element Array{Int64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">3</span>
 <span class="pl-c1">4</span>
 <span class="pl-c1">1</span>
 <span class="pl-c1">2</span>
</pre></div>
</article></div>