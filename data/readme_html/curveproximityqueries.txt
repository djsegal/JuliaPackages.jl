<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-curveproximityqueries" class="anchor" aria-hidden="true" href="#curveproximityqueries"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>CurveProximityQueries</h1>
<p dir="auto"><a href="https://travis-ci.com/arlk/CurveProximityQueries.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/f8ab24cabf95518979c5edc49980749b1d4c6a7b42eb3889edf013e62a386a2e/68747470733a2f2f7472617669732d63692e636f6d2f61726c6b2f437572766550726f78696d697479517565726965732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/arlk/CurveProximityQueries.jl.svg?branch=master" style="max-width: 100%;"></a> <a href="https://codecov.io/gh/arlk/CurveProximityQueries.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/d2246c4a64818330649a72be2fd1a3b22294288bfc74ccc0bdd5ba57589f69ac/68747470733a2f2f636f6465636f762e696f2f67682f61726c6b2f436f6e766578426f647950726f78696d697479517565726965732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/arlk/ConvexBodyProximityQueries.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<table>
<thead>
<tr>
<th align="center">Curve - Convex Polygon</th>
<th align="center">Curve - Curve</th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><a target="_blank" rel="noopener noreferrer" href="https://github.com/arlk/CurveProximityQueries.jl/raw/master/readme/logo1.gif"><img src="https://github.com/arlk/CurveProximityQueries.jl/raw/master/readme/logo1.gif" alt="" data-animated-image="" style="max-width: 100%;"></a></td>
<td align="center"><a target="_blank" rel="noopener noreferrer" href="https://github.com/arlk/CurveProximityQueries.jl/raw/master/readme/logo2.gif"><img src="https://github.com/arlk/CurveProximityQueries.jl/raw/master/readme/logo2.gif" alt="" data-animated-image="" style="max-width: 100%;"></a></td>
</tr>
</tbody>
</table>
<p dir="auto">CurveProximityQueries implements methods to compute the</p>
<ul dir="auto">
<li>Closest Points</li>
<li>Minimum Distance</li>
<li>Tolerance Verification</li>
<li>Collision Detection</li>
</ul>
<p dir="auto">between an absolutely continuous parametric curve and another object, or between two curves. If you find this package/work useful in your research please cite our <a href="http://www.roboticsproceedings.org/rss15/p42.pdf" rel="nofollow">paper</a>:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="@INPROCEEDINGS{Hovakimyan-RSS-19, 
    AUTHOR    = {Arun Lakshmanan AND Andrew Patterson AND Venanzio Cichella AND Naira Hovakimyan}, 
    TITLE     = {Proximity Queries for Absolutely Continuous Parametric Curves}, 
    BOOKTITLE = {Proceedings of Robotics: Science and Systems}, 
    YEAR      = {2019}, 
    ADDRESS   = {Freiburg im Breisgau, Germany}, 
    MONTH     = {June}, 
    DOI       = {10.15607/RSS.2019.XV.042} 
}"><pre class="notranslate"><code>@INPROCEEDINGS{Hovakimyan-RSS-19, 
    AUTHOR    = {Arun Lakshmanan AND Andrew Patterson AND Venanzio Cichella AND Naira Hovakimyan}, 
    TITLE     = {Proximity Queries for Absolutely Continuous Parametric Curves}, 
    BOOKTITLE = {Proceedings of Robotics: Science and Systems}, 
    YEAR      = {2019}, 
    ADDRESS   = {Freiburg im Breisgau, Germany}, 
    MONTH     = {June}, 
    DOI       = {10.15607/RSS.2019.XV.042} 
}
</code></pre></div>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<h3 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; ] add CurveProximityQueries"><pre>julia<span class="pl-k">&gt;</span> ] add CurveProximityQueries</pre></div>
<h3 dir="auto"><a id="user-content-curve-types" class="anchor" aria-hidden="true" href="#curve-types"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Curve Types</h3>
<p dir="auto">Methods are available to create and manipulate Bernstein polynomials. A Bernstein polynomial with uniformly randomly sampled control points can be created with:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; rand(Bernstein{3, 6})
a 5th order Bernstein polynomial with control points at:
([0.345747, 0.149338, 0.609345], [0.86539, 0.736102, 0.31424], [0.20149, 0.167441, 0.662126], [0.975667, 0.468056, 0.505278], [0.371533, 0.477992, 0.83668], [0.322821, 0.973494, 0.93129])
with an arclength of 1.463398157000094"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">rand</span>(Bernstein{<span class="pl-c1">3</span>, <span class="pl-c1">6</span>})
a <span class="pl-c1">5</span>th order Bernstein polynomial with control points at<span class="pl-k">:</span>
([<span class="pl-c1">0.345747</span>, <span class="pl-c1">0.149338</span>, <span class="pl-c1">0.609345</span>], [<span class="pl-c1">0.86539</span>, <span class="pl-c1">0.736102</span>, <span class="pl-c1">0.31424</span>], [<span class="pl-c1">0.20149</span>, <span class="pl-c1">0.167441</span>, <span class="pl-c1">0.662126</span>], [<span class="pl-c1">0.975667</span>, <span class="pl-c1">0.468056</span>, <span class="pl-c1">0.505278</span>], [<span class="pl-c1">0.371533</span>, <span class="pl-c1">0.477992</span>, <span class="pl-c1">0.83668</span>], [<span class="pl-c1">0.322821</span>, <span class="pl-c1">0.973494</span>, <span class="pl-c1">0.93129</span>])
with an arclength of <span class="pl-c1">1.463398157000094</span></pre></div>
<p dir="auto">which constructs a 3D 5th order Bernstein polynomial. Control points can be directly fed to the constructor as well:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; cpts = [[0.0, 0.0], [1.0, 2.0], [2.0, 0.0], [3.0, 0.0]];
julia&gt; c = Bernstein(cpts)
a 3rd order Bernstein polynomial with control points at:
([0.0, 0.0], [1.0, 2.0], [2.0, 0.0], [3.0, 0.0])
with an arclength of 3.714835124201342"><pre>julia<span class="pl-k">&gt;</span> cpts <span class="pl-k">=</span> [[<span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>], [<span class="pl-c1">1.0</span>, <span class="pl-c1">2.0</span>], [<span class="pl-c1">2.0</span>, <span class="pl-c1">0.0</span>], [<span class="pl-c1">3.0</span>, <span class="pl-c1">0.0</span>]];
julia<span class="pl-k">&gt;</span> c <span class="pl-k">=</span> <span class="pl-c1">Bernstein</span>(cpts)
a <span class="pl-c1">3</span>rd order Bernstein polynomial with control points at<span class="pl-k">:</span>
([<span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>], [<span class="pl-c1">1.0</span>, <span class="pl-c1">2.0</span>], [<span class="pl-c1">2.0</span>, <span class="pl-c1">0.0</span>], [<span class="pl-c1">3.0</span>, <span class="pl-c1">0.0</span>])
with an arclength of <span class="pl-c1">3.714835124201342</span></pre></div>
<p dir="auto">Generally Bernstein polynomials are evaluated between <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="23b9d6ab923659f9098437b5c54e919f">$[0, 1]$</math-renderer>, but custom limits can be provided using <code>Interval</code> from the <code>IntervalArithmetic</code> package:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; c = Bernstein(cpts, limits=Interval(0.5, 2.5))
a 3rd order Bernstein polynomial with control points at:
([0.0, 0.0], [1.0, 2.0], [2.0, 0.0], [3.0, 0.0])
with an arclength of 3.714835124201342"><pre>julia<span class="pl-k">&gt;</span> c <span class="pl-k">=</span> <span class="pl-c1">Bernstein</span>(cpts, limits<span class="pl-k">=</span><span class="pl-c1">Interval</span>(<span class="pl-c1">0.5</span>, <span class="pl-c1">2.5</span>))
a <span class="pl-c1">3</span>rd order Bernstein polynomial with control points at<span class="pl-k">:</span>
([<span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>], [<span class="pl-c1">1.0</span>, <span class="pl-c1">2.0</span>], [<span class="pl-c1">2.0</span>, <span class="pl-c1">0.0</span>], [<span class="pl-c1">3.0</span>, <span class="pl-c1">0.0</span>])
with an arclength of <span class="pl-c1">3.714835124201342</span></pre></div>
<p dir="auto">The <code>Bernstein</code> types are functors that evaluate the polynomial at some value.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; c(1.5)
2-element SArray{Tuple{2},Float64,1,2}:
 1.5
 0.75"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">c</span>(<span class="pl-c1">1.5</span>)
<span class="pl-c1">2</span><span class="pl-k">-</span>element SArray{Tuple{<span class="pl-c1">2</span>},Float64,<span class="pl-c1">1</span>,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">1.5</span>
 <span class="pl-c1">0.75</span></pre></div>
<p dir="auto">Note, that the arclength is not a true arclength but an upper bound that is used by the proximity methods. This upper bound can be evaluated at an interval or from the beginning of the limit using:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; arclength(c, Interval(0.9, 1.4))
0.7839413641976036
julia&gt; arclength(c, 1.0) # evaluates from 0.5 to 1.0
1.1826380733343569"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">arclength</span>(c, <span class="pl-c1">Interval</span>(<span class="pl-c1">0.9</span>, <span class="pl-c1">1.4</span>))
<span class="pl-c1">0.7839413641976036</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">arclength</span>(c, <span class="pl-c1">1.0</span>) <span class="pl-c"><span class="pl-c">#</span> evaluates from 0.5 to 1.0</span>
<span class="pl-c1">1.1826380733343569</span></pre></div>
<p dir="auto">Several algebraic operations over Bernstein polynomials are available for convenience: addition, subtraction, product with reals, differentiation.</p>
<h3 dir="auto">
<a id="user-content-obstacle-types" class="anchor" aria-hidden="true" href="#obstacle-types"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Obstacle Types</h3>
<p dir="auto">Several obstacle types are provided with convenience macros from <a href="https://github.com/arlk/ConvexBodyProximityQueries.jl">ConvexBodyProximityQueries.jl</a>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; @point rand(3)
ConvexPolygon{3,1,Float64}(SArray{Tuple{3},Float64,1,3}[[0.135678, 0.840508, 0.140532]])
julia&gt; @line [0.,1.,1.], [1.,2.,1.] # point A, point B
ConvexPolygon{3,2,Float64}(SArray{Tuple{3},Float64,1,3}[[0.0, 1.0, 1.0], [1.0, 2.0, 1.0]])
julia&gt; @rect [0.,0.], rand(2) # center, widths
ConvexPolygon{2,4,Float64}(SArray{Tuple{2},Float64,1,2}[[0.395191, 0.174093], [-0.395191, 0.174093], [-0.395191, -0.174093], [0.395191, -0.174093]])
julia&gt; @square ones(3), 1.0 # center, width
ConvexPolygon{3,8,Float64}(SArray{Tuple{3},Float64,1,3}[[1.5, 1.5, 1.5], [0.5, 1.5, 1.5], [0.5, 0.5, 1.5], [1.5, 0.5, 1.5], [1.5, 1.5, 0.5], [0.5, 1.5, 0.5], [0.5, 0.5, 0.5], [1.5, 0.5, 0.5]])"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">@point</span> <span class="pl-c1">rand</span>(<span class="pl-c1">3</span>)
<span class="pl-c1">ConvexPolygon</span><span class="pl-c1">{3,1,Float64}</span>(SArray{Tuple{<span class="pl-c1">3</span>},Float64,<span class="pl-c1">1</span>,<span class="pl-c1">3</span>}[[<span class="pl-c1">0.135678</span>, <span class="pl-c1">0.840508</span>, <span class="pl-c1">0.140532</span>]])
julia<span class="pl-k">&gt;</span> <span class="pl-c1">@line</span> [<span class="pl-c1">0.</span>,<span class="pl-c1">1.</span>,<span class="pl-c1">1.</span>], [<span class="pl-c1">1.</span>,<span class="pl-c1">2.</span>,<span class="pl-c1">1.</span>] <span class="pl-c"><span class="pl-c">#</span> point A, point B</span>
<span class="pl-c1">ConvexPolygon</span><span class="pl-c1">{3,2,Float64}</span>(SArray{Tuple{<span class="pl-c1">3</span>},Float64,<span class="pl-c1">1</span>,<span class="pl-c1">3</span>}[[<span class="pl-c1">0.0</span>, <span class="pl-c1">1.0</span>, <span class="pl-c1">1.0</span>], [<span class="pl-c1">1.0</span>, <span class="pl-c1">2.0</span>, <span class="pl-c1">1.0</span>]])
julia<span class="pl-k">&gt;</span> <span class="pl-c1">@rect</span> [<span class="pl-c1">0.</span>,<span class="pl-c1">0.</span>], <span class="pl-c1">rand</span>(<span class="pl-c1">2</span>) <span class="pl-c"><span class="pl-c">#</span> center, widths</span>
<span class="pl-c1">ConvexPolygon</span><span class="pl-c1">{2,4,Float64}</span>(SArray{Tuple{<span class="pl-c1">2</span>},Float64,<span class="pl-c1">1</span>,<span class="pl-c1">2</span>}[[<span class="pl-c1">0.395191</span>, <span class="pl-c1">0.174093</span>], [<span class="pl-k">-</span><span class="pl-c1">0.395191</span>, <span class="pl-c1">0.174093</span>], [<span class="pl-k">-</span><span class="pl-c1">0.395191</span>, <span class="pl-k">-</span><span class="pl-c1">0.174093</span>], [<span class="pl-c1">0.395191</span>, <span class="pl-k">-</span><span class="pl-c1">0.174093</span>]])
julia<span class="pl-k">&gt;</span> <span class="pl-c1">@square</span> <span class="pl-c1">ones</span>(<span class="pl-c1">3</span>), <span class="pl-c1">1.0</span> <span class="pl-c"><span class="pl-c">#</span> center, width</span>
<span class="pl-c1">ConvexPolygon</span><span class="pl-c1">{3,8,Float64}</span>(SArray{Tuple{<span class="pl-c1">3</span>},Float64,<span class="pl-c1">1</span>,<span class="pl-c1">3</span>}[[<span class="pl-c1">1.5</span>, <span class="pl-c1">1.5</span>, <span class="pl-c1">1.5</span>], [<span class="pl-c1">0.5</span>, <span class="pl-c1">1.5</span>, <span class="pl-c1">1.5</span>], [<span class="pl-c1">0.5</span>, <span class="pl-c1">0.5</span>, <span class="pl-c1">1.5</span>], [<span class="pl-c1">1.5</span>, <span class="pl-c1">0.5</span>, <span class="pl-c1">1.5</span>], [<span class="pl-c1">1.5</span>, <span class="pl-c1">1.5</span>, <span class="pl-c1">0.5</span>], [<span class="pl-c1">0.5</span>, <span class="pl-c1">1.5</span>, <span class="pl-c1">0.5</span>], [<span class="pl-c1">0.5</span>, <span class="pl-c1">0.5</span>, <span class="pl-c1">0.5</span>], [<span class="pl-c1">1.5</span>, <span class="pl-c1">0.5</span>, <span class="pl-c1">0.5</span>]])</pre></div>
<p dir="auto">Random convex polygons can be constructed for 2D:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; obs = randpoly([1., 2.], 0.5; scale=1.0, n=20) # center, rotation; scale, number of vertices
ConvexPolygon{2,20,Float64}(SArray{Tuple{2},Float64,1,2}[[0.642686, 2.36248], [0.622121, 2.34973], [0.42866, 2.06399], [0.412454, 2.0344], [0.454968, 1.98069], [0.499506, 1.92797], [0.599317, 1.82251], [0.62982, 1.79366], [0.659987, 1.76526], [0.733777, 1.71118], [0.87861, 1.63702], [1.07313, 1.54129], [1.46142, 1.68951], [1.46817, 1.72673], [1.48588, 1.85669], [1.46772, 2.06245], [1.3987, 2.23026], [1.30631, 2.4218], [1.20662, 2.61294], [0.88346, 2.47282]])"><pre>julia<span class="pl-k">&gt;</span> obs <span class="pl-k">=</span> <span class="pl-c1">randpoly</span>([<span class="pl-c1">1.</span>, <span class="pl-c1">2.</span>], <span class="pl-c1">0.5</span>; scale<span class="pl-k">=</span><span class="pl-c1">1.0</span>, n<span class="pl-k">=</span><span class="pl-c1">20</span>) <span class="pl-c"><span class="pl-c">#</span> center, rotation; scale, number of vertices</span>
<span class="pl-c1">ConvexPolygon</span><span class="pl-c1">{2,20,Float64}</span>(SArray{Tuple{<span class="pl-c1">2</span>},Float64,<span class="pl-c1">1</span>,<span class="pl-c1">2</span>}[[<span class="pl-c1">0.642686</span>, <span class="pl-c1">2.36248</span>], [<span class="pl-c1">0.622121</span>, <span class="pl-c1">2.34973</span>], [<span class="pl-c1">0.42866</span>, <span class="pl-c1">2.06399</span>], [<span class="pl-c1">0.412454</span>, <span class="pl-c1">2.0344</span>], [<span class="pl-c1">0.454968</span>, <span class="pl-c1">1.98069</span>], [<span class="pl-c1">0.499506</span>, <span class="pl-c1">1.92797</span>], [<span class="pl-c1">0.599317</span>, <span class="pl-c1">1.82251</span>], [<span class="pl-c1">0.62982</span>, <span class="pl-c1">1.79366</span>], [<span class="pl-c1">0.659987</span>, <span class="pl-c1">1.76526</span>], [<span class="pl-c1">0.733777</span>, <span class="pl-c1">1.71118</span>], [<span class="pl-c1">0.87861</span>, <span class="pl-c1">1.63702</span>], [<span class="pl-c1">1.07313</span>, <span class="pl-c1">1.54129</span>], [<span class="pl-c1">1.46142</span>, <span class="pl-c1">1.68951</span>], [<span class="pl-c1">1.46817</span>, <span class="pl-c1">1.72673</span>], [<span class="pl-c1">1.48588</span>, <span class="pl-c1">1.85669</span>], [<span class="pl-c1">1.46772</span>, <span class="pl-c1">2.06245</span>], [<span class="pl-c1">1.3987</span>, <span class="pl-c1">2.23026</span>], [<span class="pl-c1">1.30631</span>, <span class="pl-c1">2.4218</span>], [<span class="pl-c1">1.20662</span>, <span class="pl-c1">2.61294</span>], [<span class="pl-c1">0.88346</span>, <span class="pl-c1">2.47282</span>]])</pre></div>
<h3 dir="auto">
<a id="user-content-proximity-queries" class="anchor" aria-hidden="true" href="#proximity-queries"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Proximity Queries</h3>
<p dir="auto">The formal definitions for each of the proximity queries can be found in the paper.</p>
<h4 dir="auto">
<a id="user-content-minimum-distance" class="anchor" aria-hidden="true" href="#minimum-distance"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Minimum Distance</h4>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; minimum_distance(c, obs)
0.6542938586889715"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">minimum_distance</span>(c, obs)
<span class="pl-c1">0.6542938586889715</span></pre></div>
<h4 dir="auto">
<a id="user-content-tolerance-verification" class="anchor" aria-hidden="true" href="#tolerance-verification"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Tolerance Verification</h4>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; tolerance_verification(c, obs, 0.5)
true
julia&gt; tolerance_verification(c, obs, 1.0)
false"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">tolerance_verification</span>(c, obs, <span class="pl-c1">0.5</span>)
<span class="pl-c1">true</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">tolerance_verification</span>(c, obs, <span class="pl-c1">1.0</span>)
<span class="pl-c1">false</span></pre></div>
<h4 dir="auto">
<a id="user-content-collision-detection" class="anchor" aria-hidden="true" href="#collision-detection"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Collision Detection</h4>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; collision_detection(c, obs)
false"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">collision_detection</span>(c, obs)
<span class="pl-c1">false</span></pre></div>
<h4 dir="auto">
<a id="user-content-closest-points" class="anchor" aria-hidden="true" href="#closest-points"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Closest Points</h4>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; pts = closest_points(c, obs)
([1.07313, 1.54129], [1.03968, 0.887853])"><pre>julia<span class="pl-k">&gt;</span> pts <span class="pl-k">=</span> <span class="pl-c1">closest_points</span>(c, obs)
([<span class="pl-c1">1.07313</span>, <span class="pl-c1">1.54129</span>], [<span class="pl-c1">1.03968</span>, <span class="pl-c1">0.887853</span>])</pre></div>
<p dir="auto">All the above tests can be performed when <code>obs</code> is replaced with another parametric curve.</p>
<h3 dir="auto">
<a id="user-content-plotting" class="anchor" aria-hidden="true" href="#plotting"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Plotting</h3>
<p dir="auto">Plotting recipes are provided for the curves. For example to plot the closest points between <code>obs</code> and <code>c</code>, one can simply:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; plot(c); plot!(obs); plot!(pts)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">plot</span>(c); <span class="pl-c1">plot!</span>(obs); <span class="pl-c1">plot!</span>(pts)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/arlk/CurveProximityQueries.jl/raw/master/readme/example.png"><img src="https://github.com/arlk/CurveProximityQueries.jl/raw/master/readme/example.png" alt="" style="max-width: 100%;"></a></p>
<h3 dir="auto">
<a id="user-content-custom-types" class="anchor" aria-hidden="true" href="#custom-types"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Custom Types</h3>
<p dir="auto">Parametric curves can be user defined. For example, a monomial basis type can be created as a subtype of <code>Curve{D, T}</code> where <code>D</code> is the dimension of the curve and <code>T</code> is the eltype:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="struct Monomial{D, N, T} &lt;: Curve{D, T}
  coeff::SVector{N, SVector{D, T}}
  limits::Interval{T}
end"><pre><span class="pl-k">struct</span> Monomial{D, N, T} <span class="pl-k">&lt;:</span> <span class="pl-c1">Curve{D, T}</span>
  coeff<span class="pl-k">::</span><span class="pl-c1">SVector{N, SVector{D, T}}</span>
  limits<span class="pl-k">::</span><span class="pl-c1">Interval{T}</span>
<span class="pl-k">end</span></pre></div>
<p dir="auto">Methods to compute the evaluation (as a functor), and arclength upper bound has to be provided (see paper for details).</p>
<p dir="auto">Similarly, custom types for obstacles can be created. If the obstacles are convex, then only a <a href="https://github.com/arlk/ConvexBodyProximityQueries.jl#usage">support mapping</a> for the custom type is required. However, if the obstacle is not convex then methods to compute the <code>minimum_distance</code>, <code>tolerance_verification</code>, and <code>collision_detection</code> between a point in space and the object must be provided.</p>
</article></div>