<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-z3jl" class="anchor" aria-hidden="true" href="#z3jl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Z3.jl</h1>
<p><a href="https://travis-ci.com/ahumenberger/Z3.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/a747a4c2b24a1fc3a7153cf4ecf87b8b306ae9ff7884b427eab660d8b7d6017b/68747470733a2f2f7472617669732d63692e636f6d2f6168756d656e6265726765722f5a332e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/ahumenberger/Z3.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p>This package provides an interface to the <a href="https://github.com/Z3Prover/z3">Z3 Theorem Prover</a> by wrapping the <a href="https://z3prover.github.io/api/html/namespacez3.html" rel="nofollow">C++ API</a> of Z3 using <a href="https://github.com/JuliaInterop/CxxWrap.jl">CxxWrap.jl</a>.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="ctx = Context()
x = real_const(ctx, &quot;x&quot;)
y = real_const(ctx, &quot;y&quot;)

s = Solver(ctx, &quot;QF_NRA&quot;)
add(s, x == y^2)
add(s, x &gt; 1)

res = check(s)
@assert res == Z3.sat

m = get_model(s)

for (k, v) in consts(m)
    println(&quot;$k = $v&quot;)
end
"><pre>ctx <span class="pl-k">=</span> <span class="pl-c1">Context</span>()
x <span class="pl-k">=</span> <span class="pl-c1">real_const</span>(ctx, <span class="pl-s"><span class="pl-pds">"</span>x<span class="pl-pds">"</span></span>)
y <span class="pl-k">=</span> <span class="pl-c1">real_const</span>(ctx, <span class="pl-s"><span class="pl-pds">"</span>y<span class="pl-pds">"</span></span>)

s <span class="pl-k">=</span> <span class="pl-c1">Solver</span>(ctx, <span class="pl-s"><span class="pl-pds">"</span>QF_NRA<span class="pl-pds">"</span></span>)
<span class="pl-c1">add</span>(s, x <span class="pl-k">==</span> y<span class="pl-k">^</span><span class="pl-c1">2</span>)
<span class="pl-c1">add</span>(s, x <span class="pl-k">&gt;</span> <span class="pl-c1">1</span>)

res <span class="pl-k">=</span> <span class="pl-c1">check</span>(s)
<span class="pl-c1">@assert</span> res <span class="pl-k">==</span> Z3<span class="pl-k">.</span>sat

m <span class="pl-k">=</span> <span class="pl-c1">get_model</span>(s)

<span class="pl-k">for</span> (k, v) <span class="pl-k">in</span> <span class="pl-c1">consts</span>(m)
    <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span><span class="pl-v">$k</span> = <span class="pl-v">$v</span><span class="pl-pds">"</span></span>)
<span class="pl-k">end</span></pre></div>
<h2><a id="user-content-c-api-vs-julia-api" class="anchor" aria-hidden="true" href="#c-api-vs-julia-api"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>C++ API vs. Julia API</h2>
<p>This package wraps the <a href="https://z3prover.github.io/api/html/namespacez3.html" rel="nofollow">C++ API</a> of Z3. As such Z3's types are available in Julia by using its camel case name variant, e.g. <code>z3::func_entry</code> is available as <code>FuncEntry</code>. Furthermore, member functions are called with the object as its first argument, that is, <code>real_const(ctx, "x")</code> would be the Julia equivalent of <code>ctx.real_const("x")</code> for an object <code>ctx</code> of type <code>Context</code>.</p>
<p>See <a href="https://github.com/Z3Prover/z3/blob/master/src/api/julia/z3jl.cpp">z3jl.cpp</a> for an exact list of exposed types and methods.</p>
</article></div>