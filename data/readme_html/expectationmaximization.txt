<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-expectationmaximization" class="anchor" aria-hidden="true" href="#expectationmaximization"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>ExpectationMaximization</h1>
<p dir="auto"><a href="https://dmetivie.github.io/ExpectationMaximization.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Docs" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a></p>
<p dir="auto">This package provides a simple implementation of the Expectation Maximization (EM) algorithm used to fit mixture models.
Due to <a href="https://julialang.org/" rel="nofollow">Julia</a> amazing <a href="https://www.youtube.com/watch?v=kc9HwsxE1OY" rel="nofollow">dispatch</a> systems, generic and reusable code spirit, and the <a href="https://juliastats.org/Distributions.jl/stable/" rel="nofollow">Distributions.jl</a> package, the code while being very generic is both very expressive and fast! (Have a look at the <a href="https://dmetivie.github.io/ExpectationMaximization.jl/dev/benchmarks/" rel="nofollow">Benchmark section</a>)</p>
<p dir="auto">In particular, it works on a lot of mixtures:</p>
<ul dir="auto">
<li>Mixture of Univariate continuous distributions</li>
<li>Mixture of Univariate discrete distributions</li>
<li>Mixture of Multivariate distributions (continuous or discrete)</li>
<li>Mixture of mixtures (univariate or multivariate and continuous or discrete)</li>
<li>More?</li>
</ul>
<p dir="auto">Note that <a href="https://juliastats.org/Distributions.jl/stable/" rel="nofollow">Distributions</a> <em>currently</em> does not allow <code>MixtureModel</code> to both have discrete and continuous components (but what does that? Rain).</p>
<p dir="auto">Just define a <a href="https://juliastats.org/Distributions.jl/stable/mixture/" rel="nofollow"><code>mix::MixtureModel</code></a> and do <code>fit_mle(mix, y)</code> with your data <code>y</code> and that's it!
<strong>Have a look at the <a href="https://dmetivie.github.io/ExpectationMaximization.jl/dev/examples/#Examples" rel="nofollow">Examples</a> section</strong>.</p>
<p dir="auto">To work, the only requirements are that the components of the mixture <code>dist ∈ dists = components(mix)</code> considered (custom or coming from an existing package)</p>
<ol dir="auto">
<li>Are a subtype of <code>Distribution</code> i.e. <code>dist&lt;:Distribution</code>.</li>
<li>The <code>logpdf(dist, y)</code> is defined (it is used in the E-step)</li>
<li>The <code>fit_mle(dist, y, weigths)</code> returns the distribution with parameters equals to MLE. This is used in the M-step of the <code>ClassicalEM</code> algorithm. For the <code>StocasticEM</code> version, only <code>fit_mle(dist, y)</code> is needed. Type or instance version of <code>fit_mle</code> for your <code>dist</code> are accepted thanks to this <a href="https://github.com/dmetivie/ExpectationMaximization.jl/blob/60e833236a122cb5ef58150b1a445e2941ace5d1/src/that_should_be_in_Distributions.jl#L16">conversion line</a>.</li>
</ol>
<h2 dir="auto"><a id="user-content-todo-feel-free-to-contribute" class="anchor" aria-hidden="true" href="#todo-feel-free-to-contribute"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>TODO (feel free to contribute)</h2>
<p dir="auto">[] Add more variants to of the EM algorithm (so far there are the classic and stochastic version).</p>
<p dir="auto">[] Better benchmark against other EM implementations</p>
<p dir="auto">[] Speed up code (always!). So far, I focused on readable code.</p>
<h2 dir="auto"><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example</h2>
<p dir="auto">Also have a look at the [examples](@ref Examples) section.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Distributions
using ExpectationMaximization"><pre><span class="pl-k">using</span> Distributions
<span class="pl-k">using</span> ExpectationMaximization</pre></div>
<h3 dir="auto"><a id="user-content-model" class="anchor" aria-hidden="true" href="#model"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Model</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="N = 50_000
θ₁ = 10
θ₂ = 5
α = 0.2
β = 0.3
# Mixture Model here one can put any classical distributions
mix_true = MixtureModel([Exponential(θ₁), Gamma(α, θ₂)], [β, 1 - β]) 

# Generate N samples from the mixture
y = rand(mix_true, N) "><pre>N <span class="pl-k">=</span> <span class="pl-c1">50_000</span>
θ₁ <span class="pl-k">=</span> <span class="pl-c1">10</span>
θ₂ <span class="pl-k">=</span> <span class="pl-c1">5</span>
α <span class="pl-k">=</span> <span class="pl-c1">0.2</span>
β <span class="pl-k">=</span> <span class="pl-c1">0.3</span>
<span class="pl-c"><span class="pl-c">#</span> Mixture Model here one can put any classical distributions</span>
mix_true <span class="pl-k">=</span> <span class="pl-c1">MixtureModel</span>([<span class="pl-c1">Exponential</span>(θ₁), <span class="pl-c1">Gamma</span>(α, θ₂)], [β, <span class="pl-c1">1</span> <span class="pl-k">-</span> β]) 

<span class="pl-c"><span class="pl-c">#</span> Generate N samples from the mixture</span>
y <span class="pl-k">=</span> <span class="pl-c1">rand</span>(mix_true, N) </pre></div>
<h3 dir="auto"><a id="user-content-inference" class="anchor" aria-hidden="true" href="#inference"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Inference</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# Initial guess
mix_guess = MixtureModel([Exponential(1), Gamma(0.5, 1)], [0.5, 1 - 0.5])

# Fit the MLE with the EM algorithm
mix_mle = fit_mle(mix_guess, y; display = :iter, atol = 1e-3, robust = false, infos = false)"><pre><span class="pl-c"><span class="pl-c">#</span> Initial guess</span>
mix_guess <span class="pl-k">=</span> <span class="pl-c1">MixtureModel</span>([<span class="pl-c1">Exponential</span>(<span class="pl-c1">1</span>), <span class="pl-c1">Gamma</span>(<span class="pl-c1">0.5</span>, <span class="pl-c1">1</span>)], [<span class="pl-c1">0.5</span>, <span class="pl-c1">1</span> <span class="pl-k">-</span> <span class="pl-c1">0.5</span>])

<span class="pl-c"><span class="pl-c">#</span> Fit the MLE with the EM algorithm</span>
mix_mle <span class="pl-k">=</span> <span class="pl-c1">fit_mle</span>(mix_guess, y; display <span class="pl-k">=</span> <span class="pl-c1">:iter</span>, atol <span class="pl-k">=</span> <span class="pl-c1">1e-3</span>, robust <span class="pl-k">=</span> <span class="pl-c1">false</span>, infos <span class="pl-k">=</span> <span class="pl-c1">false</span>)</pre></div>
<h3 dir="auto"><a id="user-content-verify-results" class="anchor" aria-hidden="true" href="#verify-results"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Verify results</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="rtol = 5e-2
p = params(mix_mle)[1] # (θ₁, (α, θ₂))
isapprox(β, probs(mix_mle)[1]; rtol = rtol)
isapprox(θ₁, p[1]...; rtol = rtol)
isapprox(α, p[2][1]; rtol = rtol)
isapprox(θ₂, p[2][2]; rtol = rtol)"><pre>rtol <span class="pl-k">=</span> <span class="pl-c1">5e-2</span>
p <span class="pl-k">=</span> <span class="pl-c1">params</span>(mix_mle)[<span class="pl-c1">1</span>] <span class="pl-c"><span class="pl-c">#</span> (θ₁, (α, θ₂))</span>
<span class="pl-c1">isapprox</span>(β, <span class="pl-c1">probs</span>(mix_mle)[<span class="pl-c1">1</span>]; rtol <span class="pl-k">=</span> rtol)
<span class="pl-c1">isapprox</span>(θ₁, p[<span class="pl-c1">1</span>]<span class="pl-k">.</span><span class="pl-k">..</span>; rtol <span class="pl-k">=</span> rtol)
<span class="pl-c1">isapprox</span>(α, p[<span class="pl-c1">2</span>][<span class="pl-c1">1</span>]; rtol <span class="pl-k">=</span> rtol)
<span class="pl-c1">isapprox</span>(θ₂, p[<span class="pl-c1">2</span>][<span class="pl-c1">2</span>]; rtol <span class="pl-k">=</span> rtol)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="img/EM_mixture_example.svg"><img src="img/EM_mixture_example.svg" alt="EM_mixture_example.svg" style="max-width: 100%;"></a></p>
</article></div>