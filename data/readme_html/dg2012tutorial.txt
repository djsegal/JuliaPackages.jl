<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-sgd-algorithms-in-julia" class="anchor" aria-hidden="true" href="#sgd-algorithms-in-julia"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>SGD Algorithms in Julia</h1>
<p>This repository contains very basic implementations of SGD algorithms that can be used to fit OLS regression, ridge regression and logistic regression to large data sets that are stored as CSV files on disk. We've chosen to implement these algorithms in Julia to show how Julia's speed can make it the perfect tool for doing large-scale data analysis.</p>
<p>For those unfamiliar with the use of SGD methods for fitting models, we note that SGD stands for "Stochastic Gradient Descent". In a stochastic gradient descent algorithm, we follow a gradient that is defined by a small minibatch of data in the hopes of iteratively improving the parameters of a model until they converge upon a globally good set of parameters for the data.</p>
<p>In standard SGD algorithms, each minibatch consists of a single randomly selected row, so that every row suggests a new direction to move in to improve model fit. But it is also possible to use minibatches of arbitrary size; at the furthest extreme, we can set up an SGD algorithm to use a minibatch that is as large as the entire data set. At that point, an SGD algorithm is identical to a standard gradient descent algorithm run in batch mode on your entire data set.</p>
<p>The functions in this repository allows you to explore this continuum. To get your started, we've provided one example that can help you to build an intuition for what happens when you change the size of the minibatches you use. We've also explored several of the other hyperparameters that affect performance of SGD. As you'll see, SGD can be finicky. When it works, it works beautifully; but it can easily fail to find any useful parameter estimates for your problem. Caution and cross-validation are strongly encouraged.</p>
<h1><a id="user-content-current-status" class="anchor" aria-hidden="true" href="#current-status"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Current Status</h1>
<p>At the moment, the core functionality of the code in this repository can be found in <code>sgd.jl</code>. Inside, you'll find:</p>
<ul>
<li>Three basic model types: <code>LinearModel</code>,<code>RidgeModel</code> and <code>LogisticModel</code>.</li>
<li>A <code>LinearModel</code> is a composite type defined by a set of coefficients and a count of the number of rows of data that have been seen in the past.</li>
<li>A <code>RidgeModel</code> is a composite type defined by a set of coefficients, a regularization hyperparameter that controls how strongly the model tries to push the coefficients back towards 0, and a count of the number of rows of data that have been seen in the past.</li>
<li>A <code>LogisticModel</code> is a composite type defined by a set of coefficients and a count of the number of rows of data that have been seen in the past.</li>
</ul>
<p>All of these three models implement the following behaviors:</p>
<ul>
<li><code>predict(Model, Inputs, Outputs)</code>: What prediction does the model make for the current set of inputs?</li>
<li><code>residual(Model, Inputs, Outputs)</code>: What residual does the model leave after predicting the current set of inputs?</li>
<li><code>cost(Model, Inputs, Outputs)</code>: What is the cost for the current model parameters on the current set of inputs?</li>
<li><code>gradient(Model, Inputs, Outputs)</code>: What is the direction of the negative gradient for the current set of inputs?</li>
<li><code>fit(Model, Filename)</code>: Call this function to fit a model to a data set stored in a specific CSV file.</li>
<li><code>predict(Model, Filename)</code>: Call this function to make predictions on a specific CSV data set.</li>
<li><code>rmse(Model, Filename)</code>: Call this function to calculate the RMSE of a model on a CSV data set.</li>
</ul>
<h1><a id="user-content-configuration-settings" class="anchor" aria-hidden="true" href="#configuration-settings"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Configuration Settings</h1>
<ul>
<li>Minimize: Should the model be fit to minimize a cost or maximize a likelihood? For <code>LinearModel</code> and <code>RidgeModel</code>, this should be set to <code>true</code>. For a <code>LogisticModel</code>, this should be set to false.</li>
<li>Epoches: How many epochs of training should be performed? Defaults to <code>1</code>.</li>
<li>Mini-Batch Size: How many rows should go into each minibatch? Defaults to <code>1</code>.</li>
<li>Learning Rate: What is the hard-coded learning rate? Defaults to <code>0.01</code>.</li>
<li>Learning Rule: Should SGD use a constant learning rate? Or a decreasing learning rate? Defaults to <code>:constant</code>.</li>
<li>Averaging: Should the learned parameters be averaged over time? This averaging will only occur in the second epoch, so it may have no effect if you will only have epoch of training for your model. Defaults to <code>false</code>.</li>
<li>Logging: Prints the model's coefficients to STDOUT at regular intervals. Defaults to <code>false</code>.</li>
<li>Trace: Prints the model's performance on the entire training data set. Defaults to <code>false</code>.</li>
<li>Interval Length: How often should logging and/or tracing occur? Defaults to <code>1_000</code>.</li>
</ul>
<h1><a id="user-content-walkthrough" class="anchor" aria-hidden="true" href="#walkthrough"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Walkthrough</h1>
<p>To try this code, start with our basic examples. Run the following scripts in the following order:</p>
<h3><a id="user-content-ols-regression" class="anchor" aria-hidden="true" href="#ols-regression"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>OLS Regression</h3>
<ul>
<li>ols_generate_data.jl</li>
<li>ols_example.jl</li>
<li>ols_example.R</li>
</ul>
<h3><a id="user-content-logistic-regression" class="anchor" aria-hidden="true" href="#logistic-regression"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Logistic Regression</h3>
<ul>
<li>logistic_generate_data.jl</li>
<li>logistic_example.jl</li>
<li>logistic_example.R</li>
</ul>
<h1><a id="user-content-tips-and-tricks" class="anchor" aria-hidden="true" href="#tips-and-tricks"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Tips and Tricks</h1>
<ul>
<li>Because the SGD operates very locally based on the current row of data and recent rows of data, it is important that the rows of data be as close to randomly ordered as possible. The worst case scenario is to apply the SGD to data in which the optimal model gradually changes over rows; in this case, the model will never settle down in a reasonable region of parameter space. In practice, haphazard orderings instead of intentionally randomized orderings often work well.</li>
<li>It is also important to insure that the algorithm not move too far along the gradient at each step. This requires setting a low learning rate, so that the model never makes a step so large that the next required step will have to be even larger to make up for the last step.</li>
</ul>
<h1><a id="user-content-to-do" class="anchor" aria-hidden="true" href="#to-do"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>To Do</h1>
<ul>
<li>Add better monitoring functions, including dumping to a file and to STDOUT during model fitting.</li>
<li>Fitted parameters are not optimal. Need to find ways to get better results out from a single pass through the data.</li>
<li>Need to automate making multiple passes through the data.</li>
<li>Need to be able to use minibatches of larger size than a single row.</li>
</ul>
</article></div>