<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-shaderabstractions" class="anchor" aria-hidden="true" href="#shaderabstractions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>ShaderAbstractions</h1>
<p dir="auto"><a href="https://travis-ci.com/SimonDanisch/ShaderAbstractions.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/224d1efb186be6b1d8d3b16809444521ce07df5029a592f83f071f25698690c0/68747470733a2f2f7472617669732d63692e636f6d2f53696d6f6e44616e697363682f5368616465724162737472616374696f6e732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/SimonDanisch/ShaderAbstractions.jl.svg?branch=master" style="max-width: 100%;"></a>
<a href="https://ci.appveyor.com/project/SimonDanisch/ShaderAbstractions-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/19c8da2ce23a5c682b8b647733d2702f23989707ea5d4d141f3dd57e9d3915bc/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f6769746875622f53696d6f6e44616e697363682f5368616465724162737472616374696f6e732e6a6c3f7376673d74727565" alt="Build Status" data-canonical-src="https://ci.appveyor.com/api/projects/status/github/SimonDanisch/ShaderAbstractions.jl?svg=true" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/SimonDanisch/ShaderAbstractions.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/e42216412fe4f12c139520a42a532007d5c2dd97bb24acef4a5a6fa18d0366bd/68747470733a2f2f636f6465636f762e696f2f67682f53696d6f6e44616e697363682f5368616465724162737472616374696f6e732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/SimonDanisch/ShaderAbstractions.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">Abstractions to construct shader objects for any WebGL/OpenGL/EGS/Vulkan context!
You construct the objects, and then render them in any backend.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using ShaderAbstractions, LinearAlgebra
using ShaderAbstractions: VertexArray
using Test, GeometryBasics
import GeometryBasics

struct WebGL &lt;: ShaderAbstractions.AbstractContext end

m = GLNormalMesh(Sphere(Point3f(0), 1f0))

mvao = VertexArray(m)
instances = VertexArray(positions = rand(GeometryBasics.Point{3, Float32}, 100))

x = ShaderAbstractions.InstancedProgram(
    WebGL(),
    &quot;void main(){}\n&quot;, &quot;void main(){}\n&quot;,
    mvao,
    instances,
    Dict(
        :model =&gt; Mat4f(I),
        :view =&gt; Mat4f(I),
        :projection =&gt; Mat4f(I),
    )
)"><pre><span class="pl-k">using</span> ShaderAbstractions, LinearAlgebra
<span class="pl-k">using</span> ShaderAbstractions<span class="pl-k">:</span> VertexArray
<span class="pl-k">using</span> Test, GeometryBasics
<span class="pl-k">import</span> GeometryBasics

<span class="pl-k">struct</span> WebGL <span class="pl-k">&lt;:</span> <span class="pl-c1">ShaderAbstractions.AbstractContext</span> <span class="pl-k">end</span>

m <span class="pl-k">=</span> <span class="pl-c1">GLNormalMesh</span>(<span class="pl-c1">Sphere</span>(<span class="pl-c1">Point3f</span>(<span class="pl-c1">0</span>), <span class="pl-c1">1f0</span>))

mvao <span class="pl-k">=</span> <span class="pl-c1">VertexArray</span>(m)
instances <span class="pl-k">=</span> <span class="pl-c1">VertexArray</span>(positions <span class="pl-k">=</span> <span class="pl-c1">rand</span>(GeometryBasics<span class="pl-k">.</span>Point{<span class="pl-c1">3</span>, Float32}, <span class="pl-c1">100</span>))

x <span class="pl-k">=</span> ShaderAbstractions<span class="pl-k">.</span><span class="pl-c1">InstancedProgram</span>(
    <span class="pl-c1">WebGL</span>(),
    <span class="pl-s"><span class="pl-pds">"</span>void main(){}<span class="pl-cce">\n</span><span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>void main(){}<span class="pl-cce">\n</span><span class="pl-pds">"</span></span>,
    mvao,
    instances,
    <span class="pl-c1">Dict</span>(
        <span class="pl-c1">:model</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">Mat4f</span>(I),
        <span class="pl-c1">:view</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">Mat4f</span>(I),
        <span class="pl-c1">:projection</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">Mat4f</span>(I),
    )
)</pre></div>
</article></div>