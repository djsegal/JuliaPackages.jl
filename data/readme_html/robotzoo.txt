<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p><a target="_blank" rel="noopener noreferrer" href="https://github.com/bjack205/RobotZoo.jl/workflows/CI/badge.svg"><img src="https://github.com/bjack205/RobotZoo.jl/workflows/CI/badge.svg" alt="CI" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/bjack205/RobotZoo.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/77414048a02fa9fcdae4ccff66e75fb385ef7cd563b2dcd4bf257f04f4d45afb/68747470733a2f2f636f6465636f762e696f2f67682f626a61636b3230352f526f626f745a6f6f2e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/bjack205/RobotZoo.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<h1><a id="user-content-robotzoojl" class="anchor" aria-hidden="true" href="#robotzoojl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>RobotZoo.jl</h1>
<p>Provides a handful of dynamics models of common robotic platforms, implemented using the
<a href="https://github.com/RoboticExplorationLab/RobotDynamics.jl"><code>RobotDynamics.jl</code></a> package.
The following models are currently implemented:</p>
<ul>
<li>Acrobot (<code>Acrobot</code>)</li>
<li>Dubins Car (unicycle model) (<code>DubinsCar</code>)</li>
<li>Kinematic Bicycle car model (<code>BicycleModel</code>)</li>
<li>Cartpole (<code>Cartpole</code>)</li>
<li>Double Integrator (<code>DoubleIntegrator</code>)</li>
<li>Pendulum (<code>Pendulum</code>)</li>
<li>Quadrotor (<code>Quadrotor</code>)</li>
<li>Airplane (<code>YakPlane</code>)</li>
<li>Satellite (<code>Satellite</code>)</li>
</ul>
<p>Most models can be constructed using their default constructor, e.g. <code>model = RobotZoo.Cartpole()</code>.
To get more information on each model, refer to the documentation for each type, accessible via the command line:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="?RobotZoo.Quadrotor
"><pre>?RobotZoo<span class="pl-k">.</span>Quadrotor</pre></div>
<h2><a id="user-content-example-usage" class="anchor" aria-hidden="true" href="#example-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example Usage</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using RobotZoo
using RobotDynamics

model RobotZoo.Cartpole()
n,m = size(model)

# Generate random state and control vector
x,u = rand(model)
dt = 0.1  # time step (s)
z = KnotPoint(x,u,dt)

# Evaluate the continuous dynamics and Jacobian
ẋ = dynamics(model, x, u)
∇f = RobotDynamics.DynamicsJacobian(model)
jacobian!(∇f, model, z)

# Evaluate the discrete dynamics and Jacobian
x′ = discrete_dynamics(RK3, model, z)
discrete_jacobian!(RK3, ∇f, model, z)
"><pre><span class="pl-k">using</span> RobotZoo
<span class="pl-k">using</span> RobotDynamics

model RobotZoo<span class="pl-k">.</span><span class="pl-c1">Cartpole</span>()
n,m <span class="pl-k">=</span> <span class="pl-c1">size</span>(model)

<span class="pl-c"><span class="pl-c">#</span> Generate random state and control vector</span>
x,u <span class="pl-k">=</span> <span class="pl-c1">rand</span>(model)
dt <span class="pl-k">=</span> <span class="pl-c1">0.1</span>  <span class="pl-c"><span class="pl-c">#</span> time step (s)</span>
z <span class="pl-k">=</span> <span class="pl-c1">KnotPoint</span>(x,u,dt)

<span class="pl-c"><span class="pl-c">#</span> Evaluate the continuous dynamics and Jacobian</span>
ẋ <span class="pl-k">=</span> <span class="pl-c1">dynamics</span>(model, x, u)
∇f <span class="pl-k">=</span> RobotDynamics<span class="pl-k">.</span><span class="pl-c1">DynamicsJacobian</span>(model)
<span class="pl-c1">jacobian!</span>(∇f, model, z)

<span class="pl-c"><span class="pl-c">#</span> Evaluate the discrete dynamics and Jacobian</span>
x′ <span class="pl-k">=</span> <span class="pl-c1">discrete_dynamics</span>(RK3, model, z)
<span class="pl-c1">discrete_jacobian!</span>(RK3, ∇f, model, z)</pre></div>
</article></div>