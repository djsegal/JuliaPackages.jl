<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/bjack205/RobotZoo.jl/workflows/CI/badge.svg"><img src="https://github.com/bjack205/RobotZoo.jl/workflows/CI/badge.svg" alt="CI" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/RoboticExplorationLab/RobotZoo.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/0323d6a727d559044c3012678ab9de62774e4ab939a0c6913063fbf0bac6af9d/68747470733a2f2f636f6465636f762e696f2f67682f526f626f7469634578706c6f726174696f6e4c61622f526f626f745a6f6f2e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e7376673f746f6b656e3d4b57634f753254467064" alt="codecov" data-canonical-src="https://codecov.io/gh/RoboticExplorationLab/RobotZoo.jl/branch/master/graph/badge.svg?token=KWcOu2TFpd" style="max-width: 100%;"></a></p>
<h1 dir="auto"><a id="user-content-robotzoojl" class="anchor" aria-hidden="true" href="#robotzoojl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>RobotZoo.jl</h1>
<p dir="auto">Provides a handful of dynamics models of common robotic platforms, implemented using the
<a href="https://github.com/RoboticExplorationLab/RobotDynamics.jl"><code>RobotDynamics.jl</code></a> package.
The following models are currently implemented:</p>
<ul dir="auto">
<li>Acrobot (<code>Acrobot</code>)</li>
<li>Dubins Car (unicycle model) (<code>DubinsCar</code>)</li>
<li>Kinematic Bicycle car model (<code>BicycleModel</code>)</li>
<li>Cartpole (<code>Cartpole</code>)</li>
<li>Double Integrator (<code>DoubleIntegrator</code>)</li>
<li>Pendulum (<code>Pendulum</code>)</li>
<li>Quadrotor (<code>Quadrotor</code>)</li>
<li>Airplane (<code>YakPlane</code>)</li>
<li>Satellite (<code>Satellite</code>)</li>
</ul>
<p dir="auto">Most models can be constructed using their default constructor, e.g. <code>model = RobotZoo.Cartpole()</code>.
To get more information on each model, refer to the documentation for each type, accessible via the command line:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="?RobotZoo.Quadrotor"><pre>?RobotZoo<span class="pl-k">.</span>Quadrotor</pre></div>
<h2 dir="auto"><a id="user-content-example-usage" class="anchor" aria-hidden="true" href="#example-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example Usage</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using RobotZoo
import RobotDynamics as RD

model = RobotZoo.Cartpole()
n,m = RD.dims(model)

# Generate random state and control vector
x,u = rand(model)
t = 0.0   # time (s)
dt = 0.1  # time step (s)
z = RD.KnotPoint(x,u,t,dt)

# Evaluate the continuous dynamics and Jacobian
ẋ = dynamics(model, x, u)
∇f = zeros(n, n + m)
RD.jacobian!(RD.StaticReturn(), RD.ForwardAD(), model, ∇f, ẋ, model, z)

# Evaluate the discrete dynamics and Jacobian
dmodel = RD.DiscretizedDynamics{RD.RK4}(model)
x′ = RD.discrete_dynamics(dmodel, model, x, u, t, dt)
RD.discrete_jacobian!(RD.StaticReturn(), RD.ForwardAD(), dmodel, ∇f, x′, z)"><pre><span class="pl-k">using</span> RobotZoo
<span class="pl-k">import</span> RobotDynamics <span class="pl-k">as</span> RD

model <span class="pl-k">=</span> RobotZoo<span class="pl-k">.</span><span class="pl-c1">Cartpole</span>()
n,m <span class="pl-k">=</span> RD<span class="pl-k">.</span><span class="pl-c1">dims</span>(model)

<span class="pl-c"><span class="pl-c">#</span> Generate random state and control vector</span>
x,u <span class="pl-k">=</span> <span class="pl-c1">rand</span>(model)
t <span class="pl-k">=</span> <span class="pl-c1">0.0</span>   <span class="pl-c"><span class="pl-c">#</span> time (s)</span>
dt <span class="pl-k">=</span> <span class="pl-c1">0.1</span>  <span class="pl-c"><span class="pl-c">#</span> time step (s)</span>
z <span class="pl-k">=</span> RD<span class="pl-k">.</span><span class="pl-c1">KnotPoint</span>(x,u,t,dt)

<span class="pl-c"><span class="pl-c">#</span> Evaluate the continuous dynamics and Jacobian</span>
ẋ <span class="pl-k">=</span> <span class="pl-c1">dynamics</span>(model, x, u)
∇f <span class="pl-k">=</span> <span class="pl-c1">zeros</span>(n, n <span class="pl-k">+</span> m)
RD<span class="pl-k">.</span><span class="pl-c1">jacobian!</span>(RD<span class="pl-k">.</span><span class="pl-c1">StaticReturn</span>(), RD<span class="pl-k">.</span><span class="pl-c1">ForwardAD</span>(), model, ∇f, ẋ, model, z)

<span class="pl-c"><span class="pl-c">#</span> Evaluate the discrete dynamics and Jacobian</span>
dmodel <span class="pl-k">=</span> RD<span class="pl-k">.</span><span class="pl-c1">DiscretizedDynamics</span><span class="pl-c1">{RD.RK4}</span>(model)
x′ <span class="pl-k">=</span> RD<span class="pl-k">.</span><span class="pl-c1">discrete_dynamics</span>(dmodel, model, x, u, t, dt)
RD<span class="pl-k">.</span><span class="pl-c1">discrete_jacobian!</span>(RD<span class="pl-k">.</span><span class="pl-c1">StaticReturn</span>(), RD<span class="pl-k">.</span><span class="pl-c1">ForwardAD</span>(), dmodel, ∇f, x′, z)</pre></div>
</article></div>