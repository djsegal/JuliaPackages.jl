<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-mpfr_wrap" class="anchor" aria-hidden="true" href="#mpfr_wrap"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>MPFR_wrap</h1>
<p dir="auto"><a href="https://travis-ci.com/mzaffalon/MPFR_wrap.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/ee8786984df9d9db43f719335ff2fa45a116b1d5242d1e3de0c793ea7bb25424/68747470733a2f2f7472617669732d63692e636f6d2f6d7a616666616c6f6e2f4d5046525f777261702e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/mzaffalon/MPFR_wrap.jl.svg?branch=master" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/mzaffalon/MPFR_wrap.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/8b89139e64196e38ae7b961d83d6b7e9a3f0f9db6c766ff23a968a43e66bec2e/68747470733a2f2f636f6465636f762e696f2f67682f6d7a616666616c6f6e2f4d5046525f777261702e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/mzaffalon/MPFR_wrap.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">This module provides <a href="https://julialang.org" rel="nofollow">Julia-language</a> wrappers
to the free/open-source <a href="https://www.mpfr.org/" rel="nofollow">MPFR library</a> for
"multiple-precision floating-point computations with <em>correct
rounding</em>".</p>
<p dir="auto"><code>MPFR_wrap.jl</code> does not introduce new types and instead makes use of
Julia's BigFloat but allows the user to perform in-place operations to
minimize garbage collection. <code>MPFR_wrap.jl</code>'s functions that modify
their input have names terminating with a bang (!) following the
standard Julia convention.</p>
<h1 dir="auto"><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example</h1>
<p dir="auto">Compute <code>a = sqrt(3.5 + 0.8)</code>. Using operations defined in Julia's
<code>Base</code> for <code>BigFloats</code></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="a = BigFloat(&quot;3.5&quot;, precision=1000)
b = BigFloat(&quot;0.8&quot;, precision=1000)
c = sqrt(a + b)"><pre>a <span class="pl-k">=</span> <span class="pl-c1">BigFloat</span>(<span class="pl-s"><span class="pl-pds">"</span>3.5<span class="pl-pds">"</span></span>, precision<span class="pl-k">=</span><span class="pl-c1">1000</span>)
b <span class="pl-k">=</span> <span class="pl-c1">BigFloat</span>(<span class="pl-s"><span class="pl-pds">"</span>0.8<span class="pl-pds">"</span></span>, precision<span class="pl-k">=</span><span class="pl-c1">1000</span>)
c <span class="pl-k">=</span> <span class="pl-c1">sqrt</span>(a <span class="pl-k">+</span> b)</pre></div>
<p dir="auto">creates a temporary variable to hold the intermediate result of the
computation <code>a + b</code>.</p>
<p dir="auto">Using <code>MPFR_wrap</code> for in-place computation</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="a = BigFloat(&quot;3.5&quot;, precision=1000)
b = BigFloat(&quot;0.8&quot;, precision=1000)
# add a and b and store the result in a
add!(a, a, b)
# take the square root of a and store it in a
sqrt!(a, a)"><pre>a <span class="pl-k">=</span> <span class="pl-c1">BigFloat</span>(<span class="pl-s"><span class="pl-pds">"</span>3.5<span class="pl-pds">"</span></span>, precision<span class="pl-k">=</span><span class="pl-c1">1000</span>)
b <span class="pl-k">=</span> <span class="pl-c1">BigFloat</span>(<span class="pl-s"><span class="pl-pds">"</span>0.8<span class="pl-pds">"</span></span>, precision<span class="pl-k">=</span><span class="pl-c1">1000</span>)
<span class="pl-c"><span class="pl-c">#</span> add a and b and store the result in a</span>
<span class="pl-c1">add!</span>(a, a, b)
<span class="pl-c"><span class="pl-c">#</span> take the square root of a and store it in a</span>
<span class="pl-c1">sqrt!</span>(a, a)</pre></div>
<p dir="auto">The last two operations can be combined into <code>sqrt!(a, add!(a, a, b))</code>
relying on <code>add!</code> to return the modified input <code>a</code>.</p>
<p dir="auto">The file <code>examples/pi_iterative.jl</code> contains two methods for the
computation of π using the iterative method Brent-Salamin and the
Borwein cubic iteration taken from "A catalogue of mathematical
formulas involving π, with analysis" by David H. Bailey available
<a href="https://www.davidhbailey.com/dhbpapers/pi-formulas.pdf" rel="nofollow">online</a>.</p>
<p dir="auto">The following shows the difference in execution time and memory
allocation for the Brent-Salamin method using standard and in-place
operations.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; @btime brent_salamin();
  336.484 ms (870 allocations: 11.88 MiB)

julia&gt; @btime inplace_brent_salamin();
  129.504 ms (158 allocations: 413.14 KiB)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">brent_salamin</span>();
  <span class="pl-c1">336.484</span> ms (<span class="pl-c1">870</span> allocations<span class="pl-k">:</span> <span class="pl-c1">11.88</span> MiB)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">inplace_brent_salamin</span>();
  <span class="pl-c1">129.504</span> ms (<span class="pl-c1">158</span> allocations<span class="pl-k">:</span> <span class="pl-c1">413.14</span> KiB)</pre></div>
<h1 dir="auto"><a id="user-content-list-of-exported-functions" class="anchor" aria-hidden="true" href="#list-of-exported-functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>List of exported functions</h1>
<p dir="auto">The following functions are exported:</p>
<ol dir="auto">
<li>Assignment functions</li>
</ol>
<ul dir="auto">
<li>set!</li>
</ul>
<ol start="2" dir="auto">
<li>Basic arithmetic functions</li>
</ol>
<ul dir="auto">
<li>add!, sub!, mul!, div!</li>
<li>sqrt!, rec_sqrt!, cbrt!, root!, pow!</li>
<li>neg!, abs!</li>
<li>dim!</li>
<li>mul_2!</li>
</ul>
<ol start="3" dir="auto">
<li>Comparison functions</li>
</ol>
<ul dir="auto">
<li>cmp_2exp</li>
<li>number_p, regular_p</li>
<li>cmpabs</li>
<li>unordered_p</li>
</ul>
<ol start="4" dir="auto">
<li>Special functions</li>
</ol>
<ul dir="auto">
<li>log!, log2!, log10!, log1p!</li>
<li>exp!, exp2!, exp10!, exp1p!</li>
<li>cos!, sin!, tan!, sin_cos!</li>
<li>sec!, csc!, cot!</li>
<li>acos!, asin!, atan!, atan2!</li>
<li>cosh!, sinh!, atanh!</li>
<li>eint!, li!</li>
<li>gamma!, gamma_inc!, lngamma!, lgamma!, digamma!</li>
<li>beta!, zeta!, erf!</li>
<li>j0!, j1!, jn!, y0!, y1, yn!</li>
<li>fma!, fms!, fmma!, fmms!</li>
<li>agm!, hypot!, ai!</li>
</ul>
<ol start="5" dir="auto">
<li>Integer and reminder related functions</li>
</ol>
<ul dir="auto">
<li>ceil!, floor!, round!, roundeven!, trunc!</li>
<li>rint!, frac!</li>
<li>modf!, fmod!</li>
<li>integer_p</li>
</ul>
</article></div>