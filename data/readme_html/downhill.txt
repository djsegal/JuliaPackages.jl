<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p dir="auto"><a href="https://vvpisarev.github.io/Downhill.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/56f8252ba8e9d3f0b810769543f77823d2fe031ce560d4c2d69fb1fcad800383/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6c61746573742d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-latest-blue.svg" style="max-width: 100%;"></a></p>
<h1 dir="auto"><a id="user-content-downhilljl" class="anchor" aria-hidden="true" href="#downhilljl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Downhill.jl</h1>
<p dir="auto">A collection of descent-based optimization methods.</p>
<p dir="auto">The package is meant to be used for small-scale optimization problems.
The use case is the problems where an optimization is some intermediate step
that has to be run repeatedly.</p>
<h2 dir="auto"><a id="user-content-basic-usage" class="anchor" aria-hidden="true" href="#basic-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Basic usage</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; function rosenbrock!(x::AbstractVector, g::AbstractVector; b=100)
           f = zero(eltype(g))
           fill!(g, 0)
           inds = eachindex(x, g)
           for i in 2:last(inds)
               f += (1 - x[i-1])^2 + b * (x[i] - x[i-1]^2)^2
               g[i-1] += 2 * (x[i-1] - 1) + 4 * b * x[i-1] * (x[i-1]^2 - x[i])
               g[i] += 2 * b * (x[i] - x[i-1]^2)
           end
           return f, g
       end

julia&gt; let x0 = zeros(2)
           opt = BFGS(x0)
           optresult = optimize!(rosenbrock!, opt, x0)
           optresult.argument
       end
2-element Vector{Float64}:
 0.9999999998907124
 0.9999999998080589"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">function</span> <span class="pl-en">rosenbrock!</span>(x<span class="pl-k">::</span><span class="pl-c1">AbstractVector</span>, g<span class="pl-k">::</span><span class="pl-c1">AbstractVector</span>; b<span class="pl-k">=</span><span class="pl-c1">100</span>)
           f <span class="pl-k">=</span> <span class="pl-c1">zero</span>(<span class="pl-c1">eltype</span>(g))
           <span class="pl-c1">fill!</span>(g, <span class="pl-c1">0</span>)
           inds <span class="pl-k">=</span> <span class="pl-c1">eachindex</span>(x, g)
           <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">last</span>(inds)
               f <span class="pl-k">+=</span> (<span class="pl-c1">1</span> <span class="pl-k">-</span> x[i<span class="pl-k">-</span><span class="pl-c1">1</span>])<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">+</span> b <span class="pl-k">*</span> (x[i] <span class="pl-k">-</span> x[i<span class="pl-k">-</span><span class="pl-c1">1</span>]<span class="pl-k">^</span><span class="pl-c1">2</span>)<span class="pl-k">^</span><span class="pl-c1">2</span>
               g[i<span class="pl-k">-</span><span class="pl-c1">1</span>] <span class="pl-k">+=</span> <span class="pl-c1">2</span> <span class="pl-k">*</span> (x[i<span class="pl-k">-</span><span class="pl-c1">1</span>] <span class="pl-k">-</span> <span class="pl-c1">1</span>) <span class="pl-k">+</span> <span class="pl-c1">4</span> <span class="pl-k">*</span> b <span class="pl-k">*</span> x[i<span class="pl-k">-</span><span class="pl-c1">1</span>] <span class="pl-k">*</span> (x[i<span class="pl-k">-</span><span class="pl-c1">1</span>]<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">-</span> x[i])
               g[i] <span class="pl-k">+=</span> <span class="pl-c1">2</span> <span class="pl-k">*</span> b <span class="pl-k">*</span> (x[i] <span class="pl-k">-</span> x[i<span class="pl-k">-</span><span class="pl-c1">1</span>]<span class="pl-k">^</span><span class="pl-c1">2</span>)
           <span class="pl-k">end</span>
           <span class="pl-k">return</span> f, g
       <span class="pl-k">end</span>

julia<span class="pl-k">&gt;</span> <span class="pl-k">let</span> x0 <span class="pl-k">=</span> <span class="pl-c1">zeros</span>(<span class="pl-c1">2</span>)
           opt <span class="pl-k">=</span> <span class="pl-c1">BFGS</span>(x0)
           optresult <span class="pl-k">=</span> <span class="pl-c1">optimize!</span>(rosenbrock!, opt, x0)
           optresult<span class="pl-k">.</span>argument
       <span class="pl-k">end</span>
<span class="pl-c1">2</span><span class="pl-k">-</span>element Vector{Float64}<span class="pl-k">:</span>
 <span class="pl-c1">0.9999999998907124</span>
 <span class="pl-c1">0.9999999998080589</span></pre></div>
</article></div>