<div id="readme" class="md" data-path="Readme.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-localscopebenchmarksjl" class="anchor" aria-hidden="true" href="#localscopebenchmarksjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>LocalScopeBenchmarks.jl</h1>
<p><a href="https://travis-ci.org/rdeits/LocalScopeBenchmarks.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/676ccab2efe87c7f34cf63cd47140df740b6e2b8647d197277295f587975ddb6/68747470733a2f2f7472617669732d63692e6f72672f7264656974732f4c6f63616c53636f706542656e63686d61726b732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/rdeits/LocalScopeBenchmarks.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://codecov.io/github/rdeits/LocalScopeBenchmarks.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/ac7fc492f517eb53b9a05cbde6eb215818e5bde6ec167e444b486cf1e58b81d4/68747470733a2f2f636f6465636f762e696f2f6769746875622f7264656974732f4c6f63616c53636f706542656e63686d61726b732e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="https://codecov.io/github/rdeits/LocalScopeBenchmarks.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
<p><strong>tl;dr:</strong> Tired of adding <code>$</code> everywhere when you <code>@benchmark</code> or <code>@btime</code>? Try <code>@localbtime f(x)</code> instead of <code>@btime f($x)</code>.</p>
<h2><a id="user-content-introduction" class="anchor" aria-hidden="true" href="#introduction"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Introduction</h2>
<p><a href="https://github.com/JuliaCI/BenchmarkTools.jl">BenchmarkTools.jl</a> is an amazingly useful package for benchmarking <a href="https://julialang.org/" rel="nofollow">Julia</a> code. But it does have one notable gotcha: the expression being benchmarked is run at <em>global</em> scope, so any variables it references are by necessity global variables. Julia enthusiasts may recall that the very first Julia performance tip is to <a href="https://docs.julialang.org/en/stable/manual/performance-tips/#Avoid-global-variables-1" rel="nofollow">avoid non-<code>const</code> global variables</a> because their type can change at any time and therefore can't be relied upon by the compiler. The result is that naively using <code>BenchmarkTools.jl</code> often results in benchmarks that appear to run much slower than they should due to the performance cost of accessing globals.</p>
<p>For example, a common benchmarking mistake looks like:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using BenchmarkTools

julia&gt; x = 1.0
1.0

julia&gt; @btime sin(x)
  18.011 ns (1 allocation: 16 bytes)
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> BenchmarkTools

julia<span class="pl-k">&gt;</span> x <span class="pl-k">=</span> <span class="pl-c1">1.0</span>
<span class="pl-c1">1.0</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">sin</span>(x)
  <span class="pl-c1">18.011</span> ns (<span class="pl-c1">1</span> allocation<span class="pl-k">:</span> <span class="pl-c1">16</span> bytes)</pre></div>
<p>18 nanoseconds is a bit slow, and we have an unexpected 16 bytes of heap memory allocation.</p>
<p>The solution is easy, and is explained in the <a href="https://github.com/JuliaCI/BenchmarkTools.jl/blob/master/doc/manual.md#interpolating-values-into-benchmark-expressions">BenchmarkTools.jl manual</a>: you just have to interpolate the <em>value</em> of <code>x</code> into the benchmark expression rather than force it to be looked up as a global variable:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; @btime sin($x)
  7.059 ns (0 allocations: 0 bytes)
0.8414709848078965
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">sin</span>(<span class="pl-k">$</span>x)
  <span class="pl-c1">7.059</span> ns (<span class="pl-c1">0</span> allocations<span class="pl-k">:</span> <span class="pl-c1">0</span> bytes)
<span class="pl-c1">0.8414709848078965</span></pre></div>
<p>much faster, and no unexpected memory allocation. By interpolating <code>$x</code>, we get a result which is representative of how fast <code>sin</code> would behave for an input of this type inside a function, which is where it's almost always going to be found.</p>
<p>This interpolation trick is easy to do, but I've found it consistently annoying, and it's caused an impressive amount of confusion (kudos to <code>@NiclasMattsson</code> on Discourse for finding most of these):</p>
<ul>
<li><a href="https://discourse.julialang.org/t/trig-functions-very-slow/15335/54" rel="nofollow">https://discourse.julialang.org/t/trig-functions-very-slow/15335/54</a></li>
<li><a href="https://discourse.julialang.org/t/another-blas-and-julia-comparison/15411/2" rel="nofollow">https://discourse.julialang.org/t/another-blas-and-julia-comparison/15411/2</a></li>
<li><a href="https://discourse.julialang.org/t/allocation-by-staticarrays-in-anonymous-function-macro/14774/2" rel="nofollow">https://discourse.julialang.org/t/allocation-by-staticarrays-in-anonymous-function-macro/14774/2</a></li>
<li><a href="https://discourse.julialang.org/t/how-to-optimise-and-be-faster-than-java/14457/22" rel="nofollow">https://discourse.julialang.org/t/how-to-optimise-and-be-faster-than-java/14457/22</a></li>
<li><a href="https://discourse.julialang.org/t/interval-arithmetic-computation-time/14633/14" rel="nofollow">https://discourse.julialang.org/t/interval-arithmetic-computation-time/14633/14</a></li>
<li><a href="https://discourse.julialang.org/t/with-missings-julia-is-slower-than-r/11838/9" rel="nofollow">https://discourse.julialang.org/t/with-missings-julia-is-slower-than-r/11838/9</a></li>
<li><a href="https://discourse.julialang.org/t/vector-of-matrices-vs-multidimensional-arrays/9602/3" rel="nofollow">https://discourse.julialang.org/t/vector-of-matrices-vs-multidimensional-arrays/9602/3</a></li>
<li><a href="https://discourse.julialang.org/t/spurious-allocation/3751/7" rel="nofollow">https://discourse.julialang.org/t/spurious-allocation/3751/7</a></li>
<li><a href="https://discourse.julialang.org/t/improve-the-performance-of-multiplication-of-an-arbitrary-number-of-matrices/10835/19" rel="nofollow">https://discourse.julialang.org/t/improve-the-performance-of-multiplication-of-an-arbitrary-number-of-matrices/10835/19</a></li>
<li><a href="https://discourse.julialang.org/t/a-generator-with-two-for-keywords-is-slow/7407/5" rel="nofollow">https://discourse.julialang.org/t/a-generator-with-two-for-keywords-is-slow/7407/5</a></li>
</ul>
<h2><a id="user-content-there-has-to-be-a-better-way" class="anchor" aria-hidden="true" href="#there-has-to-be-a-better-way"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>There Has To Be a Better Way!</h2>
<p>Enter <code>LocalScopeBenchmarks.jl</code>. This package tries to do exactly one thing: save you from having to remember to add <code>$</code> all over the place when benchmarking. Observe:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using LocalScopeBenchmarks

julia&gt; x = 1.0
1.0

julia&gt; @localbtime sin(x)
  6.556 ns (0 allocations: 0 bytes)
0.8414709848078965
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> LocalScopeBenchmarks

julia<span class="pl-k">&gt;</span> x <span class="pl-k">=</span> <span class="pl-c1">1.0</span>
<span class="pl-c1">1.0</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@localbtime</span> <span class="pl-c1">sin</span>(x)
  <span class="pl-c1">6.556</span> ns (<span class="pl-c1">0</span> allocations<span class="pl-k">:</span> <span class="pl-c1">0</span> bytes)
<span class="pl-c1">0.8414709848078965</span></pre></div>
<p>We got the same measurement as <code>@btime sin($x)</code> without having to add a <code>$</code>. Hooray!</p>
<h3><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h3>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Pkg
Pkg.add(&quot;https://github.com/rdeits/LocalScopeBenchmarks.jl&quot;)
"><pre><span class="pl-k">using</span> Pkg
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>https://github.com/rdeits/LocalScopeBenchmarks.jl<span class="pl-pds">"</span></span>)</pre></div>
<p>or just press <code>]</code> at the Julia REPL and then enter <code>add https://github.com/rdeits/LocalScopeBenchmarks.jl</code></p>
<h3><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h3>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using LocalScopeBenchmarks
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> LocalScopeBenchmarks</pre></div>
<p>This package provides <code>@localbtime</code>, <code>@localbenchmark</code>, and <code>@localbelapsed</code>, analogous to <code>@btime</code>, <code>@benchmark</code>, and <code>@belapsed</code> from BenchmarkTools.jl. Each should support the same inputs and return the same types as their BenchmarkTools.jl equivalents (in fact, each of them is just a thin wrapper around the existing BenchmarkTools macros). The only change is that the <code>@local*</code> versions try to interpolate local variables into the benchmarked expression rather than treating those variables as global.</p>
<p>Since we're just using BenchmarkTools under the hood, the <code>setup</code> and <code>evals</code> keyword arguments work as normal:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; x = 1.0
1.0

julia&gt; @localbtime f(x) setup=(f = sin)
  6.791 ns (0 allocations: 0 bytes)
"><pre>julia<span class="pl-k">&gt;</span> x <span class="pl-k">=</span> <span class="pl-c1">1.0</span>
<span class="pl-c1">1.0</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@localbtime</span> <span class="pl-c1">f</span>(x) setup<span class="pl-k">=</span>(f <span class="pl-k">=</span> sin)
  <span class="pl-c1">6.791</span> ns (<span class="pl-c1">0</span> allocations<span class="pl-k">:</span> <span class="pl-c1">0</span> bytes)</pre></div>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; @localbtime x^2 evals=100
  0.290 ns (0 allocations: 0 bytes)
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">@localbtime</span> x<span class="pl-k">^</span><span class="pl-c1">2</span> evals<span class="pl-k">=</span><span class="pl-c1">100</span>
  <span class="pl-c1">0.290</span> ns (<span class="pl-c1">0</span> allocations<span class="pl-k">:</span> <span class="pl-c1">0</span> bytes)</pre></div>
<p>You can also still interpolate values into the expression with <code>$</code> if you really want:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="# Includes the time spent calling `rand(1000)`
julia&gt; @localbtime sum(rand(1000))
  1.084 μs (1 allocation: 7.94 KiB)
"><pre><span class="pl-c"><span class="pl-c">#</span> Includes the time spent calling `rand(1000)`</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">@localbtime</span> <span class="pl-c1">sum</span>(<span class="pl-c1">rand</span>(<span class="pl-c1">1000</span>))
  <span class="pl-c1">1.084</span> μs (<span class="pl-c1">1</span> allocation<span class="pl-k">:</span> <span class="pl-c1">7.94</span> KiB)</pre></div>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="# Interpolates the *value* of `rand(1000)` so that it's not
# computed inside the benchmark:
julia&gt; @localbtime sum($(rand(1000)))
  69.160 ns (0 allocations: 0 bytes)
"><pre><span class="pl-c"><span class="pl-c">#</span> Interpolates the *value* of `rand(1000)` so that it's not</span>
<span class="pl-c"><span class="pl-c">#</span> computed inside the benchmark:</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">@localbtime</span> <span class="pl-c1">sum</span>(<span class="pl-k">$</span>(<span class="pl-c1">rand</span>(<span class="pl-c1">1000</span>)))
  <span class="pl-c1">69.160</span> ns (<span class="pl-c1">0</span> allocations<span class="pl-k">:</span> <span class="pl-c1">0</span> bytes)</pre></div>
</article></div>