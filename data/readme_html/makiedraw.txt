<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-makiedraw" class="anchor" aria-hidden="true" href="#makiedraw"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>MakieDraw</h1>
<p dir="auto"><a href="https://rafaqz.github.io/MakieDraw.jl/stable/" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://rafaqz.github.io/MakieDraw.jl/dev/" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/rafaqz/MakieDraw.jl/actions/workflows/CI.yml?query=branch%3Amain"><img src="https://github.com/rafaqz/MakieDraw.jl/actions/workflows/CI.yml/badge.svg?branch=main" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/rafaqz/MakieDraw.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/8ce30eb2a3dcf7dd6327cb85267e1d84c0a6c03cded196742fcedcf75e39f90e/68747470733a2f2f636f6465636f762e696f2f67682f72616661717a2f4d616b6965447261772e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/rafaqz/MakieDraw.jl/branch/main/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">Plot an interactive canvas of GeometryBaseics <code>Point</code>, <code>LineString</code> or <code>Polygon</code>, or an ms-paint style canvas for any numerical or color <code>Array</code>. These can be overlayed and activated/deactivated to have multiple drawing task on the same <code>Axis</code>.</p>
<details open="" class="details-reset border rounded-2">
  <summary class="px-3 py-2">
    <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-device-camera-video">
    <path d="M16 3.75v8.5a.75.75 0 0 1-1.136.643L11 10.575v.675A1.75 1.75 0 0 1 9.25 13h-7.5A1.75 1.75 0 0 1 0 11.25v-6.5C0 3.784.784 3 1.75 3h7.5c.966 0 1.75.784 1.75 1.75v.675l3.864-2.318A.75.75 0 0 1 16 3.75Zm-6.5 1a.25.25 0 0 0-.25-.25h-7.5a.25.25 0 0 0-.25.25v6.5c0 .138.112.25.25.25h7.5a.25.25 0 0 0 .25-.25v-6.5ZM11 8.825l3.5 2.1v-5.85l-3.5 2.1Z"></path>
</svg>
    <span aria-label="Video description makie_draw_life.webm" class="m-1">makie_draw_life.webm</span>
    <span class="dropdown-caret"></span>
  </summary>

  <video src="https://user-images.githubusercontent.com/2534009/228633357-52798d12-36dc-4bb7-a1d4-fdb620aa5ca6.webm" data-canonical-src="https://user-images.githubusercontent.com/2534009/228633357-52798d12-36dc-4bb7-a1d4-fdb620aa5ca6.webm" controls="controls" muted="muted" class="d-block rounded-bottom-2 border-top width-fit" style="max-height:640px; min-height: 200px">

  </video>
</details>

<p dir="auto"><em>Drawing into a DynamicGrids.jl game of life simulation</em></p>
<h1 dir="auto"><a id="user-content-example-use-cases" class="anchor" aria-hidden="true" href="#example-use-cases"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example use cases</h1>
<ul dir="auto">
<li><code>GeometryCanvas</code> can be used to manually crreate GeoInterface.jl compatible FeatureCollections (and even add metadata columns for each geometry), which can be done over a heatmap or other spatial plot. A <code>GeometryCanvas</code> can be written directly to disk with GeoJSON.jl or Shapefile.jl.</li>
<li><code>GeometryCanvas</code> can also be used to edit any GeoInterface.jl compatible geometries and feature collections.</li>
<li><code>PaintCanvas</code> can be used to manually edit matrices of any kind that Makie can plot. You could make <code>Bool</code> mask layers over maps or other images, edit categorical images, or just draw some retro pictures on a <code>Matrix{RGB}</code>.</li>
<li>MakieDraw could also be used for live interaction, such as using <code>PaintCanvas</code> as a mask or aux layer in DynamicGrids.jl simulations.</li>
</ul>
<details open="" class="details-reset border rounded-2">
  <summary class="px-3 py-2">
    <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-device-camera-video">
    <path d="M16 3.75v8.5a.75.75 0 0 1-1.136.643L11 10.575v.675A1.75 1.75 0 0 1 9.25 13h-7.5A1.75 1.75 0 0 1 0 11.25v-6.5C0 3.784.784 3 1.75 3h7.5c.966 0 1.75.784 1.75 1.75v.675l3.864-2.318A.75.75 0 0 1 16 3.75Zm-6.5 1a.25.25 0 0 0-.25-.25h-7.5a.25.25 0 0 0-.25.25v6.5c0 .138.112.25.25.25h7.5a.25.25 0 0 0 .25-.25v-6.5ZM11 8.825l3.5 2.1v-5.85l-3.5 2.1Z"></path>
</svg>
    <span aria-label="Video description makie_draws-2023-03-29_17.48.57.webm" class="m-1">makie_draws-2023-03-29_17.48.57.webm</span>
    <span class="dropdown-caret"></span>
  </summary>

  <video src="https://user-images.githubusercontent.com/2534009/228595860-ae996719-c4a3-4479-b4da-f65183da867a.webm" data-canonical-src="https://user-images.githubusercontent.com/2534009/228595860-ae996719-c4a3-4479-b4da-f65183da867a.webm" controls="controls" muted="muted" class="d-block rounded-bottom-2 border-top width-fit" style="max-height:640px; min-height: 200px">

  </video>
</details>

<p dir="auto">Or try this example over Tyler.jl tiles:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using MakieDraw
using GLMakie
using GeoJSON
using GeometryBasics
using GeoInterface
using TileProviders
using Tyler
using Extents
provider = Google(:satelite)

figure = Figure()
axis = Axis(figure[1:10, 1:10])
tyler = Tyler.Map(Extent(Y=(-27.0, 0.025), X=(0.04, 38.0)); 
    figure, axis, provider=Google()
)
categories = Observable(Int[])
point_canvas = GeometryCanvas{Point}(; 
  figure, axis, properties=(; categories), mouse_property=:categories,
  scatter_kw=(; color=categories, colorrange=(0, 2), colormap=:spring)
)
categories[]

line_canvas = GeometryCanvas{LineString}(; figure, axis)

line_canvas.active[] = true
point_canvas.active[] = true

poly_canvas = GeometryCanvas{Polygon}(; figure, axis)

layers = Dict(
    :point=&gt;point_canvas.active, 
    :line=&gt;line_canvas.active,
    :poly=&gt;poly_canvas.active,
)

MakieDraw.CanvasSelect(fig[11, 1], axis; layers)

# Write the polygons to JSON
# Have to convert here because GeometryBasics `isgeometry` has a bug, see PR #193
polygons = GeoInterface.convert.(Ref(GeoInterface), poly_canvas.geoms[])
mp = GeoInterface.MultiPolygon(polygons)
GeoJSON.write(&quot;multipolygon.json&quot;, mp)

# Reload and edit again
polygons = collect(GeoInterface.getgeom(GeoJSON.read(read(&quot;multipolygon.json&quot;))))
tyler = Tyler.Map(Extent(Y=(-27.0, 0.025), X=(0.04, 38.0)); provider)
fig = tyler.figure;
axis = tyler.axis;
poly_canvas = GeometryCanvas(polygons; figure, axis)"><pre><span class="pl-k">using</span> MakieDraw
<span class="pl-k">using</span> GLMakie
<span class="pl-k">using</span> GeoJSON
<span class="pl-k">using</span> GeometryBasics
<span class="pl-k">using</span> GeoInterface
<span class="pl-k">using</span> TileProviders
<span class="pl-k">using</span> Tyler
<span class="pl-k">using</span> Extents
provider <span class="pl-k">=</span> <span class="pl-c1">Google</span>(<span class="pl-c1">:satelite</span>)

figure <span class="pl-k">=</span> <span class="pl-c1">Figure</span>()
axis <span class="pl-k">=</span> <span class="pl-c1">Axis</span>(figure[<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>, <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>])
tyler <span class="pl-k">=</span> Tyler<span class="pl-k">.</span><span class="pl-c1">Map</span>(<span class="pl-c1">Extent</span>(Y<span class="pl-k">=</span>(<span class="pl-k">-</span><span class="pl-c1">27.0</span>, <span class="pl-c1">0.025</span>), X<span class="pl-k">=</span>(<span class="pl-c1">0.04</span>, <span class="pl-c1">38.0</span>)); 
    figure, axis, provider<span class="pl-k">=</span><span class="pl-c1">Google</span>()
)
categories <span class="pl-k">=</span> <span class="pl-c1">Observable</span>(Int[])
point_canvas <span class="pl-k">=</span> <span class="pl-c1">GeometryCanvas</span><span class="pl-c1">{Point}</span>(; 
  figure, axis, properties<span class="pl-k">=</span>(; categories), mouse_property<span class="pl-k">=</span><span class="pl-c1">:categories</span>,
  scatter_kw<span class="pl-k">=</span>(; color<span class="pl-k">=</span>categories, colorrange<span class="pl-k">=</span>(<span class="pl-c1">0</span>, <span class="pl-c1">2</span>), colormap<span class="pl-k">=</span><span class="pl-c1">:spring</span>)
)
categories[]

line_canvas <span class="pl-k">=</span> <span class="pl-c1">GeometryCanvas</span><span class="pl-c1">{LineString}</span>(; figure, axis)

line_canvas<span class="pl-k">.</span>active[] <span class="pl-k">=</span> <span class="pl-c1">true</span>
point_canvas<span class="pl-k">.</span>active[] <span class="pl-k">=</span> <span class="pl-c1">true</span>

poly_canvas <span class="pl-k">=</span> <span class="pl-c1">GeometryCanvas</span><span class="pl-c1">{Polygon}</span>(; figure, axis)

layers <span class="pl-k">=</span> <span class="pl-c1">Dict</span>(
    <span class="pl-c1">:point</span><span class="pl-k">=&gt;</span>point_canvas<span class="pl-k">.</span>active, 
    <span class="pl-c1">:line</span><span class="pl-k">=&gt;</span>line_canvas<span class="pl-k">.</span>active,
    <span class="pl-c1">:poly</span><span class="pl-k">=&gt;</span>poly_canvas<span class="pl-k">.</span>active,
)

MakieDraw<span class="pl-k">.</span><span class="pl-c1">CanvasSelect</span>(fig[<span class="pl-c1">11</span>, <span class="pl-c1">1</span>], axis; layers)

<span class="pl-c"><span class="pl-c">#</span> Write the polygons to JSON</span>
<span class="pl-c"><span class="pl-c">#</span> Have to convert here because GeometryBasics `isgeometry` has a bug, see PR #193</span>
polygons <span class="pl-k">=</span> GeoInterface<span class="pl-k">.</span><span class="pl-c1">convert</span>.(<span class="pl-c1">Ref</span>(GeoInterface), poly_canvas<span class="pl-k">.</span>geoms[])
mp <span class="pl-k">=</span> GeoInterface<span class="pl-k">.</span><span class="pl-c1">MultiPolygon</span>(polygons)
GeoJSON<span class="pl-k">.</span><span class="pl-c1">write</span>(<span class="pl-s"><span class="pl-pds">"</span>multipolygon.json<span class="pl-pds">"</span></span>, mp)

<span class="pl-c"><span class="pl-c">#</span> Reload and edit again</span>
polygons <span class="pl-k">=</span> <span class="pl-c1">collect</span>(GeoInterface<span class="pl-k">.</span><span class="pl-c1">getgeom</span>(GeoJSON<span class="pl-k">.</span><span class="pl-c1">read</span>(<span class="pl-c1">read</span>(<span class="pl-s"><span class="pl-pds">"</span>multipolygon.json<span class="pl-pds">"</span></span>))))
tyler <span class="pl-k">=</span> Tyler<span class="pl-k">.</span><span class="pl-c1">Map</span>(<span class="pl-c1">Extent</span>(Y<span class="pl-k">=</span>(<span class="pl-k">-</span><span class="pl-c1">27.0</span>, <span class="pl-c1">0.025</span>), X<span class="pl-k">=</span>(<span class="pl-c1">0.04</span>, <span class="pl-c1">38.0</span>)); provider)
fig <span class="pl-k">=</span> tyler<span class="pl-k">.</span>figure;
axis <span class="pl-k">=</span> tyler<span class="pl-k">.</span>axis;
poly_canvas <span class="pl-k">=</span> <span class="pl-c1">GeometryCanvas</span>(polygons; figure, axis)</pre></div>
<p dir="auto"><code>GeometryCanvas</code> keys:</p>
<p dir="auto">Left click to add, grab or drag points, right click to remove them.</p>
<p dir="auto">Shift + left click starts new lines and polygons.</p>
<p dir="auto"><code>PaintCanvas</code> keys:</p>
<p dir="auto">Left click draws with <code>fill_left</code>, right click draws with <code>fill_right</code>.</p>
</article></div>