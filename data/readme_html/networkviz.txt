<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-networkviz" class="anchor" aria-hidden="true" href="#networkviz"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>NetworkViz</h1>
<p>Linux, OSX : <a href="https://travis-ci.org/abhijithanilkumar/NetworkViz.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/626d251458acd4bc2f4467d58450877b0020f6de/68747470733a2f2f7472617669732d63692e6f72672f616268696a697468616e696c6b756d61722f4e6574776f726b56697a2e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/abhijithanilkumar/NetworkViz.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p>Windows : <a href="https://ci.appveyor.com/project/abhijithanilkumar/networkviz-jl/branch/master" rel="nofollow"><img src="https://camo.githubusercontent.com/c9c184347edf0783c858898ea23dbb26ba3863ca/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f63376b747130773038797132383167742f6272616e63682f6d61737465723f7376673d74727565" alt="Build status" data-canonical-src="https://ci.appveyor.com/api/projects/status/c7ktq0w08yq281gt/branch/master?svg=true" style="max-width:100%;"></a></p>
<p>A Julia module to render graphs in 3D using <a href="https://github.com/rohitvarkey/ThreeJS.jl">ThreeJS</a> tightly coupled with <a href="https://github.com/JuliaGraphs/LightGraphs.jl">LightGraphs</a>.</p>
<h2><a id="user-content-install" class="anchor" aria-hidden="true" href="#install"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Install</h2>
<p>In a Julia REPL, run:</p>
<div class="highlight highlight-source-julia"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>NetworkViz<span class="pl-pds">"</span></span>)</pre></div>
<h2><a id="user-content-graph-algorithms-used" class="anchor" aria-hidden="true" href="#graph-algorithms-used"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Graph Algorithms Used</h2>
<ul>
<li><a href="http://emr.cs.iit.edu/~reingold/force-directed.pdf" rel="nofollow">Force Directed Placement</a></li>
</ul>
<h2><a id="user-content-graph-primitives" class="anchor" aria-hidden="true" href="#graph-primitives"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Graph Primitives</h2>
<h3><a id="user-content-nodeproperty" class="anchor" aria-hidden="true" href="#nodeproperty"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>NodeProperty</h3>
<p>The <code>NodeProperty</code> type stores the properties of each node in the graph. It stores the following properties :</p>
<ul>
<li><code>color</code> : It is a <code>Colors</code> array that stores the colors of all the nodes in the graph.</li>
<li><code>size</code> : Size of the node. eg : <code>0.2</code>.</li>
<li><code>shape</code> : Shape of the node. Can be 0 or 1. <code>0 - Square</code>, <code>1 - Circle</code>.</li>
</ul>
<h3><a id="user-content-edgeproperty" class="anchor" aria-hidden="true" href="#edgeproperty"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>EdgeProperty</h3>
<p>The <code>EdgeProperty</code> type stores the properties of each edge in the graph. It stores the following properties :</p>
<ul>
<li><code>color</code> : It is a hex string that stores the color of the edges.</li>
<li><code>width</code> : Thickness of the edges. eg : <code>1.5</code>.</li>
</ul>
<h2><a id="user-content-visualizing-graphs" class="anchor" aria-hidden="true" href="#visualizing-graphs"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Visualizing Graphs</h2>
<p>The <code>drawGraph</code> function can be used to draw the graphs in 2D or 3D with nodes having different colors. It can accept <code>LightGraphs.Graph</code> and <code>LightGraphs.Digraph</code> types. <code>drawGraph</code> can be used to draw graphs from adjacency matrices also. The function accepts an additional kwargs <code>node::NodeProperty</code>, <code>edge::EdgeProperty</code>, and <code>z</code>. If <code>z=1</code>, it draws a 3D graph. If <code>z=0</code>, a 2D visualization of the graph is drawn. <code>node</code> and <code>edge</code> determines the properties of nodes and edges respectively.</p>
<p>Usage :</p>
<div class="highlight highlight-source-julia"><pre>g <span class="pl-k">=</span> <span class="pl-c1">CompleteGraph</span>(<span class="pl-c1">10</span>)
c <span class="pl-k">=</span> Color[<span class="pl-c1">parse</span>(Colorant,<span class="pl-s"><span class="pl-pds">"</span>#00004d<span class="pl-pds">"</span></span>) <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">nv</span>(g)]
n <span class="pl-k">=</span> <span class="pl-c1">NodeProperty</span>(c,<span class="pl-c1">0.2</span>,<span class="pl-c1">0</span>)
e <span class="pl-k">=</span> <span class="pl-c1">EdgeProperty</span>(<span class="pl-s"><span class="pl-pds">"</span>#ff3333<span class="pl-pds">"</span></span>,<span class="pl-c1">1</span>)
<span class="pl-c1">drawGraph</span>(g,node<span class="pl-k">=</span>n,edge<span class="pl-k">=</span>e,z<span class="pl-k">=</span><span class="pl-c1">1</span>) <span class="pl-c"><span class="pl-c">#</span>Draw using a Graph object (3D).</span>

am <span class="pl-k">=</span> <span class="pl-c1">full</span>(<span class="pl-c1">adjacency_matrix</span>(g))
<span class="pl-c1">drawGraph</span>(am,node<span class="pl-k">=</span>n,edge<span class="pl-k">=</span>e,z<span class="pl-k">=</span><span class="pl-c1">0</span>) <span class="pl-c"><span class="pl-c">#</span>Draw using an adjacency matrix (2D).</span>

dgraph <span class="pl-k">=</span> <span class="pl-c1">bfs_tree</span>(g,<span class="pl-c1">1</span>)
<span class="pl-c1">drawGraph</span>(dgraph,z<span class="pl-k">=</span><span class="pl-c1">1</span>) <span class="pl-c"><span class="pl-c">#</span>Draw a Digraph.</span></pre></div>
<h2><a id="user-content-utility-functions" class="anchor" aria-hidden="true" href="#utility-functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Utility Functions</h2>
<ul>
<li><code>addEdge(g::Graph,node1::Int,node2::Int,z=1)</code> - Add a new edge <code>node1-node2</code> and redraws the graph. <code>z</code> toggles 2D-3D conversion. Fails silently if an already existing node is added again.</li>
<li><code>removeEdge(g::Graph,node1::Int,node2::Int,z=1)</code> - Removes the edge <code>node1-node2</code> if it exists and redraws the graph. <code>z</code> toggles 2D-3D conversion.</li>
<li><code>addNode(g::Graph,z=1)</code> - Adds a new node to the graph. <code>z</code> toggles 2D-3D conversion.</li>
<li><code>removeNode(g::Graph,node::Int,z=1)</code> - Removes <code>node</code> if it exists and redraws the graph. <code>z</code> toggles 2D-3D conversion.</li>
</ul>
<h2><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Examples</h2>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span>Run this code in Escher</span>
<span class="pl-k">using</span> NetworkViz
<span class="pl-k">using</span> LightGraphs
<span class="pl-en">main</span>(window) <span class="pl-k">=</span> <span class="pl-k">begin</span>
  <span class="pl-c1">push!</span>(window<span class="pl-k">.</span>assets, <span class="pl-s"><span class="pl-pds">"</span>widgets<span class="pl-pds">"</span></span>)
  <span class="pl-c1">push!</span>(window<span class="pl-k">.</span>assets,(<span class="pl-s"><span class="pl-pds">"</span>ThreeJS<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>threejs<span class="pl-pds">"</span></span>))
  g <span class="pl-k">=</span> <span class="pl-c1">CompleteGraph</span>(<span class="pl-c1">10</span>)
  <span class="pl-c1">drawGraph</span>(g)
<span class="pl-k">end</span></pre></div>
<p>The above code produces the following output :</p>
<p><a target="_blank" rel="noopener noreferrer" href="https://raw.githubusercontent.com/abhijithanilkumar/NetworkViz.jl/master/examples/networkviz.gif"><img src="https://raw.githubusercontent.com/abhijithanilkumar/NetworkViz.jl/master/examples/networkviz.gif" alt="alt tag" style="max-width:100%;"></a></p>
<p><a href="https://github.com/abhijithanilkumar/NetworkViz.jl/blob/master/examples/codemirror.jl">Here</a> is another example with a code-mirror where functions can be typed in. Depending on the LightGraphs function used, 2D as well as 3D graphs are drawn. You can see the working demo <a href="https://www.youtube.com/watch?v=Ac3cneCRTZo" rel="nofollow">here</a>.</p>
<p>You can find many other examples in the <code>examples/</code> folder.</p>
<h2><a id="user-content-acknowledgement" class="anchor" aria-hidden="true" href="#acknowledgement"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Acknowledgement</h2>
<p><a href="https://github.com/IainNZ">IainNZ</a> for the original Spring-Embedder code. (Taken from <a href="https://github.com/IainNZ/GraphLayout.jl/blob/master/src/spring.jl">GraphLayout.jl</a>).</p>
</article></div>