<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-modelwrappers" class="anchor" aria-hidden="true" href="#modelwrappers"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>ModelWrappers</h1>
<p dir="auto"><a href="https://paschermayr.github.io/ModelWrappers.jl/" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Documentation, Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/paschermayr/ModelWrappers.jl/actions/workflows/CI.yml?query=branch%3Amain"><img src="https://github.com/paschermayr/ModelWrappers.jl/actions/workflows/CI.yml/badge.svg?branch=main" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/paschermayr/ModelWrappers.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/b478d975d1a7715a3f75bb35bbffb596cd4ac4b115e03f46da732bb6ba3b6656/68747470733a2f2f636f6465636f762e696f2f67682f706173636865726d6179722f4d6f64656c57726170706572732e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/paschermayr/ModelWrappers.jl/branch/main/graph/badge.svg" style="max-width: 100%;"></a>
<a href="https://github.com/SciML/ColPrac"><img src="https://camo.githubusercontent.com/a6c1efcb19a957860ecb25966a730260b03d6e05380d0c27992ee7f9e3b1feb3/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f436f6c507261632d436f6e7472696275746f72277325323047756964652d626c756576696f6c6574" alt="ColPrac: Contributor's Guide on Collaborative Practices for Community Packages" data-canonical-src="https://img.shields.io/badge/ColPrac-Contributor's%20Guide-blueviolet" style="max-width: 100%;"></a></p>
<p dir="auto">ModelWrappers.jl is a utility package that makes it easier to work with Model parameters stated as (nested) NamedTuples. It handles</p>
<ol dir="auto">
<li>flattening/unflattening model parameter fields of arbitrary dimensions.</li>
<li>constraining/unconstraining parameter (if a corresponding constraint is provided).</li>
<li>using Automatic Differentation for Model parameter given as a <code>NamedTuple</code> for a user specified function, i.e., a log-posterior distribution.</li>
</ol>

<h2 dir="auto"><a id="user-content-flatteningunflattening-model-parameter" class="anchor" aria-hidden="true" href="#flatteningunflattening-model-parameter"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Flattening/Unflattening Model Parameter</h2>
<p dir="auto">ModelWrappers.jl allows you to <code>flatten</code> a (nested) NamedTuple to a vector, and also returns an <code>unflatten</code> function to convert a vector back to a NamedTuple. By default, discrete parameter are not flattened and the default flatten type is <code>Float64</code>. One can construct flatten/unflatten via a <code>ReConstructor</code>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using ModelWrappers
myparameter = (a = Float32(1.), b = 2, c = [3., 4.], d = [5, 6])
reconstruct = ReConstructor(myparameter)
vals_vec = flatten(reconstruct, myparameter) #Vector{Float64} with 3 elements (1., 3., 4.)
vals = unflatten(reconstruct, vals_vec) #(a = 1.0f0, b = 2, c = [3.0, 4.0], d = [5, 6])"><pre><span class="pl-k">using</span> ModelWrappers
myparameter <span class="pl-k">=</span> (a <span class="pl-k">=</span> <span class="pl-c1">Float32</span>(<span class="pl-c1">1.</span>), b <span class="pl-k">=</span> <span class="pl-c1">2</span>, c <span class="pl-k">=</span> [<span class="pl-c1">3.</span>, <span class="pl-c1">4.</span>], d <span class="pl-k">=</span> [<span class="pl-c1">5</span>, <span class="pl-c1">6</span>])
reconstruct <span class="pl-k">=</span> <span class="pl-c1">ReConstructor</span>(myparameter)
vals_vec <span class="pl-k">=</span> <span class="pl-c1">flatten</span>(reconstruct, myparameter) <span class="pl-c"><span class="pl-c">#</span>Vector{Float64} with 3 elements (1., 3., 4.)</span>
vals <span class="pl-k">=</span> <span class="pl-c1">unflatten</span>(reconstruct, vals_vec) <span class="pl-c"><span class="pl-c">#</span>(a = 1.0f0, b = 2, c = [3.0, 4.0], d = [5, 6])</span></pre></div>
<p dir="auto">You can adjust these settings by using the <code>FlattenDefault</code> struct. For instance, the following settings will map <code>myparameter</code> to a <code>Float16</code> vector and also flatten the Integer values.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="flattendefault = FlattenDefault(; output = Float16, flattentype = FlattenAll())
reconstruct = ReConstructor(flattendefault, myparameter)
vals_vec = flatten(reconstruct, myparameter) #Vector{Float16} with 6 elements (1., 2., 3., 4., 5., 6.)
vals = unflatten(reconstruct, vals_vec) #(a = 1.0f0, b = 2, c = [3.0, 4.0], d = [5, 6])"><pre>flattendefault <span class="pl-k">=</span> <span class="pl-c1">FlattenDefault</span>(; output <span class="pl-k">=</span> Float16, flattentype <span class="pl-k">=</span> <span class="pl-c1">FlattenAll</span>())
reconstruct <span class="pl-k">=</span> <span class="pl-c1">ReConstructor</span>(flattendefault, myparameter)
vals_vec <span class="pl-k">=</span> <span class="pl-c1">flatten</span>(reconstruct, myparameter) <span class="pl-c"><span class="pl-c">#</span>Vector{Float16} with 6 elements (1., 2., 3., 4., 5., 6.)</span>
vals <span class="pl-k">=</span> <span class="pl-c1">unflatten</span>(reconstruct, vals_vec) <span class="pl-c"><span class="pl-c">#</span>(a = 1.0f0, b = 2, c = [3.0, 4.0], d = [5, 6])</span></pre></div>
<p dir="auto">Flatten/Unflatten can also be used for Automatic Differentiation. The functions <code>flattenAD</code> and <code>unflattenAD</code> return output based on the input type. Check the differences to the first two cases in this example:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="myparameter = (a = Float32(1.), b = 2, c = [3., 4.], d = [5, 6])
flattendefault = FlattenDefault(; output = Float32, flattentype = FlattenAll())
reconstruct = ReConstructor(flattendefault, myparameter)
vals_vec = flattenAD(reconstruct, myparameter)  #Vector{Float64} with 6 elements (1.00 2.00 3.00 4.00 5.00 6.00)
vals = unflattenAD(reconstruct, vals_vec) #(a = 1.0, b = 2.0, c = [3.0, 4.0], d = [5.0, 6.0])"><pre>myparameter <span class="pl-k">=</span> (a <span class="pl-k">=</span> <span class="pl-c1">Float32</span>(<span class="pl-c1">1.</span>), b <span class="pl-k">=</span> <span class="pl-c1">2</span>, c <span class="pl-k">=</span> [<span class="pl-c1">3.</span>, <span class="pl-c1">4.</span>], d <span class="pl-k">=</span> [<span class="pl-c1">5</span>, <span class="pl-c1">6</span>])
flattendefault <span class="pl-k">=</span> <span class="pl-c1">FlattenDefault</span>(; output <span class="pl-k">=</span> Float32, flattentype <span class="pl-k">=</span> <span class="pl-c1">FlattenAll</span>())
reconstruct <span class="pl-k">=</span> <span class="pl-c1">ReConstructor</span>(flattendefault, myparameter)
vals_vec <span class="pl-k">=</span> <span class="pl-c1">flattenAD</span>(reconstruct, myparameter)  <span class="pl-c"><span class="pl-c">#</span>Vector{Float64} with 6 elements (1.00 2.00 3.00 4.00 5.00 6.00)</span>
vals <span class="pl-k">=</span> <span class="pl-c1">unflattenAD</span>(reconstruct, vals_vec) <span class="pl-c"><span class="pl-c">#</span>(a = 1.0, b = 2.0, c = [3.0, 4.0], d = [5.0, 6.0])</span></pre></div>
<p dir="auto">A <code>ReConstructor</code> will assign buffers for <code>flatten</code> and <code>unflatten</code>, so most operations can be performed without allocations. Unflatten can usually be performed free of most allocations, even if arrays are involved:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using BenchmarkTools
myparameter2 = (a = Float32(1.), b = 2, c = [3., 4.], d = [5, 6], e = randn(1000), f = rand(1:2, 1000), g = randn(1000, 2))
reconstruct = ReConstructor(myparameter2)
vals_vec = flatten(reconstruct, myparameter2)
vals_vec #Vector{Float64} with 3003 element
@btime unflatten($reconstruct, $vals_vec)   # 419.095 ns (0 allocations: 0 bytes)
@btime flatten($reconstruct, $myparameter2) # 3.475 Î¼s (8 allocations: 39.83 KiB)"><pre><span class="pl-k">using</span> BenchmarkTools
myparameter2 <span class="pl-k">=</span> (a <span class="pl-k">=</span> <span class="pl-c1">Float32</span>(<span class="pl-c1">1.</span>), b <span class="pl-k">=</span> <span class="pl-c1">2</span>, c <span class="pl-k">=</span> [<span class="pl-c1">3.</span>, <span class="pl-c1">4.</span>], d <span class="pl-k">=</span> [<span class="pl-c1">5</span>, <span class="pl-c1">6</span>], e <span class="pl-k">=</span> <span class="pl-c1">randn</span>(<span class="pl-c1">1000</span>), f <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span>, <span class="pl-c1">1000</span>), g <span class="pl-k">=</span> <span class="pl-c1">randn</span>(<span class="pl-c1">1000</span>, <span class="pl-c1">2</span>))
reconstruct <span class="pl-k">=</span> <span class="pl-c1">ReConstructor</span>(myparameter2)
vals_vec <span class="pl-k">=</span> <span class="pl-c1">flatten</span>(reconstruct, myparameter2)
vals_vec <span class="pl-c"><span class="pl-c">#</span>Vector{Float64} with 3003 element</span>
<span class="pl-c1">@btime</span> <span class="pl-c1">unflatten</span>(<span class="pl-k">$</span>reconstruct, <span class="pl-k">$</span>vals_vec)   <span class="pl-c"><span class="pl-c">#</span> 419.095 ns (0 allocations: 0 bytes)</span>
<span class="pl-c1">@btime</span> <span class="pl-c1">flatten</span>(<span class="pl-k">$</span>reconstruct, <span class="pl-k">$</span>myparameter2) <span class="pl-c"><span class="pl-c">#</span> 3.475 Î¼s (8 allocations: 39.83 KiB)</span></pre></div>
<p dir="auto">Note that it is possible to nest NamedTuples, and use arbitrary Array-of-Arrays structures for your parameter, but this will often come with a performance penalty:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="myparameter3 = (a = myparameter, b = (c = (d = myparameter2, ), ), e = [rand(10), rand(15), rand(20)])
reconstruct = ReConstructor(myparameter3)
vals_vec = flatten(reconstruct, myparameter3)
vals_vec #Vector{Float64} with 3051 element
@btime unflatten($reconstruct, $vals_vec)   # 1.220 Î¼s (32 allocations: 3.19 KiB)
@btime flatten($reconstruct, $myparameter3) # 7.275 Î¼s (19 allocations: 88.17 KiB)"><pre>myparameter3 <span class="pl-k">=</span> (a <span class="pl-k">=</span> myparameter, b <span class="pl-k">=</span> (c <span class="pl-k">=</span> (d <span class="pl-k">=</span> myparameter2, ), ), e <span class="pl-k">=</span> [<span class="pl-c1">rand</span>(<span class="pl-c1">10</span>), <span class="pl-c1">rand</span>(<span class="pl-c1">15</span>), <span class="pl-c1">rand</span>(<span class="pl-c1">20</span>)])
reconstruct <span class="pl-k">=</span> <span class="pl-c1">ReConstructor</span>(myparameter3)
vals_vec <span class="pl-k">=</span> <span class="pl-c1">flatten</span>(reconstruct, myparameter3)
vals_vec <span class="pl-c"><span class="pl-c">#</span>Vector{Float64} with 3051 element</span>
<span class="pl-c1">@btime</span> <span class="pl-c1">unflatten</span>(<span class="pl-k">$</span>reconstruct, <span class="pl-k">$</span>vals_vec)   <span class="pl-c"><span class="pl-c">#</span> 1.220 Î¼s (32 allocations: 3.19 KiB)</span>
<span class="pl-c1">@btime</span> <span class="pl-c1">flatten</span>(<span class="pl-k">$</span>reconstruct, <span class="pl-k">$</span>myparameter3) <span class="pl-c"><span class="pl-c">#</span> 7.275 Î¼s (19 allocations: 88.17 KiB)</span></pre></div>
<h2 dir="auto"><a id="user-content-constrainingunconstraining-model-parameter" class="anchor" aria-hidden="true" href="#constrainingunconstraining-model-parameter"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Constraining/Unconstraining Model Parameter</h2>
<p dir="auto">Consider now the following problem: you have a model that consists of various (unknown) parameters and you want to estimate these parameter with a custom algorithm. Many common algorithms not only require you to take a vector as function argument, but also require you to know in which space your parameter operate.</p>
<p dir="auto">If a corresponding prior distribution is provided, ModelWrappers.jl allows you to efficiently constrain and unconstrain your parameter tuple. To do so, one can initiate a <code>Param</code> struct, which is a temporary constructor that checks if the package can handle the (value, constraint) combination. The initial <code>NamedTuple</code> can then be wrapped in a <code>ModelWrapper</code> struct.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Distributions
myparameter4 = (Î¼ = Param(Normal(), 0.0,), Ï = Param(Gamma(), 1.0, ))
mymodel = ModelWrapper(myparameter4)"><pre><span class="pl-k">using</span> Distributions
myparameter4 <span class="pl-k">=</span> (Î¼ <span class="pl-k">=</span> <span class="pl-c1">Param</span>(<span class="pl-c1">Normal</span>(), <span class="pl-c1">0.0</span>,), Ï <span class="pl-k">=</span> <span class="pl-c1">Param</span>(<span class="pl-c1">Gamma</span>(), <span class="pl-c1">1.0</span>, ))
mymodel <span class="pl-k">=</span> <span class="pl-c1">ModelWrapper</span>(myparameter4)</pre></div>
<p dir="auto">Note that providing a distribution from 'Distributions.jl' in <code>Param</code> will just assign a bijector from 'Bijectors.jl' to the parameter. Other valid constraint options for a <code>Param</code> struct at the moment include</p>
<ol dir="auto">
<li>a bijector from <a href="https://github.com/TuringLang/Bijectors.jl">Bijectors.jl</a>,</li>
<li>all distributions that work with <a href="https://github.com/TuringLang/Bijectors.jl">Bijectors.jl</a>,</li>
<li>a <code>Fixed</code> struct, which keeps <code>val</code> fixed and excludes it from flatten/unflatten,</li>
<li>an <code>Unconstrained</code> struct, which flattens <code>val</code> without taking into account any constraint,</li>
<li>and a <code>Constrained</code> struct, which flattens <code>val</code> without taking into account any constraint, but will take into account the constraints when constraining values.</li>
<li>some constraint that may be able to map <code>val</code> into a lower dimension. This includes a <code>Simplex</code>, <code>CovarianceMatrix</code> and <code>CorrelationMatrix</code> constraint.</li>
</ol>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="
using Bijectors
myparameter_constraints = (
    Î¼ = Param(Normal(), 0.0,),
    Ï = Param(Bijection(bijector(Gamma(2,2))), 1.0,),

    buffer1 = Param(Fixed(), zeros(Int64, 2,3,4), ),
    buffer2 = Param(Unconstrained(), [zeros(10), zeros(20)], ),
    buffer3 = Param(Constrained(1., 5.), 3., ),

    #Mapped to lower dimensions
    p = Param(Simplex(3), [.2, .3, .5]),
    Ï = Param(CorrelationMatrix(), [1. .3 ; .3 1.]),
    Î£ = Param(CovarianceMatrix(), [5. .4 ; .4 6.]),
)
model_constraints = ModelWrapper(myparameter_constraints)
flatten(model_constraints) #Vector{Float64} with 39 elements"><pre><span class="pl-k">using</span> Bijectors
myparameter_constraints <span class="pl-k">=</span> (
    Î¼ <span class="pl-k">=</span> <span class="pl-c1">Param</span>(<span class="pl-c1">Normal</span>(), <span class="pl-c1">0.0</span>,),
    Ï <span class="pl-k">=</span> <span class="pl-c1">Param</span>(<span class="pl-c1">Bijection</span>(<span class="pl-c1">bijector</span>(<span class="pl-c1">Gamma</span>(<span class="pl-c1">2</span>,<span class="pl-c1">2</span>))), <span class="pl-c1">1.0</span>,),

    buffer1 <span class="pl-k">=</span> <span class="pl-c1">Param</span>(<span class="pl-c1">Fixed</span>(), <span class="pl-c1">zeros</span>(Int64, <span class="pl-c1">2</span>,<span class="pl-c1">3</span>,<span class="pl-c1">4</span>), ),
    buffer2 <span class="pl-k">=</span> <span class="pl-c1">Param</span>(<span class="pl-c1">Unconstrained</span>(), [<span class="pl-c1">zeros</span>(<span class="pl-c1">10</span>), <span class="pl-c1">zeros</span>(<span class="pl-c1">20</span>)], ),
    buffer3 <span class="pl-k">=</span> <span class="pl-c1">Param</span>(<span class="pl-c1">Constrained</span>(<span class="pl-c1">1.</span>, <span class="pl-c1">5.</span>), <span class="pl-c1">3.</span>, ),

    <span class="pl-c"><span class="pl-c">#</span>Mapped to lower dimensions</span>
    p <span class="pl-k">=</span> <span class="pl-c1">Param</span>(<span class="pl-c1">Simplex</span>(<span class="pl-c1">3</span>), [.<span class="pl-c1">2</span>, .<span class="pl-c1">3</span>, .<span class="pl-c1">5</span>]),
    Ï <span class="pl-k">=</span> <span class="pl-c1">Param</span>(<span class="pl-c1">CorrelationMatrix</span>(), [<span class="pl-c1">1.</span> .<span class="pl-c1">3</span> ; .<span class="pl-c1">3</span> <span class="pl-c1">1.</span>]),
    Î£ <span class="pl-k">=</span> <span class="pl-c1">Param</span>(<span class="pl-c1">CovarianceMatrix</span>(), [<span class="pl-c1">5.</span> .<span class="pl-c1">4</span> ; .<span class="pl-c1">4</span> <span class="pl-c1">6.</span>]),
)
model_constraints <span class="pl-k">=</span> <span class="pl-c1">ModelWrapper</span>(myparameter_constraints)
<span class="pl-c1">flatten</span>(model_constraints) <span class="pl-c"><span class="pl-c">#</span>Vector{Float64} with 39 elements</span></pre></div>
<p dir="auto">A <code>ModelWrapper</code> struct is mutable, and contains the values of your <code>NamedTuple</code> field. Values can be flattened or unconstrained, and may be updated by new values/samples. Also, when a <code>ModelWrapper</code> struct is created, an unflatten function for strict and variable type conversion is stored. To show this, we will a create <code>ModelWrapper</code> struct, flatten its values, and update the struct with new values:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Distributions, Random
_rng = MersenneTwister(2)
myparameter4 = (Î¼ = Param(Normal(), 0.0, ), Ï = Param(Gamma(), 1.0, ))
mymodel = ModelWrapper(myparameter4)
#Flatten/Unconstrain Model parameter
vals_vec = flatten(mymodel) #Vector{Float64} with 2 elements
unconstrain(mymodel) #(Î¼ = 0.0, Ï = 0.0)
unconstrain_flatten(mymodel) #Vector{Float64} with 2 elements

#Unflatten/Constrain proposed parameter from unconstrained space
Î¸_proposed = randn(_rng, length(vals_vec)) #Vector{Float64} with 2 elements
ModelWrappers.unflatten(mymodel, Î¸_proposed) #(Î¼ = 0.7396206598864331, Ï = -0.7445071021408705)
unflatten_constrain(mymodel, Î¸_proposed) #(Î¼ = 0.7396206598864331, Ï = 0.4749683531374296)

#Replacing current model parameter with proposed parameter
mymodel.val #(Î¼ = 0.0, Ï = 1.0)
unflatten_constrain!(mymodel, Î¸_proposed)
mymodel.val #(Î¼ = 0.7396206598864331, Ï = 0.4749683531374296)"><pre><span class="pl-k">using</span> Distributions, Random
_rng <span class="pl-k">=</span> <span class="pl-c1">MersenneTwister</span>(<span class="pl-c1">2</span>)
myparameter4 <span class="pl-k">=</span> (Î¼ <span class="pl-k">=</span> <span class="pl-c1">Param</span>(<span class="pl-c1">Normal</span>(), <span class="pl-c1">0.0</span>, ), Ï <span class="pl-k">=</span> <span class="pl-c1">Param</span>(<span class="pl-c1">Gamma</span>(), <span class="pl-c1">1.0</span>, ))
mymodel <span class="pl-k">=</span> <span class="pl-c1">ModelWrapper</span>(myparameter4)
<span class="pl-c"><span class="pl-c">#</span>Flatten/Unconstrain Model parameter</span>
vals_vec <span class="pl-k">=</span> <span class="pl-c1">flatten</span>(mymodel) <span class="pl-c"><span class="pl-c">#</span>Vector{Float64} with 2 elements</span>
<span class="pl-c1">unconstrain</span>(mymodel) <span class="pl-c"><span class="pl-c">#</span>(Î¼ = 0.0, Ï = 0.0)</span>
<span class="pl-c1">unconstrain_flatten</span>(mymodel) <span class="pl-c"><span class="pl-c">#</span>Vector{Float64} with 2 elements</span>

<span class="pl-c"><span class="pl-c">#</span>Unflatten/Constrain proposed parameter from unconstrained space</span>
Î¸_proposed <span class="pl-k">=</span> <span class="pl-c1">randn</span>(_rng, <span class="pl-c1">length</span>(vals_vec)) <span class="pl-c"><span class="pl-c">#</span>Vector{Float64} with 2 elements</span>
ModelWrappers<span class="pl-k">.</span><span class="pl-c1">unflatten</span>(mymodel, Î¸_proposed) <span class="pl-c"><span class="pl-c">#</span>(Î¼ = 0.7396206598864331, Ï = -0.7445071021408705)</span>
<span class="pl-c1">unflatten_constrain</span>(mymodel, Î¸_proposed) <span class="pl-c"><span class="pl-c">#</span>(Î¼ = 0.7396206598864331, Ï = 0.4749683531374296)</span>

<span class="pl-c"><span class="pl-c">#</span>Replacing current model parameter with proposed parameter</span>
mymodel<span class="pl-k">.</span>val <span class="pl-c"><span class="pl-c">#</span>(Î¼ = 0.0, Ï = 1.0)</span>
<span class="pl-c1">unflatten_constrain!</span>(mymodel, Î¸_proposed)
mymodel<span class="pl-k">.</span>val <span class="pl-c"><span class="pl-c">#</span>(Î¼ = 0.7396206598864331, Ï = 0.4749683531374296)</span></pre></div>
<h2 dir="auto"><a id="user-content-using-automatic-differentiation-with-a-modelwrapper" class="anchor" aria-hidden="true" href="#using-automatic-differentiation-with-a-modelwrapper"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Using Automatic Differentiation with a <code>ModelWrapper</code></h2>
<p dir="auto"><code>ModelWrappers.jl</code> supports the usage of various Automatic Differentiation backends by providing an immutable <code>Objective</code> struct that contains your <code>ModelWrapper</code>, data, and all parameter that you want to get derivative information from. <code>Objective</code> is a functor, and you can manually add a target function wrt your original parameter <code>NamedTuple</code> that should be included in the AD call, i.e., a log-posterior density.</p>
<p dir="auto">Let us work with the model from before. We first sample data, create the objective and then define a function that we want to use AD for:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using UnPack
#Create Model and data
myparameter4 = (Î¼ = Param(Normal(), 0.0, ), Ï = Param(Gamma(), 1.0, ))
mymodel = ModelWrapper(myparameter4)
data = randn(1000)

#Create objective for both Î¼ and Ï and define a target function for it
myobjective = Objective(mymodel, data, (:Î¼, :Ï))
function (objective::Objective{&lt;:ModelWrapper{BaseModel}})(Î¸::NamedTuple)
	@unpack data = objective
	lprior = Distributions.logpdf(Distributions.Normal(),Î¸.Î¼) + Distributions.logpdf(Distributions.Exponential(), Î¸.Ï)
    	llik = sum(Distributions.logpdf( Distributions.Normal(Î¸.Î¼, Î¸.Ï), data[iter] ) for iter in eachindex(data))
	return lprior + llik
end"><pre><span class="pl-k">using</span> UnPack
<span class="pl-c"><span class="pl-c">#</span>Create Model and data</span>
myparameter4 <span class="pl-k">=</span> (Î¼ <span class="pl-k">=</span> <span class="pl-c1">Param</span>(<span class="pl-c1">Normal</span>(), <span class="pl-c1">0.0</span>, ), Ï <span class="pl-k">=</span> <span class="pl-c1">Param</span>(<span class="pl-c1">Gamma</span>(), <span class="pl-c1">1.0</span>, ))
mymodel <span class="pl-k">=</span> <span class="pl-c1">ModelWrapper</span>(myparameter4)
data <span class="pl-k">=</span> <span class="pl-c1">randn</span>(<span class="pl-c1">1000</span>)

<span class="pl-c"><span class="pl-c">#</span>Create objective for both Î¼ and Ï and define a target function for it</span>
myobjective <span class="pl-k">=</span> <span class="pl-c1">Objective</span>(mymodel, data, (<span class="pl-c1">:Î¼</span>, <span class="pl-c1">:Ï</span>))
<span class="pl-k">function</span> (objective<span class="pl-k">::</span><span class="pl-c1">Objective{&lt;:ModelWrapper{BaseModel}}</span>)(Î¸<span class="pl-k">::</span><span class="pl-c1">NamedTuple</span>)
	<span class="pl-c1">@unpack</span> data <span class="pl-k">=</span> objective
	lprior <span class="pl-k">=</span> Distributions<span class="pl-k">.</span><span class="pl-c1">logpdf</span>(Distributions<span class="pl-k">.</span><span class="pl-c1">Normal</span>(),Î¸<span class="pl-k">.</span>Î¼) <span class="pl-k">+</span> Distributions<span class="pl-k">.</span><span class="pl-c1">logpdf</span>(Distributions<span class="pl-k">.</span><span class="pl-c1">Exponential</span>(), Î¸<span class="pl-k">.</span>Ï)
    	llik <span class="pl-k">=</span> <span class="pl-c1">sum</span>(Distributions<span class="pl-k">.</span><span class="pl-c1">logpdf</span>( Distributions<span class="pl-k">.</span><span class="pl-c1">Normal</span>(Î¸<span class="pl-k">.</span>Î¼, Î¸<span class="pl-k">.</span>Ï), data[iter] ) <span class="pl-k">for</span> iter <span class="pl-k">in</span> <span class="pl-c1">eachindex</span>(data))
	<span class="pl-k">return</span> lprior <span class="pl-k">+</span> llik
<span class="pl-k">end</span></pre></div>
<p dir="auto"><code>myobjective</code> can take a vector from an unconstrained space as input, constrains and converts the argument to a <code>NamedTuple</code>, checks if all conversions are finite, and adds all eventual Jacobian adjustments from the transformations before your target function is evaluated. This can usually be done efficiently:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="#Sample new parameter, and evaluate target function wrt to Vector (not NamedTuple)
Î¸_proposed = randn(_rng, length(vals_vec))
myobjective(Î¸_proposed)

#Functor call wrt NamedTuple parameter
@btime $myobjective($mymodel.val) #6.420 Î¼s (0 allocations: 0 bytes)
#Functor call wrt proposed Parameter Vector
@btime $myobjective($Î¸_proposed) #6.480 Î¼s (0 allocations: 0 bytes)"><pre><span class="pl-c"><span class="pl-c">#</span>Sample new parameter, and evaluate target function wrt to Vector (not NamedTuple)</span>
Î¸_proposed <span class="pl-k">=</span> <span class="pl-c1">randn</span>(_rng, <span class="pl-c1">length</span>(vals_vec))
<span class="pl-c1">myobjective</span>(Î¸_proposed)

<span class="pl-c"><span class="pl-c">#</span>Functor call wrt NamedTuple parameter</span>
<span class="pl-c1">@btime</span> <span class="pl-k">$</span><span class="pl-c1">myobjective</span>(<span class="pl-k">$</span>mymodel<span class="pl-k">.</span>val) <span class="pl-c"><span class="pl-c">#</span>6.420 Î¼s (0 allocations: 0 bytes)</span>
<span class="pl-c"><span class="pl-c">#</span>Functor call wrt proposed Parameter Vector</span>
<span class="pl-c1">@btime</span> <span class="pl-k">$</span><span class="pl-c1">myobjective</span>(<span class="pl-k">$</span>Î¸_proposed) <span class="pl-c"><span class="pl-c">#</span>6.480 Î¼s (0 allocations: 0 bytes)</span></pre></div>
<p dir="auto"><code>Objective</code> can also be called from various AD frameworks:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using ForwardDiff, ReverseDiff, Zygote
grad_fwd = ForwardDiff.gradient(myobjective, Î¸_proposed)
grad_rvd = ReverseDiff.gradient(myobjective, Î¸_proposed)
grad_zyg = Zygote.gradient(myobjective, Î¸_proposed)
all(grad_fwd .â grad_rvd .â grad_zyg[1]) #true"><pre><span class="pl-k">using</span> ForwardDiff, ReverseDiff, Zygote
grad_fwd <span class="pl-k">=</span> ForwardDiff<span class="pl-k">.</span><span class="pl-c1">gradient</span>(myobjective, Î¸_proposed)
grad_rvd <span class="pl-k">=</span> ReverseDiff<span class="pl-k">.</span><span class="pl-c1">gradient</span>(myobjective, Î¸_proposed)
grad_zyg <span class="pl-k">=</span> Zygote<span class="pl-k">.</span><span class="pl-c1">gradient</span>(myobjective, Î¸_proposed)
<span class="pl-c1">all</span>(grad_fwd <span class="pl-k">.â</span> grad_rvd <span class="pl-k">.â</span> grad_zyg[<span class="pl-c1">1</span>]) <span class="pl-c"><span class="pl-c">#</span>true</span></pre></div>

<h2 dir="auto"><a id="user-content-going-forward" class="anchor" aria-hidden="true" href="#going-forward"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Going Forward</h2>
<p dir="auto">This package is still highly experimental - suggestions and comments are always welcome! New constraints should be reasonable simple to add, check out <code>src/Core/constrain/constraints/constrained.jl</code> as an example with guidance in the comments.</p>

</article></div>