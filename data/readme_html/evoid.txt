<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-evoidjl" class="anchor" aria-hidden="true" href="#evoidjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>EvoId.jl</h1>


<p dir="auto"><a href="https://vboussange.github.io/EvoId.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a></p>

<div align="center" dir="auto"><a target="_blank" rel="noopener noreferrer" href="docs/src/assets/gif_evoid.gif"><img src="docs/src/assets/gif_evoid.gif" width="400" data-animated-image="" style="max-width: 100%;"></a> </div>
<p dir="auto">EvoId.jl (for <strong>Evo</strong>lutionary <strong>I</strong>n<strong>d</strong>ividual-based models) is a package aimed at simulating the eco-evolutionary dynamics of a population in a multidimensional space, at the individual level. The dynamics is specified under the framework of <a href="https://arxiv.org/abs/1506.04165" rel="nofollow">stochastic models for structured populations</a>.</p>
<p dir="auto">Individuals are characterised by <strong>a set of traits</strong> in some <strong>combination of evolutionary spaces</strong>. An evolutionary space can represent for example a geographical landscape, a trait space, or genetic structure. Spaces can be of any dimensions, discrete or continuous, bounded or unbounded. They can equally consist of graphs. Individuals give birth at a rate given by the birth function <code>b</code>, and die at a rate given by the death function <code>d</code>. When an individual give birth, its offspring can move on the underlying evolutionary spaces. The movement can capture whether migration or mutation processes, and is characterised by a probability <code>m</code> and movement range <code>D</code>.</p>
<p dir="auto">The user can provide <strong>any birth and death functions</strong>, which should depend on the system state and the individuals' trait. Together with the <strong>movement rate and movement range</strong>, this defines the dynamics of the system.</p>
<p dir="auto">EvoId.jl provides a <strong>numerical laboratory</strong> for eco-evolutionary dynamics, supplying</p>
<ul dir="auto">
<li>flexible types for <strong>individuals</strong>, which can
<ul dir="auto">
<li>evolve over any combination of space,</li>
<li><a href="https://vboussange.github.io/EvoId.jl/dev/examples/gradient.html#lineages" rel="nofollow">store ancestors trait</a>,</li>
</ul>
</li>
<li>flexible types for <strong>evolutionary spaces</strong>, that can consist of multidimensional <strong>discrete or continuous domains</strong>, as well as <strong>graphs</strong>,</li>
<li>the possibility to use <strong>callback functions</strong> to save the state of the system at any time step</li>
<li>several <strong>algorithms</strong> for the simulations (<a href="https://en.wikipedia.org/wiki/Gillespie_algorithm" rel="nofollow">Gillespie</a>,<a href="https://en.wikipedia.org/wiki/Moran_process" rel="nofollow">Wright-Fisher</a>, etc...),</li>
<li><strong>utility functions</strong> to analyse simulation results.</li>
</ul>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">Open Julia in your favorite REPL and type the following</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Pkg;
Pkg.add(&quot;https://github.com/vboussange/EvoId.jl&quot;)"><pre><span class="pl-k">using</span> Pkg;
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>https://github.com/vboussange/EvoId.jl<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">This will download latest version from git repo and download all dependencies.</p>
<h2 dir="auto"><a id="user-content-getting-started" class="anchor" aria-hidden="true" href="#getting-started"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Getting started</h2>
<p dir="auto">Check out the tutorial prodived below. You can also look at the <code>example</code> folder, or dive into the <a href="https://vboussange.github.io/EvoId.jl/dev" rel="nofollow">documentation</a> if you want to use the advanced features of EvoId.jl.</p>
<h2 dir="auto"><a id="user-content-related-papers" class="anchor" aria-hidden="true" href="#related-papers"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Related papers</h2>
<ul dir="auto">
<li><a href="https://www.biorxiv.org/content/10.1101/2021.07.06.451404v2" rel="nofollow">Topology and habitat assortativity drive neutral and adaptive diversification in spatial graphs</a>, Boussange et al. 2021.</li>
</ul>
<h2 dir="auto"><a id="user-content-similar-packages" class="anchor" aria-hidden="true" href="#similar-packages"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Similar packages</h2>
<p dir="auto"><a href="https://juliadynamics.github.io/Agents.jl/" rel="nofollow">Agents.jl</a> is a library oriented towards general ABM modelling, and thus is not as easy to deploy as EvoId.jl for simulating stochastic models of structured populations.</p>
<h2 dir="auto"><a id="user-content-contributing" class="anchor" aria-hidden="true" href="#contributing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Contributing</h2>
<p dir="auto">Please feel free to contact me! :)</p>
<hr>
<h2 dir="auto"><a id="user-content-tutorial" class="anchor" aria-hidden="true" href="#tutorial"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Tutorial</h2>
<p dir="auto">We provide here a tutorial that sums up the 5 steps necessary to launch a simulation. For the sake of the tutorial, we propose to model a population that is structured over the vertices of a graph and characterised by a trait under selection.</p>
<h3 dir="auto"><a id="user-content-copy-paste-code" class="anchor" aria-hidden="true" href="#copy-paste-code"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Copy paste code</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using EvoId
using LightGraphs
using Plots

nodes = 7
g = star_graph(nodes)
landscape = GraphSpace(g) # spatial space
θ = [rand([-0.5, 0.5]) for i in 1:nodes] # optimal trait values
# X[1][] is the geographical position
# X[2][] corresponds to the adaptive traits
traitspace = RealSpace(1) # phenotypic space
evolspace = (landscape, traitspace) # space over which individuals are structured

const K = 100. # carrying capacity
b(X,t) = 1. - 0.5 * (θ[Int(X[1][])] - X[2][])^2 # birth function
d(X,Y,t) = (X[1] ≈ Y[1]) ? 1. / K : 0. # death function
alg = Gillepsie() # update rule
NMax = 2000 # maximum number of individuals
D = [nothing, 5e-2] # dispersion coefficient
mu = [1e-1, 1e-1] # mutation / migration rate


myagents = [Agent(evolspace, [rand(1:nodes,1), randn(1) * D[2]]) for i in 1:K] # array containing the founder individuals
# random position on the graph
# random position on the trait space centered around 0
w0 = World(myagents, evolspace, D, mu, NMax, 0.) # the initial world, defined at time 0.

tend = 500. # time horizon
t_saving_cb = collect(range(0., tend, length=200)) # time step where callback function is called
cb(w) = Dict(&quot;N&quot; =&gt; length(w)) # callback function

println(&quot;Running simulation with callback function&quot;)
@time sim = run!(w0, alg, tend, b, d, cb=cb, t_saving_cb = t_saving_cb)
Plots.plot(sim.tspan, sim[&quot;N&quot;])

println(&quot;Running simulation with `dt_saving`&quot;)
myagents = [Agent(evolspace, [rand(1:nodes,1),randn(1) * D[2]]) for i in 1:K]
w0 = World(myagents, evolspace, D, mu, NMax, 0.)
@time sim = run!(w0, Gillepsie(), tend, b, d, dt_saving = 2.0)
# Plots.plot(sim, trait=2)"><pre><span class="pl-k">using</span> EvoId
<span class="pl-k">using</span> LightGraphs
<span class="pl-k">using</span> Plots

nodes <span class="pl-k">=</span> <span class="pl-c1">7</span>
g <span class="pl-k">=</span> <span class="pl-c1">star_graph</span>(nodes)
landscape <span class="pl-k">=</span> <span class="pl-c1">GraphSpace</span>(g) <span class="pl-c"><span class="pl-c">#</span> spatial space</span>
θ <span class="pl-k">=</span> [<span class="pl-c1">rand</span>([<span class="pl-k">-</span><span class="pl-c1">0.5</span>, <span class="pl-c1">0.5</span>]) <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span>nodes] <span class="pl-c"><span class="pl-c">#</span> optimal trait values</span>
<span class="pl-c"><span class="pl-c">#</span> X[1][] is the geographical position</span>
<span class="pl-c"><span class="pl-c">#</span> X[2][] corresponds to the adaptive traits</span>
traitspace <span class="pl-k">=</span> <span class="pl-c1">RealSpace</span>(<span class="pl-c1">1</span>) <span class="pl-c"><span class="pl-c">#</span> phenotypic space</span>
evolspace <span class="pl-k">=</span> (landscape, traitspace) <span class="pl-c"><span class="pl-c">#</span> space over which individuals are structured</span>

<span class="pl-k">const</span> K <span class="pl-k">=</span> <span class="pl-c1">100.</span> <span class="pl-c"><span class="pl-c">#</span> carrying capacity</span>
<span class="pl-en">b</span>(X,t) <span class="pl-k">=</span> <span class="pl-c1">1.</span> <span class="pl-k">-</span> <span class="pl-c1">0.5</span> <span class="pl-k">*</span> (θ[<span class="pl-c1">Int</span>(X[<span class="pl-c1">1</span>][])] <span class="pl-k">-</span> X[<span class="pl-c1">2</span>][])<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-c"><span class="pl-c">#</span> birth function</span>
<span class="pl-en">d</span>(X,Y,t) <span class="pl-k">=</span> (X[<span class="pl-c1">1</span>] <span class="pl-k">≈</span> Y[<span class="pl-c1">1</span>]) <span class="pl-k">?</span> <span class="pl-c1">1.</span> <span class="pl-k">/</span> K <span class="pl-k">:</span> <span class="pl-c1">0.</span> <span class="pl-c"><span class="pl-c">#</span> death function</span>
alg <span class="pl-k">=</span> <span class="pl-c1">Gillepsie</span>() <span class="pl-c"><span class="pl-c">#</span> update rule</span>
NMax <span class="pl-k">=</span> <span class="pl-c1">2000</span> <span class="pl-c"><span class="pl-c">#</span> maximum number of individuals</span>
D <span class="pl-k">=</span> [<span class="pl-c1">nothing</span>, <span class="pl-c1">5e-2</span>] <span class="pl-c"><span class="pl-c">#</span> dispersion coefficient</span>
mu <span class="pl-k">=</span> [<span class="pl-c1">1e-1</span>, <span class="pl-c1">1e-1</span>] <span class="pl-c"><span class="pl-c">#</span> mutation / migration rate</span>


myagents <span class="pl-k">=</span> [<span class="pl-c1">Agent</span>(evolspace, [<span class="pl-c1">rand</span>(<span class="pl-c1">1</span><span class="pl-k">:</span>nodes,<span class="pl-c1">1</span>), <span class="pl-c1">randn</span>(<span class="pl-c1">1</span>) <span class="pl-k">*</span> D[<span class="pl-c1">2</span>]]) <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span>K] <span class="pl-c"><span class="pl-c">#</span> array containing the founder individuals</span>
<span class="pl-c"><span class="pl-c">#</span> random position on the graph</span>
<span class="pl-c"><span class="pl-c">#</span> random position on the trait space centered around 0</span>
w0 <span class="pl-k">=</span> <span class="pl-c1">World</span>(myagents, evolspace, D, mu, NMax, <span class="pl-c1">0.</span>) <span class="pl-c"><span class="pl-c">#</span> the initial world, defined at time 0.</span>

tend <span class="pl-k">=</span> <span class="pl-c1">500.</span> <span class="pl-c"><span class="pl-c">#</span> time horizon</span>
t_saving_cb <span class="pl-k">=</span> <span class="pl-c1">collect</span>(<span class="pl-c1">range</span>(<span class="pl-c1">0.</span>, tend, length<span class="pl-k">=</span><span class="pl-c1">200</span>)) <span class="pl-c"><span class="pl-c">#</span> time step where callback function is called</span>
<span class="pl-en">cb</span>(w) <span class="pl-k">=</span> <span class="pl-c1">Dict</span>(<span class="pl-s"><span class="pl-pds">"</span>N<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">length</span>(w)) <span class="pl-c"><span class="pl-c">#</span> callback function</span>

<span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>Running simulation with callback function<span class="pl-pds">"</span></span>)
<span class="pl-c1">@time</span> sim <span class="pl-k">=</span> <span class="pl-c1">run!</span>(w0, alg, tend, b, d, cb<span class="pl-k">=</span>cb, t_saving_cb <span class="pl-k">=</span> t_saving_cb)
Plots<span class="pl-k">.</span><span class="pl-c1">plot</span>(sim<span class="pl-k">.</span>tspan, sim[<span class="pl-s"><span class="pl-pds">"</span>N<span class="pl-pds">"</span></span>])

<span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>Running simulation with `dt_saving`<span class="pl-pds">"</span></span>)
myagents <span class="pl-k">=</span> [<span class="pl-c1">Agent</span>(evolspace, [<span class="pl-c1">rand</span>(<span class="pl-c1">1</span><span class="pl-k">:</span>nodes,<span class="pl-c1">1</span>),<span class="pl-c1">randn</span>(<span class="pl-c1">1</span>) <span class="pl-k">*</span> D[<span class="pl-c1">2</span>]]) <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span>K]
w0 <span class="pl-k">=</span> <span class="pl-c1">World</span>(myagents, evolspace, D, mu, NMax, <span class="pl-c1">0.</span>)
<span class="pl-c1">@time</span> sim <span class="pl-k">=</span> <span class="pl-c1">run!</span>(w0, <span class="pl-c1">Gillepsie</span>(), tend, b, d, dt_saving <span class="pl-k">=</span> <span class="pl-c1">2.0</span>)
<span class="pl-c"><span class="pl-c">#</span> Plots.plot(sim, trait=2)</span></pre></div>
<h3 dir="auto"><a id="user-content-details" class="anchor" aria-hidden="true" href="#details"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Details</h3>
<h4 dir="auto"><a id="user-content-0-import-the-relevant-libraries" class="anchor" aria-hidden="true" href="#0-import-the-relevant-libraries"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>0. Import the relevant libraries</h4>
<p dir="auto">Let's import EvoId.jl, and LightGraphs.jl</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using EvoId"><pre><span class="pl-k">using</span> EvoId</pre></div>
<h4 dir="auto"><a id="user-content-1-define-the-evolutionary-spaces" class="anchor" aria-hidden="true" href="#1-define-the-evolutionary-spaces"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>1. Define the evolutionary spaces</h4>
<p dir="auto">We define the geographical space as star graph with 7 vertices (i.e. the abstraction of the landscape), and a continuous trait space.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="nodes = 7
g = star_graph(nodes)
landscape = GraphSpace(g) # spatial space
θ = [rand([-0.5, 0.5]) for i in 1:nodes]
traitspace = RealSpace(1) # phenotypic space
evolspace = (landscape, traitspace) # space over which individuals are structured"><pre>nodes <span class="pl-k">=</span> <span class="pl-c1">7</span>
g <span class="pl-k">=</span> <span class="pl-c1">star_graph</span>(nodes)
landscape <span class="pl-k">=</span> <span class="pl-c1">GraphSpace</span>(g) <span class="pl-c"><span class="pl-c">#</span> spatial space</span>
θ <span class="pl-k">=</span> [<span class="pl-c1">rand</span>([<span class="pl-k">-</span><span class="pl-c1">0.5</span>, <span class="pl-c1">0.5</span>]) <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span>nodes]
traitspace <span class="pl-k">=</span> <span class="pl-c1">RealSpace</span>(<span class="pl-c1">1</span>) <span class="pl-c"><span class="pl-c">#</span> phenotypic space</span>
evolspace <span class="pl-k">=</span> (landscape, traitspace) <span class="pl-c"><span class="pl-c">#</span> space over which individuals are structured</span></pre></div>
<h4 dir="auto"><a id="user-content-2-define-birth-and-death-function" class="anchor" aria-hidden="true" href="#2-define-birth-and-death-function"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>2. Define birth and death function</h4>
<p dir="auto">Birth and death functions depend on individuals position in the combination of spaces defined above, i.e. position on the graph and the adaptive trait.
We decide that each vertex selects for an optimal trait value <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="8b4960be2c04af38b607cfa54e38e029">$\theta_i \in \{-1,1\}$</math-renderer>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="const K = 100. # carrying capacity
b(X,t) = 1. - 0.5 * (θ[Int(X[1][])] - X[2][])^2 # birth function
d(X,Y,t) = (X[1] ≈ Y[1]) ? 1. / K : 0. # death function
alg = Gillepsie() # update rule
NMax = 2000 # maximum number of individuals
D = [nothing, 5e-2] # dispersion coefficient
mu = [1e-1, 1e-1] # mutation / migration rate"><pre><span class="pl-k">const</span> K <span class="pl-k">=</span> <span class="pl-c1">100.</span> <span class="pl-c"><span class="pl-c">#</span> carrying capacity</span>
<span class="pl-en">b</span>(X,t) <span class="pl-k">=</span> <span class="pl-c1">1.</span> <span class="pl-k">-</span> <span class="pl-c1">0.5</span> <span class="pl-k">*</span> (θ[<span class="pl-c1">Int</span>(X[<span class="pl-c1">1</span>][])] <span class="pl-k">-</span> X[<span class="pl-c1">2</span>][])<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-c"><span class="pl-c">#</span> birth function</span>
<span class="pl-en">d</span>(X,Y,t) <span class="pl-k">=</span> (X[<span class="pl-c1">1</span>] <span class="pl-k">≈</span> Y[<span class="pl-c1">1</span>]) <span class="pl-k">?</span> <span class="pl-c1">1.</span> <span class="pl-k">/</span> K <span class="pl-k">:</span> <span class="pl-c1">0.</span> <span class="pl-c"><span class="pl-c">#</span> death function</span>
alg <span class="pl-k">=</span> <span class="pl-c1">Gillepsie</span>() <span class="pl-c"><span class="pl-c">#</span> update rule</span>
NMax <span class="pl-k">=</span> <span class="pl-c1">2000</span> <span class="pl-c"><span class="pl-c">#</span> maximum number of individuals</span>
D <span class="pl-k">=</span> [<span class="pl-c1">nothing</span>, <span class="pl-c1">5e-2</span>] <span class="pl-c"><span class="pl-c">#</span> dispersion coefficient</span>
mu <span class="pl-k">=</span> [<span class="pl-c1">1e-1</span>, <span class="pl-c1">1e-1</span>] <span class="pl-c"><span class="pl-c">#</span> mutation / migration rate</span></pre></div>
<blockquote>
<p dir="auto"><g-emoji class="g-emoji" alias="warning" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/26a0.png">⚠️</g-emoji> birth and death functions should have the same number of arguments as above.</p>
</blockquote>
<h4 dir="auto">
<a id="user-content-3-define-how-individuals-move-over-the-evolutionary-space" class="anchor" aria-hidden="true" href="#3-define-how-individuals-move-over-the-evolutionary-space"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>3. Define how individuals move over the evolutionary space</h4>
<p dir="auto">Individual movements correspond to migration and mutation processes. On continuous spaces, one should specify a migration range and a migration rate. On discrete spaces, only a migration rate is needed (one assumes that indivuals can migrate only to neighbour patches).</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="NMax = 2000 # maximum number of individuals
D = [nothing, 5e-2] # dispersion coefficient
mu = [1e-1, 1e-1] # mutation / migration rate"><pre>NMax <span class="pl-k">=</span> <span class="pl-c1">2000</span> <span class="pl-c"><span class="pl-c">#</span> maximum number of individuals</span>
D <span class="pl-k">=</span> [<span class="pl-c1">nothing</span>, <span class="pl-c1">5e-2</span>] <span class="pl-c"><span class="pl-c">#</span> dispersion coefficient</span>
mu <span class="pl-k">=</span> [<span class="pl-c1">1e-1</span>, <span class="pl-c1">1e-1</span>] <span class="pl-c"><span class="pl-c">#</span> mutation / migration rate</span></pre></div>
<h4 dir="auto">
<a id="user-content-4-define-the-initial-population-state" class="anchor" aria-hidden="true" href="#4-define-the-initial-population-state"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>4. Define the initial population state</h4>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="myagents = [Agent(evolspace, [rand(1:nodes,1), randn(1) * D[2]]) for i in 1:K] # array containing the founder individuals
# random position on the graph
# random position on the trait space centered around 0
w0 = World(myagents, evolspace, D, mu, NMax, 0.) # the initial world, defined at time 0."><pre>myagents <span class="pl-k">=</span> [<span class="pl-c1">Agent</span>(evolspace, [<span class="pl-c1">rand</span>(<span class="pl-c1">1</span><span class="pl-k">:</span>nodes,<span class="pl-c1">1</span>), <span class="pl-c1">randn</span>(<span class="pl-c1">1</span>) <span class="pl-k">*</span> D[<span class="pl-c1">2</span>]]) <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span>K] <span class="pl-c"><span class="pl-c">#</span> array containing the founder individuals</span>
<span class="pl-c"><span class="pl-c">#</span> random position on the graph</span>
<span class="pl-c"><span class="pl-c">#</span> random position on the trait space centered around 0</span>
w0 <span class="pl-k">=</span> <span class="pl-c1">World</span>(myagents, evolspace, D, mu, NMax, <span class="pl-c1">0.</span>) <span class="pl-c"><span class="pl-c">#</span> the initial world, defined at time 0.</span></pre></div>
<h4 dir="auto">
<a id="user-content-5-run" class="anchor" aria-hidden="true" href="#5-run"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>5. Run</h4>
<p dir="auto">Simulation time, and callback function</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="tend = 500. # time horizon
t_saving_cb = collect(range(0., tend, length=200)) # time step where callback function is called
cb(w) = Dict(&quot;N&quot; =&gt; length(w)) # callback function"><pre>tend <span class="pl-k">=</span> <span class="pl-c1">500.</span> <span class="pl-c"><span class="pl-c">#</span> time horizon</span>
t_saving_cb <span class="pl-k">=</span> <span class="pl-c1">collect</span>(<span class="pl-c1">range</span>(<span class="pl-c1">0.</span>, tend, length<span class="pl-k">=</span><span class="pl-c1">200</span>)) <span class="pl-c"><span class="pl-c">#</span> time step where callback function is called</span>
<span class="pl-en">cb</span>(w) <span class="pl-k">=</span> <span class="pl-c1">Dict</span>(<span class="pl-s"><span class="pl-pds">"</span>N<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">length</span>(w)) <span class="pl-c"><span class="pl-c">#</span> callback function</span></pre></div>
<p dir="auto">And off we go</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@time sim = run!(w0, alg, tend, b, d, cb=cb, t_saving_cb = t_saving_cb)"><pre><span class="pl-c1">@time</span> sim <span class="pl-k">=</span> <span class="pl-c1">run!</span>(w0, alg, tend, b, d, cb<span class="pl-k">=</span>cb, t_saving_cb <span class="pl-k">=</span> t_saving_cb)</pre></div>
<h4 dir="auto">
<a id="user-content-plotting" class="anchor" aria-hidden="true" href="#plotting"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Plotting</h4>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Plots
plot(sim.tspan, sim[&quot;N&quot;])"><pre><span class="pl-k">using</span> Plots
<span class="pl-c1">plot</span>(sim<span class="pl-k">.</span>tspan, sim[<span class="pl-s"><span class="pl-pds">"</span>N<span class="pl-pds">"</span></span>])</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="docs/src/assets/tutorials/delta_comp_wsize.png"><img src="docs/src/assets/tutorials/delta_comp_wsize.png" alt="" style="max-width: 100%;"></a></p>
<p dir="auto">With a few more tricks, one can also plot the population trait density over time, for example the local trait density for individuals living on vertex 1.</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="docs/src/assets/ABM_local_trait_dens_adapt.png"><img src="docs/src/assets/ABM_local_trait_dens_adapt.png" alt="" style="max-width: 100%;"></a></p>
<p dir="auto">Check out the folder <code>examples</code> in the git repo to see this tutorial in a julia file, as well as plenty others!</p>
</article></div>