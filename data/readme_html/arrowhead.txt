<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-arrowhead-and-diagonal-plus-rank-one-eigenvalue-solvers" class="anchor" aria-hidden="true" href="#arrowhead-and-diagonal-plus-rank-one-eigenvalue-solvers"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Arrowhead and Diagonal-plus-rank-one Eigenvalue Solvers</h1>
<h2><a id="user-content-notice" class="anchor" aria-hidden="true" href="#notice"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Notice</h2>
<p>This is a major rewrite of the packege with following features:</p>
<ul>
<li>works with Julia 1.0+</li>
<li>uses multi-threading</li>
<li>memory usage is improved</li>
</ul>
<p><a href="https://travis-ci.org/ivanslapnicar/Arrowhead.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/5aabb375a0794aa4b98e63e71cb006368202d51f/68747470733a2f2f7472617669732d63692e6f72672f6976616e736c61706e696361722f4172726f77686561642e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/ivanslapnicar/Arrowhead.jl.svg?branch=master" style="max-width:100%;"></a></p>
<h2><a id="user-content-basics" class="anchor" aria-hidden="true" href="#basics"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Basics</h2>
<p>N.B. The latest master is obtained by
<code>pkg&gt; add Arrowhead#master</code>.</p>
<p>Usage:</p>
<pre><code>using Arrowhead
# Set the dimension
n=10
# Generate SymArrow
A=GenSymArrow(n,n)
# Compute the eigenvalue decomposition
E,Info=eigen(A)
# Extract eigenvalues
Λ=E.values
# Extract eigenvectors
U=E.vectors
</code></pre>
<p>For furthaer examples see the file <a href="tests/runtests.jl">runtests.jl</a>.</p>
<p>The package contains routines for <strong>forward stable</strong> algorithms which compute:</p>
<ul>
<li>all eigenvalues and eigenvectors of a real symmetric arrowhead matrices,</li>
<li>all eigenvalues and eigenvectors of rank-one modifications of diagonal matrices (DPR1), and</li>
<li>all singular values and singular vectors of half-arrowhead matrices.</li>
</ul>
<p>The last class of matrices typically appears in SVD updating problems.
The algorithms and their analysis are given in the references.</p>
<p>Eigen/singular values are computed in a forward stable manner. Eigen/singular vectors are
computed entrywise to almost full accuracy, so they are automatically mutually
orthogonal.  The algorithms are based on a shift-and-invert approach.  Only a
single element of the inverse of the shifted matrix eventually needs to
be computed with double the working precision.</p>
<p>The package also contains routines for applications:</p>
<ul>
<li>divide-and-conquer routine for symmetric tridiagonal eigenvalue problem</li>
<li>roots of real polynomials with real distinct roots.</li>
</ul>
<h2><a id="user-content-contents" class="anchor" aria-hidden="true" href="#contents"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Contents</h2>
<h3><a id="user-content-arrowhead-and-dpr1-eigenvalues" class="anchor" aria-hidden="true" href="#arrowhead-and-dpr1-eigenvalues"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Arrowhead and DPR1 Eigenvalues</h3>
<p>The file <code>arrowhead1.jl</code> contains definitions of types
<code>SymArrow</code> (arrowhead) and <code>SymDPR1</code>. Full matrices are accessible
with <code>Matrix(A)</code>.</p>
<p>The file <code>arrowhead3.jl</code> contains routines to generate random symmetric
arrowhead and DPR1 matrices, <code>GenSymArrow</code> and <code>GenSymDPR1</code>, respectively,
three functions <code>inv()</code> which compute various inverses of <code>SymArrow</code>
matrices, two functions <code>bisect()</code> which compute outer eigenvalues of
<code>SymArrow</code> and <code>SymDPR1</code> matrices, the main computational function <code>eigen()</code> which
computes the k-th eigenpair of an ordered unreduced  <code>SymArrow</code>,
and the driver function <code>eigen()</code> which computes all eigenvalues and
eigenvectors of a <code>SymArrow</code>.</p>
<p>The file <code>arrowhead4.jl</code> contains three functions <code>inv()</code> which compute
various inverses of <code>SymDPR1</code> matrices, the main computational function <code>eigen()</code>
which computes the k-th eigenpair of an ordered unreduced <code>SymDPR1</code>,
and the driver function <code>eigen()</code> which computes all eigenvalues and
eigenvectors of a <code>SymDPR1</code>.</p>
<h3><a id="user-content-half-arrowhead-svd" class="anchor" aria-hidden="true" href="#half-arrowhead-svd"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Half-arrowhead SVD</h3>
<p>The file <code>arrowhead5.jl</code> contains definition of type <code>HalfArrow</code>. The type is
of the form <code>[Diagonal(A.D) A.z]</code> where either
<code>length(A.z)=length(A.D)</code>
or <code>length(A.z)=length(A.D)+1</code>, thus giving two possible
forms of the SVD rank one update.  The file <code>arrowhead6.jl</code> contains
the function <code>doubledot()</code>, three functions <code>inv()</code> which compute
various inverses of <code>HalfArrow</code> matrices, the main computational function <code>svd()</code>
which computes the k-th singular value triplet <code>u, σ, v</code> of an ordered
unreduced <code>HalfArrow</code>,  and the driver function <code>svd()</code> which computes all
singular values and vectors of a <code>HalfArrow</code>.</p>
<h3><a id="user-content-tridiagonal-divide-and-conquer" class="anchor" aria-hidden="true" href="#tridiagonal-divide-and-conquer"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Tridiagonal Divide and Conquer</h3>
<p>The file <code>arrowhead7.jl</code> contains a simple function <code>tdc()</code> which implements
divide-and-conquer method for <code>SymTridiagonal</code> matrices by spliting the matrix
in two parts  and connecting the parts via eigenvalue decomposition of
arrowhead matrix.</p>
<h3><a id="user-content-polynomial-roots" class="anchor" aria-hidden="true" href="#polynomial-roots"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Polynomial Roots</h3>
<p>The file <code>arrowhead7.jl</code> conatains the function <code>rootsah()</code> which computes the
roots of <code>Int32</code>, <code>Int64</code>, <code>Float32</code> and <code>Float64</code> polynomials with all distinct
real roots. The computation is
forward stable. The program uses <code>SymArrow</code> form of companion matrix in
barycentric coordinates and
the corresponding <code>eigen()</code> function specially designed for this case.
The file also contains three functions <code>inv()</code>. Similarly, the file
<code>arrowhead8.jl</code> conatains the function <code>rootsah()</code> which computes the
roots of <code>BigInt</code> and <code>BigFloat</code> polynomials with all distinct real roots.
The file also contains function <code>rootsWDK()</code>, an implementation of the
Weierstrass-Durand-Kerner polynomial root finding algorithm.</p>
<h2><a id="user-content-authors-and-references" class="anchor" aria-hidden="true" href="#authors-and-references"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Authors and References</h2>
<p>The functions for arrowhead and half-arrowhead matrices
were developed and analysed by <a href="http://www.sciencedirect.com/science/article/pii/S0024379513006265" title="Nevena Jakovcevic Stor, Ivan Slapnicar and Jesse L. Barlow, 'Accurate eigenvalue decomposition of real symmetric arrowhead matrices and applications', Linear Algebra and its Applications, Vol. 464 (2015) 62-89, DOI: 10.1016/j.laa.2013.10.007" rel="nofollow">Jakovcevic Stor, Barlow and
Slapnicar (2013)</a>
(see also <a href="http://arxiv.org/abs/1302.7203" title="Nevena Jakovcevic Stor, Ivan Slapnicar and Jesse L. Barlow, 'Accurate eigenvalue decomposition of arrowhead matrices and applications', arXiv:1302.7203v3" rel="nofollow">arXiv:1302.7203</a>).
The routines for DPR1 matrices are described and analysed in <a href="http://www.sciencedirect.com/science/article/pii/S0024379515005406" title="Nevena Jakovcevic Stor, Ivan Slapnicar and Jesse L. Barlow, 'Forward stable eigenvalue decomposition of rank-one modifications of diagonal matrices', Linear Algebra and its Applications, Vol. 487 (2015) 301-315, DOI: 10.1016/j.laa.2015.09.025" rel="nofollow">Jakovcevic
Stor, Barlow and Slapnicar (2015)</a> (the paper is
<a href="http://authors.elsevier.com/a/1Rmlt5YnCLEdU" rel="nofollow">freely downloadable</a> until
Nov 15, 2015, see also <a href="http://arxiv.org/abs/1405.7537" title="Nevena Jakovcevic Stor, Ivan Slapnicar and Jesse L. Barlow, 'Forward stable eigenvalue decomposition of rank-one modifications of diagonal matrices', arXiv:1405.7537v2" rel="nofollow">arXiv:1405.7537</a>). The polynomial root finder is described and analyzed
in <a href="http://arxiv.org/abs/1509.06224" title="Nevena Jakovcevic Stor and Ivan Slapnicar, 'Forward stable computation of roots of real polynomials with real simple roots', arXiv:1509.06224v1" rel="nofollow">Jakovcevic Stor and Slapnicar (2015)</a>.</p>
<p>Double the working precision is implemented by using routines by
<a href="http://link.springer.com/article/10.1007%2FBF01397083" title="T.J. Dekker (1971) 'A floating-point technique for extending the available precision', Numerische Mathematik, Volume 18, Issue 3, pp 224-242" rel="nofollow">T. J. Dekker (1971)</a> from the package <a href="https://github.com/simonbyrne/DoubleDouble.jl">DoubleDouble</a>
by Simon Byrne. This package is not maintained any more and is deprecated in favor of
<a href="https://github.com/JuliaMath/DoubleFloats.jl">DoubleFloats</a>. However,
we are using lightweight and faster implementation in the file <code>DoubleDouble.jl</code>
which is now ported to Julia 1.0+.</p>
<h2><a id="user-content-thanks" class="anchor" aria-hidden="true" href="#thanks"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Thanks</h2>
<p>Highly appreciated help and advice came from <a href="https://github.com/jiahao">Jiahao Chen</a>,
<a href="https://github.com/andreasnoack">Andreas Noack</a>, <a href="https://github.com/jakebolewski">Jake Bolewski</a> and
<a href="https://github.com/simonbyrne">Simon Byrne</a>.</p>
</article></div>