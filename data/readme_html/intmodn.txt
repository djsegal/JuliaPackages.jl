<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p><a href="https://travis-ci.org/andrewcooke/IntModN.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/cd6847b56da7cdc40d562ae6a05bd8ccc36ea39b/68747470733a2f2f7472617669732d63692e6f72672f616e64726577636f6f6b652f496e744d6f644e2e6a6c2e706e67" alt="Build Status" data-canonical-src="https://travis-ci.org/andrewcooke/IntModN.jl.png" style="max-width:100%;"></a>
<a href="https://coveralls.io/r/andrewcooke/IntModN.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/4aa99746c16a6095ea1163e1771340d7a739643b/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f616e64726577636f6f6b652f496e744d6f644e2e6a6c2f62616467652e737667" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/andrewcooke/IntModN.jl/badge.svg" style="max-width:100%;"></a>
<a href="http://pkg.julialang.org/?pkg=IntModN&amp;ver=release" rel="nofollow"><img src="https://camo.githubusercontent.com/ca3b31606a1c74941ce4aa7db41c57f5e6399d0a/687474703a2f2f706b672e6a756c69616c616e672e6f72672f6261646765732f496e744d6f644e5f72656c656173652e737667" alt="IntModN" data-canonical-src="http://pkg.julialang.org/badges/IntModN_release.svg" style="max-width:100%;"></a></p>
<p><strong>WARNING</strong> the current tagged version gives warnings in the latest
0.4, while the tests on the github trunk fail.  I do not have time
right now to maintain this code, so caveat emptor.  Sorry.</p>
<h1><a id="user-content-intmodnjl" class="anchor" aria-hidden="true" href="#intmodnjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>IntModN.jl</h1>
<p>A pragmatic (meaning incomplete, and written by someone who needed
this before he fully understood it) library for doing modular
arithmetic.</p>
<p>The aim is not to encapsulate a large amount of theory, or to describe
the relationships between different structures, but to enable
arithmetic on various types, motivated largely by the practical needs
of crypto code.</p>
<ul>
<li><a href="#examples">Examples</a></li>
<li><a href="#types">Types</a>
<ul>
<li><a href="#integers-modulo-n">Integers Modulo N</a></li>
<li><a href="#polynomials">Polynomials</a>
<ul>
<li><a href="#polynomials-with-integral-coefficients">Polynomials with Integral Coefficients</a></li>
<li><a href="#polynomials-over-gf-2">Polynomials over GF(2)</a></li>
</ul>
</li>
<li><a href="#quotient-factor-rings">Quotient (Factor) Rings</a></li>
</ul>
</li>
</ul>
<p>Incomplete; pull requests welcome.</p>
<h2><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Examples</h2>
<p>See the
<a href="https://github.com/andrewcooke/IntModN.jl/blob/master/src/Tests.jl">tests</a>.</p>
<h3><a id="user-content-simultaneous-equations" class="anchor" aria-hidden="true" href="#simultaneous-equations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Simultaneous Equations</h3>
<p>Answering <a href="http://math.stackexchange.com/questions/169921/how-to-solve-system-of-linear-equations-of-xor-operation" rel="nofollow">this
question</a> (in GF(2)):</p>
<pre><code>julia&gt; using IntModN

@zfield 2 begin
    A = [1 1 1 0; 
         1 1 0 1;
         1 0 1 1;
         0 1 1 1]
    b = [1, 1, 0, 1]
    x = A\b
    @assert x == [0, 1, 0, 0]
end
</code></pre>
<h3><a id="user-content-polynomial-arithmetic" class="anchor" aria-hidden="true" href="#polynomial-arithmetic"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Polynomial Arithmetic</h3>
<pre><code>julia&gt; x = X(GF2)
ZP(ZField{2,Int64},1,0)

julia&gt; a = x^3 + x^2 + 1
ZP(ZField{2,Int64},1,1,0,1)

julia&gt; b = x^2 + 1
ZP(ZField{2,Int64},1,0,1)

julia&gt; p, q = divrem(a, b)
(ZP(ZField{2,Int64},1,1),ZP(ZField{2,Int64},1,0))

julia&gt; println(p * b + q)
x^3 + x^2 + 1 mod 2
</code></pre>
<h3><a id="user-content-fast-polynomials-in-gf2" class="anchor" aria-hidden="true" href="#fast-polynomials-in-gf2"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Fast Polynomials in GF(2)</h3>
<p>The examples above could have used any modulus.  I chose GF(2) only
because it is common.</p>
<p>However, the following works only in GF(2) (the trade-off for the lack
of flexibility is speed and compactness - these are encoded as bit
patterns):</p>
<pre><code>julia&gt; x = GF2X(Uint8)
GF2Poly{Uint8}(2)

julia&gt; a = x^3 + x^2 + 1
GF2Poly{Uint8}(13)

julia&gt; b = x^2 + 1
GF2Poly{Uint8}(5)

julia&gt; p, q = divrem(a, b)
(GF2Poly{Uint8}(3),GF2Poly{Uint8}(2))

julia&gt; @assert a == p * b + q
</code></pre>
<h3><a id="user-content-rijndael" class="anchor" aria-hidden="true" href="#rijndael"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Rijndael</h3>
<p>The multiplication <a href="http://en.wikipedia.org/wiki/Finite_field_arithmetic#Rijndael.27s_finite_field" rel="nofollow">described
here</a>:</p>
<pre><code>julia&gt; x = GF2X(Uint)
GF2Poly{UInt64}(2)

julia&gt; rijndael = x^8 + x^4 + x^3 + x + 1
GF2Poly{UInt64}(283)

julia&gt; print(ZF(rijndael, x^7 + x^6 + x^3 + x) * ZF(rijndael, x^6 + x^4 + x +
1))
1 mod 2 mod x^8 + x^4 + x^3 + x + 1 mod 2
</code></pre>
<p>Note that <code>rinjdael</code> here requires 9 bits of storage; there is no currently
representation with an implicit msb.</p>
<h2><a id="user-content-types" class="anchor" aria-hidden="true" href="#types"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Types</h2>
<p><code>Residue &lt;: Integer</code> - abstract superclass for (almost) everything below.
Used to provide some common utilities (like automatic promotion from
integers).</p>
<h3><a id="user-content-integers-modulo-n" class="anchor" aria-hidden="true" href="#integers-modulo-n"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Integers Modulo N</h3>
<p><code>ZModN{N,I&lt;:Integer} &lt;: Residue</code> - abstract superclass for integers modulo
some value, where <code>N</code> is the modulus, and so typically an <code>Int</code> (yes, that's a
integer as a <em>type</em>, not a value), and <code>I</code></p>
<p>This has two concrete subclasses, because when <code>N</code> is a prime number we can
define a multiplicative inverse.</p>
<p><code>ZRing{N, I&lt;:Integer} &lt;: ZModN{N,I}</code> - the general case.</p>
<p><code>ZField{N, I&lt;:Integer} &lt;: ZModN{N,I}</code> - assumes that <code>N</code> is prime, and so
includes division.</p>
<p>These constructors can be used directly, but do not check that arguments are
consistent with assumptions made in the code (values within range, etc).</p>
<p>The associated functions <code>ZR()</code> and <code>ZF()</code> are more suitable for "normal" use
(but still do not check primality for fields), and include support for factory
functions:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">ZF</span>(<span class="pl-c1">3</span>, <span class="pl-c1">5</span>, UInt8)
<span class="pl-c1">ZField</span><span class="pl-c1">{3,UInt8}</span>(<span class="pl-c1">2</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">ZF</span>(<span class="pl-c1">3</span>, <span class="pl-c1">5</span>)
<span class="pl-c1">ZField</span><span class="pl-c1">{3,Int64}</span>(<span class="pl-c1">2</span>)

julia<span class="pl-k">&gt;</span> GF3 <span class="pl-k">=</span> <span class="pl-c1">ZF</span>(<span class="pl-c1">3</span>)
(anonymous <span class="pl-k">function</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">GF3</span>(<span class="pl-c1">5</span>)
<span class="pl-c1">ZField</span><span class="pl-c1">{3,Int64}</span>(<span class="pl-c1">2</span>)</pre></div>
<p>The macros <code>@zring</code> and <code>@zfield</code> can also be used to convert all integers
with scope:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">@zring</span> <span class="pl-c1">4</span> <span class="pl-k">begin</span>
          A <span class="pl-k">=</span> [<span class="pl-c1">1</span> <span class="pl-c1">2</span> <span class="pl-c1">3</span> <span class="pl-c1">4</span> <span class="pl-c1">5</span>]
       <span class="pl-k">end</span>
<span class="pl-c1">1</span>x5 Array{IntModN<span class="pl-k">.</span>ZRing{<span class="pl-c1">4</span>,Int64},<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">1</span>  <span class="pl-c1">2</span>  <span class="pl-c1">3</span>  <span class="pl-c1">0</span>  <span class="pl-c1">1</span></pre></div>
<h3><a id="user-content-polynomials" class="anchor" aria-hidden="true" href="#polynomials"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Polynomials</h3>
<p><code>Poly &lt;: Residue</code> - abstract superclass for polynomials.  All share some basic
conventions about accessing coefficients (with <code>[]</code>) and iterators.</p>
<p>The types below all form rings, not fields, because polynomials do not have
inverses.</p>
<p>Note: Originally, the code used
<a href="https://github.com/vtjnash/Polynomial.jl">Polynomial.jl</a>, but that had some
weird design decisions so I wrote my own code.  Since then,
<a href="https://github.com/Keno/Polynomials.jl">Polynomials.jl</a> fixed some of the
issues, so at some point it may make sense to revert to that package.</p>
<h4><a id="user-content-polynomials-with-integral-coefficients" class="anchor" aria-hidden="true" href="#polynomials-with-integral-coefficients"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Polynomials With Integral Coefficients</h4>
<p><code>ZPoly{I&lt;:Integer} &lt;: Poly</code> - a simple wrapper around an array of integral
coefficients (including <code>ZModN</code> subclasses).  The coefficients are in the
"usual" order, so <code>[i]</code> gives the ith coefficient, and the leading coefficient
is always non-zero (or the array is empty).</p>
<p>As with integers mod N, the constructor can be used directly, but it is
generally preferable to use <code>ZP()</code>, which has various forms.</p>
<p>In addition, there's support for the natural syntax <code>x^n...</code> via <code>X()</code>:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> x <span class="pl-k">=</span> <span class="pl-c1">X</span>(<span class="pl-c1">ZF</span>(<span class="pl-c1">2</span>))
<span class="pl-c1">ZP</span>(IntModN<span class="pl-k">.</span>ZField{<span class="pl-c1">2</span>,Int64},<span class="pl-c1">1</span>,<span class="pl-c1">0</span>)

julia<span class="pl-k">&gt;</span> x<span class="pl-k">^</span><span class="pl-c1">3</span> <span class="pl-k">+</span> x
<span class="pl-c1">ZP</span>(IntModN<span class="pl-k">.</span>ZField{<span class="pl-c1">2</span>,Int64},<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>)</pre></div>
<h4><a id="user-content-polynomials-over-gf2" class="anchor" aria-hidden="true" href="#polynomials-over-gf2"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Polynomials over GF(2)</h4>
<p><code>GF2Poly{U&lt;:Unsigned} &lt;: Poly</code> - specialized support for polynomials over
GF(2).  Coefficients can only be 0 or 1, so we can use bit fields (integers)
for their values.</p>
<p>As always, you can use the constructor directly, or the utilities <code>GF2P()</code> and
<code>GF2X()</code>.</p>
<p>The bit pattern can be displayed with <code>bits()</code> and addition is binary xor:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> x <span class="pl-k">=</span> <span class="pl-c1">GF2X</span>(Uint8)
<span class="pl-c1">GF2Poly</span><span class="pl-c1">{UInt8}</span>(<span class="pl-c1">2</span>)

julia<span class="pl-k">&gt;</span> a <span class="pl-k">=</span> x<span class="pl-k">^</span><span class="pl-c1">7</span> <span class="pl-k">+</span> x<span class="pl-k">^</span><span class="pl-c1">3</span>
<span class="pl-c1">GF2Poly</span><span class="pl-c1">{UInt8}</span>(<span class="pl-c1">136</span>)

julia<span class="pl-k">&gt;</span> b <span class="pl-k">=</span> x<span class="pl-k">^</span><span class="pl-c1">3</span> <span class="pl-k">+</span> x<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">+</span> <span class="pl-c1">1</span>
<span class="pl-c1">GF2Poly</span><span class="pl-c1">{UInt8}</span>(<span class="pl-c1">13</span>)

julia<span class="pl-k">&gt;</span> a<span class="pl-k">+</span>b
<span class="pl-c1">GF2Poly</span><span class="pl-c1">{UInt8}</span>(<span class="pl-c1">133</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">bits</span>(a), <span class="pl-c1">bits</span>(b), <span class="pl-c1">bits</span>(a<span class="pl-k">+</span>b)
(<span class="pl-s"><span class="pl-pds">"</span>10001000<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>00001101<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>10000101<span class="pl-pds">"</span></span>)</pre></div>
<h3><a id="user-content-quotient-factor-rings" class="anchor" aria-hidden="true" href="#quotient-factor-rings"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Quotient (Factor) Rings</h3>
<p>These used to be a spearate type, but can now be handled as <code>ZRing()</code> and
<code>ZField()</code> with polynomial arguments.  The latter is appropriate when the
ideal is irreducible (maximal) (I think).</p>
<p>See the <a href="#rijndael">Rijndael</a> example.</p>
</article></div>