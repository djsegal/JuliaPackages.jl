<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-minimal-implementation-of-perls-filefind-in-julia" class="anchor" aria-hidden="true" href="#minimal-implementation-of-perls-filefind-in-julia"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Minimal Implementation of Perl's File::Find in Julia</h1>
<p>This package provides a single function, <code>FileFind.find</code>, which:</p>
<ul>
<li>Performs a depth-first search of a directory starting at <code>dir_name</code></li>
<li>Calls a function <code>f</code> on every file/directory encountered along the way</li>
<li>Does not follow symlinks to prevent cycles</li>
</ul>
<h1><a id="user-content-usage-examples" class="anchor" aria-hidden="true" href="#usage-examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage Examples</h1>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="require(&quot;FileFind&quot;)

# The simplest scenario possible
FileFind.find()

# Specifying a directory explicitly
FileFind.find(&quot;.&quot;)

# Specifying a function explicitly
FileFind.find(fn -&gt; println(isfile(fn)))

# Specifying both a directory and a function explicitly
function file_name_and_size(filename)
  println(strcat(filename, &quot; &quot;, filesize(filename)))
end
FileFind.find(&quot;.&quot;, file_name_and_size)

# Using a closure to maintain global state across function calls
total_bytes = 0

function total_size(filename)
  global total_bytes
  total_bytes += filesize(filename)
end

FileFind.find(&quot;.&quot;, total_size)

total_bytes
"><pre><code>require("FileFind")

# The simplest scenario possible
FileFind.find()

# Specifying a directory explicitly
FileFind.find(".")

# Specifying a function explicitly
FileFind.find(fn -&gt; println(isfile(fn)))

# Specifying both a directory and a function explicitly
function file_name_and_size(filename)
  println(strcat(filename, " ", filesize(filename)))
end
FileFind.find(".", file_name_and_size)

# Using a closure to maintain global state across function calls
total_bytes = 0

function total_size(filename)
  global total_bytes
  total_bytes += filesize(filename)
end

FileFind.find(".", total_size)

total_bytes
</code></pre></div>
<h1><a id="user-content-to-do" class="anchor" aria-hidden="true" href="#to-do"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>To Do</h1>
<ul>
<li>Implement missing functionality from Perl's File::Find
<ul>
<li>Non-cyclic symlink following</li>
<li>Preorder vs. postorder calls to input function</li>
</ul>
</li>
</ul>
</article></div>