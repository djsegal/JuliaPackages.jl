<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-reactionnetworkimportersjl" class="anchor" aria-hidden="true" href="#reactionnetworkimportersjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>ReactionNetworkImporters.jl</h1>
<p><a href="https://travis-ci.org/isaacsas/ReactionNetworkImporters.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/7af54183cf32141eb893c989b9c75a94942a1e01/68747470733a2f2f7472617669732d63692e6f72672f69736161637361732f5265616374696f6e4e6574776f726b496d706f72746572732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/isaacsas/ReactionNetworkImporters.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/isaacsas/reactionnetworkimporters-jl/branch/master" rel="nofollow"><img src="https://camo.githubusercontent.com/fbab94d7451bc10a84be4d9cf60d8883cb373991/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f77717135666c6b3277386173616437382f6272616e63682f6d61737465723f7376673d74727565" alt="Build status" data-canonical-src="https://ci.appveyor.com/api/projects/status/wqq5flk2w8asad78/branch/master?svg=true" style="max-width:100%;"></a></p>
<p>This package provides importers to load reaction networks from several file formats. Currently it supports loading networks in the following formats:</p>
<ol>
<li>A <em>subset</em> of the BioNetGen .net file format.</li>
<li>Networks represented by dense or sparse substrate and product stoichiometric matrices.</li>
<li>The basic format used by the <a href="https://www.cosbi.eu/research/prototypes/rssa" rel="nofollow">RSSA</a> group at COSBI in their <a href="https://www.cosbi.eu/prototypes/jLiexDeBIgFV4zxwnKiW97oc4BjTtIoRGajqdUz4.zip" rel="nofollow">model collection</a>.</li>
</ol>
<p>Imported networks are currently output as a <a href="https://github.com/JuliaDiffEq/DiffEqBiological.jl/">DiffEqBiological</a>, <code>reaction_network</code> type.</p>
<hr>
<h2><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Examples</h2>
<h3><a id="user-content-loading-a-bionetgen-net-file" class="anchor" aria-hidden="true" href="#loading-a-bionetgen-net-file"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Loading a BioNetGen .net file</h3>
<p>A simple network from the builtin BioNetGen bngl examples is the <a href="data/repressilator/Repressilator.bngl">repressilator</a>. The <code>generate_network</code> command in the bngl file outputs a reduced network description, i.e. a <a href="data/repressilator/Repressilator.net">.net</a> file, which can be loaded into a DiffEqBiological <code>min_reaction_network</code> as:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> ReactionNetworkImporters
fname <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>PATH/TO/Repressilator.net<span class="pl-pds">"</span></span>
prnbng <span class="pl-k">=</span> <span class="pl-c1">loadrxnetwork</span>(<span class="pl-c1">BNGNetwork</span>(), <span class="pl-s"><span class="pl-pds">"</span>BNGRepressilator<span class="pl-pds">"</span></span>, fname)</pre></div>
<p>Here <code>BNGNetwork</code> is a type specifying the file format that is being loaded, and <code>BNGRepressilator</code> specifies the type of the generated <code>min_reaction_network</code>, see <a href="https://github.com/JuliaDiffEq/DiffEqBiological.jl/">DiffEqBiological</a>. <code>prnbng</code> is a <code>ParsedReactionNetwork</code> structure with the following fields:</p>
<ul>
<li><code>rn</code>, a DiffEqBiological <code>reaction_network</code></li>
<li><code>u₀</code>, the initial condition (as a <code>Vector{Float64}</code>)</li>
<li><code>p</code>, the parameter vector (as a <code>Vector{Float64}</code>)</li>
<li><code>paramexprs</code>, the parameter vector as a mix of <code>Numbers</code>, <code>Symbols</code> and <code>Exprs</code>. <code>p</code> is generated by evaluation of these expressions and symbols.</li>
<li><code>symstonames</code>, a <code>Dict</code> mapping from the internal <code>Symbol</code> of a species used in the generated <code>min_reaction_network</code> to a <code>Symbol</code> generated from the name in the .net file. This is necessary as BioNetGen can generate exceptionally long species names, involving characters that lead to malformed species names when used with <code>DiffEqBiological</code>.</li>
<li><code>groupstoids</code>, a <code>Dict</code> mapping the <code>Symbols</code> (i.e. names) for any species groups defined in the .net file to a vector of indices into <code>u₀</code> where the corresponding species are stored.</li>
</ul>
<p>Given <code>prnbng</code>, we can construct and solve the corresponding ODE model for the reaction system by</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> OrdinaryDiffEq, DiffEqBiological
rn <span class="pl-k">=</span> prnbng<span class="pl-k">.</span>rn
<span class="pl-c1">addodes!</span>(rn)
tf <span class="pl-k">=</span> <span class="pl-c1">100000.0</span>
oprob <span class="pl-k">=</span> <span class="pl-c1">ODEProblem</span>(rn, prnbng<span class="pl-k">.</span>u₀, (<span class="pl-c1">0.</span>,tf), prnbng<span class="pl-k">.</span>p)
sol <span class="pl-k">=</span> <span class="pl-c1">solve</span>(oprob, <span class="pl-c1">Tsit5</span>(), saveat<span class="pl-k">=</span>tf<span class="pl-k">/</span><span class="pl-c1">1000.</span>)</pre></div>
<p>See the <a href="https://github.com/JuliaDiffEq/DiffEqBiological.jl/">DiffEqBiological documentation</a> for how to generate ODE, SDE, jump and other types of models.</p>
<h3><a id="user-content-loading-a-matrix-representation" class="anchor" aria-hidden="true" href="#loading-a-matrix-representation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Loading a matrix representation</h3>
<p>DiffEqBiological <code>reaction_networks</code> can also be constructed from substrate and product stoichiometric matrices. For example, here we both directly build a DiffEqBiological network using the <code>@reaction_network</code> macro, and then show how to build the same network from stoichiometry matrices using <code>ReactionNetworkImporters</code>:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span> DiffEqBiological network from the macro:</span>
rs <span class="pl-k">=</span> <span class="pl-c1">@reaction_network</span> <span class="pl-k">begin</span>
    k1, <span class="pl-c1">2</span>A <span class="pl-k">--&gt;</span> B
    k2, B <span class="pl-k">--&gt;</span> <span class="pl-c1">2</span>A
    k3, A <span class="pl-k">+</span> B <span class="pl-k">--&gt;</span> C
    k4, C <span class="pl-k">--&gt;</span> A <span class="pl-k">+</span> B
    k5, <span class="pl-c1">3</span>C <span class="pl-k">--&gt;</span> <span class="pl-c1">3</span>A
<span class="pl-k">end</span> k1 k2 k3 k4 k5

<span class="pl-c"><span class="pl-c">#</span> network from stoichiometry using ReactionNetworkImporters</span>
species <span class="pl-k">=</span> [<span class="pl-c1">:A</span>,<span class="pl-c1">:B</span>,<span class="pl-c1">:C</span>]
pars <span class="pl-k">=</span> [<span class="pl-c1">:k1</span>, <span class="pl-c1">:k2</span>, <span class="pl-c1">:k3</span>, <span class="pl-c1">:k4</span>, <span class="pl-c1">:k5</span>]
substoich <span class="pl-k">=</span>[<span class="pl-c1">2</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span>;
            <span class="pl-c1">0</span> <span class="pl-c1">1</span> <span class="pl-c1">0</span>;
            <span class="pl-c1">1</span> <span class="pl-c1">1</span> <span class="pl-c1">0</span>;
            <span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">1</span>;
            <span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">3</span>]'
prodstoich <span class="pl-k">=</span> [<span class="pl-c1">0</span> <span class="pl-c1">1</span> <span class="pl-c1">0</span>;
              <span class="pl-c1">2</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span>;
              <span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">1</span>;
              <span class="pl-c1">1</span> <span class="pl-c1">1</span> <span class="pl-c1">0</span>;
              <span class="pl-c1">3</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span>]'
prn <span class="pl-k">=</span> <span class="pl-c1">loadrxnetwork</span>(<span class="pl-c1">MatrixNetwork</span>(), <span class="pl-s"><span class="pl-pds">"</span>testnet2<span class="pl-pds">"</span></span>, pars, substoich, prodstoich; 
                    species<span class="pl-k">=</span>species, params<span class="pl-k">=</span>pars)

<span class="pl-c"><span class="pl-c">#</span> test the two networks are the same</span>
<span class="pl-c1">@assert</span> rs <span class="pl-k">==</span> prn<span class="pl-k">.</span>rn</pre></div>
<p>The basic usage is</p>
<div class="highlight highlight-source-julia"><pre>prn <span class="pl-k">=</span> <span class="pl-c1">loadrxnetwork</span>(<span class="pl-c1">MatrixNetwork</span>(), <span class="pl-s"><span class="pl-pds">"</span>networktypename<span class="pl-pds">"</span></span>, 
                    rateexprs<span class="pl-k">::</span><span class="pl-c1">Vector{Union{Expr,Symbol,Float64,Int}}</span>, 
                    substoich<span class="pl-k">::</span><span class="pl-c1">AbstractMatrix</span>, 
                    prodstoich<span class="pl-k">::</span><span class="pl-c1">AbstractMatrix</span>; 
                    species<span class="pl-k">=</span>Symbol[], 
                    params<span class="pl-k">=</span>Symbol[])</pre></div>
<p>Here <code>MatrixNetwork()</code> is the dispatch type, which selects that we are
constructing a matrix-based stoichiometric representation as input. The other
parameters are:</p>
<ul>
<li><code>rateexprs</code> - Any DiffEqBiological valid expressions for the rates. This can
be a hardcoded rate constant like <code>1.0</code>, the symbol of a parameter like <code>:k</code>,
or an expression involving parameters and species like <code>:(k*A)</code>. Note,
the reaction <code>A+B --&gt; C</code> with rate <code>:(k*B)</code> would have rate law <code>k*A*B^2</code>.</li>
<li><code>substoich</code> - A number of species by number of reactions matrix with entry
<code>(i,j)</code> giving the stoichiometric coefficient of species <code>i</code> as a substrate in
reaction <code>j</code>.</li>
<li><code>prodstoich</code> - A number of species by number of reactions matrix with entry
<code>(i,j)</code> giving the stoichiometric coefficient of species <code>i</code> as a product in
reaction <code>j</code>.</li>
<li><code>species</code> - Optional symbols for each species in the network.</li>
<li><code>parameters</code> - Symbols for each parameter in the network.</li>
</ul>
<p><code>prn</code> is again a <code>ParsedReactionNetwork</code>, with only the <code>reaction_network</code>
field, <code>prn.rn</code>, defined.</p>
<p>A dispatch is added if <code>substoich</code> and <code>prodstoich</code> both have the type
<code>SparseMatrixCSC</code>, in which case they are efficiently iterated through using the
<code>SparseArrays</code> interface.</p>
<p>If the keyword argument <code>species</code> is not set, the resulting reaction network
will simply name the species <code>S1</code>, <code>S2</code>,..., <code>SN</code> for a system with <code>N</code> total
species. <code>params</code> defaults to an empty vector of <code>Symbol</code>s, so that it does not
need to be set for systems with no parameters.</p>
<h3><a id="user-content-loading-a-rssa-format-network-file" class="anchor" aria-hidden="true" href="#loading-a-rssa-format-network-file"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Loading a RSSA format network file</h3>
<p>As the licensing is unclear we can not redistribute any example RSSA formatted networks. They can be downloaded from the model collection link listed above. Assuming you've saved both a reaction network file and corresponding initial condition file, they can be loaded as</p>
<div class="highlight highlight-source-julia"><pre>initialconditionf <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>PATH/TO/FILE<span class="pl-pds">"</span></span>
networkf <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>PATH/TO/FILE<span class="pl-pds">"</span></span>
rssarn <span class="pl-k">=</span> <span class="pl-c1">loadrxnetwork</span>(<span class="pl-c1">RSSANetwork</span>(), <span class="pl-s"><span class="pl-pds">"</span>RSSARxSys<span class="pl-pds">"</span></span>, initialconditionf, networkf)</pre></div>
<p>Here <code>RSSANetwork</code> specifies the type of the file to parse, and <code>RSSARxSys</code> gives the type of the generated <code>reaction_network</code>. <code>rssarn</code> is again a <code>ParsedReactionNetwork</code>, but only the <code>rn</code> and <code>u₀</code> fields will now be relevant (the remaining fields will be set to <code>nothing</code>).</p>
</article></div>