<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-reactionnetworkimportersjl" class="anchor" aria-hidden="true" href="#reactionnetworkimportersjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>ReactionNetworkImporters.jl</h1>
<p dir="auto"><a href="https://julialang.zulipchat.com/#narrow/stream/279055-sciml-bridged" rel="nofollow"><img src="https://camo.githubusercontent.com/667867fc71b8b3c9ed350ce154a04d38adca002ecfa38edf519284e0365ee553/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f6c6162656c3d5a756c6970266d6573736167653d6368617426636f6c6f723d393535386232266c6162656c436f6c6f723d333839383236" alt="Join the chat at https://julialang.zulipchat.com #sciml-bridged" data-canonical-src="https://img.shields.io/static/v1?label=Zulip&amp;message=chat&amp;color=9558b2&amp;labelColor=389826" style="max-width: 100%;"></a>
<a href="https://docs.sciml.ai/ReactionNetworkImporters/stable/" rel="nofollow"><img src="https://camo.githubusercontent.com/88037a523f970520933771e764f5abff55de9382efc91cd89dd43ef0bb49a85f/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d5363694d4c2d626c75652e737667" alt="Global Docs" data-canonical-src="https://img.shields.io/badge/docs-SciML-blue.svg" style="max-width: 100%;"></a></p>
<p dir="auto"><a href="https://codecov.io/gh/SciML/ReactionNetworkImporters.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/b05ff29ea178cd287fb341c7aafae95f7dbb8fbe68332de944ccd658ad090b05/68747470733a2f2f636f6465636f762e696f2f67682f5363694d4c2f5265616374696f6e4e6574776f726b496d706f72746572732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/SciML/ReactionNetworkImporters.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a>
<a href="https://github.com/SciML/ReactionNetworkImporters.jl/actions?query=workflow%3ACI"><img src="https://github.com/SciML/ReactionNetworkImporters.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a></p>
<p dir="auto"><a href="https://github.com/SciML/ColPrac"><img src="https://camo.githubusercontent.com/2496bdc13cbc9c458dfa19a108b1f333353f62917355a4cdee582bbdf8be43cf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f436f6c507261632d436f6e7472696275746f722532377325323047756964652d626c756576696f6c6574" alt="ColPrac: Contributor's Guide on Collaborative Practices for Community Packages" data-canonical-src="https://img.shields.io/badge/ColPrac-Contributor%27s%20Guide-blueviolet" style="max-width: 100%;"></a>
<a href="https://github.com/SciML/SciMLStyle"><img src="https://camo.githubusercontent.com/3e16f03bad047817fbc07f49307817ed7919ef79c339dc75ad4ce813012c3e0b/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f6c6162656c3d636f64652532307374796c65266d6573736167653d5363694d4c26636f6c6f723d393535386232266c6162656c436f6c6f723d333839383236" alt="SciML Code Style" data-canonical-src="https://img.shields.io/static/v1?label=code%20style&amp;message=SciML&amp;color=9558b2&amp;labelColor=389826" style="max-width: 100%;"></a></p>
<p dir="auto">This package provides importers to load reaction networks into
<a href="https://docs.sciml.ai/Catalyst/stable/" rel="nofollow">Catalyst.jl</a>
<a href="https://docs.sciml.ai/Catalyst/stable/api/catalyst_api/#ModelingToolkit.ReactionSystem" rel="nofollow"><code>ReactionSystem</code>s</a>
from several file formats. Currently it supports loading networks in the
following formats:</p>
<ol dir="auto">
<li>A <em>subset</em> of the BioNetGen .net file format.</li>
<li>Networks represented by dense or sparse substrate and product stoichiometric
matrices.</li>
<li>Networks represented by dense or sparse complex stoichiometric and incidence matrices.</li>
</ol>
<p dir="auto"><a href="https://docs.sciml.ai/SBMLToolkit/stable/" rel="nofollow">SBMLToolkit.jl</a> provides an
alternative for loading SBML files into Catalyst models, offering a much broader
set of supported features. It allows the import of models that include features
such as constant species, boundary condition species, events, constraint
equations and more. SBML files can be generated from many standard modeling
tools, including BioNetGen, COPASI, and Virtual Cell.</p>
<p dir="auto">For information on using the package,
<a href="https://docs.sciml.ai/ReactionNetworkImporters/stable/" rel="nofollow">see the stable documentation</a>. Use the
<a href="https://docs.sciml.ai/ReactionNetworkImporters/dev/" rel="nofollow">in-development documentation</a> for the version of
the documentation which contains the unreleased features.</p>
<h2 dir="auto"><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Examples</h2>
<h3 dir="auto"><a id="user-content-loading-a-bionetgen-net-file" class="anchor" aria-hidden="true" href="#loading-a-bionetgen-net-file"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Loading a BioNetGen .net file</h3>
<p dir="auto">A simple network from the builtin BioNetGen bngl examples is the
<a href="data/repressilator/Repressilator.bngl">repressilator</a>. The <code>generate_network</code>
command in the bngl file outputs a reduced network description, i.e. a
<a href="data/repressilator/Repressilator.net">.net</a> file, which can be loaded into a
Catalyst <code>ReactionSystem</code> as:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using ReactionNetworkImporters
fname = &quot;PATH/TO/Repressilator.net&quot;
prnbng = loadrxnetwork(BNGNetwork(), fname)"><pre><span class="pl-k">using</span> ReactionNetworkImporters
fname <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>PATH/TO/Repressilator.net<span class="pl-pds">"</span></span>
prnbng <span class="pl-k">=</span> <span class="pl-c1">loadrxnetwork</span>(<span class="pl-c1">BNGNetwork</span>(), fname)</pre></div>
<p dir="auto">Here <code>BNGNetwork</code> is a type specifying the file format that is being loaded.
<code>prnbng</code> is a <code>ParsedReactionNetwork</code> structure with the following fields:</p>
<ul dir="auto">
<li><code>rn</code>, a Catalyst <code>ReactionSystem</code></li>
<li><code>uâ‚€</code>, a <code>Dict</code> mapping initial condition symbolic variables to numeric values
and/or symbolic expressions.</li>
<li><code>p</code>, a <code>Dict</code> mapping parameter symbolic variables to numeric values and/or
symbolic expressions.</li>
<li><code>varstonames</code>, a <code>Dict</code> mapping the internal symbolic variable of a species
used in the generated <code>ReactionSystem</code> to a <code>String</code> generated from the name
in the .net file. This is necessary as BioNetGen can generate exceptionally
long species names, involving characters that lead to malformed species names
when used with <code>Catalyst</code>.</li>
<li><code>groupstosyms</code>, a <code>Dict</code> mapping the <code>String</code>s representing names for any
groups defined in the BioNetGen file to the corresponding symbolic variable
representing the <code>ModelingToolkit</code> symbolic observable associated with the
group.</li>
</ul>
<p dir="auto">Given <code>prnbng</code>, we can construct and solve the corresponding ODE model for the
reaction system by</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using OrdinaryDiffEq, Catalyst
rn = prnbng.rn
tf = 100000.0
oprob = ODEProblem(rn, Float64[], (0.0, tf), Float64[])
sol = solve(oprob, Tsit5(), saveat = tf / 1000.0)"><pre><span class="pl-k">using</span> OrdinaryDiffEq, Catalyst
rn <span class="pl-k">=</span> prnbng<span class="pl-k">.</span>rn
tf <span class="pl-k">=</span> <span class="pl-c1">100000.0</span>
oprob <span class="pl-k">=</span> <span class="pl-c1">ODEProblem</span>(rn, Float64[], (<span class="pl-c1">0.0</span>, tf), Float64[])
sol <span class="pl-k">=</span> <span class="pl-c1">solve</span>(oprob, <span class="pl-c1">Tsit5</span>(), saveat <span class="pl-k">=</span> tf <span class="pl-k">/</span> <span class="pl-c1">1000.0</span>)</pre></div>
<p dir="auto">Note that we specify empty parameter and initial condition vectors as these are
already stored in the generated <code>ReactionSystem</code>, <code>rn</code>. A <code>Dict</code> mapping each
symbolic species and parameter to its initial value or symbolic expression can
be obtained using <code>ModelingToolkit.defaults(rn)</code>.</p>
<p dir="auto">See the <a href="https://docs.sciml.ai/Catalyst/stable/" rel="nofollow">Catalyst documentation</a> for how to
generate ODE, SDE, jump and other types of models.</p>
<h3 dir="auto"><a id="user-content-loading-a-matrix-representation" class="anchor" aria-hidden="true" href="#loading-a-matrix-representation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Loading a matrix representation</h3>
<p dir="auto">Catalyst <code>ReactionSystem</code>s can also be constructed from</p>
<ul dir="auto">
<li>substrate and product stoichiometric matrices.</li>
<li>complex stoichiometric and incidence matrices.</li>
</ul>
<p dir="auto">For example, here we both directly build a Catalyst
network using the <code>@reaction_network</code> macro, and then show how to build the same
network from these matrices using <code>ReactionNetworkImporters</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# Catalyst network from the macro:
rs = @reaction_network testnetwork begin
    k1, 2A --&gt; B
    k2, B --&gt; 2A
    k3, A + B --&gt; C
    k4, C --&gt; A + B
    k5, 3C --&gt; 3A
end

# network from basic stoichiometry using ReactionNetworkImporters
@parameters k1 k2 k3 k4 k5
@variables t
@species A(t) B(t) C(t)
species = [A, B, C]
pars = [k1, k2, k3, k4, k5]
substoich = [2 0 1 0 0;
             0 1 1 0 0;
             0 0 0 1 3]
prodstoich = [0 2 0 1 3;
              1 0 0 1 0;
              0 0 1 0 0]
mn = MatrixNetwork(pars, substoich, prodstoich; species = species,
                   params = pars) # a matrix network
prn = loadrxnetwork(mn; name = :testnetwork) # dense version

# test the two networks are the same
@assert rs == prn.rn

# network from reaction complex stoichiometry
stoichmat = [2 0 1 0 0 3;
             0 1 1 0 0 0;
             0 0 0 1 3 0]
incidencemat = [-1 1 0 0 0;
                1 -1 0 0 0;
                0 0 -1 1 0;
                0 0 1 -1 0;
                0 0 0 0 -1;
                0 0 0 0 1]
cmn = ComplexMatrixNetwork(pars, stoichmat, incidencemat; species = species,
                           params = pars)  # a complex matrix network
prn = loadrxnetwork(cmn)

# test the two networks are the same
@assert rs == prn.rn"><pre><span class="pl-c"><span class="pl-c">#</span> Catalyst network from the macro:</span>
rs <span class="pl-k">=</span> <span class="pl-c1">@reaction_network</span> testnetwork <span class="pl-k">begin</span>
    k1, <span class="pl-c1">2</span>A <span class="pl-k">--&gt;</span> B
    k2, B <span class="pl-k">--&gt;</span> <span class="pl-c1">2</span>A
    k3, A <span class="pl-k">+</span> B <span class="pl-k">--&gt;</span> C
    k4, C <span class="pl-k">--&gt;</span> A <span class="pl-k">+</span> B
    k5, <span class="pl-c1">3</span>C <span class="pl-k">--&gt;</span> <span class="pl-c1">3</span>A
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> network from basic stoichiometry using ReactionNetworkImporters</span>
<span class="pl-c1">@parameters</span> k1 k2 k3 k4 k5
<span class="pl-c1">@variables</span> t
<span class="pl-c1">@species</span> <span class="pl-c1">A</span>(t) <span class="pl-c1">B</span>(t) <span class="pl-c1">C</span>(t)
species <span class="pl-k">=</span> [A, B, C]
pars <span class="pl-k">=</span> [k1, k2, k3, k4, k5]
substoich <span class="pl-k">=</span> [<span class="pl-c1">2</span> <span class="pl-c1">0</span> <span class="pl-c1">1</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span>;
             <span class="pl-c1">0</span> <span class="pl-c1">1</span> <span class="pl-c1">1</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span>;
             <span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">1</span> <span class="pl-c1">3</span>]
prodstoich <span class="pl-k">=</span> [<span class="pl-c1">0</span> <span class="pl-c1">2</span> <span class="pl-c1">0</span> <span class="pl-c1">1</span> <span class="pl-c1">3</span>;
              <span class="pl-c1">1</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">1</span> <span class="pl-c1">0</span>;
              <span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">1</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span>]
mn <span class="pl-k">=</span> <span class="pl-c1">MatrixNetwork</span>(pars, substoich, prodstoich; species <span class="pl-k">=</span> species,
                   params <span class="pl-k">=</span> pars) <span class="pl-c"><span class="pl-c">#</span> a matrix network</span>
prn <span class="pl-k">=</span> <span class="pl-c1">loadrxnetwork</span>(mn; name <span class="pl-k">=</span> <span class="pl-c1">:testnetwork</span>) <span class="pl-c"><span class="pl-c">#</span> dense version</span>

<span class="pl-c"><span class="pl-c">#</span> test the two networks are the same</span>
<span class="pl-c1">@assert</span> rs <span class="pl-k">==</span> prn<span class="pl-k">.</span>rn

<span class="pl-c"><span class="pl-c">#</span> network from reaction complex stoichiometry</span>
stoichmat <span class="pl-k">=</span> [<span class="pl-c1">2</span> <span class="pl-c1">0</span> <span class="pl-c1">1</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">3</span>;
             <span class="pl-c1">0</span> <span class="pl-c1">1</span> <span class="pl-c1">1</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span>;
             <span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">1</span> <span class="pl-c1">3</span> <span class="pl-c1">0</span>]
incidencemat <span class="pl-k">=</span> [<span class="pl-k">-</span><span class="pl-c1">1</span> <span class="pl-c1">1</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span>;
                <span class="pl-c1">1</span> <span class="pl-k">-</span><span class="pl-c1">1</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span>;
                <span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-k">-</span><span class="pl-c1">1</span> <span class="pl-c1">1</span> <span class="pl-c1">0</span>;
                <span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">1</span> <span class="pl-k">-</span><span class="pl-c1">1</span> <span class="pl-c1">0</span>;
                <span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-k">-</span><span class="pl-c1">1</span>;
                <span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">1</span>]
cmn <span class="pl-k">=</span> <span class="pl-c1">ComplexMatrixNetwork</span>(pars, stoichmat, incidencemat; species <span class="pl-k">=</span> species,
                           params <span class="pl-k">=</span> pars)  <span class="pl-c"><span class="pl-c">#</span> a complex matrix network</span>
prn <span class="pl-k">=</span> <span class="pl-c1">loadrxnetwork</span>(cmn)

<span class="pl-c"><span class="pl-c">#</span> test the two networks are the same</span>
<span class="pl-c1">@assert</span> rs <span class="pl-k">==</span> prn<span class="pl-k">.</span>rn</pre></div>
<p dir="auto">The basic usages are</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="mn = MatrixNetwork(rateexprs, substoich, prodstoich; species = Any[],
                   params = Any[], t = nothing)
prn = loadrxnetwork(mn::MatrixNetwork)

cmn = ComplexMatrixNetwork(rateexprs, stoichmat, incidencemat; species = Any[],
                           params = Any[], t = nothing)
prn = loadrxnetwork(cmn::ComplexMatrixNetwork)"><pre>mn <span class="pl-k">=</span> <span class="pl-c1">MatrixNetwork</span>(rateexprs, substoich, prodstoich; species <span class="pl-k">=</span> Any[],
                   params <span class="pl-k">=</span> Any[], t <span class="pl-k">=</span> <span class="pl-c1">nothing</span>)
prn <span class="pl-k">=</span> <span class="pl-c1">loadrxnetwork</span>(mn<span class="pl-k">::</span><span class="pl-c1">MatrixNetwork</span>)

cmn <span class="pl-k">=</span> <span class="pl-c1">ComplexMatrixNetwork</span>(rateexprs, stoichmat, incidencemat; species <span class="pl-k">=</span> Any[],
                           params <span class="pl-k">=</span> Any[], t <span class="pl-k">=</span> <span class="pl-c1">nothing</span>)
prn <span class="pl-k">=</span> <span class="pl-c1">loadrxnetwork</span>(cmn<span class="pl-k">::</span><span class="pl-c1">ComplexMatrixNetwork</span>)</pre></div>
<p dir="auto">Here <code>MatrixNetwork</code> and <code>ComplexMatrixNetwork</code> are the types, which select that
we are constructing a substrate/product stoichiometric matrix-based or a
reaction complex matrix-based stoichiometric representation as input. See the
Catalyst.jl API for more
discussion on these matrix representations, and how Catalyst handles symbolic
reaction rate expressions. These two types have the following fields:</p>
<ul dir="auto">
<li>
<p dir="auto"><code>rateexprs</code>, any valid
<a href="https://docs.sciml.ai/Symbolics/stable/" rel="nofollow">Symbolics.jl</a> expression for
the rates, or any basic number type. This can be a hardcoded rate constant
like <code>1.0</code>, a parameter like <code>k1</code> above, or an general Symbolics expression
involving parameters and species like <code>k*A</code>.</p>
</li>
<li>
<p dir="auto">matrix inputs</p>
<ul dir="auto">
<li>
<p dir="auto">For <code>MatrixNetwork</code></p>
<ul dir="auto">
<li><code>substoich</code>, a number of species by number of reactions matrix with entry
<code>(i,j)</code> giving the stoichiometric coefficient of species <code>i</code> as a
substrate in reaction <code>j</code>.</li>
<li><code>prodstoich</code>, a number of species by number of reactions matrix with entry
<code>(i,j)</code> giving the stoichiometric coefficient of species <code>i</code> as a product
in reaction <code>j</code>.</li>
</ul>
</li>
<li>
<p dir="auto">For <code>ComplexMatrixNetwork</code></p>
<ul dir="auto">
<li><code>stoichmat</code>, the complex stoichiometry matrix <a href="https://docs.sciml.ai/Catalyst/stable/api/catalyst_api/#Catalyst.complexstoichmat" rel="nofollow">defined
here</a>.</li>
<li><code>incidencemat</code>, the complex incidence matrix <a href="https://docs.sciml.ai/Catalyst/stable/api/catalyst_api/#Catalyst.reactioncomplexes" rel="nofollow">defined
here</a>.</li>
</ul>
</li>
</ul>
</li>
<li>
<p dir="auto"><code>species</code>, an optional vector of symbolic variables representing each species
in the network. Can be constructed using the Catalyst.jl <code>@species</code> macro.
Each species should be dependent on the same time variable (<code>t</code> in the example
above).</p>
</li>
<li>
<p dir="auto"><code>parameters</code>, a vector of symbolic variables representing each parameter in
the network. Can be constructed with the
<a href="https://docs.sciml.ai/ModelingToolkit/stable/" rel="nofollow">ModelingToolkit.jl</a>
<code>@parameters</code> macro. If no parameters are used it is an optional keyword.</p>
</li>
<li>
<p dir="auto"><code>t</code>, an optional Symbolics.jl variable representing time as the independent
variable of the reaction network. If not provided <code>Catalyst.DEFAULT_IV</code> is
used to determine the default time variable.</p>
</li>
</ul>
<p dir="auto">For both input types, <code>loadrxnetwork</code> returns a <code>ParsedReactionNetwork</code>, <code>prn</code>,
with only the field, <code>prn.rn</code>, filled in. <code>prn.rn</code> corresponds to the generated
<a href="https://docs.sciml.ai/Catalyst/stable/api/catalyst_api/#Catalyst.ReactionSystem" rel="nofollow">Catalyst.jl
<code>ReactionSystem</code></a>
that represents the network.</p>
<p dir="auto">Dispatches are added if <code>substoich</code> and <code>prodstoich</code> both have the type
<code>SparseMatrixCSC</code>in case of <code>MatrixNetwork</code> (or <code>stoichmat</code> and <code>incidencemat</code>
both have the type <code>SparseMatrixCSC</code> in case of <code>ComplexMatrixNetwork</code>), in
which case they are efficiently iterated through using the <code>SparseArrays</code>
interface.</p>
<p dir="auto">If the keyword argument <code>species</code> is not set, the resulting reaction network
will simply name the species <code>S1</code>, <code>S2</code>,..., <code>SN</code> for a system with <code>N</code> total
species. <code>params</code> defaults to an empty vector, so that it does not need to be
set for systems with no parameters.</p>

</article></div>