<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-reactionnetworkimportersjl" class="anchor" aria-hidden="true" href="#reactionnetworkimportersjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>ReactionNetworkImporters.jl</h1>
<p><a href="https://travis-ci.org/isaacsas/ReactionNetworkImporters.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/aff6375d155022c6c1b66e8ae60a8e5749d32a5fbf1cdd9d8ea4764ab29cfe1f/68747470733a2f2f7472617669732d63692e6f72672f69736161637361732f5265616374696f6e4e6574776f726b496d706f72746572732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/isaacsas/ReactionNetworkImporters.jl.svg?branch=master" style="max-width:100%;"></a></p>

<p><em>Note, v0.3.0 and up now generate Catalyst.jl v6 <code>ReactionSystem</code>s. Do not upgrade if you rely on the
previous DiffEqBiological.jl reaction network representation or Catalyst v5.X.X.</em></p>
<p>This package provides importers to load reaction networks into
<a href="https://github.com/SciML/Catalyst.jl">Catalyst.jl</a>
<a href="https://catalyst.sciml.ai/dev/api/catalyst_api/#ModelingToolkit.ReactionSystem" rel="nofollow"><code>ReactionSystem</code>s</a>
from several file formats. Currently it supports loading networks in the
following formats:</p>
<ol>
<li>A <em>subset</em> of the BioNetGen .net file format.</li>
<li>Networks represented by dense or sparse substrate and product stoichiometric
matrices.</li>
</ol>

<hr>
<h2><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Examples</h2>
<h3><a id="user-content-loading-a-bionetgen-net-file" class="anchor" aria-hidden="true" href="#loading-a-bionetgen-net-file"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Loading a BioNetGen .net file</h3>
<p>A simple network from the builtin BioNetGen bngl examples is the
<a href="data/repressilator/Repressilator.bngl">repressilator</a>. The <code>generate_network</code>
command in the bngl file outputs a reduced network description, i.e. a
<a href="data/repressilator/Repressilator.net">.net</a> file, which can be loaded into a
Catalyst <code>ReactionSystem</code> as:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using ReactionNetworkImporters
fname = &quot;PATH/TO/Repressilator.net&quot;
prnbng = loadrxnetwork(BNGNetwork(), fname)
"><pre><span class="pl-k">using</span> ReactionNetworkImporters
fname <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>PATH/TO/Repressilator.net<span class="pl-pds">"</span></span>
prnbng <span class="pl-k">=</span> <span class="pl-c1">loadrxnetwork</span>(<span class="pl-c1">BNGNetwork</span>(), fname)</pre></div>
<p>Here <code>BNGNetwork</code> is a type specifying the file format that is being loaded.
<code>prnbng</code> is a <code>ParsedReactionNetwork</code> structure with the following fields:</p>
<ul>
<li><code>rn</code>, a Catalyst <code>ReactionSystem</code></li>
<li><code>u₀</code>, the initial condition (as a <code>Vector{Float64}</code>)</li>
<li><code>p</code>, the parameter vector (as a <code>Vector{Float64}</code>)</li>
<li><code>paramexprs</code>, the parameter vector as a mix of <code>Numbers</code>, <code>Symbols</code> and
<code>Exprs</code>. <code>p</code> is generated by evaluation of these expressions and symbols.</li>
<li><code>varstonames</code>, a <code>Dict</code> mapping from the internal <code>Symbol</code> of a species used
in the generated <code>ReactionSystem</code> to a <code>Symbol</code> generated from the name in the
.net file. This is necessary as BioNetGen can generate exceptionally long
species names, involving characters that lead to malformed species names when
used with <code>Catalyst</code>.</li>
<li><code>groupstoids</code>, a <code>Dict</code> mapping the <code>Symbol</code>s (i.e. names) for any species
groups defined in the .net file to a vector of indices into <code>u₀</code> where the
corresponding species are stored.</li>
</ul>
<p>Given <code>prnbng</code>, we can construct and solve the corresponding ODE model for the
reaction system by</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using OrdinaryDiffEq, Catalyst
rn = prnbng.rn
tf = 100000.0
oprob = ODEProblem(rn, prnbng.u₀, (0.,tf), prnbng.p)
sol = solve(oprob, Tsit5(), saveat=tf/1000.)
"><pre><span class="pl-k">using</span> OrdinaryDiffEq, Catalyst
rn <span class="pl-k">=</span> prnbng<span class="pl-k">.</span>rn
tf <span class="pl-k">=</span> <span class="pl-c1">100000.0</span>
oprob <span class="pl-k">=</span> <span class="pl-c1">ODEProblem</span>(rn, prnbng<span class="pl-k">.</span>u₀, (<span class="pl-c1">0.</span>,tf), prnbng<span class="pl-k">.</span>p)
sol <span class="pl-k">=</span> <span class="pl-c1">solve</span>(oprob, <span class="pl-c1">Tsit5</span>(), saveat<span class="pl-k">=</span>tf<span class="pl-k">/</span><span class="pl-c1">1000.</span>)</pre></div>
<p>See the <a href="https://catalyst.sciml.ai/dev/" rel="nofollow">Catalyst documentation</a> for how to
generate ODE, SDE, jump and other types of models.</p>
<h3><a id="user-content-loading-a-matrix-representation" class="anchor" aria-hidden="true" href="#loading-a-matrix-representation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Loading a matrix representation</h3>
<p>Catalyst <code>ReactionSystem</code>s can also be constructed from substrate and product
stoichiometric matrices. For example, here we both directly build a Catalyst
network using the <code>@reaction_network</code> macro, and then show how to build the same
network from stoichiometry matrices using <code>ReactionNetworkImporters</code>:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="# Catalyst network from the macro:
rs = @reaction_network begin
    k1, 2A --&gt; B
    k2, B --&gt; 2A
    k3, A + B --&gt; C
    k4, C --&gt; A + B
    k5, 3C --&gt; 3A
end k1 k2 k3 k4 k5

# network from stoichiometry using ReactionNetworkImporters
@parameters t k1 k2 k3 k4 k5
@variables A(t) B(t) C(t)
species = [A,B,C]
pars = [k1,k2,k3,k4,k5]
substoich =[2 0 0;
            0 1 0;
            1 1 0;
            0 0 1;
            0 0 3]'
prodstoich = [0 1 0;
              2 0 0;
              0 0 1;
              1 1 0;
              3 0 0]'
prn = loadrxnetwork(MatrixNetwork(), pars, substoich, prodstoich; 
                    species=species, params=pars)

# test the two networks are the same
@assert rs == prn.rn
"><pre><span class="pl-c"><span class="pl-c">#</span> Catalyst network from the macro:</span>
rs <span class="pl-k">=</span> <span class="pl-c1">@reaction_network</span> <span class="pl-k">begin</span>
    k1, <span class="pl-c1">2</span>A <span class="pl-k">--&gt;</span> B
    k2, B <span class="pl-k">--&gt;</span> <span class="pl-c1">2</span>A
    k3, A <span class="pl-k">+</span> B <span class="pl-k">--&gt;</span> C
    k4, C <span class="pl-k">--&gt;</span> A <span class="pl-k">+</span> B
    k5, <span class="pl-c1">3</span>C <span class="pl-k">--&gt;</span> <span class="pl-c1">3</span>A
<span class="pl-k">end</span> k1 k2 k3 k4 k5

<span class="pl-c"><span class="pl-c">#</span> network from stoichiometry using ReactionNetworkImporters</span>
<span class="pl-c1">@parameters</span> t k1 k2 k3 k4 k5
<span class="pl-c1">@variables</span> <span class="pl-c1">A</span>(t) <span class="pl-c1">B</span>(t) <span class="pl-c1">C</span>(t)
species <span class="pl-k">=</span> [A,B,C]
pars <span class="pl-k">=</span> [k1,k2,k3,k4,k5]
substoich <span class="pl-k">=</span>[<span class="pl-c1">2</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span>;
            <span class="pl-c1">0</span> <span class="pl-c1">1</span> <span class="pl-c1">0</span>;
            <span class="pl-c1">1</span> <span class="pl-c1">1</span> <span class="pl-c1">0</span>;
            <span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">1</span>;
            <span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">3</span>]'
prodstoich <span class="pl-k">=</span> [<span class="pl-c1">0</span> <span class="pl-c1">1</span> <span class="pl-c1">0</span>;
              <span class="pl-c1">2</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span>;
              <span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">1</span>;
              <span class="pl-c1">1</span> <span class="pl-c1">1</span> <span class="pl-c1">0</span>;
              <span class="pl-c1">3</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span>]'
prn <span class="pl-k">=</span> <span class="pl-c1">loadrxnetwork</span>(<span class="pl-c1">MatrixNetwork</span>(), pars, substoich, prodstoich; 
                    species<span class="pl-k">=</span>species, params<span class="pl-k">=</span>pars)

<span class="pl-c"><span class="pl-c">#</span> test the two networks are the same</span>
<span class="pl-c1">@assert</span> rs <span class="pl-k">==</span> prn<span class="pl-k">.</span>rn</pre></div>
<p>The basic usage is</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="prn = loadrxnetwork(MatrixNetwork(),  
                    rateexprs::AbstractVector, 
                    substoich::AbstractMatrix, 
                    prodstoich::AbstractMatrix; 
                    species::AbstractVector=Operation[], 
                    params::AbstractVector=Operation[])
"><pre>prn <span class="pl-k">=</span> <span class="pl-c1">loadrxnetwork</span>(<span class="pl-c1">MatrixNetwork</span>(),  
                    rateexprs<span class="pl-k">::</span><span class="pl-c1">AbstractVector</span>, 
                    substoich<span class="pl-k">::</span><span class="pl-c1">AbstractMatrix</span>, 
                    prodstoich<span class="pl-k">::</span><span class="pl-c1">AbstractMatrix</span>; 
                    species<span class="pl-k">::</span><span class="pl-c1">AbstractVector</span><span class="pl-k">=</span>Operation[], 
                    params<span class="pl-k">::</span><span class="pl-c1">AbstractVector</span><span class="pl-k">=</span>Operation[])</pre></div>
<p>Here <code>MatrixNetwork()</code> is the dispatch type, which selects that we are
constructing a matrix-based stoichiometric representation as input. The other
parameters are:</p>
<ul>
<li><code>rateexprs</code> - Any valid <code>ModelingToolkit.Operation</code>s for the rates, or basic
number types. This can be a hardcoded rate constant like <code>1.0</code>, a a parameter
like <code>k1</code> above, or an <code>Operation</code> involving parameters and species like
<code>k*A</code>. Note, the reaction <code>A+B --&gt; C</code> with rate <code>k*B</code> would have rate law
<code>k*A*B^2</code>.</li>
<li><code>substoich</code> - A number of species by number of reactions matrix with entry
<code>(i,j)</code> giving the stoichiometric coefficient of species <code>i</code> as a substrate in
reaction <code>j</code>.</li>
<li><code>prodstoich</code> - A number of species by number of reactions matrix with entry
<code>(i,j)</code> giving the stoichiometric coefficient of species <code>i</code> as a product in
reaction <code>j</code>.</li>
<li><code>species</code> - Optional <code>ModelingToolkit.Operation</code>s representing each species in
the network.</li>
<li><code>parameters</code> - Optional <code>ModelingToolkit.Operation</code>s representing each
parameter in the network.</li>
</ul>
<p><code>prn</code> is again a <code>ParsedReactionNetwork</code>, with only the <code>reaction_network</code>
field, <code>prn.rn</code>, defined.</p>
<p>A dispatch is added if <code>substoich</code> and <code>prodstoich</code> both have the type
<code>SparseMatrixCSC</code>, in which case they are efficiently iterated through using the
<code>SparseArrays</code> interface.</p>
<p>If the keyword argument <code>species</code> is not set, the resulting reaction network
will simply name the species <code>S1</code>, <code>S2</code>,..., <code>SN</code> for a system with <code>N</code> total
species. <code>params</code> defaults to an empty vector of <code>Operation</code>s, so that it does not
need to be set for systems with no parameters.</p>

</article></div>