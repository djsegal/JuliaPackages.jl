<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-qwtjl" class="anchor" aria-hidden="true" href="#qwtjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Qwt.jl</h1>
<h4><a id="user-content-author-thomas-breloff-tbreloff" class="anchor" aria-hidden="true" href="#author-thomas-breloff-tbreloff"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Author: Thomas Breloff (@tbreloff)</h4>
<p><strong>NOTE</strong>: I recommend using <a href="https://github.com/tbreloff/Plots.jl.git">Plots.jl</a> as the plotting interface for Qwt.</p>
<p>Plotting using PyQt/PyQwt and a clean interface for 2D scenes using QCanvas.  Add to PyQt GUIs and compose many widgets
together for complex visualizations.</p>
<h2><a id="user-content-install" class="anchor" aria-hidden="true" href="#install"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Install</h2>
<ul>
<li>Install python and PyQt4</li>
<li>Install PyQwt.  If you can't find a bundled package through brew, yum, apt-get, etc:
<ul>
<li>Download tar from: <a href="http://sourceforge.net/projects/pyqwt/files/pyqwt5/" rel="nofollow">http://sourceforge.net/projects/pyqwt/files/pyqwt5/</a></li>
<li>cd &lt;download_location&gt;</li>
<li>tar -zxvf PyQwt-5.2.0.tar.gz</li>
<li>cd PyQwt-5.2.1/configure</li>
<li>python configure.py -Q ../qwt-5.2</li>
<li>make</li>
<li>sudo make install</li>
</ul>
</li>
</ul>
<p><strong>Tip</strong>: On OS X, <code>brew install pyqt</code> and <code>brew install pyqwt</code> might be all you need.</p>
<h2><a id="user-content-zooming" class="anchor" aria-hidden="true" href="#zooming"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Zooming</h2>
<ul>
<li>Click and drag with the left mouse button to select a rectangle to zoom into</li>
<li>To undo 1 zoom, hold ALT and click the right mouse button</li>
<li>To redo 1 zoom, hold SHIFT and click the right mouse button</li>
<li>To reset the zoom stack, click the middle mouse button</li>
</ul>
<h2><a id="user-content-panning" class="anchor" aria-hidden="true" href="#panning"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Panning</h2>
<ul>
<li>Click and drag with the right mouse button</li>
</ul>
<h2><a id="user-content-other" class="anchor" aria-hidden="true" href="#other"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Other</h2>
<ul>
<li>Click on legend labels to hide/show individual series</li>
</ul>
<h2><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Examples:</h2>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="using Qwt

# simple 2D line plot
plot(1:10)

# these are equivalent
x = randn(100) * 5
y = sin(x)
plot(x, y, linetype=:dots)
scatter(x, y)

# create a heatmap (and optionally fine-tune coloring)
# heatmap_n is the number of bins on each axis
# heatmap_c is the cutoff points of the color range
heatmap(randn(10000), randn(10000); heatmap_n = 20, heatmap_c = (0.05, 0.3))

# pass in vectors or matrices, and it should slice it up properly
Y = rand(100,9)  												# matrix with series in columns
subplot(Y) 															# creates a 3x3 grid of subplots, (one per column)
subplot(rand(100), Y, linetype=:dots)		# same, but has shared x-data
plot(Y)																	# plots 5 lines on the same axis (one per column)

# use both axes
plot(Y[:,1:2], axiss=[:left, :right], colors=[:blue, :green])

# you could also add it after the fact
y1, y2 = Y[:,1], Y[:,2]
plt = plot(y1, color = :blue)
oplot(plt, y2, axis = :right, color = :green)

# there are lots of things to adjust
plot(y1, axis = :right,
				 color = :red,
				 label = &quot;my line&quot;,
				 width = 5,
				 linetype = :step,
				 linestyle = :dashdot,
				 marker = :ellipse,
				 markercolor = :cyan,
				 markersize = 20,
				 title = &quot;my title&quot;,
				 xlabel = &quot;my x label&quot;,
				 ylabel = &quot;my y label&quot;
				 yrightlabel = &quot;my right axis y label&quot;,
				 reg = true  # adds a regression line for each series
				 ) 

# and anything can be pluralized by adding an &quot;s&quot; to the end and passing a vector
plot(Y[:,1:2], colors = [:red, :blue])

# add to a plot in real time
plt = plot([0],[0])
for x in 0:0.1:100
	push!(plt, 1, x, sin(x))
	refresh(plt)
	sleep(0.01)
end


# save a png
savepng(plt, &quot;/tmp/png/plot0001.png&quot;)


# save an animated gif (requires ffmpeg... saves to $dir/out.gif)
empty!(plt)
a = animation(plt, &quot;/tmp/png&quot;)
for x in 0:0.1:5
	push!(plt, 1, x, sin(x))
	refresh(plt)
	saveframe(a)
end
makegif(a)

"><pre><code>using Qwt

# simple 2D line plot
plot(1:10)

# these are equivalent
x = randn(100) * 5
y = sin(x)
plot(x, y, linetype=:dots)
scatter(x, y)

# create a heatmap (and optionally fine-tune coloring)
# heatmap_n is the number of bins on each axis
# heatmap_c is the cutoff points of the color range
heatmap(randn(10000), randn(10000); heatmap_n = 20, heatmap_c = (0.05, 0.3))

# pass in vectors or matrices, and it should slice it up properly
Y = rand(100,9)  												# matrix with series in columns
subplot(Y) 															# creates a 3x3 grid of subplots, (one per column)
subplot(rand(100), Y, linetype=:dots)		# same, but has shared x-data
plot(Y)																	# plots 5 lines on the same axis (one per column)

# use both axes
plot(Y[:,1:2], axiss=[:left, :right], colors=[:blue, :green])

# you could also add it after the fact
y1, y2 = Y[:,1], Y[:,2]
plt = plot(y1, color = :blue)
oplot(plt, y2, axis = :right, color = :green)

# there are lots of things to adjust
plot(y1, axis = :right,
				 color = :red,
				 label = "my line",
				 width = 5,
				 linetype = :step,
				 linestyle = :dashdot,
				 marker = :ellipse,
				 markercolor = :cyan,
				 markersize = 20,
				 title = "my title",
				 xlabel = "my x label",
				 ylabel = "my y label"
				 yrightlabel = "my right axis y label",
				 reg = true  # adds a regression line for each series
				 ) 

# and anything can be pluralized by adding an "s" to the end and passing a vector
plot(Y[:,1:2], colors = [:red, :blue])

# add to a plot in real time
plt = plot([0],[0])
for x in 0:0.1:100
	push!(plt, 1, x, sin(x))
	refresh(plt)
	sleep(0.01)
end


# save a png
savepng(plt, "/tmp/png/plot0001.png")


# save an animated gif (requires ffmpeg... saves to $dir/out.gif)
empty!(plt)
a = animation(plt, "/tmp/png")
for x in 0:0.1:5
	push!(plt, 1, x, sin(x))
	refresh(plt)
	saveframe(a)
end
makegif(a)

</code></pre></div>
</article></div>