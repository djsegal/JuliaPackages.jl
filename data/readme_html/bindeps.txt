<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-bindepsjl" class="anchor" aria-hidden="true" href="#bindepsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>BinDeps.jl</h1>
<p dir="auto"><a href="http://pkg.julialang.org/detail/BinDeps" rel="nofollow"><img src="https://camo.githubusercontent.com/27c656dd72bedcdb7cc9390b04f392404d3c1cc69da2fa425c1090a78041a170/687474703a2f2f706b672e6a756c69616c616e672e6f72672f6261646765732f42696e446570735f302e362e737667" alt="BinDeps" data-canonical-src="http://pkg.julialang.org/badges/BinDeps_0.6.svg" style="max-width: 100%;"></a>
<a href="https://travis-ci.org/JuliaPackaging/BinDeps.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/3cfb2af79edd9a7d7515d3e2e466675214a589d4d380a36e4ae323fa464ee191/68747470733a2f2f7472617669732d63692e6f72672f4a756c69615061636b6167696e672f42696e446570732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Travis" data-canonical-src="https://travis-ci.org/JuliaPackaging/BinDeps.jl.svg?branch=master" style="max-width: 100%;"></a>
<a href="https://ci.appveyor.com/project/nalimilan/bindeps-jl/branch/master" rel="nofollow"><img src="https://camo.githubusercontent.com/3ec392048a6fdeafc0e747876ed8abf096a695de1bd0293726751b3832aa3e73/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f6769746875622f6a756c69616c616e672f62696e646570732e6a6c3f6272616e63683d6d6173746572267376673d74727565" alt="AppVeyor" data-canonical-src="https://ci.appveyor.com/api/projects/status/github/julialang/bindeps.jl?branch=master&amp;svg=true" style="max-width: 100%;"></a></p>
<p dir="auto">Easily build binary dependencies for Julia packages</p>
<h1 dir="auto"><a id="user-content-faq" class="anchor" aria-hidden="true" href="#faq"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>FAQ</h1>
<p dir="auto">Since there seems to be a lot of confusion surrounding the package
systems and the role of this package, before we get started looking at
the actual package, I want to answer a few common questions:</p>
<ul dir="auto">
<li>
<p dir="auto">What is <code>BinDeps</code>?</p>
<p dir="auto"><code>BinDeps</code> is a package that provides a collection of tools to build binary dependencies for Julia packages.</p>
</li>
<li>
<p dir="auto">Do I need to use this package if I want to build binary
dependencies for my Julia package?</p>
<p dir="auto">Absolutely not! The system is designed to give the maximum amount
of freedom to the package author in order to be able to address any
situation that one may encounter in the real world. This is achieved
by simply evaluating a file called <code>deps/build.jl</code> (if it exists) in
a package whenever it is installed or updated. Thus the following
might perhaps be the simplest possible useful <code>build.jl</code> script
one can imagine:</p>
</li>
</ul>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="run(`make`)"><pre><span class="pl-c1">run</span>(<span class="pl-s"><span class="pl-pds">`</span>make<span class="pl-pds">`</span></span>)</pre></div>
<ul dir="auto">
<li>
<p dir="auto">I want to use BinDeps, but it is missing some functionality I need
(e.g. a package manager)</p>
<p dir="auto">Since BinDeps is written in Julia it is extensible with the same ease as the rest of Julia. In particular, defining new behavior,
e.g. for adding a new package manager, consists of little more than
adding a type and implementing a couple of methods (see the section on Interfaces) or the <a href="https://github.com/JuliaLang/WinRPM.jl">WinRPM package</a> for an example implementation.</p>
</li>
<li>
<p dir="auto">I like the runtime features that BinDeps provides, but I don't
really want to use its build time capabilities. What do you
recommend?</p>
<p dir="auto">The easiest way to do this is probably just to declare a
<code>BuildProcess</code> for all your declared dependencies. This way, your
custom build process will be called whenever there is an unsatisfied
library dependency and you may still use the BinDeps runtime
features.</p>
</li>
<li>
<p dir="auto">Is there anything I should keep in mind when extending BinDeps or
writing my own build process?</p>
<p dir="auto">BinDeps uses a fairly standard set of directories by default and if
possible, using the same directory structure is advised. Currently
the specified directory structure is:</p>
</li>
</ul>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="deps/
    build.jl        # This is your build file
    downloads/      # Store any binary/source downloads here
    builds/
        dep1/       # out-of-tree build for dep1, is possible
        dep2/       # out-of-tree build for dep2, is possible
        ...
    src/
        dep1/       # Source code for dep1
        dep2/       # Source code for dep2
        ...
    usr/            # &quot;prefix&quot;, install your binaries here
        lib/        # Dynamic libraries (yes even on Windows)
        bin/        # Excecutables
        include/    # Headers
        ..."><pre class="notranslate"><code>deps/
    build.jl        # This is your build file
    downloads/      # Store any binary/source downloads here
    builds/
        dep1/       # out-of-tree build for dep1, is possible
        dep2/       # out-of-tree build for dep2, is possible
        ...
    src/
        dep1/       # Source code for dep1
        dep2/       # Source code for dep2
        ...
    usr/            # "prefix", install your binaries here
        lib/        # Dynamic libraries (yes even on Windows)
        bin/        # Excecutables
        include/    # Headers
        ...
</code></pre></div>
<h1 dir="auto"><a id="user-content-the-high-level-interface---declaring-dependencies" class="anchor" aria-hidden="true" href="#the-high-level-interface---declaring-dependencies"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>The high level interface - Declaring dependencies</h1>
<p dir="auto">To get a feel for the high level interface provided by BinDeps, have a look at
real-world examples. The <a href="https://github.com/jiahao/GSL.jl/blob/master/deps/build.jl">build script from the GSL pakage</a>
illustrates the simple case where only one library is needed. On the other hand, the
<a href="https://github.com/JuliaLang/Cairo.jl/blob/master/deps/build.jl">build script from the Cairo package</a>
uses almost all the features that BinDeps currently provides and offers a complete overview. Let's take
it apart, to see exactly what's going on.</p>
<p dir="auto">As you can see Cairo depends on a lot of libraries that all need to be managed by this build script.
Every one of these library dependencies is introduced by the <code>library_dependency</code> function. The only required argument
is the name of the library, so the following would be an entirely valid call:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="foo = library_dependency(&quot;libfoo&quot;)"><pre>foo <span class="pl-k">=</span> <span class="pl-c1">library_dependency</span>(<span class="pl-s"><span class="pl-pds">"</span>libfoo<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">However, you'll most likely quickly run into the issue that this library is named differently on different systems.
(If this happens, you will receive an error such as <code>Provider Binaries failed to satisfy dependency libfoo</code>.)
This is
why BinDeps provides the handy <code>aliases</code> keyword argument. So suppose our library is sometimes known as <code>libfoo.so</code>, but
other times as <code>libfoo-1.so</code> or <code>libfoo-1.0.0.dylib</code> or even <code>libbar.dll</code> on windows, because the authors of the library
decided to punish windows users. In either case, we can easily declare all these in our library dependency:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="foo = library_dependency(&quot;libfoo&quot;, aliases = [&quot;libfoo&quot;, &quot;libfoo-1&quot;, &quot;libfoo-1.0.0&quot;, &quot;libbar&quot;])"><pre>foo <span class="pl-k">=</span> <span class="pl-c1">library_dependency</span>(<span class="pl-s"><span class="pl-pds">"</span>libfoo<span class="pl-pds">"</span></span>, aliases <span class="pl-k">=</span> [<span class="pl-s"><span class="pl-pds">"</span>libfoo<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>libfoo-1<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>libfoo-1.0.0<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>libbar<span class="pl-pds">"</span></span>])</pre></div>
<p dir="auto">So far so good!
There are a couple of other keyword arguments that are currently implemented:</p>
<ul dir="auto">
<li><code>os = OS_NAME</code>
Limits this dependency to certain operating systems. The same could be achieved by using the OS-specific macro, but
this setting applies to all uses of this dependency and avoids having to wrap all uses of this dependency in macros.
Note that the <code>os</code> parameter must match the value of <code>Base.OS_NAME</code> on the target platform with the special exception that
<code>:Unix</code> matches all Unix-like platforms (e.g. <code>Linux</code>, <code>Mac OS X</code>, <code>FreeBSD</code>)
As an example, consider this line from the Cairo build script:</li>
</ul>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="gettext = library_dependency(&quot;gettext&quot;, aliases = [&quot;libgettext&quot;, &quot;libgettextlib&quot;], os = :Unix)"><pre>gettext <span class="pl-k">=</span> <span class="pl-c1">library_dependency</span>(<span class="pl-s"><span class="pl-pds">"</span>gettext<span class="pl-pds">"</span></span>, aliases <span class="pl-k">=</span> [<span class="pl-s"><span class="pl-pds">"</span>libgettext<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>libgettextlib<span class="pl-pds">"</span></span>], os <span class="pl-k">=</span> <span class="pl-c1">:Unix</span>)</pre></div>
<ul dir="auto">
<li><code>depends = [dep1, dep2]</code>
Currently unused, but in the future will be used to keep track of the dependency graph between binary dependencies to allow parallel builds. E.g.:</li>
</ul>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="cairo = library_dependency(&quot;cairo&quot;, aliases = [&quot;libcairo-2&quot;, &quot;libcairo&quot;], depends = [gobject, fontconfig, libpng])"><pre>cairo <span class="pl-k">=</span> <span class="pl-c1">library_dependency</span>(<span class="pl-s"><span class="pl-pds">"</span>cairo<span class="pl-pds">"</span></span>, aliases <span class="pl-k">=</span> [<span class="pl-s"><span class="pl-pds">"</span>libcairo-2<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>libcairo<span class="pl-pds">"</span></span>], depends <span class="pl-k">=</span> [gobject, fontconfig, libpng])</pre></div>
<ul dir="auto">
<li>
<p dir="auto"><code>runtime::Bool</code>
Whether or not to consider this a runtime dependency. If false, its absence
will not trigger an error at runtime (and it will not be loaded), but if it
cannot be found at buildtime it will be installed. This is useful for build-time
dependencies of other binary dependencies.</p>
</li>
<li>
<p dir="auto"><code>validate::Function</code>
You may pass a function to validate whether or not a certain library is usable,
e.g. whether or not has the correct version. To do so, pass a function that takes
(name,handle) as an argument and returns <code>true</code> if the library is usable and <code>false</code>
it not. The <code>name</code> argument is either an absolute path or the library name if it is a
global system library, while the handle is a handle that may be passed to <code>dlsym</code> to
check library symbols or the return value of a function.
Should the validation return false for a library that was installed by a provider, the
provider will be instructed to force a rebuild.</p>
</li>
</ul>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="function validate_cairo_version(name,handle)
    f = Libdl.dlsym_e(handle, &quot;cairo_version&quot;)
    f == C_NULL &amp;&amp; return false
    v = ccall(f, Int32,())
    return v &gt; 10800
end
...
cairo = library_dependency(&quot;cairo&quot;, aliases = [&quot;libcairo-2&quot;, &quot;libcairo&quot;], validate = validate_cairo_version)"><pre><span class="pl-k">function</span> <span class="pl-en">validate_cairo_version</span>(name,handle)
    f <span class="pl-k">=</span> Libdl<span class="pl-k">.</span><span class="pl-c1">dlsym_e</span>(handle, <span class="pl-s"><span class="pl-pds">"</span>cairo_version<span class="pl-pds">"</span></span>)
    f <span class="pl-k">==</span> <span class="pl-c1">C_NULL</span> <span class="pl-k">&amp;&amp;</span> <span class="pl-k">return</span> <span class="pl-c1">false</span>
    v <span class="pl-k">=</span> <span class="pl-c1">ccall</span>(f, Int32,())
    <span class="pl-k">return</span> v <span class="pl-k">&gt;</span> <span class="pl-c1">10800</span>
<span class="pl-k">end</span>
<span class="pl-k">...</span>
cairo <span class="pl-k">=</span> <span class="pl-c1">library_dependency</span>(<span class="pl-s"><span class="pl-pds">"</span>cairo<span class="pl-pds">"</span></span>, aliases <span class="pl-k">=</span> [<span class="pl-s"><span class="pl-pds">"</span>libcairo-2<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>libcairo<span class="pl-pds">"</span></span>], validate <span class="pl-k">=</span> validate_cairo_version)</pre></div>
<p dir="auto">Other keyword arguments will most likely be added as necessary.</p>
<h1 dir="auto"><a id="user-content-the-high-level-interface---declaring-build-mechanisms" class="anchor" aria-hidden="true" href="#the-high-level-interface---declaring-build-mechanisms"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>The high level interface - Declaring build mechanisms</h1>
<p dir="auto">Alright, now that we have declared all the dependencies that we
need let's tell BinDeps how to build them. One of the easiest ways
to do so is to use the system package manager. So suppose we have
defined the following dependencies:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="foo = library_dependency(&quot;libfoo&quot;)
baz = library_dependency(&quot;libbaz&quot;)"><pre>foo <span class="pl-k">=</span> <span class="pl-c1">library_dependency</span>(<span class="pl-s"><span class="pl-pds">"</span>libfoo<span class="pl-pds">"</span></span>)
baz <span class="pl-k">=</span> <span class="pl-c1">library_dependency</span>(<span class="pl-s"><span class="pl-pds">"</span>libbaz<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">Let's suppose that these libraries are available in the <code>libfoo-dev</code> and <code>libbaz-dev</code>
in apt-get and that both libraries are installed by the <code>baz</code> or the <code>baz1</code> yum package, and the <code>baz</code> pacman package. We may
declare this as follows:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="provides(AptGet, Dict(&quot;libfoo-dev&quot; =&gt; foo, &quot;libbaz-dev&quot; =&gt; baz))
provides(Yum, [&quot;baz&quot;, &quot;baz1&quot;], [foo, baz])
provides(Pacman, &quot;baz&quot;, [foo, baz])"><pre><span class="pl-c1">provides</span>(AptGet, <span class="pl-c1">Dict</span>(<span class="pl-s"><span class="pl-pds">"</span>libfoo-dev<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> foo, <span class="pl-s"><span class="pl-pds">"</span>libbaz-dev<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> baz))
<span class="pl-c1">provides</span>(Yum, [<span class="pl-s"><span class="pl-pds">"</span>baz<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>baz1<span class="pl-pds">"</span></span>], [foo, baz])
<span class="pl-c1">provides</span>(Pacman, <span class="pl-s"><span class="pl-pds">"</span>baz<span class="pl-pds">"</span></span>, [foo, baz])</pre></div>
<p dir="auto">One may remember the <code>provides</code> function by thinking <code>AptGet</code> <code>provides</code> the dependencies <code>foo</code> and <code>baz</code>.</p>
<p dir="auto">The basic signature of the provides function is</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="provides(Provider, data, dependency, options...)"><pre><span class="pl-c1">provides</span>(Provider, data, dependency, options<span class="pl-k">...</span>)</pre></div>
<p dir="auto">where <code>data</code> is provider-specific (e.g. a string in all of the package manager
cases) and <code>dependency</code> is the return value from <code>library_dependency</code>. As you saw
above multiple definitions may be combined into one function call as such:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="provides(Provider, Dict(data1=&gt;dep1, data2=&gt;dep2), options...)"><pre><span class="pl-c1">provides</span>(Provider, <span class="pl-c1">Dict</span>(data1<span class="pl-k">=&gt;</span>dep1, data2<span class="pl-k">=&gt;</span>dep2), options<span class="pl-k">...</span>)</pre></div>
<p dir="auto">which is equivalent to (and in fact will be internally dispatched) to:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="provides(Provider, data1, dep1, options...)
provides(Provider, data2, dep2, options...)"><pre><span class="pl-c1">provides</span>(Provider, data1, dep1, options<span class="pl-k">...</span>)
<span class="pl-c1">provides</span>(Provider, data2, dep2, options<span class="pl-k">...</span>)</pre></div>
<p dir="auto">If one provide satisfied multiple dependencies simultaneously, <code>dependency</code> may
also be an array of dependencies (as in the <code>Yum</code> and <code>Pacman</code> cases above).</p>
<p dir="auto">There are also several builtin options. Some of them are:</p>
<ul dir="auto">
<li>
<p dir="auto"><code>os = OS_NAME # e.g. :Linux, :Windows, :Darwin</code></p>
<p dir="auto">This provider can only satisfy the library dependency on the specified <code>os</code>.
This argument takes has the same syntax as the <code>os</code> keyword argument to
<code>library_dependency</code>.</p>
</li>
<li>
<p dir="auto"><code>installed_libpath = "path"</code></p>
<p dir="auto">If the provider installs a library dependency to someplace other than the
standard search paths, that location can be specified here.</p>
</li>
<li>
<p dir="auto"><code>SHA = "sha"</code></p>
</li>
</ul>
<p dir="auto">Provides a SHA-256 checksum to validate a downloaded source or binary file against.</p>
<h1 dir="auto"><a id="user-content-the-high-level-interface---built-in-providers" class="anchor" aria-hidden="true" href="#the-high-level-interface---built-in-providers"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>The high level interface - built in providers</h1>
<p dir="auto">We have already seen the <code>AptGet</code> and <code>Yum</code> providers, which all take a string naming the package as
their data argument. The other build-in providers are:</p>
<ul dir="auto">
<li>
<p dir="auto">Sources</p>
<p dir="auto">Takes a <code>URI</code> object as its data argument and declared that the sources may be
downloaded from the provided URI. This dependency is special, because it's
success does not automatically mark the build as succeeded (in BinDeps
terminology, it's a "helper"). By default this provider expects the unpacked
directory name to be that of the archive downloaded. If that is not the case,
you may use the :unpacked_dir option to specify the name of the unpacked directory,
e.g.</p>
</li>
</ul>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="provides(Sources,URI(&quot;http://libvirt.org/sources/libvirt-1.1.1-rc2.tar.gz&quot;), libvirt,
    unpacked_dir = &quot;libvirt-1.1.1&quot;)"><pre><span class="pl-c1">provides</span>(Sources,<span class="pl-c1">URI</span>(<span class="pl-s"><span class="pl-pds">"</span>http://libvirt.org/sources/libvirt-1.1.1-rc2.tar.gz<span class="pl-pds">"</span></span>), libvirt,
    unpacked_dir <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>libvirt-1.1.1<span class="pl-pds">"</span></span>)</pre></div>
<ul dir="auto">
<li>
<p dir="auto">Binaries</p>
<p dir="auto">If given a <code>URI</code> object as its data argument, indicates that the binaries may be
downloaded from the provided URI. It is assumed that the binaries unpack the
libraries into <code>usr/lib</code>. If given a <code>String</code> as its data argument, provides
a custom search path for the binaries. A typical use might be to allow the
user to provide a custom path by using an environmental variable.</p>
</li>
<li>
<p dir="auto">BuildProcess</p>
<p dir="auto">Common super class of various kind of build processes. The exact behavior depends on the <code>data</code> argument. Some of the currently supported build processes are <code>Autotools</code> and <code>SimpleBuild</code>:</p>
</li>
<li>
<p dir="auto">Autotools</p>
<p dir="auto">A subclass of BuildProcess that that downloads the sources (as declared by the
"Sources" provider) and attempts to  install using Autotools. There is a plethora of options to
change the behavior of  this command. See the appropriate section of the manual (or even better,
read the code) for more details on the available options.</p>
</li>
</ul>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Autotools(; options...)"><pre><span class="pl-c1">Autotools</span>(; options<span class="pl-k">...</span>)</pre></div>
<ul dir="auto">
<li>
<p dir="auto">SimpleBuild</p>
<p dir="auto">A subclass of BuildProcess that takes any object that's part of the low-level interface and
could be passed to <code>run</code> and simply executes that command.</p>
</li>
</ul>
<h1 dir="auto"><a id="user-content-the-high-level-interface---loading-dependencies" class="anchor" aria-hidden="true" href="#the-high-level-interface---loading-dependencies"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>The high level interface - Loading dependencies</h1>
<p dir="auto">To load dependencies without a runtime dependence on BinDeps, place code like the following
near the start of the Package's primary file. Don't forget to change the error message to
reflect the name of the package.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="const depsfile = joinpath(dirname(@__FILE__), &quot;..&quot;, &quot;deps&quot;, &quot;deps.jl&quot;)
if isfile(depsfile)
    include(depsfile)
else
    error(&quot;HDF5 not properly installed. Please run Pkg.build(\&quot;HDF5\&quot;) then restart Julia.&quot;)
end"><pre><span class="pl-k">const</span> depsfile <span class="pl-k">=</span> <span class="pl-c1">joinpath</span>(<span class="pl-c1">dirname</span>(<span class="pl-c1">@__FILE__</span>), <span class="pl-s"><span class="pl-pds">"</span>..<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>deps<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>deps.jl<span class="pl-pds">"</span></span>)
<span class="pl-k">if</span> <span class="pl-c1">isfile</span>(depsfile)
    <span class="pl-c1">include</span>(depsfile)
<span class="pl-k">else</span>
    <span class="pl-c1">error</span>(<span class="pl-s"><span class="pl-pds">"</span>HDF5 not properly installed. Please run Pkg.build(<span class="pl-cce">\"</span>HDF5<span class="pl-cce">\"</span>) then restart Julia.<span class="pl-pds">"</span></span>)
<span class="pl-k">end</span></pre></div>
<p dir="auto">This will make all your libraries available as variables named by the names you gave the
dependency. E.g. if you declared a dependency as</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="library_dependency(&quot;libfoo&quot;)"><pre><span class="pl-c1">library_dependency</span>(<span class="pl-s"><span class="pl-pds">"</span>libfoo<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">The <code>libfoo</code> variable will now contain a reference to that library that may be passed
to <code>ccall</code> or similar functions.</p>
<h1 dir="auto"><a id="user-content-the-low-level-interface" class="anchor" aria-hidden="true" href="#the-low-level-interface"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>The low level interface</h1>
<p dir="auto">The low level interface provides a number of utilities to write cross platform
build scripts. It looks something like this (from the Cairo build script):</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@build_steps begin
    GetSources(libpng)
    CreateDirectory(pngbuilddir)
    @build_steps begin
        ChangeDirectory(pngbuilddir)
        FileRule(joinpath(prefix,&quot;lib&quot;,&quot;libpng15.dll&quot;),@build_steps begin
            `cmake -DCMAKE_INSTALL_PREFIX=&quot;$prefix&quot; -G&quot;MSYS Makefiles&quot; $pngsrcdir`
            `make`
            `cp libpng*.dll $prefix/lib`
            `cp libpng*.a $prefix/lib`
            `cp libpng*.pc $prefix/lib/pkgconfig`
            `cp pnglibconf.h $prefix/include`
            `cp $pngsrcdir/png.h $prefix/include`
            `cp $pngsrcdir/pngconf.h $prefix/include`
        end)
    end
end"><pre><span class="pl-c1">@build_steps</span> <span class="pl-k">begin</span>
    <span class="pl-c1">GetSources</span>(libpng)
    <span class="pl-c1">CreateDirectory</span>(pngbuilddir)
    <span class="pl-c1">@build_steps</span> <span class="pl-k">begin</span>
        <span class="pl-c1">ChangeDirectory</span>(pngbuilddir)
        <span class="pl-c1">FileRule</span>(<span class="pl-c1">joinpath</span>(prefix,<span class="pl-s"><span class="pl-pds">"</span>lib<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>libpng15.dll<span class="pl-pds">"</span></span>),<span class="pl-c1">@build_steps</span> <span class="pl-k">begin</span>
            <span class="pl-s"><span class="pl-pds">`</span>cmake -DCMAKE_INSTALL_PREFIX="$prefix" -G"MSYS Makefiles" $pngsrcdir<span class="pl-pds">`</span></span>
            <span class="pl-s"><span class="pl-pds">`</span>make<span class="pl-pds">`</span></span>
            <span class="pl-s"><span class="pl-pds">`</span>cp libpng*.dll $prefix/lib<span class="pl-pds">`</span></span>
            <span class="pl-s"><span class="pl-pds">`</span>cp libpng*.a $prefix/lib<span class="pl-pds">`</span></span>
            <span class="pl-s"><span class="pl-pds">`</span>cp libpng*.pc $prefix/lib/pkgconfig<span class="pl-pds">`</span></span>
            <span class="pl-s"><span class="pl-pds">`</span>cp pnglibconf.h $prefix/include<span class="pl-pds">`</span></span>
            <span class="pl-s"><span class="pl-pds">`</span>cp $pngsrcdir/png.h $prefix/include<span class="pl-pds">`</span></span>
            <span class="pl-s"><span class="pl-pds">`</span>cp $pngsrcdir/pngconf.h $prefix/include<span class="pl-pds">`</span></span>
        <span class="pl-k">end</span>)
    <span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>
<p dir="auto">All the steps are executed synchronously. The result of the <code>@build_steps</code> macro
may be passed to run to execute it directly, thought this is not recommended other
than for debugging purposes. Instead, please use the high level interface to tie
the build process to dependencies.</p>
<p dir="auto">Some of the builtin build steps are:</p>
<ul dir="auto">
<li>
<p dir="auto">FileDownloader(remote_file,local_file)</p>
<p dir="auto">Download a file from <code>remote_file</code> create it as <code>local_file</code></p>
</li>
<li>
<p dir="auto">FileUnpacker(local_file,folder)</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="Unpack the file `local_file` into the folder `folder`"><pre class="notranslate"><code>Unpack the file `local_file` into the folder `folder`
</code></pre></div>
</li>
<li>
<p dir="auto">AutotoolsDependency(opts...)</p>
<p dir="auto">Invoke autotools. Use of this build step is not recommended. Use the high level
interface instead</p>
</li>
<li>
<p dir="auto">CreateDirectory(dir)</p>
<p dir="auto">Create the directory <code>dir</code></p>
</li>
<li>
<p dir="auto">ChangeDirectory(dir)</p>
<p dir="auto"><code>cd</code> into the directory <code>dir</code> and try to remain there for this build block. Must
be the first command in a <code>@build_steps</code> block and will remain active for the entire block</p>
</li>
<li>
<p dir="auto">MakeTargets([dir,],[args...],env)</p>
<p dir="auto">Invoke <code>make</code> with the given arguments in the given directory with the given environment.</p>
</li>
<li>
<p dir="auto">DirectoryRule(dir,step)</p>
<p dir="auto">If <code>dir</code> does not exist invoke step and validate that the directory was created</p>
</li>
<li>
<p dir="auto">FileRule([files...],step)</p>
<p dir="auto">Like Directory rule, but validates the existence of any of the files in the <code>files </code>array`.</p>
</li>
<li>
<p dir="auto">GetSources(dep)</p>
<p dir="auto">Get the declared sources from the dependency dep and put them in the default
download location</p>
</li>
</ul>
<h1 dir="auto"><a id="user-content-diagnostics" class="anchor" aria-hidden="true" href="#diagnostics"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Diagnostics</h1>
<p dir="auto">A simple way to see what libraries are required by a package, and to detect missing dependencies,
is to use <code>BinDeps.debug("PackageName")</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using BinDeps

julia&gt; BinDeps.debug(&quot;Cairo&quot;)
INFO: Reading build script...
The package declares 1 dependencies.
 - Library Group &quot;cairo&quot; (satisfied by BinDeps.SystemPaths, BinDeps.SystemPaths)
     - Library &quot;png&quot; (not applicable to this system)
     - Library &quot;pixman&quot; (not applicable to this system)
     - Library &quot;ffi&quot; (not applicable to this system)
     - Library &quot;gettext&quot;
        - Satisfied by:
          - System Paths at /usr/lib64/preloadable_libintl.so
          - System Paths at /usr/lib64/libgettextpo.so
        - Providers:
          - BinDeps.AptGet package gettext (can't provide)
          - BinDeps.Yum package gettext-libs (can't provide)
          - Autotools Build"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> BinDeps

julia<span class="pl-k">&gt;</span> BinDeps<span class="pl-k">.</span><span class="pl-c1">debug</span>(<span class="pl-s"><span class="pl-pds">"</span>Cairo<span class="pl-pds">"</span></span>)
INFO<span class="pl-k">:</span> Reading build script<span class="pl-k">...</span>
The package declares <span class="pl-c1">1</span> dependencies.
 <span class="pl-k">-</span> Library Group <span class="pl-s"><span class="pl-pds">"</span>cairo<span class="pl-pds">"</span></span> (satisfied by BinDeps<span class="pl-k">.</span>SystemPaths, BinDeps<span class="pl-k">.</span>SystemPaths)
     <span class="pl-k">-</span> Library <span class="pl-s"><span class="pl-pds">"</span>png<span class="pl-pds">"</span></span> (not applicable to this system)
     <span class="pl-k">-</span> Library <span class="pl-s"><span class="pl-pds">"</span>pixman<span class="pl-pds">"</span></span> (not applicable to this system)
     <span class="pl-k">-</span> Library <span class="pl-s"><span class="pl-pds">"</span>ffi<span class="pl-pds">"</span></span> (not applicable to this system)
     <span class="pl-k">-</span> Library <span class="pl-s"><span class="pl-pds">"</span>gettext<span class="pl-pds">"</span></span>
        <span class="pl-k">-</span> Satisfied by<span class="pl-k">:</span>
          <span class="pl-k">-</span> System Paths at <span class="pl-k">/</span>usr<span class="pl-k">/</span>lib64<span class="pl-k">/</span>preloadable_libintl<span class="pl-k">.</span>so
          <span class="pl-k">-</span> System Paths at <span class="pl-k">/</span>usr<span class="pl-k">/</span>lib64<span class="pl-k">/</span>libgettextpo<span class="pl-k">.</span>so
        <span class="pl-k">-</span> Providers<span class="pl-k">:</span>
          <span class="pl-k">-</span> BinDeps<span class="pl-k">.</span>AptGet package gettext (can<span class="pl-k">'</span>t provide)
          <span class="pl-k">-</span> BinDeps<span class="pl-k">.</span>Yum package gettext<span class="pl-k">-</span>libs (can<span class="pl-k">'</span>t provide)
          <span class="pl-k">-</span> Autotools Build</pre></div>
</article></div>