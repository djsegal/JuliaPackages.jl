<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-powersensejl" class="anchor" aria-hidden="true" href="#powersensejl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Powersense.jl</h1>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/e2852426aa74226c191adebb8bd4fe1ddb3e9513742867c812c29f87e2476dc9/68747470733a2f2f706f77657273656e73652e6769746875622e696f2f2f6173736574732f506f77657273656e73655f6c6f676f2e706e67"><img src="https://camo.githubusercontent.com/e2852426aa74226c191adebb8bd4fe1ddb3e9513742867c812c29f87e2476dc9/68747470733a2f2f706f77657273656e73652e6769746875622e696f2f2f6173736574732f506f77657273656e73655f6c6f676f2e706e67" align="left" width="200" alt="PowerSense logo" data-canonical-src="https://powersense.github.io//assets/Powersense_logo.png" style="max-width: 100%;"></a></p>
<p dir="auto"><a href="https://www.powersense.io/)" rel="nofollow"><img src="https://camo.githubusercontent.com/a2876966ab6d46dccf29fb536eea0a698bcfb4398136f23195ec522c21bdc3f1/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f706f776572656425323062792d506f77657253454e53452d626c7565" data-canonical-src="https://img.shields.io/badge/powered%20by-PowerSENSE-blue" style="max-width: 100%;"></a>
<a target="_blank" rel="noopener noreferrer" href="https://github.com/PowerSense/Powersense.jl/workflows/Run%20tests/badge.svg?branch=master"><img src="https://github.com/PowerSense/Powersense.jl/workflows/Run%20tests/badge.svg?branch=master" alt="Run tests" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/PowerSense/Powersense.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/26220202aeca6211e6370ab07de825c870fed95b22977ad482361bf8e0ab9380/68747470733a2f2f636f6465636f762e696f2f67682f506f77657253656e73652f506f77657273656e73652e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e7376673f746f6b656e3d53554834565045343144" alt="codecov" data-canonical-src="https://codecov.io/gh/PowerSense/Powersense.jl/branch/master/graph/badge.svg?token=SUH4VPE41D" style="max-width: 100%;"></a></p>

<p dir="auto">The package has the following features implemented and ready to use.</p>
<ul dir="auto">
<li><code>OPT</code>: The nonlinear programming optimization component implements sequential linear programming method for continuous nonlinear optimization. The package currently implements a line search algorithm.</li>
<li><code>OPF</code>: The AC optimal power flow (AC-OPF) component implements 7 different AC-OPF formulations. These formulations have different sparsities and are a combination of varieties of different approaches of modeling voltages, admittance matrix, and branch flows. The formulations can be solved using the <code>OPT</code> feature of the <code>Powersense.jl</code> or using an external NLP solver.</li>
</ul>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="import Pkg
Pkg.add(&quot;Powersense&quot;)"><pre><span class="pl-k">import</span> Pkg
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>Powersense<span class="pl-pds">"</span></span>)</pre></div>
<h2 dir="auto"><a id="user-content-nlp-solver-example" class="anchor" aria-hidden="true" href="#nlp-solver-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>NLP Solver Example</h2>
<p dir="auto">Consider the following quadratic optimization problem</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="min   x^2 + x 
s.t.  x^2 - x = 2"><pre>min   x<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">+</span> x 
s<span class="pl-k">.</span>t.  x<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">-</span> x <span class="pl-k">=</span> <span class="pl-c1">2</span></pre></div>
<p dir="auto">This problem can be solved by the following code snippet:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# Load packages
using Powersense, JuMP
using GLPK # can be any LP solver

# Number of variables
n = 1

# Build nonlinear problem model via JuMP
model = Model(optimizer_with_attributes(Powersense.Optimizer, &quot;external_optimizer&quot; =&gt; GLPK.Optimizer))
@variable(model, x)
@objective(model, Min, x^2 + x)
@NLconstraint(model, x^2 - x == 2)

# Solve optimization problem with Nlopt
JuMP.optimize!(model)

# Retrieve solution
Xsol = JuMP.value.(X)"><pre><span class="pl-c"><span class="pl-c">#</span> Load packages</span>
<span class="pl-k">using</span> Powersense, JuMP
<span class="pl-k">using</span> GLPK <span class="pl-c"><span class="pl-c">#</span> can be any LP solver</span>

<span class="pl-c"><span class="pl-c">#</span> Number of variables</span>
n <span class="pl-k">=</span> <span class="pl-c1">1</span>

<span class="pl-c"><span class="pl-c">#</span> Build nonlinear problem model via JuMP</span>
model <span class="pl-k">=</span> <span class="pl-c1">Model</span>(<span class="pl-c1">optimizer_with_attributes</span>(Powersense<span class="pl-k">.</span>Optimizer, <span class="pl-s"><span class="pl-pds">"</span>external_optimizer<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> GLPK<span class="pl-k">.</span>Optimizer))
<span class="pl-c1">@variable</span>(model, x)
<span class="pl-c1">@objective</span>(model, Min, x<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">+</span> x)
<span class="pl-c1">@NLconstraint</span>(model, x<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">-</span> x <span class="pl-k">==</span> <span class="pl-c1">2</span>)

<span class="pl-c"><span class="pl-c">#</span> Solve optimization problem with Nlopt</span>
JuMP<span class="pl-k">.</span><span class="pl-c1">optimize!</span>(model)

<span class="pl-c"><span class="pl-c">#</span> Retrieve solution</span>
Xsol <span class="pl-k">=</span> JuMP<span class="pl-k">.</span><span class="pl-c1">value</span>.(X)</pre></div>
<h2 dir="auto"><a id="user-content-opf-formulations-example" class="anchor" aria-hidden="true" href="#opf-formulations-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>OPF formulations Example</h2>
<p dir="auto">Consider solving PNPAPVmodel ACOPF formulations. This can be solved using the following code snippet:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# Load packages
using Powersense, Ipopt

# Build Powersense Data model. Path is the address where PSSE or MATPOWER files are located.
Data = create_PowersenseData(path)

run_opf!(Data, solver = Ipopt.Optimizer, obj_type = :linear, formulation = PNPAPVmodel);"><pre><span class="pl-c"><span class="pl-c">#</span> Load packages</span>
<span class="pl-k">using</span> Powersense, Ipopt

<span class="pl-c"><span class="pl-c">#</span> Build Powersense Data model. Path is the address where PSSE or MATPOWER files are located.</span>
Data <span class="pl-k">=</span> <span class="pl-c1">create_PowersenseData</span>(path)

<span class="pl-c1">run_opf!</span>(Data, solver <span class="pl-k">=</span> Ipopt<span class="pl-k">.</span>Optimizer, obj_type <span class="pl-k">=</span> <span class="pl-c1">:linear</span>, formulation <span class="pl-k">=</span> PNPAPVmodel);</pre></div>
<h1 dir="auto"><a id="user-content-acknowledgements" class="anchor" aria-hidden="true" href="#acknowledgements"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Acknowledgements</h1>
<p dir="auto">The package is part of the <a href="https://www.powersense.io/" rel="nofollow">PowerSense Lab</a> which is owned and maintained by <a href="https://www.sayedsadat.com/" rel="nofollow">Sayed Abdullah Sadat</a>.</p>
</article></div>