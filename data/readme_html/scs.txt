<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-scsjl" class="anchor" aria-hidden="true" href="#scsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>SCS.jl</h1>
<p dir="auto"><a href="https://github.com/jump-dev/SCS.jl/actions?query=workflow%3ACI"><img src="https://github.com/jump-dev/SCS.jl/workflows/CI/badge.svg?branch=master" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/jump-dev/SCS.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/0f363ff63b2c29f3b4a2f7fbb004808a874d0a99b75cff8a68fdca9970dcbe7a/68747470733a2f2f636f6465636f762e696f2f67682f6a756d702d6465762f5343532e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/jump-dev/SCS.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto"><a href="https://github.com/jump-dev/SCS.jl">SCS.jl</a> is a wrapper for the
<a href="https://github.com/cvxgrp/scs">SCS</a> splitting cone solver.</p>
<p dir="auto">SCS can solve linear programs, second-order cone programs, semidefinite
programs, exponential cone programs, and power cone programs.</p>
<h2 dir="auto"><a id="user-content-affiliation" class="anchor" aria-hidden="true" href="#affiliation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Affiliation</h2>
<p dir="auto">This wrapper is maintained by the JuMP community and is not a project of the SCS
developers.</p>
<h2 dir="auto"><a id="user-content-license" class="anchor" aria-hidden="true" href="#license"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>License</h2>
<p dir="auto"><code>SCS.jl</code> is licensed under the <a href="https://github.com/jump-dev/SCS.jl/blob/master/LICENSE.md">MIT License</a>.</p>
<p dir="auto">The underlying solver, <a href="https://github.com/cvxgrp/scs">cvxgrp/scs</a>, is
licensed under the <a href="https://github.com/cvxgrp/scs/blob/master/LICENSE.txt">MIT License</a>.</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">Install SCS.jl using the Julia package manager:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="import Pkg
Pkg.add(&quot;SCS&quot;)"><pre><span class="pl-k">import</span> Pkg
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>SCS<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">In addition to installing the <code>SCS.jl</code> package, this will also download and
install the SCS binaries. (You do not need to install SCS separately.)</p>
<p dir="auto">To use a custom binary, read the <a href="https://jump.dev/JuMP.jl/stable/developers/custom_solver_binaries/" rel="nofollow">Custom solver binaries</a>
section of the JuMP documentation.</p>
<h2 dir="auto"><a id="user-content-use-with-convexjl" class="anchor" aria-hidden="true" href="#use-with-convexjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Use with Convex.jl</h2>
<p dir="auto">This example shows how we can model a simple knapsack problem with Convex and
use SCS to solve it.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Convex, SCS
items  = [:Gold, :Silver, :Bronze]
values = [5.0, 3.0, 1.0]
weights = [2.0, 1.5, 0.3]

# Define a variable of size 3, each index representing an item
x = Variable(3)
p = maximize(x' * values, 0 &lt;= x, x &lt;= 1, x' * weights &lt;= 3)
solve!(p, SCS.Optimizer)
println([items x.value])
# [:Gold 0.9999971880377178
#  :Silver 0.46667637765641057
#  :Bronze 0.9999998036351865]"><pre><span class="pl-k">using</span> Convex, SCS
items  <span class="pl-k">=</span> [<span class="pl-c1">:Gold</span>, <span class="pl-c1">:Silver</span>, <span class="pl-c1">:Bronze</span>]
values <span class="pl-k">=</span> [<span class="pl-c1">5.0</span>, <span class="pl-c1">3.0</span>, <span class="pl-c1">1.0</span>]
weights <span class="pl-k">=</span> [<span class="pl-c1">2.0</span>, <span class="pl-c1">1.5</span>, <span class="pl-c1">0.3</span>]

<span class="pl-c"><span class="pl-c">#</span> Define a variable of size 3, each index representing an item</span>
x <span class="pl-k">=</span> <span class="pl-c1">Variable</span>(<span class="pl-c1">3</span>)
p <span class="pl-k">=</span> <span class="pl-c1">maximize</span>(x<span class="pl-k">'</span> <span class="pl-k">*</span> values, <span class="pl-c1">0</span> <span class="pl-k">&lt;=</span> x, x <span class="pl-k">&lt;=</span> <span class="pl-c1">1</span>, x<span class="pl-k">'</span> <span class="pl-k">*</span> weights <span class="pl-k">&lt;=</span> <span class="pl-c1">3</span>)
<span class="pl-c1">solve!</span>(p, SCS<span class="pl-k">.</span>Optimizer)
<span class="pl-c1">println</span>([items x<span class="pl-k">.</span>value])
<span class="pl-c"><span class="pl-c">#</span> [:Gold 0.9999971880377178</span>
<span class="pl-c"><span class="pl-c">#</span>  :Silver 0.46667637765641057</span>
<span class="pl-c"><span class="pl-c">#</span>  :Bronze 0.9999998036351865]</span></pre></div>
<h2 dir="auto"><a id="user-content-use-with-jump" class="anchor" aria-hidden="true" href="#use-with-jump"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Use with JuMP</h2>
<p dir="auto">This example shows how we can model a simple knapsack problem with JuMP and use
SCS to solve it.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using JuMP, SCS
items  = [:Gold, :Silver, :Bronze]
values = Dict(:Gold =&gt; 5.0,  :Silver =&gt; 3.0,  :Bronze =&gt; 1.0)
weight = Dict(:Gold =&gt; 2.0,  :Silver =&gt; 1.5,  :Bronze =&gt; 0.3)

model = Model(SCS.Optimizer)
@variable(model, 0 &lt;= take[items] &lt;= 1)  # Define a variable for each item
@objective(model, Max, sum(values[item] * take[item] for item in items))
@constraint(model, sum(weight[item] * take[item] for item in items) &lt;= 3)
optimize!(model)
println(value.(take))
# 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
#     Dimension 1, Symbol[:Gold, :Silver, :Bronze]
# And data, a 3-element Array{Float64,1}:
#  1.0000002002226671
#  0.4666659513182934
#  1.0000007732744878"><pre><span class="pl-k">using</span> JuMP, SCS
items  <span class="pl-k">=</span> [<span class="pl-c1">:Gold</span>, <span class="pl-c1">:Silver</span>, <span class="pl-c1">:Bronze</span>]
values <span class="pl-k">=</span> <span class="pl-c1">Dict</span>(<span class="pl-c1">:Gold</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">5.0</span>,  <span class="pl-c1">:Silver</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">3.0</span>,  <span class="pl-c1">:Bronze</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1.0</span>)
weight <span class="pl-k">=</span> <span class="pl-c1">Dict</span>(<span class="pl-c1">:Gold</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">2.0</span>,  <span class="pl-c1">:Silver</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1.5</span>,  <span class="pl-c1">:Bronze</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">0.3</span>)

model <span class="pl-k">=</span> <span class="pl-c1">Model</span>(SCS<span class="pl-k">.</span>Optimizer)
<span class="pl-c1">@variable</span>(model, <span class="pl-c1">0</span> <span class="pl-k">&lt;=</span> take[items] <span class="pl-k">&lt;=</span> <span class="pl-c1">1</span>)  <span class="pl-c"><span class="pl-c">#</span> Define a variable for each item</span>
<span class="pl-c1">@objective</span>(model, Max, <span class="pl-c1">sum</span>(values[item] <span class="pl-k">*</span> take[item] <span class="pl-k">for</span> item <span class="pl-k">in</span> items))
<span class="pl-c1">@constraint</span>(model, <span class="pl-c1">sum</span>(weight[item] <span class="pl-k">*</span> take[item] <span class="pl-k">for</span> item <span class="pl-k">in</span> items) <span class="pl-k">&lt;=</span> <span class="pl-c1">3</span>)
<span class="pl-c1">optimize!</span>(model)
<span class="pl-c1">println</span>(<span class="pl-c1">value</span>.(take))
<span class="pl-c"><span class="pl-c">#</span> 1-dimensional DenseAxisArray{Float64,1,...} with index sets:</span>
<span class="pl-c"><span class="pl-c">#</span>     Dimension 1, Symbol[:Gold, :Silver, :Bronze]</span>
<span class="pl-c"><span class="pl-c">#</span> And data, a 3-element Array{Float64,1}:</span>
<span class="pl-c"><span class="pl-c">#</span>  1.0000002002226671</span>
<span class="pl-c"><span class="pl-c">#</span>  0.4666659513182934</span>
<span class="pl-c"><span class="pl-c">#</span>  1.0000007732744878</span></pre></div>
<h2 dir="auto"><a id="user-content-mathoptinterface-api" class="anchor" aria-hidden="true" href="#mathoptinterface-api"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>MathOptInterface API</h2>
<p dir="auto">The SCS optimizer supports the following constraints and attributes.</p>
<p dir="auto">List of supported objective functions:</p>
<ul dir="auto">
<li><a href="@ref"><code>MOI.ObjectiveFunction{MOI.ScalarAffineFunction{Float64}}</code></a></li>
</ul>
<p dir="auto">List of supported variable types:</p>
<ul dir="auto">
<li><a href="@ref"><code>MOI.Reals</code></a></li>
</ul>
<p dir="auto">List of supported constraint types:</p>
<ul dir="auto">
<li><a href="@ref"><code>MOI.VectorAffineFunction{Float64}</code></a> in <a href="@ref"><code>MOI.DualExponentialCone</code></a></li>
<li><a href="@ref"><code>MOI.VectorAffineFunction{Float64}</code></a> in <a href="@ref"><code>MOI.DualPowerCone{Float64}</code></a></li>
<li><a href="@ref"><code>MOI.VectorAffineFunction{Float64}</code></a> in <a href="@ref"><code>MOI.ExponentialCone</code></a></li>
<li><a href="@ref"><code>MOI.VectorAffineFunction{Float64}</code></a> in <a href="@ref"><code>MOI.Nonnegatives</code></a></li>
<li><a href="@ref"><code>MOI.VectorAffineFunction{Float64}</code></a> in <a href="@ref"><code>MOI.PowerCone{Float64}</code></a></li>
<li><a href="@ref"><code>MOI.VectorAffineFunction{Float64}</code></a> in <a href="@ref"><code>MOI.SecondOrderCone</code></a></li>
<li><a href="@ref"><code>MOI.VectorAffineFunction{Float64}</code></a> in <a href="@ref"><code>MOI.Zeros</code></a></li>
</ul>
<p dir="auto">List of supported model attributes:</p>
<ul dir="auto">
<li><a href="@ref"><code>MOI.ObjectiveSense()</code></a></li>
</ul>
<h2 dir="auto"><a id="user-content-options" class="anchor" aria-hidden="true" href="#options"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Options</h2>
<p dir="auto">All SCS solver options can be set through <code>Convex.jl</code> or <code>MathOptInterface.jl</code>.</p>
<p dir="auto">For example:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="model = Model(optimizer_with_attributes(SCS.Optimizer, &quot;max_iters&quot; =&gt; 10))

# via MathOptInterface:
optimizer = SCS.Optimizer()
MOI.set(optimizer, MOI.RawOptimizerAttribute(&quot;max_iters&quot;), 10)
MOI.set(optimizer, MOI.RawOptimizerAttribute(&quot;verbose&quot;), 0)"><pre>model <span class="pl-k">=</span> <span class="pl-c1">Model</span>(<span class="pl-c1">optimizer_with_attributes</span>(SCS<span class="pl-k">.</span>Optimizer, <span class="pl-s"><span class="pl-pds">"</span>max_iters<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">10</span>))

<span class="pl-c"><span class="pl-c">#</span> via MathOptInterface:</span>
optimizer <span class="pl-k">=</span> SCS<span class="pl-k">.</span><span class="pl-c1">Optimizer</span>()
MOI<span class="pl-k">.</span><span class="pl-c1">set</span>(optimizer, MOI<span class="pl-k">.</span><span class="pl-c1">RawOptimizerAttribute</span>(<span class="pl-s"><span class="pl-pds">"</span>max_iters<span class="pl-pds">"</span></span>), <span class="pl-c1">10</span>)
MOI<span class="pl-k">.</span><span class="pl-c1">set</span>(optimizer, MOI<span class="pl-k">.</span><span class="pl-c1">RawOptimizerAttribute</span>(<span class="pl-s"><span class="pl-pds">"</span>verbose<span class="pl-pds">"</span></span>), <span class="pl-c1">0</span>)</pre></div>
<p dir="auto">Common options are:</p>
<ul dir="auto">
<li><code>max_iters</code>: the maximum number of iterations to take</li>
<li><code>verbose</code>: turn printing on (<code>1</code>) or off (<code>0</code>)
See the <a href="https://github.com/cvxgrp/scs/blob/3aaa93c7aa04c7001df5e51b81f21b126dfa99b3/include/glbopts.h#L35"><code>glbopts.h</code> header</a>
for other options.</li>
</ul>
<h2 dir="auto"><a id="user-content-linear-solvers" class="anchor" aria-hidden="true" href="#linear-solvers"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Linear solvers</h2>
<p dir="auto"><code>SCS</code> uses a linear solver internally, see
<a href="https://www.cvxgrp.org/scs/linear_solver/index.html#linear-system-solver" rel="nofollow">this section</a>
of <code>SCS</code> documentation. <code>SCS.jl</code> ships with</p>
<ul dir="auto">
<li><code>SCS.DirectSolver</code> (sparse direct, the default) and</li>
<li><code>SCS.LinearSolver</code> (sparse indirect, by conjugate gradient)
enabled.</li>
</ul>
<p dir="auto">The find currently available linear solvers one can inspect <code>SCS.available_solvers</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using SCS

julia&gt; SCS.available_solvers
2-element Vector{DataType}:
 SCS.DirectSolver
 SCS.IndirectSolver"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> SCS

julia<span class="pl-k">&gt;</span> SCS<span class="pl-k">.</span>available_solvers
<span class="pl-c1">2</span><span class="pl-k">-</span>element Vector{DataType}<span class="pl-k">:</span>
 SCS<span class="pl-k">.</span>DirectSolver
 SCS<span class="pl-k">.</span>IndirectSolver</pre></div>
<p dir="auto">To select the linear solver of choice:</p>
<ul dir="auto">
<li>pass the <code>linear_solver</code> option to <a href="@ref"><code>optimizer_with_attributes</code></a>, or to
<a href="@ref"><code>MOI.OptimizerWithAttributes</code></a>;</li>
<li>specify the solver as the first argument when using <code>scs_solve</code> directly
(see the low-level wrapper section below).</li>
</ul>
<h3 dir="auto"><a id="user-content-scs-with-mkl-pardiso-linear-solver" class="anchor" aria-hidden="true" href="#scs-with-mkl-pardiso-linear-solver"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>SCS with MKL Pardiso linear solver</h3>
<p dir="auto">To enable the MKL Pardiso (direct sparse) solver one needs to load <code>MKL_jll</code>
<strong>before</strong> <code>SCS</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; import Pkg

julia&gt; Pkg.add(Pkg.PackageSpec(name = &quot;MKL_jll&quot;, version = &quot;2022.2&quot;))

julia&gt; using MKL_jll    # This must be called before `using SCS`.

julia&gt; using SCS

julia&gt; SCS.available_solvers
3-element Vector{DataType}:
 SCS.DirectSolver
 SCS.IndirectSolver
 SCS.MKLDirectSolver"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">import</span> Pkg

julia<span class="pl-k">&gt;</span> Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(Pkg<span class="pl-k">.</span><span class="pl-c1">PackageSpec</span>(name <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>MKL_jll<span class="pl-pds">"</span></span>, version <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>2022.2<span class="pl-pds">"</span></span>))

julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> MKL_jll    <span class="pl-c"><span class="pl-c">#</span> This must be called before `using SCS`.</span>

julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> SCS

julia<span class="pl-k">&gt;</span> SCS<span class="pl-k">.</span>available_solvers
<span class="pl-c1">3</span><span class="pl-k">-</span>element Vector{DataType}<span class="pl-k">:</span>
 SCS<span class="pl-k">.</span>DirectSolver
 SCS<span class="pl-k">.</span>IndirectSolver
 SCS<span class="pl-k">.</span>MKLDirectSolver</pre></div>
<p dir="auto">The <code>MKLDirectSolver</code> is available on <code>Linux x86_64</code> platform only.</p>
<h3 dir="auto"><a id="user-content-scs-with-sparse-gpu-indirect-solver-cuda-only" class="anchor" aria-hidden="true" href="#scs-with-sparse-gpu-indirect-solver-cuda-only"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>SCS with Sparse GPU indirect solver (CUDA only)</h3>
<p dir="auto">To enable the indirect linear solver on GPU one needs to load <code>CUDA_jll</code>
<strong>before</strong> <code>SCS</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; import Pkg

julia&gt; Pkg.add(Pkg.PackageSpec(name = &quot;CUDA_jll&quot;, version = &quot;10.1&quot;))

julia&gt; using CUDA_jll  # This must be called before `using SCS`.

julia&gt; using SCS

julia&gt; SCS.available_solvers
3-element Array{DataType,1}:
 SCS.DirectSolver
 SCS.IndirectSolver
 SCS.GpuIndirectSolver"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">import</span> Pkg

julia<span class="pl-k">&gt;</span> Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(Pkg<span class="pl-k">.</span><span class="pl-c1">PackageSpec</span>(name <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>CUDA_jll<span class="pl-pds">"</span></span>, version <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>10.1<span class="pl-pds">"</span></span>))

julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> CUDA_jll  <span class="pl-c"><span class="pl-c">#</span> This must be called before `using SCS`.</span>

julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> SCS

julia<span class="pl-k">&gt;</span> SCS<span class="pl-k">.</span>available_solvers
<span class="pl-c1">3</span><span class="pl-k">-</span>element Array{DataType,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 SCS<span class="pl-k">.</span>DirectSolver
 SCS<span class="pl-k">.</span>IndirectSolver
 SCS<span class="pl-k">.</span>GpuIndirectSolver</pre></div>
<p dir="auto">The <code>GpuIndirectSolver</code> is available on <code>Linux x86_64</code> platform only.</p>
<h2 dir="auto"><a id="user-content-low-level-wrapper" class="anchor" aria-hidden="true" href="#low-level-wrapper"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Low-level wrapper</h2>
<p dir="auto">SCS.jl provides a low-level interface to solve a problem directly, without
interfacing through MathOptInterface.</p>
<p dir="auto"><strong>This is an advanced interface with a risk of incorrect usage. For new users,
we recommend that you use the JuMP or Convex interfaces instead.</strong></p>
<p dir="auto">SCS solves a problem of the form:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="minimize        1/2 * x' * P * x + c' * x
subject to      A * x + s = b
                s in K"><pre class="notranslate"><code>minimize        1/2 * x' * P * x + c' * x
subject to      A * x + s = b
                s in K
</code></pre></div>
<p dir="auto">where <code>K</code> is a product cone of:</p>
<ul dir="auto">
<li>zero cone</li>
<li>positive orthant <code>{ x | x ≥ 0 }</code></li>
<li>box cone <code>{ (t,x) | t*l ≤ x ≤ t*u}</code></li>
<li>second-order cone (SOC) <code>{ (t,x) | ||x||_2 ≤ t }</code></li>
<li>semi-definite cone (SDC) <code>{ X | X is psd }</code></li>
<li>exponential cone <code>{ (x,y,z) | y e^(x/y) ≤ z, y&gt;0 }</code></li>
<li>power cone <code>{ (x,y,z) | x^a * y^(1-a) ≥ |z|, x ≥ 0, y ≥ 0 }</code></li>
<li>dual power cone <code>{ (u,v,w) | (u/a)^a * (v/(1-a))^(1-a) ≥ |w|, u ≥ 0, v ≥ 0 }</code>.</li>
</ul>
<p dir="auto">To solve this problem with SCS, call <code>SCS.scs_solve</code>; see the docstring for
details.</p>
</article></div>