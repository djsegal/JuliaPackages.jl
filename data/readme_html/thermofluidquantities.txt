<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-thermofluidquantities" class="anchor" aria-hidden="true" href="#thermofluidquantities"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>ThermofluidQuantities</h1>
<p dir="auto"><em>basic tools and definitions of quantities in thermofluids problems</em></p>
<p dir="auto"><a href="https://uclamaethreads.github.io/ThermofluidQuantities.jl/stable/" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://uclamaethreads.github.io/ThermofluidQuantities.jl/dev/" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/UCLAMAEThreads/ThermofluidQuantities.jl/actions"><img src="https://github.com/UCLAMAEThreads/ThermofluidQuantities.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a> <a href="https://codecov.io/gh/UCLAMAEThreads/ThermofluidQuantities.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/f4d4f580e412da1f81a1556b6f55e448b3124efa1f8ce051fe3043a786676976/68747470733a2f2f636f6465636f762e696f2f67682f55434c414d4145546872656164732f546865726d6f666c7569645175616e7469746965732e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e7376673f746f6b656e3d6d34706a37726a463072" alt="codecov" data-canonical-src="https://codecov.io/gh/UCLAMAEThreads/ThermofluidQuantities.jl/branch/main/graph/badge.svg?token=m4pj7rjF0r" style="max-width: 100%;"></a></p>
<p dir="auto">The purpose of this package is to enable easy setup of quantities in thermofluids problems. It contains</p>
<ul dir="auto">
<li>A large set of specialized types based on common thermofluid quantities
(e.g. <code>Velocity</code>, <code>Pressure</code>, etc) that enable dispatch on these
quantities</li>
<li>Treatment of typical units, using the <a href="https://github.com/PainterQubits/Unitful.jl">Unitful</a> package.</li>
<li>Predefined properties for various common gases and liquids</li>
<li>Plot recipes for the associated types</li>
</ul>
<h3 dir="auto"><a id="user-content-setting-a-quantitys-value" class="anchor" aria-hidden="true" href="#setting-a-quantitys-value"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Setting a quantity's value</h3>
<p dir="auto">We can set the value of a quantity through a simple interface, specifying in units with the <a href="https://github.com/PainterQubits/Unitful.jl">Unitful</a>
interface, or without units, so that it obtains the default units of the quantity. E.g., pressure has default units of Pascals, so we can
set it in, say, atmospheres and it will convert it automatically, or we can just supply a number:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Pressure(1u&quot;atm&quot;)
Pressure(50)"><pre><span class="pl-c1">Pressure</span>(<span class="pl-c1">1</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>atm<span class="pl-pds">"</span></span>)
<span class="pl-c1">Pressure</span>(<span class="pl-c1">50</span>)</pre></div>
<h3 dir="auto"><a id="user-content-quantities-units-and-types" class="anchor" aria-hidden="true" href="#quantities-units-and-types"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Quantities, units, and types</h3>
<p dir="auto">Quantities of the same units can be added or subtracted, e.g.,</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="p = Pressure(1u&quot;atm&quot;) + StagnationPressure(3u&quot;atm&quot;)"><pre>p <span class="pl-k">=</span> <span class="pl-c1">Pressure</span>(<span class="pl-c1">1</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>atm<span class="pl-pds">"</span></span>) <span class="pl-k">+</span> <span class="pl-c1">StagnationPressure</span>(<span class="pl-c1">3</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>atm<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">The result of this operation is just a <a href="https://github.com/PainterQubits/Unitful.jl">Unitful</a> quantity. This can then be wrapped by a type with the same units:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Pressure(p)"><pre><span class="pl-c1">Pressure</span>(p)</pre></div>
<p dir="auto">All quantities in this package are typed and are subtypes of either <code>DimensionalPhysicalQuantity</code> or <code>DimensionlessPhysicalQuantity</code>. These are
both subtypes of <code>PhysicalQuantity</code>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Pressure &lt;: DimensionalPhysicalQuantity"><pre>Pressure <span class="pl-k">&lt;:</span> <span class="pl-c1">DimensionalPhysicalQuantity</span></pre></div>
<p dir="auto">Quantities with the same units but different names are of different types, so dispatch can distinguish them:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="f(::Pressure) = &quot;I am pressure!&quot;
f(Pressure(5))"><pre><span class="pl-en">f</span>(<span class="pl-k">::</span><span class="pl-c1">Pressure</span>) <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>I am pressure!<span class="pl-pds">"</span></span>
<span class="pl-c1">f</span>(<span class="pl-c1">Pressure</span>(<span class="pl-c1">5</span>))</pre></div>
<p dir="auto">but this would fail:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="f(StagnationPressure(2.5))"><pre><span class="pl-c1">f</span>(<span class="pl-c1">StagnationPressure</span>(<span class="pl-c1">2.5</span>))</pre></div>
<h3 dir="auto"><a id="user-content-non-dimensional-variables-automatically-reconcile-different-units" class="anchor" aria-hidden="true" href="#non-dimensional-variables-automatically-reconcile-different-units"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Non-dimensional variables automatically reconcile different units</h3>
<p dir="auto">If we supply a ratio of quantities that are dimensionally compatible but are in disparate units, any non-dimensional variable will
automatically convert to common units in performing the ratio and provide a truly dimensionless number, e.g.,</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="ReynoldsNumber(5u&quot;ft/s&quot;*1u&quot;cm&quot;/KinematicViscosity(0.1))"><pre><span class="pl-c1">ReynoldsNumber</span>(<span class="pl-c1">5</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>ft/s<span class="pl-pds">"</span></span><span class="pl-k">*</span><span class="pl-c1">1</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>cm<span class="pl-pds">"</span></span><span class="pl-k">/</span><span class="pl-c1">KinematicViscosity</span>(<span class="pl-c1">0.1</span>))</pre></div>
<p dir="auto">In this example, <code>KinematicViscosity(0.1)</code> assumes the given value is in default units (m^2/s). Note that we also demonstrated in this example
that operations with a <code>PhysicalQuantity</code> can be mixed with <code>Unitful.Quantity</code> types.</p>
<p dir="auto">If you don't have a name for a dimensionless parameter, then <code>DimensionlessParameter</code> is a catch-all, e.g.,</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="v = Velocity(1u&quot;m/s&quot;)
vref = Velocity(5u&quot;m/s&quot;)
DimensionlessParameter(v/vref)"><pre>v <span class="pl-k">=</span> <span class="pl-c1">Velocity</span>(<span class="pl-c1">1</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>m/s<span class="pl-pds">"</span></span>)
vref <span class="pl-k">=</span> <span class="pl-c1">Velocity</span>(<span class="pl-c1">5</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>m/s<span class="pl-pds">"</span></span>)
<span class="pl-c1">DimensionlessParameter</span>(v<span class="pl-k">/</span>vref)</pre></div>
<h3 dir="auto"><a id="user-content-defining-new-quantities" class="anchor" aria-hidden="true" href="#defining-new-quantities"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Defining new quantities</h3>
<p dir="auto">The list of predefined dimensional quantities is returned with</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="ThermofluidQuantities.dimvartypes"><pre>ThermofluidQuantities<span class="pl-k">.</span>dimvartypes</pre></div>
<p dir="auto">and non-dimensional variables with</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="ThermofluidQuantities.nondimvartypes"><pre>ThermofluidQuantities<span class="pl-k">.</span>nondimvartypes</pre></div>
<p dir="auto">It is simple to define a new quantity and use it. For example, a non-dimnesional variable</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@nondimvar MyDimensionlessNumber
MyDimensionlessNumber(25.3)"><pre><span class="pl-c1">@nondimvar</span> MyDimensionlessNumber
<span class="pl-c1">MyDimensionlessNumber</span>(<span class="pl-c1">25.3</span>)</pre></div>
<p dir="auto">or a new dimensional quantity</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@dimvar MyTimeVar TimeType
MyTimeVar(2.3u&quot;minute&quot;)"><pre><span class="pl-c1">@dimvar</span> MyTimeVar TimeType
<span class="pl-c1">MyTimeVar</span>(<span class="pl-c1">2.3</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>minute<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">The second argument represents a 'unit type' for time, a union of types with time units. This comes with a default unit (seconds). To see the list of predefined unit types</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="ThermofluidQuantities.unittypes"><pre>ThermofluidQuantities<span class="pl-k">.</span>unittypes</pre></div>
<p dir="auto">If you don't see the one you want, then add it with <code>@displayedunits</code></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="import ThermofluidQuantities: 𝐋, 𝐓
@displayedunits MyInverseVelocityType &quot;s/m&quot; 𝐓/𝐋"><pre><span class="pl-k">import</span> ThermofluidQuantities<span class="pl-k">:</span> 𝐋, 𝐓
<span class="pl-c1">@displayedunits</span> MyInverseVelocityType <span class="pl-s"><span class="pl-pds">"</span>s/m<span class="pl-pds">"</span></span> 𝐓<span class="pl-k">/</span>𝐋</pre></div>
<p dir="auto">Then you can create a quantity:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@dimvar MyInverseVelocityVar MyInverseVelocityType
MyInverseVelocityVar(8u&quot;minute/mi&quot;)"><pre><span class="pl-c1">@dimvar</span> MyInverseVelocityVar MyInverseVelocityType
<span class="pl-c1">MyInverseVelocityVar</span>(<span class="pl-c1">8</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>minute/mi<span class="pl-pds">"</span></span>)</pre></div>
<h3 dir="auto"><a id="user-content-gases-and-liquids" class="anchor" aria-hidden="true" href="#gases-and-liquids"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Gases and liquids</h3>
<p dir="auto">There are several predefined properties for gases and liquids. You can see the lists here:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="ThermofluidQuantities.gases"><pre>ThermofluidQuantities<span class="pl-k">.</span>gases</pre></div>
<p dir="auto">and</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="ThermofluidQuantities.liquids"><pre>ThermofluidQuantities<span class="pl-k">.</span>liquids</pre></div>
<p dir="auto">For example, to see the properties of air,</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Air"><pre>Air</pre></div>
<p dir="auto">You can access any of the properties individually with, e.g.,</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Viscosity(Air)
SpecificHeatRatio(Air)"><pre><span class="pl-c1">Viscosity</span>(Air)
<span class="pl-c1">SpecificHeatRatio</span>(Air)</pre></div>
</article></div>