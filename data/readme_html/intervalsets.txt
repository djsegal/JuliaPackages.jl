<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-intervalsetsjl" class="anchor" aria-hidden="true" href="#intervalsetsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>IntervalSets.jl</h1>
<p>Interval Sets for Julia</p>
<p><a href="https://travis-ci.org/JuliaMath/IntervalSets.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/b8c74a0365d5c70f0af5eccc46e2d510d9c49a47/68747470733a2f2f7472617669732d63692e6f72672f4a756c69614d6174682f496e74657276616c536574732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaMath/IntervalSets.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p><a href="https://coveralls.io/github/JuliaMath/IntervalSets.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/d5669445df7f62745acbfaf9dff1ba1175eed7e1/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f4a756c69614d6174682f496e74657276616c536574732e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/JuliaMath/IntervalSets.jl/badge.svg?branch=master" style="max-width:100%;"></a></p>
<p>This package represents intervals of an ordered set. For an interval
spanning from <code>a</code> to <code>b</code>, all values <code>x</code> that lie between <code>a</code> and <code>b</code>
are defined as being members of the interval.</p>
<p>This package is intended to implement a "minimal" foundation for
intervals upon which other packages might build. In particular, we
<em>encourage</em> <a href="https://docs.julialang.org/en/stable/manual/style-guide/#Avoid-type-piracy-1" rel="nofollow">type-piracy</a>
for the reason that only one interval package can
unambiguously define the <code>..</code> and <code>±</code> operators (see below).</p>
<p>Currently this package defines one concrete type, <code>Interval</code>.
These define the set spanning from <code>a</code> to <code>b</code>, meaning the
interval is defined as the set <code>{x}</code> satisfying <code>a ≤ x ≤ b</code>. This is
sometimes written <code>[a,b]</code> (mathematics syntax, not Julia syntax) or
<code>a..b</code>.</p>
<p>Optionally, <code>Interval{L,R}</code> can represent open and half-open intervals. The type
parameters <code>L</code> and <code>R</code> correspond to the left and right endpoint respectively.
The notation <code>ClosedInterval</code> is short for <code>Interval{:closed,:closed}</code>, while <code>OpenInterval</code> is short for <code>Interval{:open,:open}</code>. For example, the interval <code>Interval{:open,:closed}</code> corresponds to the set <code>{x}</code> satisfying <code>a &lt; x ≤ b</code>.</p>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<p>You can construct <code>ClosedInterval</code>s in a variety of ways:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> IntervalSets

julia<span class="pl-k">&gt;</span> <span class="pl-c1">ClosedInterval</span><span class="pl-c1">{Float64}</span>(<span class="pl-c1">1</span>,<span class="pl-c1">3</span>)
<span class="pl-c1">1.0</span><span class="pl-k">..</span><span class="pl-c1">3.0</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">0.5</span><span class="pl-k">..</span><span class="pl-c1">2.5</span>
<span class="pl-c1">0.5</span><span class="pl-k">..</span><span class="pl-c1">2.5</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">1.5</span>±<span class="pl-c1">1</span>
<span class="pl-c1">0.5</span><span class="pl-k">..</span><span class="pl-c1">2.5</span></pre></div>
<p>Similarly, you can construct <code>OpenInterval</code>s and <code>Interval{:open,:closed}</code>s, and <code>Interval{:closed,:open}</code>:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">OpenInterval</span><span class="pl-c1">{Float64}</span>(<span class="pl-c1">1</span>,<span class="pl-c1">3</span>)
<span class="pl-c1">1.0</span><span class="pl-k">..</span><span class="pl-c1">3.0</span> (open)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">OpenInterval</span>(<span class="pl-c1">0.5</span><span class="pl-k">..</span><span class="pl-c1">2.5</span>)
<span class="pl-c1">0.5</span><span class="pl-k">..</span><span class="pl-c1">2.5</span> (open)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">Interval</span><span class="pl-c1">{:open,:closed}</span>(<span class="pl-c1">1</span>,<span class="pl-c1">3</span>)
<span class="pl-c1">1..3</span> (open–closed)</pre></div>
<p>The <code>±</code> operator may be typed as <code>\pm&lt;TAB&gt;</code> (using Julia's LaTeX
syntax tab-completion).</p>
<p>Intervals also support the expected set operations:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">1.75</span> <span class="pl-k">∈</span> <span class="pl-c1">1.5</span>±<span class="pl-c1">1</span>  <span class="pl-c"><span class="pl-c">#</span> \in&lt;TAB&gt;; can also use `in`</span>
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">0</span> <span class="pl-k">∈</span> <span class="pl-c1">1.5</span>±<span class="pl-c1">1</span>
<span class="pl-c1">false</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">1</span> <span class="pl-k">∈</span> <span class="pl-c1">OpenInterval</span>(<span class="pl-c1">0..1</span>)
<span class="pl-c1">false</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">intersect</span>(<span class="pl-c1">1..5</span>, <span class="pl-c1">3..7</span>)   <span class="pl-c"><span class="pl-c">#</span> can also use `a ∩ b`, where the symbol is \cap&lt;TAB&gt;</span>
<span class="pl-c1">3..5</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">isempty</span>(<span class="pl-c1">intersect</span>(<span class="pl-c1">1..5</span>, <span class="pl-c1">10..11</span>))
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> (<span class="pl-c1">0.25</span><span class="pl-k">..</span><span class="pl-c1">5</span>) <span class="pl-k">∪</span> (<span class="pl-c1">3..7.4</span>)    <span class="pl-c"><span class="pl-c">#</span> \cup&lt;TAB&gt;; can also use union()</span>
<span class="pl-c1">0.25</span><span class="pl-k">..</span><span class="pl-c1">7.4</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">isclosedset</span>(<span class="pl-c1">0.5</span><span class="pl-k">..</span><span class="pl-c1">2.0</span>)
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">isopenset</span>(<span class="pl-c1">OpenInterval</span>(<span class="pl-c1">0.5</span><span class="pl-k">..</span><span class="pl-c1">2.5</span>))
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">isleftopen</span>(<span class="pl-c1">2..3</span>)
<span class="pl-c1">false</span></pre></div>
<p>When computing the union, the result must also be an interval:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> (<span class="pl-c1">0.25</span><span class="pl-k">..</span><span class="pl-c1">5</span>) <span class="pl-k">∪</span> (<span class="pl-c1">6..7.4</span>)
<span class="pl-k">------</span> ArgumentError <span class="pl-k">-------------------</span> Stacktrace (most recent call last)

 [<span class="pl-c1">1</span>] — <span class="pl-c1">union</span>(<span class="pl-k">::</span><span class="pl-c1">IntervalSets.ClosedInterval{Float64}</span>, <span class="pl-k">::</span><span class="pl-c1">IntervalSets.ClosedInterval{Float64}</span>) at closed<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">34</span>

ArgumentError<span class="pl-k">:</span> Cannot construct union of disjoint sets.</pre></div>
</article></div>