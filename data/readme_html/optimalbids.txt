<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-optimalbids" class="anchor" aria-hidden="true" href="#optimalbids"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>OptimalBids</h1>
<p dir="auto"><a href="https://andrewrosemberg.github.io/OptimalBids.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://andrewrosemberg.github.io/OptimalBids.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/andrewrosemberg/OptimalBids.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/e8d10b8cb3b1e06cfe9393c48eb35ad0a9ea26b097363906bcfd561e78669c10/68747470733a2f2f636f6465636f762e696f2f67682f616e64726577726f73656d626572672f4f7074696d616c426964732e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/andrewrosemberg/OptimalBids.jl/branch/main/graph/badge.svg" style="max-width: 100%;"></a>
<a href="https://github.com/invenia/BlueStyle"><img src="https://camo.githubusercontent.com/c18fbaa52d94d16b90b19701fc90d289b8a5bb920c74c79bab200b14e75420a4/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c75652d3434393564312e737667" alt="Code Style: Blue" data-canonical-src="https://img.shields.io/badge/code%20style-blue-4495d1.svg" style="max-width: 100%;"></a>
<a href="https://github.com/SciML/ColPrac"><img src="https://camo.githubusercontent.com/a6c1efcb19a957860ecb25966a730260b03d6e05380d0c27992ee7f9e3b1feb3/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f436f6c507261632d436f6e7472696275746f72277325323047756964652d626c756576696f6c6574" alt="ColPrac: Contributor's Guide on Collaborative Practices for Community Packages" data-canonical-src="https://img.shields.io/badge/ColPrac-Contributor's%20Guide-blueviolet" style="max-width: 100%;"></a></p>
<p dir="auto">Simple Package to help evaluate bids in markets/auctions.</p>
<h2 dir="auto"><a id="user-content-instalation" class="anchor" aria-hidden="true" href="#instalation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Instalation</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="] add OptimalBids"><pre>] add OptimalBids</pre></div>
<h2 dir="auto"><a id="user-content-overview" class="anchor" aria-hidden="true" href="#overview"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Overview</h2>
<p dir="auto">The framework used is based around the dispatch of the following functions for specified markets (subtypes of the core abstract type <code>Market</code>):
<code>build_market</code>, <code>change_bids!</code>, <code>clear_market!</code>, <code>calculate_profit</code> (see docstrings for more info - e.g. <code>@doc change_bids!</code>). I.e. these are the functions that need to be implemented for each market type.</p>
<p dir="auto">In addition, the functions <code>profit_for_bid!</code>, <code>profit_curve!</code> are implemented in a reasonably generic way, allowing users to dispatch them with any new market. (see docstrings for more info - e.g. <code>@doc profit_for_bid!</code>).</p>
<h2 dir="auto"><a id="user-content-powermodels-markets-example" class="anchor" aria-hidden="true" href="#powermodels-markets-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>PowerModels-Markets Example</h2>
<p dir="auto">In order to exemplify some of the functionalities available, let's use the interface with <a href="https://github.com/lanl-ansi/PowerModels.jl">PowerModels.jl</a> implemented in the submodel <code>PowerModelsMarkets</code>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using OptimalBids
using OptimalBids.PowerModelsMarkets
using Clp # Market Clearing Solver
using Plots # For some evaluation plots at the end

#=
CASE DEFINITION
=#

# Read market data from IEEE 118 bus case
case_name = &quot;case118.m&quot;
network_data = PowerModels.parse_file(case_name)

# Pretend we are a company constructing a new set of generators in the grid.
# Choose a percentage of the total number of buses to install the new generators:
percentage_buses = 0.09

# We need the keys PowerModels uses to reference the appropriate buses in it's network data dictionary.
# First, find out all available keys:
bus_indexes = collect(keys(network_data[&quot;bus&quot;]))
# Then, calculate number of buses that consitute the chose percent (`percentage_buses`):
num_buses = length(bus_indexes)
num_strategic_buses = ceil(Int, percentage_buses * num_buses)
# To avoid any biases let's grab some generators in the middle:
bus_indexes = bus_indexes[21:(21 + num_strategic_buses - 1)]
# Finally, add new generators to the network grid data and collect their reference keys.
generator_indexes = [
    add_generator(network_data, parse(Int, bus_idx)) for bus_idx in bus_indexes
]

#=
PACKAGE USAGE
=#

# Define market
market = build_market(
    PowerModelsMarket,
    network_data,
    generator_indexes,
    Clp.Optimizer,
)

# New generators are added with 0.0 max capacity (a.k.a bid/offer), so lets change their volume offers:
initial_bids = rand(num_strategic_buses)
change_bids!(market, initial_bids)

# Now we can simulate the market:
clear_market!(market)

# and evaluate the gross profit (and cleared volums and prices):
calculate_profit(market)

# To avoid hassle, we made a function that calculates profit for any set of bids/offers:
new_bids = rand(num_strategic_buses)
profit_for_bid!(market, new_bids)

# and a function to evaluate a vector of possible bids sequentially:
range_mul_factor = 0.0:0.1:15.0
bid_range = [initial_bids .* [i] for i in range_mul_factor]
p_curve = profit_curve!(market, bid_range)

# Let's plot and see how the range profit evaluatiuon went:
plot(collect(range_mul_factor), p_curve,
    title=&quot;Case $case_name&quot;,
    label=&quot;Range Evaluation - Random Offers&quot;,
    ylabel=&quot;Profit (\$)&quot;,
    xlabel=&quot;Multiplicative Factor&quot;,
    legend=:outertopright,
)"><pre><span class="pl-k">using</span> OptimalBids
<span class="pl-k">using</span> OptimalBids<span class="pl-k">.</span>PowerModelsMarkets
<span class="pl-k">using</span> Clp <span class="pl-c"><span class="pl-c">#</span> Market Clearing Solver</span>
<span class="pl-k">using</span> Plots <span class="pl-c"><span class="pl-c">#</span> For some evaluation plots at the end</span>

<span class="pl-c"><span class="pl-c">#=</span></span>
<span class="pl-c">CASE DEFINITION</span>
<span class="pl-c"><span class="pl-c">=#</span></span>

<span class="pl-c"><span class="pl-c">#</span> Read market data from IEEE 118 bus case</span>
case_name <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>case118.m<span class="pl-pds">"</span></span>
network_data <span class="pl-k">=</span> PowerModels<span class="pl-k">.</span><span class="pl-c1">parse_file</span>(case_name)

<span class="pl-c"><span class="pl-c">#</span> Pretend we are a company constructing a new set of generators in the grid.</span>
<span class="pl-c"><span class="pl-c">#</span> Choose a percentage of the total number of buses to install the new generators:</span>
percentage_buses <span class="pl-k">=</span> <span class="pl-c1">0.09</span>

<span class="pl-c"><span class="pl-c">#</span> We need the keys PowerModels uses to reference the appropriate buses in it's network data dictionary.</span>
<span class="pl-c"><span class="pl-c">#</span> First, find out all available keys:</span>
bus_indexes <span class="pl-k">=</span> <span class="pl-c1">collect</span>(<span class="pl-c1">keys</span>(network_data[<span class="pl-s"><span class="pl-pds">"</span>bus<span class="pl-pds">"</span></span>]))
<span class="pl-c"><span class="pl-c">#</span> Then, calculate number of buses that consitute the chose percent (`percentage_buses`):</span>
num_buses <span class="pl-k">=</span> <span class="pl-c1">length</span>(bus_indexes)
num_strategic_buses <span class="pl-k">=</span> <span class="pl-c1">ceil</span>(Int, percentage_buses <span class="pl-k">*</span> num_buses)
<span class="pl-c"><span class="pl-c">#</span> To avoid any biases let's grab some generators in the middle:</span>
bus_indexes <span class="pl-k">=</span> bus_indexes[<span class="pl-c1">21</span><span class="pl-k">:</span>(<span class="pl-c1">21</span> <span class="pl-k">+</span> num_strategic_buses <span class="pl-k">-</span> <span class="pl-c1">1</span>)]
<span class="pl-c"><span class="pl-c">#</span> Finally, add new generators to the network grid data and collect their reference keys.</span>
generator_indexes <span class="pl-k">=</span> [
    <span class="pl-c1">add_generator</span>(network_data, <span class="pl-c1">parse</span>(Int, bus_idx)) <span class="pl-k">for</span> bus_idx <span class="pl-k">in</span> bus_indexes
]

<span class="pl-c"><span class="pl-c">#=</span></span>
<span class="pl-c">PACKAGE USAGE</span>
<span class="pl-c"><span class="pl-c">=#</span></span>

<span class="pl-c"><span class="pl-c">#</span> Define market</span>
market <span class="pl-k">=</span> <span class="pl-c1">build_market</span>(
    PowerModelsMarket,
    network_data,
    generator_indexes,
    Clp<span class="pl-k">.</span>Optimizer,
)

<span class="pl-c"><span class="pl-c">#</span> New generators are added with 0.0 max capacity (a.k.a bid/offer), so lets change their volume offers:</span>
initial_bids <span class="pl-k">=</span> <span class="pl-c1">rand</span>(num_strategic_buses)
<span class="pl-c1">change_bids!</span>(market, initial_bids)

<span class="pl-c"><span class="pl-c">#</span> Now we can simulate the market:</span>
<span class="pl-c1">clear_market!</span>(market)

<span class="pl-c"><span class="pl-c">#</span> and evaluate the gross profit (and cleared volums and prices):</span>
<span class="pl-c1">calculate_profit</span>(market)

<span class="pl-c"><span class="pl-c">#</span> To avoid hassle, we made a function that calculates profit for any set of bids/offers:</span>
new_bids <span class="pl-k">=</span> <span class="pl-c1">rand</span>(num_strategic_buses)
<span class="pl-c1">profit_for_bid!</span>(market, new_bids)

<span class="pl-c"><span class="pl-c">#</span> and a function to evaluate a vector of possible bids sequentially:</span>
range_mul_factor <span class="pl-k">=</span> <span class="pl-c1">0.0</span><span class="pl-k">:</span><span class="pl-c1">0.1</span><span class="pl-k">:</span><span class="pl-c1">15.0</span>
bid_range <span class="pl-k">=</span> [initial_bids <span class="pl-k">.*</span> [i] <span class="pl-k">for</span> i <span class="pl-k">in</span> range_mul_factor]
p_curve <span class="pl-k">=</span> <span class="pl-c1">profit_curve!</span>(market, bid_range)

<span class="pl-c"><span class="pl-c">#</span> Let's plot and see how the range profit evaluatiuon went:</span>
<span class="pl-c1">plot</span>(<span class="pl-c1">collect</span>(range_mul_factor), p_curve,
    title<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Case <span class="pl-v">$case_name</span><span class="pl-pds">"</span></span>,
    label<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Range Evaluation - Random Offers<span class="pl-pds">"</span></span>,
    ylabel<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Profit (<span class="pl-cce">\$</span>)<span class="pl-pds">"</span></span>,
    xlabel<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Multiplicative Factor<span class="pl-pds">"</span></span>,
    legend<span class="pl-k">=</span><span class="pl-c1">:outertopright</span>,
)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://raw.githubusercontent.com/andrewrosemberg/OptimalBids.jl/main/docs/src/assets/profit_curve.png"><img src="https://raw.githubusercontent.com/andrewrosemberg/OptimalBids.jl/main/docs/src/assets/profit_curve.png" alt="" style="max-width: 100%;"></a></p>
</article></div>