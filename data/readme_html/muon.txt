<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://user-images.githubusercontent.com/32863903/112323914-864a0f80-8cb2-11eb-91ae-375cdb61cd1b.png"><img src="https://user-images.githubusercontent.com/32863903/112323914-864a0f80-8cb2-11eb-91ae-375cdb61cd1b.png" alt="Muon.jl" style="max-width: 100%;"></a></p>
<h1 dir="auto"><a id="user-content-muon-for-julia" class="anchor" aria-hidden="true" href="#muon-for-julia"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Muon for Julia</h1>
<p dir="auto"><a href="https://scverse.github.io/Muon.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a></p>
<p dir="auto">Muon is originally <a href="https://github.com/scverse/muon">a Python library to work with multimodal data</a>. <code>Muon.jl</code> brings the ability to work with the same data structures to Julia.</p>
<p dir="auto"><code>Muon.jl</code> implements I/O for <code>.h5mu</code> and <code>.h5ad</code> files as well as basic operations on the multimodal objects.</p>
<h2 dir="auto"><a id="user-content-introduction" class="anchor" aria-hidden="true" href="#introduction"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Introduction</h2>
<p dir="auto">Datasets can usually be represented as matrices with values for the <em>variables</em> measured in different samples, or <em>observations</em>. Variables and observations tend to have annotations attached to them, a typical example would be metadata annotating samples. Such a dataset with the matrix in its centre and different kinds of annotations associated with it can be stored conveniently in an <a href="https://anndata.readthedocs.io/en/latest/" rel="nofollow">annotated data</a> object, <code>AnnData</code> for short.</p>
<p dir="auto">Multimodal datasets are characterised by the variables coming from different generative processes. Each of these <em>modalities</em> is an annotated dataset by itself, but they can be managed and analyzed together within a <code>MuData</code> object.</p>
<h2 dir="auto"><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Examples</h2>
<p dir="auto"><code>MuData</code> objects can be created from <code>.h5mu</code> files:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Muon

mdata = readh5mu(&quot;pbmc10k.h5mu&quot;);"><pre><span class="pl-k">using</span> Muon

mdata <span class="pl-k">=</span> <span class="pl-c1">readh5mu</span>(<span class="pl-s"><span class="pl-pds">"</span>pbmc10k.h5mu<span class="pl-pds">"</span></span>);</pre></div>
<p dir="auto">Individual modalities can be accessed directly by their name:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="mdata[&quot;rna&quot;]
# =&gt; AnnData object 10110 ✕ 101001"><pre>mdata[<span class="pl-s"><span class="pl-pds">"</span>rna<span class="pl-pds">"</span></span>]
<span class="pl-c"><span class="pl-c">#</span> =&gt; AnnData object 10110 ✕ 101001</span></pre></div>
<p dir="auto">Low-dimensional representations of the data can be plotted with the plotting library of choice:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using DataFrames
using GLMakie
using AlgebraOfGraphics

df = DataFrame(LF1 = mdata.obsm[&quot;X_umap&quot;][1,:],
               LF2 = mdata.obsm[&quot;X_umap&quot;][2,:]);

data(df) * mapping(:LF1, :LF2) * visual(Scatter) |&gt; draw"><pre><span class="pl-k">using</span> DataFrames
<span class="pl-k">using</span> GLMakie
<span class="pl-k">using</span> AlgebraOfGraphics

df <span class="pl-k">=</span> <span class="pl-c1">DataFrame</span>(LF1 <span class="pl-k">=</span> mdata<span class="pl-k">.</span>obsm[<span class="pl-s"><span class="pl-pds">"</span>X_umap<span class="pl-pds">"</span></span>][<span class="pl-c1">1</span>,:],
               LF2 <span class="pl-k">=</span> mdata<span class="pl-k">.</span>obsm[<span class="pl-s"><span class="pl-pds">"</span>X_umap<span class="pl-pds">"</span></span>][<span class="pl-c1">2</span>,:]);

<span class="pl-c1">data</span>(df) <span class="pl-k">*</span> <span class="pl-c1">mapping</span>(<span class="pl-c1">:LF1</span>, <span class="pl-c1">:LF2</span>) <span class="pl-k">*</span> <span class="pl-c1">visual</span>(Scatter) <span class="pl-k">|&gt;</span> draw</pre></div>
</article></div>