<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content--libasicamerajl" class="anchor" aria-hidden="true" href="#-libasicamerajl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><a target="_blank" rel="noopener noreferrer" href="/docs/LibASICamera_logo.svg?raw=true&amp;sanitize=true"><img src="/docs/LibASICamera_logo.svg?raw=true&amp;sanitize=true" width="5%" style="max-width: 100%;"></a> LibASICamera.jl</h1>
<p dir="auto"><a href="https://alftetzlaff.github.io/LibASICamera.jl/dev/" rel="nofollow"><img src="https://camo.githubusercontent.com/9e50bd744da332d6eb4aeaf467eadf72db0d6507361d587a4ac2245dc540f934/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c7565" alt="" data-canonical-src="https://img.shields.io/badge/docs-dev-blue" style="max-width: 100%;"></a>
<a href="https://astronomy-imaging-camera.com/" rel="nofollow"><img src="https://camo.githubusercontent.com/498ff788706eb02e9dcc2e93edecd6530f92db3547c44b174fbc0ee0b86245b5/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f5a574f2d4153492d637269746963616c" alt="" data-canonical-src="https://img.shields.io/badge/ZWO-ASI-critical" style="max-width: 100%;"></a></p>
<p dir="auto">A julia wrapper for the ASI Camera interface.</p>
<p dir="auto">Please note that this is my first julia project, so suggestions for improvements are welcome!</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">To install this package, spin up julia, hit the ']' key to enter the package manager, then type:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="pkg&gt; add LibASICamera  # works, as soon as this package is registered
#or
pkg&gt; add https://github.com/AlfTetzlaff/LibASICamera.jl"><pre>pkg<span class="pl-k">&gt;</span> add LibASICamera  <span class="pl-c"><span class="pl-c">#</span> works, as soon as this package is registered</span>
<span class="pl-c"><span class="pl-c">#</span>or</span>
pkg<span class="pl-k">&gt;</span> add https<span class="pl-k">:</span><span class="pl-k">//</span>github<span class="pl-k">.</span>com<span class="pl-k">/</span>AlfTetzlaff<span class="pl-k">/</span>LibASICamera<span class="pl-k">.</span>jl</pre></div>
<h3 dir="auto"><a id="user-content-linux-specific-steps" class="anchor" aria-hidden="true" href="#linux-specific-steps"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Linux specific steps</h3>
<p dir="auto">The ZWO ASI SDK will be downloaded in the background. Please note that (on Linux) you have to install the udev rules for the cameras. Run</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="pkg&gt; build -v LibASICamera"><pre>pkg<span class="pl-k">&gt;</span> build <span class="pl-k">-</span>v LibASICamera</pre></div>
<p dir="auto">to get the command to run in order to install the udev rules.</p>
<p dir="auto">Or in your terminal, run:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="sudo install /path/to/asi.rules /lib/udev/rules.d"><pre class="notranslate"><code>sudo install /path/to/asi.rules /lib/udev/rules.d
</code></pre></div>
<h3 dir="auto"><a id="user-content-windows-specific-steps" class="anchor" aria-hidden="true" href="#windows-specific-steps"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Windows specific steps</h3>
<p dir="auto">Download and install the camera driver from <a href="https://astronomy-imaging-camera.com/software-drivers" rel="nofollow">here</a>.</p>
<h3 dir="auto"><a id="user-content-test" class="anchor" aria-hidden="true" href="#test"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Test</h3>
<p dir="auto">The wrapper was written and tested on Linux. In principle it should work on Windows and Mac as well, but I couldn't test it so far.</p>
<p dir="auto">You can then connect the camera and run partial tests on functionality by typing in the package manager:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="pkg&gt; test LibASICamera"><pre>pkg<span class="pl-k">&gt;</span> test LibASICamera</pre></div>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<p dir="auto">Get the connected devices and open them:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="devices = get_connected_devices()
cam = devices[1]"><pre>devices <span class="pl-k">=</span> <span class="pl-c1">get_connected_devices</span>()
cam <span class="pl-k">=</span> devices[<span class="pl-c1">1</span>]</pre></div>
<p dir="auto">Query information about the camera, like resolution or pixel size:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@show get_camera_property(cam)
#or
@show cam.info"><pre><span class="pl-c1">@show</span> <span class="pl-c1">get_camera_property</span>(cam)
<span class="pl-c"><span class="pl-c">#</span>or</span>
<span class="pl-c1">@show</span> cam<span class="pl-k">.</span>info</pre></div>
<p dir="auto">Get the parameters, which can be controlled or queried by the user, like gain, exposure or temperature:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@show get_control_caps(cam)
# or
@show cam.control_caps"><pre><span class="pl-c1">@show</span> <span class="pl-c1">get_control_caps</span>(cam)
<span class="pl-c"><span class="pl-c">#</span> or</span>
<span class="pl-c1">@show</span> cam<span class="pl-k">.</span>control_caps</pre></div>
<p dir="auto">Get and set a control value, for some, special shorthand functions exist:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="value, is_auto_controlled = get_control_value(cam, ASI_GAIN)
set_control_value(cam, ASI_GAIN, value, is_auto_controlled)
set_gain(cam, value)
get_temperature(cam)"><pre>value, is_auto_controlled <span class="pl-k">=</span> <span class="pl-c1">get_control_value</span>(cam, ASI_GAIN)
<span class="pl-c1">set_control_value</span>(cam, ASI_GAIN, value, is_auto_controlled)
<span class="pl-c1">set_gain</span>(cam, value)
<span class="pl-c1">get_temperature</span>(cam)</pre></div>
<h2 dir="auto"><a id="user-content-still-image" class="anchor" aria-hidden="true" href="#still-image"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Still image</h2>
<p dir="auto">Take a still image:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="set_gain(cam, 30)  # example values
set_exposure(cam, 500)
img = capture_still(cam)"><pre><span class="pl-c1">set_gain</span>(cam, <span class="pl-c1">30</span>)  <span class="pl-c"><span class="pl-c">#</span> example values</span>
<span class="pl-c1">set_exposure</span>(cam, <span class="pl-c1">500</span>)
img <span class="pl-k">=</span> <span class="pl-c1">capture_still</span>(cam)</pre></div>
<h2 dir="auto"><a id="user-content-video" class="anchor" aria-hidden="true" href="#video"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Video</h2>
<p dir="auto">Take a video using Makie:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using LibASICamera
using Makie

devices = get_connected_devices()
cam = devices[1]
set_gain(cam, 30, true)  # example values
set_exposure(cam, 500, true)


function capture_video(cam::ASICamera)
    # Camera stuff setup
    width, height, binning, img_type = get_roi_format(cam)
    buffer = allocate_buffer(width, height, img_type)

    # Makie scene setup
    colorrange = img_type == ASI_IMG_RAW16 ? 2^16-1 : 255
    scene = Scene()
    img = image!(scene, buffer, show_axis = false, scale_plot = false, colorrange=(0,colorrange))[end]
    display(scene)

    function video_loop()
        err = ASI_SUCCESS
        while isopen(scene) &amp;&amp; err == ASI_SUCCESS
            err = get_video_data!(cam, buffer, 5000)
            img[1] = buffer[end:-1:1, :]  # for some reason we have to flip x
            yield()
        end
        println(err)
    end

    start_video(cam)
    video_loop()
    stop_video(cam)
end

@async t = capture_video(cam)

stop_video(cam)

# Always close the camera at the end
close_camera(cam)"><pre><span class="pl-k">using</span> LibASICamera
<span class="pl-k">using</span> Makie

devices <span class="pl-k">=</span> <span class="pl-c1">get_connected_devices</span>()
cam <span class="pl-k">=</span> devices[<span class="pl-c1">1</span>]
<span class="pl-c1">set_gain</span>(cam, <span class="pl-c1">30</span>, <span class="pl-c1">true</span>)  <span class="pl-c"><span class="pl-c">#</span> example values</span>
<span class="pl-c1">set_exposure</span>(cam, <span class="pl-c1">500</span>, <span class="pl-c1">true</span>)


<span class="pl-k">function</span> <span class="pl-en">capture_video</span>(cam<span class="pl-k">::</span><span class="pl-c1">ASICamera</span>)
    <span class="pl-c"><span class="pl-c">#</span> Camera stuff setup</span>
    width, height, binning, img_type <span class="pl-k">=</span> <span class="pl-c1">get_roi_format</span>(cam)
    buffer <span class="pl-k">=</span> <span class="pl-c1">allocate_buffer</span>(width, height, img_type)

    <span class="pl-c"><span class="pl-c">#</span> Makie scene setup</span>
    colorrange <span class="pl-k">=</span> img_type <span class="pl-k">==</span> ASI_IMG_RAW16 <span class="pl-k">?</span> <span class="pl-c1">2</span><span class="pl-k">^</span><span class="pl-c1">16</span><span class="pl-k">-</span><span class="pl-c1">1</span> <span class="pl-k">:</span> <span class="pl-c1">255</span>
    scene <span class="pl-k">=</span> <span class="pl-c1">Scene</span>()
    img <span class="pl-k">=</span> <span class="pl-c1">image!</span>(scene, buffer, show_axis <span class="pl-k">=</span> <span class="pl-c1">false</span>, scale_plot <span class="pl-k">=</span> <span class="pl-c1">false</span>, colorrange<span class="pl-k">=</span>(<span class="pl-c1">0</span>,colorrange))[<span class="pl-c1">end</span>]
    <span class="pl-c1">display</span>(scene)

    <span class="pl-k">function</span> <span class="pl-en">video_loop</span>()
        err <span class="pl-k">=</span> ASI_SUCCESS
        <span class="pl-k">while</span> <span class="pl-c1">isopen</span>(scene) <span class="pl-k">&amp;&amp;</span> err <span class="pl-k">==</span> ASI_SUCCESS
            err <span class="pl-k">=</span> <span class="pl-c1">get_video_data!</span>(cam, buffer, <span class="pl-c1">5000</span>)
            img[<span class="pl-c1">1</span>] <span class="pl-k">=</span> buffer[<span class="pl-c1">end</span><span class="pl-k">:</span><span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">1</span>, :]  <span class="pl-c"><span class="pl-c">#</span> for some reason we have to flip x</span>
            <span class="pl-c1">yield</span>()
        <span class="pl-k">end</span>
        <span class="pl-c1">println</span>(err)
    <span class="pl-k">end</span>

    <span class="pl-c1">start_video</span>(cam)
    <span class="pl-c1">video_loop</span>()
    <span class="pl-c1">stop_video</span>(cam)
<span class="pl-k">end</span>

<span class="pl-c1">@async</span> t <span class="pl-k">=</span> <span class="pl-c1">capture_video</span>(cam)

<span class="pl-c1">stop_video</span>(cam)

<span class="pl-c"><span class="pl-c">#</span> Always close the camera at the end</span>
<span class="pl-c1">close_camera</span>(cam)</pre></div>
<p dir="auto">The above example runs the video capturing asynchronously in the main <em>thread</em>. You might notice that the REPL input gets sluggish under certain circumstances (exposure times, bandwidth settings and depending on your hardware). This can be resolved by moving the video capturing to another <em>process</em> using Distributed.jl:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Distributed
addprocs(1)
nprocs()

#%%
@everywhere using LibASICamera
@everywhere using Makie

#%%
@everywhere function main()
    cam = get_connected_devices()[1]
    set_exposure(cam, 500, true)
    set_gain(cam, 30)
    set_control_value(cam, ASI_BANDWIDTHOVERLOAD, 90)
    set_control_value(cam, ASI_HIGH_SPEED_MODE, false)
    set_roi_format(cam, 1280, 960, 1, ASI_IMG_RAW8)
    # set_roi_format(cam, 640, 480, 2, ASI_IMG_RAW8)
    # set_roi_format(cam, 640, 480, 1, ASI_IMG_RAW8)
    # set_roi_format(cam, 320, 240, 1, ASI_IMG_RAW8)
    # set_roi_format(cam, 168, 128, 1, ASI_IMG_RAW8)

    function capture_video(cam::ASICamera)
        # Camera stuff setup
        width, height, binning, img_type = get_roi_format(cam)
        buffer = allocate_buffer(width, height, img_type)

        # Makie scene setup
        colorrange = img_type == ASI_IMG_RAW16 ? 2^16-1 : 255
        scene = Scene()
        img = image!(scene, buffer, show_axis = false, scale_plot = false, colorrange=(0,colorrange))[end]
        t = text!(scene, &quot;0 FPS&quot;, color=:yellow, position=(width, height), align=(:top, :right), textsize=Int(height/16))
        display(scene)

        function video_loop(cam, buffer, img, t)
            err = ASI_SUCCESS
            while isopen(scene) &amp;&amp; err == ASI_SUCCESS
                t0 = time_ns()
                err = get_video_data!(cam, buffer, 5000)
                img[1] = buffer[end:-1:1, :]  # for some reason we have to flip x
                t1 = time_ns()
                t[end][1] = string(round(1. /(Float64(t1-t0)/1E9), digits=1), &quot; FPS&quot;)
                yield()
            end
            println(err)
        end

        start_video(cam)
        video_loop(cam, buffer, img, t)
        stop_video(cam)
    end

    capture_video(cam)
    close_camera(cam)
end

remotecall(main, 2)"><pre><span class="pl-k">using</span> Distributed
<span class="pl-c1">addprocs</span>(<span class="pl-c1">1</span>)
<span class="pl-c1">nprocs</span>()

<span class="pl-c"><span class="pl-c">#</span>%%</span>
<span class="pl-c1">@everywhere</span> <span class="pl-k">using</span> LibASICamera
<span class="pl-c1">@everywhere</span> <span class="pl-k">using</span> Makie

<span class="pl-c"><span class="pl-c">#</span>%%</span>
<span class="pl-c1">@everywhere</span> <span class="pl-k">function</span> <span class="pl-en">main</span>()
    cam <span class="pl-k">=</span> <span class="pl-c1">get_connected_devices</span>()[<span class="pl-c1">1</span>]
    <span class="pl-c1">set_exposure</span>(cam, <span class="pl-c1">500</span>, <span class="pl-c1">true</span>)
    <span class="pl-c1">set_gain</span>(cam, <span class="pl-c1">30</span>)
    <span class="pl-c1">set_control_value</span>(cam, ASI_BANDWIDTHOVERLOAD, <span class="pl-c1">90</span>)
    <span class="pl-c1">set_control_value</span>(cam, ASI_HIGH_SPEED_MODE, <span class="pl-c1">false</span>)
    <span class="pl-c1">set_roi_format</span>(cam, <span class="pl-c1">1280</span>, <span class="pl-c1">960</span>, <span class="pl-c1">1</span>, ASI_IMG_RAW8)
    <span class="pl-c"><span class="pl-c">#</span> set_roi_format(cam, 640, 480, 2, ASI_IMG_RAW8)</span>
    <span class="pl-c"><span class="pl-c">#</span> set_roi_format(cam, 640, 480, 1, ASI_IMG_RAW8)</span>
    <span class="pl-c"><span class="pl-c">#</span> set_roi_format(cam, 320, 240, 1, ASI_IMG_RAW8)</span>
    <span class="pl-c"><span class="pl-c">#</span> set_roi_format(cam, 168, 128, 1, ASI_IMG_RAW8)</span>

    <span class="pl-k">function</span> <span class="pl-en">capture_video</span>(cam<span class="pl-k">::</span><span class="pl-c1">ASICamera</span>)
        <span class="pl-c"><span class="pl-c">#</span> Camera stuff setup</span>
        width, height, binning, img_type <span class="pl-k">=</span> <span class="pl-c1">get_roi_format</span>(cam)
        buffer <span class="pl-k">=</span> <span class="pl-c1">allocate_buffer</span>(width, height, img_type)

        <span class="pl-c"><span class="pl-c">#</span> Makie scene setup</span>
        colorrange <span class="pl-k">=</span> img_type <span class="pl-k">==</span> ASI_IMG_RAW16 <span class="pl-k">?</span> <span class="pl-c1">2</span><span class="pl-k">^</span><span class="pl-c1">16</span><span class="pl-k">-</span><span class="pl-c1">1</span> <span class="pl-k">:</span> <span class="pl-c1">255</span>
        scene <span class="pl-k">=</span> <span class="pl-c1">Scene</span>()
        img <span class="pl-k">=</span> <span class="pl-c1">image!</span>(scene, buffer, show_axis <span class="pl-k">=</span> <span class="pl-c1">false</span>, scale_plot <span class="pl-k">=</span> <span class="pl-c1">false</span>, colorrange<span class="pl-k">=</span>(<span class="pl-c1">0</span>,colorrange))[<span class="pl-c1">end</span>]
        t <span class="pl-k">=</span> <span class="pl-c1">text!</span>(scene, <span class="pl-s"><span class="pl-pds">"</span>0 FPS<span class="pl-pds">"</span></span>, color<span class="pl-k">=</span><span class="pl-c1">:yellow</span>, position<span class="pl-k">=</span>(width, height), align<span class="pl-k">=</span>(<span class="pl-c1">:top</span>, <span class="pl-c1">:right</span>), textsize<span class="pl-k">=</span><span class="pl-c1">Int</span>(height<span class="pl-k">/</span><span class="pl-c1">16</span>))
        <span class="pl-c1">display</span>(scene)

        <span class="pl-k">function</span> <span class="pl-en">video_loop</span>(cam, buffer, img, t)
            err <span class="pl-k">=</span> ASI_SUCCESS
            <span class="pl-k">while</span> <span class="pl-c1">isopen</span>(scene) <span class="pl-k">&amp;&amp;</span> err <span class="pl-k">==</span> ASI_SUCCESS
                t0 <span class="pl-k">=</span> <span class="pl-c1">time_ns</span>()
                err <span class="pl-k">=</span> <span class="pl-c1">get_video_data!</span>(cam, buffer, <span class="pl-c1">5000</span>)
                img[<span class="pl-c1">1</span>] <span class="pl-k">=</span> buffer[<span class="pl-c1">end</span><span class="pl-k">:</span><span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">1</span>, :]  <span class="pl-c"><span class="pl-c">#</span> for some reason we have to flip x</span>
                t1 <span class="pl-k">=</span> <span class="pl-c1">time_ns</span>()
                t[<span class="pl-c1">end</span>][<span class="pl-c1">1</span>] <span class="pl-k">=</span> <span class="pl-c1">string</span>(<span class="pl-c1">round</span>(<span class="pl-c1">1.</span> <span class="pl-k">/</span>(<span class="pl-c1">Float64</span>(t1<span class="pl-k">-</span>t0)<span class="pl-k">/</span><span class="pl-c1">1E9</span>), digits<span class="pl-k">=</span><span class="pl-c1">1</span>), <span class="pl-s"><span class="pl-pds">"</span> FPS<span class="pl-pds">"</span></span>)
                <span class="pl-c1">yield</span>()
            <span class="pl-k">end</span>
            <span class="pl-c1">println</span>(err)
        <span class="pl-k">end</span>

        <span class="pl-c1">start_video</span>(cam)
        <span class="pl-c1">video_loop</span>(cam, buffer, img, t)
        <span class="pl-c1">stop_video</span>(cam)
    <span class="pl-k">end</span>

    <span class="pl-c1">capture_video</span>(cam)
    <span class="pl-c1">close_camera</span>(cam)
<span class="pl-k">end</span>

<span class="pl-c1">remotecall</span>(main, <span class="pl-c1">2</span>)</pre></div>
<p dir="auto">If you encounter any issues, don't hesitate to ask!</p>
</article></div>