<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-bulletjl" class="anchor" aria-hidden="true" href="#bulletjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Bullet.jl</h1>
<h2><a id="user-content-code-generation" class="anchor" aria-hidden="true" href="#code-generation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Code Generation</h2>
<h3><a id="user-content-raw" class="anchor" aria-hidden="true" href="#raw"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Raw</h3>
<p><code>src/generator/bullet_parse_headers.jl</code> makes Julia wrappers to call the Bullet C API (<code>b3</code> functions).</p>
<p>e.g.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="sm = Bullet.Raw.b3ConnectPhysicsDirect()
"><pre>sm <span class="pl-k">=</span> Bullet<span class="pl-k">.</span>Raw<span class="pl-k">.</span><span class="pl-c1">b3ConnectPhysicsDirect</span>()</pre></div>
<p>Warning, these functions are thin wrappers around <code>ccall</code> calls. If you pass a <code>[1, 1, 1]</code> where the Bullet API expects a <code>Ptr{Cdouble}</code>, Bullet will see <code>[5.0e-324, 5.0e-324, 5.0e-324]</code>.</p>
<h3><a id="user-content-safe" class="anchor" aria-hidden="true" href="#safe"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Safe</h3>
<p><code>src/generator/make_julian_api.jl</code> makes Julia wrappers that are safer and more Julian (using e.g. <code>ColorTypes</code>)</p>
<p>e.g.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="sm = Bullet.Raw.b3ConnectPhysicsDirect()
command = Bullet.Raw.b3InitPhysicsParamCommand(sm)
Bullet.Safe.PhysicsParamSetGravity(command, [0, 0, -9.8])
#= equivalent to Bullet.Raw.b3PhysicsParamSetGravity(commandHandle, 0, 0, -9.8) =#
"><pre>sm <span class="pl-k">=</span> Bullet<span class="pl-k">.</span>Raw<span class="pl-k">.</span><span class="pl-c1">b3ConnectPhysicsDirect</span>()
command <span class="pl-k">=</span> Bullet<span class="pl-k">.</span>Raw<span class="pl-k">.</span><span class="pl-c1">b3InitPhysicsParamCommand</span>(sm)
Bullet<span class="pl-k">.</span>Safe<span class="pl-k">.</span><span class="pl-c1">PhysicsParamSetGravity</span>(command, [<span class="pl-c1">0</span>, <span class="pl-c1">0</span>, <span class="pl-k">-</span><span class="pl-c1">9.8</span>])
<span class="pl-c"><span class="pl-c">#=</span> equivalent to Bullet.Raw.b3PhysicsParamSetGravity(commandHandle, 0, 0, -9.8) <span class="pl-c">=#</span></span></pre></div>
<h3><a id="user-content-c-or-c" class="anchor" aria-hidden="true" href="#c-or-c"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>C or C++</h3>
<p>This package illustrates two different methods of interfacing with Bullet. There is the core physics code written afaik entirely in C++, and a command processor (running in its own POSIX process) that handles a special-made protocol (which could be over shared memory, or the network), and then there's C code for sending/receiving command messages. This is the way that <code>pybullet</code> works. It's C code that uses the Python C API to expose a Python interface to the C code for sending/receive command messages.</p>
<p>There are aspects of the C++ code that are not exposed via the command processor (after all, it's supposed to be a sort of abstraction over at least some parts of the specific engine implementation), and this package tries to demonstrate how to use <code>Cxx.jl</code> for that purpose.</p>
<p>Note that pybullet, taken to mean what I described above, does not do any physics calculation, and <code>goretkin/Bullet.jl</code> roughly rewrites at least part of what resembles PyBullet. Except that it's a bit better, because our ecosystem has some packages like <code>ColorTypes.jl</code>,  <code>Rotations.jl</code>, <code>GeometryTypes.jl</code> that aim to be used in interfaces. So <code>Bullet.jl</code> tries to be fancy by taking a Bullet C API function like e.g.  <code>setOrientation(Float x, Float y, Float z, Float w)</code> and turn it into <code>setOrientation(r::Rotation)</code> and then you can use whatever parameterization of rotation (quaternion, rpy, ...) you'd like.</p>
</article></div>