<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-geojsontables" class="anchor" aria-hidden="true" href="#geojsontables"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>GeoJSONTables</h1>
<p dir="auto"><strong>Status</strong>: <em>This package has become the new <a href="https://github.com/JuliaGeo/GeoJSON.jl">GeoJSON.jl</a> as of v0.6, which adds <a href="https://github.com/JuliaGeo/GeoInterface.jl/">GeoInterface</a> v1 support. Therefore this repository has been archived.</em></p>
<p dir="auto">Read <a href="https://geojson.org/" rel="nofollow">GeoJSON</a> <a href="https://tools.ietf.org/html/rfc7946#section-3.3" rel="nofollow">FeatureCollections</a> using <a href="https://github.com/quinnj/JSON3.jl">JSON3.jl</a>, and provide the <a href="https://github.com/JuliaData/Tables.jl">Tables.jl</a> interface.</p>
<p dir="auto">This package is unregistered and in development, so expect changes. It only supports reading, and only of FeatureCollections.</p>
<p dir="auto">This package is heavily inspired by, and borrows code from, <a href="https://github.com/JuliaData/JSONTables.jl">JSONTables.jl</a>, which
does the same thing for the general JSON format. GeoJSONTables puts the geometry in a <code>geometry</code> column, and adds all
properties in the columns individually. The geometry and non-scalar properties are kept as JSON3.Object and JSON3.Array.
Right now that means the geometries are hard to use, but at least parsing is fast.</p>
<p dir="auto">Going forward, it would be nice to try developing a GeoTables.jl, similarly to Tables.jl, but with special support
for a geometry column, that supports a diverse set of geometries, such as those of <a href="https://github.com/JuliaGeo/LibGEOS.jl">LibGEOS</a>, <a href="https://github.com/JuliaGeo/Shapefile.jl">Shapefile</a>, <a href="https://github.com/yeesian/ArchGDAL.jl/">ArchGDAL.jl</a>, <a href="https://github.com/SimonDanisch/GeometryBasics.jl">GeometryBasics</a> and of course this package.</p>
<p dir="auto">It would also be good to explore integrating this code into <a href="https://github.com/JuliaGeo/GeoJSON.jl">GeoJSON.jl</a> and
archiving this package. See <a href="https://github.com/JuliaGeo/GeoJSON.jl/pull/23" data-hovercard-type="pull_request" data-hovercard-url="/JuliaGeo/GeoJSON.jl/pull/23/hovercard">GeoJSON.jl#23</a> for discussion.</p>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using GeoJSONTables, DataFrames

julia&gt; jsonbytes = read(&quot;path/to/a.geojson&quot;);

julia&gt; fc = GeoJSONTables.read(jsonbytes)
FeatureCollection with 171 Features

julia&gt; first(fc)
Feature with geometry type Polygon and properties Symbol[:geometry, :timestamp, :version, :changeset, :user, :uid, :area, :highway, :type, :id]

# use the Tables interface to convert the format, extract data, or iterate over the rows
julia&gt; df = DataFrame(fc)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> GeoJSONTables, DataFrames

julia<span class="pl-k">&gt;</span> jsonbytes <span class="pl-k">=</span> <span class="pl-c1">read</span>(<span class="pl-s"><span class="pl-pds">"</span>path/to/a.geojson<span class="pl-pds">"</span></span>);

julia<span class="pl-k">&gt;</span> fc <span class="pl-k">=</span> GeoJSONTables<span class="pl-k">.</span><span class="pl-c1">read</span>(jsonbytes)
FeatureCollection with <span class="pl-c1">171</span> Features

julia<span class="pl-k">&gt;</span> <span class="pl-c1">first</span>(fc)
Feature with geometry type Polygon and properties Symbol[<span class="pl-c1">:geometry</span>, <span class="pl-c1">:timestamp</span>, <span class="pl-c1">:version</span>, <span class="pl-c1">:changeset</span>, <span class="pl-c1">:user</span>, <span class="pl-c1">:uid</span>, <span class="pl-c1">:area</span>, <span class="pl-c1">:highway</span>, <span class="pl-c1">:type</span>, <span class="pl-c1">:id</span>]

<span class="pl-c"><span class="pl-c">#</span> use the Tables interface to convert the format, extract data, or iterate over the rows</span>
julia<span class="pl-k">&gt;</span> df <span class="pl-k">=</span> <span class="pl-c1">DataFrame</span>(fc)</pre></div>
</article></div>