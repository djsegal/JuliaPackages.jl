<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><p><a target="_blank" rel="noopener noreferrer" href="https://github.com/crstnbr/BinningAnalysis.jl/blob/master/docs/src/assets/logo_with_text.png"><img src="https://github.com/crstnbr/BinningAnalysis.jl/raw/master/docs/src/assets/logo_with_text.png" alt="logo" style="max-width:100%;"></a></p>
<table>
<thead>
<tr>
<th align="center"><strong>Build Status</strong></th>
<th align="center"><strong>Community</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/702961bdd3afeb2633ba0561f13f2102dc596aea/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6966656379636c652d737461626c652d626c75652e737667"><img src="https://camo.githubusercontent.com/702961bdd3afeb2633ba0561f13f2102dc596aea/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6966656379636c652d737461626c652d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/lifecycle-stable-blue.svg" style="max-width:100%;"></a> <a href="https://github.com/crstnbr/BinningAnalysis.jl/actions?query=workflow%3A%22Run+tests%22"><img src="https://github.com/crstnbr/BinningAnalysis.jl/workflows/Run%20tests/badge.svg" alt="" style="max-width:100%;"></a> <a href="http://codecov.io/github/crstnbr/BinningAnalysis.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/e329161fc752e4a462fd12c135a2b1a80a744090/68747470733a2f2f696d672e736869656c64732e696f2f636f6465636f762f632f6769746875622f637273746e62722f42696e6e696e67416e616c797369732e6a6c2f6d61737465722e7376673f6c6162656c3d636f6465636f76" alt="" data-canonical-src="https://img.shields.io/codecov/c/github/crstnbr/BinningAnalysis.jl/master.svg?label=codecov" style="max-width:100%;"></a> <a href="https://juliaci.github.io/NanosoldierReports/pkgeval_badges/report.html" rel="nofollow"><img src="https://camo.githubusercontent.com/61df7e13fef5b896ce1badccbba9f0696f2e7286/68747470733a2f2f6a756c696163692e6769746875622e696f2f4e616e6f736f6c646965725265706f7274732f706b676576616c5f6261646765732f422f42696e6e696e67416e616c797369732e737667" alt="" data-canonical-src="https://juliaci.github.io/NanosoldierReports/pkgeval_badges/B/BinningAnalysis.svg" style="max-width:100%;"></a></td>
<td align="center"><a href="https://slackinvite.julialang.org/" rel="nofollow"><img src="https://camo.githubusercontent.com/24d16c31ff9f7628be0e050b793afd8b2458029c/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636861742d6f6e253230736c61636b2d79656c6c6f772e737667" alt="" data-canonical-src="https://img.shields.io/badge/chat-on%20slack-yellow.svg" style="max-width:100%;"></a> <a href="https://opensource.org/licenses/MIT" rel="nofollow"><img src="https://camo.githubusercontent.com/8af705201b0143753136fea6d5fc0409fae21d81/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d4d49542d7265642e737667" alt="" data-canonical-src="https://img.shields.io/badge/License-MIT-red.svg" style="max-width:100%;"></a> <a href="https://doi.org/10.5281/zenodo.3603347" rel="nofollow"><img src="https://camo.githubusercontent.com/66f6be3dc073bc1752a0190cec078d9a6fbdd4eb/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f444f492f31302e353238312f7a656e6f646f2e333630333334372e737667" alt="DOI" data-canonical-src="https://zenodo.org/badge/DOI/10.5281/zenodo.3603347.svg" style="max-width:100%;"></a></td>
</tr>
</tbody>
</table>
<p>This package provides tools to estimate <a href="https://en.wikipedia.org/wiki/Standard_error" rel="nofollow">standard errors</a> and <a href="https://en.wikipedia.org/wiki/Autocorrelation" rel="nofollow">autocorrelation times</a> of correlated time series. A typical example is a <a href="https://en.wikipedia.org/wiki/Markov_chain" rel="nofollow">Markov chain</a> obtained in a <a href="https://en.wikipedia.org/wiki/Metropolis%E2%80%93Hastings_algorithm" rel="nofollow">Metropolis Monte Carlo simulation</a>.</p>
<p><strong>Binning tools:</strong></p>
<ul>
<li>Logarithmic Binning
<ul>
<li>Size complexity: <code>O(log(N))</code></li>
<li>Time complexity: <code>O(N)</code></li>
</ul>
</li>
<li>Full Binning (all bin sizes that work out evenly)</li>
</ul>
<p><strong>Statistical resampling methods:</strong></p>
<ul>
<li>Jackknife resampling.</li>
</ul>
<br>
<p>As per usual, you can install the registered package with</p>
<div class="highlight highlight-source-julia"><pre>] add BinningAnalysis</pre></div>
<p>Note that there is <a href="https://github.com/crstnbr/BinningAnalysisPlots.jl">BinningAnalysisPlots.jl</a> which defines some <a href="https://github.com/JuliaPlots/Plots.jl">Plots.jl</a> recipes for <code>LogBinner</code> and <code>FullBinner</code> to facilitate visualizing the error convergence.</p>
<h2><a id="user-content-binning-tools" class="anchor" aria-hidden="true" href="#binning-tools"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Binning tools</h2>
<h3><a id="user-content-logarithmic-binning" class="anchor" aria-hidden="true" href="#logarithmic-binning"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Logarithmic Binning</h3>
<div class="highlight highlight-source-julia"><pre>B <span class="pl-k">=</span> <span class="pl-c1">LogBinner</span>()
<span class="pl-c"><span class="pl-c">#</span> As per default, 2^32-1 ≈ 4 billion values can be added to the binner. This value can be</span>
<span class="pl-c"><span class="pl-c">#</span> tuned with the `capacity` keyword argument.</span>

<span class="pl-c1">push!</span>(B, <span class="pl-c1">4.2</span>)
<span class="pl-c1">append!</span>(B, [<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>]) <span class="pl-c"><span class="pl-c">#</span> multiple values at once</span>

x  <span class="pl-k">=</span> <span class="pl-c1">mean</span>(B)
Δx <span class="pl-k">=</span> <span class="pl-c1">std_error</span>(B) <span class="pl-c"><span class="pl-c">#</span> standard error of the mean</span>
tau_x <span class="pl-k">=</span> <span class="pl-c1">tau</span>(B) <span class="pl-c"><span class="pl-c">#</span> autocorrelation time</span>

<span class="pl-c"><span class="pl-c">#</span> Alternatively you can provide a time series already in the constructor</span>
x <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">100</span>)
B <span class="pl-k">=</span> <span class="pl-c1">LogBinner</span>(x)

Δx <span class="pl-k">=</span> <span class="pl-c1">std_error</span>(B)</pre></div>

<h3><a id="user-content-full-binning" class="anchor" aria-hidden="true" href="#full-binning"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Full Binning</h3>
<div class="highlight highlight-source-julia"><pre>B <span class="pl-k">=</span> <span class="pl-c1">FullBinner</span>() <span class="pl-c"><span class="pl-c">#</span> &lt;: AbstractVector (lightweight wrapper)</span>

<span class="pl-c1">push!</span>(B, <span class="pl-c1">2.0</span>)
<span class="pl-c1">append!</span>(B, [<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>])

x  <span class="pl-k">=</span> <span class="pl-c1">mean</span>(B)
Δx <span class="pl-k">=</span> <span class="pl-c1">std_error</span>(B) <span class="pl-c"><span class="pl-c">#</span> standard error of the mean</span>

<span class="pl-c"><span class="pl-c">#</span> Alternatively you can provide a time series already in the constructor</span>
x <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">100</span>)
F <span class="pl-k">=</span> <span class="pl-c1">FullBinner</span>(x)

<span class="pl-c1">push!</span>(F, <span class="pl-c1">2.0</span>) <span class="pl-c"><span class="pl-c">#</span> will modify x as F is just a thin wrapper</span>

Δx <span class="pl-k">=</span> <span class="pl-c1">std_error</span>(F)</pre></div>
<h2><a id="user-content-resampling-methods" class="anchor" aria-hidden="true" href="#resampling-methods"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Resampling methods</h2>
<h3><a id="user-content-jackknife" class="anchor" aria-hidden="true" href="#jackknife"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Jackknife</h3>
<div class="highlight highlight-source-julia"><pre>x <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">100</span>)

xmean, Δx <span class="pl-k">=</span> <span class="pl-c1">jackknife</span>(identity, x) <span class="pl-c"><span class="pl-c">#</span> jackknife estimates for mean and standard error of &lt;x&gt;</span>

<span class="pl-c"><span class="pl-c">#</span> in this example</span>
<span class="pl-c"><span class="pl-c">#</span> isapprox(Δx, std(x)/sqrt(length(x))) == true</span>

x_inv_mean, Δx_inv <span class="pl-k">=</span> <span class="pl-c1">jackknife</span>(identity, <span class="pl-c1">1</span> <span class="pl-k">./</span> x) <span class="pl-c"><span class="pl-c">#</span> # jackknife estimates for mean and standard error of &lt;1/x&gt;</span>

<span class="pl-c"><span class="pl-c">#</span> Multiple time series</span>
x <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">100</span>)
y <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">100</span>)

<span class="pl-c"><span class="pl-c">#</span> The inputs of the function `g` must be provided as arguments in `jackknife`.</span>
<span class="pl-en">g</span>(x, y, xy) <span class="pl-k">=</span> x <span class="pl-k">*</span> y <span class="pl-k">/</span> xy  <span class="pl-c"><span class="pl-c">#</span> &lt;x&gt;&lt;y&gt; / &lt;xy&gt;</span>
g_mean, Δg <span class="pl-k">=</span> <span class="pl-c1">jackknife</span>(g, x, y, x <span class="pl-k">.*</span> y)</pre></div>
<h2><a id="user-content-convenience-wrapper" class="anchor" aria-hidden="true" href="#convenience-wrapper"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Convenience wrapper</h2>
<p>If you want to calculate the standard error of an existing time series there you can use the convenience wrapper <code>std_error(x[; method=:log])</code>. It takes a keyword argument <code>method</code>, which can be <code>:log</code>, <code>:full</code>, or <code>:jackknife</code>.</p>
<div class="highlight highlight-source-julia"><pre>ts <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">1000</span>);
<span class="pl-c1">std_error</span>(ts) <span class="pl-c"><span class="pl-c">#</span> default is logarithmic binning</span>
<span class="pl-c1">std_error</span>(ts, method<span class="pl-k">=</span><span class="pl-c1">:full</span>)</pre></div>
<h2><a id="user-content-supported-types" class="anchor" aria-hidden="true" href="#supported-types"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Supported types</h2>
<p>All statistical tools should work with number-like (<code>&lt;: Number</code>) and array-like (<code>&lt;: AbstractArray</code>) elements. Regarding complex numbers, we follow base Julia and define
<code>var(x) = var(real(x)) + var(imag(x))</code>.</p>
<p>If you observe unexpected behavior please file an issue!</p>
<h2><a id="user-content-references" class="anchor" aria-hidden="true" href="#references"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>References</h2>
<ul>
<li>J. Gubernatis, N. Kawashima, and P. Werner, <a href="https://www.cambridge.org/core/books/quantum-monte-carlo-methods/AEA92390DA497360EEDA153CF1CEC7AC" rel="nofollow">Quantum Monte Carlo Methods: Algorithms for Lattice Models</a>, Book (2016)</li>
<li>V. Ambegaokar, and M. Troyer, <a href="http://aapt.scitation.org/doi/10.1119/1.3247985" rel="nofollow">Estimating errors reliably in Monte Carlo simulations of the Ehrenfest model</a>, American Journal of Physics 78, 150 (2010)</li>
</ul>
</article></div>