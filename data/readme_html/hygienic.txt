<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-hygienicjl" class="anchor" aria-hidden="true" href="#hygienicjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Hygienic.jl</h1>
<p dir="auto">A small package to avoid the problem of leaking variables between macros. Consider the following macro <code>@b</code> that calls another macro <code>@a</code>. Since they both set a value to <code>x</code> and they share the same expansion context, the variable <code>##x#000</code> will be shared in both macros even though the name is gensymed. This can lead to confusing bugs when working with stacked macros.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="macro a()
    quote
        x = :a
    end
end

macro b()
    quote
        x = :b
        @a()
        x # &lt;- x is :a here
    end
end"><pre><span class="pl-k">macro</span> <span class="pl-en">a</span>()
    <span class="pl-k">quote</span>
        x <span class="pl-k">=</span> <span class="pl-c1">:a</span>
    <span class="pl-k">end</span>
<span class="pl-k">end</span>

<span class="pl-k">macro</span> <span class="pl-en">b</span>()
    <span class="pl-k">quote</span>
        x <span class="pl-k">=</span> <span class="pl-c1">:b</span>
        <span class="pl-c1">@a</span>()
        x <span class="pl-c"><span class="pl-c">#</span> &lt;- x is :a here</span>
    <span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>
<h2 dir="auto"><a id="user-content-solutions" class="anchor" aria-hidden="true" href="#solutions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Solutions</h2>
<p dir="auto">Hygienic exports a single macro <code>@hygienize</code> to do the hygiene at the macro definition step instead of at macro call time. This makes sure that no variable will leak to another macro.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="macro a()
    @hygienize quote
        x = :a
    end
end"><pre><span class="pl-k">macro</span> <span class="pl-en">a</span>()
    <span class="pl-c1">@hygienize</span> <span class="pl-k">quote</span>
        x <span class="pl-k">=</span> <span class="pl-c1">:a</span>
    <span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>
</article></div>