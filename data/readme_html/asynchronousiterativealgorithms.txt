<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content--asynchronousiterativealgorithmsjl" class="anchor" aria-hidden="true" href="#-asynchronousiterativealgorithmsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><a target="_blank" rel="noopener noreferrer" href="./docs/src/assets/favicon.gif"><img src="./docs/src/assets/favicon.gif" alt="" data-animated-image="" style="max-width: 100%;"></a> Â AsynchronousIterativeAlgorithms.jl</h1>
<table>
<thead>
<tr>
<th align="center"><strong>Build Status</strong></th>
<th align="center"><strong>Documentation</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><a href="https://github.com/Selim78/AsynchronousIterativeAlgorithms.jl/actions/workflows/CI.yml?query=branch%3Amain"><img src="https://github.com/Selim78/AsynchronousIterativeAlgorithms.jl/actions/workflows/CI.yml/badge.svg?branch=main" alt="Build Status" style="max-width: 100%;"></a></td>
<td align="center"><a href="https://github.com/Selim78/AsynchronousIterativeAlgorithms.jl/actions/workflows/documentation.yml"><img src="https://github.com/Selim78/AsynchronousIterativeAlgorithms.jl/actions/workflows/documentation.yml/badge.svg" alt="" style="max-width: 100%;"></a></td>
</tr>
</tbody>
</table>
<p dir="auto"><g-emoji class="g-emoji" alias="abacus" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f9ee.png">ðŸ§®</g-emoji> <code>AsynchronousIterativeAlgorithms.jl</code> handles the distributed asynchronous communication, so you can focus on designing your algorithm.</p>
<p dir="auto"><g-emoji class="g-emoji" alias="minidisc" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4bd.png">ðŸ’½</g-emoji> It also offers a convenient way to manage the distribution of your problem's data across multiple processes or remote machines.</p>
<p dir="auto"><a href="https://selim78.github.io/AsynchronousIterativeAlgorithms.jl/dev/" rel="nofollow"><g-emoji class="g-emoji" alias="books" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4da.png">ðŸ“š</g-emoji> Full manual available here</a></p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">You can install <code>AsynchronousIterativeAlgorithms</code> by typing</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; ] add AsynchronousIterativeAlgorithms"><pre>julia<span class="pl-k">&gt;</span> ] add AsynchronousIterativeAlgorithms</pre></div>
<h2 dir="auto"><a id="user-content-quick-start" class="anchor" aria-hidden="true" href="#quick-start"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Quick start</h2>
<p dir="auto">Say you want to implement a distributed version of <em>Stochastic Gradient Descent</em> (SGD). You'll need to define:</p>
<ul dir="auto">
<li>an <strong>algorithm structure</strong> subtyping <code>AbstractAlgorithm{Q,A}</code></li>
<li>the <strong>initialization step</strong> where you compute the first iteration</li>
<li>the <strong>worker step</strong> performed by the workers when they receive a query <code>q::Q</code> from the central node</li>
<li>the asynchronous <strong>central step</strong> performed by the central node when it receives an answer <code>a::A</code> from a <code>worker</code></li>
</ul>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="docs/src/assets/sequence_diagram.png"><img src="docs/src/assets/sequence_diagram.png" alt="Sequence Diagram" style="max-width: 100%;"></a></p>
<p dir="auto">Let's first of all set up our distributed environment.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# Launch multiple processes (or remote machines)
using Distributed; addprocs(5)

# Instantiate and precompile environment in all processes
@everywhere (using Pkg; Pkg.activate(@__DIR__); Pkg.instantiate(); Pkg.precompile())

# You can now use AsynchronousIterativeAlgorithms
@everywhere (using AsynchronousIterativeAlgorithms; const AIA = AsynchronousIterativeAlgorithms)"><pre><span class="pl-c"><span class="pl-c">#</span> Launch multiple processes (or remote machines)</span>
<span class="pl-k">using</span> Distributed; <span class="pl-c1">addprocs</span>(<span class="pl-c1">5</span>)

<span class="pl-c"><span class="pl-c">#</span> Instantiate and precompile environment in all processes</span>
<span class="pl-c1">@everywhere</span> (<span class="pl-k">using</span> Pkg; Pkg<span class="pl-k">.</span><span class="pl-c1">activate</span>(<span class="pl-c1">@__DIR__</span>); Pkg<span class="pl-k">.</span><span class="pl-c1">instantiate</span>(); Pkg<span class="pl-k">.</span><span class="pl-c1">precompile</span>())

<span class="pl-c"><span class="pl-c">#</span> You can now use AsynchronousIterativeAlgorithms</span>
<span class="pl-c1">@everywhere</span> (<span class="pl-k">using</span> AsynchronousIterativeAlgorithms; <span class="pl-k">const</span> AIA <span class="pl-k">=</span> AsynchronousIterativeAlgorithms)</pre></div>
<p dir="auto">Now to the implementation.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# define on all processes
@everywhere begin
    # algorithm
    mutable struct SGD&lt;:AbstractAlgorithm{Vector{Float64},Vector{Float64}}
        stepsize::Float64
        previous_q::Vector{Float64} # previous query
        SGD(stepsize::Float64) = new(stepsize, Float64[])
    end

    # initialisation step 
    function (sgd::SGD)(problem::Any)
        sgd.previous_q = rand(problem.n)
    end

    # worker step
    function (sgd::SGD)(q::Vector{Float64}, problem::Any) 
        sgd.stepsize * problem.âˆ‡f(q, rand(1:problem.m))
    end

    # asynchronous central step
    function (sgd::SGD)(a::Vector{Float64}, worker::Int64, problem::Any) 
        sgd.previous_q -= a
    end
end"><pre><span class="pl-c"><span class="pl-c">#</span> define on all processes</span>
<span class="pl-c1">@everywhere</span> <span class="pl-k">begin</span>
    <span class="pl-c"><span class="pl-c">#</span> algorithm</span>
    <span class="pl-k">mutable struct</span> SGD<span class="pl-k">&lt;:</span><span class="pl-c1">AbstractAlgorithm{Vector{Float64},Vector{Float64}}</span>
        stepsize<span class="pl-k">::</span><span class="pl-c1">Float64</span>
        previous_q<span class="pl-k">::</span><span class="pl-c1">Vector{Float64}</span> <span class="pl-c"><span class="pl-c">#</span> previous query</span>
        <span class="pl-en">SGD</span>(stepsize<span class="pl-k">::</span><span class="pl-c1">Float64</span>) <span class="pl-k">=</span> <span class="pl-c1">new</span>(stepsize, Float64[])
    <span class="pl-k">end</span>

    <span class="pl-c"><span class="pl-c">#</span> initialisation step </span>
    <span class="pl-k">function</span> (sgd<span class="pl-k">::</span><span class="pl-c1">SGD</span>)(problem<span class="pl-k">::</span><span class="pl-c1">Any</span>)
        sgd<span class="pl-k">.</span>previous_q <span class="pl-k">=</span> <span class="pl-c1">rand</span>(problem<span class="pl-k">.</span>n)
    <span class="pl-k">end</span>

    <span class="pl-c"><span class="pl-c">#</span> worker step</span>
    <span class="pl-k">function</span> (sgd<span class="pl-k">::</span><span class="pl-c1">SGD</span>)(q<span class="pl-k">::</span><span class="pl-c1">Vector{Float64}</span>, problem<span class="pl-k">::</span><span class="pl-c1">Any</span>) 
        sgd<span class="pl-k">.</span>stepsize <span class="pl-k">*</span> problem.<span class="pl-c1">âˆ‡f</span>(q, <span class="pl-c1">rand</span>(<span class="pl-c1">1</span><span class="pl-k">:</span>problem<span class="pl-k">.</span>m))
    <span class="pl-k">end</span>

    <span class="pl-c"><span class="pl-c">#</span> asynchronous central step</span>
    <span class="pl-k">function</span> (sgd<span class="pl-k">::</span><span class="pl-c1">SGD</span>)(a<span class="pl-k">::</span><span class="pl-c1">Vector{Float64}</span>, worker<span class="pl-k">::</span><span class="pl-c1">Int64</span>, problem<span class="pl-k">::</span><span class="pl-c1">Any</span>) 
        sgd<span class="pl-k">.</span>previous_q <span class="pl-k">-=</span> a
    <span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>
<p dir="auto">Now let's test our algorithm on a linear regression problem with mean squared error loss (LRMSE). This problem must be <strong>compatible with your algorithm</strong>. In this example, it means providing attributes <code>n</code> and <code>m</code> (dimension of the regressor and number of points), and the method <code>âˆ‡f(x::Vector{Float64}, i::Int64)</code> (gradient of the linear regression loss on the ith data point)</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@everywhere begin
    struct LRMSE
        A::Union{Matrix{Float64}, Nothing}
        b::Union{Vector{Float64}, Nothing}
        n::Int64
        m::Int64
        L::Float64 # Lipschitz constant of f
        âˆ‡f::Function
    end

    function LRMSE(A::Matrix{Float64}, b::Vector{Float64})
        m, n = size(A)
        L = maximum(A'*A)
        âˆ‡f(x) = A' * (A * x - b) / n
        âˆ‡f(x,i) = A[i,:] * (A[i,:]' * x - b[i])
        LRMSE(A, b, n, m, L, âˆ‡f)
    end
end"><pre><span class="pl-c1">@everywhere</span> <span class="pl-k">begin</span>
    <span class="pl-k">struct</span> LRMSE
        A<span class="pl-k">::</span><span class="pl-c1">Union{Matrix{Float64}, Nothing}</span>
        b<span class="pl-k">::</span><span class="pl-c1">Union{Vector{Float64}, Nothing}</span>
        n<span class="pl-k">::</span><span class="pl-c1">Int64</span>
        m<span class="pl-k">::</span><span class="pl-c1">Int64</span>
        L<span class="pl-k">::</span><span class="pl-c1">Float64</span> <span class="pl-c"><span class="pl-c">#</span> Lipschitz constant of f</span>
        âˆ‡f<span class="pl-k">::</span><span class="pl-c1">Function</span>
    <span class="pl-k">end</span>

    <span class="pl-k">function</span> <span class="pl-en">LRMSE</span>(A<span class="pl-k">::</span><span class="pl-c1">Matrix{Float64}</span>, b<span class="pl-k">::</span><span class="pl-c1">Vector{Float64}</span>)
        m, n <span class="pl-k">=</span> <span class="pl-c1">size</span>(A)
        L <span class="pl-k">=</span> <span class="pl-c1">maximum</span>(A<span class="pl-k">'</span><span class="pl-k">*</span>A)
        <span class="pl-en">âˆ‡f</span>(x) <span class="pl-k">=</span> A<span class="pl-k">'</span> <span class="pl-k">*</span> (A <span class="pl-k">*</span> x <span class="pl-k">-</span> b) <span class="pl-k">/</span> n
        <span class="pl-en">âˆ‡f</span>(x,i) <span class="pl-k">=</span> A[i,:] <span class="pl-k">*</span> (A[i,:]<span class="pl-k">'</span> <span class="pl-k">*</span> x <span class="pl-k">-</span> b[i])
        <span class="pl-c1">LRMSE</span>(A, b, n, m, L, âˆ‡f)
    <span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>
<p dir="auto">We're almost ready to start the algorithm...</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# Provide the stopping criteria 
stopat = (iteration=1000, time=42.)

# Instanciate your algorithm 
sgd = SGD(0.01)

# Create a function that returns an instance of your problem for a given pid 
problem_constructor = (pid) -&gt; LRMSE(rand(42,10),rand(42))

# And you can start!
history = start(sgd, problem_constructor, stopat);"><pre><span class="pl-c"><span class="pl-c">#</span> Provide the stopping criteria </span>
stopat <span class="pl-k">=</span> (iteration<span class="pl-k">=</span><span class="pl-c1">1000</span>, time<span class="pl-k">=</span><span class="pl-c1">42.</span>)

<span class="pl-c"><span class="pl-c">#</span> Instanciate your algorithm </span>
sgd <span class="pl-k">=</span> <span class="pl-c1">SGD</span>(<span class="pl-c1">0.01</span>)

<span class="pl-c"><span class="pl-c">#</span> Create a function that returns an instance of your problem for a given pid </span>
problem_constructor <span class="pl-k">=</span> (pid) <span class="pl-k">-&gt;</span> <span class="pl-c1">LRMSE</span>(<span class="pl-c1">rand</span>(<span class="pl-c1">42</span>,<span class="pl-c1">10</span>),<span class="pl-c1">rand</span>(<span class="pl-c1">42</span>))

<span class="pl-c"><span class="pl-c">#</span> And you can start!</span>
history <span class="pl-k">=</span> <span class="pl-c1">start</span>(sgd, problem_constructor, stopat);</pre></div>
</article></div>