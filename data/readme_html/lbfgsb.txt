<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-lbfgsb" class="anchor" aria-hidden="true" href="#lbfgsb"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>LBFGSB</h1>
<p><a href="http://www.repostatus.org/#active" rel="nofollow"><img src="https://camo.githubusercontent.com/31267b3e96ca20997396b88f7c44233710fcc637/687474703a2f2f7777772e7265706f7374617475732e6f72672f6261646765732f6c61746573742f6163746976652e737667" alt="Project Status: Active – The project has reached a stable, usable state and is being actively developed." data-canonical-src="http://www.repostatus.org/badges/latest/active.svg" style="max-width:100%;"></a>
<a href="https://travis-ci.com/Gnimuc/LBFGSB.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/7b728ae97084229776caef1f15693d47a376bf14/68747470733a2f2f7472617669732d63692e636f6d2f476e696d75632f4c42464753422e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/Gnimuc/LBFGSB.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/Gnimuc/LBFGSB.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/cf6e5f7089f792c54e30f4319442c114affcc540/68747470733a2f2f636f6465636f762e696f2f67682f476e696d75632f4c42464753422e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/Gnimuc/LBFGSB.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p>This is a Julia wrapper for <a href="http://users.iems.northwestern.edu/%7Enocedal/lbfgsb.html" rel="nofollow">L-BFGS-B Nonlinear Optimization Code</a>.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<div class="highlight highlight-source-julia"><pre>pkg<span class="pl-k">&gt;</span> add LBFGSB</pre></div>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> LBFGSB

<span class="pl-c"><span class="pl-c">#</span> define a function that maps a vector to a scalar</span>
<span class="pl-c"><span class="pl-c">#</span> let's define a multidimensional Rosenbrock function(https://en.wikipedia.org/wiki/Rosenbrock_function):</span>
<span class="pl-k">function</span> <span class="pl-en">f</span>(x)
    y <span class="pl-k">=</span> <span class="pl-c1">0.25</span> <span class="pl-k">*</span> (x[<span class="pl-c1">1</span>] <span class="pl-k">-</span> <span class="pl-c1">1</span>)<span class="pl-k">^</span><span class="pl-c1">2</span>
    <span class="pl-k">for</span> i <span class="pl-k">=</span> <span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">length</span>(x)
        y <span class="pl-k">+=</span> (x[i] <span class="pl-k">-</span> x[i<span class="pl-k">-</span><span class="pl-c1">1</span>]<span class="pl-k">^</span><span class="pl-c1">2</span>)<span class="pl-k">^</span><span class="pl-c1">2</span>
    <span class="pl-k">end</span>
    <span class="pl-c1">4</span>y
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> and its gradient function that maps a vector x to a vector z</span>
<span class="pl-k">function</span> <span class="pl-en">g!</span>(z, x)
    n <span class="pl-k">=</span> <span class="pl-c1">length</span>(x)
    t₁ <span class="pl-k">=</span> x[<span class="pl-c1">2</span>] <span class="pl-k">-</span> x[<span class="pl-c1">1</span>]<span class="pl-k">^</span><span class="pl-c1">2</span>
    z[<span class="pl-c1">1</span>] <span class="pl-k">=</span> <span class="pl-c1">2</span> <span class="pl-k">*</span> (x[<span class="pl-c1">1</span>] <span class="pl-k">-</span> <span class="pl-c1">1</span>) <span class="pl-k">-</span> <span class="pl-c1">1.6e1</span> <span class="pl-k">*</span> x[<span class="pl-c1">1</span>] <span class="pl-k">*</span> t₁
    <span class="pl-k">for</span> i <span class="pl-k">=</span> <span class="pl-c1">2</span><span class="pl-k">:</span>n<span class="pl-k">-</span><span class="pl-c1">1</span>
        t₂ <span class="pl-k">=</span> t₁
        t₁ <span class="pl-k">=</span> x[i<span class="pl-k">+</span><span class="pl-c1">1</span>] <span class="pl-k">-</span> x[i]<span class="pl-k">^</span><span class="pl-c1">2</span>
        z[i] <span class="pl-k">=</span> <span class="pl-c1">8</span> <span class="pl-k">*</span> t₂ <span class="pl-k">-</span> <span class="pl-c1">1.6e1</span> <span class="pl-k">*</span> x[i] <span class="pl-k">*</span> t₁
    <span class="pl-k">end</span>
    z[n] <span class="pl-k">=</span> <span class="pl-c1">8</span> <span class="pl-k">*</span> t₁
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> the first argument is the dimension of the largest problem to be solved</span>
<span class="pl-c"><span class="pl-c">#</span> the second argument is the maximum number of limited memory corrections</span>
optimizer <span class="pl-k">=</span> <span class="pl-c1">L_BFGS_B</span>(<span class="pl-c1">1024</span>, <span class="pl-c1">17</span>)
n <span class="pl-k">=</span> <span class="pl-c1">25</span>  <span class="pl-c"><span class="pl-c">#</span> the dimension of the problem</span>
x <span class="pl-k">=</span> <span class="pl-c1">fill</span>(<span class="pl-c1">Cdouble</span>(<span class="pl-c1">3e0</span>), n)  <span class="pl-c"><span class="pl-c">#</span> the initial guess</span>
<span class="pl-c"><span class="pl-c">#</span> set up bounds</span>
bounds <span class="pl-k">=</span> <span class="pl-c1">zeros</span>(<span class="pl-c1">3</span>, n)
<span class="pl-k">for</span> i <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span>n
    bounds[<span class="pl-c1">1</span>,i] <span class="pl-k">=</span> <span class="pl-c1">2</span>  <span class="pl-c"><span class="pl-c">#</span> represents the type of bounds imposed on the variables:</span>
                     <span class="pl-c"><span class="pl-c">#</span>  0-&gt;unbounded, 1-&gt;only lower bound, 2-&gt; both lower and upper bounds, 3-&gt;only upper bound</span>
    bounds[<span class="pl-c1">2</span>,i] <span class="pl-k">=</span> <span class="pl-c1">isodd</span>(i) ? <span class="pl-c1">1e0</span> : <span class="pl-k">-</span><span class="pl-c1">1e2</span>  <span class="pl-c"><span class="pl-c">#</span>  the lower bound on x, of length n.</span>
    bounds[<span class="pl-c1">3</span>,i] <span class="pl-k">=</span> <span class="pl-c1">1e2</span>  <span class="pl-c"><span class="pl-c">#</span>  the upper bound on x, of length n.</span>
<span class="pl-k">end</span>
<span class="pl-c"><span class="pl-c">#</span> call the optimizer</span>
<span class="pl-c"><span class="pl-c">#</span> - m: the maximum number of variable metric corrections used to define the limited memory matrix</span>
<span class="pl-c"><span class="pl-c">#</span> - factr: the iteration will stop when (f^k - f^{k+1})/max{|f^k|,|f^{k+1}|,1} &lt;= factr*epsmch,</span>
<span class="pl-c"><span class="pl-c">#</span>     where epsmch is the machine precision, which is automatically generated by the code. Typical values for factr:</span>
<span class="pl-c"><span class="pl-c">#</span>     1e12 for low accuracy, 1e7 for moderate accuracy, 1e1 for extremely high accuracy</span>
<span class="pl-c"><span class="pl-c">#</span> - pgtol: the iteration will stop when max{|proj g_i | i = 1, ..., n} &lt;= pgtol where pg_i is the ith component of the projected gradient</span>
<span class="pl-c"><span class="pl-c">#</span> - iprint: controls the frequency of output. iprint &lt; 0 means no output:</span>
<span class="pl-c"><span class="pl-c">#</span>     iprint = 0 print only one line at the last iteration</span>
<span class="pl-c"><span class="pl-c">#</span>     0 &lt; iprint &lt; 99 print also f and |proj g| every iprint iterations</span>
<span class="pl-c"><span class="pl-c">#</span>     iprint = 99 print details of every iteration except n-vectors</span>
<span class="pl-c"><span class="pl-c">#</span>     iprint = 100 print also the changes of active set and final x</span>
<span class="pl-c"><span class="pl-c">#</span>     iprint &gt; 100 print details of every iteration including x and g</span>
<span class="pl-c"><span class="pl-c">#</span> - maxfun: the maximum number of function evaluations</span>
<span class="pl-c"><span class="pl-c">#</span> - maxiter: the maximum number of iterations</span>
julia<span class="pl-k">&gt;</span> fout, xout <span class="pl-k">=</span> <span class="pl-c1">optimizer</span>(f, g!, x, bounds, m<span class="pl-k">=</span><span class="pl-c1">5</span>, factr<span class="pl-k">=</span><span class="pl-c1">1e7</span>, pgtol<span class="pl-k">=</span><span class="pl-c1">1e-5</span>, iprint<span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">1</span>, maxfun<span class="pl-k">=</span><span class="pl-c1">15000</span>, maxiter<span class="pl-k">=</span><span class="pl-c1">15000</span>)
(<span class="pl-c1">1.0834900834300615e-9</span>, [<span class="pl-c1">1.0</span>, <span class="pl-c1">1.0</span>, <span class="pl-c1">1.0</span>, <span class="pl-c1">1.00001</span>, <span class="pl-c1">1.00001</span>, <span class="pl-c1">1.00001</span>, <span class="pl-c1">1.00001</span>, <span class="pl-c1">1.00001</span>, <span class="pl-c1">1.00002</span>, <span class="pl-c1">1.00004</span>  …  <span class="pl-c1">1.0026</span>, <span class="pl-c1">1.00521</span>, <span class="pl-c1">1.01045</span>, <span class="pl-c1">1.02101</span>, <span class="pl-c1">1.04246</span>, <span class="pl-c1">1.08672</span>, <span class="pl-c1">1.18097</span>, <span class="pl-c1">1.39469</span>, <span class="pl-c1">1.94516</span>, <span class="pl-c1">3.78366</span>])

<span class="pl-c"><span class="pl-c">#</span> if your func needs extra arguments, a closure can be used to do the trick:</span>
<span class="pl-c"><span class="pl-c">#</span> optimizer(λ-&gt;func(λ, extra_args...), x, bounds, m=5, factr=1e7, pgtol=1e-5, iprint=-1, maxfun=15000, maxiter=15000)</span></pre></div>
<p>The original examples/drivers in the L-BFGS-B library are translated in the <code>test</code> folder directly using low-level <code>setulb</code>.</p>
</article></div>