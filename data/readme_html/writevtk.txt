<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-writevtk" class="anchor" aria-hidden="true" href="#writevtk"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>WriteVTK</h1>
<p><a href="https://github.com/jipolanco/WriteVTK.jl/actions"><img src="https://github.com/jipolanco/WriteVTK.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/jipolanco/WriteVTK.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/32ffeb07ad2c327a8a951f3a4060e65a7627858d22e1c5c9a26639adc0170ff1/68747470733a2f2f636f6465636f762e696f2f67682f6a69706f6c616e636f2f577269746556544b2e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/jipolanco/WriteVTK.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a>
<a href="https://zenodo.org/badge/latestdoi/32700186" rel="nofollow"><img src="https://camo.githubusercontent.com/273129e7e4f644505c09da29918d87c09463a1c32343e0b9cab125ebe29220d6/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f33323730303138362e737667" alt="DOI" data-canonical-src="https://zenodo.org/badge/32700186.svg" style="max-width:100%;"></a></p>
<p>This package allows to write VTK XML files for visualisation of multidimensional
datasets using tools such as <a href="http://www.paraview.org/" rel="nofollow">ParaView</a>.</p>
<p>The supported VTK file formats include rectilinear (.vtr) and structured grids
(.vts), image data (.vti), unstructured grids (.vtu) and polygonal data (.vtp).
Multiblock files (.vtm), which can point to multiple VTK files, can also be
exported; as well as ParaView collection files (.pvd), which can be used to
visualise time series of VTK files.</p>
<h2><a id="user-content-contents" class="anchor" aria-hidden="true" href="#contents"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Contents</h2>
<ul>
<li><a href="#installation">Installation</a></li>
<li><a href="#quick-start">Quick start</a></li>
<li><a href="#rectilinear-and-structured-meshes">Rectilinear and structured meshes</a></li>
<li><a href="#image-data">Image data</a></li>
<li><a href="#unstructured-meshes">Unstructured meshes</a></li>
<li><a href="#polygonal-data">Polygonal data</a></li>
<li><a href="#visualising-julia-arrays">Visualising Julia arrays</a></li>
<li><a href="#multiblock-files">Multiblock files</a></li>
<li><a href="#paraview-data-pvd-file-format">Paraview PVD files</a></li>
<li><a href="#do-block-syntax">Do-block syntax</a></li>
<li><a href="#additional-options">Additional options</a></li>
<li><a href="#examples">Examples</a></li>
</ul>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>From the Julia REPL:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="]add WriteVTK
"><pre>]add WriteVTK</pre></div>
<p>Then load the package in Julia with:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using WriteVTK
"><pre><span class="pl-k">using</span> WriteVTK</pre></div>
<h2><a id="user-content-quick-start" class="anchor" aria-hidden="true" href="#quick-start"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Quick start</h2>
<p>The <code>vtk_grid</code> function is the entry point for creating different kinds of VTK
files.
In the simplest cases, one just passes coordinate information to this function.
WriteVTK then decides on the VTK format that is more adapted for the provided
data.</p>
<p>For instance, it is natural in Julia to describe a 3D uniform grid, with
regularly spaced increments, as a list of ranges:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="x = 0:0.1:1
y = 0:0.2:1
z = -1:0.05:1
"><pre>x <span class="pl-k">=</span> <span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">0.1</span><span class="pl-k">:</span><span class="pl-c1">1</span>
y <span class="pl-k">=</span> <span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">0.2</span><span class="pl-k">:</span><span class="pl-c1">1</span>
z <span class="pl-k">=</span> <span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">0.05</span><span class="pl-k">:</span><span class="pl-c1">1</span></pre></div>
<p>This specific way of specifying coordinates is compatible with the <em>image data</em>
VTK format (.vti files).
The following creates such a file, with some scalar data attached to each point:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="vtk_grid(&quot;my_dataset&quot;, x, y, z) do vtk
    vtk[&quot;my_point_data&quot;] = rand(length(x), length(y), length(z))
end
"><pre><span class="pl-c1">vtk_grid</span>(<span class="pl-s"><span class="pl-pds">"</span>my_dataset<span class="pl-pds">"</span></span>, x, y, z) <span class="pl-k">do</span> vtk
    vtk[<span class="pl-s"><span class="pl-pds">"</span>my_point_data<span class="pl-pds">"</span></span>] <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">length</span>(x), <span class="pl-c1">length</span>(y), <span class="pl-c1">length</span>(z))
<span class="pl-k">end</span></pre></div>
<p>This will save a <code>my_dataset.vti</code> file with the data.
Note that the file extension should not be included in the filename, as it will
be attached automatically according to the dataset type.</p>
<p>By changing the coordinate specifications, the above can be naturally
generalised to non-uniform grid spacings and to curvilinear and unstructured
grids.
In each case, the correct kind of VTK file will be generated.</p>
<h2><a id="user-content-rectilinear-and-structured-meshes" class="anchor" aria-hidden="true" href="#rectilinear-and-structured-meshes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Rectilinear and structured meshes</h2>
<h3><a id="user-content-define-a-grid" class="anchor" aria-hidden="true" href="#define-a-grid"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Define a grid</h3>
<p>The function <code>vtk_grid</code> initialises the VTK file.
This function requires a filename with no extension, and the grid coordinates.
Depending on the shape of the arrays <code>x</code>, <code>y</code> and <code>z</code>, either a rectilinear or
structured grid is created.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="vtkfile = vtk_grid(&quot;my_vtk_file&quot;, x, y, z) # 3-D
vtkfile = vtk_grid(&quot;my_vtk_file&quot;, x, y)    # 2-D
"><pre>vtkfile <span class="pl-k">=</span> <span class="pl-c1">vtk_grid</span>(<span class="pl-s"><span class="pl-pds">"</span>my_vtk_file<span class="pl-pds">"</span></span>, x, y, z) <span class="pl-c"><span class="pl-c">#</span> 3-D</span>
vtkfile <span class="pl-k">=</span> <span class="pl-c1">vtk_grid</span>(<span class="pl-s"><span class="pl-pds">"</span>my_vtk_file<span class="pl-pds">"</span></span>, x, y)    <span class="pl-c"><span class="pl-c">#</span> 2-D</span></pre></div>
<p>Required array shapes for each grid type:</p>
<ul>
<li>Rectilinear grid: <code>x</code>, <code>y</code>, <code>z</code> are 1-D arrays with different lengths in
general (<code>Ni</code>, <code>Nj</code> and <code>Nk</code> respectively).</li>
<li>Structured grid: <code>x</code>, <code>y</code>, <code>z</code> are 3-D arrays with the same
shape: <code>(Ni, Nj, Nk)</code>. For the two dimensional case, <code>x</code> and <code>y</code> are 2-D arrays
with shape <code>(Ni, Nj)</code></li>
</ul>
<p>Alternatively, in the case of structured grids, the grid points can be defined from a
single 4-D array <code>xyz</code>, of dimensions <code>(3, Ni, Nj, Nk)</code>. For the two dimensional case
<code>xy</code> is a 3-D array, with dimensions <code>(2, Ni, Nj)</code>:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="vtkfile = vtk_grid(&quot;my_vtk_file&quot;, xyz) # 3-D
vtkfile = vtk_grid(&quot;my_vtk_file&quot;, xy)  # 2-D
"><pre>vtkfile <span class="pl-k">=</span> <span class="pl-c1">vtk_grid</span>(<span class="pl-s"><span class="pl-pds">"</span>my_vtk_file<span class="pl-pds">"</span></span>, xyz) <span class="pl-c"><span class="pl-c">#</span> 3-D</span>
vtkfile <span class="pl-k">=</span> <span class="pl-c1">vtk_grid</span>(<span class="pl-s"><span class="pl-pds">"</span>my_vtk_file<span class="pl-pds">"</span></span>, xy)  <span class="pl-c"><span class="pl-c">#</span> 2-D</span></pre></div>
<p>This is actually more efficient than the previous formulation.</p>
<h3><a id="user-content-add-some-data-to-the-file" class="anchor" aria-hidden="true" href="#add-some-data-to-the-file"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Add some data to the file</h3>
<p>In a VTK file, data can be associated to grid points or to data cells
(see <a href="#defining-cells">Defining cells</a> for details on cells).
Data is written to a VTK file object using the syntax</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="vtkfile[&quot;Velocity&quot;] = vel
vtkfile[&quot;Pressure&quot;] = p
vtkfile[&quot;Concentration&quot;] = C
"><pre>vtkfile[<span class="pl-s"><span class="pl-pds">"</span>Velocity<span class="pl-pds">"</span></span>] <span class="pl-k">=</span> vel
vtkfile[<span class="pl-s"><span class="pl-pds">"</span>Pressure<span class="pl-pds">"</span></span>] <span class="pl-k">=</span> p
vtkfile[<span class="pl-s"><span class="pl-pds">"</span>Concentration<span class="pl-pds">"</span></span>] <span class="pl-k">=</span> C</pre></div>
<p>where the "index" is the name of the dataset in the VTK file.</p>
<p>It is also possible to write datasets whose dimensions are independent of the
discrete geometry.
In VTK this is called "field data", and can be used to write metadata such as
time information or strings:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="vtkfile[&quot;Time&quot;] = 42.0
vtkfile[&quot;Date&quot;] = &quot;30/05/2020&quot;
vtkfile[&quot;Distances&quot;] = [2.0, 4.0, 8.0]
"><pre>vtkfile[<span class="pl-s"><span class="pl-pds">"</span>Time<span class="pl-pds">"</span></span>] <span class="pl-k">=</span> <span class="pl-c1">42.0</span>
vtkfile[<span class="pl-s"><span class="pl-pds">"</span>Date<span class="pl-pds">"</span></span>] <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>30/05/2020<span class="pl-pds">"</span></span>
vtkfile[<span class="pl-s"><span class="pl-pds">"</span>Distances<span class="pl-pds">"</span></span>] <span class="pl-k">=</span> [<span class="pl-c1">2.0</span>, <span class="pl-c1">4.0</span>, <span class="pl-c1">8.0</span>]</pre></div>
<p>For convenience, the input data is automatically associated either to grid
points or data cells, or interpreted as field data, according to the input data
dimensions.
If more control is desired, one can explicitly pass a <code>VTKPointData</code>,
a <code>VTKCellData</code> or a <code>VTKFieldData</code> instance as a second index:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="vtkfile[&quot;Velocity&quot;, VTKPointData()] = vel
vtkfile[&quot;Pressure&quot;, VTKCellData()] = p
vtkfile[&quot;Time&quot;, VTKFieldData()] = 42.0
"><pre>vtkfile[<span class="pl-s"><span class="pl-pds">"</span>Velocity<span class="pl-pds">"</span></span>, <span class="pl-c1">VTKPointData</span>()] <span class="pl-k">=</span> vel
vtkfile[<span class="pl-s"><span class="pl-pds">"</span>Pressure<span class="pl-pds">"</span></span>, <span class="pl-c1">VTKCellData</span>()] <span class="pl-k">=</span> p
vtkfile[<span class="pl-s"><span class="pl-pds">"</span>Time<span class="pl-pds">"</span></span>, <span class="pl-c1">VTKFieldData</span>()] <span class="pl-k">=</span> <span class="pl-c1">42.0</span></pre></div>
<p>Note that in rectilinear and structured meshes, the cell dimensions are
always <code>(Ni - 1, Nj - 1, Nk - 1)</code>, and the dimensions of the data arrays associated to cells should be consistent with these dimensions.</p>
<p>The input array can represent either scalar or vectorial data.
The shape of the array should be <code>(Ni, Nj, Nk)</code> for scalars, and
<code>(Nc, Ni, Nj, Nk)</code> for vectors, where <code>Nc</code> is the number of components of
the vector.</p>
<p>Vector datasets can also be given as a tuple of scalar datasets, where each
scalar represents a component of the vector field.
Example:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="acc = (acc_x, acc_y, acc_z)  # acc_x, acc_y and acc_z have size (Ni, Nj, Nk)
vtkfile[&quot;Acceleration&quot;] = acc
"><pre>acc <span class="pl-k">=</span> (acc_x, acc_y, acc_z)  <span class="pl-c"><span class="pl-c">#</span> acc_x, acc_y and acc_z have size (Ni, Nj, Nk)</span>
vtkfile[<span class="pl-s"><span class="pl-pds">"</span>Acceleration<span class="pl-pds">"</span></span>] <span class="pl-k">=</span> acc</pre></div>
<p>This can be useful to avoid copies of data in some cases.</p>
<h3><a id="user-content-save-the-file" class="anchor" aria-hidden="true" href="#save-the-file"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Save the file</h3>
<p>Finally, close and save the file with <code>vtk_save</code>:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="outfiles = vtk_save(vtkfile)
"><pre>outfiles <span class="pl-k">=</span> <span class="pl-c1">vtk_save</span>(vtkfile)</pre></div>
<p><code>outfiles</code> is an array of strings with the paths to the generated files.
In this case, the array is of length 1, but that changes when working
with <a href="#multiblock-files">multiblock files</a>.</p>
<h2><a id="user-content-image-data" class="anchor" aria-hidden="true" href="#image-data"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Image data</h2>
<p>The points and cells of an image data file are defined by the number of points
in each direction, <code>(Nx, Ny, Nz)</code>.
In addition, the origin of the dataset and the spacing in each direction can be
optionally specified.
Example:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="Nx, Ny, Nz = 10, 12, 42
origin = (3.0, 4.0, -3.2)
spacing = (0.1, 0.2, 0.3)
vtk = vtk_grid(&quot;my_vti_file&quot;, Nx, Ny, Nz, origin=origin, spacing=spacing)
vtk_save(vtk)
"><pre>Nx, Ny, Nz <span class="pl-k">=</span> <span class="pl-c1">10</span>, <span class="pl-c1">12</span>, <span class="pl-c1">42</span>
origin <span class="pl-k">=</span> (<span class="pl-c1">3.0</span>, <span class="pl-c1">4.0</span>, <span class="pl-k">-</span><span class="pl-c1">3.2</span>)
spacing <span class="pl-k">=</span> (<span class="pl-c1">0.1</span>, <span class="pl-c1">0.2</span>, <span class="pl-c1">0.3</span>)
vtk <span class="pl-k">=</span> <span class="pl-c1">vtk_grid</span>(<span class="pl-s"><span class="pl-pds">"</span>my_vti_file<span class="pl-pds">"</span></span>, Nx, Ny, Nz, origin<span class="pl-k">=</span>origin, spacing<span class="pl-k">=</span>spacing)
<span class="pl-c1">vtk_save</span>(vtk)</pre></div>
<p>Coordinates may also be specified using ranges (any subtype of <code>AbstractRange</code>
works).
Some examples:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="# Using StepRangeLen objects
vtk_grid(&quot;vti_file_1&quot;, 0:0.1:10, 0:0.2:10, 1:0.3:4)

# Using LinRange objects
vtk_grid(&quot;vti_file_2&quot;, LinRange(0, 4.2, 10), LinRange(1, 3.1, 42), LinRange(0.2, 12.1, 32))
"><pre><span class="pl-c"><span class="pl-c">#</span> Using StepRangeLen objects</span>
<span class="pl-c1">vtk_grid</span>(<span class="pl-s"><span class="pl-pds">"</span>vti_file_1<span class="pl-pds">"</span></span>, <span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">0.1</span><span class="pl-k">:</span><span class="pl-c1">10</span>, <span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">0.2</span><span class="pl-k">:</span><span class="pl-c1">10</span>, <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">0.3</span><span class="pl-k">:</span><span class="pl-c1">4</span>)

<span class="pl-c"><span class="pl-c">#</span> Using LinRange objects</span>
<span class="pl-c1">vtk_grid</span>(<span class="pl-s"><span class="pl-pds">"</span>vti_file_2<span class="pl-pds">"</span></span>, <span class="pl-c1">LinRange</span>(<span class="pl-c1">0</span>, <span class="pl-c1">4.2</span>, <span class="pl-c1">10</span>), <span class="pl-c1">LinRange</span>(<span class="pl-c1">1</span>, <span class="pl-c1">3.1</span>, <span class="pl-c1">42</span>), <span class="pl-c1">LinRange</span>(<span class="pl-c1">0.2</span>, <span class="pl-c1">12.1</span>, <span class="pl-c1">32</span>))</pre></div>
<h2><a id="user-content-unstructured-meshes" class="anchor" aria-hidden="true" href="#unstructured-meshes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Unstructured meshes</h2>
<p>An unstructured mesh is defined by a set of points in space and a set of cells
that connect those points.</p>
<h3><a id="user-content-defining-cells" class="anchor" aria-hidden="true" href="#defining-cells"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Defining cells</h3>
<p>In WriteVTK, a cell is defined using the MeshCell type:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="cell = MeshCell(cell_type, connectivity)
"><pre>cell <span class="pl-k">=</span> <span class="pl-c1">MeshCell</span>(cell_type, connectivity)</pre></div>
<ul>
<li>
<p><code>cell_type</code> is of type <code>VTKCellType</code> which contains the name and an integer value that
determines the type of the cell, as defined in the
<a href="http://www.vtk.org/VTK/img/file-formats.pdf" rel="nofollow">VTK specification</a> (see figures 2 and 3 in
that document). For convenience, WriteVTK includes a <code>VTKCellTypes</code> module that contains
these definitions. For instance, a triangle is associated to the value <code>cell_type = VTKCellTypes.VTK_TRIANGLE</code>.
Cell types may also be constructed from their associated integer identifier.
For instance, <code>VTKCellType(5)</code> also returns a <code>VTK_TRIANGLE</code> cell type.</p>
</li>
<li>
<p><code>connectivity</code> is a vector of indices that determine the mesh points that are connected
by the cell. In the case of a triangle, this would be an integer array of length 3.</p>
<p>Note that the connectivity indices are one-based (as opposed to
<a href="https://en.wikipedia.org/wiki/Zero-based_numbering" rel="nofollow">zero-based</a>), following the
convention in Julia.</p>
</li>
</ul>
<h3><a id="user-content-generating-an-unstructured-vtk-file" class="anchor" aria-hidden="true" href="#generating-an-unstructured-vtk-file"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Generating an unstructured VTK file</h3>
<p>First, initialise the file:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="vtkfile = vtk_grid(&quot;my_vtk_file&quot;, points, cells)
"><pre>vtkfile <span class="pl-k">=</span> <span class="pl-c1">vtk_grid</span>(<span class="pl-s"><span class="pl-pds">"</span>my_vtk_file<span class="pl-pds">"</span></span>, points, cells)</pre></div>
<ul>
<li>
<p><code>points</code> is an array with the point locations, of dimensions <code>(dim, num_points)</code> where
<code>dim</code> is the dimension (1, 2 or 3) and <code>num_points</code> the number of points.</p>
</li>
<li>
<p><code>cells</code> is a MeshCell array that contains all the cells of the mesh. For example:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="# Suppose that the mesh is made of 5 points:
cells = [MeshCell(VTKCellTypes.VTK_TRIANGLE, [1, 4, 2]),
         MeshCell(VTKCellTypes.VTK_QUAD,     [2, 4, 3, 5])]
"><pre><span class="pl-c"><span class="pl-c">#</span> Suppose that the mesh is made of 5 points:</span>
cells <span class="pl-k">=</span> [<span class="pl-c1">MeshCell</span>(VTKCellTypes<span class="pl-k">.</span>VTK_TRIANGLE, [<span class="pl-c1">1</span>, <span class="pl-c1">4</span>, <span class="pl-c1">2</span>]),
         <span class="pl-c1">MeshCell</span>(VTKCellTypes<span class="pl-k">.</span>VTK_QUAD,     [<span class="pl-c1">2</span>, <span class="pl-c1">4</span>, <span class="pl-c1">3</span>, <span class="pl-c1">5</span>])]</pre></div>
</li>
</ul>
<p>Alternatively, the grid points can be defined from 1-D arrays <code>x</code>, <code>y</code>,
<code>z</code> with equal lengths <code>num_points</code>:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="vtkfile = vtk_grid(&quot;my_vtk_file&quot;, x, y, z, cells) # 3D
vtkfile = vtk_grid(&quot;my_vtk_file&quot;, x, y, cells)    # 2D
vtkfile = vtk_grid(&quot;my_vtk_file&quot;, x, cells)       # 1D
"><pre>vtkfile <span class="pl-k">=</span> <span class="pl-c1">vtk_grid</span>(<span class="pl-s"><span class="pl-pds">"</span>my_vtk_file<span class="pl-pds">"</span></span>, x, y, z, cells) <span class="pl-c"><span class="pl-c">#</span> 3D</span>
vtkfile <span class="pl-k">=</span> <span class="pl-c1">vtk_grid</span>(<span class="pl-s"><span class="pl-pds">"</span>my_vtk_file<span class="pl-pds">"</span></span>, x, y, cells)    <span class="pl-c"><span class="pl-c">#</span> 2D</span>
vtkfile <span class="pl-k">=</span> <span class="pl-c1">vtk_grid</span>(<span class="pl-s"><span class="pl-pds">"</span>my_vtk_file<span class="pl-pds">"</span></span>, x, cells)       <span class="pl-c"><span class="pl-c">#</span> 1D</span></pre></div>
<p>or from a 4-D array <code>points</code>, with dimension <code>[dim, Ni, Nj, Nk]</code> where <code>dim</code> is the dimension
and <code>Ni</code>,<code>Nj</code>,<code>Nk</code> the number of points in each direction <code>x</code>,<code>y</code>,<code>z</code>:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="vtkfile = vtk_grid(&quot;my_vtk_file&quot;, points, cells)
"><pre>vtkfile <span class="pl-k">=</span> <span class="pl-c1">vtk_grid</span>(<span class="pl-s"><span class="pl-pds">"</span>my_vtk_file<span class="pl-pds">"</span></span>, points, cells)</pre></div>
<p>These two last methods are less efficient though.</p>
<p>Now add some data to the file.
It is possible to add both point data and cell data:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="vtkfile[&quot;my_point_data&quot;, VTKPointData()] = pdata
vtkfile[&quot;my_cell_data&quot;, VTKCellData()] = cdata
"><pre>vtkfile[<span class="pl-s"><span class="pl-pds">"</span>my_point_data<span class="pl-pds">"</span></span>, <span class="pl-c1">VTKPointData</span>()] <span class="pl-k">=</span> pdata
vtkfile[<span class="pl-s"><span class="pl-pds">"</span>my_cell_data<span class="pl-pds">"</span></span>, <span class="pl-c1">VTKCellData</span>()] <span class="pl-k">=</span> cdata</pre></div>
<p>The <code>pdata</code> and <code>cdata</code> arrays must have sizes consistent with the number of
points and cells in the mesh, respectively.
Note that, as discussed <a href="#add-some-data-to-the-file">above</a>, the second
argument (<code>VTKPointData()</code> or <code>VTKCellData()</code>) can be generally omitted.
In this case, its value will be automatically determined from the input data
dimensions.</p>
<p>Finally, close and save the file:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="outfiles = vtk_save(vtkfile)
"><pre>outfiles <span class="pl-k">=</span> <span class="pl-c1">vtk_save</span>(vtkfile)</pre></div>
<h2><a id="user-content-polygonal-data" class="anchor" aria-hidden="true" href="#polygonal-data"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Polygonal data</h2>
<p>Polygonal datasets are a special type of unstructured grids, in which the cell
types are restricted to vertices, lines, triangle strips and polygons.
In WriteVTK, these shapes are respectively identified by the singleton types
<code>PolyData.Verts</code>, <code>PolyData.Lines</code>, <code>PolyData.Strips</code> and <code>PolyData.Polys</code>.</p>
<p>The specification of points is the same as for unstructured grids.
Cells are specified by passing one of the above types to <code>MeshCell</code>.
For instance, the following specifies a line passing by 4 points of the grid:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="line = MeshCell(PolyData.Lines(), [3, 4, 7, 2])
"><pre>line <span class="pl-k">=</span> <span class="pl-c1">MeshCell</span>(PolyData<span class="pl-k">.</span><span class="pl-c1">Lines</span>(), [<span class="pl-c1">3</span>, <span class="pl-c1">4</span>, <span class="pl-c1">7</span>, <span class="pl-c1">2</span>])</pre></div>
<p>Similarly to unstructured grids, a VTK file is created by passing vectors of
cells to <code>vtk_grid</code>.
The difference is that one can pass multiple vectors (one for each cell type),
and that each vector may only contain a single cell type.</p>
<p>Example:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="# Create lists of lines and polygons connecting different points in space
points = rand(3, 100)  # (x, y, z) locations
lines = [MeshCell(PolyData.Lines(), (i, i + 1, i + 4)) for i in (3, 5, 42)]
polys = [MeshCell(PolyData.Polys(), i:(i + 6)) for i = 1:3:20]
vtk = vtk_grid(&quot;my_vtp_file&quot;, points, lines, polys)
"><pre><span class="pl-c"><span class="pl-c">#</span> Create lists of lines and polygons connecting different points in space</span>
points <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">3</span>, <span class="pl-c1">100</span>)  <span class="pl-c"><span class="pl-c">#</span> (x, y, z) locations</span>
lines <span class="pl-k">=</span> [<span class="pl-c1">MeshCell</span>(PolyData<span class="pl-k">.</span><span class="pl-c1">Lines</span>(), (i, i <span class="pl-k">+</span> <span class="pl-c1">1</span>, i <span class="pl-k">+</span> <span class="pl-c1">4</span>)) <span class="pl-k">for</span> i <span class="pl-k">in</span> (<span class="pl-c1">3</span>, <span class="pl-c1">5</span>, <span class="pl-c1">42</span>)]
polys <span class="pl-k">=</span> [<span class="pl-c1">MeshCell</span>(PolyData<span class="pl-k">.</span><span class="pl-c1">Polys</span>(), i<span class="pl-k">:</span>(i <span class="pl-k">+</span> <span class="pl-c1">6</span>)) <span class="pl-k">for</span> i <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">3</span><span class="pl-k">:</span><span class="pl-c1">20</span>]
vtk <span class="pl-k">=</span> <span class="pl-c1">vtk_grid</span>(<span class="pl-s"><span class="pl-pds">"</span>my_vtp_file<span class="pl-pds">"</span></span>, points, lines, polys)</pre></div>
<p>Note that the order of <code>lines</code> and <code>polys</code> is not important.
More generally, one can pass any combination of the four polygonal primitives
mentioned above.</p>
<p>Once the grid is created, point and cell data can be added to the file just like
for unstructured grids.</p>
<p><g-emoji class="g-emoji" alias="warning" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/26a0.png">⚠️</g-emoji> <strong>Known issue</strong>: when the polygonal dataset contains multiple kinds of cells
(e.g. both lines and polygons), cell data is not correctly parsed by the VTK
libraries, and as a result it cannot be visualised in ParaView.
The problem doesn't happen with point data.
This seems to be a <a href="https://vtk.org/pipermail/vtkusers/2004-August/026448.html" rel="nofollow">very old</a> <a href="https://gitlab.kitware.com/vtk/vtk/-/issues/564" rel="nofollow">VTK issue</a>.</p>
<h2><a id="user-content-visualising-julia-arrays" class="anchor" aria-hidden="true" href="#visualising-julia-arrays"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Visualising Julia arrays</h2>
<p>A convenience function is provided to quickly save Julia arrays as image data:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="A = rand(100, 100, 100)
vtk_write_array(&quot;my_vti_file&quot;, A, &quot;my_property_name&quot;)
"><pre>A <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">100</span>, <span class="pl-c1">100</span>, <span class="pl-c1">100</span>)
<span class="pl-c1">vtk_write_array</span>(<span class="pl-s"><span class="pl-pds">"</span>my_vti_file<span class="pl-pds">"</span></span>, A, <span class="pl-s"><span class="pl-pds">"</span>my_property_name<span class="pl-pds">"</span></span>)</pre></div>
<h2><a id="user-content-multiblock-files" class="anchor" aria-hidden="true" href="#multiblock-files"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Multiblock files</h2>
<p>Multiblock files (.vtm) are XML VTK files that can point to multiple other VTK
files.
They can be useful when working with complex geometries that are composed of
multiple sub-domains.
In order to generate multiblock files, the <code>vtk_multiblock</code> function must be used.
The functions introduced above are then used with some small modifications.</p>
<p>First, a multiblock file must be initialised:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="vtmfile = vtk_multiblock(&quot;my_vtm_file&quot;)
"><pre>vtmfile <span class="pl-k">=</span> <span class="pl-c1">vtk_multiblock</span>(<span class="pl-s"><span class="pl-pds">"</span>my_vtm_file<span class="pl-pds">"</span></span>)</pre></div>
<p>Then, each sub-grid can be generated with <code>vtk_grid</code> using the <code>vtmfile</code> object
as the first argument:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="# First block.
vtkfile = vtk_grid(vtmfile, x1, y1, z1)
vtkfile[&quot;Pressure&quot;] = p1

# Second block.
vtkfile = vtk_grid(vtmfile, x2, y2, z2)
vtkfile[&quot;Pressure&quot;] = p2
"><pre><span class="pl-c"><span class="pl-c">#</span> First block.</span>
vtkfile <span class="pl-k">=</span> <span class="pl-c1">vtk_grid</span>(vtmfile, x1, y1, z1)
vtkfile[<span class="pl-s"><span class="pl-pds">"</span>Pressure<span class="pl-pds">"</span></span>] <span class="pl-k">=</span> p1

<span class="pl-c"><span class="pl-c">#</span> Second block.</span>
vtkfile <span class="pl-k">=</span> <span class="pl-c1">vtk_grid</span>(vtmfile, x2, y2, z2)
vtkfile[<span class="pl-s"><span class="pl-pds">"</span>Pressure<span class="pl-pds">"</span></span>] <span class="pl-k">=</span> p2</pre></div>
<p>Additional blocks can also be added to the multiblock file with
<code>multiblock_add_block</code>, which can contain any of the VTK files that WriteVTK
supports:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="# Create a block named my_multiblock and add it to vtmfile.
block = multiblock_add_block(vtmfile, &quot;my_multiblock&quot;)

# Add a VTK file to `block`.
vtkfile = vtk_grid(block, &quot;another_file&quot;, x3, y3, z3)
"><pre><span class="pl-c"><span class="pl-c">#</span> Create a block named my_multiblock and add it to vtmfile.</span>
block <span class="pl-k">=</span> <span class="pl-c1">multiblock_add_block</span>(vtmfile, <span class="pl-s"><span class="pl-pds">"</span>my_multiblock<span class="pl-pds">"</span></span>)

<span class="pl-c"><span class="pl-c">#</span> Add a VTK file to `block`.</span>
vtkfile <span class="pl-k">=</span> <span class="pl-c1">vtk_grid</span>(block, <span class="pl-s"><span class="pl-pds">"</span>another_file<span class="pl-pds">"</span></span>, x3, y3, z3)</pre></div>
<p>Blocks can be nested arbitrarily:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="# Add more blocks.
another_block = multiblock_add_block(block, &quot;my_multiblock-block&quot;)
yet_another_block = multiblock_add_block(another_block, &quot;my_multiblock-block-block&quot;)
"><pre><span class="pl-c"><span class="pl-c">#</span> Add more blocks.</span>
another_block <span class="pl-k">=</span> <span class="pl-c1">multiblock_add_block</span>(block, <span class="pl-s"><span class="pl-pds">"</span>my_multiblock-block<span class="pl-pds">"</span></span>)
yet_another_block <span class="pl-k">=</span> <span class="pl-c1">multiblock_add_block</span>(another_block, <span class="pl-s"><span class="pl-pds">"</span>my_multiblock-block-block<span class="pl-pds">"</span></span>)</pre></div>
<p>And more VTK files may be added to the sub-blocks:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="vtkfile = vtk_grid(yet_another_block, &quot;my_deeply_nested_file&quot;, x4, y4, z4)
"><pre>vtkfile <span class="pl-k">=</span> <span class="pl-c1">vtk_grid</span>(yet_another_block, <span class="pl-s"><span class="pl-pds">"</span>my_deeply_nested_file<span class="pl-pds">"</span></span>, x4, y4, z4)</pre></div>
<p>Finally, only the multiblock file needs to be saved explicitly:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="outfiles = vtk_save(vtmfile)
"><pre>outfiles <span class="pl-k">=</span> <span class="pl-c1">vtk_save</span>(vtmfile)</pre></div>
<p>WriteVTK will write out a multiblock VTK file that looks like something like this (in addition to all the VTK files contained in the multiblock file):</p>
<div class="highlight highlight-text-xml position-relative" data-snippet-clipboard-copy-content="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;VTKFile type=&quot;vtkMultiBlockDataSet&quot; version=&quot;1.0&quot; byte_order=&quot;LittleEndian&quot;&gt;
  &lt;vtkMultiBlockDataSet&gt;
    &lt;DataSet index=&quot;0&quot; file=&quot;my_vtm_file_1.vti&quot;/&gt;
    &lt;DataSet index=&quot;1&quot; file=&quot;my_vtm_file_2.vti&quot;/&gt;
    &lt;Block index=&quot;2&quot; name=&quot;my_multiblock&quot;&gt;
      &lt;DataSet index=&quot;0&quot; file=&quot;another_file.vti&quot; name=&quot;another_file&quot;/&gt;
      &lt;Block index=&quot;1&quot; name=&quot;my_multiblock-block&quot;&gt;
        &lt;Block index=&quot;0&quot; name=&quot;my_multiblock-block-block&quot;&gt;
          &lt;DataSet index=&quot;0&quot; file=&quot;my_deeply_nested_file.vti&quot; name=&quot;my_deeply_nested_file&quot;/&gt;
        &lt;/Block&gt;
      &lt;/Block&gt;
    &lt;/Block&gt;
  &lt;/vtkMultiBlockDataSet&gt;
&lt;/VTKFile&gt;
"><pre>&lt;?<span class="pl-ent">xml</span><span class="pl-e"> version</span>=<span class="pl-s"><span class="pl-pds">"</span>1.0<span class="pl-pds">"</span></span><span class="pl-e"> encoding</span>=<span class="pl-s"><span class="pl-pds">"</span>utf-8<span class="pl-pds">"</span></span>?&gt;
&lt;<span class="pl-ent">VTKFile</span> <span class="pl-e">type</span>=<span class="pl-s"><span class="pl-pds">"</span>vtkMultiBlockDataSet<span class="pl-pds">"</span></span> <span class="pl-e">version</span>=<span class="pl-s"><span class="pl-pds">"</span>1.0<span class="pl-pds">"</span></span> <span class="pl-e">byte_order</span>=<span class="pl-s"><span class="pl-pds">"</span>LittleEndian<span class="pl-pds">"</span></span>&gt;
  &lt;<span class="pl-ent">vtkMultiBlockDataSet</span>&gt;
    &lt;<span class="pl-ent">DataSet</span> <span class="pl-e">index</span>=<span class="pl-s"><span class="pl-pds">"</span>0<span class="pl-pds">"</span></span> <span class="pl-e">file</span>=<span class="pl-s"><span class="pl-pds">"</span>my_vtm_file_1.vti<span class="pl-pds">"</span></span>/&gt;
    &lt;<span class="pl-ent">DataSet</span> <span class="pl-e">index</span>=<span class="pl-s"><span class="pl-pds">"</span>1<span class="pl-pds">"</span></span> <span class="pl-e">file</span>=<span class="pl-s"><span class="pl-pds">"</span>my_vtm_file_2.vti<span class="pl-pds">"</span></span>/&gt;
    &lt;<span class="pl-ent">Block</span> <span class="pl-e">index</span>=<span class="pl-s"><span class="pl-pds">"</span>2<span class="pl-pds">"</span></span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>my_multiblock<span class="pl-pds">"</span></span>&gt;
      &lt;<span class="pl-ent">DataSet</span> <span class="pl-e">index</span>=<span class="pl-s"><span class="pl-pds">"</span>0<span class="pl-pds">"</span></span> <span class="pl-e">file</span>=<span class="pl-s"><span class="pl-pds">"</span>another_file.vti<span class="pl-pds">"</span></span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>another_file<span class="pl-pds">"</span></span>/&gt;
      &lt;<span class="pl-ent">Block</span> <span class="pl-e">index</span>=<span class="pl-s"><span class="pl-pds">"</span>1<span class="pl-pds">"</span></span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>my_multiblock-block<span class="pl-pds">"</span></span>&gt;
        &lt;<span class="pl-ent">Block</span> <span class="pl-e">index</span>=<span class="pl-s"><span class="pl-pds">"</span>0<span class="pl-pds">"</span></span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>my_multiblock-block-block<span class="pl-pds">"</span></span>&gt;
          &lt;<span class="pl-ent">DataSet</span> <span class="pl-e">index</span>=<span class="pl-s"><span class="pl-pds">"</span>0<span class="pl-pds">"</span></span> <span class="pl-e">file</span>=<span class="pl-s"><span class="pl-pds">"</span>my_deeply_nested_file.vti<span class="pl-pds">"</span></span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>my_deeply_nested_file<span class="pl-pds">"</span></span>/&gt;
        &lt;/<span class="pl-ent">Block</span>&gt;
      &lt;/<span class="pl-ent">Block</span>&gt;
    &lt;/<span class="pl-ent">Block</span>&gt;
  &lt;/<span class="pl-ent">vtkMultiBlockDataSet</span>&gt;
&lt;/<span class="pl-ent">VTKFile</span>&gt;</pre></div>
<h2><a id="user-content-paraview-data-pvd-file-format" class="anchor" aria-hidden="true" href="#paraview-data-pvd-file-format"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Paraview Data (PVD) file format</h2>
<p>A <code>pvd</code> file is a collection of VTK files, typically for holding results at
different time steps in a simulation. A <code>pvd</code> file is initialised with:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="pvd = paraview_collection(&quot;my_pvd_file&quot;)
"><pre>pvd <span class="pl-k">=</span> <span class="pl-c1">paraview_collection</span>(<span class="pl-s"><span class="pl-pds">"</span>my_pvd_file<span class="pl-pds">"</span></span>)</pre></div>
<p>By default this overwrites existent <code>pvd</code> files.
To append new datasets to an existent <code>pvd</code> file, set the <code>append</code> option to
<code>true</code>:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="pvd = paraview_collection(&quot;my_pvd_file&quot;, append=true)
"><pre>pvd <span class="pl-k">=</span> <span class="pl-c1">paraview_collection</span>(<span class="pl-s"><span class="pl-pds">"</span>my_pvd_file<span class="pl-pds">"</span></span>, append<span class="pl-k">=</span><span class="pl-c1">true</span>)</pre></div>
<p>VTK files are then added to the <code>pvd</code> file with</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="pvd[time] = vtkfile
"><pre>pvd[time] <span class="pl-k">=</span> vtkfile</pre></div>
<p>Here, <code>time</code> is a real number that represents the current time (or timestep) in
the simulation.</p>
<p>When all the files are added to the <code>pvd</code> file, it can be saved using:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="vtk_save(pvd)
"><pre><span class="pl-c1">vtk_save</span>(pvd)</pre></div>
<h2><a id="user-content-do-block-syntax" class="anchor" aria-hidden="true" href="#do-block-syntax"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Do-block syntax</h2>
<p><a href="https://docs.julialang.org/en/latest/manual/functions/#Do-Block-Syntax-for-Function-Arguments-1" rel="nofollow">Do-block syntax</a>
is supported by <code>vtk_grid</code>, <code>vtk_multiblock</code> and <code>paraview_collection</code>.
At the end of the do-block, <code>vtk_save</code> is called implicitly on the generated
VTK object.
Example:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="# Image data, rectilinear or structured grid
outfiles = vtk_grid(&quot;my_vtk_file&quot;, x, y, z) do vtk
    vtk[&quot;Pressure&quot;] = p
    vtk[&quot;Velocity&quot;] = vel
end

# Multiblock file
outfiles = vtk_multiblock(&quot;my_vtm_file&quot;) do vtm
    vtk = vtk_grid(vtm, x1, y1, z1)
    vtk[&quot;Velocity&quot;] = vel1

    vtk = vtk_grid(vtm, x2, y2, z2)
    vtk[&quot;Velocity&quot;] = vel2
end
"><pre><span class="pl-c"><span class="pl-c">#</span> Image data, rectilinear or structured grid</span>
outfiles <span class="pl-k">=</span> <span class="pl-c1">vtk_grid</span>(<span class="pl-s"><span class="pl-pds">"</span>my_vtk_file<span class="pl-pds">"</span></span>, x, y, z) <span class="pl-k">do</span> vtk
    vtk[<span class="pl-s"><span class="pl-pds">"</span>Pressure<span class="pl-pds">"</span></span>] <span class="pl-k">=</span> p
    vtk[<span class="pl-s"><span class="pl-pds">"</span>Velocity<span class="pl-pds">"</span></span>] <span class="pl-k">=</span> vel
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> Multiblock file</span>
outfiles <span class="pl-k">=</span> <span class="pl-c1">vtk_multiblock</span>(<span class="pl-s"><span class="pl-pds">"</span>my_vtm_file<span class="pl-pds">"</span></span>) <span class="pl-k">do</span> vtm
    vtk <span class="pl-k">=</span> <span class="pl-c1">vtk_grid</span>(vtm, x1, y1, z1)
    vtk[<span class="pl-s"><span class="pl-pds">"</span>Velocity<span class="pl-pds">"</span></span>] <span class="pl-k">=</span> vel1

    vtk <span class="pl-k">=</span> <span class="pl-c1">vtk_grid</span>(vtm, x2, y2, z2)
    vtk[<span class="pl-s"><span class="pl-pds">"</span>Velocity<span class="pl-pds">"</span></span>] <span class="pl-k">=</span> vel2
<span class="pl-k">end</span></pre></div>
<h2><a id="user-content-additional-options" class="anchor" aria-hidden="true" href="#additional-options"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Additional options</h2>
<p>By default, numerical data is written to the XML files as compressed raw binary
data.
This can be changed using the optional keyword arguments of <code>vtk_grid</code>.</p>
<p>For instance, to disable both compressing and appending raw data in the case of
unstructured meshes:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="vtk = vtk_grid(&quot;my_vtk_file&quot;, points, cells; compress = false, append = false, ascii = false)
"><pre>vtk <span class="pl-k">=</span> <span class="pl-c1">vtk_grid</span>(<span class="pl-s"><span class="pl-pds">"</span>my_vtk_file<span class="pl-pds">"</span></span>, points, cells; compress <span class="pl-k">=</span> <span class="pl-c1">false</span>, append <span class="pl-k">=</span> <span class="pl-c1">false</span>, ascii <span class="pl-k">=</span> <span class="pl-c1">false</span>)</pre></div>
<ul>
<li>
<p>If <code>append</code> is <code>true</code> (default), data is written appended at the end of the
XML file as raw binary data.
Note that this violates the XML specification, although it is allowed by VTK.</p>
<p>Otherwise, if <code>append</code> is <code>false</code>, data is written inline. By default,
inline data is written base-64 encoded, but may also be written in ASCII
format (see below).
Writing inline data is usually slower than writing raw binary data, and also
results in larger files, but is valid according to the XML specification.</p>
</li>
<li>
<p>If <code>ascii</code> is <code>true</code>, then appended data is written in ASCII format instead
of base64-encoded. This is not the default. This option is ignored if
<code>append</code> is <code>true</code>.</p>
</li>
<li>
<p>If <code>compress</code> is <code>true</code> (default), data is first compressed using zlib.
Its value may also be a compression level between 1 (fast compression)
and 9 (best compression). This option is ignored when writing inline data in
ASCII format.</p>
</li>
</ul>
<h2><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Examples</h2>
<p>See some examples in the <code>test/</code> directory.</p>
</article></div>