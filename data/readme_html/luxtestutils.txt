<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-luxtestutilsjl" class="anchor" aria-hidden="true" href="#luxtestutilsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>LuxTestUtils.jl</h1>
<p dir="auto"><a href="https://julialang.zulipchat.com/#narrow/stream/machine-learning" rel="nofollow"><img src="https://camo.githubusercontent.com/667867fc71b8b3c9ed350ce154a04d38adca002ecfa38edf519284e0365ee553/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f6c6162656c3d5a756c6970266d6573736167653d6368617426636f6c6f723d393535386232266c6162656c436f6c6f723d333839383236" alt="Join the chat at https://julialang.zulipchat.com #machine-learning" data-canonical-src="https://img.shields.io/static/v1?label=Zulip&amp;message=chat&amp;color=9558b2&amp;labelColor=389826" style="max-width: 100%;"></a>
<a href="http://lux.csail.mit.edu/dev/" rel="nofollow"><img src="https://camo.githubusercontent.com/56f8252ba8e9d3f0b810769543f77823d2fe031ce560d4c2d69fb1fcad800383/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6c61746573742d626c75652e737667" alt="Latest Docs" data-canonical-src="https://img.shields.io/badge/docs-latest-blue.svg" style="max-width: 100%;"></a>
<a href="http://lux.csail.mit.edu/stable/" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable Docs" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a></p>
<p dir="auto"><a href="https://github.com/LuxDL/LuxTestUtils.jl/actions/workflows/CI.yml"><img src="https://github.com/LuxDL/LuxTestUtils.jl/actions/workflows/CI.yml/badge.svg" alt="CI" style="max-width: 100%;"></a></p>
<p dir="auto"><a href="https://github.com/SciML/ColPrac"><img src="https://camo.githubusercontent.com/a6c1efcb19a957860ecb25966a730260b03d6e05380d0c27992ee7f9e3b1feb3/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f436f6c507261632d436f6e7472696275746f72277325323047756964652d626c756576696f6c6574" alt="ColPrac: Contributor's Guide on Collaborative Practices for Community Packages" data-canonical-src="https://img.shields.io/badge/ColPrac-Contributor's%20Guide-blueviolet" style="max-width: 100%;"></a>
<a href="https://github.com/SciML/SciMLStyle"><img src="https://camo.githubusercontent.com/3e16f03bad047817fbc07f49307817ed7919ef79c339dc75ad4ce813012c3e0b/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f6c6162656c3d636f64652532307374796c65266d6573736167653d5363694d4c26636f6c6f723d393535386232266c6162656c436f6c6f723d333839383236" alt="SciML Code Style" data-canonical-src="https://img.shields.io/static/v1?label=code%20style&amp;message=SciML&amp;color=9558b2&amp;labelColor=389826" style="max-width: 100%;"></a></p>
<p dir="auto">Utilities for testing <a href="http://lux.csail.mit.edu/stable" rel="nofollow">Lux.jl</a>.</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="] add LuxTestUtils"><pre>] add LuxTestUtils</pre></div>
<blockquote>
<p dir="auto"><span class="color-fg-attention"><svg class="octicon octicon-alert mr-2" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="M6.457 1.047c.659-1.234 2.427-1.234 3.086 0l6.082 11.378A1.75 1.75 0 0 1 14.082 15H1.918a1.75 1.75 0 0 1-1.543-2.575Zm1.763.707a.25.25 0 0 0-.44 0L1.698 13.132a.25.25 0 0 0 .22.368h12.164a.25.25 0 0 0 .22-.368Zm.53 3.996v2.5a.75.75 0 0 1-1.5 0v-2.5a.75.75 0 0 1 1.5 0ZM9 11a1 1 0 1 1-2 0 1 1 0 0 1 2 0Z"></path></svg>Warning</span>
This is a testing package. Hence, we don't use features like weak dependencies to reduce
load times. It is recommended that you exclusively use this package for testing and not
add a dependency to it in your main package Project.toml.</p>
</blockquote>
<h2 dir="auto"><a id="user-content-exported-functions" class="anchor" aria-hidden="true" href="#exported-functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Exported Functions</h2>
<h3 dir="auto"><a id="user-content-testing-using-jetjl" class="anchor" aria-hidden="true" href="#testing-using-jetjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Testing using <a href="https://github.com/aviatesk/JET.jl">JET.jl</a></h3>
<p dir="auto">We export a simple macro <code>@jet</code> to allow testing your code using JET</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="help&gt; @jet

  @jet f(args...) call_broken=false opt_broken=false


  Run JET tests on the function `f` with the arguments `args`. If JET fails to compile or
  julia version is &lt; 1.7, then the macro will be a no-op.

  Keyword Arguments
  ===================

    •  `call_broken`: Marks the test_call as broken.

    •  `opt_broken`: Marks the test_opt as broken.

  All additional arguments will be forwarded to @JET.test_call and @JET.test_opt.

  │ Note
  │
  │  Instead of specifying target_modules with every call, you can set preferences for
  │  target_modules using Preferences.jl. For example, to set `target_modules` to
  │  (Lux, LuxLib) we can run:
  │
  │  using Preferences
  │  
  │  set_preferences!(Base.UUID(&quot;ac9de150-d08f-4546-94fb-7472b5760531&quot;),
  │                   &quot;target_modules&quot; =&gt; [&quot;Lux&quot;, &quot;LuxLib&quot;])

  Example
  =========

  @jet sum([1, 2, 3]) target_modules=(Base, Core)
  
  @jet sum(1, 1) target_modules=(Base, Core) opt_broken=true"><pre>help<span class="pl-k">&gt;</span> <span class="pl-c1">@jet</span>

  <span class="pl-c1">@jet</span> <span class="pl-c1">f</span>(args<span class="pl-k">...</span>) call_broken<span class="pl-k">=</span><span class="pl-c1">false</span> opt_broken<span class="pl-k">=</span><span class="pl-c1">false</span>


  Run JET tests on the <span class="pl-k">function</span> <span class="pl-s"><span class="pl-pds">`</span>f<span class="pl-pds">`</span></span> with the arguments <span class="pl-s"><span class="pl-pds">`</span>args<span class="pl-pds">`</span></span>. If JET fails to compile or
  julia version is <span class="pl-k">&lt;</span> <span class="pl-c1">1.7</span>, then the <span class="pl-k">macro</span> will be a no<span class="pl-k">-</span>op.

  Keyword Arguments
  <span class="pl-k">==================</span><span class="pl-k">=</span>

    •  <span class="pl-s"><span class="pl-pds">`</span>call_broken<span class="pl-pds">`</span></span>: Marks the test_call <span class="pl-k">as</span> broken.

    •  <span class="pl-s"><span class="pl-pds">`</span>opt_broken<span class="pl-pds">`</span></span>: Marks the test_opt <span class="pl-k">as</span> broken.

  All additional arguments will be forwarded to <span class="pl-c1">@JET</span><span class="pl-k">.</span>test_call and <span class="pl-c1">@JET</span><span class="pl-k">.</span>test_opt.

  │ Note
  │
  │  Instead of specifying target_modules with every call, you can set preferences <span class="pl-k">for</span>
  │  target_modules <span class="pl-k">using</span> Preferences<span class="pl-k">.</span>jl. For example, to set <span class="pl-s"><span class="pl-pds">`</span>target_modules<span class="pl-pds">`</span></span> to
  │  (Lux, LuxLib) we can run<span class="pl-k">:</span>
  │
  │  <span class="pl-k">using</span> Preferences
  │  
  │  <span class="pl-c1">set_preferences!</span>(Base<span class="pl-k">.</span><span class="pl-c1">UUID</span>(<span class="pl-s"><span class="pl-pds">"</span>ac9de150-d08f-4546-94fb-7472b5760531<span class="pl-pds">"</span></span>),
  │                   <span class="pl-s"><span class="pl-pds">"</span>target_modules<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> [<span class="pl-s"><span class="pl-pds">"</span>Lux<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>LuxLib<span class="pl-pds">"</span></span>])

  Example
  <span class="pl-k">=========</span>

  <span class="pl-c1">@jet</span> <span class="pl-c1">sum</span>([<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>]) target_modules<span class="pl-k">=</span>(Base, Core)
  
  <span class="pl-c1">@jet</span> <span class="pl-c1">sum</span>(<span class="pl-c1">1</span>, <span class="pl-c1">1</span>) target_modules<span class="pl-k">=</span>(Base, Core) opt_broken<span class="pl-k">=</span><span class="pl-c1">true</span></pre></div>
<h3 dir="auto"><a id="user-content-gradient-correctness" class="anchor" aria-hidden="true" href="#gradient-correctness"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Gradient Correctness</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="help?&gt; @test_gradients
  @test_gradients f args... [kwargs...]


  Compare the gradients computed by `Zygote.jl` (Reverse Mode AD) against:

    •  `Tracker.jl` (Reverse Mode AD)

    •  `ReverseDiff.jl` (Reverse Mode AD)

    •  `ForwardDiff.jl` (Forward Mode AD)

    •  `FiniteDifferences.jl` (Finite Differences)

  │ Tip
  │
  │  This function is completely compatible with `Test.jl`

  Arguments
  ===========

    •  `f`: The function to test.

    •  `args`...: Inputs to f wrt which the gradients are computed.

  Keyword Arguments
  ===================

    • `gpu_testing`: Disables ForwardDiff, ReverseDiff and FiniteDifferences tests.
      (Default: `false`)

    • `soft_fail`: If `true`, the test will not fail if any of the gradients are incorrect,
      instead it will show up as broken. (Default: `false`)

    • `skip_(tracker|reverse_diff|forward_diff|finite_differences)`: Skip the corresponding
      gradient computation and check. (Default: `false`)

    • `large_arrays_skip_(forward_diff|finite_differences)`: Skip the corresponding
      gradient computation and check for large arrays. (Forward Mode and Finite Differences
      are not efficient for large arrays.) (Default: `true`)

    • `large_array_length`: The length of the array above which the gradient computation is
      considered large. (Default: `25`)

    • `max_total_array_size`: Treat as large array if the total size of all arrays is
      greater than this value. (Default: `100`)

    • `(tracker|reverse_diff|forward_diff|finite_differences)_broken`: Mark the
      corresponding gradient test as broken. (Default: `false`)

  Keyword Arguments for check_approx
  ====================================

    • `atol`: Absolute tolerance for gradient comparisons. (Default: `0.0`)

    • `rtol`: Relative tolerance for gradient comparisons. (Default:
      `atol &gt; 0 ? 0.0 : √eps(typeof(atol))`)

    • `nans`: Whether or not NaNs are considered equal. (Default: `false`)

  Example
  =========

  using LuxTestUtils, Test
  
  x = randn(10)
  
  @testset &quot;Showcase Gradient Testing&quot; begin
      @test_gradients sum abs2 x
  
      @test_gradients prod x
  end"><pre>help?<span class="pl-k">&gt;</span> <span class="pl-c1">@test_gradients</span>
  <span class="pl-c1">@test_gradients</span> f args<span class="pl-k">...</span> [kwargs<span class="pl-k">...</span>]


  Compare the gradients computed by <span class="pl-s"><span class="pl-pds">`</span>Zygote.jl<span class="pl-pds">`</span></span> (Reverse Mode AD) against<span class="pl-k">:</span>

    •  <span class="pl-s"><span class="pl-pds">`</span>Tracker.jl<span class="pl-pds">`</span></span> (Reverse Mode AD)

    •  <span class="pl-s"><span class="pl-pds">`</span>ReverseDiff.jl<span class="pl-pds">`</span></span> (Reverse Mode AD)

    •  <span class="pl-s"><span class="pl-pds">`</span>ForwardDiff.jl<span class="pl-pds">`</span></span> (Forward Mode AD)

    •  <span class="pl-s"><span class="pl-pds">`</span>FiniteDifferences.jl<span class="pl-pds">`</span></span> (Finite Differences)

  │ Tip
  │
  │  This <span class="pl-k">function</span> is completely compatible with <span class="pl-s"><span class="pl-pds">`</span>Test.jl<span class="pl-pds">`</span></span>

  Arguments
  <span class="pl-k">===========</span>

    •  <span class="pl-s"><span class="pl-pds">`</span>f<span class="pl-pds">`</span></span>: The <span class="pl-k">function</span> to test.

    •  <span class="pl-s"><span class="pl-pds">`</span>args<span class="pl-pds">`</span></span><span class="pl-k">...</span>: Inputs to f wrt which the gradients are computed.

  Keyword Arguments
  <span class="pl-k">==================</span><span class="pl-k">=</span>

    • <span class="pl-s"><span class="pl-pds">`</span>gpu_testing<span class="pl-pds">`</span></span>: Disables ForwardDiff, ReverseDiff and FiniteDifferences tests.
      (Default<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">`</span>false<span class="pl-pds">`</span></span>)

    • <span class="pl-s"><span class="pl-pds">`</span>soft_fail<span class="pl-pds">`</span></span>: If <span class="pl-s"><span class="pl-pds">`</span>true<span class="pl-pds">`</span></span>, the test will not fail <span class="pl-k">if</span> any of the gradients are incorrect,
      instead it will show up <span class="pl-k">as</span> broken. (Default<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">`</span>false<span class="pl-pds">`</span></span>)

    • <span class="pl-s"><span class="pl-pds">`</span>skip_(tracker|reverse_diff|forward_diff|finite_differences)<span class="pl-pds">`</span></span>: Skip the corresponding
      gradient computation and check. (Default<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">`</span>false<span class="pl-pds">`</span></span>)

    • <span class="pl-s"><span class="pl-pds">`</span>large_arrays_skip_(forward_diff|finite_differences)<span class="pl-pds">`</span></span>: Skip the corresponding
      gradient computation and check <span class="pl-k">for</span> large arrays. (Forward Mode and Finite Differences
      are not efficient <span class="pl-k">for</span> large arrays.) (Default<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">`</span>true<span class="pl-pds">`</span></span>)

    • <span class="pl-s"><span class="pl-pds">`</span>large_array_length<span class="pl-pds">`</span></span>: The length of the array above which the gradient computation is
      considered large. (Default<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">`</span>25<span class="pl-pds">`</span></span>)

    • <span class="pl-s"><span class="pl-pds">`</span>max_total_array_size<span class="pl-pds">`</span></span>: Treat <span class="pl-k">as</span> large array <span class="pl-k">if</span> the total size of all arrays is
      greater than this value. (Default<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">`</span>100<span class="pl-pds">`</span></span>)

    • <span class="pl-s"><span class="pl-pds">`</span>(tracker|reverse_diff|forward_diff|finite_differences)_broken<span class="pl-pds">`</span></span>: Mark the
      corresponding gradient test <span class="pl-k">as</span> broken. (Default<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">`</span>false<span class="pl-pds">`</span></span>)

  Keyword Arguments <span class="pl-k">for</span> check_approx
  <span class="pl-k">====================================</span>

    • <span class="pl-s"><span class="pl-pds">`</span>atol<span class="pl-pds">`</span></span>: Absolute tolerance <span class="pl-k">for</span> gradient comparisons. (Default<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">`</span>0.0<span class="pl-pds">`</span></span>)

    • <span class="pl-s"><span class="pl-pds">`</span>rtol<span class="pl-pds">`</span></span>: Relative tolerance <span class="pl-k">for</span> gradient comparisons. (Default<span class="pl-k">:</span>
      <span class="pl-s"><span class="pl-pds">`</span>atol &gt; 0 ? 0.0 : √eps(typeof(atol))<span class="pl-pds">`</span></span>)

    • <span class="pl-s"><span class="pl-pds">`</span>nans<span class="pl-pds">`</span></span>: Whether or not NaNs are considered equal. (Default<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">`</span>false<span class="pl-pds">`</span></span>)

  Example
  <span class="pl-k">=========</span>

  <span class="pl-k">using</span> LuxTestUtils, Test
  
  x <span class="pl-k">=</span> <span class="pl-c1">randn</span>(<span class="pl-c1">10</span>)
  
  <span class="pl-c1">@testset</span> <span class="pl-s"><span class="pl-pds">"</span>Showcase Gradient Testing<span class="pl-pds">"</span></span> <span class="pl-k">begin</span>
      <span class="pl-c1">@test_gradients</span> sum abs2 x
  
      <span class="pl-c1">@test_gradients</span> prod x
  <span class="pl-k">end</span></pre></div>
<p dir="auto">Internally, it uses <code>check_approx</code> which extends <code>Base.isapprox</code> for more common cases. It
follows the exact same function call as <code>isapprox</code>.</p>
<h2 dir="auto"><a id="user-content-passing-runtime-variables-to-macro" class="anchor" aria-hidden="true" href="#passing-runtime-variables-to-macro"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Passing Runtime Variables to Macro</h2>
<p dir="auto">Macros operate on the syntax and hence can't directly take variable inputs. To get around
this (and especially because you are not using this package in your core package), we can do
the following:</p>
<p dir="auto">Say we want to mark the Float16 tests for the sum function as broken.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using LuxTestUtils

for T in (Float16, Float32, Float64)
    x = rand(T, 10, 1)
    # Use `@eval` to interpolate the runtime variable `T` into the macro call
    @eval @jet sum($x) call_broken=$(T == Float16)
end"><pre><span class="pl-k">using</span> LuxTestUtils

<span class="pl-k">for</span> T <span class="pl-k">in</span> (Float16, Float32, Float64)
    x <span class="pl-k">=</span> <span class="pl-c1">rand</span>(T, <span class="pl-c1">10</span>, <span class="pl-c1">1</span>)
    <span class="pl-c"><span class="pl-c">#</span> Use `@eval` to interpolate the runtime variable `T` into the macro call</span>
    <span class="pl-c1">@eval</span> <span class="pl-c1">@jet</span> <span class="pl-c1">sum</span>(<span class="pl-k">$</span>x) call_broken<span class="pl-k">=</span><span class="pl-k">$</span>(T <span class="pl-k">==</span> Float16)
<span class="pl-k">end</span></pre></div>
</article></div>