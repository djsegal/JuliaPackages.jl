<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-minimumvolumeellipsoidsjl" class="anchor" aria-hidden="true" href="#minimumvolumeellipsoidsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>MinimumVolumeEllipsoids.jl</h1>
<p dir="auto"><a href="https://github.com/FriesischScott/MinimumVolumeEllipsoids.jl/actions/workflows/ci.yml"><img src="https://github.com/FriesischScott/MinimumVolumeEllipsoids.jl/actions/workflows/ci.yml/badge.svg" alt="CI" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/FriesischScott/MinimumVolumeEllipsoids.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/383f50b6169f782612249c3e2948103dfc6838f45869553c11a45a074cc932d3/68747470733a2f2f636f6465636f762e696f2f67682f46726965736973636853636f74742f4d696e696d756d566f6c756d65456c6c6970736f6964732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e7376673f746f6b656e3d4838375a374433504a4d" alt="codecov" data-canonical-src="https://codecov.io/gh/FriesischScott/MinimumVolumeEllipsoids.jl/branch/master/graph/badge.svg?token=H87Z7D3PJM" style="max-width: 100%;"></a></p>
<p dir="auto">MinimumVolumeEllipsoids.jl is a Julia module which implements algorithms to compute Minimum-Volume Ellipsoids (MVE) from given data. The algorithms are implemented as defined in <em>Minimum-volume ellipsoids: Theory and algorithms</em> by Michael J. Todd. The code has been adapted from the original Matlab implementation supplied with the book. For the original code see here: <a href="http://archive.siam.org/books/mo23/" rel="nofollow">http://archive.siam.org/books/mo23/</a></p>
<p dir="auto">In addition to computing the MVE this module also includes a function to sample uniformly over the ellipsoid using an algorithm proposed by Dezert &amp; Musso.</p>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<p dir="auto">To compute the minimum-volume enclosing ellipsoid centered at the origin for a set of four points run the following code:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using MinimumVolumeEllipsoids

X = [
    -1 -1  1 2
     1 -1 -1 2
]

ϵ = minimum_volume_ellipsoid(X, centered=true)"><pre><span class="pl-k">using</span> MinimumVolumeEllipsoids

X <span class="pl-k">=</span> [
    <span class="pl-k">-</span><span class="pl-c1">1</span> <span class="pl-k">-</span><span class="pl-c1">1</span>  <span class="pl-c1">1</span> <span class="pl-c1">2</span>
     <span class="pl-c1">1</span> <span class="pl-k">-</span><span class="pl-c1">1</span> <span class="pl-k">-</span><span class="pl-c1">1</span> <span class="pl-c1">2</span>
]

ϵ <span class="pl-k">=</span> <span class="pl-c1">minimum_volume_ellipsoid</span>(X, centered<span class="pl-k">=</span><span class="pl-c1">true</span>)</pre></div>
<p dir="auto">This results in an ellipsoid with the center <code>ϵ.x</code></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="2-element Vector{Float64}:
 0.0
 0.0"><pre><span class="pl-c1">2</span><span class="pl-k">-</span>element Vector{Float64}<span class="pl-k">:</span>
 <span class="pl-c1">0.0</span>
 <span class="pl-c1">0.0</span></pre></div>
<p dir="auto">and the shape matrix <code>ϵ.H</code></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="2×2 PDMat{Float64, Matrix{Float64}}:
  0.625  -0.375
 -0.375   0.625"><pre><span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">2</span> PDMat{Float64, Matrix{Float64}}<span class="pl-k">:</span>
  <span class="pl-c1">0.625</span>  <span class="pl-k">-</span><span class="pl-c1">0.375</span>
 <span class="pl-k">-</span><span class="pl-c1">0.375</span>   <span class="pl-c1">0.625</span></pre></div>
<p dir="auto">To relax the centered condition an compute the optimal minimum-volume enclosing ellipsoid simply omit the <code>centered</code> keyword</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="ϵ = minimum_volume_ellipsoid(X)"><pre>ϵ <span class="pl-k">=</span> <span class="pl-c1">minimum_volume_ellipsoid</span>(X)</pre></div>
<p dir="auto">To create uniform random samples over either ellipsoid simply run</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="U = rand(ϵ, 1000)"><pre>U <span class="pl-k">=</span> <span class="pl-c1">rand</span>(ϵ, <span class="pl-c1">1000</span>)</pre></div>
<div dir="auto">
<a target="_blank" rel="noopener noreferrer" href="./doc/images/example-2-03.svg"><img src="./doc/images/example-2-03.svg" width="400" style="max-width: 100%;"></a>
<a target="_blank" rel="noopener noreferrer" href="./doc/images/example-2-12.svg"><img src="./doc/images/example-2-12.svg" width="400" style="max-width: 100%;"></a>
</div>
<h2 dir="auto"><a id="user-content-references" class="anchor" aria-hidden="true" href="#references"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>References</h2>
<p dir="auto">Dezert, J., &amp; Musso, C. (2001). An efficient method for generating points uniformly distributed in hyperellipsoids. In <em>Proceedings of the Workshop on Estimation, Tracking and Fusion: A Tribute to Yaakov Bar-Shalom</em>.</p>
<p dir="auto">Todd, M. J. (2016). <em>Minimum-volume ellipsoids: Theory and algorithms</em>. Society for Industrial and Applied Mathematics. <a href="https://doi.org/10.1137/1.9781611974386" rel="nofollow">https://doi.org/10.1137/1.9781611974386</a></p>
</article></div>