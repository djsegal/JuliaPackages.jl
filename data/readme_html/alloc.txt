<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-allocjl" class="anchor" aria-hidden="true" href="#allocjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Alloc.jl</h1>
<p>Alloc.jl makes Julia's memory allocator customisable. Currently it provides the ability to bump allocate everything within a block of code.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using IRTools

julia&gt; using Alloc: Buffer, run, profile

julia&gt; function f()
         x = rand(100, 100)
         y = rand(100)
         x*y
       end
f (generic function with 1 method)

julia&gt; @allocated f()
81872

julia&gt; profile(f); # Figure out how big our buffer should be
[ Info: Allocated 81600 bytes

julia&gt; const buf = Buffer(10^6);

julia&gt; @allocated run(f, buf)
1280
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> IRTools

julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Alloc<span class="pl-k">:</span> Buffer, run, profile

julia<span class="pl-k">&gt;</span> <span class="pl-k">function</span> <span class="pl-en">f</span>()
         x <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">100</span>, <span class="pl-c1">100</span>)
         y <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">100</span>)
         x<span class="pl-k">*</span>y
       <span class="pl-k">end</span>
f (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@allocated</span> <span class="pl-c1">f</span>()
<span class="pl-c1">81872</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">profile</span>(f); <span class="pl-c"><span class="pl-c">#</span> Figure out how big our buffer should be</span>
[ Info<span class="pl-k">:</span> Allocated <span class="pl-c1">81600</span> bytes

julia<span class="pl-k">&gt;</span> <span class="pl-k">const</span> buf <span class="pl-k">=</span> <span class="pl-c1">Buffer</span>(<span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">6</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@allocated</span> <span class="pl-c1">run</span>(f, buf)
<span class="pl-c1">1280</span></pre></div>
<p>The bump allocator has the downside that no memory is ever freed until <code>f</code> is finished. The advantage is that allocation is <em>really</em> fast (effectively the same as stack allocation of arrays), so if your memory usage is reasonably predictable you can just bump allocate within your main loop.</p>
</article></div>