<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-lazygridsjl" class="anchor" aria-hidden="true" href="#lazygridsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>LazyGrids.jl</h1>
<p dir="auto">A Julia package for representing multi-dimensional grids.</p>
<p dir="auto"><a href="https://github.com/JuliaArrays/LazyGrids.jl">https://github.com/JuliaArrays/LazyGrids.jl</a></p>
<p dir="auto"><a href="https://JuliaArrays.github.io/LazyGrids.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="docs-stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://JuliaArrays.github.io/LazyGrids.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="docs-dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/JuliaArrays/LazyGrids.jl/actions"><img src="https://github.com/JuliaArrays/LazyGrids.jl/workflows/CI/badge.svg" alt="action status" style="max-width: 100%;"></a>
<a href="https://juliaci.github.io/NanosoldierReports/pkgeval_badges/L/LazyGrids.html" rel="nofollow"><img src="https://camo.githubusercontent.com/351f5df9113f12252c1b152af661a058f87470028412c699b47f104f55584372/68747470733a2f2f6a756c696163692e6769746875622e696f2f4e616e6f736f6c646965725265706f7274732f706b676576616c5f6261646765732f4c2f4c617a7947726964732e737667" alt="pkgeval status" data-canonical-src="https://juliaci.github.io/NanosoldierReports/pkgeval_badges/L/LazyGrids.svg" style="max-width: 100%;"></a>
<a href="https://codecov.io/github/JuliaArrays/LazyGrids.jl?branch=main" rel="nofollow"><img src="https://camo.githubusercontent.com/f4422e5a36c672b5f589a84246c30e3e55b7abbe4e5643ca52b64106d1c29e35/68747470733a2f2f636f6465636f762e696f2f6769746875622f4a756c69614172726179732f4c617a7947726964732e6a6c2f636f7665726167652e7376673f6272616e63683d6d61696e" alt="codecov" data-canonical-src="https://codecov.io/github/JuliaArrays/LazyGrids.jl/coverage.svg?branch=main" style="max-width: 100%;"></a>
<a href="LICENSE"><img src="https://camo.githubusercontent.com/992daabc2aa4463339825f8333233ba330dd08c57068f6faf4bb598ab5a3df2e/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d627269676874677265656e2e737667" alt="license" data-canonical-src="https://img.shields.io/badge/license-MIT-brightgreen.svg" style="max-width: 100%;"></a>
<a href="https://github.com/JuliaTesting/Aqua.jl"><img src="https://camo.githubusercontent.com/e349577932398a6ba8f7510d8148fb8ad415850b7ad01697c4b57da4cd508bf3/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f417175612e6a6c2d2546302539462538432541322d617175612e737667" alt="Aqua QA" data-canonical-src="https://img.shields.io/badge/Aqua.jl-%F0%9F%8C%A2-aqua.svg" style="max-width: 100%;"></a>
<a href="https://github.com/invenia/BlueStyle"><img src="https://camo.githubusercontent.com/c18fbaa52d94d16b90b19701fc90d289b8a5bb920c74c79bab200b14e75420a4/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c75652d3434393564312e737667" alt="code-style" data-canonical-src="https://img.shields.io/badge/code%20style-blue-4495d1.svg" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-methods" class="anchor" aria-hidden="true" href="#methods"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Methods</h2>
<p dir="auto">This package exports the following methods:</p>
<ul dir="auto">
<li><code>ndgrid</code> : a "lazy" version of <code>ndgrid</code> that returns a tuple of
<a href="https://docs.julialang.org/en/v1/manual/interfaces/#man-interface-array" rel="nofollow"><code>AbstractArray</code></a>
objects essentially instantly with just a few bytes of memory allocated.</li>
<li><code>ndgrid_array</code> : return a traditional tuple of <code>Array</code> objects,
which takes much longer to create and can use a <em>lot</em> of memory.
It is not recommended, but is included for comparison purposes.</li>
</ul>
<p dir="auto">See the documentation linked in the blue badges above for examples,
and for a 1-line lazy version of <code>meshgrid</code>.</p>
<p dir="auto">As shown in the examples, the lazy version typically is as fast,
if not faster, than using conventional dense <code>Array</code> objects.</p>
<h2 dir="auto"><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using LazyGrids
(xg, yg) = ndgrid(1:2, 3:0.5:4)
([1 1 1; 2 2 2], [3.0 3.5 4.0; 3.0 3.5 4.0])

julia&gt; xg
2×3 LazyGrids.GridUR{Int64, 1, 2}:
 1  1  1
 2  2  2

julia&gt; yg
2×3 LazyGrids.GridAR{Float64, 2, 2}:
 3.0  3.5  4.0
 3.0  3.5  4.0

julia&gt; x = range(-1,1,1001)
-1.0:0.002:1.0

julia&gt; (xg, yg, zg) = ndgrid(x, x, x)
{... lots of output ...}

julia&gt; size(xg) # show array dimensions
(1001, 1001, 1001)

julia&gt; sizeof(xg) # show number of bytes used
40"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> LazyGrids
(xg, yg) <span class="pl-k">=</span> <span class="pl-c1">ndgrid</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span>, <span class="pl-c1">3</span><span class="pl-k">:</span><span class="pl-c1">0.5</span><span class="pl-k">:</span><span class="pl-c1">4</span>)
([<span class="pl-c1">1</span> <span class="pl-c1">1</span> <span class="pl-c1">1</span>; <span class="pl-c1">2</span> <span class="pl-c1">2</span> <span class="pl-c1">2</span>], [<span class="pl-c1">3.0</span> <span class="pl-c1">3.5</span> <span class="pl-c1">4.0</span>; <span class="pl-c1">3.0</span> <span class="pl-c1">3.5</span> <span class="pl-c1">4.0</span>])

julia<span class="pl-k">&gt;</span> xg
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">3</span> LazyGrids<span class="pl-k">.</span>GridUR{Int64, <span class="pl-c1">1</span>, <span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">1</span>  <span class="pl-c1">1</span>  <span class="pl-c1">1</span>
 <span class="pl-c1">2</span>  <span class="pl-c1">2</span>  <span class="pl-c1">2</span>

julia<span class="pl-k">&gt;</span> yg
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">3</span> LazyGrids<span class="pl-k">.</span>GridAR{Float64, <span class="pl-c1">2</span>, <span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">3.0</span>  <span class="pl-c1">3.5</span>  <span class="pl-c1">4.0</span>
 <span class="pl-c1">3.0</span>  <span class="pl-c1">3.5</span>  <span class="pl-c1">4.0</span>

julia<span class="pl-k">&gt;</span> x <span class="pl-k">=</span> <span class="pl-c1">range</span>(<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-c1">1001</span>)
<span class="pl-k">-</span><span class="pl-c1">1.0</span><span class="pl-k">:</span><span class="pl-c1">0.002</span><span class="pl-k">:</span><span class="pl-c1">1.0</span>

julia<span class="pl-k">&gt;</span> (xg, yg, zg) <span class="pl-k">=</span> <span class="pl-c1">ndgrid</span>(x, x, x)
{<span class="pl-k">...</span> lots of output <span class="pl-k">...</span>}

julia<span class="pl-k">&gt;</span> <span class="pl-c1">size</span>(xg) <span class="pl-c"><span class="pl-c">#</span> show array dimensions</span>
(<span class="pl-c1">1001</span>, <span class="pl-c1">1001</span>, <span class="pl-c1">1001</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">sizeof</span>(xg) <span class="pl-c"><span class="pl-c">#</span> show number of bytes used</span>
<span class="pl-c1">40</span></pre></div>
<h2 dir="auto"><a id="user-content-related-packages" class="anchor" aria-hidden="true" href="#related-packages"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Related packages</h2>
<ul dir="auto">
<li><a href="https://github.com/JuliaArrays/LazyArrays.jl">https://github.com/JuliaArrays/LazyArrays.jl</a></li>
<li><a href="https://github.com/mcabbott/LazyStack.jl">https://github.com/mcabbott/LazyStack.jl</a></li>
<li><a href="https://github.com/ChrisRackauckas/VectorizedRoutines.jl">https://github.com/ChrisRackauckas/VectorizedRoutines.jl</a></li>
<li><a href="https://github.com/JuliaArrays/RangeArrays.jl">https://github.com/JuliaArrays/RangeArrays.jl</a></li>
</ul>
<h3 dir="auto"><a id="user-content-compatibility" class="anchor" aria-hidden="true" href="#compatibility"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Compatibility</h3>
<p dir="auto">Tested with Julia ≥ 1.7.</p>

</article></div>