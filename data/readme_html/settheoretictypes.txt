<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-set-theoretic-types" class="anchor" aria-hidden="true" href="#set-theoretic-types"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Set-theoretic types</h1>
<p dir="auto"><em>A toy type system with intersections and complements in Julia</em></p>
<p dir="auto"><a href="https://www.repostatus.org/#concept" rel="nofollow"><img src="https://camo.githubusercontent.com/e12444e2cdec462a06c3006ae5b793f513b59c4072e7106b8ce3d3dcc4345d6f/68747470733a2f2f7777772e7265706f7374617475732e6f72672f6261646765732f6c61746573742f636f6e636570742e737667" alt="Project Status: Concept – Minimal or no implementation has been done yet, or the repository is only intended to be a limited example, demo, or proof-of-concept." data-canonical-src="https://www.repostatus.org/badges/latest/concept.svg" style="max-width: 100%;"></a></p>
<p dir="auto">Inspired by <a href="https://discourse.julialang.org/t/rfc-language-support-for-traits-yay-or-nay/93914/26" rel="nofollow">this Discourse discussion</a> and <a href="https://youtu.be/Z2LtJUe1q8c?t=1772" rel="nofollow">this speculative excerpt</a> of Jeff Bezanson’s 2017 JuliaCon talk, this module implements a few bits of a “set-theoretic type system”. <strong>It does not extend Julia’s type system</strong> but is separate from it, serving as a proof of concept for intersection and complement types.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@stt begin
	abstract type Smart end
	abstract type Organic end

	struct Computer ⊆ Smart end
	struct Fruit ⊆ Organic end
	struct Brain ⊆ Smart ∩ Organic end # intersection type

	think(x ∈ Smart) = &quot;$(x.value) is thinking...&quot;
	think(x ∈ !Smart) = &quot;$(x.value) cannot think!&quot; # complement type
end"><pre><span class="pl-c1">@stt</span> <span class="pl-k">begin</span>
	<span class="pl-k">abstract type</span> Smart <span class="pl-k">end</span>
	<span class="pl-k">abstract type</span> Organic <span class="pl-k">end</span>

	<span class="pl-k">struct</span> Computer <span class="pl-k">⊆</span> Smart <span class="pl-k">end</span>
	<span class="pl-k">struct</span> Fruit <span class="pl-k">⊆</span> Organic <span class="pl-k">end</span>
	<span class="pl-k">struct</span> Brain <span class="pl-k">⊆</span> Smart <span class="pl-k">∩</span> Organic <span class="pl-k">end</span> <span class="pl-c"><span class="pl-c">#</span> intersection type</span>

	<span class="pl-en">think</span>(x <span class="pl-k">∈</span> Smart) <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span><span class="pl-v">$(x<span class="pl-k">.</span>value)</span> is thinking...<span class="pl-pds">"</span></span>
	<span class="pl-en">think</span>(x <span class="pl-k">∈</span> <span class="pl-k">!</span>Smart) <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span><span class="pl-v">$(x<span class="pl-k">.</span>value)</span> cannot think!<span class="pl-pds">"</span></span> <span class="pl-c"><span class="pl-c">#</span> complement type</span>
<span class="pl-k">end</span></pre></div>
<p dir="auto">Notably, <em>any</em> non-concrete type may be subtyped, including intersections.</p>
<p dir="auto">These set-theoretic types can have “instances”:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; think(Computer(&quot;Deepthought&quot;))
&quot;Deepthought is thinking...&quot;

julia&gt; think(Fruit(:Quince))
&quot;Quince cannot think!&quot;"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">think</span>(<span class="pl-c1">Computer</span>(<span class="pl-s"><span class="pl-pds">"</span>Deepthought<span class="pl-pds">"</span></span>))
<span class="pl-s"><span class="pl-pds">"</span>Deepthought is thinking...<span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">think</span>(<span class="pl-c1">Fruit</span>(<span class="pl-c1">:Quince</span>))
<span class="pl-s"><span class="pl-pds">"</span>Quince cannot think!<span class="pl-pds">"</span></span></pre></div>
<p dir="auto">However, the actual data type of an “instance” has no relationship to the set-theoretic type, which is merely a wrapper.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; Fruit(r&quot;(pine)?apple&quot;i).value |&gt; typeof
Regex"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">Fruit</span>(<span class="pl-sr"><span class="pl-pds">r"</span>(pine)?apple<span class="pl-pds">"</span><span class="pl-k">i</span></span>)<span class="pl-k">.</span>value <span class="pl-k">|&gt;</span> typeof
Regex</pre></div>
<h2 dir="auto"><a id="user-content-theory" class="anchor" aria-hidden="true" href="#theory"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Theory</h2>
<p dir="auto">There is no formal type theory — this is a “figure it out as you go” kind of project! In particular, I don’t know if it is consistent.</p>
<p dir="auto">Set-theoretic types may be thought of as sets of runtime values. In this picture, both concrete and abstract types are sets which may be combined with boolean operations such as <code>∪</code>, <code>∩</code> and <code>!</code>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@stt abstract type A end
@stt abstract type B end
@stt abstract type C ⊆ A end
@stt abstract type D ⊆ A ∩ !B end
@assert A ∪ C === A
@assert A ∩ C === C
@assert D ⊆ A
@assert C ∪ D ⊆ A"><pre><span class="pl-c1">@stt</span> <span class="pl-k">abstract type</span> A <span class="pl-k">end</span>
<span class="pl-c1">@stt</span> <span class="pl-k">abstract type</span> B <span class="pl-k">end</span>
<span class="pl-c1">@stt</span> <span class="pl-k">abstract type</span> C <span class="pl-k">⊆</span> A <span class="pl-k">end</span>
<span class="pl-c1">@stt</span> <span class="pl-k">abstract type</span> D <span class="pl-k">⊆</span> A <span class="pl-k">∩</span> <span class="pl-k">!</span>B <span class="pl-k">end</span>
<span class="pl-c1">@assert</span> A <span class="pl-k">∪</span> C <span class="pl-k">===</span> A
<span class="pl-c1">@assert</span> A <span class="pl-k">∩</span> C <span class="pl-k">===</span> C
<span class="pl-c1">@assert</span> D <span class="pl-k">⊆</span> A
<span class="pl-c1">@assert</span> C <span class="pl-k">∪</span> D <span class="pl-k">⊆</span> A</pre></div>
<p dir="auto">However, there is a little more structure to it: every value belongs to exactly one concrete type.
These concrete types <em>partition</em> the set of all values, <code>Top</code>, and we don’t care about sets which don’t respect this partition.
(E.g., there is no “type” containing some, but not all, <code>Int8</code> values.)
In particular, this means concrete types cannot have subtypes other than themselves and the empty set <code>!Top</code>, and that the intersection of distinct concrete types is always <code>!Top</code>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@stt struct Alpha ⊆ A end
@stt struct Beta ⊆ B end
@assert Alpha ∩ Beta === !Top"><pre><span class="pl-c1">@stt</span> <span class="pl-k">struct</span> Alpha <span class="pl-k">⊆</span> A <span class="pl-k">end</span>
<span class="pl-c1">@stt</span> <span class="pl-k">struct</span> Beta <span class="pl-k">⊆</span> B <span class="pl-k">end</span>
<span class="pl-c1">@assert</span> Alpha <span class="pl-k">∩</span> Beta <span class="pl-k">===</span> <span class="pl-k">!</span>Top</pre></div>
<p dir="auto">Thus, intersection types are only interesting for abstract types.</p>
<p dir="auto">I find it helpful to picture set-theoretic types as sets of equivalence classes, where values of the same concrete type are equivalent.
In this picture, concrete types are point-like singleton sets, while abstract types are sets of arbitrary extent.</p>
<p dir="auto">As with Core Julia, parametric types are like indexed sets of types. Type parameters are invariant; they are merely part of the type’s name.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@stt struct Box[T ⊆ A] end 
@assert Box[Alpha] ⊆ Box
@assert Box[Alpha] ⊆ @stt Box[T] where T ⊆ A
@assert Box[Alpha] ⊈ Box[A]"><pre><span class="pl-c1">@stt</span> <span class="pl-k">struct</span> Box[T <span class="pl-k">⊆</span> A] <span class="pl-k">end</span> 
<span class="pl-c1">@assert</span> Box[Alpha] <span class="pl-k">⊆</span> Box
<span class="pl-c1">@assert</span> Box[Alpha] <span class="pl-k">⊆</span> <span class="pl-c1">@stt</span> Box[T] <span class="pl-k">where</span> T <span class="pl-k">⊆</span> A
<span class="pl-c1">@assert</span> Box[Alpha] <span class="pl-k">⊈</span> Box[A]</pre></div>
<p dir="auto">The <code>where</code>-notation  <code>A[T] where L ⊆ T ⊆ U = A[T₁] ∪ A[T₂] ∪ ...</code> represents a union over all parameter values <code>T</code> for which <code>L ⊆ T ⊆ U</code>.</p>
<p dir="auto">Note that tuples are not types with invariant parameters — they are a product type. In the set-theoretic picture, <code>TupleKind(A,B)</code> is a Cartesian product and is a supertype of <code>TupleKind(Alpha,Beta)</code> because <code>Alpha ⊆ A</code> and <code>Beta ⊆ B</code>.</p>
<h2 dir="auto"><a id="user-content-syntax-and-convenience-macros" class="anchor" aria-hidden="true" href="#syntax-and-convenience-macros"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Syntax and convenience macros</h2>
<p dir="auto">Because I’m not clever enough to overload Julia’s actual type system, set-theoretic versions of Core Julia’s type mechanisms must be given their own names and syntax.
Such a clean separation probably makes things clearer, though it means duplication of syntax, which I have chosen largely arbitrarily:</p>
<table>
<thead>
<tr>
<th align="right">Julia types</th>
<th align="left">Set-theoretic “kind” types</th>
</tr>
</thead>
<tbody>
<tr>
<td align="right"><code>T&lt;:S</code></td>
<td align="left"><code>T ⊆ S</code></td>
</tr>
<tr>
<td align="right"><code>abstract type T &lt;: S end</code></td>
<td align="left"><code>@stt abstract type T ⊆ S end</code></td>
</tr>
<tr>
<td align="right"><code>struct T &lt;: S end</code></td>
<td align="left"><code>@stt struct T ⊆ S end</code></td>
</tr>
<tr>
<td align="right"><code>x isa T</code></td>
<td align="left"><code>x ∈ T</code></td>
</tr>
<tr>
<td align="right"><code>f(x::T) = x</code></td>
<td align="left"><code>@stt f(x ∈ T) = x</code></td>
</tr>
<tr>
<td align="right"><code>Any</code></td>
<td align="left"><code>Top</code></td>
</tr>
<tr>
<td align="right"><code>A{B}</code></td>
<td align="left"><code>A[B]</code></td>
</tr>
<tr>
<td align="right"><code>A{T} where T</code></td>
<td align="left"><code>@stt A[B] where B</code></td>
</tr>
<tr>
<td align="right"><code>Tuple{A,B}</code></td>
<td align="left"><code>TupleKind(A,B)</code></td>
</tr>
<tr>
<td align="right"><code>Union{A,B}</code></td>
<td align="left"><code>A ∪ B</code></td>
</tr>
<tr>
<td align="right">–</td>
<td align="left"><code>A ∩ B</code></td>
</tr>
<tr>
<td align="right">–</td>
<td align="left"><code>!A</code></td>
</tr>
<tr>
<td align="right"><code>Union{}</code></td>
<td align="left"><code>!Top</code></td>
</tr>
</tbody>
</table>
<p dir="auto">The macro <code>@stt</code> (<strong>s</strong>et-<strong>t</strong>heoretic <strong>t</strong>ypes) allows one to declare “types” and “methods” using familiar, declarative syntax.
For example, the block</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@stt begin
	abstract type Animal end
	struct Cat ⊆ Animal end
	struct Box[T] end

	Box[Cat] ⊆ Box[T] where T ⊆ Animal

	pack(x ∈ T) where T = Box[T](x)
	unpack(x ∈ Box) = x.value
end"><pre><span class="pl-c1">@stt</span> <span class="pl-k">begin</span>
	<span class="pl-k">abstract type</span> Animal <span class="pl-k">end</span>
	<span class="pl-k">struct</span> Cat <span class="pl-k">⊆</span> Animal <span class="pl-k">end</span>
	<span class="pl-k">struct</span> Box[T] <span class="pl-k">end</span>

	Box[Cat] <span class="pl-k">⊆</span> Box[T] <span class="pl-k">where</span> T <span class="pl-k">⊆</span> Animal

	<span class="pl-en">pack</span>(x <span class="pl-k">∈</span> T) <span class="pl-k">where</span> T <span class="pl-k">=</span> Box[T](x)
	<span class="pl-en">unpack</span>(x <span class="pl-k">∈</span> Box) <span class="pl-k">=</span> x<span class="pl-k">.</span>value
<span class="pl-k">end</span></pre></div>
<p dir="auto">is equivalent to the following code which directly constructs “kinds” and “kind functions”:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="quote
    Animal = Kind(:Animal, Top, [], false) # an abstract kind
    Cat = Kind(:Cat, Animal, [], true) # a concrete kind
    Box = let T = KindVar(:T) # from `… where T`
    	UnionAllKind(T, Kind(:Box, Top, [T], true))
    end

    Box[Cat] ⊆ let T = KindVar(:T, !Top, Animal)
        UnionAllKind(T, Box[T])
    end

    pack = KindFunction(:pack, [
        KindMethod(let T = KindVar(:T); UnionAllKind(T, TupleKind(T)) end) do x, T
            Box[T](x)
        end
    ])

    unpack = KindFunction(:unpack, [
        KindMethod(TupleKind(Box)) do x
            x.value
        end
    ])
end"><pre><span class="pl-k">quote</span>
    Animal <span class="pl-k">=</span> <span class="pl-c1">Kind</span>(<span class="pl-c1">:Animal</span>, Top, [], <span class="pl-c1">false</span>) <span class="pl-c"><span class="pl-c">#</span> an abstract kind</span>
    Cat <span class="pl-k">=</span> <span class="pl-c1">Kind</span>(<span class="pl-c1">:Cat</span>, Animal, [], <span class="pl-c1">true</span>) <span class="pl-c"><span class="pl-c">#</span> a concrete kind</span>
    Box <span class="pl-k">=</span> <span class="pl-k">let</span> T <span class="pl-k">=</span> <span class="pl-c1">KindVar</span>(<span class="pl-c1">:T</span>) <span class="pl-c"><span class="pl-c">#</span> from `… where T`</span>
    	<span class="pl-c1">UnionAllKind</span>(T, <span class="pl-c1">Kind</span>(<span class="pl-c1">:Box</span>, Top, [T], <span class="pl-c1">true</span>))
    <span class="pl-k">end</span>

    Box[Cat] <span class="pl-k">⊆</span> <span class="pl-k">let</span> T <span class="pl-k">=</span> <span class="pl-c1">KindVar</span>(<span class="pl-c1">:T</span>, <span class="pl-k">!</span>Top, Animal)
        <span class="pl-c1">UnionAllKind</span>(T, Box[T])
    <span class="pl-k">end</span>

    pack <span class="pl-k">=</span> <span class="pl-c1">KindFunction</span>(<span class="pl-c1">:pack</span>, [
        <span class="pl-c1">KindMethod</span>(<span class="pl-k">let</span> T <span class="pl-k">=</span> <span class="pl-c1">KindVar</span>(<span class="pl-c1">:T</span>); <span class="pl-c1">UnionAllKind</span>(T, <span class="pl-c1">TupleKind</span>(T)) <span class="pl-k">end</span>) <span class="pl-k">do</span> x, T
            Box[T](x)
        <span class="pl-c1">end</span>
    ])

    unpack <span class="pl-k">=</span> <span class="pl-c1">KindFunction</span>(<span class="pl-c1">:unpack</span>, [
        <span class="pl-c1">KindMethod</span>(<span class="pl-c1">TupleKind</span>(Box)) <span class="pl-k">do</span> x
            x<span class="pl-k">.</span>value
        <span class="pl-c1">end</span>
    ])
<span class="pl-k">end</span></pre></div>
<p dir="auto">You may notice that the gizmos of Core Julia’s type system</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Type, TypeVar, UnionAll, Union, Tuple, typeof, supertype"><pre>Type, TypeVar, UnionAll, Union, Tuple, typeof, supertype</pre></div>
<p dir="auto">have analogous “kind” versions</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Kind, KindVar, UnionAllKind, UnionKind, TupleKind, kindof, superkind"><pre>Kind, KindVar, UnionAllKind, UnionKind, TupleKind, kindof, superkind</pre></div>
<p dir="auto">alongside the additional <code>IntersectionKind</code> and <code>ComplementKind</code>.</p>
<h2 dir="auto"><a id="user-content-traits" class="anchor" aria-hidden="true" href="#traits"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Traits</h2>
<p dir="auto">Traits? Kind-of...</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@stt begin
	abstract type HasDuckBill end
	abstract type LaysEggs end
	
	abstract type Mammal end
	abstract type Bird end

	struct Platypus ⊆ HasDuckBill ∩ LaysEggs ∩ Mammal end
	struct CanadianGoose ⊆ HasDuckBill ∩ LaysEggs ∩ Bird end

	foo(x ∈ HasDuckBill ∩ LaysEggs) = &quot;Platypus or Goose&quot;
end"><pre><span class="pl-c1">@stt</span> <span class="pl-k">begin</span>
	<span class="pl-k">abstract type</span> HasDuckBill <span class="pl-k">end</span>
	<span class="pl-k">abstract type</span> LaysEggs <span class="pl-k">end</span>
	
	<span class="pl-k">abstract type</span> Mammal <span class="pl-k">end</span>
	<span class="pl-k">abstract type</span> Bird <span class="pl-k">end</span>

	<span class="pl-k">struct</span> Platypus <span class="pl-k">⊆</span> HasDuckBill <span class="pl-k">∩</span> LaysEggs <span class="pl-k">∩</span> Mammal <span class="pl-k">end</span>
	<span class="pl-k">struct</span> CanadianGoose <span class="pl-k">⊆</span> HasDuckBill <span class="pl-k">∩</span> LaysEggs <span class="pl-k">∩</span> Bird <span class="pl-k">end</span>

	<span class="pl-en">foo</span>(x <span class="pl-k">∈</span> HasDuckBill <span class="pl-k">∩</span> LaysEggs) <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>Platypus or Goose<span class="pl-pds">"</span></span>
<span class="pl-k">end</span></pre></div>
<p dir="auto">The disadvantage is that if you introduce a new trait later on,</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@stt abstract type IsAlive end"><pre><span class="pl-c1">@stt</span> <span class="pl-k">abstract type</span> IsAlive <span class="pl-k">end</span></pre></div>
<p dir="auto">then you can’t really give this to existing types you don’t own.</p>
<p dir="auto">Or can you?</p>
<p dir="auto">Say we wanted to make <code>Mammal ∪ Bird ⊆ IsAlive</code> without changing the definitions of these animal types. That is set-theoretically equivalent to <code>!IsAlive ⊆ !(Mammal ∪ Bird)</code>, and we can indeed declare such a supertype (or at least I haven’t seen reason to disallow it):</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@stt abstract type IsDead ⊆ !(Mammal ∪ Bird) end
IsAlive = !IsDead"><pre><span class="pl-c1">@stt</span> <span class="pl-k">abstract type</span> IsDead <span class="pl-k">⊆</span> <span class="pl-k">!</span>(Mammal <span class="pl-k">∪</span> Bird) <span class="pl-k">end</span>
IsAlive <span class="pl-k">=</span> <span class="pl-k">!</span>IsDead</pre></div>
<p dir="auto">We have, miraculously,</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; Platypus ⊆ IsAlive
true"><pre>julia<span class="pl-k">&gt;</span> Platypus <span class="pl-k">⊆</span> IsAlive
<span class="pl-c1">true</span></pre></div>
<p dir="auto">Perhaps this “trick” can be made ergonomic by allowing a syntax like</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@stt abstract type IsAlive ⊇ Mammal ∪ Bird end"><pre><span class="pl-c1">@stt</span> <span class="pl-k">abstract type</span> IsAlive <span class="pl-k">⊇</span> Mammal <span class="pl-k">∪</span> Bird <span class="pl-k">end</span></pre></div>
<p dir="auto">to mean the same thing.</p>
<p dir="auto">The type system <em>appears</em> to allow after-the-fact declaration of supertypes. Cool huh?</p>
</article></div>