<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-quantumcliffordjl" class="anchor" aria-hidden="true" href="#quantumcliffordjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>QuantumClifford.jl</h1>
<p><a href="https://krastanov.github.io/QuantumClifford.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Documentation of latest stable version" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://krastanov.github.io/QuantumClifford.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Documentation of dev version" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a>
<a href="https://github.com/Krastanov/QuantumClifford.jl/actions?query=workflow%3ACI+branch%3Amaster"><img src="https://camo.githubusercontent.com/02f8caf2a9898b89ff40975f727d7820a8a9a62485510f2dad31f93f94ca95e9/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f776f726b666c6f772f7374617475732f4b72617374616e6f762f5175616e74756d436c6966666f72642e6a6c2f4349" alt="GitHub Workflow Status" data-canonical-src="https://img.shields.io/github/workflow/status/Krastanov/QuantumClifford.jl/CI" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/Krastanov/QuantumClifford.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/2878ad60cee2e02e2400b2882f8004a10ea910b68ad7c8804fabf29ab41952c5/68747470733a2f2f696d672e736869656c64732e696f2f636f6465636f762f632f67682f4b72617374616e6f762f5175616e74756d436c6966666f72642e6a6c3f6c6162656c3d636f6465636f76" alt="Test coverage from codecov" data-canonical-src="https://img.shields.io/codecov/c/gh/Krastanov/QuantumClifford.jl?label=codecov" style="max-width:100%;"></a></p>


<p>A Julia package for working with quantum stabilizer states and Clifford circuits
that act on them. The package is already very fast for the majority of common operations, but there are still many low-hanging fruits performance-wise. See the detailed <a href="https://krastanov.github.io/QuantumClifford.jl/dev/references/#Suggested-reading" rel="nofollow">suggested readings &amp; references page</a> for background on the various algorithms.</p>
<p>To install it use:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="] add QuantumClifford
"><pre>] add QuantumClifford</pre></div>
<p>Works efficiently with
<a href="https://krastanov.github.io/QuantumClifford/dev/manual/#Stabilizers-1" rel="nofollow">pure</a> and
<a href="https://krastanov.github.io/QuantumClifford/dev/mixed/#Mixed-Stabilizer-States-1" rel="nofollow">mixed stabilizer</a>
states of thousands of qubits
as well as
<a href="https://krastanov.github.io/QuantumClifford/dev/manual/#Clifford-Operators-1" rel="nofollow">sparse or dense Clifford operations</a>
acting upon them.</p>
<p>Provides
<a href="https://krastanov.github.io/QuantumClifford/dev/manual/#Canonicalization-of-Stabilizers-1" rel="nofollow">canonicalization</a>,
<a href="https://krastanov.github.io/QuantumClifford/dev/manual/#Projective-Measurements-1" rel="nofollow">projection</a>, and
<a href="https://krastanov.github.io/QuantumClifford/dev/manual/#Generating-a-Pauli-Operator-with-Stabilizer-Generators-1" rel="nofollow">generation</a> operations,
as well as
<a href="https://krastanov.github.io/QuantumClifford/dev/manual/#Partial-Traces-1" rel="nofollow">partial traces</a>.</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt; P&quot;X&quot; * P&quot;Z&quot;
-iY

julia&gt; P&quot;X&quot; ⊗ P&quot;Z&quot;
+ XZ

julia&gt; S&quot;-XX
         +ZZ&quot;
- XX
+ ZZ

julia&gt; CNOT * S&quot;-XX
                +ZZ&quot;
- X_
+ _Z
"><pre lang="jldoctest"><code>julia&gt; P"X" * P"Z"
-iY

julia&gt; P"X" ⊗ P"Z"
+ XZ

julia&gt; S"-XX
         +ZZ"
- XX
+ ZZ

julia&gt; CNOT * S"-XX
                +ZZ"
- X_
+ _Z
</code></pre></div>
<h2><a id="user-content-quick-benchmarks" class="anchor" aria-hidden="true" href="#quick-benchmarks"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Quick Benchmarks</h2>
<p>Fast, in-place, (mostly) allocation free implementations. Operations on states are very efficient. Operations modifying the Clifford operators themselves are not yet as efficient.</p>
<h4><a id="user-content-canonicalization-of-a-random-100-qubit-stabilizer" class="anchor" aria-hidden="true" href="#canonicalization-of-a-random-100-qubit-stabilizer"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Canonicalization of a random 100-qubit stabilizer</h4>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt; @benchmark canonicalize!(s) setup=(s=random_stabilizer(100))
BenchmarkTools.Trial:
  memory estimate:  0 bytes
  allocs estimate:  0
  --------------
  minimum time:     139.927 μs (0.00% GC)
  median time:      161.090 μs (0.00% GC)
  mean time:        165.824 μs (0.00% GC)
  maximum time:     278.056 μs (0.00% GC)
  --------------
  samples:          376
  evals/sample:     1
"><pre lang="jldoctest"><code>julia&gt; @benchmark canonicalize!(s) setup=(s=random_stabilizer(100))
BenchmarkTools.Trial:
  memory estimate:  0 bytes
  allocs estimate:  0
  --------------
  minimum time:     139.927 μs (0.00% GC)
  median time:      161.090 μs (0.00% GC)
  mean time:        165.824 μs (0.00% GC)
  maximum time:     278.056 μs (0.00% GC)
  --------------
  samples:          376
  evals/sample:     1
</code></pre></div>
<h4><a id="user-content-gate-application-50-cnot-gates-on-100-qubits" class="anchor" aria-hidden="true" href="#gate-application-50-cnot-gates-on-100-qubits"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Gate application (50 CNOT gates on 100 qubits)</h4>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt; @benchmark apply!(s, gate) setup=(s=random_stabilizer(100); gate=tensor_pow(CNOT,50))
BenchmarkTools.Trial: 
  memory estimate:  752 bytes
  allocs estimate:  11
  --------------
  minimum time:     248.900 μs (0.00% GC)
  median time:      277.454 μs (0.00% GC)
  mean time:        277.948 μs (0.00% GC)
  maximum time:     338.304 μs (0.00% GC)
  --------------
  samples:          236
  evals/sample:     1
"><pre lang="jldoctest"><code>julia&gt; @benchmark apply!(s, gate) setup=(s=random_stabilizer(100); gate=tensor_pow(CNOT,50))
BenchmarkTools.Trial: 
  memory estimate:  752 bytes
  allocs estimate:  11
  --------------
  minimum time:     248.900 μs (0.00% GC)
  median time:      277.454 μs (0.00% GC)
  mean time:        277.948 μs (0.00% GC)
  maximum time:     338.304 μs (0.00% GC)
  --------------
  samples:          236
  evals/sample:     1
</code></pre></div>
<h4><a id="user-content-sparse-gate-application-to-only-specified-qubits" class="anchor" aria-hidden="true" href="#sparse-gate-application-to-only-specified-qubits"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Sparse gate application to only specified qubits</h4>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt; @benchmark apply!(s, CNOT, [32,54]) setup=(s=random_stabilizer(100))
BenchmarkTools.Trial: 
  memory estimate:  832 bytes
  allocs estimate:  12
  --------------
  minimum time:     6.480 μs (0.00% GC)
  median time:      7.350 μs (0.00% GC)
  mean time:        7.435 μs (0.00% GC)
  maximum time:     15.171 μs (0.00% GC)
  --------------
  samples:          490
  evals/sample:     6
"><pre lang="jldoctest"><code>julia&gt; @benchmark apply!(s, CNOT, [32,54]) setup=(s=random_stabilizer(100))
BenchmarkTools.Trial: 
  memory estimate:  832 bytes
  allocs estimate:  12
  --------------
  minimum time:     6.480 μs (0.00% GC)
  median time:      7.350 μs (0.00% GC)
  mean time:        7.435 μs (0.00% GC)
  maximum time:     15.171 μs (0.00% GC)
  --------------
  samples:          490
  evals/sample:     6
</code></pre></div>
</article></div>