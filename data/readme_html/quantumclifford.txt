<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-quantumcliffordjl" class="anchor" aria-hidden="true" href="#quantumcliffordjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>QuantumClifford.jl</h1>
<p><a href="https://krastanov.github.io/QuantumClifford.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/f7b92a177c912c1cc007fc9b40f17ff3ee3bb414/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Documentation of latest stable version" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://krastanov.github.io/QuantumClifford.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/3e353c26ddfe819150acbc732248f4f2a37f5175/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Documentation of dev version" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a>
<a href="https://travis-ci.com/Krastanov/QuantumClifford.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/bd243ac27c82050f67bd56dbe4f25fcd96f4929c/68747470733a2f2f6170692e7472617669732d63692e636f6d2f4b72617374616e6f762f5175616e74756d436c6966666f72642e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build status" data-canonical-src="https://api.travis-ci.com/Krastanov/QuantumClifford.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/Krastanov/QuantumClifford.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/d0c556ab8cf8334f4a7ae2c59c7b01c31f43f4a1/68747470733a2f2f696d672e736869656c64732e696f2f636f6465636f762f632f67682f4b72617374616e6f762f5175616e74756d436c6966666f72642e6a6c3f6c6162656c3d636f6465636f76" alt="Test coverage from codecov" data-canonical-src="https://img.shields.io/codecov/c/gh/Krastanov/QuantumClifford.jl?label=codecov" style="max-width:100%;"></a>
<a href="https://coveralls.io/r/Krastanov/QuantumClifford.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/9f665961ed3eb35bb0c071ac22893ecb2dfaf859/68747470733a2f2f696d672e736869656c64732e696f2f636f766572616c6c732f6769746875622f4b72617374616e6f762f5175616e74756d436c6966666f72642e6a6c3f6c6162656c3d636f766572616c6c73" alt="Test coverage from coveralls" data-canonical-src="https://img.shields.io/coveralls/github/Krastanov/QuantumClifford.jl?label=coveralls" style="max-width:100%;"></a></p>
<p>A Julia package for working with quantum stabilizer states and Clifford circuits
that act on them.</p>
<p>The package is still in an alpha state. It is already very fast for the majority of common operations, but there are still many low-hanging fruits performance-wise.</p>
<p>To install it use:</p>
<div class="highlight highlight-source-julia"><pre>] add QuantumClifford</pre></div>
<p>Works efficiently with
<a href="https://krastanov.github.io/QuantumClifford/dev/manual/#Stabilizers-1" rel="nofollow">pure</a> and
<a href="https://krastanov.github.io/QuantumClifford/dev/mixed/#Mixed-Stabilizer-States-1" rel="nofollow">mixed stabilizer</a>
states of thousands of qubits
as well as
<a href="https://krastanov.github.io/QuantumClifford/dev/manual/#Clifford-Operators-1" rel="nofollow">sparse or dense Clifford operations</a>
acting upon them.</p>
<p>Provides
<a href="https://krastanov.github.io/QuantumClifford/dev/manual/#Canonicalization-of-Stabilizers-1" rel="nofollow">canonicalization</a>,
<a href="https://krastanov.github.io/QuantumClifford/dev/manual/#Projective-Measurements-1" rel="nofollow">projection</a>, and
<a href="https://krastanov.github.io/QuantumClifford/dev/manual/#Generating-a-Pauli-Operator-with-Stabilizer-Generators-1" rel="nofollow">generation</a> operations,
as well as
<a href="https://krastanov.github.io/QuantumClifford/dev/manual/#Partial-Traces-1" rel="nofollow">partial traces</a>.</p>
<pre lang="jldoctest"><code>julia&gt; P"X" * P"Z"
-iY

julia&gt; P"X" ⊗ P"Z"
+ XZ

julia&gt; S"-XX
         +ZZ"
- XX
+ ZZ

julia&gt; CNOT * S"-XX
                +ZZ"
- X_
+ _Z
</code></pre>
<h2><a id="user-content-quick-benchmarks" class="anchor" aria-hidden="true" href="#quick-benchmarks"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Quick Benchmarks</h2>
<p>Fast, in-place, (mostly) allocation free implementations.</p>
<h4><a id="user-content-canonicalization-of-a-random-100-qubit-stabilizer" class="anchor" aria-hidden="true" href="#canonicalization-of-a-random-100-qubit-stabilizer"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Canonicalization of a random 100-qubit stabilizer</h4>
<pre lang="jldoctest"><code>julia&gt; @benchmark canonicalize!(s) setup=(s=random_stabilizer(100))
BenchmarkTools.Trial:
  memory estimate:  0 bytes
  allocs estimate:  0
  --------------
  minimum time:     139.927 μs (0.00% GC)
  median time:      161.090 μs (0.00% GC)
  mean time:        165.824 μs (0.00% GC)
  maximum time:     278.056 μs (0.00% GC)
  --------------
  samples:          376
  evals/sample:     1
</code></pre>
<h4><a id="user-content-gate-application-50-cnot-gates-on-100-qubits" class="anchor" aria-hidden="true" href="#gate-application-50-cnot-gates-on-100-qubits"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Gate application (50 CNOT gates on 100 qubits)</h4>
<pre lang="jldoctest"><code>julia&gt; @benchmark apply!(s, gate) setup=(s=random_stabilizer(100); gate=tensor_pow(CNOT,50))
BenchmarkTools.Trial:
  memory estimate:  95.09 KiB
  allocs estimate:  6045
  --------------
  minimum time:     416.188 μs (0.00% GC)
  median time:      482.586 μs (0.00% GC)
  mean time:        492.410 μs (0.00% GC)
  maximum time:     687.202 μs (0.00% GC)
  --------------
  samples:          101
  evals/sample:     1
</code></pre>
<h4><a id="user-content-sparse-gate-application-to-only-specified-qubits" class="anchor" aria-hidden="true" href="#sparse-gate-application-to-only-specified-qubits"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Sparse gate application to only specified qubits</h4>
<pre lang="jldoctest"><code>julia&gt; @benchmark apply!(s, CNOT, [32,54]) setup=(s=random_stabilizer(100))
BenchmarkTools.Trial:
  memory estimate:  2.67 KiB
  allocs estimate:  126
  --------------
  minimum time:     12.425 μs (0.00% GC)
  median time:      15.268 μs (0.00% GC)
  mean time:        15.713 μs (0.00% GC)
  maximum time:     32.185 μs (0.00% GC)
  --------------
  samples:          407
  evals/sample:     1
</code></pre>
</article></div>