<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-panelshiftjl" class="anchor" aria-hidden="true" href="#panelshiftjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>PanelShift.jl</h1>
<p dir="auto"><a href="https://github.com/fuzhiyu/PanelShift.jl/actions/workflows/CI.yml?query=branch%3Amaster"><img src="https://github.com/fuzhiyu/PanelShift.jl/actions/workflows/CI.yml/badge.svg?branch=master" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/fuzhiyu/PanelShift.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/d7acc2530a7abdb206fd1a07598cc6085d8f05fed68195fe5de10f71ae12ee00/68747470733a2f2f636f6465636f762e696f2f67682f66757a686979752f50616e656c53686966742e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/fuzhiyu/PanelShift.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">This package provides convenient functions to lead&amp;lag vectors with respect to a time vector. The time vector needs to be strictly increasing, but gaps are allowed. This is a common operation when dealing with panel data, where entities may have different missing periods.</p>
<p dir="auto">The key function in this package is <code>tlag</code> (<code>tlead</code>):</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; t, v = [1;2;4], [1;2;3];
julia&gt; tlag(t, v) # the default lag period is the unitary difference in t, here 1
3-element Vector{Union{Missing, Int64}}:
  missing
 1
  missing


julia&gt; tlag(t, v, 2) # we can also specify lags using the third argument
3-element Vector{Union{Missing, Int64}}:
  missing
  missing
 2


julia&gt; using Dates;
julia&gt; t = [Date(2020,1,1); Date(2020,1,2); Date(2020,1,4)];
julia&gt; tlag(t, [1, 2, 3]) # customized types of the time vector are also supported 
3-element Vector{Union{Missing, Int64}}:
  missing
 1
  missing


julia&gt; tlag(t, [1, 2, 3], Day(2)) # specify two-day lags
3-element Vector{Union{Missing, Int64}}:
  missing
  missing
 2"><pre>julia<span class="pl-k">&gt;</span> t, v <span class="pl-k">=</span> [<span class="pl-c1">1</span>;<span class="pl-c1">2</span>;<span class="pl-c1">4</span>], [<span class="pl-c1">1</span>;<span class="pl-c1">2</span>;<span class="pl-c1">3</span>];
julia<span class="pl-k">&gt;</span> <span class="pl-c1">tlag</span>(t, v) <span class="pl-c"><span class="pl-c">#</span> the default lag period is the unitary difference in t, here 1</span>
<span class="pl-c1">3</span><span class="pl-k">-</span>element Vector{Union{Missing, Int64}}<span class="pl-k">:</span>
  <span class="pl-c1">missing</span>
 <span class="pl-c1">1</span>
  <span class="pl-c1">missing</span>


julia<span class="pl-k">&gt;</span> <span class="pl-c1">tlag</span>(t, v, <span class="pl-c1">2</span>) <span class="pl-c"><span class="pl-c">#</span> we can also specify lags using the third argument</span>
<span class="pl-c1">3</span><span class="pl-k">-</span>element Vector{Union{Missing, Int64}}<span class="pl-k">:</span>
  <span class="pl-c1">missing</span>
  <span class="pl-c1">missing</span>
 <span class="pl-c1">2</span>


julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Dates;
julia<span class="pl-k">&gt;</span> t <span class="pl-k">=</span> [<span class="pl-c1">Date</span>(<span class="pl-c1">2020</span>,<span class="pl-c1">1</span>,<span class="pl-c1">1</span>); <span class="pl-c1">Date</span>(<span class="pl-c1">2020</span>,<span class="pl-c1">1</span>,<span class="pl-c1">2</span>); <span class="pl-c1">Date</span>(<span class="pl-c1">2020</span>,<span class="pl-c1">1</span>,<span class="pl-c1">4</span>)];
julia<span class="pl-k">&gt;</span> <span class="pl-c1">tlag</span>(t, [<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>]) <span class="pl-c"><span class="pl-c">#</span> customized types of the time vector are also supported </span>
<span class="pl-c1">3</span><span class="pl-k">-</span>element Vector{Union{Missing, Int64}}<span class="pl-k">:</span>
  <span class="pl-c1">missing</span>
 <span class="pl-c1">1</span>
  <span class="pl-c1">missing</span>


julia<span class="pl-k">&gt;</span> <span class="pl-c1">tlag</span>(t, [<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>], <span class="pl-c1">Day</span>(<span class="pl-c1">2</span>)) <span class="pl-c"><span class="pl-c">#</span> specify two-day lags</span>
<span class="pl-c1">3</span><span class="pl-k">-</span>element Vector{Union{Missing, Int64}}<span class="pl-k">:</span>
  <span class="pl-c1">missing</span>
  <span class="pl-c1">missing</span>
 <span class="pl-c1">2</span></pre></div>
<p dir="auto">Function <code>tlead</code> shifts the array in the opposite direction, and function <code>tshift</code> calls <code>tlag</code> when the period <code>n</code> is positive and vice versa.</p>
<p dir="auto">For convenience (and to honor the name of the package), I also define functions <code>panellag</code>, <code>panellead</code> and <code>panelshift</code> to shift vectors in panel data. These functions are wrappers of <code>groupby</code>, <code>transform!</code> and <code>tshift</code>, e.g.,</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="function panellag!(df, id, t, x, newx, n=oneunit(df[1, t] - df[1, t]); checksorted=true)
    return transform!(groupby(df, id), [t, x] =&gt; ((t, x) -&gt; tlag(t, x, n; checksorted=checksorted)) =&gt; newx)
end"><pre><span class="pl-k">function</span> <span class="pl-en">panellag!</span>(df, id, t, x, newx, n<span class="pl-k">=</span><span class="pl-c1">oneunit</span>(df[<span class="pl-c1">1</span>, t] <span class="pl-k">-</span> df[<span class="pl-c1">1</span>, t]); checksorted<span class="pl-k">=</span><span class="pl-c1">true</span>)
    <span class="pl-k">return</span> <span class="pl-c1">transform!</span>(<span class="pl-c1">groupby</span>(df, id), [t, x] <span class="pl-k">=&gt;</span> ((t, x) <span class="pl-k">-&gt;</span> <span class="pl-c1">tlag</span>(t, x, n; checksorted<span class="pl-k">=</span>checksorted)) <span class="pl-k">=&gt;</span> newx)
<span class="pl-k">end</span></pre></div>
<p dir="auto">It groups <code>df</code> by <code>id</code>, applies <code>tlag</code> to <code>x</code> with respect to <code>t</code>, and stores the lagged column in <code>df</code> under the name <code>newx</code>.</p>
<p dir="auto">As an example:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using DataFrames;
julia&gt; df = DataFrame(
    t = [1;2;3;4; 1;3;4; 1;4; 1], 
    id = [1;1;1;1; 2;2;2; 3;3; 4],
    x = [1;2;3;4; 5;6;7; 8;9; 10]
);
julia&gt; panellead!(df, :id, :t, :x, :Fx)

10×4 DataFrame
 Row │ t      id     x      Fx      
     │ Int64  Int64  Int64  Int64?  
─────┼──────────────────────────────
   1 │     1      1      1  missing 
   2 │     2      1      2        1
   3 │     3      1      3        2
  ⋮  │   ⋮      ⋮      ⋮       ⋮
   8 │     1      3      8  missing 
   9 │     4      3      9  missing 
  10 │     1      4     10  missing 
                      4 rows omitted"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> DataFrames;
julia<span class="pl-k">&gt;</span> df <span class="pl-k">=</span> <span class="pl-c1">DataFrame</span>(
    t <span class="pl-k">=</span> [<span class="pl-c1">1</span>;<span class="pl-c1">2</span>;<span class="pl-c1">3</span>;<span class="pl-c1">4</span>; <span class="pl-c1">1</span>;<span class="pl-c1">3</span>;<span class="pl-c1">4</span>; <span class="pl-c1">1</span>;<span class="pl-c1">4</span>; <span class="pl-c1">1</span>], 
    id <span class="pl-k">=</span> [<span class="pl-c1">1</span>;<span class="pl-c1">1</span>;<span class="pl-c1">1</span>;<span class="pl-c1">1</span>; <span class="pl-c1">2</span>;<span class="pl-c1">2</span>;<span class="pl-c1">2</span>; <span class="pl-c1">3</span>;<span class="pl-c1">3</span>; <span class="pl-c1">4</span>],
    x <span class="pl-k">=</span> [<span class="pl-c1">1</span>;<span class="pl-c1">2</span>;<span class="pl-c1">3</span>;<span class="pl-c1">4</span>; <span class="pl-c1">5</span>;<span class="pl-c1">6</span>;<span class="pl-c1">7</span>; <span class="pl-c1">8</span>;<span class="pl-c1">9</span>; <span class="pl-c1">10</span>]
);
julia<span class="pl-k">&gt;</span> <span class="pl-c1">panellead!</span>(df, <span class="pl-c1">:id</span>, <span class="pl-c1">:t</span>, <span class="pl-c1">:x</span>, <span class="pl-c1">:Fx</span>)

<span class="pl-c1">10</span><span class="pl-k">×</span><span class="pl-c1">4</span> DataFrame
 Row │ t      id     x      Fx      
     │ Int64  Int64  Int64  Int64?  
─────┼──────────────────────────────
   <span class="pl-c1">1</span> │     <span class="pl-c1">1</span>      <span class="pl-c1">1</span>      <span class="pl-c1">1</span>  <span class="pl-c1">missing</span> 
   <span class="pl-c1">2</span> │     <span class="pl-c1">2</span>      <span class="pl-c1">1</span>      <span class="pl-c1">2</span>        <span class="pl-c1">1</span>
   <span class="pl-c1">3</span> │     <span class="pl-c1">3</span>      <span class="pl-c1">1</span>      <span class="pl-c1">3</span>        <span class="pl-c1">2</span>
  ⋮  │   ⋮      ⋮      ⋮       ⋮
   <span class="pl-c1">8</span> │     <span class="pl-c1">1</span>      <span class="pl-c1">3</span>      <span class="pl-c1">8</span>  <span class="pl-c1">missing</span> 
   <span class="pl-c1">9</span> │     <span class="pl-c1">4</span>      <span class="pl-c1">3</span>      <span class="pl-c1">9</span>  <span class="pl-c1">missing</span> 
  <span class="pl-c1">10</span> │     <span class="pl-c1">1</span>      <span class="pl-c1">4</span>     <span class="pl-c1">10</span>  <span class="pl-c1">missing</span> 
                      <span class="pl-c1">4</span> rows omitted</pre></div>
</article></div>