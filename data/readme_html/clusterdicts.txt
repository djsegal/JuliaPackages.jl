<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-clusterdicts" class="anchor" aria-hidden="true" href="#clusterdicts"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>ClusterDicts</h1>
<p><a href="https://travis-ci.org/amitmurthy/ClusterDicts.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/5c18561a0eb64e6cf3682b135d41fa3948929034/68747470733a2f2f7472617669732d63692e6f72672f616d69746d75727468792f436c757374657244696374732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/amitmurthy/ClusterDicts.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="http://codecov.io/github/amitmurthy/ClusterDicts.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/065d524795eeef7f509e723a99977b6f63be73aa/687474703a2f2f636f6465636f762e696f2f6769746875622f616d69746d75727468792f436c757374657244696374732e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/amitmurthy/ClusterDicts.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
<h2><a id="" class="anchor" aria-hidden="true" href="#"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><a href="http://pkg.julialang.org/?pkg=ClusterDicts&amp;ver=0.4" rel="nofollow"><img src="https://camo.githubusercontent.com/9a5947b49ceffb72b419f58b15d1f14b0e609f8a/687474703a2f2f706b672e6a756c69616c616e672e6f72672f6261646765732f436c757374657244696374735f302e342e737667" alt="ClusterDicts" data-canonical-src="http://pkg.julialang.org/badges/ClusterDicts_0.4.svg" style="max-width:100%;"></a></h2>
<p>Global and Distributed dictionaries for Julia.</p>
<h2><a id="user-content-globaldict-and-distributeddict" class="anchor" aria-hidden="true" href="#globaldict-and-distributeddict"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>GlobalDict and DistributedDict</h2>
<p>This package provides two types of distributed dictionaries:</p>
<ul>
<li><code>GlobalDict</code> where the same key-value pair is stored on
all participating workers.</li>
<li><code>DistributedDict</code> where the key-value pairs are distributed over
the participating workers based on the key's hash value.</li>
</ul>
<h2><a id="user-content-constructors" class="anchor" aria-hidden="true" href="#constructors"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Constructors</h2>
<ul>
<li>
<p><code>GlobalDict(pids=PidsWorkers(); name::AbstractString=next_name(), ktype=Any, vtype=Any)</code> where</p>
<ul>
<li>
<p><code>pids</code> is one of <code>PidsAll()</code>, <code>PidsWorkers()</code> or <code>Pids([ids...])</code> where</p>
<ul>
<li><code>PidsAll()</code> represents all processes in the cluster</li>
<li><code>PidsWorkers()</code> represents all worker processes in the cluster</li>
<li><code>Pids([ids...])</code> represents a specific subset of workers identified by their pids.</li>
</ul>
</li>
<li>
<p><code>name</code> is a logical name for the dictionary. It should be unique across any such dictionary created across
modules or different packages. Usually left unspecified in which case the system creates a unique name.</p>
</li>
<li>
<p><code>ktype</code> is the type of the keys. Defaults to <code>Any</code>.</p>
</li>
<li>
<p><code>vtype</code> is the type of the values. Defaults to <code>Any</code>.</p>
</li>
</ul>
</li>
<li>
<p><code>DistributedDict(pids=PidsWorkers(); name::AbstractString=next_name(), ktype=Any, vtype=Any)</code>
similar to the <code>GlobalDict</code> constructor.</p>
</li>
<li>
<p><code>GlobalDict()</code> and <code>DistributedDict()</code> only distribute over worker processes, i.e., excluding the master.
Keyword args remain the same.</p>
</li>
<li>
<p><code>GlobalDict(pids::Array)</code> and <code>DistributedDict(pids::Array)</code> distribute on the specified pids.
Keyword args remain the same.</p>
</li>
</ul>
<h2><a id="user-content-functions" class="anchor" aria-hidden="true" href="#functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Functions</h2>
<p>The following functions of <code>Associative</code> are implemented:</p>
<ul>
<li><code>isempty</code></li>
<li><code>length</code></li>
<li><code>get</code></li>
<li><code>get!</code></li>
<li><code>getindex</code></li>
<li><code>setindex!</code></li>
<li><code>pop!</code></li>
<li><code>delete!</code></li>
</ul>
<h2><a id="user-content-valuef" class="anchor" aria-hidden="true" href="#valuef"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>ValueF</h2>
<p>Any closure wrapped in a ValueF will execute the closure on the node where the key is being assigned.</p>
<p>For example, for a <code>GlobalDict</code>,</p>
<pre><code>    d[k] = ValueF(()-&gt;myid())
</code></pre>
<p>will set the value of d[k] to 2 on pid 2, 3 on pid 3 and so on.</p>
<p>And for a <code>DistributedDict</code>, it will be set only on the node that the key hashes to.</p>
<h2><a id="user-content-garbage-collection" class="anchor" aria-hidden="true" href="#garbage-collection"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Garbage Collection</h2>
<p>The global and distributed dictionaries created by <code>GlobalDict</code> and <code>DistributedDict</code> are NOT collected when the objects go out of scope.
They have to be necessarily released by calling <code>delete!(d::GlobalDict)</code> and <code>delete!(d::DistributedDict)</code> respectively.</p>
<h2><a id="user-content-todo" class="anchor" aria-hidden="true" href="#todo"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>TODO</h2>
<ul>
<li>
<p>Concurrent updates : This current version makes no attempt to handle race conditions when multiple tasks or processes
update the same key. For example, if <code>d</code> is a <code>GlobalDict</code>, <code>d[k] = v</code> sets <code>k</code> to <code>v</code> on all participating workers.
If two tasks try to set <code>d[k] = v1</code> and ``d[k] = v2<code>at the same time, there is no guarantee the value will be either all</code>v1` or all `v2` on all workers.</p>
</li>
<li>
<p>More <code>Associative</code> functions to be implemented.</p>
</li>
<li>
<p>Handle worker exits : Resiliency in the event of workers exiting has to be handled.</p>
</li>
</ul>
</article></div>