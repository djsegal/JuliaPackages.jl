<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p dir="auto"><a href="https://github.com/JuliaPy/SymPy.jl/actions"><img src="https://github.com/JuliaPy/SymPy.jl/workflows/CI/badge.svg" alt="Build status" style="max-width: 100%;"></a>
Â 
<a href="https://juliahub.com/docs/SymPy" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a></p>
<h1 dir="auto"><a id="user-content-sympy-package-to-bring-pythons-sympy-functionality-into-julia-via-pycall" class="anchor" aria-hidden="true" href="#sympy-package-to-bring-pythons-sympy-functionality-into-julia-via-pycall"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>SymPy Package to bring Python's <code>SymPy</code> functionality into <code>Julia</code> via <code>PyCall</code></h1>
<p dir="auto">SymPy  (<code>http://sympy.org/</code>)  is a Python library for symbolic mathematics.</p>
<p dir="auto">With the excellent <code>PyCall</code> package of <code>julia</code>, one has access to the
many features of the SymPy library from within a <code>Julia</code> session.</p>
<p dir="auto">This <code>SymPy</code> package provides a light interface for  the
features of the SymPy library that makes working with SymPy objects a bit
easier.</p>
<p dir="auto">The documentation inludes an introduction document and a version of
the SymPy tutorial translated from the Python syntax into Julia.</p>
<h3 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h3>
<p dir="auto">To use this package, both Python and its SymPy library must be
installed on your system. If <code>PyCall</code> is installed using <code>Conda</code>
(which is the default if no system <code>python</code> is found), then the
underlying SymPy library will be installed via <code>Conda</code> when the
package is first loaded. Otherwise, installing both Python and the
SymPy library (which also requires mpmath) can be done by other means.
In this case, the <code>Anaconda</code> distribution is suggested, as it provides a single
installation of Python that includes SymPy and many other
scientific libraries that can be profitably accessed within <code>Julia</code>
via <code>PyCall</code>. (Otherwise, install Python then download the SymPy
library from <a href="https://github.com/sympy/sympy/releases">https://github.com/sympy/sympy/releases</a> and install.)</p>
<p dir="auto">To upgrade the underlying <code>sympy</code> library, which has new releases at a
rate similar to <code>Julia</code>, when installed with <code>Conda</code>, the following commands
are available:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="using Pkg
Pkg.add(&quot;Conda&quot;) #  if needed
using Conda
Conda.update()"><pre class="notranslate"><code>using Pkg
Pkg.add("Conda") #  if needed
using Conda
Conda.update()
</code></pre></div>
<h2 dir="auto"><a id="user-content-the-pycall-interface-to-sympy" class="anchor" aria-hidden="true" href="#the-pycall-interface-to-sympy"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>The <code>PyCall</code> interface to <code>SymPy</code></h2>
<p dir="auto">The only point to this package is that using <code>PyCall</code> to access
SymPy is somewhat cumbersome. The following is how one would define
a symbolic value <code>x</code>, take its sine, then evaluate the symboic
expression for <code>x</code> equal <code>pi</code>, say:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="using PyCall
sympy = pyimport(&quot;sympy&quot;)  #
x = sympy.Symbol(&quot;x&quot;)      # PyObject x
y = sympy.sin(x)           # PyObject sin(x)
z = y.subs(x, sympy.pi)    # PyObject 0
convert(Float64, z)        # 0.0"><pre class="notranslate"><code>using PyCall
sympy = pyimport("sympy")  #
x = sympy.Symbol("x")      # PyObject x
y = sympy.sin(x)           # PyObject sin(x)
z = y.subs(x, sympy.pi)    # PyObject 0
convert(Float64, z)        # 0.0
</code></pre></div>
<p dir="auto">The <code>sympy</code> object imported on the second line provides the access to
much of SymPy's functionality, allowing access to functions
(<code>sympy.sin</code>), properties, modules (<code>sympy</code>), and classes
(<code>sympy.Symbol</code>, <code>sympy.Pi</code>).  The <code>Symbol</code> and <code>sin</code> operations are found
within the imported <code>sympy</code> module and, as seen, are referenced with
<code>Python</code>'s dot call syntax, as implemented in <code>PyCall</code> through a
specialized <code>getproperty</code> method.</p>
<p dir="auto">SymPy's functionality is also found through methods bound to
an object of a certain class. The <code>subs</code> method of the <code>y</code> object is an
example. Such methods are also accessed with Python's dot-call
syntax. The call above substitutes a value of <code>sympy.pi</code> for the
symbolic variable <code>x</code>. This leaves the object as a <code>PyObject</code> storing
a number which can be brought back into <code>julia</code> through conversion, in
this case through an explicit <code>convert</code> call.</p>
<p dir="auto">Alternatively, <code>PyCall</code> now has a <code>*</code> method, so the above could also be done with:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="x = sympy.Symbol(&quot;x&quot;)
y = sympy.pi * x
z = sympy.sin(y)
convert(Float64, z.subs(x, 1))"><pre class="notranslate"><code>x = sympy.Symbol("x")
y = sympy.pi * x
z = sympy.sin(y)
convert(Float64, z.subs(x, 1))
</code></pre></div>
<p dir="auto">With the <code>SymPy</code> package this gets replaced by a more <code>julia</code>n syntax:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="using SymPy
x = symbols(&quot;x&quot;)		       # or  @syms x
y = sin(pi*x)
y(1)                           # Does y.subs(x, 1). Use y(x=&gt;1) to be specific as to which symbol to substitute"><pre class="notranslate"><code>using SymPy
x = symbols("x")		       # or  @syms x
y = sin(pi*x)
y(1)                           # Does y.subs(x, 1). Use y(x=&gt;1) to be specific as to which symbol to substitute
</code></pre></div>
<p dir="auto">The object <code>x</code> we create is of type <code>Sym</code>, a simple proxy for the
underlying <code>PyObject</code>. The package overloads the familiar math functions so
that working with symbolic expressions can use natural <code>julia</code>
idioms. The final result  here is a symbolic value of <code>0</code>, which
prints as <code>0</code> and not <code>PyObject 0</code>. To convert it into a numeric value
within <code>Julia</code>, the <code>N</code> function may be used, which acts like the
float conversion, only there is an attempt to preserve the variable type.</p>
<p dir="auto">(There is a subtlety, the value of <code>pi</code> here (an <code>Irrational</code> in
<code>Julia</code>) is converted to the symbolic <code>PI</code>, but in general won't be if
the math constant is coerced to a floating point value before it
encounters a symbolic object. It is better to just use the symbolic
value <code>PI</code>, an alias for <code>sympy.pi</code> used above.)</p>
<hr>
<p dir="auto">SymPy has a mix of function calls (as in <code>sin(x)</code>) and method calls
(as in <code>y.subs(x,1)</code>). The function calls are from objects in the base
<code>sympy</code> module. When the <code>SymPy</code> package is loaded, in addition to
specialized methods for many generic <code>Julia</code> functions, such as <code>sin</code>,
a priviledged set of the function calls in <code>sympy</code> are imported as
generic functions narrowed on their first argument being a symbolic
object, as constructed by <code>@syms</code>, <code>Sym</code>, or <code>symbols</code>. (Calling
<code>import_from(sympy)</code> will import all the function calls.)</p>
<p dir="auto">The basic usage follows these points:</p>
<ul dir="auto">
<li>
<p dir="auto">generic methods from <code>Julia</code> and imported functions in the <code>sympy</code>
namespace are called through <code>fn(object)</code></p>
</li>
<li>
<p dir="auto">SymPy methods are called through Python's dot-call syntax:
<code>object.fn(...)</code></p>
</li>
<li>
<p dir="auto">Contructors, like <code>sympy.Symbol</code>, and other non-function calls from <code>sympy</code> are qualified
with <code>sympy.Constructor(...)</code>. Such qualified calls are also useful
when the first argument is not symbolic.</p>
</li>
</ul>
<p dir="auto">So, these three calls are different,</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="sin(1), sin(Sym(1)), sympy.sin(1)"><pre class="notranslate"><code>sin(1), sin(Sym(1)), sympy.sin(1)
</code></pre></div>
<p dir="auto">The first involves no symbolic values. The second and third are
related and return a symbolic value for <code>sin(1)</code>. The second
dispatches on the symbolic argument <code>Sym(1)</code>, the third has no
dispatch, but refers to a SymPy function from the <code>sympy</code> object. Its
argument, <code>1</code>, is converted by <code>PyCall</code> into a Python object for the
function to process.</p>
<p dir="auto">In the initial example, slightly rewritten, we could have issued:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="x = symbols(&quot;x&quot;)
y = sin(pi*x)
y.subs(x, 1)"><pre class="notranslate"><code>x = symbols("x")
y = sin(pi*x)
y.subs(x, 1)
</code></pre></div>
<p dir="auto">The first line calls a provided alias for <code>sympy.symbols</code> which is
defined to allow a string (or a symbol) as an argument. The second,
dispatches to <code>sympy.sin</code>, as <code>pi*x</code> is symbolic-- <code>x</code> is, and
multiplication promotes to a symbolic value. The third line uses the
dot-call syntax of <code>PyCall</code> to call the <code>subs</code> method of the symbolic
<code>y</code> object.</p>
<p dir="auto">Not illustrated above, but classes and other objects from SymPy are
not brought in by default, and can be accessed using qualification, as
in <code>sympy.Function</code> (used, as is <code>@syms</code>, to define symbolic functions).</p>
</article></div>