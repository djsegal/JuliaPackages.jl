<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-checkpoints" class="anchor" aria-hidden="true" href="#checkpoints"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Checkpoints</h1>
<p dir="auto"><a href="https://invenia.github.io/Checkpoints.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/invenia/Checkpoints.jl/actions"><img src="https://github.com/invenia/Checkpoints.jl/workflows/CI/badge.svg" alt="build status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/invenia/Checkpoints.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/c6dd45c90220ad6c30fa128725bf164174a08933161ae398381e82f99aee5b90/68747470733a2f2f636f6465636f762e696f2f67682f696e76656e69612f436865636b706f696e74732e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e737667" alt="coverage" data-canonical-src="https://codecov.io/gh/invenia/Checkpoints.jl/branch/main/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">Checkpoints.jl allows packages to <code>register</code> checkpoints which can serialize objects to disk
during the execution of an application program, if the application program <code>config</code>ures them.</p>
<p dir="auto">A minimal working example consists of the package:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="module MyPackage

using Checkpoints

MODULE = &quot;MyPackage&quot;

__init__() = Checkpoints.register(MODULE, [&quot;foo&quot;, ])

function foo(x)
    with_checkpoint_tags(:foo1 =&gt; 1, :foo2 =&gt; 2) do
        checkpoint(MODULE, &quot;foo&quot;, :data =&gt; 2x)
    end
    return 2x
end

end"><pre><span class="pl-k">module</span> MyPackage

<span class="pl-k">using</span> Checkpoints

MODULE <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>MyPackage<span class="pl-pds">"</span></span>

<span class="pl-en">__init__</span>() <span class="pl-k">=</span> Checkpoints<span class="pl-k">.</span><span class="pl-c1">register</span>(MODULE, [<span class="pl-s"><span class="pl-pds">"</span>foo<span class="pl-pds">"</span></span>, ])

<span class="pl-k">function</span> <span class="pl-en">foo</span>(x)
    <span class="pl-c1">with_checkpoint_tags</span>(<span class="pl-c1">:foo1</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1</span>, <span class="pl-c1">:foo2</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">2</span>) <span class="pl-k">do</span>
        <span class="pl-c1">checkpoint</span>(MODULE, <span class="pl-s"><span class="pl-pds">"</span>foo<span class="pl-pds">"</span></span>, <span class="pl-c1">:data</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">2</span>x)
    <span class="pl-k">end</span>
    <span class="pl-k">return</span> <span class="pl-c1">2</span>x
<span class="pl-k">end</span>

<span class="pl-k">end</span></pre></div>
<p dir="auto">and the application program:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Checkpoints

Checkpoints.config(&quot;MyPackage.foo&quot;, &quot;./path/to/checkpoints&quot;)

for i in 1:2
    with_checkpoint_tags(:iteration =&gt; i) do
        MyPackage.foo(1.0)
    end
end"><pre><span class="pl-k">using</span> Checkpoints

Checkpoints<span class="pl-k">.</span><span class="pl-c1">config</span>(<span class="pl-s"><span class="pl-pds">"</span>MyPackage.foo<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>./path/to/checkpoints<span class="pl-pds">"</span></span>)

<span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span>
    <span class="pl-c1">with_checkpoint_tags</span>(<span class="pl-c1">:iteration</span> <span class="pl-k">=&gt;</span> i) <span class="pl-k">do</span>
        MyPackage<span class="pl-k">.</span><span class="pl-c1">foo</span>(<span class="pl-c1">1.0</span>)
    <span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>
<p dir="auto">which results in recorded checkpoints at</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="./path/to/checkpoints/iteration=1/foo1=1/foo2=2/MyPackage/foo.jlso
./path/to/checkpoints/iteration=2/foo1=1/foo2=2/MyPackage/foo.jlso"><pre class="notranslate"><code>./path/to/checkpoints/iteration=1/foo1=1/foo2=2/MyPackage/foo.jlso
./path/to/checkpoints/iteration=2/foo1=1/foo2=2/MyPackage/foo.jlso
</code></pre></div>
<p dir="auto">You can use <code>index_checkpoint_files</code> to get an index of the files, which is a <a href="https://github.com/JuliaData/Tables.jl">Tables.jl</a> table and so can e.g. be passed to <code>DataFrame</code> (and then you can do things like <code>groupby</code> etc):</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using DataFrames

julia&gt; DataFrame(index_checkpoint_files(&quot;./path/to/checkpoints/&quot;))
2×6 DataFrame
 Row │ prefixes        checkpoint_name  iteration   foo1        foo2        checkpoint_path
     │ Tuple…          SubString…       SubString…  SubString…  SubString…  PosixPath…
─────┼────────────────────────────────────────────────────────────────────────────────────────────────────────
   1 │ (&quot;MyPackage&quot;,)  foo              1           1           2           ./path/to/checkpoints/iteration=…
   2 │ (&quot;MyPackage&quot;,)  foo              2           1           2           ./path/to/checkpoints/iteration=…"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> DataFrames

julia<span class="pl-k">&gt;</span> <span class="pl-c1">DataFrame</span>(<span class="pl-c1">index_checkpoint_files</span>(<span class="pl-s"><span class="pl-pds">"</span>./path/to/checkpoints/<span class="pl-pds">"</span></span>))
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">6</span> DataFrame
 Row │ prefixes        checkpoint_name  iteration   foo1        foo2        checkpoint_path
     │ Tuple…          SubString…       SubString…  SubString…  SubString…  PosixPath…
─────┼────────────────────────────────────────────────────────────────────────────────────────────────────────
   <span class="pl-c1">1</span> │ (<span class="pl-s"><span class="pl-pds">"</span>MyPackage<span class="pl-pds">"</span></span>,)  foo              <span class="pl-c1">1</span>           <span class="pl-c1">1</span>           <span class="pl-c1">2</span>           <span class="pl-k">./</span>path<span class="pl-k">/</span>to<span class="pl-k">/</span>checkpoints<span class="pl-k">/</span>iteration<span class="pl-k">=</span>…
   <span class="pl-c1">2</span> │ (<span class="pl-s"><span class="pl-pds">"</span>MyPackage<span class="pl-pds">"</span></span>,)  foo              <span class="pl-c1">2</span>           <span class="pl-c1">1</span>           <span class="pl-c1">2</span>           <span class="pl-k">./</span>path<span class="pl-k">/</span>to<span class="pl-k">/</span>checkpoints<span class="pl-k">/</span>iteration<span class="pl-k">=</span>…</pre></div>
<p dir="auto">or worked with directly:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; [checkpoint_path(out) for out in index_checkpoint_files(&quot;./path/to/checkpoints/&quot;) if out.iteration==&quot;1&quot;]
1-element Array{FilePathsBase.PosixPath,1}:
 p&quot;./path/to/checkpoints/iteration=1/foo1=1/foo2=2/MyPackage/foo.jlso&quot;"><pre>julia<span class="pl-k">&gt;</span> [<span class="pl-c1">checkpoint_path</span>(out) <span class="pl-k">for</span> out <span class="pl-k">in</span> <span class="pl-c1">index_checkpoint_files</span>(<span class="pl-s"><span class="pl-pds">"</span>./path/to/checkpoints/<span class="pl-pds">"</span></span>) <span class="pl-k">if</span> out<span class="pl-k">.</span>iteration<span class="pl-k">==</span><span class="pl-s"><span class="pl-pds">"</span>1<span class="pl-pds">"</span></span>]
<span class="pl-c1">1</span><span class="pl-k">-</span>element Array{FilePathsBase<span class="pl-k">.</span>PosixPath,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-s"><span class="pl-pds"><span class="pl-c1">p</span>"</span>./path/to/checkpoints/iteration=1/foo1=1/foo2=2/MyPackage/foo.jlso<span class="pl-pds">"</span></span></pre></div>
</article></div>