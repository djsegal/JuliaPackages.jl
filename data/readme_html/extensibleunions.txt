<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-extensibleunions" class="anchor" aria-hidden="true" href="#extensibleunions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>ExtensibleUnions</h1>
<p><a href="https://travis-ci.com/bcbi/ExtensibleUnions.jl/branches" rel="nofollow"><img src="https://camo.githubusercontent.com/91f5f34fb34b2dae03ef312c4ad305b08e1e5f61cad6bcd9540855c3539541c5/68747470733a2f2f7472617669732d63692e636f6d2f626362692f457874656e7369626c65556e696f6e732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/bcbi/ExtensibleUnions.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/bcbi/ExtensibleUnions.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/931829f2d6ea508977d88699628055f00a59e71482c39cfde46ac390146e57b7/68747470733a2f2f636f6465636f762e696f2f67682f626362692f457874656e7369626c65556e696f6e732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/bcbi/ExtensibleUnions.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; import Pkg; Pkg.add(&quot;ExtensibleUnions&quot;)
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">import</span> Pkg; Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>ExtensibleUnions<span class="pl-pds">"</span></span>)</pre></div>
<p>ExtensibleUnions adds abstract multiple inheritance to Julia in the
form of extensible (mutable) type unions.</p>
<p><strong>Warning: ExtensibleUnions is an experimental package. Do not use ExtensibleUnions in any production code.</strong></p>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<p>Create a new extensible union:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="struct MyUnion end
extensibleunion!(MyUnion)
"><pre><span class="pl-k">struct</span> MyUnion <span class="pl-k">end</span>
<span class="pl-c1">extensibleunion!</span>(MyUnion)</pre></div>
<p>Add methods that dispatch on extensible unions:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="f(x::MyUnion1, y, z, ...) = ...
f(x, y::MyUnion2, z, ...) = ...
extensiblefunction!(f, MyUnion1, MyUnion2, ...)
"><pre><span class="pl-en">f</span>(x<span class="pl-k">::</span><span class="pl-c1">MyUnion1</span>, y, z, <span class="pl-k">...</span>) <span class="pl-k">=</span> <span class="pl-k">...</span>
<span class="pl-en">f</span>(x, y<span class="pl-k">::</span><span class="pl-c1">MyUnion2</span>, z, <span class="pl-k">...</span>) <span class="pl-k">=</span> <span class="pl-k">...</span>
<span class="pl-c1">extensiblefunction!</span>(f, MyUnion1, MyUnion2, <span class="pl-k">...</span>)</pre></div>
<p>Add types to an extensible union:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="addtounion!(MyUnion, SomeType1, SomeType2, ...)
"><pre><span class="pl-c1">addtounion!</span>(MyUnion, SomeType1, SomeType2, <span class="pl-k">...</span>)</pre></div>
<p>At any later time, you can add more types to an extensible union:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="addtounion!(MyUnion, SomeType3, SomeType4, ...)
"><pre><span class="pl-c1">addtounion!</span>(MyUnion, SomeType3, SomeType4, <span class="pl-k">...</span>)</pre></div>
<h2><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Examples</h2>
<h3><a id="user-content-example-1" class="anchor" aria-hidden="true" href="#example-1"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example 1</h3>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using ExtensibleUnions

julia&gt; abstract type AbstractCar end

julia&gt; abstract type AbstractFireEngine end

julia&gt; struct RedCar &lt;: AbstractCar
       end

julia&gt; struct BlueCar &lt;: AbstractCar
           x
       end

julia&gt; struct LadderTruck{T} &lt;: AbstractFireEngine
           x::T
       end

julia&gt; mutable struct WaterTender{T} &lt;: AbstractFireEngine
           x::T
           y::T
       end

julia&gt; struct RedColorTrait end

julia&gt; struct BlueColorTrait end

julia&gt; extensibleunion!(RedColorTrait)
RedColorTrait

julia&gt; extensibleunion!(BlueColorTrait)
BlueColorTrait

julia&gt; describe(x) = &quot;I don't know anything about this object&quot;
describe (generic function with 1 method)

julia&gt; methods(describe)
# 1 method for generic function &quot;describe&quot;:
[1] describe(x) in Main at REPL[12]:1

julia&gt; describe(RedCar())
&quot;I don't know anything about this object&quot;

julia&gt; describe(BlueCar(1))
&quot;I don't know anything about this object&quot;

julia&gt; describe(LadderTruck{Int}(2))
&quot;I don't know anything about this object&quot;

julia&gt; describe(WaterTender{Int}(3,4))
&quot;I don't know anything about this object&quot;

julia&gt; describe(x::RedColorTrait) = &quot;The color of this object is red&quot;
describe (generic function with 2 methods)

julia&gt; extensiblefunction!(describe, RedColorTrait)
describe (generic function with 2 methods)

julia&gt; describe(x::BlueColorTrait) = &quot;The color of this object is blue&quot;
describe (generic function with 3 methods)

julia&gt; extensiblefunction!(describe, BlueColorTrait)
describe (generic function with 3 methods)

julia&gt; methods(describe)
# 3 methods for generic function &quot;describe&quot;:
[1] describe(x::BlueColorTrait) in Main at REPL[20]:1
[2] describe(x::RedColorTrait) in Main at REPL[18]:1
[3] describe(x) in Main at REPL[12]:1

julia&gt; describe(RedCar())
&quot;I don't know anything about this object&quot;

julia&gt; describe(BlueCar(1))
&quot;I don't know anything about this object&quot;

julia&gt; describe(LadderTruck{Int}(2))
&quot;I don't know anything about this object&quot;

julia&gt; describe(WaterTender{Int}(3,4))
&quot;I don't know anything about this object&quot;

julia&gt; addtounion!(RedColorTrait, RedCar)
RedColorTrait

julia&gt; methods(describe)
# 3 methods for generic function &quot;describe&quot;:
[1] describe(x::BlueColorTrait) in Main at REPL[20]:1
[2] describe(x::Union{RedCar, RedColorTrait}) in Main at REPL[18]:1
[3] describe(x) in Main at REPL[12]:1

julia&gt; describe(RedCar())
&quot;The color of this object is red&quot;

julia&gt; describe(BlueCar(1))
&quot;I don't know anything about this object&quot;

julia&gt; describe(LadderTruck{Int}(2))
&quot;I don't know anything about this object&quot;

julia&gt; describe(WaterTender{Int}(3,4))
&quot;I don't know anything about this object&quot;

julia&gt; addtounion!(BlueColorTrait, BlueCar)
BlueColorTrait

julia&gt; methods(describe)
# 3 methods for generic function &quot;describe&quot;:
[1] describe(x::Union{RedCar, RedColorTrait}) in Main at REPL[18]:1
[2] describe(x::Union{BlueColorTrait, BlueCar}) in Main at REPL[20]:1
[3] describe(x) in Main at REPL[12]:1

julia&gt; describe(RedCar())
&quot;The color of this object is red&quot;

julia&gt; describe(BlueCar(1))
&quot;The color of this object is blue&quot;

julia&gt; describe(LadderTruck{Int}(2))
&quot;I don't know anything about this object&quot;

julia&gt; describe(WaterTender{Int}(3,4))
&quot;I don't know anything about this object&quot;

julia&gt; addtounion!(RedColorTrait, AbstractFireEngine)
RedColorTrait

julia&gt; methods(describe)
# 3 methods for generic function &quot;describe&quot;:
[1] describe(x::Union{BlueColorTrait, BlueCar}) in Main at REPL[20]:1
[2] describe(x::Union{RedCar, RedColorTrait, AbstractFireEngine}) in Main at REPL[18]:1
[3] describe(x) in Main at REPL[12]:1

julia&gt; describe(RedCar())
&quot;The color of this object is red&quot;

julia&gt; describe(BlueCar(1))
&quot;The color of this object is blue&quot;

julia&gt; describe(LadderTruck{Int}(2))
&quot;The color of this object is red&quot;

julia&gt; describe(WaterTender{Int}(3,4))
&quot;The color of this object is red&quot;
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> ExtensibleUnions

julia<span class="pl-k">&gt;</span> <span class="pl-k">abstract type</span> AbstractCar <span class="pl-k">end</span>

julia<span class="pl-k">&gt;</span> <span class="pl-k">abstract type</span> AbstractFireEngine <span class="pl-k">end</span>

julia<span class="pl-k">&gt;</span> <span class="pl-k">struct</span> RedCar <span class="pl-k">&lt;:</span> <span class="pl-c1">AbstractCar</span>
       <span class="pl-k">end</span>

julia<span class="pl-k">&gt;</span> <span class="pl-k">struct</span> BlueCar <span class="pl-k">&lt;:</span> <span class="pl-c1">AbstractCar</span>
           x
       <span class="pl-k">end</span>

julia<span class="pl-k">&gt;</span> <span class="pl-k">struct</span> LadderTruck{T} <span class="pl-k">&lt;:</span> <span class="pl-c1">AbstractFireEngine</span>
           x<span class="pl-k">::</span><span class="pl-c1">T</span>
       <span class="pl-k">end</span>

julia<span class="pl-k">&gt;</span> <span class="pl-k">mutable struct</span> WaterTender{T} <span class="pl-k">&lt;:</span> <span class="pl-c1">AbstractFireEngine</span>
           x<span class="pl-k">::</span><span class="pl-c1">T</span>
           y<span class="pl-k">::</span><span class="pl-c1">T</span>
       <span class="pl-k">end</span>

julia<span class="pl-k">&gt;</span> <span class="pl-k">struct</span> RedColorTrait <span class="pl-k">end</span>

julia<span class="pl-k">&gt;</span> <span class="pl-k">struct</span> BlueColorTrait <span class="pl-k">end</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">extensibleunion!</span>(RedColorTrait)
RedColorTrait

julia<span class="pl-k">&gt;</span> <span class="pl-c1">extensibleunion!</span>(BlueColorTrait)
BlueColorTrait

julia<span class="pl-k">&gt;</span> <span class="pl-en">describe</span>(x) <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>I don't know anything about this object<span class="pl-pds">"</span></span>
describe (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">methods</span>(describe)
<span class="pl-c"><span class="pl-c">#</span> 1 method for generic function "describe":</span>
[<span class="pl-c1">1</span>] <span class="pl-c1">describe</span>(x) <span class="pl-k">in</span> Main at REPL[<span class="pl-c1">12</span>]<span class="pl-k">:</span><span class="pl-c1">1</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">describe</span>(<span class="pl-c1">RedCar</span>())
<span class="pl-s"><span class="pl-pds">"</span>I don't know anything about this object<span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">describe</span>(<span class="pl-c1">BlueCar</span>(<span class="pl-c1">1</span>))
<span class="pl-s"><span class="pl-pds">"</span>I don't know anything about this object<span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">describe</span>(<span class="pl-c1">LadderTruck</span><span class="pl-c1">{Int}</span>(<span class="pl-c1">2</span>))
<span class="pl-s"><span class="pl-pds">"</span>I don't know anything about this object<span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">describe</span>(<span class="pl-c1">WaterTender</span><span class="pl-c1">{Int}</span>(<span class="pl-c1">3</span>,<span class="pl-c1">4</span>))
<span class="pl-s"><span class="pl-pds">"</span>I don't know anything about this object<span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> <span class="pl-en">describe</span>(x<span class="pl-k">::</span><span class="pl-c1">RedColorTrait</span>) <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>The color of this object is red<span class="pl-pds">"</span></span>
describe (generic <span class="pl-k">function</span> with <span class="pl-c1">2</span> methods)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">extensiblefunction!</span>(describe, RedColorTrait)
describe (generic <span class="pl-k">function</span> with <span class="pl-c1">2</span> methods)

julia<span class="pl-k">&gt;</span> <span class="pl-en">describe</span>(x<span class="pl-k">::</span><span class="pl-c1">BlueColorTrait</span>) <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>The color of this object is blue<span class="pl-pds">"</span></span>
describe (generic <span class="pl-k">function</span> with <span class="pl-c1">3</span> methods)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">extensiblefunction!</span>(describe, BlueColorTrait)
describe (generic <span class="pl-k">function</span> with <span class="pl-c1">3</span> methods)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">methods</span>(describe)
<span class="pl-c"><span class="pl-c">#</span> 3 methods for generic function "describe":</span>
[<span class="pl-c1">1</span>] <span class="pl-c1">describe</span>(x<span class="pl-k">::</span><span class="pl-c1">BlueColorTrait</span>) <span class="pl-k">in</span> Main at REPL[<span class="pl-c1">20</span>]<span class="pl-k">:</span><span class="pl-c1">1</span>
[<span class="pl-c1">2</span>] <span class="pl-c1">describe</span>(x<span class="pl-k">::</span><span class="pl-c1">RedColorTrait</span>) <span class="pl-k">in</span> Main at REPL[<span class="pl-c1">18</span>]<span class="pl-k">:</span><span class="pl-c1">1</span>
[<span class="pl-c1">3</span>] <span class="pl-c1">describe</span>(x) <span class="pl-k">in</span> Main at REPL[<span class="pl-c1">12</span>]<span class="pl-k">:</span><span class="pl-c1">1</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">describe</span>(<span class="pl-c1">RedCar</span>())
<span class="pl-s"><span class="pl-pds">"</span>I don't know anything about this object<span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">describe</span>(<span class="pl-c1">BlueCar</span>(<span class="pl-c1">1</span>))
<span class="pl-s"><span class="pl-pds">"</span>I don't know anything about this object<span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">describe</span>(<span class="pl-c1">LadderTruck</span><span class="pl-c1">{Int}</span>(<span class="pl-c1">2</span>))
<span class="pl-s"><span class="pl-pds">"</span>I don't know anything about this object<span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">describe</span>(<span class="pl-c1">WaterTender</span><span class="pl-c1">{Int}</span>(<span class="pl-c1">3</span>,<span class="pl-c1">4</span>))
<span class="pl-s"><span class="pl-pds">"</span>I don't know anything about this object<span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">addtounion!</span>(RedColorTrait, RedCar)
RedColorTrait

julia<span class="pl-k">&gt;</span> <span class="pl-c1">methods</span>(describe)
<span class="pl-c"><span class="pl-c">#</span> 3 methods for generic function "describe":</span>
[<span class="pl-c1">1</span>] <span class="pl-c1">describe</span>(x<span class="pl-k">::</span><span class="pl-c1">BlueColorTrait</span>) <span class="pl-k">in</span> Main at REPL[<span class="pl-c1">20</span>]<span class="pl-k">:</span><span class="pl-c1">1</span>
[<span class="pl-c1">2</span>] <span class="pl-c1">describe</span>(x<span class="pl-k">::</span><span class="pl-c1">Union{RedCar, RedColorTrait}</span>) <span class="pl-k">in</span> Main at REPL[<span class="pl-c1">18</span>]<span class="pl-k">:</span><span class="pl-c1">1</span>
[<span class="pl-c1">3</span>] <span class="pl-c1">describe</span>(x) <span class="pl-k">in</span> Main at REPL[<span class="pl-c1">12</span>]<span class="pl-k">:</span><span class="pl-c1">1</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">describe</span>(<span class="pl-c1">RedCar</span>())
<span class="pl-s"><span class="pl-pds">"</span>The color of this object is red<span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">describe</span>(<span class="pl-c1">BlueCar</span>(<span class="pl-c1">1</span>))
<span class="pl-s"><span class="pl-pds">"</span>I don't know anything about this object<span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">describe</span>(<span class="pl-c1">LadderTruck</span><span class="pl-c1">{Int}</span>(<span class="pl-c1">2</span>))
<span class="pl-s"><span class="pl-pds">"</span>I don't know anything about this object<span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">describe</span>(<span class="pl-c1">WaterTender</span><span class="pl-c1">{Int}</span>(<span class="pl-c1">3</span>,<span class="pl-c1">4</span>))
<span class="pl-s"><span class="pl-pds">"</span>I don't know anything about this object<span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">addtounion!</span>(BlueColorTrait, BlueCar)
BlueColorTrait

julia<span class="pl-k">&gt;</span> <span class="pl-c1">methods</span>(describe)
<span class="pl-c"><span class="pl-c">#</span> 3 methods for generic function "describe":</span>
[<span class="pl-c1">1</span>] <span class="pl-c1">describe</span>(x<span class="pl-k">::</span><span class="pl-c1">Union{RedCar, RedColorTrait}</span>) <span class="pl-k">in</span> Main at REPL[<span class="pl-c1">18</span>]<span class="pl-k">:</span><span class="pl-c1">1</span>
[<span class="pl-c1">2</span>] <span class="pl-c1">describe</span>(x<span class="pl-k">::</span><span class="pl-c1">Union{BlueColorTrait, BlueCar}</span>) <span class="pl-k">in</span> Main at REPL[<span class="pl-c1">20</span>]<span class="pl-k">:</span><span class="pl-c1">1</span>
[<span class="pl-c1">3</span>] <span class="pl-c1">describe</span>(x) <span class="pl-k">in</span> Main at REPL[<span class="pl-c1">12</span>]<span class="pl-k">:</span><span class="pl-c1">1</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">describe</span>(<span class="pl-c1">RedCar</span>())
<span class="pl-s"><span class="pl-pds">"</span>The color of this object is red<span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">describe</span>(<span class="pl-c1">BlueCar</span>(<span class="pl-c1">1</span>))
<span class="pl-s"><span class="pl-pds">"</span>The color of this object is blue<span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">describe</span>(<span class="pl-c1">LadderTruck</span><span class="pl-c1">{Int}</span>(<span class="pl-c1">2</span>))
<span class="pl-s"><span class="pl-pds">"</span>I don't know anything about this object<span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">describe</span>(<span class="pl-c1">WaterTender</span><span class="pl-c1">{Int}</span>(<span class="pl-c1">3</span>,<span class="pl-c1">4</span>))
<span class="pl-s"><span class="pl-pds">"</span>I don't know anything about this object<span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">addtounion!</span>(RedColorTrait, AbstractFireEngine)
RedColorTrait

julia<span class="pl-k">&gt;</span> <span class="pl-c1">methods</span>(describe)
<span class="pl-c"><span class="pl-c">#</span> 3 methods for generic function "describe":</span>
[<span class="pl-c1">1</span>] <span class="pl-c1">describe</span>(x<span class="pl-k">::</span><span class="pl-c1">Union{BlueColorTrait, BlueCar}</span>) <span class="pl-k">in</span> Main at REPL[<span class="pl-c1">20</span>]<span class="pl-k">:</span><span class="pl-c1">1</span>
[<span class="pl-c1">2</span>] <span class="pl-c1">describe</span>(x<span class="pl-k">::</span><span class="pl-c1">Union{RedCar, RedColorTrait, AbstractFireEngine}</span>) <span class="pl-k">in</span> Main at REPL[<span class="pl-c1">18</span>]<span class="pl-k">:</span><span class="pl-c1">1</span>
[<span class="pl-c1">3</span>] <span class="pl-c1">describe</span>(x) <span class="pl-k">in</span> Main at REPL[<span class="pl-c1">12</span>]<span class="pl-k">:</span><span class="pl-c1">1</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">describe</span>(<span class="pl-c1">RedCar</span>())
<span class="pl-s"><span class="pl-pds">"</span>The color of this object is red<span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">describe</span>(<span class="pl-c1">BlueCar</span>(<span class="pl-c1">1</span>))
<span class="pl-s"><span class="pl-pds">"</span>The color of this object is blue<span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">describe</span>(<span class="pl-c1">LadderTruck</span><span class="pl-c1">{Int}</span>(<span class="pl-c1">2</span>))
<span class="pl-s"><span class="pl-pds">"</span>The color of this object is red<span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">describe</span>(<span class="pl-c1">WaterTender</span><span class="pl-c1">{Int}</span>(<span class="pl-c1">3</span>,<span class="pl-c1">4</span>))
<span class="pl-s"><span class="pl-pds">"</span>The color of this object is red<span class="pl-pds">"</span></span></pre></div>
<h2><a id="user-content-acknowledgements" class="anchor" aria-hidden="true" href="#acknowledgements"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Acknowledgements</h2>
<p>Some of the code in this package is taken from:</p>
<ol>
<li><a href="https://github.com/NHDaly/DeepcopyModules.jl">https://github.com/NHDaly/DeepcopyModules.jl</a> (license: MIT)</li>
<li><a href="https://github.com/perrutquist/CodeTransformation.jl">https://github.com/perrutquist/CodeTransformation.jl</a> (license: MIT)</li>
</ol>
<h2><a id="user-content-related-work" class="anchor" aria-hidden="true" href="#related-work"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Related Work</h2>
<ol>
<li><a href="https://github.com/rofinn/Interfaces.jl">https://github.com/rofinn/Interfaces.jl</a>: An implementation of interfaces for Julia</li>
</ol>
</article></div>