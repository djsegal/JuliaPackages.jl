<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-coin-or-linear-programming-interface-clpjl" class="anchor" aria-hidden="true" href="#coin-or-linear-programming-interface-clpjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>COIN-OR Linear Programming Interface (Clp.jl)</h1>
<p><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/cd8e4605c574a186f0227b09e654d1b12c1d4fb2/68747470733a2f2f7777772e636f696e2d6f722e6f72672f776f726470726573732f77702d636f6e74656e742f75706c6f6164732f323031342f30382f434f494e4f522e706e67"><img src="https://camo.githubusercontent.com/cd8e4605c574a186f0227b09e654d1b12c1d4fb2/68747470733a2f2f7777772e636f696e2d6f722e6f72672f776f726470726573732f77702d636f6e74656e742f75706c6f6164732f323031342f30382f434f494e4f522e706e67" alt="" data-canonical-src="https://www.coin-or.org/wordpress/wp-content/uploads/2014/08/COINOR.png" style="max-width:100%;"></a></p>
<p><code>Clp.jl</code> is an interface to the <strong><a href="https://projects.coin-or.org/Clp" rel="nofollow">COIN-OR Linear
Programming</a></strong> solver. It provides a complete
interface to the low-level C API, as well as an implementation of the
solver-independent <code>MathOptInterface</code> API.</p>
<p><em>Note: This wrapper is maintained by the JuMP community and is not a COIN-OR
project.</em></p>
<p><a href="https://travis-ci.org/jump-dev/Clp.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/2fe18696eaaf82df5f5dee8689e76c8ed3e85f01/68747470733a2f2f7472617669732d63692e6f72672f6a756d702d6465762f436c702e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/jump-dev/Clp.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/jump-dev/Clp.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/645d61aaf9ad6479bc145c8f5675fb0da3ea6f7b/68747470733a2f2f636f6465636f762e696f2f67682f6a756d702d6465762f436c702e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/jump-dev/Clp.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>The package can be installed with <code>Pkg.add</code>.</p>
<pre><code>julia&gt; import Pkg; Pkg.add("Clp")
</code></pre>
<p>Clp.jl will use <a href="https://github.com/JuliaPackaging/BinaryProvider.jl">BinaryProvider.jl</a> to automatically install the Clp binaries. This should work for both the official Julia binaries from <code>https://julialang.org/downloads/</code> and source-builds.</p>
<h2><a id="user-content-custom-installation" class="anchor" aria-hidden="true" href="#custom-installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Custom Installation</h2>
<p>To install custom built Clp binaries set the environmental variable <code>JULIA_CLP_LIBRARY_PATH</code> and call <code>import Pkg; Pkg.build("Clp")</code>. For instance, if the libraries are installed in <code>/opt/lib</code>, then call</p>
<div class="highlight highlight-source-julia"><pre>ENV[<span class="pl-s"><span class="pl-pds">"</span>JULIA_CLP_LIBRARY_PATH<span class="pl-pds">"</span></span>] <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>/opt/lib<span class="pl-pds">"</span></span>
<span class="pl-k">import</span> Pkg; Pkg<span class="pl-k">.</span><span class="pl-c1">build</span>(<span class="pl-s"><span class="pl-pds">"</span>Clp<span class="pl-pds">"</span></span>)</pre></div>
<p>If you do not want BinaryProvider to download the default binaries on install, set <code>JULIA_CLP_LIBRARY_PATH</code> before calling <code>import Pkg; Pkg.add("Clp")</code>.</p>
<p>To switch back to the default binaries clear <code>JULIA_CLP_LIBRARY_PATH</code> and call <code>import Pkg; Pkg.build("Clp")</code>.</p>
<h3><a id="user-content-using-with-jump" class="anchor" aria-hidden="true" href="#using-with-jump"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Using with <strong><a href="https://github.com/jump-dev/JuMP.jl">JuMP</a></strong></h3>
<p>Due to some restrictions in Clp's C api, the Clp's MathOptInterface wrapper does not support directly modifying a problem after it has been created, e.g., changing variable bounds or modifying constraints coefficients.</p>
<p>Therefore, we highly recommend that you use the <code>Clp.jl</code> package with higher-level package such as <a href="https://github.com/jump-dev/JuMP.jl">JuMP.jl</a>.
This can be done with following syntax:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> JuMP, Clp

model <span class="pl-k">=</span> <span class="pl-c1">Model</span>(Clp<span class="pl-k">.</span>Optimizer)
<span class="pl-c1">set_optimizer_attribute</span>(model, <span class="pl-s"><span class="pl-pds">"</span>LogLevel<span class="pl-pds">"</span></span>, <span class="pl-c1">1</span>)
<span class="pl-c1">set_optimizer_attribute</span>(model, <span class="pl-s"><span class="pl-pds">"</span>Algorithm<span class="pl-pds">"</span></span>, <span class="pl-c1">4</span>)</pre></div>
<p>See the list of options below.</p>
<p>Furthermore, the following features are not supported:</p>
<ul>
<li>Querying the dual bound via <code>JuMP.objective_bound</code> (not in the C API)</li>
<li>Setting a time limit (the C API behaves inconsistently, see <a href="https://github.com/jump-dev/Clp.jl/issues/65">#65</a>)</li>
<li>Setting the number of threads used (not in the C API)</li>
<li>Quadratic objective (not supported yet)</li>
</ul>
<h3><a id="user-content-solver-options" class="anchor" aria-hidden="true" href="#solver-options"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Solver options</h3>
<p>The following options are the most useful (and well documented):</p>
<table>
<thead>
<tr>
<th align="left">Parameter</th>
<th align="left">Default value</th>
<th align="left">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left"><code>PrimalTolerance</code></td>
<td align="left"><code>1e-7</code></td>
<td align="left">Primal feasibility tolerance</td>
</tr>
<tr>
<td align="left"><code>DualTolerance</code></td>
<td align="left"><code>1e-7</code></td>
<td align="left">Dual feasibility tolerance</td>
</tr>
<tr>
<td align="left"><code>DualObjectiveLimit</code></td>
<td align="left"><code>1e308</code></td>
<td align="left">When using dual simplex (where the objective is monotonically changing), terminate when the objective exceeds this limit</td>
</tr>
<tr>
<td align="left"><code>MaximumIterations</code></td>
<td align="left"><code>2147483647</code></td>
<td align="left">Terminate after performing this number of simplex iterations</td>
</tr>
<tr>
<td align="left"><code>MaximumSeconds</code></td>
<td align="left"><code>-1.0</code></td>
<td align="left">Terminate after this many seconds have passed. A negative value means no time limit</td>
</tr>
<tr>
<td align="left"><code>LogLevel</code></td>
<td align="left"><code>1</code></td>
<td align="left">Set to 1, 2, 3, or 4 for increasing output. Set to <code>0</code> to disable output</td>
</tr>
<tr>
<td align="left"><code>PresolveType</code></td>
<td align="left"><code>0</code></td>
<td align="left">Set to 1 to disable presolve</td>
</tr>
<tr>
<td align="left"><code>SolveType</code></td>
<td align="left"><code>5</code></td>
<td align="left">Solution method: dual simplex (<code>0</code>), primal simplex (<code>1</code>), sprint (<code>2</code>), barrier with crossover (<code>3</code>), barrier without crossover (<code>4</code>), automatic (<code>5</code>)</td>
</tr>
<tr>
<td align="left"><code>InfeasibleReturn</code></td>
<td align="left"><code>0</code></td>
<td align="left">Set to 1 to return as soon as the problem is found to be infeasible (by default, an infeasibility proof is computed as well)</td>
</tr>
</tbody>
</table>
</article></div>