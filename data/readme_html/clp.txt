<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-coin-or-linear-programming-interface-clpjl" class="anchor" aria-hidden="true" href="#coin-or-linear-programming-interface-clpjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>COIN-OR Linear Programming Interface (Clp.jl)</h1>
<p><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/cd8e4605c574a186f0227b09e654d1b12c1d4fb2/68747470733a2f2f7777772e636f696e2d6f722e6f72672f776f726470726573732f77702d636f6e74656e742f75706c6f6164732f323031342f30382f434f494e4f522e706e67"><img src="https://camo.githubusercontent.com/cd8e4605c574a186f0227b09e654d1b12c1d4fb2/68747470733a2f2f7777772e636f696e2d6f722e6f72672f776f726470726573732f77702d636f6e74656e742f75706c6f6164732f323031342f30382f434f494e4f522e706e67" alt="" data-canonical-src="https://www.coin-or.org/wordpress/wp-content/uploads/2014/08/COINOR.png" style="max-width:100%;"></a></p>
<p><code>Clp.jl</code> is an interface to the <strong><a href="https://projects.coin-or.org/Clp" rel="nofollow">COIN-OR Linear
Programming</a></strong> solver. It provides a complete
interface to the low-level C API, as well as an implementation of the
solver-independent <code>MathProgBase</code> and <code>MathOptInterface</code> API's.</p>
<p><em>Note: This wrapper is maintained by the JuliaOpt community and is not a COIN-OR
project.</em></p>
<p><a href="https://travis-ci.org/JuliaOpt/Clp.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/0e9e3a9d7a68d76a2d8b8574365039137998e07f/68747470733a2f2f7472617669732d63692e6f72672f4a756c69614f70742f436c702e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaOpt/Clp.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/JuliaOpt/Clp.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/586bcc65cef54e25dcb1f5c84b9294a25d9494f3/68747470733a2f2f636f6465636f762e696f2f67682f4a756c69614f70742f436c702e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/JuliaOpt/Clp.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Installation</h2>
<p>The package is registered in <code>METADATA.jl</code> and so can be installed with <code>Pkg.add</code>.</p>
<pre><code>julia&gt; import Pkg; Pkg.add("Clp")
</code></pre>
<p>Clp.jl will use <a href="https://github.com/JuliaPackaging/BinaryProvider.jl">BinaryProvider.jl</a> to automatically install the Clp binaries. This should work for both the official Julia binaries from <code>https://julialang.org/downloads/</code> and source-builds.</p>
<h2><a id="user-content-custom-installation" class="anchor" aria-hidden="true" href="#custom-installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Custom Installation</h2>
<p>To install custom built Clp binaries set the environmental variable <code>JULIA_CLP_LIBRARY_PATH</code> and call <code>import Pkg; Pkg.build("Clp")</code>. For instance, if the libraries are installed in <code>/opt/lib</code>, then call</p>
<div class="highlight highlight-source-julia"><pre>ENV[<span class="pl-s"><span class="pl-pds">"</span>JULIA_CLP_LIBRARY_PATH<span class="pl-pds">"</span></span>] <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>/opt/lib<span class="pl-pds">"</span></span>
<span class="pl-k">import</span> Pkg; Pkg<span class="pl-k">.</span><span class="pl-c1">build</span>(<span class="pl-s"><span class="pl-pds">"</span>Clp<span class="pl-pds">"</span></span>)</pre></div>
<p>If you do not want BinaryProvider to download the default binaries on install, set <code>JULIA_CLP_LIBRARY_PATH</code> before calling <code>import Pkg; Pkg.add("Clp")</code>.</p>
<p>To switch back to the default binaries clear <code>JULIA_CLP_LIBRARY_PATH</code> and call <code>import Pkg; Pkg.build("Clp")</code>.</p>
<h3><a id="user-content-using-with-jump" class="anchor" aria-hidden="true" href="#using-with-jump"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Using with <strong><a href="https://github.com/JuliaOpt/JuMP.jl">JuMP</a></strong></h3>
<p>Due to some restrictions in Clp's C api, the Clp's MathOptInterface wrapper does not support directly modifying a problem after it has been created, e.g., changing variable bounds or modifying constraints coefficients.</p>
<p>Therefore, we highly recommend that you use the <code>Clp.jl</code> package with higher-level package such as <a href="https://github.com/JuliaOpt/JuMP.jl">JuMP.jl</a>.
This can be done with following syntax:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> JuMP, Clp

model <span class="pl-k">=</span> <span class="pl-c1">Model</span>(<span class="pl-c1">with_optimizer</span>(Clp<span class="pl-k">.</span>Optimizer, LogLevel<span class="pl-k">=</span><span class="pl-c1">1</span>, Algorithm<span class="pl-k">=</span><span class="pl-c1">4</span>))</pre></div>
<p>See the list of options below.</p>
<p>Furthermore, the following features are not supported:</p>
<ul>
<li>Querying the dual bound via <code>JuMP.objective_bound</code> (not in the C API)</li>
<li>Setting a time limit (the C API behaves inconsistently, see <a href="https://github.com/JuliaOpt/Clp.jl/issues/65">#65</a>)</li>
<li>Setting the number of threads used (not in the C API)</li>
<li>Quadratic objective (not supported yet)</li>
<li>Querying infeasibility certificates (bug in Clp)</li>
</ul>
<h3><a id="user-content-using-with-mathprogbase" class="anchor" aria-hidden="true" href="#using-with-mathprogbase"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Using with <strong><a href="https://github.com/JuliaOpt/MathProgBase.jl">MathProgBase</a></strong></h3>
<p>Clp provides a solver object that can be passed to <code>linprog</code> in MathProgBase (and used to create instances of the solver-independent <code>AbstractMathProgModel</code> type):</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> Clp
<span class="pl-k">using</span> MathProgBase
<span class="pl-c1">linprog</span>(<span class="pl-k">...</span>, <span class="pl-c1">ClpSolver</span>(Option1<span class="pl-k">=</span>value1,Option2<span class="pl-k">=</span>value2,<span class="pl-k">...</span>))</pre></div>
<p>See the list of options below, and the MathProgBase documentation for further information.</p>
<h3><a id="user-content-using-the-c-interface" class="anchor" aria-hidden="true" href="#using-the-c-interface"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Using the C interface</h3>
<p>The low-level C interface is available in the <code>ClpCInterface</code> submodule:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> Clp<span class="pl-k">.</span>ClpCInterface</pre></div>
<p>Using this interface is only recommended for advanced users. The Julia API is essentially a thin wrapper around the interface exported by <code>Clp/src/Clp_C_Interface.h</code>, which is documented in-line.</p>
<h3><a id="user-content-solver-options" class="anchor" aria-hidden="true" href="#solver-options"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Solver options</h3>
<p>Options are solver-dependent. The following options are the most useful (and well documented):</p>
<ul>
<li>
<p><code>PrimalTolerance</code> - primal feasibility tolerance (default 1e-7)</p>
</li>
<li>
<p><code>DualTolerance</code> - dual feasibility tolerance (default 1e-7)</p>
</li>
<li>
<p><code>DualObjectiveLimit</code> - when using dual simplex (where the objective is monotonically changing), terminate when the objective exceeds this limit</p>
</li>
<li>
<p><code>MaximumIterations</code> - terminate after performing this number of simplex iterations</p>
</li>
<li>
<p><code>MaximumSeconds</code> - terminate after this many seconds have passed</p>
</li>
<li>
<p><code>LogLevel</code> - set to 1, 2, 3, or 4 for increasing output (default 0)</p>
</li>
<li>
<p><code>PresolveType</code> - set to 1 to disable presolve</p>
</li>
<li>
<p><code>SolveType</code> - choose the solution method:</p>
<ul>
<li>0 - dual simplex</li>
<li>1 - primal simplex</li>
<li>3 - barrier with crossover to optimal basis</li>
<li>4 - barrier without crossover to optimal basis</li>
<li>5 - automatic</li>
</ul>
</li>
<li>
<p><code>InfeasibleReturn</code> - set to 1 to return as soon as the problem is found to be infeasible (by default, an infeasibility proof is computed as well)</p>
</li>
</ul>
</article></div>