<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-resulttypes" class="anchor" aria-hidden="true" href="#resulttypes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>ResultTypes</h1>
<p><a href="https://iamed2.github.io/ResultTypes.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/f7b92a177c912c1cc007fc9b40f17ff3ee3bb414/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://iamed2.github.io/ResultTypes.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/3e353c26ddfe819150acbc732248f4f2a37f5175/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a>
<a href="https://travis-ci.com/iamed2/ResultTypes.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/8a2494d9533ee6af44a7e55399a49c8d96e0bd55/68747470733a2f2f7472617669732d63692e636f6d2f69616d6564322f526573756c7454797065732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/iamed2/ResultTypes.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/iamed2/ResultTypes.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/4a1fe3704ed5d6e76df91b977502305d1b3e7ff9/68747470733a2f2f636f6465636f762e696f2f67682f69616d6564322f526573756c7454797065732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/iamed2/ResultTypes.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p>ResultTypes provides a <code>Result</code> type which can hold either a value or an error.
This allows us to return a value or an error in a type-stable manner without throwing an exception.</p>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Usage</h2>
<h3><a id="user-content-basic" class="anchor" aria-hidden="true" href="#basic"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Basic</h3>
<p>We can construct a <code>Result</code> that holds a value:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> x <span class="pl-k">=</span> <span class="pl-c1">Result</span>(<span class="pl-c1">2</span>); <span class="pl-c1">typeof</span>(x)
ResultTypes<span class="pl-k">.</span>Result{Int64,ErrorException}</pre></div>
<p>or a <code>Result</code> that holds an error:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> x <span class="pl-k">=</span> <span class="pl-c1">ErrorResult</span>(Int, <span class="pl-s"><span class="pl-pds">"</span>Oh noes!<span class="pl-pds">"</span></span>); <span class="pl-c1">typeof</span>(x)
ResultTypes<span class="pl-k">.</span>Result{Int64,ErrorException}</pre></div>
<p>or either with a different error type:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> x <span class="pl-k">=</span> <span class="pl-c1">Result</span>(<span class="pl-c1">2</span>, DivideError); <span class="pl-c1">typeof</span>(x)
ResultTypes<span class="pl-k">.</span>Result{Int64,DivideError}

julia<span class="pl-k">&gt;</span> x <span class="pl-k">=</span> <span class="pl-c1">ErrorResult</span>(Int, <span class="pl-c1">DivideError</span>()); <span class="pl-c1">typeof</span>(x)
ResultTypes<span class="pl-k">.</span>Result{Int64,DivideError}</pre></div>
<h3><a id="user-content-exploiting-function-return-types" class="anchor" aria-hidden="true" href="#exploiting-function-return-types"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Exploiting Function Return Types</h3>
<p>We can take advantage of automatic conversions in function returns (a Julia 0.5 feature):</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">function</span> <span class="pl-en">integer_division</span>(x<span class="pl-k">::</span><span class="pl-c1">Int</span>, y<span class="pl-k">::</span><span class="pl-c1">Int</span>)<span class="pl-k">::</span><span class="pl-c1">Result{Int, DivideError}</span>
    <span class="pl-k">if</span> y <span class="pl-k">==</span> <span class="pl-c1">0</span>
        <span class="pl-k">return</span> <span class="pl-c1">DivideError</span>()
    <span class="pl-k">else</span>
        <span class="pl-k">return</span> <span class="pl-c1">div</span>(x, y)
    <span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>
<p>This allows us to write code in the body of the function that returns either a value or an error without manually constructing <code>Result</code> types.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">integer_division</span>(<span class="pl-c1">3</span>, <span class="pl-c1">4</span>)
<span class="pl-c1">Result</span>(<span class="pl-c1">0</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">integer_division</span>(<span class="pl-c1">3</span>, <span class="pl-c1">0</span>)
<span class="pl-c1">ErrorResult</span>(Int64, <span class="pl-c1">DivideError</span>())</pre></div>
<h2><a id="user-content-evidence-of-benefits" class="anchor" aria-hidden="true" href="#evidence-of-benefits"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Evidence of Benefits</h2>
<h3><a id="user-content-theoretical" class="anchor" aria-hidden="true" href="#theoretical"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Theoretical</h3>
<p>Using the function above, we can use <code>@code_warntype</code> to verify that the compiler is doing what we desire:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">@code_warntype</span> <span class="pl-c1">integer_division</span>(<span class="pl-c1">3</span>, <span class="pl-c1">2</span>)
Body<span class="pl-k">::</span><span class="pl-c1">Result{Int64,DivideError}</span>
<span class="pl-c1">2</span> <span class="pl-c1">1</span> ─ <span class="pl-k">%</span><span class="pl-c1">1</span> <span class="pl-k">=</span> (y <span class="pl-k">===</span> <span class="pl-c1">0</span>)<span class="pl-k">::</span><span class="pl-c1">Bool</span>                                                                                       │╻     <span class="pl-k">==</span>
  └──      goto <span class="pl-c"><span class="pl-c">#</span>3 if not %1                                                                                     │</span>
<span class="pl-c1">3</span> <span class="pl-c1">2</span> ─ <span class="pl-k">%</span><span class="pl-c1">3</span> <span class="pl-k">=</span> <span class="pl-k">%</span><span class="pl-c1">new</span>(Result{Int64,DivideError}, <span class="pl-c1">nothing</span>, <span class="pl-k">$</span>(<span class="pl-c1">QuoteNode</span>(<span class="pl-c1">DivideError</span>())))<span class="pl-k">::</span><span class="pl-c1">Result{Int64,DivideError}</span>      │╻╷    convert
  └──      <span class="pl-k">return</span> <span class="pl-k">%</span><span class="pl-c1">3</span>                                                                                             │
<span class="pl-c1">5</span> <span class="pl-c1">3</span> ─ <span class="pl-k">%</span><span class="pl-c1">5</span> <span class="pl-k">=</span> (Base<span class="pl-k">.</span>checked_sdiv_int)(x, y)<span class="pl-k">::</span><span class="pl-c1">Int64</span>                                                                  │╻     div
  │   <span class="pl-k">%</span><span class="pl-c1">6</span> <span class="pl-k">=</span> <span class="pl-k">%</span><span class="pl-c1">new</span>(Some{Int64}, <span class="pl-k">%</span><span class="pl-c1">5</span>)<span class="pl-k">::</span><span class="pl-c1">Some{Int64}</span>                                                                    ││╻╷╷╷  Type
  │   <span class="pl-k">%</span><span class="pl-c1">7</span> <span class="pl-k">=</span> <span class="pl-k">%</span><span class="pl-c1">new</span>(Result{Int64,DivideError}, <span class="pl-k">%</span><span class="pl-c1">6</span>, <span class="pl-c1">nothing</span>)<span class="pl-k">::</span><span class="pl-c1">Result{Int64,DivideError}</span>                               │││
  └──      <span class="pl-k">return</span> <span class="pl-k">%</span><span class="pl-c1">7</span>                                                                                             │</pre></div>
<h3><a id="user-content-experimental" class="anchor" aria-hidden="true" href="#experimental"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Experimental</h3>
<p>Suppose we have two versions of a function where one returns a value or throws an exception and the other returns a <code>Result</code> type.
We want to call the function and return the value if present or a default value if there was an error.
For this example we can use <code>div</code> and our <code>integer_division</code> function as a microbenchmark (they are too simple to provide a realistic use case).
We'll use <code>@noinline</code> to ensure the functions don't get inlined, which will make the benchmarks more comparable.</p>
<p>Here's our wrapping function for <code>div</code>:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">@noinline</span> <span class="pl-k">function</span> <span class="pl-en">func1</span>(x, y)
    <span class="pl-k">local</span> z
    <span class="pl-k">try</span>
        z <span class="pl-k">=</span> <span class="pl-c1">div</span>(x, y)
    <span class="pl-k">catch</span> e
        z <span class="pl-k">=</span> <span class="pl-c1">0</span>
    <span class="pl-k">end</span>
    <span class="pl-k">return</span> z
<span class="pl-k">end</span></pre></div>
<p>and for <code>integer_division</code>:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">@noinline</span> <span class="pl-k">function</span> <span class="pl-en">func2</span>(x, y)
    r <span class="pl-k">=</span> <span class="pl-c1">integer_division</span>(x, y)
    <span class="pl-k">if</span> ResultTypes<span class="pl-k">.</span><span class="pl-c1">iserror</span>(r)
        <span class="pl-k">return</span> <span class="pl-c1">0</span>
    <span class="pl-k">else</span>
        <span class="pl-k">return</span> <span class="pl-c1">unwrap</span>(r)
    <span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>
<p>Here are some benchmark results in the average case (on one machine), using <a href="https://github.com/JuliaCI/BenchmarkTools.jl">BenchmarkTools.jl</a>:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> BenchmarkTools, Statistics

julia<span class="pl-k">&gt;</span> t1 <span class="pl-k">=</span> <span class="pl-c1">@benchmark</span> <span class="pl-k">for</span> i <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span> <span class="pl-c1">func1</span>(<span class="pl-c1">3</span>, i <span class="pl-k">%</span> <span class="pl-c1">2</span>) <span class="pl-k">end</span>
BenchmarkTools<span class="pl-k">.</span>Trial<span class="pl-k">:</span>
  memory estimate<span class="pl-k">:</span>  <span class="pl-c1">0</span> bytes
  allocs estimate<span class="pl-k">:</span>  <span class="pl-c1">0</span>
  <span class="pl-k">--------------</span>
  minimum time<span class="pl-k">:</span>     <span class="pl-c1">121.664</span> μs (<span class="pl-c1">0.00</span><span class="pl-k">%</span> GC)
  median time<span class="pl-k">:</span>      <span class="pl-c1">122.652</span> μs (<span class="pl-c1">0.00</span><span class="pl-k">%</span> GC)
  mean time<span class="pl-k">:</span>        <span class="pl-c1">124.350</span> μs (<span class="pl-c1">0.00</span><span class="pl-k">%</span> GC)
  maximum time<span class="pl-k">:</span>     <span class="pl-c1">388.198</span> μs (<span class="pl-c1">0.00</span><span class="pl-k">%</span> GC)
  <span class="pl-k">--------------</span>
  samples<span class="pl-k">:</span>          <span class="pl-c1">10000</span>
  evals<span class="pl-k">/</span>sample<span class="pl-k">:</span>     <span class="pl-c1">1</span>

julia<span class="pl-k">&gt;</span> t2 <span class="pl-k">=</span> <span class="pl-c1">@benchmark</span> <span class="pl-k">for</span> i <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span> <span class="pl-c1">func2</span>(<span class="pl-c1">3</span>, i <span class="pl-k">%</span> <span class="pl-c1">2</span>) <span class="pl-k">end</span>
BenchmarkTools<span class="pl-k">.</span>Trial<span class="pl-k">:</span>
  memory estimate<span class="pl-k">:</span>  <span class="pl-c1">0</span> bytes
  allocs estimate<span class="pl-k">:</span>  <span class="pl-c1">0</span>
  <span class="pl-k">--------------</span>
  minimum time<span class="pl-k">:</span>     <span class="pl-c1">18.853</span> ns (<span class="pl-c1">0.00</span><span class="pl-k">%</span> GC)
  median time<span class="pl-k">:</span>      <span class="pl-c1">21.078</span> ns (<span class="pl-c1">0.00</span><span class="pl-k">%</span> GC)
  mean time<span class="pl-k">:</span>        <span class="pl-c1">21.183</span> ns (<span class="pl-c1">0.00</span><span class="pl-k">%</span> GC)
  maximum time<span class="pl-k">:</span>     <span class="pl-c1">275.057</span> ns (<span class="pl-c1">0.00</span><span class="pl-k">%</span> GC)
  <span class="pl-k">--------------</span>
  samples<span class="pl-k">:</span>          <span class="pl-c1">10000</span>
  evals<span class="pl-k">/</span>sample<span class="pl-k">:</span>     <span class="pl-c1">997</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">judge</span>(<span class="pl-c1">mean</span>(t2), <span class="pl-c1">mean</span>(t1))
BenchmarkTools<span class="pl-k">.</span>TrialJudgement<span class="pl-k">:</span>
  time<span class="pl-k">:</span>   <span class="pl-k">-</span><span class="pl-c1">99.98</span><span class="pl-k">%</span> <span class="pl-k">=&gt;</span> improvement (<span class="pl-c1">5.00</span><span class="pl-k">%</span> tolerance)
  memory<span class="pl-k">:</span> <span class="pl-k">+</span><span class="pl-c1">0.00</span><span class="pl-k">%</span> <span class="pl-k">=&gt;</span> invariant (<span class="pl-c1">1.00</span><span class="pl-k">%</span> tolerance)</pre></div>
<p>As we can see, we get a huge speed improvement without allocating any extra heap memory.</p>
<p>It's also interesting to look at the cost when no error occurs:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> t1 <span class="pl-k">=</span> <span class="pl-c1">@benchmark</span> <span class="pl-k">for</span> i <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span> <span class="pl-c1">func1</span>(<span class="pl-c1">3</span>, <span class="pl-c1">1</span>) <span class="pl-k">end</span>
BenchmarkTools<span class="pl-k">.</span>Trial<span class="pl-k">:</span>
  memory estimate<span class="pl-k">:</span>  <span class="pl-c1">0</span> bytes
  allocs estimate<span class="pl-k">:</span>  <span class="pl-c1">0</span>
  <span class="pl-k">--------------</span>
  minimum time<span class="pl-k">:</span>     <span class="pl-c1">115.060</span> ns (<span class="pl-c1">0.00</span><span class="pl-k">%</span> GC)
  median time<span class="pl-k">:</span>      <span class="pl-c1">118.042</span> ns (<span class="pl-c1">0.00</span><span class="pl-k">%</span> GC)
  mean time<span class="pl-k">:</span>        <span class="pl-c1">118.616</span> ns (<span class="pl-c1">0.00</span><span class="pl-k">%</span> GC)
  maximum time<span class="pl-k">:</span>     <span class="pl-c1">279.901</span> ns (<span class="pl-c1">0.00</span><span class="pl-k">%</span> GC)
  <span class="pl-k">--------------</span>
  samples<span class="pl-k">:</span>          <span class="pl-c1">10000</span>
  evals<span class="pl-k">/</span>sample<span class="pl-k">:</span>     <span class="pl-c1">918</span>

julia<span class="pl-k">&gt;</span> t2 <span class="pl-k">=</span> <span class="pl-c1">@benchmark</span> <span class="pl-k">for</span> i <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span> <span class="pl-c1">func2</span>(<span class="pl-c1">3</span>, <span class="pl-c1">1</span>) <span class="pl-k">end</span>
BenchmarkTools<span class="pl-k">.</span>Trial<span class="pl-k">:</span>
  memory estimate<span class="pl-k">:</span>  <span class="pl-c1">0</span> bytes
  allocs estimate<span class="pl-k">:</span>  <span class="pl-c1">0</span>
  <span class="pl-k">--------------</span>
  minimum time<span class="pl-k">:</span>     <span class="pl-c1">28.775</span> ns (<span class="pl-c1">0.00</span><span class="pl-k">%</span> GC)
  median time<span class="pl-k">:</span>      <span class="pl-c1">30.516</span> ns (<span class="pl-c1">0.00</span><span class="pl-k">%</span> GC)
  mean time<span class="pl-k">:</span>        <span class="pl-c1">31.290</span> ns (<span class="pl-c1">0.00</span><span class="pl-k">%</span> GC)
  maximum time<span class="pl-k">:</span>     <span class="pl-c1">74.936</span> ns (<span class="pl-c1">0.00</span><span class="pl-k">%</span> GC)
  <span class="pl-k">--------------</span>
  samples<span class="pl-k">:</span>          <span class="pl-c1">10000</span>
  evals<span class="pl-k">/</span>sample<span class="pl-k">:</span>     <span class="pl-c1">995</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">judge</span>(<span class="pl-c1">mean</span>(t2), <span class="pl-c1">mean</span>(t1))
BenchmarkTools<span class="pl-k">.</span>TrialJudgement<span class="pl-k">:</span>
  time<span class="pl-k">:</span>   <span class="pl-k">-</span><span class="pl-c1">73.62</span><span class="pl-k">%</span> <span class="pl-k">=&gt;</span> improvement (<span class="pl-c1">5.00</span><span class="pl-k">%</span> tolerance)
  memory<span class="pl-k">:</span> <span class="pl-k">+</span><span class="pl-c1">0.00</span><span class="pl-k">%</span> <span class="pl-k">=&gt;</span> invariant (<span class="pl-c1">1.00</span><span class="pl-k">%</span> tolerance)</pre></div>
<p>It's <em>still faster</em> to avoid <code>try</code> and use <code>Result</code>, even when the error condition is never triggered.</p>
</article></div>