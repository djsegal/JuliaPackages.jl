<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-countriesjl" class="anchor" aria-hidden="true" href="#countriesjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Countries.jl</h1>
<p dir="auto"><a href="https://www.repostatus.org/#active" rel="nofollow"><img src="https://camo.githubusercontent.com/2261082c77808ea734741b12e535d02d23c4101f6b8dfec807f4ddc5ef2eeec0/68747470733a2f2f7777772e7265706f7374617475732e6f72672f6261646765732f6c61746573742f6163746976652e737667" alt="Project Status: Active â€“ The project has reached a stable, usable state and is being actively developed." data-canonical-src="https://www.repostatus.org/badges/latest/active.svg" style="max-width: 100%;"></a>
<a href="https://github.com/cjdoris/Countries.jl/actions?query=workflow%3ATests"><img src="https://github.com/cjdoris/Countries.jl/workflows/Tests/badge.svg" alt="Test Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/cjdoris/Countries.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/432eb6889e87cf81e625b4fbc48ad107b75c0a63599dcbec23c57d5c95b14ff3/68747470733a2f2f636f6465636f762e696f2f67682f636a646f7269732f436f756e74726965732e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e7376673f746f6b656e3d4145434357474b52564a" alt="codecov" data-canonical-src="https://codecov.io/gh/cjdoris/Countries.jl/branch/main/graph/badge.svg?token=AECCWGKRVJ" style="max-width: 100%;"></a></p>
<p dir="auto">Julia package of information about countries, currencies and languages according to these
ISO standards:</p>
<ul dir="auto">
<li>ISO 3166-1: Countries.</li>
<li>ISO 3166-2: Country subdivisions.</li>
<li>ISO 4217: Currencies.</li>
<li>ISO 639-3: Languages.</li>
<li>ISO 15924: Scripts.</li>
</ul>
<p dir="auto">The data can be converted to any table type, allowing for easy integration into data
science workflows.</p>
<p dir="auto">The data is obtained from the Julia package
<a href="https://github.com/JuliaBinaryWrappers/iso_codes_jll.jl"><code>iso_codes_jll</code></a>
which makes available the data from the Debian package
<a href="https://packages.debian.org/sid/iso-codes" rel="nofollow"><code>iso-codes</code></a>.</p>
<h2 dir="auto"><a id="user-content-install" class="anchor" aria-hidden="true" href="#install"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Install</h2>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="pkg&gt; add Countries"><pre class="notranslate"><code>pkg&gt; add Countries
</code></pre></div>
<h2 dir="auto"><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example</h2>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; using Countries

julia&gt; all_countries()
249-element Vector{Country}:
 Country(&quot;AW&quot;, &quot;ABW&quot;, &quot;Aruba&quot;, 533, &quot;Aruba&quot;, &quot;Aruba&quot;, &quot;ðŸ‡¦ðŸ‡¼&quot;)
 Country(&quot;AF&quot;, &quot;AFG&quot;, &quot;Afghanistan&quot;, 4, &quot;Islamic Republic of Afghanistan&quot;, &quot;Afghanistan&quot;, &quot;ðŸ‡¦ðŸ‡«&quot;)
 â‹®
 Country(&quot;ZM&quot;, &quot;ZMB&quot;, &quot;Zambia&quot;, 894, &quot;Republic of Zambia&quot;, &quot;Zambia&quot;, &quot;ðŸ‡¿ðŸ‡²&quot;)
 Country(&quot;ZW&quot;, &quot;ZWE&quot;, &quot;Zimbabwe&quot;, 716, &quot;Republic of Zimbabwe&quot;, &quot;Zimbabwe&quot;, &quot;ðŸ‡¿ðŸ‡¼&quot;)

julia&gt; get_language(&quot;en&quot;)
Language(&quot;en&quot;, &quot;eng&quot;, &quot;English&quot;, &quot;I&quot;, &quot;L&quot;, &quot;English&quot;, &quot;English&quot;, &quot;eng&quot;)

julia&gt; filter(x-&gt;startswith(x.alpha4, &quot;La&quot;), all_scripts())
5-element Vector{Script}:
 Script(&quot;Lana&quot;, &quot;Tai Tham (Lanna)&quot;, 351)
 Script(&quot;Laoo&quot;, &quot;Lao&quot;, 356)
 Script(&quot;Latf&quot;, &quot;Latin (Fraktur variant)&quot;, 217)
 Script(&quot;Latg&quot;, &quot;Latin (Gaelic variant)&quot;, 216)
 Script(&quot;Latn&quot;, &quot;Latin&quot;, 215)

julia&gt; using DataFrames

julia&gt; DataFrame(all_currencies())
181Ã—3 DataFrame
 Row â”‚ alpha3  name                               numeric
     â”‚ String  String                             Int16
â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
   1 â”‚ AED     UAE Dirham                             784
   2 â”‚ AFN     Afghani                                971
  â‹®  â”‚   â‹®                     â‹®                     â‹®
 180 â”‚ ZMW     Zambian Kwacha                         967
 181 â”‚ ZWL     Zimbabwe Dollar                        932
 
 julia&gt; my_data = DataFrame(Country=[&quot;NGA&quot;, &quot;CA&quot;, &quot;KOR&quot;, &quot;NZ&quot;], Widgets=[400, 12000, 100, 3000])
4Ã—2 DataFrame
 Row â”‚ Country  Widgets
     â”‚ String   Int64
â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
   1 â”‚ NGA          400
   2 â”‚ CA         12000
   3 â”‚ KOR          100
   4 â”‚ NZ          3000

julia&gt; my_data.Country_Name = [x.name for x in get_country.(my_data.Country)];

julia&gt; my_data
4Ã—3 DataFrame
 Row â”‚ Country  Widgets  Country_Name
     â”‚ String   Int64    String
â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
   1 â”‚ NGA          400  Nigeria
   2 â”‚ CA         12000  Canada
   3 â”‚ KOR          100  Korea, Republic of
   4 â”‚ NZ          3000  New Zealand"><pre lang="julia-repl" class="notranslate"><code>julia&gt; using Countries

julia&gt; all_countries()
249-element Vector{Country}:
 Country("AW", "ABW", "Aruba", 533, "Aruba", "Aruba", "ðŸ‡¦ðŸ‡¼")
 Country("AF", "AFG", "Afghanistan", 4, "Islamic Republic of Afghanistan", "Afghanistan", "ðŸ‡¦ðŸ‡«")
 â‹®
 Country("ZM", "ZMB", "Zambia", 894, "Republic of Zambia", "Zambia", "ðŸ‡¿ðŸ‡²")
 Country("ZW", "ZWE", "Zimbabwe", 716, "Republic of Zimbabwe", "Zimbabwe", "ðŸ‡¿ðŸ‡¼")

julia&gt; get_language("en")
Language("en", "eng", "English", "I", "L", "English", "English", "eng")

julia&gt; filter(x-&gt;startswith(x.alpha4, "La"), all_scripts())
5-element Vector{Script}:
 Script("Lana", "Tai Tham (Lanna)", 351)
 Script("Laoo", "Lao", 356)
 Script("Latf", "Latin (Fraktur variant)", 217)
 Script("Latg", "Latin (Gaelic variant)", 216)
 Script("Latn", "Latin", 215)

julia&gt; using DataFrames

julia&gt; DataFrame(all_currencies())
181Ã—3 DataFrame
 Row â”‚ alpha3  name                               numeric
     â”‚ String  String                             Int16
â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
   1 â”‚ AED     UAE Dirham                             784
   2 â”‚ AFN     Afghani                                971
  â‹®  â”‚   â‹®                     â‹®                     â‹®
 180 â”‚ ZMW     Zambian Kwacha                         967
 181 â”‚ ZWL     Zimbabwe Dollar                        932
 
 julia&gt; my_data = DataFrame(Country=["NGA", "CA", "KOR", "NZ"], Widgets=[400, 12000, 100, 3000])
4Ã—2 DataFrame
 Row â”‚ Country  Widgets
     â”‚ String   Int64
â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
   1 â”‚ NGA          400
   2 â”‚ CA         12000
   3 â”‚ KOR          100
   4 â”‚ NZ          3000

julia&gt; my_data.Country_Name = [x.name for x in get_country.(my_data.Country)];

julia&gt; my_data
4Ã—3 DataFrame
 Row â”‚ Country  Widgets  Country_Name
     â”‚ String   Int64    String
â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
   1 â”‚ NGA          400  Nigeria
   2 â”‚ CA         12000  Canada
   3 â”‚ KOR          100  Korea, Republic of
   4 â”‚ NZ          3000  New Zealand
</code></pre></div>
<h2 dir="auto"><a id="user-content-exported-api" class="anchor" aria-hidden="true" href="#exported-api"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Exported API</h2>
<p dir="auto">For each supported ISO standard, this package exports:</p>
<ul dir="auto">
<li>a type (e.g. <code>Country</code>) to hold information about an instance from the standard;</li>
<li>a function (e.g. <code>all_countries</code>) returning a list of all instances; and</li>
<li>a lookup function (e.g. <code>get_country</code>) to get an instance from any of its codes.</li>
</ul>
<p dir="auto">Information about an instance can be obtained through its fields. All fields are strings,
except <code>numeric</code> which is an integer. Optional fields may also be <code>nothing</code>.</p>
<p dir="auto">The lists also satisfy the
<a href="https://github.com/JuliaData/Tables.jl"><code>Tables.jl</code></a>
interface, so can be converted to your favourite table type.</p>
<table>
<thead>
<tr>
<th>Standard</th>
<th>API</th>
<th>Fields</th>
</tr>
</thead>
<tbody>
<tr>
<td>ISO 3166-1: Countries</td>
<td><code>Country</code>, <code>all_countries</code>, <code>get_country</code></td>
<td><code>alpha2</code>, <code>alpha3</code>, <code>name</code>, <code>numeric</code>, <code>official_name</code>, <code>common_name</code>, <code>flag</code> (optional)</td>
</tr>
<tr>
<td>ISO 3166-2: Country Subdivisions</td>
<td><code>CountrySubdivision</code>, <code>all_country_subdivisions</code>, <code>get_country_subdivision</code></td>
<td><code>code</code>, <code>name</code>, <code>type</code>, <code>parent</code> (optional)</td>
</tr>
<tr>
<td>ISO 4217: Currencies</td>
<td><code>Currency</code>, <code>all_currencies</code>, <code>get_currency</code></td>
<td><code>alpha3</code>, <code>name</code>, <code>numeric</code></td>
</tr>
<tr>
<td>ISO 639-3: Languages</td>
<td><code>Language</code>, <code>all_languages</code>, <code>get_language</code></td>
<td><code>alpha2</code> (optional), <code>alpha3</code>, <code>name</code>, <code>scope</code>, <code>type</code>, <code>common_name</code>, <code>inverted_name</code>, <code>bibliographic</code></td>
</tr>
<tr>
<td>ISO 15924: Scripts</td>
<td><code>Script</code>, <code>all_scripts</code>, <code>get_script</code></td>
<td><code>alpha4</code>, <code>name</code>, <code>numeric</code></td>
</tr>
</tbody>
</table>
</article></div>