<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-cryogridjl" class="anchor" aria-hidden="true" href="#cryogridjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>CryoGrid.jl</h1>
<p dir="auto"><a href="https://cryogrid.github.io/CryoGrid.jl/dev/" rel="nofollow"><img src="https://camo.githubusercontent.com/56f8252ba8e9d3f0b810769543f77823d2fe031ce560d4c2d69fb1fcad800383/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6c61746573742d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-latest-blue.svg" style="max-width: 100%;"></a></p>
<p dir="auto">Julia implementation of the CryoGrid permafrost model using <code>DifferentialEquations.jl</code> and the <a href="https://github.com/SciML">SciML</a>
package ecosystem.</p>
<p dir="auto">Part of the broader research project: <a href="https://drive.google.com/file/d/1wB_EXtlO_PMXFSzZ-bRV8cg0a0DGDtAB/view?usp=sharing" rel="nofollow">Quantifying and explaining uncertainty in permafrost modeling under a warming climate</a></p>
<p dir="auto">Author: Brian Groenke (<a href="mailto:brian.groenke@awi.de">brian.groenke@awi.de</a>)</p>
<h3 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h3>
<p dir="auto"><code>CryoGrid.jl</code> can be installed via the Julia package manager:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="add https://gitlab.awi.de/sparcs/cryogrid/cryogridjulia"><pre class="notranslate"><code>add https://gitlab.awi.de/sparcs/cryogrid/cryogridjulia
</code></pre></div>
<p dir="auto">or equivalently in code/REPL:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="import Pkg
Pkg.add(url=&quot;https://gitlab.awi.de/sparcs/cryogrid/cryogridjulia&quot;)"><pre><span class="pl-k">import</span> Pkg
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(url<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>https://gitlab.awi.de/sparcs/cryogrid/cryogridjulia<span class="pl-pds">"</span></span>)</pre></div>
<h3 dir="auto"><a id="user-content-quick-start" class="anchor" aria-hidden="true" href="#quick-start"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Quick start</h3>
<p dir="auto">Single layer heat conduction model with free water freeze curve and air temperature upper boundary condition:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using CryoGrid
using Plots

# load provided forcing data from Samoylov;
# The forcing file will be automatically downloaded to the input/ folder if not already present.
forcings = loadforcings(CryoGrid.Presets.Forcings.Samoylov_ERA_obs_fitted_1979_2014_spinup_extended_2044);
# get preset soil and initial temperature profile for Samoylov
soilprofile, tempprofile = CryoGrid.Presets.SamoylovDefault
initT = initializer(:T, tempprofile)
# choose grid with 5cm spacing
grid = CryoGrid.Presets.DefaultGrid_5cm
# basic 1-layer heat conduction model (defaults to free water freezing scheme)
tile = CryoGrid.Presets.SoilHeatTile(TemperatureGradient(forcings.Tair), GeothermalHeatFlux(0.053u&quot;W/m^2&quot;), soilprofile, initT, grid=grid)
# define time span (1 year)
tspan = (DateTime(2010,11,30),DateTime(2011,11,30))
u0, du0 = initialcondition!(tile, tspan)
# CryoGrid front-end for ODEProblem
prob = CryoGridProblem(tile, u0, tspan, savevars=(:T,))
# solve discretized system, saving every 3 hours;
# Trapezoid on a discretized PDE is analogous to the well known Crank-Nicolson method.
out = @time solve(prob, Trapezoid(), saveat=3*3600.0, progress=true) |&gt; CryoGridOutput;
zs = [2,7,12,22,32,42,50,100,500]u&quot;cm&quot;
cg = Plots.cgrad(:copper,rev=true)
plot(out.T[Z(Near(zs))], color=cg[LinRange(0.0,1.0,length(zs))]', ylabel=&quot;Temperature&quot;, leg=false)"><pre><span class="pl-k">using</span> CryoGrid
<span class="pl-k">using</span> Plots

<span class="pl-c"><span class="pl-c">#</span> load provided forcing data from Samoylov;</span>
<span class="pl-c"><span class="pl-c">#</span> The forcing file will be automatically downloaded to the input/ folder if not already present.</span>
forcings <span class="pl-k">=</span> <span class="pl-c1">loadforcings</span>(CryoGrid<span class="pl-k">.</span>Presets<span class="pl-k">.</span>Forcings<span class="pl-k">.</span>Samoylov_ERA_obs_fitted_1979_2014_spinup_extended_2044);
<span class="pl-c"><span class="pl-c">#</span> get preset soil and initial temperature profile for Samoylov</span>
soilprofile, tempprofile <span class="pl-k">=</span> CryoGrid<span class="pl-k">.</span>Presets<span class="pl-k">.</span>SamoylovDefault
initT <span class="pl-k">=</span> <span class="pl-c1">initializer</span>(<span class="pl-c1">:T</span>, tempprofile)
<span class="pl-c"><span class="pl-c">#</span> choose grid with 5cm spacing</span>
grid <span class="pl-k">=</span> CryoGrid<span class="pl-k">.</span>Presets<span class="pl-k">.</span>DefaultGrid_5cm
<span class="pl-c"><span class="pl-c">#</span> basic 1-layer heat conduction model (defaults to free water freezing scheme)</span>
tile <span class="pl-k">=</span> CryoGrid<span class="pl-k">.</span>Presets<span class="pl-k">.</span><span class="pl-c1">SoilHeatTile</span>(<span class="pl-c1">TemperatureGradient</span>(forcings<span class="pl-k">.</span>Tair), <span class="pl-c1">GeothermalHeatFlux</span>(<span class="pl-c1">0.053</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>W/m^2<span class="pl-pds">"</span></span>), soilprofile, initT, grid<span class="pl-k">=</span>grid)
<span class="pl-c"><span class="pl-c">#</span> define time span (1 year)</span>
tspan <span class="pl-k">=</span> (<span class="pl-c1">DateTime</span>(<span class="pl-c1">2010</span>,<span class="pl-c1">11</span>,<span class="pl-c1">30</span>),<span class="pl-c1">DateTime</span>(<span class="pl-c1">2011</span>,<span class="pl-c1">11</span>,<span class="pl-c1">30</span>))
u0, du0 <span class="pl-k">=</span> <span class="pl-c1">initialcondition!</span>(tile, tspan)
<span class="pl-c"><span class="pl-c">#</span> CryoGrid front-end for ODEProblem</span>
prob <span class="pl-k">=</span> <span class="pl-c1">CryoGridProblem</span>(tile, u0, tspan, savevars<span class="pl-k">=</span>(<span class="pl-c1">:T</span>,))
<span class="pl-c"><span class="pl-c">#</span> solve discretized system, saving every 3 hours;</span>
<span class="pl-c"><span class="pl-c">#</span> Trapezoid on a discretized PDE is analogous to the well known Crank-Nicolson method.</span>
out <span class="pl-k">=</span> <span class="pl-c1">@time</span> <span class="pl-c1">solve</span>(prob, <span class="pl-c1">Trapezoid</span>(), saveat<span class="pl-k">=</span><span class="pl-c1">3</span><span class="pl-k">*</span><span class="pl-c1">3600.0</span>, progress<span class="pl-k">=</span><span class="pl-c1">true</span>) <span class="pl-k">|&gt;</span> CryoGridOutput;
zs <span class="pl-k">=</span> [<span class="pl-c1">2</span>,<span class="pl-c1">7</span>,<span class="pl-c1">12</span>,<span class="pl-c1">22</span>,<span class="pl-c1">32</span>,<span class="pl-c1">42</span>,<span class="pl-c1">50</span>,<span class="pl-c1">100</span>,<span class="pl-c1">500</span>]<span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>cm<span class="pl-pds">"</span></span>
cg <span class="pl-k">=</span> Plots<span class="pl-k">.</span><span class="pl-c1">cgrad</span>(<span class="pl-c1">:copper</span>,rev<span class="pl-k">=</span><span class="pl-c1">true</span>)
<span class="pl-c1">plot</span>(out<span class="pl-k">.</span>T[<span class="pl-c1">Z</span>(<span class="pl-c1">Near</span>(zs))], color<span class="pl-k">=</span>cg[<span class="pl-c1">LinRange</span>(<span class="pl-c1">0.0</span>,<span class="pl-c1">1.0</span>,<span class="pl-c1">length</span>(zs))]<span class="pl-k">'</span>, ylabel<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Temperature<span class="pl-pds">"</span></span>, leg<span class="pl-k">=</span><span class="pl-c1">false</span>)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="res/Ts_H_tair_freeW_2010-2011.png"><img src="res/Ts_H_tair_freeW_2010-2011.png" alt="Ts_output_freew" style="max-width: 100%;"></a></p>
<p dir="auto">Alternatively, we can use a Dall'Amico freeze curve:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="sfcc = SFCC(DallAmico(swrc=VanGenuchten(α=0.02, n=1.8))) # silt/clay-like freeze curve
tile2 = CryoGrid.Presets.SoilHeatTile(TemperatureGradient(forcings.Tair), GeothermalHeatFlux(0.053u&quot;W/m^2&quot;), soilprofile, initT, grid=grid, freezecurve=sfcc)
u0, du0 = initialcondition!(tile2, tspan)
# CryoGrid front-end for ODEProblem
prob2 = CryoGridProblem(tile2, u0, tspan, savevars=(:T,))
# stiff solvers don't work well with Dall'Amico due to the ill-conditioned Jacobian;
# We can just forward Euler instead.
out2 = @time solve(prob2, Euler(), dt=300.0, saveat=3*3600.0, progress=true) |&gt; CryoGridOutput;
plot(out2.T[Z(Near(zs))], color=cg[LinRange(0.0,1.0,length(zs))]', ylabel=&quot;Temperature&quot;, leg=false)"><pre>sfcc <span class="pl-k">=</span> <span class="pl-c1">SFCC</span>(<span class="pl-c1">DallAmico</span>(swrc<span class="pl-k">=</span><span class="pl-c1">VanGenuchten</span>(α<span class="pl-k">=</span><span class="pl-c1">0.02</span>, n<span class="pl-k">=</span><span class="pl-c1">1.8</span>))) <span class="pl-c"><span class="pl-c">#</span> silt/clay-like freeze curve</span>
tile2 <span class="pl-k">=</span> CryoGrid<span class="pl-k">.</span>Presets<span class="pl-k">.</span><span class="pl-c1">SoilHeatTile</span>(<span class="pl-c1">TemperatureGradient</span>(forcings<span class="pl-k">.</span>Tair), <span class="pl-c1">GeothermalHeatFlux</span>(<span class="pl-c1">0.053</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>W/m^2<span class="pl-pds">"</span></span>), soilprofile, initT, grid<span class="pl-k">=</span>grid, freezecurve<span class="pl-k">=</span>sfcc)
u0, du0 <span class="pl-k">=</span> <span class="pl-c1">initialcondition!</span>(tile2, tspan)
<span class="pl-c"><span class="pl-c">#</span> CryoGrid front-end for ODEProblem</span>
prob2 <span class="pl-k">=</span> <span class="pl-c1">CryoGridProblem</span>(tile2, u0, tspan, savevars<span class="pl-k">=</span>(<span class="pl-c1">:T</span>,))
<span class="pl-c"><span class="pl-c">#</span> stiff solvers don't work well with Dall'Amico due to the ill-conditioned Jacobian;</span>
<span class="pl-c"><span class="pl-c">#</span> We can just forward Euler instead.</span>
out2 <span class="pl-k">=</span> <span class="pl-c1">@time</span> <span class="pl-c1">solve</span>(prob2, <span class="pl-c1">Euler</span>(), dt<span class="pl-k">=</span><span class="pl-c1">300.0</span>, saveat<span class="pl-k">=</span><span class="pl-c1">3</span><span class="pl-k">*</span><span class="pl-c1">3600.0</span>, progress<span class="pl-k">=</span><span class="pl-c1">true</span>) <span class="pl-k">|&gt;</span> CryoGridOutput;
<span class="pl-c1">plot</span>(out2<span class="pl-k">.</span>T[<span class="pl-c1">Z</span>(<span class="pl-c1">Near</span>(zs))], color<span class="pl-k">=</span>cg[<span class="pl-c1">LinRange</span>(<span class="pl-c1">0.0</span>,<span class="pl-c1">1.0</span>,<span class="pl-c1">length</span>(zs))]<span class="pl-k">'</span>, ylabel<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Temperature<span class="pl-pds">"</span></span>, leg<span class="pl-k">=</span><span class="pl-c1">false</span>)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="res/Ts_H_tair_vg_2010-2011.png"><img src="res/Ts_H_tair_vg_2010-2011.png" alt="Ts_output_freew" style="max-width: 100%;"></a></p>
<p dir="auto">Note that <code>SoilHeatTile</code> uses energy as the state variable by default. To use temperature as the state variable instead:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# :T is the variable name for temperature, :H represents enthalpy/energy.
# This is used in the specification of the HeatBalance process type.
# While this will work with any freeze curve, here we use Westermann (2011) as an example.
model = CryoGrid.Presets.SoilHeatTile(:T, TemperatureGradient(forcings.Tair), soilprofile, freezecurve=SFCC(Westermann()))"><pre><span class="pl-c"><span class="pl-c">#</span> :T is the variable name for temperature, :H represents enthalpy/energy.</span>
<span class="pl-c"><span class="pl-c">#</span> This is used in the specification of the HeatBalance process type.</span>
<span class="pl-c"><span class="pl-c">#</span> While this will work with any freeze curve, here we use Westermann (2011) as an example.</span>
model <span class="pl-k">=</span> CryoGrid<span class="pl-k">.</span>Presets<span class="pl-k">.</span><span class="pl-c1">SoilHeatTile</span>(<span class="pl-c1">:T</span>, <span class="pl-c1">TemperatureGradient</span>(forcings<span class="pl-k">.</span>Tair), soilprofile, freezecurve<span class="pl-k">=</span><span class="pl-c1">SFCC</span>(<span class="pl-c1">Westermann</span>()))</pre></div>
</article></div>