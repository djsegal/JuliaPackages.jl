<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-threadediterablesjl" class="anchor" aria-hidden="true" href="#threadediterablesjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>ThreadedIterables.jl</h1>
<p><a href="https://circleci.com/gh/marekdedic/ThreadedIterables.jl/tree/master" rel="nofollow"><img src="https://camo.githubusercontent.com/5a7f89e7ebb827ffbffb31eb8f2d3f15533ae3e4/68747470733a2f2f696d672e736869656c64732e696f2f636972636c6563692f6275696c642f6769746875622f6d6172656b64656469632f54687265616465644974657261626c65732e6a6c2f6d61737465722e737667" alt="CircleCI" data-canonical-src="https://img.shields.io/circleci/build/github/marekdedic/ThreadedIterables.jl/master.svg" style="max-width:100%;"></a> <a href="https://codecov.io/gh/marekdedic/ThreadedIterables.jl/branch/master" rel="nofollow"><img src="https://camo.githubusercontent.com/4ceb0073080ecf6a5bbc2dd58ad7985b524af530/68747470733a2f2f696d672e736869656c64732e696f2f636f6465636f762f632f6769746875622f6d6172656b64656469632f54687265616465644974657261626c65732e6a6c2f6d61737465722e737667" alt="Codecov branch" data-canonical-src="https://img.shields.io/codecov/c/github/marekdedic/ThreadedIterables.jl/master.svg" style="max-width:100%;"></a> <a href="https://marekdedic.github.io/ThreadedIterables.jl/stable/" rel="nofollow"><img src="https://camo.githubusercontent.com/f7b92a177c912c1cc007fc9b40f17ff3ee3bb414/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable docs" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a> <a href="https://marekdedic.github.io/ThreadedIterables.jl/latest/" rel="nofollow"><img src="https://camo.githubusercontent.com/57bae07ecd50a99519ad0516d91f4ec8f0f48e12/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6c61746573742d626c75652e737667" alt="Latest docs" data-canonical-src="https://img.shields.io/badge/docs-latest-blue.svg" style="max-width:100%;"></a></p>
<p>This package adds multi-threaded versions of functions operating on collections. Currently, the package contains the functions <code>foreach</code>, <code>map</code>, <code>reduce</code>, <code>mapreduce</code>, <code>mapfoldl</code>, <code>mapfoldr</code>.</p>
<p>The simplest way to use the package is the <code>@threaded</code> macro, which converts all the supported functions in the expression to their multi-threaded equivalents.</p>
<p>Example:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> ThreadedIterables

julia<span class="pl-k">&gt;</span> a <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>, <span class="pl-c1">4</span>)
<span class="pl-c1">4</span><span class="pl-k">-</span>element Array{Int64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
  <span class="pl-c1">4</span>
  <span class="pl-c1">7</span>
 <span class="pl-c1">10</span>
  <span class="pl-c1">7</span>

julia<span class="pl-k">&gt;</span><span class="pl-c1">@threaded</span> <span class="pl-c1">map</span>(x <span class="pl-k">-&gt;</span> <span class="pl-c1">2</span>x, a)
<span class="pl-c1">4</span><span class="pl-k">-</span>element Array{Int64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
  <span class="pl-c1">8</span>
 <span class="pl-c1">14</span>
 <span class="pl-c1">20</span>
 <span class="pl-c1">14</span></pre></div>
<p>Alternatively, the multi-threaded functions can be used directly - <code>tforeach</code> instead of <code>foreach</code>, <code>tmap</code> instead of <code>map</code> etc. Note that for <code>mapreduce</code>, there are actually 3 options: <code>tmapreduce</code>, <code>maptreduce</code> and <code>tmaptreduce</code>. These functions differ in whether the mapping part, the reduction part, or both of them are multi-threaded.</p>
</article></div>