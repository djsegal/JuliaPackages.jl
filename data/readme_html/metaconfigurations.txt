<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p dir="auto"><a href="https://github.com/mirkobunse/MetaConfigurations.jl/actions"><img src="https://github.com/mirkobunse/MetaConfigurations.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a> <a href="https://codecov.io/gh/mirkobunse/MetaConfigurations.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/b0cd19b7b451dd1c76e903b17357f82ac869bf95d15e1a4333535c870403f00c/68747470733a2f2f636f6465636f762e696f2f67682f6d69726b6f62756e73652f4d657461436f6e66696775726174696f6e732e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/mirkobunse/MetaConfigurations.jl/branch/main/graph/badge.svg" style="max-width: 100%;"></a></p>
<h1 dir="auto"><a id="user-content-metaconfigurationsjl" class="anchor" aria-hidden="true" href="#metaconfigurationsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>MetaConfigurations.jl</h1>
<p dir="auto">Define a set of configurations as a single, more abstract and comprehensive meta-configuration.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="] add MetaConfigurations"><pre>] add MetaConfigurations</pre></div>
<p dir="auto">Besides providing functions for manipulating configurations, MetaConfigurations.jl is also a meta package for a common API through which configuration file handlers like <a href="https://github.com/JuliaIO/JSON.jl">JSON.jl</a> and <a href="https://github.com/JuliaData/YAML.jl">YAML.jl</a> are unified.</p>
<h2 dir="auto"><a id="user-content-motivation" class="anchor" aria-hidden="true" href="#motivation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Motivation</h2>
<p dir="auto">Assume you want to describe four experiments, each of which consists of a combination of two parameters.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="# experiment 1
description: &quot;Experiment with α=0.1 and β=95%&quot;
alpha: 0.1
beta: 95%"><pre class="notranslate"><code># experiment 1
description: "Experiment with α=0.1 and β=95%"
alpha: 0.1
beta: 95%
</code></pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="# experiment 2
description: &quot;Experiment with α=0.01 and β=95%&quot;
alpha: 0.01
beta: 95%"><pre class="notranslate"><code># experiment 2
description: "Experiment with α=0.01 and β=95%"
alpha: 0.01
beta: 95%
</code></pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="# experiment 3
description: &quot;Experiment with α=0.1 and β=97.5%&quot;
alpha: 0.1
beta: 97.5%"><pre class="notranslate"><code># experiment 3
description: "Experiment with α=0.1 and β=97.5%"
alpha: 0.1
beta: 97.5%
</code></pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="# experiment 4
description: &quot;Experiment with α=0.01 and β=97.5%&quot;
alpha: 0.01
beta: 97.5%"><pre class="notranslate"><code># experiment 4
description: "Experiment with α=0.01 and β=97.5%"
alpha: 0.01
beta: 97.5%
</code></pre></div>
<p dir="auto">MetaConfigurations.jl can derive these combinations from a single, more abstract and comprehensive representation, which we call a meta-configuration:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="description: &quot;Experiment with α=$(alpha) and β=$(beta)&quot;
alpha:
  - 0.1
  - 0.01
beta:
  - 95%
  - 97.5%"><pre class="notranslate"><code>description: "Experiment with α=$(alpha) and β=$(beta)"
alpha:
  - 0.1
  - 0.01
beta:
  - 95%
  - 97.5%
</code></pre></div>
<p dir="auto">The desired list of experiments is obtained from this meta-configuration by expansions and String interpolations:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using MetaConfigurations
configurations = expand(
    parsefile(&quot;example.yml&quot;), # read the above meta-configuration
    &quot;alpha&quot;,
    &quot;beta&quot;
) # create a list of cells from the matrix spanned by alpha and beta
interpolate!.(configurations, &quot;description&quot;) # fill in the placeholders in each description"><pre><span class="pl-k">using</span> MetaConfigurations
configurations <span class="pl-k">=</span> <span class="pl-c1">expand</span>(
    <span class="pl-c1">parsefile</span>(<span class="pl-s"><span class="pl-pds">"</span>example.yml<span class="pl-pds">"</span></span>), <span class="pl-c"><span class="pl-c">#</span> read the above meta-configuration</span>
    <span class="pl-s"><span class="pl-pds">"</span>alpha<span class="pl-pds">"</span></span>,
    <span class="pl-s"><span class="pl-pds">"</span>beta<span class="pl-pds">"</span></span>
) <span class="pl-c"><span class="pl-c">#</span> create a list of cells from the matrix spanned by alpha and beta</span>
<span class="pl-c1">interpolate!</span>.(configurations, <span class="pl-s"><span class="pl-pds">"</span>description<span class="pl-pds">"</span></span>) <span class="pl-c"><span class="pl-c">#</span> fill in the placeholders in each description</span></pre></div>
<h2 dir="auto"><a id="user-content-deriving-configurations-from-meta-configurations" class="anchor" aria-hidden="true" href="#deriving-configurations-from-meta-configurations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Deriving configurations from meta-configurations</h2>
<p dir="auto">Let's take a closer look on the operations provided by this package. We have already seen the first two of them.</p>
<p dir="auto"><strong>MetaConfigurations.expand:</strong>
We can expand any property that has a vector of values, like the properties <code>alpha</code> and <code>beta</code> in the example above.
Consider at first the expansion of a single vector-valued property <code>p</code> with length <code>n</code>.
This expansion will result in a vector of <code>n</code> configurations, in each of which <code>p</code> has only one of its initial values.
The expansion of multiple properties, like above, is taken out sequentially.
By expanding properties, we transform a single, comprehensive meta-configuration into a set of configurations.</p>
<p dir="auto"><strong>MetaConfigurations.interpolate:</strong>
Interpolation substitutes all placeholders in a <code>String</code> property with the corresponding values of other properties in the same configuration.
In the above example, we have seen how the placeholders <code>$(alpha)</code> and <code>$(beta)</code> have been replaced with the actual values of <code>alpha</code> and <code>beta</code>.</p>
<p dir="auto"><strong>MetaConfigurations.patch:</strong>
A patch defines an additional key-value pair in a copy of a configuration.
For example, we might want wo create a copy of the above <code>configurations</code> vector in which each configuration has a fixed value for an additional property <code>gamma</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="patch.(configurations; gamma=1000)"><pre><span class="pl-c1">patch</span>.(configurations; gamma<span class="pl-k">=</span><span class="pl-c1">1000</span>)</pre></div>
<h2 dir="auto"><a id="user-content-reading-and-writing-configuration-files" class="anchor" aria-hidden="true" href="#reading-and-writing-configuration-files"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Reading and writing configuration files</h2>
<p dir="auto">MetaConfigurations.jl is also a meta-package that unifies the APIs
of <a href="https://github.com/JuliaIO/JSON.jl">JSON.jl</a> and <a href="https://github.com/JuliaData/YAML.jl">YAML.jl</a>.
To which backend an operation is delegated is automatically determined from the file name extension.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using MetaConfigurations

cfg = parsefile(&quot;example.yml&quot;) # read from a YAML file
save(&quot;example.json&quot;, cfg) # store it as a JSON file"><pre><span class="pl-k">using</span> MetaConfigurations

cfg <span class="pl-k">=</span> <span class="pl-c1">parsefile</span>(<span class="pl-s"><span class="pl-pds">"</span>example.yml<span class="pl-pds">"</span></span>) <span class="pl-c"><span class="pl-c">#</span> read from a YAML file</span>
<span class="pl-c1">save</span>(<span class="pl-s"><span class="pl-pds">"</span>example.json<span class="pl-pds">"</span></span>, cfg) <span class="pl-c"><span class="pl-c">#</span> store it as a JSON file</span></pre></div>
<p dir="auto">By default, MetaConfigurations.jl parses files into objects of the type <code>Dict{String,Any}</code>. You can change this behaviour through the <code>dicttype</code> argument, e.g. to preserve the order of the configuration file or to use <code>Symbol</code> instances as keys.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using MetaConfigurations, OrderedCollections

cfg = parsefile(&quot;example.yml&quot;, dicttype=OrderedDict{Symbol, Any})"><pre><span class="pl-k">using</span> MetaConfigurations, OrderedCollections

cfg <span class="pl-k">=</span> <span class="pl-c1">parsefile</span>(<span class="pl-s"><span class="pl-pds">"</span>example.yml<span class="pl-pds">"</span></span>, dicttype<span class="pl-k">=</span>OrderedDict{Symbol, Any})</pre></div>
<h2 dir="auto"><a id="user-content-finding-properties" class="anchor" aria-hidden="true" href="#finding-properties"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Finding properties</h2>
<p dir="auto">You can recursively find properties by their key:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# continuing the introductory example, ..
find(configurations, &quot;description&quot;)"><pre><span class="pl-c"><span class="pl-c">#</span> continuing the introductory example, ..</span>
<span class="pl-c1">find</span>(configurations, <span class="pl-s"><span class="pl-pds">"</span>description<span class="pl-pds">"</span></span>)</pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="4-element Array{String,1}:
 &quot;Experiment with α=0.1 and β=95%&quot;
 &quot;Experiment with α=0.1 and β=97.5%&quot;
 &quot;Experiment with α=0.01 and β=95%&quot;
 &quot;Experiment with α=0.01 and β=97.5%&quot;"><pre class="notranslate"><code>4-element Array{String,1}:
 "Experiment with α=0.1 and β=95%"
 "Experiment with α=0.1 and β=97.5%"
 "Experiment with α=0.01 and β=95%"
 "Experiment with α=0.01 and β=97.5%"
</code></pre></div>
</article></div>