<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-pdeassemblerjl" class="anchor" aria-hidden="true" href="#pdeassemblerjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>PDEAssembler.jl</h1>
<p><a href="https://travis-ci.org/JuliaFEM/PDEAssembler.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/27581b02923923ae98f511a46675a3f4feecb7c9c22c351dec3da40755dafcad/68747470733a2f2f7472617669732d63692e6f72672f4a756c696146454d2f504445417373656d626c65722e6a6c2e7376673f6272616e63683d6d6173746572" alt="" data-canonical-src="https://travis-ci.org/JuliaFEM/PDEAssembler.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="http://pkg.julialang.org/?pkg=BoundingSphere&amp;ver=0.6" rel="nofollow"><img src="https://camo.githubusercontent.com/7433e3dc4a7784074356c661ab2d7c084099330c67dabf2f5a6f5f68cbb3d071/687474703a2f2f706b672e6a756c69616c616e672e6f72672f6261646765732f426f756e64696e675370686572655f302e362e737667" alt="" data-canonical-src="http://pkg.julialang.org/badges/BoundingSphere_0.6.svg" style="max-width:100%;"></a>
<a href="http://pkg.julialang.org/?pkg=BoundingSphere&amp;ver=0.7" rel="nofollow"><img src="https://camo.githubusercontent.com/d8b06df04f51f4a3a2a4469434efac51a47d2dca40f6e7458a2548603a10d323/687474703a2f2f706b672e6a756c69616c616e672e6f72672f6261646765732f426f756e64696e675370686572655f302e372e737667" alt="" data-canonical-src="http://pkg.julialang.org/badges/BoundingSphere_0.7.svg" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/JuliaFEM/PDEAssembler.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/38c9f560513865b0d6858532e19edd1ffbe9f4bc7e1bc80f4dcd415e11832900/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f4a756c696146454d2f504445417373656d626c65722e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="" data-canonical-src="https://coveralls.io/repos/github/JuliaFEM/PDEAssembler.jl/badge.svg?branch=master" style="max-width:100%;"></a>
<a href="https://juliafem.github.io/PDEAssembler.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://juliafem.github.io/PDEAssembler.jl/latest" rel="nofollow"><img src="https://camo.githubusercontent.com/56f8252ba8e9d3f0b810769543f77823d2fe031ce560d4c2d69fb1fcad800383/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6c61746573742d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-latest-blue.svg" style="max-width:100%;"></a>
<a href="https://github.com/JuliaFEM/PDEAssembler.jl/issues"><img src="https://camo.githubusercontent.com/b639b2633372506c617c3d17be9c2f3de5b0ba815ab0417aaef0520ef4f3c87d/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732f4a756c696146454d2f504445417373656d626c65722e6a6c2e737667" alt="" data-canonical-src="https://img.shields.io/github/issues/JuliaFEM/PDEAssembler.jl.svg" style="max-width:100%;"></a></p>
<p>Package assembles a set of discriteized partial differential equations and forms
global matrices M, C, K, and right hand side vector f.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using PDEAssembler
using PDEAssembler: get_unit_square, Poisson

field_elements, boundary_elements = get_unit_square()

field_problem = Problem(Poisson, &quot;Poisson problem in 1x1 square&quot;, 1)
update!(field_elements, &quot;source&quot;, 10.0)
update!(field_elements, &quot;density&quot;, 6.0)
add_elements!(field_problem, field_elements)

boundary_problem = Problem(Poisson, &quot;Poisson boundary&quot;, 1)
update!(boundary_elements, &quot;fixed u&quot;, 0.0)
update!(boundary_elements, &quot;density&quot;, 0.0)
add_elements!(boundary_problem, boundary_elements)

problems = (field_problem, boundary_problem)
M, C, K, f = get_global_matrices(problems, 0.0)
u = cholfact(Symmetric(K)) \ full(f)
X = first(problems)(&quot;geometry&quot;, 0.0)

N = length(u)
x = [X[i][1] for i=1:N]
y = [X[i][2] for i=1:N]

using Plots
surface(x, y, u)
"><pre><span class="pl-k">using</span> PDEAssembler
<span class="pl-k">using</span> PDEAssembler<span class="pl-k">:</span> get_unit_square, Poisson

field_elements, boundary_elements <span class="pl-k">=</span> <span class="pl-c1">get_unit_square</span>()

field_problem <span class="pl-k">=</span> <span class="pl-c1">Problem</span>(Poisson, <span class="pl-s"><span class="pl-pds">"</span>Poisson problem in 1x1 square<span class="pl-pds">"</span></span>, <span class="pl-c1">1</span>)
<span class="pl-c1">update!</span>(field_elements, <span class="pl-s"><span class="pl-pds">"</span>source<span class="pl-pds">"</span></span>, <span class="pl-c1">10.0</span>)
<span class="pl-c1">update!</span>(field_elements, <span class="pl-s"><span class="pl-pds">"</span>density<span class="pl-pds">"</span></span>, <span class="pl-c1">6.0</span>)
<span class="pl-c1">add_elements!</span>(field_problem, field_elements)

boundary_problem <span class="pl-k">=</span> <span class="pl-c1">Problem</span>(Poisson, <span class="pl-s"><span class="pl-pds">"</span>Poisson boundary<span class="pl-pds">"</span></span>, <span class="pl-c1">1</span>)
<span class="pl-c1">update!</span>(boundary_elements, <span class="pl-s"><span class="pl-pds">"</span>fixed u<span class="pl-pds">"</span></span>, <span class="pl-c1">0.0</span>)
<span class="pl-c1">update!</span>(boundary_elements, <span class="pl-s"><span class="pl-pds">"</span>density<span class="pl-pds">"</span></span>, <span class="pl-c1">0.0</span>)
<span class="pl-c1">add_elements!</span>(boundary_problem, boundary_elements)

problems <span class="pl-k">=</span> (field_problem, boundary_problem)
M, C, K, f <span class="pl-k">=</span> <span class="pl-c1">get_global_matrices</span>(problems, <span class="pl-c1">0.0</span>)
u <span class="pl-k">=</span> <span class="pl-c1">cholfact</span>(<span class="pl-c1">Symmetric</span>(K)) <span class="pl-k">\</span> <span class="pl-c1">full</span>(f)
X <span class="pl-k">=</span> <span class="pl-c1">first</span>(problems)(<span class="pl-s"><span class="pl-pds">"</span>geometry<span class="pl-pds">"</span></span>, <span class="pl-c1">0.0</span>)

N <span class="pl-k">=</span> <span class="pl-c1">length</span>(u)
x <span class="pl-k">=</span> [X[i][<span class="pl-c1">1</span>] <span class="pl-k">for</span> i<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">:</span>N]
y <span class="pl-k">=</span> [X[i][<span class="pl-c1">2</span>] <span class="pl-k">for</span> i<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">:</span>N]

<span class="pl-k">using</span> Plots
<span class="pl-c1">surface</span>(x, y, u)</pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="docs/src/figs/poisson_20x20.png"><img src="docs/src/figs/poisson_20x20.png" alt="result" title="Results of Poisson problem" style="max-width:100%;"></a></p>
</article></div>