<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-sound" class="anchor" aria-hidden="true" href="#sound"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Sound</h1>
<p dir="auto"><a href="https://github.com/JeffFessler/Sound.jl">https://github.com/JeffFessler/Sound.jl</a></p>
<p dir="auto"><a href="https://JeffFessler.github.io/Sound.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="docs-stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://JeffFessler.github.io/Sound.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="docs-dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/JeffFessler/Sound.jl/actions"><img src="https://github.com/JeffFessler/Sound.jl/workflows/CI/badge.svg" alt="action status" style="max-width: 100%;"></a>
<a href="https://juliaci.github.io/NanosoldierReports/pkgeval_badges/S/Sound.html" rel="nofollow"><img src="https://camo.githubusercontent.com/7c6d47ee3a731fefc77cd3f7d42eb2a523d2454a11c6b0e4325aa2729a0b0e4a/68747470733a2f2f6a756c696163692e6769746875622e696f2f4e616e6f736f6c646965725265706f7274732f706b676576616c5f6261646765732f532f536f756e642e737667" alt="pkgeval status" data-canonical-src="https://juliaci.github.io/NanosoldierReports/pkgeval_badges/S/Sound.svg" style="max-width: 100%;"></a>
<a href="https://codecov.io/github/JeffFessler/Sound.jl?branch=main" rel="nofollow"><img src="https://camo.githubusercontent.com/e1d385f5be3b1f5a77cf91b5c5499fd5b5c560a6a0e38f43591ced893ac26b5e/68747470733a2f2f636f6465636f762e696f2f6769746875622f4a656666466573736c65722f536f756e642e6a6c2f636f7665726167652e7376673f6272616e63683d6d61696e" alt="codecov" data-canonical-src="https://codecov.io/github/JeffFessler/Sound.jl/coverage.svg?branch=main" style="max-width: 100%;"></a>
<a href="LICENSE"><img src="https://camo.githubusercontent.com/bbf49a2eb96e6f718803f2493bd7aa3baae61abb09b7f8fc185a94e08c504dc6/687474703a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d627269676874677265656e2e7376673f7374796c653d666c6174" alt="license" data-canonical-src="http://img.shields.io/badge/license-MIT-brightgreen.svg?style=flat" style="max-width: 100%;"></a>
<a href="https://github.com/invenia/BlueStyle"><img src="https://camo.githubusercontent.com/c18fbaa52d94d16b90b19701fc90d289b8a5bb920c74c79bab200b14e75420a4/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c75652d3434393564312e737667" alt="code-style" data-canonical-src="https://img.shields.io/badge/code%20style-blue-4495d1.svg" style="max-width: 100%;"></a></p>

<p dir="auto">This Julia repo exports the functions
<code>sound</code>
and
<code>soundsc</code>
that play an audio signal through a computer's audio output device,
such as speakers or headphones.
These functions are designed to be similar to that of Matlab commands
<a href="https://www.mathworks.com/help/matlab/ref/sound.html" rel="nofollow"><code>sound</code></a>
and
<a href="https://www.mathworks.com/help/matlab/ref/soundsc.html" rel="nofollow"><code>soundsc</code></a>
to facilitate code migration.</p>
<h2 dir="auto"><a id="user-content-getting-started" class="anchor" aria-hidden="true" href="#getting-started"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Getting started</h2>
<p dir="auto"><code>Sound</code> is a registered package,
so installation is easy:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="import Pkg; Pkg.add(&quot;Sound&quot;)"><pre><span class="pl-k">import</span> Pkg; Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>Sound<span class="pl-pds">"</span></span>)</pre></div>
<h2 dir="auto"><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Sound
S = 8192 # sampling rate in Hz
x = 0.7*cos.(2π*(1:S÷2)*440/S)
y = 0.8*sin.(2π*(1:S÷2)*660/S)
sound(x, S) # monophonic
sound([x y], S) # stereo
soundsc([x y], S) # scale to unit amplitude"><pre><span class="pl-k">using</span> Sound
S <span class="pl-k">=</span> <span class="pl-c1">8192</span> <span class="pl-c"><span class="pl-c">#</span> sampling rate in Hz</span>
x <span class="pl-k">=</span> <span class="pl-c1">0.7</span><span class="pl-k">*</span><span class="pl-c1">cos</span>.(<span class="pl-c1">2</span>π<span class="pl-k">*</span>(<span class="pl-c1">1</span><span class="pl-k">:</span>S<span class="pl-k">÷</span><span class="pl-c1">2</span>)<span class="pl-k">*</span><span class="pl-c1">440</span><span class="pl-k">/</span>S)
y <span class="pl-k">=</span> <span class="pl-c1">0.8</span><span class="pl-k">*</span><span class="pl-c1">sin</span>.(<span class="pl-c1">2</span>π<span class="pl-k">*</span>(<span class="pl-c1">1</span><span class="pl-k">:</span>S<span class="pl-k">÷</span><span class="pl-c1">2</span>)<span class="pl-k">*</span><span class="pl-c1">660</span><span class="pl-k">/</span>S)
<span class="pl-c1">sound</span>(x, S) <span class="pl-c"><span class="pl-c">#</span> monophonic</span>
<span class="pl-c1">sound</span>([x y], S) <span class="pl-c"><span class="pl-c">#</span> stereo</span>
<span class="pl-c1">soundsc</span>([x y], S) <span class="pl-c"><span class="pl-c">#</span> scale to unit amplitude</span></pre></div>
<p dir="auto">See the
<a href="https://jefffessler.github.io/Sound.jl/stable" rel="nofollow">documentation</a>.</p>
<p dir="auto">Matlab's
<a href="https://www.mathworks.com/help/matlab/ref/audioplayer.html" rel="nofollow"><code>audioplayer</code></a>
has the same arguments as <code>sound</code>,
so you can type
<code>audioplayer = sound</code>
and then call
<code>audioplayer(x, S)</code>
if desired,
albeit without any of other features of <code>audioplayer</code>.</p>
<p dir="auto">As a nod towards the Julia way of doing things,
both <code>sound</code> and <code>soundsc</code>
also support the <code>SampleBuf</code> type
in the
<a href="https://github.com/JuliaAudio/SampledSignals.jl">SampledSignals.jl</a>
package,
via
<a href="https://github.com/JuliaPackaging/Requires.jl">Requires.jl</a>.
That type carries the sampling rate
along with the signal data,
which is attractive
compared to having two separate variables.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Sound
using SampledSignals: SampleBuf # you may need to add this package
S = 8192 # sampling rate in Hz
x = 0.7*cos.(2π*(1:S÷2)*440/S)
y = 0.8*sin.(2π*(1:S÷2)*660/S)
sb = SampleBuf([x y], S) # stereo data
sound(sb)
soundsc(sb) # scale to maximum volume"><pre><span class="pl-k">using</span> Sound
<span class="pl-k">using</span> SampledSignals<span class="pl-k">:</span> SampleBuf <span class="pl-c"><span class="pl-c">#</span> you may need to add this package</span>
S <span class="pl-k">=</span> <span class="pl-c1">8192</span> <span class="pl-c"><span class="pl-c">#</span> sampling rate in Hz</span>
x <span class="pl-k">=</span> <span class="pl-c1">0.7</span><span class="pl-k">*</span><span class="pl-c1">cos</span>.(<span class="pl-c1">2</span>π<span class="pl-k">*</span>(<span class="pl-c1">1</span><span class="pl-k">:</span>S<span class="pl-k">÷</span><span class="pl-c1">2</span>)<span class="pl-k">*</span><span class="pl-c1">440</span><span class="pl-k">/</span>S)
y <span class="pl-k">=</span> <span class="pl-c1">0.8</span><span class="pl-k">*</span><span class="pl-c1">sin</span>.(<span class="pl-c1">2</span>π<span class="pl-k">*</span>(<span class="pl-c1">1</span><span class="pl-k">:</span>S<span class="pl-k">÷</span><span class="pl-c1">2</span>)<span class="pl-k">*</span><span class="pl-c1">660</span><span class="pl-k">/</span>S)
sb <span class="pl-k">=</span> <span class="pl-c1">SampleBuf</span>([x y], S) <span class="pl-c"><span class="pl-c">#</span> stereo data</span>
<span class="pl-c1">sound</span>(sb)
<span class="pl-c1">soundsc</span>(sb) <span class="pl-c"><span class="pl-c">#</span> scale to maximum volume</span></pre></div>
<p dir="auto">By default,
the audio output is routed
to the sound output device
specified in system-wide settings,
e.g., via "System Preferences" on a Mac.
There is keyword option
to override that setting.</p>
<h2 dir="auto"><a id="user-content-audio-recording" class="anchor" aria-hidden="true" href="#audio-recording"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Audio recording</h2>
<p dir="auto">There is also a simple <code>record</code> method here
for recording from the system-wide default audio input device
(typically a built-in microphone).
It returns a Vector of the sample data
and the audio system default sampling rate.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Sound: record
data, S = record(4) # record 4 seconds of audio data"><pre><span class="pl-k">using</span> Sound<span class="pl-k">:</span> record
data, S <span class="pl-k">=</span> <span class="pl-c1">record</span>(<span class="pl-c1">4</span>) <span class="pl-c"><span class="pl-c">#</span> record 4 seconds of audio data</span></pre></div>
<p dir="auto">Again there is keyword argument
for selecting the audio input device.</p>
<p dir="auto">See
<a href="https://github.com/JeffFessler/Sound.jl/blob/main/examples/gtk-record.jl">the examples/ directory</a>
for an example of creating a Record/Stop/Play GUI
using
<a href="https://github.com/JuliaGraphics/Gtk.jl">Gtk.jl</a>.</p>
<h2 dir="auto"><a id="user-content-phase-vocoder" class="anchor" aria-hidden="true" href="#phase-vocoder"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Phase vocoder</h2>
<p dir="auto">Also exported is the function <code>phase_vocoder</code>
that provides a Julia version
of a
<a href="https://en.wikipedia.org/wiki/Phase_vocoder" rel="nofollow">phase vocoder</a>,
translated from
<a href="https://sethares.engr.wisc.edu/vocoders/matlabphasevocoder.html" rel="nofollow">this Matlab code</a>
for audio time scaling.
See the documentation for example use.</p>
<h2 dir="auto"><a id="user-content-compatibility" class="anchor" aria-hidden="true" href="#compatibility"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Compatibility</h2>
<p dir="auto">Tested with Julia ≥ 1.6.</p>
<h2 dir="auto"><a id="user-content-caveats" class="anchor" aria-hidden="true" href="#caveats"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Caveats</h2>
<p dir="auto">Because Julia code is compiled,
the first time you call an audio function
the sound can be jittery.
Subsequent calls
(with the same argument types)
usually work as expected.</p>
<p dir="auto">On MacOS, if you run Julia from an xterm in XQuartz,
then (at least as of XQuartz v2.8.1)
no audio will be recorded
because XQuartz does not ask for permission
to access the microphone.
Running Julia within the Terminal app is required
because Terminal will properly request microphone permissions.</p>
<h2 dir="auto"><a id="user-content-related-packages" class="anchor" aria-hidden="true" href="#related-packages"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Related packages</h2>
<ul dir="auto">
<li><a href="https://github.com/haberdashPI/SignalBase.jl">https://github.com/haberdashPI/SignalBase.jl</a>
supports a <code>framerate</code> method that serves as the default sampling rate here.</li>
<li><a href="https://github.com/haberdashPI/SignalOperators.jl">https://github.com/haberdashPI/SignalOperators.jl</a>
has useful audio processing operations.</li>
<li><a href="https://github.com/dancasimiro/WAV.jl">https://github.com/dancasimiro/WAV.jl</a>
has a similar <code>wavplay</code> function</li>
<li><a href="https://github.com/JuliaAudio">https://github.com/JuliaAudio</a>
has a collection of audio packages.</li>
<li><a href="https://github.com/JuliaAudio/PortAudio.jl">https://github.com/JuliaAudio/PortAudio.jl</a><br>
Currently, the <code>sound</code> function here is just a wrapper
around functions in this package.
However that could change in the future
to support other audio back-ends,
much like how
<a href="https://github.com/JuliaPlots/Plots.jl"><code>Plots.jl</code></a>
provides a common interface to various plotting back-ends.</li>
</ul>

</article></div>