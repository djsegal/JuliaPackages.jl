<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-binarytemplates" class="anchor" aria-hidden="true" href="#binarytemplates"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>BinaryTemplates</h1>
<p dir="auto"><a href="https://mkitti.github.io/BinaryTemplates.jl/stable/" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://mkitti.github.io/BinaryTemplates.jl/dev/" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/mkitti/BinaryTemplates.jl/actions/workflows/CI.yml?query=branch%3Amain"><img src="https://github.com/mkitti/BinaryTemplates.jl/actions/workflows/CI.yml/badge.svg?branch=main" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/mkitti/BinaryTemplates.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/2d2f0af686ff46155022254b0062fad0c4ed070c5cd7d4741991c1740cf81376/68747470733a2f2f636f6465636f762e696f2f67682f6d6b697474692f42696e61727954656d706c617465732e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/mkitti/BinaryTemplates.jl/branch/main/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">BinaryTemplates.jl assembles a file from chunks at byte offsets. This is useful for creating large files quickly that are sparse, such as
data containers before the data is added.</p>
<h2 dir="auto"><a id="user-content-example-usage" class="anchor" aria-hidden="true" href="#example-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example Usage</h2>
<p dir="auto">Below we create a 4 mibibyte template with chunks at byte offsets 0, 4096, and 4193280. The chunks are 1024, 2048, and 512 bytes in length.</p>
<p dir="auto">The template itself only takes up 3856 bytes. The template can applied to a file that does not yet exist. It will then create a 4 MiB file.</p>
<p dir="auto">The <code>apply_template</code> function checks that it is only overwriting zeros in the file. If it finds non-zero values where the chunks should be,
then it will throw an exception. The function returns a <code>BinaryTemplate</code> representing the data that it overwrote with the chunks. This backup
template is also written to a backup file.</p>
<p dir="auto">Overwriting non-zero values can be opted into with the <code>ensure_zeros</code> keyword. By applying the template a second time, we will obtain a second
backup template. This second backup template should be equal to the original template that we applied.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using BinaryTemplates

julia&gt; binary_template_4MiB = BinaryTemplate(4*1024^2, [0, 4096, 4*1024^2-1024], [rand(UInt8, 1024), rand(UInt8, 2048), rand(UInt8, 512)])
BinaryTemplate:
    expected_file_size: 4.000 MiB

    Offsets            Length     Chunk Checksum
    ------------------ ---------- --------------
    0x0000000000000000       1024     0x68028575
    0x0000000000001000       2048     0x8c68f913
    0x00000000003ffc00        512     0x1ec370e3


julia&gt; Base.summarysize(binary_template_4MiB)
3856

julia&gt; fn = tempname(); apply_template(fn, binary_template_4MiB)
BinaryTemplate:
    expected_file_size: 0 bytes

    Offsets            Length     Chunk Checksum
    ------------------ ---------- --------------
    0x0000000000000000          0     0x00000000
    0x0000000000001000          0     0x00000000
    0x00000000003ffc00          0     0x00000000

julia&gt; filesize(fn)
4194304

julia&gt; backup = apply_template(fn, binary_template_4MiB)
ERROR: Non-zero value found in C:\Users\KITTIS~1\AppData\Local\Temp\jl_vQiVuwO6WZ when applying template. Use keyword `ensure_zero = false` to override.
Stacktrace:
 [1] error(s::String)
   @ Base .\error.jl:33
 [2] apply_template(target_filename::String, t::BinaryTemplate; backup_filename::String, ensure_zero::Bool, truncate::Bool)
   @ BinaryTemplates c:\Users\kittisopikulm\.julia\dev\BinaryTemplates\src\io.jl:161
 [3] apply_template(target_filename::String, t::BinaryTemplate)
   @ BinaryTemplates c:\Users\kittisopikulm\.julia\dev\BinaryTemplates\src\io.jl:148
 [4] top-level scope
   @ REPL[211]:1

julia&gt; backup = apply_template(fn, binary_template_4MiB; ensure_zero = false)
BinaryTemplate:
    expected_file_size: 4.000 MiB

    Offsets            Length     Chunk Checksum
    ------------------ ---------- --------------
    0x0000000000000000       1024     0x68028575
    0x0000000000001000       2048     0x8c68f913
    0x00000000003ffc00        512     0x1ec370e3


julia&gt; backup == binary_template_4MiB
true"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> BinaryTemplates

julia<span class="pl-k">&gt;</span> binary_template_4MiB <span class="pl-k">=</span> <span class="pl-c1">BinaryTemplate</span>(<span class="pl-c1">4</span><span class="pl-k">*</span><span class="pl-c1">1024</span><span class="pl-k">^</span><span class="pl-c1">2</span>, [<span class="pl-c1">0</span>, <span class="pl-c1">4096</span>, <span class="pl-c1">4</span><span class="pl-k">*</span><span class="pl-c1">1024</span><span class="pl-k">^</span><span class="pl-c1">2</span><span class="pl-k">-</span><span class="pl-c1">1024</span>], [<span class="pl-c1">rand</span>(UInt8, <span class="pl-c1">1024</span>), <span class="pl-c1">rand</span>(UInt8, <span class="pl-c1">2048</span>), <span class="pl-c1">rand</span>(UInt8, <span class="pl-c1">512</span>)])
BinaryTemplate<span class="pl-k">:</span>
    expected_file_size<span class="pl-k">:</span> <span class="pl-c1">4.000</span> MiB

    Offsets            Length     Chunk Checksum
    <span class="pl-k">------------------</span> <span class="pl-k">----------</span> <span class="pl-k">--------------</span>
    <span class="pl-c1">0x0000000000000000</span>       <span class="pl-c1">1024</span>     <span class="pl-c1">0x68028575</span>
    <span class="pl-c1">0x0000000000001000</span>       <span class="pl-c1">2048</span>     <span class="pl-c1">0x8c68f913</span>
    <span class="pl-c1">0x00000000003ffc00</span>        <span class="pl-c1">512</span>     <span class="pl-c1">0x1ec370e3</span>


julia<span class="pl-k">&gt;</span> Base<span class="pl-k">.</span><span class="pl-c1">summarysize</span>(binary_template_4MiB)
<span class="pl-c1">3856</span>

julia<span class="pl-k">&gt;</span> fn <span class="pl-k">=</span> <span class="pl-c1">tempname</span>(); <span class="pl-c1">apply_template</span>(fn, binary_template_4MiB)
BinaryTemplate<span class="pl-k">:</span>
    expected_file_size<span class="pl-k">:</span> <span class="pl-c1">0</span> bytes

    Offsets            Length     Chunk Checksum
    <span class="pl-k">------------------</span> <span class="pl-k">----------</span> <span class="pl-k">--------------</span>
    <span class="pl-c1">0x0000000000000000</span>          <span class="pl-c1">0</span>     <span class="pl-c1">0x00000000</span>
    <span class="pl-c1">0x0000000000001000</span>          <span class="pl-c1">0</span>     <span class="pl-c1">0x00000000</span>
    <span class="pl-c1">0x00000000003ffc00</span>          <span class="pl-c1">0</span>     <span class="pl-c1">0x00000000</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">filesize</span>(fn)
<span class="pl-c1">4194304</span>

julia<span class="pl-k">&gt;</span> backup <span class="pl-k">=</span> <span class="pl-c1">apply_template</span>(fn, binary_template_4MiB)
ERROR<span class="pl-k">:</span> Non<span class="pl-k">-</span>zero value found <span class="pl-k">in</span> C<span class="pl-k">:</span><span class="pl-k">\</span>Users<span class="pl-k">\</span>KITTIS<span class="pl-k">~</span><span class="pl-c1">1</span><span class="pl-k">\</span>AppData<span class="pl-k">\</span>Local<span class="pl-k">\</span>Temp<span class="pl-k">\</span>jl_vQiVuwO6WZ when applying template. Use keyword <span class="pl-s"><span class="pl-pds">`</span>ensure_zero = false<span class="pl-pds">`</span></span> to override.
Stacktrace<span class="pl-k">:</span>
 [<span class="pl-c1">1</span>] <span class="pl-c1">error</span>(s<span class="pl-k">::</span><span class="pl-c1">String</span>)
   @ Base <span class="pl-k">.\</span>error<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">33</span>
 [<span class="pl-c1">2</span>] <span class="pl-c1">apply_template</span>(target_filename<span class="pl-k">::</span><span class="pl-c1">String</span>, t<span class="pl-k">::</span><span class="pl-c1">BinaryTemplate</span>; backup_filename<span class="pl-k">::</span><span class="pl-c1">String</span>, ensure_zero<span class="pl-k">::</span><span class="pl-c1">Bool</span>, truncate<span class="pl-k">::</span><span class="pl-c1">Bool</span>)
   @ BinaryTemplates c<span class="pl-k">:</span><span class="pl-k">\</span>Users<span class="pl-k">\</span>kittisopikulm<span class="pl-k">\</span><span class="pl-k">.</span>julia<span class="pl-k">\</span>dev<span class="pl-k">\</span>BinaryTemplates<span class="pl-k">\</span>src<span class="pl-k">\</span>io<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">161</span>
 [<span class="pl-c1">3</span>] <span class="pl-c1">apply_template</span>(target_filename<span class="pl-k">::</span><span class="pl-c1">String</span>, t<span class="pl-k">::</span><span class="pl-c1">BinaryTemplate</span>)
   @ BinaryTemplates c<span class="pl-k">:</span><span class="pl-k">\</span>Users<span class="pl-k">\</span>kittisopikulm<span class="pl-k">\</span><span class="pl-k">.</span>julia<span class="pl-k">\</span>dev<span class="pl-k">\</span>BinaryTemplates<span class="pl-k">\</span>src<span class="pl-k">\</span>io<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">148</span>
 [<span class="pl-c1">4</span>] top<span class="pl-k">-</span>level scope
   @ REPL[<span class="pl-c1">211</span>]<span class="pl-k">:</span><span class="pl-c1">1</span>

julia<span class="pl-k">&gt;</span> backup <span class="pl-k">=</span> <span class="pl-c1">apply_template</span>(fn, binary_template_4MiB; ensure_zero <span class="pl-k">=</span> <span class="pl-c1">false</span>)
BinaryTemplate<span class="pl-k">:</span>
    expected_file_size<span class="pl-k">:</span> <span class="pl-c1">4.000</span> MiB

    Offsets            Length     Chunk Checksum
    <span class="pl-k">------------------</span> <span class="pl-k">----------</span> <span class="pl-k">--------------</span>
    <span class="pl-c1">0x0000000000000000</span>       <span class="pl-c1">1024</span>     <span class="pl-c1">0x68028575</span>
    <span class="pl-c1">0x0000000000001000</span>       <span class="pl-c1">2048</span>     <span class="pl-c1">0x8c68f913</span>
    <span class="pl-c1">0x00000000003ffc00</span>        <span class="pl-c1">512</span>     <span class="pl-c1">0x1ec370e3</span>


julia<span class="pl-k">&gt;</span> backup <span class="pl-k">==</span> binary_template_4MiB
<span class="pl-c1">true</span></pre></div>
<h2 dir="auto"><a id="user-content-applications" class="anchor" aria-hidden="true" href="#applications"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Applications</h2>
<p dir="auto">This templating technique can be used to create large HDF5 files where the metadata is confined to a few chunks.
See the <a href="HDF5BinaryTemplates">HDF5BinaryTemplates.jl package</a>. The file can be written very efficiently since
<code>apply_template</code> only writes the metadata chunks. It uses <code>seek</code> to skip over regions between the chunks,
such as where the datasets might be.</p>
</article></div>