<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-signals" class="anchor" aria-hidden="true" href="#signals"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Signals</h1>
<p><a href="https://travis-ci.org/TsurHerman/Signals.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/f26556f59368f57e7c9f60a68e167d495b181703/68747470733a2f2f7472617669732d63692e6f72672f547375724865726d616e2f5369676e616c732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/TsurHerman/Signals.jl.svg?branch=master" style="max-width:100%;"></a>[<a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/5b72a7a3b073abd7009ed301b6c102e0bac4e7a8/687474703a2f2f636f6465636f762e696f2f6769746875622f547375724865726d616e2f5369676e616c732e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572"><img src="https://camo.githubusercontent.com/5b72a7a3b073abd7009ed301b6c102e0bac4e7a8/687474703a2f2f636f6465636f762e696f2f6769746875622f547375724865726d616e2f5369676e616c732e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/TsurHerman/Signals.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
<p>Signals provides a multi-paradigm fast functional reactive programing for julia.
It supports both pull and push operations and async(default) and non-async modes.</p>
<h2><a id="user-content-signal-creation" class="anchor" aria-hidden="true" href="#signal-creation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Signal Creation</h2>
<div class="highlight highlight-source-julia"><pre>S <span class="pl-k">=</span> <span class="pl-c1">Signal</span>(val;strict_push <span class="pl-k">=</span> <span class="pl-c1">false</span>)</pre></div>
<p>Create a source <code>Signal</code> with initial value <code>val</code>, setting
<code>strict_push</code> to <code>true</code> guarantees that every push to this <code>Signal</code>
will be carried out independently. otherwise if updates occur faster than what the <code>eventloop</code>
can process, then only the last value before the <code>eventloop</code> kicks in will be used(<em>default</em>)</p>
<div class="highlight highlight-source-julia"><pre>S <span class="pl-k">=</span> <span class="pl-c1">Signal</span>(f,args<span class="pl-k">...</span>)</pre></div>
<p>Creates a derived <code>Signal</code> who's value is <code>f(args...)</code> , args can be of any type,
<code>Signal</code> args get replaced by their value before calling <code>f(args...)</code>. reads best with
with <code>do</code> notation(see example).</p>
<h2><a id="user-content-syntax" class="anchor" aria-hidden="true" href="#syntax"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Syntax</h2>
<p><code>S[] = val</code></p>
<p>sets the value of <code>S</code> to <code>val</code> without propagating the change to the rest of the signal graph,
useful in pull based paradigm</p>
<p><code>S()</code></p>
<p><code>pull!</code> Signal, pulling any changes in the Signal graph that affects <code>S</code></p>
<p><code>S(val)</code></p>
<p>sets the value of <code>S</code> to <code>val</code> and pushes the changes along the Signal graph</p>
<p><code>S[]</code></p>
<p>gets the current value stored in <code>S</code> without pulling changes from the graph</p>
<h2><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Example</h2>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> A <span class="pl-k">=</span> <span class="pl-c1">Signal</span>(<span class="pl-c1">1</span>)   <span class="pl-c"><span class="pl-c">#</span> source Signal</span>
Signal
value<span class="pl-k">:</span> <span class="pl-c1">1</span>

julia<span class="pl-k">&gt;</span> B <span class="pl-k">=</span> <span class="pl-c1">2</span>           <span class="pl-c"><span class="pl-c">#</span> non-Signal input</span>
<span class="pl-c1">2</span>

julia<span class="pl-k">&gt;</span>  C <span class="pl-k">=</span> <span class="pl-c1">Signal</span>(A,B) <span class="pl-k">do</span> a,b   <span class="pl-c"><span class="pl-c">#</span> derived Signal</span>
            a<span class="pl-k">+</span>b
        <span class="pl-k">end</span>

Signal
value<span class="pl-k">:</span> <span class="pl-c1">3</span>

julia<span class="pl-k">&gt;</span> A[] <span class="pl-k">=</span> <span class="pl-c1">10</span>        <span class="pl-c"><span class="pl-c">#</span> set value without propagation</span>
<span class="pl-c1">10</span>
julia<span class="pl-k">&gt;</span> C[]             <span class="pl-c"><span class="pl-c">#</span> read current value</span>
<span class="pl-c1">3</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">C</span>()             <span class="pl-c"><span class="pl-c">#</span> pull latest changes from the Signal graph</span>
<span class="pl-c1">12</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">A</span>(<span class="pl-c1">100</span>)          <span class="pl-c"><span class="pl-c">#</span> set value to a signal and propagate this change</span>
<span class="pl-c1">100</span>
julia<span class="pl-k">&gt;</span> C[]
<span class="pl-c1">102</span></pre></div>
<h2><a id="user-content-operators" class="anchor" aria-hidden="true" href="#operators"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Operators</h2>
<p>Signals supports several reactive operators</p>
<ul>
<li><code>droprepeats</code></li>
<li><code>when</code></li>
<li><code>filter</code></li>
<li><code>sampleon</code></li>
<li><code>foldp</code></li>
<li><code>count</code></li>
<li><code>previous</code></li>
<li><code>merge</code></li>
<li><code>async_signal</code></li>
<li><code>remote_signal</code></li>
<li><code>bind!</code></li>
<li><code>unbind!</code></li>
</ul>
<p>individual documentation files are available from within <code>julia</code></p>
<h2><a id="user-content-time-operators" class="anchor" aria-hidden="true" href="#time-operators"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Time operators</h2>
<p>Signals supports several operators that takes time into consideration, for example <code>debounce</code> which executes only after a set amount of time has passed since the inputs were updated or <code>throttle</code> which creates a <code>Signal</code> that is guaranteed not to
be executed more than set amount of times per second.</p>
<ul>
<li><code>debounce</code></li>
<li><code>throttle</code></li>
<li><code>for_signal</code></li>
<li><code>fps</code></li>
<li><code>every</code></li>
<li><code>buffer</code></li>
</ul>
<h2><a id="user-content-async-mode" class="anchor" aria-hidden="true" href="#async-mode"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Async mode</h2>
<p>By default Signals run asynchronically in a dedicated <code>eventloop</code>, this behavior can be changed using</p>
<div class="highlight highlight-source-julia"><pre>Signals<span class="pl-k">.</span><span class="pl-c1">async_mode</span>(<span class="pl-c1">false</span>)</pre></div>
<p>or by individual non-async pushes to the signal graph using:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">push!</span>(s,val,<span class="pl-c1">false</span>)</pre></div>
<h2><a id="user-content-dynamic" class="anchor" aria-hidden="true" href="#dynamic"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Dynamic</h2>
<p>Signals is dynamic , one can push values of any type to a source signal</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Signals
julia<span class="pl-k">&gt;</span> A <span class="pl-k">=</span> <span class="pl-c1">Signal</span>(<span class="pl-c1">1</span>)
Signal
value<span class="pl-k">:</span> <span class="pl-c1">1</span>

julia<span class="pl-k">&gt;</span> B <span class="pl-k">=</span> <span class="pl-c1">Signal</span>(A,A) <span class="pl-k">do</span> a,b
       a<span class="pl-k">*</span>b
       <span class="pl-k">end</span>
Signal
value<span class="pl-k">:</span> <span class="pl-c1">1</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">A</span>(<span class="pl-c1">rand</span>(<span class="pl-c1">3</span>,<span class="pl-c1">3</span>));
julia<span class="pl-k">&gt;</span> <span class="pl-c1">B</span>()
<span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">3</span> Array{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">0.753217</span>  <span class="pl-c1">0.796031</span>  <span class="pl-c1">0.265298</span>
 <span class="pl-c1">0.28489</span>   <span class="pl-c1">0.209641</span>  <span class="pl-c1">0.249161</span>
 <span class="pl-c1">0.980177</span>  <span class="pl-c1">0.810512</span>  <span class="pl-c1">0.571937</span></pre></div>
<h2><a id="user-content-fast" class="anchor" aria-hidden="true" href="#fast"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Fast</h2>
<p>Signals package was rigorously optimized for speed of execution
and minimal recalculation of signal graph updates.</p>
</article></div>