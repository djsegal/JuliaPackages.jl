<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-atomiclevels" class="anchor" aria-hidden="true" href="#atomiclevels"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>AtomicLevels</h1>
<p dir="auto"><a href="https://juliaatoms.org/AtomicLevels.jl/stable/" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Documentation" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://juliaatoms.org/AtomicLevels.jl/dev/" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Documentation (dev)" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/JuliaAtoms/AtomicLevels.jl/actions"><img src="https://github.com/JuliaAtoms/AtomicLevels.jl/workflows/CI/badge.svg" alt="GitHub Actions CI" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/JuliaAtoms/AtomicLevels.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/a42180e01dfbc9e095ed6a05b8185359231f96da2aea52d283c2f706504bd74a/68747470733a2f2f636f6465636f762e696f2f67682f4a756c696141746f6d732f41746f6d69634c6576656c732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="CodeCov" data-canonical-src="https://codecov.io/gh/JuliaAtoms/AtomicLevels.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">AtomicLevels provides a collections of types and methods to facilitate working with atomic states (or, more generally, states with spherical symmetry), both in the relativistic (eigenstates of <code>J = L + S</code>) and non-relativistic (eigenstates of <code>L</code> and <code>S</code> separately) frameworks.</p>
<ul dir="auto">
<li>Orbitals and orbital subshells</li>
<li>Configurations</li>
<li>Configuration state functions (CSFs)</li>
<li>Term symbols</li>
</ul>
<p dir="auto">The aim is to make sure that the types used to label and store information about atomic states are both efficient and user-friendly at the same time.
In addition, it also provides various utility methods, such as generation of a list CSFs corresponding to a given configuration, serialization of orbitals and configurations, methods for introspecting physical quantities etc.</p>
<h2 dir="auto"><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example</h2>
<p dir="auto">To install and load the package, you can just type in the Julia REPL</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; using Pkg; Pkg.add(&quot;DataFrames&quot;)
julia&gt; using AtomicLevels"><pre lang="julia-repl" class="notranslate"><code>julia&gt; using Pkg; Pkg.add("DataFrames")
julia&gt; using AtomicLevels
</code></pre></div>
<p dir="auto">As a simple usage example, constructing a configuration for an S-like state with an open <code>3p</code> shell looks like</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; configuration = c&quot;[Ne]* 3s2 3p4&quot;
1s² 2s² 2p⁶ 3s² 3p⁴"><pre lang="julia-repl" class="notranslate"><code>julia&gt; configuration = c"[Ne]* 3s2 3p4"
1s² 2s² 2p⁶ 3s² 3p⁴
</code></pre></div>
<p dir="auto">which is of type <code>Configuration</code>. To access information about subshells, you can index into
the configuration which returns a tuple. The tuple contains an <code>Orbital</code> object, so you
can, for example, ask for the <code>ℓ</code> and <code>s</code> angular momentum quantum numbers of the subshell</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; shell = configuration[end]
(3p, 4, :open)

julia&gt; angular_momenta(shell[1])
(1, 1/2)"><pre class="notranslate"><code>julia&gt; shell = configuration[end]
(3p, 4, :open)

julia&gt; angular_momenta(shell[1])
(1, 1/2)
</code></pre></div>
<p dir="auto">Also, you can convert the configurations to the corresponding relativistic configurations
and CSFs by simply doing</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; rconfigurations = relconfigurations(configuration)
3-element Array{Configuration{RelativisticOrbital{Int64}},1}:
 1s² 2s² 2p-² 2p⁴ 3s² 3p-² 3p²
 1s² 2s² 2p-² 2p⁴ 3s² 3p- 3p³
 1s² 2s² 2p-² 2p⁴ 3s² 3p⁴

julia&gt; csfs(rconfigurations)
5-element Array{CSF{RelativisticOrbital{Int64},HalfIntegers.Half{Int64},Seniority},1}:
 1s²(₀0|0) 2s²(₀0|0) 2p-²(₀0|0) 2p⁴(₀0|0) 3s²(₀0|0) 3p-²(₀0|0) 3p²(₀0|0)+
 1s²(₀0|0) 2s²(₀0|0) 2p-²(₀0|0) 2p⁴(₀0|0) 3s²(₀0|0) 3p-²(₀0|0) 3p²(₂2|2)+
 1s²(₀0|0) 2s²(₀0|0) 2p-²(₀0|0) 2p⁴(₀0|0) 3s²(₀0|0) 3p-(₁1/2|1/2) 3p³(₁3/2|1)+
 1s²(₀0|0) 2s²(₀0|0) 2p-²(₀0|0) 2p⁴(₀0|0) 3s²(₀0|0) 3p-(₁1/2|1/2) 3p³(₁3/2|2)+
 1s²(₀0|0) 2s²(₀0|0) 2p-²(₀0|0) 2p⁴(₀0|0) 3s²(₀0|0) 3p⁴(₀0|0)+"><pre class="notranslate"><code>julia&gt; rconfigurations = relconfigurations(configuration)
3-element Array{Configuration{RelativisticOrbital{Int64}},1}:
 1s² 2s² 2p-² 2p⁴ 3s² 3p-² 3p²
 1s² 2s² 2p-² 2p⁴ 3s² 3p- 3p³
 1s² 2s² 2p-² 2p⁴ 3s² 3p⁴

julia&gt; csfs(rconfigurations)
5-element Array{CSF{RelativisticOrbital{Int64},HalfIntegers.Half{Int64},Seniority},1}:
 1s²(₀0|0) 2s²(₀0|0) 2p-²(₀0|0) 2p⁴(₀0|0) 3s²(₀0|0) 3p-²(₀0|0) 3p²(₀0|0)+
 1s²(₀0|0) 2s²(₀0|0) 2p-²(₀0|0) 2p⁴(₀0|0) 3s²(₀0|0) 3p-²(₀0|0) 3p²(₂2|2)+
 1s²(₀0|0) 2s²(₀0|0) 2p-²(₀0|0) 2p⁴(₀0|0) 3s²(₀0|0) 3p-(₁1/2|1/2) 3p³(₁3/2|1)+
 1s²(₀0|0) 2s²(₀0|0) 2p-²(₀0|0) 2p⁴(₀0|0) 3s²(₀0|0) 3p-(₁1/2|1/2) 3p³(₁3/2|2)+
 1s²(₀0|0) 2s²(₀0|0) 2p-²(₀0|0) 2p⁴(₀0|0) 3s²(₀0|0) 3p⁴(₀0|0)+
</code></pre></div>
<p dir="auto">For more examples and information about how to work with the various types, please see the <a href="https://juliaatoms.org/AtomicLevels.jl/stable/" rel="nofollow">documentation</a>.</p>
</article></div>