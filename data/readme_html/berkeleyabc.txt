<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-berkeleyabc" class="anchor" aria-hidden="true" href="#berkeleyabc"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>BerkeleyABC</h1>
<p dir="auto">A Julia wrapper around, and a few tests for, the Berkeley ABC logic synthesis
and verification program.</p>
<h3 dir="auto"><a id="user-content-using-abc" class="anchor" aria-hidden="true" href="#using-abc"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Using ABC</h3>
<p dir="auto">The ABC package exports only four functions start_abc, end_abc, restart_abc,
and parse_timing.  Both start_abc and restart_abc return a function which takes
a string version of a command to the ABC shell. The command returns a tuple of the
status and the string that would have been printed to the console. For example</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="using BerkeleyABC
abc_cmd = start_abc()
res = abc_cmd(&quot;read_blif cla_32.blif&quot;)"><pre class="notranslate"><code>using BerkeleyABC
abc_cmd = start_abc()
res = abc_cmd("read_blif cla_32.blif")
</code></pre></div>
<p dir="auto">which results in</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="(0, [&quot;Hierarchy reader flattened 32 instances of logic boxes and left 0 black boxes.&quot;])"><pre class="notranslate"><code>(0, ["Hierarchy reader flattened 32 instances of logic boxes and left 0 black boxes."])
</code></pre></div>
<p dir="auto">we can then do</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="# read in a standard cell library
res = abc_cmd(&quot;read_lib Nangate45_typ.lib&quot;)
# run a simple area based script
res = abc_cmd(&quot;&amp;get; &amp;st; &amp;dch; &amp;nf; &amp;put; ps; stime -p&quot;)"><pre class="notranslate"><code># read in a standard cell library
res = abc_cmd("read_lib Nangate45_typ.lib")
# run a simple area based script
res = abc_cmd("&amp;get; &amp;st; &amp;dch; &amp;nf; &amp;put; ps; stime -p")
</code></pre></div>
<p dir="auto">Notice that the last command above was <code>stime</code> which runs ABCs delay tracer on the design.
We can then run <code>parse_timing</code> on the result to find out</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="parse_timing(res)"><pre class="notranslate"><code>parse_timing(res)
</code></pre></div>
<p dir="auto">which gives a named tuple <code>(gates = 157, area = 191.79, delay = 1181.52)</code></p>
<h3 dir="auto"><a id="user-content-installing-abc" class="anchor" aria-hidden="true" href="#installing-abc"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installing ABC</h3>
<p dir="auto">Just the usual <code>] add ABC</code> using the package manager.</p>
<h3 dir="auto"><a id="user-content-further-documentation" class="anchor" aria-hidden="true" href="#further-documentation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Further documentation</h3>
<p dir="auto">For further information on the ABC logic synthesis system, please see
<a href="https://github.com/berkeley-abc/abc">https://github.com/berkeley-abc/abc</a></p>
</article></div>