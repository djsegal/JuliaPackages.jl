<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-ebicjl" class="anchor" aria-hidden="true" href="#ebicjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>EBIC.jl</h1>
<p>EBIC is a next-generation biclustering algorithm based on artificial intelligence. EBIC is probably the first algorithm capable of discovering the most challenging patterns (i.e. row-constant, column-constant, shift, scale, shift-scale and trend-preserving) in complex and noisy data with average accuracy of over 90%. It is also one of the very few parallel biclustering algorithms that use at least one graphics processing unit (GPU) and is ready for big-data challenges.</p>
<p>The repository contains the new version of <a href="https://github.com/EpistasisLab/ebic">EBIC</a> rewritten and improved.</p>
<h2><a id="user-content-requirements" class="anchor" aria-hidden="true" href="#requirements"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Requirements</h2>
<ul>
<li>Julia 1.6 or higher</li>
<li>CUDA-capable GPU with compute capability 5.0 (Maxwell) or higher</li>
</ul>
<h2><a id="user-content-setting-up-project" class="anchor" aria-hidden="true" href="#setting-up-project"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Setting up project</h2>
<ol>
<li>
<p>Clone the project.</p>
</li>
<li>
<p>Enter the project root directory:</p>
</li>
<li>
<p>Install dependencies</p>
</li>
</ol>
<div class="highlight highlight-source-shell position-relative" data-snippet-clipboard-copy-content="julia --project -E &quot;using Pkg; Pkg.instantiate()&quot;
"><pre>julia --project -E <span class="pl-s"><span class="pl-pds">"</span>using Pkg; Pkg.instantiate()<span class="pl-pds">"</span></span></pre></div>
<ol start="4">
<li>Start quick test on <code>data/example_input.json</code> (running a Julia program takes siginificant amount of time as source code has to be compiled each time, better use Julia REPL).</li>
</ol>
<div class="highlight highlight-source-shell position-relative" data-snippet-clipboard-copy-content="julia --project=. src/EBIC.jl -v -i data/example_input.csv
"><pre>julia --project=. src/EBIC.jl -v -i data/example_input.csv</pre></div>
<h2><a id="user-content-getting-test-data" class="anchor" aria-hidden="true" href="#getting-test-data"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Getting test data</h2>
<p>We provide three processed test datasets which can be fetched from remote DVC repository on Google Drive:</p>
<ul>
<li>Unibic</li>
<li>RecBic Maintext</li>
<li>RecBic Sup (much larger the others)</li>
</ul>
<p>In order to aquire the datasets, the <a href="https://dvc.org" rel="nofollow">DVC</a> application is requried installed on your system.</p>
<p>Run inside the repository <code>dvc pull</code> if you want to fetch all three datasets, whereas to download a particular one use <code>dvc pull &lt;dataset_name&gt;</code> where <code>dataset_name</code> is one of the following:</p>
<ul>
<li><code>unibic</code></li>
<li><code>recbic_maintext</code></li>
<li><code>recbic_sup</code></li>
</ul>
<p><em>When using DVC for the first time for a repository, one must authenticate with their Google account following instructions given by DVC.</em></p>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<h3><a id="user-content-julia-repl" class="anchor" aria-hidden="true" href="#julia-repl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Julia REPL</h3>
<p><em>This is the recommanded way of testing Julia applications.</em></p>
<h4><a id="user-content-running-the-algorithm" class="anchor" aria-hidden="true" href="#running-the-algorithm"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Running the algorithm</h4>
<p>The algorithm is run using <code>run_ebic()</code>. The function shares the same API as command line version described below. Example run with extended results (<code>best_bclrs_stats</code>):</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; include(&quot;src/EBIC.jl&quot;); res = Ebic.run_ebic(; input_path = &quot;data/example_input.csv&quot;, best_bclrs_stats = true)
Progress: 100%|████████████████████| Time: 0:00:41
Dict{String,Any} with 7 entries:
  &quot;data_load_time&quot;      =&gt; 0.0338261
  &quot;best_bclrs_iter&quot;     =&gt; 815
  &quot;biclusters&quot;          =&gt; [Dict(&quot;rows&quot;=&gt;[16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, …
  &quot;last_iter_tabu_hits&quot; =&gt; 333
  &quot;best_bclrs_time&quot;     =&gt; 37.6397
  &quot;algorithm_time&quot;      =&gt; 41.164
  &quot;performed_iters&quot;     =&gt; 894
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">include</span>(<span class="pl-s"><span class="pl-pds">"</span>src/EBIC.jl<span class="pl-pds">"</span></span>); res <span class="pl-k">=</span> Ebic<span class="pl-k">.</span><span class="pl-c1">run_ebic</span>(; input_path <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>data/example_input.csv<span class="pl-pds">"</span></span>, best_bclrs_stats <span class="pl-k">=</span> <span class="pl-c1">true</span>)
Progress<span class="pl-k">:</span> <span class="pl-c1">100</span><span class="pl-k">%</span><span class="pl-k">|</span>████████████████████<span class="pl-k">|</span> Time<span class="pl-k">:</span> <span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">00</span><span class="pl-k">:</span><span class="pl-c1">41</span>
Dict{String,Any} with <span class="pl-c1">7</span> entries<span class="pl-k">:</span>
  <span class="pl-s"><span class="pl-pds">"</span>data_load_time<span class="pl-pds">"</span></span>      <span class="pl-k">=&gt;</span> <span class="pl-c1">0.0338261</span>
  <span class="pl-s"><span class="pl-pds">"</span>best_bclrs_iter<span class="pl-pds">"</span></span>     <span class="pl-k">=&gt;</span> <span class="pl-c1">815</span>
  <span class="pl-s"><span class="pl-pds">"</span>biclusters<span class="pl-pds">"</span></span>          <span class="pl-k">=&gt;</span> [<span class="pl-c1">Dict</span>(<span class="pl-s"><span class="pl-pds">"</span>rows<span class="pl-pds">"</span></span><span class="pl-k">=&gt;</span>[<span class="pl-c1">16</span>, <span class="pl-c1">17</span>, <span class="pl-c1">18</span>, <span class="pl-c1">19</span>, <span class="pl-c1">20</span>, <span class="pl-c1">21</span>, <span class="pl-c1">22</span>, <span class="pl-c1">23</span>, <span class="pl-c1">24</span>, <span class="pl-c1">25</span>, <span class="pl-c1">26</span>, <span class="pl-c1">27</span>, <span class="pl-c1">28</span>, …
  <span class="pl-s"><span class="pl-pds">"</span>last_iter_tabu_hits<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">333</span>
  <span class="pl-s"><span class="pl-pds">"</span>best_bclrs_time<span class="pl-pds">"</span></span>     <span class="pl-k">=&gt;</span> <span class="pl-c1">37.6397</span>
  <span class="pl-s"><span class="pl-pds">"</span>algorithm_time<span class="pl-pds">"</span></span>      <span class="pl-k">=&gt;</span> <span class="pl-c1">41.164</span>
  <span class="pl-s"><span class="pl-pds">"</span>performed_iters<span class="pl-pds">"</span></span>     <span class="pl-k">=&gt;</span> <span class="pl-c1">894</span></pre></div>
<h4><a id="user-content-running-tests-on-provided-datasets" class="anchor" aria-hidden="true" href="#running-tests-on-provided-datasets"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Running tests on provided datasets</h4>
<p>To test all three datasets at once run the following:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; include(&quot;test/ebic_synth_test.jl&quot;); synthtest.main()
results/Ebic.jl/unibic
####################################
Starting test case: 'narrow_100_10'
####################################
##################################
Testing: 'narrow_100_10_data1.txt'
Ground truth: 'narrow_100_10_data1_hiddenBics.txt'
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">include</span>(<span class="pl-s"><span class="pl-pds">"</span>test/ebic_synth_test.jl<span class="pl-pds">"</span></span>); synthtest<span class="pl-k">.</span><span class="pl-c1">main</span>()
results<span class="pl-k">/</span>Ebic<span class="pl-k">.</span>jl<span class="pl-k">/</span>unibic
<span class="pl-c"><span class="pl-c">#</span>###################################</span>
Starting test case<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">'</span>narrow_100_10<span class="pl-pds">'</span></span>
<span class="pl-c"><span class="pl-c">#</span>###################################</span>
<span class="pl-c"><span class="pl-c">#</span>#################################</span>
Testing<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">'</span>narrow_100_10_data1.txt<span class="pl-pds">'</span></span>
Ground truth<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">'</span>narrow_100_10_data1_hiddenBics.txt<span class="pl-pds">'</span></span></pre></div>
<p>The above is the same as running the three functions one after another:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="synthtest.test_unibic()
synthtest.test_recbic_maintext()
synthtest.test_recbic_sup()
"><pre>synthtest<span class="pl-k">.</span><span class="pl-c1">test_unibic</span>()
synthtest<span class="pl-k">.</span><span class="pl-c1">test_recbic_maintext</span>()
synthtest<span class="pl-k">.</span><span class="pl-c1">test_recbic_sup</span>()</pre></div>
<p>The tests' results are save in <code>output</code> folder in the repository root directory.</p>
<h3><a id="user-content-command-line" class="anchor" aria-hidden="true" href="#command-line"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Command line</h3>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="usage: EBIC.jl [-i INPUT_PATH] [-n MAX_ITERATIONS] [-b MAX_BICLUSTERS]
               [-x OVERLAP_THRESHOLD] [-t] [-g GPUS_NUM]
               [-a APPROX_TRENDS_RATIO] [-v] [-s] [-o] [-h]

EBIC is a next-generation biclustering algorithm based on artificial
intelligence (AI). EBIC is probably the first algorithm capable of
discovering the most challenging patterns (i.e. row-constant,
column-constant, shift, scale, shift-scale and trend-preserving) in
complex and noisy data with average accuracy of over 90%. It is also
one of the very few parallel biclustering algorithms that use at least
one graphics processing unit (GPU) and is ready for big-data
challenges.

optional arguments:
  -i, --input INPUT_PATH
                        The path to the input file. (default:
                        &quot;data/example_input.csv&quot;)
  -n, --max_iterations MAX_ITERATIONS
                        The maximum number of iterations of the
                        algorithm. (type: Int64, default: 2000)
  -b, --biclusters_num MAX_BICLUSTERS
                        The number of biclusters that will be returned
                        in the end. (type: Int64, default: 3)
  -x, --overlap_threshold OVERLAP_THRESHOLD
                        The maximum similarity level of each two
                        chromosomes held in top rank list. (type:
                        Float64, default: 0.75)
  -t, --negative_trends
                        Enable negative trends.
  -g, --gpus_num GPUS_NUM
                        The number of gpus the algorithm should run
                        on. (type: Int64, default: 1)
  -a, --approx_trends APPROX_TRENDS_RATIO
                        (type: Float32, default: 0.85)
  -v, --verbose         Turn on the progress bar.
  -s, --best_bclrs_stats
                        Evaluate resulting biclusters finding
                        iteration and time. Enabled, it slightly
                        worsens overall algorithm performance.
  -o, --output          Save biclusters to a file in the JSON format.
                        The output file name is a concatenation of the
                        input file name and '-res.json' suffix.
  -h, --help            show this help message and exit
"><pre><code>usage: EBIC.jl [-i INPUT_PATH] [-n MAX_ITERATIONS] [-b MAX_BICLUSTERS]
               [-x OVERLAP_THRESHOLD] [-t] [-g GPUS_NUM]
               [-a APPROX_TRENDS_RATIO] [-v] [-s] [-o] [-h]

EBIC is a next-generation biclustering algorithm based on artificial
intelligence (AI). EBIC is probably the first algorithm capable of
discovering the most challenging patterns (i.e. row-constant,
column-constant, shift, scale, shift-scale and trend-preserving) in
complex and noisy data with average accuracy of over 90%. It is also
one of the very few parallel biclustering algorithms that use at least
one graphics processing unit (GPU) and is ready for big-data
challenges.

optional arguments:
  -i, --input INPUT_PATH
                        The path to the input file. (default:
                        "data/example_input.csv")
  -n, --max_iterations MAX_ITERATIONS
                        The maximum number of iterations of the
                        algorithm. (type: Int64, default: 2000)
  -b, --biclusters_num MAX_BICLUSTERS
                        The number of biclusters that will be returned
                        in the end. (type: Int64, default: 3)
  -x, --overlap_threshold OVERLAP_THRESHOLD
                        The maximum similarity level of each two
                        chromosomes held in top rank list. (type:
                        Float64, default: 0.75)
  -t, --negative_trends
                        Enable negative trends.
  -g, --gpus_num GPUS_NUM
                        The number of gpus the algorithm should run
                        on. (type: Int64, default: 1)
  -a, --approx_trends APPROX_TRENDS_RATIO
                        (type: Float32, default: 0.85)
  -v, --verbose         Turn on the progress bar.
  -s, --best_bclrs_stats
                        Evaluate resulting biclusters finding
                        iteration and time. Enabled, it slightly
                        worsens overall algorithm performance.
  -o, --output          Save biclusters to a file in the JSON format.
                        The output file name is a concatenation of the
                        input file name and '-res.json' suffix.
  -h, --help            show this help message and exit
</code></pre></div>
</article></div>