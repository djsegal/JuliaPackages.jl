<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-simplesudoku" class="anchor" aria-hidden="true" href="#simplesudoku"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>SimpleSudoku</h1>
<p dir="auto">This package has one function <code>solve_sudoku</code> which takes a 9x9 integer array as input, where 0 indicate unfilled positions, and solves it. For example</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using SimpleSudoku

grid_str = &quot;&quot;&quot;
    300007400
    000010083
    500020700
    980000006
    000005001
    010000020
    620070000
    009600000
    050400000&quot;&quot;&quot;

grid = mapreduce(vcat, split(grid_str, &quot;\n&quot;)) do str
    reshape(parse.(Int8, split(str, &quot;&quot;)), 1, 9)
end

solved_grid, is_solution_valid = solve_sudoku(grid)

if is_solution_valid
    display(solved_grid)
    #  3  6  1  9  8  7  4  5  2
    #  2  9  7  5  1  4  6  8  3
    #  5  4  8  3  2  6  7  1  9
    #  9  8  5  2  4  1  3  7  6
    #  7  3  2  8  6  5  9  4  1
    #  4  1  6  7  3  9  5  2  8
    #  6  2  4  1  7  3  8  9  5
    #  1  7  9  6  5  8  2  3  4
    #  8  5  3  4  9  2  1  6  7
end"><pre><span class="pl-k">using</span> SimpleSudoku

grid_str <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"""</span></span>
<span class="pl-s">    300007400</span>
<span class="pl-s">    000010083</span>
<span class="pl-s">    500020700</span>
<span class="pl-s">    980000006</span>
<span class="pl-s">    000005001</span>
<span class="pl-s">    010000020</span>
<span class="pl-s">    620070000</span>
<span class="pl-s">    009600000</span>
<span class="pl-s">    050400000<span class="pl-pds">"""</span></span>

grid <span class="pl-k">=</span> <span class="pl-c1">mapreduce</span>(vcat, <span class="pl-c1">split</span>(grid_str, <span class="pl-s"><span class="pl-pds">"</span><span class="pl-cce">\n</span><span class="pl-pds">"</span></span>)) <span class="pl-k">do</span> str
    <span class="pl-c1">reshape</span>(<span class="pl-c1">parse</span>.(Int8, <span class="pl-c1">split</span>(str, <span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>)), <span class="pl-c1">1</span>, <span class="pl-c1">9</span>)
<span class="pl-k">end</span>

solved_grid, is_solution_valid <span class="pl-k">=</span> <span class="pl-c1">solve_sudoku</span>(grid)

<span class="pl-k">if</span> is_solution_valid
    <span class="pl-c1">display</span>(solved_grid)
    <span class="pl-c"><span class="pl-c">#</span>  3  6  1  9  8  7  4  5  2</span>
    <span class="pl-c"><span class="pl-c">#</span>  2  9  7  5  1  4  6  8  3</span>
    <span class="pl-c"><span class="pl-c">#</span>  5  4  8  3  2  6  7  1  9</span>
    <span class="pl-c"><span class="pl-c">#</span>  9  8  5  2  4  1  3  7  6</span>
    <span class="pl-c"><span class="pl-c">#</span>  7  3  2  8  6  5  9  4  1</span>
    <span class="pl-c"><span class="pl-c">#</span>  4  1  6  7  3  9  5  2  8</span>
    <span class="pl-c"><span class="pl-c">#</span>  6  2  4  1  7  3  8  9  5</span>
    <span class="pl-c"><span class="pl-c">#</span>  1  7  9  6  5  8  2  3  4</span>
    <span class="pl-c"><span class="pl-c">#</span>  8  5  3  4  9  2  1  6  7</span>
<span class="pl-k">end</span></pre></div>
</article></div>