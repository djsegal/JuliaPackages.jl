<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-treeparzenjl-beta-release" class="anchor" aria-hidden="true" href="#treeparzenjl-beta-release"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>TreeParzen.jl <strong>Beta release</strong></h1>
<p>A pure Julia hyperparameter optimiser.</p>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/IQVIA-ML/TreeParzen.jl/workflows/build/badge.svg"><img src="https://github.com/IQVIA-ML/TreeParzen.jl/workflows/build/badge.svg" alt="" style="max-width:100%;"></a><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/1ec4df543284ce7e5ad6cdc59f9ef3539fd70d7a81382219e353236bfdf9fcfd/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d425344253230332d2d436c617573652d6c696d652e7376673f7374796c653d666c6174"><img src="https://camo.githubusercontent.com/1ec4df543284ce7e5ad6cdc59f9ef3539fd70d7a81382219e353236bfdf9fcfd/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d425344253230332d2d436c617573652d6c696d652e7376673f7374796c653d666c6174" alt="Licence" data-canonical-src="https://img.shields.io/badge/License-BSD%203--Clause-lime.svg?style=flat" style="max-width:100%;"></a></p>
<p>This is a beta release, the package is registered in the general registry.</p>
<h2><a id="user-content-introduction" class="anchor" aria-hidden="true" href="#introduction"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Introduction</h2>
<p>TreeParzen.jl is a pure Julia port of the Hyperopt Python library, with an interface to <a href="https://github.com/alan-turing-institute/MLJ.jl">MLJ</a> for use as a hyperparameter tuning strategy.</p>
<blockquote>
<p><em>Hyperopt is a Python library for serial and parallel optimization over awkward search spaces, which may include real-valued, discrete, and conditional dimensions.</em> - <a href="http://hyperopt.github.io/hyperopt" rel="nofollow">Hyperopt: Distributed Asynchronous Hyper-parameter Optimization</a> (<a href="https://github.com/hyperopt/hyperopt">GitHub</a>)</p>
</blockquote>
<p>TreeParzen.jl is a black-box optimiser based on the tree-parzen estimator method. You can find the original paper that describes this method <a href="https://papers.nips.cc/paper/4443-algorithms-for-hyper-parameter-optimization.pdf" rel="nofollow">here, see section 4 on page 4</a>. It searches for the minimum of a function by manipulating the input parameters. The input parameters can be continuous, discrete or choices between options.</p>
<h2><a id="user-content-differences-with-hyperopt" class="anchor" aria-hidden="true" href="#differences-with-hyperopt"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Differences with hyperopt</h2>
<p>Differences between hyperopt and TreeParzen.jl:</p>
<ul>
<li>hyperopt supports connection to a MongoDB database for storing the results of trials, TreeParzen.jl does not.</li>
<li>hyperopt also supports optimisation using annealing, TreeParzen.jl does not.</li>
<li>hyperopt supports parallelism and distributed computing on top of the IPython engine, TreeParzen.jl is currently single-threaded and single instance. However, TreeParzen.jl comes with MLJTuning integration, which can handle distribution of function evaluations (the expensive part in hyperparameteroptimisation), but not distribution of optimisation itself (which should be <em>relatively</em> cheap anyway).</li>
<li>hyperopt has built-in plotting functions. TreeParzen.jl does not. If you want to visualise what the optimiser is doing you will need to investigate the <code>Vector</code> of <code>Trial</code> objects.</li>
</ul>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>You can install TreeParzen.jl from the REPL with:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="] add TreeParzen
"><pre><code>] add TreeParzen
</code></pre></div>
<p>Then use it like this:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using TreeParzen
"><pre><span class="pl-k">using</span> TreeParzen</pre></div>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<h3><a id="user-content-fmin" class="anchor" aria-hidden="true" href="#fmin"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>fmin</h3>
<p>The entry point of TreeParzen.jl is the <code>fmin</code> function, <a href="src/API.jl#L216">currently found in the <code>API.jl</code> file</a>. You can supply to <code>fmin</code> a function to be optimised, a space of possible parameters to explore, and the number of iterations to attempt for.</p>
<p><code>fmin</code> will return a <code>Dict</code> of parameters that reflect the lowest output it found during the optimisation iterations.</p>
<p>The function to be optimised should return a <code>Float64</code>, which the algorithm will attempt to minimise. If your function actually needs to be maximised and you cannot change it, you can wrap it in another function to modify its output, for example:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="invert_output(params...) = - actual_function(params...)
"><pre><span class="pl-en">invert_output</span>(params<span class="pl-k">...</span>) <span class="pl-k">=</span> <span class="pl-k">-</span> <span class="pl-c1">actual_function</span>(params<span class="pl-k">...</span>)</pre></div>
<h3><a id="user-content-spaces" class="anchor" aria-hidden="true" href="#spaces"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Spaces</h3>
<p>The space is a collection which describes the parameter ranges and choices that can be made. These can be expressed using a family of functions from <a href="src/HP.jl">the <code>HP</code> module</a>.</p>
<p>Each <code>HP.*</code> function needs to be given the name again as the first parameter, and then further arguments as relevant to the function. <a href="docs/hyperparams.md">Instructions are available</a>.</p>
<p>If using a dictionary form, the key is the what be the name of the parameter. Additionally, elements of the space can be nested inside each other. Here is an example:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using TreeParzen

space = Dict(
    :num_leaves =&gt; HP.QuantUniform(:num_leaves, 1., 1_024., 1.),
    :max_depth =&gt; HP.Choice(:max_depth, Float64.(vcat(-1, 1:12))),
    :min_data_in_leaf =&gt; HP.QuantUniform(:min_data_in_leaf, 20., 2_000., 1.),
    :max_bin =&gt; HP.LogQuantNormal(:max_bin, log(255), 0.5, 1.),
    :learning_rate =&gt; HP.LogUniform(:learning_rate, log(0.005), log(0.2)),
    :is_unbalance =&gt; HP.Choice(
        :is_unbalance,
        [
            Dict(:is_unbalance =&gt; true),
            Dict(
                :is_unbalance =&gt; false,
                :scale_pos_weight =&gt; HP.QuantUniform(:scale_pos_weight, 1., 10., 1.)
            )
        ]
    )
)
"><pre><span class="pl-k">using</span> TreeParzen

space <span class="pl-k">=</span> <span class="pl-c1">Dict</span>(
    <span class="pl-c1">:num_leaves</span> <span class="pl-k">=&gt;</span> HP<span class="pl-k">.</span><span class="pl-c1">QuantUniform</span>(<span class="pl-c1">:num_leaves</span>, <span class="pl-c1">1.</span>, <span class="pl-c1">1_024.</span>, <span class="pl-c1">1.</span>),
    <span class="pl-c1">:max_depth</span> <span class="pl-k">=&gt;</span> HP<span class="pl-k">.</span><span class="pl-c1">Choice</span>(<span class="pl-c1">:max_depth</span>, <span class="pl-c1">Float64</span>.(<span class="pl-c1">vcat</span>(<span class="pl-k">-</span><span class="pl-c1">1</span>, <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">12</span>))),
    <span class="pl-c1">:min_data_in_leaf</span> <span class="pl-k">=&gt;</span> HP<span class="pl-k">.</span><span class="pl-c1">QuantUniform</span>(<span class="pl-c1">:min_data_in_leaf</span>, <span class="pl-c1">20.</span>, <span class="pl-c1">2_000.</span>, <span class="pl-c1">1.</span>),
    <span class="pl-c1">:max_bin</span> <span class="pl-k">=&gt;</span> HP<span class="pl-k">.</span><span class="pl-c1">LogQuantNormal</span>(<span class="pl-c1">:max_bin</span>, <span class="pl-c1">log</span>(<span class="pl-c1">255</span>), <span class="pl-c1">0.5</span>, <span class="pl-c1">1.</span>),
    <span class="pl-c1">:learning_rate</span> <span class="pl-k">=&gt;</span> HP<span class="pl-k">.</span><span class="pl-c1">LogUniform</span>(<span class="pl-c1">:learning_rate</span>, <span class="pl-c1">log</span>(<span class="pl-c1">0.005</span>), <span class="pl-c1">log</span>(<span class="pl-c1">0.2</span>)),
    <span class="pl-c1">:is_unbalance</span> <span class="pl-k">=&gt;</span> HP<span class="pl-k">.</span><span class="pl-c1">Choice</span>(
        <span class="pl-c1">:is_unbalance</span>,
        [
            <span class="pl-c1">Dict</span>(<span class="pl-c1">:is_unbalance</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">true</span>),
            <span class="pl-c1">Dict</span>(
                <span class="pl-c1">:is_unbalance</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">false</span>,
                <span class="pl-c1">:scale_pos_weight</span> <span class="pl-k">=&gt;</span> HP<span class="pl-k">.</span><span class="pl-c1">QuantUniform</span>(<span class="pl-c1">:scale_pos_weight</span>, <span class="pl-c1">1.</span>, <span class="pl-c1">10.</span>, <span class="pl-c1">1.</span>)
            )
        ]
    )
)</pre></div>
<p>Other examples of valid spaces include:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="space = HP.Choice(:a_scalar_sampler, [1, 2]) # will select from 1,2
space = [HP.Choice(:firstel, [10, 100]), HP.Uniform(:seconel, 5., 10.)] # first element will be selected from 10,100 and 2nd element uniformly from 5-10
"><pre>space <span class="pl-k">=</span> HP<span class="pl-k">.</span><span class="pl-c1">Choice</span>(<span class="pl-c1">:a_scalar_sampler</span>, [<span class="pl-c1">1</span>, <span class="pl-c1">2</span>]) <span class="pl-c"><span class="pl-c">#</span> will select from 1,2</span>
space <span class="pl-k">=</span> [HP<span class="pl-k">.</span><span class="pl-c1">Choice</span>(<span class="pl-c1">:firstel</span>, [<span class="pl-c1">10</span>, <span class="pl-c1">100</span>]), HP<span class="pl-k">.</span><span class="pl-c1">Uniform</span>(<span class="pl-c1">:seconel</span>, <span class="pl-c1">5.</span>, <span class="pl-c1">10.</span>)] <span class="pl-c"><span class="pl-c">#</span> first element will be selected from 10,100 and 2nd element uniformly from 5-10</span></pre></div>
<h3><a id="user-content-fmin-sample-usage" class="anchor" aria-hidden="true" href="#fmin-sample-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>fmin sample usage</h3>
<p>Here is an example call of <code>fmin</code> using the items described above:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using TreeParzen

best = fmin(
    invert_output, # The function to be optimised.
    space,         # The space over which the optimisation should take place.
    20,          # The number of iterations to take.
)

println(best)
"><pre><span class="pl-k">using</span> TreeParzen

best <span class="pl-k">=</span> <span class="pl-c1">fmin</span>(
    invert_output, <span class="pl-c"><span class="pl-c">#</span> The function to be optimised.</span>
    space,         <span class="pl-c"><span class="pl-c">#</span> The space over which the optimisation should take place.</span>
    <span class="pl-c1">20</span>,          <span class="pl-c"><span class="pl-c">#</span> The number of iterations to take.</span>
)

<span class="pl-c1">println</span>(best)</pre></div>
<p>For more examples, please see <a href="test/fmin/points.jl">the unit tests</a>.</p>
<h3><a id="user-content-asktell-api" class="anchor" aria-hidden="true" href="#asktell-api"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Ask/Tell API</h3>
<p>TreeParzen.jl also supports tuning via an <code>ask</code> and <code>tell!</code> interface, where the user is afforded
a lot of control on what they can do and just need to ask the optimiser for suggestions, and tell
it about the results.</p>
<p>This allows users to do advanced things such as wrapping up objectives in
a more complex way, using callbacks, controlling termination, optimising after N suggestions,
continuing iterating if solution is not satisfactory, and so on.</p>
<p>One should call <code>Graph.checkspace(space)</code> prior to using <code>ask</code> -- to avoid inefficiency of repeatedly
checking the space is valid for each ask the user is required to do this themselves.</p>
<p>A basic example:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using TreeParzen
config = Config()
trialhist = TreeParzen.Trials.Trial[]

space = Dict(:x =&gt; HP.Uniform(:x, -5., 5.))
TreeParzen.Graph.checkspace(space)

for i in 1:100

    trial1 = ask(space, trialhist, config)
    tell!(trialhist, trial1, trial1.hyperparams[:x] ^ 2)

end

@show provide_recommendation(trialhist)
"><pre><span class="pl-k">using</span> TreeParzen
config <span class="pl-k">=</span> <span class="pl-c1">Config</span>()
trialhist <span class="pl-k">=</span> TreeParzen<span class="pl-k">.</span>Trials<span class="pl-k">.</span>Trial[]

space <span class="pl-k">=</span> <span class="pl-c1">Dict</span>(<span class="pl-c1">:x</span> <span class="pl-k">=&gt;</span> HP<span class="pl-k">.</span><span class="pl-c1">Uniform</span>(<span class="pl-c1">:x</span>, <span class="pl-k">-</span><span class="pl-c1">5.</span>, <span class="pl-c1">5.</span>))
TreeParzen<span class="pl-k">.</span>Graph<span class="pl-k">.</span><span class="pl-c1">checkspace</span>(space)

<span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">100</span>

    trial1 <span class="pl-k">=</span> <span class="pl-c1">ask</span>(space, trialhist, config)
    <span class="pl-c1">tell!</span>(trialhist, trial1, trial1<span class="pl-k">.</span>hyperparams[<span class="pl-c1">:x</span>] <span class="pl-k">^</span> <span class="pl-c1">2</span>)

<span class="pl-k">end</span>

<span class="pl-c1">@show</span> <span class="pl-c1">provide_recommendation</span>(trialhist)</pre></div>
<h3><a id="user-content-mljtuning" class="anchor" aria-hidden="true" href="#mljtuning"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>MLJTuning</h3>
<p>TreeParzen.jl has integration with <a href="https://github.com/alan-turing-institute/MLJTuning.jl">MLJTuning</a>, for which an <a href="docs/examples/simple_mlj_demo/simple_mlj_demo.md">example</a> is provided.</p>
<h3><a id="user-content-config-object" class="anchor" aria-hidden="true" href="#config-object"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Config object</h3>
<p>The optimiser itself has a couple of parameters, which are specified in a <code>Config</code> object, or alternatively, as keyword arguments to <code>fmin</code>.</p>
<ul>
<li><code>threshold::Float64</code> : A value between <code>0</code> and <code>1</code>, which controls the probability threshold at
which expected improvement criteria is modeled.</li>
<li><code>linear_forgetting::Int</code> : A positive value which controls the number of historic points which
are used for probabilistic modelling, and older points beyond this are linearly
de-weighted.</li>
<li><code>draws::Int</code> : A positive value which controls the number of samples to draw when making a
recommendation for next optimisation candidate.</li>
<li><code>random_trials::Int</code> : A positive value which controls the number of trials of randomly
generated candidate points before TreeParzen optimisation is used.</li>
<li><code>prior_weight::Float64</code> : A value between <code>0</code> and <code>1</code>, which controls importance of user specified
probabilistic parameters vs the history of trials.</li>
</ul>
<h2><a id="user-content-development" class="anchor" aria-hidden="true" href="#development"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Development</h2>
<p>A custom diagnostic function called <code>inside()</code> has been added. It can be called on any <code>AbstractDelayed</code> or <code>History</code> object, and the contents of the object will be printed to the console in a tree view.</p>
<h3><a id="user-content-about-the-unique-identifiers" class="anchor" aria-hidden="true" href="#about-the-unique-identifiers"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>About the unique identifiers:</h3>
<p>Python dictionaries can store multiple classes with the same content as different keys, where Julia will make them equivalent and thus collapse the keys. To get around this, we are using a random number inside every child of <code>AbstractDelayed</code>. They are not shown when using <code>inside()</code>.</p>
<h2><a id="user-content-unit-tests" class="anchor" aria-hidden="true" href="#unit-tests"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Unit tests</h2>
<p>To run the unit tests:</p>
<div class="highlight highlight-source-shell position-relative" data-snippet-clipboard-copy-content="julia --project -e &quot;using Pkg; Pkg.test()&quot;
"><pre>julia --project -e <span class="pl-s"><span class="pl-pds">"</span>using Pkg; Pkg.test()<span class="pl-pds">"</span></span></pre></div>
<h2><a id="user-content-contributors-" class="anchor" aria-hidden="true" href="#contributors-"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Contributors <g-emoji class="g-emoji" alias="sparkles" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2728.png">✨</g-emoji></h2>
<p>The list of our Contributors can be found <a href="CONTRIBUTORS.md">here</a>.
Please don't hesitate to add yourself when you contribute.</p>
</article></div>