<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-avrojl" class="anchor" aria-hidden="true" href="#avrojl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Avro.jl</h1>
<p><a href="https://travis-ci.org/Hydrotoast/Avro.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/7bd92748ab73c714b59d1f7ecef113d6b477e67c/68747470733a2f2f7472617669732d63692e6f72672f487964726f746f6173742f4176726f2e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/Hydrotoast/Avro.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p>The Julia implementation of the Apache Avro 1.8.1 specification.</p>
<p>Currently, we support the following features:</p>
<ul>
<li>Parsing schemas from JSON specifications in <code>.avsc</code></li>
<li>Reading from and writing to Avro container files</li>
<li>Generic implementation for instances of Avro values</li>
</ul>
<h2><a id="user-content-user-schema" class="anchor" aria-hidden="true" href="#user-schema"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>User Schema</h2>
<p>Consider a simple schema for users.</p>
<div class="highlight highlight-source-json"><pre>{
    <span class="pl-s"><span class="pl-pds">"</span>namespace<span class="pl-pds">"</span></span>: <span class="pl-s"><span class="pl-pds">"</span>example.avro<span class="pl-pds">"</span></span>,
    <span class="pl-s"><span class="pl-pds">"</span>type<span class="pl-pds">"</span></span>: <span class="pl-s"><span class="pl-pds">"</span>record<span class="pl-pds">"</span></span>,
    <span class="pl-s"><span class="pl-pds">"</span>name<span class="pl-pds">"</span></span>: <span class="pl-s"><span class="pl-pds">"</span>User<span class="pl-pds">"</span></span>,
    <span class="pl-s"><span class="pl-pds">"</span>fields<span class="pl-pds">"</span></span>: [
        {<span class="pl-s"><span class="pl-pds">"</span>name<span class="pl-pds">"</span></span>: <span class="pl-s"><span class="pl-pds">"</span>name<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>type<span class="pl-pds">"</span></span>: <span class="pl-s"><span class="pl-pds">"</span>string<span class="pl-pds">"</span></span>},
        {<span class="pl-s"><span class="pl-pds">"</span>name<span class="pl-pds">"</span></span>: <span class="pl-s"><span class="pl-pds">"</span>favorite_number<span class="pl-pds">"</span></span>,  <span class="pl-s"><span class="pl-pds">"</span>type<span class="pl-pds">"</span></span>: [<span class="pl-s"><span class="pl-pds">"</span>null<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>int<span class="pl-pds">"</span></span>]},
        {<span class="pl-s"><span class="pl-pds">"</span>name<span class="pl-pds">"</span></span>: <span class="pl-s"><span class="pl-pds">"</span>favorite_color<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>type<span class="pl-pds">"</span></span>: [<span class="pl-s"><span class="pl-pds">"</span>null<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>string<span class="pl-pds">"</span></span>]}
    ]
}</pre></div>
<p>We use this schema in the examples below.</p>
<h2><a id="user-content-writing-to-an-avro-file" class="anchor" aria-hidden="true" href="#writing-to-an-avro-file"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Writing to an Avro File</h2>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> Avro
<span class="pl-k">using</span> Avro<span class="pl-k">.</span>Generic

schema_filename <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>user.avsc<span class="pl-pds">"</span></span>
output_filename <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>users.avro<span class="pl-pds">"</span></span>
output <span class="pl-k">=</span> <span class="pl-c1">open</span>(output_filename, <span class="pl-s"><span class="pl-pds">"</span>w<span class="pl-pds">"</span></span>)

<span class="pl-c"><span class="pl-c">#</span> Parse the schema</span>
schema <span class="pl-k">=</span> <span class="pl-c1">open</span>(schema_filename, <span class="pl-s"><span class="pl-pds">"</span>r<span class="pl-pds">"</span></span>) <span class="pl-k">do</span> file
    Avro<span class="pl-k">.</span>Schemas<span class="pl-k">.</span><span class="pl-c1">parse</span>(<span class="pl-c1">readstring</span>(file))
<span class="pl-k">end</span>

users <span class="pl-k">=</span> [
    <span class="pl-c1">GenericRecord</span>(schema, [<span class="pl-s"><span class="pl-pds">"</span>bob<span class="pl-pds">"</span></span>, <span class="pl-c1">Int32</span>(<span class="pl-c1">1</span>), <span class="pl-s"><span class="pl-pds">"</span>blue<span class="pl-pds">"</span></span>])
    <span class="pl-c1">GenericRecord</span>(schema, [<span class="pl-s"><span class="pl-pds">"</span>alice<span class="pl-pds">"</span></span>, <span class="pl-c1">Int32</span>(<span class="pl-c1">2</span>), <span class="pl-s"><span class="pl-pds">"</span>red<span class="pl-pds">"</span></span>])
]

<span class="pl-c"><span class="pl-c">#</span> Write objects</span>
file_writer <span class="pl-k">=</span> DataFile<span class="pl-k">.</span>Writers<span class="pl-k">.</span><span class="pl-c1">wrap</span>(schema, output)
<span class="pl-k">for</span> user <span class="pl-k">in</span> users
    DataFile<span class="pl-k">.</span><span class="pl-c1">write</span>(file_writer, user)
<span class="pl-k">end</span>
DataFile<span class="pl-k">.</span><span class="pl-c1">close</span>(file_writer)</pre></div>
<h2><a id="user-content-reading-from-an-avro-file" class="anchor" aria-hidden="true" href="#reading-from-an-avro-file"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Reading from an Avro File</h2>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> Avro

input_filename <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>users.avro<span class="pl-pds">"</span></span>
input <span class="pl-k">=</span> <span class="pl-c1">open</span>(input_filename, <span class="pl-s"><span class="pl-pds">"</span>r<span class="pl-pds">"</span></span>)

<span class="pl-c"><span class="pl-c">#</span> Read the objects</span>
<span class="pl-k">for</span> record <span class="pl-k">in</span> DataFile<span class="pl-k">.</span>Readers<span class="pl-k">.</span><span class="pl-c1">wrap</span>(input)
    <span class="pl-c1">println</span>(record)
<span class="pl-k">end</span></pre></div>
<h2><a id="user-content-todo" class="anchor" aria-hidden="true" href="#todo"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>TODO</h2>
<ul>
<li>Schema validation</li>
<li>Schema default values</li>
<li>Code generation from schemas</li>
</ul>
</article></div>