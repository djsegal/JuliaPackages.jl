<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-gasmodelsjl" class="anchor" aria-hidden="true" href="#gasmodelsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>GasModels.jl</h1>
<p><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/d28e84b3b58dc997e01dcfc2c12cf8b6bceab75cc98b9aed838437ac2505e52c/68747470733a2f2f6c616e6c2d616e73692e6769746875622e696f2f4761734d6f64656c732e6a6c2f6465762f6173736574732f6c6f676f2e737667"><img src="https://camo.githubusercontent.com/d28e84b3b58dc997e01dcfc2c12cf8b6bceab75cc98b9aed838437ac2505e52c/68747470733a2f2f6c616e6c2d616e73692e6769746875622e696f2f4761734d6f64656c732e6a6c2f6465762f6173736574732f6c6f676f2e737667" align="left" width="200" alt="GasModels logo" data-canonical-src="https://lanl-ansi.github.io/GasModels.jl/dev/assets/logo.svg" style="max-width:100%;"></a></p>
<p>Release: <a href="https://lanl-ansi.github.io/GasModels.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a></p>
<p>Dev:
<a href="https://travis-ci.org/lanl-ansi/GasModels.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/c7d63085173b38d0c8f677797039f46d7d68e7dbc7cb6fe3c4d77c397889128e/68747470733a2f2f7472617669732d63692e6f72672f6c616e6c2d616e73692f4761734d6f64656c732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/lanl-ansi/GasModels.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/lanl-ansi/GasModels.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/dff2d4c579e411b3d2610064d7b6b5a77d1930e0c8ac817eed3b7eee5f985e2b/68747470733a2f2f636f6465636f762e696f2f67682f6c616e6c2d616e73692f4761734d6f64656c732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/lanl-ansi/GasModels.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a>
<a href="https://lanl-ansi.github.io/GasModels.jl/latest" rel="nofollow"><img src="https://camo.githubusercontent.com/56f8252ba8e9d3f0b810769543f77823d2fe031ce560d4c2d69fb1fcad800383/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6c61746573742d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-latest-blue.svg" style="max-width:100%;"></a></p>
<p>GasModels.jl is a Julia/JuMP package for Steady-State Gas Network Optimization.
It is designed to enable computational evaluation of emerging Gas network formulations and algorithms in a common platform.
The code is engineered to decouple problem specifications (e.g. Gas Flow, Expansion planning, ...) from the gas network formulations (e.g. DWP, CRDWP, ...).
This enables the definition of a wide variety of gas network formulations and their comparison on common problem specifications.</p>
<p><strong>Core Problem Specifications</strong></p>
<ul>
<li>Gas Flow (gf)</li>
<li>Expansion Planning (ne)</li>
<li>Load Shed (ls)</li>
</ul>
<p><strong>Core Network Formulations</strong></p>
<ul>
<li>DWP</li>
<li>WP</li>
<li>CRDWP</li>
<li>LRDWP</li>
<li>LRWP</li>
</ul>
<h2><a id="user-content-basic-usage" class="anchor" aria-hidden="true" href="#basic-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Basic Usage</h2>
<p>Once GasModels is installed, a optimizer is installed, and a network data file  has been acquired, a Gas Flow can be executed with,</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="using GasModels
using &lt;solver_package&gt;

run_gf(&quot;foo.m&quot;, FooGasModel, FooSolver())
"><pre><code>using GasModels
using &lt;solver_package&gt;

run_gf("foo.m", FooGasModel, FooSolver())
</code></pre></div>
<p>Similarly, an expansion optimizer can be executed with,</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="run_ne(&quot;foo.m&quot;, FooGasModel, FooSolver())
"><pre><code>run_ne("foo.m", FooGasModel, FooSolver())
</code></pre></div>
<p>where FooGasModel is the implementation of the mathematical program of the Gas equations you plan to use (i.e. DWPGasModel) and FooSolver is the JuMP optimizer you want to use to solve the optimization problem (i.e. IpoptSolver).</p>
<h2><a id="user-content-acknowledgments" class="anchor" aria-hidden="true" href="#acknowledgments"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Acknowledgments</h2>
<p>This code has been developed as part of the Advanced Network Science Initiative at Los Alamos National Laboratory.
The primary developer is Russell Bent, with significant contributions from Conrado Borraz-Sanchez, Hassan Hijazi, and Pascal van Hentenryck.</p>
<p>Special thanks to Miles Lubin for his assistance in integrating with Julia/JuMP.</p>
<h2><a id="user-content-license" class="anchor" aria-hidden="true" href="#license"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>License</h2>
<p>This code is provided under a BSD license as part of the Multi-Infrastructure Control and Optimization Toolkit (MICOT) project, LA-CC-13-108.</p>
</article></div>