<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-parameterjumpjl" class="anchor" aria-hidden="true" href="#parameterjumpjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>ParameterJuMP.jl</h1>
<table>
<thead>
<tr>
<th align="center"><strong>Build Status</strong></th>
<th align="center"><strong>Social</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><a href="https://github.com/JuliaStochOpt/ParameterJuMP.jl/actions?query=workflow%3ACI"><img src="https://github.com/JuliaStochOpt/ParameterJuMP.jl/workflows/CI/badge.svg?branch=master" alt="Build Status" style="max-width: 100%;"></a></td>
<td align="center"><a href="https://gitter.im/JuliaOpt/StochasticDualDynamicProgramming.jl?utm_source=share-link&amp;utm_medium=link&amp;utm_campaign=share-link" rel="nofollow"><img src="https://camo.githubusercontent.com/0e73c8791a42461d5efcea4d9db61c5bb1118e227f89e0dccc3225247bca724a/68747470733a2f2f6261646765732e6769747465722e696d2f4a756c69614f70742f53746f636861737469634475616c44796e616d696350726f6772616d6d696e672e6a6c2e737667" alt="Gitter" data-canonical-src="https://badges.gitter.im/JuliaOpt/StochasticDualDynamicProgramming.jl.svg" style="max-width: 100%;"></a></td>
</tr>
<tr>
<td align="center"><a href="https://codecov.io/gh/JuliaStochOpt/ParameterJuMP.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/e2f25427e81c255c98e5ccda7e3a63b1dce720d3d161f268e72466e659d66981/68747470733a2f2f636f6465636f762e696f2f67682f4a756c696153746f63684f70742f506172616d657465724a754d502e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov branch" data-canonical-src="https://codecov.io/gh/JuliaStochOpt/ParameterJuMP.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></td>
<td align="center"><a href="https://discourse.julialang.org/c/domain/opt" rel="nofollow"><img src="https://camo.githubusercontent.com/f8462892b313c50a43156c23b37fd7e732af7b406ad01b816528b3d2dc776d48/68747470733a2f2f75706c6f61642e77696b696d656469612e6f72672f77696b6970656469612f636f6d6d6f6e732f7468756d622f612f61662f446973636f757273655f6c6f676f2e706e672f37393970782d446973636f757273655f6c6f676f2e706e67" width="64" data-canonical-src="https://upload.wikimedia.org/wikipedia/commons/thumb/a/af/Discourse_logo.png/799px-Discourse_logo.png" style="max-width: 100%;"></a></td>
</tr>
</tbody>
</table>
<p dir="auto">A JuMP extension to use parameters in constraints constants.</p>
<h2 dir="auto"><a id="user-content-welcome-to-parameterjump" class="anchor" aria-hidden="true" href="#welcome-to-parameterjump"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Welcome to ParameterJuMP</h2>
<p dir="auto">ParameterJuMP adds new methods created on top of JuMP to use constant
parameters in optimization problems.</p>
<p dir="auto">To construct a parameter, pass <code>Param()</code> as the variable-type argument to
<code>@variable</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@variable(model, p == 1, Param())
@variable(model, p[i = 1:3] == i, Param())
anon = @variable(model, variable_type = Param())"><pre><span class="pl-c1">@variable</span>(model, p <span class="pl-k">==</span> <span class="pl-c1">1</span>, <span class="pl-c1">Param</span>())
<span class="pl-c1">@variable</span>(model, p[i <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">3</span>] <span class="pl-k">==</span> i, <span class="pl-c1">Param</span>())
anon <span class="pl-k">=</span> <span class="pl-c1">@variable</span>(model, variable_type <span class="pl-k">=</span> <span class="pl-c1">Param</span>())</pre></div>
<p dir="auto">It is possible to change the current value of a parameter with the
function:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="set_value(p::ParameterRef, new_value::Number)"><pre><span class="pl-c1">set_value</span>(p<span class="pl-k">::</span><span class="pl-c1">ParameterRef</span>, new_value<span class="pl-k">::</span><span class="pl-c1">Number</span>)</pre></div>
<p dir="auto">Query the current value of the parameter with:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="value(p::ParameterRef)"><pre><span class="pl-c1">value</span>(p<span class="pl-k">::</span><span class="pl-c1">ParameterRef</span>)</pre></div>
<p dir="auto">Finally, the <code>dual</code> function of JuMP is overloaded to return duals
for parameters:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="dual(p::ParameterRef)"><pre><span class="pl-c1">dual</span>(p<span class="pl-k">::</span><span class="pl-c1">ParameterRef</span>)</pre></div>
<p dir="auto">Last but not least!
The parameter algebra was implemented so that is possible to:</p>
<ul dir="auto">
<li>sum two parameters</li>
<li>multiply parameters by constants</li>
<li>sum parameters and variables</li>
<li>sum parameters and affine expressions</li>
</ul>
<p dir="auto">All the operations related to linear constraints are implemented.</p>
<h3 dir="auto"><a id="user-content-simple-example" class="anchor" aria-hidden="true" href="#simple-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Simple example</h3>
<p dir="auto">Lets use JuMP plus ParameterJuMP to solve the optimization problem:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="min   x
s.t.  x &gt;= a"><pre class="notranslate"><code>min   x
s.t.  x &gt;= a
</code></pre></div>
<p dir="auto">where <code>x</code> is a variable and <code>a</code> is a constant.
We can also solve it for different values of <code>a</code>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# Create a JuMP model able to handle parameters
model = Model(SOME_SOLVER.Optimizer)

# Create a regular JuMP variable
@variable(model, x)

# Create a parameter fixed at 10
@variable(model, a == 10, Param())

# adds a constraint mixing variables and parameters to the model
@constraint(model, x &gt;= a)

# solve the model
optimize!(model)

# query dual variable of the constant a
dual(a)

# modify the value of the parameter a to 20
set_value(a, 20)

# solve the model with the new value of the parameter
optimize!(model)"><pre><span class="pl-c"><span class="pl-c">#</span> Create a JuMP model able to handle parameters</span>
model <span class="pl-k">=</span> <span class="pl-c1">Model</span>(SOME_SOLVER<span class="pl-k">.</span>Optimizer)

<span class="pl-c"><span class="pl-c">#</span> Create a regular JuMP variable</span>
<span class="pl-c1">@variable</span>(model, x)

<span class="pl-c"><span class="pl-c">#</span> Create a parameter fixed at 10</span>
<span class="pl-c1">@variable</span>(model, a <span class="pl-k">==</span> <span class="pl-c1">10</span>, <span class="pl-c1">Param</span>())

<span class="pl-c"><span class="pl-c">#</span> adds a constraint mixing variables and parameters to the model</span>
<span class="pl-c1">@constraint</span>(model, x <span class="pl-k">&gt;=</span> a)

<span class="pl-c"><span class="pl-c">#</span> solve the model</span>
<span class="pl-c1">optimize!</span>(model)

<span class="pl-c"><span class="pl-c">#</span> query dual variable of the constant a</span>
<span class="pl-c1">dual</span>(a)

<span class="pl-c"><span class="pl-c">#</span> modify the value of the parameter a to 20</span>
<span class="pl-c1">set_value</span>(a, <span class="pl-c1">20</span>)

<span class="pl-c"><span class="pl-c">#</span> solve the model with the new value of the parameter</span>
<span class="pl-c1">optimize!</span>(model)</pre></div>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">Currently ParameterJuMP works with Julia 1.x and JuMP 0.21.x</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="import Pkg; Pkg.add(&quot;ParameterJuMP&quot;)"><pre><span class="pl-k">import</span> Pkg; Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>ParameterJuMP<span class="pl-pds">"</span></span>)</pre></div>
<h2 dir="auto"><a id="user-content-motivation" class="anchor" aria-hidden="true" href="#motivation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Motivation</h2>
<p dir="auto">Suppose we have linear programming problem of the following form</p>
<p align="center" dir="auto">
<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/86d581ac5aa2e0e975744033fdf88df2c7b77ad290714e1f5e24c92b0160fa0d/68747470733a2f2f6c617465782e636f6465636f67732e636f6d2f6769662e6c617465783f5c626567696e7b61727261797d7b6c6c7d2673706163653b5c6d626f787b6d696e696d697a657d2673706163653b262673706163653b635e5c746f702673706163653b785c5c2673706163653b5c6d626f787b7375626a6563742673706163653b746f7d2673706163653b262673706163653b41782673706163653b2673706163653b3d2673706163653b622673706163653b2d2673706163653b442673706163653b792673706163653b5c5c2673706163653b262673706163653b782673706163653b5c6765712673706163653b302c2673706163653b5c656e647b61727261797d"><img src="https://camo.githubusercontent.com/86d581ac5aa2e0e975744033fdf88df2c7b77ad290714e1f5e24c92b0160fa0d/68747470733a2f2f6c617465782e636f6465636f67732e636f6d2f6769662e6c617465783f5c626567696e7b61727261797d7b6c6c7d2673706163653b5c6d626f787b6d696e696d697a657d2673706163653b262673706163653b635e5c746f702673706163653b785c5c2673706163653b5c6d626f787b7375626a6563742673706163653b746f7d2673706163653b262673706163653b41782673706163653b2673706163653b3d2673706163653b622673706163653b2d2673706163653b442673706163653b792673706163653b5c5c2673706163653b262673706163653b782673706163653b5c6765712673706163653b302c2673706163653b5c656e647b61727261797d" title="" data-canonical-src="https://latex.codecogs.com/gif.latex?\begin{array}{ll}&amp;space;\mbox{minimize}&amp;space;&amp;&amp;space;c^\top&amp;space;x\\&amp;space;\mbox{subject&amp;space;to}&amp;space;&amp;&amp;space;Ax&amp;space;&amp;space;=&amp;space;b&amp;space;-&amp;space;D&amp;space;y&amp;space;\\&amp;space;&amp;&amp;space;x&amp;space;\geq&amp;space;0,&amp;space;\end{array}" style="max-width: 100%;"></a>
</p>
<p dir="auto">The only decision variable in the problem is <a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/6ad542c202b07bbe9a216dd606491fab0a2f283f936edadff8d5b7fa443730bb/687474703a2f2f6c617465782e636f6465636f67732e636f6d2f6769662e6c617465783f78"><img src="https://camo.githubusercontent.com/6ad542c202b07bbe9a216dd606491fab0a2f283f936edadff8d5b7fa443730bb/687474703a2f2f6c617465782e636f6465636f67732e636f6d2f6769662e6c617465783f78" border="0" data-canonical-src="http://latex.codecogs.com/gif.latex?x" style="max-width: 100%;"></a>.
On the other hand, <a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/43c8a5acf5eb8967c7e5726ed30d9c64e156db506774bb36a5a19088f4cd6d5d/687474703a2f2f6c617465782e636f6465636f67732e636f6d2f6769662e6c617465783f79"><img src="https://camo.githubusercontent.com/43c8a5acf5eb8967c7e5726ed30d9c64e156db506774bb36a5a19088f4cd6d5d/687474703a2f2f6c617465782e636f6465636f67732e636f6d2f6769662e6c617465783f79" border="0" data-canonical-src="http://latex.codecogs.com/gif.latex?y" style="max-width: 100%;"></a> is a mere parameter.</p>
<p dir="auto">Problems like this appear frequently in Stochastic optimization and in Decomposition frameworks.</p>
<p dir="auto">In stochastic optimization it is frequent to solve that same problem for
multiple values of <a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/43c8a5acf5eb8967c7e5726ed30d9c64e156db506774bb36a5a19088f4cd6d5d/687474703a2f2f6c617465782e636f6465636f67732e636f6d2f6769662e6c617465783f79"><img src="https://camo.githubusercontent.com/43c8a5acf5eb8967c7e5726ed30d9c64e156db506774bb36a5a19088f4cd6d5d/687474703a2f2f6c617465782e636f6465636f67732e636f6d2f6769662e6c617465783f79" border="0" data-canonical-src="http://latex.codecogs.com/gif.latex?y" style="max-width: 100%;"></a>, which are tipically scenario dependent.</p>
<p dir="auto">In decomposition frameworks, it is useful to solve the same problem
for multiple values of <a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/43c8a5acf5eb8967c7e5726ed30d9c64e156db506774bb36a5a19088f4cd6d5d/687474703a2f2f6c617465782e636f6465636f67732e636f6d2f6769662e6c617465783f79"><img src="https://camo.githubusercontent.com/43c8a5acf5eb8967c7e5726ed30d9c64e156db506774bb36a5a19088f4cd6d5d/687474703a2f2f6c617465782e636f6465636f67732e636f6d2f6769662e6c617465783f79" border="0" data-canonical-src="http://latex.codecogs.com/gif.latex?y" style="max-width: 100%;"></a>, but even more important is to be able
to query dual values from <a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/43c8a5acf5eb8967c7e5726ed30d9c64e156db506774bb36a5a19088f4cd6d5d/687474703a2f2f6c617465782e636f6465636f67732e636f6d2f6769662e6c617465783f79"><img src="https://camo.githubusercontent.com/43c8a5acf5eb8967c7e5726ed30d9c64e156db506774bb36a5a19088f4cd6d5d/687474703a2f2f6c617465782e636f6465636f67732e636f6d2f6769662e6c617465783f79" border="0" data-canonical-src="http://latex.codecogs.com/gif.latex?y" style="max-width: 100%;"></a>. This dual values are computed by applying
the chain rule on the duals of the constraints.</p>
<h3 dir="auto"><a id="user-content-pure-jump-version" class="anchor" aria-hidden="true" href="#pure-jump-version"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Pure JuMP version</h3>
<p dir="auto">In pure JuMP we can acomplish these tasks by creating dummy fixed variables,
so that we can easily change their fixed values and query duals from fixing
constraints.</p>
<p dir="auto">One example in pure JuMP goes as follows:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# create a regular JuMP Model
model_pure = Model(SOME_SOLVER.Optimizer)

# add optimization variables
@variable(model_pure, x[1:N] &gt;= 0)

# add dummy fixed variables
@variable(model_pure, y[1:M])
@variable(model_pure, y_fixed[1:M] == value_for_y[i])
@constraint(model_pure, fix_y[j in 1:M], y[i] == y_fixed[i])

# add constraints
@constraint(model_pure, ctr[k in 1:P],
    sum(A[i,k]*x[i] for i in 1:N) == b[k] - sum(D[j,k]*y[j] for j in 1:M))

# create objective function
@objective(model_pure, Min, sum(c[i]*x[i] for i in 1:N))

# solve problem
optimize!(model_pure)

# query dual values
y_duals = dual.(fix_y)

# modify y
set_value.(y_fixed, new_value_for_y)

# solve problem (again)
optimize!(model_pure)

# query dual values (again)
y_duals = dual.(fix_y)"><pre><span class="pl-c"><span class="pl-c">#</span> create a regular JuMP Model</span>
model_pure <span class="pl-k">=</span> <span class="pl-c1">Model</span>(SOME_SOLVER<span class="pl-k">.</span>Optimizer)

<span class="pl-c"><span class="pl-c">#</span> add optimization variables</span>
<span class="pl-c1">@variable</span>(model_pure, x[<span class="pl-c1">1</span><span class="pl-k">:</span>N] <span class="pl-k">&gt;=</span> <span class="pl-c1">0</span>)

<span class="pl-c"><span class="pl-c">#</span> add dummy fixed variables</span>
<span class="pl-c1">@variable</span>(model_pure, y[<span class="pl-c1">1</span><span class="pl-k">:</span>M])
<span class="pl-c1">@variable</span>(model_pure, y_fixed[<span class="pl-c1">1</span><span class="pl-k">:</span>M] <span class="pl-k">==</span> value_for_y[i])
<span class="pl-c1">@constraint</span>(model_pure, fix_y[j <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span>M], y[i] <span class="pl-k">==</span> y_fixed[i])

<span class="pl-c"><span class="pl-c">#</span> add constraints</span>
<span class="pl-c1">@constraint</span>(model_pure, ctr[k <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span>P],
    <span class="pl-c1">sum</span>(A[i,k]<span class="pl-k">*</span>x[i] <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span>N) <span class="pl-k">==</span> b[k] <span class="pl-k">-</span> <span class="pl-c1">sum</span>(D[j,k]<span class="pl-k">*</span>y[j] <span class="pl-k">for</span> j <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span>M))

<span class="pl-c"><span class="pl-c">#</span> create objective function</span>
<span class="pl-c1">@objective</span>(model_pure, Min, <span class="pl-c1">sum</span>(c[i]<span class="pl-k">*</span>x[i] <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span>N))

<span class="pl-c"><span class="pl-c">#</span> solve problem</span>
<span class="pl-c1">optimize!</span>(model_pure)

<span class="pl-c"><span class="pl-c">#</span> query dual values</span>
y_duals <span class="pl-k">=</span> <span class="pl-c1">dual</span>.(fix_y)

<span class="pl-c"><span class="pl-c">#</span> modify y</span>
<span class="pl-c1">set_value</span>.(y_fixed, new_value_for_y)

<span class="pl-c"><span class="pl-c">#</span> solve problem (again)</span>
<span class="pl-c1">optimize!</span>(model_pure)

<span class="pl-c"><span class="pl-c">#</span> query dual values (again)</span>
y_duals <span class="pl-k">=</span> <span class="pl-c1">dual</span>.(fix_y)</pre></div>
<p dir="auto">The main problem with this approach is that it creates to many dummy
variables that are added without real need to the solver representation
of the optimization problem. Hence solve times are increased without
real need!!!</p>
<h3 dir="auto"><a id="user-content-parameterjump-version" class="anchor" aria-hidden="true" href="#parameterjump-version"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>ParameterJuMP version</h3>
<p dir="auto">The same example of the motivation can be written with <strong>parameters</strong>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# create a ParameterJuMP Model
model_param = Model(SOME_SOLVER.Optimizer)

# add optimization variables
@variable(model_param, x[1:N] &gt;= 0)

# add dummy fixed variables
@variable(model, y[i = 1:M] == value_for_y[i], Param())

# add constraints
@constraint(model_param, ctr[k in 1:P],
    sum(A[i,k]*x[i] for i in 1:N) == b[k] - sum(D[j,k]*y[j] for j in 1:M))

# create objective function
@objective(model_param, Min, sum(c[i]*x[i] for i in 1:N))

# solve problem
optimize!(model_param)

# query dual values
y_duals = dual.(y)

# modify y
set_value.(y, new_value_for_y)

# solve problem (again)
optimize!(model_param)

# query dual values (again)
y_duals = dual.(y)"><pre><span class="pl-c"><span class="pl-c">#</span> create a ParameterJuMP Model</span>
model_param <span class="pl-k">=</span> <span class="pl-c1">Model</span>(SOME_SOLVER<span class="pl-k">.</span>Optimizer)

<span class="pl-c"><span class="pl-c">#</span> add optimization variables</span>
<span class="pl-c1">@variable</span>(model_param, x[<span class="pl-c1">1</span><span class="pl-k">:</span>N] <span class="pl-k">&gt;=</span> <span class="pl-c1">0</span>)

<span class="pl-c"><span class="pl-c">#</span> add dummy fixed variables</span>
<span class="pl-c1">@variable</span>(model, y[i <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span>M] <span class="pl-k">==</span> value_for_y[i], <span class="pl-c1">Param</span>())

<span class="pl-c"><span class="pl-c">#</span> add constraints</span>
<span class="pl-c1">@constraint</span>(model_param, ctr[k <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span>P],
    <span class="pl-c1">sum</span>(A[i,k]<span class="pl-k">*</span>x[i] <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span>N) <span class="pl-k">==</span> b[k] <span class="pl-k">-</span> <span class="pl-c1">sum</span>(D[j,k]<span class="pl-k">*</span>y[j] <span class="pl-k">for</span> j <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span>M))

<span class="pl-c"><span class="pl-c">#</span> create objective function</span>
<span class="pl-c1">@objective</span>(model_param, Min, <span class="pl-c1">sum</span>(c[i]<span class="pl-k">*</span>x[i] <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span>N))

<span class="pl-c"><span class="pl-c">#</span> solve problem</span>
<span class="pl-c1">optimize!</span>(model_param)

<span class="pl-c"><span class="pl-c">#</span> query dual values</span>
y_duals <span class="pl-k">=</span> <span class="pl-c1">dual</span>.(y)

<span class="pl-c"><span class="pl-c">#</span> modify y</span>
<span class="pl-c1">set_value</span>.(y, new_value_for_y)

<span class="pl-c"><span class="pl-c">#</span> solve problem (again)</span>
<span class="pl-c1">optimize!</span>(model_param)

<span class="pl-c"><span class="pl-c">#</span> query dual values (again)</span>
y_duals <span class="pl-k">=</span> <span class="pl-c1">dual</span>.(y)</pre></div>
<h2 dir="auto"><a id="user-content-acknowledgments" class="anchor" aria-hidden="true" href="#acknowledgments"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Acknowledgments</h2>
<p dir="auto">ParameterJuMP was developed by:</p>
<ul dir="auto">
<li>Joaquim Dias Garcia (@joaquimg), PSR and PUC-Rio</li>
<li>Benoît Legat (@blegat),  UCLouvain</li>
</ul>
</article></div>