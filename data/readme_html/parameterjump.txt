<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-parameterjumpjl" class="anchor" aria-hidden="true" href="#parameterjumpjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>ParameterJuMP.jl</h1>
<table>
<thead>
<tr>
<th align="center"><strong>Build Status</strong></th>
<th align="center"><strong>Social</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><a href="https://travis-ci.org/JuliaStochOpt/ParameterJuMP.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/0dbc7441e8e9dca3baed18cc50663cc35d8ddcab/68747470733a2f2f7472617669732d63692e6f72672f4a756c696153746f63684f70742f506172616d657465724a754d502e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaStochOpt/ParameterJuMP.jl.svg?branch=master" style="max-width:100%;"></a></td>
<td align="center"><a href="https://gitter.im/JuliaOpt/StochasticDualDynamicProgramming.jl?utm_source=share-link&amp;utm_medium=link&amp;utm_campaign=share-link" rel="nofollow"><img src="https://camo.githubusercontent.com/494a77a91754fd8ea78536fde0135e1e9bcc50c5/68747470733a2f2f6261646765732e6769747465722e696d2f4a756c69614f70742f53746f636861737469634475616c44796e616d696350726f6772616d6d696e672e6a6c2e737667" alt="Gitter" data-canonical-src="https://badges.gitter.im/JuliaOpt/StochasticDualDynamicProgramming.jl.svg" style="max-width:100%;"></a></td>
</tr>
<tr>
<td align="center"><a href="https://codecov.io/gh/JuliaStochOpt/ParameterJuMP.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/2db94361321780d8c5e6482851e2465d8f144449/68747470733a2f2f636f6465636f762e696f2f67682f4a756c696153746f63684f70742f506172616d657465724a754d502e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov branch" data-canonical-src="https://codecov.io/gh/JuliaStochOpt/ParameterJuMP.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></td>
<td align="center"><a href="https://discourse.julialang.org/c/domain/opt" rel="nofollow"><img src="https://camo.githubusercontent.com/844580b76167bd89eb6ec484c60c71856712a94e/68747470733a2f2f75706c6f61642e77696b696d656469612e6f72672f77696b6970656469612f636f6d6d6f6e732f7468756d622f612f61662f446973636f757273655f6c6f676f2e706e672f37393970782d446973636f757273655f6c6f676f2e706e67" width="64" data-canonical-src="https://upload.wikimedia.org/wikipedia/commons/thumb/a/af/Discourse_logo.png/799px-Discourse_logo.png" style="max-width:100%;"></a></td>
</tr>
</tbody>
</table>
<p>A JuMP extension to use parameters in constraints constants.</p>
<h2><a id="user-content-welcome-to-parameterjump" class="anchor" aria-hidden="true" href="#welcome-to-parameterjump"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Welcome to ParameterJuMP</h2>
<p>ParameterJuMP adds new methods created on top of JuMP to use constant
parameters in optimization problems.</p>
<p>To enable the usage of ParameterJuMP the optimization model must
be constructed with the function:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">ModelWithParam</span>(args<span class="pl-k">...</span>)</pre></div>
<p>Which can receive the same inputs as the original <code>Model</code> constructor,
and also returns the same <code>Model</code> type.</p>
<p>The key constructor of ParameterJuMP is:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">add_parameter</span>(model<span class="pl-k">::</span><span class="pl-c1">JuMP.Model</span>, value<span class="pl-k">::</span><span class="pl-c1">Number</span>)</pre></div>
<p>Which adds a parameter fixed at <code>value</code> to the JuMP model <code>model</code>.
It is possible to create multiple parameters at the same time with:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">add_parameters</span>(model<span class="pl-k">::</span><span class="pl-c1">JuMP.Model</span>, values<span class="pl-k">::</span><span class="pl-c1">Vector{Number}</span>)</pre></div>
<p>Which returns a vector of parameters.</p>
<p>It is possible to change the current value of a parameter with the
function:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">fix</span>(p<span class="pl-k">::</span><span class="pl-c1">ParameterRef</span>, new_value<span class="pl-k">::</span><span class="pl-c1">Number</span>)</pre></div>
<p>Finally, the <code>dual</code> function of JuMP is overloaded to return duals
for parameters:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">dual</span>(p<span class="pl-k">::</span><span class="pl-c1">ParameterRef</span>)</pre></div>
<p>Last but not least!
The parameter algebra was implemented so that is possible to:</p>
<ul>
<li>sum two parameters</li>
<li>multiply parameters by constants</li>
<li>sum parameters and variables</li>
<li>sum parameters and affine expressions</li>
</ul>
<p>All the operations related to linear constraints are implemented.</p>
<h3><a id="user-content-simple-example" class="anchor" aria-hidden="true" href="#simple-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Simple example</h3>
<p>Lets use JuMP plus ParameterJuMP to solve the optimization problem:</p>
<pre><code>min   x
s.t.  x &gt;= a
</code></pre>
<p>where <code>x</code> is a variable and <code>a</code> is a constant.
We can also solve it for different values of <code>a</code>.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span> Create a JuMP model able to handle parameters</span>
model <span class="pl-k">=</span> <span class="pl-c1">ModelWithParams</span>(SOME_SOLVER<span class="pl-k">.</span>Optimizer)

<span class="pl-c"><span class="pl-c">#</span> Create a regular JuMP variable</span>
<span class="pl-c1">@variable</span>(model, x)

<span class="pl-c"><span class="pl-c">#</span> Create a parameter fixed at 10</span>
<span class="pl-c1">add_parameter</span>(model, a, <span class="pl-c1">10</span>)

<span class="pl-c"><span class="pl-c">#</span> adds a constraint mixing variables and parameters to the model</span>
<span class="pl-c1">@constraint</span>(model, x <span class="pl-k">&gt;=</span> a)

<span class="pl-c"><span class="pl-c">#</span> solve the model</span>
<span class="pl-c1">optimize!</span>(model)

<span class="pl-c"><span class="pl-c">#</span> query dual variable of the constant a</span>
<span class="pl-c1">dual</span>(a)

<span class="pl-c"><span class="pl-c">#</span> modify the value of the parameter a to 20</span>
<span class="pl-c1">fix</span>(a, <span class="pl-c1">20</span>)

<span class="pl-c"><span class="pl-c">#</span> solve the model with the new value of the parameter</span>
<span class="pl-c1">optimize!</span>(model)</pre></div>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Installation</h2>
<p>Currently ParameterJuMP works with Julia 1.x and JuMP 0.19.x</p>
<ul>
<li>type <code>]</code> to go to the package manager</li>
<li>type <code>add https://github.com/JuliaStochOpt/ParameterJuMP.jl</code> (because its currently not registered)</li>
</ul>
<h2><a id="user-content-motivation" class="anchor" aria-hidden="true" href="#motivation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Motivation</h2>
<p>Suppose we have linear programming problem of the following form</p>
<p align="center">
<a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/3d7834a621008fa3308159a254acefcd67d3d250/68747470733a2f2f6c617465782e636f6465636f67732e636f6d2f6769662e6c617465783f5c626567696e7b61727261797d7b6c6c7d2673706163653b5c6d626f787b6d696e696d697a657d2673706163653b262673706163653b635e5c746f702673706163653b785c5c2673706163653b5c6d626f787b7375626a6563742673706163653b746f7d2673706163653b262673706163653b41782673706163653b2673706163653b3d2673706163653b622673706163653b2d2673706163653b442673706163653b792673706163653b5c5c2673706163653b262673706163653b782673706163653b5c6765712673706163653b302c2673706163653b5c656e647b61727261797d"><img src="https://camo.githubusercontent.com/3d7834a621008fa3308159a254acefcd67d3d250/68747470733a2f2f6c617465782e636f6465636f67732e636f6d2f6769662e6c617465783f5c626567696e7b61727261797d7b6c6c7d2673706163653b5c6d626f787b6d696e696d697a657d2673706163653b262673706163653b635e5c746f702673706163653b785c5c2673706163653b5c6d626f787b7375626a6563742673706163653b746f7d2673706163653b262673706163653b41782673706163653b2673706163653b3d2673706163653b622673706163653b2d2673706163653b442673706163653b792673706163653b5c5c2673706163653b262673706163653b782673706163653b5c6765712673706163653b302c2673706163653b5c656e647b61727261797d" title="" data-canonical-src="https://latex.codecogs.com/gif.latex?\begin{array}{ll}&amp;space;\mbox{minimize}&amp;space;&amp;&amp;space;c^\top&amp;space;x\\&amp;space;\mbox{subject&amp;space;to}&amp;space;&amp;&amp;space;Ax&amp;space;&amp;space;=&amp;space;b&amp;space;-&amp;space;D&amp;space;y&amp;space;\\&amp;space;&amp;&amp;space;x&amp;space;\geq&amp;space;0,&amp;space;\end{array}" style="max-width:100%;"></a>
</p>
<p>The only decision variable in the problem is <a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/49cd1b956beeecc1e80245469553975caa2f9e12/687474703a2f2f6c617465782e636f6465636f67732e636f6d2f6769662e6c617465783f78"><img src="https://camo.githubusercontent.com/49cd1b956beeecc1e80245469553975caa2f9e12/687474703a2f2f6c617465782e636f6465636f67732e636f6d2f6769662e6c617465783f78" border="0" data-canonical-src="http://latex.codecogs.com/gif.latex?x" style="max-width:100%;"></a>.
On the other hand, <a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/55772e890e71496a9c2c39069abf18db34310973/687474703a2f2f6c617465782e636f6465636f67732e636f6d2f6769662e6c617465783f79"><img src="https://camo.githubusercontent.com/55772e890e71496a9c2c39069abf18db34310973/687474703a2f2f6c617465782e636f6465636f67732e636f6d2f6769662e6c617465783f79" border="0" data-canonical-src="http://latex.codecogs.com/gif.latex?y" style="max-width:100%;"></a> is a mere parameter.</p>
<p>Problems like this appear frequently in Stochastic optimization and in Decomposition frameworks.</p>
<p>In stochastic optimization it is frequent to solve that same problem for
multiple values of <a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/55772e890e71496a9c2c39069abf18db34310973/687474703a2f2f6c617465782e636f6465636f67732e636f6d2f6769662e6c617465783f79"><img src="https://camo.githubusercontent.com/55772e890e71496a9c2c39069abf18db34310973/687474703a2f2f6c617465782e636f6465636f67732e636f6d2f6769662e6c617465783f79" border="0" data-canonical-src="http://latex.codecogs.com/gif.latex?y" style="max-width:100%;"></a>, which are tipically scenario dependent.</p>
<p>In decomposition frameworks, it is useful to solve the same problem
for multiple values of <a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/55772e890e71496a9c2c39069abf18db34310973/687474703a2f2f6c617465782e636f6465636f67732e636f6d2f6769662e6c617465783f79"><img src="https://camo.githubusercontent.com/55772e890e71496a9c2c39069abf18db34310973/687474703a2f2f6c617465782e636f6465636f67732e636f6d2f6769662e6c617465783f79" border="0" data-canonical-src="http://latex.codecogs.com/gif.latex?y" style="max-width:100%;"></a>, but even more important is to be able
to query dual values from <a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/55772e890e71496a9c2c39069abf18db34310973/687474703a2f2f6c617465782e636f6465636f67732e636f6d2f6769662e6c617465783f79"><img src="https://camo.githubusercontent.com/55772e890e71496a9c2c39069abf18db34310973/687474703a2f2f6c617465782e636f6465636f67732e636f6d2f6769662e6c617465783f79" border="0" data-canonical-src="http://latex.codecogs.com/gif.latex?y" style="max-width:100%;"></a>. This dual values are computed by applying
the chain rule on the duals of the constraints.</p>
<h3><a id="user-content-pure-jump-version" class="anchor" aria-hidden="true" href="#pure-jump-version"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Pure JuMP version</h3>
<p>In pure JuMP we can acomplish these tasks by creating dummy fixed variables,
so that we can easily change their fixed values and query duals from fixing
constraints.</p>
<p>One example in pure JuMP goes as follows:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span> create a regular JuMP Model</span>
model_pure <span class="pl-k">=</span> <span class="pl-c1">Model</span>(SOME_SOLVER<span class="pl-k">.</span>Optimizer)

<span class="pl-c"><span class="pl-c">#</span> add optimization variables</span>
<span class="pl-c1">@variable</span>(model_pure, x[<span class="pl-c1">1</span><span class="pl-k">:</span>N] <span class="pl-k">&gt;=</span> <span class="pl-c1">0</span>)

<span class="pl-c"><span class="pl-c">#</span> add dummy fixed variables</span>
<span class="pl-c1">@variable</span>(model_pure, y[<span class="pl-c1">1</span><span class="pl-k">:</span>M])
<span class="pl-c1">@variable</span>(model_pure, y_fixed[<span class="pl-c1">1</span><span class="pl-k">:</span>M] <span class="pl-k">==</span> value_for_y[i])
<span class="pl-c1">@constraint</span>(model_pure, fix_y[j <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span>M], y[i] <span class="pl-k">==</span> y_fixed[i])

<span class="pl-c"><span class="pl-c">#</span> add constraints</span>
<span class="pl-c1">@constraint</span>(model_pure, ctr[k <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span>P],
    <span class="pl-c1">sum</span>(A[i,k]<span class="pl-k">*</span>x[i] <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span>N) <span class="pl-k">==</span> b[k] <span class="pl-k">-</span> <span class="pl-c1">sum</span>(D[j,k]<span class="pl-k">*</span>y[j] <span class="pl-k">for</span> j <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span>M))

<span class="pl-c"><span class="pl-c">#</span> create objective function</span>
<span class="pl-c1">@objective</span>(model_pure, Min, <span class="pl-c1">sum</span>(c[i]<span class="pl-k">*</span>x[i] <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span>N))

<span class="pl-c"><span class="pl-c">#</span> solve problem</span>
<span class="pl-c1">optimize!</span>(model_pure)

<span class="pl-c"><span class="pl-c">#</span> query dual values</span>
y_duals <span class="pl-k">=</span> <span class="pl-c1">dual</span>.(fix_y)

<span class="pl-c"><span class="pl-c">#</span> modify y</span>
<span class="pl-c1">fix</span>.(y_fixed, new_value_for_y)

<span class="pl-c"><span class="pl-c">#</span> solve problem (again)</span>
<span class="pl-c1">optimize!</span>(model_pure)

<span class="pl-c"><span class="pl-c">#</span> query dual values (again)</span>
y_duals <span class="pl-k">=</span> <span class="pl-c1">dual</span>.(fix_y)</pre></div>
<p>The main problem with this approach is that it creates to many dummy
variables that are added without real need to the solver representation
of the optimization problem. Hence solve times are increased without
real need!!!</p>
<h3><a id="user-content-parameterjump-version" class="anchor" aria-hidden="true" href="#parameterjump-version"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>ParameterJuMP version</h3>
<p>The same example of the motivation can be written with <strong>parameters</strong>:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span> create a regular JuMP Model</span>
model_pure <span class="pl-k">=</span> <span class="pl-c1">Model</span>(SOME_SOLVER<span class="pl-k">.</span>Optimizer)

<span class="pl-c"><span class="pl-c">#</span> add optimization variables</span>
<span class="pl-c1">@variable</span>(model_pure, x[<span class="pl-c1">1</span><span class="pl-k">:</span>N] <span class="pl-k">&gt;=</span> <span class="pl-c1">0</span>)

<span class="pl-c"><span class="pl-c">#</span> add dummy fixed variables</span>
y <span class="pl-k">=</span> [<span class="pl-c1">add_parameter</span>(model_pure, value_for_y[i]) <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span>M]
<span class="pl-c"><span class="pl-c">#</span> or</span>
<span class="pl-c"><span class="pl-c">#</span> y = add_parameters(model_pure, value_for_y)</span>

<span class="pl-c"><span class="pl-c">#</span> add constraints</span>
<span class="pl-c1">@constraint</span>(model_pure, ctr[k <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span>P],
    <span class="pl-c1">sum</span>(A[i,k]<span class="pl-k">*</span>x[i] <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span>N) <span class="pl-k">==</span> b[k] <span class="pl-k">-</span> <span class="pl-c1">sum</span>(D[j,k]<span class="pl-k">*</span>y[j] <span class="pl-k">for</span> j <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span>M))

<span class="pl-c"><span class="pl-c">#</span> create objective function</span>
<span class="pl-c1">@objective</span>(model_pure, Min, <span class="pl-c1">sum</span>(c[i]<span class="pl-k">*</span>x[i] <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span>N))

<span class="pl-c"><span class="pl-c">#</span> solve problem</span>
<span class="pl-c1">optimize!</span>(model_pure)

<span class="pl-c"><span class="pl-c">#</span> query dual values</span>
y_duals <span class="pl-k">=</span> <span class="pl-c1">dual</span>.(y)

<span class="pl-c"><span class="pl-c">#</span> modify y</span>
<span class="pl-c1">fix</span>.(y, new_value_for_y)

<span class="pl-c"><span class="pl-c">#</span> solve problem (again)</span>
<span class="pl-c1">optimize!</span>(model_pure)

<span class="pl-c"><span class="pl-c">#</span> query dual values (again)</span>
y_duals <span class="pl-k">=</span> <span class="pl-c1">dual</span>.(y)</pre></div>
<h2><a id="user-content-acknowledgments" class="anchor" aria-hidden="true" href="#acknowledgments"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Acknowledgments</h2>
<p>ParameterJuMP was developed by:</p>
<ul>
<li>Joaquim Dias Garcia (@joaquimg), PSR and PUC-Rio</li>
<li>Benoît Legat (@blegat),  UCLouvain</li>
</ul>
</article></div>