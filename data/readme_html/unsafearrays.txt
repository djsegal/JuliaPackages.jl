<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-unsafearraysjl" class="anchor" aria-hidden="true" href="#unsafearraysjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>UnsafeArrays.jl</h1>
<p dir="auto"><a href="LICENSE.md"><img src="https://camo.githubusercontent.com/bbf49a2eb96e6f718803f2493bd7aa3baae61abb09b7f8fc185a94e08c504dc6/687474703a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d627269676874677265656e2e7376673f7374796c653d666c6174" alt="License" data-canonical-src="http://img.shields.io/badge/license-MIT-brightgreen.svg?style=flat" style="max-width: 100%;"></a>
<a href="https://github.com/JuliaArrays/UnsafeArrays.jl/actions?query=workflow%3ACI"><img src="https://github.com/JuliaArrays/UnsafeArrays.jl/workflows/CI/badge.svg?branch=main" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/JuliaArrays/UnsafeArrays.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/55121dffe85c2c6663db67feb61a999b91f5a29faa1e11cc9b8fc750c35a89f8/68747470733a2f2f636f6465636f762e696f2f67682f4a756c69614172726179732f556e736166654172726179732e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/JuliaArrays/UnsafeArrays.jl/branch/main/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">UnsafeArrays provides stack-allocated pointer-based array views for Julia.</p>
<p dir="auto">This package is mainly intended as a workaround for
<a href="https://github.com/JuliaLang/julia/issues/14955" data-hovercard-type="issue" data-hovercard-url="/JuliaLang/julia/issues/14955/hovercard">Julia issue #14955 (non-allocating array views)</a>. This issue is solved in Julia v1.5 and higher.</p>
<p dir="auto">In Julia versions 1.4 and below, the Julia compiler is sometimes able to
elide heap-allocation of views in some, but cannot always do so. If the view
can't be elided, the relative cost of allocation and garbage collection of a
views is usually still small, in single-threaded applications. But in
in multi-threaded applications that use a large number of views, this cost can
quickly become prohibitive and views must either be avoided (resulting in more
lengthy and less readable code), or some form stack-allocated views must be
used for decent scalability. UnsafeArrays provides such a solution.
With Julia v1.5 and higher, using UnsafeArrays should not be necessary and is
not likely to result in significant performance gains.</p>
<p dir="auto">Starting with v1.5, Julia can allocate immutable objects that contain
heap references on the stack, making UnsafeArrays.jl largely unnecessary.
It may still be useful as a lightweight wrapper for memory allocated outside
of Julia's memory management.</p>
<p dir="auto">Example:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Base.Threads, LinearAlgebra

function colnorms!(dest::AbstractVector, A::AbstractMatrix)
    @threads for i in axes(A, 2)
        dest[i] = norm(view(A, :, i))
    end
    dest
end

A = rand(50, 100000);
dest = similar(A, size(A, 2));

colnorms!(dest, A)"><pre><span class="pl-k">using</span> Base<span class="pl-k">.</span>Threads, LinearAlgebra

<span class="pl-k">function</span> <span class="pl-en">colnorms!</span>(dest<span class="pl-k">::</span><span class="pl-c1">AbstractVector</span>, A<span class="pl-k">::</span><span class="pl-c1">AbstractMatrix</span>)
    <span class="pl-c1">@threads</span> <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">axes</span>(A, <span class="pl-c1">2</span>)
        dest[i] <span class="pl-k">=</span> <span class="pl-c1">norm</span>(<span class="pl-c1">view</span>(A, :, i))
    <span class="pl-k">end</span>
    dest
<span class="pl-k">end</span>

A <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">50</span>, <span class="pl-c1">100000</span>);
dest <span class="pl-k">=</span> <span class="pl-c1">similar</span>(A, <span class="pl-c1">size</span>(A, <span class="pl-c1">2</span>));

<span class="pl-c1">colnorms!</span>(dest, A)</pre></div>
<p dir="auto">The above will run fine on a single thread, but scales badly on multiple
threads. Use the <code>@uviews</code> macro provided by UnsafeArrays to replace A with an
<code>UnsafeArray</code> within the scope of the macro. An <code>UnsafeArray</code> is
stack-allocated, and so are all views of it, e.g. within <code>colnorms!</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using UnsafeArrays

@uviews A begin
    colnorms!(dest, A)
end"><pre><span class="pl-k">using</span> UnsafeArrays

<span class="pl-c1">@uviews</span> A <span class="pl-k">begin</span>
    <span class="pl-c1">colnorms!</span>(dest, A)
<span class="pl-k">end</span></pre></div>
<p dir="auto"><code>@uviews</code> protects the original array <code>A</code> from GC, so the above is safe as
long as the original array is not reallocated (via <code>resize!</code>, etc.) while the
scope of <code>@uviews</code> is active.</p>
<p dir="auto">UnsafeArrays only supports bits types. If the element type of an array is not
compatible, @uviews will simply use the original array.</p>
<p dir="auto">UnsafeArrays also provides:</p>
<ul dir="auto">
<li>
<p dir="auto">A non macro-variant <code>uviews()</code></p>
</li>
<li>
<p dir="auto">A function <code>uview()</code> to directly get an unsafe view (with optional
sub-indexing) of an array.</p>
</li>
<li>
<p dir="auto">The type <code>UnsafeArray</code> itself, instances can be constructed from a data
pointer and array size. The data type must be a bits type.</p>
</li>
</ul>
<p dir="auto">When using <code>uview()</code> and <code>UnsafeArray</code> directly, the user is responsible for
preserving the memory accessed from garbage collection.</p>
</article></div>