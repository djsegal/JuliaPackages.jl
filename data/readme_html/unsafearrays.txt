<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-unsafearraysjl" class="anchor" aria-hidden="true" href="#unsafearraysjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>UnsafeArrays.jl</h1>
<p><a href="https://travis-ci.com/oschulz/UnsafeArrays.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/da34ad6a073daa83afb0141f05410b702fcd4c45/68747470733a2f2f7472617669732d63692e636f6d2f6f736368756c7a2f556e736166654172726179732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/oschulz/UnsafeArrays.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/oschulz/unsafearrays-jl/branch/master" rel="nofollow"><img src="https://camo.githubusercontent.com/1b5a2f48d73c4b8c22a348337794ce4070f10887/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f6769746875622f6f736368756c7a2f556e736166654172726179732e6a6c3f6272616e63683d6d6173746572267376673d74727565" alt="Build status" data-canonical-src="https://ci.appveyor.com/api/projects/status/github/oschulz/UnsafeArrays.jl?branch=master&amp;svg=true" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/oschulz/UnsafeArrays.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/5904e91f9630b43ea9ea98a0c1ff25235784990b/68747470733a2f2f636f6465636f762e696f2f67682f6f736368756c7a2f556e736166654172726179732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/oschulz/UnsafeArrays.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p>UnsafeArrays provides stack-allocated pointer-based array views for Julia.
This package is mainly intended as a workaround for
<a href="https://github.com/JuliaLang/julia/issues/14955">Julia issue #14955 (non-allocating array views)</a>.</p>
<p>While the Julia compiler is able to elide heap-allocation of views in some
cases, it cannot always do so. In some other cases, the relative cost of
allocation and garbage collection of a even a large number of views is small.
Especially in multi-threaded applications though, this cost can quickly become
prohibitive and views must either be avoided (resulting in more lengthy and
less readable code), or some form stack-allocated views must be used for
decent scalability. UnsafeArrays aims to provide such a solution.</p>
<p>Example:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> Base<span class="pl-k">.</span>Threads, LinearAlgebra

<span class="pl-k">function</span> <span class="pl-en">colnorms!</span>(dest<span class="pl-k">::</span><span class="pl-c1">AbstractVector</span>, A<span class="pl-k">::</span><span class="pl-c1">AbstractMatrix</span>)
    <span class="pl-c1">@threads</span> <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">axes</span>(A, <span class="pl-c1">2</span>)
        dest[i] <span class="pl-k">=</span> <span class="pl-c1">norm</span>(<span class="pl-c1">view</span>(A, :, i))
    <span class="pl-k">end</span>
    dest
<span class="pl-k">end</span>

A <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">50</span>, <span class="pl-c1">100000</span>);
dest <span class="pl-k">=</span> <span class="pl-c1">similar</span>(A, <span class="pl-c1">size</span>(A, <span class="pl-c1">2</span>));

<span class="pl-c1">colnorms!</span>(dest, A)</pre></div>
<p>The above will run fine on a single thread, but scales badly on multiple
threads. Use the <code>@uviews</code> macro provided by UnsafeArrays to replace A with an
<code>UnsafeArray</code> within the scope of the macro. An <code>UnsafeArray</code> is
stack-allocated, and so are all views of it, e.g. within <code>colnorms!</code>:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> UnsafeArrays

<span class="pl-c1">@uviews</span> A <span class="pl-k">begin</span>
    <span class="pl-c1">colnorms!</span>(dest, A)
<span class="pl-k">end</span></pre></div>
<p><code>@uviews</code> protects the original array <code>A</code> from GC, so the above is safe as
long as the original array is not reallocated (via <code>resize!</code>, etc.) while the
scope of <code>@uviews</code> is active.</p>
<p>UnsafeArrays only supports bits types. If the element type of an array is not
compatible, @uviews will simply use the original array.</p>
<p>UnsafeArrays also provides:</p>
<ul>
<li>
<p>A non macro-variant <code>uviews()</code></p>
</li>
<li>
<p>A function <code>uview()</code> to directly get an unsafe view (with optional
sub-indexing) of an array.</p>
</li>
<li>
<p>The type <code>UnsafeArray</code> itself, instances can be constructed from a data
pointer and array size. The data type must be a bits type.</p>
</li>
</ul>
<p>When using <code>uview()</code> and <code>UnsafeArray</code> directly, the user is responsible for
preserving the memory accessed from garbage collection.</p>
</article></div>