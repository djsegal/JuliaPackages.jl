<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-simdpolyjl" class="anchor" aria-hidden="true" href="#simdpolyjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>SIMDPoly.jl</h1>
<p>SIMD optimized polyomial evaluation for real and complex inputs.</p>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<p>The functions for packing and evaluating polynomials are suffixed
with <code>(N)x(L)[r|c]</code>:</p>
<ul>
<li><code>N</code> is the number of polynomials to evaluate</li>
<li><code>L</code> is the number of SIMD lanes per polynomial</li>
<li><code>r</code> or <code>c</code> signifies that the polynomial will be evaluated
with a real or complex input, respectively.</li>
</ul>
<p>For instance evaluating one polynomial with four SIMD lanes:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="coeffs = ntuple(x -&gt; Float64(x), 30) # p(x) = 1 + 2x^1 + ... + 30x^29
packed = packpoly1x4r(coeffs)        # pack coefficients into SIMD vectors
result = evalpoly1x4r(2.0, packed)   # evaluate p(2)
"><pre>coeffs <span class="pl-k">=</span> <span class="pl-en">ntuple</span>(x <span class="pl-k">-&gt;</span> <span class="pl-en">Float64</span>(x), <span class="pl-c1">30</span>) <span class="pl-c"><span class="pl-c">#</span> p(x) = 1 + 2x^1 + ... + 30x^29</span>
packed <span class="pl-k">=</span> <span class="pl-c1">packpoly1x4r</span>(coeffs)        <span class="pl-c"><span class="pl-c">#</span> pack coefficients into SIMD vectors</span>
result <span class="pl-k">=</span> <span class="pl-c1">evalpoly1x4r</span>(<span class="pl-c1">2.0</span>, packed)   <span class="pl-c"><span class="pl-c">#</span> evaluate p(2)</span></pre></div>
<p>Complex polynomial division:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="poly1 = ntuple(x -&gt; Float64(x), 30)         # p(x) = 1 + 2x^1 + ... + 30x^29
poly2 = reverse(poly1)                      # q(x) = 30 + 29x^1 + ... + x^29
packed = packpoly2x2c(poly1, poly2)
result = evalpolydiv2x2c(2.0+2.0im, packed) # p(2+2i) / q(2+2i)
"><pre>poly1 <span class="pl-k">=</span> <span class="pl-en">ntuple</span>(x <span class="pl-k">-&gt;</span> <span class="pl-en">Float64</span>(x), <span class="pl-c1">30</span>)         <span class="pl-c"><span class="pl-c">#</span> p(x) = 1 + 2x^1 + ... + 30x^29</span>
poly2 <span class="pl-k">=</span> <span class="pl-en">reverse</span>(poly1)                      <span class="pl-c"><span class="pl-c">#</span> q(x) = 30 + 29x^1 + ... + x^29</span>
packed <span class="pl-k">=</span> <span class="pl-c1">packpoly2x2c</span>(poly1, poly2)
result <span class="pl-k">=</span> <span class="pl-c1">evalpolydiv2x2c</span>(<span class="pl-c1">2.0</span><span class="pl-k">+</span><span class="pl-c1">2.0im</span>, packed) <span class="pl-c"><span class="pl-c">#</span> p(2+2i) / q(2+2i)</span></pre></div>
<h2><a id="user-content-benchmarks" class="anchor" aria-hidden="true" href="#benchmarks"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Benchmarks</h2>
<p>Note: these only measure evaluation time; the packed coefficients have been precomputed.</p>
<p><a target="_blank" rel="noopener noreferrer" href="assets/bm_plot_real.svg"><img src="assets/bm_plot_real.svg" alt="real input" style="max-width:100%;"></a></p>
<p><a target="_blank" rel="noopener noreferrer" href="assets/bm_plot_complex.svg"><img src="assets/bm_plot_complex.svg" alt="complex input" style="max-width:100%;"></a></p>
</article></div>