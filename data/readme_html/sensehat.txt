<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-sensehatjl" class="anchor" aria-hidden="true" href="#sensehatjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>SenseHat.jl</h1>
<p><a href="https://pkg.julialang.org/docs/SenseHat/" rel="nofollow"><img src="https://camo.githubusercontent.com/f7b92a177c912c1cc007fc9b40f17ff3ee3bb414/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a></p>
<p>SenseHat.jl is a Julia library for interacting with the Raspberry Pi <a href="https://www.raspberrypi.org/products/sense-hat/" rel="nofollow">Sense HAT</a>.</p>
<p>SenseHat.jl requires the Raspbian <code>sense-hat</code> package:</p>
<div class="highlight highlight-source-shell"><pre>sudo apt-get update
sudo apt-get install sense-hat
sudo reboot</pre></div>
<h2><a id="user-content-led-matrix" class="anchor" aria-hidden="true" href="#led-matrix"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>LED matrix</h2>
<p>The main interface is the <code>led_matrix()</code> function, which creates an 8Ã—8 array of RGB
values (from <a href="https://github.com/JuliaGraphics/ColorTypes.jl">ColorTypes.jl</a>) which is
memory-mapped to the frame buffer of the LED matrix. <code>led_clear()</code> is a convenience
function for resetting the LED matrix to black.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> SenseHat
<span class="pl-k">using</span> ColorTypes

<span class="pl-k">const</span> LED <span class="pl-k">=</span> <span class="pl-c1">led_matrix</span>()

LED[:] <span class="pl-k">=</span> SenseHat<span class="pl-k">.</span>JULIA_LOGO
<span class="pl-c1">sleep</span>(<span class="pl-c1">3</span>)
<span class="pl-c1">led_clear</span>()</pre></div>
<h2><a id="user-content-joystick" class="anchor" aria-hidden="true" href="#joystick"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Joystick</h2>
<p>In the <code>Stick</code> module there is <code>readstick()</code> which will block until the joystick is
manipulated, returning a <code>StickEvent</code>:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> SenseHat

e <span class="pl-k">=</span> <span class="pl-c1">readstick</span>()</pre></div>
<p>For querying within a loop, use a <code>Channel</code> to create a buffer of <code>StickEvent</code>.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> SenseHat

c <span class="pl-k">=</span> <span class="pl-c1">Channel</span><span class="pl-c1">{StickEvent}</span>(<span class="pl-c1">32</span>)

<span class="pl-c1">@async</span> <span class="pl-k">while</span> <span class="pl-c1">true</span>
    <span class="pl-c1">put!</span>(c, <span class="pl-c1">readstick</span>())
<span class="pl-k">end</span></pre></div>
<h2><a id="user-content-sensors" class="anchor" aria-hidden="true" href="#sensors"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Sensors</h2>
<p><code>humidity()</code>, <code>temperature()</code> and <code>pressure()</code> will read values from the corresponding sensors.</p>
<p>The inertial measurement unit (IMU) is not yet supported, but is coming soon. In the meantime, you can use the <a href="https://pythonhosted.org/sense-hat/" rel="nofollow">python library</a> via <a href="https://github.com/JuliaPy/PyCall.jl">PyCall.jl</a>.</p>
</article></div>