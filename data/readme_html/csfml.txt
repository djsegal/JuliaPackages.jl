<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-csfml" class="anchor" aria-hidden="true" href="#csfml"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>CSFML</h1>
<p dir="auto"><a href="https://github.com/JuliaMultimedia/CSFML.jl/actions/workflows/ci.yml"><img src="https://github.com/JuliaMultimedia/CSFML.jl/actions/workflows/ci.yml/badge.svg" alt="CI" style="max-width: 100%;"></a>
<a href="https://github.com/JuliaMultimedia/CSFML.jl/actions/workflows/TagBot.yml"><img src="https://github.com/JuliaMultimedia/CSFML.jl/actions/workflows/TagBot.yml/badge.svg" alt="TagBot" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/JuliaMultimedia/CSFML.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/a767e2c68d9a3d757756fbae92045d1da95b1849cba7b1d5d9d8250d42f6f590/68747470733a2f2f636f6465636f762e696f2f67682f4a756c69614d756c74696d656469612f4353464d4c2e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/JuliaMultimedia/CSFML.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">Julia wrapper for <a href="https://github.com/SFML/CSFML">CSFML</a>, the official binding of <a href="https://github.com/SFML/SFML">SFML</a> for C. SFML is a simple, fast, cross-platform and object-oriented multimedia API. It provides access to windowing, graphics, audio and network. The Julia bindings in this repo are auto-generated using <a href="https://github.com/JuliaInterop/Clang.jl">Clang.jl</a>.</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="pkg&gt; add CSFML"><pre>pkg<span class="pl-k">&gt;</span> add CSFML</pre></div>
<h2 dir="auto"><a id="user-content-quick-start" class="anchor" aria-hidden="true" href="#quick-start"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Quick start</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using CSFML
using CSFML.LibCSFML

mode = sfVideoMode(1280, 720, 32)

window = sfRenderWindow_create(mode, &quot;SFML window&quot;, sfResize | sfClose, C_NULL)
@assert window != C_NULL

texture = sfTexture_createFromFile(joinpath(dirname(pathof(CSFML)), &quot;..&quot;, &quot;examples&quot;, &quot;julia-tan.png&quot;), C_NULL)
@assert texture != C_NULL

sprite = sfSprite_create()
sfSprite_setTexture(sprite, texture, sfTrue)

font = sfFont_createFromFile(joinpath(dirname(pathof(CSFML)), &quot;..&quot;, &quot;examples&quot;, &quot;Roboto-Bold.ttf&quot;))
@assert font != C_NULL

text = sfText_create()
sfText_setString(text, &quot;Hello SFML&quot;)
sfText_setFont(text, font)
sfText_setCharacterSize(text, 50)

music = sfMusic_createFromFile(joinpath(dirname(pathof(CSFML)), &quot;..&quot;, &quot;examples&quot;, &quot;Chrono_Trigger.ogg&quot;))
@assert music != C_NULL

sfMusic_play(music)

event_ref = Ref{sfEvent}()

while Bool(sfRenderWindow_isOpen(window))
    # process events
    while Bool(sfRenderWindow_pollEvent(window, event_ref))
        # close window : exit
        event_ref.x.type == sfEvtClosed &amp;&amp; sfRenderWindow_close(window)
    end
    # clear the screen
    sfRenderWindow_clear(window, sfColor_fromRGBA(0,0,0,1))
    # draw the sprite
    sfRenderWindow_drawSprite(window, sprite, C_NULL)
    # draw the text
    sfRenderWindow_drawText(window, text, C_NULL)
    # update the window
    sfRenderWindow_display(window)
end

sfMusic_destroy(music)
sfText_destroy(text)
sfFont_destroy(font)
sfSprite_destroy(sprite)
sfTexture_destroy(texture)
sfRenderWindow_destroy(window)"><pre><span class="pl-k">using</span> CSFML
<span class="pl-k">using</span> CSFML<span class="pl-k">.</span>LibCSFML

mode <span class="pl-k">=</span> <span class="pl-c1">sfVideoMode</span>(<span class="pl-c1">1280</span>, <span class="pl-c1">720</span>, <span class="pl-c1">32</span>)

window <span class="pl-k">=</span> <span class="pl-c1">sfRenderWindow_create</span>(mode, <span class="pl-s"><span class="pl-pds">"</span>SFML window<span class="pl-pds">"</span></span>, sfResize <span class="pl-k">|</span> sfClose, <span class="pl-c1">C_NULL</span>)
<span class="pl-c1">@assert</span> window <span class="pl-k">!=</span> <span class="pl-c1">C_NULL</span>

texture <span class="pl-k">=</span> <span class="pl-c1">sfTexture_createFromFile</span>(<span class="pl-c1">joinpath</span>(<span class="pl-c1">dirname</span>(<span class="pl-c1">pathof</span>(CSFML)), <span class="pl-s"><span class="pl-pds">"</span>..<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>examples<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>julia-tan.png<span class="pl-pds">"</span></span>), <span class="pl-c1">C_NULL</span>)
<span class="pl-c1">@assert</span> texture <span class="pl-k">!=</span> <span class="pl-c1">C_NULL</span>

sprite <span class="pl-k">=</span> <span class="pl-c1">sfSprite_create</span>()
<span class="pl-c1">sfSprite_setTexture</span>(sprite, texture, sfTrue)

font <span class="pl-k">=</span> <span class="pl-c1">sfFont_createFromFile</span>(<span class="pl-c1">joinpath</span>(<span class="pl-c1">dirname</span>(<span class="pl-c1">pathof</span>(CSFML)), <span class="pl-s"><span class="pl-pds">"</span>..<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>examples<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Roboto-Bold.ttf<span class="pl-pds">"</span></span>))
<span class="pl-c1">@assert</span> font <span class="pl-k">!=</span> <span class="pl-c1">C_NULL</span>

text <span class="pl-k">=</span> <span class="pl-c1">sfText_create</span>()
<span class="pl-c1">sfText_setString</span>(text, <span class="pl-s"><span class="pl-pds">"</span>Hello SFML<span class="pl-pds">"</span></span>)
<span class="pl-c1">sfText_setFont</span>(text, font)
<span class="pl-c1">sfText_setCharacterSize</span>(text, <span class="pl-c1">50</span>)

music <span class="pl-k">=</span> <span class="pl-c1">sfMusic_createFromFile</span>(<span class="pl-c1">joinpath</span>(<span class="pl-c1">dirname</span>(<span class="pl-c1">pathof</span>(CSFML)), <span class="pl-s"><span class="pl-pds">"</span>..<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>examples<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Chrono_Trigger.ogg<span class="pl-pds">"</span></span>))
<span class="pl-c1">@assert</span> music <span class="pl-k">!=</span> <span class="pl-c1">C_NULL</span>

<span class="pl-c1">sfMusic_play</span>(music)

event_ref <span class="pl-k">=</span> <span class="pl-c1">Ref</span><span class="pl-c1">{sfEvent}</span>()

<span class="pl-k">while</span> <span class="pl-c1">Bool</span>(<span class="pl-c1">sfRenderWindow_isOpen</span>(window))
    <span class="pl-c"><span class="pl-c">#</span> process events</span>
    <span class="pl-k">while</span> <span class="pl-c1">Bool</span>(<span class="pl-c1">sfRenderWindow_pollEvent</span>(window, event_ref))
        <span class="pl-c"><span class="pl-c">#</span> close window : exit</span>
        event_ref<span class="pl-k">.</span>x<span class="pl-k">.</span>type <span class="pl-k">==</span> sfEvtClosed <span class="pl-k">&amp;&amp;</span> <span class="pl-c1">sfRenderWindow_close</span>(window)
    <span class="pl-k">end</span>
    <span class="pl-c"><span class="pl-c">#</span> clear the screen</span>
    <span class="pl-c1">sfRenderWindow_clear</span>(window, <span class="pl-c1">sfColor_fromRGBA</span>(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>))
    <span class="pl-c"><span class="pl-c">#</span> draw the sprite</span>
    <span class="pl-c1">sfRenderWindow_drawSprite</span>(window, sprite, <span class="pl-c1">C_NULL</span>)
    <span class="pl-c"><span class="pl-c">#</span> draw the text</span>
    <span class="pl-c1">sfRenderWindow_drawText</span>(window, text, <span class="pl-c1">C_NULL</span>)
    <span class="pl-c"><span class="pl-c">#</span> update the window</span>
    <span class="pl-c1">sfRenderWindow_display</span>(window)
<span class="pl-k">end</span>

<span class="pl-c1">sfMusic_destroy</span>(music)
<span class="pl-c1">sfText_destroy</span>(text)
<span class="pl-c1">sfFont_destroy</span>(font)
<span class="pl-c1">sfSprite_destroy</span>(sprite)
<span class="pl-c1">sfTexture_destroy</span>(texture)
<span class="pl-c1">sfRenderWindow_destroy</span>(window)</pre></div>
<h2 dir="auto"><a id="user-content-license" class="anchor" aria-hidden="true" href="#license"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>License</h2>
<p dir="auto">This package is released under zlib/png license except <code>examples/Chrono_Trigger.ogg</code> which is
licensed under <a href="https://creativecommons.org/licenses/by-sa/3.0/" rel="nofollow">https://creativecommons.org/licenses/by-sa/3.0/</a>.</p>
</article></div>