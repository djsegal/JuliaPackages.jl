<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-interactivevizjl" class="anchor" aria-hidden="true" href="#interactivevizjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>InteractiveViz.jl</h1>
<p dir="auto">Interactive visualization tools for Julia</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://raw.githubusercontent.com/org-arl/InteractiveViz.jl/master/docs/images/julia.png"><img src="https://raw.githubusercontent.com/org-arl/InteractiveViz.jl/master/docs/images/julia.png" alt="" style="max-width: 100%;"></a></p>
<h3 dir="auto"><a id="user-content-yet-another-plotting-package" class="anchor" aria-hidden="true" href="#yet-another-plotting-package"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Yet another plotting package?</h3>
<p dir="auto">Julia already has a rich set of plotting tools in the form of the <a href="https://github.com/JuliaPlots/Plots.jl">Plots</a> and <a href="https://github.com/JuliaPlots/Makie.jl">Makie</a> ecosystems, and various backends for these. So why another plotting package?</p>
<p dir="auto"><em>InteractiveViz</em> is <strong>not</strong> a replacement for <em>Plots</em> or <em>Makie</em>, but rather a graphics pipeline system developed on top of Makie. It has a few objectives:</p>
<ul dir="auto">
<li>To provide a simple API to visualize large or possibly infinite datasets (tens of millions of data points) easily.</li>
<li>To enable interactivity, and be responsive even with large amounts of data.</li>
<li>To render perceptually accurate summaries at large scale, allowing drill down to individual data points.</li>
<li>To allow generation of data points on demand through a graphics pipeline, requiring computation only at a level of detail appropriate for display at the viewing resolution. Additional data points can be generated on demand when zooming or panning.</li>
</ul>
<p dir="auto">This package was partly inspired by the excellent <a href="https://datashader.org" rel="nofollow">Datashader</a> package available in the Python ecosystem.</p>
<p dir="auto">This package does not aim to provide comprehensive production quality plotting. It is aimed at interactive exploration of large datasets.</p>
<h3 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt;]
pkg&gt; add InteractiveViz"><pre>julia<span class="pl-k">&gt;</span>]
pkg<span class="pl-k">&gt;</span> add InteractiveViz</pre></div>
<h3 dir="auto"><a id="user-content-quick-start" class="anchor" aria-hidden="true" href="#quick-start"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Quick start</h3>
<p dir="auto"><strong>NOTE: <code>InteractiveViz</code> API and internals changed in <code>v0.4</code>. If you're familiar with the older API, do read through the documentation again. The functionality has not changed much, but the <code>v0.4</code> uses the new Makie layout functionality and has improved its internal design to provide a more flexible data source API.</strong></p>
<p dir="auto">Let's start off visualizing a simple function of one variable:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using InteractiveViz
julia&gt; ilines(sin, 0, 100)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> InteractiveViz
julia<span class="pl-k">&gt;</span> <span class="pl-c1">ilines</span>(sin, <span class="pl-c1">0</span>, <span class="pl-c1">100</span>)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://raw.githubusercontent.com/org-arl/InteractiveViz.jl/master/docs/images/plot-1.png"><img src="https://raw.githubusercontent.com/org-arl/InteractiveViz.jl/master/docs/images/plot-1.png" alt="" style="max-width: 100%;"></a></p>
<p dir="auto">This displays the <code>sin()</code> function with the initial view set to the <em>x</em>-range of 0 to 100. You can however, pan and zoom (as you would do with a normal <code>GLMakie</code> window) beyond this range.</p>
<p dir="auto">Let's next try plotting 2 timeseries, each with 10 million points:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; ilines(5*sin.(0.02π .* (1:10000000)))
julia&gt; ilines!(randn(10000000))"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">ilines</span>(<span class="pl-c1">5</span><span class="pl-k">*</span><span class="pl-c1">sin</span>.(<span class="pl-c1">0.02</span>π <span class="pl-k">.*</span> (<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10000000</span>)))
julia<span class="pl-k">&gt;</span> <span class="pl-c1">ilines!</span>(<span class="pl-c1">randn</span>(<span class="pl-c1">10000000</span>))</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://raw.githubusercontent.com/org-arl/InteractiveViz.jl/master/docs/images/plot-2a.png"><img src="https://raw.githubusercontent.com/org-arl/InteractiveViz.jl/master/docs/images/plot-2a.png" alt="" style="max-width: 100%;"></a></p>
<p dir="auto">You can zoom and pan to see details:</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://raw.githubusercontent.com/org-arl/InteractiveViz.jl/master/docs/images/plot-2b.png"><img src="https://raw.githubusercontent.com/org-arl/InteractiveViz.jl/master/docs/images/plot-2b.png" alt="" style="max-width: 100%;"></a></p>
<p dir="auto">Next, let us visualize the famous Mandelbrot set:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using InteractiveViz.Demo
julia&gt; iheatmap(mandelbrot, -2, 0.66, -1, 1)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> InteractiveViz<span class="pl-k">.</span>Demo
julia<span class="pl-k">&gt;</span> <span class="pl-c1">iheatmap</span>(mandelbrot, <span class="pl-k">-</span><span class="pl-c1">2</span>, <span class="pl-c1">0.66</span>, <span class="pl-k">-</span><span class="pl-c1">1</span>, <span class="pl-c1">1</span>)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://raw.githubusercontent.com/org-arl/InteractiveViz.jl/master/docs/images/plot-3a.png"><img src="https://raw.githubusercontent.com/org-arl/InteractiveViz.jl/master/docs/images/plot-3a.png" alt="" style="max-width: 100%;"></a></p>
<p dir="auto">Try zooming in to a tiny part of the image, and see the fractal nature of the image render itself dynamically at full resolution!</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://raw.githubusercontent.com/org-arl/InteractiveViz.jl/master/docs/images/plot-3b.png"><img src="https://raw.githubusercontent.com/org-arl/InteractiveViz.jl/master/docs/images/plot-3b.png" alt="" style="max-width: 100%;"></a></p>
<p dir="auto">And how can we forget the Julia set?</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; iheatmap(julia, -2, 2, -1.75, 1.75; colormap=:magma)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">iheatmap</span>(julia, <span class="pl-k">-</span><span class="pl-c1">2</span>, <span class="pl-c1">2</span>, <span class="pl-k">-</span><span class="pl-c1">1.75</span>, <span class="pl-c1">1.75</span>; colormap<span class="pl-k">=</span><span class="pl-c1">:magma</span>)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://raw.githubusercontent.com/org-arl/InteractiveViz.jl/master/docs/images/plot-5.png"><img src="https://raw.githubusercontent.com/org-arl/InteractiveViz.jl/master/docs/images/plot-5.png" alt="" style="max-width: 100%;"></a></p>
<p dir="auto">You could of course plot a large heatmap stored in a matrix as well:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; iheatmap(range(0, 10; length=1000), range(0, 1; length=10000), randn(1000,10000))"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">iheatmap</span>(<span class="pl-c1">range</span>(<span class="pl-c1">0</span>, <span class="pl-c1">10</span>; length<span class="pl-k">=</span><span class="pl-c1">1000</span>), <span class="pl-c1">range</span>(<span class="pl-c1">0</span>, <span class="pl-c1">1</span>; length<span class="pl-k">=</span><span class="pl-c1">10000</span>), <span class="pl-c1">randn</span>(<span class="pl-c1">1000</span>,<span class="pl-c1">10000</span>))</pre></div>
<p dir="auto">Finally, let's try a scatter plot with ten million points:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; iscatter(randn(10_000_000), randn(10_000_000); markersize=3)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">iscatter</span>(<span class="pl-c1">randn</span>(<span class="pl-c1">10_000_000</span>), <span class="pl-c1">randn</span>(<span class="pl-c1">10_000_000</span>); markersize<span class="pl-k">=</span><span class="pl-c1">3</span>)</pre></div>
<p dir="auto">and add on another hundred thousand ones:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; iscatter!(randn(1_000_000) .- 1, randn(1_000_000) .- 1; color=:black, markersize=4)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">iscatter!</span>(<span class="pl-c1">randn</span>(<span class="pl-c1">1_000_000</span>) <span class="pl-k">.-</span> <span class="pl-c1">1</span>, <span class="pl-c1">randn</span>(<span class="pl-c1">1_000_000</span>) <span class="pl-k">.-</span> <span class="pl-c1">1</span>; color<span class="pl-k">=</span><span class="pl-c1">:black</span>, markersize<span class="pl-k">=</span><span class="pl-c1">4</span>)</pre></div>
<p dir="auto">Try zooming into this plot and see that it remains responsive as you zoom down to each individual point, or zoom out to get a birds-eye view!</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://raw.githubusercontent.com/org-arl/InteractiveViz.jl/master/docs/images/plot-4.png"><img src="https://raw.githubusercontent.com/org-arl/InteractiveViz.jl/master/docs/images/plot-4.png" alt="" style="max-width: 100%;"></a></p>
<p dir="auto">While we haven't documented all the keyword options here, you'll find that all of the plot attributes for Makie work as options in <em>InteractiveViz</em>.</p>
<p dir="auto">All of Makie's layout API also works as expected:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using GLMakie
julia&gt; f = Figure()
julia&gt; p1 = iheatmap(f[1,1], julia, -2, 2, -1.75, 1.75; colormap=:magma)
julia&gt; p2 = iheatmap(f[2,1], mandelbrot, -2, 0.66, -1, 1)
julia&gt; Colorbar(f[1,2], p1.plot)
julia&gt; Colorbar(f[2,2], p2.plot)
julia&gt; p3 = ilines(f[1,3], sin, 0, 100; axis=(; limits=(0, 100, -1.5, 1.5)))
julia&gt; p4 = ilines(f[2,3], range(0, 100; length=10000), randn(10000))
julia&gt; linkxaxes!(p3.axis, p4.axis)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> GLMakie
julia<span class="pl-k">&gt;</span> f <span class="pl-k">=</span> <span class="pl-c1">Figure</span>()
julia<span class="pl-k">&gt;</span> p1 <span class="pl-k">=</span> <span class="pl-c1">iheatmap</span>(f[<span class="pl-c1">1</span>,<span class="pl-c1">1</span>], julia, <span class="pl-k">-</span><span class="pl-c1">2</span>, <span class="pl-c1">2</span>, <span class="pl-k">-</span><span class="pl-c1">1.75</span>, <span class="pl-c1">1.75</span>; colormap<span class="pl-k">=</span><span class="pl-c1">:magma</span>)
julia<span class="pl-k">&gt;</span> p2 <span class="pl-k">=</span> <span class="pl-c1">iheatmap</span>(f[<span class="pl-c1">2</span>,<span class="pl-c1">1</span>], mandelbrot, <span class="pl-k">-</span><span class="pl-c1">2</span>, <span class="pl-c1">0.66</span>, <span class="pl-k">-</span><span class="pl-c1">1</span>, <span class="pl-c1">1</span>)
julia<span class="pl-k">&gt;</span> <span class="pl-c1">Colorbar</span>(f[<span class="pl-c1">1</span>,<span class="pl-c1">2</span>], p1<span class="pl-k">.</span>plot)
julia<span class="pl-k">&gt;</span> <span class="pl-c1">Colorbar</span>(f[<span class="pl-c1">2</span>,<span class="pl-c1">2</span>], p2<span class="pl-k">.</span>plot)
julia<span class="pl-k">&gt;</span> p3 <span class="pl-k">=</span> <span class="pl-c1">ilines</span>(f[<span class="pl-c1">1</span>,<span class="pl-c1">3</span>], sin, <span class="pl-c1">0</span>, <span class="pl-c1">100</span>; axis<span class="pl-k">=</span>(; limits<span class="pl-k">=</span>(<span class="pl-c1">0</span>, <span class="pl-c1">100</span>, <span class="pl-k">-</span><span class="pl-c1">1.5</span>, <span class="pl-c1">1.5</span>)))
julia<span class="pl-k">&gt;</span> p4 <span class="pl-k">=</span> <span class="pl-c1">ilines</span>(f[<span class="pl-c1">2</span>,<span class="pl-c1">3</span>], <span class="pl-c1">range</span>(<span class="pl-c1">0</span>, <span class="pl-c1">100</span>; length<span class="pl-k">=</span><span class="pl-c1">10000</span>), <span class="pl-c1">randn</span>(<span class="pl-c1">10000</span>))
julia<span class="pl-k">&gt;</span> <span class="pl-c1">linkxaxes!</span>(p3<span class="pl-k">.</span>axis, p4<span class="pl-k">.</span>axis)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://raw.githubusercontent.com/org-arl/InteractiveViz.jl/master/docs/images/plot-6.png"><img src="https://raw.githubusercontent.com/org-arl/InteractiveViz.jl/master/docs/images/plot-6.png" alt="" style="max-width: 100%;"></a></p>
<h3 dir="auto"><a id="user-content-data-sources" class="anchor" aria-hidden="true" href="#data-sources"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Data sources</h3>
<p dir="auto">All <code>InteractiveViz</code> data sources are subtypes of the abstract <code>DataSource</code> type. Currently, three abstract subtypes of data sources are defined:</p>
<ul dir="auto">
<li><code>Continuous1D</code> for continuous one-dimensional data (e.g. time series),</li>
<li><code>Continuous2D</code> for continuous two-dimensional data (e.g. 2D topography heatmaps), and</li>
<li><code>PointSet</code> for discrete points (e.g. scatter plots).</li>
</ul>
<p dir="auto">The API to implement for each data source simply consists of two methods:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="sample(data::DataSource, xrange::StepRangeLen, yrange::StepRangeLen)
limits(data::DataSource)"><pre class="notranslate"><code>sample(data::DataSource, xrange::StepRangeLen, yrange::StepRangeLen)
limits(data::DataSource)
</code></pre></div>
<p dir="auto"><code>sample()</code> samples the data source at a finite resolution and within a viewport represented by a <code>xrange</code> and <code>yrange</code>, and returns samples at the display resolution. The return type depends on the type of data source. Sampling a <code>PointSet</code> results in a <code>Point2fSet</code> of sample points. Sampling a <code>Continuous1D</code> results in a <code>Samples1D</code> of samples at the locations specified by <code>xrange</code>, or denser. Sampling a <code>Continuous2D</code> results in a <code>Samples2D</code> of samples at the locations specified by <code>xrange</code> and <code>yrange</code>.</p>
<p dir="auto"><code>limits()</code> returns a tuple <code>(xmin, xmax, ymin, ymax)</code> of default x and y axis limits for the data. If a limit is not applicable or unknown for the data source, <code>nothing</code> may be returned for that entry.</p>
<p dir="auto">The default implementations available include:</p>
<ul dir="auto">
<li><code>Point2fSet</code>: vector of discrete 2D data points.</li>
<li><code>Samples1D</code>: uniformly sampled 1D data in a vector, automatically interpolated or aggregated, as required.</li>
<li><code>Samples2D</code>: uniformly sampled 2D data in a vector, automatically interpolated or aggregated, as required.</li>
<li><code>Function1D</code>: 1D function that generated the data dynamically on demand.</li>
<li><code>Function2D</code>: 2D function that generated the data dynamically on demand.</li>
</ul>
<p dir="auto">New types of data sources may be defined by the user. To use these, the underlying <code>iviz()</code> function has to be directly called on the data source. The <code>ilines()</code>, <code>iheatmap()</code> and <code>iscatter()</code> functions are simply convenience wrappers on the <code>iviz()</code> function.</p>
</article></div>