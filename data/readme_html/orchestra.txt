<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-orchestra" class="anchor" aria-hidden="true" href="#orchestra"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Orchestra</h1>
<p><a href="https://travis-ci.org/svs14/Orchestra.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/557de92dbd367ed006b1c9bb9a962bc2e119d13a/68747470733a2f2f7472617669732d63692e6f72672f73767331342f4f72636865737472612e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/svs14/Orchestra.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://coveralls.io/r/svs14/Orchestra.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/e3166368d2949ba89c83d4e5b02e235f5a949d64/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f73767331342f4f72636865737472612e6a6c2f62616467652e706e673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/svs14/Orchestra.jl/badge.png?branch=master" style="max-width:100%;"></a></p>
<p>Orchestra is a heterogeneous ensemble learning package for the Julia programming
language. It is driven by a uniform machine learner API designed for learner
composition.</p>
<h2><a id="user-content-getting-started" class="anchor" aria-hidden="true" href="#getting-started"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Getting Started</h2>
<p>We will cover how to predict on a dataset using Orchestra.</p>
<h3><a id="user-content-obtain-data" class="anchor" aria-hidden="true" href="#obtain-data"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Obtain Data</h3>
<p>A tabular dataset will be used to obtain our instances and labels.</p>
<p>This will be split it into a training and test set using holdout method.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">import</span> RDatasets
<span class="pl-k">using</span> Orchestra<span class="pl-k">.</span>Util
<span class="pl-k">using</span> Orchestra<span class="pl-k">.</span>Transformers

<span class="pl-c"><span class="pl-c">#</span> Obtain instances and labels</span>
dataset <span class="pl-k">=</span> RDatasets<span class="pl-k">.</span><span class="pl-c1">dataset</span>(<span class="pl-s"><span class="pl-pds">"</span>datasets<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>iris<span class="pl-pds">"</span></span>)
instances <span class="pl-k">=</span> <span class="pl-c1">array</span>(dataset[:, <span class="pl-c1">1</span><span class="pl-k">:</span>(<span class="pl-c1">end</span><span class="pl-k">-</span><span class="pl-c1">1</span>)])
labels <span class="pl-k">=</span> <span class="pl-c1">array</span>(dataset[:, <span class="pl-c1">end</span>])

<span class="pl-c"><span class="pl-c">#</span> Split into training and test sets</span>
(train_ind, test_ind) <span class="pl-k">=</span> <span class="pl-c1">holdout</span>(<span class="pl-c1">size</span>(instances, <span class="pl-c1">1</span>), <span class="pl-c1">0.3</span>)</pre></div>
<h3><a id="user-content-create-a-learner" class="anchor" aria-hidden="true" href="#create-a-learner"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Create a Learner</h3>
<p>A transformer processes instances in some form. Coincidentally, a learner is a subtype of transformer.</p>
<p>A transformer can be created by instantiating it, taking an options dictionary as an optional argument.</p>
<p>All transformers, including learners are called in the same way.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span> Learner with default settings</span>
learner <span class="pl-k">=</span> <span class="pl-c1">PrunedTree</span>()

<span class="pl-c"><span class="pl-c">#</span> Learner with some of the default settings overriden</span>
learner <span class="pl-k">=</span> <span class="pl-c1">PrunedTree</span>({
  <span class="pl-c1">:impl_options</span> <span class="pl-k">=&gt;</span> {
    <span class="pl-c1">:purity_threshold</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">0.5</span>
  }
})

<span class="pl-c"><span class="pl-c">#</span> All learners are called in the same way.</span>
learner <span class="pl-k">=</span> <span class="pl-c1">StackEnsemble</span>({
  <span class="pl-c1">:learners</span> <span class="pl-k">=&gt;</span> [
    <span class="pl-c1">PrunedTree</span>(), 
    <span class="pl-c1">RandomForest</span>(),
    <span class="pl-c1">DecisionStumpAdaboost</span>()
  ], 
  <span class="pl-c1">:stacker</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">RandomForest</span>()
})</pre></div>
<h3><a id="user-content-create-a-pipeline" class="anchor" aria-hidden="true" href="#create-a-pipeline"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Create a Pipeline</h3>
<p>Normally we may require the use of data pre-processing before the instances are passed to the learner.</p>
<p>We shall use a pipeline transformer to chain many transformers in sequence.</p>
<p>In this case we shall one hot encode categorical features, impute NA values and numerically standardize before we call the learner.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span> Create pipeline</span>
pipeline <span class="pl-k">=</span> <span class="pl-c1">Pipeline</span>({
  <span class="pl-c1">:transformers</span> <span class="pl-k">=&gt;</span> [
    <span class="pl-c1">OneHotEncoder</span>(), <span class="pl-c"><span class="pl-c">#</span> Encodes nominal features into numeric</span>
    <span class="pl-c1">Imputer</span>(), <span class="pl-c"><span class="pl-c">#</span> Imputes NA values</span>
    <span class="pl-c1">StandardScaler</span>(), <span class="pl-c"><span class="pl-c">#</span> Standardizes features </span>
    learner <span class="pl-c"><span class="pl-c">#</span> Predicts labels on instances</span>
  ]
})</pre></div>
<h3><a id="user-content-train-and-predict" class="anchor" aria-hidden="true" href="#train-and-predict"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Train and Predict</h3>
<p>Training is done via the <code>fit!</code> function, predicton via <code>transform!</code>.</p>
<p>All transformers, provide these two functions. They are always called the same way.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span> Train</span>
<span class="pl-c1">fit!</span>(pipeline, instances[train_ind, :], labels[train_ind])

<span class="pl-c"><span class="pl-c">#</span> Predict</span>
predictions <span class="pl-k">=</span> <span class="pl-c1">transform!</span>(pipeline, instances[test_ind, :])</pre></div>
<h3><a id="user-content-assess" class="anchor" aria-hidden="true" href="#assess"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Assess</h3>
<p>Finally we assess how well our learner performed.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span> Assess predictions</span>
result <span class="pl-k">=</span> <span class="pl-c1">score</span>(<span class="pl-c1">:accuracy</span>, labels[test_ind], predictions)</pre></div>
<h2><a id="user-content-available-transformers" class="anchor" aria-hidden="true" href="#available-transformers"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Available Transformers</h2>
<p>Outlined are all the transformers currently available via Orchestra.</p>
<h3><a id="user-content-orchestra-1" class="anchor" aria-hidden="true" href="#orchestra-1"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Orchestra</h3>
<h4><a id="user-content-baseline-orchestrajl-learner" class="anchor" aria-hidden="true" href="#baseline-orchestrajl-learner"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Baseline (Orchestra.jl Learner)</h4>
<p>Baseline learner that by default assigns the most frequent label.</p>
<div class="highlight highlight-source-julia"><pre>learner <span class="pl-k">=</span> <span class="pl-c1">Baseline</span>({
  <span class="pl-c"><span class="pl-c">#</span> Output to train against</span>
  <span class="pl-c"><span class="pl-c">#</span> (:class).</span>
  <span class="pl-c1">:output</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">:class</span>,
  <span class="pl-c"><span class="pl-c">#</span> Label assignment strategy.</span>
  <span class="pl-c"><span class="pl-c">#</span> Function that takes a label vector and returns the required output.</span>
  <span class="pl-c1">:strategy</span> <span class="pl-k">=&gt;</span> mode
})</pre></div>
<h4><a id="user-content-identity-orchestrajl-transformer" class="anchor" aria-hidden="true" href="#identity-orchestrajl-transformer"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Identity (Orchestra.jl Transformer)</h4>
<p>Identity transformer passes the instances as is.</p>
<div class="highlight highlight-source-julia"><pre>transformer <span class="pl-k">=</span> <span class="pl-c1">Identity</span>()</pre></div>
<h4><a id="user-content-voteensemble-orchestrajl-learner" class="anchor" aria-hidden="true" href="#voteensemble-orchestrajl-learner"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>VoteEnsemble (Orchestra.jl Learner)</h4>
<p>Set of machine learners that majority vote to decide prediction.</p>
<div class="highlight highlight-source-julia"><pre>learner <span class="pl-k">=</span> <span class="pl-c1">VoteEnsemble</span>({
  <span class="pl-c"><span class="pl-c">#</span> Output to train against</span>
  <span class="pl-c"><span class="pl-c">#</span> (:class).</span>
  <span class="pl-c1">:output</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">:class</span>,
  <span class="pl-c"><span class="pl-c">#</span> Learners in voting committee.</span>
  <span class="pl-c1">:learners</span> <span class="pl-k">=&gt;</span> [<span class="pl-c1">PrunedTree</span>(), <span class="pl-c1">DecisionStumpAdaboost</span>(), <span class="pl-c1">RandomForest</span>()]
})</pre></div>
<h4><a id="user-content-stackensemble-orchestrajl-learner" class="anchor" aria-hidden="true" href="#stackensemble-orchestrajl-learner"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>StackEnsemble (Orchestra.jl Learner)</h4>
<p>Ensemble where a 'stack' learner learns on a set of learners' predictions.</p>
<div class="highlight highlight-source-julia"><pre>learner <span class="pl-k">=</span> <span class="pl-c1">StackEnsemble</span>({
  <span class="pl-c"><span class="pl-c">#</span> Output to train against</span>
  <span class="pl-c"><span class="pl-c">#</span> (:class).</span>
  <span class="pl-c1">:output</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">:class</span>,
  <span class="pl-c"><span class="pl-c">#</span> Set of learners that produce feature space for stacker.</span>
  <span class="pl-c1">:learners</span> <span class="pl-k">=&gt;</span> [<span class="pl-c1">PrunedTree</span>(), <span class="pl-c1">DecisionStumpAdaboost</span>(), <span class="pl-c1">RandomForest</span>()],
  <span class="pl-c"><span class="pl-c">#</span> Machine learner that trains on set of learners' outputs.</span>
  <span class="pl-c1">:stacker</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">RandomForest</span>(),
  <span class="pl-c"><span class="pl-c">#</span> Proportion of training set left to train stacker itself.</span>
  <span class="pl-c1">:stacker_training_proportion</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">0.3</span>,
  <span class="pl-c"><span class="pl-c">#</span> Provide original features on top of learner outputs to stacker.</span>
  <span class="pl-c1">:keep_original_features</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">false</span>
})</pre></div>
<h4><a id="user-content-bestlearner-orchestrajl-learner" class="anchor" aria-hidden="true" href="#bestlearner-orchestrajl-learner"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>BestLearner (Orchestra.jl Learner)</h4>
<p>Selects best learner out of set.
Will perform a grid search on learners if options grid is provided.</p>
<div class="highlight highlight-source-julia"><pre>learner <span class="pl-k">=</span> <span class="pl-c1">BestLearner</span>({
  <span class="pl-c"><span class="pl-c">#</span> Output to train against</span>
  <span class="pl-c"><span class="pl-c">#</span> (:class).</span>
  <span class="pl-c1">:output</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">:class</span>,
  <span class="pl-c"><span class="pl-c">#</span> Function to return partitions of instance indices.</span>
  <span class="pl-c1">:partition_generator</span> <span class="pl-k">=&gt;</span> (instances, labels) <span class="pl-k">-&gt;</span> <span class="pl-c1">kfold</span>(<span class="pl-c1">size</span>(instances, <span class="pl-c1">1</span>), <span class="pl-c1">5</span>),
  <span class="pl-c"><span class="pl-c">#</span> Function that selects the best learner by index.</span>
  <span class="pl-c"><span class="pl-c">#</span> Arg learner_partition_scores is a (learner, partition) score matrix.</span>
  <span class="pl-c1">:selection_function</span> <span class="pl-k">=&gt;</span> (learner_partition_scores) <span class="pl-k">-&gt;</span> <span class="pl-c1">findmax</span>(<span class="pl-c1">mean</span>(learner_partition_scores, <span class="pl-c1">2</span>))[<span class="pl-c1">2</span>],      
  <span class="pl-c"><span class="pl-c">#</span> Score type returned by score() using respective output.</span>
  <span class="pl-c1">:score_type</span> <span class="pl-k">=&gt;</span> Real,
  <span class="pl-c"><span class="pl-c">#</span> Candidate learners.</span>
  <span class="pl-c1">:learners</span> <span class="pl-k">=&gt;</span> [<span class="pl-c1">PrunedTree</span>(), <span class="pl-c1">DecisionStumpAdaboost</span>(), <span class="pl-c1">RandomForest</span>()],
  <span class="pl-c"><span class="pl-c">#</span> Options grid for learners, to search through by BestLearner.</span>
  <span class="pl-c"><span class="pl-c">#</span> Format is [learner_1_options, learner_2_options, ...]</span>
  <span class="pl-c"><span class="pl-c">#</span> where learner_options is same as a learner's options but</span>
  <span class="pl-c"><span class="pl-c">#</span> with a list of values instead of scalar.</span>
  <span class="pl-c1">:learner_options_grid</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">nothing</span>
})</pre></div>
<h4><a id="user-content-onehotencoder-orchestrajl-transformer" class="anchor" aria-hidden="true" href="#onehotencoder-orchestrajl-transformer"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>OneHotEncoder (Orchestra.jl Transformer)</h4>
<p>Transforms instances with nominal features into one-hot form
and coerces the instance matrix to be of element type Float64.</p>
<div class="highlight highlight-source-julia"><pre>transformer <span class="pl-k">=</span> <span class="pl-c1">OneHotEncoder</span>({
  <span class="pl-c"><span class="pl-c">#</span> Nominal columns</span>
  <span class="pl-c1">:nominal_columns</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">nothing</span>,
  <span class="pl-c"><span class="pl-c">#</span> Nominal column values map. Key is column index, value is list of</span>
  <span class="pl-c"><span class="pl-c">#</span> possible values for that column.</span>
  <span class="pl-c1">:nominal_column_values_map</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">nothing</span>
})</pre></div>
<h4><a id="user-content-imputer-orchestrajl-transformer" class="anchor" aria-hidden="true" href="#imputer-orchestrajl-transformer"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Imputer (Orchestra.jl Transformer)</h4>
<p>Imputes NaN values from Float64 features.</p>
<div class="highlight highlight-source-julia"><pre>transformer <span class="pl-k">=</span> <span class="pl-c1">Imputer</span>({
  <span class="pl-c"><span class="pl-c">#</span> Imputation strategy.</span>
  <span class="pl-c"><span class="pl-c">#</span> Statistic that takes a vector such as mean or median.</span>
  <span class="pl-c1">:strategy</span> <span class="pl-k">=&gt;</span> mean
})</pre></div>
<h4><a id="user-content-pipeline-orchestrajl-transformer" class="anchor" aria-hidden="true" href="#pipeline-orchestrajl-transformer"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Pipeline (Orchestra.jl Transformer)</h4>
<p>Chains multiple transformers in sequence.</p>
<div class="highlight highlight-source-julia"><pre>transformer <span class="pl-k">=</span> <span class="pl-c1">Pipeline</span>({
  <span class="pl-c"><span class="pl-c">#</span> Transformers as list to chain in sequence.</span>
  <span class="pl-c1">:transformers</span> <span class="pl-k">=&gt;</span> [<span class="pl-c1">OneHotEncoder</span>(), <span class="pl-c1">Imputer</span>()],
  <span class="pl-c"><span class="pl-c">#</span> Transformer options as list applied to same index transformer.</span>
  <span class="pl-c1">:transformer_options</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">nothing</span>
})</pre></div>
<h4><a id="user-content-wrapper-orchestrajl-transformer" class="anchor" aria-hidden="true" href="#wrapper-orchestrajl-transformer"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Wrapper (Orchestra.jl Transformer)</h4>
<p>Wraps around an Orchestra transformer.</p>
<div class="highlight highlight-source-julia"><pre>transformer <span class="pl-k">=</span> <span class="pl-c1">Wrapper</span>({
  <span class="pl-c"><span class="pl-c">#</span> Transformer to call.</span>
  <span class="pl-c1">:transformer</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">OneHotEncoder</span>(),
  <span class="pl-c"><span class="pl-c">#</span> Transformer options.</span>
  <span class="pl-c1">:transformer_options</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">nothing</span>
})</pre></div>
<h3><a id="user-content-julia" class="anchor" aria-hidden="true" href="#julia"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Julia</h3>
<h4><a id="user-content-prunedtree-decisiontreejl-learner" class="anchor" aria-hidden="true" href="#prunedtree-decisiontreejl-learner"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>PrunedTree (DecisionTree.jl Learner)</h4>
<p>Pruned ID3 decision tree.</p>
<div class="highlight highlight-source-julia"><pre>learner <span class="pl-k">=</span> <span class="pl-c1">PrunedTree</span>({
  <span class="pl-c"><span class="pl-c">#</span> Output to train against</span>
  <span class="pl-c"><span class="pl-c">#</span> (:class).</span>
  <span class="pl-c1">:output</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">:class</span>,
  <span class="pl-c"><span class="pl-c">#</span> Options specific to this implementation.</span>
  <span class="pl-c1">:impl_options</span> <span class="pl-k">=&gt;</span> {
    <span class="pl-c"><span class="pl-c">#</span> Merge leaves having &gt;= purity_threshold combined purity.</span>
    <span class="pl-c1">:purity_threshold</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1.0</span>
  }
})</pre></div>
<h4><a id="user-content-randomforest-decisiontreejl-learner" class="anchor" aria-hidden="true" href="#randomforest-decisiontreejl-learner"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>RandomForest (DecisionTree.jl Learner)</h4>
<p>Random forest (C4.5).</p>
<div class="highlight highlight-source-julia"><pre>learner <span class="pl-k">=</span> <span class="pl-c1">RandomForest</span>({
  <span class="pl-c"><span class="pl-c">#</span> Output to train against</span>
  <span class="pl-c"><span class="pl-c">#</span> (:class).</span>
  <span class="pl-c1">:output</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">:class</span>,
  <span class="pl-c"><span class="pl-c">#</span> Options specific to this implementation.</span>
  <span class="pl-c1">:impl_options</span> <span class="pl-k">=&gt;</span> {
    <span class="pl-c"><span class="pl-c">#</span> Number of features to train on with trees.</span>
    <span class="pl-c1">:num_subfeatures</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">nothing</span>,
    <span class="pl-c"><span class="pl-c">#</span> Number of trees in forest.</span>
    <span class="pl-c1">:num_trees</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">10</span>,
    <span class="pl-c"><span class="pl-c">#</span> Proportion of trainingset to be used for trees.</span>
    <span class="pl-c1">:partial_sampling</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">0.7</span>
  }
})</pre></div>
<h4><a id="user-content-decisionstumpadaboost-decisiontreejl-learner" class="anchor" aria-hidden="true" href="#decisionstumpadaboost-decisiontreejl-learner"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>DecisionStumpAdaboost (DecisionTree.jl Learner)</h4>
<p>Adaboosted C4.5 decision stumps.</p>
<div class="highlight highlight-source-julia"><pre>learner <span class="pl-k">=</span> <span class="pl-c1">DecisionStumpAdaboost</span>({
  <span class="pl-c"><span class="pl-c">#</span> Output to train against</span>
  <span class="pl-c"><span class="pl-c">#</span> (:class).</span>
  <span class="pl-c1">:output</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">:class</span>,
  <span class="pl-c"><span class="pl-c">#</span> Options specific to this implementation.</span>
  <span class="pl-c1">:impl_options</span> <span class="pl-k">=&gt;</span> {
    <span class="pl-c"><span class="pl-c">#</span> Number of boosting iterations.</span>
    <span class="pl-c1">:num_iterations</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">7</span>
  }
})</pre></div>
<h4><a id="user-content-pca-dimensionalityreductionjl-transformer" class="anchor" aria-hidden="true" href="#pca-dimensionalityreductionjl-transformer"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>PCA (DimensionalityReduction.jl Transformer)</h4>
<p>Principal Component Analysis rotation
on features.
Features ordered by maximal variance descending.</p>
<p>Fails if zero-variance feature exists.</p>
<div class="highlight highlight-source-julia"><pre>transformer <span class="pl-k">=</span> <span class="pl-c1">PCA</span>({
  <span class="pl-c"><span class="pl-c">#</span> Center features</span>
  <span class="pl-c1">:center</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">true</span>,
  <span class="pl-c"><span class="pl-c">#</span> Scale features</span>
  <span class="pl-c1">:scale</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">true</span>
})</pre></div>
<h4><a id="user-content-standardscaler-mlbasejl-transformer" class="anchor" aria-hidden="true" href="#standardscaler-mlbasejl-transformer"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>StandardScaler (MLBase.jl Transformer)</h4>
<p>Standardizes each feature using (X - mean) / stddev.
Will produce NaN if standard deviation is zero.</p>
<div class="highlight highlight-source-julia"><pre>transformer <span class="pl-k">=</span> <span class="pl-c1">StandardScaler</span>({
  <span class="pl-c"><span class="pl-c">#</span> Center features</span>
  <span class="pl-c1">:center</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">true</span>,
  <span class="pl-c"><span class="pl-c">#</span> Scale features</span>
  <span class="pl-c1">:scale</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">true</span>
})</pre></div>
<h3><a id="user-content-python" class="anchor" aria-hidden="true" href="#python"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Python</h3>
<p>See the scikit-learn <a href="http://scikit-learn.org/stable/modules/classes.html" rel="nofollow">API</a> for what options are available per learner.</p>
<h4><a id="user-content-skllearner-scikit-learn-015-learner" class="anchor" aria-hidden="true" href="#skllearner-scikit-learn-015-learner"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>SKLLearner (scikit-learn 0.15 Learner)</h4>
<p>Wrapper for scikit-learn that provides access to most learners.</p>
<p>Options for the specific scikit-learn learner is to be passed
in <code>options[:impl_options]</code> dictionary.</p>
<p>Available learners:</p>
<ul>
<li>"AdaBoostClassifier"</li>
<li>"BaggingClassifier"</li>
<li>"ExtraTreesClassifier"</li>
<li>"GradientBoostingClassifier"</li>
<li>"RandomForestClassifier"</li>
<li>"LDA"</li>
<li>"LogisticRegression"</li>
<li>"PassiveAggressiveClassifier"</li>
<li>"RidgeClassifier"</li>
<li>"RidgeClassifierCV"</li>
<li>"SGDClassifier"</li>
<li>"KNeighborsClassifier"</li>
<li>"RadiusNeighborsClassifier"</li>
<li>"NearestCentroid"</li>
<li>"QDA"</li>
<li>"SVC"</li>
<li>"LinearSVC"</li>
<li>"NuSVC"</li>
<li>"DecisionTreeClassifier"</li>
</ul>
<div class="highlight highlight-source-julia"><pre>learner <span class="pl-k">=</span> <span class="pl-c1">SKLLearner</span>({
  <span class="pl-c"><span class="pl-c">#</span> Output to train against</span>
  <span class="pl-c"><span class="pl-c">#</span> (:class).</span>
  <span class="pl-c1">:output</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">:class</span>,
  <span class="pl-c1">:learner</span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>LinearSVC<span class="pl-pds">"</span></span>,
  <span class="pl-c"><span class="pl-c">#</span> Options specific to this implementation.</span>
  <span class="pl-c1">:impl_options</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">Dict</span>()
})</pre></div>
<h3><a id="user-content-r" class="anchor" aria-hidden="true" href="#r"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>R</h3>
<p>Python library 'rpy2' is required to interface with R.</p>
<p>R library 'caret' offers more than 100 learners.
See <a href="http://caret.r-forge.r-project.org/modelList.html" rel="nofollow">here</a> for more details.</p>
<h4><a id="user-content-crtlearner-caret-60-learner" class="anchor" aria-hidden="true" href="#crtlearner-caret-60-learner"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>CRTLearner (caret 6.0 Learner)</h4>
<p>CARET wrapper that provides access to all learners.</p>
<p>Options for the specific CARET learner is to be passed
in <code>options[:impl_options]</code> dictionary.</p>
<div class="highlight highlight-source-julia"><pre>learner <span class="pl-k">=</span> <span class="pl-c1">CRTLearner</span>({
  <span class="pl-c"><span class="pl-c">#</span> Output to train against</span>
  <span class="pl-c"><span class="pl-c">#</span> (:class).</span>
  <span class="pl-c1">:output</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">:class</span>,
  <span class="pl-c1">:learner</span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>svmLinear<span class="pl-pds">"</span></span>,
  <span class="pl-c1">:impl_options</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">Dict</span>()
})</pre></div>
<h2><a id="user-content-known-limitations" class="anchor" aria-hidden="true" href="#known-limitations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Known Limitations</h2>
<p>Learners have only been tested on instances with numeric features.</p>
<p>Inconsistencies may result in using nominal features directly without a numeric transformation (i.e. OneHotEncoder).</p>
<h2><a id="user-content-misc" class="anchor" aria-hidden="true" href="#misc"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Misc</h2>
<p>The links provided below will only work if you are viewing this in the GitHub repository.</p>
<h3><a id="user-content-changes" class="anchor" aria-hidden="true" href="#changes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Changes</h3>
<p>See <a href="CHANGELOG.yml">CHANGELOG.yml</a>.</p>
<h3><a id="user-content-future-work" class="anchor" aria-hidden="true" href="#future-work"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Future Work</h3>
<p>See <a href="FUTUREWORK.md">FUTUREWORK.md</a>.</p>
<h3><a id="user-content-contributing" class="anchor" aria-hidden="true" href="#contributing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Contributing</h3>
<p>See <a href="CONTRIBUTING.md">CONTRIBUTING.md</a>.</p>
<h3><a id="user-content-license" class="anchor" aria-hidden="true" href="#license"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>License</h3>
<p>MIT "Expat" License. See <a href="LICENSE.md">LICENSE.md</a>.</p>
</article></div>