<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-dataloaders" class="anchor" aria-hidden="true" href="#dataloaders"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>DataLoaders</h1>
<p><a href="https://github.com/lorenzoh/DataLoaders.jl/actions"><img src="https://github.com/lorenzoh/DataLoaders.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width:100%;"></a>
<a href="https://lorenzoh.github.io/DataLoaders.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/f7b92a177c912c1cc007fc9b40f17ff3ee3bb414/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://lorenzoh.github.io/DataLoaders.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/3e353c26ddfe819150acbc732248f4f2a37f5175/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a></p>
<p>A parallel iterator for large machine learning datasets that don't fit into memory inspired by PyTorch's <code>DataLoader</code> class.</p>
<p>It uses <a href="https://github.com/tro3/ThreadPools.jl"><code>ThreadPools.jl</code></a> to process batches in parallel while keeping the primary thread free.</p>
<p>Utilizing <code>LearnBase.jl</code>'s <a href="https://mldatautilsjl.readthedocs.io/en/latest/data/pattern.html" rel="nofollow">Data Access Pattern</a>, so many data containers work out of the box and custom containers are easily supported by implementing <code>LearnBase.getobs</code> and <code>LearnBase.nobs</code>.</p>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Usage</h2>
<h3><a id="user-content-options" class="anchor" aria-hidden="true" href="#options"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Options</h3>
<h4><a id="user-content-dataloaderdataset-batchsize-kwargs" class="anchor" aria-hidden="true" href="#dataloaderdataset-batchsize-kwargs"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>DataLoader(dataset, batchsize; kwargs...)</h4>
<h5><a id="user-content-arguments" class="anchor" aria-hidden="true" href="#arguments"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Arguments</h5>
<ul>
<li><code>dataset</code>: A data container supporting the <code>LearnBase</code> data access pattern</li>
<li><code>batchsize::Integer = 1</code>: Number of samples to batch together</li>
</ul>
<h5><a id="user-content-keyword-arguments" class="anchor" aria-hidden="true" href="#keyword-arguments"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Keyword arguments</h5>
<ul>
<li><code>shuffle::Bool = true</code>: Whether to shuffle the observations before iterating</li>
<li><code>numworkers::Integer = max(1, Threads.nthreads() - 1)</code>: Number of workers to
spawn to load data in parallel. The primary thread is kept free.</li>
<li><code>transformfn</code>: Function that is applied to individual samples before batching</li>
<li><code>collatefn</code>: Function that collates multiple samples into a batch. For default
behavior, see <a href="@ref"><code>collate</code></a></li>
<li><code>droplast::Bool = false</code>: Whether to drop the last batch when <code>nobs(dataset)</code> is
not divisible by <code>batchsize</code>. <code>true</code> ensures all batches have the same size, but
some samples might be dropped</li>
</ul>
<h3><a id="user-content-simple-example" class="anchor" aria-hidden="true" href="#simple-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Simple example</h3>
<div class="highlight highlight-source-julia"><pre>dataset <span class="pl-k">=</span> ([<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">4</span>, <span class="pl-c1">5</span>, <span class="pl-c1">6</span>], [<span class="pl-c1">2</span>, <span class="pl-c1">4</span>, <span class="pl-c1">6</span>, <span class="pl-c1">8</span>, <span class="pl-c1">10</span>, <span class="pl-c1">12</span>])
dataloader <span class="pl-k">=</span> <span class="pl-c1">DataLoader</span>(dataset, <span class="pl-c1">2</span>, numworkers <span class="pl-k">=</span> <span class="pl-c1">1</span>)

<span class="pl-k">for</span> batch <span class="pl-k">in</span> dataloader
    <span class="pl-c"><span class="pl-c">#</span> do your stuff</span>
<span class="pl-k">end</span></pre></div>
<p>Note: if your dataset fits into memory like in this toy example, you don't need parallel workers</p>
<h3><a id="user-content-custom-data-container-example" class="anchor" aria-hidden="true" href="#custom-data-container-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Custom data container example</h3>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> Images<span class="pl-k">:</span> load
<span class="pl-k">import</span> LearnBase<span class="pl-k">:</span> getobs, nobs

<span class="pl-c"><span class="pl-c">#</span> Custom data container</span>
<span class="pl-k">struct</span> ImageDataset
    files<span class="pl-k">::</span><span class="pl-c1">AbstractVector{AbstractString}</span>
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> Implementing `LearnBase.jl` interface</span>
<span class="pl-en">getobs</span>(ds<span class="pl-k">::</span><span class="pl-c1">ImageDataset</span>, idx<span class="pl-k">::</span><span class="pl-c1">Integer</span>) <span class="pl-k">=</span> <span class="pl-c1">load</span>(ds<span class="pl-k">.</span>files[idx])
<span class="pl-en">nobs</span>(ds<span class="pl-k">::</span><span class="pl-c1">ImageDataset</span>) <span class="pl-k">=</span> <span class="pl-c1">length</span>(ds<span class="pl-k">.</span>files)


<span class="pl-c"><span class="pl-c">#</span> Now you can use your custom container</span>

dataset <span class="pl-k">=</span> <span class="pl-c1">ImageDataset</span>([<span class="pl-s"><span class="pl-pds">"</span>image1.jpg<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>image2.jpg<span class="pl-pds">"</span></span>, <span class="pl-k">...</span>])

dataloader <span class="pl-k">=</span> <span class="pl-c1">DataLoader</span>(dataset, <span class="pl-c1">8</span>, shuffle <span class="pl-k">=</span> <span class="pl-c1">true</span>)

<span class="pl-k">for</span> batch <span class="pl-k">in</span> dataloader
    <span class="pl-c"><span class="pl-c">#</span> do your stuff</span>
<span class="pl-k">end</span></pre></div>
<p>Note: To use multiple workers (default behavior), you have to set the <code>JULIA_NUM_THREADS</code> environment variable before starting your session.</p>
</article></div>