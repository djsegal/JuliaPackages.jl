<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h2><a id="user-content-ipnetsjl" class="anchor" aria-hidden="true" href="#ipnetsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>IPNets.jl</h2>
<p><a href="https://travis-ci.org/JuliaWeb/IPNets.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/2cdfa3d24786e3c0657fca4f7465acb1e6206f5b/68747470733a2f2f7472617669732d63692e6f72672f4a756c69615765622f49504e6574732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaWeb/IPNets.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="http://codecov.io/github/JuliaWeb/IPNets.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/85c3415008bda776abca3cdaa984230035ad6811/687474703a2f2f636f6465636f762e696f2f6769746875622f4a756c69615765622f49504e6574732e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/JuliaWeb/IPNets.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
<p><a href="http://pkg.julialang.org/?pkg=IPNets" rel="nofollow"><img src="https://camo.githubusercontent.com/d39eaf96c51a1b9ac3750b634362000aa10a11d2/687474703a2f2f706b672e6a756c69616c616e672e6f72672f6261646765732f49504e6574735f302e332e737667" alt="IPNets" data-canonical-src="http://pkg.julialang.org/badges/IPNets_0.3.svg" style="max-width:100%;"></a>
<a href="http://pkg.julialang.org/?pkg=IPNets&amp;ver=0.4" rel="nofollow"><img src="https://camo.githubusercontent.com/b7a7c7d8f308b6de0b0f3ea81e3f86916ba8ddd5/687474703a2f2f706b672e6a756c69616c616e672e6f72672f6261646765732f49504e6574735f302e342e737667" alt="IPNets" data-canonical-src="http://pkg.julialang.org/badges/IPNets_0.4.svg" style="max-width:100%;"></a>
<a href="http://pkg.julialang.org/?pkg=IPNets" rel="nofollow"><img src="https://camo.githubusercontent.com/dd69265a8078ebf2b7ceaf818c7452d0f118af8e/687474703a2f2f706b672e6a756c69616c616e672e6f72672f6261646765732f49504e6574735f302e352e737667" alt="IPNets" data-canonical-src="http://pkg.julialang.org/badges/IPNets_0.5.svg" style="max-width:100%;"></a>
<a href="http://pkg.julialang.org/?pkg=IPNets" rel="nofollow"><img src="https://camo.githubusercontent.com/85b3628d01307aa7ec2aedbe7833961b37921cad/687474703a2f2f706b672e6a756c69616c616e672e6f72672f6261646765732f49504e6574735f302e362e737667" alt="IPNets" data-canonical-src="http://pkg.julialang.org/badges/IPNets_0.6.svg" style="max-width:100%;"></a></p>
<p><em>IPNets.jl</em> is a Julia package that provides IP network types. Both IPv4 and IPv6
networks can be described with <em>IPNets.jl</em> using standard, intuitive syntax.</p>
<h3><a id="user-content-main-features" class="anchor" aria-hidden="true" href="#main-features"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Main Features</h3>
<p>An important aspect of <em>IPNets.jl</em> is the ability to treat IP networks as
vectors while not actually allocating the memory required to store a full
range of addresses. Common vector operations such as membership testing and
indexing are fully supported with <code>IPNet</code> types. The following examples should
help clarify:</p>
<p><em>create a network with 24-bit netmask</em></p>
<pre><code>julia&gt; using IPNets

julia&gt; ip4 = IPv4("1.2.3.4")            # create a standard IPv4 address
ip"1.2.3.4"

julia&gt; ip4net = IPv4Net("1.2.3.0/24")
IPv4Net("1.2.3.0/24")

</code></pre>
<p><em>membership tests</em></p>
<pre><code>julia&gt; ip4 in ip4net
true
</code></pre>
<p><em>length, indexing, and iteration</em></p>
<pre><code>julia&gt; length(ip4net)
256

julia&gt; ip4net[5]
ip"1.2.3.4"

julia&gt; ip4net[4:8]
5-element Array{IPv4,1}:
 ip"1.2.3.3"
 ip"1.2.3.4"
 ip"1.2.3.5"
 ip"1.2.3.6"
 ip"1.2.3.7"

 julia&gt; [x for x in ip4net[1:4]]
4-element Array{Any,1}:
 ip"1.2.3.0"
 ip"1.2.3.1"
 ip"1.2.3.2"
 ip"1.2.3.3"

julia&gt; [x for x in ip4net][1:4]
4-element Array{Any,1}:
 ip"1.2.3.0"
 ip"1.2.3.1"
 ip"1.2.3.2"
 ip"1.2.3.3"
</code></pre>
<p><em>equality</em></p>
<pre><code>julia&gt; ip4net[5] == ip4
true
</code></pre>
<p><em>minima / maxima</em></p>
<pre><code>julia&gt; ip4net[end]
ip"1.2.3.255"

julia&gt; extrema(ip4net)
(ip"1.2.3.0",ip"1.2.3.255")
</code></pre>
<p><em>alternate construction and subset comparison</em></p>
<pre><code>julia&gt; newnet = IPv4Net("1.2.3.16", "255.255.255.240")
IPv4Net("1.2.3.16/28")

julia&gt; newnet âŠ† ip4net
true
</code></pre>
<p><em>memory usage is minimal (476 bytes to represent the entire IPv4 address space)</em></p>
<pre><code>julia&gt; @time a = IPv4Net("0.0.0.0/0")
elapsed time: 1.3325e-5 seconds (476 bytes allocated)
IPNets.IPv4Net("0.0.0.0/0")

julia&gt; size(a)
(4294967296,)
</code></pre>
<p>Though these examples use the <code>IPv4Net</code> type, the <code>IPv6Net</code> type is also available with similar behavior:</p>
<pre><code>julia&gt; IPNet("1.2.3.0/24")
IPNets.IPv4Net("1.2.3.0/24")

julia&gt; IPNet("2001:1::/64")
IPNets.IPv6Net("2001:1::/64")
</code></pre>
<h3><a id="user-content-known-issues" class="anchor" aria-hidden="true" href="#known-issues"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Known Issues</h3>
<ul>
<li>Extrema measurements for <code>IPNets</code> representing the entire IPv4 or IPv6 address
space will fail due to overrun of the native type used to describe the networks.</li>
<li>Non-contiguous subnetting for IPv4 addresses (e.g., a netmask of "255.240.255.0")
is not supported. Subnets must be able to be represented as a series of contiguous mask bits.</li>
</ul>
</article></div>