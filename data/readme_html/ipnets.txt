<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h2><a id="user-content-ipnetsjl" class="anchor" aria-hidden="true" href="#ipnetsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>IPNets.jl</h2>
<p><a href="https://github.com/JuliaWeb/IPNets.jl/actions/workflows/ci.yml"><img src="https://github.com/JuliaWeb/IPNets.jl/actions/workflows/ci.yml/badge.svg?branch=master" alt="CI" style="max-width:100%;"></a>
<a href="http://codecov.io/github/JuliaWeb/IPNets.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/16b4c94d8f804dba0e9ca2b02edfc3501ec8de8f83b64a38e58d029ff762eb51/687474703a2f2f636f6465636f762e696f2f6769746875622f4a756c69615765622f49504e6574732e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/JuliaWeb/IPNets.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
<p><em>IPNets.jl</em> is a Julia package that provides IP network types. Both IPv4 and IPv6
networks can be described with <em>IPNets.jl</em> using standard, intuitive syntax.</p>
<h3><a id="user-content-main-features" class="anchor" aria-hidden="true" href="#main-features"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Main Features</h3>
<p>An important aspect of <em>IPNets.jl</em> is the ability to treat IP networks as
collections while not actually allocating the memory required to store a full
range of addresses. Operations such as membership testing, indexing and iteration
are supported with <code>IPNet</code> types. The following examples should
help clarify.</p>
<p>Constructors:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using IPNets, Sockets

julia&gt; IPv4Net(&quot;1.2.3.0/24&quot;) # string in CIDR notation
IPv4Net(&quot;1.2.3.0/24&quot;)

julia&gt; parse(IPv4Net, &quot;1.2.3.0/24&quot;) # same as above
IPv4Net(&quot;1.2.3.0/24&quot;)

julia&gt; IPv4Net(ip&quot;1.2.3.0&quot;, 24) # IPv4 and mask as number of bits
IPv4Net(&quot;1.2.3.0/24&quot;)

julia&gt; IPv4Net(ip&quot;1.2.3.0&quot;, ip&quot;255.255.255.0&quot;) # IPv4 and mask as another IPv4
IPv4Net(&quot;1.2.3.0/24&quot;)

julia&gt; IPv4Net(&quot;1.2.3.4&quot;) # 32 bit mask default
IPv4Net(&quot;1.2.3.4/32&quot;)
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> IPNets, Sockets

julia<span class="pl-k">&gt;</span> <span class="pl-c1">IPv4Net</span>(<span class="pl-s"><span class="pl-pds">"</span>1.2.3.0/24<span class="pl-pds">"</span></span>) <span class="pl-c"><span class="pl-c">#</span> string in CIDR notation</span>
<span class="pl-c1">IPv4Net</span>(<span class="pl-s"><span class="pl-pds">"</span>1.2.3.0/24<span class="pl-pds">"</span></span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">parse</span>(IPv4Net, <span class="pl-s"><span class="pl-pds">"</span>1.2.3.0/24<span class="pl-pds">"</span></span>) <span class="pl-c"><span class="pl-c">#</span> same as above</span>
<span class="pl-c1">IPv4Net</span>(<span class="pl-s"><span class="pl-pds">"</span>1.2.3.0/24<span class="pl-pds">"</span></span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">IPv4Net</span>(<span class="pl-s"><span class="pl-pds"><span class="pl-c1">ip</span>"</span>1.2.3.0<span class="pl-pds">"</span></span>, <span class="pl-c1">24</span>) <span class="pl-c"><span class="pl-c">#</span> IPv4 and mask as number of bits</span>
<span class="pl-c1">IPv4Net</span>(<span class="pl-s"><span class="pl-pds">"</span>1.2.3.0/24<span class="pl-pds">"</span></span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">IPv4Net</span>(<span class="pl-s"><span class="pl-pds"><span class="pl-c1">ip</span>"</span>1.2.3.0<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds"><span class="pl-c1">ip</span>"</span>255.255.255.0<span class="pl-pds">"</span></span>) <span class="pl-c"><span class="pl-c">#</span> IPv4 and mask as another IPv4</span>
<span class="pl-c1">IPv4Net</span>(<span class="pl-s"><span class="pl-pds">"</span>1.2.3.0/24<span class="pl-pds">"</span></span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">IPv4Net</span>(<span class="pl-s"><span class="pl-pds">"</span>1.2.3.4<span class="pl-pds">"</span></span>) <span class="pl-c"><span class="pl-c">#</span> 32 bit mask default</span>
<span class="pl-c1">IPv4Net</span>(<span class="pl-s"><span class="pl-pds">"</span>1.2.3.4/32<span class="pl-pds">"</span></span>)</pre></div>
<p>Membership test:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; ip4net = IPv4Net(&quot;1.2.3.0/24&quot;);

julia&gt; ip&quot;1.2.3.4&quot; in ip4net
true

julia&gt; ip&quot;1.2.4.1&quot; in ip4net
false
"><pre>julia<span class="pl-k">&gt;</span> ip4net <span class="pl-k">=</span> <span class="pl-c1">IPv4Net</span>(<span class="pl-s"><span class="pl-pds">"</span>1.2.3.0/24<span class="pl-pds">"</span></span>);

julia<span class="pl-k">&gt;</span> <span class="pl-s"><span class="pl-pds"><span class="pl-c1">ip</span>"</span>1.2.3.4<span class="pl-pds">"</span></span> <span class="pl-k">in</span> ip4net
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> <span class="pl-s"><span class="pl-pds"><span class="pl-c1">ip</span>"</span>1.2.4.1<span class="pl-pds">"</span></span> <span class="pl-k">in</span> ip4net
<span class="pl-c1">false</span></pre></div>
<p>Length, indexing, and iteration:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; ip4net = IPv4Net(&quot;1.2.3.0/24&quot;);

julia&gt; length(ip4net)
256

julia&gt; ip4net[0] # index from 0 (!)
ip&quot;1.2.3.0&quot;

julia&gt; ip4net[0xff]
ip&quot;1.2.3.255&quot;

julia&gt; ip4net[4:8]
5-element Vector{IPv4}:
 ip&quot;1.2.3.4&quot;
 ip&quot;1.2.3.5&quot;
 ip&quot;1.2.3.6&quot;
 ip&quot;1.2.3.7&quot;
 ip&quot;1.2.3.8&quot;

julia&gt; for ip in ip4net
           @show ip
       end
ip = ip&quot;1.2.3.0&quot;
ip = ip&quot;1.2.3.1&quot;
[...]
ip = ip&quot;1.2.3.255&quot;
"><pre>julia<span class="pl-k">&gt;</span> ip4net <span class="pl-k">=</span> <span class="pl-c1">IPv4Net</span>(<span class="pl-s"><span class="pl-pds">"</span>1.2.3.0/24<span class="pl-pds">"</span></span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">length</span>(ip4net)
<span class="pl-c1">256</span>

julia<span class="pl-k">&gt;</span> ip4net[<span class="pl-c1">0</span>] <span class="pl-c"><span class="pl-c">#</span> index from 0 (!)</span>
<span class="pl-s"><span class="pl-pds"><span class="pl-c1">ip</span>"</span>1.2.3.0<span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> ip4net[<span class="pl-c1">0xff</span>]
<span class="pl-s"><span class="pl-pds"><span class="pl-c1">ip</span>"</span>1.2.3.255<span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> ip4net[<span class="pl-c1">4</span><span class="pl-k">:</span><span class="pl-c1">8</span>]
<span class="pl-c1">5</span><span class="pl-k">-</span>element Vector{IPv4}<span class="pl-k">:</span>
 <span class="pl-s"><span class="pl-pds"><span class="pl-c1">ip</span>"</span>1.2.3.4<span class="pl-pds">"</span></span>
 <span class="pl-s"><span class="pl-pds"><span class="pl-c1">ip</span>"</span>1.2.3.5<span class="pl-pds">"</span></span>
 <span class="pl-s"><span class="pl-pds"><span class="pl-c1">ip</span>"</span>1.2.3.6<span class="pl-pds">"</span></span>
 <span class="pl-s"><span class="pl-pds"><span class="pl-c1">ip</span>"</span>1.2.3.7<span class="pl-pds">"</span></span>
 <span class="pl-s"><span class="pl-pds"><span class="pl-c1">ip</span>"</span>1.2.3.8<span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> <span class="pl-k">for</span> ip <span class="pl-k">in</span> ip4net
           <span class="pl-c1">@show</span> ip
       <span class="pl-k">end</span>
ip <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds"><span class="pl-c1">ip</span>"</span>1.2.3.0<span class="pl-pds">"</span></span>
ip <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds"><span class="pl-c1">ip</span>"</span>1.2.3.1<span class="pl-pds">"</span></span>
[<span class="pl-k">...</span>]
ip <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds"><span class="pl-c1">ip</span>"</span>1.2.3.255<span class="pl-pds">"</span></span></pre></div>
<p>Though these examples use the <code>IPv4Net</code> type, the <code>IPv6Net</code> type is also available with similar behavior:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; IPv6Net(&quot;1:2::/64&quot;) # string in CIDR notation
IPv6Net(&quot;1:2::/64&quot;)

julia&gt; parse(IPv6Net, &quot;1:2::/64&quot;) # same as above
IPv6Net(&quot;1:2::/64&quot;)

julia&gt; IPv6Net(ip&quot;1:2::&quot;, 64) # IPv6 and prefix
IPv6Net(&quot;1:2::/64&quot;)

julia&gt; IPv6Net(&quot;1:2::3:4&quot;) # 128 bit mask default
IPv6Net(&quot;1:2::3:4/128&quot;)
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">IPv6Net</span>(<span class="pl-s"><span class="pl-pds">"</span>1:2::/64<span class="pl-pds">"</span></span>) <span class="pl-c"><span class="pl-c">#</span> string in CIDR notation</span>
<span class="pl-c1">IPv6Net</span>(<span class="pl-s"><span class="pl-pds">"</span>1:2::/64<span class="pl-pds">"</span></span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">parse</span>(IPv6Net, <span class="pl-s"><span class="pl-pds">"</span>1:2::/64<span class="pl-pds">"</span></span>) <span class="pl-c"><span class="pl-c">#</span> same as above</span>
<span class="pl-c1">IPv6Net</span>(<span class="pl-s"><span class="pl-pds">"</span>1:2::/64<span class="pl-pds">"</span></span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">IPv6Net</span>(<span class="pl-s"><span class="pl-pds"><span class="pl-c1">ip</span>"</span>1:2::<span class="pl-pds">"</span></span>, <span class="pl-c1">64</span>) <span class="pl-c"><span class="pl-c">#</span> IPv6 and prefix</span>
<span class="pl-c1">IPv6Net</span>(<span class="pl-s"><span class="pl-pds">"</span>1:2::/64<span class="pl-pds">"</span></span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">IPv6Net</span>(<span class="pl-s"><span class="pl-pds">"</span>1:2::3:4<span class="pl-pds">"</span></span>) <span class="pl-c"><span class="pl-c">#</span> 128 bit mask default</span>
<span class="pl-c1">IPv6Net</span>(<span class="pl-s"><span class="pl-pds">"</span>1:2::3:4/128<span class="pl-pds">"</span></span>)</pre></div>
<p>For unknown (string) input use the <code>IPNet</code> supertype constructor (or <code>parse</code>):</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; IPNet(&quot;1.2.3.0/24&quot;)
IPv4Net(&quot;1.2.3.0/24&quot;)

julia&gt; parse(IPNet, &quot;1.2.3.4&quot;)
IPv4Net(&quot;1.2.3.4/32&quot;)

julia&gt; IPNet(&quot;1:2::3:4&quot;)
IPv6Net(&quot;1:2::3:4/128&quot;)

julia&gt; parse(IPNet, &quot;1:2::/64&quot;)
IPv6Net(&quot;1:2::/64&quot;)
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">IPNet</span>(<span class="pl-s"><span class="pl-pds">"</span>1.2.3.0/24<span class="pl-pds">"</span></span>)
<span class="pl-c1">IPv4Net</span>(<span class="pl-s"><span class="pl-pds">"</span>1.2.3.0/24<span class="pl-pds">"</span></span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">parse</span>(IPNet, <span class="pl-s"><span class="pl-pds">"</span>1.2.3.4<span class="pl-pds">"</span></span>)
<span class="pl-c1">IPv4Net</span>(<span class="pl-s"><span class="pl-pds">"</span>1.2.3.4/32<span class="pl-pds">"</span></span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">IPNet</span>(<span class="pl-s"><span class="pl-pds">"</span>1:2::3:4<span class="pl-pds">"</span></span>)
<span class="pl-c1">IPv6Net</span>(<span class="pl-s"><span class="pl-pds">"</span>1:2::3:4/128<span class="pl-pds">"</span></span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">parse</span>(IPNet, <span class="pl-s"><span class="pl-pds">"</span>1:2::/64<span class="pl-pds">"</span></span>)
<span class="pl-c1">IPv6Net</span>(<span class="pl-s"><span class="pl-pds">"</span>1:2::/64<span class="pl-pds">"</span></span>)</pre></div>
<h3><a id="user-content-limitations" class="anchor" aria-hidden="true" href="#limitations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Limitations</h3>
<ul>
<li>Non-contiguous subnetting for IPv4 addresses (e.g., a netmask of "255.240.255.0")
is not supported. Subnets must be able to be represented as a series of contiguous mask bits.</li>
</ul>
</article></div>