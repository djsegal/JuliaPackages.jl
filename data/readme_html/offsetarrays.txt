<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-offsetarraysjl" class="anchor" aria-hidden="true" href="#offsetarraysjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>OffsetArrays.jl</h1>
<p><a href="https://github.com/JuliaArrays/OffsetArrays.jl/actions"><img src="https://github.com/JuliaArrays/OffsetArrays.jl/workflows/Unit%20test/badge.svg" alt="" style="max-width:100%;"></a>
<a href="https://juliaci.github.io/NanosoldierReports/pkgeval_badges/report.html" rel="nofollow"><img src="https://camo.githubusercontent.com/b35ecd4239cf700f6458f64ce5b6cdc1a699367cb7a023f7fcfa7a4ef28df823/68747470733a2f2f6a756c696163692e6769746875622e696f2f4e616e6f736f6c646965725265706f7274732f706b676576616c5f6261646765732f4f2f4f66667365744172726179732e737667" alt="" data-canonical-src="https://juliaci.github.io/NanosoldierReports/pkgeval_badges/O/OffsetArrays.svg" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/JuliaArrays/OffsetArrays.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/31ebfae311d946af606738cd9871f1ad67ab0e31601c46018c10343cdbd35eda/68747470733a2f2f636f6465636f762e696f2f6769746875622f4a756c69614172726179732f4f66667365744172726179732e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="" data-canonical-src="https://codecov.io/github/JuliaArrays/OffsetArrays.jl/coverage.svg?branch=master" style="max-width:100%;"></a>
<a href="https://juliaarrays.github.io/OffsetArrays.jl/stable/" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://juliaarrays.github.io/OffsetArrays.jl/dev/" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a></p>
<p>OffsetArrays provides Julia users with arrays that have arbitrary
indices, similar to those found in some other programming languages
like Fortran.</p>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<p>You can construct such arrays as follows:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="OA = OffsetArray(A, axis1, axis2, ...)
"><pre>OA <span class="pl-k">=</span> <span class="pl-c1">OffsetArray</span>(A, axis1, axis2, <span class="pl-k">...</span>)</pre></div>
<p>where you want <code>OA</code> to have axes <code>(axis1, axis2, ...)</code> and be indexed by values that
fall within these axis ranges. Example:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using OffsetArrays
julia&gt; A = Float64.(reshape(1:15, 3, 5))
3×5 Matrix{Float64}:
 1.0  4.0  7.0  10.0  13.0
 2.0  5.0  8.0  11.0  14.0
 3.0  6.0  9.0  12.0  15.0

julia&gt; OA = OffsetArray(A, -1:1, 0:4) # OA will have axes (-1:1, 0:4)
3×5 OffsetArray(::Matrix{Float64}, -1:1, 0:4) with eltype Float64 with indices -1:1×0:4:
 1.0  4.0  7.0  10.0  13.0
 2.0  5.0  8.0  11.0  14.0
 3.0  6.0  9.0  12.0  15.0

julia&gt; OA = OffsetArray(A, CartesianIndex(-1, 0):CartesianIndex(1, 4))
3×5 OffsetArray(::Matrix{Float64}, -1:1, 0:4) with eltype Float64 with indices -1:1×0:4:
[...]

julia&gt; OA[-1,0], OA[1,4]
(1.0, 15.0)
"><pre><span class="pl-k">using</span> OffsetArrays
julia<span class="pl-k">&gt;</span> A <span class="pl-k">=</span> <span class="pl-c1">Float64</span>.(<span class="pl-c1">reshape</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">15</span>, <span class="pl-c1">3</span>, <span class="pl-c1">5</span>))
<span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">5</span> Matrix{Float64}<span class="pl-k">:</span>
 <span class="pl-c1">1.0</span>  <span class="pl-c1">4.0</span>  <span class="pl-c1">7.0</span>  <span class="pl-c1">10.0</span>  <span class="pl-c1">13.0</span>
 <span class="pl-c1">2.0</span>  <span class="pl-c1">5.0</span>  <span class="pl-c1">8.0</span>  <span class="pl-c1">11.0</span>  <span class="pl-c1">14.0</span>
 <span class="pl-c1">3.0</span>  <span class="pl-c1">6.0</span>  <span class="pl-c1">9.0</span>  <span class="pl-c1">12.0</span>  <span class="pl-c1">15.0</span>

julia<span class="pl-k">&gt;</span> OA <span class="pl-k">=</span> <span class="pl-c1">OffsetArray</span>(A, <span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">1</span>, <span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">4</span>) <span class="pl-c"><span class="pl-c">#</span> OA will have axes (-1:1, 0:4)</span>
<span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">5</span> <span class="pl-c1">OffsetArray</span>(<span class="pl-k">::</span><span class="pl-c1">Matrix{Float64}</span>, <span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">1</span>, <span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">4</span>) with eltype Float64 with indices <span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">1</span><span class="pl-k">×</span><span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">4</span><span class="pl-k">:</span>
 <span class="pl-c1">1.0</span>  <span class="pl-c1">4.0</span>  <span class="pl-c1">7.0</span>  <span class="pl-c1">10.0</span>  <span class="pl-c1">13.0</span>
 <span class="pl-c1">2.0</span>  <span class="pl-c1">5.0</span>  <span class="pl-c1">8.0</span>  <span class="pl-c1">11.0</span>  <span class="pl-c1">14.0</span>
 <span class="pl-c1">3.0</span>  <span class="pl-c1">6.0</span>  <span class="pl-c1">9.0</span>  <span class="pl-c1">12.0</span>  <span class="pl-c1">15.0</span>

julia<span class="pl-k">&gt;</span> OA <span class="pl-k">=</span> <span class="pl-c1">OffsetArray</span>(A, <span class="pl-c1">CartesianIndex</span>(<span class="pl-k">-</span><span class="pl-c1">1</span>, <span class="pl-c1">0</span>)<span class="pl-k">:</span><span class="pl-c1">CartesianIndex</span>(<span class="pl-c1">1</span>, <span class="pl-c1">4</span>))
<span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">5</span> <span class="pl-c1">OffsetArray</span>(<span class="pl-k">::</span><span class="pl-c1">Matrix{Float64}</span>, <span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">1</span>, <span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">4</span>) with eltype Float64 with indices <span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">1</span><span class="pl-k">×</span><span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">4</span><span class="pl-k">:</span>
[<span class="pl-k">...</span>]

julia<span class="pl-k">&gt;</span> OA[<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">0</span>], OA[<span class="pl-c1">1</span>,<span class="pl-c1">4</span>]
(<span class="pl-c1">1.0</span>, <span class="pl-c1">15.0</span>)</pre></div>

</article></div>