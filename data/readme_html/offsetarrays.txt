<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-offsetarraysjl" class="anchor" aria-hidden="true" href="#offsetarraysjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>OffsetArrays.jl</h1>
<table>
<thead>
<tr>
<th align="center">Documentation</th>
<th align="center">Build Status</th>
<th align="center">Code coverage</th>
<th align="center">Version</th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><a href="https://juliaarrays.github.io/OffsetArrays.jl/stable/" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a></td>
<td align="center"><a href="https://github.com/JuliaArrays/OffsetArrays.jl/actions"><img src="https://github.com/JuliaArrays/OffsetArrays.jl/workflows/Unit%20test/badge.svg" alt="" style="max-width: 100%;"></a></td>
<td align="center"><a href="https://codecov.io/gh/JuliaArrays/OffsetArrays.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/31ebfae311d946af606738cd9871f1ad67ab0e31601c46018c10343cdbd35eda/68747470733a2f2f636f6465636f762e696f2f6769746875622f4a756c69614172726179732f4f66667365744172726179732e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="" data-canonical-src="https://codecov.io/github/JuliaArrays/OffsetArrays.jl/coverage.svg?branch=master" style="max-width: 100%;"></a></td>
<td align="center"><a href="https://juliahub.com/ui/Packages/OffsetArrays/UDEDl" rel="nofollow"><img src="https://camo.githubusercontent.com/b7d5db6941315affbdfa671e5645040279376432ed59fb6f23b09527b344add2/68747470733a2f2f6a756c69616875622e636f6d2f646f63732f4f66667365744172726179732f76657273696f6e2e737667" alt="" data-canonical-src="https://juliahub.com/docs/OffsetArrays/version.svg" style="max-width: 100%;"></a></td>
</tr>
<tr>
<td align="center"><a href="https://juliaarrays.github.io/OffsetArrays.jl/dev/" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a></td>
<td align="center"><a href="https://juliaci.github.io/NanosoldierReports/pkgeval_badges/report.html" rel="nofollow"><img src="https://camo.githubusercontent.com/b35ecd4239cf700f6458f64ce5b6cdc1a699367cb7a023f7fcfa7a4ef28df823/68747470733a2f2f6a756c696163692e6769746875622e696f2f4e616e6f736f6c646965725265706f7274732f706b676576616c5f6261646765732f4f2f4f66667365744172726179732e737667" alt="" data-canonical-src="https://juliaci.github.io/NanosoldierReports/pkgeval_badges/O/OffsetArrays.svg" style="max-width: 100%;"></a></td>
<td align="center"></td>
<td align="center"><a href="https://juliahub.com/ui/Packages/OffsetArrays/UDEDl" rel="nofollow"><img src="https://camo.githubusercontent.com/fa17d0be23b250ff906fbe3e405e6b57eb656a464be7741441bf53e9920643b8/68747470733a2f2f6a756c69616875622e636f6d2f646f63732f4f66667365744172726179732f646570732e737667" alt="" data-canonical-src="https://juliahub.com/docs/OffsetArrays/deps.svg" style="max-width: 100%;"></a></td>
</tr>
</tbody>
</table>
<h2 dir="auto"><a id="user-content-introduction" class="anchor" aria-hidden="true" href="#introduction"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Introduction</h2>
<p dir="auto">OffsetArrays provides Julia users with arrays that have arbitrary
indices, similar to those found in some other programming languages
like Fortran.</p>
<p dir="auto">An <code>OffsetArray</code> is a lightweight wrapper around an <code>AbstractArray</code> that shifts its indices.
Generally, indexing into an <code>OffsetArray</code> should be as performant as the parent array.</p>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<p dir="auto">There are two ways to construct <code>OffsetArray</code>s: by specifying the axes of the array, or
by specifying its origin.</p>
<p dir="auto">The first way to construct an <code>OffsetArray</code> by specifying its axes is:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="OA = OffsetArray(A, axis1, axis2, ...)"><pre>OA <span class="pl-k">=</span> <span class="pl-c1">OffsetArray</span>(A, axis1, axis2, <span class="pl-k">...</span>)</pre></div>
<p dir="auto">where you want <code>OA</code> to have axes <code>(axis1, axis2, ...)</code> and be indexed by values that
fall within these axis ranges. Example:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using OffsetArrays

julia&gt; A = Float64.(reshape(1:15, 3, 5))
3×5 Matrix{Float64}:
 1.0  4.0  7.0  10.0  13.0
 2.0  5.0  8.0  11.0  14.0
 3.0  6.0  9.0  12.0  15.0

julia&gt; axes(A) # indices of a Matrix start from 1 along each axis
(Base.OneTo(3), Base.OneTo(5))

julia&gt; OA = OffsetArray(A, -1:1, 0:4) # OA will have the axes (-1:1, 0:4)
3×5 OffsetArray(::Matrix{Float64}, -1:1, 0:4) with eltype Float64 with indices -1:1×0:4:
 1.0  4.0  7.0  10.0  13.0
 2.0  5.0  8.0  11.0  14.0
 3.0  6.0  9.0  12.0  15.0

julia&gt; OA[-1, 0]
1.0

julia&gt; OA[1, 4]
15.0"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> OffsetArrays

julia<span class="pl-k">&gt;</span> A <span class="pl-k">=</span> <span class="pl-c1">Float64</span>.(<span class="pl-c1">reshape</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">15</span>, <span class="pl-c1">3</span>, <span class="pl-c1">5</span>))
<span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">5</span> Matrix{Float64}<span class="pl-k">:</span>
 <span class="pl-c1">1.0</span>  <span class="pl-c1">4.0</span>  <span class="pl-c1">7.0</span>  <span class="pl-c1">10.0</span>  <span class="pl-c1">13.0</span>
 <span class="pl-c1">2.0</span>  <span class="pl-c1">5.0</span>  <span class="pl-c1">8.0</span>  <span class="pl-c1">11.0</span>  <span class="pl-c1">14.0</span>
 <span class="pl-c1">3.0</span>  <span class="pl-c1">6.0</span>  <span class="pl-c1">9.0</span>  <span class="pl-c1">12.0</span>  <span class="pl-c1">15.0</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">axes</span>(A) <span class="pl-c"><span class="pl-c">#</span> indices of a Matrix start from 1 along each axis</span>
(Base<span class="pl-k">.</span><span class="pl-c1">OneTo</span>(<span class="pl-c1">3</span>), Base<span class="pl-k">.</span><span class="pl-c1">OneTo</span>(<span class="pl-c1">5</span>))

julia<span class="pl-k">&gt;</span> OA <span class="pl-k">=</span> <span class="pl-c1">OffsetArray</span>(A, <span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">1</span>, <span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">4</span>) <span class="pl-c"><span class="pl-c">#</span> OA will have the axes (-1:1, 0:4)</span>
<span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">5</span> <span class="pl-c1">OffsetArray</span>(<span class="pl-k">::</span><span class="pl-c1">Matrix{Float64}</span>, <span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">1</span>, <span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">4</span>) with eltype Float64 with indices <span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">1</span><span class="pl-k">×</span><span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">4</span><span class="pl-k">:</span>
 <span class="pl-c1">1.0</span>  <span class="pl-c1">4.0</span>  <span class="pl-c1">7.0</span>  <span class="pl-c1">10.0</span>  <span class="pl-c1">13.0</span>
 <span class="pl-c1">2.0</span>  <span class="pl-c1">5.0</span>  <span class="pl-c1">8.0</span>  <span class="pl-c1">11.0</span>  <span class="pl-c1">14.0</span>
 <span class="pl-c1">3.0</span>  <span class="pl-c1">6.0</span>  <span class="pl-c1">9.0</span>  <span class="pl-c1">12.0</span>  <span class="pl-c1">15.0</span>

julia<span class="pl-k">&gt;</span> OA[<span class="pl-k">-</span><span class="pl-c1">1</span>, <span class="pl-c1">0</span>]
<span class="pl-c1">1.0</span>

julia<span class="pl-k">&gt;</span> OA[<span class="pl-c1">1</span>, <span class="pl-c1">4</span>]
<span class="pl-c1">15.0</span></pre></div>
<p dir="auto">The second way to construct an <code>OffsetArray</code> is by specifying the origin, that is, the first index
along each axis. This is particularly useful if one wants, eg., arrays that are 0-indexed as opposed
to 1-indexed.</p>
<p dir="auto">A convenient way to construct an <code>OffsetArray</code> this way is by using <code>OffsetArrays.Origin</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using OffsetArrays: Origin

julia&gt; Origin(0)(A) # indices begin at 0 along all axes
3×5 OffsetArray(::Matrix{Float64}, 0:2, 0:4) with eltype Float64 with indices 0:2×0:4:
 1.0  4.0  7.0  10.0  13.0
 2.0  5.0  8.0  11.0  14.0
 3.0  6.0  9.0  12.0  15.0

julia&gt; Origin(2, 3)(A) # indices begin at 2 along the first axis and 3 along the second
3×5 OffsetArray(::Matrix{Float64}, 2:4, 3:7) with eltype Float64 with indices 2:4×3:7:
 1.0  4.0  7.0  10.0  13.0
 2.0  5.0  8.0  11.0  14.0
 3.0  6.0  9.0  12.0  15.0"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> OffsetArrays<span class="pl-k">:</span> Origin

julia<span class="pl-k">&gt;</span> <span class="pl-c1">Origin</span>(<span class="pl-c1">0</span>)(A) <span class="pl-c"><span class="pl-c">#</span> indices begin at 0 along all axes</span>
<span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">5</span> <span class="pl-c1">OffsetArray</span>(<span class="pl-k">::</span><span class="pl-c1">Matrix{Float64}</span>, <span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">2</span>, <span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">4</span>) with eltype Float64 with indices <span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">4</span><span class="pl-k">:</span>
 <span class="pl-c1">1.0</span>  <span class="pl-c1">4.0</span>  <span class="pl-c1">7.0</span>  <span class="pl-c1">10.0</span>  <span class="pl-c1">13.0</span>
 <span class="pl-c1">2.0</span>  <span class="pl-c1">5.0</span>  <span class="pl-c1">8.0</span>  <span class="pl-c1">11.0</span>  <span class="pl-c1">14.0</span>
 <span class="pl-c1">3.0</span>  <span class="pl-c1">6.0</span>  <span class="pl-c1">9.0</span>  <span class="pl-c1">12.0</span>  <span class="pl-c1">15.0</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">Origin</span>(<span class="pl-c1">2</span>, <span class="pl-c1">3</span>)(A) <span class="pl-c"><span class="pl-c">#</span> indices begin at 2 along the first axis and 3 along the second</span>
<span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">5</span> <span class="pl-c1">OffsetArray</span>(<span class="pl-k">::</span><span class="pl-c1">Matrix{Float64}</span>, <span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">4</span>, <span class="pl-c1">3</span><span class="pl-k">:</span><span class="pl-c1">7</span>) with eltype Float64 with indices <span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">4</span><span class="pl-k">×</span><span class="pl-c1">3</span><span class="pl-k">:</span><span class="pl-c1">7</span><span class="pl-k">:</span>
 <span class="pl-c1">1.0</span>  <span class="pl-c1">4.0</span>  <span class="pl-c1">7.0</span>  <span class="pl-c1">10.0</span>  <span class="pl-c1">13.0</span>
 <span class="pl-c1">2.0</span>  <span class="pl-c1">5.0</span>  <span class="pl-c1">8.0</span>  <span class="pl-c1">11.0</span>  <span class="pl-c1">14.0</span>
 <span class="pl-c1">3.0</span>  <span class="pl-c1">6.0</span>  <span class="pl-c1">9.0</span>  <span class="pl-c1">12.0</span>  <span class="pl-c1">15.0</span></pre></div>
<p dir="auto">While the examples here refer to the common case where the parent arrays have indices starting at 1,
this is not necessary. An <code>OffsetArray</code> may wrap any array that has integer indices, irrespective of
where the indices begin.</p>
<h2 dir="auto"><a id="user-content-how-to-go-back-to-1-indexed-arrays" class="anchor" aria-hidden="true" href="#how-to-go-back-to-1-indexed-arrays"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>How to go back to 1-indexed arrays</h2>
<p dir="auto">Certain libraries, such as <code>LinearAlgebra</code>, require arrays to be indexed from 1. Passing an <code>OffsetArray</code>
with shifted indices would lead to an error here.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; A = Float64.(reshape(1:16, 4, 4));

julia&gt; AO = Origin(0)(A);

julia&gt; using LinearAlgebra

julia&gt; Diagonal(AO)
ERROR: ArgumentError: offset arrays are not supported but got an array with index other than 1"><pre>julia<span class="pl-k">&gt;</span> A <span class="pl-k">=</span> <span class="pl-c1">Float64</span>.(<span class="pl-c1">reshape</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">16</span>, <span class="pl-c1">4</span>, <span class="pl-c1">4</span>));

julia<span class="pl-k">&gt;</span> AO <span class="pl-k">=</span> <span class="pl-c1">Origin</span>(<span class="pl-c1">0</span>)(A);

julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> LinearAlgebra

julia<span class="pl-k">&gt;</span> <span class="pl-c1">Diagonal</span>(AO)
ERROR<span class="pl-k">:</span> ArgumentError<span class="pl-k">:</span> offset arrays are not supported but got an array with index other than <span class="pl-c1">1</span></pre></div>
<p dir="auto">The way to obtain a <code>1</code>-indexed array from an <code>OffsetArray</code> is by using <code>OffsetArrays.no_offset_view</code>.</p>
<p dir="auto">An example of this is:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; OffsetArrays.no_offset_view(AO)
4×4 Matrix{Float64}:
 1.0  5.0   9.0  13.0
 2.0  6.0  10.0  14.0
 3.0  7.0  11.0  15.0
 4.0  8.0  12.0  16.0"><pre>julia<span class="pl-k">&gt;</span> OffsetArrays<span class="pl-k">.</span><span class="pl-c1">no_offset_view</span>(AO)
<span class="pl-c1">4</span><span class="pl-k">×</span><span class="pl-c1">4</span> Matrix{Float64}<span class="pl-k">:</span>
 <span class="pl-c1">1.0</span>  <span class="pl-c1">5.0</span>   <span class="pl-c1">9.0</span>  <span class="pl-c1">13.0</span>
 <span class="pl-c1">2.0</span>  <span class="pl-c1">6.0</span>  <span class="pl-c1">10.0</span>  <span class="pl-c1">14.0</span>
 <span class="pl-c1">3.0</span>  <span class="pl-c1">7.0</span>  <span class="pl-c1">11.0</span>  <span class="pl-c1">15.0</span>
 <span class="pl-c1">4.0</span>  <span class="pl-c1">8.0</span>  <span class="pl-c1">12.0</span>  <span class="pl-c1">16.0</span></pre></div>
<p dir="auto">This may now be passed to <code>LinearAlgebra</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; D = Diagonal(OffsetArrays.no_offset_view(AO))
4×4 Diagonal{Float64, Vector{Float64}}:
 1.0   ⋅     ⋅     ⋅
  ⋅   6.0    ⋅     ⋅
  ⋅    ⋅   11.0    ⋅
  ⋅    ⋅     ⋅   16.0"><pre>julia<span class="pl-k">&gt;</span> D <span class="pl-k">=</span> <span class="pl-c1">Diagonal</span>(OffsetArrays<span class="pl-k">.</span><span class="pl-c1">no_offset_view</span>(AO))
<span class="pl-c1">4</span><span class="pl-k">×</span><span class="pl-c1">4</span> Diagonal{Float64, Vector{Float64}}<span class="pl-k">:</span>
 <span class="pl-c1">1.0</span>   <span class="pl-k">⋅</span>     <span class="pl-k">⋅</span>     <span class="pl-k">⋅</span>
  <span class="pl-k">⋅</span>   <span class="pl-c1">6.0</span>    <span class="pl-k">⋅</span>     <span class="pl-k">⋅</span>
  <span class="pl-k">⋅</span>    <span class="pl-k">⋅</span>   <span class="pl-c1">11.0</span>    <span class="pl-k">⋅</span>
  <span class="pl-k">⋅</span>    <span class="pl-k">⋅</span>     <span class="pl-k">⋅</span>   <span class="pl-c1">16.0</span></pre></div>
<p dir="auto">If we want to restore the original indices of <code>AO</code>, we may wrap an <code>OffsetArray</code> around the <code>Diagonal</code> as:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; Origin(AO)(D)
4×4 OffsetArray(::Diagonal{Float64, Vector{Float64}}, 0:3, 0:3) with eltype Float64 with indices 0:3×0:3:
 1.0   ⋅     ⋅     ⋅
  ⋅   6.0    ⋅     ⋅
  ⋅    ⋅   11.0    ⋅
  ⋅    ⋅     ⋅   16.0"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">Origin</span>(AO)(D)
<span class="pl-c1">4</span><span class="pl-k">×</span><span class="pl-c1">4</span> <span class="pl-c1">OffsetArray</span>(<span class="pl-k">::</span><span class="pl-c1">Diagonal{Float64, Vector{Float64}}</span>, <span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">3</span>, <span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">3</span>) with eltype Float64 with indices <span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">3</span><span class="pl-k">:</span>
 <span class="pl-c1">1.0</span>   <span class="pl-k">⋅</span>     <span class="pl-k">⋅</span>     <span class="pl-k">⋅</span>
  <span class="pl-k">⋅</span>   <span class="pl-c1">6.0</span>    <span class="pl-k">⋅</span>     <span class="pl-k">⋅</span>
  <span class="pl-k">⋅</span>    <span class="pl-k">⋅</span>   <span class="pl-c1">11.0</span>    <span class="pl-k">⋅</span>
  <span class="pl-k">⋅</span>    <span class="pl-k">⋅</span>     <span class="pl-k">⋅</span>   <span class="pl-c1">16.0</span></pre></div>
<p dir="auto">Here, <code>Origin(AO)</code> is able to automatically infer and use the indices of <code>AO</code>.</p>
<h2 dir="auto"><a id="user-content-best-practice-on-adopting-offsetarrays" class="anchor" aria-hidden="true" href="#best-practice-on-adopting-offsetarrays"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Best practice on adopting OffsetArrays</h2>
<p dir="auto">For some applications, OffsetArrays give users an easy-to-understand interface. However, handling
the non-conventional axes of OffsetArrays requires extra care. Otherwise, the code might
error, crash, or return incorrect results. You can read <a href="https://docs.julialang.org/en/v1/devdocs/offset-arrays/" rel="nofollow">the Julialang documentation on
offset</a> for more information. Here
we briefly summarize some of the best practices for users and package authors.</p>
<h3 dir="auto"><a id="user-content-there-is-no-need-to-support-offsetarrays-for-every-function" class="anchor" aria-hidden="true" href="#there-is-no-need-to-support-offsetarrays-for-every-function"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>There is no need to support OffsetArrays for every function</h3>
<p dir="auto">You don't need to support offset arrays for <em>internal functions</em> that only consume standard 1-based
arrays -- it doesn't change or improve anything.</p>
<p dir="auto">You don't need to support offset arrays for functions that <em>have no well-defined behavior on custom
axes</em>. For instance, many linear algebra functions such as matrix multiplication <code>A * B</code> does not
have an agreed behavior for offset arrays. In this case, it is a better practice to let users do the
conversion.</p>
<p dir="auto">The helper function <code>Base.require_one_based_indexing</code> can be used to early check the axes and throw
a meaningful error. If your interface functions do not intend to support offset arrays, we recommend
you add this check before starting the real computation.</p>
<h3 dir="auto"><a id="user-content-use-axes-instead-of-sizelength" class="anchor" aria-hidden="true" href="#use-axes-instead-of-sizelength"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>use <code>axes</code> instead of <code>size</code>/<code>length</code></h3>
<p dir="auto">Many implementations assume the array axes start at 1 by writing loops such as <code>for i in 1:length(x)</code> or <code>for i in 1:size(x, 1)</code>. A better practice is to use <code>for i in eachindex(x)</code> or <code>for i in axes(x, 1)</code> -- <code>axes</code> provides more information than <code>size</code> with no performance overhead.</p>
<p dir="auto">Also, if you know what indices type you want to use, <a href="https://docs.julialang.org/en/v1/base/arrays/#Base.LinearIndices" rel="nofollow"><code>LinearIndices</code></a> and
<a href="https://docs.julialang.org/en/v1/base/arrays/#Base.IteratorsMD.CartesianIndices" rel="nofollow"><code>CartesianIndices</code></a> allow you to loop multidimensional arrays efficiently
without worrying about the axes.</p>
<h3 dir="auto"><a id="user-content-test-against-offsetarrays" class="anchor" aria-hidden="true" href="#test-against-offsetarrays"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>test against OffsetArrays</h3>
<p dir="auto">For package authors that declare support for <code>AbstractArray</code>, we recommend having a few test cases
against <code>OffsetArray</code> to ensure the function works well for arrays with custom axes. This gives you
more confidence that users don't run into strange situations.</p>
<p dir="auto">For package users that want to use offset arrays, many numerical correctness issues come from the
fact that <code>@inbounds</code> is used inappropriately with the 1-based indexing assumption. Thus for debug
purposes, it is not a bad idea to start Julia with <code>--check-bounds=yes</code>, which turns all <code>@inbounds</code>
into a no-op and uncover potential out-of-bound errors.</p>

</article></div>