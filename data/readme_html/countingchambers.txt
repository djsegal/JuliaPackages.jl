<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-countingchambers" class="anchor" aria-hidden="true" href="#countingchambers"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>CountingChambers</h1>
<p dir="auto"><code>julia</code> package for counting chambers of hyperplane arrangements</p>
<p dir="auto">This package counts chambers of a hyperplane arrangement by computing its characteristic polynomial, or equivalently, its Betti numbers.
It performs this computation via a modified deletion-restriction algorithm which takes advantage of the arrangement's symmetries, as detailed in the preprint <a href="https://arxiv.org/abs/2105.14542" rel="nofollow">Enumerating chambers of hyperplane arrangements with symmetry</a>.</p>
<p dir="auto">Further examples and explanation can be found <a href="https://mathrepo.mis.mpg.de/CountingChambers/index.html" rel="nofollow">here</a> where you can also try the code via <code>binder</code> without installing <code>julia</code>.</p>
<h2 dir="auto"><a id="user-content-getting-started" class="anchor" aria-hidden="true" href="#getting-started"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Getting started</h2>
<p dir="auto">Our package can be loaded (after starting <code>julia</code>) by</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="]add CountingChambers
using CountingChambers"><pre class="notranslate"><code>]add CountingChambers
using CountingChambers
</code></pre></div>
<p dir="auto">or</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="using Pkg; Pkg.add(&quot;CountingChambers&quot;)
using CountingChambers"><pre class="notranslate"><code>using Pkg; Pkg.add("CountingChambers")
using CountingChambers
</code></pre></div>
<p dir="auto">or</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="]add https://github.com/tbrysiewicz/CountingChambers
using CountingChambers"><pre class="notranslate"><code>]add https://github.com/tbrysiewicz/CountingChambers
using CountingChambers
</code></pre></div>
<p dir="auto">Our main dependencies are the <code>julia</code> packages for <a href="https://github.com/oscar-system/GAP.jl">GAP</a>, <a href="https://github.com/Nemocas/Nemo.jl">Nemo</a>, and <a href="https://github.com/thofma/Hecke.jl">Hecke</a>.</p>
<h2 dir="auto"><a id="user-content-basic-functionality" class="anchor" aria-hidden="true" href="#basic-functionality"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Basic functionality</h2>
<h3 dir="auto"><a id="user-content-inputting-arrangements" class="anchor" aria-hidden="true" href="#inputting-arrangements"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Inputting arrangements</h3>
<p dir="auto">Hyperplane arrangements may be defined over the integers, rationals, or an algebraic extension of the rationals.</p>
<p dir="auto">When the arrangement <strong>A</strong> of <strong>n</strong> hyperplanes in <strong>d</strong> dimensional space is central (all hyperplanes go through the origin), it is represented as a <strong>d</strong> by <strong>n</strong> matrix whose columns are the normal vectors of those hyperplanes. These matrices may have entries which are <code>julia</code> integers, or alternatively, in any number field from <code>Hecke/Nemo</code>.</p>
<p dir="auto">For non-central arrangements, the input to our functions require a vector <strong>c</strong> of constants for which the <strong>n</strong> equalities encoded as <strong>xA=c</strong> represent the hyperplanes. For example,</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="A = [-1 1 1 0; 1 0 1 1] # The four columns of A represent the normal vectors of the arrangement.
c = [1, 0, 1, 0] # To deal with non-central arrangements, constant terms can be given.
number_of_chambers(A; ConstantTerms=c)
   10"><pre class="notranslate"><code>A = [-1 1 1 0; 1 0 1 1] # The four columns of A represent the normal vectors of the arrangement.
c = [1, 0, 1, 0] # To deal with non-central arrangements, constant terms can be given.
number_of_chambers(A; ConstantTerms=c)
   10
</code></pre></div>
<p dir="auto">outputs <strong>10</strong> as the number of chambers of the arrangement <strong>xA=c</strong> of 4 hyperplanes in 2-dimensional space.</p>
<h3 dir="auto"><a id="user-content-inputting-symmetry-groups" class="anchor" aria-hidden="true" href="#inputting-symmetry-groups"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Inputting symmetry groups</h3>
<p dir="auto">To input a symmetry group of an arrangement, as a subgroup of the symmetric group on <strong>n</strong> elements, one provides a collection of permutations which generate it. These permutations may be written in one line notation or alternatively, a <code>GAP</code> permutation group may be provided.</p>
<p dir="auto">In the above example, the symmetry group consists of permuting the first three columns and is generated by the permutations <strong>[2,3,1,4]</strong> and <strong>[2,1,3,4]</strong>. This information can be inputed as follows to allow the algorithm to take advantage of these symmetries.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="G =  [[2,3,1,4],[2,1,3,4]]
betti_numbers(A; ConstantTerms=c, SymmetryGroup=G)
   [1, 4, 5]"><pre class="notranslate"><code>G =  [[2,3,1,4],[2,1,3,4]]
betti_numbers(A; ConstantTerms=c, SymmetryGroup=G)
   [1, 4, 5]
</code></pre></div>
<h3 dir="auto"><a id="user-content-multiple-threads" class="anchor" aria-hidden="true" href="#multiple-threads"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Multiple threads</h3>
<p dir="auto">After calling <code>julia</code> with multiple threads via</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia --threads 4"><pre class="notranslate"><code>julia --threads 4
</code></pre></div>
<p dir="auto">one may also call our functions with the optional argument <code>multi_threaded=true</code> to execute the code in parallel.</p>
<h2 dir="auto"><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Examples</h2>
<p dir="auto">This package can handle large arrangements. For example, the following evaluates in less than six seconds. It is a computation on an arrangement in 7-dimensional space consisting of 127 hyperplanes.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="R7 = resonance_hyperplanes(7);
GR7 = symmetry_resonance(7)
@time b=betti_numbers(R7; SymmetryGroup=GR7)
   [1, 127, 7035, 215439, 3831835, 37769977, 169824305, 135677633]"><pre class="notranslate"><code>R7 = resonance_hyperplanes(7);
GR7 = symmetry_resonance(7)
@time b=betti_numbers(R7; SymmetryGroup=GR7)
   [1, 127, 7035, 215439, 3831835, 37769977, 169824305, 135677633]
</code></pre></div>
<p dir="auto">The arrangements discussed in <a href="https://arxiv.org/abs/2105.14542" rel="nofollow">Enumerating chambers of hyperplane arrangements with symmetry</a> and their symmetry groups are exported in this package:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="n=6
R=(resonance_hyperplanes(n),symmetry_resonance(n))
T=(threshold_hyperplanes(n),symmetry_threshold(n))
P=(permutohedron_hyperplanes(n),symmetry_permutohedra(n))
D=(demicube_hyperplanes(n),symmetry_demicube(n))
C=(crosspolytope_hyperplanes(n),symmetry_crosspolytope(n))
Disc=(discriminantal_hyperplanes(n),symmetry_discriminantal(n)) 
# note that discriminantal_hyperplanes provdes both the matrix A and the vector c of constants"><pre class="notranslate"><code>n=6
R=(resonance_hyperplanes(n),symmetry_resonance(n))
T=(threshold_hyperplanes(n),symmetry_threshold(n))
P=(permutohedron_hyperplanes(n),symmetry_permutohedra(n))
D=(demicube_hyperplanes(n),symmetry_demicube(n))
C=(crosspolytope_hyperplanes(n),symmetry_crosspolytope(n))
Disc=(discriminantal_hyperplanes(n),symmetry_discriminantal(n)) 
# note that discriminantal_hyperplanes provdes both the matrix A and the vector c of constants
</code></pre></div>
</article></div>