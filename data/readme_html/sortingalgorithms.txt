<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-sorting-algorithms" class="anchor" aria-hidden="true" href="#sorting-algorithms"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Sorting Algorithms</h1>
<p dir="auto"><a href="https://github.com/JuliaLang/SortingAlgorithms.jl/actions?query=workflow%3ACI+branch%3Amaster"><img src="https://github.com/JuliaLang/SortingAlgorithms.jl/workflows/CI/badge.svg" alt="Build status" style="max-width: 100%;"></a>
<a href="https://coveralls.io/r/JuliaLang/SortingAlgorithms.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/fa38451467eba6dc205c54ce22e4be9499cc83b01dcab2848bcd7d6d309def27/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f4a756c69614c616e672f536f7274696e67416c676f726974686d732e6a6c2f62616467652e737667" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/JuliaLang/SortingAlgorithms.jl/badge.svg" style="max-width: 100%;"></a>
<a href="https://juliahub.com/ui/Packages/SortingAlgorithms/6dCmw?t=2" rel="nofollow"><img src="https://camo.githubusercontent.com/bf41c3b255c53b62634feefc49ca66a9e0af39ce42efa380d88a510a9a9fe6db/68747470733a2f2f6a756c69616875622e636f6d2f646f63732f536f7274696e67416c676f726974686d732f646570732e737667" alt="deps" data-canonical-src="https://juliahub.com/docs/SortingAlgorithms/deps.svg" style="max-width: 100%;"></a></p>
<p dir="auto">The <code>SortingAlgorithms</code> package provides three sorting algorithms that can be used with Julia's <a href="https://docs.julialang.org/en/v1/base/sort/" rel="nofollow">standard sorting API</a>:</p>
<ul dir="auto">
<li><a href="https://en.wikipedia.org/wiki/Heapsort" rel="nofollow">HeapSort</a> – an unstable, general purpose, in-place, O(n log n) comparison sort that works by heapifying an array and repeatedly taking the maximal element from the heap.</li>
<li><a href="https://en.wikipedia.org/wiki/Timsort" rel="nofollow">TimSort</a> – a stable, general purpose, hybrid, O(n log n) comparison sort that adapts to different common patterns of partially ordered input data.</li>
<li><a href="https://en.wikipedia.org/wiki/Comb_sort" rel="nofollow">CombSort</a> – an unstable, general purpose, in-place, O(n log n) comparison sort with O(n^2) pathological cases that can attain good efficiency through SIMD instructions and instruction level parallelism on modern hardware.</li>
</ul>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="	julia&gt; using SortingAlgorithms

	julia&gt; words = map(chomp,[readlines(open(&quot;/usr/share/dict/words&quot;))...])
	235886-element Array{ASCIIString,1}:
	 &quot;A&quot;
	 &quot;a&quot;
	 &quot;aa&quot;
	 ⋮
	 &quot;zythum&quot;
	 &quot;Zyzomys&quot;
	 &quot;Zyzzogeton&quot;

	julia&gt; sort!(words, alg=TimSort)
	235886-element Array{ASCIIString,1}:
	 &quot;A&quot;
	 &quot;Aani&quot;
	 &quot;Aaron&quot;
	 ⋮
	 &quot;zymurgy&quot;
	 &quot;zythem&quot;
	 &quot;zythum&quot;

	julia&gt; sort!(words, alg=TimSort, by=length)
	235886-element Array{ASCIIString,1}:
	 &quot;A&quot;
	 &quot;B&quot;
	 &quot;C&quot;
	 ⋮
	 &quot;scientificophilosophical&quot;
	 &quot;tetraiodophenolphthalein&quot;
	 &quot;thyroparathyroidectomize&quot;

	julia&gt; sort!(words, alg=HeapSort)
	235886-element Array{ASCIIString,1}:
	 &quot;A&quot;
	 &quot;Aani&quot;
	 &quot;Aaron&quot;
	 ⋮
	 &quot;zymurgy&quot;
	 &quot;zythem&quot;
	 &quot;zythum&quot;

	julia&gt; sort!(words, alg=HeapSort, by=length)
	235886-element Array{ASCIIString,1}:
	 &quot;L&quot;
	 &quot;p&quot;
	 &quot;U&quot;
	 ⋮
	 &quot;scientificophilosophical&quot;
	 &quot;tetraiodophenolphthalein&quot;
	 &quot;thyroparathyroidectomize&quot;

	julia&gt; sort!(randn(1000), alg=CombSort)
	1000-element Array{Float64,1}:
	 -2.86255
	 -2.72041
	 -2.58234
	  ⋮
	  3.15075
	  3.20058
	  3.23942"><pre>	julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> SortingAlgorithms

	julia<span class="pl-k">&gt;</span> words <span class="pl-k">=</span> <span class="pl-c1">map</span>(chomp,[<span class="pl-c1">readlines</span>(<span class="pl-c1">open</span>(<span class="pl-s"><span class="pl-pds">"</span>/usr/share/dict/words<span class="pl-pds">"</span></span>))<span class="pl-k">...</span>])
	<span class="pl-c1">235886</span><span class="pl-k">-</span>element Array{ASCIIString,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
	 <span class="pl-s"><span class="pl-pds">"</span>A<span class="pl-pds">"</span></span>
	 <span class="pl-s"><span class="pl-pds">"</span>a<span class="pl-pds">"</span></span>
	 <span class="pl-s"><span class="pl-pds">"</span>aa<span class="pl-pds">"</span></span>
	 ⋮
	 <span class="pl-s"><span class="pl-pds">"</span>zythum<span class="pl-pds">"</span></span>
	 <span class="pl-s"><span class="pl-pds">"</span>Zyzomys<span class="pl-pds">"</span></span>
	 <span class="pl-s"><span class="pl-pds">"</span>Zyzzogeton<span class="pl-pds">"</span></span>

	julia<span class="pl-k">&gt;</span> <span class="pl-c1">sort!</span>(words, alg<span class="pl-k">=</span>TimSort)
	<span class="pl-c1">235886</span><span class="pl-k">-</span>element Array{ASCIIString,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
	 <span class="pl-s"><span class="pl-pds">"</span>A<span class="pl-pds">"</span></span>
	 <span class="pl-s"><span class="pl-pds">"</span>Aani<span class="pl-pds">"</span></span>
	 <span class="pl-s"><span class="pl-pds">"</span>Aaron<span class="pl-pds">"</span></span>
	 ⋮
	 <span class="pl-s"><span class="pl-pds">"</span>zymurgy<span class="pl-pds">"</span></span>
	 <span class="pl-s"><span class="pl-pds">"</span>zythem<span class="pl-pds">"</span></span>
	 <span class="pl-s"><span class="pl-pds">"</span>zythum<span class="pl-pds">"</span></span>

	julia<span class="pl-k">&gt;</span> <span class="pl-c1">sort!</span>(words, alg<span class="pl-k">=</span>TimSort, by<span class="pl-k">=</span>length)
	<span class="pl-c1">235886</span><span class="pl-k">-</span>element Array{ASCIIString,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
	 <span class="pl-s"><span class="pl-pds">"</span>A<span class="pl-pds">"</span></span>
	 <span class="pl-s"><span class="pl-pds">"</span>B<span class="pl-pds">"</span></span>
	 <span class="pl-s"><span class="pl-pds">"</span>C<span class="pl-pds">"</span></span>
	 ⋮
	 <span class="pl-s"><span class="pl-pds">"</span>scientificophilosophical<span class="pl-pds">"</span></span>
	 <span class="pl-s"><span class="pl-pds">"</span>tetraiodophenolphthalein<span class="pl-pds">"</span></span>
	 <span class="pl-s"><span class="pl-pds">"</span>thyroparathyroidectomize<span class="pl-pds">"</span></span>

	julia<span class="pl-k">&gt;</span> <span class="pl-c1">sort!</span>(words, alg<span class="pl-k">=</span>HeapSort)
	<span class="pl-c1">235886</span><span class="pl-k">-</span>element Array{ASCIIString,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
	 <span class="pl-s"><span class="pl-pds">"</span>A<span class="pl-pds">"</span></span>
	 <span class="pl-s"><span class="pl-pds">"</span>Aani<span class="pl-pds">"</span></span>
	 <span class="pl-s"><span class="pl-pds">"</span>Aaron<span class="pl-pds">"</span></span>
	 ⋮
	 <span class="pl-s"><span class="pl-pds">"</span>zymurgy<span class="pl-pds">"</span></span>
	 <span class="pl-s"><span class="pl-pds">"</span>zythem<span class="pl-pds">"</span></span>
	 <span class="pl-s"><span class="pl-pds">"</span>zythum<span class="pl-pds">"</span></span>

	julia<span class="pl-k">&gt;</span> <span class="pl-c1">sort!</span>(words, alg<span class="pl-k">=</span>HeapSort, by<span class="pl-k">=</span>length)
	<span class="pl-c1">235886</span><span class="pl-k">-</span>element Array{ASCIIString,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
	 <span class="pl-s"><span class="pl-pds">"</span>L<span class="pl-pds">"</span></span>
	 <span class="pl-s"><span class="pl-pds">"</span>p<span class="pl-pds">"</span></span>
	 <span class="pl-s"><span class="pl-pds">"</span>U<span class="pl-pds">"</span></span>
	 ⋮
	 <span class="pl-s"><span class="pl-pds">"</span>scientificophilosophical<span class="pl-pds">"</span></span>
	 <span class="pl-s"><span class="pl-pds">"</span>tetraiodophenolphthalein<span class="pl-pds">"</span></span>
	 <span class="pl-s"><span class="pl-pds">"</span>thyroparathyroidectomize<span class="pl-pds">"</span></span>

	julia<span class="pl-k">&gt;</span> <span class="pl-c1">sort!</span>(<span class="pl-c1">randn</span>(<span class="pl-c1">1000</span>), alg<span class="pl-k">=</span>CombSort)
	<span class="pl-c1">1000</span><span class="pl-k">-</span>element Array{Float64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
	 <span class="pl-k">-</span><span class="pl-c1">2.86255</span>
	 <span class="pl-k">-</span><span class="pl-c1">2.72041</span>
	 <span class="pl-k">-</span><span class="pl-c1">2.58234</span>
	  ⋮
	  <span class="pl-c1">3.15075</span>
	  <span class="pl-c1">3.20058</span>
	  <span class="pl-c1">3.23942</span></pre></div>
<h2 dir="auto"><a id="user-content-other-packages-that-provide-sorting-algorithms" class="anchor" aria-hidden="true" href="#other-packages-that-provide-sorting-algorithms"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Other packages that provide sorting algorithms</h2>
<p dir="auto">While SortingAlgorithms.jl is the most widely used sorting package in the Julia ecosystem, other packages are available:</p>
<ul dir="auto">
<li><a href="https://github.com/xiaodaigh/SortingLab.jl">https://github.com/xiaodaigh/SortingLab.jl</a></li>
<li><a href="https://github.com/JeffreySarnoff/SortingNetworks.jl">https://github.com/JeffreySarnoff/SortingNetworks.jl</a></li>
<li><a href="https://github.com/nlw0/ChipSort.jl">https://github.com/nlw0/ChipSort.jl</a></li>
</ul>
</article></div>