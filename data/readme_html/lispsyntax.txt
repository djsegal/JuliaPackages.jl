<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-lispsyntaxjl-a-clojure-like-lisp-syntax-for-julia" class="anchor" aria-hidden="true" href="#lispsyntaxjl-a-clojure-like-lisp-syntax-for-julia"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>LispSyntax.jl: A clojure-like lisp syntax for julia</h1>
<p><a href="https://gitter.im/swadey/LispSyntax.jl?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge&amp;utm_content=badge" rel="nofollow"><img src="https://camo.githubusercontent.com/fba1efd04c6c658d6b2e810e9417e3276a510637/68747470733a2f2f6261646765732e6769747465722e696d2f7377616465792f4c69737053796e7461782e6a6c2e737667" alt="Join the chat at https://gitter.im/swadey/LispSyntax.jl" data-canonical-src="https://badges.gitter.im/swadey/LispSyntax.jl.svg" style="max-width:100%;"></a>
<a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/26bd47a170f82002f36a25846b2c6eec94d4a0be/68747470733a2f2f7472617669732d63692e6f72672f7377616465792f4c69737053796e7461782e6a6c2e7376673f6272616e63683d6d6173746572"><img src="https://camo.githubusercontent.com/26bd47a170f82002f36a25846b2c6eec94d4a0be/68747470733a2f2f7472617669732d63692e6f72672f7377616465792f4c69737053796e7461782e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/swadey/LispSyntax.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p>This package provides a lisp-to-julia syntax translator with
convenience macros that let you do this:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-s"><span class="pl-pds"><span class="pl-c1">lisp</span>"</span>(defn fib [a] (if (&lt; a 2) a (+ (fib (- a 1)) (fib (- a 2)))))<span class="pl-pds">"</span></span>
<span class="pl-c1">@test</span> <span class="pl-s"><span class="pl-pds"><span class="pl-c1">lisp</span>"</span>(fib 30)<span class="pl-pds">"</span></span> <span class="pl-k">==</span> <span class="pl-c1">832040</span>
<span class="pl-c1">@test</span> <span class="pl-c1">fib</span>(<span class="pl-c1">30</span>)        <span class="pl-k">==</span> <span class="pl-c1">832040</span></pre></div>
<p>LispSyntax.jl is implemented as an expression translator between
lisp/clojure-like syntax and julia's AST.  Julia's compiler, JIT and
multiple-dispatch infrastructure is used for code generation and
execution. Because of this, LispSyntax.jl is not really clojure or lisp in
most meaningful ways.  The semantics are entirely julia-based (which
are very similar to scheme/lisp in many ways).  The net result is that
LispSyntax.jl is really an alternative S-expression-like syntax for julia,
not an implemention of clojure or lisp.</p>
<h2><a id="user-content-special-forms" class="anchor" aria-hidden="true" href="#special-forms"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Special Forms</h2>
<ul>
<li><code>(def symbol init)</code></li>
<li><code>(quote form)</code></li>
<li><code>(defn symbol [param*] expr*)</code></li>
<li><code>(defmacro symbol [param*] expr*)</code></li>
<li><code>(lambda [param*] expr*)</code></li>
<li><code>(fn [param*] expr*)</code></li>
<li><code>(let [binding*] expr*)</code></li>
<li><code>(global symbol*)</code></li>
<li><code>(while test expr*)</code></li>
<li><code>(for [binding*] expr*)</code></li>
<li><code>(import package*)</code></li>
</ul>
<h2><a id="user-content-notable-differences" class="anchor" aria-hidden="true" href="#notable-differences"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Notable Differences</h2>
<ul>
<li><em>Symbol names cannot have -, *, /, ? ...</em> - Julia symbol naming is used for
everything, as a result, Julia syntax restrictions are maintained
in <code>LispSyntax.jl</code>.</li>
<li><em>Reference to global variables in function scopes</em> - Julia requires
declaration of global symbols that are referenced in function
scope.  Because of this functions need to declare which symbols are
global.  This is done via the special form <code>(global symbol*)</code>.</li>
<li><em>Binding forms not implemented</em> - Clojure has very awesome
destructuring binds that can used in most special forms requiring
bindings (e.g. <code>let</code>, <code>fn</code> parameter lists, etc.).  This is not
currently implemented.</li>
<li><em>Lack of loop/recur</em> - Currently, this is not implemented.  As with
Clojure, julia does not currently support TCO, so something like
this may be needed (but a macro-implementation of tail call rewriting may be
more appropriate for julia).</li>
<li><em>Optional typing</em> - Currently not implemented.</li>
<li><em>Named functions are julia methods</em> - For efficiency, functions defined with
<code>defn</code> are translated to normal julia <code>function</code> expressions. This means the
act as named lambdas in local scope.</li>
<li><em>Method definition</em> - Also not currently implemented.  If
implemented it will probably not be a full implementation of
Clojure's sophisticated dispatch system.</li>
<li><em>Macros differences</em> - Macros defined in <code>LispSyntax.jl</code> look like
standard Lisp macros but because expressions are special objects in
julia, S-expressions returned from macros require a special
translation step to generate julia expression trees.  The result is
that <code>LispSyntax.jl</code> macros are directly translated into Julia macros and
must be called via special syntax (e.g. <code>(@macro expr)</code>). Macro hygiene
follows the Julia approach of hygenic-by-default with explicit escaping
using <code>esc</code>. This is the opposite of Clojure's macros which use explicit
hygiene with specially named variables.</li>
<li><em>Julia's string macro dispatch not supported (yet)</em> - for macros
like <code>@r_str</code> which in Julia can be called via <code>r""</code>, it is
currently necessary to call these via standard macro syntax:
<code>(@r_str "string")</code></li>
</ul>
<h2><a id="user-content-repl-mode" class="anchor" aria-hidden="true" href="#repl-mode"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>REPL Mode</h2>
<p>LispSyntax.jl provides a convenience REPL, alleviating one from having to
type <code>lisp"( ... )"</code> for each top level expression. In order to use REPL
mode, simply initialize it:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> LispSyntax
julia<span class="pl-k">&gt;</span> LispSyntax<span class="pl-k">.</span><span class="pl-c1">init_repl</span>()
REPL mode Lisp Mode initialized. Press ) to enter and backspace to exit.</pre></div>
<p>At this point, type <code>)</code>, and you're ready to Lisp:</p>
<div class="highlight highlight-source-clojure"><pre>jλ&gt; (<span class="pl-en">*</span> <span class="pl-c1">2</span> (<span class="pl-en">reduce</span> + (<span class="pl-en">:</span> <span class="pl-c1">1</span> <span class="pl-c1">6</span>)))
<span class="pl-c1">42</span>
jλ&gt; (<span class="pl-k">defn</span> <span class="pl-e">fib</span> [a] 
      (<span class="pl-k">if</span> (<span class="pl-en">&lt;</span> a <span class="pl-c1">2</span>) 
        a 
        (<span class="pl-en">+</span> (<span class="pl-en">fib</span> (<span class="pl-en">-</span> a <span class="pl-c1">1</span>)) (<span class="pl-en">fib</span> (<span class="pl-en">-</span> a <span class="pl-c1">2</span>)))))
fib (<span class="pl-en">generic</span> function with <span class="pl-c1">1</span> method)
jλ&gt; (<span class="pl-en">fib</span> <span class="pl-c1">10</span>)
<span class="pl-c1">55</span></pre></div>
<p>To return to the Julia prompt, simply type the backspace type or
<code>Ctrl-C</code>. Once there, you'll still have access to the fuctions you
defined:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> fib
fib (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)
julia<span class="pl-k">&gt;</span> <span class="pl-c1">fib</span>(<span class="pl-c1">10</span>)
<span class="pl-c1">55</span></pre></div>
<p>You may also create a <a href="docs/repl-mode.md">customized REPL</a>.</p>
<h2><a id="user-content-todo" class="anchor" aria-hidden="true" href="#todo"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>TODO</h2>
<ul>
<li>Support for exceptions: this is straight forward but not currently implemented.</li>
<li>Optional typing to support method definition</li>
<li>Structs and aggregate types</li>
<li>Special dispatch for string macro forms</li>
<li>Modules</li>
<li>import vs. using vs. include -- only <code>using</code> is currently
implemented and confusingly, it matches Clojure's import form.</li>
<li>varargs and named arguments</li>
</ul>
</article></div>