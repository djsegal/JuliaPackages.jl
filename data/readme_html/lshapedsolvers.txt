<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-lshapedsolvers" class="anchor" aria-hidden="true" href="#lshapedsolvers"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>LShapedSolvers</h1>
<p><a href="https://travis-ci.org/martinbiel/LShapedSolvers.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/1cc0de56dcf650eaaec748d72e39b07a74bfd761/68747470733a2f2f7472617669732d63692e6f72672f6d617274696e6269656c2f4c536861706564536f6c766572732e6a6c2e7376673f6272616e63683d74657374" alt="Build Status" data-canonical-src="https://travis-ci.org/martinbiel/LShapedSolvers.jl.svg?branch=test" style="max-width:100%;"></a></p>
<p><a href="https://coveralls.io/github/martinbiel/LShaped.jl?branch=test" rel="nofollow"><img src="https://camo.githubusercontent.com/21f99b6717bff990ac727bad0a22290f71a51698/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6d617274696e6269656c2f4c536861706564536f6c766572732e6a6c2f62616467652e7376673f6272616e63683d7465737426736572766963653d676974687562" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/martinbiel/LShapedSolvers.jl/badge.svg?branch=test&amp;service=github" style="max-width:100%;"></a></p>
<p><a href="http://codecov.io/github/martinbiel/LShapedSolvers.jl?branch=test" rel="nofollow"><img src="https://camo.githubusercontent.com/2b662a522dbdb25ff0d5927350c21e6ba7b526dc/687474703a2f2f636f6465636f762e696f2f6769746875622f6d617274696e6269656c2f4c536861706564536f6c766572732e6a6c2f636f7665726167652e7376673f6272616e63683d74657374" alt="codecov.io" data-canonical-src="http://codecov.io/github/martinbiel/LShapedSolvers.jl/coverage.svg?branch=test" style="max-width:100%;"></a></p>
<p><code>LShapedSolvers</code> is a collection of structured optimization algorithms for two-stage (L-shaped) stochastic recourse problems. All algorithm variants are based on the L-shaped method by Van Slyke and Wets. <code>LShapedSolvers</code> interfaces with <a href="https://github.com/martinbiel/StochasticPrograms.jl">StochasticPrograms.jl</a>, and a given recourse model <code>sp</code> is solved effectively through</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> LShapedSolvers

julia<span class="pl-k">&gt;</span> <span class="pl-c1">solve</span>(sp,solver<span class="pl-k">=</span><span class="pl-c1">LShapedSolver</span>(<span class="pl-c1">ClpSolver</span>()))
L<span class="pl-k">-</span>Shaped Gap  Time<span class="pl-k">:</span> <span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">00</span><span class="pl-k">:</span><span class="pl-c1">01</span> (<span class="pl-c1">4</span> iterations)
  Objective<span class="pl-k">:</span>       <span class="pl-k">-</span><span class="pl-c1">855.8333333333358</span>
  Gap<span class="pl-k">:</span>             <span class="pl-c1">2.1229209144670507e-15</span>
  Number of cuts<span class="pl-k">:</span>  <span class="pl-c1">5</span>
<span class="pl-c1">:Optimal</span>
</pre></div>
<p>Note, that an LP capable <code>AbstractMathProgSolver</code> is required to solve emerging subproblems. Solver objects are obtained through the factory method <code>LShapedSolver</code>. The following variants of the L-shaped algorithm are implemented:</p>
<ol>
<li>L-shaped with multiple cuts (default): <code>regularization = :none (default)</code></li>
<li>L-shaped with regularized decomposition: <code>regularization = :rd</code></li>
<li>L-shaped with trust region: <code>regularization = :tr</code></li>
<li>L-shaped with level sets: <code>regularization = :lv</code></li>
</ol>
<p>Note, that <code>:rd</code> and <code>:lv</code> both require a QP capable <code>AbstractMathProgSolver</code> for the master problems. If not available, setting the <code>linearize</code> keyword to <code>true</code> is an alternative.</p>
<p>In addition, there is a distributed variant of each algorithm, which requires adding processes with <code>addprocs</code> prior to execution. The distributed variants are obtained by supplying <code>distributed = true</code> to <code>LShapedSolver</code>.</p>
<p>Each algorithm has a set of parameters that can be tuned prior to execution. For a list of these parameters and their default values, use <code>?</code> in combination with the solver object. For example, <code>?LShaped</code> gives the parameter list of the default L-shaped algorithm. For a list of all solvers and their handle names, use <code>?LShapedSolver</code>.</p>
<p><code>LShapedSolvers.jl</code> includes a set of crash methods that can be used to generate the initial decision by supplying functor objects to <code>LShapedSolver</code>. Use <code>?Crash</code> for a list of available crashes and their usage.</p>
<h2><a id="user-content-references" class="anchor" aria-hidden="true" href="#references"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>References</h2>
<ol>
<li>
<p>Van Slyke, R. and Wets, R. (1969), <a href="https://epubs.siam.org/doi/abs/10.1137/0117061" rel="nofollow">L-Shaped Linear Programs with Applications to Optimal Control and Stochastic Programming</a>,
SIAM Journal on Applied Mathematics, vol. 17, no. 4, pp. 638-663.</p>
</li>
<li>
<p>Ruszczyński, A (1986), <a href="https://link.springer.com/article/10.1007/BF01580883" rel="nofollow">A regularized decomposition method for minimizing a sum of polyhedral functions</a>,
Mathematical Programming, vol. 35, no. 3, pp. 309-333.</p>
</li>
<li>
<p>Linderoth, J. and Wright, S. (2003), <a href="https://link.springer.com/article/10.1023/A:1021858008222" rel="nofollow">Decomposition Algorithms for Stochastic Programming on a Computational Grid</a>,
Computational Optimization and Applications, vol. 24, no. 2-3, pp. 207-250.</p>
</li>
<li>
<p>Fábián, C. and Szőke, Z. (2006), <a href="https://link.springer.com/article/10.1007%2Fs10287-006-0026-8" rel="nofollow">Solving two-stage stochastic programming problems with level decomposition</a>,
Computational Management Science, vol. 4, no. 4, pp. 313-353.</p>
</li>
</ol>
</article></div>