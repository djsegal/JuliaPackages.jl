<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-labjackjl" class="anchor" aria-hidden="true" href="#labjackjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>LabJack.jl</h1>
<p>Julia interface to the LJM library, used to control LabJack DAQ devices. Only a few
convenience functions are provided for now (although a more thorough idiomatic Julia
interface may be implemented in the future). The full LJM C API is wrapped and callable from Julia
through functions available in the submodule <code>LJM</code>. (e.g. for the C function
<code>LJM_eWriteAddress</code> one can equivalently call <code>LJM.eWriteAddress</code>) For help with usage of low-level
functions, see LabJack's online <a href="https://labjack.com/support/software/api/ljm" rel="nofollow">documentation for LJM</a>, and the Julia documentation on
conventions used when calling <a href="https://docs.julialang.org/en/v1/manual/calling-c-and-fortran-code/" rel="nofollow">external C functions</a>.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="]add https://github.com/wsphillips/LabJack.jl
"><pre>]add https<span class="pl-k">:</span><span class="pl-k">//</span>github<span class="pl-k">.</span>com<span class="pl-k">/</span>wsphillips<span class="pl-k">/</span>LabJack<span class="pl-k">.</span>jl</pre></div>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<p>Convenience functions for single register reading and writing are provided via
<code>read_digital</code>, <code>write_digital</code>, <code>read_analog</code>, <code>write_analog</code>. Extended functionality
(multi-address read/write, streaming, etc) is available by calling low-level <code>LJM</code> functions directly.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using LabJack
# To search for and open the first available LJ device on any connection type:
LabJack.init_default()

# Read a value from analog input
val = read_analog(&quot;AIN0&quot;)

# Write to an analog output:
write_analog(&quot;DAC0&quot;, 2.5)

# Check the values of EIO digital registers:
bits = read_digital(&quot;EIO_STATE&quot;)

# Set the value of a digital register:
write_digital(&quot;EIO0&quot;, 1)
"><pre><span class="pl-k">using</span> LabJack
<span class="pl-c"><span class="pl-c">#</span> To search for and open the first available LJ device on any connection type:</span>
LabJack<span class="pl-k">.</span><span class="pl-c1">init_default</span>()

<span class="pl-c"><span class="pl-c">#</span> Read a value from analog input</span>
val <span class="pl-k">=</span> <span class="pl-c1">read_analog</span>(<span class="pl-s"><span class="pl-pds">"</span>AIN0<span class="pl-pds">"</span></span>)

<span class="pl-c"><span class="pl-c">#</span> Write to an analog output:</span>
<span class="pl-c1">write_analog</span>(<span class="pl-s"><span class="pl-pds">"</span>DAC0<span class="pl-pds">"</span></span>, <span class="pl-c1">2.5</span>)

<span class="pl-c"><span class="pl-c">#</span> Check the values of EIO digital registers:</span>
bits <span class="pl-k">=</span> <span class="pl-c1">read_digital</span>(<span class="pl-s"><span class="pl-pds">"</span>EIO_STATE<span class="pl-pds">"</span></span>)

<span class="pl-c"><span class="pl-c">#</span> Set the value of a digital register:</span>
<span class="pl-c1">write_digital</span>(<span class="pl-s"><span class="pl-pds">"</span>EIO0<span class="pl-pds">"</span></span>, <span class="pl-c1">1</span>)</pre></div>
<p>If you choose not to use <code>LabJack.init_default</code>, you may find the utility function <code>lsdev()</code>
useful. You can select a device by connection and device type, calling
<code>open(dt::LJDeviceType, ct::LJConnectionType)</code> where valid device and connection types are
found in the enumerations within <code>LJM/liblabjackm_common.jl</code>. Alternatively, to open devices
by more specific means (e.g. IP address) you will need to use <code>LJM.Open()</code> directly,
passing your own identifier string (see LJM documentation for details).</p>
<p>Devices opened with the high-level <code>open(dt::LJDeviceType, ct::LJConnectionType)</code> function
can be used with the high-level convenience functions directly, by passing the returned
<code>LJDevice</code> object as the last argument. To use device handles opened with <code>LJM.Open()</code> with convenience functions,
wrap the returned integer handle with <code>LabJack.LJDevice(handle)</code> first:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="# automatic opening by device and connection type
dev = open(T7, ETHERNET)
write_analog(&quot;DAC0&quot;, 2.5, dev)

# or manually via identifier string:
handle = Ref{Cint}()
LJM.Open(dtANY, ctANY, &quot;the_device_id&quot;, handle)
dev = LabJack.LJDevice(handle[])
# now use as you would otherwise...
"><pre><span class="pl-c"><span class="pl-c">#</span> automatic opening by device and connection type</span>
dev <span class="pl-k">=</span> <span class="pl-c1">open</span>(T7, ETHERNET)
<span class="pl-c1">write_analog</span>(<span class="pl-s"><span class="pl-pds">"</span>DAC0<span class="pl-pds">"</span></span>, <span class="pl-c1">2.5</span>, dev)

<span class="pl-c"><span class="pl-c">#</span> or manually via identifier string:</span>
handle <span class="pl-k">=</span> <span class="pl-c1">Ref</span><span class="pl-c1">{Cint}</span>()
LJM<span class="pl-k">.</span><span class="pl-c1">Open</span>(dtANY, ctANY, <span class="pl-s"><span class="pl-pds">"</span>the_device_id<span class="pl-pds">"</span></span>, handle)
dev <span class="pl-k">=</span> LabJack<span class="pl-k">.</span><span class="pl-c1">LJDevice</span>(handle[])
<span class="pl-c"><span class="pl-c">#</span> now use as you would otherwise...</span></pre></div>
</article></div>