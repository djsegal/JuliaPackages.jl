<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-octavian" class="anchor" aria-hidden="true" href="#octavian"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Octavian</h1>
<p dir="auto"><a href="https://octavian.JuliaLinearAlgebra.org/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Documentation (stable)" title="Documentation (stable)" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://octavian.JuliaLinearAlgebra.org/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Documentation (dev)" title="Documentation (dev)" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/JuliaLinearAlgebra/Octavian.jl/actions?query=workflow%3ACI"><img src="https://github.com/JuliaLinearAlgebra/Octavian.jl/workflows/CI/badge.svg" alt="Continuous Integration" title="Continuous Integration" style="max-width: 100%;"></a>
<a href="https://github.com/JuliaLinearAlgebra/Octavian.jl/actions?query=workflow%3A%22CI+%28Julia+nightly%29%22"><img src="https://github.com/JuliaLinearAlgebra/Octavian.jl/workflows/CI%20(Julia%20nightly)/badge.svg" alt="Continuous Integration (Julia nightly)" title="Continuous Integration (Julia nightly)" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/JuliaLinearAlgebra/Octavian.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/c954810cf603fd4ec5c37cfe7af97b0369e285dbe80a040d84e86b9f2d24f68d/68747470733a2f2f636f6465636f762e696f2f67682f4a756c69614c696e656172416c67656272612f4f6374617669616e2e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Code Coverage" title="Code Coverage" data-canonical-src="https://codecov.io/gh/JuliaLinearAlgebra/Octavian.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">To make sure CPUSummary 1.11 and newer are using <code>Hwloc</code>, you may want to run</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using CPUSummary

julia&gt; CPUSummary.use_hwloc(true);"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> CPUSummary

julia<span class="pl-k">&gt;</span> CPUSummary<span class="pl-k">.</span><span class="pl-c1">use_hwloc</span>(<span class="pl-c1">true</span>);</pre></div>
<p dir="auto">which will hopefully enable accurate hardware information. This is the default,
so it should typically be unnecessary.</p>
<p dir="auto">Octavian.jl is a multi-threaded BLAS-like library that provides pure Julia
matrix multiplication on the CPU, built on top of
<a href="https://github.com/chriselrod/LoopVectorization.jl">LoopVectorization.jl</a>.</p>
<p dir="auto">Please see the
<a href="https://octavian.JuliaLinearAlgebra.org/stable" rel="nofollow">Octavian documentation</a>.</p>
<p dir="auto">Octavian dropped 32bit Julia support. See <a href="https://github.com/JuliaLinearAlgebra/Octavian.jl/pull/157" data-hovercard-type="pull_request" data-hovercard-url="/JuliaLinearAlgebra/Octavian.jl/pull/157/hovercard">PR#157</a>. If you're interested in restoring it, please file a PR to fix failing tests.</p>
<h2 dir="auto"><a id="user-content-benchmarks" class="anchor" aria-hidden="true" href="#benchmarks"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Benchmarks</h2>
<p dir="auto">You can run benchmarks using <a href="https://github.com/JuliaLinearAlgebra/BLASBenchmarksCPU.jl">BLASBenchmarksCPU.jl</a>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; @time using BLASBenchmarksCPU
  7.278954 seconds (17.59 M allocations: 1.107 GiB, 6.22% gc time)

julia&gt; rb = runbench(sizes = logspace(10, 1_000, 200)); plot(rb, displayplot = false);
Progress: 100%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| Time: 2:25:04
  Size:               (1000, 1000, 1000)
  BLIS:               (MedianGFLOPS = 1051.0, MaxGFLOPS = 1476.0)
  Gaius:              (MedianGFLOPS = 765.8, MaxGFLOPS = 941.7)
  MKL:                (MedianGFLOPS = 1348.0, MaxGFLOPS = 1589.0)
  Octavian:           (MedianGFLOPS = 1816.0, MaxGFLOPS = 1895.0)
  OpenBLAS:           (MedianGFLOPS = 1254.0, MaxGFLOPS = 1385.0)
  Tullio:             (MedianGFLOPS = 1102.0, MaxGFLOPS = 1196.0)
  LoopVectorization:  (MedianGFLOPS = 1552.0, MaxGFLOPS = 1721.0)

julia&gt; versioninfo()
Julia Version 1.7.0-DEV.1124
Commit d18cf93bac* (2021-05-19 16:11 UTC)
Platform Info:
  OS: Linux (x86_64-generic-linux)
  CPU: Intel(R) Core(TM) i9-10980XE CPU @ 3.00GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-11.0.1 (ORCJIT, cascadelake)
Environment:
  JULIA_NUM_THREADS = 36"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">@time</span> <span class="pl-k">using</span> BLASBenchmarksCPU
  <span class="pl-c1">7.278954</span> seconds (<span class="pl-c1">17.59</span> M allocations<span class="pl-k">:</span> <span class="pl-c1">1.107</span> GiB, <span class="pl-c1">6.22</span><span class="pl-k">%</span> gc time)

julia<span class="pl-k">&gt;</span> rb <span class="pl-k">=</span> <span class="pl-c1">runbench</span>(sizes <span class="pl-k">=</span> <span class="pl-c1">logspace</span>(<span class="pl-c1">10</span>, <span class="pl-c1">1_000</span>, <span class="pl-c1">200</span>)); <span class="pl-c1">plot</span>(rb, displayplot <span class="pl-k">=</span> <span class="pl-c1">false</span>);
Progress<span class="pl-k">:</span> <span class="pl-c1">100</span><span class="pl-k">%</span><span class="pl-k">|</span>██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████<span class="pl-k">|</span> Time<span class="pl-k">:</span> <span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">25</span><span class="pl-k">:</span><span class="pl-c1">04</span>
  Size<span class="pl-k">:</span>               (<span class="pl-c1">1000</span>, <span class="pl-c1">1000</span>, <span class="pl-c1">1000</span>)
  BLIS<span class="pl-k">:</span>               (MedianGFLOPS <span class="pl-k">=</span> <span class="pl-c1">1051.0</span>, MaxGFLOPS <span class="pl-k">=</span> <span class="pl-c1">1476.0</span>)
  Gaius<span class="pl-k">:</span>              (MedianGFLOPS <span class="pl-k">=</span> <span class="pl-c1">765.8</span>, MaxGFLOPS <span class="pl-k">=</span> <span class="pl-c1">941.7</span>)
  MKL<span class="pl-k">:</span>                (MedianGFLOPS <span class="pl-k">=</span> <span class="pl-c1">1348.0</span>, MaxGFLOPS <span class="pl-k">=</span> <span class="pl-c1">1589.0</span>)
  Octavian<span class="pl-k">:</span>           (MedianGFLOPS <span class="pl-k">=</span> <span class="pl-c1">1816.0</span>, MaxGFLOPS <span class="pl-k">=</span> <span class="pl-c1">1895.0</span>)
  OpenBLAS<span class="pl-k">:</span>           (MedianGFLOPS <span class="pl-k">=</span> <span class="pl-c1">1254.0</span>, MaxGFLOPS <span class="pl-k">=</span> <span class="pl-c1">1385.0</span>)
  Tullio<span class="pl-k">:</span>             (MedianGFLOPS <span class="pl-k">=</span> <span class="pl-c1">1102.0</span>, MaxGFLOPS <span class="pl-k">=</span> <span class="pl-c1">1196.0</span>)
  LoopVectorization<span class="pl-k">:</span>  (MedianGFLOPS <span class="pl-k">=</span> <span class="pl-c1">1552.0</span>, MaxGFLOPS <span class="pl-k">=</span> <span class="pl-c1">1721.0</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">versioninfo</span>()
Julia Version <span class="pl-c1">1.7</span>.<span class="pl-c1">0</span><span class="pl-k">-</span>DEV.<span class="pl-c1">1124</span>
Commit d18cf93bac<span class="pl-k">*</span> (<span class="pl-c1">2021</span><span class="pl-k">-</span><span class="pl-c1">05</span><span class="pl-k">-</span><span class="pl-c1">19</span> <span class="pl-c1">16</span><span class="pl-k">:</span><span class="pl-c1">11</span> UTC)
Platform Info<span class="pl-k">:</span>
  OS<span class="pl-k">:</span> Linux (x86_64<span class="pl-k">-</span>generic<span class="pl-k">-</span>linux)
  CPU<span class="pl-k">:</span> <span class="pl-c1">Intel</span>(R) <span class="pl-c1">Core</span>(TM) i9<span class="pl-k">-</span><span class="pl-c1">10980</span>XE CPU @ <span class="pl-c1">3.00</span>GHz
  WORD_SIZE<span class="pl-k">:</span> <span class="pl-c1">64</span>
  LIBM<span class="pl-k">:</span> libopenlibm
  LLVM<span class="pl-k">:</span> libLLVM<span class="pl-k">-</span><span class="pl-c1">11.0</span>.<span class="pl-c1">1</span> (ORCJIT, cascadelake)
Environment<span class="pl-k">:</span>
  JULIA_NUM_THREADS <span class="pl-k">=</span> <span class="pl-c1">36</span></pre></div>
<p dir="auto">Resulted in the following:
<a target="_blank" rel="noopener noreferrer nofollow" href="https://raw.githubusercontent.com/JuliaLinearAlgebra/Octavian.jl/master/docs/src/assets/bench10980xe.svg"><img src="https://raw.githubusercontent.com/JuliaLinearAlgebra/Octavian.jl/master/docs/src/assets/bench10980xe.svg" alt="octavian10980xebench" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-related-packages" class="anchor" aria-hidden="true" href="#related-packages"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Related Packages</h2>
<table>
<thead>
<tr>
<th>Julia Package</th>
<th>CPU</th>
<th>GPU</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/MasonProtter/Gaius.jl">Gaius.jl</a></td>
<td>Yes</td>
<td>No</td>
</tr>
<tr>
<td><a href="https://github.com/JuliaGPU/GemmKernels.jl">GemmKernels.jl</a></td>
<td>No</td>
<td>Yes</td>
</tr>
<tr>
<td><a href="https://github.com/JuliaLinearAlgebra/Octavian.jl">Octavian.jl</a></td>
<td>Yes</td>
<td>No</td>
</tr>
<tr>
<td><a href="https://github.com/mcabbott/Tullio.jl">Tullio.jl</a></td>
<td>Yes</td>
<td>Yes</td>
</tr>
</tbody>
</table>
<p dir="auto">In general:</p>
<ul dir="auto">
<li>Octavian has the fastest CPU performance.</li>
<li>GemmKernels has the fastest GPU performance.</li>
<li>Tullio is the most flexible.</li>
</ul>
</article></div>