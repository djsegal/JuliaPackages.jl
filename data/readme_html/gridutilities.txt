<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-gridutilitiesjl" class="anchor" aria-hidden="true" href="#gridutilitiesjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>GridUtilities.jl</h1>
<p dir="auto"><em>Utility functions for discrete fields defined on grids</em></p>
<table>
<thead>
<tr>
<th align="center">Build Status</th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><a href="https://github.com/JuliaIBPM/GridUtilities.jl/actions"><img src="https://github.com/JuliaIBPM/GridUtilities.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a> <a href="https://codecov.io/gh/JuliaIBPM/GridUtilities.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/2407ac91f732bba1e60694c15751b3cd5ca14465f10cab0ccadd98201abcbec8/68747470733a2f2f636f6465636f762e696f2f67682f4a756c69614942504d2f477269645574696c69746965732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/JuliaIBPM/GridUtilities.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></td>
</tr>
</tbody>
</table>
<h2 dir="auto"><a id="user-content-about-the-package" class="anchor" aria-hidden="true" href="#about-the-package"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>About the package</h2>
<p dir="auto">This package provides various utility functions for working with fields defined on Cartesian grids or on points immersed in these grids. This includes functions for</p>
<ul dir="auto">
<li>Storing histories of these fields</li>
<li>Creating interpolatable versions of the fields that can be interrogated in function-like manner</li>
<li>Storing data, writing to file, and loading from file</li>
</ul>
<p dir="auto">This is a registered package in Julia, so it can be installed in the usual way,</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="] add GridUtilities"><pre>] add GridUtilities</pre></div>
<p dir="auto">Then type</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using GridUtilities"><pre><span class="pl-k">using</span> GridUtilities</pre></div>
<h3 dir="auto"><a id="user-content-data-sampling" class="anchor" aria-hidden="true" href="#data-sampling"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Data sampling</h3>
<p dir="auto">Here, we will sample and store data from a simple update model</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="u0 = ones(5,5)
t = 0.0
u = deepcopy(u0)"><pre>u0 <span class="pl-k">=</span> <span class="pl-c1">ones</span>(<span class="pl-c1">5</span>,<span class="pl-c1">5</span>)
t <span class="pl-k">=</span> <span class="pl-c1">0.0</span>
u <span class="pl-k">=</span> <span class="pl-c1">deepcopy</span>(u0)</pre></div>
<p dir="auto">Now we set up a <code>StorePlan</code> to provide details on what we wish to store and how often. We assign names to each variable.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="t_sample = 0.05
S = StorePlan(t_sample,&quot;state&quot; =&gt; u0, &quot;time&quot; =&gt; t)
data_history = initialize_storage(S)"><pre>t_sample <span class="pl-k">=</span> <span class="pl-c1">0.05</span>
S <span class="pl-k">=</span> <span class="pl-c1">StorePlan</span>(t_sample,<span class="pl-s"><span class="pl-pds">"</span>state<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> u0, <span class="pl-s"><span class="pl-pds">"</span>time<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> t)
data_history <span class="pl-k">=</span> <span class="pl-c1">initialize_storage</span>(S)</pre></div>
<p dir="auto">When we advance a simple dynamical model, we store the data at the sampling interval with <code>store_data!</code></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="store_data!(data_history,t,S,&quot;state&quot;=&gt;deepcopy(u),&quot;time&quot;=&gt;t) # initial state
for i in 1:100
    u .+= u0 # simple model, just for making it dynamic
    t += 0.01
    store_data!(data_history,t,S,&quot;state&quot;=&gt;u,&quot;time&quot;=&gt;t)
end"><pre><span class="pl-c1">store_data!</span>(data_history,t,S,<span class="pl-s"><span class="pl-pds">"</span>state<span class="pl-pds">"</span></span><span class="pl-k">=&gt;</span><span class="pl-c1">deepcopy</span>(u),<span class="pl-s"><span class="pl-pds">"</span>time<span class="pl-pds">"</span></span><span class="pl-k">=&gt;</span>t) <span class="pl-c"><span class="pl-c">#</span> initial state</span>
<span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">100</span>
    u <span class="pl-k">.+</span><span class="pl-k">=</span> u0 <span class="pl-c"><span class="pl-c">#</span> simple model, just for making it dynamic</span>
    t <span class="pl-k">+=</span> <span class="pl-c1">0.01</span>
    <span class="pl-c1">store_data!</span>(data_history,t,S,<span class="pl-s"><span class="pl-pds">"</span>state<span class="pl-pds">"</span></span><span class="pl-k">=&gt;</span>u,<span class="pl-s"><span class="pl-pds">"</span>time<span class="pl-pds">"</span></span><span class="pl-k">=&gt;</span>t)
<span class="pl-k">end</span></pre></div>
<p dir="auto">The data is stored in a Dict structure that is easy to inspect:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="data_history[&quot;state&quot;][3]
data_history[&quot;time&quot;][3]"><pre>data_history[<span class="pl-s"><span class="pl-pds">"</span>state<span class="pl-pds">"</span></span>][<span class="pl-c1">3</span>]
data_history[<span class="pl-s"><span class="pl-pds">"</span>time<span class="pl-pds">"</span></span>][<span class="pl-c1">3</span>]</pre></div>
<p dir="auto">The package uses <a href="https://github.com/JuliaIO/JLD.jl">JLD</a> to save and load data. To save the full set of stored data, e.g.,</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="save(&quot;stuff.jld&quot;,&quot;data&quot;,data_history)"><pre><span class="pl-c1">save</span>(<span class="pl-s"><span class="pl-pds">"</span>stuff.jld<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>data<span class="pl-pds">"</span></span>,data_history)</pre></div>
<p dir="auto">and to load it back in</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="d = load(&quot;stuff.jld&quot;)"><pre>d <span class="pl-k">=</span> <span class="pl-c1">load</span>(<span class="pl-s"><span class="pl-pds">"</span>stuff.jld<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">and, e.g., type</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="d[&quot;data&quot;][&quot;state&quot;]"><pre>d[<span class="pl-s"><span class="pl-pds">"</span>data<span class="pl-pds">"</span></span>][<span class="pl-s"><span class="pl-pds">"</span>state<span class="pl-pds">"</span></span>]</pre></div>
<p dir="auto">to get the history of the <code>state</code> variable.</p>
<h3 dir="auto"><a id="user-content-writing-data-to-file" class="anchor" aria-hidden="true" href="#writing-data-to-file"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Writing data to file</h3>
<p dir="auto">The package also has capabilities for writing data periodically to file (i.e., writing a <em>restart</em> file). Let's see how this would work</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="u0 = ones(5,5)
t = 0.0
u = deepcopy(u0)"><pre>u0 <span class="pl-k">=</span> <span class="pl-c1">ones</span>(<span class="pl-c1">5</span>,<span class="pl-c1">5</span>)
t <span class="pl-k">=</span> <span class="pl-c1">0.0</span>
u <span class="pl-k">=</span> <span class="pl-c1">deepcopy</span>(u0)</pre></div>
<p dir="auto">We set up a <code>WritePlan</code> for this periodic storage. Here, we specify writing the data every 0.1 time increments.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="filen = &quot;restart.jld&quot;
restart_Δt = 0.1
R = WritePlan(filen,restart_Δt,&quot;state&quot; =&gt; u,&quot;t&quot; =&gt; t)"><pre>filen <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>restart.jld<span class="pl-pds">"</span></span>
restart_Δt <span class="pl-k">=</span> <span class="pl-c1">0.1</span>
R <span class="pl-k">=</span> <span class="pl-c1">WritePlan</span>(filen,restart_Δt,<span class="pl-s"><span class="pl-pds">"</span>state<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> u,<span class="pl-s"><span class="pl-pds">"</span>t<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> t)</pre></div>
<p dir="auto">Now, in the loop, we use an extended version of the <code>JLD.save</code> function.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="for i in 1:100
    u .+= u0 # simple model, just for making it dynamic
    t += 0.01
    save(t,R,&quot;state&quot; =&gt; u,&quot;t&quot; =&gt; t)
end"><pre><span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">100</span>
    u <span class="pl-k">.+</span><span class="pl-k">=</span> u0 <span class="pl-c"><span class="pl-c">#</span> simple model, just for making it dynamic</span>
    t <span class="pl-k">+=</span> <span class="pl-c1">0.01</span>
    <span class="pl-c1">save</span>(t,R,<span class="pl-s"><span class="pl-pds">"</span>state<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> u,<span class="pl-s"><span class="pl-pds">"</span>t<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> t)
<span class="pl-k">end</span></pre></div>
<p dir="auto">We can restart this by loading from the file</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="restart = load(R)
u = restart[&quot;state&quot;]
t = restart[&quot;t&quot;]"><pre>restart <span class="pl-k">=</span> <span class="pl-c1">load</span>(R)
u <span class="pl-k">=</span> restart[<span class="pl-s"><span class="pl-pds">"</span>state<span class="pl-pds">"</span></span>]
t <span class="pl-k">=</span> restart[<span class="pl-s"><span class="pl-pds">"</span>t<span class="pl-pds">"</span></span>]</pre></div>
<p dir="auto">and keep running</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="for i in 1:100
    u .+= u0 # simple model, just for making it dynamic
    t += 0.01
    save(t,R,&quot;state&quot; =&gt; u,&quot;t&quot; =&gt; t)
end"><pre><span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">100</span>
    u <span class="pl-k">.+</span><span class="pl-k">=</span> u0 <span class="pl-c"><span class="pl-c">#</span> simple model, just for making it dynamic</span>
    t <span class="pl-k">+=</span> <span class="pl-c1">0.01</span>
    <span class="pl-c1">save</span>(t,R,<span class="pl-s"><span class="pl-pds">"</span>state<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> u,<span class="pl-s"><span class="pl-pds">"</span>t<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> t)
<span class="pl-k">end</span></pre></div>
</article></div>