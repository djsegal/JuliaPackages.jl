<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-the-blosc-module-for-julia" class="anchor" aria-hidden="true" href="#the-blosc-module-for-julia"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>The Blosc Module for Julia</h1>
<p dir="auto"><a href="https://travis-ci.org/stevengj/Blosc.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/3ca726f571c62c69d747f28048a3571f5b91030f37db98819dd0d6c057804a82/68747470733a2f2f7472617669732d63692e6f72672f73746576656e676a2f426c6f73632e6a6c2e737667" alt="Build Status" data-canonical-src="https://travis-ci.org/stevengj/Blosc.jl.svg" style="max-width: 100%;"></a>
<a href="https://ci.appveyor.com/project/StevenGJohnson/blosc-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/ff8fd6575a8562bf43b7de8fc190ba739998d389b638d2500b00d032f32a146a/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f786563633765663730757378793464353f7376673d74727565" alt="Build status" data-canonical-src="https://ci.appveyor.com/api/projects/status/xecc7ef70usxy4d5?svg=true" style="max-width: 100%;"></a></p>
<p dir="auto">This module provides fast lossless compression for the <a href="http://julialang.org/" rel="nofollow">Julia
language</a> by interfacing the <a href="http://www.blosc.org/" rel="nofollow">Blosc
Library</a>.</p>
<p dir="auto">Note that Blosc is currently <a href="https://github.com/Blosc/c-blosc/issues/67" data-hovercard-type="issue" data-hovercard-url="/Blosc/c-blosc/issues/67/hovercard">limited to 32-bit buffer
sizes</a>.  Blosc <em>does</em> run
just fine on 64-bit systems; it just can't compress arrays bigger than
2GB.  Note also that this limitation does <em>not affect</em> the use of Blosc
compression <a href="https://github.com/timholy/HDF5.jl">for HDF5</a>, since HDF5
breaks up large arrays into small chunks before compressing them.  So,
don't worry about this if you are just using Blosc within the HDF5 package.</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">To install, simply run <code>Pkg.add("Blosc")</code> in Julia.  Precompiled
binaries are provided for Mac and Windows systems, while on other
systems the Blosc library will be downloaded and compiled.</p>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<p dir="auto">The functions provided are:</p>
<ul dir="auto">
<li>
<p dir="auto"><code>compress(src::Array{T}; level=5, shuffle=true, itemsize=sizeof(T))</code>: returns a <code>Vector{UInt8}</code> consisting of <code>src</code> in compressed form.  <code>level</code> is the compression level (between <code>0</code>=no compression and <code>9</code>=max), <code>shuffle</code> indicates whether to use Blosc's shuffling preconditioner, which is optimized for arrays of binary items of size <code>itemsize</code>.</p>
</li>
<li>
<p dir="auto"><code>compress!(dest::Vector{UInt8}, src; ...)</code>: as <code>compress</code>, but uses a pre-allocated destination buffer <code>dest</code>.  Returns the size (in bytes) of the compressed data, or <code>0</code> if the buffer was too small.</p>
</li>
<li>
<p dir="auto"><code>decompress(T::Type, src::Vector{UInt8})</code>: return the compressed buffer <code>src</code> as an array of element type <code>T</code>.</p>
</li>
<li>
<p dir="auto"><code>decompress!(dest::Vector{T}, src::Vector{UInt8})</code>: like <code>decompress</code>, but uses a pre-allocated destination buffer, which is resized as needed to store the decompressed data.</p>
</li>
<li>
<p dir="auto"><code>Blosc.set_num_threads(n=CPU_CORES)</code>: tells Blosc to use <code>n</code> threads (initially <code>1</code>).</p>
</li>
<li>
<p dir="auto"><code>Blosc.compressors()</code>: returns an array of strings for the available compression algorithms.  (The <code>blosclz</code> compressor is the default.)</p>
</li>
<li>
<p dir="auto"><code>Blosc.set_compressor(s::AbstractString)</code>: set the current compression algorithm</p>
</li>
</ul>
<h2 dir="auto"><a id="user-content-author" class="anchor" aria-hidden="true" href="#author"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Author</h2>
<p dir="auto">This module was written by <a href="http://math.mit.edu/~stevenj/" rel="nofollow">Steven
G. Johnson</a> and <a href="https://github.com/jakebolewski/">Jake
Bolewski</a> (who had independently
written his own Blosc.jl package which is now merged with this one).</p>
</article></div>