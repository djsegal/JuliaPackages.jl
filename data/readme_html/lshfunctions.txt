<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-lshfunctionsjl" class="anchor" aria-hidden="true" href="#lshfunctionsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>LSHFunctions.jl</h1>
<p><a href="https://kernelmethod.github.io/LSHFunctions.jl/stable/" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable docs" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a> <a href="https://kernelmethod.github.io/LSHFunctions.jl/dev/" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev docs" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a>
<a href="https://github.com/kernelmethod/LSHFunctions.jl/actions"><img src="https://github.com/kernelmethod/LSHFunctions.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/kernelmethod/LSHFunctions.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/fdde8f4f2e66b0f20c9d4c9f89bf773de631122a8026f71850450f3552175b1a/68747470733a2f2f636f6465636f762e696f2f67682f6b65726e656c6d6574686f642f4c534846756e6374696f6e732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/kernelmethod/LSHFunctions.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a>
<a href="https://zenodo.org/badge/latestdoi/197700982" rel="nofollow"><img src="https://camo.githubusercontent.com/568b055b4d36b2adc1293fd70bdb469f071ddb150734cf6b76c48559dee57f35/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f3139373730303938322e737667" alt="DOI" data-canonical-src="https://zenodo.org/badge/197700982.svg" style="max-width:100%;"></a></p>
<p>A Julia package for <a href="https://en.wikipedia.org/wiki/Locality-sensitive_hashing" rel="nofollow">locality-sensitive
hashing</a> to accelerate
similarity search.</p>
<ul>
<li><a href="#whats-lsh">What's LSH?</a></li>
<li><a href="#installation">Installation</a></li>
<li><a href="#supported-similarity-functions">Supported similarity functions</a></li>
<li><a href="#examples">Examples</a></li>
</ul>
<h2><a id="user-content-whats-lsh" class="anchor" aria-hidden="true" href="#whats-lsh"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>What's LSH?</h2>
<p>Traditionally, if you have a data point <code>x</code>, and want to find the most similar
point(s) to <code>x</code> in your database, you would compute the similarity between <code>x</code>
and all of the points in your database, and keep whichever points were the most
similar. For instance, this type of approach is used by the classic <a href="https://en.wikipedia.org/wiki/K-nearest_neighbors_algorithm" rel="nofollow">k-nearest
neighbors algorithm</a>.
However, it has two major problems:</p>
<ul>
<li>The time to find the most similar point(s) to <code>x</code> is linear in the number of
points in your database. This can make similarity search prohibitively
expensive for even moderately large datasets.</li>
<li>In addition, the time complexity to compute the similarity between two
datapoints is typically linear in the number of dimensions of those
datapoints. If your data are high-dimensional (i.e. in the thousands to
millions of dimensions), every similarity computation you perform can be
fairly costly.</li>
</ul>
<p><strong>Locality-sensitive hashing</strong> (LSH) is a technique for accelerating these kinds
of similarity searches. Instead of measuring how similar your query point is to
every point in your database, you calculate a few hashes of the query point and
only compare it against those points with which it experiences a hash collision.
Locality-sensitive hash functions are randomly generated, with the fundamental
property that as the similarity between <code>x</code> and <code>y</code> increases, the probability
of a hash collision between <code>x</code> and <code>y</code> also increases.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>You can install LSHFunctions.jl from the Julia REPL with</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="pkg&gt; add LSHFunctions
"><pre><code>pkg&gt; add LSHFunctions
</code></pre></div>
<h2><a id="user-content-supported-similarity-functions" class="anchor" aria-hidden="true" href="#supported-similarity-functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Supported similarity functions</h2>
<p>So far, there are hash functions for the similarity functions:</p>
<ul>
<li>Cosine similarity (<code>SimHash</code>)</li>
<li>Jaccard similarity (<code>MinHash</code>)</li>
<li>L1 (Manhattan / "taxicab") distance: <code>L1Hash</code></li>
<li>L2 (Euclidean) distance: <code>L2Hash</code></li>
<li>Inner product
<ul>
<li><code>SignALSH</code> (recommended)</li>
<li><code>MIPSHash</code></li>
</ul>
</li>
<li>Function-space hashes (supports L1, L2, and cosine similarity)
<ul>
<li><code>MonteCarloHash</code></li>
<li><code>ChebHash</code></li>
</ul>
</li>
</ul>
<p>This package still needs a lot of work, including improvement to the
documentation and API.</p>
<h2><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Examples</h2>
<p>The easiest way to start constructing new hash functions is by calling
<code>LSHFunction</code> with the following syntax:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="hashfn = LSHFunction(similarity function,
                     number of hash functions to generate;
                     [LSH family-specific keyword arguments])
"><pre><code>hashfn = LSHFunction(similarity function,
                     number of hash functions to generate;
                     [LSH family-specific keyword arguments])
</code></pre></div>
<p>For example, the following snippet generates 10 locality-sensitive hash
functions (bundled together into a single <code>SimHash</code> ) for cosine similarity:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using LSHFunctions;

julia&gt; hashfn = LSHFunction(cossim, 10);

julia&gt; n_hashes(hashfn)
10

julia&gt; similarity(hashfn)
cossim
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> LSHFunctions;

julia<span class="pl-k">&gt;</span> hashfn <span class="pl-k">=</span> <span class="pl-c1">LSHFunction</span>(cossim, <span class="pl-c1">10</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">n_hashes</span>(hashfn)
<span class="pl-c1">10</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">similarity</span>(hashfn)
cossim</pre></div>
<p>You can hash inputs by calling <code>hashfn()</code>:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; x = randn(128);

julia&gt; x_hashes = hashfn(x);
"><pre>julia<span class="pl-k">&gt;</span> x <span class="pl-k">=</span> <span class="pl-c1">randn</span>(<span class="pl-c1">128</span>);

julia<span class="pl-k">&gt;</span> x_hashes <span class="pl-k">=</span> <span class="pl-c1">hashfn</span>(x);</pre></div>
<p>For more details, <a href="https://kernelmethod.github.io/LSHFunctions.jl/dev/" rel="nofollow">check out the LSHFunctions.jl
documentation</a>.</p>
</article></div>