<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-seepjl" class="anchor" aria-hidden="true" href="#seepjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Seep.jl</h1>
<p>Because not everybody's data is big.</p>
<h2><a id="user-content-basics-anodes-arrays-and-instances" class="anchor" aria-hidden="true" href="#basics-anodes-arrays-and-instances"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Basics: ANodes, Arrays, and Instances</h2>
<p>Seep builds and evaluates computational flow graphs in julia.  A computational
flow graph (CFG) is a directed acyclic graph where nodes represent values and
edges represent data dependencies.  It is similar to the Single Static
Assignment form of a program used by compilers, but there is no control flow.
All nodes are evaluated each time the graph is executed.</p>
<p>The CFG is first defined as an <em>abstract graph</em> using <code>ANodes</code>.  The <em>abstract
graph</em> specifies the size and shape of each variable, how they are connected,
and how each value will be computed.  It does not allocate storage or define
the order of operations.</p>
<p>One or more  <em>instances</em> of may be constructed from the <em>abstract graph</em>.  Each
<em>instance</em> is a julia function that evaluates the CFG described by the
<em>abstract graph</em>.  Storage for the values of each <code>ANode</code> is allocated
statically when the <em>instance</em> is constructed.  In addition to being callable
as a function, the <em>instance</em> provides access to the Arrays on which it
operates.</p>
<h3><a id="user-content-creating-the-abstract-graph" class="anchor" aria-hidden="true" href="#creating-the-abstract-graph"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Creating The Abstract Graph</h3>
<p><em>Abstract graphs</em> are built from <code>ANode</code>s.  The first <code>ANode</code> defined is always
an input <code>ANode</code> (the constructors of all of the other types require <code>ANode</code>s
as arguments).  Input <code>ANode</code>s are build by calling the <code>ANode(name::String, dims::Int...)</code> constructor.  The name is optional, but it helps to make any
code you will write using the instance a bit cleaner and sometimes also faster.</p>
<p>To get started, let's create an <code>ANode</code> to hold a single element, and call it <code>x</code>.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> x <span class="pl-k">=</span> <span class="pl-c1">ANode</span>(<span class="pl-s"><span class="pl-pds">"</span>x<span class="pl-pds">"</span></span>, <span class="pl-c1">1</span>)</pre></div>
<p>Since it's often useful to create a <code>ANode</code> and assign it to a variable of the
same name, there is a macro called <code>@named</code> to do exactly that.  Let's create
another <code>ANode</code> named <code>y</code> using the <code>@named</code> macro.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">@named</span> y <span class="pl-k">=</span> <span class="pl-c1">ANode</span>(<span class="pl-c1">1</span>)</pre></div>
<p><code>ANode</code>s can be treated as if they were arrays in many cases.  You can't index
them (i.e. <code>x[1]</code> won't work) since they're abstract, but you can perform
arithmetic on them.  The result of operating on <code>ANode</code>s is always a new
<code>ANode</code> that represents the computed value.</p>
<p>Let's create a couple more <code>ANode</code>s with compute simple functions of <code>x</code> and <code>y</code>.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">@named</span> <span class="pl-k">begin</span>
  a <span class="pl-k">=</span> x <span class="pl-k">+</span> y
  b <span class="pl-k">=</span> <span class="pl-c1">2</span>a <span class="pl-k">-</span> <span class="pl-c1">log</span>(y)
<span class="pl-k">end</span></pre></div>
<p>This creates 4 new <code>ANode</code>s: <code>a</code>, <code>2a</code>, <code>log(y)</code>, and <code>b</code>.  Only <code>a</code> and <code>b</code>
are named and assigned to variables in the workspace.  <code>2a</code> and <code>log(y)</code> are
referenced by <code>b</code>, but not otherwise visible.</p>
<h3><a id="user-content-instantiating-the-graph" class="anchor" aria-hidden="true" href="#instantiating-the-graph"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Instantiating the Graph</h3>
<p>So far, we've created six <code>ANode</code>s.  Let's instantiate the graph so we can use them.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> graph <span class="pl-k">=</span> <span class="pl-c1">instance</span>(a, b)</pre></div>
<p>Each <code>ANode</code> passed to the instance constructor will be evaluated exactly once
when the instance is evaluated.  All of the nodes they reference (e.g. <code>2a</code> and
<code>log(y)</code>) will also be evaluated as necessary.</p>
<h3><a id="user-content-evaluating-the-graph" class="anchor" aria-hidden="true" href="#evaluating-the-graph"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Evaluating the Graph</h3>
<p>To use the graph, we first have to provide values for the input nodes.  The arrays
that were allocated when the <em>instance</em> was created are available as fields of the
<em>instance</em>.  Let's populate the input <code>ANode</code>s' backing arrays with some data.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> graph<span class="pl-k">.</span>x[<span class="pl-c1">1</span>] <span class="pl-k">=</span> <span class="pl-c1">1</span>
julia<span class="pl-k">&gt;</span> graph<span class="pl-k">.</span>y[<span class="pl-c1">1</span>] <span class="pl-k">=</span> <span class="pl-c1">2</span></pre></div>
<p>Now that the inputs are populated, we can evaluate the <em>instance</em> by calling it
as a function.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">graph</span>()</pre></div>
<p>Finally, we can use the results by inspecting the arrays where the results are stored.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">println</span>(graph<span class="pl-k">.</span>a)
julia<span class="pl-k">&gt;</span> <span class="pl-c1">println</span>(graph<span class="pl-k">.</span>b)</pre></div>
<h2><a id="user-content-more-information" class="anchor" aria-hidden="true" href="#more-information"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>More Information</h2>
<p>This has been a short introduction that shows only the most basic features of
Seep.  For mor information, see the <a href="doc/">doc/</a> directory in the root of the
source tree.</p>
<ul>
<li><a href="doc/operators.md">Supported Operations on <code>ANodes</code></a></li>
<li><a href="doc/autodiff.md">Automatic Differentiation (and Gradient Descent)</a></li>
<li><a href="doc/pool.md">Memory Pools</a></li>
<li><a href="doc/conv2.md">Convolution and Pooling</a></li>
</ul>
</article></div>