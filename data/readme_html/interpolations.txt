<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-interpolations" class="anchor" aria-hidden="true" href="#interpolations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Interpolations</h1>
<p><a href="https://travis-ci.org/JuliaMath/Interpolations.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/d24992bcd2724deea70e57fe8e633dbae013b59dc475561aff300617df5e8cc6/68747470733a2f2f7472617669732d63692e6f72672f4a756c69614d6174682f496e746572706f6c6174696f6e732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaMath/Interpolations.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="http://juliamath.github.io/Interpolations.jl/latest" rel="nofollow"><img src="https://camo.githubusercontent.com/56f8252ba8e9d3f0b810769543f77823d2fe031ce560d4c2d69fb1fcad800383/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6c61746573742d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-latest-blue.svg" style="max-width:100%;"></a></p>
<p><strong>NEWS</strong> This package is currently under new maintainership. Please be patient while the new maintainer learns the new package. If you would like to volunteer, please mention this in an issue.</p>
<p><strong>NEWS</strong> v0.9 was a breaking release. See the <a href="NEWS.md">news</a> for details on how to update.</p>
<p>This package implements a variety of interpolation schemes for the
Julia language.  It has the goals of ease-of-use, broad algorithmic
support, and exceptional performance.</p>
<p>Currently this package's support is best
for <a href="https://en.wikipedia.org/wiki/B-spline" rel="nofollow">B-splines</a> and also
supports irregular grids.  However, the API has been designed with
intent to support more options. Initial support for Lanczos
interpolation was recently added. Pull-requests are more than welcome!
It should be noted that the API may continue to evolve over time.</p>
<p>Other interpolation packages for Julia include:</p>
<ul>
<li><a href="https://github.com/kbarbary/Dierckx.jl">Dierckx.jl</a></li>
<li><a href="https://github.com/sisl/GridInterpolations.jl">GridInterpolations.jl</a></li>
<li><a href="https://github.com/floswald/ApproXD.jl">ApproXD.jl</a></li>
</ul>
<p>Some of these packages support methods that <code>Interpolations</code> does not,
so if you can't find what you need here, check one of them or submit a
pull request here.</p>
<p>At the bottom of this page, you can find a "performance shootout"
among these methods (as well as SciPy's <code>RegularGridInterpolator</code>).</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>Just</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Pkg
Pkg.add(&quot;Interpolations&quot;)
"><pre><span class="pl-k">using</span> Pkg
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>Interpolations<span class="pl-pds">"</span></span>)</pre></div>
<p>from the Julia REPL.</p>
<h2><a id="user-content-example-usage" class="anchor" aria-hidden="true" href="#example-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example Usage</h2>
<p>Create a grid <code>xs</code> and an array <code>A</code> of values to be interpolated</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="xs = 1:0.2:5
f(x) = log(x)
A = [f(x) for x in xs]
"><pre>xs <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">0.2</span><span class="pl-k">:</span><span class="pl-c1">5</span>
<span class="pl-en">f</span>(x) <span class="pl-k">=</span> <span class="pl-c1">log</span>(x)
A <span class="pl-k">=</span> [<span class="pl-c1">f</span>(x) <span class="pl-k">for</span> x <span class="pl-k">in</span> xs]</pre></div>
<p>Create linear interpolation object without extrapolation</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="interp_linear = LinearInterpolation(xs, A)
interp_linear(3) # exactly log(3)
interp_linear(3.1) # approximately log(3.1)
interp_linear(0.9) # outside grid: error
"><pre>interp_linear <span class="pl-k">=</span> <span class="pl-c1">LinearInterpolation</span>(xs, A)
<span class="pl-c1">interp_linear</span>(<span class="pl-c1">3</span>) <span class="pl-c"><span class="pl-c">#</span> exactly log(3)</span>
<span class="pl-c1">interp_linear</span>(<span class="pl-c1">3.1</span>) <span class="pl-c"><span class="pl-c">#</span> approximately log(3.1)</span>
<span class="pl-c1">interp_linear</span>(<span class="pl-c1">0.9</span>) <span class="pl-c"><span class="pl-c">#</span> outside grid: error</span></pre></div>
<p>Create linear interpolation object with extrapolation</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="interp_linear_extrap = LinearInterpolation(xs, A,extrapolation_bc=Line()) 
interp_linear_extrap(0.9) # outside grid: linear extrapolation
"><pre>interp_linear_extrap <span class="pl-k">=</span> <span class="pl-c1">LinearInterpolation</span>(xs, A,extrapolation_bc<span class="pl-k">=</span><span class="pl-c1">Line</span>()) 
<span class="pl-c1">interp_linear_extrap</span>(<span class="pl-c1">0.9</span>) <span class="pl-c"><span class="pl-c">#</span> outside grid: linear extrapolation</span></pre></div>
<h2><a id="user-content-performance-shootout" class="anchor" aria-hidden="true" href="#performance-shootout"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Performance shootout</h2>
<p>In the <code>perf</code> directory, you can find a script that tests
interpolation with several different packages.  We consider
interpolation in 1, 2, 3, and 4 dimensions, with orders 0
(<code>Constant</code>), 1 (<code>Linear</code>), and 2 (<code>Quadratic</code>).  Methods include
Interpolations <code>BSpline</code> (<code>IBSpline</code>) and <code>Gridded</code> (<code>IGridded</code>),
methods from the <a href="https://github.com/timholy/Grid.jl">Grid.jl</a>
package, methods from the
<a href="https://github.com/kbarbary/Dierckx.jl">Dierckx.jl</a> package, methods
from the
<a href="https://github.com/sisl/GridInterpolations.jl">GridInterpolations.jl</a>
package (<code>GI</code>), methods from the
<a href="https://github.com/floswald/ApproXD.jl">ApproXD.jl</a> package, and
methods from SciPy's <code>RegularGridInterpolator</code> accessed via <code>PyCall</code>
(<code>Py</code>).  All methods
are tested using an <code>Array</code> with approximately <code>10^6</code> elements, and
the interpolation task is simply to visit each grid point.</p>
<p>First, let's look at the two B-spline algorithms, <code>IBspline</code> and
<code>Grid</code>.  Here's a plot of the "construction time," the amount of time
it takes to initialize an interpolation object (smaller is better):</p>
<p><a target="_blank" rel="noopener noreferrer" href="perf/constructionB.png"><img src="perf/constructionB.png" alt="construction" style="max-width:100%;"></a></p>
<p>The construction time is negligible until you get to second order
(quadratic); that's because quadratic is the lowest order requiring
the solution of tridiagonal systems upon construction.  The solvers
used by Interpolations are much faster than the approach taken in
Grid.</p>
<p>Now let's examine the interpolation performance.  Here we'll measure
"throughput", the number of interpolations performed per second
(larger is better):</p>
<p><a target="_blank" rel="noopener noreferrer" href="perf/rateB.png"><img src="perf/rateB.png" alt="throughput" style="max-width:100%;"></a></p>
<p>Once again, Interpolations wins on every test, by a factor that ranges
from 7 to 13.</p>
<p>Now let's look at the "gridded" methods that allow irregular spacing
along each axis.  For some of these, we compare interpolation performance in
both "vectorized" form <code>itp[xvector, yvector]</code> and in "scalar" form
<code>for y in yvector, x in xvector; val = itp[x,y]; end</code>.</p>
<p>First, construction time (smaller is better):</p>
<p><a target="_blank" rel="noopener noreferrer" href="perf/constructionG.png"><img src="perf/constructionG.png" alt="construction" style="max-width:100%;"></a></p>
<p>Missing dots indicate cases that were not tested, or not supported by
the package.  (For construction, differences between "vec" and
"scalar" are just noise, since no interpolation is performed during
construction.)  The only package that takes appreciable construction
time is Dierckx.</p>
<p>And here's "throughput" (larger is better). To ensure we can see the
wide range of scales, here we use "square-root" scaling of the y-axis:</p>
<p><a target="_blank" rel="noopener noreferrer" href="perf/rateG.png"><img src="perf/rateG.png" alt="throughput" style="max-width:100%;"></a></p>
<p>For 1d, the "Dierckx scalar" and "GI" tests were interrupted because
they ran more than 20 seconds (far longer than any other test).  Both
performed much better in 2d, interestingly.  You can see that
Interpolations wins in every case, sometimes by a very large margin.</p>
<h2><a id="user-content-contributing" class="anchor" aria-hidden="true" href="#contributing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Contributing</h2>
<p>Work is very much in progress, but and help is always welcome. If you want to help out but don't know where to start, take a look at issue <a href="https://github.com/JuliaMath/Interpolations.jl/issues/5">#5 - our feature wishlist</a> =) There is also some <a href="http://juliamath.github.io/Interpolations.jl/latest/devdocs/" rel="nofollow">developer documentation</a> that may help you understand how things work internally.</p>
<p>Contributions in any form are appreciated, but the best pull requests come with tests!</p>
</article></div>