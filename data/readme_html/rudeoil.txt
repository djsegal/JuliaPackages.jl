<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><p>This package is no longer maintained</p>
<h1><a id="user-content-rudeoil" class="anchor" aria-hidden="true" href="#rudeoil"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>RudeOil</h1>
<p>Crude package to easily interact with docker and docker-machine. This package is meant to be make
interactions with docker scriptable from Julia.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span> Create a vm, create an ubuntu container (implicitly), echo hello world</span>
<span class="pl-c1">activate</span>(<span class="pl-s"><span class="pl-pds">"</span>mymachine<span class="pl-pds">"</span></span>) <span class="pl-k">do</span> vm
  result <span class="pl-k">=</span> vm <span class="pl-k">|&gt;</span> <span class="pl-s"><span class="pl-pds">`</span>echo "hello world"<span class="pl-pds">`</span></span> <span class="pl-k">|&gt;</span> readchomp
  <span class="pl-c1">@assert</span> result <span class="pl-k">==</span> <span class="pl-s"><span class="pl-pds">"</span>hello world<span class="pl-pds">"</span></span>
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> Create an image</span>
<span class="pl-c1">activate</span>(<span class="pl-s"><span class="pl-pds">"</span>mymachine<span class="pl-pds">"</span></span>) <span class="pl-k">do</span> vm
  myimage <span class="pl-k">=</span> <span class="pl-c1">image</span>(<span class="pl-s"><span class="pl-pds">"</span>myimage<span class="pl-pds">"</span></span>, base<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>ubuntu:14.04<span class="pl-pds">"</span></span>, packages<span class="pl-k">=</span>[<span class="pl-s"><span class="pl-pds">"</span>python<span class="pl-pds">"</span></span>])
  vm <span class="pl-k">|&gt;</span> myimage <span class="pl-k">|&gt;</span> run
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> Create an image, instantiate it and run stuff in it</span>
<span class="pl-c1">activate</span>(<span class="pl-s"><span class="pl-pds">"</span>mymachine<span class="pl-pds">"</span></span>) <span class="pl-k">do</span> vm
  myimage <span class="pl-k">=</span> <span class="pl-c1">image</span>(<span class="pl-s"><span class="pl-pds">"</span>myimage<span class="pl-pds">"</span></span>, base<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>ubuntu:14.04<span class="pl-pds">"</span></span>, packages<span class="pl-k">=</span>[<span class="pl-s"><span class="pl-pds">"</span>python<span class="pl-pds">"</span></span>])
  vm <span class="pl-k">|&gt;</span> myimage <span class="pl-k">|&gt;</span> <span class="pl-s"><span class="pl-pds">`</span>python -c "print('hello world')"<span class="pl-pds">`</span></span><span class="pl-k">|&gt;</span> run
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> Create an image, create a container, do stuff</span>
<span class="pl-c1">activate</span>(<span class="pl-s"><span class="pl-pds">"</span>mymachine<span class="pl-pds">"</span></span>) <span class="pl-k">do</span> vm
  myimage <span class="pl-k">=</span> <span class="pl-c1">image</span>(<span class="pl-s"><span class="pl-pds">"</span>myimage<span class="pl-pds">"</span></span>, volume<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>/scripts<span class="pl-pds">"</span></span>)
  container <span class="pl-k">=</span> <span class="pl-c1">Container</span>(volume<span class="pl-k">=</span>(<span class="pl-s"><span class="pl-pds">"</span>hello<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>/scripts<span class="pl-pds">"</span></span>))
  <span class="pl-c1">mkdir</span>(<span class="pl-s"><span class="pl-pds">"</span>hello<span class="pl-pds">"</span></span>)

  vm <span class="pl-k">|&gt;</span> myimage <span class="pl-k">|&gt;</span> container <span class="pl-k">|&gt;</span> <span class="pl-c1">setenv</span>(<span class="pl-s"><span class="pl-pds">`</span>touch world<span class="pl-pds">`</span></span>; dir<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>/scripts/<span class="pl-pds">"</span></span>) <span class="pl-k">|&gt;</span> run
  <span class="pl-c1">@assert</span> <span class="pl-c1">isfile</span>(<span class="pl-c1">joinpath</span>(<span class="pl-s"><span class="pl-pds">"</span>hello<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>world<span class="pl-pds">"</span></span>))
<span class="pl-k">end</span></pre></div>
</article></div>