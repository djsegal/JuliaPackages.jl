<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-tcpinstruments" class="anchor" aria-hidden="true" href="#tcpinstruments"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>TcpInstruments</h1>
<p><a href="https://www.repostatus.org/#active" rel="nofollow"><img src="https://camo.githubusercontent.com/2261082c77808ea734741b12e535d02d23c4101f6b8dfec807f4ddc5ef2eeec0/68747470733a2f2f7777772e7265706f7374617475732e6f72672f6261646765732f6c61746573742f6163746976652e737667" alt="Project Status: Active â€“ The project has reached a stable, usable state and is being actively developed." data-canonical-src="https://www.repostatus.org/badges/latest/active.svg" style="max-width:100%;"></a>
<a href="https://travis-ci.com/github/Orchard-Ultrasound-Innovation/TcpInstruments.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/f328f171b903e664a5d5821ff006c27358c4f1def70b752c90922194b9a50692/68747470733a2f2f7472617669732d63692e636f6d2f4f7263686172642d556c747261736f756e642d496e6e6f766174696f6e2f546370496e737472756d656e74732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/Orchard-Ultrasound-Innovation/TcpInstruments.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="LICENSE"><img src="https://camo.githubusercontent.com/bbf49a2eb96e6f718803f2493bd7aa3baae61abb09b7f8fc185a94e08c504dc6/687474703a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d627269676874677265656e2e7376673f7374796c653d666c6174" alt="License" data-canonical-src="http://img.shields.io/badge/license-MIT-brightgreen.svg?style=flat" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/Orchard-Ultrasound-Innovation/TcpInstruments.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/6fe7727004d707e2256f79d33dbe7bb06985c98af0ec28a0db57a36317997b58/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f4f7263686172642d556c747261736f756e642d496e6e6f766174696f6e2f546370496e737472756d656e74732e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/Orchard-Ultrasound-Innovation/TcpInstruments.jl/badge.svg?branch=master" style="max-width:100%;"></a>
<a href="https://orchard-ultrasound-innovation.github.io/TcpInstruments.jl/dev/" rel="nofollow"><img src="https://camo.githubusercontent.com/56f8252ba8e9d3f0b810769543f77823d2fe031ce560d4c2d69fb1fcad800383/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6c61746573742d626c75652e737667" alt="Documentation Dev" data-canonical-src="https://img.shields.io/badge/docs-latest-blue.svg" style="max-width:100%;"></a>
<a href="https://github.com/invenia/BlueStyle"><img src="https://camo.githubusercontent.com/c18fbaa52d94d16b90b19701fc90d289b8a5bb920c74c79bab200b14e75420a4/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c75652d3434393564312e737667" alt="Code Style: Blue" data-canonical-src="https://img.shields.io/badge/code%20style-blue-4495d1.svg" style="max-width:100%;"></a>
<a href="https://github.com/Orchard-Ultrasound-Innovation/TcpInstruments.jl"><img src="https://camo.githubusercontent.com/6d59906c0bac48c3b9372726c2bc5bc3425d1354d15e2831e8993b6a043d4284/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f636f6d6d6974732d73696e63652f4f7263686172642d556c747261736f756e642d496e6e6f766174696f6e2f546370496e737472756d656e74732e6a6c2f76302e382e322e737667" alt="GitHub commits since tagged version" data-canonical-src="https://img.shields.io/github/commits-since/Orchard-Ultrasound-Innovation/TcpInstruments.jl/v0.8.2.svg" style="max-width:100%;"></a></p>
<p>Control common lab equipment via SCPI over Ethernet and specifically not be dependent on the NIVISA library that other similar packages often have depended on.</p>
<p>This package is based on code from <a href="https://ci.appveyor.com/project/iuliancioarca/GenericInstruments-jl" rel="nofollow">GenericInstruments.jl</a>
which was again based on <a href="https://github.com/BBN-Q/Instruments.jl">Instruments.jl</a>.</p>
<p>SCPI is supported on almost all modern pieces of lab equipment and this code has during development been tested on the following devices:</p>
<ul class="contains-task-list">
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> Oscilloscope Keysight DSOX4034A</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> Oscilloscope Keysight DSOX4024A</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> Multimeter Keysight DMM34465A</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> Signal generator Keysight 33612A</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> Power supply Agilent E36312A</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> HV power supply SRS PS310 via Prologix GPIB to Ethernet adaptor</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> Power supply Versatile Power 100-10 XR</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> Impedance analyser Agilent 4294A</li>
</ul>
<details><summary>Installation</summary>
<p>TcpInstruments can be installed using the Julia package manager. From the Julia REPL, type <code>]</code> to enter the Pkg REPL mode and run</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="pkg&gt; add TcpInstruments
julia&gt; using TcpInstruments
julia&gt; ?
help&gt; Instrument
"><pre>pkg<span class="pl-k">&gt;</span> add TcpInstruments
julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> TcpInstruments
julia<span class="pl-k">&gt;</span> <span class="pl-k">?</span>
help<span class="pl-k">&gt;</span> Instrument</pre></div>
</details>
<details><summary>Autoinitialize - Storage of name-aliases and IP addresses.</summary>
<p>You can create a <code>~/.tcp_instruments.yml</code> file which stores the IP-address
and an optional name-alias for all your devices
in one easy-to-find place so they don't have to be hardcoded in scripts.</p>
<p>To create an example config file that can be edited to your needs run:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="create_config()
"><pre><code>create_config()
</code></pre></div>
<p>This will create a yaml file in your home directory: <code>~/.tcp_instruments.yml</code></p>
<p>This yaml file will be loaded everytime you use this package.</p>
<p>You can also create a project-specific config by creating
the config in your project root directory instead of your home
directory. You can do this with:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="create_config(pwd())
"><pre><code>create_config(pwd())
</code></pre></div>
<p>Once you have created a config file you can change it with</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="edit_config()
"><pre><code>edit_config()
</code></pre></div>
<p>Format of <code>.tcp_instruments.yml</code> file:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="{name-of-device}:
    address: &quot;{ip-address}&quot;

# GPIB Device connected with a prologix controller
{name-of-device}:
    gpib: {channel-number}
    address: &quot;{ip-address}&quot;
"><pre>{name<span class="pl-k">-</span>of<span class="pl-k">-</span>device}<span class="pl-k">:</span>
    address<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>{ip-address}<span class="pl-pds">"</span></span>

<span class="pl-c"><span class="pl-c">#</span> GPIB Device connected with a prologix controller</span>
{name<span class="pl-k">-</span>of<span class="pl-k">-</span>device}<span class="pl-k">:</span>
    gpib<span class="pl-k">:</span> {channel<span class="pl-k">-</span>number}
    address<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>{ip-address}<span class="pl-pds">"</span></span></pre></div>
<p>Let's create a new <code>.tcp_instruments.yml</code> file or ensure the two previous
devices are found in our <code>.tcp_instruments.yml</code> file</p>
<div class="highlight highlight-source-yaml position-relative" data-snippet-clipboard-copy-content="Keysight33612A:
    address: &quot;10.1.30.36&quot;
    alias: &quot;OleBigSG&quot;
SRSPS310:
    gpib: 2
    address: &quot;10.1.30.37:1234&quot;
"><pre><span class="pl-ent">Keysight33612A</span>:
    <span class="pl-ent">address</span>: <span class="pl-s"><span class="pl-pds">"</span>10.1.30.36<span class="pl-pds">"</span></span>
    <span class="pl-ent">alias</span>: <span class="pl-s"><span class="pl-pds">"</span>OleBigSG<span class="pl-pds">"</span></span>
<span class="pl-ent">SRSPS310</span>:
    <span class="pl-ent">gpib</span>: <span class="pl-c1">2</span>
    <span class="pl-ent">address</span>: <span class="pl-s"><span class="pl-pds">"</span>10.1.30.37:1234<span class="pl-pds">"</span></span></pre></div>
<p>Recompile the new config which is located in the current working directory</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="pkg&gt; activate .
julia&gt; using TcpInstruments
"><pre>pkg<span class="pl-k">&gt;</span> activate .
julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> TcpInstruments</pre></div>
<p>Each TcpInstruments will first look for a config in the current directory and if none is found it will look in the home directory.</p>
<p>The two devices from above can now be initialized as follows:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="sg = initialize(Keysight33612A)
p = initialize(SRSPS310)
"><pre>sg <span class="pl-k">=</span> <span class="pl-c1">initialize</span>(Keysight33612A)
p <span class="pl-k">=</span> <span class="pl-c1">initialize</span>(SRSPS310)</pre></div>
<p><strong>Cool tip</strong>: Since we specified an alias for the signal generator we can initialize it this way as well:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="sg = initialize(OleBigSG)
"><pre>sg <span class="pl-k">=</span> <span class="pl-c1">initialize</span>(OleBigSG)</pre></div>
<p>(No dashes, spaces or other special characters in alias names, treat them like variables, because they are.)</p>
</details>
<h1><a id="user-content-using-this-library" class="anchor" aria-hidden="true" href="#using-this-library"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Using this library</h1>
<p>To use any device you must first initialize it.</p>
<p>handler = initialize({name-of-device}, "{ip-address}")</p>
<p>The ip address can also have a port. If no port is specified,
5025 is used by default.</p>
<p>Thus <code>"10.1.30.36"</code> defaults to <code>"10.1.30.36:5025"</code></p>
<p>To see the list of commands for this device, look up this device
in the documentation or in the repl: <code>help&gt; {name-of-device}</code></p>
<h2><a id="user-content-utility-commands" class="anchor" aria-hidden="true" href="#utility-commands"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Utility Commands</h2>
<details><summary>scan_network()</summary>
<p>To see a list of all available ip addresses and devices:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; scan_network()
3-element Vector{Pair{String, B} where B}:
 &quot;10.1.30.28:????&quot; =&gt; &quot;&quot;
 &quot;10.1.30.34:5025&quot; =&gt; &quot;Keysight Technologies,E36312A,MY59002391,2.1.0-1.0.4-1.12&quot;
 &quot;10.1.30.38:5025&quot; =&gt; &quot;Keysight Technologies,34465A,MY59008389,A.03.01-03.15-03.01-00.52-03-02&quot;
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">scan_network</span>()
<span class="pl-c1">3</span><span class="pl-k">-</span>element Vector{Pair{String, B} <span class="pl-k">where</span> B}<span class="pl-k">:</span>
 <span class="pl-s"><span class="pl-pds">"</span>10.1.30.28:????<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>
 <span class="pl-s"><span class="pl-pds">"</span>10.1.30.34:5025<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>Keysight Technologies,E36312A,MY59002391,2.1.0-1.0.4-1.12<span class="pl-pds">"</span></span>
 <span class="pl-s"><span class="pl-pds">"</span>10.1.30.38:5025<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>Keysight Technologies,34465A,MY59008389,A.03.01-03.15-03.01-00.52-03-02<span class="pl-pds">"</span></span></pre></div>
</details>
<h2><a id="user-content-units" class="anchor" aria-hidden="true" href="#units"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Units</h2>
<details><summary>This package uses Unitful.</summary> 
<p>In order to control certain devices
it is required to run:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Unitful
"><pre><span class="pl-k">using</span> Unitful</pre></div>
<p>Commands such as:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="set_voltage_offset(instr, 0)
"><pre><span class="pl-c1">set_voltage_offset</span>(instr, <span class="pl-c1">0</span>)</pre></div>
<p>will not work you must specify the units:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="set_voltage_offset(instr, 0u&quot;V&quot;)
"><pre><span class="pl-c1">set_voltage_offset</span>(instr, <span class="pl-c1">0</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>V<span class="pl-pds">"</span></span>)</pre></div>
</details>
<h1><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Examples</h1>
<h2><a id="user-content-signal-generator" class="anchor" aria-hidden="true" href="#signal-generator"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Signal Generator</h2>
<details><summary>Keysight33612A</summary>
<h3><a id="user-content-continious-sine-wave-with-a-signal-generator-in-this-case-the-keysight-33612a" class="anchor" aria-hidden="true" href="#continious-sine-wave-with-a-signal-generator-in-this-case-the-keysight-33612a"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Continious sine wave with a signal generator (in this case the Keysight 33612A):</h3>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="sg = initialize(Keysight33612A, &quot;10.1.30.36&quot;)
set_mode_cw(sg)               # Set to continuous waveform mode
set_function(sg, &quot;SIN&quot;)
set_frequency(sg, 1u&quot;kHz&quot;)
set_amplitude(sg, 0.1u&quot;V&quot;)
set_voltage_offset(sg, 100u&quot;mV&quot;)
enable_output(sg)             # sine output starts here
"><pre>sg <span class="pl-k">=</span> <span class="pl-c1">initialize</span>(Keysight33612A, <span class="pl-s"><span class="pl-pds">"</span>10.1.30.36<span class="pl-pds">"</span></span>)
<span class="pl-c1">set_mode_cw</span>(sg)               <span class="pl-c"><span class="pl-c">#</span> Set to continuous waveform mode</span>
<span class="pl-c1">set_function</span>(sg, <span class="pl-s"><span class="pl-pds">"</span>SIN<span class="pl-pds">"</span></span>)
<span class="pl-c1">set_frequency</span>(sg, <span class="pl-c1">1</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>kHz<span class="pl-pds">"</span></span>)
<span class="pl-c1">set_amplitude</span>(sg, <span class="pl-c1">0.1</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>V<span class="pl-pds">"</span></span>)
<span class="pl-c1">set_voltage_offset</span>(sg, <span class="pl-c1">100</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>mV<span class="pl-pds">"</span></span>)
<span class="pl-c1">enable_output</span>(sg)             <span class="pl-c"><span class="pl-c">#</span> sine output starts here</span></pre></div>
</details>
<h2><a id="user-content-power-supplies" class="anchor" aria-hidden="true" href="#power-supplies"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Power Supplies</h2>
<details><summary>VersatilePower</summary>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="# Initialize automatically puts this power supply in remote mode
pwr = initialize(VersatilePower)

set_voltage(pwr, 20u&quot;V&quot;)
set_current_limit(pwr, 4u&quot;A&quot;)
enable_output(pwr)

# Closes connection as with other devices but also puts this
# device back into local mode
terminate(pwr)
"><pre><span class="pl-c"><span class="pl-c">#</span> Initialize automatically puts this power supply in remote mode</span>
pwr <span class="pl-k">=</span> <span class="pl-c1">initialize</span>(VersatilePower)

<span class="pl-c1">set_voltage</span>(pwr, <span class="pl-c1">20</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>V<span class="pl-pds">"</span></span>)
<span class="pl-c1">set_current_limit</span>(pwr, <span class="pl-c1">4</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>A<span class="pl-pds">"</span></span>)
<span class="pl-c1">enable_output</span>(pwr)

<span class="pl-c"><span class="pl-c">#</span> Closes connection as with other devices but also puts this</span>
<span class="pl-c"><span class="pl-c">#</span> device back into local mode</span>
<span class="pl-c1">terminate</span>(pwr)</pre></div>
</details>
<details><summary>AgilentE36312A</summary>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="pwr = initialize(AgilentE36312A)

set_channel(pwr, 1)
set_current_limit(pwr, 1)
set_voltage(pwr, 2u&quot;V&quot;)
enable_output(pwr) # Enables output on channel 1

set_channel(pwr, 2)
set_voltage(pwr, 10u&quot;V&quot;)
enable_output(pwr) # Enables output on channel 2

set_channel(pwr, 3)
set_voltage(pwr, 10u&quot;V&quot;)

set_voltage(pwr, 0u&quot;V&quot;; chan=1) # Changes voltage of channel 1

get_voltage(pwr) # Get voltage channel 3
get_voltage(pwr; chan=2)
get_voltage(pwr; chan=1)

enable_output(pwr) # Enables output on channel 3
"><pre>pwr <span class="pl-k">=</span> <span class="pl-c1">initialize</span>(AgilentE36312A)

<span class="pl-c1">set_channel</span>(pwr, <span class="pl-c1">1</span>)
<span class="pl-c1">set_current_limit</span>(pwr, <span class="pl-c1">1</span>)
<span class="pl-c1">set_voltage</span>(pwr, <span class="pl-c1">2</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>V<span class="pl-pds">"</span></span>)
<span class="pl-c1">enable_output</span>(pwr) <span class="pl-c"><span class="pl-c">#</span> Enables output on channel 1</span>

<span class="pl-c1">set_channel</span>(pwr, <span class="pl-c1">2</span>)
<span class="pl-c1">set_voltage</span>(pwr, <span class="pl-c1">10</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>V<span class="pl-pds">"</span></span>)
<span class="pl-c1">enable_output</span>(pwr) <span class="pl-c"><span class="pl-c">#</span> Enables output on channel 2</span>

<span class="pl-c1">set_channel</span>(pwr, <span class="pl-c1">3</span>)
<span class="pl-c1">set_voltage</span>(pwr, <span class="pl-c1">10</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>V<span class="pl-pds">"</span></span>)

<span class="pl-c1">set_voltage</span>(pwr, <span class="pl-c1">0</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>V<span class="pl-pds">"</span></span>; chan<span class="pl-k">=</span><span class="pl-c1">1</span>) <span class="pl-c"><span class="pl-c">#</span> Changes voltage of channel 1</span>

<span class="pl-c1">get_voltage</span>(pwr) <span class="pl-c"><span class="pl-c">#</span> Get voltage channel 3</span>
<span class="pl-c1">get_voltage</span>(pwr; chan<span class="pl-k">=</span><span class="pl-c1">2</span>)
<span class="pl-c1">get_voltage</span>(pwr; chan<span class="pl-k">=</span><span class="pl-c1">1</span>)

<span class="pl-c1">enable_output</span>(pwr) <span class="pl-c"><span class="pl-c">#</span> Enables output on channel 3</span></pre></div>
</details>
<details><summary>GPIB Power Supply (SRSPS310) used with Prologix Controller</summary>
<h3><a id="user-content-initialize-prologix-channel" class="anchor" aria-hidden="true" href="#initialize-prologix-channel"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Initialize Prologix Channel</h3>
<p>To a initialize a device that is connected with a prologix
controller you must specify what prologix channel the device
is on. At this moment the prologix adapter is the only supported
GPIB to Ethernet adapter.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="p = initialize(SRSPS310, &quot;10.1.30.37:1234&quot;; GPIB_ID=2)
"><pre>p <span class="pl-k">=</span> <span class="pl-c1">initialize</span>(SRSPS310, <span class="pl-s"><span class="pl-pds">"</span>10.1.30.37:1234<span class="pl-pds">"</span></span>; GPIB_ID<span class="pl-k">=</span><span class="pl-c1">2</span>)</pre></div>
<p>If you don't know the channel you can figure it out and configure
it manually:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using TcpInstruments
julia&gt; p = initialize(SRSPS310, &quot;10.1.30.37:1234&quot;)
julia&gt; scan_prologix(p)
2 =&gt; &quot;PS310&quot;
julia&gt; set_prologix(p, 2)
julia&gt; get_prologix(p)
2
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> TcpInstruments
julia<span class="pl-k">&gt;</span> p <span class="pl-k">=</span> <span class="pl-c1">initialize</span>(SRSPS310, <span class="pl-s"><span class="pl-pds">"</span>10.1.30.37:1234<span class="pl-pds">"</span></span>)
julia<span class="pl-k">&gt;</span> <span class="pl-c1">scan_prologix</span>(p)
<span class="pl-c1">2</span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>PS310<span class="pl-pds">"</span></span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">set_prologix</span>(p, <span class="pl-c1">2</span>)
julia<span class="pl-k">&gt;</span> <span class="pl-c1">get_prologix</span>(p)
<span class="pl-c1">2</span></pre></div>
<h3><a id="user-content-using-srsps310-power-supply" class="anchor" aria-hidden="true" href="#using-srsps310-power-supply"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Using SRSPS310 Power Supply</h3>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="p = initialize(SRSPS310, &quot;10.1.30.37:1234&quot;; GPIB_ID=2)
set_voltage_limit(p, 1250u&quot;V&quot;)
set_voltage(p, 1250u&quot;V&quot;)
set_current_limit(p, 0.021u&quot;A&quot;) # equivalent to set_current_limit(p, 21u&quot;mA&quot;)
enable_output(p)
"><pre>p <span class="pl-k">=</span> <span class="pl-c1">initialize</span>(SRSPS310, <span class="pl-s"><span class="pl-pds">"</span>10.1.30.37:1234<span class="pl-pds">"</span></span>; GPIB_ID<span class="pl-k">=</span><span class="pl-c1">2</span>)
<span class="pl-c1">set_voltage_limit</span>(p, <span class="pl-c1">1250</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>V<span class="pl-pds">"</span></span>)
<span class="pl-c1">set_voltage</span>(p, <span class="pl-c1">1250</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>V<span class="pl-pds">"</span></span>)
<span class="pl-c1">set_current_limit</span>(p, <span class="pl-c1">0.021</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>A<span class="pl-pds">"</span></span>) <span class="pl-c"><span class="pl-c">#</span> equivalent to set_current_limit(p, 21u"mA")</span>
<span class="pl-c1">enable_output</span>(p)</pre></div>
</details>
<h2><a id="user-content-oscilloscopes" class="anchor" aria-hidden="true" href="#oscilloscopes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Oscilloscopes</h2>
<details><summary>AgilentDSOX4034A</summary>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="scope = initialize(AgilentDSOX4034A)

# Turn on Low Pass Filter 25MHz
lpf_on(scope)

# See that low pass filter is on
get_lpf_state(scope)

# Turn Off Low Pass Filter 25MHz
lpf_off(scope)

# See that low pass filter is off
get_lpf_state(scope)


set_impedance_1Mohm(scope)
@info get_impedance(scope)

set_impedance_50ohm(scope)
@info get_impedance(scope)

# Get data from channel 1
data = get_data(scope, 1)

# Get data from channel 1, 2, &amp; 4
# Returns 3 element array of data from each channel
multi_data = get_data(scope, [1,2, 4])


using Plots

plot(data)

# Plots channel 1
plot(multi_data[1])

# Plots channel 2
plot(multi_data[2])

# Plots channel 4
plot(multi_data[3])

# Saves data to a file
save(multi_data)
"><pre>scope <span class="pl-k">=</span> <span class="pl-c1">initialize</span>(AgilentDSOX4034A)

<span class="pl-c"><span class="pl-c">#</span> Turn on Low Pass Filter 25MHz</span>
<span class="pl-c1">lpf_on</span>(scope)

<span class="pl-c"><span class="pl-c">#</span> See that low pass filter is on</span>
<span class="pl-c1">get_lpf_state</span>(scope)

<span class="pl-c"><span class="pl-c">#</span> Turn Off Low Pass Filter 25MHz</span>
<span class="pl-c1">lpf_off</span>(scope)

<span class="pl-c"><span class="pl-c">#</span> See that low pass filter is off</span>
<span class="pl-c1">get_lpf_state</span>(scope)


<span class="pl-c1">set_impedance_1Mohm</span>(scope)
<span class="pl-c1">@info</span> <span class="pl-c1">get_impedance</span>(scope)

<span class="pl-c1">set_impedance_50ohm</span>(scope)
<span class="pl-c1">@info</span> <span class="pl-c1">get_impedance</span>(scope)

<span class="pl-c"><span class="pl-c">#</span> Get data from channel 1</span>
data <span class="pl-k">=</span> <span class="pl-c1">get_data</span>(scope, <span class="pl-c1">1</span>)

<span class="pl-c"><span class="pl-c">#</span> Get data from channel 1, 2, &amp; 4</span>
<span class="pl-c"><span class="pl-c">#</span> Returns 3 element array of data from each channel</span>
multi_data <span class="pl-k">=</span> <span class="pl-c1">get_data</span>(scope, [<span class="pl-c1">1</span>,<span class="pl-c1">2</span>, <span class="pl-c1">4</span>])


<span class="pl-k">using</span> Plots

<span class="pl-c1">plot</span>(data)

<span class="pl-c"><span class="pl-c">#</span> Plots channel 1</span>
<span class="pl-c1">plot</span>(multi_data[<span class="pl-c1">1</span>])

<span class="pl-c"><span class="pl-c">#</span> Plots channel 2</span>
<span class="pl-c1">plot</span>(multi_data[<span class="pl-c1">2</span>])

<span class="pl-c"><span class="pl-c">#</span> Plots channel 4</span>
<span class="pl-c1">plot</span>(multi_data[<span class="pl-c1">3</span>])

<span class="pl-c"><span class="pl-c">#</span> Saves data to a file</span>
<span class="pl-c1">save</span>(multi_data)</pre></div>
<p>Additionally you can grab data from all open channels
(Let's say only channels 1 &amp; 2 are activated for now)</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="scope = initialize(AgilentDSOX4034A)
data = get_data(scope)    
"><pre>scope <span class="pl-k">=</span> <span class="pl-c1">initialize</span>(AgilentDSOX4034A)
data <span class="pl-k">=</span> <span class="pl-c1">get_data</span>(scope)    </pre></div>
<p>Since the only activated channels are now only 1 &amp; 2 this returns an array of waves (equivalent to `get_data(scope, [1,2]))</p>
<p>You can also plot multiple waves at once:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="plot(data)
"><pre><span class="pl-c1">plot</span>(data)</pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="examples/wave.png"><img src="examples/wave.png" alt="wave" style="max-width:100%;"></a></p>
</details>
<h2><a id="user-content-impedance-analyzers" class="anchor" aria-hidden="true" href="#impedance-analyzers"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Impedance Analyzers</h2>
<p>TODO: example with the Agilent4294A.</p>
<h2><a id="user-content-multiple-devices" class="anchor" aria-hidden="true" href="#multiple-devices"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Multiple devices</h2>
<p>Lets say you want to use a signal generator, power supply
and oscilloscope all at once.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using TcpInstruments
using Plots; plotly()

scope = initialize(AgilentDSOX4034A)
pwr   = initialize(VersatilePower)
sg    = initialize(Keysight33612A)

set_mode_cw(sg)
set_function(sg, &quot;SIN&quot;)
set_frequency(sg, 1000u&quot;Hz&quot;)
set_amplitude(sg, 0.1u&quot;A&quot;)
set_voltage_offset(sg, 0u&quot;V&quot;)
enable_output(sg)

set_voltage(pwr, 20u&quot;V&quot;)
set_current_limit(pwr, 4u&quot;A&quot;)
enable_output(pwr)

data_array = get_data(scope, [1,2])
plot(data_array)
"><pre><span class="pl-k">using</span> TcpInstruments
<span class="pl-k">using</span> Plots; <span class="pl-c1">plotly</span>()

scope <span class="pl-k">=</span> <span class="pl-c1">initialize</span>(AgilentDSOX4034A)
pwr   <span class="pl-k">=</span> <span class="pl-c1">initialize</span>(VersatilePower)
sg    <span class="pl-k">=</span> <span class="pl-c1">initialize</span>(Keysight33612A)

<span class="pl-c1">set_mode_cw</span>(sg)
<span class="pl-c1">set_function</span>(sg, <span class="pl-s"><span class="pl-pds">"</span>SIN<span class="pl-pds">"</span></span>)
<span class="pl-c1">set_frequency</span>(sg, <span class="pl-c1">1000</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>Hz<span class="pl-pds">"</span></span>)
<span class="pl-c1">set_amplitude</span>(sg, <span class="pl-c1">0.1</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>A<span class="pl-pds">"</span></span>)
<span class="pl-c1">set_voltage_offset</span>(sg, <span class="pl-c1">0</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>V<span class="pl-pds">"</span></span>)
<span class="pl-c1">enable_output</span>(sg)

<span class="pl-c1">set_voltage</span>(pwr, <span class="pl-c1">20</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>V<span class="pl-pds">"</span></span>)
<span class="pl-c1">set_current_limit</span>(pwr, <span class="pl-c1">4</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>A<span class="pl-pds">"</span></span>)
<span class="pl-c1">enable_output</span>(pwr)

data_array <span class="pl-k">=</span> <span class="pl-c1">get_data</span>(scope, [<span class="pl-c1">1</span>,<span class="pl-c1">2</span>])
<span class="pl-c1">plot</span>(data_array)</pre></div>
</article></div>