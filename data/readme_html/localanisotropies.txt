<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-localanisotropies" class="anchor" aria-hidden="true" href="#localanisotropies"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>LocalAnisotropies</h1>
<p><a href="https://github.com/rmcaixeta/LocalAnisotropies.jl/actions"><img src="https://camo.githubusercontent.com/9806b8d89643895beed0a4728aa5c5304366ea6b7f4908c01e443a26adfde5ca/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f776f726b666c6f772f7374617475732f726d636169786574612f4c6f63616c416e69736f74726f706965732e6a6c2f43493f7374796c653d666c61742d737175617265" alt="Build Status" data-canonical-src="https://img.shields.io/github/workflow/status/rmcaixeta/LocalAnisotropies.jl/CI?style=flat-square" style="max-width:100%;"></a> <a href="https://codecov.io/gh/rmcaixeta/LocalAnisotropies.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/9d4eecd4b14d68573f97e57e0e2a7f26f9dce38d0a6085ffab87e39eb71ecd85/68747470733a2f2f636f6465636f762e696f2f67682f726d636169786574612f4c6f63616c416e69736f74726f706965732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/rmcaixeta/LocalAnisotropies.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p align="center">
  <a target="_blank" rel="noopener noreferrer" href="imgs/00_intro.png"><img src="imgs/00_intro.png" width="300" style="max-width:100%;"></a>
</p>
<p align="center"><i>
  Local anisotropies ellipses extracted from reference data
</i></p>
<h2><a id="user-content-introduction" class="anchor" aria-hidden="true" href="#introduction"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Introduction</h2>
<p>This package deals with local anisotropies in geostatistics. It offers some solutions to extract them from a reference input. Then, it's possible to use the local anisotropies to create nonstationary spatial models, which can be used into estimation methods such as kriging. There are also some extra tools, like anisotropy interpolation and conversion to/between different rotation conventions. It is designed for 2-D and 3-D data and is developed to be used as an extension of <a href="https://github.com/JuliaEarth/GeoStats.jl"><code>GeoStats.jl</code></a> when dealing with nonstationarity of second order moments. A list of current implementations:</p>
<ul>
<li>Local anisotropies extraction methods:
<ul>
<li>Gradients</li>
<li>SVD / PCA <p></p></li>
</ul>
</li>
<li>Local anisotropies operations:
<ul>
<li>Interpolation of directional data (via quaternions)</li>
<li>Import/export/convert to different conventions</li>
<li>Unconventional local variography using local anisotropies <p></p></li>
</ul>
</li>
<li>Nonstationary spatial methods:
<ul>
<li>Moving windows</li>
<li>Kernel convolution</li>
<li>Spatial deformation <p></p></li>
</ul>
</li>
<li>Solvers adapted to these nonstationary spatial methods:
<ul>
<li>Kriging</li>
</ul>
</li>
</ul>
<p><strong>Warning</strong>: This package is still under (slow) development. Some of the implementations were not fully validated and may give inconsistent results. Debugging, contributions and suggestions are welcome.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>First, it is necessary to install Julia. Installation instructions for Windows, Linux and macOS are available <a href="https://julialang.org/downloads/platform/" rel="nofollow">here</a>.</p>
<p>To install the package: open the Julia REPL and then install the package with the following command. The <code>GeoStats.jl</code> and <code>Plots.jl</code> packages are installed together to run the usage example.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Pkg; Pkg.add([&quot;LocalAnisotropies&quot;,&quot;GeoStats&quot;,&quot;Plots&quot;])
"><pre><span class="pl-k">using</span> Pkg; Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>([<span class="pl-s"><span class="pl-pds">"</span>LocalAnisotropies<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>GeoStats<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>Plots<span class="pl-pds">"</span></span>])</pre></div>
<h2><a id="user-content-references" class="anchor" aria-hidden="true" href="#references"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>References</h2>
<h4><a id="user-content-introduction-to-local-anisotropies-extraction-methods" class="anchor" aria-hidden="true" href="#introduction-to-local-anisotropies-extraction-methods"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Introduction to local anisotropies extraction methods:</h4>
<p><a href="https://doi.org/10.1016/j.cageo.2015.05.015" rel="nofollow">Lillah &amp; Boisvert (2015)</a> Inference of locally varying anisotropy fields from diverse data sources</p>
<h4><a id="user-content-introduction-to-nonstationary-spatial-methods" class="anchor" aria-hidden="true" href="#introduction-to-nonstationary-spatial-methods"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Introduction to nonstationary spatial methods:</h4>
<p><a href="https://doi.org/10.1201/9781420072884-13" rel="nofollow">Sampson (2010)</a> Constructions for Nonstationary Spatial Processes</p>
<h4><a id="user-content-moving-windows" class="anchor" aria-hidden="true" href="#moving-windows"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Moving windows:</h4>
<p><a href="https://doi.org/10.1016/0960-1686(90)90508-K" rel="nofollow">Haas (1990)</a> Kriging and automated variogram modeling within a moving window <br>
<a href="https://doi.org/10.1007/s11004-005-7310-y" rel="nofollow">Stroet &amp; Snepvangers (2005)</a> Mapping curvilinear structures with local anisotropy kriging</p>
<h4><a id="user-content-kernel-convolution" class="anchor" aria-hidden="true" href="#kernel-convolution"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Kernel convolution:</h4>
<p><a href="https://doi.org/10.1023/A:1009666805688" rel="nofollow">Higdon (1998)</a> A process-convolution approach to modelling temperatures in the North Atlantic Ocean <br>
<a href="https://doi.org/10.1016/j.spasta.2016.01.002" rel="nofollow">Fouedjio et al. (2016)</a> A generalized convolution model and estimation for non-stationary random functions</p>
<h4><a id="user-content-spatial-deformation" class="anchor" aria-hidden="true" href="#spatial-deformation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Spatial deformation:</h4>
<p><a href="https://doi.org/10.1080/01621459.1992.10475181" rel="nofollow">Sampson &amp; Guttorp (1992)</a> Nonparametric estimation of nonstationary spatial covariance structure <br>
<a href="https://era.library.ualberta.ca/items/5acca59f-6e97-414d-ad13-34c8f97ce223" rel="nofollow">Boisvert (2010)</a> Geostatistics with locally varying anisotropy</p>
<h2><a id="user-content-documentation" class="anchor" aria-hidden="true" href="#documentation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Documentation</h2>
<p>The documentation of the main functions are available as <a href="https://juliahub.com/docs/LocalAnisotropies" rel="nofollow">docstrings</a>
Check below an usage example that illustrate the package applications.</p>
<h2><a id="user-content-usage-example" class="anchor" aria-hidden="true" href="#usage-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage example</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="# load libraries for the example
using LocalAnisotropies
using GeoStats
using Plots
using Random
Random.seed!(1234)

# create a reference scenario for tests
D = georef((P=[25-abs(0.2*i^2-j) for i in -10:9, j in 1:20],))
S = sample(D, 80, replace=false)
G = CartesianGrid(20,20)

# create an estimation problem
P = EstimationProblem(S, G, :P)

# plot reference scenario and samples extracted for further estimations
splot = plot(G)
splot = plot!(S)
plot(plot(D),splot)
"><pre><span class="pl-c"><span class="pl-c">#</span> load libraries for the example</span>
<span class="pl-k">using</span> LocalAnisotropies
<span class="pl-k">using</span> GeoStats
<span class="pl-k">using</span> Plots
<span class="pl-k">using</span> Random
Random<span class="pl-k">.</span><span class="pl-c1">seed!</span>(<span class="pl-c1">1234</span>)

<span class="pl-c"><span class="pl-c">#</span> create a reference scenario for tests</span>
D <span class="pl-k">=</span> <span class="pl-c1">georef</span>((P<span class="pl-k">=</span>[<span class="pl-c1">25</span><span class="pl-k">-</span><span class="pl-c1">abs</span>(<span class="pl-c1">0.2</span><span class="pl-k">*</span>i<span class="pl-k">^</span><span class="pl-c1">2</span><span class="pl-k">-</span>j) <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-k">-</span><span class="pl-c1">10</span><span class="pl-k">:</span><span class="pl-c1">9</span>, j <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">20</span>],))
S <span class="pl-k">=</span> <span class="pl-c1">sample</span>(D, <span class="pl-c1">80</span>, replace<span class="pl-k">=</span><span class="pl-c1">false</span>)
G <span class="pl-k">=</span> <span class="pl-c1">CartesianGrid</span>(<span class="pl-c1">20</span>,<span class="pl-c1">20</span>)

<span class="pl-c"><span class="pl-c">#</span> create an estimation problem</span>
P <span class="pl-k">=</span> <span class="pl-c1">EstimationProblem</span>(S, G, <span class="pl-c1">:P</span>)

<span class="pl-c"><span class="pl-c">#</span> plot reference scenario and samples extracted for further estimations</span>
splot <span class="pl-k">=</span> <span class="pl-c1">plot</span>(G)
splot <span class="pl-k">=</span> <span class="pl-c1">plot!</span>(S)
<span class="pl-c1">plot</span>(<span class="pl-c1">plot</span>(D),splot)</pre></div>
<p align="center">
  <a target="_blank" rel="noopener noreferrer" href="imgs/01_input.png"><img src="imgs/01_input.png" style="max-width:100%;"></a>
</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="# get local anisotropies using gradients of a 8x8 radius window
rawlpars = localanisotropies(Gradients, D, :P, 8)
plot(D, alpha=0.6, colorbar=false)
plot!(rawlpars,D)
"><pre><span class="pl-c"><span class="pl-c">#</span> get local anisotropies using gradients of a 8x8 radius window</span>
rawlpars <span class="pl-k">=</span> <span class="pl-c1">localanisotropies</span>(Gradients, D, <span class="pl-c1">:P</span>, <span class="pl-c1">8</span>)
<span class="pl-c1">plot</span>(D, alpha<span class="pl-k">=</span><span class="pl-c1">0.6</span>, colorbar<span class="pl-k">=</span><span class="pl-c1">false</span>)
<span class="pl-c1">plot!</span>(rawlpars,D)</pre></div>
<p align="center">
  <a target="_blank" rel="noopener noreferrer" href="imgs/02_localaniso.png"><img src="imgs/02_localaniso.png" style="max-width:100%;"></a>
</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="# average 10 nearest local anisotropies
searcher = KNearestSearch(G, 10)
lpars = smooth(rawlpars, searcher)

# rescale magnitude of range2 to between 0.25 and 1.0
rescale_magnitude!(lpars, r2=(0.25,1.0))

# set reference axis to Y; range will be fixed in that direction
reference_magnitude!(lpars, :Y)

plot(D, alpha=0.6, colorbar=false)
plot!(lpars,D)
"><pre><span class="pl-c"><span class="pl-c">#</span> average 10 nearest local anisotropies</span>
searcher <span class="pl-k">=</span> <span class="pl-c1">KNearestSearch</span>(G, <span class="pl-c1">10</span>)
lpars <span class="pl-k">=</span> <span class="pl-c1">smooth</span>(rawlpars, searcher)

<span class="pl-c"><span class="pl-c">#</span> rescale magnitude of range2 to between 0.25 and 1.0</span>
<span class="pl-c1">rescale_magnitude!</span>(lpars, r2<span class="pl-k">=</span>(<span class="pl-c1">0.25</span>,<span class="pl-c1">1.0</span>))

<span class="pl-c"><span class="pl-c">#</span> set reference axis to Y; range will be fixed in that direction</span>
<span class="pl-c1">reference_magnitude!</span>(lpars, <span class="pl-c1">:Y</span>)

<span class="pl-c1">plot</span>(D, alpha<span class="pl-k">=</span><span class="pl-c1">0.6</span>, colorbar<span class="pl-k">=</span><span class="pl-c1">false</span>)
<span class="pl-c1">plot!</span>(lpars,D)</pre></div>
<p align="center">
  <a target="_blank" rel="noopener noreferrer" href="imgs/03_localaniso_smooth.png"><img src="imgs/03_localaniso_smooth.png" style="max-width:100%;"></a>
</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="# plot(lpars, data) will only work for 2D spatial data
# for 3D or custom visualizations, it's possible to export it to VTK
to_vtk(&quot;ellipses&quot;, D, lpars)
# below the file &quot;ellipses.vtu&quot; loaded in Paraview using TensorGlyph (disable extract eigenvalues)
"><pre><span class="pl-c"><span class="pl-c">#</span> plot(lpars, data) will only work for 2D spatial data</span>
<span class="pl-c"><span class="pl-c">#</span> for 3D or custom visualizations, it's possible to export it to VTK</span>
<span class="pl-c1">to_vtk</span>(<span class="pl-s"><span class="pl-pds">"</span>ellipses<span class="pl-pds">"</span></span>, D, lpars)
<span class="pl-c"><span class="pl-c">#</span> below the file "ellipses.vtu" loaded in Paraview using TensorGlyph (disable extract eigenvalues)</span></pre></div>
<p align="center">
  <a target="_blank" rel="noopener noreferrer" href="imgs/03.2_localaniso_vtk.png"><img src="imgs/03.2_localaniso_vtk.png" style="max-width:100%;"></a>
</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="# pass local anisotropies to samples
spars = nnpars(lpars, D, S)

# do an unconventional variography along local Y axis
expvario = localvariography(S, spars, :P, tol=2, maxlag=20, nlags=20, axis=:Y)
plot(expvario)
γ = GaussianVariogram(sill=31., range=8.)
plot!(γ)
"><pre><span class="pl-c"><span class="pl-c">#</span> pass local anisotropies to samples</span>
spars <span class="pl-k">=</span> <span class="pl-c1">nnpars</span>(lpars, D, S)

<span class="pl-c"><span class="pl-c">#</span> do an unconventional variography along local Y axis</span>
expvario <span class="pl-k">=</span> <span class="pl-c1">localvariography</span>(S, spars, <span class="pl-c1">:P</span>, tol<span class="pl-k">=</span><span class="pl-c1">2</span>, maxlag<span class="pl-k">=</span><span class="pl-c1">20</span>, nlags<span class="pl-k">=</span><span class="pl-c1">20</span>, axis<span class="pl-k">=</span><span class="pl-c1">:Y</span>)
<span class="pl-c1">plot</span>(expvario)
γ <span class="pl-k">=</span> <span class="pl-c1">GaussianVariogram</span>(sill<span class="pl-k">=</span><span class="pl-c1">31.</span>, range<span class="pl-k">=</span><span class="pl-c1">8.</span>)
<span class="pl-c1">plot!</span>(γ)</pre></div>
<p align="center">
  <a target="_blank" rel="noopener noreferrer" href="imgs/03.3_localaniso_vario.png"><img src="imgs/03.3_localaniso_vario.png" style="max-width:100%;"></a>
</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="# kriging using moving windows method
MW = LocalKriging(:P =&gt; (variogram=γ, localaniso=lpars, method=:MovingWindows))
s1 = solve(P, MW)
plot(s1,[:P])
"><pre><span class="pl-c"><span class="pl-c">#</span> kriging using moving windows method</span>
MW <span class="pl-k">=</span> <span class="pl-c1">LocalKriging</span>(<span class="pl-c1">:P</span> <span class="pl-k">=&gt;</span> (variogram<span class="pl-k">=</span>γ, localaniso<span class="pl-k">=</span>lpars, method<span class="pl-k">=</span><span class="pl-c1">:MovingWindows</span>))
s1 <span class="pl-k">=</span> <span class="pl-c1">solve</span>(P, MW)
<span class="pl-c1">plot</span>(s1,[<span class="pl-c1">:P</span>])</pre></div>
<p align="center">
  <a target="_blank" rel="noopener noreferrer" href="imgs/04_mw.png"><img src="imgs/04_mw.png" style="max-width:100%;"></a>
</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="# kriging using kernel convolution method
KC = LocalKriging(:P =&gt; (variogram=γ, localaniso=lpars, method=:KernelConvolution))
s2 = solve(P, KC)
plot(s2,[:P])
"><pre><span class="pl-c"><span class="pl-c">#</span> kriging using kernel convolution method</span>
KC <span class="pl-k">=</span> <span class="pl-c1">LocalKriging</span>(<span class="pl-c1">:P</span> <span class="pl-k">=&gt;</span> (variogram<span class="pl-k">=</span>γ, localaniso<span class="pl-k">=</span>lpars, method<span class="pl-k">=</span><span class="pl-c1">:KernelConvolution</span>))
s2 <span class="pl-k">=</span> <span class="pl-c1">solve</span>(P, KC)
<span class="pl-c1">plot</span>(s2,[<span class="pl-c1">:P</span>])</pre></div>
<p align="center">
  <a target="_blank" rel="noopener noreferrer" href="imgs/05_kc.png"><img src="imgs/05_kc.png" style="max-width:100%;"></a>
</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="# deform space using kernel variogram as dissimilarity input
Sd1, Dd1 = deformspace(S, G, lpars, KernelVariogram, γ, anchors=1500)
Pd1 = EstimationProblem(Sd1, Dd1, :P)
γ1 = GaussianVariogram(sill=25., range=25.)
s3 = solve(Pd1, Kriging(:P =&gt; (variogram=γ1,)))
plot(plot(to_3d(s3),[:P]), plot(georef(values(s3),G),[:P],colorbar=false))
"><pre><span class="pl-c"><span class="pl-c">#</span> deform space using kernel variogram as dissimilarity input</span>
Sd1, Dd1 <span class="pl-k">=</span> <span class="pl-c1">deformspace</span>(S, G, lpars, KernelVariogram, γ, anchors<span class="pl-k">=</span><span class="pl-c1">1500</span>)
Pd1 <span class="pl-k">=</span> <span class="pl-c1">EstimationProblem</span>(Sd1, Dd1, <span class="pl-c1">:P</span>)
γ1 <span class="pl-k">=</span> <span class="pl-c1">GaussianVariogram</span>(sill<span class="pl-k">=</span><span class="pl-c1">25.</span>, range<span class="pl-k">=</span><span class="pl-c1">25.</span>)
s3 <span class="pl-k">=</span> <span class="pl-c1">solve</span>(Pd1, <span class="pl-c1">Kriging</span>(<span class="pl-c1">:P</span> <span class="pl-k">=&gt;</span> (variogram<span class="pl-k">=</span>γ1,)))
<span class="pl-c1">plot</span>(<span class="pl-c1">plot</span>(<span class="pl-c1">to_3d</span>(s3),[<span class="pl-c1">:P</span>]), <span class="pl-c1">plot</span>(<span class="pl-c1">georef</span>(<span class="pl-c1">values</span>(s3),G),[<span class="pl-c1">:P</span>],colorbar<span class="pl-k">=</span><span class="pl-c1">false</span>))</pre></div>
<p align="center">
  <a target="_blank" rel="noopener noreferrer" href="imgs/06_sd_vd.png"><img src="imgs/06_sd_vd.png" style="max-width:100%;"></a>
</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="# deform space based on a graph built with average anisotropic distances
# of the ten nearest data; do variography in multidimensional space
LDa = graph(S, G, lpars, AnisoDistance, searcher)
Sd2, Dd2 = deformspace(LDa, GraphDistance, anchors=1500)
γ2 = GaussianVariogram(sill=35., range=18.)

# traditional kriging in the new multidimensional space
Pd2 = EstimationProblem(Sd2, Dd2, :P)
s4 = solve(Pd2, Kriging(:P =&gt; (variogram=γ2,)))
plot(plot(to_3d(s4),[:P]), plot(georef(values(s4),G),[:P],colorbar=false))
"><pre><span class="pl-c"><span class="pl-c">#</span> deform space based on a graph built with average anisotropic distances</span>
<span class="pl-c"><span class="pl-c">#</span> of the ten nearest data; do variography in multidimensional space</span>
LDa <span class="pl-k">=</span> <span class="pl-c1">graph</span>(S, G, lpars, AnisoDistance, searcher)
Sd2, Dd2 <span class="pl-k">=</span> <span class="pl-c1">deformspace</span>(LDa, GraphDistance, anchors<span class="pl-k">=</span><span class="pl-c1">1500</span>)
γ2 <span class="pl-k">=</span> <span class="pl-c1">GaussianVariogram</span>(sill<span class="pl-k">=</span><span class="pl-c1">35.</span>, range<span class="pl-k">=</span><span class="pl-c1">18.</span>)

<span class="pl-c"><span class="pl-c">#</span> traditional kriging in the new multidimensional space</span>
Pd2 <span class="pl-k">=</span> <span class="pl-c1">EstimationProblem</span>(Sd2, Dd2, <span class="pl-c1">:P</span>)
s4 <span class="pl-k">=</span> <span class="pl-c1">solve</span>(Pd2, <span class="pl-c1">Kriging</span>(<span class="pl-c1">:P</span> <span class="pl-k">=&gt;</span> (variogram<span class="pl-k">=</span>γ2,)))
<span class="pl-c1">plot</span>(<span class="pl-c1">plot</span>(<span class="pl-c1">to_3d</span>(s4),[<span class="pl-c1">:P</span>]), <span class="pl-c1">plot</span>(<span class="pl-c1">georef</span>(<span class="pl-c1">values</span>(s4),G),[<span class="pl-c1">:P</span>],colorbar<span class="pl-k">=</span><span class="pl-c1">false</span>))</pre></div>
<p align="center">
  <a target="_blank" rel="noopener noreferrer" href="imgs/07_sd_gad.png"><img src="imgs/07_sd_gad.png" style="max-width:100%;"></a>
</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="# deform space based on a graph built with kernel variogram of the ten
# nearest data; do variography in multidimensional space
LDv = graph(S, G, lpars, KernelVariogram, γ, searcher)
Sd3, Dd3 = deformspace(LDv, GraphDistance, anchors=1500)
γ3 = GaussianVariogram(sill=9., range=30.)

# traditional kriging in the new multidimensional space
Pd3 = EstimationProblem(Sd3, Dd3, :P)
s5 = solve(Pd3, Kriging(:P =&gt; (variogram=γ3,)))
plot(plot(to_3d(s5),[:P]), plot(georef(values(s5),G),[:P],colorbar=false))
"><pre><span class="pl-c"><span class="pl-c">#</span> deform space based on a graph built with kernel variogram of the ten</span>
<span class="pl-c"><span class="pl-c">#</span> nearest data; do variography in multidimensional space</span>
LDv <span class="pl-k">=</span> <span class="pl-c1">graph</span>(S, G, lpars, KernelVariogram, γ, searcher)
Sd3, Dd3 <span class="pl-k">=</span> <span class="pl-c1">deformspace</span>(LDv, GraphDistance, anchors<span class="pl-k">=</span><span class="pl-c1">1500</span>)
γ3 <span class="pl-k">=</span> <span class="pl-c1">GaussianVariogram</span>(sill<span class="pl-k">=</span><span class="pl-c1">9.</span>, range<span class="pl-k">=</span><span class="pl-c1">30.</span>)

<span class="pl-c"><span class="pl-c">#</span> traditional kriging in the new multidimensional space</span>
Pd3 <span class="pl-k">=</span> <span class="pl-c1">EstimationProblem</span>(Sd3, Dd3, <span class="pl-c1">:P</span>)
s5 <span class="pl-k">=</span> <span class="pl-c1">solve</span>(Pd3, <span class="pl-c1">Kriging</span>(<span class="pl-c1">:P</span> <span class="pl-k">=&gt;</span> (variogram<span class="pl-k">=</span>γ3,)))
<span class="pl-c1">plot</span>(<span class="pl-c1">plot</span>(<span class="pl-c1">to_3d</span>(s5),[<span class="pl-c1">:P</span>]), <span class="pl-c1">plot</span>(<span class="pl-c1">georef</span>(<span class="pl-c1">values</span>(s5),G),[<span class="pl-c1">:P</span>],colorbar<span class="pl-k">=</span><span class="pl-c1">false</span>))</pre></div>
<p align="center">
  <a target="_blank" rel="noopener noreferrer" href="imgs/08_sd_gvd.png"><img src="imgs/08_sd_gvd.png" style="max-width:100%;"></a>
</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="γomni = GaussianVariogram(sill=35., range=11.)
OK = Kriging(:P =&gt; (variogram=γomni, maxneighbors=20))
s0 = solve(P, OK)
plot(s0,[:P])
"><pre>γomni <span class="pl-k">=</span> <span class="pl-c1">GaussianVariogram</span>(sill<span class="pl-k">=</span><span class="pl-c1">35.</span>, range<span class="pl-k">=</span><span class="pl-c1">11.</span>)
OK <span class="pl-k">=</span> <span class="pl-c1">Kriging</span>(<span class="pl-c1">:P</span> <span class="pl-k">=&gt;</span> (variogram<span class="pl-k">=</span>γomni, maxneighbors<span class="pl-k">=</span><span class="pl-c1">20</span>))
s0 <span class="pl-k">=</span> <span class="pl-c1">solve</span>(P, OK)
<span class="pl-c1">plot</span>(s0,[<span class="pl-c1">:P</span>])</pre></div>
<p align="center">
  <a target="_blank" rel="noopener noreferrer" href="imgs/09_ok.png"><img src="imgs/09_ok.png" style="max-width:100%;"></a>
</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="# comparison of the different estimates
mse(a,b) = sum((a .- b) .^ 2)/length(b)
solvers = [&quot;OK&quot;,&quot;MW&quot;,&quot;KC&quot;,&quot;SD1&quot;,&quot;SD2&quot;,&quot;SD3&quot;]
errors  = [mse(x[:P],D[:P]) for x in [s0,s1,s2,s3,s4,s5]]
bar(solvers,errors,legend=false,ylabel=&quot;Mean squared error&quot;,xlabel=&quot;Estimation method&quot;)
"><pre><span class="pl-c"><span class="pl-c">#</span> comparison of the different estimates</span>
<span class="pl-en">mse</span>(a,b) <span class="pl-k">=</span> <span class="pl-c1">sum</span>((a <span class="pl-k">.-</span> b) <span class="pl-k">.^</span> <span class="pl-c1">2</span>)<span class="pl-k">/</span><span class="pl-c1">length</span>(b)
solvers <span class="pl-k">=</span> [<span class="pl-s"><span class="pl-pds">"</span>OK<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>MW<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>KC<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>SD1<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>SD2<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>SD3<span class="pl-pds">"</span></span>]
errors  <span class="pl-k">=</span> [<span class="pl-c1">mse</span>(x[<span class="pl-c1">:P</span>],D[<span class="pl-c1">:P</span>]) <span class="pl-k">for</span> x <span class="pl-k">in</span> [s0,s1,s2,s3,s4,s5]]
<span class="pl-c1">bar</span>(solvers,errors,legend<span class="pl-k">=</span><span class="pl-c1">false</span>,ylabel<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Mean squared error<span class="pl-pds">"</span></span>,xlabel<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Estimation method<span class="pl-pds">"</span></span>)</pre></div>
<p align="center">
  <a target="_blank" rel="noopener noreferrer" href="imgs/10_comp.png"><img src="imgs/10_comp.png" style="max-width:100%;"></a>
</p>
<p>Some extra tools to work with local anisotropies:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="# import external local anisotropies in GSLIB convention
dummy = georef((az=1:10, r1=1:10, r2=1:10), PointSet(rand(2,10)))
pars  = localanisotropies(dummy, [:az], [:r1,:r2], :GSLIB)

# interpolate local anisotropies into a coarser grid
G_ = CartesianGrid((10,10),(0.5,0.5),(2.0,2.0))
lpars_ = idwpars(lpars, searcher, G_, power=2.0)

# convert between different rotation conventions
angs1 = convertangles([30,30,30], :GSLIB, :Datamine)
angs2 = convertangles.(pars.rotation, :GSLIB)
"><pre><span class="pl-c"><span class="pl-c">#</span> import external local anisotropies in GSLIB convention</span>
dummy <span class="pl-k">=</span> <span class="pl-c1">georef</span>((az<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>, r1<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>, r2<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>), <span class="pl-c1">PointSet</span>(<span class="pl-c1">rand</span>(<span class="pl-c1">2</span>,<span class="pl-c1">10</span>)))
pars  <span class="pl-k">=</span> <span class="pl-c1">localanisotropies</span>(dummy, [<span class="pl-c1">:az</span>], [<span class="pl-c1">:r1</span>,<span class="pl-c1">:r2</span>], <span class="pl-c1">:GSLIB</span>)

<span class="pl-c"><span class="pl-c">#</span> interpolate local anisotropies into a coarser grid</span>
G_ <span class="pl-k">=</span> <span class="pl-c1">CartesianGrid</span>((<span class="pl-c1">10</span>,<span class="pl-c1">10</span>),(<span class="pl-c1">0.5</span>,<span class="pl-c1">0.5</span>),(<span class="pl-c1">2.0</span>,<span class="pl-c1">2.0</span>))
lpars_ <span class="pl-k">=</span> <span class="pl-c1">idwpars</span>(lpars, searcher, G_, power<span class="pl-k">=</span><span class="pl-c1">2.0</span>)

<span class="pl-c"><span class="pl-c">#</span> convert between different rotation conventions</span>
angs1 <span class="pl-k">=</span> <span class="pl-c1">convertangles</span>([<span class="pl-c1">30</span>,<span class="pl-c1">30</span>,<span class="pl-c1">30</span>], <span class="pl-c1">:GSLIB</span>, <span class="pl-c1">:Datamine</span>)
angs2 <span class="pl-k">=</span> <span class="pl-c1">convertangles</span>.(pars<span class="pl-k">.</span>rotation, <span class="pl-c1">:GSLIB</span>)</pre></div>
</article></div>