<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-wandbmacrosjl" class="anchor" aria-hidden="true" href="#wandbmacrosjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>WandbMacros.jl</h1>
<p dir="auto">Convenient Julia macros for logging to <a href="wandb.ai">weights and biases (Wandb)</a> dashboard.</p>
<p dir="auto">The macros provide a Julian way of interfacing with Wandb's Python API via <a href="https://github.com/JuliaPy/PyCall.jl">PyCall</a>. The functionality of each macro is transparent and obvious.</p>
<h2 dir="auto"><a id="user-content-installation-instructions" class="anchor" aria-hidden="true" href="#installation-instructions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation instructions</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Pkg
Pkg.add(&quot;WandbMacros&quot;)"><pre><span class="pl-k">using</span> Pkg
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>WandbMacros<span class="pl-pds">"</span></span>)</pre></div>
<h2 dir="auto"><a id="user-content-quick-start" class="anchor" aria-hidden="true" href="#quick-start"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Quick Start</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using WandbMacros  # Automatically installs wandb (if not already installed) if PyCall.conda is true, else raises a prompt to install it.

@wandbinit project=&quot;Project1&quot; name=&quot;Run1&quot;  # Specify any keyword arguments that you would pass to wandb.init() in Python.

@wandbconfig seed=42 learning_rate=0.001 network_size=[64,32]  # Specify the config dictionary. Equivalent to wandb.config.update({&quot;seed&quot;: 42, &quot;learning_rate&quot;: 0.001, &quot;network_size&quot;: [64,32]}, allow_val_change=True) in Python.

@wandbsave &quot;file1.txt&quot;  # Equivalent to wandb.save(&quot;file1.txt&quot;) in Python

@wandblog loss=0.1 accuracy=0.91 Validation/accuracy=0.75 step=100  # Equivalent to wandb.log({&quot;loss&quot;:1, &quot;accuracy&quot;:0.91, &quot;Validation/accuracy&quot;:0.75}, step=100) in Python. `step` is an optional and a reserved keyword.

@wandbfinish  # equivalent to wandb.finish() in Python
"><pre><span class="pl-k">using</span> WandbMacros  <span class="pl-c"><span class="pl-c">#</span> Automatically installs wandb (if not already installed) if PyCall.conda is true, else raises a prompt to install it.</span>

<span class="pl-c1">@wandbinit</span> project<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Project1<span class="pl-pds">"</span></span> name<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Run1<span class="pl-pds">"</span></span>  <span class="pl-c"><span class="pl-c">#</span> Specify any keyword arguments that you would pass to wandb.init() in Python.</span>

<span class="pl-c1">@wandbconfig</span> seed<span class="pl-k">=</span><span class="pl-c1">42</span> learning_rate<span class="pl-k">=</span><span class="pl-c1">0.001</span> network_size<span class="pl-k">=</span>[<span class="pl-c1">64</span>,<span class="pl-c1">32</span>]  <span class="pl-c"><span class="pl-c">#</span> Specify the config dictionary. Equivalent to wandb.config.update({"seed": 42, "learning_rate": 0.001, "network_size": [64,32]}, allow_val_change=True) in Python.</span>

<span class="pl-c1">@wandbsave</span> <span class="pl-s"><span class="pl-pds">"</span>file1.txt<span class="pl-pds">"</span></span>  <span class="pl-c"><span class="pl-c">#</span> Equivalent to wandb.save("file1.txt") in Python</span>

<span class="pl-c1">@wandblog</span> loss<span class="pl-k">=</span><span class="pl-c1">0.1</span> accuracy<span class="pl-k">=</span><span class="pl-c1">0.91</span> Validation<span class="pl-k">/</span>accuracy<span class="pl-k">=</span><span class="pl-c1">0.75</span> step<span class="pl-k">=</span><span class="pl-c1">100</span>  <span class="pl-c"><span class="pl-c">#</span> Equivalent to wandb.log({"loss":1, "accuracy":0.91, "Validation/accuracy":0.75}, step=100) in Python. `step` is an optional and a reserved keyword.</span>

<span class="pl-c1">@wandbfinish</span>  <span class="pl-c"><span class="pl-c">#</span> equivalent to wandb.finish() in Python</span>
</pre></div>
<h2 dir="auto"><a id="user-content-pro-tips" class="anchor" aria-hidden="true" href="#pro-tips"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Pro tips</h2>
<ol dir="auto">
<li>
<p dir="auto"><code>using WandbMacros</code> also exports the PyCall object <code>wandb=pyimport("wandb")</code>, which can be used to call Wandb functions that are not covered by the macros provided in this package.</p>
</li>
<li>
<p dir="auto"><code>@wandbinit</code>, <code>@wandbconfig</code> and <code>@wanbdlog</code> work like Julia's <a href="https://docs.julialang.org/en/v1/stdlib/Logging/" rel="nofollow"><code>@info</code> macro</a>. This allows for some powerful functionality:</p>
<ul dir="auto">
<li>Suppose you have the config parameters stored in a Julia dictionary named <code>config_dict</code> and it has keys of type <code>Symbol</code>, then you can splat the values by doing <code>@wandbconfig config_dict...</code>. You can also specify additional key-value pairs while splatting e.g., <code>@wandbconfig param1=100 config_dict...</code>. Similar functionality is available for <code>@wandblog</code> and <code>@wandbinit</code>.</li>
<li>If you have a julia variable named <code>loss</code>, then instead of logging it using <code>@wandblog loss=loss</code>, you can simply do <code>@wandblog loss</code>. This can be combined with other ways of specifying the arguments e.g., <code>@wandblog accuracy=0.1 loss foo=x some_dict...</code>.</li>
</ul>
</li>
<li>
<p dir="auto">To run <a href="https://docs.wandb.ai/guides/track/launch" rel="nofollow">multiple instances of wandb</a> in a process, do <code>run1 = @wandbinit project="project1" name="run1" reinit=true</code> and close the instance by calling <code>@wandfinish run1</code>.</p>
</li>
<li>
<p dir="auto">Wandb logging can be disabled entirely (without commenting out the code) by setting environment variable <code>JULIA_NO_WANDB=true</code>, and enabled again by either unsetting the environment variable or setting it to <code>JULIA_NO_WANDB=false</code>. The environment variable can be set within the code using <code>ENV["JULIA_NO_WANDB"]=true</code>.</p>
</li>
</ol>
<h2 dir="auto"><a id="user-content-known-issues" class="anchor" aria-hidden="true" href="#known-issues"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Known Issues</h2>
<h3 dir="auto"><a id="user-content-on-windows" class="anchor" aria-hidden="true" href="#on-windows"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>On Windows</h3>
<p dir="auto"><code>wandb.init()</code> with PyCall is known to crash on Windows, unless you specify a keyword argument <code>settings=wandb.Settings(start_method="thread")</code>. But no worries! <code>@wandbinit</code> macro handles it automatically for you.</p>
</article></div>