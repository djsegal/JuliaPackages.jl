<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-weaklyhardjl" class="anchor" aria-hidden="true" href="#weaklyhardjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>WeaklyHard.jl</h1>
<p dir="auto"><a href="https://github.com/NilsVreman/WeaklyHard.jl/actions"><img src="https://github.com/NilsVreman/WeaklyHard.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/NilsVreman/WeaklyHard.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/aa60361bec8131be8feb3b642e06c4cb5e173132b37eaf90c06f5747ba860109/68747470733a2f2f636f6465636f762e696f2f67682f4e696c735672656d616e2f5765616b6c79486172642e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/NilsVreman/WeaklyHard.jl/branch/main/graph/badge.svg" style="max-width: 100%;"></a>
<a href="https://NilsVreman.github.io/WeaklyHard.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://NilsVreman.github.io/WeaklyHard.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a></p>
<p dir="auto">A toolbox for analysing weakly-hard constraints in Julia.</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">To install, in the Julia REPL:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Pkg; Pkg.add(&quot;WeaklyHard&quot;)"><pre><span class="pl-k">using</span> Pkg; Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>WeaklyHard<span class="pl-pds">"</span></span>)</pre></div>
<h2 dir="auto"><a id="user-content-documentation" class="anchor" aria-hidden="true" href="#documentation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Documentation</h2>
<p dir="auto">All functions have docstrings which can be viewed from the REPL, using for example <code>?build_automaton</code>.</p>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<p dir="auto">We provide a number of weakly-hard constraint structs, used as input to different analysis functions.</p>
<ul dir="auto">
<li><code>AnyHitConstraint(x, k)</code>: For <em>any</em> window of <code>k</code> consecutive job activations, <em>at least</em> <code>x</code> jobs hit their corresponding deadline;</li>
<li><code>AnyMissConstraint(x, k)</code>: For <em>any</em> window of <code>k</code> consecutive job activations, <em>at most</em> <code>x</code> jobs miss their corresponding deadline;</li>
<li><code>RowHitConstraint(x, k)</code>: For <em>any</em> window of <code>k</code> consecutive job activations, <em>at least</em> <code>x</code> consecutive jobs hit their corresponding deadline;</li>
<li><code>RowMissConstraint(x)</code>: For <em>any</em> window of <code>k</code> consecutive job activations, <em>at most</em> <code>x</code> consecutive jobs miss their corresponding deadline.</li>
</ul>
<p dir="auto">An automaton representation of a weakly-hard constraint is a struct consisting of a record containing <code>X</code> amount of integers as:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Automaton{Int} with X vertices:
{
        WordVertex{Int}(x =&gt; y, z)
        ...
} with head: WordVertex{Int}(x =&gt; y, z)"><pre>Automaton{Int} with X vertices<span class="pl-k">:</span>
{
        <span class="pl-c1">WordVertex</span><span class="pl-c1">{Int}</span>(x <span class="pl-k">=&gt;</span> y, z)
        <span class="pl-k">...</span>
} with head<span class="pl-k">:</span> <span class="pl-c1">WordVertex</span><span class="pl-c1">{Int}</span>(x <span class="pl-k">=&gt;</span> y, z)</pre></div>
<p dir="auto">Here, <code>WordVertex{Int}(x =&gt; y, z)</code> indicates a vertex represented by an <code>Integer</code> type, where <code>x</code> is the word the vertex is representating and <code>y</code>, <code>z</code> are the direct successors corresponding to respectively a deadline miss and a deadline hit.</p>
<h2 dir="auto"><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using WeaklyHard

# Constraints
lambda1 = AnyHitConstraint(1, 3)
lambda2 = RowHitConstraint(2, 6)

# Check dominance
is_dominant(lambda1, lambda2) # false
is_dominant(lambda2, lambda1) # false

# Generate automaton for lambda1
G1 = build_automaton(lambda1) 
# This generates the automaton:
# Automaton{Int64} with 3 vertices:
# {
#         WordVertex{Int64}(100 =&gt; ---, 001) # --- is an infeasible vertex
#         WordVertex{Int64}(010 =&gt; 100, 001)
#         WordVertex{Int64}(001 =&gt; 010, 001)
# } with head: WordVertex{Int64}(1 =&gt; 10, 1)

G2 = build_automaton(lambda2)
# This generates the automaton:
# Automaton{Int64} with 6 vertices:
# {
#         WordVertex{Int64}(01100 =&gt; 11000, 00001)
#         WordVertex{Int64}(11000 =&gt; -----, 00001)
#         WordVertex{Int64}(01101 =&gt; 11000, 00011)
#         WordVertex{Int64}(00011 =&gt; 00110, 00011)
#         WordVertex{Int64}(00110 =&gt; 01100, 01101)
#         WordVertex{Int64}(00001 =&gt; -----, 00011)
# } with head: WordVertex{Int64}(11 =&gt; 110, 11)

# Generate a random sequence of length N satisfying the constraint represented by G2
N = 100_000
seq = random_sequence(G2, N)
bitstring(seq)
# The bit representation of the integer"><pre><span class="pl-k">using</span> WeaklyHard

<span class="pl-c"><span class="pl-c">#</span> Constraints</span>
lambda1 <span class="pl-k">=</span> <span class="pl-c1">AnyHitConstraint</span>(<span class="pl-c1">1</span>, <span class="pl-c1">3</span>)
lambda2 <span class="pl-k">=</span> <span class="pl-c1">RowHitConstraint</span>(<span class="pl-c1">2</span>, <span class="pl-c1">6</span>)

<span class="pl-c"><span class="pl-c">#</span> Check dominance</span>
<span class="pl-c1">is_dominant</span>(lambda1, lambda2) <span class="pl-c"><span class="pl-c">#</span> false</span>
<span class="pl-c1">is_dominant</span>(lambda2, lambda1) <span class="pl-c"><span class="pl-c">#</span> false</span>

<span class="pl-c"><span class="pl-c">#</span> Generate automaton for lambda1</span>
G1 <span class="pl-k">=</span> <span class="pl-c1">build_automaton</span>(lambda1) 
<span class="pl-c"><span class="pl-c">#</span> This generates the automaton:</span>
<span class="pl-c"><span class="pl-c">#</span> Automaton{Int64} with 3 vertices:</span>
<span class="pl-c"><span class="pl-c">#</span> {</span>
<span class="pl-c"><span class="pl-c">#</span>         WordVertex{Int64}(100 =&gt; ---, 001) # --- is an infeasible vertex</span>
<span class="pl-c"><span class="pl-c">#</span>         WordVertex{Int64}(010 =&gt; 100, 001)</span>
<span class="pl-c"><span class="pl-c">#</span>         WordVertex{Int64}(001 =&gt; 010, 001)</span>
<span class="pl-c"><span class="pl-c">#</span> } with head: WordVertex{Int64}(1 =&gt; 10, 1)</span>

G2 <span class="pl-k">=</span> <span class="pl-c1">build_automaton</span>(lambda2)
<span class="pl-c"><span class="pl-c">#</span> This generates the automaton:</span>
<span class="pl-c"><span class="pl-c">#</span> Automaton{Int64} with 6 vertices:</span>
<span class="pl-c"><span class="pl-c">#</span> {</span>
<span class="pl-c"><span class="pl-c">#</span>         WordVertex{Int64}(01100 =&gt; 11000, 00001)</span>
<span class="pl-c"><span class="pl-c">#</span>         WordVertex{Int64}(11000 =&gt; -----, 00001)</span>
<span class="pl-c"><span class="pl-c">#</span>         WordVertex{Int64}(01101 =&gt; 11000, 00011)</span>
<span class="pl-c"><span class="pl-c">#</span>         WordVertex{Int64}(00011 =&gt; 00110, 00011)</span>
<span class="pl-c"><span class="pl-c">#</span>         WordVertex{Int64}(00110 =&gt; 01100, 01101)</span>
<span class="pl-c"><span class="pl-c">#</span>         WordVertex{Int64}(00001 =&gt; -----, 00011)</span>
<span class="pl-c"><span class="pl-c">#</span> } with head: WordVertex{Int64}(11 =&gt; 110, 11)</span>

<span class="pl-c"><span class="pl-c">#</span> Generate a random sequence of length N satisfying the constraint represented by G2</span>
N <span class="pl-k">=</span> <span class="pl-c1">100_000</span>
seq <span class="pl-k">=</span> <span class="pl-c1">random_sequence</span>(G2, N)
<span class="pl-c1">bitstring</span>(seq)
<span class="pl-c"><span class="pl-c">#</span> The bit representation of the integer</span></pre></div>
<p dir="auto">if the bitstring has <code>M &lt; N</code> characters, it implies that the first <code>N-M</code>
characters are misses (since julia interpret zeros before the MSB in a bit
string as non-existent)</p>
<h2 dir="auto"><a id="user-content-additional-examples" class="anchor" aria-hidden="true" href="#additional-examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Additional examples</h2>
<p dir="auto">See the examples folder</p>
</article></div>