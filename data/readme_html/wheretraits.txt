<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content--wheretraitsjl-" class="anchor" aria-hidden="true" href="#-wheretraitsjl-"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a> WhereTraits.jl </h1>
<p><a href="https://schlichtanders.github.io/WhereTraits.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://schlichtanders.github.io/WhereTraits.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a>
<a href="https://github.com/schlichtanders/WhereTraits.jl/actions"><img src="https://github.com/schlichtanders/WhereTraits.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/schlichtanders/WhereTraits.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/edbdafbd39463a1ad9457254cc4c80c9707456c911c8ae1f48295fceae73b37a/68747470733a2f2f636f6465636f762e696f2f67682f7363686c69636874616e646572732f57686572655472616974732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/schlichtanders/WhereTraits.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p>Welcome to <code>WhereTraits.jl</code>. This package exports one powerful macro <code>@traits</code> with which you can extend Julia's
where syntax. Concretely the following are supported:</p>
<ul>
<li>dispatch on functions returning Bool</li>
</ul>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="@traits f(a) where {isodd(a)} = (a+1)/2
@traits f(a) where {!isodd(a)} = a/2
f(4) # 2.0
f(5) # 3.0
"><pre><span class="pl-c1">@traits</span> <span class="pl-en">f</span>(a) <span class="pl-k">where</span> {<span class="pl-c1">isodd</span>(a)} <span class="pl-k">=</span> (a<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">/</span><span class="pl-c1">2</span>
<span class="pl-c1">@traits</span> <span class="pl-en">f</span>(a) <span class="pl-k">where</span> {<span class="pl-k">!</span><span class="pl-c1">isodd</span>(a)} <span class="pl-k">=</span> a<span class="pl-k">/</span><span class="pl-c1">2</span>
<span class="pl-c1">f</span>(<span class="pl-c1">4</span>) <span class="pl-c"><span class="pl-c">#</span> 2.0</span>
<span class="pl-c1">f</span>(<span class="pl-c1">5</span>) <span class="pl-c"><span class="pl-c">#</span> 3.0</span></pre></div>
<ul>
<li>dispatch on functions returning anything</li>
</ul>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="@traits g(a) where {Base.IteratorSize(a)::Base.HasShape} = 43
@traits g(a) = 1
g([1,2,3]) # 43
g(Iterators.repeated(1)) # 1
"><pre><span class="pl-c1">@traits</span> <span class="pl-en">g</span>(a) <span class="pl-k">where</span> {Base<span class="pl-k">.</span><span class="pl-en">IteratorSize</span>(a)<span class="pl-k">::</span><span class="pl-c1">Base.HasShape</span>} <span class="pl-k">=</span> <span class="pl-c1">43</span>
<span class="pl-c1">@traits</span> <span class="pl-en">g</span>(a) <span class="pl-k">=</span> <span class="pl-c1">1</span>
<span class="pl-c1">g</span>([<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>]) <span class="pl-c"><span class="pl-c">#</span> 43</span>
<span class="pl-c1">g</span>(Iterators<span class="pl-k">.</span><span class="pl-c1">repeated</span>(<span class="pl-c1">1</span>)) <span class="pl-c"><span class="pl-c">#</span> 1</span></pre></div>
<ul>
<li>dispatch on bounds on functions returning Types</li>
</ul>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="@traits h(a) where {eltype(a) &lt;: Number} = true
@traits h(a) = false
h([1.0]) # true
h([&quot;&quot;]) # false
"><pre><span class="pl-c1">@traits</span> <span class="pl-en">h</span>(a) <span class="pl-k">where</span> {<span class="pl-c1">eltype</span>(a) <span class="pl-k">&lt;:</span> <span class="pl-c1">Number</span>} <span class="pl-k">=</span> <span class="pl-c1">true</span>
<span class="pl-c1">@traits</span> <span class="pl-en">h</span>(a) <span class="pl-k">=</span> <span class="pl-c1">false</span>
<span class="pl-c1">h</span>([<span class="pl-c1">1.0</span>]) <span class="pl-c"><span class="pl-c">#</span> true</span>
<span class="pl-c1">h</span>([<span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>]) <span class="pl-c"><span class="pl-c">#</span> false</span></pre></div>
<p>And all this works with arbitrary many where expressions and creates optimal code where possible via standard Julia compiler.</p>
<p>For more details, take a look at the <a href="https://schlichtanders.github.io/WhereTraits.jl/dev" rel="nofollow">documentation</a>.</p>
<p><em>Warning: While the dispatch works for dynamic functions, it will only be able to create optimal code if your traits function supports proper type-inference. E.g. you can use <code>Base.isempty</code>, however type-inference cannot see whether it will return true or false by static inspection. Hence it will use slower dynamic code.</em></p>
<h2><a id="user-content-installation--import" class="anchor" aria-hidden="true" href="#installation--import"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation &amp; Import</h2>
<p>Install by running</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Pkg
pkg&quot;add WhereTraits&quot;
"><pre><span class="pl-k">using</span> Pkg
<span class="pl-s"><span class="pl-pds"><span class="pl-c1">pkg</span>"</span>add WhereTraits<span class="pl-pds">"</span></span></pre></div>
<p>Then use this package by loading</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using WhereTraits
"><pre><span class="pl-k">using</span> WhereTraits</pre></div>
<p>which makes one macro available <code>@traits</code></p>
</article></div>