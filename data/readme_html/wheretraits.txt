<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-wheretraitsjl" class="anchor" aria-hidden="true" href="#wheretraitsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>WhereTraits.jl</h1>
<p dir="auto"><a href="https://jolin-io.github.io/WhereTraits.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://jolin-io.github.io/WhereTraits.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/jolin-io/WhereTraits.jl/actions"><img src="https://github.com/jolin-io/WhereTraits.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/jolin-io/WhereTraits.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/3e748cc2bce64c0bb6a92ed127f53009a5fd6e9d53f13d05d4a74ec9c9254003/68747470733a2f2f636f6465636f762e696f2f67682f6a6f6c696e2d696f2f57686572655472616974732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/jolin-io/WhereTraits.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">Welcome to <code>WhereTraits.jl</code>. This package exports one powerful macro <code>@traits</code> with which you can extend Julia's where syntax in order to support traits definitions.</p>
<p dir="auto">In addition, <code>WhereTraits</code> comes with a standardized way how to resolve ambiguities among traits, by defining an order among the traits with <code>@traits_order</code>.</p>
<h2 dir="auto"><a id="user-content-installation--import" class="anchor" aria-hidden="true" href="#installation--import"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation &amp; Import</h2>
<p dir="auto">Install by running</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Pkg
pkg&quot;add WhereTraits&quot;"><pre><span class="pl-k">using</span> Pkg
<span class="pl-s"><span class="pl-pds"><span class="pl-c1">pkg</span>"</span>add WhereTraits<span class="pl-pds">"</span></span></pre></div>
<p dir="auto">Then use this package by loading</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using WhereTraits"><pre><span class="pl-k">using</span> WhereTraits</pre></div>
<p dir="auto">which brings <code>@traits</code> into your namespace, and in addition also <code>@traits_order</code> for resolving ambiguities.</p>
<h2 dir="auto"><a id="user-content-usage-traits" class="anchor" aria-hidden="true" href="#usage-traits"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage <code>@traits</code></h2>
<p dir="auto"><code>@traits</code> supports the following three extensions to Julia's where-syntax:</p>
<ul dir="auto">
<li>dispatch on functions returning Bool</li>
</ul>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@traits f(a) where {isodd(a)} = (a+1)/2
@traits f(a) where {!isodd(a)} = a/2
f(4) # 2.0
f(5) # 3.0"><pre><span class="pl-c1">@traits</span> <span class="pl-en">f</span>(a) <span class="pl-k">where</span> {<span class="pl-c1">isodd</span>(a)} <span class="pl-k">=</span> (a<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">/</span><span class="pl-c1">2</span>
<span class="pl-c1">@traits</span> <span class="pl-en">f</span>(a) <span class="pl-k">where</span> {<span class="pl-k">!</span><span class="pl-c1">isodd</span>(a)} <span class="pl-k">=</span> a<span class="pl-k">/</span><span class="pl-c1">2</span>
<span class="pl-c1">f</span>(<span class="pl-c1">4</span>) <span class="pl-c"><span class="pl-c">#</span> 2.0</span>
<span class="pl-c1">f</span>(<span class="pl-c1">5</span>) <span class="pl-c"><span class="pl-c">#</span> 3.0</span></pre></div>
<ul dir="auto">
<li>dispatch on functions returning anything</li>
</ul>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@traits g(a) where {Base.IteratorSize(a)::Base.HasShape} = 43
@traits g(a) = 1
g([1,2,3]) # 43
g(Iterators.repeated(1)) # 1"><pre><span class="pl-c1">@traits</span> <span class="pl-en">g</span>(a) <span class="pl-k">where</span> {Base<span class="pl-k">.</span><span class="pl-en">IteratorSize</span>(a)<span class="pl-k">::</span><span class="pl-c1">Base.HasShape</span>} <span class="pl-k">=</span> <span class="pl-c1">43</span>
<span class="pl-c1">@traits</span> <span class="pl-en">g</span>(a) <span class="pl-k">=</span> <span class="pl-c1">1</span>
<span class="pl-c1">g</span>([<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>]) <span class="pl-c"><span class="pl-c">#</span> 43</span>
<span class="pl-c1">g</span>(Iterators<span class="pl-k">.</span><span class="pl-c1">repeated</span>(<span class="pl-c1">1</span>)) <span class="pl-c"><span class="pl-c">#</span> 1</span></pre></div>
<ul dir="auto">
<li>dispatch on upperbounds on functions returning Types</li>
</ul>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@traits h(a) where {eltype(a) &lt;: Number} = true
@traits h(a) = false
h([1.0]) # true
h([&quot;&quot;]) # false"><pre><span class="pl-c1">@traits</span> <span class="pl-en">h</span>(a) <span class="pl-k">where</span> {<span class="pl-c1">eltype</span>(a) <span class="pl-k">&lt;:</span> <span class="pl-c1">Number</span>} <span class="pl-k">=</span> <span class="pl-c1">true</span>
<span class="pl-c1">@traits</span> <span class="pl-en">h</span>(a) <span class="pl-k">=</span> <span class="pl-c1">false</span>
<span class="pl-c1">h</span>([<span class="pl-c1">1.0</span>]) <span class="pl-c"><span class="pl-c">#</span> true</span>
<span class="pl-c1">h</span>([<span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>]) <span class="pl-c"><span class="pl-c">#</span> false</span></pre></div>
<p dir="auto">And all this works with arbitrary many where expressions and creates optimal code where possible via standard Julia compiler.</p>
<h2 dir="auto"><a id="user-content-usage-traits_order---resolving-ambiguities" class="anchor" aria-hidden="true" href="#usage-traits_order---resolving-ambiguities"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage <code>@traits_order</code> - Resolving Ambiguities</h2>
<p dir="auto"><code>WhereTraits</code> comes with special support for resolving ambiguities among traits dispatch.</p>
<p dir="auto">Under the hood <code>@traits</code> uses normal function dispatch to achieve the speed and flexibility, however, julia function dispatch can lead to ambiguities. With traits these can easily happen if someone defines <code>@traits</code> for the same standard dispatch but using different traits. Let's take a look how this looks like</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using WhereTraits
# let's say someone defined this version
@traits conflict(a) where {eltype(a) &lt;: Number} = &quot;eltype wins&quot;
# and another this one
@traits conflict(a) where {Base.IteratorSize(a) :: Base.HasShape} = &quot;IteratorSize wins&quot;"><pre><span class="pl-k">using</span> WhereTraits
<span class="pl-c"><span class="pl-c">#</span> let's say someone defined this version</span>
<span class="pl-c1">@traits</span> <span class="pl-en">conflict</span>(a) <span class="pl-k">where</span> {<span class="pl-c1">eltype</span>(a) <span class="pl-k">&lt;:</span> <span class="pl-c1">Number</span>} <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>eltype wins<span class="pl-pds">"</span></span>
<span class="pl-c"><span class="pl-c">#</span> and another this one</span>
<span class="pl-c1">@traits</span> <span class="pl-en">conflict</span>(a) <span class="pl-k">where</span> {Base<span class="pl-k">.</span><span class="pl-c1">IteratorSize</span>(a) <span class="pl-k">::</span> <span class="pl-c1">Base.HasShape</span>} <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>IteratorSize wins<span class="pl-pds">"</span></span></pre></div>
<p dir="auto">You can still use these traits definition as long as there is no ambiguity.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; conflict(Iterators.countfrom(42))
&quot;eltype wins&quot;

julia&gt; conflict([&quot;hello&quot;, &quot;world&quot;])
&quot;IteratorSize wins&quot;"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">conflict</span>(Iterators<span class="pl-k">.</span><span class="pl-c1">countfrom</span>(<span class="pl-c1">42</span>))
<span class="pl-s"><span class="pl-pds">"</span>eltype wins<span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">conflict</span>([<span class="pl-s"><span class="pl-pds">"</span>hello<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>world<span class="pl-pds">"</span></span>])
<span class="pl-s"><span class="pl-pds">"</span>IteratorSize wins<span class="pl-pds">"</span></span></pre></div>
<p dir="auto">If you use something ambiguous, e.g. a <code>Vector</code> of <code>Number</code>s, you get a proper ambiguity error, stating what you can do in order to fix it.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; conflict([1,2,3,4])
ERROR: Disambiguity found. Please specify an ordering between traits, like the following.

    @traits_order (Main).conflict(a1::T1) where T1 begin
        eltype(a1)
        Base.IteratorSize(a1)
    end

Stacktrace:
[...]"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">conflict</span>([<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>,<span class="pl-c1">4</span>])
ERROR<span class="pl-k">:</span> Disambiguity found. Please specify an ordering between traits, like the following.

    <span class="pl-c1">@traits_order</span> (Main)<span class="pl-k">.</span><span class="pl-c1">conflict</span>(a1<span class="pl-k">::</span><span class="pl-c1">T1</span>) <span class="pl-k">where</span> T1 <span class="pl-k">begin</span>
        <span class="pl-c1">eltype</span>(a1)
        Base<span class="pl-k">.</span><span class="pl-c1">IteratorSize</span>(a1)
    <span class="pl-k">end</span>

Stacktrace<span class="pl-k">:</span>
[<span class="pl-k">...</span>]</pre></div>
<p dir="auto">What is needed in order to resolve the ambiguity is an order between the traits. This can be defined with <code>@traits_order</code>, which takes the respective function signature followed by a begin-end block of ordered traits (most dominant one should be at the top).</p>
<p dir="auto">Hence just executing the example <code>@traits_order</code> will make <code>eltype</code> be the winning trait.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@traits_order (Main).conflict(a1::T1) where T1 begin
    eltype(a1)
    Base.IteratorSize(a1)
end"><pre><span class="pl-c1">@traits_order</span> (Main)<span class="pl-k">.</span><span class="pl-c1">conflict</span>(a1<span class="pl-k">::</span><span class="pl-c1">T1</span>) <span class="pl-k">where</span> T1 <span class="pl-k">begin</span>
    <span class="pl-c1">eltype</span>(a1)
    Base<span class="pl-k">.</span><span class="pl-c1">IteratorSize</span>(a1)
<span class="pl-k">end</span></pre></div>
<p dir="auto">Let's take a look that everything is resolved</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; conflict([1,2,3,4])
&quot;eltype wins&quot;"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">conflict</span>([<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>,<span class="pl-c1">4</span>])
<span class="pl-s"><span class="pl-pds">"</span>eltype wins<span class="pl-pds">"</span></span></pre></div>
<p dir="auto">Alternatively to the <code>@traits_order</code> you can always define your own custom resolution</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@traits function conflict(a) where {eltype(a) &lt;: Number, Base.IteratorSize(a) :: Base.HasShape}
    &quot;custom implementation&quot;
end"><pre><span class="pl-c1">@traits</span> <span class="pl-k">function</span> <span class="pl-en">conflict</span>(a) <span class="pl-k">where</span> {<span class="pl-c1">eltype</span>(a) <span class="pl-k">&lt;:</span> <span class="pl-c1">Number</span>, Base<span class="pl-k">.</span><span class="pl-c1">IteratorSize</span>(a) <span class="pl-k">::</span> <span class="pl-c1">Base.HasShape</span>}
    <span class="pl-s"><span class="pl-pds">"</span>custom implementation<span class="pl-pds">"</span></span>
<span class="pl-k">end</span></pre></div>
<p dir="auto">which immediately will resolve correctly</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; conflict([1,2,3,4])
&quot;custom implementation&quot;"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">conflict</span>([<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>,<span class="pl-c1">4</span>])
<span class="pl-s"><span class="pl-pds">"</span>custom implementation<span class="pl-pds">"</span></span></pre></div>
<p dir="auto">For more details, take a look at the <a href="https://jolin-io.github.io/WhereTraits.jl/dev" rel="nofollow">documentation</a>.</p>
<h2 dir="auto"><a id="user-content-limitations" class="anchor" aria-hidden="true" href="#limitations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Limitations</h2>
<h3 dir="auto"><a id="user-content-optimal-code" class="anchor" aria-hidden="true" href="#optimal-code"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Optimal Code</h3>
<p dir="auto"><em>Warning: While the dispatch works for dynamic functions, it will only be able to create optimal code if your traits function supports proper type-inference. E.g. you can use <code>Base.isempty</code>, however type-inference cannot see whether it will return true or false by static inspection. Hence it will use slower dynamic code.</em></p>
<h3 dir="auto"><a id="user-content-keyword-arguments" class="anchor" aria-hidden="true" href="#keyword-arguments"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Keyword arguments</h3>
<p dir="auto">Keyword arguments are at the moment not support for WhereTraits dispatch. They are just passed through.</p>
<h3 dir="auto"><a id="user-content-symbol-level" class="anchor" aria-hidden="true" href="#symbol-level"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Symbol Level</h3>
<p dir="auto">The extended where syntax is currently implemented on <strong>symbol level</strong>, which is why traits functions like <code>Base.IteratorSize</code> and the non-qualified <code>IteratorSize</code> (assuming you imported <code>import Base: IteratorSize</code>) are treated as two different functions, despite being the same. So for now try to only use the one style or the other.</p>
<h3 dir="auto"><a id="user-content-top-level-only" class="anchor" aria-hidden="true" href="#top-level-only"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Top Level Only</h3>
<p dir="auto">Currently <strong>only top-level functions</strong> are supported, as the syntax stores and needs information about previous function definitions, which it stores globally. If macros would get informed about whether they are defined within another function, WhereTraits could also support innerfunctions.</p>
<h3 dir="auto"><a id="user-content-test-package" class="anchor" aria-hidden="true" href="#test-package"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Test package</h3>
<p dir="auto">The <code>@traits</code> macro currently does not work well within the <code>Test.@testset</code> macro. Usually you won't encounter this, as standard dispatch is probably enough for your tests.</p>
<p dir="auto">Nevertheless there is a workaround. WhereTraits.jl exports a <code>@traits_test</code> macro variant which works better, but still might have cases where it fails. This needs to be investigated further, and maybe needs a change on <code>Test.@testset</code>.</p>
<h2 dir="auto"><a id="user-content-other-traits-packages" class="anchor" aria-hidden="true" href="#other-traits-packages"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Other traits packages</h2>
<p dir="auto">There are many different attempts to add traits to Julia.
Everyone puts a different emphasis on different aspects of traits interfaces.</p>
<ul dir="auto">
<li>SimpleTraits.jl</li>
<li>BinaryTraits.jl</li>
<li>CanonicalTraits.jl</li>
</ul>
</article></div>