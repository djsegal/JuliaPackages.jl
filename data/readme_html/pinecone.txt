<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-pineconejl" class="anchor" aria-hidden="true" href="#pineconejl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Pinecone.jl</h1>
<p dir="auto">Pinecone.jl is a <a href="https://julialang.org/" rel="nofollow">Julia</a> API for the <a href="https://pinecone.io" rel="nofollow">Pinecone</a> vector database.</p>
<p dir="auto"><a href="https://github.com/tullytim/Pinecone.jl/actions/workflows/CI.yml"><img src="https://github.com/tullytim/Pinecone.jl/actions/workflows/CI.yml/badge.svg" alt="CI" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/tullytim/Pinecone.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/41ae34ef37bedff9f29b0e6842fd0b207e3a875b55ad24767d371afdc651183e/68747470733a2f2f636f6465636f762e696f2f67682f74756c6c7974696d2f50696e65636f6e652e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e7376673f746f6b656e3d394b4e31415048354635" alt="codecov" data-canonical-src="https://codecov.io/gh/tullytim/Pinecone.jl/branch/main/graph/badge.svg?token=9KN1APH5F5" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">The package can be installed with Julia's package manager,
either by using the Pkg REPL mode (press <code>]</code> to enter):</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="pkg&gt; add Pinecone  "><pre class="notranslate"><code>pkg&gt; add Pinecone  
</code></pre></div>
<p dir="auto">or by using Pkg functions</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using Pkg
julia&gt; Pkg.add(&quot;Pinecone&quot;)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Pkg
julia<span class="pl-k">&gt;</span> Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>Pinecone<span class="pl-pds">"</span></span>)</pre></div>
<h2 dir="auto"><a id="user-content-project-status" class="anchor" aria-hidden="true" href="#project-status"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Project Status</h2>
<p dir="auto">The package is tested against Julia 1.6 on Linux, macOS and Windows.</p>
<h2 dir="auto"><a id="user-content-contributing-and-questions" class="anchor" aria-hidden="true" href="#contributing-and-questions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Contributing and Questions</h2>
<p dir="auto">Contributions are very welcome, as are feature requests and suggestions.</p>
<h2 dir="auto"><a id="user-content-quickstart-and-client-examples" class="anchor" aria-hidden="true" href="#quickstart-and-client-examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Quickstart and Client Examples</h2>
<p dir="auto">The package is a nearly faithful implementation of the native <a href="https://www.pinecone.io/docs/quickstart/" rel="nofollow"><code>Pinecone Python lib</code></a>.  To get started
simply call</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Pinecone
pinecone_context = Pinecone.init(apikey, environment) "><pre><span class="pl-k">using</span> Pinecone
pinecone_context <span class="pl-k">=</span> Pinecone<span class="pl-k">.</span><span class="pl-c1">init</span>(apikey, environment) </pre></div>
<p dir="auto">which returns a PineconeContext that you'll use for subsequent calls.  apikey is clearly the Pinecone api key you get when you signup, environmens is
the cloud environment for Pinecone that is likely something like "us-west1-gcp". The list of supported environments (and growing):</p>
<ol dir="auto">
<li>us-west1-gcp</li>
<li>eu-west1-gcp</li>
<li>us-east-1-aws</li>
</ol>
<p dir="auto">From there, you can make function calls similar to what you do in the Python lib.  If you're going to make a call to do something with a specific
index, you'll want to get a pointer to that index using the following:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; pinecone_index = Pinecone.Index(&quot;my-index-name&quot;);
PineconeIndex connected to my-index-name"><pre>julia<span class="pl-k">&gt;</span> pinecone_index <span class="pl-k">=</span> Pinecone<span class="pl-k">.</span><span class="pl-c1">Index</span>(<span class="pl-s"><span class="pl-pds">"</span>my-index-name<span class="pl-pds">"</span></span>);
PineconeIndex connected to my<span class="pl-k">-</span>index<span class="pl-k">-</span>name</pre></div>
<p dir="auto">You can then use the context and index "pointers" to make all the necessary API calls, such as:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="#List all indexes for a specific api key (derived from the pinecone_context) object
julia&gt; Pinecone.list_indexes(pinecone_context)
PineconeIndex connected to my-index-name

#Describe Index using the given context and index pointers
julia&gt; Pinecone.describe_index_stats(pinecone_context, pinecone_index)
{&quot;namespaces&quot;:{&quot;&quot;:{&quot;vectorCount&quot;:5},&quot;testnamespace&quot;:{&quot;vectorCount&quot;:2},&quot;test_namespace&quot;:{&quot;vectorCount&quot;:1}},&quot;dimension&quot;:10}"><pre><span class="pl-c"><span class="pl-c">#</span>List all indexes for a specific api key (derived from the pinecone_context) object</span>
julia<span class="pl-k">&gt;</span> Pinecone<span class="pl-k">.</span><span class="pl-c1">list_indexes</span>(pinecone_context)
PineconeIndex connected to my<span class="pl-k">-</span>index<span class="pl-k">-</span>name

<span class="pl-c"><span class="pl-c">#</span>Describe Index using the given context and index pointers</span>
julia<span class="pl-k">&gt;</span> Pinecone<span class="pl-k">.</span><span class="pl-c1">describe_index_stats</span>(pinecone_context, pinecone_index)
{<span class="pl-s"><span class="pl-pds">"</span>namespaces<span class="pl-pds">"</span></span>:{<span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>:{<span class="pl-s"><span class="pl-pds">"</span>vectorCount<span class="pl-pds">"</span></span>:<span class="pl-c1">5</span>},<span class="pl-s"><span class="pl-pds">"</span>testnamespace<span class="pl-pds">"</span></span>:{<span class="pl-s"><span class="pl-pds">"</span>vectorCount<span class="pl-pds">"</span></span>:<span class="pl-c1">2</span>},<span class="pl-s"><span class="pl-pds">"</span>test_namespace<span class="pl-pds">"</span></span>:{<span class="pl-s"><span class="pl-pds">"</span>vectorCount<span class="pl-pds">"</span></span>:<span class="pl-c1">1</span>}},<span class="pl-s"><span class="pl-pds">"</span>dimension<span class="pl-pds">"</span></span>:<span class="pl-c1">10</span>}</pre></div>
<h3 dir="auto"><a id="user-content-interacting-with-vector-data" class="anchor" aria-hidden="true" href="#interacting-with-vector-data"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Interacting With Vector Data</h3>
<p dir="auto">A Pinecone vector is abstracted away with a very simple PineconeVector type.  This type takes 3 parameters:</p>
<ol dir="auto">
<li>Vector id (String)</li>
<li>An Array Array{Float64} representing your dimensions</li>
<li>Metadata which is a Julia Dict{String, Any} associated with the dimension data</li>
</ol>
<p dir="auto">Here's a very simple example used to create a PineconeVector that will be used with querying data (coming next)</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; testdict = Dict{String, Any}(&quot;genre&quot;=&gt;&quot;documentary&quot;, &quot;year&quot;=&gt;2019);
julia&gt; testvector = Pinecone.PineconeVector(&quot;testid&quot;, [0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.4,0.3], testdict)
PineconeVector is id: testid values: [0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.4, 0.3]meta: Dict{String, Any}(&quot;genre&quot; =&gt; &quot;documentary&quot;, &quot;year&quot; =&gt; 2019)"><pre>julia<span class="pl-k">&gt;</span> testdict <span class="pl-k">=</span> <span class="pl-c1">Dict</span><span class="pl-c1">{String, Any}</span>(<span class="pl-s"><span class="pl-pds">"</span>genre<span class="pl-pds">"</span></span><span class="pl-k">=&gt;</span><span class="pl-s"><span class="pl-pds">"</span>documentary<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>year<span class="pl-pds">"</span></span><span class="pl-k">=&gt;</span><span class="pl-c1">2019</span>);
julia<span class="pl-k">&gt;</span> testvector <span class="pl-k">=</span> Pinecone<span class="pl-k">.</span><span class="pl-c1">PineconeVector</span>(<span class="pl-s"><span class="pl-pds">"</span>testid<span class="pl-pds">"</span></span>, [<span class="pl-c1">0.3</span>,<span class="pl-c1">0.3</span>,<span class="pl-c1">0.3</span>,<span class="pl-c1">0.3</span>,<span class="pl-c1">0.3</span>,<span class="pl-c1">0.3</span>,<span class="pl-c1">0.3</span>,<span class="pl-c1">0.3</span>,<span class="pl-c1">0.4</span>,<span class="pl-c1">0.3</span>], testdict)
PineconeVector is id<span class="pl-k">:</span> testid values<span class="pl-k">:</span> [<span class="pl-c1">0.3</span>, <span class="pl-c1">0.3</span>, <span class="pl-c1">0.3</span>, <span class="pl-c1">0.3</span>, <span class="pl-c1">0.3</span>, <span class="pl-c1">0.3</span>, <span class="pl-c1">0.3</span>, <span class="pl-c1">0.3</span>, <span class="pl-c1">0.4</span>, <span class="pl-c1">0.3</span>]meta<span class="pl-k">:</span> <span class="pl-c1">Dict</span><span class="pl-c1">{String, Any}</span>(<span class="pl-s"><span class="pl-pds">"</span>genre<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>documentary<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>year<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">2019</span>)</pre></div>
<p dir="auto">PineconeVector is used both querying and upserting data.  In the upsert example, the 3rd param is an Vector{PineconeVector} that is the data to be upserted.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="#upsert data using Vector{PineconeVector}
Pinecone.upsert(pinecone_context, pinecone_index, [testvector], &quot;testnamespace&quot;)

#query data using Vector{Vector{Float64}} as the third argument
json = Pinecone.query(pinecone_context, pinecone_index,  
[[0.2, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3], [0.2, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3]], 4)

#query data using Vector{PineconeVector} as the third argument
julia&gt; Pinecone.query(pinecone_context, pinecone_index, [testvector, testvector2], 4)"><pre><span class="pl-c"><span class="pl-c">#</span>upsert data using Vector{PineconeVector}</span>
Pinecone<span class="pl-k">.</span><span class="pl-c1">upsert</span>(pinecone_context, pinecone_index, [testvector], <span class="pl-s"><span class="pl-pds">"</span>testnamespace<span class="pl-pds">"</span></span>)

<span class="pl-c"><span class="pl-c">#</span>query data using Vector{Vector{Float64}} as the third argument</span>
json <span class="pl-k">=</span> Pinecone<span class="pl-k">.</span><span class="pl-c1">query</span>(pinecone_context, pinecone_index,  
[[<span class="pl-c1">0.2</span>, <span class="pl-c1">0.3</span>, <span class="pl-c1">0.3</span>, <span class="pl-c1">0.3</span>, <span class="pl-c1">0.3</span>, <span class="pl-c1">0.3</span>, <span class="pl-c1">0.3</span>, <span class="pl-c1">0.3</span>, <span class="pl-c1">0.3</span>, <span class="pl-c1">0.3</span>], [<span class="pl-c1">0.2</span>, <span class="pl-c1">0.3</span>, <span class="pl-c1">0.3</span>, <span class="pl-c1">0.3</span>, <span class="pl-c1">0.3</span>, <span class="pl-c1">0.3</span>, <span class="pl-c1">0.3</span>, <span class="pl-c1">0.3</span>, <span class="pl-c1">0.3</span>, <span class="pl-c1">0.3</span>]], <span class="pl-c1">4</span>)

<span class="pl-c"><span class="pl-c">#</span>query data using Vector{PineconeVector} as the third argument</span>
julia<span class="pl-k">&gt;</span> Pinecone<span class="pl-k">.</span><span class="pl-c1">query</span>(pinecone_context, pinecone_index, [testvector, testvector2], <span class="pl-c1">4</span>)</pre></div>
<p dir="auto">The format for the query result is a JSON string:</p>
<div class="highlight highlight-source-json notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="{&quot;results&quot;:[{&quot;matches&quot;:[{&quot;id&quot;:&quot;C&quot;,&quot;score&quot;:0.0100002466,&quot;values&quot;:[0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3]},{&quot;id&quot;:&quot;testid&quot;,&quot;score&quot;:0.0561002381,&quot;values&quot;:[0.3,0.11,0.3,0.3,0.3,0.3,0.3,0.3,0.4,0.3]},{&quot;id&quot;:&quot;B&quot;,&quot;score&quot;:0.09000016,&quot;values&quot;:[0.2,0.2,0.2,0.2,0.2,0.2,0.2,0.2,0.2,0.2]},{&quot;id&quot;:&quot;E&quot;,&quot;score&quot;:0.130000129,&quot;values&quot;:[0.4,0.4,0.4,0.4,0.4,0.4,0.4,0.4,0.4,0.4]}],&quot;namespace&quot;:&quot;&quot;},{&quot;matches&quot;:[{&quot;id&quot;:&quot;C&quot;,&quot;score&quot;:0.0100002466,&quot;values&quot;:[0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3]},{&quot;id&quot;:&quot;testid&quot;,&quot;score&quot;:0.0561002381,&quot;values&quot;:[0.3,0.11,0.3,0.3,0.3,0.3,0.3,0.3,0.4,0.3]},{&quot;id&quot;:&quot;B&quot;,&quot;score&quot;:0.09000016,&quot;values&quot;:[0.2,0.2,0.2,0.2,0.2,0.2,0.2,0.2,0.2,0.2]},{&quot;id&quot;:&quot;E&quot;,&quot;score&quot;:0.130000129,&quot;values&quot;:[0.4,0.4,0.4,0.4,0.4,0.4,0.4,0.4,0.4,0.4]}],&quot;namespace&quot;:&quot;&quot;}]}"><pre>{<span class="pl-ent">"results"</span>:[{<span class="pl-ent">"matches"</span>:[{<span class="pl-ent">"id"</span>:<span class="pl-s"><span class="pl-pds">"</span>C<span class="pl-pds">"</span></span>,<span class="pl-ent">"score"</span>:<span class="pl-c1">0.0100002466</span>,<span class="pl-ent">"values"</span>:[<span class="pl-c1">0.3</span>,<span class="pl-c1">0.3</span>,<span class="pl-c1">0.3</span>,<span class="pl-c1">0.3</span>,<span class="pl-c1">0.3</span>,<span class="pl-c1">0.3</span>,<span class="pl-c1">0.3</span>,<span class="pl-c1">0.3</span>,<span class="pl-c1">0.3</span>,<span class="pl-c1">0.3</span>]},{<span class="pl-ent">"id"</span>:<span class="pl-s"><span class="pl-pds">"</span>testid<span class="pl-pds">"</span></span>,<span class="pl-ent">"score"</span>:<span class="pl-c1">0.0561002381</span>,<span class="pl-ent">"values"</span>:[<span class="pl-c1">0.3</span>,<span class="pl-c1">0.11</span>,<span class="pl-c1">0.3</span>,<span class="pl-c1">0.3</span>,<span class="pl-c1">0.3</span>,<span class="pl-c1">0.3</span>,<span class="pl-c1">0.3</span>,<span class="pl-c1">0.3</span>,<span class="pl-c1">0.4</span>,<span class="pl-c1">0.3</span>]},{<span class="pl-ent">"id"</span>:<span class="pl-s"><span class="pl-pds">"</span>B<span class="pl-pds">"</span></span>,<span class="pl-ent">"score"</span>:<span class="pl-c1">0.09000016</span>,<span class="pl-ent">"values"</span>:[<span class="pl-c1">0.2</span>,<span class="pl-c1">0.2</span>,<span class="pl-c1">0.2</span>,<span class="pl-c1">0.2</span>,<span class="pl-c1">0.2</span>,<span class="pl-c1">0.2</span>,<span class="pl-c1">0.2</span>,<span class="pl-c1">0.2</span>,<span class="pl-c1">0.2</span>,<span class="pl-c1">0.2</span>]},{<span class="pl-ent">"id"</span>:<span class="pl-s"><span class="pl-pds">"</span>E<span class="pl-pds">"</span></span>,<span class="pl-ent">"score"</span>:<span class="pl-c1">0.130000129</span>,<span class="pl-ent">"values"</span>:[<span class="pl-c1">0.4</span>,<span class="pl-c1">0.4</span>,<span class="pl-c1">0.4</span>,<span class="pl-c1">0.4</span>,<span class="pl-c1">0.4</span>,<span class="pl-c1">0.4</span>,<span class="pl-c1">0.4</span>,<span class="pl-c1">0.4</span>,<span class="pl-c1">0.4</span>,<span class="pl-c1">0.4</span>]}],<span class="pl-ent">"namespace"</span>:<span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>},{<span class="pl-ent">"matches"</span>:[{<span class="pl-ent">"id"</span>:<span class="pl-s"><span class="pl-pds">"</span>C<span class="pl-pds">"</span></span>,<span class="pl-ent">"score"</span>:<span class="pl-c1">0.0100002466</span>,<span class="pl-ent">"values"</span>:[<span class="pl-c1">0.3</span>,<span class="pl-c1">0.3</span>,<span class="pl-c1">0.3</span>,<span class="pl-c1">0.3</span>,<span class="pl-c1">0.3</span>,<span class="pl-c1">0.3</span>,<span class="pl-c1">0.3</span>,<span class="pl-c1">0.3</span>,<span class="pl-c1">0.3</span>,<span class="pl-c1">0.3</span>]},{<span class="pl-ent">"id"</span>:<span class="pl-s"><span class="pl-pds">"</span>testid<span class="pl-pds">"</span></span>,<span class="pl-ent">"score"</span>:<span class="pl-c1">0.0561002381</span>,<span class="pl-ent">"values"</span>:[<span class="pl-c1">0.3</span>,<span class="pl-c1">0.11</span>,<span class="pl-c1">0.3</span>,<span class="pl-c1">0.3</span>,<span class="pl-c1">0.3</span>,<span class="pl-c1">0.3</span>,<span class="pl-c1">0.3</span>,<span class="pl-c1">0.3</span>,<span class="pl-c1">0.4</span>,<span class="pl-c1">0.3</span>]},{<span class="pl-ent">"id"</span>:<span class="pl-s"><span class="pl-pds">"</span>B<span class="pl-pds">"</span></span>,<span class="pl-ent">"score"</span>:<span class="pl-c1">0.09000016</span>,<span class="pl-ent">"values"</span>:[<span class="pl-c1">0.2</span>,<span class="pl-c1">0.2</span>,<span class="pl-c1">0.2</span>,<span class="pl-c1">0.2</span>,<span class="pl-c1">0.2</span>,<span class="pl-c1">0.2</span>,<span class="pl-c1">0.2</span>,<span class="pl-c1">0.2</span>,<span class="pl-c1">0.2</span>,<span class="pl-c1">0.2</span>]},{<span class="pl-ent">"id"</span>:<span class="pl-s"><span class="pl-pds">"</span>E<span class="pl-pds">"</span></span>,<span class="pl-ent">"score"</span>:<span class="pl-c1">0.130000129</span>,<span class="pl-ent">"values"</span>:[<span class="pl-c1">0.4</span>,<span class="pl-c1">0.4</span>,<span class="pl-c1">0.4</span>,<span class="pl-c1">0.4</span>,<span class="pl-c1">0.4</span>,<span class="pl-c1">0.4</span>,<span class="pl-c1">0.4</span>,<span class="pl-c1">0.4</span>,<span class="pl-c1">0.4</span>,<span class="pl-c1">0.4</span>]}],<span class="pl-ent">"namespace"</span>:<span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>}]}</pre></div>
<p dir="auto">You can also ask for specific vectors by their id (as specified in the PineconeVector) using the <code>fetch()</code> function.
In the example below, we will ask for two specific vectors: "testid" and "testid2", which are passed in as an array of strings.
Note that namespace is required.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Pinecone.fetch(pinecone_context, pinecone_index, [&quot;testid&quot;, &quot;testid2&quot;], &quot;testnamespace&quot;)
PineconeIndex connected to my-index-name"><pre>Pinecone<span class="pl-k">.</span><span class="pl-c1">fetch</span>(pinecone_context, pinecone_index, [<span class="pl-s"><span class="pl-pds">"</span>testid<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>testid2<span class="pl-pds">"</span></span>], <span class="pl-s"><span class="pl-pds">"</span>testnamespace<span class="pl-pds">"</span></span>)
PineconeIndex connected to my<span class="pl-k">-</span>index<span class="pl-k">-</span>name</pre></div>
<p dir="auto">This will return a JSON string:</p>
<div class="highlight highlight-source-json notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="{&quot;vectors&quot;:{&quot;testid&quot;:{&quot;id&quot;:&quot;testid&quot;,&quot;values&quot;:[0.3,0.11,0.3,0.3,0.3,0.3,0.3,0.3,0.4,0.3],&quot;metadata&quot;:{&quot;genre&quot;:&quot;documentary&quot;,&quot;year&quot;:2019}},&quot;testid2&quot;:{&quot;id&quot;:&quot;testid2&quot;,&quot;values&quot;:[0.3,0.11,0.3,0.3,0.3,0.3,0.3,0.3,0.4,0.3],&quot;metadata&quot;:{&quot;genre&quot;:&quot;documentary&quot;,&quot;year&quot;:2019}}},&quot;namespace&quot;:&quot;testnamespace&quot;}"><pre>{<span class="pl-ent">"vectors"</span>:{<span class="pl-ent">"testid"</span>:{<span class="pl-ent">"id"</span>:<span class="pl-s"><span class="pl-pds">"</span>testid<span class="pl-pds">"</span></span>,<span class="pl-ent">"values"</span>:[<span class="pl-c1">0.3</span>,<span class="pl-c1">0.11</span>,<span class="pl-c1">0.3</span>,<span class="pl-c1">0.3</span>,<span class="pl-c1">0.3</span>,<span class="pl-c1">0.3</span>,<span class="pl-c1">0.3</span>,<span class="pl-c1">0.3</span>,<span class="pl-c1">0.4</span>,<span class="pl-c1">0.3</span>],<span class="pl-ent">"metadata"</span>:{<span class="pl-ent">"genre"</span>:<span class="pl-s"><span class="pl-pds">"</span>documentary<span class="pl-pds">"</span></span>,<span class="pl-ent">"year"</span>:<span class="pl-c1">2019</span>}},<span class="pl-ent">"testid2"</span>:{<span class="pl-ent">"id"</span>:<span class="pl-s"><span class="pl-pds">"</span>testid2<span class="pl-pds">"</span></span>,<span class="pl-ent">"values"</span>:[<span class="pl-c1">0.3</span>,<span class="pl-c1">0.11</span>,<span class="pl-c1">0.3</span>,<span class="pl-c1">0.3</span>,<span class="pl-c1">0.3</span>,<span class="pl-c1">0.3</span>,<span class="pl-c1">0.3</span>,<span class="pl-c1">0.3</span>,<span class="pl-c1">0.4</span>,<span class="pl-c1">0.3</span>],<span class="pl-ent">"metadata"</span>:{<span class="pl-ent">"genre"</span>:<span class="pl-s"><span class="pl-pds">"</span>documentary<span class="pl-pds">"</span></span>,<span class="pl-ent">"year"</span>:<span class="pl-c1">2019</span>}}},<span class="pl-ent">"namespace"</span>:<span class="pl-s"><span class="pl-pds">"</span>testnamespace<span class="pl-pds">"</span></span>}</pre></div>
<h3 dir="auto"><a id="user-content-filtering-results" class="anchor" aria-hidden="true" href="#filtering-results"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Filtering Results</h3>
<p dir="auto">Applying filters to the metadata in the rows is fairly straightforward.  There is an optional argument "filter" in the query() function that takes in a Dict{String, Any} that represents a mapping of the filter.  For more on filter logic, see <a href="https://www.pinecone.io/docs/metadata-filtering/" rel="nofollow">https://www.pinecone.io/docs/metadata-filtering/</a></p>
<p dir="auto">Suppose for example we have inserted data in the following way with metadata:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="moviemeta = [Dict{String, Any}(&quot;genre&quot;=&gt;[&quot;comedy&quot;,&quot;documentary&quot;]), Dict{String, Any}(&quot;genre&quot;=&gt;[&quot;comedy&quot;,&quot;documentary&quot;])]
result = Pinecone.upsert(context, index, [&quot;zipA&quot;, &quot;zipB&quot;], [[0.1, 0.2, 0.3, 0.4, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3], [0.9, 0.8, 0.7, 0.6, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3]], moviemeta, &quot;mynamespace&quot;)"><pre>moviemeta <span class="pl-k">=</span> [<span class="pl-c1">Dict</span><span class="pl-c1">{String, Any}</span>(<span class="pl-s"><span class="pl-pds">"</span>genre<span class="pl-pds">"</span></span><span class="pl-k">=&gt;</span>[<span class="pl-s"><span class="pl-pds">"</span>comedy<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>documentary<span class="pl-pds">"</span></span>]), <span class="pl-c1">Dict</span><span class="pl-c1">{String, Any}</span>(<span class="pl-s"><span class="pl-pds">"</span>genre<span class="pl-pds">"</span></span><span class="pl-k">=&gt;</span>[<span class="pl-s"><span class="pl-pds">"</span>comedy<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>documentary<span class="pl-pds">"</span></span>])]
result <span class="pl-k">=</span> Pinecone<span class="pl-k">.</span><span class="pl-c1">upsert</span>(context, index, [<span class="pl-s"><span class="pl-pds">"</span>zipA<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>zipB<span class="pl-pds">"</span></span>], [[<span class="pl-c1">0.1</span>, <span class="pl-c1">0.2</span>, <span class="pl-c1">0.3</span>, <span class="pl-c1">0.4</span>, <span class="pl-c1">0.3</span>, <span class="pl-c1">0.3</span>, <span class="pl-c1">0.3</span>, <span class="pl-c1">0.3</span>, <span class="pl-c1">0.3</span>, <span class="pl-c1">0.3</span>], [<span class="pl-c1">0.9</span>, <span class="pl-c1">0.8</span>, <span class="pl-c1">0.7</span>, <span class="pl-c1">0.6</span>, <span class="pl-c1">0.3</span>, <span class="pl-c1">0.3</span>, <span class="pl-c1">0.3</span>, <span class="pl-c1">0.3</span>, <span class="pl-c1">0.3</span>, <span class="pl-c1">0.3</span>]], moviemeta, <span class="pl-s"><span class="pl-pds">"</span>mynamespace<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">We can write a query to grab these rows (supposing there was other nonmatching rows around it with:)</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="filter = &quot;&quot;&quot;{
        &quot;genre&quot;: {
          &quot;\$in&quot;: [
            &quot;comedy&quot;,
            &quot;documentary&quot;,
            &quot;drama&quot;
          ]
        },
        &quot;year&quot;: {
          &quot;\$eq&quot;: 2019
        }
}&quot;&quot;&quot;
result = Pinecone.query(context, index, [v1], 4, &quot;mynamespace&quot;, true, true, JSON3.read(filter, Dict{String, Any}))"><pre>filter <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"""</span>{</span>
<span class="pl-s">        "genre": {</span>
<span class="pl-s">          "<span class="pl-cce">\$</span>in": [</span>
<span class="pl-s">            "comedy",</span>
<span class="pl-s">            "documentary",</span>
<span class="pl-s">            "drama"</span>
<span class="pl-s">          ]</span>
<span class="pl-s">        },</span>
<span class="pl-s">        "year": {</span>
<span class="pl-s">          "<span class="pl-cce">\$</span>eq": 2019</span>
<span class="pl-s">        }</span>
<span class="pl-s">}<span class="pl-pds">"""</span></span>
result <span class="pl-k">=</span> Pinecone<span class="pl-k">.</span><span class="pl-c1">query</span>(context, index, [v1], <span class="pl-c1">4</span>, <span class="pl-s"><span class="pl-pds">"</span>mynamespace<span class="pl-pds">"</span></span>, <span class="pl-c1">true</span>, <span class="pl-c1">true</span>, JSON3<span class="pl-k">.</span><span class="pl-c1">read</span>(filter, Dict{String, Any}))</pre></div>
<p dir="auto">In the above we specified a JSON blob to provide the filter and passed into the last arg of query() which takes a Dict{String,Any} where we used the Julia JSON3 package to do the very clean and quick conversion.</p>
<h3 dir="auto"><a id="user-content-creatingdeleting-indexes" class="anchor" aria-hidden="true" href="#creatingdeleting-indexes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Creating/Deleting Indexes</h3>
<p dir="auto">Although you can easily create/delete indexes in the Pinecone console, there may be many times where you need to do this programatically.
Here's a very simple example of how to create an index named "testindex5" with 10 dimensions.  This gives you an index with a single shard  and no additional replicas that will perform approximate nearest neighbor (ANN) search using cosine similarity by default.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Pinecone.create_index(pinecone_context, &quot;testindex5&quot;, 10)"><pre>Pinecone<span class="pl-k">.</span><span class="pl-c1">create_index</span>(pinecone_context, <span class="pl-s"><span class="pl-pds">"</span>testindex5<span class="pl-pds">"</span></span>, <span class="pl-c1">10</span>)</pre></div>
<p dir="auto">There are many optional parameters for create_index().  In the example below, we will create a hybrid index with more replicas.  The ybrid index is created by passing in the indexconfig.  This is discussed at length in the actual Pinecone API docs.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Pinecone.create_index(pinecone_context, &quot;testindex5&quot;, 10, metric=&quot;euclidean&quot;, indextype=&quot;approximated&quot;,replicas=2, shards=1, indexconfig=Dict{String,Any}(&quot;k_bits&quot;=&gt;512, &quot;hybrid&quot;=&gt;true))"><pre>Pinecone<span class="pl-k">.</span><span class="pl-c1">create_index</span>(pinecone_context, <span class="pl-s"><span class="pl-pds">"</span>testindex5<span class="pl-pds">"</span></span>, <span class="pl-c1">10</span>, metric<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>euclidean<span class="pl-pds">"</span></span>, indextype<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>approximated<span class="pl-pds">"</span></span>,replicas<span class="pl-k">=</span><span class="pl-c1">2</span>, shards<span class="pl-k">=</span><span class="pl-c1">1</span>, indexconfig<span class="pl-k">=</span><span class="pl-c1">Dict</span><span class="pl-c1">{String,Any}</span>(<span class="pl-s"><span class="pl-pds">"</span>k_bits<span class="pl-pds">"</span></span><span class="pl-k">=&gt;</span><span class="pl-c1">512</span>, <span class="pl-s"><span class="pl-pds">"</span>hybrid<span class="pl-pds">"</span></span><span class="pl-k">=&gt;</span><span class="pl-c1">true</span>))</pre></div>
<p dir="auto">Deleting an index is fairly straightforward.  In this example, we will delete the index we created above, named "testindex5"</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Pinecone.delete_index(pinecone_context, Pinecone.Index(&quot;testindex5&quot;))"><pre>Pinecone<span class="pl-k">.</span><span class="pl-c1">delete_index</span>(pinecone_context, Pinecone<span class="pl-k">.</span><span class="pl-c1">Index</span>(<span class="pl-s"><span class="pl-pds">"</span>testindex5<span class="pl-pds">"</span></span>))</pre></div>
</article></div>