<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-chainedfixes" class="anchor" aria-hidden="true" href="#chainedfixes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>ChainedFixes</h1>
<p><a href="https://travis-ci.com/Tokazama/ChainedFixes.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/1de025b12b81d862c84867d0074c4fa4ef5ea11f/68747470733a2f2f7472617669732d63692e636f6d2f546f6b617a616d612f436861696e656446697865732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/Tokazama/ChainedFixes.jl.svg?branch=master" style="max-width:100%;"></a> <a href="https://codecov.io/gh/Tokazama/ChainedFixes.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/a482ccd1088ef6e9a7c32a1a056a4810695b4bb8/68747470733a2f2f636f6465636f762e696f2f67682f546f6b617a616d612f436861696e656446697865732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/Tokazama/ChainedFixes.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a>
<a href="https://Tokazama.github.io/ChainedFixes.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/f7b92a177c912c1cc007fc9b40f17ff3ee3bb414/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="stable-docs" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://Tokazama.github.io/ChainedFixes.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/3e353c26ddfe819150acbc732248f4f2a37f5175/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="dev-docs" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a></p>
<p><code>ChainedFixes.jl</code> provides useful tools for interacting with functions where arguments are fixed to them.
This includes support for those found in Julia's <code>Base</code> module (<code>Base.Fix1</code>, <code>Base.Fix2</code>) and exported from <code>ChainedFixes</code> (<code>ChainedFix</code> and <code>NFix</code>).</p>
<p>Some simple functionality available form this package is chaining any fixed function.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> ChainedFixes

julia<span class="pl-k">&gt;</span> gt_or_lt <span class="pl-k">=</span> <span class="pl-c1">or</span>(<span class="pl-k">&gt;</span>(<span class="pl-c1">10</span>), <span class="pl-k">&lt;</span>(<span class="pl-c1">5</span>));

julia<span class="pl-k">&gt;</span> <span class="pl-c1">gt_or_lt</span>(<span class="pl-c1">2</span>)
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">gt_or_lt</span>(<span class="pl-c1">6</span>)
<span class="pl-c1">false</span>


julia<span class="pl-k">&gt;</span> gt_and_lt <span class="pl-k">=</span> <span class="pl-c1">and</span>(<span class="pl-k">&gt;</span>(<span class="pl-c1">1</span>), <span class="pl-k">&lt;</span>(<span class="pl-c1">5</span>));

julia<span class="pl-k">&gt;</span> <span class="pl-c1">gt_and_lt</span>(<span class="pl-c1">2</span>)
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">gt_and_lt</span>(<span class="pl-c1">0</span>)
<span class="pl-c1">false</span></pre></div>
<p>There's more convenient syntax for these available in the Julia REPL.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> gt_or_lt <span class="pl-k">=</span> <span class="pl-k">&gt;</span>(<span class="pl-c1">10</span>) ⩔ <span class="pl-k">&lt;</span>(<span class="pl-c1">5</span>); <span class="pl-c"><span class="pl-c">#</span> \Or&lt;TAB&gt;</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">gt_or_lt</span>(<span class="pl-c1">2</span>)
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">gt_or_lt</span>(<span class="pl-c1">6</span>)
<span class="pl-c1">false</span>


julia<span class="pl-k">&gt;</span> gt_and_lt <span class="pl-k">=</span> <span class="pl-k">&gt;</span>(<span class="pl-c1">1</span>) ⩓ <span class="pl-k">&lt;</span>(<span class="pl-c1">5</span>); <span class="pl-c"><span class="pl-c">#</span> \And&lt;TAB&gt;</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">gt_and_lt</span>(<span class="pl-c1">2</span>)
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">gt_and_lt</span>(<span class="pl-c1">0</span>)
<span class="pl-c1">false</span></pre></div>
<p>Any function can have methods fixed to it with the <code>NFix</code> function.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-en">fxn1</span>(x<span class="pl-k">::</span><span class="pl-c1">Integer</span>, y<span class="pl-k">::</span><span class="pl-c1">AbstractFloat</span>, z<span class="pl-k">::</span><span class="pl-c1">AbstractString</span>) <span class="pl-k">=</span> <span class="pl-c1">Val</span>(<span class="pl-c1">1</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-en">fxn1</span>(x<span class="pl-k">::</span><span class="pl-c1">Integer</span>, y<span class="pl-k">::</span><span class="pl-c1">AbstractString</span>, z<span class="pl-k">::</span><span class="pl-c1">AbstractFloat</span>) <span class="pl-k">=</span> <span class="pl-c1">Val</span>(<span class="pl-c1">2</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-en">fxn1</span>(x<span class="pl-k">::</span><span class="pl-c1">AbstractFloat</span>, y<span class="pl-k">::</span><span class="pl-c1">Integer</span>, z<span class="pl-k">::</span><span class="pl-c1">AbstractString</span>) <span class="pl-k">=</span> <span class="pl-c1">Val</span>(<span class="pl-c1">3</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-en">fxn2</span>(; x, y, z) <span class="pl-k">=</span> <span class="pl-c1">fxn1</span>(x, y, z);

julia<span class="pl-k">&gt;</span> <span class="pl-en">fxn3</span>(args<span class="pl-k">...</span>; kwargs<span class="pl-k">...</span>) <span class="pl-k">=</span> (<span class="pl-c1">fxn1</span>(args<span class="pl-k">...</span>), <span class="pl-c1">fxn2</span>(; kwargs<span class="pl-k">...</span>));

julia<span class="pl-k">&gt;</span> <span class="pl-c1">NFix</span><span class="pl-c1">{(1,2)}</span>(fxn1, <span class="pl-c1">1</span>, <span class="pl-c1">2.0</span>)(<span class="pl-s"><span class="pl-pds">"</span>a<span class="pl-pds">"</span></span>)
<span class="pl-c1">Val</span><span class="pl-c1">{1}</span>()

julia<span class="pl-k">&gt;</span> <span class="pl-c1">NFix</span><span class="pl-c1">{(1,3)}</span>(fxn1, <span class="pl-c1">1</span>, <span class="pl-c1">2.0</span>)(<span class="pl-s"><span class="pl-pds">"</span>a<span class="pl-pds">"</span></span>)
<span class="pl-c1">Val</span><span class="pl-c1">{2}</span>()

julia<span class="pl-k">&gt;</span> <span class="pl-c1">NFix</span><span class="pl-c1">{(1,3)}</span>(fxn1, <span class="pl-c1">1.0</span>, <span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>)(<span class="pl-c1">2</span>)
<span class="pl-c1">Val</span><span class="pl-c1">{3}</span>()

julia<span class="pl-k">&gt;</span> <span class="pl-c1">NFix</span>(fxn2, x<span class="pl-k">=</span><span class="pl-c1">1</span>, y<span class="pl-k">=</span><span class="pl-c1">2.0</span>)(z <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>a<span class="pl-pds">"</span></span>)
<span class="pl-c1">Val</span><span class="pl-c1">{1}</span>()

julia<span class="pl-k">&gt;</span> <span class="pl-c1">NFix</span>(fxn2, x<span class="pl-k">=</span><span class="pl-c1">1</span>, z<span class="pl-k">=</span><span class="pl-c1">2.0</span>)(y<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>a<span class="pl-pds">"</span></span>)
<span class="pl-c1">Val</span><span class="pl-c1">{2}</span>()

julia<span class="pl-k">&gt;</span> <span class="pl-c1">NFix</span><span class="pl-c1">{(1,2)}</span>(fxn3, <span class="pl-c1">1</span>, <span class="pl-c1">2.0</span>; x<span class="pl-k">=</span><span class="pl-c1">1.0</span>, z<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>)(<span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>; y <span class="pl-k">=</span> <span class="pl-c1">1</span>)
(<span class="pl-c1">Val</span><span class="pl-c1">{1}</span>(), <span class="pl-c1">Val</span><span class="pl-c1">{3}</span>())
</pre></div>
<h2><a id="user-content-constants" class="anchor" aria-hidden="true" href="#constants"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Constants</h2>
<p>The following constants are exported.</p>
<table>
<thead>
<tr>
<th align="right">Syntax</th>
<th align="left">Type Constant</th>
</tr>
</thead>
<tbody>
<tr>
<td align="right"><code>and(f1::F1, f1::F2)</code>/<code>⩓(f1::F1, f1::F2)</code></td>
<td align="left"><code>And{F1,F2}</code></td>
</tr>
<tr>
<td align="right"><code>or(f1::F1, f1::F2)</code>/<code>⩔(f1::F1, f1::F2)</code></td>
<td align="left"><code>Or{F1,F2}</code></td>
</tr>
<tr>
<td align="right"><code>isapprox(x::T; kwargs::Kwargs)</code></td>
<td align="left"><code>Approx{T,Kwargs}</code></td>
</tr>
<tr>
<td align="right"><code>!isapprox(x::T; kwargs::Kwargs)</code></td>
<td align="left"><code>NotApprox{T,Kwargs}</code></td>
</tr>
<tr>
<td align="right"><code>in(x::T)</code></td>
<td align="left"><code>In{T}</code></td>
</tr>
<tr>
<td align="right"><code>!in(x::T)</code></td>
<td align="left"><code>NotIn{T}</code></td>
</tr>
<tr>
<td align="right"><code>&lt;(x::T)</code></td>
<td align="left"><code>Less{T}</code></td>
</tr>
<tr>
<td align="right"><code>&lt;=(x::T)</code></td>
<td align="left"><code>LessThanOrEqual{T}</code></td>
</tr>
<tr>
<td align="right"><code>&gt;(x::T)</code></td>
<td align="left"><code>Greater{T}</code></td>
</tr>
<tr>
<td align="right"><code>&gt;=(x::T)</code></td>
<td align="left"><code>GreaterThanOrEqual{T}</code></td>
</tr>
<tr>
<td align="right"><code>==(x::T)</code></td>
<td align="left"><code>Equal{T}</code></td>
</tr>
<tr>
<td align="right"><code>isequal(x::T)</code></td>
<td align="left"><code>Equal{T}</code></td>
</tr>
<tr>
<td align="right"><code>!=(x::T)</code></td>
<td align="left"><code>NotEqual{T}</code></td>
</tr>
<tr>
<td align="right"><code>startswith(x::T)</code></td>
<td align="left"><code>StartsWith{T}</code></td>
</tr>
<tr>
<td align="right"><code>endswith(x::T)</code></td>
<td align="left"><code>EndsWith{T}</code></td>
</tr>
</tbody>
</table>
</article></div>