<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-chainedfixes" class="anchor" aria-hidden="true" href="#chainedfixes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>ChainedFixes</h1>
<p dir="auto"><a href="https://travis-ci.com/Tokazama/ChainedFixes.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/f087febf4d53439b828d6a7db5fc35047b87f0a96cd6ffa75e556b04bd8b9b94/68747470733a2f2f7472617669732d63692e636f6d2f546f6b617a616d612f436861696e656446697865732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/Tokazama/ChainedFixes.jl.svg?branch=master" style="max-width: 100%;"></a> <a href="https://codecov.io/gh/Tokazama/ChainedFixes.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/929224a41ef2b896890003ffb048367fd7e939ce7a3c04ac74813484721bbd38/68747470733a2f2f636f6465636f762e696f2f67682f546f6b617a616d612f436861696e656446697865732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/Tokazama/ChainedFixes.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a>
<a href="https://Tokazama.github.io/ChainedFixes.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="stable-docs" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://Tokazama.github.io/ChainedFixes.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="dev-docs" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a></p>
<p dir="auto"><code>ChainedFixes.jl</code> provides useful tools for interacting with functions where arguments are fixed to them.</p>
<h2 dir="auto"><a id="user-content-the-or-and-methods" class="anchor" aria-hidden="true" href="#the-or-and-methods"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>The <code>or</code>, <code>and</code> methods</h2>
<p dir="auto">Some simple functionality available form this package is chaining any fixed function.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using ChainedFixes

julia&gt; gt_or_lt = or(&gt;(10), &lt;(5))
or(&gt;(10), &lt;(5))

julia&gt; gt_or_lt(2)
true

julia&gt; gt_or_lt(6)
false

julia&gt; gt_and_lt = and(&gt;(1), &lt;(5))
and(&gt;(1), &lt;(5))

julia&gt; gt_and_lt(2)
true

julia&gt; gt_and_lt(0)
false"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> ChainedFixes

julia<span class="pl-k">&gt;</span> gt_or_lt <span class="pl-k">=</span> <span class="pl-c1">or</span>(<span class="pl-k">&gt;</span>(<span class="pl-c1">10</span>), <span class="pl-k">&lt;</span>(<span class="pl-c1">5</span>))
<span class="pl-c1">or</span>(<span class="pl-k">&gt;</span>(<span class="pl-c1">10</span>), <span class="pl-k">&lt;</span>(<span class="pl-c1">5</span>))

julia<span class="pl-k">&gt;</span> <span class="pl-c1">gt_or_lt</span>(<span class="pl-c1">2</span>)
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">gt_or_lt</span>(<span class="pl-c1">6</span>)
<span class="pl-c1">false</span>

julia<span class="pl-k">&gt;</span> gt_and_lt <span class="pl-k">=</span> <span class="pl-c1">and</span>(<span class="pl-k">&gt;</span>(<span class="pl-c1">1</span>), <span class="pl-k">&lt;</span>(<span class="pl-c1">5</span>))
<span class="pl-c1">and</span>(<span class="pl-k">&gt;</span>(<span class="pl-c1">1</span>), <span class="pl-k">&lt;</span>(<span class="pl-c1">5</span>))

julia<span class="pl-k">&gt;</span> <span class="pl-c1">gt_and_lt</span>(<span class="pl-c1">2</span>)
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">gt_and_lt</span>(<span class="pl-c1">0</span>)
<span class="pl-c1">false</span></pre></div>
<p dir="auto">There's more convenient syntax for these available in the Julia REPL.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; gt_or_lt = &gt;(10) ⩔ &lt;(5); # \Or&lt;TAB&gt;

julia&gt; gt_or_lt(2)
true

julia&gt; gt_or_lt(6)
false

julia&gt; gt_and_lt = &gt;(1) ⩓ &lt;(5); # \And&lt;TAB&gt;

julia&gt; gt_and_lt(2)
true

julia&gt; gt_and_lt(0)
false"><pre>julia<span class="pl-k">&gt;</span> gt_or_lt <span class="pl-k">=</span> <span class="pl-k">&gt;</span>(<span class="pl-c1">10</span>) ⩔ <span class="pl-k">&lt;</span>(<span class="pl-c1">5</span>); <span class="pl-c"><span class="pl-c">#</span> \Or&lt;TAB&gt;</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">gt_or_lt</span>(<span class="pl-c1">2</span>)
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">gt_or_lt</span>(<span class="pl-c1">6</span>)
<span class="pl-c1">false</span>

julia<span class="pl-k">&gt;</span> gt_and_lt <span class="pl-k">=</span> <span class="pl-k">&gt;</span>(<span class="pl-c1">1</span>) ⩓ <span class="pl-k">&lt;</span>(<span class="pl-c1">5</span>); <span class="pl-c"><span class="pl-c">#</span> \And&lt;TAB&gt;</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">gt_and_lt</span>(<span class="pl-c1">2</span>)
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">gt_and_lt</span>(<span class="pl-c1">0</span>)
<span class="pl-c1">false</span></pre></div>
<h2 dir="auto"><a id="user-content-creating-new-fixed-methods-with-nfix" class="anchor" aria-hidden="true" href="#creating-new-fixed-methods-with-nfix"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Creating new fixed methods with <code>@nfix</code></h2>
<p dir="auto">Any function can have methods fixed to it with <code>@nfix</code>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; fxn1(x::Integer, y::AbstractFloat, z::AbstractString) = Val(1);

julia&gt; fxn1(x::Integer, y::AbstractString, z::AbstractFloat) = Val(2);

julia&gt; fxn1(x::AbstractFloat, y::Integer, z::AbstractString) = Val(3);

julia&gt; fxn2(; x, y, z) = fxn1(x, y, z);

julia&gt; fxn3(args...; kwargs...) = (fxn1(args...), fxn2(; kwargs...));

julia&gt; f = @nfix fxn1(1, 2.0, _)
fxn1(1, 2.0, _1)

julia&gt; f(&quot;a&quot;)
Val{1}()

julia&gt; f = @nfix fxn1(1, _, 2.0)
fxn1(1, _1, 2.0)

julia&gt; f(&quot;a&quot;)
Val{2}()

julia&gt; f = @nfix fxn1(1.0, _, &quot;&quot;)
fxn1(1.0, _1, &quot;&quot;)

julia&gt; f(2)
Val{3}()

julia&gt; f = @nfix fxn2(x=1, y=2.0)
fxn2(; x = 1, y = 2.0)

julia&gt; f(z = &quot;a&quot;)
Val{1}()

julia&gt; f = @nfix fxn2(x=1, z=2.0)
fxn2(; x = 1, z = 2.0)

julia&gt; f(y = &quot;a&quot;)
Val{2}()

julia&gt; f = @nfix fxn3(1, 2.0, _; x = 1.0, z= &quot;&quot;)
fxn3(1, 2.0, _1; x = 1.0, z = &quot;&quot;)

julia&gt; f(&quot;&quot;; y = 1)
(Val{1}(), Val{3}())
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-en">fxn1</span>(x<span class="pl-k">::</span><span class="pl-c1">Integer</span>, y<span class="pl-k">::</span><span class="pl-c1">AbstractFloat</span>, z<span class="pl-k">::</span><span class="pl-c1">AbstractString</span>) <span class="pl-k">=</span> <span class="pl-c1">Val</span>(<span class="pl-c1">1</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-en">fxn1</span>(x<span class="pl-k">::</span><span class="pl-c1">Integer</span>, y<span class="pl-k">::</span><span class="pl-c1">AbstractString</span>, z<span class="pl-k">::</span><span class="pl-c1">AbstractFloat</span>) <span class="pl-k">=</span> <span class="pl-c1">Val</span>(<span class="pl-c1">2</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-en">fxn1</span>(x<span class="pl-k">::</span><span class="pl-c1">AbstractFloat</span>, y<span class="pl-k">::</span><span class="pl-c1">Integer</span>, z<span class="pl-k">::</span><span class="pl-c1">AbstractString</span>) <span class="pl-k">=</span> <span class="pl-c1">Val</span>(<span class="pl-c1">3</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-en">fxn2</span>(; x, y, z) <span class="pl-k">=</span> <span class="pl-c1">fxn1</span>(x, y, z);

julia<span class="pl-k">&gt;</span> <span class="pl-en">fxn3</span>(args<span class="pl-k">...</span>; kwargs<span class="pl-k">...</span>) <span class="pl-k">=</span> (<span class="pl-c1">fxn1</span>(args<span class="pl-k">...</span>), <span class="pl-c1">fxn2</span>(; kwargs<span class="pl-k">...</span>));

julia<span class="pl-k">&gt;</span> f <span class="pl-k">=</span> <span class="pl-c1">@nfix</span> <span class="pl-c1">fxn1</span>(<span class="pl-c1">1</span>, <span class="pl-c1">2.0</span>, _)
<span class="pl-c1">fxn1</span>(<span class="pl-c1">1</span>, <span class="pl-c1">2.0</span>, _1)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">f</span>(<span class="pl-s"><span class="pl-pds">"</span>a<span class="pl-pds">"</span></span>)
<span class="pl-c1">Val</span><span class="pl-c1">{1}</span>()

julia<span class="pl-k">&gt;</span> f <span class="pl-k">=</span> <span class="pl-c1">@nfix</span> <span class="pl-c1">fxn1</span>(<span class="pl-c1">1</span>, _, <span class="pl-c1">2.0</span>)
<span class="pl-c1">fxn1</span>(<span class="pl-c1">1</span>, _1, <span class="pl-c1">2.0</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">f</span>(<span class="pl-s"><span class="pl-pds">"</span>a<span class="pl-pds">"</span></span>)
<span class="pl-c1">Val</span><span class="pl-c1">{2}</span>()

julia<span class="pl-k">&gt;</span> f <span class="pl-k">=</span> <span class="pl-c1">@nfix</span> <span class="pl-c1">fxn1</span>(<span class="pl-c1">1.0</span>, _, <span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>)
<span class="pl-c1">fxn1</span>(<span class="pl-c1">1.0</span>, _1, <span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">f</span>(<span class="pl-c1">2</span>)
<span class="pl-c1">Val</span><span class="pl-c1">{3}</span>()

julia<span class="pl-k">&gt;</span> f <span class="pl-k">=</span> <span class="pl-c1">@nfix</span> <span class="pl-c1">fxn2</span>(x<span class="pl-k">=</span><span class="pl-c1">1</span>, y<span class="pl-k">=</span><span class="pl-c1">2.0</span>)
<span class="pl-c1">fxn2</span>(; x <span class="pl-k">=</span> <span class="pl-c1">1</span>, y <span class="pl-k">=</span> <span class="pl-c1">2.0</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">f</span>(z <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>a<span class="pl-pds">"</span></span>)
<span class="pl-c1">Val</span><span class="pl-c1">{1}</span>()

julia<span class="pl-k">&gt;</span> f <span class="pl-k">=</span> <span class="pl-c1">@nfix</span> <span class="pl-c1">fxn2</span>(x<span class="pl-k">=</span><span class="pl-c1">1</span>, z<span class="pl-k">=</span><span class="pl-c1">2.0</span>)
<span class="pl-c1">fxn2</span>(; x <span class="pl-k">=</span> <span class="pl-c1">1</span>, z <span class="pl-k">=</span> <span class="pl-c1">2.0</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">f</span>(y <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>a<span class="pl-pds">"</span></span>)
<span class="pl-c1">Val</span><span class="pl-c1">{2}</span>()

julia<span class="pl-k">&gt;</span> f <span class="pl-k">=</span> <span class="pl-c1">@nfix</span> <span class="pl-c1">fxn3</span>(<span class="pl-c1">1</span>, <span class="pl-c1">2.0</span>, _; x <span class="pl-k">=</span> <span class="pl-c1">1.0</span>, z<span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>)
<span class="pl-c1">fxn3</span>(<span class="pl-c1">1</span>, <span class="pl-c1">2.0</span>, _1; x <span class="pl-k">=</span> <span class="pl-c1">1.0</span>, z <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">f</span>(<span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>; y <span class="pl-k">=</span> <span class="pl-c1">1</span>)
(<span class="pl-c1">Val</span><span class="pl-c1">{1}</span>(), <span class="pl-c1">Val</span><span class="pl-c1">{3}</span>())
</pre></div>
<p dir="auto">If we specify the underscore suffix we arguments can be repeated within a single function.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; f = @nfix *(_1, _1)
*(_1, _1)

julia&gt; f(2)
4
"><pre>julia<span class="pl-k">&gt;</span> f <span class="pl-k">=</span> <span class="pl-c1">@nfix</span> <span class="pl-k">*</span>(_1, _1)
<span class="pl-k">*</span>(_1, _1)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">f</span>(<span class="pl-c1">2</span>)
<span class="pl-c1">4</span>
</pre></div>
<h2 dir="auto"><a id="user-content-chaining-piped-methods" class="anchor" aria-hidden="true" href="#chaining-piped-methods"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Chaining piped methods</h2>
<p dir="auto">We can create a chain a functions that act like an uncalled pipe (e.g., <code>|&gt;</code>).
A chain of fixed functions can be chained together via <code>pipe_chain</code>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; f = pipe_chain(@nfix(_ * &quot;is &quot;), @nfix(_ * &quot;a &quot;), @nfix(_ * &quot;sentence.&quot;))
|&gt; *(_1, &quot;is &quot;) |&gt; *(_1, &quot;a &quot;) |&gt; *(_1, &quot;sentence.&quot;)

julia&gt; f(&quot;This &quot;)
&quot;This is a sentence.&quot;

julia&gt; f2 = pipe_chain(f, endswith(&quot;sentence.&quot;))
|&gt; *(_1, &quot;is &quot;) |&gt; *(_1, &quot;a &quot;) |&gt; *(_1, &quot;sentence.&quot;) |&gt; endswith(&quot;sentence.&quot;)

julia&gt; f2(&quot;This &quot;)
true

julia&gt; f2 = pipe_chain(f, startswith(&quot;This&quot;))
|&gt; *(_1, &quot;is &quot;) |&gt; *(_1, &quot;a &quot;) |&gt; *(_1, &quot;sentence.&quot;) |&gt; startswith(&quot;This&quot;)

julia&gt; f2(&quot;This &quot;)
true

julia&gt; f = pipe_chain(and(&lt;=(3), !=(2)), ==(true), in(trues(2)), !in(falses(2)), &gt;=(true))
|&gt; and(&lt;=(3), !=(2)) |&gt; ==(true) |&gt; in(Bool[1, 1]) |&gt; !in(Bool[0, 0]) |&gt; &gt;=(true)

julia&gt; f(1)
true

julia&gt; f = pipe_chain(isapprox(0.1), !isapprox(0.2))
|&gt; ≈(0.1) |&gt; !≈(0.2)

julia&gt; f(0.1 - 1e-10)
true
"><pre>julia<span class="pl-k">&gt;</span> f <span class="pl-k">=</span> <span class="pl-c1">pipe_chain</span>(<span class="pl-c1">@nfix</span>(_ <span class="pl-k">*</span> <span class="pl-s"><span class="pl-pds">"</span>is <span class="pl-pds">"</span></span>), <span class="pl-c1">@nfix</span>(_ <span class="pl-k">*</span> <span class="pl-s"><span class="pl-pds">"</span>a <span class="pl-pds">"</span></span>), <span class="pl-c1">@nfix</span>(_ <span class="pl-k">*</span> <span class="pl-s"><span class="pl-pds">"</span>sentence.<span class="pl-pds">"</span></span>))
<span class="pl-k">|&gt;</span> <span class="pl-k">*</span>(_1, <span class="pl-s"><span class="pl-pds">"</span>is <span class="pl-pds">"</span></span>) <span class="pl-k">|&gt;</span> <span class="pl-k">*</span>(_1, <span class="pl-s"><span class="pl-pds">"</span>a <span class="pl-pds">"</span></span>) <span class="pl-k">|&gt;</span> <span class="pl-k">*</span>(_1, <span class="pl-s"><span class="pl-pds">"</span>sentence.<span class="pl-pds">"</span></span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">f</span>(<span class="pl-s"><span class="pl-pds">"</span>This <span class="pl-pds">"</span></span>)
<span class="pl-s"><span class="pl-pds">"</span>This is a sentence.<span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> f2 <span class="pl-k">=</span> <span class="pl-c1">pipe_chain</span>(f, <span class="pl-c1">endswith</span>(<span class="pl-s"><span class="pl-pds">"</span>sentence.<span class="pl-pds">"</span></span>))
<span class="pl-k">|&gt;</span> <span class="pl-k">*</span>(_1, <span class="pl-s"><span class="pl-pds">"</span>is <span class="pl-pds">"</span></span>) <span class="pl-k">|&gt;</span> <span class="pl-k">*</span>(_1, <span class="pl-s"><span class="pl-pds">"</span>a <span class="pl-pds">"</span></span>) <span class="pl-k">|&gt;</span> <span class="pl-k">*</span>(_1, <span class="pl-s"><span class="pl-pds">"</span>sentence.<span class="pl-pds">"</span></span>) <span class="pl-k">|&gt;</span> <span class="pl-c1">endswith</span>(<span class="pl-s"><span class="pl-pds">"</span>sentence.<span class="pl-pds">"</span></span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">f2</span>(<span class="pl-s"><span class="pl-pds">"</span>This <span class="pl-pds">"</span></span>)
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> f2 <span class="pl-k">=</span> <span class="pl-c1">pipe_chain</span>(f, <span class="pl-c1">startswith</span>(<span class="pl-s"><span class="pl-pds">"</span>This<span class="pl-pds">"</span></span>))
<span class="pl-k">|&gt;</span> <span class="pl-k">*</span>(_1, <span class="pl-s"><span class="pl-pds">"</span>is <span class="pl-pds">"</span></span>) <span class="pl-k">|&gt;</span> <span class="pl-k">*</span>(_1, <span class="pl-s"><span class="pl-pds">"</span>a <span class="pl-pds">"</span></span>) <span class="pl-k">|&gt;</span> <span class="pl-k">*</span>(_1, <span class="pl-s"><span class="pl-pds">"</span>sentence.<span class="pl-pds">"</span></span>) <span class="pl-k">|&gt;</span> <span class="pl-c1">startswith</span>(<span class="pl-s"><span class="pl-pds">"</span>This<span class="pl-pds">"</span></span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">f2</span>(<span class="pl-s"><span class="pl-pds">"</span>This <span class="pl-pds">"</span></span>)
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> f <span class="pl-k">=</span> <span class="pl-c1">pipe_chain</span>(<span class="pl-c1">and</span>(<span class="pl-k">&lt;=</span>(<span class="pl-c1">3</span>), <span class="pl-k">!=</span>(<span class="pl-c1">2</span>)), <span class="pl-k">==</span>(<span class="pl-c1">true</span>), <span class="pl-c1">in</span>(<span class="pl-c1">trues</span>(<span class="pl-c1">2</span>)), <span class="pl-k">!</span><span class="pl-c1">in</span>(<span class="pl-c1">falses</span>(<span class="pl-c1">2</span>)), <span class="pl-k">&gt;=</span>(<span class="pl-c1">true</span>))
<span class="pl-k">|&gt;</span> <span class="pl-c1">and</span>(<span class="pl-k">&lt;=</span>(<span class="pl-c1">3</span>), <span class="pl-k">!=</span>(<span class="pl-c1">2</span>)) <span class="pl-k">|&gt;</span> <span class="pl-k">==</span>(<span class="pl-c1">true</span>) <span class="pl-k">|&gt;</span> <span class="pl-c1">in</span>(Bool[<span class="pl-c1">1</span>, <span class="pl-c1">1</span>]) <span class="pl-k">|&gt;</span> <span class="pl-k">!</span><span class="pl-c1">in</span>(Bool[<span class="pl-c1">0</span>, <span class="pl-c1">0</span>]) <span class="pl-k">|&gt;</span> <span class="pl-k">&gt;=</span>(<span class="pl-c1">true</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">f</span>(<span class="pl-c1">1</span>)
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> f <span class="pl-k">=</span> <span class="pl-c1">pipe_chain</span>(<span class="pl-c1">isapprox</span>(<span class="pl-c1">0.1</span>), <span class="pl-k">!</span><span class="pl-c1">isapprox</span>(<span class="pl-c1">0.2</span>))
<span class="pl-k">|&gt;</span> <span class="pl-k">≈</span>(<span class="pl-c1">0.1</span>) <span class="pl-k">|&gt;</span> <span class="pl-k">!</span><span class="pl-k">≈</span>(<span class="pl-c1">0.2</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">f</span>(<span class="pl-c1">0.1</span> <span class="pl-k">-</span> <span class="pl-c1">1e-10</span>)
<span class="pl-c1">true</span>
</pre></div>
<p dir="auto">Internally, this includes support for those found in Julia's <code>Base</code> module (<code>Base.Fix1</code>, <code>Base.Fix2</code>) and from <code>ChainedFixes</code> (<code>ChainedFix</code> and <code>NFix</code>).</p>
<h2 dir="auto"><a id="user-content-constants" class="anchor" aria-hidden="true" href="#constants"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Constants</h2>
<p dir="auto">The constants on the right sight of the following table may be exported and accessed via <code>using ChainedFixes.ChainedCore</code>
The syntax corresponding to each constant is on the left.</p>
<table>
<thead>
<tr>
<th align="right">Syntax</th>
<th align="left">Type Constant</th>
</tr>
</thead>
<tbody>
<tr>
<td align="right"><code>pipe_chain(f1, f2)</code></td>
<td align="left"><code>PipeChain{F1,F2}</code></td>
</tr>
<tr>
<td align="right"><code>and(f1::F1, f1::F2)</code>/<code>⩓(f1::F1, f1::F2)</code></td>
<td align="left"><code>And{F1,F2}</code></td>
</tr>
<tr>
<td align="right"><code>or(f1::F1, f1::F2)</code>/<code>⩔(f1::F1, f1::F2)</code></td>
<td align="left"><code>Or{F1,F2}</code></td>
</tr>
<tr>
<td align="right"><code>isapprox(x::T; kwargs::Kwargs)</code></td>
<td align="left"><code>Approx{T,Kwargs}</code></td>
</tr>
<tr>
<td align="right"><code>!isapprox(x::T; kwargs::Kwargs)</code></td>
<td align="left"><code>NotApprox{T,Kwargs}</code></td>
</tr>
<tr>
<td align="right"><code>in(x::T)</code></td>
<td align="left"><code>In{T}</code></td>
</tr>
<tr>
<td align="right"><code>!in(x::T)</code></td>
<td align="left"><code>NotIn{T}</code></td>
</tr>
<tr>
<td align="right"><code>&lt;(x::T)</code></td>
<td align="left"><code>Less{T}</code></td>
</tr>
<tr>
<td align="right"><code>&lt;=(x::T)</code></td>
<td align="left"><code>LessThanOrEqual{T}</code></td>
</tr>
<tr>
<td align="right"><code>&gt;(x::T)</code></td>
<td align="left"><code>Greater{T}</code></td>
</tr>
<tr>
<td align="right"><code>&gt;=(x::T)</code></td>
<td align="left"><code>GreaterThanOrEqual{T}</code></td>
</tr>
<tr>
<td align="right"><code>==(x::T)</code></td>
<td align="left"><code>Equal{T}</code></td>
</tr>
<tr>
<td align="right"><code>isequal(x::T)</code></td>
<td align="left"><code>Equal{T}</code></td>
</tr>
<tr>
<td align="right"><code>!=(x::T)</code></td>
<td align="left"><code>NotEqual{T}</code></td>
</tr>
<tr>
<td align="right"><code>startswith(x::T)</code></td>
<td align="left"><code>StartsWith{T}</code></td>
</tr>
<tr>
<td align="right"><code>endswith(x::T)</code></td>
<td align="left"><code>EndsWith{T}</code></td>
</tr>
</tbody>
</table>
<h2 dir="auto"><a id="user-content-combining-fixed-methods" class="anchor" aria-hidden="true" href="#combining-fixed-methods"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Combining fixed methods</h2>
<p dir="auto">The real utility of <code>ChainedFixes</code> is when combining fixed methods in creative ways</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; splat_pipe(op, args::Tuple) = op(args...);

julia&gt; splat_pipe(op) = @nfix splat_pipe(op, _...);

julia&gt; f = pipe_chain(extrema, splat_pipe(+))
|&gt; extrema |&gt; splat_pipe(+, _...)

julia&gt; f([1 2; 3 4])
5
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-en">splat_pipe</span>(op, args<span class="pl-k">::</span><span class="pl-c1">Tuple</span>) <span class="pl-k">=</span> <span class="pl-c1">op</span>(args<span class="pl-k">...</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-en">splat_pipe</span>(op) <span class="pl-k">=</span> <span class="pl-c1">@nfix</span> <span class="pl-c1">splat_pipe</span>(op, _<span class="pl-k">...</span>);

julia<span class="pl-k">&gt;</span> f <span class="pl-k">=</span> <span class="pl-c1">pipe_chain</span>(extrema, <span class="pl-c1">splat_pipe</span>(<span class="pl-k">+</span>))
<span class="pl-k">|&gt;</span> extrema <span class="pl-k">|&gt;</span> <span class="pl-c1">splat_pipe</span>(<span class="pl-k">+</span>, _<span class="pl-k">...</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">f</span>([<span class="pl-c1">1</span> <span class="pl-c1">2</span>; <span class="pl-c1">3</span> <span class="pl-c1">4</span>])
<span class="pl-c1">5</span>
</pre></div>
</article></div>