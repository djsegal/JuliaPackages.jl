<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-chainedfixes" class="anchor" aria-hidden="true" href="#chainedfixes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>ChainedFixes</h1>
<p><a href="https://travis-ci.com/Tokazama/ChainedFixes.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/1de025b12b81d862c84867d0074c4fa4ef5ea11f/68747470733a2f2f7472617669732d63692e636f6d2f546f6b617a616d612f436861696e656446697865732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/Tokazama/ChainedFixes.jl.svg?branch=master" style="max-width:100%;"></a> <a href="https://codecov.io/gh/Tokazama/ChainedFixes.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/a482ccd1088ef6e9a7c32a1a056a4810695b4bb8/68747470733a2f2f636f6465636f762e696f2f67682f546f6b617a616d612f436861696e656446697865732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/Tokazama/ChainedFixes.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p>Chain operators <code>Base.Fix2</code> operations with two possible methods.</p>
<p><code>and</code> is synonymous with bitwise <code>&amp;</code> operator but may be used to chain multiple <code>Fix1</code> or
<code>Fix2</code> operations. The <code>⩓</code> (<code>\\And&lt;TAB&gt;</code>) operator may be used in its place (e.g., <code>x ⩓ y</code>).</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> ChainedFixes

julia<span class="pl-k">&gt;</span> <span class="pl-c1">and</span>(<span class="pl-c1">true</span>, <span class="pl-k">&lt;</span>(<span class="pl-c1">5</span>))(<span class="pl-c1">1</span>)
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">and</span>(<span class="pl-k">&lt;</span>(<span class="pl-c1">5</span>), <span class="pl-c1">false</span>)(<span class="pl-c1">1</span>)
<span class="pl-c1">false</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">and</span>(<span class="pl-c1">and</span>(<span class="pl-k">&lt;</span>(<span class="pl-c1">5</span>), <span class="pl-k">&gt;</span>(<span class="pl-c1">1</span>)), <span class="pl-k">&gt;</span>(<span class="pl-c1">2</span>))(<span class="pl-c1">3</span>)
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">and</span>(<span class="pl-k">&lt;</span>(<span class="pl-c1">5</span>) ⩓ <span class="pl-k">&gt;</span>(<span class="pl-c1">1</span>), <span class="pl-k">&gt;</span>(<span class="pl-c1">2</span>))(<span class="pl-c1">3</span>)  <span class="pl-c"><span class="pl-c">#</span> ⩓ == \\And</span>
<span class="pl-c1">true</span>
</pre></div>
<p><code>or</code> is synonymous with bitwise <code>|</code> operator but may be used to chain multiple <code>Fix1</code> or
<code>Fix2</code> operations. The <code>⩔</code> (<code>\\Or&lt;TAB&gt;</code>) operator may be used in its place (e.g., <code>x ⩔ y</code>).</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> ChainedFixes

julia<span class="pl-k">&gt;</span> <span class="pl-c1">or</span>(<span class="pl-c1">true</span>, <span class="pl-k">&lt;</span>(<span class="pl-c1">5</span>))(<span class="pl-c1">1</span>)
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">or</span>(<span class="pl-k">&lt;</span>(<span class="pl-c1">5</span>), <span class="pl-c1">false</span>)(<span class="pl-c1">1</span>)
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">or</span>(<span class="pl-k">&lt;</span>(<span class="pl-c1">5</span>) ⩔ <span class="pl-k">&gt;</span>(<span class="pl-c1">1</span>), <span class="pl-k">&gt;</span>(<span class="pl-c1">2</span>))(<span class="pl-c1">3</span>)  <span class="pl-c"><span class="pl-c">#</span> ⩔ == \\Or</span>
<span class="pl-c1">true</span></pre></div>
<h2><a id="user-content-conveniant-type-constants" class="anchor" aria-hidden="true" href="#conveniant-type-constants"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Conveniant Type Constants</h2>
<table>
<thead>
<tr>
<th align="right">Syntax</th>
<th>Type Constant</th>
</tr>
</thead>
<tbody>
<tr>
<td align="right"><code>and</code>/<code>⩓</code></td>
<td><code>And{F1,F2}</code></td>
</tr>
<tr>
<td align="right"><code>or</code>/<code>⩔</code></td>
<td><code>Or{F1,F2}</code></td>
</tr>
<tr>
<td align="right"><code>isapprox</code></td>
<td><code>Approx{T,Kwargs}</code></td>
</tr>
<tr>
<td align="right"><code>in</code></td>
<td><code>In{T}</code></td>
</tr>
<tr>
<td align="right"><code>!in</code></td>
<td><code>NotIn{T}</code></td>
</tr>
<tr>
<td align="right"><code>&lt;</code></td>
<td><code>Less{T}</code></td>
</tr>
<tr>
<td align="right"><code>&lt;=</code></td>
<td><code>LessThanOrEqual{T}</code></td>
</tr>
<tr>
<td align="right"><code>&gt;</code></td>
<td><code>Greater{T}</code></td>
</tr>
<tr>
<td align="right"><code>&gt;=</code></td>
<td><code>GreaterThanOrEqual{T}</code></td>
</tr>
<tr>
<td align="right"><code>==</code></td>
<td><code>Equal{T}</code></td>
</tr>
<tr>
<td align="right"><code>isequal</code></td>
<td><code>Equal{T}</code></td>
</tr>
<tr>
<td align="right"><code>!=</code></td>
<td><code>NotEqual{T}</code></td>
</tr>
<tr>
<td align="right"><code>startswith</code></td>
<td><code>StartsWith{T}</code></td>
</tr>
<tr>
<td align="right"><code>endswith</code></td>
<td><code>EndsWith{T}</code></td>
</tr>
</tbody>
</table>
</article></div>