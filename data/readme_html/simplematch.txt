<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-simplematch" class="anchor" aria-hidden="true" href="#simplematch"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>SimpleMatch</h1>
<p><a href="https://github.com/schlichtanders/SimpleMatch.jl/actions"><img src="https://github.com/schlichtanders/SimpleMatch.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/schlichtanders/SimpleMatch.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/4d6cff3b9b4941e2a3270c5699ac04b83159a69105e4d9793a67328f8e0e6cd6/68747470733a2f2f636f6465636f762e696f2f67682f7363686c69636874616e646572732f53696d706c654d617463682e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/schlichtanders/SimpleMatch.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p>Install with</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Pkg
pkg&quot;add SimpleMatch&quot;
"><pre><span class="pl-k">using</span> Pkg
<span class="pl-s"><span class="pl-pds"><span class="pl-c1">pkg</span>"</span>add SimpleMatch<span class="pl-pds">"</span></span></pre></div>
<p>and load it</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="using SimpleMatch
"><pre><code>using SimpleMatch
</code></pre></div>
<p>which gives you access to the one and only macro of this package <code>@match</code>.</p>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<p>With match you can define local dispatch, i.e. you can rewrite</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="myhelperfunctionname(a::Int) = a + 2
myhelperfunctionname(a::String) = a * &quot;!&quot;
myhelperfunctionname(&quot;hi&quot;)  # &quot;hi!&quot;&quot;
"><pre><span class="pl-en">myhelperfunctionname</span>(a<span class="pl-k">::</span><span class="pl-c1">Int</span>) <span class="pl-k">=</span> a <span class="pl-k">+</span> <span class="pl-c1">2</span>
<span class="pl-en">myhelperfunctionname</span>(a<span class="pl-k">::</span><span class="pl-c1">String</span>) <span class="pl-k">=</span> a <span class="pl-k">*</span> <span class="pl-s"><span class="pl-pds">"</span>!<span class="pl-pds">"</span></span>
<span class="pl-c1">myhelperfunctionname</span>(<span class="pl-s"><span class="pl-pds">"</span>hi<span class="pl-pds">"</span></span>)  <span class="pl-c"><span class="pl-c">#</span> "hi!""</span></pre></div>
<p>as</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="@match(&quot;hi&quot;) do f
  f(a::Int) = a + 2
  f(a::String) = a * &quot;!&quot;
end
# &quot;hi!&quot;&quot;
"><pre><span class="pl-c1">@match</span>(<span class="pl-s"><span class="pl-pds">"</span>hi<span class="pl-pds">"</span></span>) <span class="pl-k">do</span> f
  <span class="pl-en">f</span>(a<span class="pl-k">::</span><span class="pl-c1">Int</span>) <span class="pl-k">=</span> a <span class="pl-k">+</span> <span class="pl-c1">2</span>
  <span class="pl-en">f</span>(a<span class="pl-k">::</span><span class="pl-c1">String</span>) <span class="pl-k">=</span> a <span class="pl-k">*</span> <span class="pl-s"><span class="pl-pds">"</span>!<span class="pl-pds">"</span></span>
<span class="pl-k">end</span>
<span class="pl-c"><span class="pl-c">#</span> "hi!""</span></pre></div>
<p>You get full standard dispatch but don't have to care any longer about how to name your intermediate function.
Just name it <code>f</code> always. The <code>do-syntax</code> guarantees that this is a local function which cannot interfere at all.</p>
<p>Of course you can also dispatch on values using standard <code>Val</code>. E.g. very useful when working with <code>Base.Expr</code></p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="expr = :(function dummy end)
a = expr.head
@match(Val(a)) do f
  f(::Val{:function}) = &quot;a function definition&quot;
  f(::Val{:(=)}) = &quot;maybe another function definition&quot;
end
"><pre>expr <span class="pl-k">=</span> :(<span class="pl-k">function</span> dummy <span class="pl-k">end</span>)
a <span class="pl-k">=</span> expr<span class="pl-k">.</span>head
<span class="pl-c1">@match</span>(<span class="pl-c1">Val</span>(a)) <span class="pl-k">do</span> f
  <span class="pl-en">f</span>(<span class="pl-k">::</span><span class="pl-c1">Val{:function}</span>) <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>a function definition<span class="pl-pds">"</span></span>
  <span class="pl-en">f</span>(<span class="pl-k">::</span><span class="pl-c1">Val{:(=)}</span>) <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>maybe another function definition<span class="pl-pds">"</span></span>
<span class="pl-k">end</span></pre></div>
<h2><a id="user-content-you-may-also-like" class="anchor" aria-hidden="true" href="#you-may-also-like"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>You may also like</h2>
<p>As the name suggests, this is a super minimal version of inline matching. I think it especially useful because of its
simplicity. It won't give you any heavy dependency (excluding documentation the <code>@match</code> macro is only 15 lines long).</p>
<p>On the other hand, if you want something more flexible, more powerful, check out <a href="https://github.com/kmsquire/Match.jl">https://github.com/kmsquire/Match.jl</a>.</p>
</article></div>