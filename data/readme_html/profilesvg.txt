<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-profilesvg" class="anchor" aria-hidden="true" href="#profilesvg"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>ProfileSVG</h1>
<p><a href="https://travis-ci.com/timholy/ProfileSVG.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/5f9ab8a5eb0d9170ae22e47be42e92d2210ec5dc/68747470733a2f2f7472617669732d63692e636f6d2f74696d686f6c792f50726f66696c655356472e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/timholy/ProfileSVG.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/timholy/ProfileSVG.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/18c9f9d10e6cadd7abc73ef4dfcf84200bd76625/68747470733a2f2f636f6465636f762e696f2f67682f74696d686f6c792f50726f66696c655356472e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/timholy/ProfileSVG.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<h2><a id="user-content-profilesvg-needs-a-competent-maintainer" class="anchor" aria-hidden="true" href="#profilesvg-needs-a-competent-maintainer"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>ProfileSVG needs a competent maintainer!</h2>
<p>ProfileSVG is looking for a maintainer who actually knows something about SVG and Javascript (unlike the current maintainer). Volunteers should file an issue.</p>
<h2><a id="user-content-purpose" class="anchor" aria-hidden="true" href="#purpose"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Purpose</h2>
<p>ProfileSVG allows you to export profiling data as an SVG file.
It is also used to display profiling results in Jupyter/IJulia notebooks.
It is essentially just an "export" package built on top of
<a href="https://github.com/timholy/FlameGraphs.jl">FlameGraphs</a>.</p>
<p>An alternative visualization package is the GTK-based
<a href="https://github.com/timholy/ProfileView.jl">ProfileView</a>.
That package offers more interactive features, like the ability to
pan &amp; zoom, as well as the ability to open source files by clicking on
elements of the flame graph.</p>
<p>Among the Julia packages, ProfileView.jl currently has the most comprehensive
tutorial on how to interpret a flame graph.</p>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Usage</h2>
<h3><a id="user-content-usage-in-jupyter" class="anchor" aria-hidden="true" href="#usage-in-jupyter"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Usage in Jupyter</h3>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> ProfileSVG
<span class="pl-c1">@profview</span> <span class="pl-c1">f</span>(args<span class="pl-k">...</span>)</pre></div>
<p>where <code>f(args...)</code> is the operation you want to profile.
<code>@profview f(args...)</code> is just shorthand for</p>
<div class="highlight highlight-source-julia"><pre>Profile<span class="pl-k">.</span><span class="pl-c1">clear</span>()
<span class="pl-c1">@profile</span> <span class="pl-c1">f</span>(args<span class="pl-k">...</span>)
ProfileSVG<span class="pl-k">.</span><span class="pl-c1">view</span>()</pre></div>
<p>If you've already collected profiling data with <code>@profile</code>, you can just call <code>ProfileSVG.view()</code> directly.</p>
<p>The following screenshot illustrates Jupyter usage on a demonstration function <code>profile_test</code>:</p>
<p><a target="_blank" rel="noopener noreferrer" href="images/jupyter.png"><img src="images/jupyter.png" alt="profview" style="max-width:100%;"></a></p>
<p>You can hover over individual blocks in the flame graph to get more detailed information.</p>
<h3><a id="user-content-exporting-to-svg" class="anchor" aria-hidden="true" href="#exporting-to-svg"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Exporting to SVG</h3>
<p>Even if you don't use Jupyter, you might want to export a flame graph as an SVG file
as a convenient way to share the results with others.</p>
<p>Here's a demonstration:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">function</span> <span class="pl-en">profile_test</span>(n)
    <span class="pl-k">for</span> i <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span>n
        A <span class="pl-k">=</span> <span class="pl-c1">randn</span>(<span class="pl-c1">100</span>,<span class="pl-c1">100</span>,<span class="pl-c1">20</span>)
        m <span class="pl-k">=</span> <span class="pl-c1">maximum</span>(A)
        Am <span class="pl-k">=</span> <span class="pl-c1">mapslices</span>(sum, A; dims<span class="pl-k">=</span><span class="pl-c1">2</span>)
        B <span class="pl-k">=</span> A[:,:,<span class="pl-c1">5</span>]
        Bsort <span class="pl-k">=</span> <span class="pl-c1">mapslices</span>(sort, B; dims<span class="pl-k">=</span><span class="pl-c1">1</span>)
        b <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">100</span>)
        C <span class="pl-k">=</span> B<span class="pl-k">.*</span>b
    <span class="pl-k">end</span>
<span class="pl-k">end</span>

<span class="pl-c1">profile_test</span>(<span class="pl-c1">1</span>)   <span class="pl-c"><span class="pl-c">#</span> run once to compile</span>

<span class="pl-k">using</span> Profile, ProfileSVG
Profile<span class="pl-k">.</span><span class="pl-c1">clear</span>()
<span class="pl-c1">@profile</span> <span class="pl-c1">profile_test</span>(<span class="pl-c1">10</span>);

<span class="pl-c"><span class="pl-c">#</span> Save a graph that looks like the Jupyter example above</span>
ProfileSVG<span class="pl-k">.</span><span class="pl-c1">save</span>(<span class="pl-s"><span class="pl-pds">"</span>/tmp/prof.svg<span class="pl-pds">"</span></span>)

<span class="pl-c"><span class="pl-c">#</span> Save a graph that colors stackframes according to their module-of-origin</span>
<span class="pl-k">using</span> FlameGraphs
ProfileSVG<span class="pl-k">.</span><span class="pl-c1">save</span>(<span class="pl-c1">StackFrameCategory</span>(), <span class="pl-s"><span class="pl-pds">"</span>/tmp/prof2.svg<span class="pl-pds">"</span></span>)</pre></div>
<p>The latter file looks something like this:</p>
<p><a target="_blank" rel="noopener noreferrer" href="images/stackframecat.png"><img src="images/stackframecat.png" alt="sfcat" style="max-width:100%;"></a></p>
<p>where the different colors indicate method definitions in different modules.</p>
</article></div>