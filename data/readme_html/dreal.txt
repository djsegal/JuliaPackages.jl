<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-drealjl" class="anchor" aria-hidden="true" href="#drealjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>DReal.jl</h1>
<p><a href="https://travis-ci.org/dreal/DReal.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/5443a4430c14c82bdcd5a1b854ba6142425818d1/68747470733a2f2f7472617669732d63692e6f72672f647265616c2f445265616c2e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/dreal/DReal.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p>This is a Julia wrapper for the <a href="https://dreal.github.io/" rel="nofollow">dReal SMT solver</a>.
dReal allows you to answer <a href="http://en.wikipedia.org/wiki/Satisfiability_modulo_theories" rel="nofollow">satisfiability problems</a>.  That is, you can ask questions of the form: <strong>is there some assignment to my variables <code>x1</code>,<code>x2</code>,<code>x3</code>,..., that makes my formula over these variables true?</strong>.</p>
<p>dReal also allows you to do non-linear, constrained, optimisation.</p>
<h1><a id="user-content-prerequisites" class="anchor" aria-hidden="true" href="#prerequisites"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Prerequisites</h1>
<ul>
<li>
<p>Linux or OSX: DReal does not support Windows</p>
</li>
<li>
<p>libstdc++6: In Ubuntu, please do the following install to install it.</p>
<div class="highlight highlight-source-shell"><pre>sudo add-apt-repository --yes ppa:ubuntu-toolchain-r/test <span class="pl-c"><span class="pl-c">#</span> needed for 12.04</span>
sudo apt-get update
sudo apt-get install libstdc++6</pre></div>
</li>
</ul>
<h1><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h1>
<p>You can easily install DReal from a Julia repl with</p>
<div class="highlight highlight-source-julia"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">update</span>()
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>DReal<span class="pl-pds">"</span></span>)</pre></div>
<p>DReal can then be loaded with:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> DReal</pre></div>
<h1><a id="user-content-getting-started" class="anchor" aria-hidden="true" href="#getting-started"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Getting Started</h1>
<p>To ask is there some Integer <code>x</code> and some Integer <code>y</code> such that <code>x &gt; 2</code> and <code>y &lt; 10</code> and <code>x + 2*y ==7</code>, y ou could write:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> DReal
x <span class="pl-k">=</span> <span class="pl-c1">Var</span>(Int, <span class="pl-s"><span class="pl-pds">"</span>x<span class="pl-pds">"</span></span>)
y <span class="pl-k">=</span> <span class="pl-c1">Var</span>(Int)
<span class="pl-c1">add!</span>((x <span class="pl-k">&gt;</span> <span class="pl-c1">2</span>) <span class="pl-k">&amp;</span> (y <span class="pl-k">&lt;</span> <span class="pl-c1">10</span>) <span class="pl-k">&amp;</span> (x <span class="pl-k">+</span> <span class="pl-c1">2</span><span class="pl-k">*</span>y <span class="pl-k">==</span> <span class="pl-c1">7</span>))
<span class="pl-c1">is_satisfiable</span>()</pre></div>
<p>The function <code>Var(Int,"x")</code> creates an integer variable named <code>x</code>.  You can ommit the name and it will be automatically generated for you; for the most part you won't need to see the name.  <code>x</code> will have type <code>Ex{Int}</code>, and when we apply functions to variables we also get back typed <code>Ex{T}</code> values.  For instance <code>x+2y</code> will also have type <code>Ex{Int}</code>, but the main constraint <code>(x &gt; 2) &amp; (y &lt; 10) &amp; (x + 2*y == 7)</code> will have type <code>Ex{Bool}</code>, i.e. it is a <em>proposition</em>.</p>
<p>Use <code>add!</code> to assert that any proposition <code>Ex{Bool}</code> value must be true. We then use <code>is_satisfiable</code> to solve the system to determine whether there is any assignment to our variables <code>x</code> and <code>y</code> that can makes the expression <code>x &gt; 2 &amp; y &lt; 10 &amp; x + 2*y == 7</code> true.</p>
<h2><a id="user-content-real-valued-arithmetic" class="anchor" aria-hidden="true" href="#real-valued-arithmetic"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Real Valued Arithmetic</h2>
<p>Similarly to the previous example, we can use create models using Real (<code>Float64</code>) variables:</p>
<div class="highlight highlight-source-julia"><pre>x <span class="pl-k">=</span> <span class="pl-c1">Var</span>(Float64,<span class="pl-k">-</span><span class="pl-c1">100.0</span>,<span class="pl-c1">100.0</span>)
y <span class="pl-k">=</span> <span class="pl-c1">Var</span>(Float64,<span class="pl-k">-</span><span class="pl-c1">100.0</span>,<span class="pl-c1">100.0</span>)
<span class="pl-c1">add!</span>((x<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">+</span> y<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">&gt;</span> <span class="pl-c1">4</span>) <span class="pl-k">&amp;</span> (x<span class="pl-k">^</span><span class="pl-c1">3</span> <span class="pl-k">+</span> y <span class="pl-k">&lt;</span> <span class="pl-c1">5</span>))
x,y <span class="pl-k">=</span> <span class="pl-c1">model</span>(x,y)</pre></div>
<p>This example also shows how to extract a <em>model</em>. A model is an assignment of  values to variables that makes the model satisfiable.  Use <code>model</code>, and any variable used in the system to extract relevant variables in a model.  <strong>Note</strong>: <code>model</code> only makes sense when the system is satisfiable, otherwise it will throw an error.</p>
<h2><a id="user-content-nonlinear-arithmetic" class="anchor" aria-hidden="true" href="#nonlinear-arithmetic"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Nonlinear Arithmetic</h2>
<p>The feature which distinguishes dReal in comparison to other SMT solvers is its powerful support for nonlinear real arithmetic.</p>
<p>Consider an example which slighly modifies a formula from the Flyspeck project benchmarks, taken from <a href="http://dreal.github.io/" rel="nofollow">the dReal homepage</a>.</p>
<p><a target="_blank" rel="noopener noreferrer" href="images/eq.png?raw=true"><img src="images/eq.png?raw=true" alt="flyspeckimage" style="max-width:100%;"></a></p>
<div class="highlight highlight-source-julia"><pre>x1 <span class="pl-k">=</span> <span class="pl-c1">Var</span>(Float64, <span class="pl-c1">3.0</span>, <span class="pl-c1">3.14</span>)
x2 <span class="pl-k">=</span> <span class="pl-c1">Var</span>(Float64, <span class="pl-k">-</span><span class="pl-c1">7.0</span>, <span class="pl-c1">5.0</span>)
c <span class="pl-k">=</span> (<span class="pl-c1">2</span>Ï€ <span class="pl-k">-</span> <span class="pl-c1">2</span><span class="pl-k">*</span>x1<span class="pl-k">*</span><span class="pl-c1">asin</span>(<span class="pl-c1">cos</span>(<span class="pl-c1">0.797</span>) <span class="pl-k">*</span> <span class="pl-c1">sin</span>(Ï€<span class="pl-k">/</span>x1))) <span class="pl-k">&lt;=</span> (<span class="pl-k">-</span><span class="pl-c1">0.591</span> <span class="pl-k">-</span> <span class="pl-c1">0.0331</span> <span class="pl-k">*</span>x2 <span class="pl-k">+</span> <span class="pl-c1">0.506</span> <span class="pl-k">+</span> <span class="pl-c1">1.0</span>)
<span class="pl-c1">add!</span>(c)
<span class="pl-c1">is_satisfiable</span>() <span class="pl-c"><span class="pl-c">#</span> false</span></pre></div>
<h1><a id="user-content-boolean-logic" class="anchor" aria-hidden="true" href="#boolean-logic"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Boolean Logic</h1>
<p>dReal supports boolean operators: And (<code>&amp;</code>), Or (<code>|</code>), Not (<code>!</code>), implies (<code>implies</code> or â†’ (<code>\rightarrow</code>))   and if-then-else (<code>ifelse</code>).  BiÂ­implications are
represented using equality <code>==</code>.  The following example shows how to solve a simple set of Boolean constraints.</p>
<div class="highlight highlight-source-julia"><pre>a <span class="pl-k">=</span> <span class="pl-c1">Var</span>(Bool)
b <span class="pl-k">=</span> <span class="pl-c1">Var</span>(Bool)
<span class="pl-c1">add!</span>(a â†’ b) <span class="pl-c"><span class="pl-c">#</span> \rightarrow - equivalent to implies(a,b)</span>
a,b <span class="pl-k">=</span>  <span class="pl-c1">model</span>(a,b)</pre></div>
<h1><a id="user-content-universal-quantification-with-forall" class="anchor" aria-hidden="true" href="#universal-quantification-with-forall"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Universal Quantification with <code>ForAll</code></h1>
<p>DReal has experimental support for combinations of universal and existential quantification.  A universally quantified variable is created using <code>ForallVar</code> instead of <code>Var</code>.  For example, we can use <code>Forall</code> to do a synthesize a simple function.  The following example looks for a binary function <code>f</code> in a function space (parameterised by a variable <code>d</code>) such that for all inputs <code>x</code> and <code>y</code>, f(x,y) is greater than <code>5.0</code>.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> DReal

b <span class="pl-k">=</span> <span class="pl-c1">ForallVar</span>(<span class="pl-c1">global_context</span>(), Float64)
c <span class="pl-k">=</span> <span class="pl-c1">ForallVar</span>(<span class="pl-c1">global_context</span>(), Float64)
d <span class="pl-k">=</span> <span class="pl-c1">Var</span>(Float64,<span class="pl-k">-</span><span class="pl-c1">10.</span>, <span class="pl-c1">10.</span>)

<span class="pl-en">f</span>(x,y) <span class="pl-k">=</span> (x <span class="pl-k">+</span> y)<span class="pl-k">*</span>d <span class="pl-k">+</span> <span class="pl-c1">6</span>

<span class="pl-c1">add!</span>(<span class="pl-c1">f</span>(b,c) <span class="pl-k">&gt;</span> <span class="pl-c1">5.0</span>)
<span class="pl-c1">@show</span> <span class="pl-c1">is_satisfiable</span>()
<span class="pl-c1">@show</span> <span class="pl-c1">model</span>(d)</pre></div>
<h1><a id="user-content-optimisation" class="anchor" aria-hidden="true" href="#optimisation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Optimisation</h1>
<p>DReal.jl has tools for constrained optimisation.  One strength of optimisation in dReal is that the constraints and the objective function can be non-linear or discontinous.  The function <code>minimize(obj::Ex,vars::Ex...)</code> takes as input a value <code>obj</code> to to be minimised, and any variables <code>vars</code> whose optimal values you would like to get.  It returns a <code>Tuple</code> (a pair) of the optimal cost and corresponding values of the vars you specified.</p>
<p>As an example we can minimize the <a href="http://en.wikipedia.org/wiki/Rastrigin_function" rel="nofollow">rastrigins function</a>, which takes vector <code>x</code> of reals, each between -5.12 and 5.12  as input, and has a global minimum at <code>x = 0</code>, of 0.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-en">rastrigin</span>(x<span class="pl-k">::</span><span class="pl-c1">Array</span>) <span class="pl-k">=</span> <span class="pl-c1">10</span> <span class="pl-k">*</span> <span class="pl-c1">length</span>(x) <span class="pl-k">+</span> <span class="pl-c1">sum</span>([xi<span class="pl-k">*</span>xi <span class="pl-k">-</span> <span class="pl-c1">10</span><span class="pl-k">*</span><span class="pl-c1">cos</span>(<span class="pl-c1">2</span>pi<span class="pl-k">*</span>xi) <span class="pl-k">for</span> xi <span class="pl-k">in</span> x])

x <span class="pl-k">=</span> <span class="pl-c1">Var</span>(Float64, <span class="pl-k">-</span><span class="pl-c1">5.12</span>,<span class="pl-c1">5.12</span>)
y <span class="pl-k">=</span> <span class="pl-c1">Var</span>(Float64, <span class="pl-k">-</span><span class="pl-c1">5.12</span>,<span class="pl-c1">5.12</span>)
f <span class="pl-k">=</span> <span class="pl-c1">Var</span>(Float64, <span class="pl-k">-</span><span class="pl-c1">10.</span>,<span class="pl-c1">10.</span>)
<span class="pl-c1">add!</span>(f <span class="pl-k">==</span> <span class="pl-c1">rastrigin</span>([x,y]))
cost, assignment <span class="pl-k">=</span>  <span class="pl-c1">minimize</span>(f,x,y; lb<span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">10.</span>,ub <span class="pl-k">=</span> <span class="pl-c1">10.</span>)
<span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>the assignment of x=<span class="pl-v">$(assignment[<span class="pl-c1">1</span>])</span> and y=<span class="pl-v">$(assignment[<span class="pl-c1">2</span>])</span> minimises rastrigin to <span class="pl-v">$cost</span><span class="pl-pds">"</span></span>)</pre></div>
<p>prints:</p>
<pre><code>&gt; the assignment of x=[0.0 0.0] and y=[0.0 0.0] minimises rastrigin to [0.0 -0.0]
</code></pre>
<p><strong>caution:</strong> the value of the cost function must be a declared variable.  The following code may produce wrong or erratic results</p>
<div class="highlight highlight-source-julia"><pre>x <span class="pl-k">=</span> <span class="pl-c1">Var</span>(Float64,<span class="pl-s"><span class="pl-pds">"</span>x<span class="pl-pds">"</span></span>,<span class="pl-k">-</span><span class="pl-c1">5.12</span>,<span class="pl-c1">5.12</span>)
y <span class="pl-k">=</span> <span class="pl-c1">Var</span>(Float64,<span class="pl-s"><span class="pl-pds">"</span>y<span class="pl-pds">"</span></span>,<span class="pl-k">-</span><span class="pl-c1">5.12</span>,<span class="pl-c1">5.12</span>)

<span class="pl-c"><span class="pl-c">#</span> we did not declare a value for the cost</span>
cost, assignment <span class="pl-k">=</span>  <span class="pl-c1">minimize</span>(<span class="pl-c1">rastrigin</span>([x,y]),x,y; lb<span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">10.</span>,ub <span class="pl-k">=</span> <span class="pl-c1">10.</span>)</pre></div>
<h2><a id="user-content-mathprogbase" class="anchor" aria-hidden="true" href="#mathprogbase"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>MathProgBase</h2>
<p>DReal has an (experimental) implementation of <a href="https://github.com/JuliaOpt/MathProgBase.jl">MathProgBase</a> interface, and hence can be used with <a href="https://github.com/JuliaOpt/JuMP.jl">JuMP</a> and other modelling languages of <a href="http://www.juliaopt.org/" rel="nofollow">JuliaOpt</a>.  In general MathProgBase is less general than normal DReal.  Example:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> JuMP
<span class="pl-k">using</span> NLopt
<span class="pl-k">using</span> DReal

m <span class="pl-k">=</span> <span class="pl-c1">Model</span>(solver<span class="pl-k">=</span>DReal<span class="pl-k">.</span><span class="pl-c1">DRealSolver</span>(precision <span class="pl-k">=</span> <span class="pl-c1">0.001</span>))
<span class="pl-c1">@defVar</span>(m, <span class="pl-k">-</span><span class="pl-c1">10</span> <span class="pl-k">&lt;=</span> x1 <span class="pl-k">&lt;=</span> <span class="pl-c1">10.0</span> )        <span class="pl-c"><span class="pl-c">#</span> Lower bound only (note: 'lb &lt;= x' is not valid)</span>
<span class="pl-c1">@defVar</span>(m, <span class="pl-k">-</span><span class="pl-c1">10</span> <span class="pl-k">&lt;=</span> x2 <span class="pl-k">&lt;=</span> <span class="pl-c1">10.0</span> )        <span class="pl-c"><span class="pl-c">#</span> Lower bound only (note: 'lb &lt;= x' is not valid)</span>

<span class="pl-c1">@setNLObjective</span>(m, <span class="pl-c1">:Min</span>, <span class="pl-k">-</span><span class="pl-c1">1</span> <span class="pl-k">*</span> ((<span class="pl-c1">cos</span>(x1)<span class="pl-k">*</span><span class="pl-c1">cos</span>(x2)<span class="pl-k">*</span><span class="pl-c1">exp</span>(<span class="pl-c1">sqrt</span>(<span class="pl-c1">1</span> <span class="pl-k">-</span> (<span class="pl-c1">sqrt</span>(x1<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">+</span> x2<span class="pl-k">^</span><span class="pl-c1">2</span>)) <span class="pl-k">/</span> <span class="pl-c1">3.141592</span>)))<span class="pl-k">^</span><span class="pl-c1">2</span>) <span class="pl-k">/</span> <span class="pl-c1">30</span>)

status <span class="pl-k">=</span> <span class="pl-c1">solve</span>(m)

<span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>Objective value: <span class="pl-pds">"</span></span>, <span class="pl-c1">getObjectiveValue</span>(m))
<span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>x1 = <span class="pl-pds">"</span></span>, <span class="pl-c1">getValue</span>(x1))
<span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>x2 = <span class="pl-pds">"</span></span>, <span class="pl-c1">getValue</span>(x2))</pre></div>
</article></div>