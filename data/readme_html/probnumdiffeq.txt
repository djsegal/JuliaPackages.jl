<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-probnumdiffeqjl" class="anchor" aria-hidden="true" href="#probnumdiffeqjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>ProbNumDiffEq.jl</h1>
<p dir="auto"><a href="https://nathanaelbosch.github.io/ProbNumDiffEq.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://nathanaelbosch.github.io/ProbNumDiffEq.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/nathanaelbosch/ProbNumDiffEq.jl/actions"><img src="https://github.com/nathanaelbosch/ProbNumDiffEq.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/nathanaelbosch/ProbNumDiffEq.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/bfecd385f96c0e1e5a05a586eda1de66b7720f617ea32b9b0458c58bc5f3c595/68747470733a2f2f636f6465636f762e696f2f67682f6e617468616e61656c626f7363682f50726f624e756d4469666645712e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e7376673f746f6b656e3d65756649656d4347586e" alt="Coverage" data-canonical-src="https://codecov.io/gh/nathanaelbosch/ProbNumDiffEq.jl/branch/main/graph/badge.svg?token=eufIemCGXn" style="max-width: 100%;"></a>
<a href="https://nathanaelbosch.github.io/ProbNumDiffEq.jl/dev/benchmarks/multi-language-wrappers/" rel="nofollow"><img src="https://camo.githubusercontent.com/d08553b6c30bd907acdf4ddc1df4ac589eab06165c6e1434c5ba5df31fec23c4/687474703a2f2f696d672e736869656c64732e696f2f62616467652f62656e63686d61726b732d646f63732d626c756576696f6c65742e737667" alt="Benchmarks" data-canonical-src="http://img.shields.io/badge/benchmarks-docs-blueviolet.svg" style="max-width: 100%;"></a></p>


<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="./examples/banner.svg?raw=true"><img src="./examples/banner.svg?raw=true" alt="Banner" style="max-width: 100%;"></a></p>
<p dir="auto"><strong>ProbNumDiffEq.jl</strong> provides <em>probabilistic numerical</em> ODE solvers to the
<a href="https://diffeq.sciml.ai/stable/" rel="nofollow">DifferentialEquations.jl</a> ecosystem.
The implemented <em>ODE filters</em> solve differential equations via Bayesian filtering and smoothing. The filters compute not just a single point estimate of the true solution, but a posterior distribution that contains an estimate of its numerical approximation error.</p>
<p dir="auto">For a short intro video, check out our <a href="https://www.youtube.com/watch?v=EMFl6ytP3iQ" rel="nofollow">poster presentation at JuliaCon2021</a>.</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">Run Julia, enter <code>]</code> to bring up Julia's package manager, and add the ProbNumDiffEq.jl package:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; ]
(v1.8) pkg&gt; add ProbNumDiffEq"><pre class="notranslate"><code>julia&gt; ]
(v1.8) pkg&gt; add ProbNumDiffEq
</code></pre></div>
<h2 dir="auto"><a id="user-content-example-solving-the-fitzhugh-nagumo-ode" class="anchor" aria-hidden="true" href="#example-solving-the-fitzhugh-nagumo-ode"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example: Solving the FitzHugh-Nagumo ODE</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using ProbNumDiffEq

# ODE definition as in DifferentialEquations.jl
function f(du, u, p, t)
    a, b, c = p
    du[1] = c * (u[1] - u[1]^3 / 3 + u[2])
    du[2] = -(1 / c) * (u[1] - a - b * u[2])
end
u0 = [-1.0, 1.0]
tspan = (0.0, 20.0)
p = (0.2, 0.2, 3.0)
prob = ODEProblem(f, u0, tspan, p)

# Solve the ODE with a probabilistic numerical solver: EK1
sol = solve(prob, EK1())

# Plot the solution with Plots.jl
using Plots
plot(sol, color=[&quot;#CB3C33&quot; &quot;#389826&quot; &quot;#9558B2&quot;])"><pre><span class="pl-k">using</span> ProbNumDiffEq

<span class="pl-c"><span class="pl-c">#</span> ODE definition as in DifferentialEquations.jl</span>
<span class="pl-k">function</span> <span class="pl-en">f</span>(du, u, p, t)
    a, b, c <span class="pl-k">=</span> p
    du[<span class="pl-c1">1</span>] <span class="pl-k">=</span> c <span class="pl-k">*</span> (u[<span class="pl-c1">1</span>] <span class="pl-k">-</span> u[<span class="pl-c1">1</span>]<span class="pl-k">^</span><span class="pl-c1">3</span> <span class="pl-k">/</span> <span class="pl-c1">3</span> <span class="pl-k">+</span> u[<span class="pl-c1">2</span>])
    du[<span class="pl-c1">2</span>] <span class="pl-k">=</span> <span class="pl-k">-</span>(<span class="pl-c1">1</span> <span class="pl-k">/</span> c) <span class="pl-k">*</span> (u[<span class="pl-c1">1</span>] <span class="pl-k">-</span> a <span class="pl-k">-</span> b <span class="pl-k">*</span> u[<span class="pl-c1">2</span>])
<span class="pl-k">end</span>
u0 <span class="pl-k">=</span> [<span class="pl-k">-</span><span class="pl-c1">1.0</span>, <span class="pl-c1">1.0</span>]
tspan <span class="pl-k">=</span> (<span class="pl-c1">0.0</span>, <span class="pl-c1">20.0</span>)
p <span class="pl-k">=</span> (<span class="pl-c1">0.2</span>, <span class="pl-c1">0.2</span>, <span class="pl-c1">3.0</span>)
prob <span class="pl-k">=</span> <span class="pl-c1">ODEProblem</span>(f, u0, tspan, p)

<span class="pl-c"><span class="pl-c">#</span> Solve the ODE with a probabilistic numerical solver: EK1</span>
sol <span class="pl-k">=</span> <span class="pl-c1">solve</span>(prob, <span class="pl-c1">EK1</span>())

<span class="pl-c"><span class="pl-c">#</span> Plot the solution with Plots.jl</span>
<span class="pl-k">using</span> Plots
<span class="pl-c1">plot</span>(sol, color<span class="pl-k">=</span>[<span class="pl-s"><span class="pl-pds">"</span>#CB3C33<span class="pl-pds">"</span></span> <span class="pl-s"><span class="pl-pds">"</span>#389826<span class="pl-pds">"</span></span> <span class="pl-s"><span class="pl-pds">"</span>#9558B2<span class="pl-pds">"</span></span>])</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="./examples/fitzhughnagumo.svg?raw=true"><img src="./examples/fitzhughnagumo.svg?raw=true" alt="Fitzhugh-Nagumo Solution" title="Fitzhugh-Nagumo Solution" style="max-width: 100%;"></a></p>
<p dir="auto">Since we're doing probabilistic numerics the solution also contains error estimates, it just happens that they are too small to be visible in the plot above.
But we can just plot them directly:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Statistics
stds = std.(sol.pu)
plot(sol.t, hcat(stds...)', color=[&quot;#CB3C33&quot; &quot;#389826&quot; &quot;#9558B2&quot;]
     label=[&quot;std(u1(t))&quot; &quot;std(u2(t))&quot;], xlabel=&quot;t&quot;, ylabel=&quot;standard-deviation&quot;)"><pre><span class="pl-k">using</span> Statistics
stds <span class="pl-k">=</span> <span class="pl-c1">std</span>.(sol<span class="pl-k">.</span>pu)
<span class="pl-c1">plot</span>(sol<span class="pl-k">.</span>t, <span class="pl-c1">hcat</span>(stds<span class="pl-k">...</span>)<span class="pl-k">'</span>, color<span class="pl-k">=</span>[<span class="pl-s"><span class="pl-pds">"</span>#CB3C33<span class="pl-pds">"</span></span> <span class="pl-s"><span class="pl-pds">"</span>#389826<span class="pl-pds">"</span></span> <span class="pl-s"><span class="pl-pds">"</span>#9558B2<span class="pl-pds">"</span></span>]
     label<span class="pl-k">=</span>[<span class="pl-s"><span class="pl-pds">"</span>std(u1(t))<span class="pl-pds">"</span></span> <span class="pl-s"><span class="pl-pds">"</span>std(u2(t))<span class="pl-pds">"</span></span>], xlabel<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>t<span class="pl-pds">"</span></span>, ylabel<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>standard-deviation<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="./examples/fitzhughnagumo_stddevs.svg?raw=true"><img src="./examples/fitzhughnagumo_stddevs.svg?raw=true" alt="Fitzhugh-Nagumo Standard-Deviations" title="Fitzhugh-Nagumo Standard-Deviations" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-related-packages" class="anchor" aria-hidden="true" href="#related-packages"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Related packages</h2>
<ul dir="auto">
<li><a href="https://pnkraemer.github.io/probdiffeq/" rel="nofollow">probdiffeq</a>: Fast and feature-rich filtering-based probabilistic ODE solvers in JAX.</li>
<li><a href="https://probnum.readthedocs.io/en/latest/" rel="nofollow">ProbNum</a>: Probabilistic numerics in Python. It has not only probabilistic ODE solvers, but also probabilistic linear solvers, Bayesian quadrature, and many filtering and smoothing implementations.</li>
<li><a href="https://github.com/nathanaelbosch/Fenrir.jl">Fenrir.jl</a>: Parameter-inference in ODEs with probabilistic ODE solvers. This package builds on ProbNumDiffEq.jl to provide a negative marginal log-likelihood function, which can then be used with an optimizer or with MCMC for parameter inference.</li>
</ul>
<h2 dir="auto"><a id="user-content-references" class="anchor" aria-hidden="true" href="#references"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>References</h2>
<p dir="auto">The main references <em>for this package</em> include:</p>
<ul dir="auto">
<li>M. Schober, S. Särkkä, and P. Hennig: <strong>A Probabilistic Model for the Numerical Solution of Initial Value Problems</strong> (2018) (<a href="https://link.springer.com/article/10.1007/s11222-017-9798-7" rel="nofollow">link</a>)</li>
<li>F. Tronarp, H. Kersting, S. Särkkä, and P. Hennig: <strong>Probabilistic Solutions To Ordinary Differential Equations As Non-Linear Bayesian Filtering: A New Perspective</strong> (2019) (<a href="https://link.springer.com/article/10.1007/s11222-019-09900-1" rel="nofollow">link</a>)</li>
<li>N. Krämer, P. Hennig: <strong>Stable Implementation of Probabilistic ODE Solvers</strong> (2020) (<a href="https://arxiv.org/abs/2012.10106" rel="nofollow">link</a>)</li>
<li>N. Bosch, P. Hennig, F. Tronarp: <strong>Calibrated Adaptive Probabilistic ODE Solvers</strong> (2021) (<a href="http://proceedings.mlr.press/v130/bosch21a.html" rel="nofollow">link</a>)</li>
<li>N. Bosch, F. Tronarp, P. Hennig: <strong>Pick-and-Mix Information Operators for Probabilistic ODE Solvers</strong> (2022) (<a href="https://proceedings.mlr.press/v151/bosch22a.html" rel="nofollow">link</a>)</li>
</ul>
<p dir="auto">A more extensive list of references relevant to ODE filters is provided <a href="https://nathanaelbosch.github.io/ProbNumDiffEq.jl/stable/#References" rel="nofollow">here</a>.</p>
</article></div>