<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-abstractoperatorsjl" class="anchor" aria-hidden="true" href="#abstractoperatorsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>AbstractOperators.jl</h1>
<p><a href="https://travis-ci.org/kul-forbes/AbstractOperators.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/575182c38fc447a2d38abfa2fff6fa2383dc9ae6/68747470733a2f2f7472617669732d63692e6f72672f6b756c2d666f726265732f41627374726163744f70657261746f72732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/kul-forbes/AbstractOperators.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/nantonel/abstractoperators-jl/branch/master" rel="nofollow"><img src="https://camo.githubusercontent.com/0a2773e444291e8ca0a3ffab509187a43adb516e/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f6c66726d6b6732733161777978746b382f6272616e63682f6d61737465723f7376673d74727565" alt="Build status" data-canonical-src="https://ci.appveyor.com/api/projects/status/lfrmkg2s1awyxtk8/branch/master?svg=true" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/kul-forbes/AbstractOperators.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/aa32e9c2135fdda122a40e1bd8c66b0ec65c936f/68747470733a2f2f636f6465636f762e696f2f67682f6b756c2d666f726265732f41627374726163744f70657261746f72732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/kul-forbes/AbstractOperators.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p><a href="https://kul-forbes.github.io/AbstractOperators.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/f7b92a177c912c1cc007fc9b40f17ff3ee3bb414/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://kul-forbes.github.io/AbstractOperators.jl/latest" rel="nofollow"><img src="https://camo.githubusercontent.com/57bae07ecd50a99519ad0516d91f4ec8f0f48e12/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6c61746573742d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-latest-blue.svg" style="max-width:100%;"></a></p>
<h2><a id="user-content-description" class="anchor" aria-hidden="true" href="#description"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Description</h2>
<p>Abstract operators extend the syntax typically used for matrices to linear mappings of arbitrary dimensions and nonlinear functions. Unlike matrices however, abstract operators apply the mappings with specific efficient algorithms that minimize memory requirements.
This is particularly useful in iterative algorithms and in first order large-scale optimization algorithms.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Installation</h2>
<p>To install the package, hit <code>]</code> from the Julia command line to enter the package manager, then</p>
<div class="highlight highlight-source-julia"><pre>pkg<span class="pl-k">&gt;</span> add AbstractOperators</pre></div>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Usage</h2>
<p>With <code>using AbstractOperators</code> the package imports several methods like multiplication <code>*</code>  and adjoint transposition <code>'</code> (and their in-place methods <code>mul!</code>).</p>
<p>For example, one can create a 2-D Discrete Fourier Transform as follows:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> A <span class="pl-k">=</span> <span class="pl-c1">DFT</span>(<span class="pl-c1">3</span>,<span class="pl-c1">4</span>)
ℱ  ℝ<span class="pl-k">^</span>(<span class="pl-c1">3</span>, <span class="pl-c1">4</span>) <span class="pl-k">-&gt;</span> ℂ<span class="pl-k">^</span>(<span class="pl-c1">3</span>, <span class="pl-c1">4</span>)</pre></div>
<p>Here, it can be seen that <code>A</code> has a domain of dimensions <code>size(A,2) = (3,4)</code> and of type <code>domainType(A) = Float64</code> and a codomain of dimensions <code>size(A,1) = (3,4)</code> and type <code>codomainType(A) = Complex{Float64}</code>.</p>
<p>This linear transformation can be evaluated as follows:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> x <span class="pl-k">=</span> <span class="pl-c1">randn</span>(<span class="pl-c1">3</span>,<span class="pl-c1">4</span>); <span class="pl-c"><span class="pl-c">#</span>input matrix</span>

julia<span class="pl-k">&gt;</span> y <span class="pl-k">=</span> A<span class="pl-k">*</span>x
<span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">4</span> Array{Complex{Float64},<span class="pl-c1">2</span>}<span class="pl-k">:</span>
  <span class="pl-k">-</span><span class="pl-c1">1.11412</span><span class="pl-k">+</span><span class="pl-c1">0.0im</span>       <span class="pl-c1">3.58654</span><span class="pl-k">-</span><span class="pl-c1">0.724452im</span>  <span class="pl-k">-</span><span class="pl-c1">9.10125</span><span class="pl-k">+</span><span class="pl-c1">0.0im</span>       <span class="pl-c1">3.58654</span><span class="pl-k">+</span><span class="pl-c1">0.724452im</span>
 <span class="pl-k">-</span><span class="pl-c1">0.905575</span><span class="pl-k">+</span><span class="pl-c1">1.98446im</span>  <span class="pl-c1">0.441199</span><span class="pl-k">-</span><span class="pl-c1">0.913338im</span>  <span class="pl-c1">0.315788</span><span class="pl-k">+</span><span class="pl-c1">3.29666im</span>  <span class="pl-c1">0.174273</span><span class="pl-k">+</span><span class="pl-c1">0.318065im</span>
 <span class="pl-k">-</span><span class="pl-c1">0.905575</span><span class="pl-k">-</span><span class="pl-c1">1.98446im</span>  <span class="pl-c1">0.174273</span><span class="pl-k">-</span><span class="pl-c1">0.318065im</span>  <span class="pl-c1">0.315788</span><span class="pl-k">-</span><span class="pl-c1">3.29666im</span>  <span class="pl-c1">0.441199</span><span class="pl-k">+</span><span class="pl-c1">0.913338im</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">mul!</span>(y, A, x) <span class="pl-k">==</span> A<span class="pl-k">*</span>x <span class="pl-c"><span class="pl-c">#</span>in-place evaluation</span>
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">all</span>(A<span class="pl-k">'</span><span class="pl-k">*</span>y <span class="pl-k">-</span> <span class="pl-k">*</span>(<span class="pl-c1">size</span>(x)<span class="pl-k">...</span>)<span class="pl-k">*</span>x <span class="pl-k">.&lt;</span> <span class="pl-c1">1e-12</span>) 
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">mul!</span>(x, A<span class="pl-k">'</span>,y) <span class="pl-c"><span class="pl-c">#</span>in-place evaluation</span>
<span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">4</span> Array{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
  <span class="pl-k">-</span><span class="pl-c1">2.99091</span>   <span class="pl-c1">9.45611</span>  <span class="pl-k">-</span><span class="pl-c1">19.799</span>     <span class="pl-c1">1.6327</span> 
 <span class="pl-k">-</span><span class="pl-c1">11.1841</span>   <span class="pl-c1">11.2365</span>   <span class="pl-k">-</span><span class="pl-c1">26.3614</span>   <span class="pl-c1">11.7261</span> 
   <span class="pl-c1">5.04815</span>   <span class="pl-c1">7.61552</span>   <span class="pl-k">-</span><span class="pl-c1">6.00498</span>   <span class="pl-c1">6.25586</span>
</pre></div>
<p>Notice that inputs and outputs are not necessarily <code>Vectors</code>.</p>
<p>It is also possible to combine multiple <code>AbstractOperators</code> using different calculus rules.</p>
<p>For example <code>AbstractOperators</code> can be concatenated horizontally:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> B <span class="pl-k">=</span> <span class="pl-c1">Eye</span>(Complex{Float64},(<span class="pl-c1">3</span>,<span class="pl-c1">4</span>))
I  ℂ<span class="pl-k">^</span>(<span class="pl-c1">3</span>, <span class="pl-c1">4</span>) <span class="pl-k">-&gt;</span> ℂ<span class="pl-k">^</span>(<span class="pl-c1">3</span>, <span class="pl-c1">4</span>)

julia<span class="pl-k">&gt;</span> H <span class="pl-k">=</span> [A B]
[ℱ,I]  ℝ<span class="pl-k">^</span>(<span class="pl-c1">3</span>, <span class="pl-c1">4</span>)  ℂ<span class="pl-k">^</span>(<span class="pl-c1">3</span>, <span class="pl-c1">4</span>) <span class="pl-k">-&gt;</span> ℂ<span class="pl-k">^</span>(<span class="pl-c1">3</span>, <span class="pl-c1">4</span>)</pre></div>
<p>In this case <code>H</code> has a domain of dimensions <code>size(H,2) = ((3, 4), (3, 4))</code> and type <code>domainType(H) = (Float64, Complex{Float64})</code>.</p>
<p>When an <code>AbstractOperators</code> have multiple domains, this must be multiplied using an <code>ArrayPartition</code> (using <a href="https://github.com/JuliaDiffEq/RecursiveArrayTools.jl/">RecursiveArrayTools</a> with corresponding size and domain, for example:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> RecursiveArrayTools

julia<span class="pl-k">&gt;</span> H<span class="pl-k">*</span><span class="pl-c1">ArrayPartition</span>(x, <span class="pl-c1">complex</span>(x))
<span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">4</span> Array{Complex{Float64},<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-k">-</span><span class="pl-c1">16.3603</span><span class="pl-k">+</span><span class="pl-c1">0.0im</span>      <span class="pl-c1">52.4946</span><span class="pl-k">-</span><span class="pl-c1">8.69342im</span>  <span class="pl-k">-</span><span class="pl-c1">129.014</span><span class="pl-k">+</span><span class="pl-c1">0.0im</span>      <span class="pl-c1">44.6712</span><span class="pl-k">+</span><span class="pl-c1">8.69342im</span>
  <span class="pl-k">-</span><span class="pl-c1">22.051</span><span class="pl-k">+</span><span class="pl-c1">23.8135im</span>  <span class="pl-c1">16.5309</span><span class="pl-k">-</span><span class="pl-c1">10.9601im</span>  <span class="pl-k">-</span><span class="pl-c1">22.5719</span><span class="pl-k">+</span><span class="pl-c1">39.5599im</span>  <span class="pl-c1">13.8174</span><span class="pl-k">+</span><span class="pl-c1">3.81678im</span>
 <span class="pl-k">-</span><span class="pl-c1">5.81874</span><span class="pl-k">-</span><span class="pl-c1">23.8135im</span>  <span class="pl-c1">9.70679</span><span class="pl-k">-</span><span class="pl-c1">3.81678im</span>  <span class="pl-k">-</span><span class="pl-c1">2.21552</span><span class="pl-k">-</span><span class="pl-c1">39.5599im</span>  <span class="pl-c1">11.5502</span><span class="pl-k">+</span><span class="pl-c1">10.9601im</span></pre></div>
<p>Similarly, when an <code>AbstractOperators</code> have multiple codomains, this will return an <code>ArrayPartition</code>, for example:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> V <span class="pl-k">=</span> <span class="pl-c1">VCAT</span>(<span class="pl-c1">Eye</span>(<span class="pl-c1">3</span>,<span class="pl-c1">3</span>),<span class="pl-c1">FiniteDiff</span>((<span class="pl-c1">3</span>,<span class="pl-c1">3</span>)))
[I;δx]  ℝ<span class="pl-k">^</span>(<span class="pl-c1">3</span>, <span class="pl-c1">3</span>) <span class="pl-k">-&gt;</span> ℝ<span class="pl-k">^</span>(<span class="pl-c1">3</span>, <span class="pl-c1">3</span>)  ℝ<span class="pl-k">^</span>(<span class="pl-c1">2</span>, <span class="pl-c1">3</span>)

julia<span class="pl-k">&gt;</span> V<span class="pl-k">*</span><span class="pl-c1">ones</span>(<span class="pl-c1">3</span>,<span class="pl-c1">3</span>)
([<span class="pl-c1">1.0</span> <span class="pl-c1">1.0</span> <span class="pl-c1">1.0</span>; <span class="pl-c1">1.0</span> <span class="pl-c1">1.0</span> <span class="pl-c1">1.0</span>; <span class="pl-c1">1.0</span> <span class="pl-c1">1.0</span> <span class="pl-c1">1.0</span>], [<span class="pl-c1">0.0</span> <span class="pl-c1">0.0</span> <span class="pl-c1">0.0</span>; <span class="pl-c1">0.0</span> <span class="pl-c1">0.0</span> <span class="pl-c1">0.0</span>])
</pre></div>
<p>A list of the available <code>AbstractOperators</code> and calculus rules can be found in the <a href="https://kul-forbes.github.io/AbstractOperators.jl/latest" rel="nofollow">documentation</a>.</p>
<h2><a id="user-content-related-packages" class="anchor" aria-hidden="true" href="#related-packages"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Related packages</h2>
<ul>
<li><a href="https://github.com/kul-forbes/ProximalOperators.jl">ProximalOperators.jl</a></li>
<li><a href="https://github.com/kul-forbes/ProximalAlgorithms.jl">ProximalAlgorithms.jl</a></li>
<li><a href="https://github.com/kul-forbes/StructuredOptimization.jl">StructuredOptimization.jl</a></li>
</ul>
<h2><a id="user-content-credits" class="anchor" aria-hidden="true" href="#credits"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Credits</h2>
<p>AbstractOperators.jl is developed by
<a href="https://nantonel.github.io" rel="nofollow">Niccolò Antonello</a>
and <a href="https://lostella.github.io" rel="nofollow">Lorenzo Stella</a>
at <a href="https://www.esat.kuleuven.be/stadius/" rel="nofollow">KU Leuven, ESAT/Stadius</a>,</p>
</article></div>