<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-tuples" class="anchor" aria-hidden="true" href="#tuples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Tuples</h1>
<p><a href="https://travis-ci.org/mbauman/Tuples.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/d31e41d109494600042ce53d8b4d541fa800c334/68747470733a2f2f7472617669732d63692e6f72672f6d6261756d616e2f5475706c65732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/mbauman/Tuples.jl.svg?branch=master" style="max-width:100%;"></a> <a href="https://coveralls.io/r/mbauman/Tuples.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/861bb3ffec69de347fb7c7d8ed3477dabce0b2ac/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6d6261756d616e2f5475706c65732e6a6c2f62616467652e737667" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/mbauman/Tuples.jl/badge.svg" style="max-width:100%;"></a></p>
<p>This package explores an interface to work with <code>Tuple{}</code>s.  See
<a href="https://github.com/JuliaLang/julia/pull/11547">https://github.com/JuliaLang/julia/pull/11547</a></p>
<p>It provides the following methods to work with Tuples as though they are containers of their parameters.  It does not export these methods as they would clash with the Base methods of the same name.  As such, they must be called fully-qualified with the module name.</p>
<ul>
<li><code>Tuples.length(T)</code>: The number of component types in a Tuple T.</li>
<li><code>Tuples.collect(T)</code>: Returns the component types inside the Tuple T as an iterable container</li>
<li><code>Tuples.getindex(T, i::Integer)</code>: Returns the i-th component of the Tuple T</li>
<li><code>Tuples.getindex(T, Is)</code>: Returns an iterable container with each element set to the i-th component, for each i in Is.</li>
</ul>
<p>Additionally, it provides a convenience method for constructing Tuple types by calling <code>NTuple</code>, akin to the base method <code>ntuple</code>:</p>
<ul>
<li><code>NTuple(f, n::Integer)</code>: Construct a Tuple{} such that the i-th component is the result of f(i).</li>
</ul>
</article></div>