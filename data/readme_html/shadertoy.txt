<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-shadertoy" class="anchor" aria-hidden="true" href="#shadertoy"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>ShaderToy</h1>
<p><a href="https://travis-ci.org/SimonDanisch/ShaderToy.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/f24b694b337978259919727dbab928f36142df5129c517eee0d3f08c9a8bb94c/68747470733a2f2f7472617669732d63692e6f72672f53696d6f6e44616e697363682f536861646572546f792e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/SimonDanisch/ShaderToy.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p>This is <a href="https://www.shadertoy.com/" rel="nofollow">ShaderToy</a> recreated with <a href="https://github.com/JuliaGL/GLVisualize.jl">GLVisualize.jl</a> ,which means its all Julia + OpenGL.
It's a nice playground to get started with OpenGL.</p>
<p><a href="https://github.com/SimonDanisch/ShaderToy.jl/blob/master/examples/clouds.frag"><img src="https://github.com/SimonDanisch/ShaderToy.jl/raw/master/doc/clouds.gif?raw=true" alt="" style="max-width:100%;"></a>
<a href="https://github.com/SimonDanisch/ShaderToy.jl/blob/master/examples/monster.frag"><img src="https://github.com/SimonDanisch/ShaderToy.jl/raw/master/doc/monster.gif?raw=true" alt="" style="max-width:100%;"></a>
<a href="https://github.com/SimonDanisch/ShaderToy.jl/blob/master/examples/seascape.frag"><img src="https://github.com/SimonDanisch/ShaderToy.jl/raw/master/doc/seascape.gif?raw=true" alt="" style="max-width:100%;"></a>
<a href="https://github.com/SimonDanisch/ShaderToy.jl/blob/master/examples/raytracing.frag"><img src="https://github.com/SimonDanisch/ShaderToy.jl/raw/master/doc/raytracing.gif?raw=true" alt="" style="max-width:100%;"></a>
<a href="https://github.com/SimonDanisch/ShaderToy.jl/blob/master/examples/submerged.frag"><img src="https://github.com/SimonDanisch/ShaderToy.jl/raw/master/doc/submerged.gif?raw=true" alt="" style="max-width:100%;"></a></p>
<h1><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h1>
<p>just use this little code snipped to make your shader run:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using ShaderToy
shadertoy(&quot;path_to_you_shader.frag&quot;)
"><pre><span class="pl-k">using</span> ShaderToy
<span class="pl-c1">shadertoy</span>(<span class="pl-s"><span class="pl-pds">"</span>path_to_you_shader.frag<span class="pl-pds">"</span></span>)</pre></div>
<p>Execute it in the REPL or via some editor.
In the shader you only need this:</p>
<div class="highlight highlight-source-glsl position-relative" data-snippet-clipboard-copy-content="{{GLSL_VERSION}}
{{SHADERTOY_INPUTS}} //includes shadertoy inputs

void mainImage( out vec4 fragColor, in vec2 fragCoord ) {
	vec2 uv = fragCoord.xy / iResolution.xy;
    uv = uv * 2.0 - 1.0;
    uv.x *= iResolution.x / iResolution.y;    

	fragColor = vec4(uv,0,1); // write something to fragColor. 
	//Important: You need also to write to the alpha channel,which is not the case for shadertoy.com
}
"><pre>{{GLSL_VERSION}}
{{SHADERTOY_INPUTS}} <span class="pl-c"><span class="pl-c">//</span>includes shadertoy inputs</span>

<span class="pl-k">void</span> mainImage( <span class="pl-k">out</span> <span class="pl-k">vec4</span> fragColor, <span class="pl-k">in</span> <span class="pl-k">vec2</span> fragCoord ) {
	<span class="pl-k">vec2</span> uv <span class="pl-k">=</span> fragCoord.xy <span class="pl-k">/</span> iResolution.xy;
    uv <span class="pl-k">=</span> uv <span class="pl-k">*</span> <span class="pl-c1">2.0</span> <span class="pl-k">-</span> <span class="pl-c1">1.0</span>;
    uv.x <span class="pl-k">*=</span> iResolution.x <span class="pl-k">/</span> iResolution.y;    

	fragColor <span class="pl-k">=</span> <span class="pl-k">vec4</span>(uv,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>); <span class="pl-c"><span class="pl-c">//</span> write something to fragColor. </span>
	<span class="pl-c"><span class="pl-c">//</span>Important: You need also to write to the alpha channel,which is not the case for shadertoy.com</span>
}</pre></div>
<p>The fun part is, that when you run <code>shadertoy</code> you can edit the shader code in any editor and the changes will be immediately visible.
You can also add arbitrary textures and uniforms like this:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="shadertoy(&quot;submerged.frag&quot;, Dict{Symbol, Any}(
	:iChannel0 =&gt; Texture(rand(Float32, 64,64), x_repeat=:repeat, minfilter=:linear),
	:myuniform =&gt; Vec3f0(0,1,0),
	:myanimated_uniform =&gt; bounce(0f0:0.001f0:50f0) # will bounce between 0 and 50 with a rate of 1/60 seconds
))
"><pre><span class="pl-c1">shadertoy</span>(<span class="pl-s"><span class="pl-pds">"</span>submerged.frag<span class="pl-pds">"</span></span>, <span class="pl-c1">Dict</span><span class="pl-c1">{Symbol, Any}</span>(
	<span class="pl-c1">:iChannel0</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">Texture</span>(<span class="pl-c1">rand</span>(Float32, <span class="pl-c1">64</span>,<span class="pl-c1">64</span>), x_repeat<span class="pl-k">=</span><span class="pl-c1">:repeat</span>, minfilter<span class="pl-k">=</span><span class="pl-c1">:linear</span>),
	<span class="pl-c1">:myuniform</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">Vec3f0</span>(<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>),
	<span class="pl-c1">:myanimated_uniform</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">bounce</span>(<span class="pl-c1">0f0</span><span class="pl-k">:</span><span class="pl-c1">0.001f0</span><span class="pl-k">:</span><span class="pl-c1">50f0</span>) <span class="pl-c"><span class="pl-c">#</span> will bounce between 0 and 50 with a rate of 1/60 seconds</span>
))</pre></div>
<div class="highlight highlight-source-glsl position-relative" data-snippet-clipboard-copy-content="{{GLSL_VERSION}}
{{SHADERTOY_INPUTS}} //will include iChannel0
uniform vec3 myuniform;
uniform float myanimated_uniform; //voila, your data

"><pre>{{GLSL_VERSION}}
{{SHADERTOY_INPUTS}} <span class="pl-c"><span class="pl-c">//</span>will include iChannel0</span>
<span class="pl-k">uniform</span> <span class="pl-k">vec3</span> myuniform;
<span class="pl-k">uniform</span> <span class="pl-k">float</span> myanimated_uniform; <span class="pl-c"><span class="pl-c">//</span>voila, your data</span>
</pre></div>
<p>If you migrate shader from ShaderToy, you also need to replace the function <code>texture2D</code> with <code>texture</code>.
That should be it, the rest is very similar to the shadertoy api:
It's just more flexible as you can do whatever you want with GLVisualize, GLAbstraction and Reactive.</p>
<h1><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h1>
<p>just execute:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="Pkg.clone(&quot;https://github.com/SimonDanisch/ShaderToy.jl.git&quot;)
"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">clone</span>(<span class="pl-s"><span class="pl-pds">"</span>https://github.com/SimonDanisch/ShaderToy.jl.git<span class="pl-pds">"</span></span>)</pre></div>
</article></div>