<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-learningstrategies" class="anchor" aria-hidden="true" href="#learningstrategies"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>LearningStrategies</h1>
<table>
<thead>
<tr>
<th>Master Build</th>
<th>Test Coverage</th>
<th>Discussion</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://travis-ci.org/JuliaML/LearningStrategies.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/e6c91ecb30c00a7a2641dd4837510a8e5637ccae553247a20d43900ee3729c8c/68747470733a2f2f7472617669732d63692e6f72672f4a756c69614d4c2f4c6561726e696e67537472617465676965732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaML/LearningStrategies.jl.svg?branch=master" style="max-width:100%;"></a> <a href="https://ci.appveyor.com/project/joshday/learningstrategies-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/8099df8f6f10f074ba0cb8c89a30cf2cbce2ba9dd096b1b077d20c46975fe733/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f6576333970753534666834783275746c3f7376673d74727565" alt="Build status" data-canonical-src="https://ci.appveyor.com/api/projects/status/ev39pu54fh4x2utl?svg=true" style="max-width:100%;"></a></td>
<td><a href="https://codecov.io/gh/JuliaML/LearningStrategies.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/2cbf219a4e43077d1c4c484954ef9169aa4dc0dbd434f9acd302a07886fe3947/68747470733a2f2f636f6465636f762e696f2f67682f4a756c69614d4c2f4c6561726e696e67537472617465676965732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/JuliaML/LearningStrategies.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></td>
<td><a href="https://gitter.im/JuliaML/chat" rel="nofollow"><img src="https://camo.githubusercontent.com/7082e378e283a1ad2e98a28d6fe78884192be18c4c390b5e9f99df1489148c77/68747470733a2f2f6261646765732e6769747465722e696d2f4a756c69614d4c2f636861742e737667" alt="Gitter chat" data-canonical-src="https://badges.gitter.im/JuliaML/chat.svg" style="max-width:100%;"></a></td>
</tr>
</tbody>
</table>
<p><strong>LearningStrategies is a modular framework for building iterative algorithms in Julia</strong>.</p>
<p>Below, some of the key concepts are briefly explained, and a few examples are made. A more in-depth notebook can be found <a href="http://nbviewer.jupyter.org/github/dominusmi/warwick-rsg/blob/master/Educational/LearningStrategies.ipynb" rel="nofollow">here</a></p>
<h2><a id="user-content-basics" class="anchor" aria-hidden="true" href="#basics"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Basics</h2>
<p>Many algorithms can be generalized to the following pseudocode:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="setup
while not finished:
    (update model)
    (iteration logic)
cleanup
"><pre><code>setup
while not finished:
    (update model)
    (iteration logic)
cleanup
</code></pre></div>
<h2><a id="user-content-metastrategy" class="anchor" aria-hidden="true" href="#metastrategy"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>MetaStrategy</h2>
<p>The core function of LearningStrategies is a straightforward abstract implementation
of the above loop.  A <code>model</code> can be learned by an <code>LearningStrategy</code> or a collection of
strategies in a <code>MetaStrategy</code>.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="function learn!(model, strat::LearningStrategy, data)
    setup!(strat, model[, data])
    for (i, item) in enumerate(data)
        update!(model, strat[, i], item)
        hook(strat, model[, data], i)
        finished(strat, model[, data], i) &amp;&amp; break
    end
    cleanup!(strat, model)
    model
end
"><pre><span class="pl-k">function</span> <span class="pl-en">learn!</span>(model, strat<span class="pl-k">::</span><span class="pl-c1">LearningStrategy</span>, data)
    <span class="pl-c1">setup!</span>(strat, model[, data])
    <span class="pl-k">for</span> (i, item) <span class="pl-k">in</span> <span class="pl-c1">enumerate</span>(data)
        <span class="pl-c1">update!</span>(model, strat[, i], item)
        <span class="pl-c1">hook</span>(strat, model[, data], i)
        <span class="pl-c1">finished</span>(strat, model[, data], i) <span class="pl-k">&amp;&amp;</span> <span class="pl-k">break</span>
    <span class="pl-k">end</span>
    <span class="pl-c1">cleanup!</span>(strat, model)
    model
<span class="pl-k">end</span></pre></div>
<ul>
<li>For a <code>MetaStrategy</code>, each function (<code>setup!</code>, <code>update!</code>, <code>hook</code>, <code>finished</code>, <code>cleanup!</code>) is mapped to the contained strategies.</li>
<li>To let <code>item == data</code>, pass the argument <code>Iterators.repeated(data)</code>.</li>
</ul>
<h2><a id="user-content-built-in-strategies" class="anchor" aria-hidden="true" href="#built-in-strategies"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Built In Strategies</h2>
<p>See help (i.e. <code>?MaxIter</code>) for more info.</p>
<ul>
<li><code>MetaStrategy</code></li>
<li><code>MaxIter</code></li>
<li><code>TimeLimit</code></li>
<li><code>Converged</code></li>
<li><code>ConvergedTo</code></li>
<li><code>IterFunction</code></li>
<li><code>Tracer</code></li>
<li><code>Breaker</code></li>
<li><code>Verbose</code></li>
</ul>
<h2><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Examples</h2>
<h3><a id="user-content-learning-with-a-single-learningstrategy" class="anchor" aria-hidden="true" href="#learning-with-a-single-learningstrategy"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Learning with a single LearningStrategy</h3>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using LearningStrategies

julia&gt; s = Verbose(TimeLimit(2))
Verbose TimeLimit(2.0)

julia&gt; @elapsed learn!(nothing, s)  # data == InfiniteNothing()
INFO: TimeLimit(2.0) finished
2.000225545
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> LearningStrategies

julia<span class="pl-k">&gt;</span> s <span class="pl-k">=</span> <span class="pl-c1">Verbose</span>(<span class="pl-c1">TimeLimit</span>(<span class="pl-c1">2</span>))
Verbose <span class="pl-c1">TimeLimit</span>(<span class="pl-c1">2.0</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@elapsed</span> <span class="pl-c1">learn!</span>(<span class="pl-c1">nothing</span>, s)  <span class="pl-c"><span class="pl-c">#</span> data == InfiniteNothing()</span>
INFO<span class="pl-k">:</span> <span class="pl-c1">TimeLimit</span>(<span class="pl-c1">2.0</span>) finished
<span class="pl-c1">2.000225545</span></pre></div>
<h3><a id="user-content-learning-with-a-metalearner" class="anchor" aria-hidden="true" href="#learning-with-a-metalearner"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Learning with a MetaLearner</h3>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using LearningStrategies

julia&gt; s = strategy(Verbose(MaxIter(5)), TimeLimit(10))
MetaStrategy
  &gt; Verbose MaxIter(5)
  &gt; TimeLimit(10.0)

julia&gt; learn!(nothing, s, 1:100)
INFO: MaxIter: 1/5
INFO: MaxIter: 2/5
INFO: MaxIter: 3/5
INFO: MaxIter: 4/5
INFO: MaxIter: 5/5
INFO: MaxIter(5) finished
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> LearningStrategies

julia<span class="pl-k">&gt;</span> s <span class="pl-k">=</span> <span class="pl-c1">strategy</span>(<span class="pl-c1">Verbose</span>(<span class="pl-c1">MaxIter</span>(<span class="pl-c1">5</span>)), <span class="pl-c1">TimeLimit</span>(<span class="pl-c1">10</span>))
MetaStrategy
  <span class="pl-k">&gt;</span> Verbose <span class="pl-c1">MaxIter</span>(<span class="pl-c1">5</span>)
  <span class="pl-k">&gt;</span> <span class="pl-c1">TimeLimit</span>(<span class="pl-c1">10.0</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">learn!</span>(<span class="pl-c1">nothing</span>, s, <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">100</span>)
INFO<span class="pl-k">:</span> MaxIter<span class="pl-k">:</span> <span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-c1">5</span>
INFO<span class="pl-k">:</span> MaxIter<span class="pl-k">:</span> <span class="pl-c1">2</span><span class="pl-k">/</span><span class="pl-c1">5</span>
INFO<span class="pl-k">:</span> MaxIter<span class="pl-k">:</span> <span class="pl-c1">3</span><span class="pl-k">/</span><span class="pl-c1">5</span>
INFO<span class="pl-k">:</span> MaxIter<span class="pl-k">:</span> <span class="pl-c1">4</span><span class="pl-k">/</span><span class="pl-c1">5</span>
INFO<span class="pl-k">:</span> MaxIter<span class="pl-k">:</span> <span class="pl-c1">5</span><span class="pl-k">/</span><span class="pl-c1">5</span>
INFO<span class="pl-k">:</span> <span class="pl-c1">MaxIter</span>(<span class="pl-c1">5</span>) finished</pre></div>
<h3><a id="user-content-linear-regression-solver" class="anchor" aria-hidden="true" href="#linear-regression-solver"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Linear Regression Solver</h3>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using LearningStrategies
import LearningStrategies: update!, finished
import Base.Iterators: repeated

struct MyLinearModel
    coef
end

struct MyLinearModelSolver &lt;: LearningStrategy end

update!(model, s::MyLinearModelSolver, xy) = (model.coef[:] = xy[1] \ xy[2])

finished(s::MyLinearModelSolver, model) = true

# generate some fake data
x = randn(100, 5)
y = x * range(-1, stop=1, length=5) + randn(100)

data = (x, y)

# Create the model
model = MyLinearModel(zeros(5))

# learn! the model with data (x, y)
learn!(model, MyLinearModelSolver(), repeated(data))

# check that it works
model.coef == x \ y
"><pre><span class="pl-k">using</span> LearningStrategies
<span class="pl-k">import</span> LearningStrategies<span class="pl-k">:</span> update!, finished
<span class="pl-k">import</span> Base<span class="pl-k">.</span>Iterators<span class="pl-k">:</span> repeated

<span class="pl-k">struct</span> MyLinearModel
    coef
<span class="pl-k">end</span>

<span class="pl-k">struct</span> MyLinearModelSolver <span class="pl-k">&lt;:</span> <span class="pl-c1">LearningStrategy</span> <span class="pl-k">end</span>

<span class="pl-en">update!</span>(model, s<span class="pl-k">::</span><span class="pl-c1">MyLinearModelSolver</span>, xy) <span class="pl-k">=</span> (model<span class="pl-k">.</span>coef[:] <span class="pl-k">=</span> xy[<span class="pl-c1">1</span>] <span class="pl-k">\</span> xy[<span class="pl-c1">2</span>])

<span class="pl-en">finished</span>(s<span class="pl-k">::</span><span class="pl-c1">MyLinearModelSolver</span>, model) <span class="pl-k">=</span> <span class="pl-c1">true</span>

<span class="pl-c"><span class="pl-c">#</span> generate some fake data</span>
x <span class="pl-k">=</span> <span class="pl-c1">randn</span>(<span class="pl-c1">100</span>, <span class="pl-c1">5</span>)
y <span class="pl-k">=</span> x <span class="pl-k">*</span> <span class="pl-c1">range</span>(<span class="pl-k">-</span><span class="pl-c1">1</span>, stop<span class="pl-k">=</span><span class="pl-c1">1</span>, length<span class="pl-k">=</span><span class="pl-c1">5</span>) <span class="pl-k">+</span> <span class="pl-c1">randn</span>(<span class="pl-c1">100</span>)

data <span class="pl-k">=</span> (x, y)

<span class="pl-c"><span class="pl-c">#</span> Create the model</span>
model <span class="pl-k">=</span> <span class="pl-c1">MyLinearModel</span>(<span class="pl-c1">zeros</span>(<span class="pl-c1">5</span>))

<span class="pl-c"><span class="pl-c">#</span> learn! the model with data (x, y)</span>
<span class="pl-c1">learn!</span>(model, <span class="pl-c1">MyLinearModelSolver</span>(), <span class="pl-c1">repeated</span>(data))

<span class="pl-c"><span class="pl-c">#</span> check that it works</span>
model<span class="pl-k">.</span>coef <span class="pl-k">==</span> x <span class="pl-k">\</span> y</pre></div>
<h3><a id="user-content-more-examples" class="anchor" aria-hidden="true" href="#more-examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>More Examples</h3>
<p>There are some user contributed snippets in the <code>examples</code> dir.</p>
<ul>
<li><code>dftracer.jl</code> shows a tracer with DataFrame as underlying storage.</li>
</ul>
<h1><a id="user-content-acknowledgements" class="anchor" aria-hidden="true" href="#acknowledgements"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Acknowledgements</h1>
<p>LearningStrategies is partially inspired by <a href="https://github.com/sglyon/IterationManagers.jl">IterationManagers</a> and (Tom Breloff's) conversations with <a href="https://github.com/sglyon">Spencer Lyon</a>.  This functionality was previously part of the <a href="https://github.com/JuliaML/StochasticOptimization.jl">StochasticOptimization</a> package, but was split off as a dependency.</p>
<p>Complex LearningStrategy examples (using previous LearningStrategies versions) can be found in <a href="https://github.com/JuliaML/StochasticOptimization.jl">StochasticOptimization</a> and from Tom Breloff's <a href="http://www.breloff.com/JuliaML-and-Plots/" rel="nofollow">blog posts</a>.</p>
<p>Examples using the current version can be found in <a href="https://github.com/joshday/SparseRegression.jl">SparseRegression</a>.</p>
<h2><a id="user-content-primary-author-tom-breloff" class="anchor" aria-hidden="true" href="#primary-author-tom-breloff"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Primary author: <a href="https://github.com/tbreloff">Tom Breloff</a></h2>
</article></div>