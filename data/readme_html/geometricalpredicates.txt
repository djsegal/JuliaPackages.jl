<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-geometricalpredicatesjl" class="anchor" aria-hidden="true" href="#geometricalpredicatesjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>GeometricalPredicates.jl</h1>
<p><a href="https://travis-ci.org/JuliaGeometry/GeometricalPredicates.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/55932fa5316a021a6830f33c2b9c87bb63c2b15df86ea5e24885d6f4a921d7fe/68747470733a2f2f7472617669732d63692e6f72672f4a756c696147656f6d657472792f47656f6d6574726963616c507265646963617465732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaGeometry/GeometricalPredicates.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://coveralls.io/r/JuliaGeometry/GeometricalPredicates.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/fe133133b047f6fb92b5517c44f8de079da258577538d45b5614dc483e64aa40/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f4a756c696147656f6d657472792f47656f6d6574726963616c507265646963617465732e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/JuliaGeometry/GeometricalPredicates.jl/badge.svg?branch=master" style="max-width:100%;"></a></p>
<p>Fast, robust 2D and 3D geometrical predicates on generic point types.
Implementation follows algorithms described in the <a href="http://arxiv.org/abs/0901.4107" rel="nofollow">Arepo paper</a>
and used (for e.g.) in the <a href="http://www.illustris-project.org/" rel="nofollow">Illustris Simulation</a>. License: MIT. Bug reports welcome!</p>
<h2><a id="user-content-how-does-it-work" class="anchor" aria-hidden="true" href="#how-does-it-work"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>How does it work?</h2>
<p>Calculations are initially performed on <code>Float64</code> while bounding max
absolute errors. If unable to determine result, fall back to exact
calculation using <code>BigInt</code>s. This is a form of floating point filtering.
Most calculations are cached for fast repeated testing of
incircle/intriangle predicates.</p>
<h2><a id="user-content-current-limitations" class="anchor" aria-hidden="true" href="#current-limitations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Current limitations</h2>
<ul>
<li>Due to the numerical methods used, all coordinates are internally represented as <code>Float64</code>. In addition all must reside in the range <code>1.0&lt;=x&lt;2.0</code>. In this range, according to IEEE754, <code>Float64</code>s have a constant exponent, hence their mantissa can be used for a one to one mapping to integers, which in turn are used for exact calculations using <code>BigInt</code>s.</li>
<li>It is assumed that primitive vertices don't overlap. It is currently the responsibility of the user to make sure this is the case.</li>
<li>It is assumed tetrahedron vertices don't all lie in the same line. It is the user's responsibility to make sure it is so.</li>
<li>Testing points are assumed not to overlap any vertices. As usual, it is the user's responsibility to make sure this is the case.
Except for the 1st restriction, all others could be easily implemented. Currently these features are not needed by me. If you need missing features, please open an issue I may develop it!</li>
</ul>
<h2><a id="user-content-how-to-use" class="anchor" aria-hidden="true" href="#how-to-use"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>How to use?</h2>
<h3><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h3>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="]add GeometricalPredicates
"><pre>]add GeometricalPredicates</pre></div>
<p>For Julia 0.6 and older</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="Pkg.add(&quot;GeometricalPredicates&quot;)
"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>GeometricalPredicates<span class="pl-pds">"</span></span>)</pre></div>
<h3><a id="user-content-points" class="anchor" aria-hidden="true" href="#points"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Points</h3>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using GeometricalPredicates

# create a 2D point in (x, y) = (1.1, 1.9)
mypoint = Point(1.1, 1.9)
typeof(mypoint) # -&gt; Point2D

# create a 3D point in (x, y, z) = (1.1, 1.9, 1.5)
mypoint = Point(1.1, 1.9, 1.5)
typeof(mypoint) # -&gt; Point3D

# getting coordinates:
getx(mypoint) # -&gt; 1.1
gety(mypoint) # -&gt; 1.9
getz(mypoint) # -&gt; 1.5
"><pre><span class="pl-k">using</span> GeometricalPredicates

<span class="pl-c"><span class="pl-c">#</span> create a 2D point in (x, y) = (1.1, 1.9)</span>
mypoint <span class="pl-k">=</span> <span class="pl-c1">Point</span>(<span class="pl-c1">1.1</span>, <span class="pl-c1">1.9</span>)
<span class="pl-c1">typeof</span>(mypoint) <span class="pl-c"><span class="pl-c">#</span> -&gt; Point2D</span>

<span class="pl-c"><span class="pl-c">#</span> create a 3D point in (x, y, z) = (1.1, 1.9, 1.5)</span>
mypoint <span class="pl-k">=</span> <span class="pl-c1">Point</span>(<span class="pl-c1">1.1</span>, <span class="pl-c1">1.9</span>, <span class="pl-c1">1.5</span>)
<span class="pl-c1">typeof</span>(mypoint) <span class="pl-c"><span class="pl-c">#</span> -&gt; Point3D</span>

<span class="pl-c"><span class="pl-c">#</span> getting coordinates:</span>
<span class="pl-c1">getx</span>(mypoint) <span class="pl-c"><span class="pl-c">#</span> -&gt; 1.1</span>
<span class="pl-c1">gety</span>(mypoint) <span class="pl-c"><span class="pl-c">#</span> -&gt; 1.9</span>
<span class="pl-c1">getz</span>(mypoint) <span class="pl-c"><span class="pl-c">#</span> -&gt; 1.5</span></pre></div>
<p><code>Point2D</code> is a subtype of <code>AbstractPoint2D</code>, and <code>Point3D</code> is a subtype of <code>AbstractPoint3D</code>.
You can implement custom point types by subtyping these abstract types. These
custom point types can be used with the rest of the package:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="type MyCustomPointType &lt;: AbstractPoint2D
    _x::FLoat64
    _y::Float64
    _mass::Float64
end

getx(p::MyCustomPointType) = p._x
gety(p::MyCustomPointType) = p._y
"><pre>type MyCustomPointType <span class="pl-k">&lt;:</span> <span class="pl-c1">AbstractPoint2D</span>
    _x<span class="pl-k">::</span><span class="pl-c1">FLoat64</span>
    _y<span class="pl-k">::</span><span class="pl-c1">Float64</span>
    _mass<span class="pl-k">::</span><span class="pl-c1">Float64</span>
<span class="pl-k">end</span>

<span class="pl-en">getx</span>(p<span class="pl-k">::</span><span class="pl-c1">MyCustomPointType</span>) <span class="pl-k">=</span> p<span class="pl-k">.</span>_x
<span class="pl-en">gety</span>(p<span class="pl-k">::</span><span class="pl-c1">MyCustomPointType</span>) <span class="pl-k">=</span> p<span class="pl-k">.</span>_y</pre></div>
<p>implementing <code>getx</code>, <code>gety</code>, and <code>getz</code> for 3D points is necessary
as this is the interface the package is expecting. These function should return <code>Float64</code>.
Points can be either immutables or types. Default <code>Point2D</code> and <code>Point3D</code> are immutables.</p>
<p>The point coordinates must reside in a region <code>1.0 &lt;= x &lt; 2.0</code>. Read above on
why this limitation is necessary. For convenience there are 2 constants defined,
<code>min_coord</code> and <code>max coord</code> representing the minimal and maximal feasible values
of coordinates.</p>
<h3><a id="user-content-triangles-and-tetrahedrons-aka-primitives" class="anchor" aria-hidden="true" href="#triangles-and-tetrahedrons-aka-primitives"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Triangles and Tetrahedrons (..aka Primitives)</h3>
<p>A triangle is the 2D primitive, and a tetrahedron is the 3D primitive.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="# create a triangle using 3 points
a = Point(1.1, 1.1)
b = Point(1.9, 1.1)
c = Point(1.1, 1.9)
mytriangle = Primitive(a, b, c)
typeof(mytriangle) # -&gt; UnOrientedTriangle{Point2D}
"><pre><span class="pl-c"><span class="pl-c">#</span> create a triangle using 3 points</span>
a <span class="pl-k">=</span> <span class="pl-c1">Point</span>(<span class="pl-c1">1.1</span>, <span class="pl-c1">1.1</span>)
b <span class="pl-k">=</span> <span class="pl-c1">Point</span>(<span class="pl-c1">1.9</span>, <span class="pl-c1">1.1</span>)
c <span class="pl-k">=</span> <span class="pl-c1">Point</span>(<span class="pl-c1">1.1</span>, <span class="pl-c1">1.9</span>)
mytriangle <span class="pl-k">=</span> <span class="pl-c1">Primitive</span>(a, b, c)
<span class="pl-c1">typeof</span>(mytriangle) <span class="pl-c"><span class="pl-c">#</span> -&gt; UnOrientedTriangle{Point2D}</span></pre></div>
<p>The triangle is unoriented in the sense that orientation is not-known in advance,
it is not immutable and it could change if points in the triangle are updated.
The orientation needs to be calculated when the triangle is created and when
points within are updated. Read below for the definition of orientation. The
triangle could be created using any points inheriting from <code>AbstractPoint2D</code>
which implement <code>getx</code> and <code>gety</code>, or using coordinates directly:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="mytriangle = Primitive(1.1, 1.1, 1.9, 1.1, 1.1, 1.9)

# Getting point `a` in the triangle
geta(mytriangle) # -&gt; Point2D(1.1, 1.1)
getb(mytriangle) # -&gt; Point2D(1.9, 1.1)
getc(mytriangle) # -&gt; Point2D(1.1, 1.9)
"><pre>mytriangle <span class="pl-k">=</span> <span class="pl-c1">Primitive</span>(<span class="pl-c1">1.1</span>, <span class="pl-c1">1.1</span>, <span class="pl-c1">1.9</span>, <span class="pl-c1">1.1</span>, <span class="pl-c1">1.1</span>, <span class="pl-c1">1.9</span>)

<span class="pl-c"><span class="pl-c">#</span> Getting point `a` in the triangle</span>
<span class="pl-c1">geta</span>(mytriangle) <span class="pl-c"><span class="pl-c">#</span> -&gt; Point2D(1.1, 1.1)</span>
<span class="pl-c1">getb</span>(mytriangle) <span class="pl-c"><span class="pl-c">#</span> -&gt; Point2D(1.9, 1.1)</span>
<span class="pl-c1">getc</span>(mytriangle) <span class="pl-c"><span class="pl-c">#</span> -&gt; Point2D(1.1, 1.9)</span></pre></div>
<p>The same goes for tetrahedrons, except we now use 4 3D points instead of 3 2D ones:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="# create a tetrahedron using 4 points
a = Point(1.1, 1.1, 1.1)
b = Point(1.9, 1.1, 1.1)
c = Point(1.1, 1.9, 1.1)
d = Point(1.1, 1.1, 1.9)
mytetraedron = Primitive(a, b, c, d)
typeof(mytetrahedron) # -&gt; UnOrientedTetrahedron{Point3D}
"><pre><span class="pl-c"><span class="pl-c">#</span> create a tetrahedron using 4 points</span>
a <span class="pl-k">=</span> <span class="pl-c1">Point</span>(<span class="pl-c1">1.1</span>, <span class="pl-c1">1.1</span>, <span class="pl-c1">1.1</span>)
b <span class="pl-k">=</span> <span class="pl-c1">Point</span>(<span class="pl-c1">1.9</span>, <span class="pl-c1">1.1</span>, <span class="pl-c1">1.1</span>)
c <span class="pl-k">=</span> <span class="pl-c1">Point</span>(<span class="pl-c1">1.1</span>, <span class="pl-c1">1.9</span>, <span class="pl-c1">1.1</span>)
d <span class="pl-k">=</span> <span class="pl-c1">Point</span>(<span class="pl-c1">1.1</span>, <span class="pl-c1">1.1</span>, <span class="pl-c1">1.9</span>)
mytetraedron <span class="pl-k">=</span> <span class="pl-c1">Primitive</span>(a, b, c, d)
<span class="pl-c1">typeof</span>(mytetrahedron) <span class="pl-c"><span class="pl-c">#</span> -&gt; UnOrientedTetrahedron{Point3D}</span></pre></div>
<p>For certain applications we use primitives with known orientation. In those cases
there should be no need to calculate it. This is achieved by passing an <code>orientation</code>
flag to the <code>Primitive</code> creation function:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="mytetrahedron = Primitive(a, b, c, d, positivelyoriented)
typeof(mytetrahedron) # -&gt; PositivelyOrientedTetrahedron{Point3D}
orientation(mytetrahedron) # -&gt; constant 1, not calculated
mytetrahedron = Primitive(a, b, c, d, negativelyoriented)
typeof(mytetrahedron) # -&gt; NegativelyOrientedTetrahedron{Point3D}
orientation(mytetrahedron) # -&gt; constant -1, not calculated
"><pre>mytetrahedron <span class="pl-k">=</span> <span class="pl-c1">Primitive</span>(a, b, c, d, positivelyoriented)
<span class="pl-c1">typeof</span>(mytetrahedron) <span class="pl-c"><span class="pl-c">#</span> -&gt; PositivelyOrientedTetrahedron{Point3D}</span>
<span class="pl-c1">orientation</span>(mytetrahedron) <span class="pl-c"><span class="pl-c">#</span> -&gt; constant 1, not calculated</span>
mytetrahedron <span class="pl-k">=</span> <span class="pl-c1">Primitive</span>(a, b, c, d, negativelyoriented)
<span class="pl-c1">typeof</span>(mytetrahedron) <span class="pl-c"><span class="pl-c">#</span> -&gt; NegativelyOrientedTetrahedron{Point3D}</span>
<span class="pl-c1">orientation</span>(mytetrahedron) <span class="pl-c"><span class="pl-c">#</span> -&gt; constant -1, not calculated</span></pre></div>
<p>Note that when the primitive is oriented the real orientation is never calculated.
It is assumed that the user knows what he's doing. If in doubt, just use unoriented
primitives at the cost of actual calculation.</p>
<p>Updating points in primitives can be done with <code>seta</code>, <code>setb</code>, etc. methods:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="seta(mytriangle, Point(1.7, 1.7))
"><pre><span class="pl-c1">seta</span>(mytriangle, <span class="pl-c1">Point</span>(<span class="pl-c1">1.7</span>, <span class="pl-c1">1.7</span>))</pre></div>
<p>Updating a point in a primitive will fire all relevant pre-calculations. i.e. if the triangle
is unoriented then orientation will be calculated. If it is oriented then still a few other
pre-calculations will be done, but a few less. If there is need to update a number of points
it is thus more efficient to do so in a group update:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="setab(mytriangle, Point(1.7, 1.7), Point(1.3, 1.1))
setbcd(mytetrahedron, Point(1.1, 1.1, 1.2), Point(1.2,1.1,1.3), Point(1.4,1.1,1.2))
"><pre><span class="pl-c1">setab</span>(mytriangle, <span class="pl-c1">Point</span>(<span class="pl-c1">1.7</span>, <span class="pl-c1">1.7</span>), <span class="pl-c1">Point</span>(<span class="pl-c1">1.3</span>, <span class="pl-c1">1.1</span>))
<span class="pl-c1">setbcd</span>(mytetrahedron, <span class="pl-c1">Point</span>(<span class="pl-c1">1.1</span>, <span class="pl-c1">1.1</span>, <span class="pl-c1">1.2</span>), <span class="pl-c1">Point</span>(<span class="pl-c1">1.2</span>,<span class="pl-c1">1.1</span>,<span class="pl-c1">1.3</span>), <span class="pl-c1">Point</span>(<span class="pl-c1">1.4</span>,<span class="pl-c1">1.1</span>,<span class="pl-c1">1.2</span>))</pre></div>
<p>combinations for all points exist. The name always contains the point names
in alphabetical order. As long as inner primitive data is not changed manually, it will
keep giving correct results for all functions in this package.</p>
<h3><a id="user-content-predicates" class="anchor" aria-hidden="true" href="#predicates"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Predicates</h3>
<p><code>incircle</code> is the popular name to test whether a point lies inside of the sphere
defined by the primitive points:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="a = Point(1.1, 1.1)
b = Point(1.5, 1.1)
c = Point(1.1, 1.5)
mytriangle = Primitive(a, b, c)
incircle(mytriangle, Point(1.9, 1.9)) # -&gt; -1, i.e. outside
incircle(mytriangle, Point(1.2, 1.2)) # -&gt; +1, i.e. inside
incircle(mytriangle, Point(1.5, 1.5)) # -&gt;  0, i.e. point is exactly on circle
"><pre>a <span class="pl-k">=</span> <span class="pl-c1">Point</span>(<span class="pl-c1">1.1</span>, <span class="pl-c1">1.1</span>)
b <span class="pl-k">=</span> <span class="pl-c1">Point</span>(<span class="pl-c1">1.5</span>, <span class="pl-c1">1.1</span>)
c <span class="pl-k">=</span> <span class="pl-c1">Point</span>(<span class="pl-c1">1.1</span>, <span class="pl-c1">1.5</span>)
mytriangle <span class="pl-k">=</span> <span class="pl-c1">Primitive</span>(a, b, c)
<span class="pl-c1">incircle</span>(mytriangle, <span class="pl-c1">Point</span>(<span class="pl-c1">1.9</span>, <span class="pl-c1">1.9</span>)) <span class="pl-c"><span class="pl-c">#</span> -&gt; -1, i.e. outside</span>
<span class="pl-c1">incircle</span>(mytriangle, <span class="pl-c1">Point</span>(<span class="pl-c1">1.2</span>, <span class="pl-c1">1.2</span>)) <span class="pl-c"><span class="pl-c">#</span> -&gt; +1, i.e. inside</span>
<span class="pl-c1">incircle</span>(mytriangle, <span class="pl-c1">Point</span>(<span class="pl-c1">1.5</span>, <span class="pl-c1">1.5</span>)) <span class="pl-c"><span class="pl-c">#</span> -&gt;  0, i.e. point is exactly on circle</span></pre></div>
<p>There is one more possibility. If the circle defined by our primitive has infinite radius
then it is impossible to tell whether the point is inside or outside:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="a = Point(1.1, 1.1)
b = Point(1.2, 1.2)
c = Point(1.3, 1.3)
mytriangle = Primitive(a, b, c)
incircle(mytriangle, Point(1.3, 1.4)) # -&gt; +2, i.e. cannot tell
"><pre>a <span class="pl-k">=</span> <span class="pl-c1">Point</span>(<span class="pl-c1">1.1</span>, <span class="pl-c1">1.1</span>)
b <span class="pl-k">=</span> <span class="pl-c1">Point</span>(<span class="pl-c1">1.2</span>, <span class="pl-c1">1.2</span>)
c <span class="pl-k">=</span> <span class="pl-c1">Point</span>(<span class="pl-c1">1.3</span>, <span class="pl-c1">1.3</span>)
mytriangle <span class="pl-k">=</span> <span class="pl-c1">Primitive</span>(a, b, c)
<span class="pl-c1">incircle</span>(mytriangle, <span class="pl-c1">Point</span>(<span class="pl-c1">1.3</span>, <span class="pl-c1">1.4</span>)) <span class="pl-c"><span class="pl-c">#</span> -&gt; +2, i.e. cannot tell</span></pre></div>
<p><code>intriangle</code> is a popular name to test whether a point lies inside of the primitive:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="a = Point(1.1, 1.1)
b = Point(1.5, 1.1)
c = Point(1.1, 1.5)
mytriangle = Primitive(a, b, c)
intriangle(mytriangle, Point(1.2, 1.2)) # -&gt; +1, i.e. inside
intriangle(mytriangle, Point(1.6, 1.6)) # -&gt; -1, i.e. outside
intriangle(mytriangle, Point(1.3, 1.1)) # -&gt;  4, i.e. exactly on ab
intriangle(mytriangle, Point(1.1, 1.3)) # -&gt;  3, i.e. exactly on ac
intriangle(mytriangle, Point(1.3, 1.3)) # -&gt;  2, i.e. exactly on bc

"><pre>a <span class="pl-k">=</span> <span class="pl-c1">Point</span>(<span class="pl-c1">1.1</span>, <span class="pl-c1">1.1</span>)
b <span class="pl-k">=</span> <span class="pl-c1">Point</span>(<span class="pl-c1">1.5</span>, <span class="pl-c1">1.1</span>)
c <span class="pl-k">=</span> <span class="pl-c1">Point</span>(<span class="pl-c1">1.1</span>, <span class="pl-c1">1.5</span>)
mytriangle <span class="pl-k">=</span> <span class="pl-c1">Primitive</span>(a, b, c)
<span class="pl-c1">intriangle</span>(mytriangle, <span class="pl-c1">Point</span>(<span class="pl-c1">1.2</span>, <span class="pl-c1">1.2</span>)) <span class="pl-c"><span class="pl-c">#</span> -&gt; +1, i.e. inside</span>
<span class="pl-c1">intriangle</span>(mytriangle, <span class="pl-c1">Point</span>(<span class="pl-c1">1.6</span>, <span class="pl-c1">1.6</span>)) <span class="pl-c"><span class="pl-c">#</span> -&gt; -1, i.e. outside</span>
<span class="pl-c1">intriangle</span>(mytriangle, <span class="pl-c1">Point</span>(<span class="pl-c1">1.3</span>, <span class="pl-c1">1.1</span>)) <span class="pl-c"><span class="pl-c">#</span> -&gt;  4, i.e. exactly on ab</span>
<span class="pl-c1">intriangle</span>(mytriangle, <span class="pl-c1">Point</span>(<span class="pl-c1">1.1</span>, <span class="pl-c1">1.3</span>)) <span class="pl-c"><span class="pl-c">#</span> -&gt;  3, i.e. exactly on ac</span>
<span class="pl-c1">intriangle</span>(mytriangle, <span class="pl-c1">Point</span>(<span class="pl-c1">1.3</span>, <span class="pl-c1">1.3</span>)) <span class="pl-c"><span class="pl-c">#</span> -&gt;  2, i.e. exactly on bc</span>
</pre></div>
<p>Here any negative number means outside. The exact value gives some information regarding
the direction in which the point lies outside:</p>
<ul>
<li><code>-1</code> means the test point is in front of a, and outside of the triangle</li>
<li><code>-2</code> means the test point is in front of b, and outside of the triangle</li>
<li><code>-4</code> means the test point is in front of c, and outside of the triangle
same goes for tetrahedrons. Note that the point could be both in front of a and b. In
cases as this one is arbitrarily chosen, all in name of performance.</li>
</ul>
<p><code>1</code> means test point is inside. But there are other possible positive values:</p>
<ul>
<li><code>1 + 1 = 2</code> means the test point is in front of a, exactly on the triangle</li>
<li><code>1 + 2 = 3</code> means the test point is in front of b, exactly on the triangle</li>
<li><code>1 + 3 = 4</code> means the test point is in front of c, exactly on the triangle</li>
</ul>
<p>same extends for tetrahedrons.</p>
<h3><a id="user-content-lines-and-polygons" class="anchor" aria-hidden="true" href="#lines-and-polygons"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Lines and Polygons</h3>
<p><code>orientation</code> tests for the primitive orientation. In 2D this means:</p>
<ul>
<li><code> 1</code> --&gt; point <code>c</code> is to the left of the line defined by <code>ab</code> (with directionality from <code>a</code> to <code>b</code>)</li>
<li><code>-1</code> --&gt; point <code>c</code> is to the right</li>
<li><code> 0</code> --&gt; point <code>c</code> is exactly on the line</li>
</ul>
<p>in 3D it means:</p>
<ul>
<li><code> 1</code> --&gt; point <code>d</code> is above the plane defined by <code>abc</code> (note "above" here means the direction of the plane normal, which depends on its orientation)</li>
<li><code>-1</code> --&gt; point <code>d</code> is below the plane</li>
<li><code> 0</code> --&gt; point <code>c</code> is exactly on the plane</li>
</ul>
<p>Another convenience API to test for orientation in 2D is using a line. It has some performance advantages over creating a triangle:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="a = Point(1.1, 1.1)
b = Point(1.5, 1.5)

l = Line(a, b)
println(orientation(l, Point(1.4, 1.6))) # --&gt;  1
println(orientation(l, Point(1.4,1.05))) # --&gt; -1
println(orientation(l, Point(1.4,1.40))) # --&gt;  0
"><pre>a <span class="pl-k">=</span> <span class="pl-c1">Point</span>(<span class="pl-c1">1.1</span>, <span class="pl-c1">1.1</span>)
b <span class="pl-k">=</span> <span class="pl-c1">Point</span>(<span class="pl-c1">1.5</span>, <span class="pl-c1">1.5</span>)

l <span class="pl-k">=</span> <span class="pl-c1">Line</span>(a, b)
<span class="pl-c1">println</span>(<span class="pl-c1">orientation</span>(l, <span class="pl-c1">Point</span>(<span class="pl-c1">1.4</span>, <span class="pl-c1">1.6</span>))) <span class="pl-c"><span class="pl-c">#</span> --&gt;  1</span>
<span class="pl-c1">println</span>(<span class="pl-c1">orientation</span>(l, <span class="pl-c1">Point</span>(<span class="pl-c1">1.4</span>,<span class="pl-c1">1.05</span>))) <span class="pl-c"><span class="pl-c">#</span> --&gt; -1</span>
<span class="pl-c1">println</span>(<span class="pl-c1">orientation</span>(l, <span class="pl-c1">Point</span>(<span class="pl-c1">1.4</span>,<span class="pl-c1">1.40</span>))) <span class="pl-c"><span class="pl-c">#</span> --&gt;  0</span></pre></div>
<p>One can also create simple 2D polygons:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="ll = Point(1.0,1.0)
lr = Point(1.2,1.0)
ur = Point(1.2,1.2)
ul = Point(1.0,1.2)
poly = Polygon(ll, lr, ur, ul)
inpolygon(poly, Point(1.1,1.1))  # assumes it is convex
"><pre>ll <span class="pl-k">=</span> <span class="pl-c1">Point</span>(<span class="pl-c1">1.0</span>,<span class="pl-c1">1.0</span>)
lr <span class="pl-k">=</span> <span class="pl-c1">Point</span>(<span class="pl-c1">1.2</span>,<span class="pl-c1">1.0</span>)
ur <span class="pl-k">=</span> <span class="pl-c1">Point</span>(<span class="pl-c1">1.2</span>,<span class="pl-c1">1.2</span>)
ul <span class="pl-k">=</span> <span class="pl-c1">Point</span>(<span class="pl-c1">1.0</span>,<span class="pl-c1">1.2</span>)
poly <span class="pl-k">=</span> <span class="pl-c1">Polygon</span>(ll, lr, ur, ul)
<span class="pl-c1">inpolygon</span>(poly, <span class="pl-c1">Point</span>(<span class="pl-c1">1.1</span>,<span class="pl-c1">1.1</span>))  <span class="pl-c"><span class="pl-c">#</span> assumes it is convex</span></pre></div>
<h3><a id="user-content-basic-geometrical-properties" class="anchor" aria-hidden="true" href="#basic-geometrical-properties"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Basic geometrical properties</h3>
<p><code>orientation</code> gives the primitive orientation. <code>area</code>, <code>volume</code>, <code>centroid</code>, <code>circumcenter</code>, <code>circumradius2</code> are all exported and I hope self descriptive.</p>
<h3><a id="user-content-spatial-ordering" class="anchor" aria-hidden="true" href="#spatial-ordering"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Spatial ordering</h3>
<p>Scale and scale-free Peano-Hilbert ordering is available. Look <a href="http://doc.cgal.org/latest/Spatial_sorting/index.html" rel="nofollow">here</a> for a nice explanation on Hilbert sorting and <a href="http://doc.cgal.org/latest/Spatial_sorting/classCGAL_1_1Multiscale__sort.html" rel="nofollow">here</a> for a nice explanation of multiscale sort. Both are implemented here:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="p = Point(1.1, 1.2)
peanokey(p, 4) # -&gt; 6, the peano key in a regular grid of 2^4 X 2^4 cells

p = Point(1.1, 1.2, 1.3)
peanokey(p, 4) # -&gt; 94, the peano key in a regular grid of 2^4 X 2^4 X 2^4 cells
"><pre>p <span class="pl-k">=</span> <span class="pl-c1">Point</span>(<span class="pl-c1">1.1</span>, <span class="pl-c1">1.2</span>)
<span class="pl-c1">peanokey</span>(p, <span class="pl-c1">4</span>) <span class="pl-c"><span class="pl-c">#</span> -&gt; 6, the peano key in a regular grid of 2^4 X 2^4 cells</span>

p <span class="pl-k">=</span> <span class="pl-c1">Point</span>(<span class="pl-c1">1.1</span>, <span class="pl-c1">1.2</span>, <span class="pl-c1">1.3</span>)
<span class="pl-c1">peanokey</span>(p, <span class="pl-c1">4</span>) <span class="pl-c"><span class="pl-c">#</span> -&gt; 94, the peano key in a regular grid of 2^4 X 2^4 X 2^4 cells</span></pre></div>
<p>The number of cells doesn't need to be specified. The default for 2D is <code>2^31 X 2^31</code> and for 3D <code>2^21 X 2^21 X 2^21</code>.
You can also do the inverse, and get a point from a key:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="Point2D(6, 4) # -&gt; Point2D(1.0625,1.1875)
"><pre><span class="pl-c1">Point2D</span>(<span class="pl-c1">6</span>, <span class="pl-c1">4</span>) <span class="pl-c"><span class="pl-c">#</span> -&gt; Point2D(1.0625,1.1875)</span></pre></div>
<p>in a finer grid we would get back something more accurate.</p>
<p>So that was scale-dependent Hilbert stuff, which is good to say balance workload between computing nodes.
When you need to order particles spatially it is better to use a scale independent method, like the Hilbert ordering here:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="a = [Point(1.0+rand(), 1.0+rand() for i in 1:1e6]
hilbertsort!(a)
"><pre>a <span class="pl-k">=</span> [<span class="pl-c1">Point</span>(<span class="pl-c1">1.0</span><span class="pl-k">+</span><span class="pl-c1">rand</span>(), <span class="pl-c1">1.0</span><span class="pl-k">+</span><span class="pl-c1">rand</span>() <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">1e6</span>]
<span class="pl-c1">hilbertsort!</span>(a)</pre></div>
<p>Here keys are never calculated, and there is no grid, it uses a median policy, adjusting to the actual
point distribution. There are a few parameters with good defaults, see links above to understand what they mean.
For an algorithm such a Delaunay tesselation it is sometimes better to use a multi-scale sort with a Hilbert sort, like this:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="mssort!(a)
"><pre><span class="pl-c1">mssort!</span>(a)</pre></div>
<p>of course this adds a few more default parameters, again with decent defaults, read above links to understand.</p>
</article></div>