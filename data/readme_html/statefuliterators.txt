<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p dir="auto"><a href="https://travis-ci.org/andrewcooke/StatefulIterators.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/fe809ec78f153a286eb3be0e435f7291134fe40076aea0a5310a61086da0b6a4/68747470733a2f2f7472617669732d63692e6f72672f616e64726577636f6f6b652f537461746566756c4974657261746f72732e6a6c2e706e67" alt="Build Status" data-canonical-src="https://travis-ci.org/andrewcooke/StatefulIterators.jl.png" style="max-width: 100%;"></a>
<a href="https://coveralls.io/r/andrewcooke/StatefulIterators.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/c9d68e9f1a645e5302afc61f24b185e023089eb48ec8205ad8b544be49c2743d/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f616e64726577636f6f6b652f537461746566756c4974657261746f72732e6a6c2f62616467652e737667" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/andrewcooke/StatefulIterators.jl/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto"><a href="http://pkg.julialang.org/?pkg=StatefulIterators&amp;ver=0.4" rel="nofollow"><img src="https://camo.githubusercontent.com/4c47eac8c9ee7e9c65f133d49316ea9662d032f8a27677f7e8e430f25f371135/687474703a2f2f706b672e6a756c69616c616e672e6f72672f6261646765732f537461746566756c4974657261746f72735f302e342e737667" alt="StatefulIterators" data-canonical-src="http://pkg.julialang.org/badges/StatefulIterators_0.4.svg" style="max-width: 100%;"></a>
<a href="http://pkg.julialang.org/?pkg=StatefulIterators&amp;ver=0.5" rel="nofollow"><img src="https://camo.githubusercontent.com/f68db15893e6db030446e18edd0f626e9fea5710b889400efdbfdf695498d1e6/687474703a2f2f706b672e6a756c69616c616e672e6f72672f6261646765732f537461746566756c4974657261746f72735f302e352e737667" alt="StatefulIterators" data-canonical-src="http://pkg.julialang.org/badges/StatefulIterators_0.5.svg" style="max-width: 100%;"></a></p>
<h1 dir="auto"><a id="user-content-statefuliterators" class="anchor" aria-hidden="true" href="#statefuliterators"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>StatefulIterators</h1>
<p dir="auto">Typed, stream-like iterables for Julia.</p>
<p dir="auto">The following stream-like commands are supported: <strong>read()</strong>,
<strong>read!()</strong>, <strong>readbytes()</strong>, <strong>readbytes!()</strong>, <strong>position()</strong>,
<strong>skip()</strong>, <strong>seek()</strong>, <strong>seekstart()</strong>, <strong>seekend()</strong>, <strong>eof()</strong>,
<strong>readuntil()</strong> and <strong>readline()</strong>.</p>
<p dir="auto">In addition, <strong>available()</strong> and <strong>peek()</strong> have been added.</p>
<h2 dir="auto"><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example</h2>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; using StatefulIterators

julia&gt; s = StatefulIterator([1,2,3,4,5])
StatefulIterators.StatefulIterator{Array{Int64,1},Int64}([1,2,3,4,5],1)

julia&gt; collect(take(s, 2))
2-element Array{Any,1}:
 1
 2

julia&gt; eltype(s)
Int64

julia&gt; read(s)
3

julia&gt; readbytes(s)
16-element Array{UInt8,1}:
 0x04
 0x00
 0x00
 0x00
 0x00
 0x00
 0x00
 0x00
 0x05
 0x00
 0x00
 0x00
 0x00
 0x00
 0x00
 0x00"><pre class="notranslate"><code>julia&gt; using StatefulIterators

julia&gt; s = StatefulIterator([1,2,3,4,5])
StatefulIterators.StatefulIterator{Array{Int64,1},Int64}([1,2,3,4,5],1)

julia&gt; collect(take(s, 2))
2-element Array{Any,1}:
 1
 2

julia&gt; eltype(s)
Int64

julia&gt; read(s)
3

julia&gt; readbytes(s)
16-element Array{UInt8,1}:
 0x04
 0x00
 0x00
 0x00
 0x00
 0x00
 0x00
 0x00
 0x05
 0x00
 0x00
 0x00
 0x00
 0x00
 0x00
 0x00
</code></pre></div>
<h2 dir="auto"><a id="user-content-types" class="anchor" aria-hidden="true" href="#types"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Types</h2>
<p dir="auto">Unlike Julia's <code>IOStream</code>, stateful iterators have an underlying type,
given by <code>eltype(s)</code>.  This affects the behaviour of various methods
as follows:</p>
<ul dir="auto">
<li>
<p dir="auto"><strong>default type for read(s, dims...)</strong> and similar methods is the
underlying type.</p>
</li>
<li>
<p dir="auto"><strong>iterator chunking</strong> is on the underlying type.</p>
</li>
</ul>
<p dir="auto">The second point is subtle and affects how types that are smaller than
the underlying type are read:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; s = StatefulIterator(Int16[1,2,3])
StatefulIterators.StatefulIterator{Array{Int16,1},Int64}(Int16[1,2,3],1)

julia&gt; read(s, UInt8, 2)
2-element Array{UInt8,1}:
 0x01
 0x00

julia&gt; read(s, UInt8)
0x02

julia&gt; read(s, UInt8)
0x03"><pre class="notranslate"><code>julia&gt; s = StatefulIterator(Int16[1,2,3])
StatefulIterators.StatefulIterator{Array{Int16,1},Int64}(Int16[1,2,3],1)

julia&gt; read(s, UInt8, 2)
2-element Array{UInt8,1}:
 0x01
 0x00

julia&gt; read(s, UInt8)
0x02

julia&gt; read(s, UInt8)
0x03
</code></pre></div>
<p dir="auto">Note above how the second and third reads start from the next
<code>UInt16</code>.  In comparison, the first read extracts both bytes (<code>UInt8</code>)
from a <em>single</em> <code>UInt16</code>.</p>
<h2 dir="auto"><a id="user-content-explicit-state" class="anchor" aria-hidden="true" href="#explicit-state"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Explicit State</h2>
<p dir="auto">Not all iterables follow the "spirit" of the iter interface - the most
common exception is <code>Task</code>.  These types do not have a state that can
be saved and restored, and so some methods - <code>copy()</code>, <code>peek()</code>,
<code>position()</code>, <code>seek()</code>, <code>seekstart()</code>, and <code>available()</code> - are not
supported:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; s = StatefulIterator(Task(() -&gt; (for i in 1:3; produce(i); end)))
StatefulIterators.StatefulIterator{Task,Void}(Task (runnable) @0x00007f04c42e8fb0,nothing)

julia&gt; read(s)
1

julia&gt; available(s)
ERROR: Task lacks explicit state
 in available at /home/andrew/.julia/v0.4/StatefulIterators/src/StatefulIterators.jl:289"><pre class="notranslate"><code>julia&gt; s = StatefulIterator(Task(() -&gt; (for i in 1:3; produce(i); end)))
StatefulIterators.StatefulIterator{Task,Void}(Task (runnable) @0x00007f04c42e8fb0,nothing)

julia&gt; read(s)
1

julia&gt; available(s)
ERROR: Task lacks explicit state
 in available at /home/andrew/.julia/v0.4/StatefulIterators/src/StatefulIterators.jl:289
</code></pre></div>
<h2 dir="auto"><a id="user-content-bits-types" class="anchor" aria-hidden="true" href="#bits-types"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Bits Types</h2>
<p dir="auto">Methods involving type conversion are only supported when the
underlying type is a bits type:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; s = StatefulIterator([0x01, 0x02])
StatefulIterators.StatefulIterator{Array{UInt8,1},Int64}(UInt8[0x01,0x02],1)

julia&gt; read(s, UInt16)
0x0201

julia&gt; s = StatefulIterator([0x01, &quot;hello world&quot;])
StatefulIterators.StatefulIterator{Array{Any,1},Int64}(Any[0x01,&quot;hello world&quot;],1)

julia&gt; read(s, UInt16)
ERROR: argument is an abstract type; size is indeterminate
 in read at /home/andrew/.julia/v0.4/StatefulIterators/src/StatefulIterators.jl:199"><pre class="notranslate"><code>julia&gt; s = StatefulIterator([0x01, 0x02])
StatefulIterators.StatefulIterator{Array{UInt8,1},Int64}(UInt8[0x01,0x02],1)

julia&gt; read(s, UInt16)
0x0201

julia&gt; s = StatefulIterator([0x01, "hello world"])
StatefulIterators.StatefulIterator{Array{Any,1},Int64}(Any[0x01,"hello world"],1)

julia&gt; read(s, UInt16)
ERROR: argument is an abstract type; size is indeterminate
 in read at /home/andrew/.julia/v0.4/StatefulIterators/src/StatefulIterators.jl:199
</code></pre></div>
<h2 dir="auto"><a id="user-content-state-is-not-always-an-offset" class="anchor" aria-hidden="true" href="#state-is-not-always-an-offset"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>State Is Not (Always) An Offset</h2>
<p dir="auto">The value returned by <code>position()</code> and taken by <code>seek()</code> is the
state of the corresponding iterable.  It may not be an integer.</p>
<p dir="auto">The function <code>skip()</code>, however, does take an integer.  This is the
number of instances of the underlying type (not necessarily bytes) to
move over.</p>
<h2 dir="auto"><a id="user-content-warnings" class="anchor" aria-hidden="true" href="#warnings"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Warnings</h2>
<p dir="auto">This is less efficient than using normal iterators
(<a href="https://groups.google.com/d/msg/julia-users/YJv5o1D_ua0/nGPj2rGOBAAJ" rel="nofollow">ref</a>).
A simple summation (using <code>sum()</code>) of 1 million elements is about
twice as slow when using a stateful iterator, compared to using a bare
array (but allocates no more memory).</p>
<h2 dir="auto"><a id="user-content-credits" class="anchor" aria-hidden="true" href="#credits"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Credits</h2>
<p dir="auto">Thanks to <a href="https://github.com/okvs">okvs</a> for a more efficient data
structure, a more efficient inner loop, and various other good ideas.</p>
</article></div>