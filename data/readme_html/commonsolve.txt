<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-commonsolve" class="anchor" aria-hidden="true" href="#commonsolve"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>CommonSolve</h1>
<p>This holds the common <code>solve</code> command. The rules are that you must dispatch
on one of your own types. That's it. No pirates.</p>
<p>Oh and there're <code>init</code> and <code>solve!</code> as well.</p>
<h2><a id="user-content-general-recommendation" class="anchor" aria-hidden="true" href="#general-recommendation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>General recommendation</h2>
<p><code>solve</code> function has the default definition</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-en">solve</span>(args<span class="pl-k">...</span>; kwargs<span class="pl-k">...</span>) <span class="pl-k">=</span> <span class="pl-c1">solve!</span>(<span class="pl-c1">init</span>(args<span class="pl-k">...</span>; kwargs<span class="pl-k">...</span>))</pre></div>
<p>So, we recommend defining</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">init</span>(<span class="pl-k">::</span><span class="pl-c1">ProblemType</span>, args<span class="pl-k">...</span>; kwargs<span class="pl-k">...</span>) <span class="pl-k">::</span> <span class="pl-c1">SolverType</span>
<span class="pl-c1">solve!</span>(<span class="pl-k">::</span><span class="pl-c1">SolverType</span>) <span class="pl-k">::</span> <span class="pl-c1">SolutionType</span></pre></div>
<p>where <code>ProblemType</code>, <code>SolverType</code>, and <code>SolutionType</code> are the types defined in
your package.</p>
<p>To avoid method ambiguity, the first argument of <code>solve</code>, <code>solve!</code>, and <code>init</code>
<em>must</em> be dispatched on the type defined in your package.  For example, do
<em>not</em> define a method such as</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">init</span>(<span class="pl-k">::</span><span class="pl-c1">AbstractVector</span>, <span class="pl-k">::</span><span class="pl-c1">AlgorithmType</span>)</pre></div>
</article></div>