<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-commonsolve" class="anchor" aria-hidden="true" href="#commonsolve"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>CommonSolve</h1>
<p dir="auto"><a href="https://julialang.zulipchat.com/#narrow/stream/279055-sciml-bridged" rel="nofollow"><img src="https://camo.githubusercontent.com/667867fc71b8b3c9ed350ce154a04d38adca002ecfa38edf519284e0365ee553/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f6c6162656c3d5a756c6970266d6573736167653d6368617426636f6c6f723d393535386232266c6162656c436f6c6f723d333839383236" alt="Join the chat at https://julialang.zulipchat.com #sciml-bridged" data-canonical-src="https://img.shields.io/static/v1?label=Zulip&amp;message=chat&amp;color=9558b2&amp;labelColor=389826" style="max-width: 100%;"></a>
<a href="https://docs.sciml.ai/CommonSolve/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/88037a523f970520933771e764f5abff55de9382efc91cd89dd43ef0bb49a85f/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d5363694d4c2d626c75652e737667" alt="Global Docs" data-canonical-src="https://img.shields.io/badge/docs-SciML-blue.svg" style="max-width: 100%;"></a></p>
<p dir="auto"><a href="https://codecov.io/gh/SciML/CommonSolve.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/2b59d38be75836e36bfaf2e9198514f3ec5accd6e439b14ca2c58ae8b7f5d376/68747470733a2f2f636f6465636f762e696f2f67682f5363694d4c2f436f6d6d6f6e536f6c76652e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/SciML/CommonSolve.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a>
<a href="https://github.com/SciML/CommonSolve.jl/actions?query=workflow%3ACI"><img src="https://github.com/SciML/CommonSolve.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a></p>
<p dir="auto"><a href="https://github.com/SciML/ColPrac"><img src="https://camo.githubusercontent.com/a6c1efcb19a957860ecb25966a730260b03d6e05380d0c27992ee7f9e3b1feb3/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f436f6c507261632d436f6e7472696275746f72277325323047756964652d626c756576696f6c6574" alt="ColPrac: Contributor's Guide on Collaborative Practices for Community Packages" data-canonical-src="https://img.shields.io/badge/ColPrac-Contributor's%20Guide-blueviolet" style="max-width: 100%;"></a>
<a href="https://github.com/SciML/SciMLStyle"><img src="https://camo.githubusercontent.com/3e16f03bad047817fbc07f49307817ed7919ef79c339dc75ad4ce813012c3e0b/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f6c6162656c3d636f64652532307374796c65266d6573736167653d5363694d4c26636f6c6f723d393535386232266c6162656c436f6c6f723d333839383236" alt="SciML Code Style" data-canonical-src="https://img.shields.io/static/v1?label=code%20style&amp;message=SciML&amp;color=9558b2&amp;labelColor=389826" style="max-width: 100%;"></a></p>
<p dir="auto">This holds the common <code>solve</code>, <code>init</code>, and <code>solve!</code> commands. By using the same definition,
solver libraries from other completely different ecosystems can extend the functions and thus
not clash with SciML if both ecosystems export the <code>solve</code> command. The rules are that
you must dispatch on one of your own types. That's it. No pirates.</p>
<h2 dir="auto"><a id="user-content-general-recommendation" class="anchor" aria-hidden="true" href="#general-recommendation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>General recommendation</h2>
<p dir="auto"><code>solve</code> function has the default definition</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="solve(args...; kwargs...) = solve!(init(args...; kwargs...))"><pre><span class="pl-en">solve</span>(args<span class="pl-k">...</span>; kwargs<span class="pl-k">...</span>) <span class="pl-k">=</span> <span class="pl-c1">solve!</span>(<span class="pl-c1">init</span>(args<span class="pl-k">...</span>; kwargs<span class="pl-k">...</span>))</pre></div>
<p dir="auto">So, we recommend defining</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="init(::ProblemType, args...; kwargs...) :: SolverType
solve!(::SolverType) :: SolutionType"><pre><span class="pl-c1">init</span>(<span class="pl-k">::</span><span class="pl-c1">ProblemType</span>, args<span class="pl-k">...</span>; kwargs<span class="pl-k">...</span>) <span class="pl-k">::</span> <span class="pl-c1">SolverType</span>
<span class="pl-c1">solve!</span>(<span class="pl-k">::</span><span class="pl-c1">SolverType</span>) <span class="pl-k">::</span> <span class="pl-c1">SolutionType</span></pre></div>
<p dir="auto">where <code>ProblemType</code>, <code>SolverType</code>, and <code>SolutionType</code> are the types defined in
your package.</p>
<p dir="auto">To avoid method ambiguity, the first argument of <code>solve</code>, <code>solve!</code>, and <code>init</code>
<em>must</em> be dispatched on the type defined in your package.  For example, do
<em>not</em> define a method such as</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="init(::AbstractVector, ::AlgorithmType)"><pre><span class="pl-c1">init</span>(<span class="pl-k">::</span><span class="pl-c1">AbstractVector</span>, <span class="pl-k">::</span><span class="pl-c1">AlgorithmType</span>)</pre></div>
</article></div>