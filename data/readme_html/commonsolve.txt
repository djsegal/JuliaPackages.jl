<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-commonsolve" class="anchor" aria-hidden="true" href="#commonsolve"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>CommonSolve</h1>
<p><a href="https://github.com/SciML/CommonSolve.jl/actions?query=workflow%3ACI"><img src="https://github.com/SciML/CommonSolve.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width:100%;"></a></p>
<p>This holds the common <code>solve</code> command. The rules are that you must dispatch
on one of your own types. That's it. No pirates.</p>
<p>Oh and there're <code>init</code> and <code>solve!</code> as well.</p>
<h2><a id="user-content-general-recommendation" class="anchor" aria-hidden="true" href="#general-recommendation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>General recommendation</h2>
<p><code>solve</code> function has the default definition</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="solve(args...; kwargs...) = solve!(init(args...; kwargs...))
"><pre><span class="pl-en">solve</span>(args<span class="pl-k">...</span>; kwargs<span class="pl-k">...</span>) <span class="pl-k">=</span> <span class="pl-c1">solve!</span>(<span class="pl-c1">init</span>(args<span class="pl-k">...</span>; kwargs<span class="pl-k">...</span>))</pre></div>
<p>So, we recommend defining</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="init(::ProblemType, args...; kwargs...) :: SolverType
solve!(::SolverType) :: SolutionType
"><pre><span class="pl-c1">init</span>(<span class="pl-k">::</span><span class="pl-c1">ProblemType</span>, args<span class="pl-k">...</span>; kwargs<span class="pl-k">...</span>) <span class="pl-k">::</span> <span class="pl-c1">SolverType</span>
<span class="pl-c1">solve!</span>(<span class="pl-k">::</span><span class="pl-c1">SolverType</span>) <span class="pl-k">::</span> <span class="pl-c1">SolutionType</span></pre></div>
<p>where <code>ProblemType</code>, <code>SolverType</code>, and <code>SolutionType</code> are the types defined in
your package.</p>
<p>To avoid method ambiguity, the first argument of <code>solve</code>, <code>solve!</code>, and <code>init</code>
<em>must</em> be dispatched on the type defined in your package.  For example, do
<em>not</em> define a method such as</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="init(::AbstractVector, ::AlgorithmType)
"><pre><span class="pl-c1">init</span>(<span class="pl-k">::</span><span class="pl-c1">AbstractVector</span>, <span class="pl-k">::</span><span class="pl-c1">AlgorithmType</span>)</pre></div>
</article></div>