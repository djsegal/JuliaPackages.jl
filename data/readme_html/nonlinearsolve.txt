<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-nonlinearsolvejl" class="anchor" aria-hidden="true" href="#nonlinearsolvejl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>NonlinearSolve.jl</h1>
<p>Fast implementations of root finding algorithms in Julia that satisfy the SciML common interface.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using NonlinearSolve, StaticArrays

f(u,p) = u .* u .- 2
u0 = @SVector[1.0, 1.0]
probN = NonlinearProblem{false}(f, u0)
solver = solve(probN, NewtonRaphson(), tol = 1e-9)

## Bracketing Methods

f(u, p) = u .* u .- 2.0
u0 = (1.0, 2.0) # brackets
probB = NonlinearProblem(f, u0)
sol = solve(probB, Falsi())
"><pre><span class="pl-k">using</span> NonlinearSolve, StaticArrays

<span class="pl-en">f</span>(u,p) <span class="pl-k">=</span> u <span class="pl-k">.*</span> u <span class="pl-k">.-</span> <span class="pl-c1">2</span>
u0 <span class="pl-k">=</span> <span class="pl-c1">@SVector</span>[<span class="pl-c1">1.0</span>, <span class="pl-c1">1.0</span>]
probN <span class="pl-k">=</span> <span class="pl-c1">NonlinearProblem</span><span class="pl-c1">{false}</span>(f, u0)
solver <span class="pl-k">=</span> <span class="pl-c1">solve</span>(probN, <span class="pl-c1">NewtonRaphson</span>(), tol <span class="pl-k">=</span> <span class="pl-c1">1e-9</span>)

<span class="pl-c"><span class="pl-c">#</span># Bracketing Methods</span>

<span class="pl-en">f</span>(u, p) <span class="pl-k">=</span> u <span class="pl-k">.*</span> u <span class="pl-k">.-</span> <span class="pl-c1">2.0</span>
u0 <span class="pl-k">=</span> (<span class="pl-c1">1.0</span>, <span class="pl-c1">2.0</span>) <span class="pl-c"><span class="pl-c">#</span> brackets</span>
probB <span class="pl-k">=</span> <span class="pl-c1">NonlinearProblem</span>(f, u0)
sol <span class="pl-k">=</span> <span class="pl-c1">solve</span>(probB, <span class="pl-c1">Falsi</span>())</pre></div>
<h2><a id="user-content-current-algorithms" class="anchor" aria-hidden="true" href="#current-algorithms"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Current Algorithms</h2>
<h3><a id="user-content-non-bracketing" class="anchor" aria-hidden="true" href="#non-bracketing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Non-Bracketing</h3>
<ul>
<li><code>NewtonRaphson()</code></li>
</ul>
<h3><a id="user-content-bracketing" class="anchor" aria-hidden="true" href="#bracketing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Bracketing</h3>
<ul>
<li><code>Falsi()</code></li>
<li><code>Bisection()</code></li>
</ul>
<h2><a id="user-content-features" class="anchor" aria-hidden="true" href="#features"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Features</h2>
<p>Performance is key: the current methods are made to be highly performant on scalar and statically sized small
problems. If you run into any performance issues, please file an issue.</p>
<p>There is an iterator form of the nonlinear solver which mirrors the DiffEq integrator interface:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="f(u, p) = u .* u .- 2.0
u0 = (1.0, 2.0) # brackets
probB = NonlinearProblem(f, u0)
solver = init(probB, Falsi()) # Can iterate the solver object
solver = solve!(solver)
"><pre><span class="pl-en">f</span>(u, p) <span class="pl-k">=</span> u <span class="pl-k">.*</span> u <span class="pl-k">.-</span> <span class="pl-c1">2.0</span>
u0 <span class="pl-k">=</span> (<span class="pl-c1">1.0</span>, <span class="pl-c1">2.0</span>) <span class="pl-c"><span class="pl-c">#</span> brackets</span>
probB <span class="pl-k">=</span> <span class="pl-c1">NonlinearProblem</span>(f, u0)
solver <span class="pl-k">=</span> <span class="pl-c1">init</span>(probB, <span class="pl-c1">Falsi</span>()) <span class="pl-c"><span class="pl-c">#</span> Can iterate the solver object</span>
solver <span class="pl-k">=</span> <span class="pl-c1">solve!</span>(solver)</pre></div>
<p>Note that the <code>solver</code> object is actually immutable since we want to make it live on the stack for the sake of performance.</p>
<h2><a id="user-content-roadmap" class="anchor" aria-hidden="true" href="#roadmap"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Roadmap</h2>
<p>The current algorithms should support automatic differentiation, though improved adjoint overloads are planned
to be added in the current update (which will make use of the <code>f(u,p)</code> form). Future updates will include
standard methods for larger scale nonlinear solving like Newton-Krylov methods.</p>
</article></div>