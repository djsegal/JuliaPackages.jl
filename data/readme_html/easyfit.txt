<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-easyfit" class="anchor" aria-hidden="true" href="#easyfit"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>EasyFit</h1>
<p>Easy interface for obtaining fits of 2D data.</p>
<p>The purpose of this package is to provide a very simple interface to obtain
some of the most common fits of 2D data. Currently, simple fitting functions
are available for linear, quadratic, cubic, exponential, and spline fits.</p>
<p>On the background this interface uses the <a href="https://github.com/JuliaNLSolvers/LsqFit.jl">LsqFit</a>
and <a href="https://github.com/JuliaMath/Interpolations.jl">Interpolations</a>, which are already
quite easy to use. Additionally, EasyFit contains a simple globalization
heuristic, such that good non-linear fits are obtained often.</p>
<p>Our aim is to provide a package for quick fits without having to think about the code.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; ] add EasyFit

julia&gt; using EasyFit

"><pre>julia<span class="pl-k">&gt;</span> ] add EasyFit

julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> EasyFit
</pre></div>
<h2><a id="user-content-contents" class="anchor" aria-hidden="true" href="#contents"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Contents</h2>
<p>Read the <code>Linear fit</code> section first, because all the others are similar, with
few specificities:</p>
<ul>
<li><a href="#linear">Linear fit</a></li>
<li><a href="#quad">Quadratic fit</a></li>
<li><a href="#cubic">Cubic fit</a></li>
<li><a href="#exp">Exponential fit</a></li>
<li><a href="#splines">Splines</a></li>
<li><a href="#movavg">Moving Averages</a></li>
<li><a href="#density">Density function</a></li>
<li><a href="#bounds">Bounds</a></li>
<li><a href="#example">Example output</a></li>
<li><a href="#options">Options</a></li>
</ul>
<a name="user-content-linear">
</a><h2><a name="user-content-linear"></a><a id="user-content-linear-fit" class="anchor" aria-hidden="true" href="#linear-fit"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Linear fit</h2>
<p>To perform a linear fitting, do:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; x = sort(rand(10)); y = sort(rand(10)); # some data

julia&gt; fit = fitlinear(x,y)

 ------------------- Linear Fit ------------- 

 Equation: y = ax + b 

 With: a = 0.9245529646308137
       b = 0.08608398402393584

 Pearson correlation coefficient, R = 0.765338307304594

 Predicted y = [-0.009488291459872424, -0.004421217036880542... 
 Residues = [-0.08666886144188027, -0.12771486789744962... 

 -------------------------------------------- 


"><pre>julia<span class="pl-k">&gt;</span> x <span class="pl-k">=</span> <span class="pl-c1">sort</span>(<span class="pl-c1">rand</span>(<span class="pl-c1">10</span>)); y <span class="pl-k">=</span> <span class="pl-c1">sort</span>(<span class="pl-c1">rand</span>(<span class="pl-c1">10</span>)); <span class="pl-c"><span class="pl-c">#</span> some data</span>

julia<span class="pl-k">&gt;</span> fit <span class="pl-k">=</span> <span class="pl-c1">fitlinear</span>(x,y)

 <span class="pl-k">-------------------</span> Linear Fit <span class="pl-k">-------------</span> 

 Equation<span class="pl-k">:</span> y <span class="pl-k">=</span> ax <span class="pl-k">+</span> b 

 With<span class="pl-k">:</span> a <span class="pl-k">=</span> <span class="pl-c1">0.9245529646308137</span>
       b <span class="pl-k">=</span> <span class="pl-c1">0.08608398402393584</span>

 Pearson correlation coefficient, R <span class="pl-k">=</span> <span class="pl-c1">0.765338307304594</span>

 Predicted y <span class="pl-k">=</span> [<span class="pl-k">-</span><span class="pl-c1">0.009488291459872424</span>, <span class="pl-k">-</span><span class="pl-c1">0.004421217036880542</span><span class="pl-k">...</span> 
 Residues <span class="pl-k">=</span> [<span class="pl-k">-</span><span class="pl-c1">0.08666886144188027</span>, <span class="pl-k">-</span><span class="pl-c1">0.12771486789744962</span><span class="pl-k">...</span> 

 <span class="pl-k">--------------------------------------------</span> 

</pre></div>
<p>The <code>fit</code> data structure which comes out of <code>fitlinear</code> contains the output data with
the same names as shown in the above output:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; fit.a
0.9245529646308137

julia&gt; fit.b
0.08608398402393584

julia&gt; fit.R
0.765338307304594


"><pre>julia<span class="pl-k">&gt;</span> fit<span class="pl-k">.</span>a
<span class="pl-c1">0.9245529646308137</span>

julia<span class="pl-k">&gt;</span> fit<span class="pl-k">.</span>b
<span class="pl-c1">0.08608398402393584</span>

julia<span class="pl-k">&gt;</span> fit<span class="pl-k">.</span>R
<span class="pl-c1">0.765338307304594</span>

</pre></div>
<p>The <code>fit.x</code> and <code>fit.y</code> vectors can be used for plotting the results:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using Plots

julia&gt; scatter(x,y) # the original data

julia&gt; plot!(fit.x,fit.y) # the fit


"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Plots

julia<span class="pl-k">&gt;</span> <span class="pl-c1">scatter</span>(x,y) <span class="pl-c"><span class="pl-c">#</span> the original data</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">plot!</span>(fit<span class="pl-k">.</span>x,fit<span class="pl-k">.</span>y) <span class="pl-c"><span class="pl-c">#</span> the fit</span>

</pre></div>
<a name="user-content-quad">
</a><h2><a name="user-content-quad"></a><a id="user-content-quadratic-fit" class="anchor" aria-hidden="true" href="#quadratic-fit"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Quadratic fit</h2>
<p>Use the <code>fitquad</code> function:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; fitquad(x,y)  # or fitquadratic(x,y)

 ------------------- Quadratic Fit ------------- 

 Equation: y = ax^2 + bx + c 

 With: a = 0.935408728589832
       b = 0.07985866671623199
       c = 0.08681962205579699

 Pearson correlation coefficient, R = 0.765338307304594

 Predicted y = [0.08910633345247763, 0.08943732276526263...
 Residues = [0.07660191693062993, 0.07143385689027287...

 ----------------------------------------------- 

"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">fitquad</span>(x,y)  <span class="pl-c"><span class="pl-c">#</span> or fitquadratic(x,y)</span>

 <span class="pl-k">-------------------</span> Quadratic Fit <span class="pl-k">-------------</span> 

 Equation<span class="pl-k">:</span> y <span class="pl-k">=</span> ax<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">+</span> bx <span class="pl-k">+</span> c 

 With<span class="pl-k">:</span> a <span class="pl-k">=</span> <span class="pl-c1">0.935408728589832</span>
       b <span class="pl-k">=</span> <span class="pl-c1">0.07985866671623199</span>
       c <span class="pl-k">=</span> <span class="pl-c1">0.08681962205579699</span>

 Pearson correlation coefficient, R <span class="pl-k">=</span> <span class="pl-c1">0.765338307304594</span>

 Predicted y <span class="pl-k">=</span> [<span class="pl-c1">0.08910633345247763</span>, <span class="pl-c1">0.08943732276526263</span><span class="pl-k">...</span>
 Residues <span class="pl-k">=</span> [<span class="pl-c1">0.07660191693062993</span>, <span class="pl-c1">0.07143385689027287</span><span class="pl-k">...</span>

 <span class="pl-k">-----------------------------------------------</span> 
</pre></div>
<a name="user-content-cubic">
</a><h2><a name="user-content-cubic"></a><a id="user-content-cubic-fit" class="anchor" aria-hidden="true" href="#cubic-fit"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Cubic fit</h2>
<p>Use the <code>fitcubic</code> function:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; fitcubic(x,y) 

 ------------------- Cubic Fit ----------------- 

 Equation: y = ax^3 + bx^2 + cx + d 

 With: a = 1.6860182468269271
       b = -2.197790204605215
       c = 1.431666717127516
       d = -0.10389199522825227

 Pearson correlation coefficient, R = 0.765338307304594

 Predicted Y: ypred = [0.024757602237563042, 0.1762724543346461...
 residues = [-0.021614675301217884, 0.0668157091306878...

 ----------------------------------------------- 


"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">fitcubic</span>(x,y) 

 <span class="pl-k">-------------------</span> Cubic Fit <span class="pl-k">-----------------</span> 

 Equation<span class="pl-k">:</span> y <span class="pl-k">=</span> ax<span class="pl-k">^</span><span class="pl-c1">3</span> <span class="pl-k">+</span> bx<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">+</span> cx <span class="pl-k">+</span> d 

 With<span class="pl-k">:</span> a <span class="pl-k">=</span> <span class="pl-c1">1.6860182468269271</span>
       b <span class="pl-k">=</span> <span class="pl-k">-</span><span class="pl-c1">2.197790204605215</span>
       c <span class="pl-k">=</span> <span class="pl-c1">1.431666717127516</span>
       d <span class="pl-k">=</span> <span class="pl-k">-</span><span class="pl-c1">0.10389199522825227</span>

 Pearson correlation coefficient, R <span class="pl-k">=</span> <span class="pl-c1">0.765338307304594</span>

 Predicted Y<span class="pl-k">:</span> ypred <span class="pl-k">=</span> [<span class="pl-c1">0.024757602237563042</span>, <span class="pl-c1">0.1762724543346461</span><span class="pl-k">...</span>
 residues <span class="pl-k">=</span> [<span class="pl-k">-</span><span class="pl-c1">0.021614675301217884</span>, <span class="pl-c1">0.0668157091306878</span><span class="pl-k">...</span>

 <span class="pl-k">-----------------------------------------------</span> 

</pre></div>
<a name="user-content-exp">
</a><h2><a name="user-content-exp"></a><a id="user-content-exponential-fits" class="anchor" aria-hidden="true" href="#exponential-fits"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Exponential fits</h2>
<p>Use the <code>fitexp</code> function:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; fitexp(x,y) # or fitexponential

 ------------ Single Exponential fit ----------- 

 Equation: y = A exp(x/b) + C

 With: A = 0.08309782657193134
       b = 0.4408664103095801
       C = 1.4408664103095801

 Pearson correlation coefficient, R = 0.765338307304594

 Predicted Y: ypred = [0.10558554154948542, 0.16605481935145136...
 residues = [0.059213264010704494, 0.056598074147493044...

 ----------------------------------------------- 


"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">fitexp</span>(x,y) <span class="pl-c"><span class="pl-c">#</span> or fitexponential</span>

 <span class="pl-k">------------</span> Single Exponential fit <span class="pl-k">-----------</span> 

 Equation<span class="pl-k">:</span> y <span class="pl-k">=</span> A <span class="pl-c1">exp</span>(x<span class="pl-k">/</span>b) <span class="pl-k">+</span> C

 With<span class="pl-k">:</span> A <span class="pl-k">=</span> <span class="pl-c1">0.08309782657193134</span>
       b <span class="pl-k">=</span> <span class="pl-c1">0.4408664103095801</span>
       C <span class="pl-k">=</span> <span class="pl-c1">1.4408664103095801</span>

 Pearson correlation coefficient, R <span class="pl-k">=</span> <span class="pl-c1">0.765338307304594</span>

 Predicted Y<span class="pl-k">:</span> ypred <span class="pl-k">=</span> [<span class="pl-c1">0.10558554154948542</span>, <span class="pl-c1">0.16605481935145136</span><span class="pl-k">...</span>
 residues <span class="pl-k">=</span> [<span class="pl-c1">0.059213264010704494</span>, <span class="pl-c1">0.056598074147493044</span><span class="pl-k">...</span>

 <span class="pl-k">-----------------------------------------------</span> 

</pre></div>
<p>or add <code>n=N</code> for a multiple-exponential fit:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="
julia&gt; fit = fitexp(x,y,n=3)

 -------- Multiple-exponential fit ------------- 

 Equation: y = sum(A[i] exp(x/b[i]) for i in 1:3) + C

 With: A = [2.0447736471832363e-16, 3.165225832379937, -3.2171314371600785]
       b = [0.02763465220057311, -46969.25088088338, -4.403370258345724]
       C = 3.543252432454542

 Pearson correlation coefficient, R = 0.765338307304594

 Predicted Y: ypred = [0.024313571992034433, 0.1635108558614995...
 residues = [-0.022058705546746493, 0.05405411065754118...

 ----------------------------------------------- 

"><pre>julia<span class="pl-k">&gt;</span> fit <span class="pl-k">=</span> <span class="pl-c1">fitexp</span>(x,y,n<span class="pl-k">=</span><span class="pl-c1">3</span>)

 <span class="pl-k">--------</span> Multiple<span class="pl-k">-</span>exponential fit <span class="pl-k">-------------</span> 

 Equation<span class="pl-k">:</span> y <span class="pl-k">=</span> <span class="pl-c1">sum</span>(A[i] <span class="pl-c1">exp</span>(x<span class="pl-k">/</span>b[i]) <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">3</span>) <span class="pl-k">+</span> C

 With<span class="pl-k">:</span> A <span class="pl-k">=</span> [<span class="pl-c1">2.0447736471832363e-16</span>, <span class="pl-c1">3.165225832379937</span>, <span class="pl-k">-</span><span class="pl-c1">3.2171314371600785</span>]
       b <span class="pl-k">=</span> [<span class="pl-c1">0.02763465220057311</span>, <span class="pl-k">-</span><span class="pl-c1">46969.25088088338</span>, <span class="pl-k">-</span><span class="pl-c1">4.403370258345724</span>]
       C <span class="pl-k">=</span> <span class="pl-c1">3.543252432454542</span>

 Pearson correlation coefficient, R <span class="pl-k">=</span> <span class="pl-c1">0.765338307304594</span>

 Predicted Y<span class="pl-k">:</span> ypred <span class="pl-k">=</span> [<span class="pl-c1">0.024313571992034433</span>, <span class="pl-c1">0.1635108558614995</span><span class="pl-k">...</span>
 residues <span class="pl-k">=</span> [<span class="pl-k">-</span><span class="pl-c1">0.022058705546746493</span>, <span class="pl-c1">0.05405411065754118</span><span class="pl-k">...</span>

 <span class="pl-k">-----------------------------------------------</span> 
</pre></div>
<a name="user-content-spline">
</a><h2><a name="user-content-spline"></a><a id="user-content-splines" class="anchor" aria-hidden="true" href="#splines"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Splines</h2>
<p>Use the <code>fitspline</code> function:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="
julia&gt; fit = fitspline(x,y)

 -------- Spline fit --------------------------- 

 x spline: x = [0.10558878272489601, 0.1305310750202113...
 y spline: y = [0.046372277538780926, 0.05201906296544364...

 ----------------------------------------------- 

"><pre>julia<span class="pl-k">&gt;</span> fit <span class="pl-k">=</span> <span class="pl-c1">fitspline</span>(x,y)

 <span class="pl-k">--------</span> Spline fit <span class="pl-k">---------------------------</span> 

 x spline<span class="pl-k">:</span> x <span class="pl-k">=</span> [<span class="pl-c1">0.10558878272489601</span>, <span class="pl-c1">0.1305310750202113</span><span class="pl-k">...</span>
 y spline<span class="pl-k">:</span> y <span class="pl-k">=</span> [<span class="pl-c1">0.046372277538780926</span>, <span class="pl-c1">0.05201906296544364</span><span class="pl-k">...</span>

 <span class="pl-k">-----------------------------------------------</span> 
</pre></div>
<p>Use <code>plot(fit.x,fit.y)</code> to plot the spline.</p>
<a name="user-content-movavg">
</a><h2><a name="user-content-movavg"></a><a id="user-content-moving-averages" class="anchor" aria-hidden="true" href="#moving-averages"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Moving Averages</h2>
<p>Use the <code>movavg</code> (or <code>movingaverage</code>) function:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="
julia&gt; ma = movavg(x,y,50)

 ------------------- Moving Average ----------

 Number of points averaged: 51 (± 25 points)

 Pearson correlation coefficient, R = 0.9916417123050962

 Averaged Y: y = [0.14243985510210114, 0.14809841636897675...
 residues = [-0.14230394758154755, -0.12866864179092025...

 --------------------------------------------


"><pre>julia<span class="pl-k">&gt;</span> ma <span class="pl-k">=</span> <span class="pl-c1">movavg</span>(x,y,<span class="pl-c1">50</span>)

 <span class="pl-k">-------------------</span> Moving Average <span class="pl-k">----------</span>

 Number of points averaged<span class="pl-k">:</span> <span class="pl-c1">51</span> (± <span class="pl-c1">25</span> points)

 Pearson correlation coefficient, R <span class="pl-k">=</span> <span class="pl-c1">0.9916417123050962</span>

 Averaged Y<span class="pl-k">:</span> y <span class="pl-k">=</span> [<span class="pl-c1">0.14243985510210114</span>, <span class="pl-c1">0.14809841636897675</span><span class="pl-k">...</span>
 residues <span class="pl-k">=</span> [<span class="pl-k">-</span><span class="pl-c1">0.14230394758154755</span>, <span class="pl-k">-</span><span class="pl-c1">0.12866864179092025</span><span class="pl-k">...</span>

 <span class="pl-k">--------------------------------------------</span>

</pre></div>
<p>Use <code>plot(ma.x,ma.y)</code> to plot the moving average.</p>
<a name="user-content-bounds">
</a><a name="user-content-density">
</a><h2><a name="user-content-density"></a><a id="user-content-density-function" class="anchor" aria-hidden="true" href="#density-function"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Density function</h2>
<p>Use the <code>fitdensity</code> to obtain the density function (continuous histogram)
of a data set <code>x</code>:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="
julia&gt; x = randn(1000)

julia&gt; density = fitdensity(x)

 ------------------- Density -------------

  d contains the probability of finding data points within x ± 0.25

 -----------------------------------------

"><pre>julia<span class="pl-k">&gt;</span> x <span class="pl-k">=</span> <span class="pl-c1">randn</span>(<span class="pl-c1">1000</span>)

julia<span class="pl-k">&gt;</span> density <span class="pl-k">=</span> <span class="pl-c1">fitdensity</span>(x)

 <span class="pl-k">-------------------</span> Density <span class="pl-k">-------------</span>

  d contains the probability of finding data points within x ± <span class="pl-c1">0.25</span>

 <span class="pl-k">-----------------------------------------</span>
</pre></div>
<p>Options are the step size (<code>step=0.5</code>) and normalization type
(probability by default, with <code>norm=1</code> or number of data points,
with <code>norm=0</code>).</p>
<p>Example:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt; x = randn(1000);

julia&gt; density = fitdensity(x,step=0.5,norm=0);

julia&gt; histogram(x,xlabel=&quot;x&quot;,ylabel=&quot;Density&quot;,label=&quot;&quot;,alpha=0.3,framestyle=:box);

julia&gt; plot!(density.x,density.d,linewidth=2);

"><pre lang="julia-repl"><code>julia&gt; x = randn(1000);

julia&gt; density = fitdensity(x,step=0.5,norm=0);

julia&gt; histogram(x,xlabel="x",ylabel="Density",label="",alpha=0.3,framestyle=:box);

julia&gt; plot!(density.x,density.d,linewidth=2);

</code></pre></div>
<img src="https://raw.githubusercontent.com/m3g/EasyFit/master/docs/density.png" style="max-width:100%;">
<a name="user-content-bounds">
</a><h2><a name="user-content-bounds"></a><a id="user-content-bounds" class="anchor" aria-hidden="true" href="#bounds"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Bounds</h2>
<p>Lower and upper bounds can be set to the parameters of each function using the
<code>l=lower()</code> and <code>u=upper()</code> input parameters. For example:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; fit = fitlinear(x,y,l=lower(a=5.),u=upper(a=10.))

"><pre>julia<span class="pl-k">&gt;</span> fit <span class="pl-k">=</span> <span class="pl-c1">fitlinear</span>(x,y,l<span class="pl-k">=</span><span class="pl-c1">lower</span>(a<span class="pl-k">=</span><span class="pl-c1">5.</span>),u<span class="pl-k">=</span><span class="pl-c1">upper</span>(a<span class="pl-k">=</span><span class="pl-c1">10.</span>))
</pre></div>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; fit = fitexp(x,y,n=2,l=lower(a=[0.,0]),u=upper(a=[1.,1.]))

"><pre>julia<span class="pl-k">&gt;</span> fit <span class="pl-k">=</span> <span class="pl-c1">fitexp</span>(x,y,n<span class="pl-k">=</span><span class="pl-c1">2</span>,l<span class="pl-k">=</span><span class="pl-c1">lower</span>(a<span class="pl-k">=</span>[<span class="pl-c1">0.</span>,<span class="pl-c1">0</span>]),u<span class="pl-k">=</span><span class="pl-c1">upper</span>(a<span class="pl-k">=</span>[<span class="pl-c1">1.</span>,<span class="pl-c1">1.</span>]))
</pre></div>
<p>Bounds to the intercepts or limiting values are not supported, but it is possible
to set them to a constant value. For example:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; fit = fitlinear(x,y,b=5.)

"><pre>julia<span class="pl-k">&gt;</span> fit <span class="pl-k">=</span> <span class="pl-c1">fitlinear</span>(x,y,b<span class="pl-k">=</span><span class="pl-c1">5.</span>)
</pre></div>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; fit = fitexp(x,y,n=2,c=0.)

"><pre>julia<span class="pl-k">&gt;</span> fit <span class="pl-k">=</span> <span class="pl-c1">fitexp</span>(x,y,n<span class="pl-k">=</span><span class="pl-c1">2</span>,c<span class="pl-k">=</span><span class="pl-c1">0.</span>)
</pre></div>
<a name="user-content-example">
</a><h2><a name="user-content-example"></a><a id="user-content-example-output" class="anchor" aria-hidden="true" href="#example-output"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example output:</h2>
<p>This figure was obtained using <code>Plots</code>, after obtaining a fit of each type, with</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; scatter!(x,y) # plot original data
julia&gt; plot!(fit.x,fit.y) # plot the resulting fit

"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">scatter!</span>(x,y) <span class="pl-c"><span class="pl-c">#</span> plot original data</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">plot!</span>(fit<span class="pl-k">.</span>x,fit<span class="pl-k">.</span>y) <span class="pl-c"><span class="pl-c">#</span> plot the resulting fit</span>
</pre></div>
<img src="https://raw.githubusercontent.com/m3g/EasyFit/master/docs/plots.png" style="max-width:100%;">
<p><a name="user-content-example">The complete script is available at:
</a><a href="https://raw.githubusercontent.com/m3g/EasyFit/master/docs/plots.jl" rel="nofollow">plots.jl</a></p>
<a name="user-content-options">
</a><h2><a name="user-content-options"></a><a id="user-content-options" class="anchor" aria-hidden="true" href="#options"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Options</h2>
<p>It is possible to pass an optional set of parameters to the functions.
Use, for example:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; fitexp(x,y,options=Options(maxtrials=1000))

"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">fitexp</span>(x,y,options<span class="pl-k">=</span><span class="pl-c1">Options</span>(maxtrials<span class="pl-k">=</span><span class="pl-c1">1000</span>))
</pre></div>
<p>Available options:</p>
<table>
<thead>
<tr>
<th align="center">Keyword</th>
<th align="center">Type</th>
<th align="center">Default value</th>
<th align="left">Meaning</th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><code>fine</code></td>
<td align="center"><code>Int</code></td>
<td align="center">100</td>
<td align="left">Number of points of fit to smooth plot.</td>
</tr>
<tr>
<td align="center"><code>p0_range</code></td>
<td align="center"><code>Vector{Float64,2}</code></td>
<td align="center"><code>[-100*(maximum(Y)-minimum(Y)), 100*(maximum(Y)-minimum(Y))]</code></td>
<td align="left">Range of gereneration of initial random parameters.</td>
</tr>
<tr>
<td align="center"><code>nbest</code></td>
<td align="center"><code>Int</code></td>
<td align="center">5</td>
<td align="left">Number of repetitions of best solution in global search.</td>
</tr>
<tr>
<td align="center"><code>besttol</code></td>
<td align="center"><code>Float64</code></td>
<td align="center">1e-4</td>
<td align="left">Similarity of the sum of residues of two solutions such that they are considered the same.</td>
</tr>
<tr>
<td align="center"><code>maxtrials</code></td>
<td align="center"><code>Int</code></td>
<td align="center">100</td>
<td align="left">Maximum number of trials in global search.</td>
</tr>
<tr>
<td align="center"><code>debug</code></td>
<td align="center"><code>Bool</code></td>
<td align="center">false</td>
<td align="left">Prints errors of failed fits.</td>
</tr>
</tbody>
</table>
</article></div>