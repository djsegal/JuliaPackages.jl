<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p align="center"><a target="_blank" rel="noopener noreferrer" href="/docs/EzXML.jl.png"><img src="/docs/EzXML.jl.png" alt="EzXML.jl Logo" width="350" style="max-width:100%;"></a></p>
<h1><a id="user-content-ezxmljl---xmlhtml-tools-for-primates" class="anchor" aria-hidden="true" href="#ezxmljl---xmlhtml-tools-for-primates"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>EzXML.jl - XML/HTML tools for primates</h1>
<p><a href="https://bicycle1885.github.io/EzXML.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/f7b92a177c912c1cc007fc9b40f17ff3ee3bb414/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Docs Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://bicycle1885.github.io/EzXML.jl/latest" rel="nofollow"><img src="https://camo.githubusercontent.com/57bae07ecd50a99519ad0516d91f4ec8f0f48e12/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6c61746573742d626c75652e737667" alt="Docs Latest" data-canonical-src="https://img.shields.io/badge/docs-latest-blue.svg" style="max-width:100%;"></a>
<a href="https://github.com/bicycle1885/EzXML.jl/actions"><img src="https://github.com/bicycle1885/EzXML.jl/workflows/CI/badge.svg" alt="CI Status" style="max-width:100%;"></a>
<a href="http://codecov.io/github/bicycle1885/EzXML.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/5d847ff1375c4675575ffd6713fbf3cea717adf0/687474703a2f2f636f6465636f762e696f2f6769746875622f62696379636c65313838352f457a584d4c2e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/bicycle1885/EzXML.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
<p>EzXML.jl is a package to handle XML/HTML documents for primates.</p>
<p>The main features are:</p>
<ul>
<li>Reading and writing XML/HTML documents.</li>
<li>Traversing XML/HTML trees with DOM interfaces.</li>
<li>Searching elements using XPath.</li>
<li>Proper namespace handling.</li>
<li>Capturing error messages.</li>
<li>Automatic memory management.</li>
<li>Document validation.</li>
<li>Streaming parsing for large XML files.</li>
</ul>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>Install EzXML.jl as follows:</p>
<pre><code>julia -e 'using Pkg; Pkg.add("EzXML")'
</code></pre>
<p>This package depends on <a href="http://xmlsoft.org/" rel="nofollow">libxml2</a> 2.9.9, which will be automatically installed as an artifact via <a href="https://github.com/JuliaBinaryWrappers/XML2_jll.jl">XML2_jll.jl</a> if you use Julia 1.3 or later.
Currently, Windows, Linux, macOS, and FreeBSD are now supported.</p>
<h2><a id="user-content-version-compatibility" class="anchor" aria-hidden="true" href="#version-compatibility"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Version compatibility</h2>
<table>
<thead>
<tr>
<th align="center">EzXML.jl</th>
<th align="center">Julia</th>
</tr>
</thead>
<tbody>
<tr>
<td align="center">1.0</td>
<td align="center">1.0 or later</td>
</tr>
<tr>
<td align="center">1.1</td>
<td align="center">1.3 or later</td>
</tr>
</tbody>
</table>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span> Load the package.</span>
<span class="pl-k">using</span> EzXML

<span class="pl-c"><span class="pl-c">#</span> Parse an XML string</span>
<span class="pl-c"><span class="pl-c">#</span> (use `readxml(&lt;filename&gt;)` to read a document from a file).</span>
doc <span class="pl-k">=</span> <span class="pl-c1">parsexml</span>(<span class="pl-s"><span class="pl-pds">"""</span></span>
<span class="pl-s">&lt;primates&gt;</span>
<span class="pl-s">    &lt;genus name="Homo"&gt;</span>
<span class="pl-s">        &lt;species name="sapiens"&gt;Human&lt;/species&gt;</span>
<span class="pl-s">    &lt;/genus&gt;</span>
<span class="pl-s">    &lt;genus name="Pan"&gt;</span>
<span class="pl-s">        &lt;species name="paniscus"&gt;Bonobo&lt;/species&gt;</span>
<span class="pl-s">        &lt;species name="troglodytes"&gt;Chimpanzee&lt;/species&gt;</span>
<span class="pl-s">    &lt;/genus&gt;</span>
<span class="pl-s">&lt;/primates&gt;</span>
<span class="pl-s"><span class="pl-pds">"""</span></span>)

<span class="pl-c"><span class="pl-c">#</span> Get the root element from `doc`.</span>
primates <span class="pl-k">=</span> <span class="pl-c1">root</span>(doc)

<span class="pl-c"><span class="pl-c">#</span> Iterate over child elements.</span>
<span class="pl-k">for</span> genus <span class="pl-k">in</span> <span class="pl-c1">eachelement</span>(primates)
    <span class="pl-c"><span class="pl-c">#</span> Get an attribute value by name.</span>
    genus_name <span class="pl-k">=</span> genus[<span class="pl-s"><span class="pl-pds">"</span>name<span class="pl-pds">"</span></span>]
    <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>- <span class="pl-pds">"</span></span>, genus_name)
    <span class="pl-k">for</span> species <span class="pl-k">in</span> <span class="pl-c1">eachelement</span>(genus)
        <span class="pl-c"><span class="pl-c">#</span> Get the content within an element.</span>
        species_name <span class="pl-k">=</span> <span class="pl-c1">nodecontent</span>(species)
        <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>  â”” <span class="pl-pds">"</span></span>, species[<span class="pl-s"><span class="pl-pds">"</span>name<span class="pl-pds">"</span></span>], <span class="pl-s"><span class="pl-pds">"</span> (<span class="pl-pds">"</span></span>, species_name, <span class="pl-s"><span class="pl-pds">"</span>)<span class="pl-pds">"</span></span>)
    <span class="pl-k">end</span>
<span class="pl-k">end</span>
<span class="pl-c1">println</span>()

<span class="pl-c"><span class="pl-c">#</span> Find texts using XPath query.</span>
<span class="pl-k">for</span> species_name <span class="pl-k">in</span> <span class="pl-c1">nodecontent</span>.(<span class="pl-c1">findall</span>(<span class="pl-s"><span class="pl-pds">"</span>//species/text()<span class="pl-pds">"</span></span>, primates))
    <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>- <span class="pl-pds">"</span></span>, species_name)
<span class="pl-k">end</span></pre></div>
<h2><a id="user-content-quick-reference" class="anchor" aria-hidden="true" href="#quick-reference"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Quick reference</h2>
<p>See the <a href="https://bicycle1885.github.io/EzXML.jl/stable/reference/" rel="nofollow">reference page</a> or docstrings for more details.</p>
<p>Types:</p>
<ul>
<li><code>EzXML.Document</code>: an XML/HTML document</li>
<li><code>EzXML.Node</code>: an XML/HTML node including elements, attributes, texts, etc.</li>
<li><code>EzXML.XMLError</code>: an error happened in libxml2</li>
<li><code>EzXML.StreamReader</code>: a streaming XML reader</li>
</ul>
<p>IO:</p>
<ul>
<li>From file: <code>readxml(filename|stream)</code>, <code>readhtml(filename|stream)</code></li>
<li>From string or byte array: <code>parsexml(string)</code>, <code>parsehtml(string)</code></li>
<li>To file: <code>write(filename, doc)</code></li>
<li>To stream: <code>print(io, doc)</code></li>
</ul>
<p>Accessors:</p>
<ul>
<li>Node information: <code>nodetype(node)</code>, <code>nodepath(node)</code>, <code>nodename(node)</code>, <code>nodecontent(node)</code>, <code>setnodename!(node, name)</code>, <code>setnodecontent!(node, content)</code></li>
<li>Node property: <code>node.type</code>, <code>node.name</code>, <code>node.path</code>, <code>node.content</code>, <code>node.namespace</code></li>
<li>Document:
<ul>
<li>Property: <code>version(doc)</code>, <code>encoding(doc)</code>, <code>hasversion(doc)</code>, <code>hasencoding(doc)</code></li>
<li>Node: <code>root(doc)</code>, <code>dtd(doc)</code>, <code>hasroot(doc)</code>, <code>hasdtd(doc)</code>, <code>setroot!(doc, element_node)</code>, <code>setdtd!(doc, dtd_node)</code></li>
</ul>
</li>
<li>Document property: <code>doc.version</code>, <code>doc.encoding</code>, <code>doc.node</code>, <code>doc.root</code>, <code>doc.dtd</code></li>
<li>Attributes: <code>node[name]</code>, <code>node[name] = value</code>, <code>haskey(node, name)</code>, <code>delete!(node, name)</code></li>
<li>Node predicate:
<ul>
<li>Document: <code>hasdocument(node)</code></li>
<li>Parent: <code>hasparentnode(node)</code>, <code>hasparentelement(node)</code></li>
<li>Child: <code>hasnode(node)</code>, <code>haselement(node)</code></li>
<li>Sibling: <code>hasnextnode(node)</code>, <code>hasprevnode(node)</code>, <code>hasnextelement(node)</code>, <code>hasprevelement(node)</code></li>
<li>Node type: <code>iselement(node)</code>, <code>isattribute(node)</code>, <code>istext(node)</code>, <code>iscdata(node)</code>, <code>iscomment(node)</code>, <code>isdtd(node)</code></li>
</ul>
</li>
<li>Tree traversal:
<ul>
<li>Document: <code>document(node)</code></li>
<li>Parent: <code>parentnode(node)</code>, <code>parentelement(node)</code></li>
<li>Child: <code>firstnode(node)</code>, <code>lastnode(node)</code>, <code>firstelement(node)</code>, <code>lastelement(node)</code></li>
<li>Sibling: <code>nextnode(node)</code>, <code>prevnode(node)</code>, <code>nextelement(node)</code>, <code>prevelement(node)</code></li>
</ul>
</li>
<li>Tree modifiers:
<ul>
<li>Link: <code>link!(parent_node, child_node)</code>, <code>linknext!(target_node, node)</code>, <code>linkprev!(target_node, node)</code></li>
<li>Unlink: <code>unlink!(node)</code></li>
<li>Create: <code>addelement!(parent_node, name, [content])</code></li>
</ul>
</li>
<li>Iterators:
<ul>
<li>Iterator: <code>eachnode(node)</code>, <code>eachelement(node)</code>, <code>eachattribute(node)</code></li>
<li>Vector: <code>nodes(node)</code>, <code>elements(node)</code>, <code>attributes(node)</code></li>
</ul>
</li>
<li>Counters: <code>countnodes(node)</code>, <code>countelements(node)</code>, <code>countattributes(node)</code></li>
<li>Namespaces: <code>namespace(node)</code>, <code>namespaces(node)</code></li>
</ul>
<p>Constructors:</p>
<ul>
<li><code>EzXML.Document</code> type: <code>XMLDocument(version="1.0")</code>, <code>HTMLDocument(uri=nothing, externalID=nothing)</code></li>
<li><code>EzXML.Node</code> type: <code>XMLDocumentNode(version="1.0")</code>, <code>HTMLDocumentNode(uri, externalID)</code>, <code>ElementNode(name)</code>, <code>TextNode(content)</code>, <code>CommentNode(content)</code>, <code>CDataNode(content)</code>, <code>AttributeNode(name, value)</code>, <code>DTDNode(name, [systemID, [externalID]])</code></li>
</ul>
<p>Queries:</p>
<ul>
<li>XPath: <code>findall(xpath, doc|node)</code>, <code>findfirst(xpath, doc|node)</code>, <code>findlast(xpath, doc|node)</code></li>
</ul>
<h2><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Examples</h2>
<ul>
<li><a href="/example/primates.jl">primates.jl</a>: Run "primates" example shown above.</li>
<li><a href="/example/julia2xml.jl">julia2xml.jl</a>: Convert a Julia expression to XML.</li>
<li><a href="/example/listlinks.jl">listlinks.jl</a>: List all links in an HTML document.</li>
</ul>
<h2><a id="user-content-other-xmlhtml-packages-in-julia" class="anchor" aria-hidden="true" href="#other-xmlhtml-packages-in-julia"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Other XML/HTML packages in Julia</h2>
<ul>
<li><a href="https://github.com/JuliaIO/LightXML.jl">LightXML.jl</a></li>
<li><a href="https://github.com/amitmurthy/LibExpat.jl">LibExpat.jl</a></li>
</ul>
</article></div>