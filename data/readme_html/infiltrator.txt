<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-infiltratorjl-" class="anchor" aria-hidden="true" href="#infiltratorjl-"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Infiltrator.jl <a href="https://travis-ci.org/JuliaDebug/Infiltrator.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/397d618ce4b3c6878fe721da625565b2ebc40a42/68747470733a2f2f7472617669732d63692e6f72672f4a756c696144656275672f496e66696c747261746f722e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaDebug/Infiltrator.jl.svg?branch=master" style="max-width:100%;"></a></h1>
<p>This packages provides a macro called <code>@infiltrate</code>, which sets a "breakpoint" in a local context
(similar to Matlab's <code>keyboard</code> function). The advantage of this macro over e.g. Debugger.jl is that
all code is completely compiled, so the performance overhead should be neglible.</p>
<p><code>@infiltrate</code> will drop you into an interactive REPL session that lets you inspect local variables
and the call stack as well as execute aribtrary statements in the context of the current function's module.
You can optionally supply an argument to <code>@infiltrate</code> (that must evaluate to a boolean) to make it
conditional.</p>
<p>Note that you cannot access other functions in the callstack, or step into functions. If you need that
functionality, use Debugger.jl or Juno's debugger.</p>
<p>Use <code>Ctrl-C</code> (or <code>Ctrl-D</code>) in the REPL to exit from debugging mode.</p>
<h3><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Usage</h3>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">function</span> <span class="pl-en">f</span>(x)
         x <span class="pl-k">*=</span> <span class="pl-c1">2</span>
         y <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">3</span>)
         <span class="pl-c1">@infiltrate</span>
         x <span class="pl-k">+=</span> <span class="pl-c1">2</span>
       <span class="pl-k">end</span>
f (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">f</span>(<span class="pl-c1">3</span>)
Hit <span class="pl-s"><span class="pl-pds">`</span>@infiltrate<span class="pl-pds">`</span></span> <span class="pl-k">in</span> <span class="pl-c1">f</span>(<span class="pl-k">::</span><span class="pl-c1">Int64</span>) at none<span class="pl-k">:</span><span class="pl-c1">4</span><span class="pl-k">:</span>

debug<span class="pl-k">&gt;</span> ?
Code entered is evaluated <span class="pl-k">in</span> the current function<span class="pl-k">'</span>s <span class="pl-k">module</span>. Note that you cannot change <span class="pl-k">local</span>
variables.
The following commands are special cased<span class="pl-k">:</span>
<span class="pl-k">-</span> <span class="pl-s"><span class="pl-pds">`</span>@trace<span class="pl-pds">`</span></span>: Print the current stack trace.
<span class="pl-k">-</span> <span class="pl-s"><span class="pl-pds">`</span>@locals<span class="pl-pds">`</span></span>: Print <span class="pl-k">local</span> variables.
<span class="pl-k">-</span> <span class="pl-s"><span class="pl-pds">`</span>@stop<span class="pl-pds">`</span></span>: Stop infiltrating at this <span class="pl-s"><span class="pl-pds">`</span>@infiltrate<span class="pl-pds">`</span></span> spot.

Exit this REPL mode with <span class="pl-s"><span class="pl-pds">`</span>Ctrl-D<span class="pl-pds">`</span></span>, and clear the effect of <span class="pl-s"><span class="pl-pds">`</span>@stop<span class="pl-pds">`</span></span> with <span class="pl-s"><span class="pl-pds">`</span>Infiltrator.clear_stop()<span class="pl-pds">`</span></span>.

debug<span class="pl-k">&gt;</span> <span class="pl-c1">@trace</span>
[<span class="pl-c1">1</span>] <span class="pl-c1">f</span>(<span class="pl-k">::</span><span class="pl-c1">Int64</span>) at none<span class="pl-k">:</span><span class="pl-c1">4</span>
[<span class="pl-c1">2</span>] top<span class="pl-k">-</span>level scope at none<span class="pl-k">:</span><span class="pl-c1">0</span>

debug<span class="pl-k">&gt;</span> <span class="pl-c1">@locals</span>
<span class="pl-k">-</span> y<span class="pl-k">::</span><span class="pl-c1">Array{Float64,1}</span> <span class="pl-k">=</span> [<span class="pl-c1">0.187253</span>, <span class="pl-c1">0.145958</span>, <span class="pl-c1">0.183677</span>]
<span class="pl-k">-</span> x<span class="pl-k">::</span><span class="pl-c1">Int64</span> <span class="pl-k">=</span> <span class="pl-c1">6</span>

debug<span class="pl-k">&gt;</span> x<span class="pl-k">.+</span>y
<span class="pl-c1">3</span><span class="pl-k">-</span>element Array{Float64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
<span class="pl-c1">6.187252565686353</span>
<span class="pl-c1">6.145958004935359</span>
<span class="pl-c1">6.1836766675450034</span>

debug<span class="pl-k">&gt;</span>

<span class="pl-c1">8</span>

julia<span class="pl-k">&gt;</span></pre></div>
</article></div>