<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><div align="center" dir="auto">
<themed-picture data-catalyst-inline="true"><picture>
  <source media="(prefers-color-scheme: dark)" srcset="docs/src/assets/logo-dark.svg">
  <source media="(prefers-color-scheme: light)" srcset="docs/src/assets/logo.svg">
  <img alt="Infiltrator Logo" src="docs/src/assets/logo.svg" width="150px">
</picture></themed-picture>
</div>
<h1 dir="auto"><a id="user-content-infiltratorjl" class="anchor" aria-hidden="true" href="#infiltratorjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Infiltrator.jl</h1>
<p dir="auto"><a href="https://github.com/JuliaDebug/Infiltrator.jl/actions/workflows/CI.yml"><img src="https://github.com/JuliaDebug/Infiltrator.jl/actions/workflows/CI.yml/badge.svg" alt="CI" style="max-width: 100%;"></a> <a href="https://codecov.io/gh/JuliaDebug/Infiltrator.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/b8203401c0ff5544b83ae3e5d63089149920d6456abbad3aa103fe452f70ef23/68747470733a2f2f636f6465636f762e696f2f67682f4a756c696144656275672f496e66696c747261746f722e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/JuliaDebug/Infiltrator.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a> <a href="https://juliahub.com/ui/Packages/Infiltrator/ge3PS" rel="nofollow"><img src="https://camo.githubusercontent.com/288571627a23af0fd2391f47832f980de5cf192df046f65ec3a5a761053340c9/68747470733a2f2f6a756c69616875622e636f6d2f646f63732f496e66696c747261746f722f76657273696f6e2e737667" alt="version" data-canonical-src="https://juliahub.com/docs/Infiltrator/version.svg" style="max-width: 100%;"></a></p>
<p dir="auto"><a href="https://juliadebug.github.io/Infiltrator.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="docs stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a> <a href="https://juliadebug.github.io/Infiltrator.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="docs dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a></p>
<p dir="auto">This packages provides the <code>@infiltrate</code> macro, which acts as a breakpoint with negligible runtime
performance overhead.</p>
<p dir="auto">Note that you cannot access other function scopes or step into further calls. Use an actual debugger
if you need that level of flexibility.</p>
<p dir="auto">Running code that ends up triggering the <code>@infiltrate</code> REPL mode via inline evaluation in VS Code
or Juno can cause issues, so it's recommended to always use the REPL directly.</p>
<h2 dir="auto"><a id="user-content-infiltrate" class="anchor" aria-hidden="true" href="#infiltrate"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>@infiltrate</code></h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@infiltrate
@infiltrate condition::Bool"><pre><span class="pl-c1">@infiltrate</span>
<span class="pl-c1">@infiltrate</span> condition<span class="pl-k">::</span><span class="pl-c1">Bool</span></pre></div>
<p dir="auto"><code>@infiltrate</code> sets an infiltration point.</p>
<p dir="auto">When the infiltration point is hit, it will drop you into an interactive REPL session that
lets you inspect local variables and the call stack as well as execute arbitrary statements
in the context of the current local and global scope.</p>
<p dir="auto">The optional argument <code>cond</code> only enables this infiltration point if it evaluates to <code>true</code>, e.g.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@infiltrate false # does not infiltrate"><pre><span class="pl-c1">@infiltrate</span> <span class="pl-c1">false</span> <span class="pl-c"><span class="pl-c">#</span> does not infiltrate</span></pre></div>
<p dir="auto">You can also use</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="if isdefined(Main, :Infiltrator)
  Main.infiltrate(@__MODULE__, Base.@locals, @__FILE__, @__LINE__)
end"><pre><span class="pl-k">if</span> <span class="pl-c1">isdefined</span>(Main, <span class="pl-c1">:Infiltrator</span>)
  Main<span class="pl-k">.</span><span class="pl-c1">infiltrate</span>(<span class="pl-c1">@__MODULE__</span>, Base<span class="pl-k">.</span><span class="pl-c1">@locals</span>, <span class="pl-c1">@__FILE__</span>, <span class="pl-c1">@__LINE__</span>)
<span class="pl-k">end</span></pre></div>
<p dir="auto">to infiltrate package code without any post-hoc evaluation into the module (because the
functional form does not require Infiltrator to be loaded at compiletime).</p>
<h2 dir="auto"><a id="user-content-auto-loading-infiltratorjl" class="anchor" aria-hidden="true" href="#auto-loading-infiltratorjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Auto-loading Infiltrator.jl</h2>
<p dir="auto">The following convenience macro can be defined in e.g. <code>startup.jl</code> or your package code.
It will automatically load Infiltrator.jl (if it is in your environment stack) and
subsequently call <code>@infiltrate</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="macro autoinfiltrate(cond=true)
    pkgid = Base.PkgId(Base.UUID(&quot;5903a43b-9cc3-4c30-8d17-598619ec4e9b&quot;), &quot;Infiltrator&quot;)
    if !haskey(Base.loaded_modules, pkgid)
        try
            Base.eval(Main, :(using Infiltrator))
        catch err
            @error &quot;Cannot load Infiltrator.jl. Make sure it is included in your environment stack.&quot;
        end
    end
    i = get(Base.loaded_modules, pkgid, nothing)
    lnn = LineNumberNode(__source__.line, __source__.file)

    if i === nothing
        return Expr(
            :macrocall,
            Symbol(&quot;@warn&quot;),
            lnn,
            &quot;Could not load Infiltrator.&quot;)
    end

    return Expr(
        :macrocall,
        Expr(:., i, QuoteNode(Symbol(&quot;@infiltrate&quot;))),
        lnn,
        esc(cond)
    )
end"><pre><span class="pl-k">macro</span> <span class="pl-en">autoinfiltrate</span>(cond<span class="pl-k">=</span><span class="pl-c1">true</span>)
    pkgid <span class="pl-k">=</span> Base<span class="pl-k">.</span><span class="pl-c1">PkgId</span>(Base<span class="pl-k">.</span><span class="pl-c1">UUID</span>(<span class="pl-s"><span class="pl-pds">"</span>5903a43b-9cc3-4c30-8d17-598619ec4e9b<span class="pl-pds">"</span></span>), <span class="pl-s"><span class="pl-pds">"</span>Infiltrator<span class="pl-pds">"</span></span>)
    <span class="pl-k">if</span> <span class="pl-k">!</span><span class="pl-c1">haskey</span>(Base<span class="pl-k">.</span>loaded_modules, pkgid)
        <span class="pl-k">try</span>
            Base<span class="pl-k">.</span><span class="pl-c1">eval</span>(Main, :(<span class="pl-k">using</span> Infiltrator))
        <span class="pl-k">catch</span> err
            <span class="pl-c1">@error</span> <span class="pl-s"><span class="pl-pds">"</span>Cannot load Infiltrator.jl. Make sure it is included in your environment stack.<span class="pl-pds">"</span></span>
        <span class="pl-k">end</span>
    <span class="pl-k">end</span>
    i <span class="pl-k">=</span> <span class="pl-c1">get</span>(Base<span class="pl-k">.</span>loaded_modules, pkgid, <span class="pl-c1">nothing</span>)
    lnn <span class="pl-k">=</span> <span class="pl-c1">LineNumberNode</span>(__source__<span class="pl-k">.</span>line, __source__<span class="pl-k">.</span>file)

    <span class="pl-k">if</span> i <span class="pl-k">===</span> <span class="pl-c1">nothing</span>
        <span class="pl-k">return</span> <span class="pl-c1">Expr</span>(
            <span class="pl-c1">:macrocall</span>,
            <span class="pl-c1">Symbol</span>(<span class="pl-s"><span class="pl-pds">"</span>@warn<span class="pl-pds">"</span></span>),
            lnn,
            <span class="pl-s"><span class="pl-pds">"</span>Could not load Infiltrator.<span class="pl-pds">"</span></span>)
    <span class="pl-k">end</span>

    <span class="pl-k">return</span> <span class="pl-c1">Expr</span>(
        <span class="pl-c1">:macrocall</span>,
        <span class="pl-c1">Expr</span>(:., i, <span class="pl-c1">QuoteNode</span>(<span class="pl-c1">Symbol</span>(<span class="pl-s"><span class="pl-pds">"</span>@infiltrate<span class="pl-pds">"</span></span>))),
        lnn,
        <span class="pl-c1">esc</span>(cond)
    )
<span class="pl-k">end</span></pre></div>
<p dir="auto">Note that this probably won't work as expected in module-level statements in package code due
to precompilation.</p>
<h2 dir="auto"><a id="user-content-exfiltrate" class="anchor" aria-hidden="true" href="#exfiltrate"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>@exfiltrate</code></h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@exfiltrate"><pre><span class="pl-c1">@exfiltrate</span></pre></div>
<p dir="auto">Assigns all local variables into global storage.</p>
<h2 dir="auto"><a id="user-content-the-safehouse" class="anchor" aria-hidden="true" href="#the-safehouse"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>The safehouse</h2>
<p dir="auto">Exfiltrating variables (with <code>@exfiltrate</code> or by assignment in an <code>@infiltrate</code> session) happens by
assigning the variable to a global storage space (backed by a module); any exfiltrated objects
can be directly accessed, via <code>Infiltrator.store</code> or its exported aliases <code>safehouse</code> or <code>exfiltrated</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; foo(x) = @exfiltrate
foo (generic function with 1 method)

julia&gt; foo(3)

julia&gt; safehouse.x # or exfiltrated.x
3"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-en">foo</span>(x) <span class="pl-k">=</span> <span class="pl-c1">@exfiltrate</span>
foo (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">foo</span>(<span class="pl-c1">3</span>)

julia<span class="pl-k">&gt;</span> safehouse<span class="pl-k">.</span>x <span class="pl-c"><span class="pl-c">#</span> or exfiltrated.x</span>
<span class="pl-c1">3</span></pre></div>
<p dir="auto">You can reset the safehouse with <code>Infiltrator.clear_store!()</code>.</p>
<p dir="auto">You can also assign a specific module with <code>Infiltrator.set_store!(mod)</code>. This allows you to e.g. set the
backing module to <code>Main</code> and therefore export the contents of the safehouse to the global namespace
(although doing so is not recommended).</p>
<h2 dir="auto"><a id="user-content-example-usage" class="anchor" aria-hidden="true" href="#example-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example usage</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; function f(x)
         out = []
         for i in x
           push!(out, 2i)
           @infiltrate
         end
         out
       end
f (generic function with 1 method)

julia&gt; f([1,2,3])
Infiltrating f(x::Vector{Int64})
  at REPL[10]:5

infil&gt; ?
  Code entered here is evaluated in the current scope. Changes to local variables are not possible; global variables can only be changed with eval/@eval.

  All assignments will end up in the safehouse.

  The following commands are special cased:

    •  ?: Print this help text.

    •  @trace: Print the current stack trace.

    •  @locals: Print local variables. @locals x y only prints x and y.

    •  @exfiltrate: Save all local variables into the store. @exfiltrate x y saves x and y; this variant can also exfiltrate variables defined in the infil&gt; REPL.

    •  @toggle: Toggle infiltrating at this @infiltrate spot (clear all with Infiltrator.clear_disabled!()).

    •  @continue: Continue to the next infiltration point or exit (shortcut: Ctrl-D).

    •  @doc symbol: Get help for symbol (same as in the normal Julia REPL).

    •  @exit: Stop infiltrating for the remainder of this session and exit (on Julia versions prior to 1.5 this needs to be manually cleared with Infiltrator.end_session!()).

infil&gt; @locals
- out::Vector{Any} = Any[2]
- i::Int64 = 1
- x::Vector{Int64} = [1, 2, 3]

infil&gt; 0//0
ERROR: ArgumentError: invalid rational: zero(Int64)//zero(Int64)
Stacktrace:
 [1] __throw_rational_argerror_zero(T::Type)
   @ Base ./rational.jl:32
 [2] Rational{Int64}(num::Int64, den::Int64)
   @ Base ./rational.jl:34
 [3] Rational
   @ ./rational.jl:39 [inlined]
 [4] //(n::Int64, d::Int64)
   @ Base ./rational.jl:62
 [5] top-level scope
   @ none:1

infil&gt; @toggle
Disabled infiltration at this infiltration point.

infil&gt; @toggle
Enabled infiltration at this infiltration point.

infil&gt; @continue

Infiltrating f(x::Vector{Int64})
  at REPL[10]:5

infil&gt; intermediate = copy(out)
2-element Vector{Any}:
 2
 4

infil&gt; @exfiltrate intermediate x
Exfiltrating 2 local variables into the safehouse.

infil&gt; @exit

3-element Vector{Any}:
 2
 4
 6

julia&gt; safehouse.intermediate
2-element Vector{Any}:
 2
 4

julia&gt; @withstore begin
         x = 23
         x .* intermediate
       end
2-element Vector{Int64}:
 46
 92"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">function</span> <span class="pl-en">f</span>(x)
         out <span class="pl-k">=</span> []
         <span class="pl-k">for</span> i <span class="pl-k">in</span> x
           <span class="pl-c1">push!</span>(out, <span class="pl-c1">2</span>i)
           <span class="pl-c1">@infiltrate</span>
         <span class="pl-k">end</span>
         out
       <span class="pl-k">end</span>
f (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">f</span>([<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>])
Infiltrating <span class="pl-c1">f</span>(x<span class="pl-k">::</span><span class="pl-c1">Vector{Int64}</span>)
  at REPL[<span class="pl-c1">10</span>]<span class="pl-k">:</span><span class="pl-c1">5</span>

infil<span class="pl-k">&gt;</span> <span class="pl-k">?</span>
  Code entered here is evaluated <span class="pl-k">in</span> the current scope. Changes to <span class="pl-k">local</span> variables are not possible; <span class="pl-k">global</span> variables can only be changed with eval<span class="pl-k">/</span><span class="pl-c1">@eval</span>.

  All assignments will <span class="pl-k">end</span> up <span class="pl-k">in</span> the safehouse.

  The following commands are special cased<span class="pl-k">:</span>

    •  ?: Print this help text.

    •  <span class="pl-c1">@trace</span><span class="pl-k">:</span> Print the current stack trace.

    •  <span class="pl-c1">@locals</span><span class="pl-k">:</span> Print <span class="pl-k">local</span> variables. <span class="pl-c1">@locals</span> x y only prints x and y.

    •  <span class="pl-c1">@exfiltrate</span><span class="pl-k">:</span> Save all <span class="pl-k">local</span> variables into the store. <span class="pl-c1">@exfiltrate</span> x y saves x and y; this variant can also exfiltrate variables defined <span class="pl-k">in</span> the infil<span class="pl-k">&gt;</span> REPL.

    •  <span class="pl-c1">@toggle</span><span class="pl-k">:</span> Toggle infiltrating at this <span class="pl-c1">@infiltrate</span> spot (clear all with Infiltrator<span class="pl-k">.</span><span class="pl-c1">clear_disabled!</span>())<span class="pl-k">.</span>

    •  <span class="pl-c1">@continue</span><span class="pl-k">:</span> Continue to the next infiltration point or exit (shortcut<span class="pl-k">:</span> Ctrl<span class="pl-k">-</span>D)<span class="pl-k">.</span>

    •  <span class="pl-c1">@doc</span> symbol<span class="pl-k">:</span> Get help <span class="pl-k">for</span> symbol (same <span class="pl-k">as</span> <span class="pl-k">in</span> the normal Julia REPL)<span class="pl-k">.</span>

    •  <span class="pl-c1">@exit</span><span class="pl-k">:</span> Stop infiltrating <span class="pl-k">for</span> the remainder of this session and exit (on Julia versions prior to <span class="pl-c1">1.5</span> this needs to be manually cleared with Infiltrator<span class="pl-k">.</span><span class="pl-c1">end_session!</span>())<span class="pl-k">.</span>

infil<span class="pl-k">&gt;</span> <span class="pl-c1">@locals</span>
<span class="pl-k">-</span> out<span class="pl-k">::</span><span class="pl-c1">Vector{Any}</span> <span class="pl-k">=</span> Any[<span class="pl-c1">2</span>]
<span class="pl-k">-</span> i<span class="pl-k">::</span><span class="pl-c1">Int64</span> <span class="pl-k">=</span> <span class="pl-c1">1</span>
<span class="pl-k">-</span> x<span class="pl-k">::</span><span class="pl-c1">Vector{Int64}</span> <span class="pl-k">=</span> [<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>]

infil<span class="pl-k">&gt;</span> <span class="pl-c1">0</span><span class="pl-k">//</span><span class="pl-c1">0</span>
ERROR<span class="pl-k">:</span> ArgumentError<span class="pl-k">:</span> invalid rational<span class="pl-k">:</span> <span class="pl-c1">zero</span>(Int64)<span class="pl-k">//</span><span class="pl-c1">zero</span>(Int64)
Stacktrace<span class="pl-k">:</span>
 [<span class="pl-c1">1</span>] <span class="pl-c1">__throw_rational_argerror_zero</span>(T<span class="pl-k">::</span><span class="pl-c1">Type</span>)
   @ Base <span class="pl-k">./</span>rational<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">32</span>
 [<span class="pl-c1">2</span>] <span class="pl-c1">Rational</span><span class="pl-c1">{Int64}</span>(num<span class="pl-k">::</span><span class="pl-c1">Int64</span>, den<span class="pl-k">::</span><span class="pl-c1">Int64</span>)
   @ Base <span class="pl-k">./</span>rational<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">34</span>
 [<span class="pl-c1">3</span>] Rational
   @ <span class="pl-k">./</span>rational<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">39</span> [inlined]
 [<span class="pl-c1">4</span>] <span class="pl-k">//</span>(n<span class="pl-k">::</span><span class="pl-c1">Int64</span>, d<span class="pl-k">::</span><span class="pl-c1">Int64</span>)
   @ Base <span class="pl-k">./</span>rational<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">62</span>
 [<span class="pl-c1">5</span>] top<span class="pl-k">-</span>level scope
   @ none<span class="pl-k">:</span><span class="pl-c1">1</span>

infil<span class="pl-k">&gt;</span> <span class="pl-c1">@toggle</span>
Disabled infiltration at this infiltration point.

infil<span class="pl-k">&gt;</span> <span class="pl-c1">@toggle</span>
Enabled infiltration at this infiltration point.

infil<span class="pl-k">&gt;</span> <span class="pl-c1">@continue</span>

Infiltrating <span class="pl-c1">f</span>(x<span class="pl-k">::</span><span class="pl-c1">Vector{Int64}</span>)
  at REPL[<span class="pl-c1">10</span>]<span class="pl-k">:</span><span class="pl-c1">5</span>

infil<span class="pl-k">&gt;</span> intermediate <span class="pl-k">=</span> <span class="pl-c1">copy</span>(out)
<span class="pl-c1">2</span><span class="pl-k">-</span>element Vector{Any}<span class="pl-k">:</span>
 <span class="pl-c1">2</span>
 <span class="pl-c1">4</span>

infil<span class="pl-k">&gt;</span> <span class="pl-c1">@exfiltrate</span> intermediate x
Exfiltrating <span class="pl-c1">2</span> <span class="pl-k">local</span> variables into the safehouse.

infil<span class="pl-k">&gt;</span> <span class="pl-c1">@exit</span>

<span class="pl-c1">3</span><span class="pl-k">-</span>element Vector{Any}<span class="pl-k">:</span>
 <span class="pl-c1">2</span>
 <span class="pl-c1">4</span>
 <span class="pl-c1">6</span>

julia<span class="pl-k">&gt;</span> safehouse<span class="pl-k">.</span>intermediate
<span class="pl-c1">2</span><span class="pl-k">-</span>element Vector{Any}<span class="pl-k">:</span>
 <span class="pl-c1">2</span>
 <span class="pl-c1">4</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@withstore</span> <span class="pl-k">begin</span>
         x <span class="pl-k">=</span> <span class="pl-c1">23</span>
         x <span class="pl-k">.*</span> intermediate
       <span class="pl-k">end</span>
<span class="pl-c1">2</span><span class="pl-k">-</span>element Vector{Int64}<span class="pl-k">:</span>
 <span class="pl-c1">46</span>
 <span class="pl-c1">92</span></pre></div>
<h2 dir="auto"><a id="user-content-related-projects" class="anchor" aria-hidden="true" href="#related-projects"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Related projects</h2>
<ul dir="auto">
<li><a href="https://github.com/NightMachinary/PyExfiltrator"><code>@exfiltrate</code> for Python</a></li>
</ul>
</article></div>