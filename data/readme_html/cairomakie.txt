<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-cairomakie" class="anchor" aria-hidden="true" href="#cairomakie"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>CairoMakie</h1>
<p>The Cairo Backend for Makie</p>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/JuliaPlots/CairoMakie.jl/workflows/CI/badge.svg"><img src="https://github.com/JuliaPlots/CairoMakie.jl/workflows/CI/badge.svg" alt="CI" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/JuliaPlots/CairoMakie.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/a184f6cd91f019a3b532d96ed9cbc10e8d93f155f52255d7372994724c89c3d7/68747470733a2f2f636f6465636f762e696f2f67682f4a756c6961506c6f74732f436169726f4d616b69652e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/JuliaPlots/CairoMakie.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<p>To add CairoMakie to your environment, simply run the following in the REPL:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="]add CairoMakie
"><pre>]add CairoMakie</pre></div>
<p>If you are using CairoMakie and GLMakie together, you can use each backend's <code>activate!</code> function to switch between them.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="GLMakie.activate!()
# use GLMakie interactively
CairoMakie.activate!()
# save the scene as a vector graphic
"><pre>GLMakie<span class="pl-k">.</span><span class="pl-c1">activate!</span>()
<span class="pl-c"><span class="pl-c">#</span> use GLMakie interactively</span>
CairoMakie<span class="pl-k">.</span><span class="pl-c1">activate!</span>()
<span class="pl-c"><span class="pl-c">#</span> save the scene as a vector graphic</span></pre></div>
<h2><a id="user-content-issues" class="anchor" aria-hidden="true" href="#issues"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Issues</h2>
<p>Please file all issues in <a href="https://github.com/JuliaPlots/Makie.jl/issues/new">Makie.jl</a>, and mention CairoMakie in the issue text.</p>
<h2><a id="user-content-limitations" class="anchor" aria-hidden="true" href="#limitations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Limitations</h2>
<p>CairoMakie is intended as a backend for static vector graphics at publication quality. Therefore, it does not support the interactive features of GLMakie and is slower when visualizing large amounts data. 3D plots are currently not available because of the inherent limitations of 2D vector graphics.</p>
<h2><a id="user-content-saving" class="anchor" aria-hidden="true" href="#saving"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Saving</h2>
<p>Makie overloads the FileIO interface, so you can save a Scene <code>scene</code> as <code>save("filename.extension", scene)</code>.  CairoMakie supports saving to PNG, PDF, SVG and EPS.</p>
<p>You can scale the size of the output figure, without changing its appearance by passing keyword arguments to <code>save</code>. PNGs can be scaled by <code>px_per_unit</code> (default 1) and vector graphics (SVG, PDF, EPS) can be scaled by <code>pt_per_unit</code>.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="save(&quot;plot.svg&quot;, scene, pt_per_unit = 0.5) # halve the dimensions of the resulting SVG
save(&quot;plot.png&quot;, scene, px_per_unit = 2) # double the resolution of the resulting PNG
"><pre><span class="pl-c1">save</span>(<span class="pl-s"><span class="pl-pds">"</span>plot.svg<span class="pl-pds">"</span></span>, scene, pt_per_unit <span class="pl-k">=</span> <span class="pl-c1">0.5</span>) <span class="pl-c"><span class="pl-c">#</span> halve the dimensions of the resulting SVG</span>
<span class="pl-c1">save</span>(<span class="pl-s"><span class="pl-pds">"</span>plot.png<span class="pl-pds">"</span></span>, scene, px_per_unit <span class="pl-k">=</span> <span class="pl-c1">2</span>) <span class="pl-c"><span class="pl-c">#</span> double the resolution of the resulting PNG</span></pre></div>
<h2><a id="user-content-using-cairomakie-with-gtkjl" class="anchor" aria-hidden="true" href="#using-cairomakie-with-gtkjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Using CairoMakie with Gtk.jl</h2>
<p>You can render onto a GtkCanvas using Gtk, and use that as a display for your scenes.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Gtk, CairoMakie, AbstractPlotting

canvas = @GtkCanvas()
window = GtkWindow(canvas, &quot;Makie&quot;, 500, 500)

function drawonto(canvas, scene)
    @guarded draw(canvas) do _
       resize!(scene, Gtk.width(canvas), Gtk.height(canvas))
       screen = CairoMakie.CairoScreen(scene, Gtk.cairo_surface(canvas), getgc(canvas), nothing)
       CairoMakie.cairo_draw(screen, scene)
    end
end

scene = heatmap(rand(50, 50)) # or something

drawonto(canvas, scene)
show(canvas); # trigger rendering
"><pre><span class="pl-k">using</span> Gtk, CairoMakie, AbstractPlotting

canvas <span class="pl-k">=</span> <span class="pl-c1">@GtkCanvas</span>()
window <span class="pl-k">=</span> <span class="pl-c1">GtkWindow</span>(canvas, <span class="pl-s"><span class="pl-pds">"</span>Makie<span class="pl-pds">"</span></span>, <span class="pl-c1">500</span>, <span class="pl-c1">500</span>)

<span class="pl-k">function</span> <span class="pl-en">drawonto</span>(canvas, scene)
    <span class="pl-c1">@guarded</span> <span class="pl-c1">draw</span>(canvas) <span class="pl-k">do</span> _
       <span class="pl-c1">resize!</span>(scene, Gtk<span class="pl-k">.</span><span class="pl-c1">width</span>(canvas), Gtk<span class="pl-k">.</span><span class="pl-c1">height</span>(canvas))
       screen <span class="pl-k">=</span> CairoMakie<span class="pl-k">.</span><span class="pl-c1">CairoScreen</span>(scene, Gtk<span class="pl-k">.</span><span class="pl-c1">cairo_surface</span>(canvas), <span class="pl-c1">getgc</span>(canvas), <span class="pl-c1">nothing</span>)
       CairoMakie<span class="pl-k">.</span><span class="pl-c1">cairo_draw</span>(screen, scene)
    <span class="pl-k">end</span>
<span class="pl-k">end</span>

scene <span class="pl-k">=</span> <span class="pl-c1">heatmap</span>(<span class="pl-c1">rand</span>(<span class="pl-c1">50</span>, <span class="pl-c1">50</span>)) <span class="pl-c"><span class="pl-c">#</span> or something</span>

<span class="pl-c1">drawonto</span>(canvas, scene)
<span class="pl-c1">show</span>(canvas); <span class="pl-c"><span class="pl-c">#</span> trigger rendering</span></pre></div>
</article></div>