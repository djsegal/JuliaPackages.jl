<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><div align="center">
  <a target="_blank" rel="noopener noreferrer" href="https://raw.githubusercontent.com/mtsch/Ripserer.jl/master/docs/src/assets/logo-title.svg"><img src="https://raw.githubusercontent.com/mtsch/Ripserer.jl/master/docs/src/assets/logo-title.svg" alt="Ripserer.jl" width="480" style="max-width:100%;"></a>
<p><em>Flexible and efficient persistent homology computation.</em></p>
<p><a href="https://coveralls.io/github/mtsch/Ripserer.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/37190a411e03b6211bccaf401f28d96b3cbe2b4b3ab673398e808a8407e816bf/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f6d747363682f52697073657265722e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/mtsch/Ripserer.jl/badge.svg?branch=master" style="max-width:100%;"></a>
<a href="https://github.com/mtsch/Ripserer.jl/actions?query=workflow%3ATest"><img src="https://github.com/mtsch/Ripserer.jl/workflows/Test/badge.svg" alt="Build Status" style="max-width:100%;"></a>
<a href="https://mtsch.github.io/Ripserer.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/56f8252ba8e9d3f0b810769543f77823d2fe031ce560d4c2d69fb1fcad800383/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6c61746573742d626c75652e737667" alt="Documentation" data-canonical-src="https://img.shields.io/badge/docs-latest-blue.svg" style="max-width:100%;"></a>
<a href="https://joss.theoj.org/papers/0c8b6abead759ba068ee178fedc998a9" rel="nofollow"><img src="https://camo.githubusercontent.com/26633e2a7ec82a6e97d7dcb618b2a8ff731a342044513c338a0ae1145979ae51/68747470733a2f2f6a6f73732e7468656f6a2e6f72672f7061706572732f30633862366162656164373539626130363865653137386665646339393861392f7374617475732e737667" alt="status" data-canonical-src="https://joss.theoj.org/papers/0c8b6abead759ba068ee178fedc998a9/status.svg" style="max-width:100%;"></a></p>
</div>
<h2><a id="user-content-introduction" class="anchor" aria-hidden="true" href="#introduction"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Introduction</h2>
<p>Ripserer is a pure Julia implementation of the <a href="https://github.com/Ripser/ripser">Ripser</a>
algorithm for computing persistent homology. Its aims are to be easy to use, generic, and
fast.</p>
<p>See the <a href="https://mtsch.github.io/Ripserer.jl/dev" rel="nofollow">documentation</a> for more information and
usage examples.</p>
<p>If you're looking for persistence diagram-related functionality such as Wasserstein or
bottleneck distances, persistence images, or persistence curves, please see
<a href="https://github.com/mtsch/PersistenceDiagrams.jl">PersistenceDiagrams.jl</a>.</p>
<h2><a id="user-content-quick-start" class="anchor" aria-hidden="true" href="#quick-start"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Quick start</h2>
<p>This package is registered. To install it, run the following.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using Pkg
julia&gt; Pkg.add(&quot;Ripserer&quot;)
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Pkg
julia<span class="pl-k">&gt;</span> Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>Ripserer<span class="pl-pds">"</span></span>)</pre></div>
<p>Now, generate some data.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; data = [(rand(), rand(), rand()) for _ in 1:200]
"><pre>julia<span class="pl-k">&gt;</span> data <span class="pl-k">=</span> [(<span class="pl-c1">rand</span>(), <span class="pl-c1">rand</span>(), <span class="pl-c1">rand</span>()) <span class="pl-k">for</span> _ <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">200</span>]</pre></div>
<p>The main exported function in this package is
<a href="https://mtsch.github.io/Ripserer.jl/dev/api/ripserer/#Ripserer.ripserer" rel="nofollow"><code>ripserer</code></a>. By
default, it computes Vietoris-Rips persistent homology on point cloud data and distance
matrices.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; ripserer(data)
# 2-element Vector{PersistenceDiagramsBase.PersistenceDiagram}:
#  200-element 0-dimensional PersistenceDiagram
#  84-element 1-dimensional PersistenceDiagram
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">ripserer</span>(data)
<span class="pl-c"><span class="pl-c">#</span> 2-element Vector{PersistenceDiagramsBase.PersistenceDiagram}:</span>
<span class="pl-c"><span class="pl-c">#</span>  200-element 0-dimensional PersistenceDiagram</span>
<span class="pl-c"><span class="pl-c">#</span>  84-element 1-dimensional PersistenceDiagram</span></pre></div>
<p><a href="https://mtsch.github.io/Ripserer.jl/dev/api/ripserer/#Filtrations" rel="nofollow">Several other filtration
types</a> are supported. We
tell <code>ripserer</code> to use them by passing them as the first argument.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; ripserer(EdgeCollapsedRips, data)
# 2-element Vector{PersistenceDiagramsBase.PersistenceDiagram}:
#  200-element 0-dimensional PersistenceDiagram
#  84-element 1-dimensional PersistenceDiagram
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">ripserer</span>(EdgeCollapsedRips, data)
<span class="pl-c"><span class="pl-c">#</span> 2-element Vector{PersistenceDiagramsBase.PersistenceDiagram}:</span>
<span class="pl-c"><span class="pl-c">#</span>  200-element 0-dimensional PersistenceDiagram</span>
<span class="pl-c"><span class="pl-c">#</span>  84-element 1-dimensional PersistenceDiagram</span></pre></div>
<p>Sometimes you may want to initialize a filtration in advance.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; rips = EdgeCollapsedRips(data, threshold=1)
# EdgeCollapsedRips{Int64, Float64}(nv=200)
"><pre>julia<span class="pl-k">&gt;</span> rips <span class="pl-k">=</span> <span class="pl-c1">EdgeCollapsedRips</span>(data, threshold<span class="pl-k">=</span><span class="pl-c1">1</span>)
<span class="pl-c"><span class="pl-c">#</span> EdgeCollapsedRips{Int64, Float64}(nv=200)</span></pre></div>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; ripserer(rips, dim_max=2)
# 3-element Vector{PersistenceDiagramsBase.PersistenceDiagram}:
#  200-element 0-dimensional PersistenceDiagram
#  84-element 1-dimensional PersistenceDiagram
#  16-element 2-dimensional PersistenceDiagram
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">ripserer</span>(rips, dim_max<span class="pl-k">=</span><span class="pl-c1">2</span>)
<span class="pl-c"><span class="pl-c">#</span> 3-element Vector{PersistenceDiagramsBase.PersistenceDiagram}:</span>
<span class="pl-c"><span class="pl-c">#</span>  200-element 0-dimensional PersistenceDiagram</span>
<span class="pl-c"><span class="pl-c">#</span>  84-element 1-dimensional PersistenceDiagram</span>
<span class="pl-c"><span class="pl-c">#</span>  16-element 2-dimensional PersistenceDiagram</span></pre></div>
<p>Ripserer supports plotting with
<a href="https://github.com/JuliaPlots/Plots.jl">Plots.jl</a>. Experimental
<a href="https://github.com/JuliaPlots/Makie.jl">Makie.jl</a> support is also available
<a href="https://github.com/mtsch/MakieRipserer.jl">here</a>.</p>
<p>Plotting persistence diagrams and barcodes is straightforward:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Plots
result = ripserer(data, dim_max=2)
plot(plot(result), barcode(result)
"><pre><span class="pl-k">using</span> Plots
result <span class="pl-k">=</span> <span class="pl-c1">ripserer</span>(data, dim_max<span class="pl-k">=</span><span class="pl-c1">2</span>)
<span class="pl-c1">plot</span>(<span class="pl-c1">plot</span>(result), <span class="pl-c1">barcode</span>(result)</pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="docs/src/assets/readme-plot-1.svg"><img src="docs/src/assets/readme-plot-1.svg" alt="" style="max-width:100%;"></a></p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="barcode(result)
"><pre><span class="pl-c1">barcode</span>(result)</pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="docs/src/assets/readme-plot-2.svg"><img src="docs/src/assets/readme-plot-2.svg" alt="" style="max-width:100%;"></a></p>
</article></div>