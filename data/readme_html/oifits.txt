<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-oifitsjl" class="anchor" aria-hidden="true" href="#oifitsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>OIFITS.jl</h1>
<table>
<thead>
<tr>
<th align="left"><strong>License</strong></th>
<th align="left"><strong>Build Status</strong></th>
<th align="left"><strong>Code Coverage</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td align="left"><a href="./LICENSE.md"><img src="https://camo.githubusercontent.com/4440d5deb3a53c4f8661ee765378e6071e7878e8/687474703a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d627269676874677265656e2e7376673f7374796c653d666c6174" alt="" data-canonical-src="http://img.shields.io/badge/license-MIT-brightgreen.svg?style=flat" style="max-width:100%;"></a></td>
<td align="left"><a href="https://travis-ci.org/emmt/OIFITS.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/2361de3908f710480f98c241ef37773b593e1635/68747470733a2f2f7472617669732d63692e6f72672f656d6d742f4f49464954532e6a6c2e7376673f6272616e63683d6d6173746572" alt="" data-canonical-src="https://travis-ci.org/emmt/OIFITS.jl.svg?branch=master" style="max-width:100%;"></a> <a href="https://ci.appveyor.com/project/emmt/OIFITS-jl/branch/master" rel="nofollow"><img src="https://camo.githubusercontent.com/714420bfed479725142170cd53468b9e9a6eac7c/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f6769746875622f656d6d742f4f49464954532e6a6c3f6272616e63683d6d6173746572" alt="" data-canonical-src="https://ci.appveyor.com/api/projects/status/github/emmt/OIFITS.jl?branch=master" style="max-width:100%;"></a></td>
<td align="left"><a href="https://coveralls.io/github/emmt/OIFITS.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/cb37ebf9fd71f096328bb774ec62884ea49e79d8/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f656d6d742f4f49464954532e6a6c2f62616467652e7376673f6272616e63683d6d617374657226736572766963653d676974687562" alt="" data-canonical-src="https://coveralls.io/repos/emmt/OIFITS.jl/badge.svg?branch=master&amp;service=github" style="max-width:100%;"></a> <a href="http://codecov.io/github/emmt/OIFITS.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/32eaa0e15775925b5f0f8d279c667a92a700e447/687474703a2f2f636f6465636f762e696f2f6769746875622f656d6d742f4f49464954532e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="" data-canonical-src="http://codecov.io/github/emmt/OIFITS.jl/coverage.svg?branch=master" style="max-width:100%;"></a></td>
</tr>
</tbody>
</table>
<p>The <code>OIFITS.jl</code> package provides support for OI-FITS data in Julia language.</p>
<h2><a id="user-content-oi-fits-summary" class="anchor" aria-hidden="true" href="#oi-fits-summary"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>OI-FITS Summary</h2>
<p>OI-FITS is a standard to store optical interferometry data as a collection of
data-blocks.  In the second revision of the standard (see <a href="#references">Ref. 1</a>
and <a href="#references">Ref. 2</a>), the following data-blocks are available:</p>
<ul>
<li><code>OITarget</code> provides a list of observed targets (<code>OI_TARGET</code> extension in
OI-FITS files);</li>
<li><code>OIArray</code> describes a given array of stations (<code>OI_ARRAY</code> extension in
OI-FITS files);</li>
<li><code>OIWavelength</code> describes a given instrument notably the effective
wavelengths and bandwidths of its spectral channels (<code>OI_WAVELENGTH</code>
extension in OI-FITS files);</li>
<li><code>OIVis</code> contains complex visibility data (<code>OI_VIS</code> extension in OI-FITS
files);</li>
<li><code>OIVis2</code> contains squared visibility (powerspectrum) data (<code>OI_VIS2</code>
extension in OI-FITS files);</li>
<li><code>OIT3</code> contains triple product (bispectrum) data (<code>OI_T3</code> extension in
OI-FITS files);</li>
<li><code>OIFlux</code> contains spectral flux data (<code>OI_FLUX</code> extension in OI-FITS files);</li>
<li><code>OIPolarization</code> contains instrumental polarization (<code>OI_INSPOL</code>
extension in OI-FITS files);</li>
<li><code>OICorrelation</code> contains correlation data (<code>OI_CORR</code> extension in OI-FITS
files).</li>
</ul>
<p>These data-blocks, are stored as binary tables in a FITS data file.  The
support for the actual FITS files is provided by the
<a href="https://github.com/JuliaAstro/FITSIO.jl"><code>FITSIO.jl</code></a> package.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>OIFITS is a <a href="http://pkg.julialang.org/" rel="nofollow">registered Julia package</a>, the
installation is as simple as:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> Pkg
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>OIFITS<span class="pl-pds">"</span></span>)
Pkg<span class="pl-k">.</span><span class="pl-c1">update</span>()</pre></div>
<p>The last command <code>Pkg.update()</code> may be unnecessary.</p>
<h2><a id="user-content-typical-usage" class="anchor" aria-hidden="true" href="#typical-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Typical usage</h2>
<p>Loading an OI-FITS data file:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> OIFITS
master <span class="pl-k">=</span> OIFITS<span class="pl-k">.</span><span class="pl-c1">load</span>(<span class="pl-s"><span class="pl-pds">"</span>testdata.oifits<span class="pl-pds">"</span></span>)</pre></div>
<p>To iterate through all OI-FITS data-blocks:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">for</span> db <span class="pl-k">in</span> master
    extname <span class="pl-k">=</span> db<span class="pl-k">.</span>extname
    revn <span class="pl-k">=</span> db<span class="pl-k">.</span>revn
    <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>Data-block is <span class="pl-v">$extname</span>, revision <span class="pl-v">$revn</span><span class="pl-pds">"</span></span>)
<span class="pl-k">end</span></pre></div>
<p>To iterate through a sub-set of the data-blocks (here the complex visibility
data, the powerspectrum data and the bispectrum data):</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">for</span> db <span class="pl-k">in</span> OIFITS<span class="pl-k">.</span><span class="pl-c1">select</span>(master, <span class="pl-s"><span class="pl-pds">"</span>OI_VIS<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>OI_VIS2<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>OI_T3<span class="pl-pds">"</span></span>)
    extname <span class="pl-k">=</span> db<span class="pl-k">.</span>extname
    n <span class="pl-k">=</span> <span class="pl-c1">length</span>(db<span class="pl-k">.</span>time)
    <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>Data-block is <span class="pl-v">$extname</span>, number of exposures is <span class="pl-v">$n</span><span class="pl-pds">"</span></span>)
<span class="pl-k">end</span></pre></div>
<p>Any OI-FITS field (keyword/column) of a given data-block can be accessed by the
<code>db.key</code> syntax where <code>key</code> is the name of the field in lower case letters and
with non-alphanumeric letters replaced by an underscore character <code>_</code>.  For
instance <code>db.int_time</code> yields the value of <code>INT_TIME</code> the integration times of
the measurements.  The revision number corresponding to the keyword <code>OI_REVN</code>
is however accessed as <code>db.revn</code>, this is the only exception.  Other fields are
also accessible via this syntax:</p>
<ul>
<li>
<p><code>db.extname</code> yields the OI-FITS name of the extension corresponding to the
data-block <code>db</code> (for all data-block types);</p>
</li>
<li>
<p><code>db.array</code> yields the <code>OI_ARRAY</code> data-block associated with data-block <code>db</code>
(for <code>OI_VIS</code>, <code>OI_VIS2</code>, <code>OI_T3</code>, <code>OI_FLUX</code> and <code>OI_POLARIZATION</code>
data-block);</p>
</li>
<li>
<p><code>db.instr</code> yields the <code>OI_WAVELENGTH</code> data-block associated with data-block
<code>db</code> (for <code>OI_VIS</code>, <code>OI_VIS2</code>, <code>OI_T3</code> and <code>OI_FLUX</code> data-block);</p>
</li>
<li>
<p><code>db.correl</code> yields the <code>OI_CORREL</code> data-block associated with data-block <code>db</code>
(for <code>OI_VIS</code>, <code>OI_VIS2</code>, <code>OI_T3</code> and <code>OI_FLUX</code> data-block).</p>
</li>
</ul>
<p>Of course, getting a given field must make sense.  For instance, <code>db.eff_wave</code>
is only possible for <code>OI_WAVELENGTH</code> data-blocks but not for an <code>OI_TARGET</code>
data-block.  The dot notation can be however be chained and:</p>
<div class="highlight highlight-source-julia"><pre>db<span class="pl-k">.</span>instr<span class="pl-k">.</span>eff_wave</pre></div>
<p>can be used to access the effective wavelengths of the measurements in <code>db</code> via
the instrument associated to <code>db</code>.</p>
<p>The dot notation can also be used on the <em>master</em> object storing all the
data-blocks:</p>
<ul>
<li>
<p><code>master.target</code> is the <code>OI_TARGET</code> data-block of the OI-FITS structure;</p>
</li>
<li>
<p><code>master.instr</code> is a dictionary of <code>OI_WAVELENGTH</code> data-blocks indexed by the
instrument names: <code>master.instr[insname]</code> yields the <code>OI_WAVELENGTH</code>
data-block named <code>insname</code> or <code>nothing</code> if no such instrument exists;</p>
</li>
<li>
<p><code>master.array</code> is a dictionary of <code>OI_ARRAY</code> data-blocks indexed by the
telescope array names: <code>master.array[arrname]</code> yields the <code>OI_ARRAY</code>
data-block named <code>arrname</code> or <code>nothing</code> if no such array exists;</p>
</li>
<li>
<p><code>master.correl</code> is a dictionary of <code>OI_CORREL</code> data-blocks indexed by the
correlation data names: <code>master.correl[corrname]</code> yields the <code>OI_CORREL</code>
data-block named <code>corrname</code> or <code>nothing</code> if no such correlation data exists.</p>
</li>
</ul>
<p>As show in above examples, the <em>master</em> object storing OI-FITS data-blocks can
be used as an iterator over all the stored data-blocks.  It can also be used as
a vector of data-blocks indexed by the data-block number.  For instance:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">eachindex</span>(master)
    <span class="pl-k">let</span> db <span class="pl-k">=</span> master[i]
        extname <span class="pl-k">=</span> db<span class="pl-k">.</span>extname
        revn <span class="pl-k">=</span> db<span class="pl-k">.</span>revn
        <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>Data-block is <span class="pl-v">$extname</span>, revisions <span class="pl-v">$revn</span><span class="pl-pds">"</span></span>)
    <span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>
<p>However, beware that the <em>master</em> object storing OI-FITS data-blocks is not a
simple vector, it does many things <em>under the hood</em> to maintain the consistency
of the structure (for instance links between different data-blocks).  In order
to append data-blocks to the ones already stored, call:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">push!</span>(master, db)</pre></div>
<p>Argument <code>db</code> above can be a variable number of data-blocks, a tuple or an
array of data-blocks.  If there many data-blocks, it is more efficient to push
them all at the same time.</p>
<p>Iterating over a data-block yields <code>(key,val)</code> pairs with <code>key</code> each symbolic
name of defined fields and <code>val</code> is their respective value.</p>
<h2><a id="user-content-deprecated-accessor-functions" class="anchor" aria-hidden="true" href="#deprecated-accessor-functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Deprecated accessor functions</h2>
<p>Although this is considered as deprecated, OI-FITS fields of a given data-block
can also be retrieved via an accessor whose name has suffix <code>OIFITS.get_</code>
followed by the name of the field in lower case letters and with all
non-alphanumeric letters replaced by an underscore character <code>_</code>).  A notable
exception is the revision number corresponding to the keyword "OI_REVN" which
is retrieved with the method <code>OIFITS.get_revn()</code>.  For instance:</p>
<div class="highlight highlight-source-julia"><pre>OIFITS<span class="pl-k">.</span><span class="pl-c1">get_revn</span>(db)      <span class="pl-c"><span class="pl-c">#</span> get the revison number of the format (OI_REVN)</span>
OIFITS<span class="pl-k">.</span><span class="pl-c1">get_eff_wave</span>(db)  <span class="pl-c"><span class="pl-c">#</span> get effective wavelengths (EFF_WAVE)</span>
OIFITS<span class="pl-k">.</span><span class="pl-c1">get_eff_band</span>(db)  <span class="pl-c"><span class="pl-c">#</span> get effective bandwidths (EFF_BAND)</span>
OIFITS<span class="pl-k">.</span><span class="pl-c1">get_ucoord</span>(db)    <span class="pl-c"><span class="pl-c">#</span> get the U coordinates of the data (UCOORD)</span></pre></div>
<h2><a id="user-content-reading-data" class="anchor" aria-hidden="true" href="#reading-data"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Reading data</h2>
<p>To load the contents of an OI-FITS file in memory, use:</p>
<div class="highlight highlight-source-julia"><pre>master <span class="pl-k">=</span> OIFITS<span class="pl-k">.</span><span class="pl-c1">load</span>(filename)</pre></div>
<p>where <code>filename</code> is the name of the file and the returned value, <code>master</code>,
contains all the OI-FITS data-blocks of the file.  You may have the names
of the data blocks printed as they get read with keyword <code>quiet=false</code>:</p>
<div class="highlight highlight-source-julia"><pre>master <span class="pl-k">=</span> OIFITS<span class="pl-k">.</span><span class="pl-c1">load</span>(filename, quiet<span class="pl-k">=</span><span class="pl-c1">false</span>)</pre></div>
<p>If you already have a <code>FITS</code> handle to the data, you can use it as the
argument to <code>OIFITS.load</code> in place of the file name.</p>
<h2><a id="user-content-constructors" class="anchor" aria-hidden="true" href="#constructors"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Constructors</h2>
<p>It is possible to build OI-FITS data-blocks individually.  The general
syntax is:</p>
<div class="highlight highlight-source-julia"><pre>OIFITS<span class="pl-k">.</span><span class="pl-c1">new_XXX</span>(KEY1<span class="pl-k">=</span>VAL1, KEY2<span class="pl-k">=</span>VAL2, <span class="pl-k">...</span>)</pre></div>
<p>where <code>XXX</code> is the type of the data-block and <code>KEYn=VALn</code> constructions
give the fields of the data-block and their values.  The names of the
fields follow the same convention as for the field accessors.</p>
<p>Available data-block constructors are:</p>
<ul>
<li><code>OIFITS.new_target</code> =&gt; <code>OI_TARGET</code></li>
<li><code>OIFITS.new_array</code> =&gt; <code>OI_ARRAY</code></li>
<li><code>OIFITS.new_wavelength</code> =&gt; <code>OI_WAVELENGTH</code></li>
<li><code>OIFITS.new_vis</code>  =&gt; <code>OI_VIS</code></li>
<li><code>OIFITS.new_vis2</code> =&gt; <code>OI_VIS2</code></li>
<li><code>OIFITS.new_t3</code>   =&gt; <code>OI_T3</code></li>
</ul>
<p>When defining a new data-block, all mandatory fields must be provided.
For instance, to create an <code>OI_WAVELENGTH</code> data-block:</p>
<div class="highlight highlight-source-julia"><pre>µm <span class="pl-k">=</span> <span class="pl-c1">1e-6</span>  <span class="pl-c"><span class="pl-c">#</span> all values are in SI units in OI-FITS</span>
db <span class="pl-k">=</span> OIFITS<span class="pl-k">.</span><span class="pl-c1">new_wavelength</span>(insname<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Amber<span class="pl-pds">"</span></span>,
                           eff_wave<span class="pl-k">=</span>[<span class="pl-c1">1.4</span>µm,<span class="pl-c1">1.6</span>µm,<span class="pl-c1">1.8</span>µm],
                           eff_band<span class="pl-k">=</span>[<span class="pl-c1">0.2</span>µm,<span class="pl-c1">0.2</span>µm,<span class="pl-c1">0.2</span>µm])</pre></div>
<p>Note that the revision number (<code>revn=...</code>) can be omitted; by default, the
highest defined revision will be used.</p>
<p>A consistent set of OI-FITS data-blocks is made of: exactly one <code>OI_TARGET</code>
data-block, one or more <code>OI_WAVELENGTH</code> data-blocks, one or more <code>OI_ARRAY</code>
data-blocks and any number of data-blocks with interferometric data
(<code>OI_VIS</code>, <code>OI_VIS2</code> or <code>OI_T3</code>).  These data-blocks must be stored in a
container created by:</p>
<div class="highlight highlight-source-julia"><pre>master <span class="pl-k">=</span> OIFITS<span class="pl-k">.</span><span class="pl-c1">new_master</span>()</pre></div>
<p>Then, call:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">push!</span>(master, db)</pre></div>
<p>to attach all data-block <code>db</code> to the OI-FITS container (in any order).</p>
<p>To read OI-FITS data from a Header Data Units (HDU) of a FITS file, call:</p>
<div class="highlight highlight-source-julia"><pre>dat <span class="pl-k">=</span> OIFITS<span class="pl-k">.</span><span class="pl-c1">read_datablock</span>(hdu)</pre></div>
<p>where <code>hdu</code> is a FITS HDU.  The result may be <code>nothing</code> if the current HDU does
not contain an OI-FITS data-block; otherwise the result is a 3-tuple <code>(extname, revn, dict)</code> with the name of the FITS extension, the OI-FITS revision number
and a dictionary of the OI-FITS keywords and columns. These can be directly
provided to <code>OIFITS.build_datablock</code> to build an instance of <code>OIDataBlock</code>:</p>
<div class="highlight highlight-source-julia"><pre>db <span class="pl-k">=</span> OIFITS<span class="pl-k">.</span><span class="pl-c1">build_datablock</span>(extname, revn, dict)</pre></div>
<h2><a id="user-content-miscellaneous-functions" class="anchor" aria-hidden="true" href="#miscellaneous-functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Miscellaneous functions</h2>
<p>OI-FITS implements some useful functions which can be used to deal with
FITS file (not just OI-FITS ones).  These functions could be part of <code>FITSIO</code>
package.</p>
<h3><a id="user-content-retrieving-information-from-the-header-of-a-fits-hdu" class="anchor" aria-hidden="true" href="#retrieving-information-from-the-header-of-a-fits-hdu"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Retrieving information from the header of a FITS HDU</h3>
<p>The header of a FITS HDU can be read with the function:</p>
<div class="highlight highlight-source-julia"><pre>fts <span class="pl-k">=</span> <span class="pl-c1">FITS</span>(filename)
hdr <span class="pl-k">=</span> FITSIO<span class="pl-k">.</span><span class="pl-c1">read_header</span>(fts[<span class="pl-c1">1</span>])</pre></div>
<p>which returns an indexable and iterable object, here <code>hdr</code>.  The keys of
<code>hdr</code> are the FITS keywords of the header.  For instance:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">keys</span>(hdr)          <span class="pl-c"><span class="pl-c">#</span> yield an iterator on the keys of hdr</span>
<span class="pl-c1">collect</span>(<span class="pl-c1">keys</span>(hdr)) <span class="pl-c"><span class="pl-c">#</span> yield all the keys of hdr</span>
<span class="pl-c1">haskey</span>(hdr, key)   <span class="pl-c"><span class="pl-c">#</span> check whether key is present</span>
hdr[key]           <span class="pl-c"><span class="pl-c">#</span> retrieve the contents associated with the key</span></pre></div>
<p>For commentary FITS keywords (<code>"HISTORY"</code> or <code>"COMMENT"</code>), there is no
value, just a comment but there may be any number of these <em>commentary</em>
keywords.  Other keywords must be unique and thus have a scalar value.  Use
<code>get_comment</code> to retrieve the comment of a FITS keyword:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">get_comment</span>(hdr, key)<span class="pl-c1">keys</span>(hdr)          <span class="pl-c"><span class="pl-c">#</span> yield an iterator on the keys of hdr</span>
<span class="pl-c1">collect</span>(<span class="pl-c1">keys</span>(hdr)) <span class="pl-c"><span class="pl-c">#</span> yield all the keys of hdr</span>
<span class="pl-c1">haskey</span>(hdr, key)   <span class="pl-c"><span class="pl-c">#</span> check whether key is present</span>
hdr[key]           <span class="pl-c"><span class="pl-c">#</span> retrieve the contents associated with the key</span></pre></div>
<p><em>OIFITS</em> provides method <code>OIFITS.get_value()</code> and <code>OIFITS.get_comment()</code>
method to retrieve the value and comment (respectively) of a FITS keyword
with type checking and, optionaly, let you provide a default value if the
keyword is absent:</p>
<div class="highlight highlight-source-julia"><pre>val <span class="pl-k">=</span> OIFITS<span class="pl-k">.</span><span class="pl-c1">get_value</span>(hdr, key)
val <span class="pl-k">=</span> OIFITS<span class="pl-k">.</span><span class="pl-c1">get_value</span>(hdr, key, def)
com <span class="pl-k">=</span> OIFITS<span class="pl-k">.</span><span class="pl-c1">get_comment</span>(hdr, key)
com <span class="pl-k">=</span> OIFITS<span class="pl-k">.</span><span class="pl-c1">get_comment</span>(hdr, key, def)</pre></div>
<p>To retrieve a value and make sure it has a specific type, the following
methods are available:</p>
<div class="highlight highlight-source-julia"><pre>OIFITS<span class="pl-k">.</span><span class="pl-c1">get_logical</span>(hdr, <span class="pl-s"><span class="pl-pds">"</span>SIMPLE<span class="pl-pds">"</span></span>)
OIFITS<span class="pl-k">.</span><span class="pl-c1">get_integer</span>(hdr, <span class="pl-s"><span class="pl-pds">"</span>BITPIX<span class="pl-pds">"</span></span>)
OIFITS<span class="pl-k">.</span><span class="pl-c1">get_float</span>(hdr, <span class="pl-s"><span class="pl-pds">"</span>BSCALE<span class="pl-pds">"</span></span>)
OIFITS<span class="pl-k">.</span><span class="pl-c1">get_string</span>(hdr, <span class="pl-s"><span class="pl-pds">"</span>XTENSION<span class="pl-pds">"</span></span>)</pre></div>
<p>which throw an error if the keyword is not present and perform type
checking and conversion if allowed.  It is also possible to supply a
default value to return if the keyword is not present:</p>
<div class="highlight highlight-source-julia"><pre>bscale <span class="pl-k">=</span> OIFITS<span class="pl-k">.</span><span class="pl-c1">get_float</span>(hdr, <span class="pl-s"><span class="pl-pds">"</span>BSCALE<span class="pl-pds">"</span></span>, <span class="pl-c1">1.0</span>)
bzero <span class="pl-k">=</span> OIFITS<span class="pl-k">.</span><span class="pl-c1">get_float</span>(hdr, <span class="pl-s"><span class="pl-pds">"</span>BZERO<span class="pl-pds">"</span></span>, <span class="pl-c1">0.0</span>)
xtension <span class="pl-k">=</span> OIFITS<span class="pl-k">.</span><span class="pl-c1">get_string</span>(hdr, <span class="pl-s"><span class="pl-pds">"</span>XTENSION<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>IMAGE<span class="pl-pds">"</span></span>)</pre></div>
<p>The function:</p>
<div class="highlight highlight-source-julia"><pre>OIFITS<span class="pl-k">.</span><span class="pl-c1">get_hdu_type</span>(hdr)</pre></div>
<p>returns the HDU type as a Symbol, <code>:image_hdu</code> for an image, <code>:ascii_table</code> for
an ASCII table, <code>:binary_table</code> for a binary table, and <code>:unknown</code> otherwise.
The returned symbol should match the result of the low level method
<code>FITSIO.Libcfitsio.fits_get_hdu_type</code>.</p>
<p>For a FITS table, the function:</p>
<div class="highlight highlight-source-julia"><pre>OIFITS<span class="pl-k">.</span><span class="pl-c1">get_datablock_type</span>(hdr)</pre></div>
<p>returns the OI-FITS data-block type as a Symbol like <code>:OI_TARGET</code>,
<code>:OI_WAVELENGTH</code>, <em>etc.</em></p>
<h3><a id="user-content-reading-fits-tables" class="anchor" aria-hidden="true" href="#reading-fits-tables"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Reading FITS tables</h3>
<p>In addition to the method <code>read(tbl::TableHDU, colname::String)</code>
provided by FITSIO for reading a specific column of a FITS table, the
low-level function:</p>
<div class="highlight highlight-source-julia"><pre>OIFITS<span class="pl-k">.</span><span class="pl-c1">read_column</span>(ff<span class="pl-k">::</span><span class="pl-c1">FITSFile</span>, colnum<span class="pl-k">::</span><span class="pl-c1">Integer</span>)</pre></div>
<p>returns a Julia array with the contents of the <code>colnum</code>-th column of the
current HDU in FITS file handle <code>ff</code>.  The current HDU must be a FITS table
(an ASCII or a binary one).  The last dimension of the result corresponds
to the rows of the table.  It is also possible to read all the table:</p>
<div class="highlight highlight-source-julia"><pre>OIFITS<span class="pl-k">.</span><span class="pl-c1">read_table</span>(hdu<span class="pl-k">::</span><span class="pl-c1">Union(TableHDU,ASCIITableHDU)</span>)</pre></div>
<p>The result is a dictionary whose keys are the names of the columns (in
uppercase letters and with trailing spaces removed).  If a column has given
units, the units are stored in the dictionary with suffix <code>".units"</code> appended
to the column name.  For instance, the units for column <code>"TIME"</code> are accessible
with key <code>"TIME.units"</code>.  By default, <code>OIFITS.read_table</code> returns all columns
of the table but a selector <code>sel</code> may be specified to select a subset of
columns, it must be a callable object such that <code>sel(key)</code> yields <code>true</code> if
column named <code>key</code> is to be returned.  For instance:</p>
<div class="highlight highlight-source-julia"><pre>OIFITS<span class="pl-k">.</span><span class="pl-c1">read_table</span>(hdu, key <span class="pl-k">-&gt;</span> key <span class="pl-k">in</span> (<span class="pl-s"><span class="pl-pds">"</span>FILTER<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>BANDWIDTH<span class="pl-pds">"</span></span>))</pre></div>
<p>to only read columns <code>"FILTER"</code> and <code>"BANDWIDTH"</code> in table <code>hdu</code>.</p>
<h3><a id="user-content-fits-and-julia-types-conversion" class="anchor" aria-hidden="true" href="#fits-and-julia-types-conversion"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>FITS and Julia types conversion</h3>
<p>The functions <code>cfitsio_datatype()</code> and <code>fits_bitpix()</code> deal with conversion
between CFITSIO type code or BITPIX value and actual Julia data types.
They can be used as follows (assuming <code>T</code> is a Julia data type, while
<code>code</code> and <code>bitpix</code> are integers):</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">cfitsio_datatype</span>(T) <span class="pl-k">------</span><span class="pl-k">--&gt;</span> code (e<span class="pl-k">.</span>g., TBYTE, TFLOAT, etc.)
<span class="pl-c1">cfitsio_datatype</span>(code) <span class="pl-k">----</span><span class="pl-k">-&gt;</span> T

<span class="pl-c1">fits_bitpix</span>(T) <span class="pl-k">------------</span><span class="pl-k">-&gt;</span> bitpix (e<span class="pl-k">.</span>g., BYTE_IMG, FLOAT_IMG, etc.)
<span class="pl-c1">fits_bitpix</span>(bitpix) <span class="pl-k">------</span><span class="pl-k">--&gt;</span> T</pre></div>
<p>The functions <code>fits_get_coltype()</code> and <code>fits_get_eqcoltype()</code> yield the
data type, repeat count and width in bytes of a given column, their
prototypes are:</p>
<div class="highlight highlight-source-julia"><pre>(code, repcnt, width) <span class="pl-k">=</span> <span class="pl-c1">fits_get_coltype</span>(ff<span class="pl-k">::</span><span class="pl-c1">FITSFile</span>, colnum<span class="pl-k">::</span><span class="pl-c1">Integer</span>)
(code, repcnt, width) <span class="pl-k">=</span> <span class="pl-c1">fits_get_eqcoltype</span>(ff<span class="pl-k">::</span><span class="pl-c1">FITSFile</span>, colnum<span class="pl-k">::</span><span class="pl-c1">Integer</span>)</pre></div>
<p>with <code>colnum</code> the column number, <code>code</code> the CFITSIO column type (call
<code>cfitsio_datatype(code)</code> to convert it to a Julia type) of the elements in
this column, <code>repcnt</code> and <code>width</code> the repeat count and width of a cell in
this column.  The difference between <code>fits_get_coltype()</code> and
<code>fits_get_eqcoltype()</code> is that the former yields the column type as it is
stored in the file, while the latter yields the column type after automatic
scaling by the values <code>"TSCALn"</code> and <code>"TZEROn"</code> keywods if present (with
<code>n</code> the column number).  Note that reading the column data with
<code>fits_read_col()</code> or <code>fitsio_read_column()</code> automatically apply this kind
of scaling.</p>
<p>To retrieve the dimensions of the cells in a given column, call the
function <code>fits_read_tdim()</code>, its prototype is:</p>
<div class="highlight highlight-source-julia"><pre>dims <span class="pl-k">=</span> <span class="pl-c1">fits_read_tdim</span>(ff<span class="pl-k">::</span><span class="pl-c1">FITSFile</span>, colnum<span class="pl-k">::</span><span class="pl-c1">Integer</span>)</pre></div>
<p>where <code>dims</code> is a vector of integer dimensions.</p>
<h2><a id="user-content-credits" class="anchor" aria-hidden="true" href="#credits"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Credits</h2>
<p>The developments of this package has received funding from the European
Community's Seventh Framework Programme (FP7/2013-2016) under Grant
Agreement 312430 (OPTICON).</p>
<h2><a id="user-content-references" class="anchor" aria-hidden="true" href="#references"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>References</h2>
<ol>
<li>
<p>Pauls, T. A., Young, J. S., Cotton, W. D., &amp; Monnier, J. D. "A data exchange
standard for optical (visible/IR) interferometry." Publications of the
Astronomical Society of the Pacific, vol. 117, no 837, p. 1255 (2005).
<a href="http://arxiv.org/pdf/astro-ph/0508185" rel="nofollow">[pdf]</a></p>
</li>
<li>
<p>Duvert, G., Young, J., &amp; Hummel, C. "OIFITS 2: the 2nd version of the Data
Exchange Standard for Optical (Visible/IR) Interferometry." arXiv preprint
<a href="http://arxiv.org/abs/1510.04556v2" rel="nofollow">[arXiv:1510.04556v2.04556]</a>.</p>
</li>
</ol>
</article></div>