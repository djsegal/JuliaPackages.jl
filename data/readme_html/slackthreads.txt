<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-slackthreads" class="anchor" aria-hidden="true" href="#slackthreads"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>SlackThreads</h1>
<p dir="auto"><a href="https://github.com/beacon-biosignals/SlackThreads.jl/actions/workflows/CI.yml?query=branch%3Amain"><img src="https://github.com/beacon-biosignals/SlackThreads.jl/actions/workflows/CI.yml/badge.svg?branch=main" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/beacon-biosignals/SlackThreads.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/a7ad7fe37381f9dc0819c0c0f6f5d563ae42c7f22b996f6fc9ea55fee543541e/68747470733a2f2f636f6465636f762e696f2f67682f626561636f6e2d62696f7369676e616c732f536c61636b546872656164732e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e7376673f746f6b656e3d63677139555478554751" alt="codecov" data-canonical-src="https://codecov.io/gh/beacon-biosignals/SlackThreads.jl/branch/main/graph/badge.svg?token=cgq9UTxUGQ" style="max-width: 100%;"></a></p>
<p dir="auto">Provides a simple way to update a running Slack thread with text and attachments
(files, images, etc).</p>
<h2 dir="auto"><a id="user-content-requirements" class="anchor" aria-hidden="true" href="#requirements"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Requirements</h2>
<h3 dir="auto"><a id="user-content-1-oauth-token" class="anchor" aria-hidden="true" href="#1-oauth-token"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>1. OAuth token</h3>
<p dir="auto">This package needs a Slack OAuth token associated to a Slack app with the
permissions <code>chat:write</code> and <code>files:write</code> (only needed for uploading
files/images). You can make an app at <a href="https://api.slack.com/apps" rel="nofollow">https://api.slack.com/apps</a>. Then install
it to a workplace and add the permissions, and get an "Bot User OAuth Token".
Set this as the environmental variable <code>SLACK_TOKEN</code>. You can do this in a
running Julia session via</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="ENV[&quot;SLACK_TOKEN&quot;] = let buffer = Base.getpass(&quot;Slack token&quot;)
    str = read(buffer, String)
    Base.shred!(buffer)
    str
end;"><pre><span class="pl-c1">ENV</span>[<span class="pl-s"><span class="pl-pds">"</span>SLACK_TOKEN<span class="pl-pds">"</span></span>] <span class="pl-k">=</span> <span class="pl-k">let</span> buffer <span class="pl-k">=</span> Base<span class="pl-k">.</span><span class="pl-c1">getpass</span>(<span class="pl-s"><span class="pl-pds">"</span>Slack token<span class="pl-pds">"</span></span>)
    str <span class="pl-k">=</span> <span class="pl-c1">read</span>(buffer, String)
    Base<span class="pl-k">.</span><span class="pl-c1">shred!</span>(buffer)
    str
<span class="pl-k">end</span>;</pre></div>
<p dir="auto">and pasting it in. You will need to do this every session, or set the variable
elsewhere (e.g. in a shell startup script, CI secret, Kubernetes secret, etc.)</p>
<h3 dir="auto"><a id="user-content-2-channel-id" class="anchor" aria-hidden="true" href="#2-channel-id"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>2. Channel ID</h3>
<p dir="auto">One also needs to specify a Slack channel to create threads in. You will likely
need to invite your bot app into that channel (an easy way is to ping them and
then click invite to channel). Once you have a channel for which your bot app
has access, get the channel ID (a value like <code>C1H9RESGL</code> which you can find at
the bottom of the "About" section of a channel). You can pass this to the
<code>SlackThread</code> constructor or set an environmental variable <code>SLACK_CHANNEL</code>.</p>
<h3 dir="auto"><a id="user-content-3-curl-binary" class="anchor" aria-hidden="true" href="#3-curl-binary"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>3. <code>curl</code> binary</h3>
<p dir="auto">Currently, this package assumes you have a <code>curl</code> binary installed and on your
PATH. Hopefully this requirement can be lifted soon with the help of Yggdrasil
(see <a href="https://github.com/JuliaPackaging/Yggdrasil/issues/2720" data-hovercard-type="issue" data-hovercard-url="/JuliaPackaging/Yggdrasil/issues/2720/hovercard">Yggdrasil#2720</a>).</p>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<p dir="auto">The main object of interest is a <code>SlackThread</code>, constructed by <code>thread = SlackThread()</code> (one may pass a <code>channel</code> and the default is
<code>ENV["SLACK_CHANNEL"]</code>).</p>
<p dir="auto">The first time a message is sent with a particular <code>SlackThread</code>, a new thread
is started in the channel. Subsequent messages will be posted to that thread.</p>
<p dir="auto">The <code>thread</code> can be called as a function to send a message. Additionally, file
paths or pairs of the form <code>name_with_extension =&gt; object</code> may be passed to add
attachments to the message. See the docstring for more details.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using SlackThreads, CairoMakie

julia&gt; thread = SlackThread();

julia&gt; thread(&quot;New thread!&quot;);

julia&gt; thread(&quot;Update&quot;, &quot;plot1.png&quot; =&gt; scatter(rand(10), rand(10)),
                        &quot;plot2.png&quot; =&gt; lines(rand(10)));"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> SlackThreads, CairoMakie

julia<span class="pl-k">&gt;</span> thread <span class="pl-k">=</span> <span class="pl-c1">SlackThread</span>();

julia<span class="pl-k">&gt;</span> <span class="pl-c1">thread</span>(<span class="pl-s"><span class="pl-pds">"</span>New thread!<span class="pl-pds">"</span></span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">thread</span>(<span class="pl-s"><span class="pl-pds">"</span>Update<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>plot1.png<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">scatter</span>(<span class="pl-c1">rand</span>(<span class="pl-c1">10</span>), <span class="pl-c1">rand</span>(<span class="pl-c1">10</span>)),
                        <span class="pl-s"><span class="pl-pds">"</span>plot2.png<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">lines</span>(<span class="pl-c1">rand</span>(<span class="pl-c1">10</span>)));</pre></div>
<p dir="auto">One may use <code>thread = DummyThread()</code> to instead store messages without
sending them to Slack. See the docstring for more details.</p>
<h2 dir="auto"><a id="user-content-exceptions" class="anchor" aria-hidden="true" href="#exceptions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Exceptions</h2>
<p dir="auto">SlackThreads does not throw any exceptions when:</p>
<ul dir="auto">
<li>constructing a <code>SlackThread</code></li>
<li>sending a message to Slack by calling <code>thread::SlackThread</code> object</li>
</ul>
<p dir="auto">Instead, <code>@error</code> and <code>@warn</code> logs are used. This is so that <code>SlackThreads</code> can
easily be incorporated into long-running computations without the risk of
introducing runtime errors.</p>
<p dir="auto">SlackThreads can also be used to log exceptions to a thread, via
<code>slack_log_exception</code>. For example,</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="slack_log_exception(thread) do
    sqrt(-1)
end"><pre><span class="pl-c1">slack_log_exception</span>(thread) <span class="pl-k">do</span>
    <span class="pl-c1">sqrt</span>(<span class="pl-k">-</span><span class="pl-c1">1</span>)
<span class="pl-k">end</span></pre></div>
<p dir="auto">This <em>will</em> rethrow the exception, after logging it (and the stacktrace) to the
Slack thread. Any errors encountered while logging the message (e.g. due to
network issues or authentication problems) will be caught and emitted as
<code>@error</code> logs.</p>
<h2 dir="auto"><a id="user-content-similar-packages" class="anchor" aria-hidden="true" href="#similar-packages"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Similar packages</h2>
<p dir="auto"><a href="https://github.com/JuliaLangSlack/Slack.jl">Slack.jl</a> provides a partial
wrapper of the Slack API. SlackThreads.jl instead focuses on providing an easy
way to update a Slack thread and avoiding runtime errors.</p>
</article></div>