<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-easyffts" class="anchor" aria-hidden="true" href="#easyffts"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>EasyFFTs</h1>
<p dir="auto"><a href="https://KronosTheLate.github.io/EasyFFTs.jl/stable/" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://KronosTheLate.github.io/EasyFFTs.jl/dev/" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/KronosTheLate/EasyFFTs.jl/actions/workflows/CI.yml?query=branch%3Amain"><img src="https://github.com/KronosTheLate/EasyFFTs.jl/actions/workflows/CI.yml/badge.svg?branch=main" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/KronosTheLate/EasyFFTs.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/bfe0b986634ec5c09f462ab7ef453b25905ec8389c76bf5b3af25f923f7b02c2/68747470733a2f2f636f6465636f762e696f2f67682f4b726f6e6f735468654c6174652f45617379464654732e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/KronosTheLate/EasyFFTs.jl/branch/main/graph/badge.svg" style="max-width: 100%;"></a></p>
<h2 dir="auto"></h2>
<p dir="auto">Are you sick and tired of always doing the same preprocessing before you can visualize your fft? Look no further. EasyFFTs aims to automate common preprocessing of fft's, aimed at visual inspection of the frequency spectrum. The main workhorse of this package is a very simple function <code>easyfft</code> that modifies the output of <code>fft</code> and <code>rfft</code> from <a href="https://github.com/JuliaMath/FFTW.jl">FFTW.jl</a> slightly.</p>
<p dir="auto">This function offers four main benefits to using the FFTW functions directly:</p>
<ul dir="auto">
<li>The output is scaled by default, making the absolute value of the response
correspond directly to the amplitude of the sinusoids that make up the signal.</li>
<li>Simple and short syntax for getting the associated frequencies from sample frequency.</li>
<li>Frequencies and response are sorted by increasing frequency (if you have ever used <code>fftshift</code> you know what I am talking about)</li>
<li><code>rfft</code> is automatically called for real input signals, avoiding
the common mistake of always using <code>fft</code>. This makes it so that half of the symmetric
spectrum is not computed, and not returned. This reduces computation and allocations, without loss of information.
If you want both sides of the spectrum, use <code>easymirror</code>, with usage demonstrated in the docstring.</li>
</ul>
<h1 dir="auto"><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Examples</h1>
<p dir="auto">It is much easier to explain by example, so let's show some examples of how to use this package.</p>
<h2 dir="auto"><a id="user-content-setup" class="anchor" aria-hidden="true" href="#setup"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Setup</h2>
<p dir="auto">First, we need something to analyze. Let's define some sample-timestamps:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using EasyFFTs

julia&gt; fs = 100;  # sampling frequency

julia&gt; timestamps = range(0, 1, step = 1 / fs);  # One second signal duration"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> EasyFFTs

julia<span class="pl-k">&gt;</span> fs <span class="pl-k">=</span> <span class="pl-c1">100</span>;  <span class="pl-c"><span class="pl-c">#</span> sampling frequency</span>

julia<span class="pl-k">&gt;</span> timestamps <span class="pl-k">=</span> <span class="pl-c1">range</span>(<span class="pl-c1">0</span>, <span class="pl-c1">1</span>, step <span class="pl-k">=</span> <span class="pl-c1">1</span> <span class="pl-k">/</span> fs);  <span class="pl-c"><span class="pl-c">#</span> One second signal duration</span></pre></div>
<p dir="auto">We then make a signal <code>s</code> composed of 2 pure sinusoids with frequencies of 5 Hz and 10 Hz, sampled at <code>timestamps</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; f1 = 5 ; A1 = 2;

julia&gt; f2 = 10; A2 = 3;

julia&gt; s = @. A1 * sin(f1 * 2π * timestamps) + A2 * sin(f2 * 2π * timestamps);"><pre>julia<span class="pl-k">&gt;</span> f1 <span class="pl-k">=</span> <span class="pl-c1">5</span> ; A1 <span class="pl-k">=</span> <span class="pl-c1">2</span>;

julia<span class="pl-k">&gt;</span> f2 <span class="pl-k">=</span> <span class="pl-c1">10</span>; A2 <span class="pl-k">=</span> <span class="pl-c1">3</span>;

julia<span class="pl-k">&gt;</span> s <span class="pl-k">=</span> <span class="pl-c1">@.</span> A1 <span class="pl-k">*</span> <span class="pl-c1">sin</span>(f1 <span class="pl-k">*</span> <span class="pl-c1">2</span>π <span class="pl-k">*</span> timestamps) <span class="pl-k">+</span> A2 <span class="pl-k">*</span> <span class="pl-c1">sin</span>(f2 <span class="pl-k">*</span> <span class="pl-c1">2</span>π <span class="pl-k">*</span> timestamps);</pre></div>
<p dir="auto">Lets now use <code>easyfft</code>, and bind the output to <code>ef</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; ef = easyfft(s, fs)
EasyFFT with 51 samples.
Dominant component(s):                  
   Frequency  │  Magnitude   
╺━━━━━━━━━━━━━┿━━━━━━━━━━━━━╸
     9.901    │   2.8796     
╶─────────────┼─────────────╴
    4.9505    │   1.9997     "><pre>julia<span class="pl-k">&gt;</span> ef <span class="pl-k">=</span> <span class="pl-c1">easyfft</span>(s, fs)
EasyFFT with <span class="pl-c1">51</span> samples.
Dominant <span class="pl-c1">component</span>(s)<span class="pl-k">:</span>                  
   Frequency  │  Magnitude   
╺━━━━━━━━━━━━━┿━━━━━━━━━━━━━╸
     <span class="pl-c1">9.901</span>    │   <span class="pl-c1">2.8796</span>     
╶─────────────┼─────────────╴
    <span class="pl-c1">4.9505</span>    │   <span class="pl-c1">1.9997</span>     </pre></div>
<p dir="auto">The output is of the type <code>EasyFFT</code>, so to understand the output (bound to <code>ef</code>), we have to understand the type.
It is not complicated at all. In fact, it essentially acts as a <code>NamedTuple</code>.
The reason for wrapping the output in a new type is the pretty printing seen above, and
automatic plotting. Note that the pretty printing rounds values to 5 significant digits.</p>
<h2 dir="auto"><a id="user-content-the-easyfft-type" class="anchor" aria-hidden="true" href="#the-easyfft-type"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>The <code>EasyFFT</code> type</h2>
<p dir="auto">The type <code>EasyFFT</code> contains frequencies and the corresponding (complex) responses.
There are 3 different ways to access the frequencies and responses, just like for named tuples.
The first is way "dot syntax":</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content=" julia&gt; ef.freq
51-element Vector{Float64}:
  0.0
  0.9900990099009901
  ⋮
 48.51485148514851
 49.504950495049506

 julia&gt; ef.resp
51-element Vector{ComplexF64}:
 -9.578394722256253e-17 + 0.0im
 0.00042622566734221867 - 0.013698436692159435im
                        ⋮
  -0.025328817492520122 + 0.0011826329422999651im
   -0.02532460367843232 + 0.00039389110927144075im"><pre> julia<span class="pl-k">&gt;</span> ef<span class="pl-k">.</span>freq
<span class="pl-c1">51</span><span class="pl-k">-</span>element Vector{Float64}<span class="pl-k">:</span>
  <span class="pl-c1">0.0</span>
  <span class="pl-c1">0.9900990099009901</span>
  ⋮
 <span class="pl-c1">48.51485148514851</span>
 <span class="pl-c1">49.504950495049506</span>

 julia<span class="pl-k">&gt;</span> ef<span class="pl-k">.</span>resp
<span class="pl-c1">51</span><span class="pl-k">-</span>element Vector{ComplexF64}<span class="pl-k">:</span>
 <span class="pl-k">-</span><span class="pl-c1">9.578394722256253e-17</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span>
 <span class="pl-c1">0.00042622566734221867</span> <span class="pl-k">-</span> <span class="pl-c1">0.013698436692159435im</span>
                        ⋮
  <span class="pl-k">-</span><span class="pl-c1">0.025328817492520122</span> <span class="pl-k">+</span> <span class="pl-c1">0.0011826329422999651im</span>
   <span class="pl-k">-</span><span class="pl-c1">0.02532460367843232</span> <span class="pl-k">+</span> <span class="pl-c1">0.00039389110927144075im</span></pre></div>
<p dir="auto">Should you ever forget that you should use <code>freq</code> and <code>resp</code>, the Base Julia function <code>propertynames</code> will remind you.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; propertynames(ef)
(:freq, :resp)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">propertynames</span>(ef)
(<span class="pl-c1">:freq</span>, <span class="pl-c1">:resp</span>)</pre></div>
<p dir="auto">The second method is iteration, which allows for <a href="https://docs.julialang.org/en/v1/manual/functions/#destructuring-assignment" rel="nofollow">destructuring assignment</a> into seperate variables:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; frequencies, response = easyfft(s, fs);

julia&gt; ef.freq == frequencies
true

julia&gt; ef.resp == response
true"><pre>julia<span class="pl-k">&gt;</span> frequencies, response <span class="pl-k">=</span> <span class="pl-c1">easyfft</span>(s, fs);

julia<span class="pl-k">&gt;</span> ef<span class="pl-k">.</span>freq <span class="pl-k">==</span> frequencies
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> ef<span class="pl-k">.</span>resp <span class="pl-k">==</span> response
<span class="pl-c1">true</span></pre></div>
<p dir="auto">The third and final way of accessing the frequencies and response is indexing:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; ef.freq == frequencies == ef[1]
true

julia&gt; ef.resp == response == ef[2]
true"><pre>julia<span class="pl-k">&gt;</span> ef<span class="pl-k">.</span>freq <span class="pl-k">==</span> frequencies <span class="pl-k">==</span> ef[<span class="pl-c1">1</span>]
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> ef<span class="pl-k">.</span>resp <span class="pl-k">==</span> response <span class="pl-k">==</span> ef[<span class="pl-c1">2</span>]
<span class="pl-c1">true</span></pre></div>
<p dir="auto">Convenience functions are defined to extract the magnitude and phase of the response:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; magnitude(ef) == abs.(ef.resp)
true

julia&gt; phase(ef) == angle.(ef.resp)
true"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">magnitude</span>(ef) <span class="pl-k">==</span> <span class="pl-c1">abs</span>.(ef<span class="pl-k">.</span>resp)
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">phase</span>(ef) <span class="pl-k">==</span> <span class="pl-c1">angle</span>.(ef<span class="pl-k">.</span>resp)
<span class="pl-c1">true</span></pre></div>
<p dir="auto">Appending a <code>d</code> to <code>phase</code> will get you the angle in degrees, analogous to <code>sin</code> and <code>sind</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; phased(ef) == rad2deg.(phase(ef))
true"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">phased</span>(ef) <span class="pl-k">==</span> <span class="pl-c1">rad2deg</span>.(<span class="pl-c1">phase</span>(ef))
<span class="pl-c1">true</span></pre></div>
<h2 dir="auto"><a id="user-content-plotting" class="anchor" aria-hidden="true" href="#plotting"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Plotting</h2>
<p dir="auto">Because the returned value is of a custom type, automatic plot recipes can be defined. This has been done for <a href="https://github.com/JuliaPlots/Plots.jl">Plots.jl</a>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Plots
plot(ef)"><pre><span class="pl-k">using</span> Plots
<span class="pl-c1">plot</span>(ef)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="assets/s_fft.png"><img src="assets/s_fft.png" alt="Visualization of FFT" style="max-width: 100%;"></a><br>
For less than 100 datapoints, the plot defaults to a stem plot, which is the most appropriate for showing discrete quantities.
However, stem plots get messy and slow with too many points, which is why the default changes to a line plot if there
are 100 datapoints or more. Change the keywords <code>seriestype</code> and <code>markershape</code> in the call to <code>plot</code> to custumize the behaviour.</p>
<p dir="auto">If you want to programically find the dominant frequencies, two functions are provided.
<code>finddomfreq</code> gives you the indices of the dominant frequencies:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; finddomfreq(ef)
2-element Vector{Int64}:
 11
  6"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">finddomfreq</span>(ef)
<span class="pl-c1">2</span><span class="pl-k">-</span>element Vector{Int64}<span class="pl-k">:</span>
 <span class="pl-c1">11</span>
  <span class="pl-c1">6</span></pre></div>
<p dir="auto">If you want to index directly into the frequency vector, use <code>domfreq</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; domfreq(ef)
2-element Vector{Float64}:
 9.900990099009901
 4.9504950495049505"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">domfreq</span>(ef)
<span class="pl-c1">2</span><span class="pl-k">-</span>element Vector{Float64}<span class="pl-k">:</span>
 <span class="pl-c1">9.900990099009901</span>
 <span class="pl-c1">4.9504950495049505</span></pre></div>
<p dir="auto">Finally, you can get the symmetric spectrum using <code>easymirror</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; easymirror(ef)
EasyFFT with 101 samples.
Dominant component(s):                   
   Frequency  │  Magnitude   
╺━━━━━━━━━━━━━┿━━━━━━━━━━━━━╸
    -9.901    │   1.4398     
╶─────────────┼─────────────╴
     9.901    │   1.4398     
╶─────────────┼─────────────╴
    -4.9505   │   0.99987    
╶─────────────┼─────────────╴
    4.9505    │   0.99987    "><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">easymirror</span>(ef)
EasyFFT with <span class="pl-c1">101</span> samples.
Dominant <span class="pl-c1">component</span>(s)<span class="pl-k">:</span>                   
   Frequency  │  Magnitude   
╺━━━━━━━━━━━━━┿━━━━━━━━━━━━━╸
    <span class="pl-k">-</span><span class="pl-c1">9.901</span>    │   <span class="pl-c1">1.4398</span>     
╶─────────────┼─────────────╴
     <span class="pl-c1">9.901</span>    │   <span class="pl-c1">1.4398</span>     
╶─────────────┼─────────────╴
    <span class="pl-k">-</span><span class="pl-c1">4.9505</span>   │   <span class="pl-c1">0.99987</span>    
╶─────────────┼─────────────╴
    <span class="pl-c1">4.9505</span>    │   <span class="pl-c1">0.99987</span>    </pre></div>
<p dir="auto">The amplitudes are ajusted correctly, halving the magnitude of
all component except for the 0 Hz component.</p>
<p dir="auto">That wraps up the examples, and there really is not much more to it.
Check out the docstrings and/or source code for more detail.</p>
</article></div>