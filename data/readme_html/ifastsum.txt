<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-ifastsumjl" class="anchor" aria-hidden="true" href="#ifastsumjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>IFastSum.jl</h1>
<h4><a id="user-content-correctly-rounded-summation-yuhang-zhaos-ifastsum" class="anchor" aria-hidden="true" href="#correctly-rounded-summation-yuhang-zhaos-ifastsum"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>correctly rounded summation (Yuhang Zhao's iFastSum)</h4>
<p>####use:</p>
<p>sum_of_xs = iFastSum(x::Vector{AbstractFloat})</p>
<p>####notes:</p>
<p>This should work correctly for vectors of any size.  The time used relative to sum() is somewhat host dependant.  On one machine, I found it likely to range from ~2x (500 values) to ~4x-~6x (25_000 values) to ~9x-~12x (10_000_000 values). To get accurate relative timings, I used @CPUelapsed from CPUTime in a loop that looked for the shortest time.  This implementation follows the original description.  With two minor exceptions, there has been no effort to speed it up. It ran 8-12 times faster than sum using BigFloats.</p>
<p>####reference:</p>
<p>"Some Highly Accurate Basic Linear Algebra Subroutines"
by Yuhang Zhao (c) 2010
McMaster University, Canada</p>
</article></div>