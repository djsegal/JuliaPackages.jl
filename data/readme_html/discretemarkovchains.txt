<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-discretemarkovchains" class="anchor" aria-hidden="true" href="#discretemarkovchains"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>DiscreteMarkovChains</h1>
<p><a href="https://Maelstrom6.github.io/DiscreteMarkovChains.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://Maelstrom6.github.io/DiscreteMarkovChains.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a>
<a href="https://github.com/Maelstrom6/DiscreteMarkovChains.jl/actions"><img src="https://github.com/Maelstrom6/DiscreteMarkovChains.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/Maelstrom6/DiscreteMarkovChains.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/a1117955041a3cdf1b8cebf89719e139e7afd870782528d7f35d5185328384aa/68747470733a2f2f636f6465636f762e696f2f67682f4d61656c7374726f6d362f44697363726574654d61726b6f76436861696e732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/Maelstrom6/DiscreteMarkovChains.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a>
<a href="https://github.com/invenia/BlueStyle"><img src="https://camo.githubusercontent.com/c18fbaa52d94d16b90b19701fc90d289b8a5bb920c74c79bab200b14e75420a4/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c75652d3434393564312e737667" alt="Code Style: Blue" data-canonical-src="https://img.shields.io/badge/code%20style-blue-4495d1.svg" style="max-width:100%;"></a></p>
<p>DiscreteMarkovChains is a package that supports various functions relating to discrete Markov chains. In particular, it deals with discrete-time discrete-space time-homogenous finite Markov chains.</p>
<p>This library also deals with continuous Markov chains. Any function in the documentation that takes "some kind of Markov chain" as an argument can be a <code>DiscreteMarkovChain</code> or a <code>ContinuousMarkovChain</code>. Sadly there are very few examples for continuous Markov chains but they operate in the same way as discrete Markov chains.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p><code>DiscreteMarkovChains</code> should be up on Julia's package registry.</p>
<p>Simply type <code>] add DiscreteMarkovChains</code> into the Julia REPL.</p>
<h2><a id="user-content-documentation" class="anchor" aria-hidden="true" href="#documentation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Documentation</h2>
<p>See <a href="https://Maelstrom6.github.io/DiscreteMarkovChains.jl/dev" rel="nofollow">the documentation</a> hosted on GitHub Pages.</p>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<h3><a id="user-content-discrete-time" class="anchor" aria-hidden="true" href="#discrete-time"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Discrete Time</h3>
<p>We want to find out if this chain is an absorbing chain.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using DiscreteMarkovChains

transition_matrix = [
    0.0 1.0 0.0;
    0.5 0.0 0.5;
    0.0 1.0 0.0;
]
chain = DiscreteMarkovChain(transition_matrix)
is_absorbing(chain)

# output

false
"><pre><span class="pl-k">using</span> DiscreteMarkovChains

transition_matrix <span class="pl-k">=</span> [
    <span class="pl-c1">0.0</span> <span class="pl-c1">1.0</span> <span class="pl-c1">0.0</span>;
    <span class="pl-c1">0.5</span> <span class="pl-c1">0.0</span> <span class="pl-c1">0.5</span>;
    <span class="pl-c1">0.0</span> <span class="pl-c1">1.0</span> <span class="pl-c1">0.0</span>;
]
chain <span class="pl-k">=</span> <span class="pl-c1">DiscreteMarkovChain</span>(transition_matrix)
<span class="pl-c1">is_absorbing</span>(chain)

<span class="pl-c"><span class="pl-c">#</span> output</span>

<span class="pl-c1">false</span></pre></div>
<p>Let's try find the communication classes, see if they are recurrent and what their periodicity is.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="periodicities(chain)

# output

([[1, 2, 3]], Any[true], Any[2])
"><pre><span class="pl-c1">periodicities</span>(chain)

<span class="pl-c"><span class="pl-c">#</span> output</span>

([[<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>]], Any[<span class="pl-c1">true</span>], Any[<span class="pl-c1">2</span>])</pre></div>
<p>This means that we have one communication class with 3 recurrent states. Their periodicity is 2.</p>
<p>Since we have a single communication class, we can calculate the mean recurrence times.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="mean_recurrence_time(chain)

# output

3-element Array{Float64,1}:
 4.0
 2.0
 4.0
"><pre><span class="pl-c1">mean_recurrence_time</span>(chain)

<span class="pl-c"><span class="pl-c">#</span> output</span>

<span class="pl-c1">3</span><span class="pl-k">-</span>element Array{Float64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">4.0</span>
 <span class="pl-c1">2.0</span>
 <span class="pl-c1">4.0</span></pre></div>
<p>So the first and third states take an average of 4 time steps to return to itself. The second state takes an average of 2 steps to return to itself.</p>
<h3><a id="user-content-continuous-time" class="anchor" aria-hidden="true" href="#continuous-time"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Continuous Time</h3>
<p>There is support for continuous Markov chains as well.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="generator = [
    -3 1 2;
    0 -1 1;
    1 1 -2;
]
chain = ContinuousMarkovChain(generator)

communication_classes(chain)

# output

([[1, 2, 3]], Any[true])
"><pre>generator <span class="pl-k">=</span> [
    <span class="pl-k">-</span><span class="pl-c1">3</span> <span class="pl-c1">1</span> <span class="pl-c1">2</span>;
    <span class="pl-c1">0</span> <span class="pl-k">-</span><span class="pl-c1">1</span> <span class="pl-c1">1</span>;
    <span class="pl-c1">1</span> <span class="pl-c1">1</span> <span class="pl-k">-</span><span class="pl-c1">2</span>;
]
chain <span class="pl-k">=</span> <span class="pl-c1">ContinuousMarkovChain</span>(generator)

<span class="pl-c1">communication_classes</span>(chain)

<span class="pl-c"><span class="pl-c">#</span> output</span>

([[<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>]], Any[<span class="pl-c1">true</span>])</pre></div>
<p>So we have one communication class that is recurrent.</p>
<p>Calculate the stationary distribution of the chain.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="stationary_distribution(chain)

# output

3-element Array{Float64,1}:
 0.125
 0.5
 0.375
"><pre><span class="pl-c1">stationary_distribution</span>(chain)

<span class="pl-c"><span class="pl-c">#</span> output</span>

<span class="pl-c1">3</span><span class="pl-k">-</span>element Array{Float64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">0.125</span>
 <span class="pl-c1">0.5</span>
 <span class="pl-c1">0.375</span></pre></div>
<p>Calculate the mean first passage time of the chain.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="round.(mean_first_passage_time(chain), digits=2)

# output

3×3 Array{Float64,2}:
 0.0  1.0  0.67
 3.0  0.0  1.0
 2.0  1.0  0.0
"><pre><span class="pl-c1">round</span>.(<span class="pl-c1">mean_first_passage_time</span>(chain), digits<span class="pl-k">=</span><span class="pl-c1">2</span>)

<span class="pl-c"><span class="pl-c">#</span> output</span>

<span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">3</span> Array{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">0.0</span>  <span class="pl-c1">1.0</span>  <span class="pl-c1">0.67</span>
 <span class="pl-c1">3.0</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">1.0</span>
 <span class="pl-c1">2.0</span>  <span class="pl-c1">1.0</span>  <span class="pl-c1">0.0</span></pre></div>
<h2><a id="user-content-authors" class="anchor" aria-hidden="true" href="#authors"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Authors</h2>
<ul>
<li>Chris du Plessis</li>
</ul>
<h2><a id="user-content-license" class="anchor" aria-hidden="true" href="#license"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>License</h2>
<p>MIT</p>
</article></div>