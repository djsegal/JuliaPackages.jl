<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-standardizedmatrices" class="anchor" aria-hidden="true" href="#standardizedmatrices"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>StandardizedMatrices</h1>
<p dir="auto"><a href="https://travis-ci.org/joshday/StandardizedMatrices.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/9b114ec2d1b9a9b6c845f76cbb2a4cbb20c3f00263b3069b61238e5dfb6be9a0/68747470733a2f2f7472617669732d63692e6f72672f6a6f73686461792f5374616e64617264697a65644d617472696365732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/joshday/StandardizedMatrices.jl.svg?branch=master" style="max-width: 100%;"></a>
<a href="https://ci.appveyor.com/project/joshday/standardizedmatrices-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/eab71b183e8b0c27c843ad048e10b86f2dcabf7c50e1124bdcf3ef390b3f49a5/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f786d6f75616f613778616c366e3467713f7376673d74727565" alt="Build status" data-canonical-src="https://ci.appveyor.com/api/projects/status/xmouaoa7xal6n4gq?svg=true" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/joshday/StandardizedMatrices.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/b662e6614691186d99e98b8888d8b317d3415c040bb774beece405a75dec260f/68747470733a2f2f636f6465636f762e696f2f67682f6a6f73686461792f5374616e64617264697a65644d617472696365732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/joshday/StandardizedMatrices.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">Statisticians often work with standardized matrices.  If <code>x</code> is a data matrix with observations in rows, we want to work with <code>z = StatsBase.zscore(x, 1)</code>.  This package defines a <code>StandardizedMatrix</code> type that treats a matrix as standardized without copying or changing data in place.</p>
<h1 dir="auto"><a id="user-content-a-motivating-example" class="anchor" aria-hidden="true" href="#a-motivating-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>A Motivating Example</h1>
<p dir="auto">Suppose our original matrix is sparse and we want to perform matrix-vector multiplication with a standardized version.  Typically, standardizing a sparse matrix destroys the sparsity.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using StatsBase, BenchmarkTools, StandardizedMatrices, SparseArrays, Statistics

# generate some data
n, p = 100_000, 1000
x = sprandn(n, p, .01)
β = randn(p)

xdense = zscore(x, 1)		# this destroys the sparsity
z = StandardizedMatrix(x)	# this acts as standardized, but keeps sparse benefits

b1 = @benchmark xdense * β
b2 = @benchmark z * β
ratio(median(b1), median(b2))  # StandardizedMatrix is roughly 13 times faster"><pre><span class="pl-k">using</span> StatsBase, BenchmarkTools, StandardizedMatrices, SparseArrays, Statistics

<span class="pl-c"><span class="pl-c">#</span> generate some data</span>
n, p <span class="pl-k">=</span> <span class="pl-c1">100_000</span>, <span class="pl-c1">1000</span>
x <span class="pl-k">=</span> <span class="pl-c1">sprandn</span>(n, p, .<span class="pl-c1">01</span>)
β <span class="pl-k">=</span> <span class="pl-c1">randn</span>(p)

xdense <span class="pl-k">=</span> <span class="pl-c1">zscore</span>(x, <span class="pl-c1">1</span>)		<span class="pl-c"><span class="pl-c">#</span> this destroys the sparsity</span>
z <span class="pl-k">=</span> <span class="pl-c1">StandardizedMatrix</span>(x)	<span class="pl-c"><span class="pl-c">#</span> this acts as standardized, but keeps sparse benefits</span>

b1 <span class="pl-k">=</span> <span class="pl-c1">@benchmark</span> xdense <span class="pl-k">*</span> β
b2 <span class="pl-k">=</span> <span class="pl-c1">@benchmark</span> z <span class="pl-k">*</span> β
<span class="pl-c1">ratio</span>(<span class="pl-c1">median</span>(b1), <span class="pl-c1">median</span>(b2))  <span class="pl-c"><span class="pl-c">#</span> StandardizedMatrix is roughly 13 times faster</span></pre></div>
<h1 dir="auto"><a id="user-content-methods-implemented" class="anchor" aria-hidden="true" href="#methods-implemented"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Methods implemented:</h1>
<ul dir="auto">
<li><code>*()</code></li>
<li><code>mul!(Y, A::StandardizedMatrix, B)</code></li>
<li><code>mul!(Y, A::Adjoint{&lt;:StandardizedMatrix}, B)</code></li>
</ul>
</article></div>