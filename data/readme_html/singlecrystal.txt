<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-singlecrystaljl" class="anchor" aria-hidden="true" href="#singlecrystaljl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>SingleCrystal.jl</h1>
<p>With this package you can create single crystal structures. The implementation is based on the Python <a href="https://gitlab.com/ase/ase" rel="nofollow"><strong>ase</strong></a> package.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>To install, open your Julia REPL and enter</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="import Pkg
Pkg.add(&quot;https://github.com/eschmidt42/SingleCrystal.jl#master&quot;)
"><pre><span class="pl-k">import</span> Pkg
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>https://github.com/eschmidt42/SingleCrystal.jl#master<span class="pl-pds">"</span></span>)</pre></div>
<p>or alternatively via the package manager (enter in the REPL via <code>]</code>) and type <code>add https://github.com/eschmidt42/SingleCrystal.jl#master</code>.</p>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<p>Let's say you want to create a body centered cubic (bcc) unit cell (<a href="https://en.wikipedia.org/wiki/Cubic_crystal_system" rel="nofollow"><g-emoji class="g-emoji" alias="bulb" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4a1.png">üí°</g-emoji> wiki <g-emoji class="g-emoji" alias="bulb" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4a1.png">üí°</g-emoji></a>). The general approach to create it or any other crystal's unit cell would be as follows:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="symbols = [&quot;Fe&quot;] # chemical elements
basis = [[0. 0. 0.],] # scaled coordinates
nr = 229 # space group
setting = 1 # space group settig (greetings from ase)
cellpar = [2.87, 2.87, 2.87, 90, 90, 90]; # specification of the 3 cell vector lengths (in ‚Ñ´ = 10‚Åª¬π‚Å∞m) a, b, c and three angles (in degrees) Œ±, Œ≤, Œ≥

crystal = SingleCrystal.make_unitcell(basis, symbols, nr, setting, cellpar)
"><pre>symbols <span class="pl-k">=</span> [<span class="pl-s"><span class="pl-pds">"</span>Fe<span class="pl-pds">"</span></span>] <span class="pl-c"><span class="pl-c">#</span> chemical elements</span>
basis <span class="pl-k">=</span> [[<span class="pl-c1">0.</span> <span class="pl-c1">0.</span> <span class="pl-c1">0.</span>],] <span class="pl-c"><span class="pl-c">#</span> scaled coordinates</span>
nr <span class="pl-k">=</span> <span class="pl-c1">229</span> <span class="pl-c"><span class="pl-c">#</span> space group</span>
setting <span class="pl-k">=</span> <span class="pl-c1">1</span> <span class="pl-c"><span class="pl-c">#</span> space group settig (greetings from ase)</span>
cellpar <span class="pl-k">=</span> [<span class="pl-c1">2.87</span>, <span class="pl-c1">2.87</span>, <span class="pl-c1">2.87</span>, <span class="pl-c1">90</span>, <span class="pl-c1">90</span>, <span class="pl-c1">90</span>]; <span class="pl-c"><span class="pl-c">#</span> specification of the 3 cell vector lengths (in ‚Ñ´ = 10‚Åª¬π‚Å∞m) a, b, c and three angles (in degrees) Œ±, Œ≤, Œ≥</span>

crystal <span class="pl-k">=</span> SingleCrystal<span class="pl-k">.</span><span class="pl-c1">make_unitcell</span>(basis, symbols, nr, setting, cellpar)</pre></div>
<p>For the case of bcc unit cells, you could alternatively also use the less verbose path via the <code>make_bcc_unitcell</code> convenience function:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="crystal = SingleCrystal.make_bcc_unitcell(&quot;Fe&quot;, 3.4)
"><pre>crystal <span class="pl-k">=</span> SingleCrystal<span class="pl-k">.</span><span class="pl-c1">make_bcc_unitcell</span>(<span class="pl-s"><span class="pl-pds">"</span>Fe<span class="pl-pds">"</span></span>, <span class="pl-c1">3.4</span>)</pre></div>
<p>In case you want to replicate the unit cell along the cell vectors to create a supercell, you can use <code>make_supercell</code>:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="supercell = SingleCrystal.make_supercell(crystal, nx=3, ny=3, nz=3);
"><pre>supercell <span class="pl-k">=</span> SingleCrystal<span class="pl-k">.</span><span class="pl-c1">make_supercell</span>(crystal, nx<span class="pl-k">=</span><span class="pl-c1">3</span>, ny<span class="pl-k">=</span><span class="pl-c1">3</span>, nz<span class="pl-k">=</span><span class="pl-c1">3</span>);</pre></div>
<p>For more examples, and a peek behind the curtains of the ase algorithm implemented in this package, I encourage you to check out <code>docs/singl_crystals_in_julia.ipynb</code>. There you can also find the above examples in context and find how to create a vacancy *spoiler*.</p>
<p>Happy crystal synthesizing! <g-emoji class="g-emoji" alias="smiley" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f603.png">üòÉ</g-emoji></p>
<h2><a id="user-content-motivation" class="anchor" aria-hidden="true" href="#motivation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Motivation</h2>
<p>The main objective for this package is to prepare input required for the Molecular Dynamics package <strong><a href="https://github.com/JuliaMolSim/Molly.jl">Molly.jl</a></strong>, to simulate body centered cubic single crystals.</p>
<p>A minimal working example for the usage of SingleCrystal.jl with Molly.jl (based on a fork of Molly.jl adding the Finnis-Sinclair potential type - a pull request of the fork is currently <a href="https://github.com/JuliaMolSim/Molly.jl/pull/32">under review</a>):</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="import Pkg
Pkg.activate(&quot;.&quot;) # if you are in the root of the forked Molly.jl package

using Molly
using SingleCrystal

fs_inter, elements, masses, bcc_lattice_constants, reference_energies = Molly.get_finnissinclair1984(true)
make_atom(name,mass) = Atom(name=name,mass=mass)

# setting up the crystal
nx = 3
ny = 3
nz = 3
element = &quot;Fe&quot;

a = bcc_lattice_constants[element]
crystal = SingleCrystal.make_bcc_unitcell(element, a, make_atom)
supercell = SingleCrystal.make_supercell(crystal, nx=nx, ny=ny, nz=nz)

# setting up the simulation
T = 100. # Kelvin
T = T*fs_inter.kb
n_steps = 2500
dt = .002 # ps; ns = 1e-9s, ps = 1e-12s, fs = 1e-15s
n_atoms = length(supercell.atoms)
general_inters = (fs_inter,)
velocities = [velocity(supercell.atoms[i].mass, T, dims=3) for i in 1:n_atoms]
nb_matrix = trues(n_atoms,n_atoms)
dist_cutoff = 2 * a
nf = DistanceNeighbourFinder(nb_matrix, 1, dist_cutoff)
thermostat = NoThermostat()

loggers = Dict(
    &quot;temperature&quot; =&gt; TemperatureLogger(1),
    &quot;pot&quot; =&gt; EnergyLogger(1),
)

s = Simulation(
    simulator=VelocityVerlet(), 
    atoms=supercell.atoms, 
    general_inters=general_inters,
    coords=[SVector{3}(v) for v in supercell.positions], 
    velocities=velocities,
    temperature=T, 
    box_size=supercell.edge_lengths[1],
    timestep=dt,
    n_steps=n_steps,
    neighbour_finder=nf,
    loggers=loggers,
)

# running the simulation
simulate!(s) 
"><pre><span class="pl-k">import</span> Pkg
Pkg<span class="pl-k">.</span><span class="pl-c1">activate</span>(<span class="pl-s"><span class="pl-pds">"</span>.<span class="pl-pds">"</span></span>) <span class="pl-c"><span class="pl-c">#</span> if you are in the root of the forked Molly.jl package</span>

<span class="pl-k">using</span> Molly
<span class="pl-k">using</span> SingleCrystal

fs_inter, elements, masses, bcc_lattice_constants, reference_energies <span class="pl-k">=</span> Molly<span class="pl-k">.</span><span class="pl-c1">get_finnissinclair1984</span>(<span class="pl-c1">true</span>)
<span class="pl-en">make_atom</span>(name,mass) <span class="pl-k">=</span> <span class="pl-c1">Atom</span>(name<span class="pl-k">=</span>name,mass<span class="pl-k">=</span>mass)

<span class="pl-c"><span class="pl-c">#</span> setting up the crystal</span>
nx <span class="pl-k">=</span> <span class="pl-c1">3</span>
ny <span class="pl-k">=</span> <span class="pl-c1">3</span>
nz <span class="pl-k">=</span> <span class="pl-c1">3</span>
element <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>Fe<span class="pl-pds">"</span></span>

a <span class="pl-k">=</span> bcc_lattice_constants[element]
crystal <span class="pl-k">=</span> SingleCrystal<span class="pl-k">.</span><span class="pl-c1">make_bcc_unitcell</span>(element, a, make_atom)
supercell <span class="pl-k">=</span> SingleCrystal<span class="pl-k">.</span><span class="pl-c1">make_supercell</span>(crystal, nx<span class="pl-k">=</span>nx, ny<span class="pl-k">=</span>ny, nz<span class="pl-k">=</span>nz)

<span class="pl-c"><span class="pl-c">#</span> setting up the simulation</span>
T <span class="pl-k">=</span> <span class="pl-c1">100.</span> <span class="pl-c"><span class="pl-c">#</span> Kelvin</span>
T <span class="pl-k">=</span> T<span class="pl-k">*</span>fs_inter<span class="pl-k">.</span>kb
n_steps <span class="pl-k">=</span> <span class="pl-c1">2500</span>
dt <span class="pl-k">=</span> <span class="pl-c1">.002</span> <span class="pl-c"><span class="pl-c">#</span> ps; ns = 1e-9s, ps = 1e-12s, fs = 1e-15s</span>
n_atoms <span class="pl-k">=</span> <span class="pl-c1">length</span>(supercell<span class="pl-k">.</span>atoms)
general_inters <span class="pl-k">=</span> (fs_inter,)
velocities <span class="pl-k">=</span> [<span class="pl-c1">velocity</span>(supercell<span class="pl-k">.</span>atoms[i]<span class="pl-k">.</span>mass, T, dims<span class="pl-k">=</span><span class="pl-c1">3</span>) <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span>n_atoms]
nb_matrix <span class="pl-k">=</span> <span class="pl-c1">trues</span>(n_atoms,n_atoms)
dist_cutoff <span class="pl-k">=</span> <span class="pl-c1">2</span> <span class="pl-k">*</span> a
nf <span class="pl-k">=</span> <span class="pl-c1">DistanceNeighbourFinder</span>(nb_matrix, <span class="pl-c1">1</span>, dist_cutoff)
thermostat <span class="pl-k">=</span> <span class="pl-c1">NoThermostat</span>()

loggers <span class="pl-k">=</span> <span class="pl-c1">Dict</span>(
    <span class="pl-s"><span class="pl-pds">"</span>temperature<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">TemperatureLogger</span>(<span class="pl-c1">1</span>),
    <span class="pl-s"><span class="pl-pds">"</span>pot<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">EnergyLogger</span>(<span class="pl-c1">1</span>),
)

s <span class="pl-k">=</span> <span class="pl-c1">Simulation</span>(
    simulator<span class="pl-k">=</span><span class="pl-c1">VelocityVerlet</span>(), 
    atoms<span class="pl-k">=</span>supercell<span class="pl-k">.</span>atoms, 
    general_inters<span class="pl-k">=</span>general_inters,
    coords<span class="pl-k">=</span>[<span class="pl-c1">SVector</span><span class="pl-c1">{3}</span>(v) <span class="pl-k">for</span> v <span class="pl-k">in</span> supercell<span class="pl-k">.</span>positions], 
    velocities<span class="pl-k">=</span>velocities,
    temperature<span class="pl-k">=</span>T, 
    box_size<span class="pl-k">=</span>supercell<span class="pl-k">.</span>edge_lengths[<span class="pl-c1">1</span>],
    timestep<span class="pl-k">=</span>dt,
    n_steps<span class="pl-k">=</span>n_steps,
    neighbour_finder<span class="pl-k">=</span>nf,
    loggers<span class="pl-k">=</span>loggers,
)

<span class="pl-c"><span class="pl-c">#</span> running the simulation</span>
<span class="pl-c1">simulate!</span>(s) </pre></div>
<h2><a id="user-content-to-dos" class="anchor" aria-hidden="true" href="#to-dos"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>To dos</h2>
<ol>
<li>Add more crystal structures to test beyond those in the ase gallery</li>
<li>Test how the performance / resource requirements scale with crystal size / number of atoms</li>
</ol>
<h2><a id="user-content-contributing" class="anchor" aria-hidden="true" href="#contributing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Contributing</h2>
<p>Contributions are very welcome.</p>
</article></div>