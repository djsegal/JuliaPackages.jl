<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-simple-directmedia-layer" class="anchor" aria-hidden="true" href="#simple-directmedia-layer"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Simple DirectMedia Layer</h1>
<p dir="auto"><a href="https://github.com/JuliaMultimedia/SimpleDirectMediaLayer.jl/actions/workflows/ci.yml"><img src="https://github.com/JuliaMultimedia/SimpleDirectMediaLayer.jl/actions/workflows/ci.yml/badge.svg" alt="CI" style="max-width: 100%;"></a>
<a href="https://github.com/JuliaMultimedia/SimpleDirectMediaLayer.jl/actions/workflows/TagBot.yml"><img src="https://github.com/JuliaMultimedia/SimpleDirectMediaLayer.jl/actions/workflows/TagBot.yml/badge.svg" alt="TagBot" style="max-width: 100%;"></a>
<a href="https://coveralls.io/github/jonathanBieler/SimpleDirectMediaLayer.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/83ea6865f0e18cccbf18e6b3143fc9d8890602e32fb44aaee3486e384554f3fe/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f6a6f6e617468616e4269656c65722f53696d706c654469726563744d656469614c617965722e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/jonathanBieler/SimpleDirectMediaLayer.jl/badge.svg?branch=master" style="max-width: 100%;"></a>
<a href="https://juliahub.com/ui/Packages/SimpleDirectMediaLayer/vVozl" rel="nofollow"><img src="https://camo.githubusercontent.com/e7157774ec621506be79a71168bf80327fe1d3d024143e8efd71f22e2bc02297/68747470733a2f2f6a756c69616875622e636f6d2f646f63732f53696d706c654469726563744d656469614c617965722f706b676576616c2e737667" alt="pkgeval" data-canonical-src="https://juliahub.com/docs/SimpleDirectMediaLayer/pkgeval.svg" style="max-width: 100%;"></a>
<a href="https://juliahub.com/ui/Packages/SimpleDirectMediaLayer/vVozl" rel="nofollow"><img src="https://camo.githubusercontent.com/1f0e0bfe191aec09f80dfadcd23c01cb388c9442c187038ba1166399fdf9a68c/68747470733a2f2f6a756c69616875622e636f6d2f646f63732f53696d706c654469726563744d656469614c617965722f76657273696f6e2e737667" alt="version" data-canonical-src="https://juliahub.com/docs/SimpleDirectMediaLayer/version.svg" style="max-width: 100%;"></a>
<a href="https://juliahub.com/ui/Packages/SimpleDirectMediaLayer/vVozl?t=2" rel="nofollow"><img src="https://camo.githubusercontent.com/5568e322eedc102144e756b00501d43d0b6a8ee034a1d3a73fbc3db5e2ff362c/68747470733a2f2f6a756c69616875622e636f6d2f646f63732f53696d706c654469726563744d656469614c617965722f646570732e737667" alt="deps" data-canonical-src="https://juliahub.com/docs/SimpleDirectMediaLayer/deps.svg" style="max-width: 100%;"></a>
<a href="https://pkgs.genieframework.com?packages=SimpleDirectMediaLayer" rel="nofollow"><img src="https://camo.githubusercontent.com/0c041976265b6b4980d0f9113c575eabba81b4f20bc2dd355737c78cac2aeb28/68747470733a2f2f736869656c64732e696f2f656e64706f696e743f75726c3d68747470733a2f2f706b67732e67656e69656672616d65776f726b2e636f6d2f6170692f76312f62616467652f53696d706c654469726563744d656469614c61796572" alt="Genie Downloads" data-canonical-src="https://shields.io/endpoint?url=https://pkgs.genieframework.com/api/v1/badge/SimpleDirectMediaLayer" style="max-width: 100%;"></a></p>
<p dir="auto">Bindings for the <a href="https://www.libsdl.org/" rel="nofollow">Simple DirectMedia Layer</a> library. The bindings were generated using <a href="https://github.com/JuliaInterop/Clang.jl">Clang.jl</a>. Documentation can be found on the <a href="https://wiki.libsdl.org/FrontPage" rel="nofollow">SDL wiki</a>.</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="pkg&gt; add SimpleDirectMediaLayer"><pre>pkg<span class="pl-k">&gt;</span> add SimpleDirectMediaLayer</pre></div>
<p dir="auto">For Linux users, you probably need to manually config the environment variable <code>ALSA_CONFIG_PATH</code>. If the path is empty, the default value <code>/usr/share/alsa/alsa.conf</code> will be used. Please refer to <a class="issue-link js-issue-link" data-error-text="Failed to load title" data-id="675579157" data-permission-text="Title is private" data-url="https://github.com/JuliaPackaging/Yggdrasil/issues/1432" data-hovercard-type="issue" data-hovercard-url="/JuliaPackaging/Yggdrasil/issues/1432/hovercard" href="https://github.com/JuliaPackaging/Yggdrasil/issues/1432">JuliaPackaging/Yggdrasil#1432</a> for more details.</p>
<h2 dir="auto"><a id="user-content-quick-start" class="anchor" aria-hidden="true" href="#quick-start"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Quick start</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using SimpleDirectMediaLayer
using SimpleDirectMediaLayer.LibSDL2

SDL_GL_SetAttribute(SDL_GL_MULTISAMPLEBUFFERS, 16)
SDL_GL_SetAttribute(SDL_GL_MULTISAMPLESAMPLES, 16)

@assert SDL_Init(SDL_INIT_EVERYTHING) == 0 &quot;error initializing SDL: $(unsafe_string(SDL_GetError()))&quot;

win = SDL_CreateWindow(&quot;Game&quot;, SDL_WINDOWPOS_CENTERED, SDL_WINDOWPOS_CENTERED, 1000, 1000, SDL_WINDOW_SHOWN)
SDL_SetWindowResizable(win, SDL_TRUE)

renderer = SDL_CreateRenderer(win, -1, SDL_RENDERER_ACCELERATED | SDL_RENDERER_PRESENTVSYNC)

surface = IMG_Load(joinpath(dirname(pathof(SimpleDirectMediaLayer)), &quot;..&quot;, &quot;assets&quot;, &quot;cat.png&quot;))
tex = SDL_CreateTextureFromSurface(renderer, surface)
SDL_FreeSurface(surface)

w_ref, h_ref = Ref{Cint}(0), Ref{Cint}(0)
SDL_QueryTexture(tex, C_NULL, C_NULL, w_ref, h_ref)

try
    w, h = w_ref[], h_ref[]
    x = (1000 - w) รท 2
    y = (1000 - h) รท 2
    dest_ref = Ref(SDL_Rect(x, y, w, h))
    close = false
    speed = 300
    while !close
        event_ref = Ref{SDL_Event}()
        while Bool(SDL_PollEvent(event_ref))
            evt = event_ref[]
            evt_ty = evt.type
            if evt_ty == SDL_QUIT
                close = true
                break
            elseif evt_ty == SDL_KEYDOWN
                scan_code = evt.key.keysym.scancode
                if scan_code == SDL_SCANCODE_W || scan_code == SDL_SCANCODE_UP
                    y -= speed / 30
                    break
                elseif scan_code == SDL_SCANCODE_A || scan_code == SDL_SCANCODE_LEFT
                    x -= speed / 30
                    break
                elseif scan_code == SDL_SCANCODE_S || scan_code == SDL_SCANCODE_DOWN
                    y += speed / 30
                    break
                elseif scan_code == SDL_SCANCODE_D || scan_code == SDL_SCANCODE_RIGHT
                    x += speed / 30
                    break
                else
                    break
                end
            end
        end

        x + w &gt; 1000 &amp;&amp; (x = 1000 - w;)
        x &lt; 0 &amp;&amp; (x = 0;)
        y + h &gt; 1000 &amp;&amp; (y = 1000 - h;)
        y &lt; 0 &amp;&amp; (y = 0;)

        dest_ref[] = SDL_Rect(x, y, w, h)
        SDL_RenderClear(renderer)
        SDL_RenderCopy(renderer, tex, C_NULL, dest_ref)
        dest = dest_ref[]
        x, y, w, h = dest.x, dest.y, dest.w, dest.h
        SDL_RenderPresent(renderer)

        SDL_Delay(1000 รท 60)
    end
finally
    SDL_DestroyTexture(tex)
    SDL_DestroyRenderer(renderer)
    SDL_DestroyWindow(win)
    SDL_Quit()
end"><pre><span class="pl-k">using</span> SimpleDirectMediaLayer
<span class="pl-k">using</span> SimpleDirectMediaLayer<span class="pl-k">.</span>LibSDL2

<span class="pl-c1">SDL_GL_SetAttribute</span>(SDL_GL_MULTISAMPLEBUFFERS, <span class="pl-c1">16</span>)
<span class="pl-c1">SDL_GL_SetAttribute</span>(SDL_GL_MULTISAMPLESAMPLES, <span class="pl-c1">16</span>)

<span class="pl-c1">@assert</span> <span class="pl-c1">SDL_Init</span>(SDL_INIT_EVERYTHING) <span class="pl-k">==</span> <span class="pl-c1">0</span> <span class="pl-s"><span class="pl-pds">"</span>error initializing SDL: <span class="pl-v">$(<span class="pl-c1">unsafe_string</span>(<span class="pl-c1">SDL_GetError</span>()))</span><span class="pl-pds">"</span></span>

win <span class="pl-k">=</span> <span class="pl-c1">SDL_CreateWindow</span>(<span class="pl-s"><span class="pl-pds">"</span>Game<span class="pl-pds">"</span></span>, SDL_WINDOWPOS_CENTERED, SDL_WINDOWPOS_CENTERED, <span class="pl-c1">1000</span>, <span class="pl-c1">1000</span>, SDL_WINDOW_SHOWN)
<span class="pl-c1">SDL_SetWindowResizable</span>(win, SDL_TRUE)

renderer <span class="pl-k">=</span> <span class="pl-c1">SDL_CreateRenderer</span>(win, <span class="pl-k">-</span><span class="pl-c1">1</span>, SDL_RENDERER_ACCELERATED <span class="pl-k">|</span> SDL_RENDERER_PRESENTVSYNC)

surface <span class="pl-k">=</span> <span class="pl-c1">IMG_Load</span>(<span class="pl-c1">joinpath</span>(<span class="pl-c1">dirname</span>(<span class="pl-c1">pathof</span>(SimpleDirectMediaLayer)), <span class="pl-s"><span class="pl-pds">"</span>..<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>assets<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>cat.png<span class="pl-pds">"</span></span>))
tex <span class="pl-k">=</span> <span class="pl-c1">SDL_CreateTextureFromSurface</span>(renderer, surface)
<span class="pl-c1">SDL_FreeSurface</span>(surface)

w_ref, h_ref <span class="pl-k">=</span> <span class="pl-c1">Ref</span><span class="pl-c1">{Cint}</span>(<span class="pl-c1">0</span>), <span class="pl-c1">Ref</span><span class="pl-c1">{Cint}</span>(<span class="pl-c1">0</span>)
<span class="pl-c1">SDL_QueryTexture</span>(tex, <span class="pl-c1">C_NULL</span>, <span class="pl-c1">C_NULL</span>, w_ref, h_ref)

<span class="pl-k">try</span>
    w, h <span class="pl-k">=</span> w_ref[], h_ref[]
    x <span class="pl-k">=</span> (<span class="pl-c1">1000</span> <span class="pl-k">-</span> w) <span class="pl-k">รท</span> <span class="pl-c1">2</span>
    y <span class="pl-k">=</span> (<span class="pl-c1">1000</span> <span class="pl-k">-</span> h) <span class="pl-k">รท</span> <span class="pl-c1">2</span>
    dest_ref <span class="pl-k">=</span> <span class="pl-c1">Ref</span>(<span class="pl-c1">SDL_Rect</span>(x, y, w, h))
    close <span class="pl-k">=</span> <span class="pl-c1">false</span>
    speed <span class="pl-k">=</span> <span class="pl-c1">300</span>
    <span class="pl-k">while</span> <span class="pl-k">!</span>close
        event_ref <span class="pl-k">=</span> <span class="pl-c1">Ref</span><span class="pl-c1">{SDL_Event}</span>()
        <span class="pl-k">while</span> <span class="pl-c1">Bool</span>(<span class="pl-c1">SDL_PollEvent</span>(event_ref))
            evt <span class="pl-k">=</span> event_ref[]
            evt_ty <span class="pl-k">=</span> evt<span class="pl-k">.</span>type
            <span class="pl-k">if</span> evt_ty <span class="pl-k">==</span> SDL_QUIT
                close <span class="pl-k">=</span> <span class="pl-c1">true</span>
                <span class="pl-k">break</span>
            <span class="pl-k">elseif</span> evt_ty <span class="pl-k">==</span> SDL_KEYDOWN
                scan_code <span class="pl-k">=</span> evt<span class="pl-k">.</span>key<span class="pl-k">.</span>keysym<span class="pl-k">.</span>scancode
                <span class="pl-k">if</span> scan_code <span class="pl-k">==</span> SDL_SCANCODE_W <span class="pl-k">||</span> scan_code <span class="pl-k">==</span> SDL_SCANCODE_UP
                    y <span class="pl-k">-=</span> speed <span class="pl-k">/</span> <span class="pl-c1">30</span>
                    <span class="pl-k">break</span>
                <span class="pl-k">elseif</span> scan_code <span class="pl-k">==</span> SDL_SCANCODE_A <span class="pl-k">||</span> scan_code <span class="pl-k">==</span> SDL_SCANCODE_LEFT
                    x <span class="pl-k">-=</span> speed <span class="pl-k">/</span> <span class="pl-c1">30</span>
                    <span class="pl-k">break</span>
                <span class="pl-k">elseif</span> scan_code <span class="pl-k">==</span> SDL_SCANCODE_S <span class="pl-k">||</span> scan_code <span class="pl-k">==</span> SDL_SCANCODE_DOWN
                    y <span class="pl-k">+=</span> speed <span class="pl-k">/</span> <span class="pl-c1">30</span>
                    <span class="pl-k">break</span>
                <span class="pl-k">elseif</span> scan_code <span class="pl-k">==</span> SDL_SCANCODE_D <span class="pl-k">||</span> scan_code <span class="pl-k">==</span> SDL_SCANCODE_RIGHT
                    x <span class="pl-k">+=</span> speed <span class="pl-k">/</span> <span class="pl-c1">30</span>
                    <span class="pl-k">break</span>
                <span class="pl-k">else</span>
                    <span class="pl-k">break</span>
                <span class="pl-k">end</span>
            <span class="pl-k">end</span>
        <span class="pl-k">end</span>

        x <span class="pl-k">+</span> w <span class="pl-k">&gt;</span> <span class="pl-c1">1000</span> <span class="pl-k">&amp;&amp;</span> (x <span class="pl-k">=</span> <span class="pl-c1">1000</span> <span class="pl-k">-</span> w;)
        x <span class="pl-k">&lt;</span> <span class="pl-c1">0</span> <span class="pl-k">&amp;&amp;</span> (x <span class="pl-k">=</span> <span class="pl-c1">0</span>;)
        y <span class="pl-k">+</span> h <span class="pl-k">&gt;</span> <span class="pl-c1">1000</span> <span class="pl-k">&amp;&amp;</span> (y <span class="pl-k">=</span> <span class="pl-c1">1000</span> <span class="pl-k">-</span> h;)
        y <span class="pl-k">&lt;</span> <span class="pl-c1">0</span> <span class="pl-k">&amp;&amp;</span> (y <span class="pl-k">=</span> <span class="pl-c1">0</span>;)

        dest_ref[] <span class="pl-k">=</span> <span class="pl-c1">SDL_Rect</span>(x, y, w, h)
        <span class="pl-c1">SDL_RenderClear</span>(renderer)
        <span class="pl-c1">SDL_RenderCopy</span>(renderer, tex, <span class="pl-c1">C_NULL</span>, dest_ref)
        dest <span class="pl-k">=</span> dest_ref[]
        x, y, w, h <span class="pl-k">=</span> dest<span class="pl-k">.</span>x, dest<span class="pl-k">.</span>y, dest<span class="pl-k">.</span>w, dest<span class="pl-k">.</span>h
        <span class="pl-c1">SDL_RenderPresent</span>(renderer)

        <span class="pl-c1">SDL_Delay</span>(<span class="pl-c1">1000</span> <span class="pl-k">รท</span> <span class="pl-c1">60</span>)
    <span class="pl-k">end</span>
<span class="pl-k">finally</span>
    <span class="pl-c1">SDL_DestroyTexture</span>(tex)
    <span class="pl-c1">SDL_DestroyRenderer</span>(renderer)
    <span class="pl-c1">SDL_DestroyWindow</span>(win)
    <span class="pl-c1">SDL_Quit</span>()
<span class="pl-k">end</span></pre></div>
</article></div>