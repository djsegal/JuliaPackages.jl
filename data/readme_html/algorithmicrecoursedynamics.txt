<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p dir="auto"><a href="https://juliatrustworthyai.github.io/AlgorithmicRecourseDynamics.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a> <a href="https://juliatrustworthyai.github.io/AlgorithmicRecourseDynamics.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a> <a href="https://github.com/juliatrustworthyai/AlgorithmicRecourseDynamics.jl/actions/workflows/CI.yml?query=branch%3Amain"><img src="https://github.com/juliatrustworthyai/AlgorithmicRecourseDynamics.jl/actions/workflows/CI.yml/badge.svg?branch=main" alt="Build Status" style="max-width: 100%;"></a> <a href="https://codecov.io/gh/juliatrustworthyai/AlgorithmicRecourseDynamics.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/1d74e9ba7cd905f6ce98533c651ec80923c14e2a332eaeba85f6a8ea68b01e47/68747470733a2f2f636f6465636f762e696f2f67682f6a756c69617472757374776f7274687961692f416c676f726974686d69635265636f7572736544796e616d6963732e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/juliatrustworthyai/AlgorithmicRecourseDynamics.jl/branch/main/graph/badge.svg" style="max-width: 100%;"></a> <a href="https://github.com/invenia/BlueStyle"><img src="https://camo.githubusercontent.com/c18fbaa52d94d16b90b19701fc90d289b8a5bb920c74c79bab200b14e75420a4/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c75652d3434393564312e737667" alt="Code Style: Blue" data-canonical-src="https://img.shields.io/badge/code%20style-blue-4495d1.svg" style="max-width: 100%;"></a> <a href="https://github.com/SciML/ColPrac"><img src="https://camo.githubusercontent.com/85779b6394f8a19cd849938c5e3862184e946784ea3cb531ebbfb9b34ab2ffc2/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f436f6c507261632d436f6e7472696275746f72277325323047756964652d626c756576696f6c65742e706e67" alt="ColPrac: Contributor’s Guide on Collaborative Practices for Community Packages" data-canonical-src="https://img.shields.io/badge/ColPrac-Contributor's%20Guide-blueviolet.png" style="max-width: 100%;"></a> <a href="https://twitter.com/paltmey" rel="nofollow"><img src="https://camo.githubusercontent.com/60fab44ccab4408ab5e34547279a18ac74a259976c8a14cc3c0b55544d690175/68747470733a2f2f696d672e736869656c64732e696f2f747769747465722f75726c2f68747470732f747769747465722e636f6d2f70616c746d65792e7376673f7374796c653d736f6369616c266c6162656c3d466f6c6c6f7725323025343070616c746d6579" alt="Twitter Badge" data-canonical-src="https://img.shields.io/twitter/url/https/twitter.com/paltmey.svg?style=social&amp;label=Follow%20%40paltmey" style="max-width: 100%;"></a></p>
<h1 dir="auto"><a id="user-content-algorithmicrecoursedynamics" class="anchor" aria-hidden="true" href="#algorithmicrecoursedynamics"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>AlgorithmicRecourseDynamics</h1>
<p dir="auto"><code>AlgorithmicRecourseDynamics.jl</code> is a small package for modeling Algorithmic Recourse Dynamics. It builds on <code>CounterfactualExplanations</code>, a package for generating counterfactual explanations.</p>
<h2 dir="auto"><a id="user-content-basic-usage" class="anchor" aria-hidden="true" href="#basic-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Basic Usage</h2>
<p dir="auto">Below we first generate some synthetic data for a binary classification task and instantiate an instance of <code>CounterfactualData</code>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="N = 1000
xmax = 2
X, ys = make_blobs(
    N, 2; 
    centers=2, as_table=false, center_box=(-xmax =&gt; xmax), cluster_std=0.1
)
ys .= ys.==2
X = X'
counterfactual_data = CounterfactualData(X,ys')"><pre>N <span class="pl-k">=</span> <span class="pl-c1">1000</span>
xmax <span class="pl-k">=</span> <span class="pl-c1">2</span>
X, ys <span class="pl-k">=</span> <span class="pl-c1">make_blobs</span>(
    N, <span class="pl-c1">2</span>; 
    centers<span class="pl-k">=</span><span class="pl-c1">2</span>, as_table<span class="pl-k">=</span><span class="pl-c1">false</span>, center_box<span class="pl-k">=</span>(<span class="pl-k">-</span>xmax <span class="pl-k">=&gt;</span> xmax), cluster_std<span class="pl-k">=</span><span class="pl-c1">0.1</span>
)
ys <span class="pl-k">.=</span> ys<span class="pl-k">.==</span><span class="pl-c1">2</span>
X <span class="pl-k">=</span> X<span class="pl-k">'</span>
counterfactual_data <span class="pl-k">=</span> <span class="pl-c1">CounterfactualData</span>(X,ys<span class="pl-k">'</span>)</pre></div>
<p dir="auto">We then define a simple model for the task and prepare it for use with <code>CounterfactualExplanations.jl</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="n_epochs = 100
model = Chain(Dense(2,1))
mod = FluxModel(model)"><pre>n_epochs <span class="pl-k">=</span> <span class="pl-c1">100</span>
model <span class="pl-k">=</span> <span class="pl-c1">Chain</span>(<span class="pl-c1">Dense</span>(<span class="pl-c1">2</span>,<span class="pl-c1">1</span>))
mod <span class="pl-k">=</span> <span class="pl-c1">FluxModel</span>(model)</pre></div>
<p dir="auto">To generate algorithmic recourse, we will use a simple generic generator:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="generator = GenericGenerator()"><pre>generator <span class="pl-k">=</span> <span class="pl-c1">GenericGenerator</span>()</pre></div>
<p dir="auto">Finally we train our model on a subset of the data. The chart below shows the results.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="data_train, data_test = Data.train_test_split(counterfactual_data)
CounterfactualExplanations.Models.train(mod, data_train; n_epochs=n_epochs)
plt_original = plot(mod, counterfactual_data; zoom=0, colorbar=false)
display(plt_original)"><pre>data_train, data_test <span class="pl-k">=</span> Data<span class="pl-k">.</span><span class="pl-c1">train_test_split</span>(counterfactual_data)
CounterfactualExplanations<span class="pl-k">.</span>Models<span class="pl-k">.</span><span class="pl-c1">train</span>(mod, data_train; n_epochs<span class="pl-k">=</span>n_epochs)
plt_original <span class="pl-k">=</span> <span class="pl-c1">plot</span>(mod, counterfactual_data; zoom<span class="pl-k">=</span><span class="pl-c1">0</span>, colorbar<span class="pl-k">=</span><span class="pl-c1">false</span>)
<span class="pl-c1">display</span>(plt_original)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="README_files/figure-commonmark/cell-6-output-1.svg"><img src="README_files/figure-commonmark/cell-6-output-1.svg" alt="" style="max-width: 100%;"></a></p>
<h3 dir="auto"><a id="user-content-simulation" class="anchor" aria-hidden="true" href="#simulation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Simulation</h3>
<p dir="auto">To model the dynamics of algorithmic recourse, we use simulations, in which we repeatedly select as subset of individuals from the non-target class, generate and implement recourse for all of them and finally retrain the model. To set this experiment up, we can use the code below:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="models = Dict(:mymodel =&gt; mod)
generators = Dict(:wachter =&gt; generator)
experiment = set_up_experiment(data_train, data_test, models, generators)"><pre>models <span class="pl-k">=</span> <span class="pl-c1">Dict</span>(<span class="pl-c1">:mymodel</span> <span class="pl-k">=&gt;</span> mod)
generators <span class="pl-k">=</span> <span class="pl-c1">Dict</span>(<span class="pl-c1">:wachter</span> <span class="pl-k">=&gt;</span> generator)
experiment <span class="pl-k">=</span> <span class="pl-c1">set_up_experiment</span>(data_train, data_test, models, generators)</pre></div>
<p dir="auto">Finally, we just run the experiment using default parameter settings that specify the number of rounds, the proportion of individuals to select for recourse and related aspects:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="run!(experiment)"><pre><span class="pl-c1">run!</span>(experiment)</pre></div>
<p dir="auto">The chart below shows the data and predictions at the end of the simulation:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="new_data = experiment.recourse_systems[1][1].data
new_model = experiment.recourse_systems[1][1].model
plt_original = plot(new_model, new_data; zoom=0, colorbar=false)"><pre>new_data <span class="pl-k">=</span> experiment<span class="pl-k">.</span>recourse_systems[<span class="pl-c1">1</span>][<span class="pl-c1">1</span>]<span class="pl-k">.</span>data
new_model <span class="pl-k">=</span> experiment<span class="pl-k">.</span>recourse_systems[<span class="pl-c1">1</span>][<span class="pl-c1">1</span>]<span class="pl-k">.</span>model
plt_original <span class="pl-k">=</span> <span class="pl-c1">plot</span>(new_model, new_data; zoom<span class="pl-k">=</span><span class="pl-c1">0</span>, colorbar<span class="pl-k">=</span><span class="pl-c1">false</span>)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="README_files/figure-commonmark/cell-9-output-1.svg"><img src="README_files/figure-commonmark/cell-9-output-1.svg" alt="" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-related-research-paper-" class="anchor" aria-hidden="true" href="#related-research-paper-"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Related Research Paper <g-emoji class="g-emoji" alias="memo" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4dd.png">📝</g-emoji></h2>
<p dir="auto">The package was developed for a research project that investigates the dynamics of various counterfactual generators. You can find the details <a href="https://github.com/pat-alt/endogenous-macrodynamics-in-algorithmic-recourse">here</a>.</p>
</article></div>