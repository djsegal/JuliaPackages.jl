<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-scorepjl" class="anchor" aria-hidden="true" href="#scorepjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>ScoreP.jl</h1>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/05b103d5b920ffee5b9e94602e793351c5f8c936108d7ab4f29161136b626130/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6966656379636c652d6578706572696d656e74616c2d7265642e737667"><img src="https://camo.githubusercontent.com/05b103d5b920ffee5b9e94602e793351c5f8c936108d7ab4f29161136b626130/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6966656379636c652d6578706572696d656e74616c2d7265642e737667" alt="" data-canonical-src="https://img.shields.io/badge/lifecycle-experimental-red.svg" style="max-width: 100%;"></a></p>
<p dir="auto"><em>Tracing and profiling Julia code with <a href="https://www.vi-hps.org/projects/score-p" rel="nofollow">Score-P</a></em></p>
<h2 dir="auto"><a id="user-content-install" class="anchor" aria-hidden="true" href="#install"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Install</h2>
<h3 dir="auto"><a id="user-content-prerequisites" class="anchor" aria-hidden="true" href="#prerequisites"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Prerequisites</h3>
<ul dir="auto">
<li><strong>You must be on Linux.</strong></li>
<li>You must have <code>gcc</code> installed (and on <code>PATH</code>).</li>
</ul>
<h3 dir="auto"><a id="user-content-score-p-parent-software" class="anchor" aria-hidden="true" href="#score-p-parent-software"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Score-P (Parent Software)</h3>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="wget https://perftools.pages.jsc.fz-juelich.de/cicd/scorep/tags/scorep-7.1/scorep-7.1.tar.gz
tar -xf scorep-7.1.tar.gx
cd scorep-7.1/
mkdir build
cd build
../configure --enable-shared
make -j 4
sudo make install"><pre class="notranslate"><code>wget https://perftools.pages.jsc.fz-juelich.de/cicd/scorep/tags/scorep-7.1/scorep-7.1.tar.gz
tar -xf scorep-7.1.tar.gx
cd scorep-7.1/
mkdir build
cd build
../configure --enable-shared
make -j 4
sudo make install
</code></pre></div>
<p dir="auto"><strong>Note:</strong> You might want to also provide a <code>--prefix=/my/user/dir/</code> to <code>configure</code> to install into non-global user directory. In this case, you can drop the <code>sudo</code> in the last line.</p>
<h3 dir="auto"><a id="user-content-scorepjl-1" class="anchor" aria-hidden="true" href="#scorepjl-1"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>ScoreP.jl</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="] add https://github.com/JuliaPerf/ScoreP.jl"><pre>] add https<span class="pl-k">:</span><span class="pl-k">//</span>github<span class="pl-k">.</span>com<span class="pl-k">/</span>JuliaPerf<span class="pl-k">/</span>ScoreP<span class="pl-k">.</span>jl</pre></div>
<h2 dir="auto"><a id="user-content-basics" class="anchor" aria-hidden="true" href="#basics"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Basics</h2>
<h3 dir="auto"><a id="user-content-profiling" class="anchor" aria-hidden="true" href="#profiling"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Profiling</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# example.jl
using ScoreP
ScoreP.init()

# ScoreP initialization must come before anything else!

X = rand(100_000)

@scorep_user_region &quot;sin&quot; X .= sin.(X)

@scorep_user_region &quot;code block&quot; begin
    @scorep_user_region &quot;allocs&quot; begin
        A = rand(1000,1000)
        B = rand(1000,1000)
    end
    @scorep_user_region &quot;loop&quot; begin
        for _ in 1:10
            A * B
        end
    end
end"><pre><span class="pl-c"><span class="pl-c">#</span> example.jl</span>
<span class="pl-k">using</span> ScoreP
ScoreP<span class="pl-k">.</span><span class="pl-c1">init</span>()

<span class="pl-c"><span class="pl-c">#</span> ScoreP initialization must come before anything else!</span>

X <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">100_000</span>)

<span class="pl-c1">@scorep_user_region</span> <span class="pl-s"><span class="pl-pds">"</span>sin<span class="pl-pds">"</span></span> X <span class="pl-k">.=</span> <span class="pl-c1">sin</span>.(X)

<span class="pl-c1">@scorep_user_region</span> <span class="pl-s"><span class="pl-pds">"</span>code block<span class="pl-pds">"</span></span> <span class="pl-k">begin</span>
    <span class="pl-c1">@scorep_user_region</span> <span class="pl-s"><span class="pl-pds">"</span>allocs<span class="pl-pds">"</span></span> <span class="pl-k">begin</span>
        A <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">1000</span>,<span class="pl-c1">1000</span>)
        B <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">1000</span>,<span class="pl-c1">1000</span>)
    <span class="pl-k">end</span>
    <span class="pl-c1">@scorep_user_region</span> <span class="pl-s"><span class="pl-pds">"</span>loop<span class="pl-pds">"</span></span> <span class="pl-k">begin</span>
        <span class="pl-k">for</span> _ <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>
            A <span class="pl-k">*</span> B
        <span class="pl-k">end</span>
    <span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>
<p dir="auto">Running this (<code>julia example.jl</code>) generates a folder, e.g., <code>scorep-20230127_1603_20921538990107094</code> (you can set <code>export SCOREP_EXPERIMENT_DIRECTORY=foldername</code> to choose a specific folder name up-front). In it is a <code>profile.cubex</code> file which contains the profiling information. You can open <code>.cubex</code> files with <a href="https://www.scalasca.org/scalasca/software/cube-4.x/download.html" rel="nofollow">Cube</a>. For the example above, this should give you something like this:</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://user-images.githubusercontent.com/187980/215124028-9d5cc801-f937-4a96-9d22-5543a365cec0.png"><img alt="ex_basic_cube" src="https://user-images.githubusercontent.com/187980/215124028-9d5cc801-f937-4a96-9d22-5543a365cec0.png" style="max-width: 100%;"></a></p>
<h3 dir="auto"><a id="user-content-profiling--tracing" class="anchor" aria-hidden="true" href="#profiling--tracing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Profiling + Tracing</h3>
<p dir="auto">Running the same example with <code>export SCOREP_ENABLE_TRACING=true</code> the output folder will besides the profiling results contain tracing information as well, specifically, a file <code>traces.otf2</code>. The latter can be opened with the (commerical) software <a href="https://vampir.eu/" rel="nofollow">Vampir</a> and should give you something like the following.</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://user-images.githubusercontent.com/187980/215124135-e3eba293-560d-474f-a3b5-b99e6cb8f07c.png"><img alt="ex_basic_vampir" src="https://user-images.githubusercontent.com/187980/215124135-e3eba293-560d-474f-a3b5-b99e6cb8f07c.png" style="max-width: 100%;"></a></p>
<p dir="auto">On Linux and Windows, it should also be possible to use the <a href="https://www.intel.com/content/www/us/en/developer/tools/oneapi/trace-analyzer.html#gs.oc8bgr" rel="nofollow">Intel Trace Analyzer</a> or other OTF2 visualizers.</p>
<h2 dir="auto"><a id="user-content-mpi" class="anchor" aria-hidden="true" href="#mpi"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>MPI</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# mpi_example.jl
using ScoreP
ScoreP.init()

using MPI
using Printf

function get_arguments(rank, com_size)
    if rank == 0
        a = parse(Float64, get(ARGS, 1, &quot;0.0&quot;))
        b = parse(Float64, get(ARGS, 2, &quot;1.0&quot;))
        n = parse(Int, get(ARGS, 3, &quot;1000000000&quot;))

        for dest in 1:(com_size - 1)
            MPI.Send(a, dest, 0, MPI.COMM_WORLD)
            MPI.Send(b, dest, 0, MPI.COMM_WORLD)
            MPI.Send(n, dest, 0, MPI.COMM_WORLD)
        end
    else
        a, = MPI.Recv(Float64, 0, 0, MPI.COMM_WORLD)
        b, = MPI.Recv(Float64, 0, 0, MPI.COMM_WORLD)
        n, = MPI.Recv(Int, 0, 0, MPI.COMM_WORLD)
    end
    return a, b, n
end

f(x) = x * x

F(x) = x^3 / 3

function integrate(left, right, count, len)
    estimate = (f(left) + f(right)) / 2.0
    for i in 1:(count - 1)
        x = left + i * len
        estimate += f(x)
    end
    return estimate * len
end

function main()
    MPI.Init(; threadlevel = :funneled) # threadlevel &lt;= funneled required for ScoreP!

    rank = MPI.Comm_rank(MPI.COMM_WORLD)
    com_size = MPI.Comm_size(MPI.COMM_WORLD)

    @scorep_user_region &quot;integration&quot; begin

        @scorep_user_region &quot;get_arguments&quot; a, b, n=get_arguments(rank, com_size)

        @scorep_user_region &quot;local integration&quot; begin
            # h and local_n are the same for all processes
            h = (b - a) / n
            local_n = n / com_size

            # compute integration boundaries for each rank
            local_a = a + rank * local_n * h
            local_b = local_a + local_n * h

            # compute integral in bounds for each rank
            local_int = integrate(local_a, local_b, local_n, h)
        end

        @scorep_user_region &quot;collect results&quot; begin
            if rank != 0
                # Worker: send local result to master
                MPI.Send(local_int, 0, 0, MPI.COMM_WORLD)
            else
                # Master: add up results
                total_int = local_int
                for src in 1:(com_size - 1)
                    worker_int, = MPI.Recv(Float64, src, 0, MPI.COMM_WORLD)
                    total_int += worker_int
                end
            end
        end
    end

    # Master: print result
    if rank == 0
        @printf(&quot;With n = %d trapezoids, our estimate of the integral from %f to %f is %.12e (exact: %f)\n&quot;,
                n, a, b, total_int, F(b)-F(a))
    end

    MPI.Finalize()
end

# run main function
main()"><pre><span class="pl-c"><span class="pl-c">#</span> mpi_example.jl</span>
<span class="pl-k">using</span> ScoreP
ScoreP<span class="pl-k">.</span><span class="pl-c1">init</span>()

<span class="pl-k">using</span> MPI
<span class="pl-k">using</span> Printf

<span class="pl-k">function</span> <span class="pl-en">get_arguments</span>(rank, com_size)
    <span class="pl-k">if</span> rank <span class="pl-k">==</span> <span class="pl-c1">0</span>
        a <span class="pl-k">=</span> <span class="pl-c1">parse</span>(Float64, <span class="pl-c1">get</span>(<span class="pl-c1">ARGS</span>, <span class="pl-c1">1</span>, <span class="pl-s"><span class="pl-pds">"</span>0.0<span class="pl-pds">"</span></span>))
        b <span class="pl-k">=</span> <span class="pl-c1">parse</span>(Float64, <span class="pl-c1">get</span>(<span class="pl-c1">ARGS</span>, <span class="pl-c1">2</span>, <span class="pl-s"><span class="pl-pds">"</span>1.0<span class="pl-pds">"</span></span>))
        n <span class="pl-k">=</span> <span class="pl-c1">parse</span>(Int, <span class="pl-c1">get</span>(<span class="pl-c1">ARGS</span>, <span class="pl-c1">3</span>, <span class="pl-s"><span class="pl-pds">"</span>1000000000<span class="pl-pds">"</span></span>))

        <span class="pl-k">for</span> dest <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span>(com_size <span class="pl-k">-</span> <span class="pl-c1">1</span>)
            MPI<span class="pl-k">.</span><span class="pl-c1">Send</span>(a, dest, <span class="pl-c1">0</span>, MPI<span class="pl-k">.</span>COMM_WORLD)
            MPI<span class="pl-k">.</span><span class="pl-c1">Send</span>(b, dest, <span class="pl-c1">0</span>, MPI<span class="pl-k">.</span>COMM_WORLD)
            MPI<span class="pl-k">.</span><span class="pl-c1">Send</span>(n, dest, <span class="pl-c1">0</span>, MPI<span class="pl-k">.</span>COMM_WORLD)
        <span class="pl-k">end</span>
    <span class="pl-k">else</span>
        a, <span class="pl-k">=</span> MPI<span class="pl-k">.</span><span class="pl-c1">Recv</span>(Float64, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>, MPI<span class="pl-k">.</span>COMM_WORLD)
        b, <span class="pl-k">=</span> MPI<span class="pl-k">.</span><span class="pl-c1">Recv</span>(Float64, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>, MPI<span class="pl-k">.</span>COMM_WORLD)
        n, <span class="pl-k">=</span> MPI<span class="pl-k">.</span><span class="pl-c1">Recv</span>(Int, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>, MPI<span class="pl-k">.</span>COMM_WORLD)
    <span class="pl-k">end</span>
    <span class="pl-k">return</span> a, b, n
<span class="pl-k">end</span>

<span class="pl-en">f</span>(x) <span class="pl-k">=</span> x <span class="pl-k">*</span> x

<span class="pl-en">F</span>(x) <span class="pl-k">=</span> x<span class="pl-k">^</span><span class="pl-c1">3</span> <span class="pl-k">/</span> <span class="pl-c1">3</span>

<span class="pl-k">function</span> <span class="pl-en">integrate</span>(left, right, count, len)
    estimate <span class="pl-k">=</span> (<span class="pl-c1">f</span>(left) <span class="pl-k">+</span> <span class="pl-c1">f</span>(right)) <span class="pl-k">/</span> <span class="pl-c1">2.0</span>
    <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span>(count <span class="pl-k">-</span> <span class="pl-c1">1</span>)
        x <span class="pl-k">=</span> left <span class="pl-k">+</span> i <span class="pl-k">*</span> len
        estimate <span class="pl-k">+=</span> <span class="pl-c1">f</span>(x)
    <span class="pl-k">end</span>
    <span class="pl-k">return</span> estimate <span class="pl-k">*</span> len
<span class="pl-k">end</span>

<span class="pl-k">function</span> <span class="pl-en">main</span>()
    MPI<span class="pl-k">.</span><span class="pl-c1">Init</span>(; threadlevel <span class="pl-k">=</span> <span class="pl-c1">:funneled</span>) <span class="pl-c"><span class="pl-c">#</span> threadlevel &lt;= funneled required for ScoreP!</span>

    rank <span class="pl-k">=</span> MPI<span class="pl-k">.</span><span class="pl-c1">Comm_rank</span>(MPI<span class="pl-k">.</span>COMM_WORLD)
    com_size <span class="pl-k">=</span> MPI<span class="pl-k">.</span><span class="pl-c1">Comm_size</span>(MPI<span class="pl-k">.</span>COMM_WORLD)

    <span class="pl-c1">@scorep_user_region</span> <span class="pl-s"><span class="pl-pds">"</span>integration<span class="pl-pds">"</span></span> <span class="pl-k">begin</span>

        <span class="pl-c1">@scorep_user_region</span> <span class="pl-s"><span class="pl-pds">"</span>get_arguments<span class="pl-pds">"</span></span> a, b, n<span class="pl-k">=</span><span class="pl-c1">get_arguments</span>(rank, com_size)

        <span class="pl-c1">@scorep_user_region</span> <span class="pl-s"><span class="pl-pds">"</span>local integration<span class="pl-pds">"</span></span> <span class="pl-k">begin</span>
            <span class="pl-c"><span class="pl-c">#</span> h and local_n are the same for all processes</span>
            h <span class="pl-k">=</span> (b <span class="pl-k">-</span> a) <span class="pl-k">/</span> n
            local_n <span class="pl-k">=</span> n <span class="pl-k">/</span> com_size

            <span class="pl-c"><span class="pl-c">#</span> compute integration boundaries for each rank</span>
            local_a <span class="pl-k">=</span> a <span class="pl-k">+</span> rank <span class="pl-k">*</span> local_n <span class="pl-k">*</span> h
            local_b <span class="pl-k">=</span> local_a <span class="pl-k">+</span> local_n <span class="pl-k">*</span> h

            <span class="pl-c"><span class="pl-c">#</span> compute integral in bounds for each rank</span>
            local_int <span class="pl-k">=</span> <span class="pl-c1">integrate</span>(local_a, local_b, local_n, h)
        <span class="pl-k">end</span>

        <span class="pl-c1">@scorep_user_region</span> <span class="pl-s"><span class="pl-pds">"</span>collect results<span class="pl-pds">"</span></span> <span class="pl-k">begin</span>
            <span class="pl-k">if</span> rank <span class="pl-k">!=</span> <span class="pl-c1">0</span>
                <span class="pl-c"><span class="pl-c">#</span> Worker: send local result to master</span>
                MPI<span class="pl-k">.</span><span class="pl-c1">Send</span>(local_int, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>, MPI<span class="pl-k">.</span>COMM_WORLD)
            <span class="pl-k">else</span>
                <span class="pl-c"><span class="pl-c">#</span> Master: add up results</span>
                total_int <span class="pl-k">=</span> local_int
                <span class="pl-k">for</span> src <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span>(com_size <span class="pl-k">-</span> <span class="pl-c1">1</span>)
                    worker_int, <span class="pl-k">=</span> MPI<span class="pl-k">.</span><span class="pl-c1">Recv</span>(Float64, src, <span class="pl-c1">0</span>, MPI<span class="pl-k">.</span>COMM_WORLD)
                    total_int <span class="pl-k">+=</span> worker_int
                <span class="pl-k">end</span>
            <span class="pl-k">end</span>
        <span class="pl-k">end</span>
    <span class="pl-k">end</span>

    <span class="pl-c"><span class="pl-c">#</span> Master: print result</span>
    <span class="pl-k">if</span> rank <span class="pl-k">==</span> <span class="pl-c1">0</span>
        <span class="pl-c1">@printf</span>(<span class="pl-s"><span class="pl-pds">"</span>With n = %d trapezoids, our estimate of the integral from %f to %f is %.12e (exact: %f)<span class="pl-cce">\n</span><span class="pl-pds">"</span></span>,
                n, a, b, total_int, <span class="pl-c1">F</span>(b)<span class="pl-k">-</span><span class="pl-c1">F</span>(a))
    <span class="pl-k">end</span>

    MPI<span class="pl-k">.</span><span class="pl-c1">Finalize</span>()
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> run main function</span>
<span class="pl-c1">main</span>()</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://user-images.githubusercontent.com/187980/215132355-5bb86fd8-f637-4467-a79a-41d12b3990bc.png"><img alt="ex_mpi_cube" src="https://user-images.githubusercontent.com/187980/215132355-5bb86fd8-f637-4467-a79a-41d12b3990bc.png" style="max-width: 100%;"></a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://user-images.githubusercontent.com/187980/215132435-1a3ec376-37d0-417f-b31b-8fe77a5e96e7.png"><img alt="ex_mpi_vampir" src="https://user-images.githubusercontent.com/187980/215132435-1a3ec376-37d0-417f-b31b-8fe77a5e96e7.png" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-score-p-ecosystem" class="anchor" aria-hidden="true" href="#score-p-ecosystem"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Score-P Ecosystem</h2>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/JuliaPerf/ScoreP.jl/raw/main/scorep_ecosystem.png"><img src="https://github.com/JuliaPerf/ScoreP.jl/raw/main/scorep_ecosystem.png" alt="" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-acknowledgements" class="anchor" aria-hidden="true" href="#acknowledgements"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Acknowledgements</h2>
<ul dir="auto">
<li>The Python analogon <a href="https://github.com/score-p/scorep_binding_python">scorep_binding_python</a> was as a valuable resource for inspiration.</li>
</ul>
<h2 dir="auto"><a id="user-content-credits" class="anchor" aria-hidden="true" href="#credits"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Credits</h2>
<p dir="auto">This package is an effort by the <a href="https://pc2.uni-paderborn.de/" rel="nofollow">Paderborn Center for Parallel Computing (PC²)</a>.</p>
</article></div>