<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-recombinatorkmeansjl" class="anchor" aria-hidden="true" href="#recombinatorkmeansjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>RecombinatorKMeans.jl</h1>
<p>This code implements the recombinator-k-means method described in the paper
<em>"Recombinator-k-means: A population based algorithm that exploits k-means++ for recombination"</em> by C. Baldassi
submitted for publication, (2019) (<a href="https://arxiv.org/abs/1905.00531" rel="nofollow">arXiv</a>).</p>
<p>The code is written in <a href="https://julialang.org" rel="nofollow">Julia</a>. It requires Julia 1.0 or later.</p>
<p>This code works fine and it's usable, but it is intended as a demo and a reference implementation.
For this reason, it has a few limitations, the main one being that it is not flexible or generic:
it only works with data stored in dense <code>Float64</code> matrices, and it only uses the squared Euclidean
distance as a metric. It also tries to reduce the number of options at a minimum. It's also
somewhat liberal in terms of memory usage (particularly if you run it in parallel).</p>
<p>It provides three main optimization methods, which are exported from the package:</p>
<ul>
<li><code>kmeans</code> is a standard implementation of Lloyd's algorithm for k-means; it can use either uniform
of k-means++ initialization (the latter in the improved version that is also used by scikit-learn)</li>
<li><code>reckmeans</code> is the recombinator-k-means method described in the paper</li>
<li><code>kmeans_randswap</code> is the random swap algorithm proposed in <a href="https://link.springer.com/article/10.1186/s40537-018-0122-y" rel="nofollow">this paper</a></li>
</ul>
<p>It also provides two functions to compute the centroid index as defined in <a href="https://www.sciencedirect.com/science/article/abs/pii/S0031320314001150" rel="nofollow">this paper</a>, an
asymmetric one called <code>CI</code> and a symmetric one called <code>CI_sym</code>. These are not exported.</p>
<p>It also provides a afunction to compute the variation of information metric to quantify the
distance between two partitions as defined in <a href="https://www.sciencedirect.com/science/article/pii/S0047259X06002016?via%3Dihub" rel="nofollow">this paper</a>. The function is called <code>VI</code> and is
not exported.</p>
<h3><a id="user-content-installation-and-setup" class="anchor" aria-hidden="true" href="#installation-and-setup"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Installation and setup</h3>
<p>To install the module, just clone it from GitHub into some directory. Then enter in such directory
and run julia with the "project" option:</p>
<pre><code>$ julia --project
</code></pre>
<p>(Alternatively, if you start Julia from some other directory, you can press <kbd>;</kbd> to enter
in shell mode, <code>cd</code> into the project's directory, enter in pkg mode with <kbd>]</kbd> and use the
<code>activate</code> command.)</p>
<p>The first time you do this, you will then need to setup the project's environment. To do that,
when you're in the Julia REPL, press the <kbd>]</kbd> key to enter in pkg mode, then resolve the
dependencies:</p>
<pre><code>(RecombinatorKMeans) pkg&gt; resolve
</code></pre>
<p>This should download all the required packages. You can subsequently type <code>test</code> to check that
everything works. After this, you can press the backspace key to get back to the standard Julia
prompt, and load the package:</p>
<pre><code>julia&gt; using RecombinatorKMeans
</code></pre>
<h3><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Usage</h3>
<p>The format of the data must be a <code>Matrix{Float64}</code> with the data points organized by column.
(Typically, this means that if you're reading a dataset you'll need to transpose it. See for
example the <code>runfile.jl</code> script in the <code>test</code> directory.)</p>
<p>These three functions are available once you load the package: <code>kmeans</code>, <code>reckmeans</code> and <code>kmeans_randswap</code>. You
can use the Julia help (press the <kbd>?</kbd> key in the REPL) to see their documentation.</p>
<p>The <code>reckmeans</code> function will run in parallel if there are workers available. However, the code
must be loaded on the workers too. To do this, run Julia with the <code>p</code> option:</p>
<pre><code>$ julia -p 4 # this will use 4 cores
</code></pre>
<p>Then, before loading the package, do the following at the REPL:</p>
<pre><code>julia&gt; @everywhere using Pkg
julia&gt; @everywhere Pkg.activate(".")
</code></pre>
<p>(This assumes that you are running in the project's main directory, otherwise change <code>"."</code> to
the correct path.)</p>
<p>After this <code>using RecombinatorKMeans</code> should work and <code>reckmeans</code> should run in parallel.</p>
<h3><a id="user-content-reproducing-the-results-in-the-paper" class="anchor" aria-hidden="true" href="#reproducing-the-results-in-the-paper"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Reproducing the results in the paper</h3>
<p>For the purpose of complete reproducibility, you can check out the tag <code>paper-v3</code> of the repository,
which will get you the version of the code used to collect the results in the <a href="https://arxiv.org/abs/1905.00531" rel="nofollow">paper</a>.
Also, the repository includes a file "Manifest_20200316.toml" that specifies the exact version of the
dependencies that were used. You can use it to overwrite your "Manifest.toml" file and then call
<code>instantiate</code> in pkg mode to reproduce the same environment.</p>
<h2><a id="user-content-licence" class="anchor" aria-hidden="true" href="#licence"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Licence</h2>
<p>The code is released under the MIT licence.</p>
<p>The k-means++ code was first written from scratch from <a href="https://scholar.google.com/scholar?cluster=16794944444927209316" rel="nofollow">the k-means++ paper</a>, then improved after reading
the corresponding <a href="https://github.com/scikit-learn/scikit-learn/blob/master/sklearn/cluster/_kmeans.py">scikit-learn's code</a>, then heavily modified.
The scikit-learn's version was first coded by Jan Schlueter as a port of some other code that is now lost.</p>
</article></div>