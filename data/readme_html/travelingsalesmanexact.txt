<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-travelingsalesmanexact" class="anchor" aria-hidden="true" href="#travelingsalesmanexact"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>TravelingSalesmanExact</h1>
<p><a href="https://github.com/ericphanson/TravelingSalesmanExact.jl/actions"><img src="https://github.com/ericphanson/TravelingSalesmanExact.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/ericphanson/TravelingSalesmanExact.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/8c3e4ce178eacf005dac437a48b21c3f422fd3a46f3202d816a2ae68852f51de/68747470733a2f2f636f6465636f762e696f2f67682f657269637068616e736f6e2f54726176656c696e6753616c65736d616e45786163742e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/ericphanson/TravelingSalesmanExact.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a>
<a href="https://ericphanson.github.io/TravelingSalesmanExact.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a>
<a href="https://ericphanson.github.io/TravelingSalesmanExact.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a></p>
<p>This is a simple Julia package to solve the travelling salesman problem using an
Dantzig-Fulkerson-Johnson algorithm. I learned about this kind of algorithm from
the very nice blog post <a href="http://opensourc.es/blog/mip-tsp" rel="nofollow">http://opensourc.es/blog/mip-tsp</a> which also has a
<a href="https://github.com/opensourcesblog/mip_tsp">Julia implementation</a>. In the
symmetric case, the implementation in this package uses the symmetry of the
problem to reduce the number of variables, and essentially is the most basic
version of the algorithms described by (Pferschy and Staněk, 2017) (i.e. no
warmstarts or clustering methods for subtour elimination as a presolve step).</p>
<p>See also
<a href="https://github.com/evanfields/TravelingSalesmanHeuristics.jl">TravelingSalesmanHeuristics.jl</a>
for a Julia implementation of heuristic solutions to the TSP (which will be much
more performant, especially for large problems, although not exact).
Additionally, see
<a href="https://github.com/ericphanson/TravelingSalesmanBenchmarks.jl">TravelingSalesmanBenchmarks</a>
for one use of this package: generating exact cost values for test-cases to help
tune the heuristics of the aforementioned <code>TravelingSalesmanHeuristics.jl</code>.</p>
<blockquote>
<p>Generating subtour elimination constraints for the TSP from pure integer solutions<br>
Pferschy, U. &amp; Staněk, R. Cent Eur J Oper Res (2017) 25: 231.<br>
<a href="https://doi.org/10.1007/s10100-016-0437-8" rel="nofollow">https://doi.org/10.1007/s10100-016-0437-8</a></p>
</blockquote>
<blockquote>
<p>Solution of a Large-Scale Traveling-Salesman Problem<br>
G. Dantzig, R. Fulkerson, and S. Johnson, 	J. Oper. Res. Soc. (1954) 2:4, 393-410<br>
<a href="https://doi.org/10.1287/opre.2.4.393" rel="nofollow">https://doi.org/10.1287/opre.2.4.393</a></p>
</blockquote>
<h2><a id="user-content-setup" class="anchor" aria-hidden="true" href="#setup"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Setup</h2>
<p>Requires Julia (<a href="https://julialang.org/downloads/" rel="nofollow">https://julialang.org/downloads/</a>).</p>
<p>This package is registered, so you can add it via</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="] add TravelingSalesmanExact
"><pre>] add TravelingSalesmanExact</pre></div>
<p>You also need a
<a href="http://www.juliaopt.org/JuMP.jl/v0.19.0/installation/#Getting-Solvers-1" rel="nofollow">mixed-integer solver compatible with JuMP 19+</a>
to do the underlying optimization. For example, <code>GLPK</code> is a free, open-source
solver (see <a href="https://github.com/JuliaOpt/GLPK.jl">https://github.com/JuliaOpt/GLPK.jl</a> for the compatible Julia
wrapper) and can be installed by</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="] add GLPK
"><pre>] add GLPK</pre></div>
<p><code>Gurobi</code> is a commercial wrapper that offers free academic licenses. It has a
compatible Julia wrapper <code>Gurobi</code> (<a href="https://github.com/JuliaOpt/Gurobi.jl">https://github.com/JuliaOpt/Gurobi.jl</a>) that
can be installed via</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="] add Gurobi
"><pre>] add Gurobi</pre></div>
<p>Note you also need Gurobi itself installed and a license properly configured.</p>
<h3><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Examples</h3>
<p><a target="_blank" rel="noopener noreferrer" href="example.svg"><img src="example.svg" alt="Example" style="max-width:100%;"></a></p>
<p>With GLPK:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using TravelingSalesmanExact, GLPK
set_default_optimizer!(GLPK.Optimizer)
n = 50
cities = [ 100*rand(2) for _ in 1:n];
tour, cost = get_optimal_tour(cities; verbose = true)
plot_cities(cities[tour])
"><pre><span class="pl-k">using</span> TravelingSalesmanExact, GLPK
<span class="pl-c1">set_default_optimizer!</span>(GLPK<span class="pl-k">.</span>Optimizer)
n <span class="pl-k">=</span> <span class="pl-c1">50</span>
cities <span class="pl-k">=</span> [ <span class="pl-c1">100</span><span class="pl-k">*</span><span class="pl-c1">rand</span>(<span class="pl-c1">2</span>) <span class="pl-k">for</span> _ <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span>n];
tour, cost <span class="pl-k">=</span> <span class="pl-c1">get_optimal_tour</span>(cities; verbose <span class="pl-k">=</span> <span class="pl-c1">true</span>)
<span class="pl-c1">plot_cities</span>(cities[tour])</pre></div>
<p>Note, if you are using an older version of JuMP (v0.19 or v0.20), you need to use <code>set_default_optimizer!(with_optimizer(GLPK.Optimizer))</code> instead.</p>
<p>To use Gurobi, the first few lines can be changed to:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using TravelingSalesmanExact, Gurobi
const GurobiEnv = Gurobi.Env()
set_default_optimizer!(() -&gt; Gurobi.Optimizer(GurobiEnv, OutputFlag = 0))
"><pre><span class="pl-k">using</span> TravelingSalesmanExact, Gurobi
<span class="pl-k">const</span> GurobiEnv <span class="pl-k">=</span> Gurobi<span class="pl-k">.</span><span class="pl-c1">Env</span>()
<span class="pl-c1">set_default_optimizer!</span>(() <span class="pl-k">-&gt;</span> Gurobi<span class="pl-k">.</span><span class="pl-c1">Optimizer</span>(GurobiEnv, OutputFlag <span class="pl-k">=</span> <span class="pl-c1">0</span>))</pre></div>
<p>Note that without the <code>OutputFlag = 0</code> argument, Gurobi will print a lot of information about each iteration of the solve.</p>
<p><code>Mosek</code> is another commercial wrapper that offers free academic licenses. It has a compatible Julia wrapper <code>MosekTools</code> (<a href="https://github.com/JuliaOpt/MosekTools.jl">https://github.com/JuliaOpt/MosekTools.jl</a>). You also need a license properly configured; the older wrapper <a href="https://github.com/JuliaOpt/Mosek.jl#installation">Mosek.jl</a> offers instructions for this. <code>Mosek</code> can be used as e.g.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using TravelingSalesmanExact, MosekTools
set_default_optimizer!(() -&gt; Mosek.Optimizer(QUIET = true))
"><pre><span class="pl-k">using</span> TravelingSalesmanExact, MosekTools
<span class="pl-c1">set_default_optimizer!</span>(() <span class="pl-k">-&gt;</span> Mosek<span class="pl-k">.</span><span class="pl-c1">Optimizer</span>(QUIET <span class="pl-k">=</span> <span class="pl-c1">true</span>))</pre></div>
<p>One can also pass an optimizer to <code>get_optimal_tour</code> instead of setting the default for the session, e.g.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using TravelingSalesmanExact, GLPK
n = 50
cities = [ 100*rand(2) for _ in 1:n];
tour, cost = get_optimal_tour(cities, GLPK.Optimizer; verbose = true)
plot_cities(cities[tour])
"><pre><span class="pl-k">using</span> TravelingSalesmanExact, GLPK
n <span class="pl-k">=</span> <span class="pl-c1">50</span>
cities <span class="pl-k">=</span> [ <span class="pl-c1">100</span><span class="pl-k">*</span><span class="pl-c1">rand</span>(<span class="pl-c1">2</span>) <span class="pl-k">for</span> _ <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span>n];
tour, cost <span class="pl-k">=</span> <span class="pl-c1">get_optimal_tour</span>(cities, GLPK<span class="pl-k">.</span>Optimizer; verbose <span class="pl-k">=</span> <span class="pl-c1">true</span>)
<span class="pl-c1">plot_cities</span>(cities[tour])</pre></div>
<p>See <a href="https://ericphanson.github.io/TravelingSalesmanBenchmarks.jl/html/random_50_cities_stats.html" rel="nofollow">https://ericphanson.github.io/TravelingSalesmanBenchmarks.jl/html/random_50_cities_stats.html</a> for a benchmark comparing the computation time between these solvers on random problems as well as comparing to  that of heuristics.</p>
</article></div>