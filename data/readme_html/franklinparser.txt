<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-franklin-parser" class="anchor" aria-hidden="true" href="#franklin-parser"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Franklin Parser</h1>
<p dir="auto"><a href="https://github.com/tlienart/FranklinParser.jl/actions"><img src="https://github.com/tlienart/FranklinParser.jl/workflows/CI/badge.svg" alt="CI Actions Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/tlienart/FranklinParser.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/2227fcd8451231d4f30b79bbd98355daa2041497ac1e95c1b06038999169f196/68747470733a2f2f636f6465636f762e696f2f67682f746c69656e6172742f4672616e6b6c696e5061727365722e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e7376673f746f6b656e3d6d4e727936723261496e" alt="codecov" data-canonical-src="https://codecov.io/gh/tlienart/FranklinParser.jl/branch/main/graph/badge.svg?token=mNry6r2aIn" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-why-not-just-commonmarkjl" class="anchor" aria-hidden="true" href="#why-not-just-commonmarkjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Why not just CommonMark.jl?</h2>
<p dir="auto"><a href="https://github.com/MichaelHatherly/CommonMark.jl">CommonMark.jl</a> is great, well coded, and aims to respect the <a href="https://commonmark.org" rel="nofollow">commonmark specs</a>.</p>
<p dir="auto">At its core, Franklin also uses markdown and so leveraging CommonMark.jl seemed a natural step, possibly with additions.
At some point however, it turned out that it was more difficult (for me) to work <em>with</em> CommonMark than re-write some of its functionalities.
This is by no means related to the quality of CommonMark.jl but rather to how some of the additions in "Franklin-Markdown" require specific parsing rules, specifically to handle nesting and latex-like commands.</p>
<p dir="auto">One big difference in the specs is that Franklin does <strong>not</strong> support indented lines for code blocks, only fenced code blocks are allowed and indentation is not significant.
In CommonMark, allowing this requires a number of checks that some special markers start after at most 3 whitespaces after a line return, in Franklin this is irrelevant and, among other things, allows nesting with indentation which helps with readability e.g.:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="@@class1
  @@class2
    ## section
  @@
  Some text
@@"><pre class="notranslate"><code>@@class1
  @@class2
    ## section
  @@
  Some text
@@
</code></pre></div>
<p dir="auto">In the example above the fact that the ATXHeading starts on an idented line does not matter.</p>
<p dir="auto">For more details, check out <code>test/partition/md_specs.jl</code> and <code>cmark/cmark.jl</code>, where things are discussed in a bit more details on a case-by-case basis.</p>
<h3 dir="auto"><a id="user-content-cm-specs-that-are---respected" class="anchor" aria-hidden="true" href="#cm-specs-that-are---respected"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>CM specs that are +- respected</h3>
<p dir="auto">Note: sometimes the parser is more, sometimes less tolerant, usually there's a good reason.</p>
<ul dir="auto">
<li>atxheadings (<code># ...</code>)</li>
<li>blockquote (<code>&gt; ...</code>)</li>
<li>fenced code blocks (<code>```julia ... ```</code>) no more than 5 backticks allowed</li>
<li>lists (only tight lists are allowed)</li>
<li>hrules (<code>---</code>, ...) requires a triple</li>
<li>emphasis (<code>*a*</code>, <code>_a_</code>, <code>**a**</code>, ...)</li>
<li>autolink (<code>&lt;...&gt;</code>)</li>
<li>htmlentity (<code>&amp;amp;</code>)</li>
<li>inlinecode (<code>`a`</code>)</li>
<li>image, links (<code>![...](...)</code>, <code>[...](...)</code>, <code>[...]: ...</code>)</li>
</ul>
<p dir="auto">Notes:</p>
<ul dir="auto">
<li>for links, putting the destination between <code>&lt;...&gt;</code> is not supported</li>
<li>for links, the format <code>[A](B C)</code> is not supported, for refs, the format <code>[A]: B C</code> with <code>B</code> a link is not supported</li>
</ul>
<h3 dir="auto"><a id="user-content-cm-specs-that-are-not-respected" class="anchor" aria-hidden="true" href="#cm-specs-that-are-not-respected"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>CM specs that are not respected</h3>
<ul dir="auto">
<li>setextheading</li>
<li>indented code blocks</li>
<li>html not inside <code>~~~...~~~</code></li>
<li>hard line breaks (use <code>\\</code>)</li>
</ul>
<h3 dir="auto"><a id="user-content-additional-franklin-specs" class="anchor" aria-hidden="true" href="#additional-franklin-specs"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Additional "Franklin" specs</h3>
<ul dir="auto">
<li>raw blocks <code>??? ... ???</code> (the content will be passed "as is" to X)</li>
<li>latex blocks <code>%%% ... %%%</code> (the content will be passed "as is" to HTML, nothing will be passed to HTML)</li>
<li>html blocks <code>~~~ ... ~~~</code> (the content will be passed "as is" to HTML, nothing will be passed to LaTeX)</li>
<li>math <code>$...$</code>, <code>$$...$$</code>, <code>\[...\]</code> etc</li>
<li>...</li>
</ul>
<h2 dir="auto"><a id="user-content-specs" class="anchor" aria-hidden="true" href="#specs"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Specs</h2>
<p dir="auto">For the specs with respect to CommonMark, see <code>test/partition/md_specs.jl</code>.</p>
<p dir="auto">(ONGOING) additional test suite following CommonMark.jl.</p>
<h2 dir="auto"><a id="user-content-notes" class="anchor" aria-hidden="true" href="#notes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Notes</h2>
<ul dir="auto">
<li>assumption of LF convention i.e. that end of lines are <code>\n</code> and not <code>\r\n</code>. Windows users who are using an editor with that convention should switch their preferences (in VSCode this can be done by Settings &gt; Text Editor &gt; Files &gt; EOL or putting <code>"files.eol": "\n"</code> in <code>settings.json</code>).</li>
<li>dropping <code>@def</code> multiline support; there's ambiguity with line returns; better to use <code>+++...+++</code> blocks; <code>@def x = 5</code> is still allowed.</li>
<li>adding <code>??? ... ???</code> as an overarching "escape" block, the effect is pretty much the same as that of <code>~~~ ... ~~~</code> but an advantage is that <code>???</code> is not recognised by Markdown highlighters (e.g. Atom's) and therefore if for instance a user wants to pass a block of text untouched to CommonMark.jl it's nicer if the Markdown remains highlighted properly between the <code>???</code>.</li>
<li>adding possibility to disable some tokens for instance <code>$</code> or indeed <code>???</code> by passing <code>disable=[:MATH_INLINE, :RAW]</code> etc.</li>
</ul>
</article></div>