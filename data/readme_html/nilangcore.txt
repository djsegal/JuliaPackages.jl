<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-nilangcore" class="anchor" aria-hidden="true" href="#nilangcore"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>NiLangCore</h1>
<p>The core package for reversible eDSL NiLang.</p>
<p><a href="https://travis-ci.com/GiggleLiu/NiLangCore.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/5113b3f63e25f5e1362d23bd364c4e3b46a02f50/68747470733a2f2f7472617669732d63692e636f6d2f476967676c654c69752f4e694c616e67436f72652e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/GiggleLiu/NiLangCore.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/GiggleLiu/NiLangCore.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/4a775346ac0d0576495d91aeaa575bb959894e95/68747470733a2f2f636f6465636f762e696f2f67682f476967676c654c69752f4e694c616e67436f72652e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/GiggleLiu/NiLangCore.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p><strong>Warning</strong>
Requires Julia version &gt;= 1.3.</p>
<h2><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Examples</h2>
<ol>
<li>Define a pair of dual instructions</li>
</ol>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> NiLangCore

julia<span class="pl-k">&gt;</span> <span class="pl-k">function</span> <span class="pl-en">ADD</span>(a!<span class="pl-k">::</span><span class="pl-c1">Number</span>, b<span class="pl-k">::</span><span class="pl-c1">Number</span>)
           a! <span class="pl-k">+</span> b, b
       <span class="pl-k">end</span>
ADD (generic <span class="pl-k">function</span> with <span class="pl-c1">3</span> methods)

julia<span class="pl-k">&gt;</span> <span class="pl-k">function</span> <span class="pl-en">SUB</span>(a!<span class="pl-k">::</span><span class="pl-c1">Number</span>, b<span class="pl-k">::</span><span class="pl-c1">Number</span>)
           a! <span class="pl-k">-</span> b, b
       <span class="pl-k">end</span>
SUB (generic <span class="pl-k">function</span> with <span class="pl-c1">3</span> methods)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@dual</span> ADD SUB</pre></div>
<ol start="2">
<li>Define a reversible function</li>
</ol>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">@i</span> <span class="pl-k">function</span> <span class="pl-en">test</span>(a, b)
           <span class="pl-c1">SUB</span>(a, b)
       <span class="pl-k">end</span></pre></div>
<h2><a id="user-content-reversible-ir" class="anchor" aria-hidden="true" href="#reversible-ir"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Reversible IR</h2>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> NiLangCore

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@code_reverse</span> x <span class="pl-k">+=</span> <span class="pl-c1">f</span>(y)
:(x <span class="pl-k">-=</span> <span class="pl-c1">f</span>(y))

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@code_reverse</span> x <span class="pl-k">.+</span><span class="pl-k">=</span> <span class="pl-c1">f</span>.(y)
:(x <span class="pl-k">.-</span><span class="pl-k">=</span> <span class="pl-c1">f</span>.(y))

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@code_reverse</span> x <span class="pl-k">⊻=</span> <span class="pl-c1">f</span>(y)
:(x <span class="pl-k">⊻=</span> <span class="pl-c1">f</span>(y))

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@code_reverse</span> x ← <span class="pl-c1">zero</span>(T)
:(x → <span class="pl-c1">zero</span>(T))

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@code_reverse</span> <span class="pl-k">begin</span> y <span class="pl-k">+=</span> <span class="pl-c1">f</span>(x) <span class="pl-k">end</span>
<span class="pl-k">quote</span>
    <span class="pl-c"><span class="pl-c">#=</span> /home/leo/.julia/dev/NiLangCore/src/dualcode.jl:82 <span class="pl-c">=#</span></span>
    y <span class="pl-k">-=</span> <span class="pl-c1">f</span>(x)
    <span class="pl-c"><span class="pl-c">#=</span> REPL[52]:1 <span class="pl-c">=#</span></span>
<span class="pl-k">end</span>

julia<span class="pl-k">&gt;</span> julia<span class="pl-k">&gt;</span> <span class="pl-c1">@code_reverse</span> <span class="pl-k">if</span> (precond, postcond) y <span class="pl-k">+=</span> <span class="pl-c1">f</span>(x) <span class="pl-k">else</span> y <span class="pl-k">+=</span> <span class="pl-c1">g</span>(x) <span class="pl-k">end</span>
:(<span class="pl-k">if</span> (postcond, precond)
      <span class="pl-c"><span class="pl-c">#=</span> /home/leo/.julia/dev/NiLangCore/src/dualcode.jl:69 <span class="pl-c">=#</span></span>
      y <span class="pl-k">-=</span> <span class="pl-c1">f</span>(x)
      <span class="pl-c"><span class="pl-c">#=</span> REPL[48]:1 <span class="pl-c">=#</span></span>
  <span class="pl-k">else</span>
      <span class="pl-c"><span class="pl-c">#=</span> /home/leo/.julia/dev/NiLangCore/src/dualcode.jl:69 <span class="pl-c">=#</span></span>
      y <span class="pl-k">-=</span> <span class="pl-c1">g</span>(x)
      <span class="pl-c"><span class="pl-c">#=</span> REPL[48]:1 <span class="pl-c">=#</span></span>
  <span class="pl-k">end</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@code_reverse</span> <span class="pl-k">while</span> (precond, postcond) y <span class="pl-k">+=</span> <span class="pl-c1">f</span>(x) <span class="pl-k">end</span>
:(<span class="pl-k">while</span> (postcond, precond)
      <span class="pl-c"><span class="pl-c">#=</span> /home/leo/.julia/dev/NiLangCore/src/dualcode.jl:72 <span class="pl-c">=#</span></span>
      y <span class="pl-k">-=</span> <span class="pl-c1">f</span>(x)
      <span class="pl-c"><span class="pl-c">#=</span> REPL[49]:1 <span class="pl-c">=#</span></span>
  <span class="pl-k">end</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@code_reverse</span> <span class="pl-k">for</span> i<span class="pl-k">=</span>start<span class="pl-k">:</span>step<span class="pl-k">:</span>stop y <span class="pl-k">+=</span> <span class="pl-c1">f</span>(x) <span class="pl-k">end</span>
:(<span class="pl-k">for</span> i <span class="pl-k">=</span> stop<span class="pl-k">:</span><span class="pl-k">-</span>step<span class="pl-k">:</span>start
      <span class="pl-c"><span class="pl-c">#=</span> /home/leo/.julia/dev/NiLangCore/src/dualcode.jl:76 <span class="pl-c">=#</span></span>
      y <span class="pl-k">-=</span> <span class="pl-c1">f</span>(x)
      <span class="pl-c"><span class="pl-c">#=</span> REPL[50]:1 <span class="pl-c">=#</span></span>
  <span class="pl-k">end</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@code_reverse</span> <span class="pl-c1">@safe</span> <span class="pl-c1">println</span>(x)
:(<span class="pl-c"><span class="pl-c">#=</span> /home/leo/.julia/dev/NiLangCore/src/dualcode.jl:81 <span class="pl-c">=#</span></span> <span class="pl-c1">@safe</span> <span class="pl-c1">println</span>(x))</pre></div>
</article></div>