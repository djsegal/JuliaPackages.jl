<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-nilangcore" class="anchor" aria-hidden="true" href="#nilangcore"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>NiLangCore</h1>
<p>The core package for reversible eDSL NiLang.</p>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/GiggleLiu/NiLangCore.jl/workflows/CI/badge.svg"><img src="https://github.com/GiggleLiu/NiLangCore.jl/workflows/CI/badge.svg" alt="CI" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/GiggleLiu/NiLangCore.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/36a17430ce0bb969e6f610eb56ac8cef5753c64c7ce9ca5d660db580db9ac6b6/68747470733a2f2f636f6465636f762e696f2f67682f476967676c654c69752f4e694c616e67436f72652e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e7376673f746f6b656e3d5265436b6f5639506770" alt="codecov" data-canonical-src="https://codecov.io/gh/GiggleLiu/NiLangCore.jl/branch/master/graph/badge.svg?token=ReCkoV9Pgp" style="max-width:100%;"></a></p>
<p><strong>Warning</strong>
Requires Julia version &gt;= 1.3.</p>
<h2><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Examples</h2>
<ol>
<li>Define a pair of dual instructions</li>
</ol>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using NiLangCore

julia&gt; function ADD(a!::Number, b::Number)
           a! + b, b
       end
ADD (generic function with 3 methods)

julia&gt; function SUB(a!::Number, b::Number)
           a! - b, b
       end
SUB (generic function with 3 methods)

julia&gt; @dual ADD SUB
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> NiLangCore

julia<span class="pl-k">&gt;</span> <span class="pl-k">function</span> <span class="pl-en">ADD</span>(a!<span class="pl-k">::</span><span class="pl-c1">Number</span>, b<span class="pl-k">::</span><span class="pl-c1">Number</span>)
           a! <span class="pl-k">+</span> b, b
       <span class="pl-k">end</span>
ADD (generic <span class="pl-k">function</span> with <span class="pl-c1">3</span> methods)

julia<span class="pl-k">&gt;</span> <span class="pl-k">function</span> <span class="pl-en">SUB</span>(a!<span class="pl-k">::</span><span class="pl-c1">Number</span>, b<span class="pl-k">::</span><span class="pl-c1">Number</span>)
           a! <span class="pl-k">-</span> b, b
       <span class="pl-k">end</span>
SUB (generic <span class="pl-k">function</span> with <span class="pl-c1">3</span> methods)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@dual</span> ADD SUB</pre></div>
<ol start="2">
<li>Define a reversible function</li>
</ol>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; @i function test(a, b)
           SUB(a, b)
       end
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">@i</span> <span class="pl-k">function</span> <span class="pl-en">test</span>(a, b)
           <span class="pl-c1">SUB</span>(a, b)
       <span class="pl-k">end</span></pre></div>
<h2><a id="user-content-reversible-ir" class="anchor" aria-hidden="true" href="#reversible-ir"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Reversible IR</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using NiLangCore

julia&gt; @code_reverse x += f(y)
:(x -= f(y))

julia&gt; @code_reverse x .+= f.(y)
:(x .-= f.(y))

julia&gt; @code_reverse x ⊻= f(y)
:(x ⊻= f(y))

julia&gt; @code_reverse x ← zero(T)
:(x → zero(T))

julia&gt; @code_reverse begin y += f(x) end
quote
    #= /home/leo/.julia/dev/NiLangCore/src/dualcode.jl:82 =#
    y -= f(x)
    #= REPL[52]:1 =#
end

julia&gt; julia&gt; @code_reverse if (precond, postcond) y += f(x) else y += g(x) end
:(if (postcond, precond)
      #= /home/leo/.julia/dev/NiLangCore/src/dualcode.jl:69 =#
      y -= f(x)
      #= REPL[48]:1 =#
  else
      #= /home/leo/.julia/dev/NiLangCore/src/dualcode.jl:69 =#
      y -= g(x)
      #= REPL[48]:1 =#
  end)

julia&gt; @code_reverse while (precond, postcond) y += f(x) end
:(@from !postcond while precond
      #= /home/leo/.julia/dev/NiLangCore/src/dualcode.jl:72 =#
      y -= f(x)
      #= REPL[49]:1 =#
  end)

julia&gt; @code_reverse for i=start:step:stop y += f(x) end
:(for i = stop:-step:start
      #= /home/leo/.julia/dev/NiLangCore/src/dualcode.jl:76 =#
      y -= f(x)
      #= REPL[50]:1 =#
  end)

julia&gt; @code_reverse @safe println(x)
:(#= /home/leo/.julia/dev/NiLangCore/src/dualcode.jl:81 =# @safe println(x))
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> NiLangCore

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@code_reverse</span> x <span class="pl-k">+=</span> <span class="pl-c1">f</span>(y)
:(x <span class="pl-k">-=</span> <span class="pl-c1">f</span>(y))

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@code_reverse</span> x <span class="pl-k">.+</span><span class="pl-k">=</span> <span class="pl-c1">f</span>.(y)
:(x <span class="pl-k">.-</span><span class="pl-k">=</span> <span class="pl-c1">f</span>.(y))

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@code_reverse</span> x <span class="pl-k">⊻=</span> <span class="pl-c1">f</span>(y)
:(x <span class="pl-k">⊻=</span> <span class="pl-c1">f</span>(y))

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@code_reverse</span> x ← <span class="pl-c1">zero</span>(T)
:(x → <span class="pl-c1">zero</span>(T))

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@code_reverse</span> <span class="pl-k">begin</span> y <span class="pl-k">+=</span> <span class="pl-c1">f</span>(x) <span class="pl-k">end</span>
<span class="pl-k">quote</span>
    <span class="pl-c"><span class="pl-c">#=</span> /home/leo/.julia/dev/NiLangCore/src/dualcode.jl:82 <span class="pl-c">=#</span></span>
    y <span class="pl-k">-=</span> <span class="pl-c1">f</span>(x)
    <span class="pl-c"><span class="pl-c">#=</span> REPL[52]:1 <span class="pl-c">=#</span></span>
<span class="pl-k">end</span>

julia<span class="pl-k">&gt;</span> julia<span class="pl-k">&gt;</span> <span class="pl-c1">@code_reverse</span> <span class="pl-k">if</span> (precond, postcond) y <span class="pl-k">+=</span> <span class="pl-c1">f</span>(x) <span class="pl-k">else</span> y <span class="pl-k">+=</span> <span class="pl-c1">g</span>(x) <span class="pl-k">end</span>
:(<span class="pl-k">if</span> (postcond, precond)
      <span class="pl-c"><span class="pl-c">#=</span> /home/leo/.julia/dev/NiLangCore/src/dualcode.jl:69 <span class="pl-c">=#</span></span>
      y <span class="pl-k">-=</span> <span class="pl-c1">f</span>(x)
      <span class="pl-c"><span class="pl-c">#=</span> REPL[48]:1 <span class="pl-c">=#</span></span>
  <span class="pl-k">else</span>
      <span class="pl-c"><span class="pl-c">#=</span> /home/leo/.julia/dev/NiLangCore/src/dualcode.jl:69 <span class="pl-c">=#</span></span>
      y <span class="pl-k">-=</span> <span class="pl-c1">g</span>(x)
      <span class="pl-c"><span class="pl-c">#=</span> REPL[48]:1 <span class="pl-c">=#</span></span>
  <span class="pl-k">end</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@code_reverse</span> <span class="pl-k">while</span> (precond, postcond) y <span class="pl-k">+=</span> <span class="pl-c1">f</span>(x) <span class="pl-k">end</span>
:(<span class="pl-c1">@from</span> <span class="pl-k">!</span>postcond <span class="pl-k">while</span> precond
      <span class="pl-c"><span class="pl-c">#=</span> /home/leo/.julia/dev/NiLangCore/src/dualcode.jl:72 <span class="pl-c">=#</span></span>
      y <span class="pl-k">-=</span> <span class="pl-c1">f</span>(x)
      <span class="pl-c"><span class="pl-c">#=</span> REPL[49]:1 <span class="pl-c">=#</span></span>
  <span class="pl-k">end</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@code_reverse</span> <span class="pl-k">for</span> i<span class="pl-k">=</span>start<span class="pl-k">:</span>step<span class="pl-k">:</span>stop y <span class="pl-k">+=</span> <span class="pl-c1">f</span>(x) <span class="pl-k">end</span>
:(<span class="pl-k">for</span> i <span class="pl-k">=</span> stop<span class="pl-k">:</span><span class="pl-k">-</span>step<span class="pl-k">:</span>start
      <span class="pl-c"><span class="pl-c">#=</span> /home/leo/.julia/dev/NiLangCore/src/dualcode.jl:76 <span class="pl-c">=#</span></span>
      y <span class="pl-k">-=</span> <span class="pl-c1">f</span>(x)
      <span class="pl-c"><span class="pl-c">#=</span> REPL[50]:1 <span class="pl-c">=#</span></span>
  <span class="pl-k">end</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@code_reverse</span> <span class="pl-c1">@safe</span> <span class="pl-c1">println</span>(x)
:(<span class="pl-c"><span class="pl-c">#=</span> /home/leo/.julia/dev/NiLangCore/src/dualcode.jl:81 <span class="pl-c">=#</span></span> <span class="pl-c1">@safe</span> <span class="pl-c1">println</span>(x))</pre></div>
<h2><a id="user-content-a-note-on-symbols" class="anchor" aria-hidden="true" href="#a-note-on-symbols"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>A note on symbols</h2>
<p>The <code>←</code> (\leftarrow + TAB) operation copies B to A, its inverse is <code>→</code> (\rightarrow + TAB)</p>
<ul>
<li>push into a stack, <code>A[end+1] ← B</code> =&gt; <code>[A..., B], B</code></li>
<li>add a key-value pair into a dict, <code>A[i] ← B</code> =&gt; <code>{A..., i=&gt;B}, B</code></li>
<li>allocate a new ancilla, <code>(A = ∅) ← B</code> =&gt; <code>(A = B), B</code></li>
</ul>
<p>The <code>↔</code> (\leftrightarrow + TAB) operation swaps B and A, it is self reversible</p>
<ul>
<li>swap two variables, <code>A ↔ B</code> =&gt; <code>B, A</code></li>
<li>transfer into a stack, <code>A[end+1] ↔ B</code> =&gt; <code>[A..., B], ∅</code></li>
<li>transfer a key-value pair into a dict, <code>A[i] ↔ B</code> =&gt; <code>haskey ? {(A\A[i])..., i=&gt;B}, A[i] : {A..., i=&gt;B}, ∅</code></li>
<li>transfer the value of two variables, <code>(A = ∅) ↔ B</code> =&gt; <code>(A = B), ∅</code></li>
</ul>
<p>One can use <code>var::∅</code> to annotate <code>var</code> as a fresh new variable (only new variables can be allocated), use <code>var[end+1]</code> to represent stack top for push and <code>var[end]</code> for stack top for pop.</p>
</article></div>