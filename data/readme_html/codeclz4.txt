<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-codeclz4" class="anchor" aria-hidden="true" href="#codeclz4"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>CodecLz4</h1>
<p><a href="https://juliaio.github.io/CodecLz4.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://juliaio.github.io/CodecLz4.jl/latest" rel="nofollow"><img src="https://camo.githubusercontent.com/56f8252ba8e9d3f0b810769543f77823d2fe031ce560d4c2d69fb1fcad800383/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6c61746573742d626c75652e737667" alt="Latest" data-canonical-src="https://img.shields.io/badge/docs-latest-blue.svg" style="max-width:100%;"></a>
<a href="https://travis-ci.com/JuliaIO/CodecLz4.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/ea3808643288e0ad6e9970725d5dc16737b6480a8e0e987b9b01f073c8a62be3/68747470733a2f2f7472617669732d63692e636f6d2f4a756c6961494f2f436f6465634c7a342e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/JuliaIO/CodecLz4.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/JuliaIO/CodecLz4.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/50d2ad3602b8d6ed4be827d46bdc11f1243d62697cc83a0098729caeeef901f7/68747470733a2f2f636f6465636f762e696f2f67682f4a756c6961494f2f436f6465634c7a342e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="CodeCov" data-canonical-src="https://codecov.io/gh/JuliaIO/CodecLz4.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p>Provides transcoding codecs for compression and decompression with LZ4. Source: <a href="https://github.com/lz4/lz4">LZ4</a>
The compression algorithm is similar to the compression available through <a href="https://github.com/stevengj/Blosc.jl">Blosc.jl</a>, but uses the LZ4 Frame format as opposed to the standard LZ4 or LZ4_HC formats.</p>
<p>Codecs for the standard LZ4 and LZ4_HC formats are also provided as <code>LZ4FastCompressor</code> and <code>LZ4HCCompressor</code>.
These codecs follow the <a href="https://github.com/lz4/lz4/tree/master/examples">LZ4 streaming examples</a>,
breaking the data into blocks and prepending each compressed block with a size.
Data compressed with these codecs can be decompressed with <code>LZ4SafeDecompressor</code>.</p>
<p>Non-streaming functions are included via <code>lz4_compress</code>, <code>lz4_hc_compress</code>, and <code>lz4_decompress</code>.
These should work with most other standard lz4 implementations.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="Pkg.add(&quot;CodecLz4&quot;)
"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>CodecLz4<span class="pl-pds">"</span></span>)</pre></div>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using CodecLz4

# Some text.
text = &quot;&quot;&quot;
Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean sollicitudin
mauris non nisi consectetur, a dapibus urna pretium. Vestibulum non posuere
erat. Donec luctus a turpis eget aliquet. Cras tristique iaculis ex, eu
malesuada sem interdum sed. Vestibulum ante ipsum primis in faucibus orci luctus
et ultrices posuere cubilia Curae; Etiam volutpat, risus nec gravida ultricies,
erat ex bibendum ipsum, sed varius ipsum ipsum vitae dui.
&quot;&quot;&quot;

# Streaming API.
stream = LZ4FrameCompressorStream(IOBuffer(text))
for line in eachline(LZ4DecompressorStream(stream))
println(line)
end
close(stream)

# Array API.
compressed = transcode(LZ4FrameCompressor, text)
@assert sizeof(compressed) &lt; sizeof(text)
@assert transcode(LZ4FrameDecompressor, compressed) == Vector{UInt8}(text)
"><pre><span class="pl-k">using</span> CodecLz4

<span class="pl-c"><span class="pl-c">#</span> Some text.</span>
text <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"""</span></span>
<span class="pl-s">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean sollicitudin</span>
<span class="pl-s">mauris non nisi consectetur, a dapibus urna pretium. Vestibulum non posuere</span>
<span class="pl-s">erat. Donec luctus a turpis eget aliquet. Cras tristique iaculis ex, eu</span>
<span class="pl-s">malesuada sem interdum sed. Vestibulum ante ipsum primis in faucibus orci luctus</span>
<span class="pl-s">et ultrices posuere cubilia Curae; Etiam volutpat, risus nec gravida ultricies,</span>
<span class="pl-s">erat ex bibendum ipsum, sed varius ipsum ipsum vitae dui.</span>
<span class="pl-s"><span class="pl-pds">"""</span></span>

<span class="pl-c"><span class="pl-c">#</span> Streaming API.</span>
stream <span class="pl-k">=</span> <span class="pl-c1">LZ4FrameCompressorStream</span>(<span class="pl-c1">IOBuffer</span>(text))
<span class="pl-k">for</span> line <span class="pl-k">in</span> <span class="pl-c1">eachline</span>(<span class="pl-c1">LZ4DecompressorStream</span>(stream))
<span class="pl-c1">println</span>(line)
<span class="pl-k">end</span>
<span class="pl-c1">close</span>(stream)

<span class="pl-c"><span class="pl-c">#</span> Array API.</span>
compressed <span class="pl-k">=</span> <span class="pl-c1">transcode</span>(LZ4FrameCompressor, text)
<span class="pl-c1">@assert</span> <span class="pl-c1">sizeof</span>(compressed) <span class="pl-k">&lt;</span> <span class="pl-c1">sizeof</span>(text)
<span class="pl-c1">@assert</span> <span class="pl-c1">transcode</span>(LZ4FrameDecompressor, compressed) <span class="pl-k">==</span> <span class="pl-c1">Vector</span><span class="pl-c1">{UInt8}</span>(text)</pre></div>
<p>The API is heavily based off of <a href="https://github.com/JuliaIO/CodecZlib.jl">CodecZLib</a>, and uses <a href="https://github.com/JuliaIO/TranscodingStreams.jl">TranscodingStreams.jl</a>. See those for details.</p>
</article></div>