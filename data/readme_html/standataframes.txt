<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-standataframes" class="anchor" aria-hidden="true" href="#standataframes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>StanDataFrames</h1>
<p><a href="https://travis-ci.org/StanJulia/StanDataFrames.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/bb9482cafba56f37380a1ced7644a094edef1d10/68747470733a2f2f7472617669732d63692e6f72672f5374616e4a756c69612f5374616e446174614672616d65732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/StanJulia/StanDataFrames.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p><a href="https://coveralls.io/github/StanJulia/StanDataFrames.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/04cf257b35e1bc2035515af8973aaf52e2cce23f/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f5374616e4a756c69612f5374616e446174614672616d65732e6a6c2f62616467652e7376673f6272616e63683d6d617374657226736572766963653d676974687562" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/StanJulia/StanDataFrames.jl/badge.svg?branch=master&amp;service=github" style="max-width:100%;"></a></p>
<p><a href="http://codecov.io/github/StanJulia/StanDataFrames.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/d0125262d7b99335aab61be796d019660535f445/687474703a2f2f636f6465636f762e696f2f6769746875622f5374616e4a756c69612f5374616e446174614672616d65732e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/StanJulia/StanDataFrames.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
<h1><a id="user-content-introduction" class="anchor" aria-hidden="true" href="#introduction"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Introduction</h1>
<p>StanDataFrames generates a nchains DataFrames from the cmdstan generated sample files.</p>
<p>As in <a href="https://github.com/StanJulia/StanDataFrames.jl/blob/master/examples/Bernoulli/bernoulli.jl">above example</a>:</p>
<pre><code>... (snipped)

  stanmodel = Stanmodel(num_samples=1200, thin=2, name="bernoulli", 
    model=bernoullimodel, output_format=:dataframe);

  rc, dfa, cnames = stan(stanmodel, observeddata, ProjDir, diagnostics=false,
    CmdStanDir=CMDSTAN_HOME);

... (snipped)

</code></pre>
<p>It is also possible to convert after the fact:</p>
<pre><code>... (snipped)

  stanmodel = Stanmodel(num_samples=1200, thin=2, name="bernoulli", 
    model=bernoullimodel);

  rc, sim, cnames = stan(stanmodel, observeddata, ProjDir, diagnostics=false,
    CmdStanDir=CMDSTAN_HOME);
    
  @test 0.1 &lt;  mean(sim[:, 8, :]) &lt; 0.5
  
  dfa = convert_a3d(sim, cnames, Val(:dataframe))

... (snipped)

</code></pre>
</article></div>