<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-gridapmakie" class="anchor" aria-hidden="true" href="#gridapmakie"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>GridapMakie</h1>
<table>
<thead>
<tr>
<th align="left"><strong>Documentation</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td align="left"><a href="https://gridap.github.io/GridapMakie.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a> <a href="https://gridap.github.io/GridapMakie.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a></td>
</tr>
<tr>
<td align="left"><strong>Build Status</strong></td>
</tr>
<tr>
<td align="left"><a href="https://github.com/gridap/GridapMakie.jl/actions"><img src="https://github.com/gridap/GridapMakie.jl/workflows/CI/badge.svg?branch=master" alt="Build Status" style="max-width: 100%;"></a> <a href="https://codecov.io/gh/gridap/GridapMakie.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/73677941fe1dcbd900cb27f2fca0b337a9d541f7adcc0be2e2fa7dbbbfc3120e/68747470733a2f2f636f6465636f762e696f2f67682f6772696461702f4772696461704d616b69652e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/gridap/GridapMakie.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></td>
</tr>
<tr>
<td align="left"><strong>Community</strong></td>
</tr>
<tr>
<td align="left"><a href="https://gitter.im/Gridap-jl/community?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge&amp;utm_content=badge" rel="nofollow"><img src="https://camo.githubusercontent.com/b0a25f043f0694716e388ae839f2bd49df2efcfa7be05d89912dbab3617e488f/68747470733a2f2f6261646765732e6769747465722e696d2f4772696461702d6a6c2f636f6d6d756e6974792e737667" alt="Join the chat at https://gitter.im/Gridap-jl/community" data-canonical-src="https://badges.gitter.im/Gridap-jl/community.svg" style="max-width: 100%;"></a></td>
</tr>
<tr>
<td align="left"><strong>Acknowledgement</strong></td>
</tr>
<tr>
<td align="left"><a href="https://summerofcode.withgoogle.com/projects/#6231266174697472" rel="nofollow"><img src="https://camo.githubusercontent.com/976f3fc0f6caea7a0818d893dd354096e2119daa4d2d761f54cf0eb428617962/68747470733a2f2f646576656c6f706572732e676f6f676c652e636f6d2f6f70656e2d736f757263652f67736f632f7265736f75726365732f646f776e6c6f6164732f47536f432d6c6f676f2d686f72697a6f6e74616c2e737667" alt="GSoC" width="220" data-canonical-src="https://developers.google.com/open-source/gsoc/resources/downloads/GSoC-logo-horizontal.svg" style="max-width: 100%;"></a></td>
</tr>
</tbody>
</table>
<h2 dir="auto"><a id="user-content-overview" class="anchor" aria-hidden="true" href="#overview"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Overview</h2>
<p dir="auto">The visualization of numerical results is an important part of finite element (FE) computations. However, before the inception of GridapMakie.jl, the
only approach available to data visualization of <a href="https://github.com/gridap/Gridap.jl">Gridap.jl</a> computations was to write simulation
data to data files (e.g., in vtu format) for later visualization with, e.g., Paraview or VisIt. From the idea of visually inspecting
data from Julia code directly or to manipulate it with packages of the Julia
open-source package ecosystem, <a href="https://github.com/gridap/GridapMakie.jl">GridapMakie.jl</a> is born. As a part of the Google Summer of
Code 2021 program, GridapMakie adopts <a href="https://github.com/JuliaPlots/Makie.jl">Makie.jl</a> as a second visualization back-end for
Gridap.jl simulations. This package is thought as a built-in tool to assess the user in their FE calculations with a smoother workflow
in a highly intuitive API.</p>
<h2 dir="auto"><a id="user-content-acknowledgement" class="anchor" aria-hidden="true" href="#acknowledgement"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Acknowledgement</h2>
<p dir="auto">A significant part of this package has been developed in the framework of the Google Summer of Code 2021 project <a href="https://summerofcode.withgoogle.com/projects/#6231266174697472" rel="nofollow">[Gridap] Visualizing PDE approximations in Julia with Gridap.jl and Makie.jl</a>.</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">According to Makie's guidelines, it is enough to install one of its backends, e.g. GLMakie. Additionally, Gridap provides the plot objects
to be visualized and <code>FileIO</code> allows to save the figures plotted.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; ]
pkg&gt; add Gridap, GridapMakie, GLMakie, FileIO"><pre>julia<span class="pl-k">&gt;</span> ]
pkg<span class="pl-k">&gt;</span> add Gridap, GridapMakie, GLMakie, FileIO</pre></div>
<h2 dir="auto"><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Examples</h2>
<p dir="auto">First things first, we shall be using the three packages as well as <code>FileIO</code>.
We may as well create directories to store downloaded meshes and output files</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Gridap, GridapMakie, GLMakie
using FileIO
mkdir(&quot;models&quot;)
mkdir(&quot;images&quot;)"><pre><span class="pl-k">using</span> Gridap, GridapMakie, GLMakie
<span class="pl-k">using</span> FileIO
<span class="pl-c1">mkdir</span>(<span class="pl-s"><span class="pl-pds">"</span>models<span class="pl-pds">"</span></span>)
<span class="pl-c1">mkdir</span>(<span class="pl-s"><span class="pl-pds">"</span>images<span class="pl-pds">"</span></span>)</pre></div>
<h3 dir="auto"><a id="user-content-2d-plots" class="anchor" aria-hidden="true" href="#2d-plots"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>2D Plots</h3>
<p dir="auto">Then, let us consider a simple, 2D simplexified cartesian triangulation Ω</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="domain = (0, 1, 0, 1)
cell_nums = (10, 10)
model = CartesianDiscreteModel(domain, cell_nums) |&gt; simplexify
Ω = Triangulation(model)"><pre>domain <span class="pl-k">=</span> (<span class="pl-c1">0</span>, <span class="pl-c1">1</span>, <span class="pl-c1">0</span>, <span class="pl-c1">1</span>)
cell_nums <span class="pl-k">=</span> (<span class="pl-c1">10</span>, <span class="pl-c1">10</span>)
model <span class="pl-k">=</span> <span class="pl-c1">CartesianDiscreteModel</span>(domain, cell_nums) <span class="pl-k">|&gt;</span> simplexify
Ω <span class="pl-k">=</span> <span class="pl-c1">Triangulation</span>(model)</pre></div>
<p dir="auto">The visualization of the vertices, edges, and faces of Ω can be achieved as follows</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="fig = plot(Ω)
wireframe!(Ω, color=:black, linewidth=2)
scatter!(Ω, marker=:star8, markersize=20, color=:blue)
save(&quot;images/2d_Fig1.png&quot;, fig)"><pre>fig <span class="pl-k">=</span> <span class="pl-c1">plot</span>(Ω)
<span class="pl-c1">wireframe!</span>(Ω, color<span class="pl-k">=</span><span class="pl-c1">:black</span>, linewidth<span class="pl-k">=</span><span class="pl-c1">2</span>)
<span class="pl-c1">scatter!</span>(Ω, marker<span class="pl-k">=</span><span class="pl-c1">:star8</span>, markersize<span class="pl-k">=</span><span class="pl-c1">20</span>, color<span class="pl-k">=</span><span class="pl-c1">:blue</span>)
<span class="pl-c1">save</span>(<span class="pl-s"><span class="pl-pds">"</span>images/2d_Fig1.png<span class="pl-pds">"</span></span>, fig)</pre></div>
<p align="center" dir="auto">
<a target="_blank" rel="noopener noreferrer" href="_readme/images/2d_Fig1.png"><img src="_readme/images/2d_Fig1.png" width="500" style="max-width: 100%;"></a>
</p>
<p dir="auto">We now consider a FE function <code>uh</code> constructed with Gridap</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="reffe = ReferenceFE(lagrangian, Float64, 1)
V = FESpace(model, reffe)
uh = interpolate(x-&gt;sin(π*(x[1]+x[2])), V)"><pre>reffe <span class="pl-k">=</span> <span class="pl-c1">ReferenceFE</span>(lagrangian, Float64, <span class="pl-c1">1</span>)
V <span class="pl-k">=</span> <span class="pl-c1">FESpace</span>(model, reffe)
uh <span class="pl-k">=</span> <span class="pl-c1">interpolate</span>(x<span class="pl-k">-&gt;</span><span class="pl-c1">sin</span>(π<span class="pl-k">*</span>(x[<span class="pl-c1">1</span>]<span class="pl-k">+</span>x[<span class="pl-c1">2</span>])), V)</pre></div>
<p dir="auto">and plot it over Ω, adding a colorbar</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="fig, _ , plt = plot(Ω, uh)
Colorbar(fig[1,2], plt)
save(&quot;images/2d_Fig11.png&quot;, fig)"><pre>fig, _ , plt <span class="pl-k">=</span> <span class="pl-c1">plot</span>(Ω, uh)
<span class="pl-c1">Colorbar</span>(fig[<span class="pl-c1">1</span>,<span class="pl-c1">2</span>], plt)
<span class="pl-c1">save</span>(<span class="pl-s"><span class="pl-pds">"</span>images/2d_Fig11.png<span class="pl-pds">"</span></span>, fig)</pre></div>
<p align="center" dir="auto">
<a target="_blank" rel="noopener noreferrer" href="_readme/images/2d_Fig11.png"><img src="_readme/images/2d_Fig11.png" width="500" style="max-width: 100%;"></a>
</p>
<p dir="auto">On the other hand, we may as well plot cell values</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="celldata = π*rand(num_cells(Ω)) .-1
fig, _ , plt = plot(Ω, color=celldata, colormap=:heat)
Colorbar(fig[2,1], plt, vertical=false)
save(&quot;images/2d_Fig13.png&quot;, fig)"><pre>celldata <span class="pl-k">=</span> π<span class="pl-k">*</span><span class="pl-c1">rand</span>(<span class="pl-c1">num_cells</span>(Ω)) <span class="pl-k">.-</span><span class="pl-c1">1</span>
fig, _ , plt <span class="pl-k">=</span> <span class="pl-c1">plot</span>(Ω, color<span class="pl-k">=</span>celldata, colormap<span class="pl-k">=</span><span class="pl-c1">:heat</span>)
<span class="pl-c1">Colorbar</span>(fig[<span class="pl-c1">2</span>,<span class="pl-c1">1</span>], plt, vertical<span class="pl-k">=</span><span class="pl-c1">false</span>)
<span class="pl-c1">save</span>(<span class="pl-s"><span class="pl-pds">"</span>images/2d_Fig13.png<span class="pl-pds">"</span></span>, fig)</pre></div>
<p align="center" dir="auto">
<a target="_blank" rel="noopener noreferrer" href="_readme/images/2d_Fig13.png"><img src="_readme/images/2d_Fig13.png" width="500" style="max-width: 100%;"></a>
</p>
<p dir="auto">If we are only interested in the boundary of Ω, namely Γ</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Γ = BoundaryTriangulation(model)
fig, _ , plt = plot(Γ, uh, colormap=:algae, linewidth=10)
Colorbar(fig[1,2], plt)
save(&quot;images/2d_Fig111.png&quot;, fig)"><pre>Γ <span class="pl-k">=</span> <span class="pl-c1">BoundaryTriangulation</span>(model)
fig, _ , plt <span class="pl-k">=</span> <span class="pl-c1">plot</span>(Γ, uh, colormap<span class="pl-k">=</span><span class="pl-c1">:algae</span>, linewidth<span class="pl-k">=</span><span class="pl-c1">10</span>)
<span class="pl-c1">Colorbar</span>(fig[<span class="pl-c1">1</span>,<span class="pl-c1">2</span>], plt)
<span class="pl-c1">save</span>(<span class="pl-s"><span class="pl-pds">"</span>images/2d_Fig111.png<span class="pl-pds">"</span></span>, fig)</pre></div>
<p align="center" dir="auto">
<a target="_blank" rel="noopener noreferrer" href="_readme/images/2d_Fig111.png"><img src="_readme/images/2d_Fig111.png" width="500" style="max-width: 100%;"></a>
</p>
<h3 dir="auto"><a id="user-content-3d-plots" class="anchor" aria-hidden="true" href="#3d-plots"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>3D Plots</h3>
<p dir="auto">In addition to the 2D plots, GridapMakie is able to handle more complex geometries. For example,
take the mesh from the <a href="https://gridap.github.io/Tutorials/stable/pages/t001_poisson/#Tutorial-1:-Poisson-equation-1" rel="nofollow">first Gridap tutorial</a>,
which can be downloaded using</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="url = &quot;https://github.com/gridap/GridapMakie.jl/raw/d5d74190e68bd310483fead8a4154235a61815c5/_readme/model.json&quot;
download(url,&quot;models/model.json&quot;)"><pre>url <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>https://github.com/gridap/GridapMakie.jl/raw/d5d74190e68bd310483fead8a4154235a61815c5/_readme/model.json<span class="pl-pds">"</span></span>
<span class="pl-c1">download</span>(url,<span class="pl-s"><span class="pl-pds">"</span>models/model.json<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">Therefore, we may as well visualize such mesh</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="model = DiscreteModelFromFile(&quot;models/model.json&quot;)
Ω = Triangulation(model)
∂Ω = BoundaryTriangulation(model)
fig = plot(Ω, shading=true)
wireframe!(∂Ω, color=:black)
save(&quot;images/3d_Fig1.png&quot;, fig)"><pre>model <span class="pl-k">=</span> <span class="pl-c1">DiscreteModelFromFile</span>(<span class="pl-s"><span class="pl-pds">"</span>models/model.json<span class="pl-pds">"</span></span>)
Ω <span class="pl-k">=</span> <span class="pl-c1">Triangulation</span>(model)
∂Ω <span class="pl-k">=</span> <span class="pl-c1">BoundaryTriangulation</span>(model)
fig <span class="pl-k">=</span> <span class="pl-c1">plot</span>(Ω, shading<span class="pl-k">=</span><span class="pl-c1">true</span>)
<span class="pl-c1">wireframe!</span>(∂Ω, color<span class="pl-k">=</span><span class="pl-c1">:black</span>)
<span class="pl-c1">save</span>(<span class="pl-s"><span class="pl-pds">"</span>images/3d_Fig1.png<span class="pl-pds">"</span></span>, fig)</pre></div>
<p align="center" dir="auto">
<a target="_blank" rel="noopener noreferrer" href="_readme/images/3d_Fig1.png"><img src="_readme/images/3d_Fig1.png" width="500" style="max-width: 100%;"></a>
</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="v(x) = sin(π*(x[1]+x[2]+x[3]))
fig, ax, plt = plot(Ω, v, shading=true)
Colorbar(fig[1,2], plt)
save(&quot;images/3d_Fig2.png&quot;, fig)"><pre><span class="pl-en">v</span>(x) <span class="pl-k">=</span> <span class="pl-c1">sin</span>(π<span class="pl-k">*</span>(x[<span class="pl-c1">1</span>]<span class="pl-k">+</span>x[<span class="pl-c1">2</span>]<span class="pl-k">+</span>x[<span class="pl-c1">3</span>]))
fig, ax, plt <span class="pl-k">=</span> <span class="pl-c1">plot</span>(Ω, v, shading<span class="pl-k">=</span><span class="pl-c1">true</span>)
<span class="pl-c1">Colorbar</span>(fig[<span class="pl-c1">1</span>,<span class="pl-c1">2</span>], plt)
<span class="pl-c1">save</span>(<span class="pl-s"><span class="pl-pds">"</span>images/3d_Fig2.png<span class="pl-pds">"</span></span>, fig)</pre></div>
<p align="center" dir="auto">
<a target="_blank" rel="noopener noreferrer" href="_readme/images/3d_Fig2.png"><img src="_readme/images/3d_Fig2.png" width="500" style="max-width: 100%;"></a>
</p>
<p dir="auto">we can even plot functions in certain subdomains, e.g.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Γ = BoundaryTriangulation(model, tags=[&quot;square&quot;, &quot;triangle&quot;, &quot;circle&quot;])
fig = plot(Γ, v, colormap=:rainbow, shading=true)
wireframe!(∂Ω, linewidth=0.5, color=:gray)
save(&quot;images/3d_Fig3.png&quot;, fig)"><pre>Γ <span class="pl-k">=</span> <span class="pl-c1">BoundaryTriangulation</span>(model, tags<span class="pl-k">=</span>[<span class="pl-s"><span class="pl-pds">"</span>square<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>triangle<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>circle<span class="pl-pds">"</span></span>])
fig <span class="pl-k">=</span> <span class="pl-c1">plot</span>(Γ, v, colormap<span class="pl-k">=</span><span class="pl-c1">:rainbow</span>, shading<span class="pl-k">=</span><span class="pl-c1">true</span>)
<span class="pl-c1">wireframe!</span>(∂Ω, linewidth<span class="pl-k">=</span><span class="pl-c1">0.5</span>, color<span class="pl-k">=</span><span class="pl-c1">:gray</span>)
<span class="pl-c1">save</span>(<span class="pl-s"><span class="pl-pds">"</span>images/3d_Fig3.png<span class="pl-pds">"</span></span>, fig)</pre></div>
<p align="center" dir="auto">
<a target="_blank" rel="noopener noreferrer" href="_readme/images/3d_Fig3.png"><img src="_readme/images/3d_Fig3.png" width="500" style="max-width: 100%;"></a>
</p>
<h3 dir="auto"><a id="user-content-animations-and-interactivity" class="anchor" aria-hidden="true" href="#animations-and-interactivity"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Animations and interactivity</h3>
<p dir="auto">Finally, by using Makie <a href="https://makie.juliaplots.org/stable/interaction/nodes.html" rel="nofollow">Observables</a>, we
can create animations or interactive plots. For example, if the nodal field has a time dependence</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="t = Observable(0.0)
u = lift(t) do t
    x-&gt;sin(π*(x[1]+x[2]+x[3]))*cos(π*t)
end
fig = plot(Ω, u, colormap=:rainbow, shading=true, colorrange=(-1,1))
wireframe!(∂Ω, color=:black, linewidth=0.5)
framerate = 30
timestamps = range(0, 2, step=1/framerate)
record(fig, &quot;images/animation.gif&quot;, timestamps; framerate=framerate) do this_t
    t[] = this_t
end"><pre>t <span class="pl-k">=</span> <span class="pl-c1">Observable</span>(<span class="pl-c1">0.0</span>)
u <span class="pl-k">=</span> <span class="pl-c1">lift</span>(t) <span class="pl-k">do</span> t
    x<span class="pl-k">-&gt;</span><span class="pl-c1">sin</span>(π<span class="pl-k">*</span>(x[<span class="pl-c1">1</span>]<span class="pl-k">+</span>x[<span class="pl-c1">2</span>]<span class="pl-k">+</span>x[<span class="pl-c1">3</span>]))<span class="pl-k">*</span><span class="pl-c1">cos</span>(π<span class="pl-k">*</span>t)
<span class="pl-k">end</span>
fig <span class="pl-k">=</span> <span class="pl-c1">plot</span>(Ω, u, colormap<span class="pl-k">=</span><span class="pl-c1">:rainbow</span>, shading<span class="pl-k">=</span><span class="pl-c1">true</span>, colorrange<span class="pl-k">=</span>(<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">1</span>))
<span class="pl-c1">wireframe!</span>(∂Ω, color<span class="pl-k">=</span><span class="pl-c1">:black</span>, linewidth<span class="pl-k">=</span><span class="pl-c1">0.5</span>)
framerate <span class="pl-k">=</span> <span class="pl-c1">30</span>
timestamps <span class="pl-k">=</span> <span class="pl-c1">range</span>(<span class="pl-c1">0</span>, <span class="pl-c1">2</span>, step<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">/</span>framerate)
<span class="pl-c1">record</span>(fig, <span class="pl-s"><span class="pl-pds">"</span>images/animation.gif<span class="pl-pds">"</span></span>, timestamps; framerate<span class="pl-k">=</span>framerate) <span class="pl-k">do</span> this_t
    t[] <span class="pl-k">=</span> this_t
<span class="pl-k">end</span></pre></div>
<p align="center" dir="auto">
<a target="_blank" rel="noopener noreferrer" href="_readme/images/animation.gif"><img src="_readme/images/animation.gif" width="500" data-animated-image="" style="max-width: 100%;"></a>
</p>
<hr>
<p dir="auto"><em>This page was generated using <a href="https://github.com/fredrikekre/Literate.jl">Literate.jl</a>.</em></p>
</article></div>