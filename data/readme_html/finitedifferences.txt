<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-finitedifferencesjl-finite-difference-methods" class="anchor" aria-hidden="true" href="#finitedifferencesjl-finite-difference-methods"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>FiniteDifferences.jl: Finite Difference Methods</h1>
<p dir="auto"><a href="https://github.com/JuliaDiff/FiniteDifferences.jl/actions?query=workflow%3ACI"><img src="https://github.com/JuliaDiff/FiniteDifferences.jl/workflows/CI/badge.svg?branch=main" alt="CI" style="max-width: 100%;"></a>
<a href="https://travis-ci.org/JuliaDiff/FiniteDifferences.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/526a37df60e1c91367a33afda3ff290cc02677dcf418dbc77b800df4650015c9/68747470733a2f2f7472617669732d63692e6f72672f4a756c6961446966662f46696e697465446966666572656e6365732e6a6c2e7376673f6272616e63683d6d61696e" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaDiff/FiniteDifferences.jl.svg?branch=main" style="max-width: 100%;"></a>
<a href="https://codecov.io/github/JuliaDiff/FiniteDifferences.jl?branch=main" rel="nofollow"><img src="https://camo.githubusercontent.com/4e032560d5573593de4cbf94363a0d879abf5509619a439d70f24447557f5d3c/68747470733a2f2f636f6465636f762e696f2f6769746875622f4a756c6961446966662f46696e697465446966666572656e6365732e6a6c2f636f7665726167652e7376673f6272616e63683d6d61696e" alt="codecov.io" data-canonical-src="https://codecov.io/github/JuliaDiff/FiniteDifferences.jl/coverage.svg?branch=main" style="max-width: 100%;"></a>
<a href="https://juliaci.github.io/NanosoldierReports/pkgeval_badges/report.html" rel="nofollow"><img src="https://camo.githubusercontent.com/fadd176a87a35ef5692debe02938fbaf821dad37a738534f76c7e4348ee04bc2/68747470733a2f2f6a756c696163692e6769746875622e696f2f4e616e6f736f6c646965725265706f7274732f706b676576616c5f6261646765732f462f46696e697465446966666572656e6365732e737667" alt="PkgEval" data-canonical-src="https://juliaci.github.io/NanosoldierReports/pkgeval_badges/F/FiniteDifferences.svg" style="max-width: 100%;"></a></p>
<p dir="auto"><a href="https://juliadiff.org/FiniteDifferences.jl/latest/" rel="nofollow"><img src="https://camo.githubusercontent.com/56f8252ba8e9d3f0b810769543f77823d2fe031ce560d4c2d69fb1fcad800383/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6c61746573742d626c75652e737667" alt="Latest Docs" data-canonical-src="https://img.shields.io/badge/docs-latest-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/invenia/BlueStyle"><img src="https://camo.githubusercontent.com/c18fbaa52d94d16b90b19701fc90d289b8a5bb920c74c79bab200b14e75420a4/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c75652d3434393564312e737667" alt="Code Style: Blue" data-canonical-src="https://img.shields.io/badge/code%20style-blue-4495d1.svg" style="max-width: 100%;"></a>
<a href="https://github.com/SciML/ColPrac"><img src="https://camo.githubusercontent.com/a6c1efcb19a957860ecb25966a730260b03d6e05380d0c27992ee7f9e3b1feb3/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f436f6c507261632d436f6e7472696275746f72277325323047756964652d626c756576696f6c6574" alt="ColPrac: Contributor's Guide on Collaborative Practices for Community Packages" data-canonical-src="https://img.shields.io/badge/ColPrac-Contributor's%20Guide-blueviolet" style="max-width: 100%;"></a>
<a href="https://zenodo.org/badge/latestdoi/117872213" rel="nofollow"><img src="https://camo.githubusercontent.com/ddd73e0be548d774c7f22413d84bee3df767f198f72974331eeb76569aa44651/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f3131373837323231332e737667" alt="DOI" data-canonical-src="https://zenodo.org/badge/117872213.svg" style="max-width: 100%;"></a></p>
<p dir="auto">FiniteDifferences.jl estimates derivatives with <a href="https://en.wikipedia.org/wiki/Finite_difference" rel="nofollow">finite differences</a>.</p>
<p dir="auto">See also the Python package <a href="https://github.com/wesselb/fdm">FDM</a>.</p>
<h4 dir="auto"><a id="user-content-finitediffjl-vs-finitedifferencesjl" class="anchor" aria-hidden="true" href="#finitediffjl-vs-finitedifferencesjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>FiniteDiff.jl vs FiniteDifferences.jl</h4>
<p dir="auto"><a href="https://github.com/JuliaDiff/FiniteDiff.jl">FiniteDiff.jl</a> and <a href="https://github.com/JuliaDiff/FiniteDifferences.jl">FiniteDifferences.jl</a>
are similar libraries: both calculate approximate derivatives numerically.
You should definitely use one or the other, rather than the legacy <a href="https://github.com/JuliaMath/Calculus.jl">Calculus.jl</a> finite differencing, or reimplementing it yourself.
At some point in the future they might merge, or one might depend on the other.
Right now here are the differences:</p>
<ul dir="auto">
<li>FiniteDifferences.jl supports basically any type, whereas FiniteDiff.jl supports only array-ish types</li>
<li>FiniteDifferences.jl supports higher order approximation and step size adaptation</li>
<li>FiniteDiff.jl supports caching and in-place computation</li>
<li>FiniteDiff.jl supports coloring vectors for efficient calculation of sparse Jacobians</li>
</ul>
<h4 dir="auto"><a id="user-content-fdmjl" class="anchor" aria-hidden="true" href="#fdmjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>FDM.jl</h4>
<p dir="auto">This package was formerly called FDM.jl. We recommend users of FDM.jl <a href="https://github.com/JuliaDiff/FiniteDifferences.jl/issues/37" data-hovercard-type="issue" data-hovercard-url="/JuliaDiff/FiniteDifferences.jl/issues/37/hovercard">update to FiniteDifferences.jl</a>.</p>
<h4 dir="auto"><a id="user-content-contents" class="anchor" aria-hidden="true" href="#contents"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Contents</h4>
<ul dir="auto">
<li><a href="#scalar-derivatives">Scalar Derivatives</a>
<ul dir="auto">
<li><a href="#dealing-with-singularities">Dealing with Singularities</a></li>
<li><a href="#dealing-with-numerical-noise">Dealing with Numerical Noise</a></li>
<li><a href="#richardson-extrapolation">Richardson Extrapolation</a></li>
<li><a href="#a-finite-difference-method-on-a-custom-grid">A Finite Difference Method on a Custom Grid</a></li>
</ul>
</li>
<li><a href="#multivariate-derivatives">Multivariate Derivatives</a></li>
</ul>
<h2 dir="auto"><a id="user-content-scalar-derivatives" class="anchor" aria-hidden="true" href="#scalar-derivatives"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Scalar Derivatives</h2>
<p dir="auto">Compute the first derivative of <code>sin</code> with a 5th order central method:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; central_fdm(5, 1)(sin, 1) - cos(1)
-2.4313884239290928e-14"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">central_fdm</span>(<span class="pl-c1">5</span>, <span class="pl-c1">1</span>)(sin, <span class="pl-c1">1</span>) <span class="pl-k">-</span> <span class="pl-c1">cos</span>(<span class="pl-c1">1</span>)
<span class="pl-k">-</span><span class="pl-c1">2.4313884239290928e-14</span></pre></div>
<p dir="auto">Finite difference methods are optimised to minimise allocations:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; m = central_fdm(5, 1);

julia&gt; @benchmark $m(sin, 1)
BenchmarkTools.Trial:
  memory estimate:  0 bytes
  allocs estimate:  0
  --------------
  minimum time:     486.621 ns (0.00% GC)
  median time:      507.677 ns (0.00% GC)
  mean time:        539.806 ns (0.00% GC)
  maximum time:     1.352 μs (0.00% GC)
  --------------
  samples:          10000
  evals/sample:     195"><pre>julia<span class="pl-k">&gt;</span> m <span class="pl-k">=</span> <span class="pl-c1">central_fdm</span>(<span class="pl-c1">5</span>, <span class="pl-c1">1</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@benchmark</span> <span class="pl-k">$</span><span class="pl-c1">m</span>(sin, <span class="pl-c1">1</span>)
BenchmarkTools<span class="pl-k">.</span>Trial<span class="pl-k">:</span>
  memory estimate<span class="pl-k">:</span>  <span class="pl-c1">0</span> bytes
  allocs estimate<span class="pl-k">:</span>  <span class="pl-c1">0</span>
  <span class="pl-k">--------------</span>
  minimum time<span class="pl-k">:</span>     <span class="pl-c1">486.621</span> ns (<span class="pl-c1">0.00</span><span class="pl-k">%</span> GC)
  median time<span class="pl-k">:</span>      <span class="pl-c1">507.677</span> ns (<span class="pl-c1">0.00</span><span class="pl-k">%</span> GC)
  mean time<span class="pl-k">:</span>        <span class="pl-c1">539.806</span> ns (<span class="pl-c1">0.00</span><span class="pl-k">%</span> GC)
  maximum time<span class="pl-k">:</span>     <span class="pl-c1">1.352</span> μs (<span class="pl-c1">0.00</span><span class="pl-k">%</span> GC)
  <span class="pl-k">--------------</span>
  samples<span class="pl-k">:</span>          <span class="pl-c1">10000</span>
  evals<span class="pl-k">/</span>sample<span class="pl-k">:</span>     <span class="pl-c1">195</span></pre></div>
<p dir="auto">Compute the second derivative of <code>sin</code> with a 5th order central method:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; central_fdm(5, 2)(sin, 1) - (-sin(1))
-8.767431225464861e-11"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">central_fdm</span>(<span class="pl-c1">5</span>, <span class="pl-c1">2</span>)(sin, <span class="pl-c1">1</span>) <span class="pl-k">-</span> (<span class="pl-k">-</span><span class="pl-c1">sin</span>(<span class="pl-c1">1</span>))
<span class="pl-k">-</span><span class="pl-c1">8.767431225464861e-11</span></pre></div>
<p dir="auto">To obtain better accuracy, you can increase the order of the method:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; central_fdm(12, 2)(sin, 1) - (-sin(1))
5.240252676230739e-14"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">central_fdm</span>(<span class="pl-c1">12</span>, <span class="pl-c1">2</span>)(sin, <span class="pl-c1">1</span>) <span class="pl-k">-</span> (<span class="pl-k">-</span><span class="pl-c1">sin</span>(<span class="pl-c1">1</span>))
<span class="pl-c1">5.240252676230739e-14</span></pre></div>
<p dir="auto">The functions <code>forward_fdm</code> and <code>backward_fdm</code> can be used to construct
forward differences and backward differences, respectively.</p>
<h3 dir="auto"><a id="user-content-dealing-with-singularities" class="anchor" aria-hidden="true" href="#dealing-with-singularities"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Dealing with Singularities</h3>
<p dir="auto">The function <code>log(x)</code> is only defined for <code>x &gt; 0</code>.
If we try to use <code>central_fdm</code> to estimate the derivative of <code>log</code> near <code>x = 0</code>,
then we run into <code>DomainError</code>s, because <code>central_fdm</code> happens to evaluate <code>log</code>
at some <code>x &lt; 0</code>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; central_fdm(5, 1)(log, 1e-3)
ERROR: DomainError with -0.02069596546590111"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">central_fdm</span>(<span class="pl-c1">5</span>, <span class="pl-c1">1</span>)(log, <span class="pl-c1">1e-3</span>)
ERROR<span class="pl-k">:</span> DomainError with <span class="pl-k">-</span><span class="pl-c1">0.02069596546590111</span></pre></div>
<p dir="auto">To deal with this situation, you have two options.</p>
<p dir="auto">The first option is to use <code>forward_fdm</code>, which only evaluates <code>log</code> at inputs
greater or equal to <code>x</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; forward_fdm(5, 1)(log, 1e-3) - 1000
-3.741856744454708e-7"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">forward_fdm</span>(<span class="pl-c1">5</span>, <span class="pl-c1">1</span>)(log, <span class="pl-c1">1e-3</span>) <span class="pl-k">-</span> <span class="pl-c1">1000</span>
<span class="pl-k">-</span><span class="pl-c1">3.741856744454708e-7</span></pre></div>
<p dir="auto">This works fine, but the downside is that you're restricted to one-sided
methods (<code>forward_fdm</code>), which tend to perform worse than central methods
(<code>central_fdm</code>).</p>
<p dir="auto">The second option is to limit the distance that the finite difference method is
allowed to evaluate <code>log</code> away from <code>x</code>. Since <code>x = 1e-3</code>, a reasonable value
for this limit is <code>9e-4</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; central_fdm(5, 1, max_range=9e-4)(log, 1e-3) - 1000
-4.027924660476856e-10"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">central_fdm</span>(<span class="pl-c1">5</span>, <span class="pl-c1">1</span>, max_range<span class="pl-k">=</span><span class="pl-c1">9e-4</span>)(log, <span class="pl-c1">1e-3</span>) <span class="pl-k">-</span> <span class="pl-c1">1000</span>
<span class="pl-k">-</span><span class="pl-c1">4.027924660476856e-10</span></pre></div>
<p dir="auto">Another commonly encountered example is <code>logdet</code>, which is only defined
for positive-definite matrices.
Here you can use a forward method in combination with a positive-definite
deviation from <code>x</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; x = diagm([1.0, 2.0, 3.0]); v = Matrix(1.0I, 3, 3);

julia&gt; forward_fdm(5, 1)(ε -&gt; logdet(x .+ ε .* v), 0) - sum(1 ./ diag(x))
-4.222400207254395e-12"><pre>julia<span class="pl-k">&gt;</span> x <span class="pl-k">=</span> <span class="pl-c1">diagm</span>([<span class="pl-c1">1.0</span>, <span class="pl-c1">2.0</span>, <span class="pl-c1">3.0</span>]); v <span class="pl-k">=</span> <span class="pl-c1">Matrix</span>(<span class="pl-c1">1.0</span>I, <span class="pl-c1">3</span>, <span class="pl-c1">3</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">forward_fdm</span>(<span class="pl-c1">5</span>, <span class="pl-c1">1</span>)(ε <span class="pl-k">-&gt;</span> <span class="pl-c1">logdet</span>(x <span class="pl-k">.+</span> ε <span class="pl-k">.*</span> v), <span class="pl-c1">0</span>) <span class="pl-k">-</span> <span class="pl-c1">sum</span>(<span class="pl-c1">1</span> <span class="pl-k">./</span> <span class="pl-c1">diag</span>(x))
<span class="pl-k">-</span><span class="pl-c1">4.222400207254395e-12</span></pre></div>
<p dir="auto">A range-limited central method is also possible:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; central_fdm(5, 1, max_range=9e-1)(ε -&gt; logdet(x .+ ε .* v), 0) - sum(1 ./ diag(x))
-1.283417816466681e-13"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">central_fdm</span>(<span class="pl-c1">5</span>, <span class="pl-c1">1</span>, max_range<span class="pl-k">=</span><span class="pl-c1">9e-1</span>)(ε <span class="pl-k">-&gt;</span> <span class="pl-c1">logdet</span>(x <span class="pl-k">.+</span> ε <span class="pl-k">.*</span> v), <span class="pl-c1">0</span>) <span class="pl-k">-</span> <span class="pl-c1">sum</span>(<span class="pl-c1">1</span> <span class="pl-k">./</span> <span class="pl-c1">diag</span>(x))
<span class="pl-k">-</span><span class="pl-c1">1.283417816466681e-13</span></pre></div>
<h3 dir="auto"><a id="user-content-dealing-with-numerical-noise" class="anchor" aria-hidden="true" href="#dealing-with-numerical-noise"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Dealing with Numerical Noise</h3>
<p dir="auto">It could be the case that the function <code>f</code> you'd like compute the derivative of
suffers from numerical noise.
For example, <code>f(x)</code> could be computed through some iterative procedure with some
error tolerance <code>ε</code>.
In such cases, finite difference estimates can fail catastrophically.
To illustrate this, consider <code>sin_noisy(x) = sin(x) * (1 + 1e-6 * randn())</code>.
Then</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; central_fdm(5, 1)(sin_noisy, 1) - cos(1)
-0.027016678790599657"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">central_fdm</span>(<span class="pl-c1">5</span>, <span class="pl-c1">1</span>)(sin_noisy, <span class="pl-c1">1</span>) <span class="pl-k">-</span> <span class="pl-c1">cos</span>(<span class="pl-c1">1</span>)
<span class="pl-k">-</span><span class="pl-c1">0.027016678790599657</span></pre></div>
<p dir="auto">which is a terrible performance.
To deal with this, you can set the keyword argument <code>factor</code>, which specifies
the level of numerical noise on the function evaluations relative to the
machine epsilon.
In this example, the relative error on the function evaluations
is <code>2e-6</code> (<code>1e-6 * randn()</code> roughly produces a number in <code>[-2e-6, 2e-6]</code>)
and the machine epsilon is <code>eps(Float64) ≈ 2.22e-16</code>, so
<code>factor = 2e-6 / 2e-16 = 1e10</code> should be appropriate:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; central_fdm(5, 1; factor=1e10)(sin_noisy, 1) - cos(1)
-1.9243663490486895e-6"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">central_fdm</span>(<span class="pl-c1">5</span>, <span class="pl-c1">1</span>; factor<span class="pl-k">=</span><span class="pl-c1">1e10</span>)(sin_noisy, <span class="pl-c1">1</span>) <span class="pl-k">-</span> <span class="pl-c1">cos</span>(<span class="pl-c1">1</span>)
<span class="pl-k">-</span><span class="pl-c1">1.9243663490486895e-6</span></pre></div>
<p dir="auto">As a rule of thumb, if you're dealing with numerical noise and <code>Float64</code>s,
<code>factor = 1e6</code> is not a bad first attempt.</p>
<h3 dir="auto"><a id="user-content-richardson-extrapolation" class="anchor" aria-hidden="true" href="#richardson-extrapolation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Richardson Extrapolation</h3>
<p dir="auto">The finite difference methods defined in this package can be extrapolated using
<a href="https://github.com/JuliaMath/Richardson.jl">Richardson extrapolation</a>.
This can offer superior numerical accuracy:
Richardson extrapolation attempts polynomial extrapolation of the finite
difference estimate as a function of the step size until a convergence criterion
is reached.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; extrapolate_fdm(central_fdm(2, 1), sin, 1)[1] - cos(1)
1.6653345369377348e-14"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">extrapolate_fdm</span>(<span class="pl-c1">central_fdm</span>(<span class="pl-c1">2</span>, <span class="pl-c1">1</span>), sin, <span class="pl-c1">1</span>)[<span class="pl-c1">1</span>] <span class="pl-k">-</span> <span class="pl-c1">cos</span>(<span class="pl-c1">1</span>)
<span class="pl-c1">1.6653345369377348e-14</span></pre></div>
<p dir="auto">Similarly, you can estimate higher order derivatives:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; extrapolate_fdm(central_fdm(5, 4), sin, 1)[1] - sin(1)
-1.626274487942503e-5"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">extrapolate_fdm</span>(<span class="pl-c1">central_fdm</span>(<span class="pl-c1">5</span>, <span class="pl-c1">4</span>), sin, <span class="pl-c1">1</span>)[<span class="pl-c1">1</span>] <span class="pl-k">-</span> <span class="pl-c1">sin</span>(<span class="pl-c1">1</span>)
<span class="pl-k">-</span><span class="pl-c1">1.626274487942503e-5</span></pre></div>
<p dir="auto">In this case, the accuracy can be improved by making the
<a href="https://github.com/JuliaMath/Richardson.jl#usage">contraction rate</a> closer to
<code>1</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; extrapolate_fdm(central_fdm(5, 4), sin, 1, contract=0.8)[1] - sin(1)
2.0725743343774639e-10"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">extrapolate_fdm</span>(<span class="pl-c1">central_fdm</span>(<span class="pl-c1">5</span>, <span class="pl-c1">4</span>), sin, <span class="pl-c1">1</span>, contract<span class="pl-k">=</span><span class="pl-c1">0.8</span>)[<span class="pl-c1">1</span>] <span class="pl-k">-</span> <span class="pl-c1">sin</span>(<span class="pl-c1">1</span>)
<span class="pl-c1">2.0725743343774639e-10</span></pre></div>
<p dir="auto">This performs similarly to a <code>10</code>th order central method:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; central_fdm(10, 4)(sin, 1) - sin(1)
-1.0301381969668455e-10"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">central_fdm</span>(<span class="pl-c1">10</span>, <span class="pl-c1">4</span>)(sin, <span class="pl-c1">1</span>) <span class="pl-k">-</span> <span class="pl-c1">sin</span>(<span class="pl-c1">1</span>)
<span class="pl-k">-</span><span class="pl-c1">1.0301381969668455e-10</span></pre></div>
<p dir="auto">If you really want, you can even extrapolate the <code>10</code>th order central method,
but that provides no further gains:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; extrapolate_fdm(central_fdm(10, 4), sin, 1, contract=0.8)[1] - sin(1)
5.673617131662922e-10"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">extrapolate_fdm</span>(<span class="pl-c1">central_fdm</span>(<span class="pl-c1">10</span>, <span class="pl-c1">4</span>), sin, <span class="pl-c1">1</span>, contract<span class="pl-k">=</span><span class="pl-c1">0.8</span>)[<span class="pl-c1">1</span>] <span class="pl-k">-</span> <span class="pl-c1">sin</span>(<span class="pl-c1">1</span>)
<span class="pl-c1">5.673617131662922e-10</span></pre></div>
<p dir="auto">In this case, the central method can be pushed to a high order to obtain
improved accuracy:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; central_fdm(20, 4)(sin, 1) - sin(1)
-5.2513549064769904e-14"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">central_fdm</span>(<span class="pl-c1">20</span>, <span class="pl-c1">4</span>)(sin, <span class="pl-c1">1</span>) <span class="pl-k">-</span> <span class="pl-c1">sin</span>(<span class="pl-c1">1</span>)
<span class="pl-k">-</span><span class="pl-c1">5.2513549064769904e-14</span></pre></div>
<h3 dir="auto"><a id="user-content-a-finite-difference-method-on-a-custom-grid" class="anchor" aria-hidden="true" href="#a-finite-difference-method-on-a-custom-grid"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>A Finite Difference Method on a Custom Grid</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; method = FiniteDifferenceMethod([-2, 0, 5], 1)
FiniteDifferenceMethod:
  order of method:       3
  order of derivative:   1
  grid:                  [-2, 0, 5]
  coefficients:          [-0.35714285714285715, 0.3, 0.05714285714285714]

julia&gt; method(sin, 1) - cos(1)
-3.701483564100272e-13"><pre>julia<span class="pl-k">&gt;</span> method <span class="pl-k">=</span> <span class="pl-c1">FiniteDifferenceMethod</span>([<span class="pl-k">-</span><span class="pl-c1">2</span>, <span class="pl-c1">0</span>, <span class="pl-c1">5</span>], <span class="pl-c1">1</span>)
FiniteDifferenceMethod<span class="pl-k">:</span>
  order of method<span class="pl-k">:</span>       <span class="pl-c1">3</span>
  order of derivative<span class="pl-k">:</span>   <span class="pl-c1">1</span>
  grid<span class="pl-k">:</span>                  [<span class="pl-k">-</span><span class="pl-c1">2</span>, <span class="pl-c1">0</span>, <span class="pl-c1">5</span>]
  coefficients<span class="pl-k">:</span>          [<span class="pl-k">-</span><span class="pl-c1">0.35714285714285715</span>, <span class="pl-c1">0.3</span>, <span class="pl-c1">0.05714285714285714</span>]

julia<span class="pl-k">&gt;</span> <span class="pl-c1">method</span>(sin, <span class="pl-c1">1</span>) <span class="pl-k">-</span> <span class="pl-c1">cos</span>(<span class="pl-c1">1</span>)
<span class="pl-k">-</span><span class="pl-c1">3.701483564100272e-13</span></pre></div>
<h2 dir="auto"><a id="user-content-multivariate-derivatives" class="anchor" aria-hidden="true" href="#multivariate-derivatives"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Multivariate Derivatives</h2>
<p dir="auto">Consider a quadratic function:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; a = randn(3, 3); a = a * a'
3×3 Matrix{Float64}:
  4.31995    -2.80614   0.0829128
 -2.80614     3.91982   0.764388
  0.0829128   0.764388  1.18055

julia&gt; f(x) = 0.5 * x' * a * x"><pre>julia<span class="pl-k">&gt;</span> a <span class="pl-k">=</span> <span class="pl-c1">randn</span>(<span class="pl-c1">3</span>, <span class="pl-c1">3</span>); a <span class="pl-k">=</span> a <span class="pl-k">*</span> a<span class="pl-k">'</span>
<span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">3</span> Matrix{Float64}<span class="pl-k">:</span>
  <span class="pl-c1">4.31995</span>    <span class="pl-k">-</span><span class="pl-c1">2.80614</span>   <span class="pl-c1">0.0829128</span>
 <span class="pl-k">-</span><span class="pl-c1">2.80614</span>     <span class="pl-c1">3.91982</span>   <span class="pl-c1">0.764388</span>
  <span class="pl-c1">0.0829128</span>   <span class="pl-c1">0.764388</span>  <span class="pl-c1">1.18055</span>

julia<span class="pl-k">&gt;</span> <span class="pl-en">f</span>(x) <span class="pl-k">=</span> <span class="pl-c1">0.5</span> <span class="pl-k">*</span> x<span class="pl-k">'</span> <span class="pl-k">*</span> a <span class="pl-k">*</span> x</pre></div>
<p dir="auto">Compute the gradient:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; x = randn(3)
3-element Vector{Float64}:
 -0.18563161988700727
 -0.4659836395595666
  2.304584409826511

julia&gt; grad(central_fdm(5, 1), f, x)[1] - a * x
3-element Vector{Float64}:
  4.1744385725905886e-14
 -6.611378111642807e-14
 -8.615330671091215e-14"><pre>julia<span class="pl-k">&gt;</span> x <span class="pl-k">=</span> <span class="pl-c1">randn</span>(<span class="pl-c1">3</span>)
<span class="pl-c1">3</span><span class="pl-k">-</span>element Vector{Float64}<span class="pl-k">:</span>
 <span class="pl-k">-</span><span class="pl-c1">0.18563161988700727</span>
 <span class="pl-k">-</span><span class="pl-c1">0.4659836395595666</span>
  <span class="pl-c1">2.304584409826511</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">grad</span>(<span class="pl-c1">central_fdm</span>(<span class="pl-c1">5</span>, <span class="pl-c1">1</span>), f, x)[<span class="pl-c1">1</span>] <span class="pl-k">-</span> a <span class="pl-k">*</span> x
<span class="pl-c1">3</span><span class="pl-k">-</span>element Vector{Float64}<span class="pl-k">:</span>
  <span class="pl-c1">4.1744385725905886e-14</span>
 <span class="pl-k">-</span><span class="pl-c1">6.611378111642807e-14</span>
 <span class="pl-k">-</span><span class="pl-c1">8.615330671091215e-14</span></pre></div>
<p dir="auto">Compute the Jacobian:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; jacobian(central_fdm(5, 1), f, x)[1] - (a * x)'
1×3 Matrix{Float64}:
 4.17444e-14  -6.61138e-14  -8.61533e-14"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">jacobian</span>(<span class="pl-c1">central_fdm</span>(<span class="pl-c1">5</span>, <span class="pl-c1">1</span>), f, x)[<span class="pl-c1">1</span>] <span class="pl-k">-</span> (a <span class="pl-k">*</span> x)<span class="pl-k">'</span>
<span class="pl-c1">1</span><span class="pl-k">×</span><span class="pl-c1">3</span> Matrix{Float64}<span class="pl-k">:</span>
 <span class="pl-c1">4.17444e-14</span>  <span class="pl-k">-</span><span class="pl-c1">6.61138e-14</span>  <span class="pl-k">-</span><span class="pl-c1">8.61533e-14</span></pre></div>
<p dir="auto">The Jacobian can also be computed for non-scalar functions:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; a = randn(3, 3)
3×3 Matrix{Float64}:
  0.844846   1.04772    1.0173
 -0.867721   0.154146  -0.938077
  1.34078   -0.630105  -1.13287

julia&gt; f(x) = a * x

julia&gt; jacobian(central_fdm(5, 1), f, x)[1] - a
3×3 Matrix{Float64}:
  2.91989e-14   1.77636e-15   4.996e-14
 -5.55112e-15  -7.63278e-15   2.4758e-14
  4.66294e-15  -2.05391e-14  -1.04361e-14"><pre>julia<span class="pl-k">&gt;</span> a <span class="pl-k">=</span> <span class="pl-c1">randn</span>(<span class="pl-c1">3</span>, <span class="pl-c1">3</span>)
<span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">3</span> Matrix{Float64}<span class="pl-k">:</span>
  <span class="pl-c1">0.844846</span>   <span class="pl-c1">1.04772</span>    <span class="pl-c1">1.0173</span>
 <span class="pl-k">-</span><span class="pl-c1">0.867721</span>   <span class="pl-c1">0.154146</span>  <span class="pl-k">-</span><span class="pl-c1">0.938077</span>
  <span class="pl-c1">1.34078</span>   <span class="pl-k">-</span><span class="pl-c1">0.630105</span>  <span class="pl-k">-</span><span class="pl-c1">1.13287</span>

julia<span class="pl-k">&gt;</span> <span class="pl-en">f</span>(x) <span class="pl-k">=</span> a <span class="pl-k">*</span> x

julia<span class="pl-k">&gt;</span> <span class="pl-c1">jacobian</span>(<span class="pl-c1">central_fdm</span>(<span class="pl-c1">5</span>, <span class="pl-c1">1</span>), f, x)[<span class="pl-c1">1</span>] <span class="pl-k">-</span> a
<span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">3</span> Matrix{Float64}<span class="pl-k">:</span>
  <span class="pl-c1">2.91989e-14</span>   <span class="pl-c1">1.77636e-15</span>   <span class="pl-c1">4.996e-14</span>
 <span class="pl-k">-</span><span class="pl-c1">5.55112e-15</span>  <span class="pl-k">-</span><span class="pl-c1">7.63278e-15</span>   <span class="pl-c1">2.4758e-14</span>
  <span class="pl-c1">4.66294e-15</span>  <span class="pl-k">-</span><span class="pl-c1">2.05391e-14</span>  <span class="pl-k">-</span><span class="pl-c1">1.04361e-14</span></pre></div>
<p dir="auto">To compute Jacobian--vector products, use <code>jvp</code> and <code>j′vp</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; v = randn(3)
3-element Array{Float64,1}:
 -1.290782164377614
 -0.37701592844250903
 -1.4288108966380777

julia&gt; jvp(central_fdm(5, 1), f, (x, v)) - a * v
3-element Vector{Float64}:
 -7.993605777301127e-15
 -8.881784197001252e-16
 -3.22519788653608e-14

julia&gt; j′vp(central_fdm(5, 1), f, x, v)[1] - a'x
3-element Vector{Float64}:
 -2.1316282072803006e-14
  2.4646951146678475e-14
  6.661338147750939e-15"><pre>julia<span class="pl-k">&gt;</span> v <span class="pl-k">=</span> <span class="pl-c1">randn</span>(<span class="pl-c1">3</span>)
<span class="pl-c1">3</span><span class="pl-k">-</span>element Array{Float64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-k">-</span><span class="pl-c1">1.290782164377614</span>
 <span class="pl-k">-</span><span class="pl-c1">0.37701592844250903</span>
 <span class="pl-k">-</span><span class="pl-c1">1.4288108966380777</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">jvp</span>(<span class="pl-c1">central_fdm</span>(<span class="pl-c1">5</span>, <span class="pl-c1">1</span>), f, (x, v)) <span class="pl-k">-</span> a <span class="pl-k">*</span> v
<span class="pl-c1">3</span><span class="pl-k">-</span>element Vector{Float64}<span class="pl-k">:</span>
 <span class="pl-k">-</span><span class="pl-c1">7.993605777301127e-15</span>
 <span class="pl-k">-</span><span class="pl-c1">8.881784197001252e-16</span>
 <span class="pl-k">-</span><span class="pl-c1">3.22519788653608e-14</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">j′vp</span>(<span class="pl-c1">central_fdm</span>(<span class="pl-c1">5</span>, <span class="pl-c1">1</span>), f, x, v)[<span class="pl-c1">1</span>] <span class="pl-k">-</span> a<span class="pl-k">'</span>x
<span class="pl-c1">3</span><span class="pl-k">-</span>element Vector{Float64}<span class="pl-k">:</span>
 <span class="pl-k">-</span><span class="pl-c1">2.1316282072803006e-14</span>
  <span class="pl-c1">2.4646951146678475e-14</span>
  <span class="pl-c1">6.661338147750939e-15</span></pre></div>
</article></div>