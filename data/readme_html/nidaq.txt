<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-national-instruments-data-acquisition-interface" class="anchor" aria-hidden="true" href="#national-instruments-data-acquisition-interface"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>National Instruments Data Acquisition Interface</h1>
<p dir="auto">This package provides an interface to NI-DAQmx--- National Instruments' driver
for their data acquisition boards.  Their entire C header file was ported
using <a href="https://github.com/ihnorton/Clang.jl">Clang.jl</a>, and a rudimentary
higher-level API is provided for ease of use.</p>
<p dir="auto">Similar functionality for the Python language is provided by
<a href="https://pythonhosted.org/PyDAQmx" rel="nofollow">PyDAQmx</a>.</p>
<h1 dir="auto"><a id="user-content-system-requirements" class="anchor" aria-hidden="true" href="#system-requirements"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>System Requirements</h1>
<p dir="auto"><strong>General</strong></p>
<ul dir="auto">
<li>Supports Windows and Linux</li>
<li>NI-DAQmx Base is not supported</li>
</ul>
<p dir="auto"><strong>Linux specific</strong></p>
<ul dir="auto">
<li>Requires the latest DAQmx (currently 20.1)</li>
<li>DAQmx on linux does not support USB DAQ devices</li>
</ul>
<h1 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h1>
<p dir="auto"><strong>Windows</strong><br>
First download and install NI-DAQmx version
<a href="https://www.ni.com/en-us/support/downloads/drivers/download.ni-daqmx.html#348669" rel="nofollow">20.1</a> (or
<a href="https://www.ni.com/en-us/support/downloads/drivers/download/packaged.ni-daqmx.333268.html" rel="nofollow">19.6</a>,
<a href="http://www.ni.com/en-us/support/downloads/drivers/download/unpackaged.ni-daqmx.291872.html" rel="nofollow">18.6</a>;
or for Julia 0.6, <a href="http://www.ni.com/download/ni-daqmx-17.1/6836/en/" rel="nofollow">17.1.0</a>;
or for Julia 0.5, <a href="http://www.ni.com/download/ni-daqmx-16.0/6120/en/" rel="nofollow">16.0.0</a>;
or for Julia 0.4, <a href="http://www.ni.com/download/ni-daqmx-15.1.1/5665/en/" rel="nofollow">15.1.1</a>;
or for Julia 0.3, <a href="http://www.ni.com/download/ni-daqmx-14.1/4953/en/" rel="nofollow">14.1.0</a>,
<a href="http://www.ni.com/download/ni-daqmx-14.0/4918/en/" rel="nofollow">14.0.0</a>, or
<a href="http://www.ni.com/download/ni-daqmx-9.6/3423/en/" rel="nofollow">9.6.0</a>) from National
Instruments.</p>
<p dir="auto"><strong>Linux</strong><br>
The package only supports DAQmx 20.1 on linux. Follow the instructions from this <a href="https://www.ni.com/en-us/support/documentation/supplemental/18/downloading-and-installing-ni-driver-software-on-linux-desktop.html" rel="nofollow">support doc</a>.</p>
<p dir="auto"><strong>Adding <code>NIDAQ.jl</code></strong><br>
Then on the Julia command line:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="]add NIDAQ"><pre class="notranslate"><code>]add NIDAQ
</code></pre></div>
<h1 dir="auto"><a id="user-content-basic-usage" class="anchor" aria-hidden="true" href="#basic-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Basic Usage</h1>
<p dir="auto">With no input arguments, the high-level <code>getproperties</code> function can
be used to query the system:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; using NIDAQ

julia&gt; getproperties()
Dict{String,Tuple{Any,Bool}} with 7 entries:
  &quot;DevNames&quot;           =&gt; (SubString{String}[&quot;Dev1&quot;],false)
  &quot;GlobalChans&quot;        =&gt; (SubString{String}[&quot;&quot;],false)
  &quot;NIDAQMajorVersion&quot;  =&gt; (0x00000010,false)
  &quot;NIDAQMinorVersion&quot;  =&gt; (0x00000000,false)
  &quot;NIDAQUpdateVersion&quot; =&gt; (0x00000000,false)
  &quot;Scales&quot;             =&gt; (SubString{String}[&quot;&quot;],false)
  &quot;Tasks&quot;              =&gt; (SubString{String}[&quot;&quot;],false)"><pre class="notranslate"><code>julia&gt; using NIDAQ

julia&gt; getproperties()
Dict{String,Tuple{Any,Bool}} with 7 entries:
  "DevNames"           =&gt; (SubString{String}["Dev1"],false)
  "GlobalChans"        =&gt; (SubString{String}[""],false)
  "NIDAQMajorVersion"  =&gt; (0x00000010,false)
  "NIDAQMinorVersion"  =&gt; (0x00000000,false)
  "NIDAQUpdateVersion" =&gt; (0x00000000,false)
  "Scales"             =&gt; (SubString{String}[""],false)
  "Tasks"              =&gt; (SubString{String}[""],false)
</code></pre></div>
<p dir="auto">Returned is a dictionary of tuples, the first member indicating the property value and
the second a boolean indicating whether the former is mutable.</p>
<p dir="auto"><code>getproperties</code> can also input a string containing the name of a data acquisition device:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; getproperties(&quot;Dev1&quot;)
Dict{String,Tuple{Any,Bool}} with 61 entries:
  &quot;AIBridgeRngs&quot;                           =&gt; (Float64[],false)
  &quot;AICouplings&quot;                            =&gt; (:Val_Transferred_From_Buffer,false)
  &quot;AICurrentIntExcitDiscreteVals&quot;          =&gt; (Float64[],false)
  &quot;AICurrentRngs&quot;                          =&gt; (Float64[],false)
  &quot;AIDigFltrLowpassCutoffFreqDiscreteVals&quot; =&gt; (Float64[],false)
  &quot;AIDigFltrLowpassCutoffFreqRangeVals&quot;    =&gt; (Float64[],false)
  &quot;AIFreqRngs&quot;                             =&gt; (Float64[],false)
  &quot;AIGains&quot;                                =&gt; (Float64[],false)
  &quot;AILowpassCutoffFreqDiscreteVals&quot;        =&gt; (Float64[],false)
  &quot;AILowpassCutoffFreqRangeVals&quot;           =&gt; (Float64[],false)
  &quot;AIMaxMultiChanRate&quot;                     =&gt; (2.0e6,false)
  &quot;AIMaxSingleChanRate&quot;                    =&gt; (2.0e6,false)
  &quot;AIMinRate&quot;                              =&gt; (0.0232831,false)
  &quot;AIPhysicalChans&quot;                        =&gt; (SubString{String}[&quot;Dev1/ai0&quot;,&quot;Dev1/ai1&quot;,&quot;Dev1/ai2&quot;,&quot;.
  &quot;AIResistanceRngs&quot;                       =&gt; (Float64[],false)
  &quot;AISampModes&quot;                            =&gt; (Symbol[:Val_FiniteSamps,:Val_ContSamps],false)
  &quot;AISupportedMeasTypes&quot;                   =&gt; (Symbol[:Val_Current,:Val_Resistance,:Val_Strain_Gage.
  &quot;AITrigUsage&quot;                            =&gt; (14,false)
  &quot;AIVoltageIntExcitDiscreteVals&quot;          =&gt; (Float64[],false)
  &quot;AIVoltageIntExcitRangeVals&quot;             =&gt; (Float64[],false)
  &quot;AIVoltageRngs&quot;                          =&gt; ([-1.0,1.0,-2.0,2.0,-5.0,5.0,-10.0,10.0],false)
  &quot;AOCurrentRngs&quot;                          =&gt; (Float64[],false)
  &quot;AOGains&quot;                                =&gt; (Float64[],false)
  &quot;AOMaxRate&quot;                              =&gt; (3.33333e6,false)
  &quot;AOMinRate&quot;                              =&gt; (0.0232831,false)
  &quot;AOPhysicalChans&quot;                        =&gt; (SubString{String}[&quot;Dev1/ao0&quot;,&quot;Dev1/ao1&quot;],false)
  &quot;AOSampModes&quot;                            =&gt; (Symbol[:Val_FiniteSamps,:Val_ContSamps],false)
  &quot;AOSupportedOutputTypes&quot;                 =&gt; (Symbol[:Val_Voltage],false)
  &quot;AOTrigUsage&quot;                            =&gt; (10,false)
  &quot;AOVoltageRngs&quot;                          =&gt; ([-5.0,5.0,-10.0,10.0],false)
  &quot;AccessoryProductNums&quot;                   =&gt; (UInt32[0x00000000],false)
  &quot;AccessoryProductTypes&quot;                  =&gt; (SubString{String}[&quot;&quot;],false)
  &quot;AccessorySerialNums&quot;                    =&gt; (UInt32[0x00000000],false)
  &quot;BusType&quot;                                =&gt; (:Val_USB,false)
  &quot;CIMaxSize&quot;                              =&gt; (0x00000020,false)
  &quot;CIMaxTimebase&quot;                          =&gt; (1.0e8,false)
  &quot;CIPhysicalChans&quot;                        =&gt; (SubString{String}[&quot;Dev1/ctr0&quot;,&quot;Dev1/ctr1&quot;,&quot;Dev1/ctr2.
  &quot;CISampModes&quot;                            =&gt; (Symbol[:Val_FiniteSamps,:Val_ContSamps],false)
  &quot;CISupportedMeasTypes&quot;                   =&gt; (Symbol[:Val_CountEdges,:Val_Freq,:Val_Period,:Val_Tw.
  &quot;CITrigUsage&quot;                            =&gt; (42,false)
  &quot;COMaxSize&quot;                              =&gt; (0x00000020,false)
  &quot;COMaxTimebase&quot;                          =&gt; (1.0e8,false)
  &quot;COPhysicalChans&quot;                        =&gt; (SubString{String}[&quot;Dev1/ctr0&quot;,&quot;Dev1/ctr1&quot;,&quot;Dev1/ctr2.
  &quot;COSampModes&quot;                            =&gt; (Symbol[:Val_FiniteSamps,:Val_ContSamps],false)
  &quot;COSupportedOutputTypes&quot;                 =&gt; (Symbol[:Val_Pulse_Freq,:Val_Pulse_Ticks,:Val_Pulse_T.
  &quot;COTrigUsage&quot;                            =&gt; (42,false)
  &quot;ChassisModuleDevNames&quot;                  =&gt; (SubString{String}[&quot;&quot;],false)
  &quot;DILines&quot;                                =&gt; (SubString{String}[&quot;Dev1/port0/line0&quot;,&quot;Dev1/port0/lin.
  &quot;DIMaxRate&quot;                              =&gt; (1.0e7,false)
  &quot;DIPorts&quot;                                =&gt; (SubString{String}[&quot;Dev1/port0&quot;,&quot;Dev1/port1&quot;,&quot;Dev1/po.
  &quot;DITrigUsage&quot;                            =&gt; (14,false)
  &quot;DOLines&quot;                                =&gt; (SubString{String}[&quot;Dev1/port0/line0&quot;,&quot;Dev1/port0/lin.
  &quot;DOMaxRate&quot;                              =&gt; (1.0e7,false)
  &quot;DOPorts&quot;                                =&gt; (SubString{String}[&quot;Dev1/port0&quot;,&quot;Dev1/port1&quot;,&quot;Dev1/po.
  &quot;DOTrigUsage&quot;                            =&gt; (10,false)
  &quot;NumDMAChans&quot;                            =&gt; (0x00000000,false)
  &quot;ProductCategory&quot;                        =&gt; (:Val_XSeriesDAQ,false)
  &quot;ProductNum&quot;                             =&gt; (0x000075a1,false)
  &quot;ProductType&quot;                            =&gt; (SubString{String}[&quot;USB-6366 (64 MS) (Mass Terminatio.
  &quot;SerialNum&quot;                              =&gt; (0x01719e54,false)
  &quot;Terminals&quot;                              =&gt; (SubString{String}[&quot;/Dev1/PFI0&quot;,&quot;/Dev1/PFI1&quot;,&quot;/Dev1/P."><pre class="notranslate"><code>julia&gt; getproperties("Dev1")
Dict{String,Tuple{Any,Bool}} with 61 entries:
  "AIBridgeRngs"                           =&gt; (Float64[],false)
  "AICouplings"                            =&gt; (:Val_Transferred_From_Buffer,false)
  "AICurrentIntExcitDiscreteVals"          =&gt; (Float64[],false)
  "AICurrentRngs"                          =&gt; (Float64[],false)
  "AIDigFltrLowpassCutoffFreqDiscreteVals" =&gt; (Float64[],false)
  "AIDigFltrLowpassCutoffFreqRangeVals"    =&gt; (Float64[],false)
  "AIFreqRngs"                             =&gt; (Float64[],false)
  "AIGains"                                =&gt; (Float64[],false)
  "AILowpassCutoffFreqDiscreteVals"        =&gt; (Float64[],false)
  "AILowpassCutoffFreqRangeVals"           =&gt; (Float64[],false)
  "AIMaxMultiChanRate"                     =&gt; (2.0e6,false)
  "AIMaxSingleChanRate"                    =&gt; (2.0e6,false)
  "AIMinRate"                              =&gt; (0.0232831,false)
  "AIPhysicalChans"                        =&gt; (SubString{String}["Dev1/ai0","Dev1/ai1","Dev1/ai2",".
  "AIResistanceRngs"                       =&gt; (Float64[],false)
  "AISampModes"                            =&gt; (Symbol[:Val_FiniteSamps,:Val_ContSamps],false)
  "AISupportedMeasTypes"                   =&gt; (Symbol[:Val_Current,:Val_Resistance,:Val_Strain_Gage.
  "AITrigUsage"                            =&gt; (14,false)
  "AIVoltageIntExcitDiscreteVals"          =&gt; (Float64[],false)
  "AIVoltageIntExcitRangeVals"             =&gt; (Float64[],false)
  "AIVoltageRngs"                          =&gt; ([-1.0,1.0,-2.0,2.0,-5.0,5.0,-10.0,10.0],false)
  "AOCurrentRngs"                          =&gt; (Float64[],false)
  "AOGains"                                =&gt; (Float64[],false)
  "AOMaxRate"                              =&gt; (3.33333e6,false)
  "AOMinRate"                              =&gt; (0.0232831,false)
  "AOPhysicalChans"                        =&gt; (SubString{String}["Dev1/ao0","Dev1/ao1"],false)
  "AOSampModes"                            =&gt; (Symbol[:Val_FiniteSamps,:Val_ContSamps],false)
  "AOSupportedOutputTypes"                 =&gt; (Symbol[:Val_Voltage],false)
  "AOTrigUsage"                            =&gt; (10,false)
  "AOVoltageRngs"                          =&gt; ([-5.0,5.0,-10.0,10.0],false)
  "AccessoryProductNums"                   =&gt; (UInt32[0x00000000],false)
  "AccessoryProductTypes"                  =&gt; (SubString{String}[""],false)
  "AccessorySerialNums"                    =&gt; (UInt32[0x00000000],false)
  "BusType"                                =&gt; (:Val_USB,false)
  "CIMaxSize"                              =&gt; (0x00000020,false)
  "CIMaxTimebase"                          =&gt; (1.0e8,false)
  "CIPhysicalChans"                        =&gt; (SubString{String}["Dev1/ctr0","Dev1/ctr1","Dev1/ctr2.
  "CISampModes"                            =&gt; (Symbol[:Val_FiniteSamps,:Val_ContSamps],false)
  "CISupportedMeasTypes"                   =&gt; (Symbol[:Val_CountEdges,:Val_Freq,:Val_Period,:Val_Tw.
  "CITrigUsage"                            =&gt; (42,false)
  "COMaxSize"                              =&gt; (0x00000020,false)
  "COMaxTimebase"                          =&gt; (1.0e8,false)
  "COPhysicalChans"                        =&gt; (SubString{String}["Dev1/ctr0","Dev1/ctr1","Dev1/ctr2.
  "COSampModes"                            =&gt; (Symbol[:Val_FiniteSamps,:Val_ContSamps],false)
  "COSupportedOutputTypes"                 =&gt; (Symbol[:Val_Pulse_Freq,:Val_Pulse_Ticks,:Val_Pulse_T.
  "COTrigUsage"                            =&gt; (42,false)
  "ChassisModuleDevNames"                  =&gt; (SubString{String}[""],false)
  "DILines"                                =&gt; (SubString{String}["Dev1/port0/line0","Dev1/port0/lin.
  "DIMaxRate"                              =&gt; (1.0e7,false)
  "DIPorts"                                =&gt; (SubString{String}["Dev1/port0","Dev1/port1","Dev1/po.
  "DITrigUsage"                            =&gt; (14,false)
  "DOLines"                                =&gt; (SubString{String}["Dev1/port0/line0","Dev1/port0/lin.
  "DOMaxRate"                              =&gt; (1.0e7,false)
  "DOPorts"                                =&gt; (SubString{String}["Dev1/port0","Dev1/port1","Dev1/po.
  "DOTrigUsage"                            =&gt; (10,false)
  "NumDMAChans"                            =&gt; (0x00000000,false)
  "ProductCategory"                        =&gt; (:Val_XSeriesDAQ,false)
  "ProductNum"                             =&gt; (0x000075a1,false)
  "ProductType"                            =&gt; (SubString{String}["USB-6366 (64 MS) (Mass Terminatio.
  "SerialNum"                              =&gt; (0x01719e54,false)
  "Terminals"                              =&gt; (SubString{String}["/Dev1/PFI0","/Dev1/PFI1","/Dev1/P.
</code></pre></div>
<p dir="auto">One can index into the dictionary to get a list of channels:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; getproperties(&quot;Dev1&quot;)[&quot;AIPhysicalChans&quot;]
(SubString{ASCIIString}[&quot;Dev1/ai0&quot;,&quot;Dev1/ai1&quot;,&quot;Dev1/ai2&quot;,&quot;Dev1/ai3&quot;,&quot;Dev1/ai4&quot;,&quot;Dev1/ai5&quot;,&quot;Dev1/ai6&quot;,&quot;Dev1/ai7&quot;],false)"><pre class="notranslate"><code>julia&gt; getproperties("Dev1")["AIPhysicalChans"]
(SubString{ASCIIString}["Dev1/ai0","Dev1/ai1","Dev1/ai2","Dev1/ai3","Dev1/ai4","Dev1/ai5","Dev1/ai6","Dev1/ai7"],false)
</code></pre></div>
<p dir="auto">A bit simpler in this case though is to use another high-level function
which returns just the string Array:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; analog_input_channels(&quot;Dev1&quot;)
8-element Array{String,1}:
 &quot;Dev1/ai0&quot;
 &quot;Dev1/ai1&quot;
 &quot;Dev1/ai2&quot;
 &quot;Dev1/ai3&quot;
 &quot;Dev1/ai4&quot;
 &quot;Dev1/ai5&quot;
 &quot;Dev1/ai6&quot;
 &quot;Dev1/ai7&quot;"><pre class="notranslate"><code>julia&gt; analog_input_channels("Dev1")
8-element Array{String,1}:
 "Dev1/ai0"
 "Dev1/ai1"
 "Dev1/ai2"
 "Dev1/ai3"
 "Dev1/ai4"
 "Dev1/ai5"
 "Dev1/ai6"
 "Dev1/ai7"
</code></pre></div>
<p dir="auto">To add, for example, analog input channels, use the high-level <code>analog_input</code> function:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; t = analog_input(&quot;Dev1/ai0:1&quot;)
NIDAQ.AITask(Ptr{Nothing} @0x0000000025d18600)

julia&gt; typeof(t)
NIDAQ.AITask (constructor with 3 methods)

julia&gt; supertype(NIDAQ.AITask)
NIDAQ.Task"><pre class="notranslate"><code>julia&gt; t = analog_input("Dev1/ai0:1")
NIDAQ.AITask(Ptr{Nothing} @0x0000000025d18600)

julia&gt; typeof(t)
NIDAQ.AITask (constructor with 3 methods)

julia&gt; supertype(NIDAQ.AITask)
NIDAQ.Task
</code></pre></div>
<p dir="auto">Two channels were added above using the <code>:</code> notation.  Additional
channels can be added later by inputing the returned <code>Task</code>:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; analog_input(t, &quot;Dev1/ai2&quot;)"><pre class="notranslate"><code>julia&gt; analog_input(t, "Dev1/ai2")
</code></pre></div>
<p dir="auto"><code>getproperties</code> can also input a <code>Task</code>:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; getproperties(t)
Dict{String,Tuple{Any,Bool}} with 5 entries:
  &quot;Devices&quot;    =&gt; (SubString{String}[&quot;Dev1&quot;],false)
  &quot;Channels&quot;   =&gt; (SubString{String}[&quot;Dev1/ai0&quot;,&quot;Dev1/ai1&quot;,&quot;Dev1/ai2&quot;],false)
  &quot;Name&quot;       =&gt; (SubString{String}[&quot;_unnamedTask&lt;0&gt;&quot;],false)
  &quot;NumChans&quot;   =&gt; (0x00000003,false)
  &quot;NumDevices&quot; =&gt; (0x00000001,false)"><pre class="notranslate"><code>julia&gt; getproperties(t)
Dict{String,Tuple{Any,Bool}} with 5 entries:
  "Devices"    =&gt; (SubString{String}["Dev1"],false)
  "Channels"   =&gt; (SubString{String}["Dev1/ai0","Dev1/ai1","Dev1/ai2"],false)
  "Name"       =&gt; (SubString{String}["_unnamedTask&lt;0&gt;"],false)
  "NumChans"   =&gt; (0x00000003,false)
  "NumDevices" =&gt; (0x00000001,false)
</code></pre></div>
<p dir="auto">as well as a string containing the name of the channel:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; getproperties(t, &quot;Dev1/ai0&quot;)
Dict{String,Tuple{Any,Bool}} with 52 entries:
  &quot;AccelUnits&quot;                        =&gt; (:Val_g,false)
  &quot;AutoZeroMode&quot;                      =&gt; (:Val_None,false)
  &quot;BridgeUnits&quot;                       =&gt; (:Val_VoltsPerVolt,false)
  &quot;ChanCalDesc&quot;                       =&gt; (SubString{String}[&quot;&quot;],false)
  &quot;ChanCalOperatorName&quot;               =&gt; (SubString{String}[&quot;&quot;],false)
  &quot;ChanCalPolyForwardCoeff&quot;           =&gt; (Float64[],false)
  &quot;ChanCalPolyReverseCoeff&quot;           =&gt; (Float64[],false)
  &quot;ChanCalScaleType&quot;                  =&gt; (:Val_Table,false)
  &quot;ChanCalTablePreScaledVals&quot;         =&gt; (Float64[],false)
  &quot;ChanCalTableScaledVals&quot;            =&gt; (Float64[],false)
  &quot;ChanCalVerifAcqVals&quot;               =&gt; (Float64[],false)
  &quot;ChanCalVerifRefVals&quot;               =&gt; (Float64[],false)
  &quot;Coupling&quot;                          =&gt; (:Val_DC,false)
  &quot;CurrentACRMSUnits&quot;                 =&gt; (:Val_Amps,false)
  &quot;CurrentUnits&quot;                      =&gt; (:Val_Amps,false)
  &quot;CustomScaleName&quot;                   =&gt; (SubString{String}[&quot;&quot;],false)
  &quot;DataXferMech&quot;                      =&gt; (:Val_ProgrammedIO,false)
  &quot;DataXferReqCond&quot;                   =&gt; (:Val_OnBrdMemNotEmpty,false)
  &quot;DevScalingCoeff&quot;                   =&gt; ([0.000102924,0.000312673,5.87393e-14,-3.31855e-19],false)
  &quot;EddyCurrentProxProbeUnits&quot;         =&gt; (:Val_Meters,false)
  &quot;ForceUnits&quot;                        =&gt; (:Val_Newtons,false)
  &quot;FreqUnits&quot;                         =&gt; (:Val_Hz,false)
  &quot;Gain&quot;                              =&gt; (1.0,false)
  &quot;InputSrc&quot;                          =&gt; (SubString{String}[&quot;_external_channel&quot;],false)
  &quot;LVDTUnits&quot;                         =&gt; (:Val_Meters,false)
  &quot;LossyLSBRemovalCompressedSampSize&quot; =&gt; (0x00000010,false)
  &quot;Max&quot;                               =&gt; (10.0,false)
  &quot;MeasType&quot;                          =&gt; (:Val_Voltage,false)
  &quot;Min&quot;                               =&gt; (-10.0,false)
  &quot;PressureUnits&quot;                     =&gt; (:Val_PoundsPerSquareInch,false)
  &quot;RVDTUnits&quot;                         =&gt; (:Val_Degrees,false)
  &quot;RawDataCompressionType&quot;            =&gt; (:Val_None,false)
  &quot;RawSampJustification&quot;              =&gt; (:Val_RightJustified,false)
  &quot;RawSampSize&quot;                       =&gt; (0x00000010,false)
  &quot;ResistanceUnits&quot;                   =&gt; (:Val_Ohms,false)
  &quot;Resolution&quot;                        =&gt; (16.0,false)
  &quot;ResolutionUnits&quot;                   =&gt; (:Val_Bits,false)
  &quot;RngHigh&quot;                           =&gt; (10.0,false)
  &quot;RngLow&quot;                            =&gt; (-10.0,false)
  &quot;SoundPressureUnits&quot;                =&gt; (:Val_Pascals,false)
  &quot;StrainGageCfg&quot;                     =&gt; (:Val_FullBridgeI,false)
  &quot;StrainUnits&quot;                       =&gt; (:Val_Strain,false)
  &quot;TempUnits&quot;                         =&gt; (:Val_DegC,false)
  &quot;TermCfg&quot;                           =&gt; (:Val_Diff,false)
  &quot;ThrmcplCJCVal&quot;                     =&gt; (25.0,false)
  &quot;TorqueUnits&quot;                       =&gt; (:Val_NewtonMeters,false)
  &quot;UsbXferReqCount&quot;                   =&gt; (0x00000004,false)
  &quot;UsbXferReqSize&quot;                    =&gt; (0x00008000,false)
  &quot;VelocityUnits&quot;                     =&gt; (:Val_MetersPerSecond,false)
  &quot;VoltageACRMSUnits&quot;                 =&gt; (:Val_Volts,false)
  &quot;VoltageUnits&quot;                      =&gt; (:Val_Volts,false)
  &quot;VoltagedBRef&quot;                      =&gt; (1.0,false)"><pre class="notranslate"><code>julia&gt; getproperties(t, "Dev1/ai0")
Dict{String,Tuple{Any,Bool}} with 52 entries:
  "AccelUnits"                        =&gt; (:Val_g,false)
  "AutoZeroMode"                      =&gt; (:Val_None,false)
  "BridgeUnits"                       =&gt; (:Val_VoltsPerVolt,false)
  "ChanCalDesc"                       =&gt; (SubString{String}[""],false)
  "ChanCalOperatorName"               =&gt; (SubString{String}[""],false)
  "ChanCalPolyForwardCoeff"           =&gt; (Float64[],false)
  "ChanCalPolyReverseCoeff"           =&gt; (Float64[],false)
  "ChanCalScaleType"                  =&gt; (:Val_Table,false)
  "ChanCalTablePreScaledVals"         =&gt; (Float64[],false)
  "ChanCalTableScaledVals"            =&gt; (Float64[],false)
  "ChanCalVerifAcqVals"               =&gt; (Float64[],false)
  "ChanCalVerifRefVals"               =&gt; (Float64[],false)
  "Coupling"                          =&gt; (:Val_DC,false)
  "CurrentACRMSUnits"                 =&gt; (:Val_Amps,false)
  "CurrentUnits"                      =&gt; (:Val_Amps,false)
  "CustomScaleName"                   =&gt; (SubString{String}[""],false)
  "DataXferMech"                      =&gt; (:Val_ProgrammedIO,false)
  "DataXferReqCond"                   =&gt; (:Val_OnBrdMemNotEmpty,false)
  "DevScalingCoeff"                   =&gt; ([0.000102924,0.000312673,5.87393e-14,-3.31855e-19],false)
  "EddyCurrentProxProbeUnits"         =&gt; (:Val_Meters,false)
  "ForceUnits"                        =&gt; (:Val_Newtons,false)
  "FreqUnits"                         =&gt; (:Val_Hz,false)
  "Gain"                              =&gt; (1.0,false)
  "InputSrc"                          =&gt; (SubString{String}["_external_channel"],false)
  "LVDTUnits"                         =&gt; (:Val_Meters,false)
  "LossyLSBRemovalCompressedSampSize" =&gt; (0x00000010,false)
  "Max"                               =&gt; (10.0,false)
  "MeasType"                          =&gt; (:Val_Voltage,false)
  "Min"                               =&gt; (-10.0,false)
  "PressureUnits"                     =&gt; (:Val_PoundsPerSquareInch,false)
  "RVDTUnits"                         =&gt; (:Val_Degrees,false)
  "RawDataCompressionType"            =&gt; (:Val_None,false)
  "RawSampJustification"              =&gt; (:Val_RightJustified,false)
  "RawSampSize"                       =&gt; (0x00000010,false)
  "ResistanceUnits"                   =&gt; (:Val_Ohms,false)
  "Resolution"                        =&gt; (16.0,false)
  "ResolutionUnits"                   =&gt; (:Val_Bits,false)
  "RngHigh"                           =&gt; (10.0,false)
  "RngLow"                            =&gt; (-10.0,false)
  "SoundPressureUnits"                =&gt; (:Val_Pascals,false)
  "StrainGageCfg"                     =&gt; (:Val_FullBridgeI,false)
  "StrainUnits"                       =&gt; (:Val_Strain,false)
  "TempUnits"                         =&gt; (:Val_DegC,false)
  "TermCfg"                           =&gt; (:Val_Diff,false)
  "ThrmcplCJCVal"                     =&gt; (25.0,false)
  "TorqueUnits"                       =&gt; (:Val_NewtonMeters,false)
  "UsbXferReqCount"                   =&gt; (0x00000004,false)
  "UsbXferReqSize"                    =&gt; (0x00008000,false)
  "VelocityUnits"                     =&gt; (:Val_MetersPerSecond,false)
  "VoltageACRMSUnits"                 =&gt; (:Val_Volts,false)
  "VoltageUnits"                      =&gt; (:Val_Volts,false)
  "VoltagedBRef"                      =&gt; (1.0,false)
</code></pre></div>
<p dir="auto">Use <code>setproperty!</code> to change a mutable property:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; setproperty!(t, &quot;Dev1/ai0&quot;, &quot;Max&quot;, 5.0)"><pre class="notranslate"><code>julia&gt; setproperty!(t, "Dev1/ai0", "Max", 5.0)
</code></pre></div>
<p dir="auto">Once everything is configured, get some data using the <code>read</code> function:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; start(t)

julia&gt; read(t, 10)
10x3 Array{Float64,2}:
 1.52407   -0.448835   0.381075
 1.37546   -0.213537   0.305847
 1.2363    -0.0268698  0.262826
 1.109      0.118619   0.243117
 0.995797   0.2311     0.240073
 0.896695   0.315782   0.248004
 0.811452   0.378752   0.262746
 0.739429   0.424257   0.281893
 0.679263   0.456223   0.302402
 0.629672   0.477774   0.323473

julia&gt; stop(t)

julia&gt; clear(t)"><pre class="notranslate"><code>julia&gt; start(t)

julia&gt; read(t, 10)
10x3 Array{Float64,2}:
 1.52407   -0.448835   0.381075
 1.37546   -0.213537   0.305847
 1.2363    -0.0268698  0.262826
 1.109      0.118619   0.243117
 0.995797   0.2311     0.240073
 0.896695   0.315782   0.248004
 0.811452   0.378752   0.262746
 0.739429   0.424257   0.281893
 0.679263   0.456223   0.302402
 0.629672   0.477774   0.323473

julia&gt; stop(t)

julia&gt; clear(t)
</code></pre></div>
<p dir="auto"><code>read</code> can also return <code>Int16</code>, <code>Int32</code>, <code>UInt16</code>, and <code>UInt32</code> by specifying
those types as an additional argument:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; read(t, 10, Int16)
10×3 Array{Int16,2}:
 -12619  -5351  -13973
 -12618  -5350  -13973
 -12620  -5350  -13973
 -12619  -5350  -13974
 -12618  -5351  -13972
 -12618  -5348  -13974
 -12619  -5350  -13973
 -12619  -5350  -13973
 -12619  -5350  -13972
 -12620  -5350  -13973"><pre class="notranslate"><code>julia&gt; read(t, 10, Int16)
10×3 Array{Int16,2}:
 -12619  -5351  -13973
 -12618  -5350  -13973
 -12620  -5350  -13973
 -12619  -5350  -13974
 -12618  -5351  -13972
 -12618  -5348  -13974
 -12619  -5350  -13973
 -12619  -5350  -13973
 -12619  -5350  -13972
 -12620  -5350  -13973
</code></pre></div>
<p dir="auto">Similar work flows exist for <code>analog_output</code>, <code>digital_input</code>,
and <code>digital_output</code>.  The high-level API also supports many counter
functions too, including <code>count_edges</code> and <code>generate_pulses</code>.  For a
full list of convenience functions use the <code>names</code> function in Julia Base:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; names(NIDAQ)
25-element Array{Symbol,1}:
  :analog_output_channels 
  :digital_input_channels 
  :setproperty!           
  :line_to_line           
  :counter_input_channels 
  :counter_output_channels
  :NIDAQ                  
  :analog_voltage_input_ranges    
  :analog_current_input_ranges    
  :digital_input          
  :stop                   
  :generate_pulses        
  :count_edges            
  :digital_output_channels
  :analog_input           
  :channel_type           
  :analog_voltage_output_ranges   
  :analog_current_output_ranges   
  :devices                
  :digital_output         
  :getproperties          
  :quadrature_input       
  :analog_input_channels  
  :analog_output          
  :Bool32                 
  :clear                  "><pre class="notranslate"><code>julia&gt; names(NIDAQ)
25-element Array{Symbol,1}:
  :analog_output_channels 
  :digital_input_channels 
  :setproperty!           
  :line_to_line           
  :counter_input_channels 
  :counter_output_channels
  :NIDAQ                  
  :analog_voltage_input_ranges    
  :analog_current_input_ranges    
  :digital_input          
  :stop                   
  :generate_pulses        
  :count_edges            
  :digital_output_channels
  :analog_input           
  :channel_type           
  :analog_voltage_output_ranges   
  :analog_current_output_ranges   
  :devices                
  :digital_output         
  :getproperties          
  :quadrature_input       
  :analog_input_channels  
  :analog_output          
  :Bool32                 
  :clear                  
</code></pre></div>
<p dir="auto">NIDAQmx is a powerful interface, and while NIDAQ.jl provides wrappers
for all of it's functions, it only abstracts a few of them.  If these
don't suit your needs you'll have to dive deep into <code>src/functions_V*.jl</code>
and <code>src/constants_V*.jl</code>.  Complete documentation of this low-level API
is <a href="http://zone.ni.com/reference/en-XX/help/370466V-01/" rel="nofollow">here</a> and
<a href="http://zone.ni.com/reference/en-XX/help/370471W-01/" rel="nofollow">here</a>.</p>
<p dir="auto">One situation where the low-level API is needed is to specify
continous output of pulses using a counter:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; t = generate_pulses(&quot;Dev1/ctr0&quot;)
NIDAQ.COTask(Ptr{Nothing} @0x00000000059d8790)

julia&gt; fieldnames(typeof(t))
(:th,)

julia&gt; NIDAQ.CfgImplicitTiming(t.th, NIDAQ.Val_ContSamps, UInt64(1))
0"><pre class="notranslate"><code>julia&gt; t = generate_pulses("Dev1/ctr0")
NIDAQ.COTask(Ptr{Nothing} @0x00000000059d8790)

julia&gt; fieldnames(typeof(t))
(:th,)

julia&gt; NIDAQ.CfgImplicitTiming(t.th, NIDAQ.Val_ContSamps, UInt64(1))
0
</code></pre></div>
<p dir="auto">Note that tasks consist of just a single field <code>th</code>, and that this "task
handle" is what must be passed into many low-level routines.</p>
<p dir="auto">Also, for brevity NIDAQ.jl strips the "DAQmx" prefix to all functions and
constants in NI-DAQmx, and converts the latter to 32 bits.  One must still
take care to caste the other inputs appropriately though.</p>
<h1 dir="auto"><a id="user-content-adding-support-for-a-version-of-ni-daqmx" class="anchor" aria-hidden="true" href="#adding-support-for-a-version-of-ni-daqmx"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Adding Support for a Version of NI-DAQmx</h1>
<p dir="auto">Install <a href="https://github.com/ihnorton/Clang.jl">Clang.jl</a>.  If there are
build problems, make sure that <code>llvm-config</code> is on your <code>PATH</code>, and that
<code>libclang</code> can be found, as described in the Clang.jl README.  Clang
defaults to using a system installed version of LLVM.  An alternative is
to set <code>BUILD_LLVM_CLANG=1</code> in Make.user, and compile Julia from source.</p>
<p dir="auto">Find <code>NIDAQmx.h</code>, which usually lives in
<code>C:\Program Files (x86)\National Instruments\NI-DAQ\DAQmx ANSI C Dev\include</code>.</p>
<p dir="auto">Edit this header file as follows:</p>
<ul dir="auto">
<li>For NI-DAQmx v19.6 in <code>NIDAQmx.h</code> change <code>__int64 int64</code> to <code>long long int int64</code>
and <code>unsigned __int64 uInt64</code> to <code>unsigned long long uInt64</code>.</li>
<li>For NI-DAQmx v9.6.0 in <code>NIDAQmx.h</code> change
<code>defined(__linux__)</code> to <code>defined(__linux__) || defined(__APPLE__)</code>.</li>
</ul>
<p dir="auto">Then run Clang to produce the corresponding Julia files:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; using Clang
julia&gt; wc = init(; headers = [&quot;NIDAQmx.h&quot;],
                   output_file = &quot;NIDAQmx.jl&quot;,
                   common_file = &quot;common.jl&quot;,
                   clang_includes = vcat(CLANG_INCLUDE),
                   clang_args = map(x-&gt;&quot;-I&quot;*x, find_std_headers()),
                   header_wrapped = (root, current)-&gt;root == current,
                   header_library = x-&gt;&quot;NIDAQmx&quot;,
                   clang_diagnostics = true)
julia&gt; run(wc)
$ mv NIDAQmx.jl src/functions_V&lt;version&gt;.jl
$ mv common.jl src/constants_V&lt;version&gt;.jl
$ rm LibTemplate.jl ctypes.jl"><pre class="notranslate"><code>julia&gt; using Clang
julia&gt; wc = init(; headers = ["NIDAQmx.h"],
                   output_file = "NIDAQmx.jl",
                   common_file = "common.jl",
                   clang_includes = vcat(CLANG_INCLUDE),
                   clang_args = map(x-&gt;"-I"*x, find_std_headers()),
                   header_wrapped = (root, current)-&gt;root == current,
                   header_library = x-&gt;"NIDAQmx",
                   clang_diagnostics = true)
julia&gt; run(wc)
$ mv NIDAQmx.jl src/functions_V&lt;version&gt;.jl
$ mv common.jl src/constants_V&lt;version&gt;.jl
$ rm LibTemplate.jl ctypes.jl
</code></pre></div>
<p dir="auto">Finally, the following manual edits are necessary:</p>
<ul dir="auto">
<li>In <code>constants_V&lt;version&gt;.jl</code>
<ul dir="auto">
<li>delete <code>const CVICALLBACK = CVICDECL</code>,</li>
<li>in NI-DAQmx v19.6 add <code>struct CVITime; lsb::uInt64; msb::int64; end</code></li>
<li>in NI-DAQmx v17.1.0 comment out <code>const CVIAbsoluteTime = VOID</code></li>
<li>change <code>const bool32 = uInt32</code> to <code>const bool32 = Bool32</code>.</li>
<li>in NI-DAQmx v15 to v18 comment out <code>using Compat</code></li>
</ul>
</li>
<li>In <code>functions_V&lt;version&gt;.jl</code>
<ul dir="auto">
<li>in NI-DAQmx v18 and earlier, globally search for <code>Ptr</code> and replace with <code>Ref</code>, then globally
search for <code>CallbackRef</code> and replace with <code>CallbackPtr</code>.</li>
<li>globally search for <code>Cstring</code> and replace with <code>SafeCstring</code></li>
<li>for Julia 0.7 support, replace <code>type</code> with <code>_type</code></li>
</ul>
</li>
</ul>
<h1 dir="auto"><a id="user-content-author" class="anchor" aria-hidden="true" href="#author"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Author</h1>
<p dir="auto"><a href="http://www.janelia.org/people/research-resources-staff/ben-arthur" rel="nofollow">Ben Arthur</a>, <a href="mailto:arthurb@hhmi.org">arthurb@hhmi.org</a><br>
<a href="http://www.janelia.org/research-resources/computing-resources" rel="nofollow">Scientific Computing</a><br>
<a href="http://www.janelia.org" rel="nofollow">Janelia Research Campus</a><br>
<a href="http://www.hhmi.org" rel="nofollow">Howard Hughes Medical Institute</a></p>
<p dir="auto"><a href="http://www.janelia.org" rel="nofollow"><img src="/hhmi_janelia_160px.png" alt="Picture" style="max-width: 100%;"></a></p>
</article></div>