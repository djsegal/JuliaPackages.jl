<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-weighted-arrays-jl" class="anchor" aria-hidden="true" href="#weighted-arrays-jl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Weighted Arrays .jl</h1>
<p><a href="https://travis-ci.org/mcabbott/WeightedArrays.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/04854acd08646db5fd0650ba127b9fa4929dc030e6005578f2d1cc9126b155de/68747470733a2f2f7472617669732d63692e6f72672f6d636162626f74742f57656967687465644172726179732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/mcabbott/WeightedArrays.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p>This simple package defines a <code>WeightedMatrix</code>, a struct with vector of weights corresponding to the columns of a matrix. By default the <code>weights(x)</code> add up to 1. The <code>array(x)</code> values may have a box constraint:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; Weighted(randn(3,5))
Weighted 3×5 Array{Float64,2}, of unclamped θ:
 -0.264476   -1.83297      0.0669732  -0.340433  -1.87672
  0.0461253  -0.330401     0.0215189   2.3129    -1.78839
  0.461376    0.00486523  -0.819182   -1.43221   -0.855756
with normalised weights p(θ), 5-element Array{Float64,1}:
 0.2  0.2  0.2  0.2  0.2

julia&gt; Weighted(rand(2,4), ones(4), 0, 1)
Weighted 2×4 Array{Float64,2}, clamped 0.0 ≦ θ ≦ 1.0:
 0.7842    0.257179  0.483388  0.780996
 0.138967  0.748165  0.387104  0.167825
with normalised weights p(θ), 4-element Array{Float64,1}:
 0.25  0.25  0.25  0.25
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">Weighted</span>(<span class="pl-c1">randn</span>(<span class="pl-c1">3</span>,<span class="pl-c1">5</span>))
Weighted <span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">5</span> Array{Float64,<span class="pl-c1">2</span>}, of unclamped θ:
 <span class="pl-k">-</span><span class="pl-c1">0.264476</span>   <span class="pl-k">-</span><span class="pl-c1">1.83297</span>      <span class="pl-c1">0.0669732</span>  <span class="pl-k">-</span><span class="pl-c1">0.340433</span>  <span class="pl-k">-</span><span class="pl-c1">1.87672</span>
  <span class="pl-c1">0.0461253</span>  <span class="pl-k">-</span><span class="pl-c1">0.330401</span>     <span class="pl-c1">0.0215189</span>   <span class="pl-c1">2.3129</span>    <span class="pl-k">-</span><span class="pl-c1">1.78839</span>
  <span class="pl-c1">0.461376</span>    <span class="pl-c1">0.00486523</span>  <span class="pl-k">-</span><span class="pl-c1">0.819182</span>   <span class="pl-k">-</span><span class="pl-c1">1.43221</span>   <span class="pl-k">-</span><span class="pl-c1">0.855756</span>
with normalised weights <span class="pl-c1">p</span>(θ), <span class="pl-c1">5</span><span class="pl-k">-</span>element Array{Float64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">0.2</span>  <span class="pl-c1">0.2</span>  <span class="pl-c1">0.2</span>  <span class="pl-c1">0.2</span>  <span class="pl-c1">0.2</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">Weighted</span>(<span class="pl-c1">rand</span>(<span class="pl-c1">2</span>,<span class="pl-c1">4</span>), <span class="pl-c1">ones</span>(<span class="pl-c1">4</span>), <span class="pl-c1">0</span>, <span class="pl-c1">1</span>)
Weighted <span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">4</span> Array{Float64,<span class="pl-c1">2</span>}, clamped <span class="pl-c1">0.0</span> ≦ θ ≦ <span class="pl-c1">1.0</span><span class="pl-k">:</span>
 <span class="pl-c1">0.7842</span>    <span class="pl-c1">0.257179</span>  <span class="pl-c1">0.483388</span>  <span class="pl-c1">0.780996</span>
 <span class="pl-c1">0.138967</span>  <span class="pl-c1">0.748165</span>  <span class="pl-c1">0.387104</span>  <span class="pl-c1">0.167825</span>
with normalised weights <span class="pl-c1">p</span>(θ), <span class="pl-c1">4</span><span class="pl-k">-</span>element Array{Float64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">0.25</span>  <span class="pl-c1">0.25</span>  <span class="pl-c1">0.25</span>  <span class="pl-c1">0.25</span></pre></div>
<p>These examples are roughly <code>wrandn(3,5)</code> and <code>wrand(2,4)</code>, there are also sub-random <code>sobol(3,7)</code> and regular <code>wgrid(2, 0:0.1:1)</code>.
Their values are mutable, <code>clamp!(x)</code> will enforce the box constraint, and <code>normalise!(x)</code> (with an s) the weights.</p>
<p>They are not subtypes of <code>AbstractArray</code>, but many functions will work.
For instance <code>x[1:2, :]</code> keeps only the first two rows (and the weights),
<code>hcat(x,y)</code> will concatenate the weights,
and <code>mapslices(f,x)</code> will act with <code>f</code> on columns &amp; then restore weights.
<code>sort(x)</code> re-arranges columns to order by the weights, <code>sortcols(x)</code> orders by the array instead,
<code>unique(x)</code> will accumulate the weights of identical columns.
A few functions like <code>log(x)</code> and <code>tanh(x)</code> act element-wise but update the box constraints appropriately.</p>
<p>Most of this will work for any N-dimensional Array, not just a Matrix. The weights then belong to the last dimension.</p>
<p><a target="_blank" rel="noopener noreferrer" href="deps/red.png?raw=true"><img src="deps/red.png?raw=true" width="440" height="400" alt="Plot example" align="right" style="max-width:100%;"></a></p>
<p>Plot recipes are defined, in which the area of points indicating weight.
The example shown is a grid plus a bivariate sub-random normal distribution:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using Plots

julia&gt; plot(wgrid(2, -5:5), m=:+)

julia&gt; plot!(soboln(2, 2000), m=:diamond, c=:red)
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Plots

julia<span class="pl-k">&gt;</span> <span class="pl-c1">plot</span>(<span class="pl-c1">wgrid</span>(<span class="pl-c1">2</span>, <span class="pl-k">-</span><span class="pl-c1">5</span><span class="pl-k">:</span><span class="pl-c1">5</span>), m<span class="pl-k">=</span>:<span class="pl-k">+</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">plot!</span>(<span class="pl-c1">soboln</span>(<span class="pl-c1">2</span>, <span class="pl-c1">2000</span>), m<span class="pl-k">=</span><span class="pl-c1">:diamond</span>, c<span class="pl-k">=</span><span class="pl-c1">:red</span>)</pre></div>
<p>With more than three rows e.g. <code>plot(wrandn(4,50))</code>, it will plot the first two principal components (and attempt to scale these correctly).
There is a function <code>pplot(x)</code> which saves the PCA function (see help for <code>wPCA(x)</code>) in a global variable, so that <code>pplot!(t)</code> can add more points on the same axes.</p>
</article></div>