<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-poissonrandom" class="anchor" aria-hidden="true" href="#poissonrandom"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>PoissonRandom</h1>
<p><a href="https://travis-ci.org/JuliaDiffEq/PoissonRandom.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/d58657234d99ea4c1112cd5b4deeeeaf1c31c61d/68747470733a2f2f7472617669732d63692e6f72672f4a756c69614469666645712f506f6973736f6e52616e646f6d2e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaDiffEq/PoissonRandom.jl.svg?branch=master" style="max-width:100%;"></a></p>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Usage</h2>
<div class="highlight highlight-source-julia"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>PoissonRandom<span class="pl-pds">"</span></span>)

<span class="pl-c"><span class="pl-c">#</span> Simple Poisson random</span>
<span class="pl-c1">pois_rand</span>(λ)

<span class="pl-c"><span class="pl-c">#</span> Using another RNG</span>
<span class="pl-k">using</span> RandomNumbers
rng <span class="pl-k">=</span> Xorshifts<span class="pl-k">.</span><span class="pl-c1">Xoroshiro128Plus</span>()
<span class="pl-c1">pois_rand</span>(rng,λ)</pre></div>
<h2><a id="user-content-implementation" class="anchor" aria-hidden="true" href="#implementation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Implementation</h2>
<p>It mixes two methods. A simple count method and a method from a normal approximation.
See <a href="https://www.johndcook.com/blog/2010/06/14/generating-poisson-random-values/" rel="nofollow">this blog post for details</a>.</p>
<h2><a id="user-content-benchmark" class="anchor" aria-hidden="true" href="#benchmark"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Benchmark</h2>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> RandomNumbers, Distributions, BenchmarkTools, StaticArrays,
      RecursiveArrayTools, Plots, PoissonRandom
labels <span class="pl-k">=</span> [<span class="pl-s"><span class="pl-pds">"</span>count_rand<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>ad_rand<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>pois_rand<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>Distributions.jl<span class="pl-pds">"</span></span>]
rng <span class="pl-k">=</span> Xorshifts<span class="pl-k">.</span><span class="pl-c1">Xoroshiro128Plus</span>()

<span class="pl-k">function</span> <span class="pl-en">n_count</span>(rng,λ,n)
  tmp <span class="pl-k">=</span> <span class="pl-c1">0</span>
  <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span>n
    tmp <span class="pl-k">+=</span> PoissonRandom<span class="pl-k">.</span><span class="pl-c1">count_rand</span>(rng,λ)
  <span class="pl-k">end</span>
<span class="pl-k">end</span>

<span class="pl-k">function</span> <span class="pl-en">n_pois</span>(rng,λ,n)
  tmp <span class="pl-k">=</span> <span class="pl-c1">0</span>
  <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span>n
    tmp <span class="pl-k">+=</span> <span class="pl-c1">pois_rand</span>(rng,λ)
  <span class="pl-k">end</span>
<span class="pl-k">end</span>

<span class="pl-k">function</span> <span class="pl-en">n_ad</span>(rng,λ,n)
  tmp <span class="pl-k">=</span> <span class="pl-c1">0</span>
  <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span>n
    tmp <span class="pl-k">+=</span> PoissonRandom<span class="pl-k">.</span><span class="pl-c1">ad_rand</span>(rng,λ)
  <span class="pl-k">end</span>
<span class="pl-k">end</span>

<span class="pl-k">function</span> <span class="pl-en">n_dist</span>(λ,n)
  tmp <span class="pl-k">=</span> <span class="pl-c1">0</span>
  <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span>n
    tmp <span class="pl-k">+=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">Poisson</span>(λ))
  <span class="pl-k">end</span>
<span class="pl-k">end</span>

<span class="pl-k">function</span> time_λ(rng,λ,n)
  t1 <span class="pl-k">=</span> <span class="pl-c1">@elapsed</span> <span class="pl-c1">n_count</span>(rng,λ,n)
  t2 <span class="pl-k">=</span> <span class="pl-c1">@elapsed</span> <span class="pl-c1">n_ad</span>(rng,λ,n)
  t3 <span class="pl-k">=</span> <span class="pl-c1">@elapsed</span> <span class="pl-c1">n_pois</span>(rng,λ,n)
  t4 <span class="pl-k">=</span> <span class="pl-c1">@elapsed</span> <span class="pl-c1">n_dist</span>(λ,n)
  <span class="pl-c1">@SArray</span> [t1,t2,t3,t4]
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> Compile</span>
time_λ(rng,<span class="pl-c1">5</span>,<span class="pl-c1">5000000</span>)
<span class="pl-c"><span class="pl-c">#</span> Run with a bunch of λ</span>
times <span class="pl-k">=</span> <span class="pl-c1">VectorOfArray</span>([time_λ(rng,n,<span class="pl-c1">5000000</span>) <span class="pl-k">for</span> n <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">20</span>])<span class="pl-k">'</span>
<span class="pl-c1">plot</span>(times,labels <span class="pl-k">=</span> labels, lw <span class="pl-k">=</span> <span class="pl-c1">3</span>)</pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="https://user-images.githubusercontent.com/1814174/40387004-1e377776-5dc0-11e8-88a2-2d9cb12db984.png"><img src="https://user-images.githubusercontent.com/1814174/40387004-1e377776-5dc0-11e8-88a2-2d9cb12db984.png" alt="benchmark result" style="max-width:100%;"></a></p>
<p>So this package ends up about 30% or so faster than Distributions.jl (the method
at the far edge is λ-independent so that goes on forever).</p>
</article></div>