<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-idealpointsjl" class="anchor" aria-hidden="true" href="#idealpointsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>IdealPoints.jl</h1>
<p>This package is unofficial and intended for my own personal use. That said, it
is reasonably well-tested and reasonably well-documented, so I'm making it
publicly available with the understanding that I do not intend to maintain this
code for anyone else's use.</p>
<p>Usage example:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">import</span> RollCallDataIO<span class="pl-k">:</span> SparseRollCall
<span class="pl-k">import</span> IdealPoints<span class="pl-k">:</span> ideal_points
<span class="pl-k">import</span> DataFrames<span class="pl-k">:</span> DataFrame, writetable

path <span class="pl-k">=</span> <span class="pl-c1">joinpath</span>(<span class="pl-s"><span class="pl-pds">"</span>data<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>senate<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>112.ord<span class="pl-pds">"</span></span>)
io <span class="pl-k">=</span> <span class="pl-c1">open</span>(path, <span class="pl-s"><span class="pl-pds">"</span>r<span class="pl-pds">"</span></span>)
ord_file <span class="pl-k">=</span> <span class="pl-c1">read</span>(RollCallDataIO<span class="pl-k">.</span>ORDFile, io)
<span class="pl-c1">close</span>(io)

ds <span class="pl-k">=</span> <span class="pl-c1">2</span>
ﾏダx <span class="pl-k">=</span> <span class="pl-c1">0.25</span>
ﾏダy <span class="pl-k">=</span> <span class="pl-c1">10.0</span>

a, b, c, d <span class="pl-k">=</span> <span class="pl-c1">ideal_points</span>(ord_file, ds, ﾏダx, ﾏダy, <span class="pl-c1">100</span>, <span class="pl-c1">true</span>)

n_legislators <span class="pl-k">=</span> <span class="pl-c1">length</span>(RollCallDataIO<span class="pl-k">.</span><span class="pl-c1">legislators</span>(ord_file))

df <span class="pl-k">=</span> <span class="pl-c1">DataFrame</span>(
    x1 <span class="pl-k">=</span> <span class="pl-c1">transpose</span>(<span class="pl-c1">reshape</span>(a, ds, n_legislators))[:, <span class="pl-c1">1</span>],
    x2 <span class="pl-k">=</span> <span class="pl-c1">transpose</span>(<span class="pl-c1">reshape</span>(a, ds, n_legislators))[:, <span class="pl-c1">2</span>],
    legislator <span class="pl-k">=</span> RollCallDataIO<span class="pl-k">.</span><span class="pl-c1">legislators</span>(ord_file),
    party <span class="pl-k">=</span> RollCallDataIO<span class="pl-k">.</span><span class="pl-c1">parties</span>(ord_file),
)

<span class="pl-c1">writetable</span>(<span class="pl-s"><span class="pl-pds">"</span>ideal_points.csv<span class="pl-pds">"</span></span>, df)</pre></div>
</article></div>