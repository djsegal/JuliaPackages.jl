<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-modia3djl" class="anchor" aria-hidden="true" href="#modia3djl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Modia3D.jl</h1>
<p dir="auto"><a href="https://ModiaSim.github.io/Modia3D.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/ModiaSim/Modia3D.jl/blob/master/LICENSE.md"><img src="https://camo.githubusercontent.com/ad8758fbaebbced78645b98e446c0bb5ec223676ed61700184320887cadbfb8e/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d627269676874677265656e2e7376673f7374796c653d666c61742d737175617265" alt="The MIT License" data-canonical-src="https://img.shields.io/badge/license-MIT-brightgreen.svg?style=flat-square" style="max-width: 100%;"></a></p>
<p dir="auto">Modia3D is a Julia package that adds a multibody program and 3D shapes for visualization and collision handling to the <a href="https://github.com/ModiaSim/Modia.jl">Modia Modeling Language</a>. It is then, for example, possible to model the 3D mechanical part of a robot with Modia3D and the electrical motors and gearboxes that are driving the joints with the Modia language. Collision handling with elastic response calculation is performed for shapes that are defined with a contact material and have a convex geometry or are approximated by the convex hull of a concave geometry. For more details, see the <a href="https://modiasim.github.io/Modia3D.jl/stable/tutorial/Tutorial.html" rel="nofollow">Modia3D Tutorial</a>.</p>
<p dir="auto">Modia3D supports currently tree-structured multibody systems, but does not (yet) support kinematic loops.</p>
<p dir="auto">Example videos:</p>
<ul dir="auto">
<li><a href="https://modiasim.github.io/Modia3D.jl/resources/videos/rattleback.mp4" rel="nofollow">Rattleback</a> - wikipedia <a href="https://en.wikipedia.org/wiki/Rattleback" rel="nofollow">explanation</a> (video in <a href="https://modiasim.github.io/Modia3D.jl/resources/videos/rattleback.glb" rel="nofollow">glb format</a>, Modia3D <a href="test/Collision/Rattleback.jl">code</a>)</li>
<li><a href="https://modiasim.github.io/Modia3D.jl/resources/videos/YouBotsGripping.mp4" rel="nofollow">YouBot robots gripping a workpiece</a> (Modia3D <a href="test/Robot/YouBotsGripping.jl">code</a>)</li>
<li><a href="https://modiasim.github.io/Modia3D.jl/resources/videos/Billard16Balls.mp4" rel="nofollow">Billiard table with 16 balls</a> (Modia3D <a href="test/Collision/Billard16Balls.jl">code</a>)</li>
<li><a href="https://modiasim.github.io/Modia3D.jl/resources/videos/Mobile8.mp4" rel="nofollow">Mobile with 8 levels</a> (Modia3D <a href="test/Basic/Mobile.jl">code</a> - recursive definition)</li>
</ul>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">Modia3D requires Julia 1.7 or later and is installed with</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; ]add Modia3D"><pre>julia<span class="pl-k">&gt;</span> ]add Modia3D</pre></div>
<p dir="auto">It is advised to also install Modia and at least one Modia plot package (for details see <a href="https://modiasim.github.io/Modia.jl/stable/#Installation" rel="nofollow">Installation of Modia</a>).</p>
<p dir="auto">Note, Modia3D reexports the following definitions</p>
<ul dir="auto">
<li><code>using Modia</code></li>
<li><code>using Unitful</code></li>
<li><code>using DifferentialEquations</code></li>
<li><code>using SignalTables</code></li>
<li>and exports functions <code>CVODE_BDF</code> and <code>IDA</code> of <a href="https://github.com/SciML/Sundials.jl">Sundials.jl</a>.</li>
</ul>
<p dir="auto">As a result, it is usually sufficient to have <code>using Modia3D</code> in a model to utilize the relevant
functionalities of these packages.</p>
<p dir="auto">Modia3D has various <em>3D animation features</em>:</p>
<ul dir="auto">
<li>
<p dir="auto">With <code>world = Object3D(feature=Scene(animationFile="filename.json"))</code> the animation produced during a simulation run
is exported in <a href="https://github.com/mrdoob/three.js/wiki/JSON-Object-Scene-format-4">three.js JSON Object Scene format</a>.
The generated file can be imported into the open source web app <a href="https://threejs.org/editor/" rel="nofollow">three.js editor</a> and
use all the features of three.js, for example to export in the widely used glb format (the binary version of the <a href="https://www.khronos.org/gltf/" rel="nofollow">glTF</a> format)
and use any glb viewer (for example 3D-Viewer of Windows).</p>
</li>
<li>
<p dir="auto">With the default option <code>world = Object3D(feature=Scene(enableVisualization=true))</code> the
<a href="https://www.systemcontrolinnovationlab.de/the-dlr-visualization-library/" rel="nofollow">DLR Visualization Library</a>
(see the many examples from various research and industrial projects) is used, if installed, for
online animation (during simulation), replays (after simulation), and the generation of mpg4-videos.
This library is available as <em>(free) Community Edition</em> and as <em>(commercial) Professional Edition</em>
(<a href="https://visualization.ltx.de/" rel="nofollow">Web page to request download of DLR Visualization Library</a>).
After download, make the library available in the following way:</p>
<ul dir="auto">
<li>Set Julia environment variable <code>ENV["DLR_VISUALIZATION"] = "&lt;path-to-library&gt;/Visualization/Extras/SimVis"</code>
or add it to the <a href="https://github.com/ModiaSim/Modia3D.jl/wiki/Template-for-startup.jl">Julia startup.jl file</a>.
<em>Make sure that the SimVis executable under this directory has execution rights.</em>
For example in Linux with command: <code>chmod ug+x &lt;path-to-library&gt;/Visualization/Extras/SimVis/linux/SimVis</code></li>
</ul>
</li>
</ul>
<h2 dir="auto"><a id="user-content-faster-startup" class="anchor" aria-hidden="true" href="#faster-startup"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Faster Startup</h2>
<p dir="auto">In order to speed up startup, a sysimage can be generated by executing the following commands
(may take several minutes):</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia
using Modia3D
include(&quot;$(Modia3D.path)/create_Modia3D_sysimage.jl&quot;)
exit()"><pre>julia
<span class="pl-k">using</span> Modia3D
<span class="pl-c1">include</span>(<span class="pl-s"><span class="pl-pds">"</span><span class="pl-v">$(Modia3D<span class="pl-k">.</span>path)</span>/create_Modia3D_sysimage.jl<span class="pl-pds">"</span></span>)
<span class="pl-c1">exit</span>()</pre></div>
<p dir="auto">This will generate a file <code>Modia3D_sysimage.dll</code> (on Windows) or <code>Modia3D_sysimage.so</code> (otherwise) in your
current working directory that includes all packages of your current project and the following packages
(these packages are added to your current project, if not yet included):</p>
<ul dir="auto">
<li>Modia, Modia3D, ModiaPlot_PyPlot, PackageCompiler, Revise</li>
</ul>
<p dir="auto">Start julia with this sysimage in the following way:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia -JModia3D_sysimage.dll (on Windows)
julia -JModia3D_sysimage.so  (otherwise)"><pre class="notranslate"><code>julia -JModia3D_sysimage.dll (on Windows)
julia -JModia3D_sysimage.so  (otherwise)
</code></pre></div>
<p dir="auto">The benefit is that <code>using Modia3D</code> is nearly immediatedly executed (instead of &gt; 30 seconds).
The drawback is that <code>create_Modia3D_sysimage.jl</code> has to be newly executed, whenever
new package versions are used in your environment.</p>
<h2 dir="auto"><a id="user-content-main-developers-and-license" class="anchor" aria-hidden="true" href="#main-developers-and-license"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Main Developers and License</h2>
<p dir="auto"><a href="mailto:andrea.neumayr@dlr.de">Andrea Neumayr</a>,
<a href="https://rmc.dlr.de/sr/de/staff/martin.otter/" rel="nofollow">Martin Otter</a> and
<a href="mailto:gerhard.hippmann@dlr.de">Gerhard Hippmann</a>,<br>
<a href="https://www.dlr.de/sr/en" rel="nofollow">DLR - Institute of System Dynamics and Control</a></p>
<p dir="auto">License: <a href="LICENSE.md">MIT (expat)</a></p>
</article></div>