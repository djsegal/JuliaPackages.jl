<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-nanmath" class="anchor" aria-hidden="true" href="#nanmath"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>NaNMath</h1>
<p dir="auto"><a href="https://juliahub.com/ui/Packages/NaNMath/k9Y1O?t=2" rel="nofollow"><img src="https://camo.githubusercontent.com/5c573e1b3af17a5b018b7a2eabf40130e20d66a3619de0b651755f646c5fe100/68747470733a2f2f6a756c69616875622e636f6d2f646f63732f4e614e4d6174682f646570732e737667" alt="deps" data-canonical-src="https://juliahub.com/docs/NaNMath/deps.svg" style="max-width: 100%;"></a></p>
<p dir="auto">Implementations of basic math functions which return <code>NaN</code> instead of throwing a <code>DomainError</code>.</p>
<p dir="auto">Example:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="import NaNMath
NaNMath.log(-100) # NaN
NaNMath.pow(-1.5,2.3) # NaN"><pre><span class="pl-k">import</span> NaNMath
NaNMath<span class="pl-k">.</span><span class="pl-c1">log</span>(<span class="pl-k">-</span><span class="pl-c1">100</span>) <span class="pl-c"><span class="pl-c">#</span> NaN</span>
NaNMath<span class="pl-k">.</span><span class="pl-c1">pow</span>(<span class="pl-k">-</span><span class="pl-c1">1.5</span>,<span class="pl-c1">2.3</span>) <span class="pl-c"><span class="pl-c">#</span> NaN</span></pre></div>
<p dir="auto">In addition this package provides functions that aggregate arrays and ignore elements that are NaN.
The following functions are implemented:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="sum
maximum
minimum
extrema
mean
median
var
std
min
max"><pre class="notranslate"><code>sum
maximum
minimum
extrema
mean
median
var
std
min
max
</code></pre></div>
<p dir="auto">Example:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using NaNMath; nm=NaNMath
nm.sum([1., 2., NaN]) # result: 3.0"><pre><span class="pl-k">using</span> NaNMath; nm<span class="pl-k">=</span>NaNMath
nm<span class="pl-k">.</span><span class="pl-c1">sum</span>([<span class="pl-c1">1.</span>, <span class="pl-c1">2.</span>, <span class="pl-c1">NaN</span>]) <span class="pl-c"><span class="pl-c">#</span> result: 3.0</span></pre></div>
</article></div>