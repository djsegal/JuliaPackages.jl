<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><p><a href="https://travis-ci.org/mlubin/NaNMath.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/157be277edc686078188b15b9e4441b0f9c4f4dc/68747470733a2f2f7472617669732d63692e6f72672f6d6c7562696e2f4e614e4d6174682e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/mlubin/NaNMath.jl.svg?branch=master" style="max-width:100%;"></a></p>
<h1><a id="user-content-nanmath" class="anchor" aria-hidden="true" href="#nanmath"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>NaNMath</h1>
<p>Implementations of basic math functions which return <code>NaN</code> instead of throwing a <code>DomainError</code>.</p>
<p>Example:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">import</span> NaNMath
NaNMath<span class="pl-k">.</span><span class="pl-c1">log</span>(<span class="pl-k">-</span><span class="pl-c1">100</span>) <span class="pl-c"><span class="pl-c">#</span> NaN</span>
NaNMath<span class="pl-k">.</span><span class="pl-c1">pow</span>(<span class="pl-k">-</span><span class="pl-c1">1.5</span>,<span class="pl-c1">2.3</span>) <span class="pl-c"><span class="pl-c">#</span> NaN</span></pre></div>
<p>In addition this package provides functions that aggregate arrays and ignore elements that are NaN.
The following functions are implemented:</p>
<pre><code>sum
maximum
minimum
extrema
mean
var
std
min
max
</code></pre>
<p>Example:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> NaNMath; nm<span class="pl-k">=</span>NaNMath
nm<span class="pl-k">.</span><span class="pl-c1">sum</span>([<span class="pl-c1">1.</span>, <span class="pl-c1">2.</span>, <span class="pl-c1">NaN</span>]) <span class="pl-c"><span class="pl-c">#</span> result: 3.0</span></pre></div>
</article></div>