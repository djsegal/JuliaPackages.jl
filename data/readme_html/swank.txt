<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-swankjl--swank-and-slime-for-julia" class="anchor" aria-hidden="true" href="#swankjl--swank-and-slime-for-julia"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Swank.jl : SWANK (and SLIME) for Julia</h1>
<h2><a id="user-content-introduction" class="anchor" aria-hidden="true" href="#introduction"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Introduction</h2>
<p>Swank.jl is a Julia language back end for SLIME (the Superior Lisp
Interaction Mode for Emacs), allowing Julia software development
within Emacs.</p>
<p>Swank.jl is almost good enough for daily use, but
<a href="https://github.com/tpapp/julia-repl">https://github.com/tpapp/julia-repl</a> is better tested and may be more
reliable. Your feedback would be welcome.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>First install SLIME - I use the version from MELPA, see below.</p>
<p>Then add the following to your Emacs <code>init.el</code> and type <code>M-x slime</code> or
<code>M-x julia-slime</code> to start:</p>
<div class="highlight highlight-source-emacs-lisp"><pre><span class="pl-c"><span class="pl-c">;</span>; SLIME, the Superior Lisp Interaction Mode for Emacs</span>

(<span class="pl-c1">use-package</span> slime
  <span class="pl-c1">:ensure</span> <span class="pl-c1">t</span>
  <span class="pl-c1">:config</span>
  (<span class="pl-k">setq</span> slime-net-coding-system <span class="pl-c1">'utf-8-unix</span>)
  (<span class="pl-k">setq</span> slime-contribs '(slime-fancy slime-banner slime-media)))

(<span class="pl-c1">global-set-key</span> <span class="pl-s"><span class="pl-pds">"</span><span class="pl-cce">\C</span>-cs<span class="pl-pds">"</span></span> <span class="pl-c1">'slime-selector</span>)

(<span class="pl-k">setq</span> slime-lisp-implementations
      '((julia (<span class="pl-s"><span class="pl-pds">"</span>julia<span class="pl-pds">"</span></span> <span class="pl-s"><span class="pl-pds">"</span>-i<span class="pl-pds">"</span></span>) <span class="pl-c1">:init</span> julia-slime-init)
        (sbcl (<span class="pl-s"><span class="pl-pds">"</span>sbcl<span class="pl-pds">"</span></span>))))
		
(<span class="pl-c1">use-package</span> julia-mode
  <span class="pl-c1">:ensure</span> <span class="pl-c1">t</span>
  <span class="pl-c1">:config</span>
  (<span class="pl-c1">add-hook</span> <span class="pl-c1">'julia-mode-hook</span> <span class="pl-c1">'julia-slime-mode</span>)
  <span class="pl-c"><span class="pl-c">;</span>;(add-hook 'julia-mode-hook 'julia-repl-mode)</span>
  )

(<span class="pl-k">defun</span> <span class="pl-e">julia-slime-mode</span> ()
  (<span class="pl-c1">slime-mode</span>)
  (<span class="pl-c1">define-key</span> slime-mode-map (<span class="pl-c1">kbd</span> <span class="pl-s"><span class="pl-pds">"</span>C-x C-e<span class="pl-pds">"</span></span>)
    <span class="pl-c1">'slime-julia-eval-last-expression</span>))

(<span class="pl-k">defun</span> <span class="pl-e">slime-julia-eval-last-expression</span> ()
  (<span class="pl-k">interactive</span>)
  (<span class="pl-c1">save-excursion</span>
    (<span class="pl-k">let</span> ((end (<span class="pl-c1">point</span>)))
      (<span class="pl-c1">beginning-of-line</span>)
      (<span class="pl-k">let</span> ((start (<span class="pl-c1">point</span>)))
	(slime-flash-region start end)
	(slime-interactive-eval
	 (<span class="pl-c1">buffer-substring-no-properties</span> start end))))))

(<span class="pl-k">defun</span> <span class="pl-e">julia-slime</span> ()
  (<span class="pl-k">interactive</span>)
  (<span class="pl-c1">slime</span> <span class="pl-c1">'julia</span>))

(<span class="pl-k">defvar</span> <span class="pl-en">swank-julia-port</span> <span class="pl-c1">4005</span>
  <span class="pl-s"><span class="pl-pds">"</span>Port to use for communicating with the Julia swank server.<span class="pl-pds">"</span></span>)

(<span class="pl-k">defun</span> <span class="pl-e">julia-slime-init</span> (<span class="pl-v">file</span> <span class="pl-v">_</span>)
  (<span class="pl-k">setq</span> slime-protocol-version <span class="pl-c1">'ignore</span>)
  (<span class="pl-k">setq</span> slime-complete-symbol-function <span class="pl-c1">'slime-simple-complete-symbol</span>)
  (<span class="pl-k">setq</span> slime-description-autofocus <span class="pl-c1">t</span>)
  <span class="pl-c"><span class="pl-c">;</span>;(add-hook 'slime-popup-buffer-mode-hook #'markdown-mode)</span>
  (<span class="pl-c1">format</span> <span class="pl-pds">"</span><span class="pl-s">using Swank; createserver(port=<span class="pl-c1">%d</span>, filename=<span class="pl-cce">\"</span><span class="pl-c1">%s</span><span class="pl-cce">\"</span>)<span class="pl-cce">\n</span></span><span class="pl-pds">"</span> swank-julia-port file))
</pre></div>
<h2><a id="user-content-connecting-to-an-external-julia-repl" class="anchor" aria-hidden="true" href="#connecting-to-an-external-julia-repl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Connecting to an external JULIA REPL</h2>
<p>Start Julia from the command line. In the external REPL, type:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> Swank
<span class="pl-c1">createserver</span>()</pre></div>
<p>Then, from Emacs <code>M-x slime-connect</code>.</p>
<p>It can be useful to start Julia with DEBUG enabled, and see a trace of
SLIME/SWANK interactions:</p>
<div class="highlight highlight-source-shell"><pre>JULIA_DEBUG=Swank julia</pre></div>
<h2><a id="user-content-what-works" class="anchor" aria-hidden="true" href="#what-works"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>What works</h2>
<p>The following, standard SLIME features and key-bindings work:</p>
<p><code>C-x C-e</code> evaluates everything up to the point on the current line.</p>
<p><code>C-c C-r</code> evaluates the highlighted region.</p>
<p><code>C-c C-d d</code> brings up Julia docs for symbol.</p>
<p><code>C-c C-l</code> loads the current file using Julia <code>include</code>.</p>
<p><code>M-Tab</code> (<code>Tab</code> in the REPL) completion.</p>
<p>Shortcuts. First press <code>,</code> (comma) at the REPL prompt and then enter
the shortcutâ€™s name when prompted. e.g. <code>change-directory</code>,
<code>change-package</code>. (N.B. We have repurposed <code>change-package</code> to change
Module in Julia).</p>
<p>In addition, you can happily type stuff at the SLIME Julia REPL, cut
and paste etc.</p>
<p><code>C-c C-c</code> compiles function (but is a bit flakey, see below).</p>
<h2><a id="user-content-approach" class="anchor" aria-hidden="true" href="#approach"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Approach</h2>
<p>The SWANK protocol does not seem to be well documented, but there is
some information at
<a href="https://github.com/astine/swank-client/blob/master/swank-description.markdown">https://github.com/astine/swank-client/blob/master/swank-description.markdown</a>.
The SLIME, SwankR<sup>3</sup> and swank-chicken<sup>4</sup> source
code are also helpful. Much can be learned from running a SLIME / SBCL
session and looking at <code>*slime-events*</code>.</p>
<h2><a id="user-content-bugs--issues" class="anchor" aria-hidden="true" href="#bugs--issues"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Bugs / Issues</h2>
<p><code>C-x C-e</code> currently works line at a time, but perhaps it should be
block at a time? We don't properly figure out the start and end of
Julia forms. We could try finding a preceding blank line or comment.</p>
<p><code>C-c C-c</code> doesn't always get the function ... end boundary correct.</p>
<p><code>@info</code> and <code>@warn</code> are not shown in the SLIME REPL.</p>
<p>DataFrames work but they aren't shown as tables by default, although
you can <code>show(df)</code>.</p>
<p>Documentation can be dismissed with <code>q</code>, but setting <code>(add-hook 'slime-popup-buffer-mode-hook #'markdown-mode)</code> for markdown-mode
messes that up.</p>
<p>Completion doesn't work for package qualified symbols.</p>
<p>Whilst <code>slime-slector</code> can be used to switch to the REPL (<code>C-c s r</code>),
<code>C-c s l</code> doesn't return to the Julia source buffer.</p>
<h2><a id="user-content-todo" class="anchor" aria-hidden="true" href="#todo"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>TODO</h2>
<p><code>M-.</code> jump to source code definition.</p>
<p>Handle exceptions with some kind of debugger / SLDB style interaction.</p>
<p>Could we support Modules like Common Lisp Packages, changing the SLIME
prompt accordingly? (see <code>Base.active_project()</code>).</p>
<p>Use <code>slime-media</code> to show Julia Images and maybe plot outputs? (use
<code>showable</code>).</p>
<p>Consider adding <code>Revise.jl</code> to every Julia Slime session.</p>
<p>Could <code>slime-hyperspec-lookup</code> bring up a web page from the julia
online documentation?</p>
<p>Consider implementing <code>eval-in-emacs</code> (would require
<code>slime-enable-evaluate-in-emacs'</code> to be set to T on the Emacs
side). This would enable Julia to do some fancier things like pop-up
messages and may be more flexible than <code>slime-media</code> for images etc?</p>
<p>Better thread support.</p>
<p>Consider function naming consistency with the Swank.lisp and other
Swank implementations.</p>
<p>Consider wrapping up the Emacs side of the code in a package and
making it available on MELPA. It would be easier to get updates that
way (Tamas Papp).</p>
<p>The inability to parse function definition boundaries on the Emacs
side has been a long standing issue, see
<a href="https://github.com/JuliaEditorSupport/julia-emacs/issues/88">https://github.com/JuliaEditorSupport/julia-emacs/issues/88</a>. A
solution would benefit all related packages, and unless SLIME somehow
helps with this perhaps the best home for it would be julia-emacs
(Tamas Papp).</p>
<p>Inspector. Start by implementing <code>inspect-in-emacs</code>.</p>
<p>Consider implementing <code>background-messsage</code>.</p>
<p>Keep a record of the source files and locations from which functions
are compiled, to enable <code>M-.</code>.</p>
<h2><a id="user-content-faq" class="anchor" aria-hidden="true" href="#faq"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>FAQ</h2>
<h3><a id="user-content-there-is-no-package-manager-mode-how-can-i-add-packages" class="anchor" aria-hidden="true" href="#there-is-no-package-manager-mode-how-can-i-add-packages"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>There is no package manager mode. How can I add packages?</h3>
<p>We don't have Pkg in the REPL, but package management can easily be
undertaken as follows:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> Pkg 
<span class="pl-s"><span class="pl-pds"><span class="pl-c1">pkg</span>"</span>activate .<span class="pl-pds">"</span></span>
<span class="pl-s"><span class="pl-pds"><span class="pl-c1">pkg</span>"</span>add newpackage<span class="pl-pds">"</span></span></pre></div>
<h2><a id="user-content-references" class="anchor" aria-hidden="true" href="#references"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>References</h2>
<p>[1] the Julia programming language: <a href="https://julialang.org/" rel="nofollow">https://julialang.org/</a>.</p>
<p>[2] part of SLIME, the Superior Lisp Interaction Mode for Emacs:
<a href="http://common-lisp.net/project/slime/" rel="nofollow">http://common-lisp.net/project/slime/</a>.</p>
<p>[3] SWANK (and SLIME) for R: <a href="https://gitlab.common-lisp.net/crhodes/swankr" rel="nofollow">https://gitlab.common-lisp.net/crhodes/swankr</a>.</p>
<p>[4] SWANK server for chicken-scheme: <a href="https://github.com/nickg/swank-chicken">https://github.com/nickg/swank-chicken</a>.</p>
</article></div>