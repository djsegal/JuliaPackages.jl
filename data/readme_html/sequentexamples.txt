<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-sequentexamples" class="anchor" aria-hidden="true" href="#sequentexamples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>SequentExamples</h1>
<ul>
<li><code>TypeExpression.jl</code></li>
</ul>
<p>An example shows how to describe parsing's semantics.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="tr_arrow = @sequent TARROW begin
    σ ⊢ₜ f =&gt; T(ft)
    σ ⊢ₜ arg =&gt; T(argt)
    σ ⊢ₜ :($f ↦ $arg) =&gt; T(ft ↦ argt)
end

...

println(σ₀ ⊢ₜ :(forall[a, b][a ↦ (int, b)]))
# Type (forall a b.a-&gt;{int, b})
"><pre>tr_arrow <span class="pl-k">=</span> <span class="pl-c1">@sequent</span> TARROW <span class="pl-k">begin</span>
    σ ⊢ₜ f <span class="pl-k">=&gt;</span> <span class="pl-c1">T</span>(ft)
    σ ⊢ₜ arg <span class="pl-k">=&gt;</span> <span class="pl-c1">T</span>(argt)
    σ ⊢ₜ :(<span class="pl-k">$</span>f ↦ <span class="pl-k">$</span>arg) <span class="pl-k">=&gt;</span> <span class="pl-c1">T</span>(ft ↦ argt)
<span class="pl-k">end</span>

<span class="pl-k">...</span>

<span class="pl-c1">println</span>(σ₀ ⊢ₜ :(forall[a, b][a ↦ (int, b)]))
<span class="pl-c"><span class="pl-c">#</span> Type (forall a b.a-&gt;{int, b})</span></pre></div>
<ul>
<li><code>HM.jl</code></li>
</ul>
<p>An implementation of Damas-Hindley-Milner type system with syntax-directed INST and GEN.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="er_sym = @sequent ESYM begin
    (TC, σ) ⊢ₑ e::Symbol =&gt;
        let t = σ[e]
            :($e :: $t), t
        end
end
"><pre>er_sym <span class="pl-k">=</span> <span class="pl-c1">@sequent</span> ESYM <span class="pl-k">begin</span>
    (TC, σ) ⊢ₑ e<span class="pl-k">::</span><span class="pl-c1">Symbol</span> <span class="pl-k">=&gt;</span>
        <span class="pl-k">let</span> t <span class="pl-k">=</span> σ[e]
            :(<span class="pl-k">$</span>e <span class="pl-k">::</span> <span class="pl-c1">$t</span>), t
        <span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>
<p>Usage:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="ex, t = (TC, σ₀) ⊢ₛ quote
    x = function (x, y)
        x
    end
    x(1, (function(x) x end)(1))
end

@info :inferred_type TC.prune(t)
println(&quot;generate implicitly typed code:&quot;)
prune_ex!(ex) = @switch ex begin
    @case Expr(:(::), a, b)
        prune_ex!(a); ex.args[2] = TC.prune(b);nothing
    @case Expr(_, exprs...)
        foreach(prune_ex!, exprs)
    @case _
        nothing
    end

ex = toBlock(ex)
prune_ex!(ex)
ex |&gt; println
#=
┌ Info: inferred_type
└   TC.prune(t) = int
generate implicitly typed code:
begin
    #= ./SequentExamples/HM.jl:221 =#
    x::forall 'a2 'a1.{'a1, 'a2}-&gt;'a1 = function (x, y)
            #= ./SequentExamples/HM.jl:221 =#
            #= ./SequentExamples/HM.jl:222 =#
            x::'a1
        end
    #= ./SequentExamples/HM.jl:224 =#
    (x::forall 'a2 'a1.{'a1, 'a2}-&gt;'a1)(1::int, (function (x,)
                    #= ./SequentExamples/HM.jl:224 =#
                    #= ./SequentExamples/HM.jl:224 =#
                    x::int
                end)(1::int)::int)::int
end
"><pre>ex, t <span class="pl-k">=</span> (TC, σ₀) ⊢ₛ <span class="pl-k">quote</span>
    x <span class="pl-k">=</span> <span class="pl-k">function</span> (x, y)
        x
    <span class="pl-k">end</span>
    <span class="pl-c1">x</span>(<span class="pl-c1">1</span>, (<span class="pl-k">function</span>(x) x <span class="pl-k">end</span>)(<span class="pl-c1">1</span>))
<span class="pl-k">end</span>

<span class="pl-c1">@info</span> <span class="pl-c1">:inferred_type</span> TC<span class="pl-k">.</span><span class="pl-c1">prune</span>(t)
<span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>generate implicitly typed code:<span class="pl-pds">"</span></span>)
<span class="pl-en">prune_ex!</span>(ex) <span class="pl-k">=</span> <span class="pl-c1">@switch</span> ex <span class="pl-k">begin</span>
    <span class="pl-c1">@case</span> <span class="pl-c1">Expr</span>(:(<span class="pl-k">::</span>), a, b)
        <span class="pl-c1">prune_ex!</span>(a); ex<span class="pl-k">.</span>args[<span class="pl-c1">2</span>] <span class="pl-k">=</span> TC<span class="pl-k">.</span><span class="pl-c1">prune</span>(b);<span class="pl-c1">nothing</span>
    <span class="pl-c1">@case</span> <span class="pl-c1">Expr</span>(_, exprs<span class="pl-k">...</span>)
        <span class="pl-c1">foreach</span>(prune_ex!, exprs)
    <span class="pl-c1">@case</span> _
        <span class="pl-c1">nothing</span>
    <span class="pl-k">end</span>

ex <span class="pl-k">=</span> <span class="pl-c1">toBlock</span>(ex)
<span class="pl-c1">prune_ex!</span>(ex)
ex <span class="pl-k">|&gt;</span> println
<span class="pl-c"><span class="pl-c">#=</span></span>
<span class="pl-c">┌ Info: inferred_type</span>
<span class="pl-c">└   TC.prune(t) = int</span>
<span class="pl-c">generate implicitly typed code:</span>
<span class="pl-c">begin</span>
<span class="pl-c">    <span class="pl-c"><span class="pl-c">#=</span> ./SequentExamples/HM.jl:221 <span class="pl-c">=#</span></span></span>
<span class="pl-c">    x::forall 'a2 'a1.{'a1, 'a2}-&gt;'a1 = function (x, y)</span>
<span class="pl-c">            <span class="pl-c"><span class="pl-c">#=</span> ./SequentExamples/HM.jl:221 <span class="pl-c">=#</span></span></span>
<span class="pl-c">            <span class="pl-c"><span class="pl-c">#=</span> ./SequentExamples/HM.jl:222 <span class="pl-c">=#</span></span></span>
<span class="pl-c">            x::'a1</span>
<span class="pl-c">        end</span>
<span class="pl-c">    <span class="pl-c"><span class="pl-c">#=</span> ./SequentExamples/HM.jl:224 <span class="pl-c">=#</span></span></span>
<span class="pl-c">    (x::forall 'a2 'a1.{'a1, 'a2}-&gt;'a1)(1::int, (function (x,)</span>
<span class="pl-c">                    <span class="pl-c"><span class="pl-c">#=</span> ./SequentExamples/HM.jl:224 <span class="pl-c">=#</span></span></span>
<span class="pl-c">                    <span class="pl-c"><span class="pl-c">#=</span> ./SequentExamples/HM.jl:224 <span class="pl-c">=#</span></span></span>
<span class="pl-c">                    x::int</span>
<span class="pl-c">                end)(1::int)::int)::int</span>
<span class="pl-c">end</span></pre></div>
</article></div>