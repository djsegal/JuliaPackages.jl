<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p align="center">
  <a target="_blank" rel="noopener noreferrer" href="docs/CoDa.png"><img src="docs/CoDa.png" height="200" style="max-width:100%;"></a><br>
  <a href="https://github.com/JuliaEarth/CoDa.jl/actions">
    <img src="https://camo.githubusercontent.com/be31f3e83838e0cec35c282d6a8c3ffb50e49b545d29c863efa97bca7366a27f/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f776f726b666c6f772f7374617475732f4a756c696145617274682f436f44612e6a6c2f43493f7374796c653d666c61742d737175617265" data-canonical-src="https://img.shields.io/github/workflow/status/JuliaEarth/CoDa.jl/CI?style=flat-square" style="max-width:100%;">
  </a>
  <a href="https://codecov.io/gh/JuliaEarth/CoDa.jl" rel="nofollow">
    <img src="https://camo.githubusercontent.com/9bfcc61ab731583e858a38b193026567e8f84343891c795b8c03def52831a655/68747470733a2f2f696d672e736869656c64732e696f2f636f6465636f762f632f6769746875622f4a756c696145617274682f436f44612e6a6c3f7374796c653d666c61742d737175617265" data-canonical-src="https://img.shields.io/codecov/c/github/JuliaEarth/CoDa.jl?style=flat-square" style="max-width:100%;">
  </a>
  <a href="LICENSE">
    <img src="https://camo.githubusercontent.com/6ae43f07818e28c456bc0e4f35a61ebb4f08677499bf4eaa31c508107ccec75f/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d626c75652e7376673f7374796c653d666c61742d737175617265" data-canonical-src="https://img.shields.io/badge/license-MIT-blue.svg?style=flat-square" style="max-width:100%;">
  </a>
</p>
<p>This package is inspired by the R <a href="https://cran.r-project.org/web/packages/compositions/index.html" rel="nofollow">compositions</a>
package for compositional data analysis. Currently, only <strong>parts of the total</strong> features
are implemented. Contributions are very welcome.</p>
<p>CoDa.jl defines a <code>Composition{D}</code> type representing a D-part composition as defined by
<a href="https://www.jstor.org/stable/pdf/2345821.pdf" rel="nofollow">Aitchison 1986</a>. In Aitchison's geometry,
the D-simplex together with addition (a.k.a. pertubation) and scalar multiplication
(a.k.a. scaling) form a vector space, and important properties hold:</p>
<ul>
<li>Scaling invariance</li>
<li>Pertubation invariance</li>
<li>Permutation invariance</li>
<li>Subcompositional coherence</li>
</ul>
<p>In practice, this means that one can operate on compositional data (i.e.  vectors whose
entries represent parts of a total) without destroying the ratios of the parts.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>Get the latest stable release with Julia's package manager:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="] add CoDa
"><pre>] add CoDa</pre></div>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<h3><a id="user-content-basics" class="anchor" aria-hidden="true" href="#basics"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Basics</h3>
<p>Compositions are static vectors with named parts:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using CoDa
julia&gt; cₒ = Composition(CO₂=1.0, CH₄=0.1, N₂O=0.1)
                  3-part composition
       ┌                                        ┐ 
   CO₂ ┤■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■ 1.0   
   CH₄ ┤■■■■ 0.1                                  
   N₂O ┤■■■■ 0.1                                  
       └                                        ┘ 
julia&gt; c = Composition(CO₂=2.0, CH₄=0.1, N₂O=0.3)
                  3-part composition
       ┌                                        ┐ 
   CO₂ ┤■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■ 2.0   
   CH₄ ┤■■ 0.1                                    
   N₂O ┤■■■■■ 0.3                                 
       └                                        ┘ 
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> CoDa
julia<span class="pl-k">&gt;</span> cₒ <span class="pl-k">=</span> <span class="pl-c1">Composition</span>(CO₂<span class="pl-k">=</span><span class="pl-c1">1.0</span>, CH₄<span class="pl-k">=</span><span class="pl-c1">0.1</span>, N₂O<span class="pl-k">=</span><span class="pl-c1">0.1</span>)
                  <span class="pl-c1">3</span><span class="pl-k">-</span>part composition
       ┌                                        ┐ 
   CO₂ ┤■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■ <span class="pl-c1">1.0</span>   
   CH₄ ┤■■■■ <span class="pl-c1">0.1</span>                                  
   N₂O ┤■■■■ <span class="pl-c1">0.1</span>                                  
       └                                        ┘ 
julia<span class="pl-k">&gt;</span> c <span class="pl-k">=</span> <span class="pl-c1">Composition</span>(CO₂<span class="pl-k">=</span><span class="pl-c1">2.0</span>, CH₄<span class="pl-k">=</span><span class="pl-c1">0.1</span>, N₂O<span class="pl-k">=</span><span class="pl-c1">0.3</span>)
                  <span class="pl-c1">3</span><span class="pl-k">-</span>part composition
       ┌                                        ┐ 
   CO₂ ┤■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■ <span class="pl-c1">2.0</span>   
   CH₄ ┤■■ <span class="pl-c1">0.1</span>                                    
   N₂O ┤■■■■■ <span class="pl-c1">0.3</span>                                 
       └                                        ┘ </pre></div>
<p>Default names are added otherwise:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; c = Composition(1.0, 0.1, 0.1)
                     3-part composition
          ┌                                        ┐ 
   part-1 ┤■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■ 1.0   
   part-2 ┤■■■■ 0.1                                  
   part-3 ┤■■■■ 0.1                                  
          └                                        ┘ 
"><pre>julia<span class="pl-k">&gt;</span> c <span class="pl-k">=</span> <span class="pl-c1">Composition</span>(<span class="pl-c1">1.0</span>, <span class="pl-c1">0.1</span>, <span class="pl-c1">0.1</span>)
                     <span class="pl-c1">3</span><span class="pl-k">-</span>part composition
          ┌                                        ┐ 
   part<span class="pl-k">-</span><span class="pl-c1">1</span> ┤■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■ <span class="pl-c1">1.0</span>   
   part<span class="pl-k">-</span><span class="pl-c1">2</span> ┤■■■■ <span class="pl-c1">0.1</span>                                  
   part<span class="pl-k">-</span><span class="pl-c1">3</span> ┤■■■■ <span class="pl-c1">0.1</span>                                  
          └                                        ┘ </pre></div>
<p>and serve for internal compile-time checks.</p>
<p>Compositions can be added, subtracted, negated, and multiplied by
scalars. Other operations are also defined including dot product,
induced norm, and distance:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; -cₒ
                  3-part composition
       ┌                                        ┐ 
   CO₂ ┤■■ 0.047619047619047616                   
   CH₄ ┤■■■■■■■■■■■■■■■■■■■ 0.47619047619047616   
   N₂O ┤■■■■■■■■■■■■■■■■■■■ 0.47619047619047616   
       └                                        ┘ 
julia&gt; 0.5c
                  3-part composition
       ┌                                        ┐ 
   CO₂ ┤■■■■■■■■■■■■■■■■■■■■ 0.6207690197922022   
   CH₄ ┤■■■■ 0.13880817265812764                  
   N₂O ┤■■■■■■■■ 0.24042280754967013              
       └                                        ┘ 
julia&gt; c - cₒ
                  3-part composition
       ┌                                        ┐ 
   CO₂ ┤■■■■■■■■■■■■■■■■■■■■■■■ 0.3333333333333333  
   CH₄ ┤■■■■■■■■■■■■ 0.16666666666666666          
   N₂O ┤■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■ 0.5   
       └                                        ┘ 
julia&gt; c ⋅ cₒ
3.7554028908352994
julia&gt; norm(c)
2.1432393747688687
julia&gt; distance(c, cₒ)
0.7856640352007868
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">-</span>cₒ
                  <span class="pl-c1">3</span><span class="pl-k">-</span>part composition
       ┌                                        ┐ 
   CO₂ ┤■■ <span class="pl-c1">0.047619047619047616</span>                   
   CH₄ ┤■■■■■■■■■■■■■■■■■■■ <span class="pl-c1">0.47619047619047616</span>   
   N₂O ┤■■■■■■■■■■■■■■■■■■■ <span class="pl-c1">0.47619047619047616</span>   
       └                                        ┘ 
julia<span class="pl-k">&gt;</span> <span class="pl-c1">0.5</span>c
                  <span class="pl-c1">3</span><span class="pl-k">-</span>part composition
       ┌                                        ┐ 
   CO₂ ┤■■■■■■■■■■■■■■■■■■■■ <span class="pl-c1">0.6207690197922022</span>   
   CH₄ ┤■■■■ <span class="pl-c1">0.13880817265812764</span>                  
   N₂O ┤■■■■■■■■ <span class="pl-c1">0.24042280754967013</span>              
       └                                        ┘ 
julia<span class="pl-k">&gt;</span> c <span class="pl-k">-</span> cₒ
                  <span class="pl-c1">3</span><span class="pl-k">-</span>part composition
       ┌                                        ┐ 
   CO₂ ┤■■■■■■■■■■■■■■■■■■■■■■■ <span class="pl-c1">0.3333333333333333</span>  
   CH₄ ┤■■■■■■■■■■■■ <span class="pl-c1">0.16666666666666666</span>          
   N₂O ┤■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■ <span class="pl-c1">0.5</span>   
       └                                        ┘ 
julia<span class="pl-k">&gt;</span> c <span class="pl-k">⋅</span> cₒ
<span class="pl-c1">3.7554028908352994</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">norm</span>(c)
<span class="pl-c1">2.1432393747688687</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">distance</span>(c, cₒ)
<span class="pl-c1">0.7856640352007868</span></pre></div>
<p>More complex functions can be defined in terms of these
operations. For example, the function below defines the
composition line passing through <code>cₒ</code> in the direction of <code>c</code>:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; f(λ) = cₒ + λ*c
f (generic function with 1 method)
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-en">f</span>(λ) <span class="pl-k">=</span> cₒ <span class="pl-k">+</span> λ<span class="pl-k">*</span>c
f (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)</pre></div>
<p>Finally, two compositions are considered to be equal when
their closure is approximately equal:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; c == c
true
julia&gt; c == cₒ
false
"><pre>julia<span class="pl-k">&gt;</span> c <span class="pl-k">==</span> c
<span class="pl-c1">true</span>
julia<span class="pl-k">&gt;</span> c <span class="pl-k">==</span> cₒ
<span class="pl-c1">false</span></pre></div>
<h3><a id="user-content-transformations" class="anchor" aria-hidden="true" href="#transformations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Transformations</h3>
<p>Currently, the following transformations are implemented:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; alr(c)
2-element StaticArrays.SArray{Tuple{2},Float64,1,2} with indices SOneTo(2):
  1.8971199848858813
 -1.0986122886681096
julia&gt; clr(c)
3-element StaticArrays.SArray{Tuple{3},Float64,1,3} with indices SOneTo(3):
  1.6309507528132907
 -1.3647815207407001
 -0.2661692320725906
julia&gt; ilr(c)
2-element StaticArrays.SArray{Tuple{2},Float64,1,2} with indices SOneTo(2):
 -2.1183026052494185
 -0.3259894019031434
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">alr</span>(c)
<span class="pl-c1">2</span><span class="pl-k">-</span>element StaticArrays<span class="pl-k">.</span>SArray{Tuple{<span class="pl-c1">2</span>},Float64,<span class="pl-c1">1</span>,<span class="pl-c1">2</span>} with indices <span class="pl-c1">SOneTo</span>(<span class="pl-c1">2</span>)<span class="pl-k">:</span>
  <span class="pl-c1">1.8971199848858813</span>
 <span class="pl-k">-</span><span class="pl-c1">1.0986122886681096</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">clr</span>(c)
<span class="pl-c1">3</span><span class="pl-k">-</span>element StaticArrays<span class="pl-k">.</span>SArray{Tuple{<span class="pl-c1">3</span>},Float64,<span class="pl-c1">1</span>,<span class="pl-c1">3</span>} with indices <span class="pl-c1">SOneTo</span>(<span class="pl-c1">3</span>)<span class="pl-k">:</span>
  <span class="pl-c1">1.6309507528132907</span>
 <span class="pl-k">-</span><span class="pl-c1">1.3647815207407001</span>
 <span class="pl-k">-</span><span class="pl-c1">0.2661692320725906</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">ilr</span>(c)
<span class="pl-c1">2</span><span class="pl-k">-</span>element StaticArrays<span class="pl-k">.</span>SArray{Tuple{<span class="pl-c1">2</span>},Float64,<span class="pl-c1">1</span>,<span class="pl-c1">2</span>} with indices <span class="pl-c1">SOneTo</span>(<span class="pl-c1">2</span>)<span class="pl-k">:</span>
 <span class="pl-k">-</span><span class="pl-c1">2.1183026052494185</span>
 <span class="pl-k">-</span><span class="pl-c1">0.3259894019031434</span></pre></div>
<h3><a id="user-content-utilities" class="anchor" aria-hidden="true" href="#utilities"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Utilities</h3>
<p>It is often useful to compose <code>D</code> columns of a table into <code>D</code>-part compositions. The
package provides some utility functions for loading tabular data and for type conversion.</p>
<p>The function <code>readcoda(args...; codanames=[], kwargs...)</code> accepts the same arguments of
the <code>CSV.read</code> function from <a href="https://github.com/JuliaData/CSV.jl">CSV.jl</a> plus an
additional keyword argument <code>codanames</code> that specifies the columns with the parts of
the composition.</p>
<p>Similarly, the function <code>compose(table, cols)</code> takes an already loaded table and converts
the specified columns into a single column with <code>Composition</code> objects.</p>
<h2><a id="user-content-references" class="anchor" aria-hidden="true" href="#references"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>References</h2>
<p>The most practical reference by far is the book
<a href="http://www.springer.com/gp/book/9783642368080" rel="nofollow"><em>Analyzing Compositional Data With R</em></a> by
van den Boogaart K. G. et al. 2013. The book contains the examples that I reproduced in
this README and is a good start for scientists who are seeing this material for the first
time.</p>
<p>A more theoretical exposition can be found in the book <a href="https://www.wiley.com/en-us/Modeling+and+Analysis+of+Compositional+Data-p-9781118443064" rel="nofollow"><em>Modeling and Analysis of
Compositional Data</em></a>
by Pawlowsky-Glahn, V. et al. 2015. It contains detailed explanations of the concepts
introduced by Aitchison in the 80s, and is co-authored by important names in the field.</p>
</article></div>