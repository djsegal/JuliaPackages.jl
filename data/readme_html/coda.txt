<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p align="center" dir="auto">
  <a target="_blank" rel="noopener noreferrer" href="docs/CoDa.png"><img src="docs/CoDa.png" height="200" style="max-width: 100%;"></a><br>
  <a href="https://github.com/JuliaEarth/CoDa.jl/actions">
    <img src="https://camo.githubusercontent.com/a365d4a6e201957c76b45c52b5be0536be46b443f13f5338d3a89e00796d8d7c/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f616374696f6e732f776f726b666c6f772f7374617475732f4a756c696145617274682f436f44612e6a6c2f43492e796d6c3f6272616e63683d6d6173746572267374796c653d666c61742d737175617265" data-canonical-src="https://img.shields.io/github/actions/workflow/status/JuliaEarth/CoDa.jl/CI.yml?branch=master&amp;style=flat-square" style="max-width: 100%;">
  </a>
  <a href="https://codecov.io/gh/JuliaEarth/CoDa.jl" rel="nofollow">
    <img src="https://camo.githubusercontent.com/9bfcc61ab731583e858a38b193026567e8f84343891c795b8c03def52831a655/68747470733a2f2f696d672e736869656c64732e696f2f636f6465636f762f632f6769746875622f4a756c696145617274682f436f44612e6a6c3f7374796c653d666c61742d737175617265" data-canonical-src="https://img.shields.io/codecov/c/github/JuliaEarth/CoDa.jl?style=flat-square" style="max-width: 100%;">
  </a>
  <a href="LICENSE">
    <img src="https://camo.githubusercontent.com/6ae43f07818e28c456bc0e4f35a61ebb4f08677499bf4eaa31c508107ccec75f/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d626c75652e7376673f7374796c653d666c61742d737175617265" data-canonical-src="https://img.shields.io/badge/license-MIT-blue.svg?style=flat-square" style="max-width: 100%;">
  </a>
</p>
<p dir="auto">This package defines a <code>Composition{D}</code> type representing a D-part composition as defined by
<a href="https://www.jstor.org/stable/pdf/2345821.pdf" rel="nofollow">Aitchison 1986</a>. In Aitchison's geometry,
the D-simplex together with addition (a.k.a. pertubation) and scalar multiplication
(a.k.a. scaling) form a vector space, and important properties hold:</p>
<ul dir="auto">
<li>Scaling invariance</li>
<li>Pertubation invariance</li>
<li>Permutation invariance</li>
<li>Subcompositional coherence</li>
</ul>
<p dir="auto">In practice, this means that one can operate on compositional data (i.e.  vectors whose
entries represent parts of a total) without destroying the ratios of the parts.</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">Get the latest stable release with Julia's package manager:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="] add CoDa"><pre>] add CoDa</pre></div>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<h3 dir="auto"><a id="user-content-basics" class="anchor" aria-hidden="true" href="#basics"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Basics</h3>
<p dir="auto">Compositions are static vectors with named parts:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using CoDa

julia&gt; c = Composition(CO₂=2.0, CH₄=0.1, N₂O=0.3)
                  3-part composition
       ┌                                        ┐ 
   CO₂ ┤■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■ 2.0   
   CH₄ ┤■■ 0.1                                    
   N₂O ┤■■■■■ 0.3                                 
       └                                        ┘ 

julia&gt; parts(c)
(:CO₂, :CH₄, :N₂O)

julia&gt; components(c)
3-element StaticArrays.SVector{3, Union{Missing, Float64}} with indices SOneTo(3):
 2.0
 0.1
 0.3

julia&gt; c.CO₂
2.0"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> CoDa

julia<span class="pl-k">&gt;</span> c <span class="pl-k">=</span> <span class="pl-c1">Composition</span>(CO₂<span class="pl-k">=</span><span class="pl-c1">2.0</span>, CH₄<span class="pl-k">=</span><span class="pl-c1">0.1</span>, N₂O<span class="pl-k">=</span><span class="pl-c1">0.3</span>)
                  <span class="pl-c1">3</span><span class="pl-k">-</span>part composition
       ┌                                        ┐ 
   CO₂ ┤■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■ <span class="pl-c1">2.0</span>   
   CH₄ ┤■■ <span class="pl-c1">0.1</span>                                    
   N₂O ┤■■■■■ <span class="pl-c1">0.3</span>                                 
       └                                        ┘ 

julia<span class="pl-k">&gt;</span> <span class="pl-c1">parts</span>(c)
(<span class="pl-c1">:CO₂</span>, <span class="pl-c1">:CH₄</span>, <span class="pl-c1">:N₂O</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">components</span>(c)
<span class="pl-c1">3</span><span class="pl-k">-</span>element StaticArrays<span class="pl-k">.</span>SVector{<span class="pl-c1">3</span>, Union{Missing, Float64}} with indices <span class="pl-c1">SOneTo</span>(<span class="pl-c1">3</span>)<span class="pl-k">:</span>
 <span class="pl-c1">2.0</span>
 <span class="pl-c1">0.1</span>
 <span class="pl-c1">0.3</span>

julia<span class="pl-k">&gt;</span> c<span class="pl-k">.</span>CO₂
<span class="pl-c1">2.0</span></pre></div>
<p dir="auto">Default names are added otherwise:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; c = Composition(1.0, 0.1, 0.1)
                     3-part composition
      ┌                                        ┐ 
   w1 ┤■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■ 1.0   
   w2 ┤■■■■ 0.1                                  
   w3 ┤■■■■ 0.1                                  
      └                                        ┘ "><pre>julia<span class="pl-k">&gt;</span> c <span class="pl-k">=</span> <span class="pl-c1">Composition</span>(<span class="pl-c1">1.0</span>, <span class="pl-c1">0.1</span>, <span class="pl-c1">0.1</span>)
                     <span class="pl-c1">3</span><span class="pl-k">-</span>part composition
      ┌                                        ┐ 
   w1 ┤■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■ <span class="pl-c1">1.0</span>   
   w2 ┤■■■■ <span class="pl-c1">0.1</span>                                  
   w3 ┤■■■■ <span class="pl-c1">0.1</span>                                  
      └                                        ┘ </pre></div>
<p dir="auto">and serve for internal compile-time checks.</p>
<p dir="auto">Compositions can be added, subtracted, negated, and multiplied by
scalars. Other operations are also defined including dot product,
induced norm, and distance:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; cₒ = Composition(CO₂=1.0, CH₄=0.1, N₂O=0.1)
                  3-part composition
       ┌                                        ┐ 
   CO₂ ┤■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■ 1.0   
   CH₄ ┤■■■■ 0.1                                  
   N₂O ┤■■■■ 0.1                                  
       └                                        ┘ 

julia&gt; -cₒ
                  3-part composition
       ┌                                        ┐ 
   CO₂ ┤■■ 0.047619047619047616                   
   CH₄ ┤■■■■■■■■■■■■■■■■■■■ 0.47619047619047616   
   N₂O ┤■■■■■■■■■■■■■■■■■■■ 0.47619047619047616   
       └                                        ┘ 

julia&gt; 0.5c
                  3-part composition
       ┌                                        ┐ 
   CO₂ ┤■■■■■■■■■■■■■■■■■■■■ 0.6207690197922022   
   CH₄ ┤■■■■ 0.13880817265812764                  
   N₂O ┤■■■■■■■■ 0.24042280754967013              
       └                                        ┘ 

julia&gt; c - cₒ
                  3-part composition
       ┌                                        ┐ 
   CO₂ ┤■■■■■■■■■■■■■■■■■■■■■■■ 0.3333333333333333  
   CH₄ ┤■■■■■■■■■■■■ 0.16666666666666666          
   N₂O ┤■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■ 0.5   
       └                                        ┘ 

julia&gt; c ⋅ cₒ
3.7554028908352994

julia&gt; norm(c)
2.1432393747688687

julia&gt; aitchison(c, cₒ) # Aitchison distance
0.7856640352007868"><pre>julia<span class="pl-k">&gt;</span> cₒ <span class="pl-k">=</span> <span class="pl-c1">Composition</span>(CO₂<span class="pl-k">=</span><span class="pl-c1">1.0</span>, CH₄<span class="pl-k">=</span><span class="pl-c1">0.1</span>, N₂O<span class="pl-k">=</span><span class="pl-c1">0.1</span>)
                  <span class="pl-c1">3</span><span class="pl-k">-</span>part composition
       ┌                                        ┐ 
   CO₂ ┤■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■ <span class="pl-c1">1.0</span>   
   CH₄ ┤■■■■ <span class="pl-c1">0.1</span>                                  
   N₂O ┤■■■■ <span class="pl-c1">0.1</span>                                  
       └                                        ┘ 

julia<span class="pl-k">&gt;</span> <span class="pl-k">-</span>cₒ
                  <span class="pl-c1">3</span><span class="pl-k">-</span>part composition
       ┌                                        ┐ 
   CO₂ ┤■■ <span class="pl-c1">0.047619047619047616</span>                   
   CH₄ ┤■■■■■■■■■■■■■■■■■■■ <span class="pl-c1">0.47619047619047616</span>   
   N₂O ┤■■■■■■■■■■■■■■■■■■■ <span class="pl-c1">0.47619047619047616</span>   
       └                                        ┘ 

julia<span class="pl-k">&gt;</span> <span class="pl-c1">0.5</span>c
                  <span class="pl-c1">3</span><span class="pl-k">-</span>part composition
       ┌                                        ┐ 
   CO₂ ┤■■■■■■■■■■■■■■■■■■■■ <span class="pl-c1">0.6207690197922022</span>   
   CH₄ ┤■■■■ <span class="pl-c1">0.13880817265812764</span>                  
   N₂O ┤■■■■■■■■ <span class="pl-c1">0.24042280754967013</span>              
       └                                        ┘ 

julia<span class="pl-k">&gt;</span> c <span class="pl-k">-</span> cₒ
                  <span class="pl-c1">3</span><span class="pl-k">-</span>part composition
       ┌                                        ┐ 
   CO₂ ┤■■■■■■■■■■■■■■■■■■■■■■■ <span class="pl-c1">0.3333333333333333</span>  
   CH₄ ┤■■■■■■■■■■■■ <span class="pl-c1">0.16666666666666666</span>          
   N₂O ┤■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■ <span class="pl-c1">0.5</span>   
       └                                        ┘ 

julia<span class="pl-k">&gt;</span> c <span class="pl-k">⋅</span> cₒ
<span class="pl-c1">3.7554028908352994</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">norm</span>(c)
<span class="pl-c1">2.1432393747688687</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">aitchison</span>(c, cₒ) <span class="pl-c"><span class="pl-c">#</span> Aitchison distance</span>
<span class="pl-c1">0.7856640352007868</span></pre></div>
<p dir="auto">More complex functions can be defined in terms of these
operations. For example, the function below defines the
composition line passing through <code>cₒ</code> in the direction of <code>c</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; f(λ) = cₒ + λ*c
f (generic function with 1 method)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-en">f</span>(λ) <span class="pl-k">=</span> cₒ <span class="pl-k">+</span> λ<span class="pl-k">*</span>c
f (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)</pre></div>
<p dir="auto">Finally, two compositions are considered to be equal when
their closure is approximately equal:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; c == c
true

julia&gt; c == cₒ
false"><pre>julia<span class="pl-k">&gt;</span> c <span class="pl-k">==</span> c
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> c <span class="pl-k">==</span> cₒ
<span class="pl-c1">false</span></pre></div>
<h3 dir="auto"><a id="user-content-transforms" class="anchor" aria-hidden="true" href="#transforms"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Transforms</h3>
<p dir="auto">Currently, the following transforms are implemented:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; alr(c)
2-element StaticArrays.SArray{Tuple{2},Float64,1,2} with indices SOneTo(2):
  1.8971199848858813
 -1.0986122886681096

julia&gt; clr(c)
3-element StaticArrays.SArray{Tuple{3},Float64,1,3} with indices SOneTo(3):
  1.6309507528132907
 -1.3647815207407001
 -0.2661692320725906

julia&gt; ilr(c)
2-element StaticArrays.SArray{Tuple{2},Float64,1,2} with indices SOneTo(2):
 -2.1183026052494185
 -0.3259894019031434"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">alr</span>(c)
<span class="pl-c1">2</span><span class="pl-k">-</span>element StaticArrays<span class="pl-k">.</span>SArray{Tuple{<span class="pl-c1">2</span>},Float64,<span class="pl-c1">1</span>,<span class="pl-c1">2</span>} with indices <span class="pl-c1">SOneTo</span>(<span class="pl-c1">2</span>)<span class="pl-k">:</span>
  <span class="pl-c1">1.8971199848858813</span>
 <span class="pl-k">-</span><span class="pl-c1">1.0986122886681096</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">clr</span>(c)
<span class="pl-c1">3</span><span class="pl-k">-</span>element StaticArrays<span class="pl-k">.</span>SArray{Tuple{<span class="pl-c1">3</span>},Float64,<span class="pl-c1">1</span>,<span class="pl-c1">3</span>} with indices <span class="pl-c1">SOneTo</span>(<span class="pl-c1">3</span>)<span class="pl-k">:</span>
  <span class="pl-c1">1.6309507528132907</span>
 <span class="pl-k">-</span><span class="pl-c1">1.3647815207407001</span>
 <span class="pl-k">-</span><span class="pl-c1">0.2661692320725906</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">ilr</span>(c)
<span class="pl-c1">2</span><span class="pl-k">-</span>element StaticArrays<span class="pl-k">.</span>SArray{Tuple{<span class="pl-c1">2</span>},Float64,<span class="pl-c1">1</span>,<span class="pl-c1">2</span>} with indices <span class="pl-c1">SOneTo</span>(<span class="pl-c1">2</span>)<span class="pl-k">:</span>
 <span class="pl-k">-</span><span class="pl-c1">2.1183026052494185</span>
 <span class="pl-k">-</span><span class="pl-c1">0.3259894019031434</span></pre></div>
<p dir="auto">and their inverses <code>alrinv</code>, <code>clrinv</code> and <code>ilrinv</code>.</p>
<p dir="auto">The package also defines transforms for tables following to the
<a href="https://github.com/JuliaML/TableTransforms.jl">TableTransforms.jl</a> interface, including <code>Closure</code>, <code>Remainder</code>, <code>ALR</code>, <code>CLR</code>, <code>ILR</code>.
These transforms are functors that can be used as follows:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; table |&gt; ILR()"><pre>julia<span class="pl-k">&gt;</span> table <span class="pl-k">|&gt;</span> <span class="pl-c1">ILR</span>()</pre></div>
<h3 dir="auto"><a id="user-content-arrays" class="anchor" aria-hidden="true" href="#arrays"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Arrays</h3>
<p dir="auto">It is often useful to compose <code>D</code> columns of a table into <code>D</code>-part compositions. The
package provides a <code>CoDaArray</code> type that implements the Julia array interface <em>and</em> the
Tables.jl interface. We recommend using the function <code>compose(table, cols)</code> to construct
such arrays:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; table = (a=[1,2,3], b=[4,5,6], c=[7,8,9])
(a = [1, 2, 3], b = [4, 5, 6], c = [7, 8, 9])

julia&gt; ctable = compose(table, (:a,:b))
(c = [7, 8, 9], coda = Composition{2, (:a, :b)}[&quot;1.000 : 4.000&quot;, &quot;2.000 : 5.000&quot;, &quot;3.000 : 6.000&quot;])

julia&gt; ctable.coda[1]
                2-part composition
     ┌                                        ┐ 
   a ┤■■■■■■■■■ 1.0                             
   b ┤■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■ 4.0   
     └                                        ┘ "><pre>julia<span class="pl-k">&gt;</span> table <span class="pl-k">=</span> (a<span class="pl-k">=</span>[<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>], b<span class="pl-k">=</span>[<span class="pl-c1">4</span>,<span class="pl-c1">5</span>,<span class="pl-c1">6</span>], c<span class="pl-k">=</span>[<span class="pl-c1">7</span>,<span class="pl-c1">8</span>,<span class="pl-c1">9</span>])
(a <span class="pl-k">=</span> [<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>], b <span class="pl-k">=</span> [<span class="pl-c1">4</span>, <span class="pl-c1">5</span>, <span class="pl-c1">6</span>], c <span class="pl-k">=</span> [<span class="pl-c1">7</span>, <span class="pl-c1">8</span>, <span class="pl-c1">9</span>])

julia<span class="pl-k">&gt;</span> ctable <span class="pl-k">=</span> <span class="pl-c1">compose</span>(table, (<span class="pl-c1">:a</span>,<span class="pl-c1">:b</span>))
(c <span class="pl-k">=</span> [<span class="pl-c1">7</span>, <span class="pl-c1">8</span>, <span class="pl-c1">9</span>], coda <span class="pl-k">=</span> Composition{<span class="pl-c1">2</span>, (<span class="pl-c1">:a</span>, <span class="pl-c1">:b</span>)}[<span class="pl-s"><span class="pl-pds">"</span>1.000 : 4.000<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>2.000 : 5.000<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>3.000 : 6.000<span class="pl-pds">"</span></span>])

julia<span class="pl-k">&gt;</span> ctable<span class="pl-k">.</span>coda[<span class="pl-c1">1</span>]
                <span class="pl-c1">2</span><span class="pl-k">-</span>part composition
     ┌                                        ┐ 
   a ┤■■■■■■■■■ <span class="pl-c1">1.0</span>                             
   b ┤■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■ <span class="pl-c1">4.0</span>   
     └                                        ┘ </pre></div>
<h3 dir="auto"><a id="user-content-random" class="anchor" aria-hidden="true" href="#random"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Random</h3>
<p dir="auto"><code>D</code>-part compositions can be created at random from a Dirichlet distribution:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; rand(Composition{3})
                 3-part composition
      ┌                                        ┐ 
   w1 ┤■■■■■■■■■■■■■■■■■ 0.39938229705106565     
   w2 ┤■■■■■■ 0.1491859823748656                 
   w3 ┤■■■■■■■■■■■■■■■■■■■ 0.45143172057406883   
      └                                        ┘"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">rand</span>(Composition{<span class="pl-c1">3</span>})
                 <span class="pl-c1">3</span><span class="pl-k">-</span>part composition
      ┌                                        ┐ 
   w1 ┤■■■■■■■■■■■■■■■■■ <span class="pl-c1">0.39938229705106565</span>     
   w2 ┤■■■■■■ <span class="pl-c1">0.1491859823748656</span>                 
   w3 ┤■■■■■■■■■■■■■■■■■■■ <span class="pl-c1">0.45143172057406883</span>   
      └                                        ┘</pre></div>
<h3 dir="auto"><a id="user-content-plots" class="anchor" aria-hidden="true" href="#plots"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Plots</h3>
<p dir="auto">Separate packages are available for plotting compositional data:</p>
<ul dir="auto">
<li>Relative variation biplots: <a href="https://github.com/MakieOrg/Biplots.jl">Biplots.jl</a></li>
<li>Ternary diagrams (Makie.jl) <a href="https://github.com/stelmo/TernaryDiagrams.jl">TernaryDiagrams.jl</a></li>
<li>Ternary diagrams (Plots.jl) <a href="https://github.com/jacobusmmsmit/TernaryPlots.jl">TernaryPlots.jl</a></li>
</ul>
<h2 dir="auto"><a id="user-content-references" class="anchor" aria-hidden="true" href="#references"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>References</h2>
<p dir="auto">This package is heavily influenced by Aitchison's monograph:</p>
<ul dir="auto">
<li>Aitchison, J. 1986. <em>The Statistical Analysis of Compositional Data</em></li>
</ul>
<p dir="auto">and by other textbooks:</p>
<ul dir="auto">
<li>den Boogaart, K. &amp; Tolosana-Delgado. 2011. <em>Analyzing Compositional Data with R</em></li>
<li>Pawlowsky-Glahn et al. 2015. <em>Modeling and Analysis of Compositional Data</em></li>
<li>Pawlowsky-Glahn, V. &amp; Buccianti, A. 2011. <em>Compositional Data Analysis - Theory and Applications</em></li>
</ul>
<h3 dir="auto"><a id="user-content-notes" class="anchor" aria-hidden="true" href="#notes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Notes</h3>
<p dir="auto">The unicode display of composition objects can be obtained with the
following code:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using UnicodePlots
using CoDa

function Base.show(io::IO, mime::MIME&quot;text/plain&quot;,
                   c::Composition{D,PARTS}) where {D,PARTS}
  w = components(c)
  x = Vector{Float64}()
  p = Vector{Symbol}()
  m = Vector{Symbol}()
  for i in 1:D
    if ismissing(w[i])
      push!(m, PARTS[i])
    else
      push!(p, PARTS[i])
      push!(x, w[i])
    end
  end
  plt = barplot(p, x, title=&quot;$D-part composition&quot;)
  isempty(m) || annotate!(plt, :t, &quot;missing: $(join(m,&quot;, &quot;))&quot;)
  show(io, mime, plt)
end"><pre><span class="pl-k">using</span> UnicodePlots
<span class="pl-k">using</span> CoDa

<span class="pl-k">function</span> Base<span class="pl-k">.</span><span class="pl-en">show</span>(io<span class="pl-k">::</span><span class="pl-c1">IO</span>, mime<span class="pl-k">::</span><span class="pl-c1">MIME"text/plain"</span>,
                   c<span class="pl-k">::</span><span class="pl-c1">Composition{D,PARTS}</span>) <span class="pl-k">where</span> {D,PARTS}
  w <span class="pl-k">=</span> <span class="pl-c1">components</span>(c)
  x <span class="pl-k">=</span> <span class="pl-c1">Vector</span><span class="pl-c1">{Float64}</span>()
  p <span class="pl-k">=</span> <span class="pl-c1">Vector</span><span class="pl-c1">{Symbol}</span>()
  m <span class="pl-k">=</span> <span class="pl-c1">Vector</span><span class="pl-c1">{Symbol}</span>()
  <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span>D
    <span class="pl-k">if</span> <span class="pl-c1">ismissing</span>(w[i])
      <span class="pl-c1">push!</span>(m, PARTS[i])
    <span class="pl-k">else</span>
      <span class="pl-c1">push!</span>(p, PARTS[i])
      <span class="pl-c1">push!</span>(x, w[i])
    <span class="pl-k">end</span>
  <span class="pl-k">end</span>
  plt <span class="pl-k">=</span> <span class="pl-c1">barplot</span>(p, x, title<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span><span class="pl-v">$D</span>-part composition<span class="pl-pds">"</span></span>)
  <span class="pl-c1">isempty</span>(m) <span class="pl-k">||</span> <span class="pl-c1">annotate!</span>(plt, <span class="pl-c1">:t</span>, <span class="pl-s"><span class="pl-pds">"</span>missing: <span class="pl-v">$(<span class="pl-c1">join</span>(m,<span class="pl-s"><span class="pl-pds">"</span>, <span class="pl-pds">"</span></span>))</span><span class="pl-pds">"</span></span>)
  <span class="pl-c1">show</span>(io, mime, plt)
<span class="pl-k">end</span></pre></div>
<p dir="auto">The code is not added to the CoDa.jl package itself because
the UnicodePlots.jl package has become a very heavy dependency, see
<a href="https://github.com/JuliaPlots/UnicodePlots.jl/issues/291" data-hovercard-type="issue" data-hovercard-url="/JuliaPlots/UnicodePlots.jl/issues/291/hovercard">UnicodePlots/issues/291</a>.</p>
</article></div>