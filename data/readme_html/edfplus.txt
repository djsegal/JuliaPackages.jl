<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-edfplusjl" class="anchor" aria-hidden="true" href="#edfplusjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>EDFPlus.jl</h1>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/wherrera10/EDFPlus.jl/blob/master/docs/src/eeg.png"><img src="https://github.com/wherrera10/EDFPlus.jl/raw/master/docs/src/eeg.png" style="max-width: 100%;"></a></p>
<p dir="auto"><a href="https://ci.appveyor.com/project/wherrera10/edfplus.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/f00699260237e4a22954b178ff760dc70fdcaeefea522ace1bb9044e9122019c/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f636677367065303372666e3971736f6f3f7376673d74727565" alt="Build status" data-canonical-src="https://ci.appveyor.com/api/projects/status/cfw6pe03rfn9qsoo?svg=true" style="max-width: 100%;"></a>
<a href="https://travis-ci.com/wherrera10/EDFPlus.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/f97aa5aae20635713d5cb8c55782d89348e62c4fba4cd41dad38413fa13bdbb8/68747470733a2f2f7472617669732d63692e636f6d2f776865727265726131302f454446506c75732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/wherrera10/EDFPlus.jl.svg?branch=master" style="max-width: 100%;"></a>
<a href="https://github.com/wherrera10/EDFPlus.jl/actions/workflows/ci.yml"><img src="https://github.com/wherrera10/EDFPlus.jl/actions/workflows/ci.yml/badge.svg" alt="CI" style="max-width: 100%;"></a>
<a href="https://coveralls.io/github/wherrera10/EDFPlus.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/dba44e46be785bab0623cccec38002847453e3ed1d0f315186a6076a7b3197fd/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f776865727265726131302f454446506c75732e6a6c2f62616467652e737667" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/wherrera10/EDFPlus.jl/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">Julia for handling BDF+ and EDF+ EEG and similar signal data files.</p>
<p dir="auto">Heavily influenced by the C EEG library edflib.</p>
<h2 dir="auto"><a id="user-content-data-structs-and-functions" class="anchor" aria-hidden="true" href="#data-structs-and-functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Data Structs and Functions</h2>
<h3 dir="auto"><a id="user-content-structs" class="anchor" aria-hidden="true" href="#structs"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Structs:</h3>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="mutable struct ChannelParam      # this structure contains all the relevant EDF-signal parameters of one signal
    label::String                  # label (name) of the signal, eg &quot;C4&quot; if in 10-20 labeling terms
    transducer::String             # signal transducer type
    physdimension::String          # physical dimension (uV, bpm, mA, etc.)
    physmax::Float64               # physical maximum, usually the maximum input of the ADC
    physmin::Float64               # physical minimum, usually the minimum input of the ADC
    digmax::Int                    # digital maximum, usually the maximum output of the ADC, cannot be higher than 32767 for EDF or 8388607 for BDF
    digmin::Int                    # digital minimum, usually the minimum output of the ADC, cannot be lower than -32768 for EDF or -8388608 for BDF
    smp_per_record::Int            # number of samples of this signal in a datarecord
    prefilter::String              # channel prefiltering settings if any
    reserved::String               # header reserved ascii text, 32 bytes
    offset::Float64                # offset of center of physical data value from center of digital values
    bufoffset::Int                 # bytes from start of record to start of this channel (zero for first channel)
    bitvalue::Float64              # physical data value of one unit change in digital value
    annotation::Bool               # true if is an annotation not a binary mapped signal data channel
    ChannelParam() = new(&quot;&quot;,&quot;&quot;,&quot;&quot;,0.0,0.0,0,0,0,&quot;&quot;,&quot;&quot;,0.0,0,0.0,false)
end"><pre class="notranslate"><code>mutable struct ChannelParam      # this structure contains all the relevant EDF-signal parameters of one signal
    label::String                  # label (name) of the signal, eg "C4" if in 10-20 labeling terms
    transducer::String             # signal transducer type
    physdimension::String          # physical dimension (uV, bpm, mA, etc.)
    physmax::Float64               # physical maximum, usually the maximum input of the ADC
    physmin::Float64               # physical minimum, usually the minimum input of the ADC
    digmax::Int                    # digital maximum, usually the maximum output of the ADC, cannot be higher than 32767 for EDF or 8388607 for BDF
    digmin::Int                    # digital minimum, usually the minimum output of the ADC, cannot be lower than -32768 for EDF or -8388608 for BDF
    smp_per_record::Int            # number of samples of this signal in a datarecord
    prefilter::String              # channel prefiltering settings if any
    reserved::String               # header reserved ascii text, 32 bytes
    offset::Float64                # offset of center of physical data value from center of digital values
    bufoffset::Int                 # bytes from start of record to start of this channel (zero for first channel)
    bitvalue::Float64              # physical data value of one unit change in digital value
    annotation::Bool               # true if is an annotation not a binary mapped signal data channel
    ChannelParam() = new("","","",0.0,0.0,0,0,0,"","",0.0,0,0.0,false)
end
</code></pre></div>
<p dir="auto">Parameters for each channel in the EEG record.
<br><br><br></p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="mutable struct Annotation
    onset::Float64
    duration::String
    annotation::Array{String,1}
    Annotation() = new(0.0,&quot;&quot;,[])
    Annotation(o,d,arr) = new(o, d, typeof(arr) == String ? [arr] : arr)
end"><pre class="notranslate"><code>mutable struct Annotation
    onset::Float64
    duration::String
    annotation::Array{String,1}
    Annotation() = new(0.0,"",[])
    Annotation(o,d,arr) = new(o, d, typeof(arr) == String ? [arr] : arr)
end
</code></pre></div>
<p dir="auto">These are text strings within the file denoting a time, optionally duration, and a list of notes
about the signal at that particular time in the recording. The first onset time
of the annotation channel gives a fractional second offset adjustment of the
start time of that record, which is specified in whole seconds in the header.
<br><br><br></p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="mutable struct BEDFPlus                   # signal file data for EDF, BDF, EDF+, and BDF+ files
    ios::IOStream                         # file handle for the file containing the data
    path::String                          # file pathname
    writemode::Bool                       # true if is intended for writing to file
    version::String                       # version of the file format
    edf::Bool                             # EDF?
    edfplus::Bool                         # EDF+?
    bdf::Bool                             # BDF?
    bdfplus::Bool                         # BDF+?
    discontinuous::Bool                   # discontinuous (EDF+D?)
    filetype::FileStatus                  # @enum FileStatus as above
    channelcount::Int                     # total number of EDF signal bands in the file INCLUDING annotation channels
    file_duration::Float64                # duration of the file in seconds expressed as 64-bit floating point
    startdate_day::Int                    # startdate of study, day of month of startdate of study
    startdate_month::Int                  # startdate month
    startdate_year::Int                   # startdate year
    starttime_subsecond::Float64          # starttime offset in seconds, should be &lt; 1 sec in size. Only used by EDFplus and BDFplus
    starttime_second::Int                 # this is in integer seconds, the field above makes it more precise
    starttime_minute::Int                 # startdate and time, minutes
    starttime_hour::Int                   # 0 to 23, midnight is 00:00:00
    # next 11 fields are for EDF+ and BDF+ files only
    patient::String                       # contains patientfield of header, is always empty when filetype is EDFPLUS or BDFPLUS
    recording::String                     # contains recordingfield of header, is always empty when filetype is EDFPLUS or BDFPLUS
    patientcode::String                   # empty when filetype is EDF or BDF
    gender::String                        # empty when filetype is EDF or BDF
    birthdate::String                     # empty when filetype is EDF or BDF
    patientname::String                   # empty when filetype is EDF or BDF
    patient_additional::String            # empty when filetype is EDF or BDF
    admincode::String                     # empty when filetype is EDF or BDF
    technician::String                    # empty when filetype is EDF or BDF
    equipment::String                     # empty when filetype is EDF or BDF
    recording_additional::String          # empty when filetype is EDF or BDF
    datarecord_duration::Float64          # duration of one datarecord in units of seconds
    datarecords::Int64                    # number of datarecords in the file
    startdatestring::String               # date recording started in dd-uuu-yyyy format
    reserved::String                      # reserved, 32 byte string
    headersize::Int                       # size of header in bytes
    recordsize::Int                       # size of one data record in bytes, these follow header
    annotationchannel::Int                # position in record of annotation channel
    mapped_signals::Array{Int,1}          # positions in record of channels carrying data
    signalparam::Array{ChannelParam,1}    # Array of structs which contain the per-signal parameters
    annotations::Array{Array{Annotation,1},1} # Array of lists of annotations
    EDFsignals::Array{Int16,2}    # 2D array, each row a record, columns are channels including annotations
    BDFsignals::Array{Int32,2}    # Note that either EDFsignals or BDFsignals is used
    BEDFPlus() = new(IOStream(&quot;nothing&quot;),&quot;&quot;,false,&quot;&quot;,false,false,false,false,false,READ_ERROR,0,0.0,0,0,0,0.0,0,0,0,
                        &quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,0.0,0,&quot;&quot;,&quot;&quot;,0,0,0,
                        Array{Int,1}(undef,0),Array{ChannelParam,1}(undef,0),
                        Array{Array{Annotation,1},1}(undef,0),Array{Int16,2}(undef,0,0),Array{Int32,2}(undef,0,0))
end"><pre class="notranslate"><code>mutable struct BEDFPlus                   # signal file data for EDF, BDF, EDF+, and BDF+ files
    ios::IOStream                         # file handle for the file containing the data
    path::String                          # file pathname
    writemode::Bool                       # true if is intended for writing to file
    version::String                       # version of the file format
    edf::Bool                             # EDF?
    edfplus::Bool                         # EDF+?
    bdf::Bool                             # BDF?
    bdfplus::Bool                         # BDF+?
    discontinuous::Bool                   # discontinuous (EDF+D?)
    filetype::FileStatus                  # @enum FileStatus as above
    channelcount::Int                     # total number of EDF signal bands in the file INCLUDING annotation channels
    file_duration::Float64                # duration of the file in seconds expressed as 64-bit floating point
    startdate_day::Int                    # startdate of study, day of month of startdate of study
    startdate_month::Int                  # startdate month
    startdate_year::Int                   # startdate year
    starttime_subsecond::Float64          # starttime offset in seconds, should be &lt; 1 sec in size. Only used by EDFplus and BDFplus
    starttime_second::Int                 # this is in integer seconds, the field above makes it more precise
    starttime_minute::Int                 # startdate and time, minutes
    starttime_hour::Int                   # 0 to 23, midnight is 00:00:00
    # next 11 fields are for EDF+ and BDF+ files only
    patient::String                       # contains patientfield of header, is always empty when filetype is EDFPLUS or BDFPLUS
    recording::String                     # contains recordingfield of header, is always empty when filetype is EDFPLUS or BDFPLUS
    patientcode::String                   # empty when filetype is EDF or BDF
    gender::String                        # empty when filetype is EDF or BDF
    birthdate::String                     # empty when filetype is EDF or BDF
    patientname::String                   # empty when filetype is EDF or BDF
    patient_additional::String            # empty when filetype is EDF or BDF
    admincode::String                     # empty when filetype is EDF or BDF
    technician::String                    # empty when filetype is EDF or BDF
    equipment::String                     # empty when filetype is EDF or BDF
    recording_additional::String          # empty when filetype is EDF or BDF
    datarecord_duration::Float64          # duration of one datarecord in units of seconds
    datarecords::Int64                    # number of datarecords in the file
    startdatestring::String               # date recording started in dd-uuu-yyyy format
    reserved::String                      # reserved, 32 byte string
    headersize::Int                       # size of header in bytes
    recordsize::Int                       # size of one data record in bytes, these follow header
    annotationchannel::Int                # position in record of annotation channel
    mapped_signals::Array{Int,1}          # positions in record of channels carrying data
    signalparam::Array{ChannelParam,1}    # Array of structs which contain the per-signal parameters
    annotations::Array{Array{Annotation,1},1} # Array of lists of annotations
    EDFsignals::Array{Int16,2}    # 2D array, each row a record, columns are channels including annotations
    BDFsignals::Array{Int32,2}    # Note that either EDFsignals or BDFsignals is used
    BEDFPlus() = new(IOStream("nothing"),"",false,"",false,false,false,false,false,READ_ERROR,0,0.0,0,0,0,0.0,0,0,0,
                        "","","","","","","","","","","",0.0,0,"","",0,0,0,
                        Array{Int,1}(undef,0),Array{ChannelParam,1}(undef,0),
                        Array{Array{Annotation,1},1}(undef,0),Array{Int16,2}(undef,0,0),Array{Int32,2}(undef,0,0))
end
</code></pre></div>
<p dir="auto">Data struct for EDF, EDF+, BDF, and BDF+ EEG type signal files.
<br><br><br></p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="DataFormat"><pre class="notranslate"><code>DataFormat
</code></pre></div>
<p dir="auto">enum for types this package handles. Current format for a potential translation is also /same/.
<br><br><br></p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="FileStatus"><pre class="notranslate"><code>FileStatus
</code></pre></div>
<p dir="auto">enum for type or state of file: type of data detected, whether any errors
<br><br><br></p>
<h3 dir="auto"><a id="user-content-functions" class="anchor" aria-hidden="true" href="#functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Functions:</h3>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="loadfile(path::String, read_annotations=true)"><pre class="notranslate"><code>loadfile(path::String, read_annotations=true)
</code></pre></div>
<p dir="auto">Load a BDF+ or EDF+ type file.
Takes a pathname. Will ignore annotations if second argument is set false.
Returns a BEDFPlus structure including header and data.
<br><br><br></p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="writefile!(edfh, newpath; acquire=dummyacquire, sigformat=same)"><pre class="notranslate"><code>writefile!(edfh, newpath; acquire=dummyacquire, sigformat=same)
</code></pre></div>
<p dir="auto">Write to data in the edfh struct to the file indicated by newpath
Returns the file handle of the file written, opened for reading
NOTE: The header needs to be completely specified at function start except for
the final number of records, which will be updated after all data records
are written. For a system that is recording the data as it is written, the
acquire(edfh) function should write the data according the the header parameters.
Note that if the function converts from BDF to EDF or EDF to BDF, the edfh struct is changed.
<br><br><br></p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="epoch_iterator(edfh, epochsecs; channels, startsec, endsec, physical)"><pre class="notranslate"><code>epoch_iterator(edfh, epochsecs; channels, startsec, endsec, physical)
</code></pre></div>
<p dir="auto">Make an iterator for EEG epochs of a given duration between start and stop times.
Required arguments:</p>
<ul dir="auto">
<li>edfh: BEDFPlus struct</li>
<li>epochsecs: second duration of each epoch</li>
</ul>
<p dir="auto">Optional arguments:</p>
<ul dir="auto">
<li>
<p dir="auto">channels: List of channel numbers for data, defaults to all signal channels</p>
</li>
<li>
<p dir="auto">startsec: Starting position from 0 at start of file, defaults to file start</p>
</li>
<li>
<p dir="auto">endsec: Ending position in seconds from start of <em>file</em>, defaults to file end</p>
</li>
<li>
<p dir="auto">physical: Whether to return data as translated to the physical units, defaults to true
<br><br><br></p>
<p dir="auto">annotation_epoch_iterator(edfh, epochsecs; startsec, endsec)</p>
</li>
</ul>
<p dir="auto">Return an iterator for a group of annotations for a given epoch as in epoch_iterator
<br><br><br></p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="dummyacquire(edfh)"><pre class="notranslate"><code>dummyacquire(edfh)
</code></pre></div>
<p dir="auto">Dummy function for call in writefile! for optional acquire function
If using package for data acquisition will need to custom write the acquire function
for your calls to writefile!
<br><br><br></p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="channeltimesegment(edfh, channel, startsec, endsec, physical)"><pre class="notranslate"><code>channeltimesegment(edfh, channel, startsec, endsec, physical)
</code></pre></div>
<p dir="auto">Get the channel's data between the time points
<br><br><br></p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="multichanneltimesegment(edfh, chanlist, startsec, endsec, physical)"><pre class="notranslate"><code>multichanneltimesegment(edfh, chanlist, startsec, endsec, physical)
</code></pre></div>
<p dir="auto">Get an multichannel array of lists of datapoints over time segment
Works best if all datapoint signal rates are the same
<br><br><br></p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="signalindices(edfh, channelnumber)"><pre class="notranslate"><code>signalindices(edfh, channelnumber)
</code></pre></div>
<p dir="auto">Get a pair of indices of a channel's bytes within each of the data records
<br><br><br></p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="digitalchanneldata(edfh, channelnumber)"><pre class="notranslate"><code>digitalchanneldata(edfh, channelnumber)
</code></pre></div>
<p dir="auto">Get a single digital channel of data in its entirety.
Arguments:</p>
<ul dir="auto">
<li>
<p dir="auto">edfh:          the BEDFPlus struct</p>
</li>
<li>
<p dir="auto">channelnumber: the channel number in the records
<br><br><br></p>
<p dir="auto">physicalchanneldata(edfh, channelnumber)</p>
</li>
</ul>
<p dir="auto">Get a single data channel in its entirely, in the physical units stated in the header
Arguments:</p>
<ul dir="auto">
<li>
<p dir="auto">edfh:          the BEDFPlus struct</p>
</li>
<li>
<p dir="auto">channelnumber: the channel number in the records-- a channel in the mapped_signals list
<br><br><br></p>
<p dir="auto">samplerate(edfh, channel)</p>
</li>
</ul>
<p dir="auto">Get sample (sampling) rate (fs) on the channel in sec^-1 units
<br><br><br></p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="notchfilter(signals, fs, notchfreq=60, q = 35)"><pre class="notranslate"><code>notchfilter(signals, fs, notchfreq=60, q = 35)
</code></pre></div>
<p dir="auto">Notch filter signals in array signals, return filtered signals
<br><br><br></p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="highpassfilter(signals, fs, cutoff=1.0, order=4)"><pre class="notranslate"><code>highpassfilter(signals, fs, cutoff=1.0, order=4)
</code></pre></div>
<p dir="auto">Apply high pass filter to signals, return filtered data
<br><br><br></p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="lowpassfilter(signals, fs, cutoff=25.0, order=4)"><pre class="notranslate"><code>lowpassfilter(signals, fs, cutoff=25.0, order=4)
</code></pre></div>
<p dir="auto">Apply low pass filter to signals, return filtered data
<br><br><br></p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="closefile!(edfh)"><pre class="notranslate"><code>closefile!(edfh)
</code></pre></div>
<p dir="auto">Close the file opened by loadfile and loaded to the BEDFPlus struct
May therefore let GC release memory from read data in edfh
<br><br><br></p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="readdata!(edfh)"><pre class="notranslate"><code>readdata!(edfh)
</code></pre></div>
<p dir="auto">Helper function for loadfile, reads signal data into the BEDFPlus struct
<br><br><br></p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="signaldata(edfh)"><pre class="notranslate"><code>signaldata(edfh)
</code></pre></div>
<p dir="auto">Return which BEDFPlus variable holds the signal data
<br><br><br></p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="recordslice(edfh, startpos, endpos)"><pre class="notranslate"><code>recordslice(edfh, startpos, endpos)
</code></pre></div>
<p dir="auto">Get a slice of the data in the recording from one data entry position to another
<br><br><br></p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="bytesperdatapoint(edfh)"><pre class="notranslate"><code>bytesperdatapoint(edfh)
</code></pre></div>
<p dir="auto">Return how many bytes used per data point entry: 2 for EDF (16-bit), 3 for BDF (24-bit) data.
<br><br><br></p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="datapointinterval(edfh, channel)"><pre class="notranslate"><code>datapointinterval(edfh, channel)
</code></pre></div>
<p dir="auto">Time interval in fractions of a second between individual signal data points
<br><br><br></p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="recordindexat(edfh, secondsafterstart)"><pre class="notranslate"><code>recordindexat(edfh, secondsafterstart)
</code></pre></div>
<p dir="auto">Index of the record point at or closest just before a given time from recording start
Translates a values in seconds to a position in the signal data matrix,
returns that record's position
<br><br><br></p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="signalat(edfh, secondsafter, channel)"><pre class="notranslate"><code>signalat(edfh, secondsafter, channel)
</code></pre></div>
<p dir="auto">Get the position in the signal data of the data point at or closest after a
given time from recording start. Translates a value in seconds to a position
in the signal channel matrix, returns that signal data point's 2D position as list
<br><br><br></p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="epochmarkers(edfh, secs)"><pre class="notranslate"><code>epochmarkers(edfh, secs)
</code></pre></div>
<p dir="auto">Get a set of (start, stop) positional markers for epochs (sequential windows)
given an epoch duration in seconds
<br><br><br></p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="checkfile!(edfh)"><pre class="notranslate"><code>checkfile!(edfh)
</code></pre></div>
<p dir="auto">Check an input file to be valid EDF/BDF/+ format.
<br><br><br></p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="readannotations!(edfh)"><pre class="notranslate"><code>readannotations!(edfh)
</code></pre></div>
<p dir="auto">Read the annotations of an input file into the EDFPlus struct.
<br><br><br></p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="translate24to16bits!(edfh)"><pre class="notranslate"><code>translate24to16bits!(edfh)
</code></pre></div>
<p dir="auto">Translate data in 24-bit BDF to 16-bit EDF format
<br><br><br></p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="translate16to24bits!(edfh)"><pre class="notranslate"><code>translate16to24bits!(edfh)
</code></pre></div>
<p dir="auto">Translate 16 bit data to 32-bit width, for change to 24-bit data for writefile!
<br><br><br></p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="addannotation!(edfh, onset, duration, description)"><pre class="notranslate"><code>addannotation!(edfh, onset, duration, description)
</code></pre></div>
<p dir="auto">Add an annotation at the given onset timepoint IF there is room
Note the description arg is expected to be a String or similar
<br><br><br></p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="latintoascii(str)"><pre class="notranslate"><code>latintoascii(str)
</code></pre></div>
<p dir="auto">Change non-ascii characters to similar ascii chars
<br><br><br></p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="readBiosemiStatus(edfh)"><pre class="notranslate"><code>readBiosemiStatus(edfh)
</code></pre></div>
<p dir="auto">Export BDF Status channel data.</p>
<p dir="auto">Returns a Dict structure containing trigger data in the format:</p>
<ul dir="auto">
<li>Code: =&gt; vector of triggerbit (Int),</li>
<li>Index: =&gt; vector of index data (Int)</li>
<li>Onset: =&gt; vector of onset times (Float)</li>
<li>Duration: =&gt; vector of durations (Float)
<br><br><br></li>
</ul>
<p dir="auto">Installation:</p>
<p dir="auto">To install from a Julia REPL command line session:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="using Pkg
Pkg.add(&quot;EDFPlus&quot;))"><pre class="notranslate"><code>using Pkg
Pkg.add("EDFPlus"))
</code></pre></div>
<p dir="auto">Note that the test files include a 23 mb test file. You may need to allow extra time for that to download when installing.</p>
</article></div>