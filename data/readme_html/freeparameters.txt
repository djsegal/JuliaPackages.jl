<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-freeparametersjl" class="anchor" aria-hidden="true" href="#freeparametersjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>FreeParameters.jl</h1>
<p>Infrastructure for annotating, collecting, and distributing free parameters.</p>
<table>
<thead>
<tr>
<th align="right"></th>
<th align="left"></th>
</tr>
</thead>
<tbody>
<tr>
<td align="right"><strong>Documentation</strong></td>
<td align="left"><a href="https://CliMA.github.io/FreeParameters.jl/dev/" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a></td>
</tr>
<tr>
<td align="right"><strong>Azure Build</strong></td>
<td align="left"><a href="https://dev.azure.com/CliMA/FreeParameters.jl/_build/latest?definitionId=1&amp;branchName=master" rel="nofollow"><img src="https://camo.githubusercontent.com/4e1b49a4c03bd2746417f3810f99ea23254eb3d12279a725319e9002836f2c06/68747470733a2f2f6465762e617a7572652e636f6d2f436c694d412f46726565506172616d65746572732e6a6c2f5f617069732f6275696c642f7374617475732f436c694d412e46726565506172616d65746572732e6a6c3f6272616e63684e616d653d6d6173746572" alt="azure" data-canonical-src="https://dev.azure.com/CliMA/FreeParameters.jl/_apis/build/status/CliMA.FreeParameters.jl?branchName=master" style="max-width:100%;"></a></td>
</tr>
<tr>
<td align="right"><strong>Code Coverage</strong></td>
<td align="left"><a href="https://codecov.io/gh/CliMA/FreeParameters.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/087f9e0dde60e1e34532bb150bbb9b6b8e357ab3a182ff748eeaa56c791aaefe/68747470733a2f2f636f6465636f762e696f2f67682f436c694d412f46726565506172616d65746572732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/CliMA/FreeParameters.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></td>
</tr>
<tr>
<td align="right"><strong>Bors</strong></td>
<td align="left"><a href="https://app.bors.tech/repositories/22860" rel="nofollow"><img src="https://camo.githubusercontent.com/0974fbc63eeb2ed86d518ed0afaafe112e9e907ffa1c459396b0be2434c4f83b/68747470733a2f2f626f72732e746563682f696d616765732f62616467655f736d616c6c2e737667" alt="Bors enabled" data-canonical-src="https://bors.tech/images/badge_small.svg" style="max-width:100%;"></a></td>
</tr>
</tbody>
</table>
<h1><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h1>
<p>FreeParameters.jl is registered in the general Julia registry. To install, enter the package manager by typing <code>]</code> in the Julia REPL, and then type:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="(v1.x.y) pkg&gt; add FreeParameters
"><pre>(v1<span class="pl-k">.</span>x<span class="pl-k">.</span>y) pkg<span class="pl-k">&gt;</span> add FreeParameters</pre></div>
<p>Then, to use</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using FreeParameters
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> FreeParameters</pre></div>
<h1><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example</h1>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using FreeParameters
using Distributions
using Test

&quot;&quot;&quot;
    update_free_parameters!(fp, val)

Update free parameters vector `fp` with value `val`
&quot;&quot;&quot;
function update_free_parameters!(fp, val)
  for i in eachindex(fp)
    fp[i].val = typeof(fp[i].val)(val)
  end
  return nothing
end

&quot;&quot;&quot;
    Model

module for model.
&quot;&quot;&quot;
module Model
struct Bar{FT,I}
  x::FT
  i::I
end
struct Foo{FT,I}
  x::FT
  a::Bar{FT,I}
end
m = Foo(3.0, Bar(1.0, 2))
end


# Get instance of your model
pmodel = Model.m

# Convert module to dictionary
D = @struct_2_dict(pmodel)

# Test the dictionary matches the parametric model
@test D[&quot;pmodel.x&quot;]   ≈  pmodel.x
@test D[&quot;pmodel.a.x&quot;] ≈  pmodel.a.x
@test D[&quot;pmodel.a.i&quot;] == pmodel.a.i

# Annotate which parameters are &quot;free&quot;
@free D[&quot;pmodel.x&quot;] Distributions.Normal
@free D[&quot;pmodel.a.x&quot;]
@free D[&quot;pmodel.a.i&quot;]

# Extract pointers to `FreeParameter`'s
fp = extract_free_parameters(D)

# Test free parameters match their annotated values
@test fp[1].val ≈ 1.0
@test fp[2].val ≈ 3.0
@test fp[2].prior == Normal
@test fp[3].val ≈ 2

# Update free parameters (in UQ)
new_params_val = 10.0
update_free_parameters!(fp, new_params_val)

# Get new instantiation
pmodel_new = instantiate(pmodel, D, EntireStruct())

# Test model is updated
@test pmodel_new.x   ≈  new_params_val
@test pmodel_new.a.x ≈  new_params_val
@test pmodel_new.a.i == new_params_val
"><pre><span class="pl-k">using</span> FreeParameters
<span class="pl-k">using</span> Distributions
<span class="pl-k">using</span> Test

<span class="pl-s"><span class="pl-pds">"""</span></span>
<span class="pl-s">    update_free_parameters!(fp, val)</span>
<span class="pl-s"></span>
<span class="pl-s">Update free parameters vector `fp` with value `val`</span>
<span class="pl-s"><span class="pl-pds">"""</span></span>
<span class="pl-k">function</span> <span class="pl-en">update_free_parameters!</span>(fp, val)
  <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">eachindex</span>(fp)
    fp[i]<span class="pl-k">.</span>val <span class="pl-k">=</span> <span class="pl-c1">typeof</span>(fp[i]<span class="pl-k">.</span>val)(val)
  <span class="pl-k">end</span>
  <span class="pl-k">return</span> <span class="pl-c1">nothing</span>
<span class="pl-k">end</span>

<span class="pl-s"><span class="pl-pds">"""</span></span>
<span class="pl-s">    Model</span>
<span class="pl-s"></span>
<span class="pl-s">module for model.</span>
<span class="pl-s"><span class="pl-pds">"""</span></span>
<span class="pl-k">module</span> Model
<span class="pl-k">struct</span> Bar{FT,I}
  x<span class="pl-k">::</span><span class="pl-c1">FT</span>
  i<span class="pl-k">::</span><span class="pl-c1">I</span>
<span class="pl-k">end</span>
<span class="pl-k">struct</span> Foo{FT,I}
  x<span class="pl-k">::</span><span class="pl-c1">FT</span>
  a<span class="pl-k">::</span><span class="pl-c1">Bar{FT,I}</span>
<span class="pl-k">end</span>
m <span class="pl-k">=</span> <span class="pl-c1">Foo</span>(<span class="pl-c1">3.0</span>, <span class="pl-c1">Bar</span>(<span class="pl-c1">1.0</span>, <span class="pl-c1">2</span>))
<span class="pl-k">end</span>


<span class="pl-c"><span class="pl-c">#</span> Get instance of your model</span>
pmodel <span class="pl-k">=</span> Model<span class="pl-k">.</span>m

<span class="pl-c"><span class="pl-c">#</span> Convert module to dictionary</span>
D <span class="pl-k">=</span> <span class="pl-c1">@struct_2_dict</span>(pmodel)

<span class="pl-c"><span class="pl-c">#</span> Test the dictionary matches the parametric model</span>
<span class="pl-c1">@test</span> D[<span class="pl-s"><span class="pl-pds">"</span>pmodel.x<span class="pl-pds">"</span></span>]   <span class="pl-k">≈</span>  pmodel<span class="pl-k">.</span>x
<span class="pl-c1">@test</span> D[<span class="pl-s"><span class="pl-pds">"</span>pmodel.a.x<span class="pl-pds">"</span></span>] <span class="pl-k">≈</span>  pmodel<span class="pl-k">.</span>a<span class="pl-k">.</span>x
<span class="pl-c1">@test</span> D[<span class="pl-s"><span class="pl-pds">"</span>pmodel.a.i<span class="pl-pds">"</span></span>] <span class="pl-k">==</span> pmodel<span class="pl-k">.</span>a<span class="pl-k">.</span>i

<span class="pl-c"><span class="pl-c">#</span> Annotate which parameters are "free"</span>
<span class="pl-c1">@free</span> D[<span class="pl-s"><span class="pl-pds">"</span>pmodel.x<span class="pl-pds">"</span></span>] Distributions<span class="pl-k">.</span>Normal
<span class="pl-c1">@free</span> D[<span class="pl-s"><span class="pl-pds">"</span>pmodel.a.x<span class="pl-pds">"</span></span>]
<span class="pl-c1">@free</span> D[<span class="pl-s"><span class="pl-pds">"</span>pmodel.a.i<span class="pl-pds">"</span></span>]

<span class="pl-c"><span class="pl-c">#</span> Extract pointers to `FreeParameter`'s</span>
fp <span class="pl-k">=</span> <span class="pl-c1">extract_free_parameters</span>(D)

<span class="pl-c"><span class="pl-c">#</span> Test free parameters match their annotated values</span>
<span class="pl-c1">@test</span> fp[<span class="pl-c1">1</span>]<span class="pl-k">.</span>val <span class="pl-k">≈</span> <span class="pl-c1">1.0</span>
<span class="pl-c1">@test</span> fp[<span class="pl-c1">2</span>]<span class="pl-k">.</span>val <span class="pl-k">≈</span> <span class="pl-c1">3.0</span>
<span class="pl-c1">@test</span> fp[<span class="pl-c1">2</span>]<span class="pl-k">.</span>prior <span class="pl-k">==</span> Normal
<span class="pl-c1">@test</span> fp[<span class="pl-c1">3</span>]<span class="pl-k">.</span>val <span class="pl-k">≈</span> <span class="pl-c1">2</span>

<span class="pl-c"><span class="pl-c">#</span> Update free parameters (in UQ)</span>
new_params_val <span class="pl-k">=</span> <span class="pl-c1">10.0</span>
<span class="pl-c1">update_free_parameters!</span>(fp, new_params_val)

<span class="pl-c"><span class="pl-c">#</span> Get new instantiation</span>
pmodel_new <span class="pl-k">=</span> <span class="pl-c1">instantiate</span>(pmodel, D, <span class="pl-c1">EntireStruct</span>())

<span class="pl-c"><span class="pl-c">#</span> Test model is updated</span>
<span class="pl-c1">@test</span> pmodel_new<span class="pl-k">.</span>x   <span class="pl-k">≈</span>  new_params_val
<span class="pl-c1">@test</span> pmodel_new<span class="pl-k">.</span>a<span class="pl-k">.</span>x <span class="pl-k">≈</span>  new_params_val
<span class="pl-c1">@test</span> pmodel_new<span class="pl-k">.</span>a<span class="pl-k">.</span>i <span class="pl-k">==</span> new_params_val</pre></div>
</article></div>