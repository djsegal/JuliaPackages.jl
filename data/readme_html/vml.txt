<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-intelvectormathjl-formerly-vmljl" class="anchor" aria-hidden="true" href="#intelvectormathjl-formerly-vmljl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>IntelVectorMath.jl (formerly VML.jl)</h1>
<p><a href="https://juliaci.github.io/NanosoldierReports/pkgeval_badges/report.html" rel="nofollow"><img src="https://camo.githubusercontent.com/26d12c7a5b54b53e90d2ed56c39d171c422aca1a/68747470733a2f2f6a756c696163692e6769746875622e696f2f4e616e6f736f6c646965725265706f7274732f706b676576616c5f6261646765732f492f496e74656c566563746f724d6174682e737667" alt="PkgEval" data-canonical-src="https://juliaci.github.io/NanosoldierReports/pkgeval_badges/I/IntelVectorMath.svg" style="max-width:100%;"></a>
<a target="_blank" rel="noopener noreferrer" href="https://github.com/JuliaMath/VML.jl/workflows/julia%201.3/badge.svg"><img src="https://github.com/JuliaMath/VML.jl/workflows/julia%201.3/badge.svg" alt="" style="max-width:100%;"></a>
<a target="_blank" rel="noopener noreferrer" href="https://github.com/JuliaMath/VML.jl/workflows/julia%20nightly/badge.svg"><img src="https://github.com/JuliaMath/VML.jl/workflows/julia%20nightly/badge.svg" alt="" style="max-width:100%;"></a></p>
<p>This package provides bindings to the Intel MKL <a href="https://software.intel.com/en-us/node/521751" rel="nofollow">Vector Mathematics Functions</a>.
This is often substantially faster than broadcasting Julia's built-in functions, especially when applying a transcendental function over a large array.
Until Julia 0.6 the package was registered as <code>VML.jl</code>.</p>
<p>Similar packages are <a href="https://github.com/JuliaMath/Yeppp.jl">Yeppp.jl</a>, which wraps the open source Yeppp library, and <a href="https://github.com/JuliaMath/AppleAccelerate.jl">AppleAccelerate.jl</a>, which provides access to macOS's Accelerate framework.</p>
<h3><a id="user-content-warning-for-macos" class="anchor" aria-hidden="true" href="#warning-for-macos"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Warning for macOS</h3>
<p>There is currently <a href="https://github.com/JuliaPackaging/BinaryBuilder.jl/issues/700">the following</a> issue between the <code>CompilerSupportLibraries_jll</code> artifact, which is used for example by <code>SpecialFunctions.jl</code>, and <code>MKL_jll</code>. Unless <code>MKL_jll</code> is loaded first, there might be wrong results coming from a small number of function for particular input array lengths. If you are unsure which, if any, your used packages might load this artifact, loading <code>IntelVectorMath</code> as the very first package should be fine.</p>
<h2><a id="user-content-basic-install" class="anchor" aria-hidden="true" href="#basic-install"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Basic install</h2>
<p>To install IntelVectorMath.jl run</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> ] add IntelVectorMath</pre></div>
<p>Since version 0.4 <code>IntelVectorMath</code> uses the <code>MKL_jll</code> artifact, which is shared with other packages uses MKL, removing several other dependencies. This has the side effect that from version 0.4 onwards this package requires at least Julia 1.3.</p>
<p>For older versions of Julia <code>IntelVectorMath v0.3</code> downloads its own version of MKL and keeps only the required files in its own directory. As such installing MKL.jl or MKL via intel are no longer required, and may mean some duplicate files if they are present. However, this package will adopt the new artifact system in the next minor version update and fix this issue.
In the event that MKL was not installed properly you will get an error when first <code>using</code> it. Please try running</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> ] build IntelVectorMath</pre></div>
<p>If this does not work, please open an issue and include the output of <code>&lt;packagedir&gt;/deps/build.log</code>.</p>
<h4><a id="user-content-renaming-from-vml" class="anchor" aria-hidden="true" href="#renaming-from-vml"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Renaming from VML</h4>
<p>If you used this package prior to its renaming, you may have to run <code>] rm VML</code> first. Otherwise there will be a conflict due to the UUID.</p>
<h2><a id="user-content-using-intelvectormath" class="anchor" aria-hidden="true" href="#using-intelvectormath"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Using IntelVectorMath</h2>
<p>After loading <code>IntelVectorMath</code>, you have the supported function listed below, for example <code>IntelVectorMath.sin(rand(100))</code>. These should provide a significant speed-up over broadcasting the Base functions.
Since the package name is quite long, an alias <code>IVM</code> is also exported to allow <code>IVM.sin(rand(100))</code> after <code>using</code> the package.
If you <code>import</code> the package, you can add this alias via <code>const IVM = IntelVectorMath</code>. Equally, you can replace <code>IVM</code> with another alias of your choice.</p>
<h4><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example</h4>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> IntelVectorMath, BenchmarkTools

julia<span class="pl-k">&gt;</span> a <span class="pl-k">=</span> <span class="pl-c1">randn</span>(<span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">4</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">sin</span>.(<span class="pl-k">$</span>a);     <span class="pl-c"><span class="pl-c">#</span> apply Base.sin to each element</span>
  <span class="pl-c1">102.128</span> μs (<span class="pl-c1">2</span> allocations<span class="pl-k">:</span> <span class="pl-c1">78.20</span> KiB)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> IVM<span class="pl-k">.</span><span class="pl-c1">sin</span>(<span class="pl-k">$</span>a);  <span class="pl-c"><span class="pl-c">#</span> apply IVM.sin to the whole array</span>
  <span class="pl-c1">20.900</span> μs (<span class="pl-c1">2</span> allocations<span class="pl-k">:</span> <span class="pl-c1">78.20</span> KiB)

julia<span class="pl-k">&gt;</span> b <span class="pl-k">=</span> <span class="pl-c1">similar</span>(a);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> IVM<span class="pl-k">.</span><span class="pl-c1">sin!</span>(b, a);  <span class="pl-c"><span class="pl-c">#</span> in-place version</span>
  <span class="pl-c1">20.008</span> μs (<span class="pl-c1">0</span> allocations<span class="pl-k">:</span> <span class="pl-c1">0</span> bytes)</pre></div>
<h3><a id="user-content-accuracy" class="anchor" aria-hidden="true" href="#accuracy"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Accuracy</h3>
<p>By default, IntelVectorMath uses <code>VML_HA</code> mode, which corresponds to an accuracy of
&lt;1 ulp, matching the accuracy of Julia's built-in openlibm
implementation, although the exact results may be different. To specify
low accuracy, use <code>vml_set_accuracy(VML_LA)</code>. To specify enhanced
performance, use <code>vml_set_accuracy(VML_EP)</code>. More documentation
regarding these options is available on
<a href="http://software.intel.com/sites/products/documentation/hpc/mkl/IntelVectorMath/vmldata.htm" rel="nofollow">Intel's website</a>.</p>
<h2><a id="user-content-performance" class="anchor" aria-hidden="true" href="#performance"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Performance</h2>
<p>Summary of Results:</p>
<p><strong>Relative speed of IntelVectorMath/Base:</strong> The height of the bars is how fast IntelVectorMath is compared to using broadcasting for functions in Base</p>
<p><a target="_blank" rel="noopener noreferrer" href="https://raw.githubusercontent.com/aminya/AcuteBenchmark-Results/master/IntelVectorMath/Real/bar/bench-dims-set6-relative.png"><img src="https://raw.githubusercontent.com/aminya/AcuteBenchmark-Results/master/IntelVectorMath/Real/bar/bench-dims-set6-relative.png" alt="IntelVectorMath Performance Comparison" style="max-width:100%;"></a></p>
<p><a target="_blank" rel="noopener noreferrer" href="https://raw.githubusercontent.com/aminya/AcuteBenchmark-Results/master/IntelVectorMath/Complex/bar/bench-dims-set6-relative.png"><img src="https://raw.githubusercontent.com/aminya/AcuteBenchmark-Results/master/IntelVectorMath/Complex/bar/bench-dims-set6-relative.png" alt="IntelVectorMath Complex Performance Comparison" style="max-width:100%;"></a></p>
<p>Full Results:</p>
<details>
  <summary>Real Functions - Full Benchmark Results</summary>
<p><a target="_blank" rel="noopener noreferrer" href="https://raw.githubusercontent.com/aminya/AcuteBenchmark-Results/master/IntelVectorMath/Real/bar/bench-dims-set1-relative.png"><img src="https://raw.githubusercontent.com/aminya/AcuteBenchmark-Results/master/IntelVectorMath/Real/bar/bench-dims-set1-relative.png" alt="Dimension set 1" style="max-width:100%;"></a>
<a target="_blank" rel="noopener noreferrer" href="https://raw.githubusercontent.com/aminya/AcuteBenchmark-Results/master/IntelVectorMath/Real/bar/bench-dims-set2-relative.png"><img src="https://raw.githubusercontent.com/aminya/AcuteBenchmark-Results/master/IntelVectorMath/Real/bar/bench-dims-set2-relative.png" alt="Dimension set 2" style="max-width:100%;"></a>
<a target="_blank" rel="noopener noreferrer" href="https://raw.githubusercontent.com/aminya/AcuteBenchmark-Results/master/IntelVectorMath/Real/bar/bench-dims-set3-relative.png"><img src="https://raw.githubusercontent.com/aminya/AcuteBenchmark-Results/master/IntelVectorMath/Real/bar/bench-dims-set3-relative.png" alt="Dimension set 3" style="max-width:100%;"></a>
<a target="_blank" rel="noopener noreferrer" href="https://raw.githubusercontent.com/aminya/AcuteBenchmark-Results/master/IntelVectorMath/Real/bar/bench-dims-set4-relative.png"><img src="https://raw.githubusercontent.com/aminya/AcuteBenchmark-Results/master/IntelVectorMath/Real/bar/bench-dims-set4-relative.png" alt="Dimension set 4" style="max-width:100%;"></a>
<a target="_blank" rel="noopener noreferrer" href="https://raw.githubusercontent.com/aminya/AcuteBenchmark-Results/master/IntelVectorMath/Real/bar/bench-dims-set5-relative.png"><img src="https://raw.githubusercontent.com/aminya/AcuteBenchmark-Results/master/IntelVectorMath/Real/bar/bench-dims-set5-relative.png" alt="Dimension set 5" style="max-width:100%;"></a>
<a target="_blank" rel="noopener noreferrer" href="https://raw.githubusercontent.com/aminya/AcuteBenchmark-Results/master/IntelVectorMath/Real/bar/bench-dims-set6-relative.png"><img src="https://raw.githubusercontent.com/aminya/AcuteBenchmark-Results/master/IntelVectorMath/Real/bar/bench-dims-set6-relative.png" alt="Dimension set 6" style="max-width:100%;"></a>
<a target="_blank" rel="noopener noreferrer" href="https://raw.githubusercontent.com/aminya/AcuteBenchmark-Results/master/IntelVectorMath/Real/bar/bench-dims-set7-relative.png"><img src="https://raw.githubusercontent.com/aminya/AcuteBenchmark-Results/master/IntelVectorMath/Real/bar/bench-dims-set7-relative.png" alt="Dimension set 7" style="max-width:100%;"></a>
<a target="_blank" rel="noopener noreferrer" href="https://raw.githubusercontent.com/aminya/AcuteBenchmark-Results/master/IntelVectorMath/Real/bar/bench-dims-set8-relative.png"><img src="https://raw.githubusercontent.com/aminya/AcuteBenchmark-Results/master/IntelVectorMath/Real/bar/bench-dims-set8-relative.png" alt="Dimension set 8" style="max-width:100%;"></a>
<a target="_blank" rel="noopener noreferrer" href="https://raw.githubusercontent.com/aminya/AcuteBenchmark-Results/master/IntelVectorMath/Real/bar/bench-dims-set9-relative.png"><img src="https://raw.githubusercontent.com/aminya/AcuteBenchmark-Results/master/IntelVectorMath/Real/bar/bench-dims-set9-relative.png" alt="Dimension set 9" style="max-width:100%;"></a>
<a target="_blank" rel="noopener noreferrer" href="https://raw.githubusercontent.com/aminya/AcuteBenchmark-Results/master/IntelVectorMath/Real/bar/bench-dims-set10-relative.png"><img src="https://raw.githubusercontent.com/aminya/AcuteBenchmark-Results/master/IntelVectorMath/Real/bar/bench-dims-set10-relative.png" alt="Dimension set 10" style="max-width:100%;"></a></p>
</details>
<details>
  <summary>Complex Functions - Full Benchmark Results</summary>
<p><a target="_blank" rel="noopener noreferrer" href="https://raw.githubusercontent.com/aminya/AcuteBenchmark-Results/master/IntelVectorMath/Complex/bar/bench-dims-set1-relative.png"><img src="https://raw.githubusercontent.com/aminya/AcuteBenchmark-Results/master/IntelVectorMath/Complex/bar/bench-dims-set1-relative.png" alt="Dimension set 1" style="max-width:100%;"></a>
<a target="_blank" rel="noopener noreferrer" href="https://raw.githubusercontent.com/aminya/AcuteBenchmark-Results/master/IntelVectorMath/Complex/bar/bench-dims-set2-relative.png"><img src="https://raw.githubusercontent.com/aminya/AcuteBenchmark-Results/master/IntelVectorMath/Complex/bar/bench-dims-set2-relative.png" alt="Dimension set 2" style="max-width:100%;"></a>
<a target="_blank" rel="noopener noreferrer" href="https://raw.githubusercontent.com/aminya/AcuteBenchmark-Results/master/IntelVectorMath/Complex/bar/bench-dims-set3-relative.png"><img src="https://raw.githubusercontent.com/aminya/AcuteBenchmark-Results/master/IntelVectorMath/Complex/bar/bench-dims-set3-relative.png" alt="Dimension set 3" style="max-width:100%;"></a>
<a target="_blank" rel="noopener noreferrer" href="https://raw.githubusercontent.com/aminya/AcuteBenchmark-Results/master/IntelVectorMath/Complex/bar/bench-dims-set4-relative.png"><img src="https://raw.githubusercontent.com/aminya/AcuteBenchmark-Results/master/IntelVectorMath/Complex/bar/bench-dims-set4-relative.png" alt="Dimension set 4" style="max-width:100%;"></a>
<a target="_blank" rel="noopener noreferrer" href="https://raw.githubusercontent.com/aminya/AcuteBenchmark-Results/master/IntelVectorMath/Complex/bar/bench-dims-set5-relative.png"><img src="https://raw.githubusercontent.com/aminya/AcuteBenchmark-Results/master/IntelVectorMath/Complex/bar/bench-dims-set5-relative.png" alt="Dimension set 5" style="max-width:100%;"></a>
<a target="_blank" rel="noopener noreferrer" href="https://raw.githubusercontent.com/aminya/AcuteBenchmark-Results/master/IntelVectorMath/Complex/bar/bench-dims-set6-relative.png"><img src="https://raw.githubusercontent.com/aminya/AcuteBenchmark-Results/master/IntelVectorMath/Complex/bar/bench-dims-set6-relative.png" alt="Dimension set 6" style="max-width:100%;"></a>
<a target="_blank" rel="noopener noreferrer" href="https://raw.githubusercontent.com/aminya/AcuteBenchmark-Results/master/IntelVectorMath/Complex/bar/bench-dims-set7-relative.png"><img src="https://raw.githubusercontent.com/aminya/AcuteBenchmark-Results/master/IntelVectorMath/Complex/bar/bench-dims-set7-relative.png" alt="Dimension set 7" style="max-width:100%;"></a>
<a target="_blank" rel="noopener noreferrer" href="https://raw.githubusercontent.com/aminya/AcuteBenchmark-Results/master/IntelVectorMath/Complex/bar/bench-dims-set8-relative.png"><img src="https://raw.githubusercontent.com/aminya/AcuteBenchmark-Results/master/IntelVectorMath/Complex/bar/bench-dims-set8-relative.png" alt="Dimension set 8" style="max-width:100%;"></a>
<a target="_blank" rel="noopener noreferrer" href="https://raw.githubusercontent.com/aminya/AcuteBenchmark-Results/master/IntelVectorMath/Complex/bar/bench-dims-set9-relative.png"><img src="https://raw.githubusercontent.com/aminya/AcuteBenchmark-Results/master/IntelVectorMath/Complex/bar/bench-dims-set9-relative.png" alt="Dimension set 9" style="max-width:100%;"></a>
<a target="_blank" rel="noopener noreferrer" href="https://raw.githubusercontent.com/aminya/AcuteBenchmark-Results/master/IntelVectorMath/Complex/bar/bench-dims-set10-relative.png"><img src="https://raw.githubusercontent.com/aminya/AcuteBenchmark-Results/master/IntelVectorMath/Complex/bar/bench-dims-set10-relative.png" alt="Dimension set 10" style="max-width:100%;"></a></p>
</details>
<details>
  <summary>Real Functions - Performance over dimensions</summary>
<p><a target="_blank" rel="noopener noreferrer" href="https://raw.githubusercontent.com/aminya/AcuteBenchmark-Results/master/IntelVectorMath/Real/dimplot/bench-abs-Type-Float64.png"><img src="https://raw.githubusercontent.com/aminya/AcuteBenchmark-Results/master/IntelVectorMath/Real/dimplot/bench-abs-Type-Float64.png" alt="abs" style="max-width:100%;"></a>
<a target="_blank" rel="noopener noreferrer" href="https://raw.githubusercontent.com/aminya/AcuteBenchmark-Results/master/IntelVectorMath/Real/dimplot/bench-abs2-Type-Float64.png"><img src="https://raw.githubusercontent.com/aminya/AcuteBenchmark-Results/master/IntelVectorMath/Real/dimplot/bench-abs2-Type-Float64.png" alt="abs2" style="max-width:100%;"></a>
<a target="_blank" rel="noopener noreferrer" href="https://raw.githubusercontent.com/aminya/AcuteBenchmark-Results/master/IntelVectorMath/Real/dimplot/bench-acos-Type-Float64.png"><img src="https://raw.githubusercontent.com/aminya/AcuteBenchmark-Results/master/IntelVectorMath/Real/dimplot/bench-acos-Type-Float64.png" alt="acos" style="max-width:100%;"></a>
<a target="_blank" rel="noopener noreferrer" href="https://raw.githubusercontent.com/aminya/AcuteBenchmark-Results/master/IntelVectorMath/Real/dimplot/bench-acosh-Type-Float64.png"><img src="https://raw.githubusercontent.com/aminya/AcuteBenchmark-Results/master/IntelVectorMath/Real/dimplot/bench-acosh-Type-Float64.png" alt="acosh" style="max-width:100%;"></a>
<a target="_blank" rel="noopener noreferrer" href="https://raw.githubusercontent.com/aminya/AcuteBenchmark-Results/master/IntelVectorMath/Real/dimplot/bench-asin-Type-Float64.png"><img src="https://raw.githubusercontent.com/aminya/AcuteBenchmark-Results/master/IntelVectorMath/Real/dimplot/bench-asin-Type-Float64.png" alt="asin" style="max-width:100%;"></a>
<a target="_blank" rel="noopener noreferrer" href="https://raw.githubusercontent.com/aminya/AcuteBenchmark-Results/master/IntelVectorMath/Real/dimplot/bench-asinh-Type-Float64.png"><img src="https://raw.githubusercontent.com/aminya/AcuteBenchmark-Results/master/IntelVectorMath/Real/dimplot/bench-asinh-Type-Float64.png" alt="asinh" style="max-width:100%;"></a>
<a target="_blank" rel="noopener noreferrer" href="https://raw.githubusercontent.com/aminya/AcuteBenchmark-Results/master/IntelVectorMath/Real/dimplot/bench-atan-Type-Float64.png"><img src="https://raw.githubusercontent.com/aminya/AcuteBenchmark-Results/master/IntelVectorMath/Real/dimplot/bench-atan-Type-Float64.png" alt="atan" style="max-width:100%;"></a>
<a target="_blank" rel="noopener noreferrer" href="https://raw.githubusercontent.com/aminya/AcuteBenchmark-Results/master/IntelVectorMath/Real/dimplot/bench-atanh-Type-Float64.png"><img src="https://raw.githubusercontent.com/aminya/AcuteBenchmark-Results/master/IntelVectorMath/Real/dimplot/bench-atanh-Type-Float64.png" alt="atanh" style="max-width:100%;"></a>
<a target="_blank" rel="noopener noreferrer" href="https://raw.githubusercontent.com/aminya/AcuteBenchmark-Results/master/IntelVectorMath/Real/dimplot/bench-cbrt-Type-Float64.png"><img src="https://raw.githubusercontent.com/aminya/AcuteBenchmark-Results/master/IntelVectorMath/Real/dimplot/bench-cbrt-Type-Float64.png" alt="cbrt" style="max-width:100%;"></a>
<a target="_blank" rel="noopener noreferrer" href="https://raw.githubusercontent.com/aminya/AcuteBenchmark-Results/master/IntelVectorMath/Real/dimplot/bench-ceil-Type-Float64.png"><img src="https://raw.githubusercontent.com/aminya/AcuteBenchmark-Results/master/IntelVectorMath/Real/dimplot/bench-ceil-Type-Float64.png" alt="ceil" style="max-width:100%;"></a>
<a target="_blank" rel="noopener noreferrer" href="https://raw.githubusercontent.com/aminya/AcuteBenchmark-Results/master/IntelVectorMath/Real/dimplot/bench-cis-Type-Float64.png"><img src="https://raw.githubusercontent.com/aminya/AcuteBenchmark-Results/master/IntelVectorMath/Real/dimplot/bench-cis-Type-Float64.png" alt="cis" style="max-width:100%;"></a>
<a target="_blank" rel="noopener noreferrer" href="https://raw.githubusercontent.com/aminya/AcuteBenchmark-Results/master/IntelVectorMath/Real/dimplot/bench-cos-Type-Float64.png"><img src="https://raw.githubusercontent.com/aminya/AcuteBenchmark-Results/master/IntelVectorMath/Real/dimplot/bench-cos-Type-Float64.png" alt="cos" style="max-width:100%;"></a>
<a target="_blank" rel="noopener noreferrer" href="https://raw.githubusercontent.com/aminya/AcuteBenchmark-Results/master/IntelVectorMath/Real/dimplot/bench-cosh-Type-Float64.png"><img src="https://raw.githubusercontent.com/aminya/AcuteBenchmark-Results/master/IntelVectorMath/Real/dimplot/bench-cosh-Type-Float64.png" alt="cosh" style="max-width:100%;"></a>
<a target="_blank" rel="noopener noreferrer" href="https://raw.githubusercontent.com/aminya/AcuteBenchmark-Results/master/IntelVectorMath/Real/dimplot/bench-erf-Type-Float64.png"><img src="https://raw.githubusercontent.com/aminya/AcuteBenchmark-Results/master/IntelVectorMath/Real/dimplot/bench-erf-Type-Float64.png" alt="erf" style="max-width:100%;"></a>
<a target="_blank" rel="noopener noreferrer" href="https://raw.githubusercontent.com/aminya/AcuteBenchmark-Results/master/IntelVectorMath/Real/dimplot/bench-erfc-Type-Float64.png"><img src="https://raw.githubusercontent.com/aminya/AcuteBenchmark-Results/master/IntelVectorMath/Real/dimplot/bench-erfc-Type-Float64.png" alt="erfc" style="max-width:100%;"></a>
<a target="_blank" rel="noopener noreferrer" href="https://raw.githubusercontent.com/aminya/AcuteBenchmark-Results/master/IntelVectorMath/Real/dimplot/bench-erfcinv-Type-Float64.png"><img src="https://raw.githubusercontent.com/aminya/AcuteBenchmark-Results/master/IntelVectorMath/Real/dimplot/bench-erfcinv-Type-Float64.png" alt="erfcinv" style="max-width:100%;"></a>
<a target="_blank" rel="noopener noreferrer" href="https://raw.githubusercontent.com/aminya/AcuteBenchmark-Results/master/IntelVectorMath/Real/dimplot/bench-erfcinv-Type-Float64.png"><img src="https://raw.githubusercontent.com/aminya/AcuteBenchmark-Results/master/IntelVectorMath/Real/dimplot/bench-erfcinv-Type-Float64.png" alt="erfcinv" style="max-width:100%;"></a>
<a target="_blank" rel="noopener noreferrer" href="https://raw.githubusercontent.com/aminya/AcuteBenchmark-Results/master/IntelVectorMath/Real/dimplot/bench-exp-Type-Float64.png"><img src="https://raw.githubusercontent.com/aminya/AcuteBenchmark-Results/master/IntelVectorMath/Real/dimplot/bench-exp-Type-Float64.png" alt="exp" style="max-width:100%;"></a>
<a target="_blank" rel="noopener noreferrer" href="https://raw.githubusercontent.com/aminya/AcuteBenchmark-Results/master/IntelVectorMath/Real/dimplot/bench-expm1-Type-Float64.png"><img src="https://raw.githubusercontent.com/aminya/AcuteBenchmark-Results/master/IntelVectorMath/Real/dimplot/bench-expm1-Type-Float64.png" alt="expm1" style="max-width:100%;"></a>
<a target="_blank" rel="noopener noreferrer" href="https://raw.githubusercontent.com/aminya/AcuteBenchmark-Results/master/IntelVectorMath/Real/dimplot/bench-floor-Type-Float64.png"><img src="https://raw.githubusercontent.com/aminya/AcuteBenchmark-Results/master/IntelVectorMath/Real/dimplot/bench-floor-Type-Float64.png" alt="floor" style="max-width:100%;"></a>
<a target="_blank" rel="noopener noreferrer" href="https://raw.githubusercontent.com/aminya/AcuteBenchmark-Results/master/IntelVectorMath/Real/dimplot/bench-gamma-Type-Float64.png"><img src="https://raw.githubusercontent.com/aminya/AcuteBenchmark-Results/master/IntelVectorMath/Real/dimplot/bench-gamma-Type-Float64.png" alt="gamma" style="max-width:100%;"></a>
<a target="_blank" rel="noopener noreferrer" href="https://raw.githubusercontent.com/aminya/AcuteBenchmark-Results/master/IntelVectorMath/Real/dimplot/bench-hypot-Type-Float64.png"><img src="https://raw.githubusercontent.com/aminya/AcuteBenchmark-Results/master/IntelVectorMath/Real/dimplot/bench-hypot-Type-Float64.png" alt="hypot" style="max-width:100%;"></a>
<a target="_blank" rel="noopener noreferrer" href="https://raw.githubusercontent.com/aminya/AcuteBenchmark-Results/master/IntelVectorMath/Real/dimplot/bench-log-Type-Float64.png"><img src="https://raw.githubusercontent.com/aminya/AcuteBenchmark-Results/master/IntelVectorMath/Real/dimplot/bench-log-Type-Float64.png" alt="log" style="max-width:100%;"></a>
<a target="_blank" rel="noopener noreferrer" href="https://raw.githubusercontent.com/aminya/AcuteBenchmark-Results/master/IntelVectorMath/Real/dimplot/bench-round-Type-Float64.png"><img src="https://raw.githubusercontent.com/aminya/AcuteBenchmark-Results/master/IntelVectorMath/Real/dimplot/bench-round-Type-Float64.png" alt="round" style="max-width:100%;"></a>
<a target="_blank" rel="noopener noreferrer" href="https://raw.githubusercontent.com/aminya/AcuteBenchmark-Results/master/IntelVectorMath/Real/dimplot/bench-sin-Type-Float64.png"><img src="https://raw.githubusercontent.com/aminya/AcuteBenchmark-Results/master/IntelVectorMath/Real/dimplot/bench-sin-Type-Float64.png" alt="sin" style="max-width:100%;"></a>
<a target="_blank" rel="noopener noreferrer" href="https://raw.githubusercontent.com/aminya/AcuteBenchmark-Results/master/IntelVectorMath/Real/dimplot/bench-sinh-Type-Float64.png"><img src="https://raw.githubusercontent.com/aminya/AcuteBenchmark-Results/master/IntelVectorMath/Real/dimplot/bench-sinh-Type-Float64.png" alt="sinh" style="max-width:100%;"></a>
<a target="_blank" rel="noopener noreferrer" href="https://raw.githubusercontent.com/aminya/AcuteBenchmark-Results/master/IntelVectorMath/Real/dimplot/bench-sqrt-Type-Float64.png"><img src="https://raw.githubusercontent.com/aminya/AcuteBenchmark-Results/master/IntelVectorMath/Real/dimplot/bench-sqrt-Type-Float64.png" alt="sqrt" style="max-width:100%;"></a>
<a target="_blank" rel="noopener noreferrer" href="https://raw.githubusercontent.com/aminya/AcuteBenchmark-Results/master/IntelVectorMath/Real/dimplot/bench-tan-Type-Float64.png"><img src="https://raw.githubusercontent.com/aminya/AcuteBenchmark-Results/master/IntelVectorMath/Real/dimplot/bench-tan-Type-Float64.png" alt="tan" style="max-width:100%;"></a>
<a target="_blank" rel="noopener noreferrer" href="https://raw.githubusercontent.com/aminya/AcuteBenchmark-Results/master/IntelVectorMath/Real/dimplot/bench-tanh-Type-Float64.png"><img src="https://raw.githubusercontent.com/aminya/AcuteBenchmark-Results/master/IntelVectorMath/Real/dimplot/bench-tanh-Type-Float64.png" alt="tanh" style="max-width:100%;"></a>
<a target="_blank" rel="noopener noreferrer" href="https://raw.githubusercontent.com/aminya/AcuteBenchmark-Results/master/IntelVectorMath/Real/dimplot/bench-trunc-Type-Float64.png"><img src="https://raw.githubusercontent.com/aminya/AcuteBenchmark-Results/master/IntelVectorMath/Real/dimplot/bench-trunc-Type-Float64.png" alt="trunc" style="max-width:100%;"></a></p>
</details>
<br>
<p>Tests were performed on an Intel(R) Core(TM) i5-8250U @ 1.6 [GHz] 1800 Mhz. The dashed line indicates equivalent performance for IntelVectorMath versus the implementations in Base.</p>
<h2><a id="user-content-supported-functions" class="anchor" aria-hidden="true" href="#supported-functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Supported functions</h2>
<p>IntelVectorMath.jl supports the following functions, most for Float32 and
Float64, while some also take complex numbers.</p>
<h3><a id="user-content-unary-functions" class="anchor" aria-hidden="true" href="#unary-functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Unary functions</h3>
<p>Allocating forms have signature <code>f(A)</code>. Mutating forms have signatures
<code>f!(A)</code> (in place) and <code>f!(out, A)</code> (out of place). The last 9 functions have been moved from Base to <code>SpecialFunctions.jl</code> or have no Base equivalent.</p>
<table>
<thead>
<tr>
<th>Allocating</th>
<th>Mutating</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>acos</code></td>
<td><code>acos!</code></td>
</tr>
<tr>
<td><code>asin</code></td>
<td><code>asin!</code></td>
</tr>
<tr>
<td><code>atan</code></td>
<td><code>atan!</code></td>
</tr>
<tr>
<td><code>cos</code></td>
<td><code>cos!</code></td>
</tr>
<tr>
<td><code>sin</code></td>
<td><code>sin!</code></td>
</tr>
<tr>
<td><code>tan</code></td>
<td><code>tan!</code></td>
</tr>
<tr>
<td><code>acosh</code></td>
<td><code>acosh!</code></td>
</tr>
<tr>
<td><code>asinh</code></td>
<td><code>asinh!</code></td>
</tr>
<tr>
<td><code>atanh</code></td>
<td><code>atanh!</code></td>
</tr>
<tr>
<td><code>cosh</code></td>
<td><code>cosh!</code></td>
</tr>
<tr>
<td><code>sinh</code></td>
<td><code>sinh!</code></td>
</tr>
<tr>
<td><code>tanh</code></td>
<td><code>tanh!</code></td>
</tr>
<tr>
<td><code>cbrt</code></td>
<td><code>cbrt!</code></td>
</tr>
<tr>
<td><code>sqrt</code></td>
<td><code>sqrt!</code></td>
</tr>
<tr>
<td><code>exp</code></td>
<td><code>expm1!</code></td>
</tr>
<tr>
<td><code>log</code></td>
<td><code>log!</code></td>
</tr>
<tr>
<td><code>log10</code></td>
<td><code>log10!</code></td>
</tr>
<tr>
<td><code>log1p</code></td>
<td><code>log1p!</code></td>
</tr>
<tr>
<td><code>abs</code></td>
<td><code>abs!</code></td>
</tr>
<tr>
<td><code>abs2</code></td>
<td><code>abs2!</code></td>
</tr>
<tr>
<td><code>ceil</code></td>
<td><code>ceil!</code></td>
</tr>
<tr>
<td><code>floor</code></td>
<td><code>floor!</code></td>
</tr>
<tr>
<td><code>round</code></td>
<td><code>round!</code></td>
</tr>
<tr>
<td><code>trunc</code></td>
<td><code>trunc!</code></td>
</tr>
<tr>
<td><code>erf</code></td>
<td><code>erf!</code></td>
</tr>
<tr>
<td><code>erfc</code></td>
<td><code>erfc!</code></td>
</tr>
<tr>
<td><code>erfinv</code></td>
<td><code>erfinv!</code></td>
</tr>
<tr>
<td><code>efcinv</code></td>
<td><code>efcinv!</code></td>
</tr>
<tr>
<td><code>gamma</code></td>
<td><code>gamma!</code></td>
</tr>
<tr>
<td><code>lgamma</code></td>
<td><code>lgamma!</code></td>
</tr>
<tr>
<td><code>inv_cbrt</code></td>
<td><code>inv_cbrt!</code></td>
</tr>
<tr>
<td><code>inv_sqrt</code></td>
<td><code>inv_sqrt!</code></td>
</tr>
<tr>
<td><code>pow2o3</code></td>
<td><code>pow2o3!</code></td>
</tr>
<tr>
<td><code>pow3o2</code></td>
<td><code>pow3o2!</code></td>
</tr>
</tbody>
</table>
<h3><a id="user-content-binary-functions" class="anchor" aria-hidden="true" href="#binary-functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Binary functions</h3>
<p>Allocating forms have signature <code>f(A, B)</code>. Mutating forms have
signature <code>f!(out, A, B)</code>.</p>
<table>
<thead>
<tr>
<th>Allocating</th>
<th>Mutating</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>atan</code></td>
<td><code>atan!</code></td>
</tr>
<tr>
<td><code>hypot</code></td>
<td><code>hypot!</code></td>
</tr>
<tr>
<td><code>pow</code></td>
<td><code>pow!</code></td>
</tr>
<tr>
<td><code>divide</code></td>
<td><code>divide!</code></td>
</tr>
</tbody>
</table>
<h2><a id="user-content-next-steps" class="anchor" aria-hidden="true" href="#next-steps"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Next steps</h2>
<p>Next steps for this package</p>
<ul class="contains-task-list">
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> Windows support</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> Basic Testing</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> Avoiding overloading base and optional overload function</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> Travis and AppVeyor testing</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> Adding CIS function</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> Move Testing to GitHub Actions</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> Add test for using standalone MKL</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> Update Benchmarks</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> Add tests for mutating functions</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> Add own dependency management via BinaryProvider</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> Update function list in README</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> Adopt Julia 1.3 artifact system, breaking backwards compatibility</li>
</ul>
<h2><a id="user-content-advanced" class="anchor" aria-hidden="true" href="#advanced"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Advanced</h2>
<p>IntelVectorMath.jl uses <a href="https://github.com/m-j-w/CpuId.jl">CpuId.jl</a> to detect if your processor supports the newer <code>avx2</code> instructions, and if not defaults to <code>libmkl_vml_avx</code>. If your system does not have AVX this package will currently not work for you.
If the CPU feature detection does not work for you, please open an issue.</p>
</article></div>