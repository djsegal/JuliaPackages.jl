<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-fuzzycompletionsjl" class="anchor" aria-hidden="true" href="#fuzzycompletionsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>FuzzyCompletions.jl</h1>
<p dir="auto"><code>FuzzyCompletions</code> provides fuzzy completions for a Julia runtime session.</p>
<p dir="auto">Its API is totally compatible with the standard library module <a href="https://github.com/JuliaLang/julia/blob/master/stdlib/REPL/src/REPLCompletions.jl"><code>REPL.REPLCompletions</code></a>;
so this package can be used as a drop-in replacement for your completion provider.</p>
<h2 dir="auto"><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>example</h2>
<p dir="auto">You can make your REPL complete fuzzily with the following code:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using REPL
using REPL.LineEdit
using FuzzyCompletions

struct FuzzyCompletionProvider &lt;: REPL.CompletionProvider
    mod::Module
end

function LineEdit.complete_line(c::FuzzyCompletionProvider, s)
  partial = REPL.beforecursor(s.input_buffer)
  full = LineEdit.input_string(s)

  # module-aware repl backend completions
  comps, range, should_complete = completions(full, lastindex(partial), c.mod)
  filter!(c-&gt;score(c)≥0, comps)
  return unique!(FuzzyCompletions.completion_text.(comps)), partial[range], should_complete
end

Base.active_repl.interface.modes[1].complete = FuzzyCompletionProvider(Main) # or whatever module where you want to get completes from"><pre><span class="pl-k">using</span> REPL
<span class="pl-k">using</span> REPL<span class="pl-k">.</span>LineEdit
<span class="pl-k">using</span> FuzzyCompletions

<span class="pl-k">struct</span> FuzzyCompletionProvider <span class="pl-k">&lt;:</span> <span class="pl-c1">REPL.CompletionProvider</span>
    mod<span class="pl-k">::</span><span class="pl-c1">Module</span>
<span class="pl-k">end</span>

<span class="pl-k">function</span> LineEdit<span class="pl-k">.</span><span class="pl-en">complete_line</span>(c<span class="pl-k">::</span><span class="pl-c1">FuzzyCompletionProvider</span>, s)
  partial <span class="pl-k">=</span> REPL<span class="pl-k">.</span><span class="pl-c1">beforecursor</span>(s<span class="pl-k">.</span>input_buffer)
  full <span class="pl-k">=</span> LineEdit<span class="pl-k">.</span><span class="pl-c1">input_string</span>(s)

  <span class="pl-c"><span class="pl-c">#</span> module-aware repl backend completions</span>
  comps, range, should_complete <span class="pl-k">=</span> <span class="pl-c1">completions</span>(full, <span class="pl-c1">lastindex</span>(partial), c<span class="pl-k">.</span>mod)
  <span class="pl-c1">filter!</span>(c<span class="pl-k">-&gt;</span><span class="pl-c1">score</span>(c)<span class="pl-k">≥</span><span class="pl-c1">0</span>, comps)
  <span class="pl-k">return</span> <span class="pl-c1">unique!</span>(FuzzyCompletions<span class="pl-k">.</span><span class="pl-c1">completion_text</span>.(comps)), partial[range], should_complete
<span class="pl-k">end</span>

Base<span class="pl-k">.</span>active_repl<span class="pl-k">.</span>interface<span class="pl-k">.</span>modes[<span class="pl-c1">1</span>]<span class="pl-k">.</span>complete <span class="pl-k">=</span> <span class="pl-c1">FuzzyCompletionProvider</span>(Main) <span class="pl-c"><span class="pl-c">#</span> or whatever module where you want to get completes from</span></pre></div>
<p dir="auto">Then, your REPL will work like</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; sthing
isnothing something # fuzzy completions

julia&gt; regex&lt;tab&gt;
Regex      RegexMatch # cases doesn't need to match"><pre lang="julia-repl" class="notranslate"><code>julia&gt; sthing
isnothing something # fuzzy completions

julia&gt; regex&lt;tab&gt;
Regex      RegexMatch # cases doesn't need to match
</code></pre></div>
<p dir="auto">But I'm sure you will dislike this behavior;
we usually want CLI to complete eagerly, not to be an indecisive boy.</p>
<h2 dir="auto"><a id="user-content-consumers" class="anchor" aria-hidden="true" href="#consumers"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>consumers</h2>
<p dir="auto">Fuzzy completions can be useful within IDE or somewhere some richer UI for showing/selecting completion suggestions is available:</p>
<ul dir="auto">
<li><a href="https://junolab.org/" rel="nofollow">Juno</a>: <a class="issue-link js-issue-link" data-error-text="Failed to load title" data-id="591854334" data-permission-text="Title is private" data-url="https://github.com/JunoLab/Atom.jl/issues/308" data-hovercard-type="pull_request" data-hovercard-url="/JunoLab/Atom.jl/pull/308/hovercard" href="https://github.com/JunoLab/Atom.jl/pull/308">JunoLab/Atom.jl#308</a></li>
<li><a href="https://github.com/fonsp/Pluto.jl">Pluto</a>: <a class="issue-link js-issue-link" data-error-text="Failed to load title" data-id="744892574" data-permission-text="Title is private" data-url="https://github.com/fonsp/Pluto.jl/issues/689" data-hovercard-type="pull_request" data-hovercard-url="/fonsp/Pluto.jl/pull/689/hovercard" href="https://github.com/fonsp/Pluto.jl/pull/689">fonsp/Pluto.jl#689</a></li>
</ul>
<h2 dir="auto"><a id="user-content-acknowledgment" class="anchor" aria-hidden="true" href="#acknowledgment"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>acknowledgment</h2>
<p dir="auto">The original idea of the implementation came from <a href="https://github.com/pfitzseb/julia/commit/740dd16843c16cb0b87264911f43abf8485652fe">this patch by @pfitzseb</a>.</p>
<h2 dir="auto"><a id="user-content-license" class="anchor" aria-hidden="true" href="#license"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>license</h2>
<p dir="auto">This package is under <a href="LICENSE.md">MIT License</a>.</p>
</article></div>