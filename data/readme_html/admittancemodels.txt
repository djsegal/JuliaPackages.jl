<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-admittancemodelsjl" class="anchor" aria-hidden="true" href="#admittancemodelsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>AdmittanceModels.jl</h1>
<p><a href="https://travis-ci.com/rigetti/AdmittanceModels.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/3195614dd6b880821a2f4fb4f133fa7dbfec66f9/68747470733a2f2f7472617669732d63692e636f6d2f726967657474692f41646d697474616e63654d6f64656c732e6a6c2e7376673f6272616e63683d6d6173746572" alt="" data-canonical-src="https://travis-ci.com/rigetti/AdmittanceModels.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/rigetti/AdmittanceModels.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/4e28fd4112b9b09b47103d212a3157e5ddea74c9/68747470733a2f2f636f6465636f762e696f2f67682f726967657474692f41646d697474616e63654d6f64656c732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="" data-canonical-src="https://codecov.io/gh/rigetti/AdmittanceModels.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p>AdmittanceModels.jl is a package for creating and manipulating linear input-output models of the form <code>YΦ = Px</code>, <code>y = QᵀΦ</code> where <code>x</code> are the inputs and <code>y</code> are the outputs. One example of such a model is a Positive Second Order model, defined in <a href="https://arxiv.org/abs/1810.11510" rel="nofollow">[1]</a>. Such models can capture the equations of motion of a circuit consisting of inductors, capacitors, and resistors.</p>
<p>The scripts in <code>paper</code> were used to generate the figures in <a href="https://arxiv.org/abs/1810.11510" rel="nofollow">[1]</a>.</p>
<p>If you use this package in a publication, please cite our paper:</p>
<pre><code>@article{ScheerBlock2018,
    author = {Michael G. Scheer and Maxwell B. Block},
    title = "{Computational modeling of decay and hybridization in superconducting circuits}",
    year = "2018",
    month = "Oct",
    note = {arXiv:1810.11510},
    archivePrefix = {arXiv},
    eprint = {1810.11510},
    primaryClass = {quant-ph},
}
</code></pre>
<p>[1] <a href="https://arxiv.org/abs/1810.11510" rel="nofollow">Computational modeling of decay and hybridization in superconducting circuits</a></p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Installation</h2>
<p>Clone the repository from GitHub and install Julia 1.1. No build is required beyond the default Julia compilation.</p>
<h2><a id="user-content-example-usage-the-circuit-in-appendix-a-of-1" class="anchor" aria-hidden="true" href="#example-usage-the-circuit-in-appendix-a-of-1"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Example usage: the circuit in Appendix A of <a href="https://arxiv.org/abs/1810.11510" rel="nofollow">[1]</a></h2>
<p>Construct the circuit in Appendix A, with arbitrarily chosen values.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> AdmittanceModels
vertices <span class="pl-k">=</span> <span class="pl-c1">collect</span>(<span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">4</span>)
circuit <span class="pl-k">=</span> <span class="pl-c1">Circuit</span>(vertices)
<span class="pl-c1">set_capacitance!</span>(circuit, <span class="pl-c1">0</span>, <span class="pl-c1">1</span>, <span class="pl-c1">10.0</span>)
<span class="pl-c1">set_capacitance!</span>(circuit, <span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">4.0</span>)
<span class="pl-c1">set_capacitance!</span>(circuit, <span class="pl-c1">0</span>, <span class="pl-c1">3</span>, <span class="pl-c1">4.0</span>)
<span class="pl-c1">set_capacitance!</span>(circuit, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">5.0</span>)
<span class="pl-c1">set_capacitance!</span>(circuit, <span class="pl-c1">3</span>, <span class="pl-c1">4</span>, <span class="pl-c1">5.0</span>)
<span class="pl-c1">set_inv_inductance!</span>(circuit, <span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3.5</span>)
<span class="pl-c1">set_inv_inductance!</span>(circuit, <span class="pl-c1">0</span>, <span class="pl-c1">3</span>, <span class="pl-c1">4.5</span>)</pre></div>
<p>Use the spanning tree in Appendix A to find a Positive Second Order model.</p>
<div class="highlight highlight-source-julia"><pre>root <span class="pl-k">=</span> <span class="pl-c1">0</span>
edges <span class="pl-k">=</span> [(<span class="pl-c1">1</span>, <span class="pl-c1">0</span>),
         (<span class="pl-c1">3</span>, <span class="pl-c1">0</span>),
         (<span class="pl-c1">4</span>, <span class="pl-c1">0</span>),
         (<span class="pl-c1">2</span>, <span class="pl-c1">1</span>)]
tree <span class="pl-k">=</span> <span class="pl-c1">SpanningTree</span>(root, edges)
<span class="pl-c1">PSOModel</span>(circuit, [(<span class="pl-c1">4</span>, <span class="pl-c1">0</span>)], [<span class="pl-s"><span class="pl-pds">"</span>port<span class="pl-pds">"</span></span>], tree)</pre></div>
<p>The tree is optional because a change of spanning tree is simply an invertible change of coordinates.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">PSOModel</span>(circuit, [(<span class="pl-c1">4</span>, <span class="pl-c1">0</span>)], [<span class="pl-s"><span class="pl-pds">"</span>port<span class="pl-pds">"</span></span>])</pre></div>
<h2><a id="user-content-example-usage-a-λ4-transmission-line-resonator-capacitively-coupled-to-a-transmission-line" class="anchor" aria-hidden="true" href="#example-usage-a-λ4-transmission-line-resonator-capacitively-coupled-to-a-transmission-line"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Example usage: a λ/4 transmission line resonator capacitively coupled to a transmission line</h2>
<p>The model we will analyze is similar the device shown below, from <a href="https://arxiv.org/abs/1901.08042" rel="nofollow">Manufacturing low dissipation superconducting quantum processors</a>.</p>
<p><a target="_blank" rel="noopener noreferrer" href="docs/Resonator.png"><img src="docs/Resonator.png" alt="" style="max-width:100%;"></a></p>
<p>Create <code>CircuitComponent</code> objects for the model.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> AdmittanceModels
ν <span class="pl-k">=</span> <span class="pl-c1">1.2e8</span> <span class="pl-c"><span class="pl-c">#</span> propagation_speed</span>
Z0 <span class="pl-k">=</span> <span class="pl-c1">50.0</span> <span class="pl-c"><span class="pl-c">#</span> characteristic_impedance</span>
δ <span class="pl-k">=</span> <span class="pl-c1">100e-6</span> <span class="pl-c"><span class="pl-c">#</span> discretization length</span>

resonator <span class="pl-k">=</span> <span class="pl-c1">TransmissionLine</span>([<span class="pl-s"><span class="pl-pds">"</span>coupler_0<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>short<span class="pl-pds">"</span></span>], ν, Z0, <span class="pl-c1">5e-3</span>, δ<span class="pl-k">=</span>δ)
tline <span class="pl-k">=</span> <span class="pl-c1">TransmissionLine</span>([<span class="pl-s"><span class="pl-pds">"</span>in<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>coupler_1<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>out<span class="pl-pds">"</span></span>], ν, Z0, <span class="pl-c1">2e-3</span>, locations<span class="pl-k">=</span>[<span class="pl-c1">1e-3</span>], δ<span class="pl-k">=</span>δ)
coupler <span class="pl-k">=</span> <span class="pl-c1">SeriesComponent</span>(<span class="pl-s"><span class="pl-pds">"</span>coupler_0<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>coupler_1<span class="pl-pds">"</span></span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">10e-15</span>)
components <span class="pl-k">=</span> [resonator, tline, coupler]</pre></div>
<p>Use <code>PSOModel</code> objects to compute the frequency and decay rate of quarter wave resonator mode. Include resistors at the ports in order to get the correct decay rate.</p>
<div class="highlight highlight-source-julia"><pre>resistors <span class="pl-k">=</span> [<span class="pl-c1">ParallelComponent</span>(name, <span class="pl-c1">0</span>, <span class="pl-c1">1</span><span class="pl-k">/</span>Z0, <span class="pl-c1">0</span>) <span class="pl-k">for</span> name <span class="pl-k">in</span> [<span class="pl-s"><span class="pl-pds">"</span>in<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>out<span class="pl-pds">"</span></span>]]
pso <span class="pl-k">=</span> <span class="pl-c1">connect</span>(<span class="pl-c1">PSOModel</span>.([components; resistors]))
pso <span class="pl-k">=</span> <span class="pl-c1">short_ports</span>(pso, <span class="pl-s"><span class="pl-pds">"</span>short<span class="pl-pds">"</span></span>)
λs, _ <span class="pl-k">=</span> <span class="pl-c1">lossy_modes_dense</span>(pso, min_freq<span class="pl-k">=</span><span class="pl-c1">3e9</span>, max_freq<span class="pl-k">=</span><span class="pl-c1">7e9</span>)
freq <span class="pl-k">=</span> <span class="pl-c1">imag</span>(λs[<span class="pl-c1">1</span>])<span class="pl-k">/</span>(<span class="pl-c1">2</span>π)
decay <span class="pl-k">=</span> <span class="pl-k">-</span><span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">real</span>(λs[<span class="pl-c1">1</span>])<span class="pl-k">/</span>(<span class="pl-c1">2</span>π)</pre></div>
<p>Compute the transmission scattering parameters <code>Blackbox</code>. This uses a closed form representation of the transmission lines.</p>
<div class="highlight highlight-source-julia"><pre>ω <span class="pl-k">=</span> <span class="pl-c1">collect</span>(<span class="pl-c1">range</span>(freq <span class="pl-k">-</span> <span class="pl-c1">2</span> <span class="pl-k">*</span> decay, stop<span class="pl-k">=</span>freq <span class="pl-k">+</span> <span class="pl-c1">2</span> <span class="pl-k">*</span> decay, length<span class="pl-k">=</span><span class="pl-c1">300</span>)) <span class="pl-k">*</span> <span class="pl-c1">2</span>π
bbox <span class="pl-k">=</span> <span class="pl-c1">connect</span>(<span class="pl-c1">Blackbox</span>.(<span class="pl-c1">Ref</span>(ω), components))
bbox <span class="pl-k">=</span> <span class="pl-c1">short_ports</span>(bbox, <span class="pl-s"><span class="pl-pds">"</span>short<span class="pl-pds">"</span></span>)
bbox <span class="pl-k">=</span> <span class="pl-c1">open_ports_except</span>(bbox, [<span class="pl-s"><span class="pl-pds">"</span>in<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>out<span class="pl-pds">"</span></span>])
S <span class="pl-k">=</span> [x[<span class="pl-c1">1</span>,<span class="pl-c1">2</span>] <span class="pl-k">for</span> x <span class="pl-k">in</span> <span class="pl-c1">scattering_matrices</span>(bbox, [Z0, Z0])]</pre></div>
<p>Plot the magnitude of the scattering parameters.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> PlotlyJS
<span class="pl-c1">plot</span>(<span class="pl-c1">scatter</span>(x<span class="pl-k">=</span>ω<span class="pl-k">/</span>(<span class="pl-c1">2</span>π<span class="pl-k">*</span><span class="pl-c1">1e9</span>), y<span class="pl-k">=</span><span class="pl-c1">abs</span>.(S)), <span class="pl-c1">Layout</span>(xaxis_title<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Frequency [GHz]<span class="pl-pds">"</span></span>, yaxis_title<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>|S|<span class="pl-pds">"</span></span>))</pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="docs/Magnitude.png"><img src="docs/Magnitude.png" alt="" style="max-width:100%;"></a></p>
<p>Plot the phase of the scattering parameters.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">plot</span>(<span class="pl-c1">scatter</span>(x<span class="pl-k">=</span>ω<span class="pl-k">/</span>(<span class="pl-c1">2</span>π<span class="pl-k">*</span><span class="pl-c1">1e9</span>), y<span class="pl-k">=</span><span class="pl-c1">angle</span>.(S)), <span class="pl-c1">Layout</span>(xaxis_title<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Frequency [GHz]<span class="pl-pds">"</span></span>, yaxis_title<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Phase(S)<span class="pl-pds">"</span></span>))</pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="docs/Phase.png"><img src="docs/Phase.png" alt="" style="max-width:100%;"></a></p>
<h2><a id="user-content-using-with-ansys-q3d-extractor" class="anchor" aria-hidden="true" href="#using-with-ansys-q3d-extractor"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Using with ANSYS Q3D Extractor</h2>
<p>Plain text files containing RLGC parameters exported by ANSYS® Q3D Extractor®
software can be used to construct a <code>Circuit</code> object via <code>Circuit(file_path)</code>.
Currently only capacitance matrices are supported.</p>
<p>ANSYS and Q3D Extractor are registered trademarks of ANSYS, Inc. or its
subsidiaries in the United States or other countries.</p>
</article></div>