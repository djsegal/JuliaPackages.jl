<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-ratios" class="anchor" aria-hidden="true" href="#ratios"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Ratios</h1>
<p dir="auto"><a href="https://github.com/timholy/Ratios.jl/actions/workflows/ci.yml"><img src="https://github.com/timholy/Ratios.jl/actions/workflows/ci.yml/badge.svg" alt="CI" style="max-width: 100%;"></a> <a href="https://codecov.io/gh/timholy/Ratios.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/8b99b42248a675c6334900122c42c1b1d23afbe6715ec1fded93996c1f1299b5/68747470733a2f2f636f6465636f762e696f2f67682f74696d686f6c792f526174696f732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e7376673f746f6b656e3d5a56634c6e5679544242" alt="Coverage" data-canonical-src="https://codecov.io/gh/timholy/Ratios.jl/branch/master/graph/badge.svg?token=ZVcLnVyTBB" style="max-width: 100%;"></a></p>
<p dir="auto">This package provides types similar to Julia's <code>Rational</code> type, which make some sacrifices but have better computational performance at the risk of greater risk of overflow.</p>
<p dir="auto">Currently the only type provided is <code>SimpleRatio(num, den)</code> for two integers <code>num</code> and <code>den</code>.</p>
<p dir="auto">Demo:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; x, y, z = SimpleRatio(1, 8), SimpleRatio(1, 4), SimpleRatio(2, 8)
(SimpleRatio{Int}(1, 8), SimpleRatio{Int}(1, 4), SimpleRatio{Int}(2, 8))

julia&gt; x+y
SimpleRatio{Int}(12, 32)

julia&gt; x+z
SimpleRatio{Int}(3, 8)"><pre>julia<span class="pl-k">&gt;</span> x, y, z <span class="pl-k">=</span> <span class="pl-c1">SimpleRatio</span>(<span class="pl-c1">1</span>, <span class="pl-c1">8</span>), <span class="pl-c1">SimpleRatio</span>(<span class="pl-c1">1</span>, <span class="pl-c1">4</span>), <span class="pl-c1">SimpleRatio</span>(<span class="pl-c1">2</span>, <span class="pl-c1">8</span>)
(<span class="pl-c1">SimpleRatio</span><span class="pl-c1">{Int}</span>(<span class="pl-c1">1</span>, <span class="pl-c1">8</span>), <span class="pl-c1">SimpleRatio</span><span class="pl-c1">{Int}</span>(<span class="pl-c1">1</span>, <span class="pl-c1">4</span>), <span class="pl-c1">SimpleRatio</span><span class="pl-c1">{Int}</span>(<span class="pl-c1">2</span>, <span class="pl-c1">8</span>))

julia<span class="pl-k">&gt;</span> x<span class="pl-k">+</span>y
<span class="pl-c1">SimpleRatio</span><span class="pl-c1">{Int}</span>(<span class="pl-c1">12</span>, <span class="pl-c1">32</span>)

julia<span class="pl-k">&gt;</span> x<span class="pl-k">+</span>z
<span class="pl-c1">SimpleRatio</span><span class="pl-c1">{Int}</span>(<span class="pl-c1">3</span>, <span class="pl-c1">8</span>)</pre></div>
<p dir="auto"><code>y</code> and <code>z</code> both represent the rational number <code>1//4</code>, but when performing arithmetic with <code>x</code>
<code>z</code> is preferred because it has the same denominator and is less likely to overflow.</p>
<p dir="auto">To detect overflow, <a href="https://github.com/JeffreySarnoff/SaferIntegers.jl">SaferIntegers.jl</a> is recommended:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using Ratios, SaferIntegers

julia&gt; x, y = SimpleRatio{SafeInt8}(1, 20), SimpleRatio{SafeInt8}(1, 21)
(SimpleRatio{SafeInt8}(1, 20), SimpleRatio{SafeInt8}(1, 21))

julia&gt; x + y
ERROR: OverflowError: 20 * 21 overflowed for type Int8
Stacktrace:
[...]"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Ratios, SaferIntegers

julia<span class="pl-k">&gt;</span> x, y <span class="pl-k">=</span> <span class="pl-c1">SimpleRatio</span><span class="pl-c1">{SafeInt8}</span>(<span class="pl-c1">1</span>, <span class="pl-c1">20</span>), <span class="pl-c1">SimpleRatio</span><span class="pl-c1">{SafeInt8}</span>(<span class="pl-c1">1</span>, <span class="pl-c1">21</span>)
(<span class="pl-c1">SimpleRatio</span><span class="pl-c1">{SafeInt8}</span>(<span class="pl-c1">1</span>, <span class="pl-c1">20</span>), <span class="pl-c1">SimpleRatio</span><span class="pl-c1">{SafeInt8}</span>(<span class="pl-c1">1</span>, <span class="pl-c1">21</span>))

julia<span class="pl-k">&gt;</span> x <span class="pl-k">+</span> y
ERROR<span class="pl-k">:</span> OverflowError<span class="pl-k">:</span> <span class="pl-c1">20</span> <span class="pl-k">*</span> <span class="pl-c1">21</span> overflowed <span class="pl-k">for</span> type Int8
Stacktrace<span class="pl-k">:</span>
[<span class="pl-k">...</span>]</pre></div>
<p dir="auto"><a href="https://github.com/JeffreySarnoff/FastRationals.jl">FastRationals</a> is another package with safety and performance characteristics that lies somewhere between <code>SimpleRatio</code> and <code>Rational</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; @btime x + y setup=((x, y) = (SimpleRatio(rand(-20:20), rand(2:20)), SimpleRatio(rand(-20:20), rand(2:20))));
  1.969 ns (0 allocations: 0 bytes)

julia&gt; @btime x + y setup=((x, y) = (FastRational(rand(-20:20), rand(2:20)), FastRational(rand(-20:20), rand(2:20))));
  3.192 ns (0 allocations: 0 bytes)

julia&gt; @btime x + y setup=((x, y) = (Rational(rand(-20:20), rand(2:20)), Rational(rand(-20:20), rand(2:20))));
  23.065 ns (0 allocations: 0 bytes)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> x <span class="pl-k">+</span> y setup<span class="pl-k">=</span>((x, y) <span class="pl-k">=</span> (<span class="pl-c1">SimpleRatio</span>(<span class="pl-c1">rand</span>(<span class="pl-k">-</span><span class="pl-c1">20</span><span class="pl-k">:</span><span class="pl-c1">20</span>), <span class="pl-c1">rand</span>(<span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">20</span>)), <span class="pl-c1">SimpleRatio</span>(<span class="pl-c1">rand</span>(<span class="pl-k">-</span><span class="pl-c1">20</span><span class="pl-k">:</span><span class="pl-c1">20</span>), <span class="pl-c1">rand</span>(<span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">20</span>))));
  <span class="pl-c1">1.969</span> ns (<span class="pl-c1">0</span> allocations<span class="pl-k">:</span> <span class="pl-c1">0</span> bytes)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> x <span class="pl-k">+</span> y setup<span class="pl-k">=</span>((x, y) <span class="pl-k">=</span> (<span class="pl-c1">FastRational</span>(<span class="pl-c1">rand</span>(<span class="pl-k">-</span><span class="pl-c1">20</span><span class="pl-k">:</span><span class="pl-c1">20</span>), <span class="pl-c1">rand</span>(<span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">20</span>)), <span class="pl-c1">FastRational</span>(<span class="pl-c1">rand</span>(<span class="pl-k">-</span><span class="pl-c1">20</span><span class="pl-k">:</span><span class="pl-c1">20</span>), <span class="pl-c1">rand</span>(<span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">20</span>))));
  <span class="pl-c1">3.192</span> ns (<span class="pl-c1">0</span> allocations<span class="pl-k">:</span> <span class="pl-c1">0</span> bytes)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> x <span class="pl-k">+</span> y setup<span class="pl-k">=</span>((x, y) <span class="pl-k">=</span> (<span class="pl-c1">Rational</span>(<span class="pl-c1">rand</span>(<span class="pl-k">-</span><span class="pl-c1">20</span><span class="pl-k">:</span><span class="pl-c1">20</span>), <span class="pl-c1">rand</span>(<span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">20</span>)), <span class="pl-c1">Rational</span>(<span class="pl-c1">rand</span>(<span class="pl-k">-</span><span class="pl-c1">20</span><span class="pl-k">:</span><span class="pl-c1">20</span>), <span class="pl-c1">rand</span>(<span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">20</span>))));
  <span class="pl-c1">23.065</span> ns (<span class="pl-c1">0</span> allocations<span class="pl-k">:</span> <span class="pl-c1">0</span> bytes)</pre></div>
</article></div>