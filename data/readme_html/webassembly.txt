<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-webassembly" class="anchor" aria-hidden="true" href="#webassembly"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>WebAssembly</h1>
<p dir="auto"><a href="https://travis-ci.org/MikeInnes/WebAssembly.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/8e6c3c1e244720380c315091c0f67e454914d3af8ca9fa45cf650b6649935a84/68747470733a2f2f7472617669732d63692e6f72672f4d696b65496e6e65732f576562417373656d626c792e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/MikeInnes/WebAssembly.jl.svg?branch=master" style="max-width: 100%;"></a></p>
<p dir="auto">Tools for working with the <a href="http://webassembly.org/" rel="nofollow">WebAssembly</a> format in Julia. In particular, this package exposes the IR as simple Julia data structures, allowing parsers and code generators to convert to/from the IR, as well as allowing optimisation passes directly on the IR in the vein of <a href="https://github.com/WebAssembly/binaryen">binaryen</a>.</p>
<p dir="auto">Build IR for a <code>x^n</code> function:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using WebAssembly: i32, f64, irfunc
using IRTools.All

pow = let
  ir = IR()
  x = argument!(ir, f64)
  n = argument!(ir, i32)
  cond = block!(ir)
  body = block!(ir)
  ret  = block!(ir)
  n = argument!(cond, n, i32)
  r = argument!(cond, 1.0, f64)
  branch!(cond, ret, unless = push!(cond, stmt(xcall(i32.gt_s, n, Int32(0)), type = i32)))
  n = push!(body, stmt(xcall(i32.sub, n, Int32(1)), type = i32))
  r′ = push!(body, stmt(xcall(f64.mul, r, x), type = f64))
  branch!(body, cond, n, r′)
  return!(ret, r)
  ir
end"><pre><span class="pl-k">using</span> WebAssembly<span class="pl-k">:</span> i32, f64, irfunc
<span class="pl-k">using</span> IRTools<span class="pl-k">.</span>All

pow <span class="pl-k">=</span> <span class="pl-k">let</span>
  ir <span class="pl-k">=</span> <span class="pl-c1">IR</span>()
  x <span class="pl-k">=</span> <span class="pl-c1">argument!</span>(ir, f64)
  n <span class="pl-k">=</span> <span class="pl-c1">argument!</span>(ir, i32)
  cond <span class="pl-k">=</span> <span class="pl-c1">block!</span>(ir)
  body <span class="pl-k">=</span> <span class="pl-c1">block!</span>(ir)
  ret  <span class="pl-k">=</span> <span class="pl-c1">block!</span>(ir)
  n <span class="pl-k">=</span> <span class="pl-c1">argument!</span>(cond, n, i32)
  r <span class="pl-k">=</span> <span class="pl-c1">argument!</span>(cond, <span class="pl-c1">1.0</span>, f64)
  <span class="pl-c1">branch!</span>(cond, ret, unless <span class="pl-k">=</span> <span class="pl-c1">push!</span>(cond, <span class="pl-c1">stmt</span>(<span class="pl-c1">xcall</span>(i32<span class="pl-k">.</span>gt_s, n, <span class="pl-c1">Int32</span>(<span class="pl-c1">0</span>)), type <span class="pl-k">=</span> i32)))
  n <span class="pl-k">=</span> <span class="pl-c1">push!</span>(body, <span class="pl-c1">stmt</span>(<span class="pl-c1">xcall</span>(i32<span class="pl-k">.</span>sub, n, <span class="pl-c1">Int32</span>(<span class="pl-c1">1</span>)), type <span class="pl-k">=</span> i32))
  r′ <span class="pl-k">=</span> <span class="pl-c1">push!</span>(body, <span class="pl-c1">stmt</span>(<span class="pl-c1">xcall</span>(f64<span class="pl-k">.</span>mul, r, x), type <span class="pl-k">=</span> f64))
  <span class="pl-c1">branch!</span>(body, cond, n, r′)
  <span class="pl-c1">return!</span>(ret, r)
  ir
<span class="pl-k">end</span></pre></div>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; pow
1: (%1 :: f64, %2 :: i32)
  br 2 (%2, 1.0)
2: (%3 :: i32, %4 :: f64)
  %5 = (i32.gt_s)(%3, 0) :: i32
  br 4 unless %5
3:
  %6 = (i32.sub)(%3, 1) :: i32
  %7 = (f64.mul)(%4, %1) :: f64
  br 2 (%6, %7)
4:
  return %4"><pre>julia<span class="pl-k">&gt;</span> pow
<span class="pl-c1">1</span><span class="pl-k">:</span> (<span class="pl-k">%</span><span class="pl-c1">1</span> <span class="pl-k">::</span> <span class="pl-c1">f64</span>, <span class="pl-k">%</span><span class="pl-c1">2</span> <span class="pl-k">::</span> <span class="pl-c1">i32</span>)
  br <span class="pl-c1">2</span> (<span class="pl-k">%</span><span class="pl-c1">2</span>, <span class="pl-c1">1.0</span>)
<span class="pl-c1">2</span><span class="pl-k">:</span> (<span class="pl-k">%</span><span class="pl-c1">3</span> <span class="pl-k">::</span> <span class="pl-c1">i32</span>, <span class="pl-k">%</span><span class="pl-c1">4</span> <span class="pl-k">::</span> <span class="pl-c1">f64</span>)
  <span class="pl-k">%</span><span class="pl-c1">5</span> <span class="pl-k">=</span> (i32<span class="pl-k">.</span>gt_s)(<span class="pl-k">%</span><span class="pl-c1">3</span>, <span class="pl-c1">0</span>) <span class="pl-k">::</span> <span class="pl-c1">i32</span>
  br <span class="pl-c1">4</span> unless <span class="pl-k">%</span><span class="pl-c1">5</span>
<span class="pl-c1">3</span><span class="pl-k">:</span>
  <span class="pl-k">%</span><span class="pl-c1">6</span> <span class="pl-k">=</span> (i32<span class="pl-k">.</span>sub)(<span class="pl-k">%</span><span class="pl-c1">3</span>, <span class="pl-c1">1</span>) <span class="pl-k">::</span> <span class="pl-c1">i32</span>
  <span class="pl-k">%</span><span class="pl-c1">7</span> <span class="pl-k">=</span> (f64<span class="pl-k">.</span>mul)(<span class="pl-k">%</span><span class="pl-c1">4</span>, <span class="pl-k">%</span><span class="pl-c1">1</span>) <span class="pl-k">::</span> <span class="pl-c1">f64</span>
  br <span class="pl-c1">2</span> (<span class="pl-k">%</span><span class="pl-c1">6</span>, <span class="pl-k">%</span><span class="pl-c1">7</span>)
<span class="pl-c1">4</span><span class="pl-k">:</span>
  <span class="pl-k">return</span> <span class="pl-k">%</span><span class="pl-c1">4</span></pre></div>
<p dir="auto">Construct a wasm function and module:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="func = irfunc(:pow, pow)

mod = WebAssembly.Module(funcs=[func],
   exports=[WebAssembly.Export(:pow, :pow, :func)])

WebAssembly.binary(mod, &quot;test.wasm&quot;)"><pre>func <span class="pl-k">=</span> <span class="pl-c1">irfunc</span>(<span class="pl-c1">:pow</span>, pow)

mod <span class="pl-k">=</span> WebAssembly<span class="pl-k">.</span><span class="pl-c1">Module</span>(funcs<span class="pl-k">=</span>[func],
   exports<span class="pl-k">=</span>[WebAssembly<span class="pl-k">.</span><span class="pl-c1">Export</span>(<span class="pl-c1">:pow</span>, <span class="pl-c1">:pow</span>, <span class="pl-c1">:func</span>)])

WebAssembly<span class="pl-k">.</span><span class="pl-c1">binary</span>(mod, <span class="pl-s"><span class="pl-pds">"</span>test.wasm<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">Disassemble the result with binaryen:</p>
<div class="highlight highlight-source-webassembly notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="shell&gt; wasm-dis test.wasm
(module
 (type $0 (func (param f64 i32) (result f64)))
 (export &quot;pow&quot; (func $0))
 (func $0 (; 0 ;) (type $0) (param $0 f64) (param $1 i32) (result f64)
  (local $2 f64)
  (local.set $2 (f64.const 1))
  (loop $label$1
   (if
    (i32.eqz (i32.le_s (local.get $1) (i32.const 0)))
    (block
     (local.set $1
      (i32.sub (local.get $1) (i32.const 1)))
     (local.set $2
      (f64.mul (local.get $2) (local.get $0)))
     (br $label$1))))
  (local.get $2)))"><pre>shell&gt; wasm-dis test.wasm
(<span class="pl-k">module</span>
 (<span class="pl-k">type</span> <span class="pl-smi">$0</span> (<span class="pl-k">func</span> (<span class="pl-k">param</span> <span class="pl-k">f64</span> <span class="pl-k">i32</span>) (<span class="pl-k">result</span> <span class="pl-k">f64</span>)))
 (<span class="pl-k">export</span> <span class="pl-s"><span class="pl-pds">"</span>pow<span class="pl-pds">"</span></span> (<span class="pl-k">func</span> <span class="pl-smi">$0</span>))
 (<span class="pl-k">func</span> <span class="pl-smi">$0</span> <span class="pl-c">(; 0 ;)</span> (<span class="pl-k">type</span> <span class="pl-smi">$0</span>) (<span class="pl-k">param</span> <span class="pl-smi">$0</span> <span class="pl-k">f64</span>) (<span class="pl-k">param</span> <span class="pl-smi">$1</span> <span class="pl-k">i32</span>) (<span class="pl-k">result</span> <span class="pl-k">f64</span>)
  (<span class="pl-k">local</span> <span class="pl-smi">$2</span> <span class="pl-k">f64</span>)
  (<span class="pl-en">local.set</span> <span class="pl-smi">$2</span> (<span class="pl-en">f64.const</span> <span class="pl-c1">1</span>))
  (<span class="pl-k">loop</span> <span class="pl-smi">$label$1</span>
   (<span class="pl-k">if</span>
    (<span class="pl-en">i32.eqz</span> (<span class="pl-en">i32.le_s</span> (<span class="pl-en">local.get</span> <span class="pl-smi">$1</span>) (<span class="pl-en">i32.const</span> <span class="pl-c1">0</span>)))
    (<span class="pl-k">block</span>
     (<span class="pl-en">local.set</span> <span class="pl-smi">$1</span>
      (<span class="pl-en">i32.sub</span> (<span class="pl-en">local.get</span> <span class="pl-smi">$1</span>) (<span class="pl-en">i32.const</span> <span class="pl-c1">1</span>)))
     (<span class="pl-en">local.set</span> <span class="pl-smi">$2</span>
      (<span class="pl-en">f64.mul</span> (<span class="pl-en">local.get</span> <span class="pl-smi">$2</span>) (<span class="pl-en">local.get</span> <span class="pl-smi">$0</span>)))
     (<span class="pl-k">br</span> <span class="pl-smi">$label$1</span>))))
  (<span class="pl-en">local.get</span> <span class="pl-smi">$2</span>)))</pre></div>
<h2 dir="auto"><a id="user-content-dependencies" class="anchor" aria-hidden="true" href="#dependencies"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Dependencies</h2>
<p dir="auto">The latest released version of this package (0.1.1) bundles some required
WebAssembly tooling via <a href="https://github.com/tshort/WABTBuilder">WABTBuilder</a> and
<a href="https://github.com/MikeInnes/BinaryenBuilder">BinaryenBuilder</a>. As of writing,
these are both a little out of date and incompatible with ARM macs.</p>
<p dir="auto">For now, those dependencies are no longer bundled if you're using the master branch of
the package. Instead, if you want to emit binaries and optimise them, you'll
need <code>wat2wasm</code> and <code>wasm-opt</code> on your path, respectively. With homebrew you can
get these both with <code>brew install wabt binaryen</code>. Alternatively, just avoid the
<code>WebAssembly.binary</code> function – everything else will work fine.</p>
</article></div>