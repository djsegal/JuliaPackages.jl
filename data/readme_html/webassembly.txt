<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-webassembly" class="anchor" aria-hidden="true" href="#webassembly"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>WebAssembly</h1>
<p><a href="https://travis-ci.org/MikeInnes/WebAssembly.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/2e0d25d98c04bf24bf2e5af47586dcd567edbf80/68747470733a2f2f7472617669732d63692e6f72672f4d696b65496e6e65732f576562417373656d626c792e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/MikeInnes/WebAssembly.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p>Tools for working with the <a href="http://webassembly.org/" rel="nofollow">WebAssembly</a> format in Julia. In particular, this package exposes the IR as simple Julia data structures, allowing parsers and code generators to convert to/from the IR, as well as allowing optimisation passes directly on the IR in the vein of <a href="https://github.com/WebAssembly/binaryen">binaryen</a>.</p>
<p>Build IR for a <code>x^n</code> function:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> WebAssembly<span class="pl-k">:</span> i32, f64, irfunc
<span class="pl-k">using</span> IRTools<span class="pl-k">.</span>All

pow <span class="pl-k">=</span> <span class="pl-k">let</span>
  ir <span class="pl-k">=</span> <span class="pl-c1">IR</span>()
  x <span class="pl-k">=</span> <span class="pl-c1">argument!</span>(ir, f64)
  n <span class="pl-k">=</span> <span class="pl-c1">argument!</span>(ir, i32)
  cond <span class="pl-k">=</span> <span class="pl-c1">block!</span>(ir)
  body <span class="pl-k">=</span> <span class="pl-c1">block!</span>(ir)
  ret  <span class="pl-k">=</span> <span class="pl-c1">block!</span>(ir)
  n <span class="pl-k">=</span> <span class="pl-c1">argument!</span>(cond, n, i32)
  r <span class="pl-k">=</span> <span class="pl-c1">argument!</span>(cond, <span class="pl-c1">1.0</span>, i64)
  <span class="pl-c1">branch!</span>(cond, ret, unless <span class="pl-k">=</span> <span class="pl-c1">push!</span>(cond, <span class="pl-c1">stmt</span>(<span class="pl-c1">xcall</span>(i32<span class="pl-k">.</span>gt_s, n, <span class="pl-c1">Int32</span>(<span class="pl-c1">0</span>)), type <span class="pl-k">=</span> i32)))
  n <span class="pl-k">=</span> <span class="pl-c1">push!</span>(body, <span class="pl-c1">stmt</span>(<span class="pl-c1">xcall</span>(i32<span class="pl-k">.</span>sub, n, <span class="pl-c1">Int32</span>(<span class="pl-c1">1</span>)), type <span class="pl-k">=</span> i32))
  r′ <span class="pl-k">=</span> <span class="pl-c1">push!</span>(body, <span class="pl-c1">stmt</span>(<span class="pl-c1">xcall</span>(f64<span class="pl-k">.</span>mul, r, x), type <span class="pl-k">=</span> f64))
  <span class="pl-c1">branch!</span>(body, cond, n, r′)
  <span class="pl-c1">return!</span>(ret, r)
  ir
<span class="pl-k">end</span></pre></div>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> pow
<span class="pl-c1">1</span><span class="pl-k">:</span> (<span class="pl-k">%</span><span class="pl-c1">1</span> <span class="pl-k">::</span> <span class="pl-c1">f64</span>, <span class="pl-k">%</span><span class="pl-c1">2</span> <span class="pl-k">::</span> <span class="pl-c1">i32</span>)
  br <span class="pl-c1">2</span> (<span class="pl-k">%</span><span class="pl-c1">2</span>, <span class="pl-c1">1.0</span>)
<span class="pl-c1">2</span><span class="pl-k">:</span> (<span class="pl-k">%</span><span class="pl-c1">3</span> <span class="pl-k">::</span> <span class="pl-c1">i32</span>, <span class="pl-k">%</span><span class="pl-c1">4</span> <span class="pl-k">::</span> <span class="pl-c1">f64</span>)
  <span class="pl-k">%</span><span class="pl-c1">5</span> <span class="pl-k">=</span> (i32<span class="pl-k">.</span>gt_s)(<span class="pl-k">%</span><span class="pl-c1">3</span>, <span class="pl-c1">0</span>) <span class="pl-k">::</span> <span class="pl-c1">i32</span>
  br <span class="pl-c1">4</span> unless <span class="pl-k">%</span><span class="pl-c1">5</span>
<span class="pl-c1">3</span><span class="pl-k">:</span>
  <span class="pl-k">%</span><span class="pl-c1">6</span> <span class="pl-k">=</span> (i32<span class="pl-k">.</span>sub)(<span class="pl-k">%</span><span class="pl-c1">3</span>, <span class="pl-c1">1</span>) <span class="pl-k">::</span> <span class="pl-c1">i32</span>
  <span class="pl-k">%</span><span class="pl-c1">7</span> <span class="pl-k">=</span> (f64<span class="pl-k">.</span>mul)(<span class="pl-k">%</span><span class="pl-c1">4</span>, <span class="pl-k">%</span><span class="pl-c1">1</span>) <span class="pl-k">::</span> <span class="pl-c1">f64</span>
  br <span class="pl-c1">2</span> (<span class="pl-k">%</span><span class="pl-c1">6</span>, <span class="pl-k">%</span><span class="pl-c1">7</span>)
<span class="pl-c1">4</span><span class="pl-k">:</span>
  <span class="pl-k">return</span> <span class="pl-k">%</span><span class="pl-c1">4</span></pre></div>
<p>Construct a wasm function and module:</p>
<div class="highlight highlight-source-julia"><pre>func <span class="pl-k">=</span> <span class="pl-c1">irfunc</span>(<span class="pl-c1">:pow</span>, pow)

mod <span class="pl-k">=</span> WebAssembly<span class="pl-k">.</span><span class="pl-c1">Module</span>(funcs<span class="pl-k">=</span>[func],
   exports<span class="pl-k">=</span>[WebAssembly<span class="pl-k">.</span><span class="pl-c1">Export</span>(<span class="pl-c1">:pow</span>, <span class="pl-c1">:pow</span>, <span class="pl-c1">:func</span>)])

WebAssembly<span class="pl-k">.</span><span class="pl-c1">binary</span>(mod, <span class="pl-s"><span class="pl-pds">"</span>test.wasm<span class="pl-pds">"</span></span>)</pre></div>
<p>Disassemble the result with binaryen:</p>
<div class="highlight highlight-source-webassembly"><pre>shell&gt; wasm-dis test.wasm
(<span class="pl-k">module</span>
 (<span class="pl-en">type</span> <span class="pl-smi">$0</span> (<span class="pl-en">func</span> (<span class="pl-en">param</span> <span class="pl-k">f64</span> <span class="pl-k">i32</span>) (<span class="pl-en">result</span> <span class="pl-k">f64</span>)))
 (<span class="pl-en">export</span> <span class="pl-s"><span class="pl-pds">"</span>pow<span class="pl-pds">"</span></span> (<span class="pl-en">func</span> <span class="pl-smi">$0</span>))
 (<span class="pl-en">func</span> <span class="pl-smi">$0</span> <span class="pl-c">(; 0 ;)</span> (<span class="pl-en">type</span> <span class="pl-smi">$0</span>) (<span class="pl-en">param</span> <span class="pl-smi">$0</span> <span class="pl-k">f64</span>) (<span class="pl-en">param</span> <span class="pl-smi">$1</span> <span class="pl-k">i32</span>) (<span class="pl-en">result</span> <span class="pl-k">f64</span>)
  (<span class="pl-en">local</span> <span class="pl-smi">$2</span> <span class="pl-k">f64</span>)
  (local.set <span class="pl-smi">$2</span> (<span class="pl-k">f64</span>.<span class="pl-en">const</span> <span class="pl-c1">1</span>))
  (<span class="pl-en">loop</span> <span class="pl-smi">$label$1</span>
   (<span class="pl-en">if</span>
    (<span class="pl-k">i32</span>.<span class="pl-en">eqz</span> (<span class="pl-k">i32</span>.<span class="pl-en">le_s</span> (local.<span class="pl-en">get</span> <span class="pl-smi">$1</span>) (<span class="pl-k">i32</span>.<span class="pl-en">const</span> <span class="pl-c1">0</span>)))
    (<span class="pl-en">block</span>
     (local.set <span class="pl-smi">$1</span>
      (<span class="pl-k">i32</span>.<span class="pl-en">sub</span> (local.<span class="pl-en">get</span> <span class="pl-smi">$1</span>) (<span class="pl-k">i32</span>.<span class="pl-en">const</span> <span class="pl-c1">1</span>)))
     (local.set <span class="pl-smi">$2</span>
      (<span class="pl-k">f64</span>.<span class="pl-en">mul</span> (local.<span class="pl-en">get</span> <span class="pl-smi">$2</span>) (local.<span class="pl-en">get</span> <span class="pl-smi">$0</span>)))
     (<span class="pl-en">br</span> <span class="pl-smi">$label$1</span>))))
  (local.<span class="pl-en">get</span> <span class="pl-smi">$2</span>)))</pre></div>
<p>(If wasm-dis is not on your path you can use</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">run</span>(<span class="pl-s"><span class="pl-pds">`</span><span class="pl-v">$(WebAssembly<span class="pl-k">.</span>Binaryen<span class="pl-k">.</span>wasm_dis)</span> test.wasm<span class="pl-pds">`</span></span>);</pre></div>
<p>to get syntax-highlighted WASM in a terminal).</p>
</article></div>