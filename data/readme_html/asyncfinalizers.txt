<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-asyncfinalizers" class="anchor" aria-hidden="true" href="#asyncfinalizers"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>AsyncFinalizers</h1>
<p dir="auto"><a href="https://juliaconcurrent.github.io/AsyncFinalizers.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/JuliaConcurrent/AsyncFinalizers.jl/actions/workflows/test.yml"><img src="https://github.com/JuliaConcurrent/AsyncFinalizers.jl/actions/workflows/test.yml/badge.svg" alt="CI" style="max-width: 100%;"></a></p>
<p dir="auto">AsyncFinalizers.jl extends <code>finalizer</code> for</p>
<ul dir="auto">
<li>
<p dir="auto">Allowing executing arbitrary code, including I/O, upon garbage collection of a given
object.</p>
</li>
<li>
<p dir="auto">Safe and unsafe APIs for avoiding escaping and thus "resurrecting" the object that would
be collected otherwise.</p>
</li>
</ul>
<p dir="auto">For more information, see the
<a href="https://juliaconcurrent.github.io/AsyncFinalizers.jl/dev" rel="nofollow">documentation</a>.</p>
<p dir="auto">For how it works internally, see <a href="#implementation-strategy">Implementation strategy</a>.</p>
<h2 dir="auto"><a id="user-content-api" class="anchor" aria-hidden="true" href="#api"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>API</h2>
<ul dir="auto">
<li><code>AsyncFinalizers.onfinalize</code>: like <code>finalizer</code> but allows I/O</li>
<li><code>AsyncFinalizers.unsafe_unwrap</code>: unwrap the <code>shim</code> wrapper (see below)</li>
</ul>
<h2 dir="auto"><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using AsyncFinalizers

julia&gt; mutable struct RefInt
           value::Int
       end

julia&gt; object = RefInt(42);

julia&gt; AsyncFinalizers.onfinalize(object) do shim
           # Unpack `shim` of the finalized `object`.  I/O is not allowed here.
           value = shim.value
           # Return a thunk:
           return function ()
               # Arbitrary I/O is possible here:
               println(&quot;RefInt(&quot;, value, &quot;) is finalized&quot;)
           end
       end;

julia&gt; object = nothing

julia&gt; GC.gc(); sleep(0.1)
RefInt(42) is finalized"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> AsyncFinalizers

julia<span class="pl-k">&gt;</span> <span class="pl-k">mutable struct</span> RefInt
           value<span class="pl-k">::</span><span class="pl-c1">Int</span>
       <span class="pl-k">end</span>

julia<span class="pl-k">&gt;</span> object <span class="pl-k">=</span> <span class="pl-c1">RefInt</span>(<span class="pl-c1">42</span>);

julia<span class="pl-k">&gt;</span> AsyncFinalizers<span class="pl-k">.</span><span class="pl-c1">onfinalize</span>(object) <span class="pl-k">do</span> shim
           <span class="pl-c"><span class="pl-c">#</span> Unpack `shim` of the finalized `object`.  I/O is not allowed here.</span>
           value <span class="pl-k">=</span> shim<span class="pl-k">.</span>value
           <span class="pl-c"><span class="pl-c">#</span> Return a thunk:</span>
           <span class="pl-k">return</span> <span class="pl-k">function</span> ()
               <span class="pl-c"><span class="pl-c">#</span> Arbitrary I/O is possible here:</span>
               <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>RefInt(<span class="pl-pds">"</span></span>, value, <span class="pl-s"><span class="pl-pds">"</span>) is finalized<span class="pl-pds">"</span></span>)
           <span class="pl-k">end</span>
       <span class="pl-k">end</span>;

julia<span class="pl-k">&gt;</span> object <span class="pl-k">=</span> <span class="pl-c1">nothing</span>

julia<span class="pl-k">&gt;</span> GC<span class="pl-k">.</span><span class="pl-c1">gc</span>(); <span class="pl-c1">sleep</span>(<span class="pl-c1">0.1</span>)
<span class="pl-c1">RefInt</span>(<span class="pl-c1">42</span>) is finalized</pre></div>
<p dir="auto">Note that the callback passed to <code>AsyncFinalizers.onfinalize</code> receives a <code>shim</code> wrapper and
not the original <code>object</code> itself.  To get the original object wrapped in <code>shim</code>, use
<code>AsyncFinalizers.unsafe_unwrap</code>.</p>
<h2 dir="auto"><a id="user-content-implementation-strategy" class="anchor" aria-hidden="true" href="#implementation-strategy"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Implementation strategy</h2>
<p dir="auto">AsyncFinalizers.jl works internally by a background worker task that processes queued async
finalizers (returned as thunks from the "on-finalize" callback registered using
<code>AsyncFinalizers.onfinalize</code>) and a queue with <em>lock-free <code>put!</code></em> called from the standard
finalizer (the callback passed to <code>Base.finalize</code>).  Since <code>put!</code> is <a href="https://en.wikipedia.org/wiki/Non-blocking_algorithm" rel="nofollow">lock-free in the
"strict" sense</a> (modulo GC), <code>put!</code>
called in the standard finalizer can <em>always</em> eventually make forward progress independent
of the state of the worker task at which it encounters the GC safepoint.</p>
</article></div>