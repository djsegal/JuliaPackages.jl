<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-elementaljl" class="anchor" aria-hidden="true" href="#elementaljl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Elemental.jl</h1>
<p><a href="https://travis-ci.org/JuliaParallel/Elemental.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/0518258470171e0bcbaac183f45b89f5841ad83d/68747470733a2f2f7472617669732d63692e6f72672f4a756c6961506172616c6c656c2f456c656d656e74616c2e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaParallel/Elemental.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p>A package for dense and sparse distributed linear algebra and optimization. The underlying functionality is provided by the C++ library <a href="http://libelemental.org/" rel="nofollow">Elemental</a> written by <a href="http://web.stanford.edu/~poulson/" rel="nofollow">Jack Poulson</a>.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Installation</h2>
<p>The package is installed with <code>Pkg.add("Elemental")</code>. The install script automatically downloads <em>Elemental</em> and will try build against the BLAS library used by Julia.</p>
<h3><a id="user-content-mpi" class="anchor" aria-hidden="true" href="#mpi"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>MPI</h3>
<p>The install script will build against any MPI installation that can be detected from calling <code>mpirun</code>. The package is tested with MPICH and OpenMPI but be aware that for OpenMPI at least version 1.8 is required because earlier versions of had bugs for complex data types. If you are using Linux and have installed OpenMPI from the repositories the version is (as always on Linux distributions) likely to be too old. Currently, MPICH isn't supported on macOS, see <a href="https://github.com/pmodels/mpich/commit/2999a0ab3abc7a113d35d6117a9d1db8fa0ffa44#commitcomment-31131644">this comment</a> for details.</p>
<h2><a id="user-content-examples---svd" class="anchor" aria-hidden="true" href="#examples---svd"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Examples - SVD</h2>
<h3><a id="user-content-simple-example-without-mpi" class="anchor" aria-hidden="true" href="#simple-example-without-mpi"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Simple example without MPI</h3>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> LinearAlgebra, Elemental

julia<span class="pl-k">&gt;</span> A <span class="pl-k">=</span> Elemental<span class="pl-k">.</span><span class="pl-c1">Matrix</span>(Float64)
<span class="pl-c1">0x0</span> Elemental<span class="pl-k">.</span>Matrix{Float64}

julia<span class="pl-k">&gt;</span> Elemental<span class="pl-k">.</span><span class="pl-c1">gaussian!</span>(A, <span class="pl-c1">100</span>, <span class="pl-c1">80</span>);

julia<span class="pl-k">&gt;</span> U, s, V <span class="pl-k">=</span> <span class="pl-c1">svd</span>(A);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">convert</span>(Matrix{Float64}, s)[<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>]
<span class="pl-c1">10</span><span class="pl-k">-</span>element Array{Float64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">19.8989</span>
 <span class="pl-c1">18.2702</span>
 <span class="pl-c1">17.3665</span>
 <span class="pl-c1">17.0475</span>
 <span class="pl-c1">16.4513</span>
 <span class="pl-c1">16.3197</span>
 <span class="pl-c1">16.0989</span>
 <span class="pl-c1">15.8353</span>
 <span class="pl-c1">15.5947</span>
 <span class="pl-c1">15.5079</span></pre></div>
<h3><a id="user-content-simple-example-with-mpi" class="anchor" aria-hidden="true" href="#simple-example-with-mpi"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Simple example with MPI</h3>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> MPI

julia<span class="pl-k">&gt;</span> man <span class="pl-k">=</span> <span class="pl-c1">MPIManager</span>(np <span class="pl-k">=</span> <span class="pl-c1">4</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">addprocs</span>(man);

julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> LinearAlgebra, Elemental

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@mpi_do</span> man A <span class="pl-k">=</span> Elemental<span class="pl-k">.</span><span class="pl-c1">DistMatrix</span>(Float64);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@mpi_do</span> man Elemental<span class="pl-k">.</span><span class="pl-c1">gaussian!</span>(A, <span class="pl-c1">1000</span>, <span class="pl-c1">800</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@mpi_do</span> man U, s, V <span class="pl-k">=</span> <span class="pl-c1">svd</span>(A);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@mpi_do</span> man <span class="pl-c1">println</span>(s[<span class="pl-c1">1</span>])
    From worker <span class="pl-c1">5</span><span class="pl-k">:</span>  <span class="pl-c1">59.639990420817696</span>
    From worker <span class="pl-c1">4</span><span class="pl-k">:</span>  <span class="pl-c1">59.639990420817696</span>
    From worker <span class="pl-c1">2</span><span class="pl-k">:</span>  <span class="pl-c1">59.639990420817696</span>
    From worker <span class="pl-c1">3</span><span class="pl-k">:</span>  <span class="pl-c1">59.639990420817696</span></pre></div>
<h3><a id="user-content-simple-example-with-darrays" class="anchor" aria-hidden="true" href="#simple-example-with-darrays"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Simple example with DArrays</h3>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> MPI

julia<span class="pl-k">&gt;</span> man <span class="pl-k">=</span> <span class="pl-c1">MPIManager</span>(np <span class="pl-k">=</span> <span class="pl-c1">4</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">addprocs</span>(man);

julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> DistributedArrays

julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Elemental

julia<span class="pl-k">&gt;</span> A <span class="pl-k">=</span> <span class="pl-c1">drandn</span>(<span class="pl-c1">1000</span>, <span class="pl-c1">800</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">svdvals</span>(A)[<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">5</span>]
<span class="pl-c1">5</span><span class="pl-k">-</span>element SubArray{Float64,<span class="pl-c1">1</span>,DistributedArrays<span class="pl-k">.</span>DArray{Float64,<span class="pl-c1">2</span>,Array{Float64,<span class="pl-c1">2</span>}},Tuple{UnitRange{Int64}},<span class="pl-c1">0</span>}<span class="pl-k">:</span>
 <span class="pl-c1">59.4649</span>
 <span class="pl-c1">59.1984</span>
 <span class="pl-c1">59.0309</span>
 <span class="pl-c1">58.7178</span>
 <span class="pl-c1">58.389</span></pre></div>
<h3><a id="user-content-truncated-svd" class="anchor" aria-hidden="true" href="#truncated-svd"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Truncated SVD</h3>
<p>The iterative SVD algorithm is implemented in pure Julia, but the factorized matrix as well as the Lanczos vectors are stored as distributed matrices in Elemental. Notice, that <code>TSVD.jl</code> doesn't depend on Elemental and is only using <code>Elemental.jl</code>'s through generic function calls.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> MPI

julia<span class="pl-k">&gt;</span> man <span class="pl-k">=</span> <span class="pl-c1">MPIManager</span>(np <span class="pl-k">=</span> <span class="pl-c1">4</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">addprocs</span>(man);

julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Elemental

julia<span class="pl-k">&gt;</span> Pkg<span class="pl-k">.</span><span class="pl-c1">clone</span>(<span class="pl-s"><span class="pl-pds">"</span>TSVD<span class="pl-pds">"</span></span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@everywhere</span> <span class="pl-k">using</span> TSVD

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@mpi_do</span> man A <span class="pl-k">=</span> Elemental<span class="pl-k">.</span><span class="pl-c1">DistMatrix</span>(Float64);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@mpi_do</span> man Elemental<span class="pl-k">.</span><span class="pl-c1">gaussian!</span>(A, <span class="pl-c1">5000</span>, <span class="pl-c1">2000</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@mpi_do</span> man r <span class="pl-k">=</span> <span class="pl-c1">tsvd</span>(A, <span class="pl-c1">5</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@mpi_do</span> man <span class="pl-c1">println</span>(r[<span class="pl-c1">2</span>][<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">5</span>])
    From worker <span class="pl-c1">3</span><span class="pl-k">:</span>  [<span class="pl-c1">1069.6059089732858</span>,<span class="pl-c1">115.44260091060129</span>,<span class="pl-c1">115.08319164529792</span>,<span class="pl-c1">114.87007788947226</span>,<span class="pl-c1">114.48092348847719</span>]
    From worker <span class="pl-c1">5</span><span class="pl-k">:</span>  [<span class="pl-c1">1069.6059089732858</span>,<span class="pl-c1">115.44260091060129</span>,<span class="pl-c1">115.08319164529792</span>,<span class="pl-c1">114.87007788947226</span>,<span class="pl-c1">114.48092348847719</span>]
    From worker <span class="pl-c1">2</span><span class="pl-k">:</span>  [<span class="pl-c1">1069.6059089732858</span>,<span class="pl-c1">115.44260091060129</span>,<span class="pl-c1">115.08319164529792</span>,<span class="pl-c1">114.87007788947226</span>,<span class="pl-c1">114.48092348847719</span>]
    From worker <span class="pl-c1">4</span><span class="pl-k">:</span>  [<span class="pl-c1">1069.6059089732858</span>,<span class="pl-c1">115.44260091060129</span>,<span class="pl-c1">115.08319164529792</span>,<span class="pl-c1">114.87007788947226</span>,<span class="pl-c1">114.48092348847719</span>]</pre></div>
<h3><a id="user-content-linear-regression" class="anchor" aria-hidden="true" href="#linear-regression"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Linear Regression</h3>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">@mpi_do</span> man A <span class="pl-k">=</span> Elemental<span class="pl-k">.</span><span class="pl-c1">DistMatrix</span>(Float32)
<span class="pl-c1">@mpi_do</span> man B <span class="pl-k">=</span> Elemental<span class="pl-k">.</span><span class="pl-c1">DistMatrix</span>(Float32)
<span class="pl-c1">@mpi_do</span> man <span class="pl-c1">copy!</span>(A, Float32[<span class="pl-c1">2</span> <span class="pl-c1">1</span>; <span class="pl-c1">1</span> <span class="pl-c1">2</span>])
<span class="pl-c1">@mpi_do</span> man <span class="pl-c1">copy!</span>(B, Float32[<span class="pl-c1">4</span>, <span class="pl-c1">5</span>])</pre></div>
<p>Run distributed ridge regression <code> ½|A*X-B|₂² + λ|X|₂²</code></p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">@mpi_do</span> man X <span class="pl-k">=</span> Elemental<span class="pl-k">.</span><span class="pl-c1">ridge</span>(A, B, <span class="pl-c1">0</span>f0)</pre></div>
<p>Run distributed lasso regression <code> ½|A*X-B|₂² + λ|X|₁</code> (only supported in recent versions of Elemental)</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">@mpi_do</span> man X <span class="pl-k">=</span> Elemental<span class="pl-k">.</span><span class="pl-c1">bpdn</span>(A, B, <span class="pl-c1">0.1</span>f0)</pre></div>
<h3><a id="user-content-coverage" class="anchor" aria-hidden="true" href="#coverage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Coverage</h3>
<p>We continually add functionality from <em>Elemental</em> to <code>Elemental.jl</code> so, right now, the best way to see if a specific function is available, is to look through the source code.</p>
</article></div>