<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-metatools" class="anchor" aria-hidden="true" href="#metatools"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>MetaTools</h1>
<p><a href="https://travis-ci.org/burrowsa/MetaTools.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/b31a1d85f9600a00ea2e12817949405f1ae3088c/68747470733a2f2f7472617669732d63692e6f72672f627572726f7773612f4d657461546f6f6c732e6a6c2e706e673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/burrowsa/MetaTools.jl.png?branch=master" style="max-width:100%;"></a></p>
<p><code>MetaTools.jl</code> makes it simpler to write Julia macros that work on functions. When developing a macro in Julia the developer must take into account all the possible forms of AST that could be passed to the macro. The code to do this can be complicated and obscures the real logic the macro is designed to implement making the code harder to understand and maintain. Also all the possible forms of AST must be tested adding further the effort required to develop a macro. The approach <code>MetaTools.jl</code> takes is to convert the AST into a standardized format, an object of type <code>ParsedFunction</code>. This object is mutable and can be manipulated then the final form converted back to AST using the <code>emit</code> function. The <code>MetaTools.jl</code> functions to parse and emit AST are thoroughly tested so you only need test the core functionality of your macro not all the corner cases relating to obscure AST.</p>
<p>As well as the tools described above for writing macros <code>MetaTools.jl</code> also includes some handy macros implemented using the package. They serve both as examples of how to use the package and also as useful tools in their own right. The following macros are included:</p>
<ul>
<li><code>@commutative</code></li>
</ul>
</article></div>