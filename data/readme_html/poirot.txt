<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p align="center" dir="auto">
<a target="_blank" rel="noopener noreferrer nofollow" href="https://raw.githubusercontent.com/FluxML/fluxml.github.io/master/poirot.png"><img width="400px" src="https://raw.githubusercontent.com/FluxML/fluxml.github.io/master/poirot.png" style="max-width: 100%;"></a>
</p>
<p dir="auto"><a href="https://travis-ci.org/MikeInnes/Poirot.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/a98e9cf55b35ba3cb71288737ea4b4e3188daea6e376ba5509dc5843b5509132/68747470733a2f2f7472617669732d63692e6f72672f4d696b65496e6e65732f506f69726f742e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/MikeInnes/Poirot.jl.svg?branch=master" style="max-width: 100%;"></a></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="] add IRTools#master
] add https://github.com/MikeInnes/Mjolnir.jl
] add https://github.com/MikeInnes/Poirot.jl"><pre>] add IRTools<span class="pl-c"><span class="pl-c">#</span>master</span>
] add https<span class="pl-k">:</span><span class="pl-k">//</span>github<span class="pl-k">.</span>com<span class="pl-k">/</span>MikeInnes<span class="pl-k">/</span>Mjolnir<span class="pl-k">.</span>jl
] add https<span class="pl-k">:</span><span class="pl-k">//</span>github<span class="pl-k">.</span>com<span class="pl-k">/</span>MikeInnes<span class="pl-k">/</span>Poirot<span class="pl-k">.</span>jl</pre></div>
<p dir="auto">Poirot contains a series of experiments in probabilistic programming, both at the interface level and in terms of the abstract tracing used to implement it. Note that as an early prototype, anything not explicitly stated to work probably doesn't.</p>
<p dir="auto">As a modelling language, Poirot has two intertwined main goals:</p>
<ol dir="auto">
<li>Poirot's modelling language should abstract over a range of inference methods, from analytical methods, to factor graph representations, to monte carlo and ABC. Compiler analysis allows us to (automatically) choose an appropriate representation compatible with the best possible inference algorithm. There is no "static"/"dynamic" modelling distinction.</li>
<li>If you have no idea what any of (1) means, you should still be able to use Poirot productively, learning about more advanced concepts as you go.</li>
</ol>
<h2 dir="auto"><a id="user-content-probabilistic-modelling" class="anchor" aria-hidden="true" href="#probabilistic-modelling"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Probabilistic Modelling</h2>
<p dir="auto">It easy to write randomised programs in Julia. They can be as short as one line!</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; randn()
1.3664118530820202"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">randn</span>()
<span class="pl-c1">1.3664118530820202</span></pre></div>
<p dir="auto">Poirot adds a new construct to Julia, the <code>infer</code> block. Infer turns a stochastic program into a deterministic one: instead of getting back a single random value, you get a distribution of possible values.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using Poirot

julia&gt; infer() do
         randn()
       end
Normal{Float64}(μ=0.0, σ=1.0)

julia&gt; infer() do
         rand(Bool)
       end
Bernoulli{Rational{Int64}}(p=1//2)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Poirot

julia<span class="pl-k">&gt;</span> <span class="pl-c1">infer</span>() <span class="pl-k">do</span>
         <span class="pl-c1">randn</span>()
       <span class="pl-k">end</span>
<span class="pl-c1">Normal</span><span class="pl-c1">{Float64}</span>(μ<span class="pl-k">=</span><span class="pl-c1">0.0</span>, σ<span class="pl-k">=</span><span class="pl-c1">1.0</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">infer</span>() <span class="pl-k">do</span>
         <span class="pl-c1">rand</span>(Bool)
       <span class="pl-k">end</span>
<span class="pl-c1">Bernoulli</span><span class="pl-c1">{Rational{Int64}}</span>(p<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">//</span><span class="pl-c1">2</span>)</pre></div>
<p dir="auto">Of course, we know what those functions return already. What about something more complex? For example: what's the chance of two coins both being heads?</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; coin() = rand(Bool)
coin (generic function with 1 method)

julia&gt; coin() &amp; coin()
false

julia&gt; infer() do
         coin() &amp; coin()
       end
Bernoulli{Float64}(p=0.25)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-en">coin</span>() <span class="pl-k">=</span> <span class="pl-c1">rand</span>(Bool)
coin (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">coin</span>() <span class="pl-k">&amp;</span> <span class="pl-c1">coin</span>()
<span class="pl-c1">false</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">infer</span>() <span class="pl-k">do</span>
         <span class="pl-c1">coin</span>() <span class="pl-k">&amp;</span> <span class="pl-c1">coin</span>()
       <span class="pl-k">end</span>
<span class="pl-c1">Bernoulli</span><span class="pl-c1">{Float64}</span>(p<span class="pl-k">=</span><span class="pl-c1">0.25</span>)</pre></div>
<p dir="auto">The second construct Poirot adds is the <code>observe</code> function. This essentially behaves like an <code>assert</code>; you provide a condition, and if it's false, it errors out.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; begin
         a = coin()
         b = coin()
         observe(a | b)
         a &amp; b
       end
true

julia&gt; begin
         a = coin()
         b = coin()
         observe(a | b)
         a &amp; b
       end
ERROR: Poirot.ConditionError()"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">begin</span>
         a <span class="pl-k">=</span> <span class="pl-c1">coin</span>()
         b <span class="pl-k">=</span> <span class="pl-c1">coin</span>()
         <span class="pl-c1">observe</span>(a <span class="pl-k">|</span> b)
         a <span class="pl-k">&amp;</span> b
       <span class="pl-k">end</span>
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> <span class="pl-k">begin</span>
         a <span class="pl-k">=</span> <span class="pl-c1">coin</span>()
         b <span class="pl-k">=</span> <span class="pl-c1">coin</span>()
         <span class="pl-c1">observe</span>(a <span class="pl-k">|</span> b)
         a <span class="pl-k">&amp;</span> b
       <span class="pl-k">end</span>
ERROR<span class="pl-k">:</span> Poirot<span class="pl-k">.</span><span class="pl-c1">ConditionError</span>()</pre></div>
<p dir="auto">The key thing about <code>observe</code> is that it <em>changes what kinds of outputs the function produces</em>, since many cases now error instead of returning anything. In this case, we're effectively asking for the probability that two coins are heads <em>given</em> that at least one of them is (implied by <code>observe(a | b)</code>).</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; infer() do
         a = coin()
         b = coin()
         observe(a | b)
         a &amp; b
       end
Bernoulli{Float64}(p=0.3333333333333333)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">infer</span>() <span class="pl-k">do</span>
         a <span class="pl-k">=</span> <span class="pl-c1">coin</span>()
         b <span class="pl-k">=</span> <span class="pl-c1">coin</span>()
         <span class="pl-c1">observe</span>(a <span class="pl-k">|</span> b)
         a <span class="pl-k">&amp;</span> b
       <span class="pl-k">end</span>
<span class="pl-c1">Bernoulli</span><span class="pl-c1">{Float64}</span>(p<span class="pl-k">=</span><span class="pl-c1">0.3333333333333333</span>)</pre></div>
<p dir="auto">We can use this kind of probabilistic reasoning to solve all kinds of statistical problems, and it even subsumes regular logical inference. For example: If <code>a</code> or <code>b</code> is true, but <code>b</code> isn't true, <code>a</code> must be true (with 100% probability).</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; infer() do
         a = coin()
         b = coin()
         observe(a | b)
         observe(!b)
         a
       end
Singleton(true)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">infer</span>() <span class="pl-k">do</span>
         a <span class="pl-k">=</span> <span class="pl-c1">coin</span>()
         b <span class="pl-k">=</span> <span class="pl-c1">coin</span>()
         <span class="pl-c1">observe</span>(a <span class="pl-k">|</span> b)
         <span class="pl-c1">observe</span>(<span class="pl-k">!</span>b)
         a
       <span class="pl-k">end</span>
<span class="pl-c1">Singleton</span>(<span class="pl-c1">true</span>)</pre></div>
<p dir="auto">We can use this as a kind of statistical pocket calculator. For example: you took a test which is 99% accurate<sup>*</sup>, for a disease that affects one in one hundred thousand people. Given that the test returns positive for the disease, how likely is it that you have the disease?</p>
<p dir="auto">(*both sensitivity and specificity, for simplicity)</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; infer() do
         disease = rand(Bernoulli(1/100_000))
         test = rand(Bernoulli(0.99)) ? disease : !disease
         observe(test)
         disease
       end
Bernoulli{Float64}(p=0.0009890307498651321)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">infer</span>() <span class="pl-k">do</span>
         disease <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">Bernoulli</span>(<span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-c1">100_000</span>))
         test <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">Bernoulli</span>(<span class="pl-c1">0.99</span>)) <span class="pl-k">?</span> disease <span class="pl-k">:</span> <span class="pl-k">!</span>disease
         <span class="pl-c1">observe</span>(test)
         disease
       <span class="pl-k">end</span>
<span class="pl-c1">Bernoulli</span><span class="pl-c1">{Float64}</span>(p<span class="pl-k">=</span><span class="pl-c1">0.0009890307498651321</span>)</pre></div>
<p dir="auto">Surprisingly, very unlikely!</p>
<p dir="auto">This also covers more advanced models, such as a linear regression (hypothetical example, since HMC is not hooked up):</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="x, y = # ...
infer() do
  slope = rand(Normal(0, 1))
  intercept = rand(Normal(0, 1))
  ŷ = x .* slope .+ intercept .+ randn.()
  observe(y == ŷ)
  slope, intercept
end"><pre>x, y <span class="pl-k">=</span> <span class="pl-c"><span class="pl-c">#</span> ...</span>
<span class="pl-c1">infer</span>() <span class="pl-k">do</span>
  slope <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">Normal</span>(<span class="pl-c1">0</span>, <span class="pl-c1">1</span>))
  intercept <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">Normal</span>(<span class="pl-c1">0</span>, <span class="pl-c1">1</span>))
  ŷ <span class="pl-k">=</span> x <span class="pl-k">.*</span> slope <span class="pl-k">.+</span> intercept <span class="pl-k">.+</span> <span class="pl-c1">randn</span>.()
  <span class="pl-c1">observe</span>(y <span class="pl-k">==</span> ŷ)
  slope, intercept
<span class="pl-k">end</span></pre></div>
<p dir="auto">Larger and more complex models can easily be factored into functions and use data structures, and to separate modelling from inference. Inference can also be easily customised with calls like <code>infer(HMC(...)) do ...</code> or <code>infer(model, HMC(...))</code>.</p>
</article></div>