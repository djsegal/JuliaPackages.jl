<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-exprmanipulation" class="anchor" aria-hidden="true" href="#exprmanipulation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>ExprManipulation</h1>
<p><a href="https://travis-ci.com/onetonfoot/ExprManipulation.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/021a2c93d708b378a6bf7ee6eeae3c8863094bf7badbad6c5911f358f7757286/68747470733a2f2f7472617669732d63692e636f6d2f6f6e65746f6e666f6f742f457870724d616e6970756c6174696f6e2e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/onetonfoot/ExprManipulation.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/onetonfoot/ExprManipulation.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/94d0757f5b8f5b8aa2bacb2c699777257e941e66338ff9db3a5656a144db4bf6/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f6f6e65746f6e666f6f742f457870724d616e6970756c6174696f6e2e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/onetonfoot/ExprManipulation.jl/badge.svg?branch=master" style="max-width:100%;"></a></p>
<p>ExprManipulation provides tools for manipulating expressions based on the Expr syntax.</p>
<h1><a id="user-content-intro" class="anchor" aria-hidden="true" href="#intro"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Intro</h1>
<p>The API is small there are only 4 constructs <code>MExpr</code>, <code>Capture</code>, <code>Slurp</code> and <code>transform</code>.</p>
<h2><a id="user-content-equality" class="anchor" aria-hidden="true" href="#equality"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Equality</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using ExprManipulation
using Base.Meta: show_sexpr

expr = :(x + 1)
show_sexpr(expr)
# (:call, :+, :x, 1)
"><pre><span class="pl-k">using</span> ExprManipulation
<span class="pl-k">using</span> Base<span class="pl-k">.</span>Meta<span class="pl-k">:</span> show_sexpr

expr <span class="pl-k">=</span> :(x <span class="pl-k">+</span> <span class="pl-c1">1</span>)
<span class="pl-c1">show_sexpr</span>(expr)
<span class="pl-c"><span class="pl-c">#</span> (:call, :+, :x, 1)</span></pre></div>
<p>A MExpr can be used to test equality</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="m_expr = MExpr(:call, :+, Capture(:x), Capture(:n))
m_expr == expr
#true
"><pre>m_expr <span class="pl-k">=</span> <span class="pl-c1">MExpr</span>(<span class="pl-c1">:call</span>, :<span class="pl-k">+</span>, <span class="pl-c1">Capture</span>(<span class="pl-c1">:x</span>), <span class="pl-c1">Capture</span>(<span class="pl-c1">:n</span>))
m_expr <span class="pl-k">==</span> expr
<span class="pl-c"><span class="pl-c">#</span>true</span></pre></div>
<h2><a id="user-content-match" class="anchor" aria-hidden="true" href="#match"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Match</h2>
<p>You can extract the the captured arguments with <code>match</code>, if the expressions aren't equal <code>match</code> will return nothing</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="match(m_expr, expr)
#(x = :x, n = 1)
"><pre><span class="pl-c1">match</span>(m_expr, expr)
<span class="pl-c"><span class="pl-c">#</span>(x = :x, n = 1)</span></pre></div>
<p><code>Slurp</code> allows you to capture a variable number of arguments. It can be used anywhere in the expressions args but only a single <code>Slurp</code> per an <code>MExpr</code>.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="m_expr = MExpr(:tuple, Capture(:first_number), Slurp(:args), Capture(:last_number))
match(m_expr, :(1,2,3,4,5))
# (first_number = 1, args = Any[2, 3, 4], last_number = 5)
"><pre>m_expr <span class="pl-k">=</span> <span class="pl-c1">MExpr</span>(<span class="pl-c1">:tuple</span>, <span class="pl-c1">Capture</span>(<span class="pl-c1">:first_number</span>), <span class="pl-c1">Slurp</span>(<span class="pl-c1">:args</span>), <span class="pl-c1">Capture</span>(<span class="pl-c1">:last_number</span>))
<span class="pl-c1">match</span>(m_expr, :(<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>,<span class="pl-c1">4</span>,<span class="pl-c1">5</span>))
<span class="pl-c"><span class="pl-c">#</span> (first_number = 1, args = Any[2, 3, 4], last_number = 5)</span></pre></div>
<p>Both <code>Capture</code> and <code>Slurp</code> can take a function to test equality.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="head = Capture(:head) do arg
    arg in (:vect, :tuple)
end

slurp_numbers = Slurp(:numbers) do args::Array
    all(map(x -&gt; x isa Number, args))
end

vec_or_tuple = MExpr(head, slurp_numbers)

match(vec_or_tuple, :((1,2,3)))
# (head = :tuple, numbers = [1, 2, 3])

match(vec_or_tuple, :((1,&quot;2&quot;,3)))
# nothing
"><pre>head <span class="pl-k">=</span> <span class="pl-c1">Capture</span>(<span class="pl-c1">:head</span>) <span class="pl-k">do</span> arg
    arg <span class="pl-k">in</span> (<span class="pl-c1">:vect</span>, <span class="pl-c1">:tuple</span>)
<span class="pl-k">end</span>

slurp_numbers <span class="pl-k">=</span> <span class="pl-c1">Slurp</span>(<span class="pl-c1">:numbers</span>) <span class="pl-k">do</span> args<span class="pl-k">::</span><span class="pl-c1">Array</span>
    <span class="pl-c1">all</span>(<span class="pl-c1">map</span>(x <span class="pl-k">-&gt;</span> x <span class="pl-k">isa</span> Number, args))
<span class="pl-k">end</span>

vec_or_tuple <span class="pl-k">=</span> <span class="pl-c1">MExpr</span>(head, slurp_numbers)

<span class="pl-c1">match</span>(vec_or_tuple, :((<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>)))
<span class="pl-c"><span class="pl-c">#</span> (head = :tuple, numbers = [1, 2, 3])</span>

<span class="pl-c1">match</span>(vec_or_tuple, :((<span class="pl-c1">1</span>,<span class="pl-s"><span class="pl-pds">"</span>2<span class="pl-pds">"</span></span>,<span class="pl-c1">3</span>)))
<span class="pl-c"><span class="pl-c">#</span> nothing</span></pre></div>
<h2><a id="user-content-transform" class="anchor" aria-hidden="true" href="#transform"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Transform</h2>
<p>Transform can be used to create a new expression, it applies a function to each node in the Expr tree starting from the leaves. For example to replace all the numbers with 1.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="transform(input_expr) do node
    node isa Number ? 1 : node
end
# :(1 + (1 ^ 1) * 1)
"><pre><span class="pl-c1">transform</span>(input_expr) <span class="pl-k">do</span> node
    node <span class="pl-k">isa</span> Number <span class="pl-k">?</span> <span class="pl-c1">1</span> <span class="pl-k">:</span> node
<span class="pl-k">end</span>
<span class="pl-c"><span class="pl-c">#</span> :(1 + (1 ^ 1) * 1)</span></pre></div>
<h1><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Examples</h1>
<p>For more in-depth examples see the examples folder.</p>
<h1><a id="user-content-related-packages" class="anchor" aria-hidden="true" href="#related-packages"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Related Packages</h1>
<p>Other packages you may find usefull for handling Exprs</p>
<ul>
<li>ExprTools</li>
<li>MacroTools</li>
<li>MLStyle</li>
</ul>
</article></div>