<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-galgebrajl" class="anchor" aria-hidden="true" href="#galgebrajl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>GAlgebra.jl</h1>
<p dir="auto">Julia interface to <a href="https://github.com/pygae/galgebra">GAlgebra</a>, a symbolic Geometric Algebra/Calculus package for SymPy.</p>
<h2 dir="auto"><a id="user-content-development-status" class="anchor" aria-hidden="true" href="#development-status"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Development Status</h2>
<p dir="auto">Very early. But it already works and has many tests.</p>
<table>
<thead>
<tr>
<th align="center"><strong>Build Status</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><a target="_blank" rel="noopener noreferrer" href="https://github.com/pygae/GAlgebra.jl/workflows/CI/badge.svg"><img src="https://github.com/pygae/GAlgebra.jl/workflows/CI/badge.svg" alt="CI" style="max-width: 100%;"></a> <a href="https://codecov.io/gh/pygae/GAlgebra.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/178e8790332f0a13c6b5f5719f1c9fb5156ede9f73d938b9c1f86dc91074c888/68747470733a2f2f696d672e736869656c64732e696f2f636f6465636f762f632f6769746875622f70796761652f47416c67656272612e6a6c2e737667" alt="" data-canonical-src="https://img.shields.io/codecov/c/github/pygae/GAlgebra.jl.svg" style="max-width: 100%;"></a></td>
</tr>
</tbody>
</table>
<h2 dir="auto"><a id="user-content-getting-started" class="anchor" aria-hidden="true" href="#getting-started"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Getting Started</h2>
<p dir="auto">GAlgebra.jl itself doesn't depend on <a href="https://github.com/JuliaPy/SymPy.jl">SymPy.jl</a>, but is designed to work with it.</p>
<p dir="auto">After installing SymPy.jl and GAlgebra.jl (see below for instructions), you may experiment with GAlgebra.jl just like in the Python version of GAlgebra (though <a href="https://docs.julialang.org/en/v1/manual/noteworthy-differences/#Noteworthy-differences-from-Python-1" rel="nofollow">there're some syntax differences between Python and Julia</a> like <code>True</code>/<code>true</code>, <code>'</code>/<code>"</code> etc.).</p>
<p dir="auto">For example, you may start with:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="import SymPy: symbols, sympy, Sym
using GAlgebra

# In console, uncomment to enable colored printing with ANSI escape sequences 
# galgebra.printer.Eprint()
# In Jupyter, uncomment to enable LaTeX printing with MathJax
# galgebra.printer.Format()

(x, y, z) = xyz = symbols(&quot;x,y,z&quot;,real=true)
o3d = galgebra.ga.Ga(&quot;e&quot;, g=[1, 1, 1], coords=xyz)

u = o3d.mv(&quot;u&quot;, &quot;vector&quot;)
v = o3d.mv(&quot;v&quot;, &quot;vector&quot;)
A = o3d.mv(&quot;A&quot;, &quot;mv&quot;)
R = o3d.mv(&quot;R&quot;, &quot;spinor&quot;)
# Volume element
I = o3d.I()

# Wedge product: ∧ \wedge
v ∧ A
# Hestenes' inner product: ⋅ \cdot
v ⋅ A
# Left contraction: ⨼ \intprod
v ⨼ A
# Right contraction: ⨽ \intprodr
v ⨽ A
# Scalar product: ⊛ \circledast
# A ⊛ B = &lt;A B†&gt;
v ⊛ A
# Commutator product: ⊠ \boxtimes
# A⊠B = (AB-BA)/2
v ⊠ A
# Anti-commutator product: ⊙ \odot
# A⊙B = (AB+BA)/2
v ⊙ A

# Norm: norm(A) = A.norm() := ||A||
norm(v)

# Inverse: postfix ⁻¹ \^-\^1
# (A)⁻¹ = A^-1 = inv(A) = A.inv()
(R)⁻¹
R^-1
inv(R)

# Reversion: ~A = rev(A) = A.rev()
# A^† is usually used in literature
~A
rev(A)

# Dual: postfix '
# orthogonal complement, Λ^p -&gt; Λ^(n-p)
# note: Ga.dual_mode_value is default to &quot;I+&quot;, so A' = A * I
# change Ga.dual_mode_value to get a different definition
A'
dual(A)

# Grade involution: postfix ˣ \^x
# (A)ˣ = A[:*] = involute(A) := A+ - A- = A.even() - A.odd()
# A^* is usually used in literature
(A)ˣ
involute(A)

# Clifford conjugate: postfix ǂ \doublepipe
# (A)ǂ = conj(A) := ((A)^*)^†
(A)ǂ
conj(A)

# Projection: proj(B, A) = A.project_in_blade(B)
proj(u, v)

# Reflection: refl(B, A) = A.reflect_in_blade(B)
refl(u, v)

# Rotation: rot(itheta, A) = A.rotate_multivector(itheta)
# rotate the multivector A by the 2-blade itheta
rot(u ∧ v, A)

# Natural base exponential of x: e^x
exp(u ∧ v)

# Grade-i part: A[i] = A.grade(i) := &lt;A&gt;_i
A[2]

# Scalar (grade-0) part: scalar(A) = A.scalar() := &lt;A&gt; = &lt;A&gt;_0
# note: it returns a SymPy expression unlike A[0] which returns a Mv object
scalar(A)

# Even-grade part: A[:+] = (A)₊ = even(A) = A.even() := A+
A[:+]
even(A)

# Odd-grade part: A[:-] = (A)₋ = odd(A) = A.odd() := A-
A[:-]
odd(A)"><pre><span class="pl-k">import</span> SymPy<span class="pl-k">:</span> symbols, sympy, Sym
<span class="pl-k">using</span> GAlgebra

<span class="pl-c"><span class="pl-c">#</span> In console, uncomment to enable colored printing with ANSI escape sequences </span>
<span class="pl-c"><span class="pl-c">#</span> galgebra.printer.Eprint()</span>
<span class="pl-c"><span class="pl-c">#</span> In Jupyter, uncomment to enable LaTeX printing with MathJax</span>
<span class="pl-c"><span class="pl-c">#</span> galgebra.printer.Format()</span>

(x, y, z) <span class="pl-k">=</span> xyz <span class="pl-k">=</span> <span class="pl-c1">symbols</span>(<span class="pl-s"><span class="pl-pds">"</span>x,y,z<span class="pl-pds">"</span></span>,real<span class="pl-k">=</span><span class="pl-c1">true</span>)
o3d <span class="pl-k">=</span> galgebra<span class="pl-k">.</span>ga<span class="pl-k">.</span><span class="pl-c1">Ga</span>(<span class="pl-s"><span class="pl-pds">"</span>e<span class="pl-pds">"</span></span>, g<span class="pl-k">=</span>[<span class="pl-c1">1</span>, <span class="pl-c1">1</span>, <span class="pl-c1">1</span>], coords<span class="pl-k">=</span>xyz)

u <span class="pl-k">=</span> o3d<span class="pl-k">.</span><span class="pl-c1">mv</span>(<span class="pl-s"><span class="pl-pds">"</span>u<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>vector<span class="pl-pds">"</span></span>)
v <span class="pl-k">=</span> o3d<span class="pl-k">.</span><span class="pl-c1">mv</span>(<span class="pl-s"><span class="pl-pds">"</span>v<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>vector<span class="pl-pds">"</span></span>)
A <span class="pl-k">=</span> o3d<span class="pl-k">.</span><span class="pl-c1">mv</span>(<span class="pl-s"><span class="pl-pds">"</span>A<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>mv<span class="pl-pds">"</span></span>)
R <span class="pl-k">=</span> o3d<span class="pl-k">.</span><span class="pl-c1">mv</span>(<span class="pl-s"><span class="pl-pds">"</span>R<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>spinor<span class="pl-pds">"</span></span>)
<span class="pl-c"><span class="pl-c">#</span> Volume element</span>
I <span class="pl-k">=</span> o3d<span class="pl-k">.</span><span class="pl-c1">I</span>()

<span class="pl-c"><span class="pl-c">#</span> Wedge product: ∧ \wedge</span>
v ∧ A
<span class="pl-c"><span class="pl-c">#</span> Hestenes' inner product: ⋅ \cdot</span>
v <span class="pl-k">⋅</span> A
<span class="pl-c"><span class="pl-c">#</span> Left contraction: ⨼ \intprod</span>
v ⨼ A
<span class="pl-c"><span class="pl-c">#</span> Right contraction: ⨽ \intprodr</span>
v ⨽ A
<span class="pl-c"><span class="pl-c">#</span> Scalar product: ⊛ \circledast</span>
<span class="pl-c"><span class="pl-c">#</span> A ⊛ B = &lt;A B†&gt;</span>
v ⊛ A
<span class="pl-c"><span class="pl-c">#</span> Commutator product: ⊠ \boxtimes</span>
<span class="pl-c"><span class="pl-c">#</span> A⊠B = (AB-BA)/2</span>
v ⊠ A
<span class="pl-c"><span class="pl-c">#</span> Anti-commutator product: ⊙ \odot</span>
<span class="pl-c"><span class="pl-c">#</span> A⊙B = (AB+BA)/2</span>
v ⊙ A

<span class="pl-c"><span class="pl-c">#</span> Norm: norm(A) = A.norm() := ||A||</span>
<span class="pl-c1">norm</span>(v)

<span class="pl-c"><span class="pl-c">#</span> Inverse: postfix ⁻¹ \^-\^1</span>
<span class="pl-c"><span class="pl-c">#</span> (A)⁻¹ = A^-1 = inv(A) = A.inv()</span>
(R)⁻¹
R<span class="pl-k">^-</span><span class="pl-c1">1</span>
<span class="pl-c1">inv</span>(R)

<span class="pl-c"><span class="pl-c">#</span> Reversion: ~A = rev(A) = A.rev()</span>
<span class="pl-c"><span class="pl-c">#</span> A^† is usually used in literature</span>
<span class="pl-k">~</span>A
<span class="pl-c1">rev</span>(A)

<span class="pl-c"><span class="pl-c">#</span> Dual: postfix '</span>
<span class="pl-c"><span class="pl-c">#</span> orthogonal complement, Λ^p -&gt; Λ^(n-p)</span>
<span class="pl-c"><span class="pl-c">#</span> note: Ga.dual_mode_value is default to "I+", so A' = A * I</span>
<span class="pl-c"><span class="pl-c">#</span> change Ga.dual_mode_value to get a different definition</span>
A<span class="pl-k">'</span>
<span class="pl-c1">dual</span>(A)

<span class="pl-c"><span class="pl-c">#</span> Grade involution: postfix ˣ \^x</span>
<span class="pl-c"><span class="pl-c">#</span> (A)ˣ = A[:*] = involute(A) := A+ - A- = A.even() - A.odd()</span>
<span class="pl-c"><span class="pl-c">#</span> A^* is usually used in literature</span>
(A)ˣ
<span class="pl-c1">involute</span>(A)

<span class="pl-c"><span class="pl-c">#</span> Clifford conjugate: postfix ǂ \doublepipe</span>
<span class="pl-c"><span class="pl-c">#</span> (A)ǂ = conj(A) := ((A)^*)^†</span>
(A)ǂ
<span class="pl-c1">conj</span>(A)

<span class="pl-c"><span class="pl-c">#</span> Projection: proj(B, A) = A.project_in_blade(B)</span>
<span class="pl-c1">proj</span>(u, v)

<span class="pl-c"><span class="pl-c">#</span> Reflection: refl(B, A) = A.reflect_in_blade(B)</span>
<span class="pl-c1">refl</span>(u, v)

<span class="pl-c"><span class="pl-c">#</span> Rotation: rot(itheta, A) = A.rotate_multivector(itheta)</span>
<span class="pl-c"><span class="pl-c">#</span> rotate the multivector A by the 2-blade itheta</span>
<span class="pl-c1">rot</span>(u ∧ v, A)

<span class="pl-c"><span class="pl-c">#</span> Natural base exponential of x: e^x</span>
<span class="pl-c1">exp</span>(u ∧ v)

<span class="pl-c"><span class="pl-c">#</span> Grade-i part: A[i] = A.grade(i) := &lt;A&gt;_i</span>
A[<span class="pl-c1">2</span>]

<span class="pl-c"><span class="pl-c">#</span> Scalar (grade-0) part: scalar(A) = A.scalar() := &lt;A&gt; = &lt;A&gt;_0</span>
<span class="pl-c"><span class="pl-c">#</span> note: it returns a SymPy expression unlike A[0] which returns a Mv object</span>
<span class="pl-c1">scalar</span>(A)

<span class="pl-c"><span class="pl-c">#</span> Even-grade part: A[:+] = (A)₊ = even(A) = A.even() := A+</span>
A[:<span class="pl-k">+</span>]
<span class="pl-c1">even</span>(A)

<span class="pl-c"><span class="pl-c">#</span> Odd-grade part: A[:-] = (A)₋ = odd(A) = A.odd() := A-</span>
A[:<span class="pl-k">-</span>]
<span class="pl-c1">odd</span>(A)</pre></div>
<p dir="auto">Note: enter unicode symbols like <code>∧</code> with corresponding LaTeX commands like <code>\wedge</code> by <a href="https://pkg.julialang.org/docs/julia/THl1k/1.1.0/manual/unicode-input.html" rel="nofollow">Tab completion</a> which are provided in the comments.</p>
<p dir="auto">So far only <code>galgebra.ga.Ga</code> and <code>galgebra.mv.Mv</code> have been verified to work in Julia, see <a href="https://github.com/pygae/GAlgebra.jl/tree/master/test/runtests.jl">tests</a>. The tests verified many identities in Linear Algebra and Geometric Algebra.</p>
<p dir="auto">See <a href="https://github.com/pygae/galgebra/tree/master/examples">examples of GAlgebra</a> for more examples in Python. With some small changes, they can be ported to Julia.</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">The package can be installed with the Julia package manager. From the Julia REPL, type <code>]</code> to enter the <strong>Pkg REPL mode</strong> (you'll see a prompt like <code>(v1.1) pkg&gt;</code>) and run:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="dev https://github.com/pygae/GAlgebra.jl.git"><pre class="notranslate"><code>dev https://github.com/pygae/GAlgebra.jl.git
</code></pre></div>
<p dir="auto">The installation process will take a while, because it will install <a href="https://github.com/JuliaPy/PyCall.jl">PyCall.jl</a> and its dependencies and it will also use <code>pip</code> to install <a href="https://github.com/pygae/galgebra">GAlgebra</a> if you haven't. If you wish to use a version other than the latest released version of GAlgebra that will be installed by <a href="deps/build.jl">deps/build.jl</a>, you can install that via pip before/after the installation of <code>GAlgebra.jl</code>, e.g. <code>pip install -e &lt;your local path to GAlgebra&gt;</code> or <code>pip install https://github.com/pygae/galgebra/archive/master.zip</code>.</p>
<p dir="auto">Now you may run GAlgebra.jl tests in Julia <strong>Pkg REPL mode</strong>:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="test GAlgebra"><pre class="notranslate"><code>test GAlgebra
</code></pre></div>
<p dir="auto">At the first time it will take a while, because SymPy.jl is specified as a test dependency so it'll be installed.</p>
<p dir="auto">Then you'll see something like:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="   Testing GAlgebra
 Resolving package versions...
Test Summary: | Pass  Broken  Total
GAlgebra.jl   | 1289       1   1290
   Testing GAlgebra tests passed"><pre class="notranslate"><code>   Testing GAlgebra
 Resolving package versions...
Test Summary: | Pass  Broken  Total
GAlgebra.jl   | 1289       1   1290
   Testing GAlgebra tests passed
</code></pre></div>
<p dir="auto">Hint: To get back to the Julia REPL please press backspace, see <a href="https://docs.julialang.org/en/v1/stdlib/Pkg/index.html" rel="nofollow">Pkg doc</a> to learn more.</p>
</article></div>