<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-cryptominisat" class="anchor" aria-hidden="true" href="#cryptominisat"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>CryptoMiniSat</h1>
<p dir="auto">This is a user interface, in Julia, to the <a href="https://github.com/msoos/cryptominisat">CryptoMiniSat</a> SAT solver.</p>
<p dir="auto">It exposes all the functions of the C interface, in the same syntax (cmsat_new, etc.), and provides higher-level interfaces:</p>
<ul dir="auto">
<li>the same functions as in the C interface, without <code>cmsat_</code>, accept 1-based variables of any integer type (rather than the 0-based UInt32)</li>
<li>a high-level <code>solve(clauses; ...)</code> function that accepts a vector of clauses, each a vector of terms represented as integers (negative for negated terms) for one-go solving, as well as an iterator <code>itersolve(clauses; ...)</code></li>
<li>a higher-level <code>solve(clauses; ...)</code> in which the terms of the clauses are <code>Lit(x)</code>, <code>NotLit(x)</code> or generally <code>Lit(x,negated::Bool)</code> for usual clauses, and <code>x</code> may be of any type; or the terms are of the form <code>XorLit(x)</code> and <code>XNorLit(x)</code> for XOR-clauses, in which the number of non-satisfied terms should have the same parity as the number of XNorLit terms.</li>
</ul>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using CryptoMiniSat
julia&gt; # simple clauses
julia&gt; cnf = [[1, -5, 4], [-1, 5, 3, 4], [-3, -4]];
julia&gt; solve(cnf)
5-element Array{Int64,1}:
 -1
 -2
 -3
 -4
 -5
julia&gt; # coffee with cream, tea with milk
julia&gt; cnf = [[XorLit(:coffee),XorLit(:tea)],[NotLit(:coffee),Lit(:cream)],[NotLit(:tea),Lit(:milk)]];
julia&gt; collect(itersolve(cnf))
4-element Vector{Any}:
 Dict{Symbol, Bool}(:cream =&gt; 0, :milk =&gt; 1, :tea =&gt; 1, :coffee =&gt; 0)
 Dict{Symbol, Bool}(:cream =&gt; 1, :milk =&gt; 1, :tea =&gt; 1, :coffee =&gt; 0)
 Dict{Symbol, Bool}(:cream =&gt; 1, :milk =&gt; 1, :tea =&gt; 0, :coffee =&gt; 1)
 Dict{Symbol, Bool}(:cream =&gt; 1, :milk =&gt; 0, :tea =&gt; 0, :coffee =&gt; 1)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> CryptoMiniSat
julia<span class="pl-k">&gt;</span> <span class="pl-c"><span class="pl-c">#</span> simple clauses</span>
julia<span class="pl-k">&gt;</span> cnf <span class="pl-k">=</span> [[<span class="pl-c1">1</span>, <span class="pl-k">-</span><span class="pl-c1">5</span>, <span class="pl-c1">4</span>], [<span class="pl-k">-</span><span class="pl-c1">1</span>, <span class="pl-c1">5</span>, <span class="pl-c1">3</span>, <span class="pl-c1">4</span>], [<span class="pl-k">-</span><span class="pl-c1">3</span>, <span class="pl-k">-</span><span class="pl-c1">4</span>]];
julia<span class="pl-k">&gt;</span> <span class="pl-c1">solve</span>(cnf)
<span class="pl-c1">5</span><span class="pl-k">-</span>element Array{Int64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-k">-</span><span class="pl-c1">1</span>
 <span class="pl-k">-</span><span class="pl-c1">2</span>
 <span class="pl-k">-</span><span class="pl-c1">3</span>
 <span class="pl-k">-</span><span class="pl-c1">4</span>
 <span class="pl-k">-</span><span class="pl-c1">5</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c"><span class="pl-c">#</span> coffee with cream, tea with milk</span>
julia<span class="pl-k">&gt;</span> cnf <span class="pl-k">=</span> [[<span class="pl-c1">XorLit</span>(<span class="pl-c1">:coffee</span>),<span class="pl-c1">XorLit</span>(<span class="pl-c1">:tea</span>)],[<span class="pl-c1">NotLit</span>(<span class="pl-c1">:coffee</span>),<span class="pl-c1">Lit</span>(<span class="pl-c1">:cream</span>)],[<span class="pl-c1">NotLit</span>(<span class="pl-c1">:tea</span>),<span class="pl-c1">Lit</span>(<span class="pl-c1">:milk</span>)]];
julia<span class="pl-k">&gt;</span> <span class="pl-c1">collect</span>(<span class="pl-c1">itersolve</span>(cnf))
<span class="pl-c1">4</span><span class="pl-k">-</span>element Vector{Any}<span class="pl-k">:</span>
 <span class="pl-c1">Dict</span><span class="pl-c1">{Symbol, Bool}</span>(<span class="pl-c1">:cream</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">0</span>, <span class="pl-c1">:milk</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1</span>, <span class="pl-c1">:tea</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1</span>, <span class="pl-c1">:coffee</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">0</span>)
 <span class="pl-c1">Dict</span><span class="pl-c1">{Symbol, Bool}</span>(<span class="pl-c1">:cream</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1</span>, <span class="pl-c1">:milk</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1</span>, <span class="pl-c1">:tea</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1</span>, <span class="pl-c1">:coffee</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">0</span>)
 <span class="pl-c1">Dict</span><span class="pl-c1">{Symbol, Bool}</span>(<span class="pl-c1">:cream</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1</span>, <span class="pl-c1">:milk</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1</span>, <span class="pl-c1">:tea</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">0</span>, <span class="pl-c1">:coffee</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1</span>)
 <span class="pl-c1">Dict</span><span class="pl-c1">{Symbol, Bool}</span>(<span class="pl-c1">:cream</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1</span>, <span class="pl-c1">:milk</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">0</span>, <span class="pl-c1">:tea</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">0</span>, <span class="pl-c1">:coffee</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1</span>)</pre></div>
</article></div>