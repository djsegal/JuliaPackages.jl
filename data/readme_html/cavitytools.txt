<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-cavitytools" class="anchor" aria-hidden="true" href="#cavitytools"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>CavityTools</h1>
<p dir="auto"><a href="https://codecov.io/gh/abraunst/CavityTools.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/b2e880f93ce8506224e0c7246963cfd24e4712ae023a48fb0595b6cd0f32ff80/68747470733a2f2f636f6465636f762e696f2f67682f61627261756e73742f436176697479546f6f6c732e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/abraunst/CavityTools.jl/branch/main/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">This small package contains:</p>
<ul dir="auto">
<li>
<p dir="auto"><code>cavity!</code> and <code>cavity</code>: Functions to compute the <code>N</code> all-but-one operations between <code>N</code> elements in time <code>O(N)</code>. The operation is arbitrary and needs only to be associative. This is equivalent to computing <code>[reduce(op, (source[j] for j in eachindex(source) if i != j); init) for i in eachindex(source)]</code> which however would need <code>N*(N-1)</code> evaluations of <code>op</code>.
If <code>op</code> is commutative with exact inverse <code>invop</code>, you could obtain the same result of <code>cavity(source, op, init)</code>, also in time <code>O(N)</code>, with <code>full=reduce(op, source; init); [op(invop(x), full) for x in source]</code>.</p>
</li>
<li>
<p dir="auto"><code>Accumulator</code>: A data structure keeping a live-updatable <code>cumsum</code>. Updating or retrieving one element costs <code>O(log(N))</code>, computing the total sum costs <code>O(1)</code>. <code>searchsortedfirst(a::Accumulator, v)</code> is also implemented, taking also <code>O(log(N))</code> time.</p>
</li>
<li>
<p dir="auto"><code>ExponentialQueue</code>: <code>Accumulator</code> plus index tracking, intended for sampling in a Gillespie-like scheme. Indices are in <code>1:N</code>.</p>
</li>
</ul>
</article></div>