<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-multimodalmusig" class="anchor" aria-hidden="true" href="#multimodalmusig"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>MultiModalMuSig</h1>
<p><a href="https://travis-ci.com/shahcompbio/MultiModalMuSig.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/f65c534d5f2a6ed684c7ef89f8e8fbad083722f6/68747470733a2f2f7472617669732d63692e636f6d2f73686168636f6d7062696f2f4d756c74694d6f64616c4d755369672e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/shahcompbio/MultiModalMuSig.jl.svg?branch=master" style="max-width:100%;"></a> <a href="https://coveralls.io/github/shahcompbio/MultiModalMuSig.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/ae7b1737f609dec91a4ceba4edb938814d36662b/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f73686168636f6d7062696f2f4d756c74694d6f64616c4d755369672e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/shahcompbio/MultiModalMuSig.jl/badge.svg?branch=master" style="max-width:100%;"></a> <a href="http://codecov.io/github/shahcompbio/MultiModalMuSig.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/b3ab8b01f98937ecd71bbed945fc74a0813de10b/687474703a2f2f636f6465636f762e696f2f6769746875622f73686168636f6d7062696f2f4d756c74694d6f64616c4d755369672e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/shahcompbio/MultiModalMuSig.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
<p>A Julia package implementing several topic models used for mutation signature estimation.</p>
<p>The Multi-modal correlated topic model (MMCTM) takes an array of arrays of matrices, where the first column of each matrix is a mutation type index, and the second column is the mutation count for a particular sample.</p>
<p>The following example shows how to perform inference using the MMCTM on SNV and SV counts:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> MultiModalMuSig
<span class="pl-k">using</span> CSV
<span class="pl-k">using</span> DataFrames
<span class="pl-k">using</span> VegaLite
<span class="pl-k">using</span> Random

Random<span class="pl-k">.</span><span class="pl-c1">seed!</span>(<span class="pl-c1">42</span>)

snv_counts <span class="pl-k">=</span> CSV<span class="pl-k">.</span><span class="pl-c1">read</span>(<span class="pl-s"><span class="pl-pds">"</span>data/brca-eu_snv_counts.tsv<span class="pl-pds">"</span></span>, delim<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">'</span><span class="pl-cce">\t</span><span class="pl-pds">'</span></span>)
sv_counts <span class="pl-k">=</span> CSV<span class="pl-k">.</span><span class="pl-c1">read</span>(<span class="pl-s"><span class="pl-pds">"</span>data/brca-eu_sv_counts.tsv<span class="pl-pds">"</span></span>, delim<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">'</span><span class="pl-cce">\t</span><span class="pl-pds">'</span></span>)

X <span class="pl-k">=</span> <span class="pl-c1">format_counts_mmctm</span>(snv_counts, sv_counts)
model <span class="pl-k">=</span> <span class="pl-c1">MMCTM</span>([<span class="pl-c1">7</span>, <span class="pl-c1">7</span>], [<span class="pl-c1">0.1</span>, <span class="pl-c1">0.1</span>], X)
<span class="pl-c1">fit!</span>(model, tol<span class="pl-k">=</span><span class="pl-c1">1e-5</span>)

snv_signatures <span class="pl-k">=</span> <span class="pl-c1">DataFrame</span>(<span class="pl-c1">hcat</span>(model<span class="pl-k">.</span>ϕ[<span class="pl-c1">1</span>]<span class="pl-k">.</span><span class="pl-k">..</span>))
sv_signatures <span class="pl-k">=</span> <span class="pl-c1">DataFrame</span>(<span class="pl-c1">hcat</span>(model<span class="pl-k">.</span>ϕ[<span class="pl-c1">2</span>]<span class="pl-k">.</span><span class="pl-k">..</span>))

snv_signatures[<span class="pl-c1">:term</span>] <span class="pl-k">=</span> snv_counts[<span class="pl-c1">:term</span>]
snv_signatures <span class="pl-k">=</span> <span class="pl-c1">melt</span>(
    snv_signatures, <span class="pl-c1">:term</span>, variable_name<span class="pl-k">=</span><span class="pl-c1">:signature</span>, value_name<span class="pl-k">=</span><span class="pl-c1">:probability</span>
)
snv_signatures <span class="pl-k">|&gt;</span> <span class="pl-c1">@vlplot</span>(
    <span class="pl-c1">:bar</span>, x<span class="pl-k">=</span>{<span class="pl-c1">:term</span>, sort<span class="pl-k">=</span><span class="pl-c1">:null</span>}, y<span class="pl-k">=</span><span class="pl-c1">:probability</span>, row<span class="pl-k">=</span><span class="pl-c1">:signature</span>,
    resolve<span class="pl-k">=</span>{scale<span class="pl-k">=</span>{y<span class="pl-k">=</span><span class="pl-c1">:independent</span>}}
)</pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="https://user-images.githubusercontent.com/381464/47934375-8a8cec80-dead-11e8-8cfe-fbde1911ddc1.png"><img src="https://user-images.githubusercontent.com/381464/47934375-8a8cec80-dead-11e8-8cfe-fbde1911ddc1.png" alt="snv_signatures" style="max-width:100%;"></a></p>
<p>This code runs the MMCTM for 7 SNV and 7 SV signatures, with signature hyperparameters set to 0.1. Since these types of models can get stuck in poor local optima, it's a good idea to fit many models and pick the best one.</p>
<p>Sample-signature probabilities can be extracted like so:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span> sample 3, SNV signature probabilities (modality 1)</span>
model<span class="pl-k">.</span>props[<span class="pl-c1">3</span>][<span class="pl-c1">1</span>]
<span class="pl-c"><span class="pl-c">#</span> SV signature probabilities (modality 2)</span>
model<span class="pl-k">.</span>props[<span class="pl-c1">3</span>][<span class="pl-c1">2</span>]

<span class="pl-c"><span class="pl-c">#</span> SNV probabilities for all samples</span>
snv_props <span class="pl-k">=</span> <span class="pl-c1">hcat</span>(
	[model<span class="pl-k">.</span>props[i][<span class="pl-c1">1</span>] <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">length</span>(model<span class="pl-k">.</span>props)]<span class="pl-k">.</span><span class="pl-k">..</span>
)</pre></div>
<p>The MMCTM can be run on multiple modalities, <em>e.g.</em></p>
<div class="highlight highlight-source-julia"><pre>X <span class="pl-k">=</span> <span class="pl-c1">format_counts_mmctm</span>(snv_counts, sv_counts, indel_counts)
model <span class="pl-k">=</span> <span class="pl-c1">MMCTM</span>([<span class="pl-c1">7</span>, <span class="pl-c1">7</span>, <span class="pl-c1">5</span>], [<span class="pl-c1">0.1</span>, <span class="pl-c1">0.1</span>, <span class="pl-c1">0.1</span>], X)</pre></div>
<p>The <code>DataFrame</code> inputs to <code>format_counts_mmctm</code> have an optional <code>term</code> column, and further columns for each sample.</p>
<p>To run the CTM instead, just run the MMCTM with a single modality:</p>
<div class="highlight highlight-source-julia"><pre>X <span class="pl-k">=</span> <span class="pl-c1">format_counts_ctm</span>(snv_counts)
model <span class="pl-k">=</span> <span class="pl-c1">MMCTM</span>([<span class="pl-c1">7</span>], [<span class="pl-c1">0.1</span>], X)
<span class="pl-c1">fit!</span>(model, tol<span class="pl-k">=</span><span class="pl-c1">1e-5</span>)</pre></div>
<p>The LDA implementation can be run like so:</p>
<div class="highlight highlight-source-julia"><pre>X <span class="pl-k">=</span> <span class="pl-c1">format_counts_lda</span>(snv_counts)
model <span class="pl-k">=</span> <span class="pl-c1">LDA</span>(<span class="pl-c1">7</span>, <span class="pl-c1">0.1</span>, <span class="pl-c1">0.1</span>, X)
<span class="pl-c1">fit!</span>(model, tol<span class="pl-k">=</span><span class="pl-c1">1e-5</span>)</pre></div>
<p>In the above code, both the sample-signature and signature-term hyperparameters have been set to 0.1, respectively. After fitting LDA, signatures can be found in <code>model.β</code>, and signature probabilities can be found in <code>model.θ</code>.</p>
</article></div>