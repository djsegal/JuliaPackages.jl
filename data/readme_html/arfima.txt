<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-arfimajl" class="anchor" aria-hidden="true" href="#arfimajl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>ARFIMA.jl</h1>
<p dir="auto">This Julia package simulates stochastic timeseries that follow the ARFIMA process, or any of its simplifications: ARIMA/ARMA/AR/MA/IMA.</p>
<p dir="auto">The code base is also a proof-of-concept of using Julia's multiple dispatch.</p>
<p dir="auto">This package is unregistered (because of the absence of a <code>test</code> suite). To install do:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; ] add https://github.com/JuliaDynamics/ARFIMA.jl

julia&gt; using ARFIMA"><pre class="notranslate"><code>julia&gt; ] add https://github.com/JuliaDynamics/ARFIMA.jl

julia&gt; using ARFIMA
</code></pre></div>
<p dir="auto">see the examples below for usage.</p>
<h2 dir="auto"><a id="user-content-arfima-and-its-variants" class="anchor" aria-hidden="true" href="#arfima-and-its-variants"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>ARFIMA and its variants</h2>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="ARFIMA.png"><img src="ARFIMA.png" alt="the ARFIMA process" style="max-width: 100%;"></a></p>
<p dir="auto">The ARFIMA process is composed out of several components and each can be included or not included in the process, resulting in simplified versions like ARMA.</p>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<p dir="auto">This package exports a single function <code>arfima</code>. This function  generates the timeseries <code>Xₜ</code> using Julia's multiple dispatch.</p>
<p dir="auto">Here is its documentation string:</p>
<hr>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="arfima([rng,] N, σ, d, φ=nothing, θ=nothing) -&gt; Xₜ"><pre class="notranslate"><code>arfima([rng,] N, σ, d, φ=nothing, θ=nothing) -&gt; Xₜ
</code></pre></div>
<p dir="auto">Create a stochastic timeseries of length <code>N</code> that follows the ARFIMA
process, or any of its subclasses, like e.g. ARMA, AR, ARIMA, etc., see below.
<code>σ</code> is the standard deviation of the white noise used to generate the
process. The first optional argument is an <code>AbstractRNG</code>, a random
number generator to establish reproducibility.</p>
<p dir="auto">Julia's multiple dispatch system decides which will be the simulated variant
of the process, based on the types of <code>d, φ, θ</code>.</p>
<h3 dir="auto"><a id="user-content-variants" class="anchor" aria-hidden="true" href="#variants"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Variants</h3>
<p dir="auto">The ARFIMA parameters are (p, d, q) with <code>p = length(φ)</code> and <code>q = length(θ)</code>,
with <code>p, q</code> describing the autoregressive or moving average "orders" while
<code>d</code> is the differencing "order".
Both <code>φ, θ</code> can be of two types: <code>Nothing</code> or <code>SVector</code>. If they are <code>Nothing</code>
the corresponding components of autoregressive (φ) and moving average (θ)
are not done. Otherwise, the static vectors simply contain their values.</p>
<p dir="auto">If <code>d</code> is <code>Nothing</code>, then the differencing (integrated)
part is not done and the process is in fact AR/MA/ARMA.
If <code>d</code> is of type <code>Int</code>, then the simulated process is in fact ARIMA,
while if <code>d</code> is <code>AbstractFloat</code> then the process is AR<strong>F</strong>IMA.
In the last case it must hold that <code>d ∈ (-0.5, 0.5)</code>.
If all <code>d, φ, θ</code> are <code>nothing</code>, white noise is returned.</p>
<p dir="auto">The function <code>arma(N, σ, φ, θ = nothing)</code> is provided for convienience.</p>
<h3 dir="auto"><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Examples</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="N, σ = 10_000, 0.5
X = arfima(N, σ, 0.4)                             # ARFIMA(0,d,0)
X = arfima(N, σ, 0.4, SVector(0.8, 1.2))          # ARFIMA(2,d,0)
X = arfima(N, σ, 1, SVector(0.8))                 # ARIMA(1,d,0)
X = arfima(N, σ, 1, SVector(0.8), SVector(1.2))   # ARIMA(1,d,1)
X = arfima(N, σ, 0.4, SVector(0.8), SVector(1.2)) # ARFIMA(1,d,1)
X = arfima(N, σ, nothing, SVector(0.8))           # ARFIMA(1,0,0) ≡ AR(1)"><pre>N, σ <span class="pl-k">=</span> <span class="pl-c1">10_000</span>, <span class="pl-c1">0.5</span>
X <span class="pl-k">=</span> <span class="pl-c1">arfima</span>(N, σ, <span class="pl-c1">0.4</span>)                             <span class="pl-c"><span class="pl-c">#</span> ARFIMA(0,d,0)</span>
X <span class="pl-k">=</span> <span class="pl-c1">arfima</span>(N, σ, <span class="pl-c1">0.4</span>, <span class="pl-c1">SVector</span>(<span class="pl-c1">0.8</span>, <span class="pl-c1">1.2</span>))          <span class="pl-c"><span class="pl-c">#</span> ARFIMA(2,d,0)</span>
X <span class="pl-k">=</span> <span class="pl-c1">arfima</span>(N, σ, <span class="pl-c1">1</span>, <span class="pl-c1">SVector</span>(<span class="pl-c1">0.8</span>))                 <span class="pl-c"><span class="pl-c">#</span> ARIMA(1,d,0)</span>
X <span class="pl-k">=</span> <span class="pl-c1">arfima</span>(N, σ, <span class="pl-c1">1</span>, <span class="pl-c1">SVector</span>(<span class="pl-c1">0.8</span>), <span class="pl-c1">SVector</span>(<span class="pl-c1">1.2</span>))   <span class="pl-c"><span class="pl-c">#</span> ARIMA(1,d,1)</span>
X <span class="pl-k">=</span> <span class="pl-c1">arfima</span>(N, σ, <span class="pl-c1">0.4</span>, <span class="pl-c1">SVector</span>(<span class="pl-c1">0.8</span>), <span class="pl-c1">SVector</span>(<span class="pl-c1">1.2</span>)) <span class="pl-c"><span class="pl-c">#</span> ARFIMA(1,d,1)</span>
X <span class="pl-k">=</span> <span class="pl-c1">arfima</span>(N, σ, <span class="pl-c1">nothing</span>, <span class="pl-c1">SVector</span>(<span class="pl-c1">0.8</span>))           <span class="pl-c"><span class="pl-c">#</span> ARFIMA(1,0,0) ≡ AR(1)</span></pre></div>
<hr>
<h2 dir="auto"><a id="user-content-benchmarks" class="anchor" aria-hidden="true" href="#benchmarks"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Benchmarks</h2>
<p dir="auto">Some benchmark code is included in <code>src/benchmarks.jl</code>. These results come
from running the code on a laptop with Windows 10, Julia 1.2.0, Intel i5-6200U @2.30GHz CPU, 8192MB RAM. Results that need microseconds to run are not timed accurately.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="Process: ARFIMA(0, d=0.4, 0)
For N = 10000, 0.2449999 seconds
For N = 50000, 1.467 seconds
For N = 100000, 7.5779998 seconds

Process: ARIMA(0, d=2, 0)
For N = 10000, 0.0 seconds
For N = 50000, 0.0009999 seconds
For N = 100000, 0.0020001 seconds

Process: ARFIMA(φ=0.8, d=0.4, 0)
For N = 10000, 0.267 seconds
For N = 50000, 1.388 seconds
For N = 100000, 7.4589999 seconds

Process: ARMA(φ=0.8, θ=2.0)
For N = 10000, 0.0 seconds
For N = 50000, 0.0009999 seconds
For N = 100000, 0.003 seconds"><pre class="notranslate"><code>Process: ARFIMA(0, d=0.4, 0)
For N = 10000, 0.2449999 seconds
For N = 50000, 1.467 seconds
For N = 100000, 7.5779998 seconds

Process: ARIMA(0, d=2, 0)
For N = 10000, 0.0 seconds
For N = 50000, 0.0009999 seconds
For N = 100000, 0.0020001 seconds

Process: ARFIMA(φ=0.8, d=0.4, 0)
For N = 10000, 0.267 seconds
For N = 50000, 1.388 seconds
For N = 100000, 7.4589999 seconds

Process: ARMA(φ=0.8, θ=2.0)
For N = 10000, 0.0 seconds
For N = 50000, 0.0009999 seconds
For N = 100000, 0.003 seconds
</code></pre></div>
<hr>
<h2 dir="auto"><a id="user-content-acknowledgements" class="anchor" aria-hidden="true" href="#acknowledgements"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Acknowledgements</h2>
<p dir="auto"><em>Thanks to Katjia Polotzek for providing an initial code base for ARFIMA and to Philipp Meyer for validation of parts of the code</em></p>
</article></div>