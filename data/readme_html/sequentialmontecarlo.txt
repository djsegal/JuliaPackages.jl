<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-sequentialmontecarlojl" class="anchor" aria-hidden="true" href="#sequentialmontecarlojl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>SequentialMonteCarlo.jl</h1>

<p dir="auto"><a href="https://github.com/awllee/SequentialMonteCarlo.jl/actions"><img src="https://github.com/awllee/SequentialMonteCarlo.jl/workflows/CI/badge.svg" alt="CI" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/awllee/SequentialMonteCarlo.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/96905626c9714116b789569c47bdd02dc4d62d763de0e00b9d5da96816989dff/68747470733a2f2f636f6465636f762e696f2f67682f61776c6c65652f53657175656e7469616c4d6f6e74654361726c6f2e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/awllee/SequentialMonteCarlo.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>

<p dir="auto">This package provides a light interface to a serial and multi-threaded implementation of the Sequential Monte Carlo (SMC) algorithm. SMC is a random algorithm for approximate numerical integration and/or sampling.</p>
<p dir="auto">The <a href="https://awllee.github.io/SequentialMonteCarlo.jl/latest" rel="nofollow">documentation</a> and some <a href="https://github.com/awllee/SMCExamples.jl">examples</a> may be helpful for getting started.</p>
<h2 dir="auto"><a id="user-content-getting-the-package" class="anchor" aria-hidden="true" href="#getting-the-package"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Getting the package</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Pkg.add(&quot;SequentialMonteCarlo&quot;)"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>SequentialMonteCarlo<span class="pl-pds">"</span></span>)</pre></div>
<h2 dir="auto"><a id="user-content-quick-start" class="anchor" aria-hidden="true" href="#quick-start"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Quick start:</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="## Load the package

using SequentialMonteCarlo

## Define a particle consisting of one Float64

mutable struct Float64Particle
  x::Float64
  Float64Particle() = new()
end

## The initial distribution is a standard normal, and the Markov transitions
## define a non-stationary Markov chain, since 1.5 &gt; 1.

function M!(newParticle::Float64Particle, rng, p::Int64,
  particle::Float64Particle, ::Nothing)
  if p == 1
    newParticle.x = randn(rng)
  else
    newParticle.x = 1.5 * particle.x + 0.5 * randn(rng)
  end
end

## The log potential function is x -&gt; -x^2 so the potential function is
## x -&gt; exp(-x^2).

function lG(p::Int64, particle::Float64Particle, ::Nothing)
  return - particle.x * particle.x
end

## This is a pedagogical example: one can deduce that eta_p is N(0, 1) for all
## p and \hat{eta}_p is N(0, 1/3) for all p. Essentially, the potential
## functions stop the Markov chain from exploding by favouring values
## closer to 0. In addition, \hat{Z}_p = (sqrt(3)/3)^p.

## Specify the model using M! and lG, stating that the maximum
## length of the model is 100, and specifying the types of the particle and
## particle scratch space. The latter is Nothing in this case as no scratch space
## is required.

model = SMCModel(M!, lG, 100, Float64Particle, Nothing)

## Create the SMC input/output struct, specifying the number of particles N as
## 2^20 = 1048576, that the algorithm should be run for 10 steps, that 1 thread
## should be used (i.e. it should run in serial) and the whole particle system
## should be recorded.

smcio = SMCIO{model.particle, model.pScratch}(2^20, 10, 1, true)

## Run the algorithm twice, timing it both times. The first time will include
## compilation overhead. The second time there will be no allocations (apart
## from the small number associated with using the @time macro).

@time smc!(model, smcio)
@time smc!(model, smcio)

## Check that the approximations in smcio.logZhats are close to the true values.

println(Vector(log(sqrt(3)/3) * (1:10)))
println(smcio.logZhats)

## Check that the first and second moments of the eta_p's (resp. \hat{eta}_p's)
## are close to 0 and 1 (resp. 0 and 1/3).

println(SequentialMonteCarlo.allEtas(smcio, p-&gt;p.x, false))
println(SequentialMonteCarlo.allEtas(smcio, p-&gt;p.x*p.x, false))

println(SequentialMonteCarlo.allEtas(smcio, p-&gt;p.x, true))
println(SequentialMonteCarlo.allEtas(smcio, p-&gt;p.x*p.x, true))

## Now try with Threads.nthreads() threads instead of 1 and time the algorithm.
## There are compilation overheads the first time for the parallel parts of the
## SMC implementation. There are still a number of small allocations the second
## time; there is an allocation for each parallel region in the algorithm, and
## there are a few such regions at each step of the algorithm. This is due to
## Julia's multi-threading interface.

nthreads = Threads.nthreads()
smcio = SMCIO{model.particle, model.pScratch}(2^20, 10, nthreads, true)

@time smc!(model, smcio)
@time smc!(model, smcio)"><pre><span class="pl-c"><span class="pl-c">#</span># Load the package</span>

<span class="pl-k">using</span> SequentialMonteCarlo

<span class="pl-c"><span class="pl-c">#</span># Define a particle consisting of one Float64</span>

<span class="pl-k">mutable struct</span> Float64Particle
  x<span class="pl-k">::</span><span class="pl-c1">Float64</span>
  <span class="pl-en">Float64Particle</span>() <span class="pl-k">=</span> <span class="pl-c1">new</span>()
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span># The initial distribution is a standard normal, and the Markov transitions</span>
<span class="pl-c"><span class="pl-c">#</span># define a non-stationary Markov chain, since 1.5 &gt; 1.</span>

<span class="pl-k">function</span> <span class="pl-en">M!</span>(newParticle<span class="pl-k">::</span><span class="pl-c1">Float64Particle</span>, rng, p<span class="pl-k">::</span><span class="pl-c1">Int64</span>,
  particle<span class="pl-k">::</span><span class="pl-c1">Float64Particle</span>, <span class="pl-k">::</span><span class="pl-c1">Nothing</span>)
  <span class="pl-k">if</span> p <span class="pl-k">==</span> <span class="pl-c1">1</span>
    newParticle<span class="pl-k">.</span>x <span class="pl-k">=</span> <span class="pl-c1">randn</span>(rng)
  <span class="pl-k">else</span>
    newParticle<span class="pl-k">.</span>x <span class="pl-k">=</span> <span class="pl-c1">1.5</span> <span class="pl-k">*</span> particle<span class="pl-k">.</span>x <span class="pl-k">+</span> <span class="pl-c1">0.5</span> <span class="pl-k">*</span> <span class="pl-c1">randn</span>(rng)
  <span class="pl-k">end</span>
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span># The log potential function is x -&gt; -x^2 so the potential function is</span>
<span class="pl-c"><span class="pl-c">#</span># x -&gt; exp(-x^2).</span>

<span class="pl-k">function</span> <span class="pl-en">lG</span>(p<span class="pl-k">::</span><span class="pl-c1">Int64</span>, particle<span class="pl-k">::</span><span class="pl-c1">Float64Particle</span>, <span class="pl-k">::</span><span class="pl-c1">Nothing</span>)
  <span class="pl-k">return</span> <span class="pl-k">-</span> particle<span class="pl-k">.</span>x <span class="pl-k">*</span> particle<span class="pl-k">.</span>x
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span># This is a pedagogical example: one can deduce that eta_p is N(0, 1) for all</span>
<span class="pl-c"><span class="pl-c">#</span># p and \hat{eta}_p is N(0, 1/3) for all p. Essentially, the potential</span>
<span class="pl-c"><span class="pl-c">#</span># functions stop the Markov chain from exploding by favouring values</span>
<span class="pl-c"><span class="pl-c">#</span># closer to 0. In addition, \hat{Z}_p = (sqrt(3)/3)^p.</span>

<span class="pl-c"><span class="pl-c">#</span># Specify the model using M! and lG, stating that the maximum</span>
<span class="pl-c"><span class="pl-c">#</span># length of the model is 100, and specifying the types of the particle and</span>
<span class="pl-c"><span class="pl-c">#</span># particle scratch space. The latter is Nothing in this case as no scratch space</span>
<span class="pl-c"><span class="pl-c">#</span># is required.</span>

model <span class="pl-k">=</span> <span class="pl-c1">SMCModel</span>(M!, lG, <span class="pl-c1">100</span>, Float64Particle, Nothing)

<span class="pl-c"><span class="pl-c">#</span># Create the SMC input/output struct, specifying the number of particles N as</span>
<span class="pl-c"><span class="pl-c">#</span># 2^20 = 1048576, that the algorithm should be run for 10 steps, that 1 thread</span>
<span class="pl-c"><span class="pl-c">#</span># should be used (i.e. it should run in serial) and the whole particle system</span>
<span class="pl-c"><span class="pl-c">#</span># should be recorded.</span>

smcio <span class="pl-k">=</span> <span class="pl-c1">SMCIO</span><span class="pl-c1">{model.particle, model.pScratch}</span>(<span class="pl-c1">2</span><span class="pl-k">^</span><span class="pl-c1">20</span>, <span class="pl-c1">10</span>, <span class="pl-c1">1</span>, <span class="pl-c1">true</span>)

<span class="pl-c"><span class="pl-c">#</span># Run the algorithm twice, timing it both times. The first time will include</span>
<span class="pl-c"><span class="pl-c">#</span># compilation overhead. The second time there will be no allocations (apart</span>
<span class="pl-c"><span class="pl-c">#</span># from the small number associated with using the @time macro).</span>

<span class="pl-c1">@time</span> <span class="pl-c1">smc!</span>(model, smcio)
<span class="pl-c1">@time</span> <span class="pl-c1">smc!</span>(model, smcio)

<span class="pl-c"><span class="pl-c">#</span># Check that the approximations in smcio.logZhats are close to the true values.</span>

<span class="pl-c1">println</span>(<span class="pl-c1">Vector</span>(<span class="pl-c1">log</span>(<span class="pl-c1">sqrt</span>(<span class="pl-c1">3</span>)<span class="pl-k">/</span><span class="pl-c1">3</span>) <span class="pl-k">*</span> (<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>)))
<span class="pl-c1">println</span>(smcio<span class="pl-k">.</span>logZhats)

<span class="pl-c"><span class="pl-c">#</span># Check that the first and second moments of the eta_p's (resp. \hat{eta}_p's)</span>
<span class="pl-c"><span class="pl-c">#</span># are close to 0 and 1 (resp. 0 and 1/3).</span>

<span class="pl-c1">println</span>(SequentialMonteCarlo<span class="pl-k">.</span><span class="pl-c1">allEtas</span>(smcio, p<span class="pl-k">-&gt;</span>p<span class="pl-k">.</span>x, <span class="pl-c1">false</span>))
<span class="pl-c1">println</span>(SequentialMonteCarlo<span class="pl-k">.</span><span class="pl-c1">allEtas</span>(smcio, p<span class="pl-k">-&gt;</span>p<span class="pl-k">.</span>x<span class="pl-k">*</span>p<span class="pl-k">.</span>x, <span class="pl-c1">false</span>))

<span class="pl-c1">println</span>(SequentialMonteCarlo<span class="pl-k">.</span><span class="pl-c1">allEtas</span>(smcio, p<span class="pl-k">-&gt;</span>p<span class="pl-k">.</span>x, <span class="pl-c1">true</span>))
<span class="pl-c1">println</span>(SequentialMonteCarlo<span class="pl-k">.</span><span class="pl-c1">allEtas</span>(smcio, p<span class="pl-k">-&gt;</span>p<span class="pl-k">.</span>x<span class="pl-k">*</span>p<span class="pl-k">.</span>x, <span class="pl-c1">true</span>))

<span class="pl-c"><span class="pl-c">#</span># Now try with Threads.nthreads() threads instead of 1 and time the algorithm.</span>
<span class="pl-c"><span class="pl-c">#</span># There are compilation overheads the first time for the parallel parts of the</span>
<span class="pl-c"><span class="pl-c">#</span># SMC implementation. There are still a number of small allocations the second</span>
<span class="pl-c"><span class="pl-c">#</span># time; there is an allocation for each parallel region in the algorithm, and</span>
<span class="pl-c"><span class="pl-c">#</span># there are a few such regions at each step of the algorithm. This is due to</span>
<span class="pl-c"><span class="pl-c">#</span># Julia's multi-threading interface.</span>

nthreads <span class="pl-k">=</span> Threads<span class="pl-k">.</span><span class="pl-c1">nthreads</span>()
smcio <span class="pl-k">=</span> <span class="pl-c1">SMCIO</span><span class="pl-c1">{model.particle, model.pScratch}</span>(<span class="pl-c1">2</span><span class="pl-k">^</span><span class="pl-c1">20</span>, <span class="pl-c1">10</span>, nthreads, <span class="pl-c1">true</span>)

<span class="pl-c1">@time</span> <span class="pl-c1">smc!</span>(model, smcio)
<span class="pl-c1">@time</span> <span class="pl-c1">smc!</span>(model, smcio)</pre></div>
</article></div>