<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-astarsearchjl" class="anchor" aria-hidden="true" href="#astarsearchjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>AStarSearch.jl</h1>
<p><a href="https://github.com/PaoloSarti/AStarSearch.jl/actions?query=workflow%3ACI+branch%3Amaster"><img src="https://github.com/PaoloSarti/AStarSearch.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/PaoloSarti/AStarSearch.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/8382203f9499e47a87d494e1fa59fd84a32d0b52d1c60e1ebcd3881af9ebfb39/68747470733a2f2f636f6465636f762e696f2f67682f50616f6c6f53617274692f41537461725365617263682e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e7376673f746f6b656e3d536f3455724164363447" alt="codecov" data-canonical-src="https://codecov.io/gh/PaoloSarti/AStarSearch.jl/branch/main/graph/badge.svg?token=So4UrAd64G" style="max-width:100%;"></a></p>
<p><a href="https://en.wikipedia.org/wiki/A*_search_algorithm" rel="nofollow">A* Algorithm</a> in Julia.</p>
<p>This module exports the <code>astar</code> function that provides a generic implementation of the algorithm.
The type of the state is totally unrestricted, just provide the functions that give neighbour states and an heuristic given a state and the algorithm will find the best path.</p>
<p>To ease the definition of more complex problems in which you usually want to search from the best path from start to end, given also some parameters from the problem instance, the <code>AbstractAStarSearch</code> type is introduced. You should define the neighbour function heuristic on the instance of your concrete AStarSearch type, with also that type in the signature, and then use the <code>search</code> function on that problem instance, given the start and goal state.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>In the Julia Pkg REPL, type: <code>add AStarSearch</code></p>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<p><code>astar(start, isgoal, getneighbours, heuristic; cost = defaultcost, timeout = Inf, hashfn = defaulthash, maxcost = Inf, maxdepth = Inf)</code></p>
<p>Execute the A* algorithm to get the best path from the start state to reach a goal condition.
Only the first 4 arguments are mandatory, all the others are optional.</p>
<h3><a id="user-content-result" class="anchor" aria-hidden="true" href="#result"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Result</h3>
<p>It returns a structure in which the <code>status</code> field is a Symbol that can be either:</p>
<ul>
<li><code>:success</code>: the algorithm found a path from start to goal</li>
<li><code>:timeout</code>: the algorithm timed out, a partial path to the best state is returned in the <code>path</code> field</li>
<li><code>:nopath</code>: the algorithm didn't find any path to a goal, the path to the best state is still returned</li>
</ul>
<p>The other fields are:</p>
<ul>
<li><code>path</code>: an array of states from the start state to the goal or the best found state</li>
<li><code>cost</code>: the cost of the returned path</li>
<li><code>closedsetsize</code>: how many states the algorithm tested if they were a goal (size of the closed set)</li>
<li><code>opensetsize</code>: how many states were still in the open set when the algorithm ended</li>
</ul>
<h3><a id="user-content-arguments" class="anchor" aria-hidden="true" href="#arguments"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Arguments</h3>
<ul>
<li><code>start</code>: the starting state, the type of the state is completely unrestricted</li>
<li><code>isgoal</code>: a function to evaluate if a state satisfies a goal condition</li>
<li><code>getneighbours</code>: a function that takes a state and returns the neighbour states as an array (or iterable)</li>
<li><code>heuristic</code>: a function that given a state returns an estimate of the cost to reach goal. This estimate should be optimistic if you want to be sure to get the best path. Notice that the best path could be very expensive to find, so if you want a good but not guaranteed optimal path, you could multiply your heuristic by a constant, the algorithm will usually be much faster</li>
<li><code>cost</code>: a function that takes the current state and a neighbour and returns the cost to do that state transition. By default all transitions cost 1</li>
<li><code>timeout</code>: timeout in number of seconds after which the algorithm stops returning the best partial path to the state with the lowest heuristic, by default it is unrestricted. Please notice that the algorithm wil run <em>AT LEAST</em> the specified time.</li>
<li><code>hashfn</code>: a function that takes a state and returns a compact representation to use as dictionary key (usually one of UInt, Int, String), by default it is just the identity function as the state is used directly as key. This is a very important field for composite states in order to avoid duplications</li>
<li><code>maxcost</code>: a maximum bound of the accumulated cost of the path, this can result in a :nopath result even if a path to the goal (with a greater cost) exists. By default it is Inf</li>
<li><code>maxdepth</code>: the maximum depth the algorithm is allowed to go down while expanding the search state, the same considerations as the <code>maxcost</code> parameter apply. By default it is Inf</li>
</ul>
<h3><a id="user-content-abstractastarsearch" class="anchor" aria-hidden="true" href="#abstractastarsearch"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>AbstractAStarSearch</h3>
<p>Abstract Type that can be subtyped by concrete structures that represent a parametrizable problem.</p>
<p>Define a structure as subtype of AbstractAStarSearch, then you have to define:</p>
<ul>
<li><code>neighbours(astarsearch::YourAStarSearchStruct{YourStateType}, current::YourStateType)</code> -&gt; returns an array of neighbour states</li>
<li><code>heuristic(astarsearch::YourAStarSearchStruct{YourStateType}, current::YourStateType, goal::YourStateType)</code> -&gt; returns an estimate of the cost to get to the end</li>
</ul>
<p>And optionally you can redefine:</p>
<ul>
<li><code>isgoal(astarsearch::YourAStarSearchStruct{YourStateType}, current::YourStateType, goal::YourStateType)</code> -&gt; returns bool (by default it's current == goal)</li>
<li><code>cost(astarsearch::YourAStarSearchStruct{YourStateType}, current::YourStateType, neighbour::YourStateType)</code> -&gt; returns the cost between the current state and a neighbour (by default = 1)</li>
</ul>
<p>Then you can find the optimal path with:
<code>search(aastarsearch::YourAStarSearchStruct{YourStateType}, start::YourStateType, goal::YourStateType; timeout = Inf, maxcost = Inf, maxdepth = Inf)</code></p>
<p>The other optional parameters are documented in the <code>astar</code> function above.</p>
<h3><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Examples</h3>
<p>It's a very general algorithm so you can solve shortest paths in mazes but also all sorts of puzzles such as the <a href="https://en.wikipedia.org/wiki/15_puzzle" rel="nofollow">15 Puzzle</a>.
Both the maze example and the 15 Puzzle solver are in the <code>test</code> folder.</p>
<p>If you want to find the best path in a maze using the manhattan heuristic you can do the following:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Test
using AStarSearch

# Directions are seen as cartesian indexes so that they can be added to a position to get the next position
UP = CartesianIndex(-1, 0)
DOWN = CartesianIndex(1, 0)
LEFT = CartesianIndex(0, -1)
RIGHT = CartesianIndex(0, 1)
DIRECTIONS = [UP, DOWN, LEFT, RIGHT]

# manhattan distance between positions in the maze matrix
manhattan(a::CartesianIndex, b::CartesianIndex) = sum(abs.((b - a).I))
# check to be in the maze and filter out moves that go into walls
getmazeneighbours(maze, state) = filter(x -&gt; (1 &lt;= x[1] &lt;= size(maze)[1]) &amp;&amp; (1 &lt;= x[2] &lt;= size(maze)[2]) &amp;&amp; (!maze[x]), [state + d for d in DIRECTIONS])

# 0 = free cell, 1 = wall
maze = [0 0 1 0 0;
        0 1 0 0 0;
        0 1 0 0 1;
        0 0 0 1 1;
        1 0 1 0 0] .== 1
start = CartesianIndex(1, 1)
goal = CartesianIndex(1, 5)

isgoal(state) = state == goal
getneighbours(state) = getmazeneighbours(maze, state)
mazeheuristic(state) = manhattan(state, goal)

res = astar(start, isgoal, getneighbours, mazeheuristic)
@test res.status == :success
@test res.path ==  CartesianIndex{2}[
    CartesianIndex(1, 1),
    CartesianIndex(2, 1),
    CartesianIndex(3, 1),
    CartesianIndex(4, 1),
    CartesianIndex(4, 2),
    CartesianIndex(4, 3),
    CartesianIndex(3, 3),
    CartesianIndex(2, 3),
    CartesianIndex(2, 4),
    CartesianIndex(1, 4),
    CartesianIndex(1, 5)]
@test res.cost == 10
"><pre><span class="pl-k">using</span> Test
<span class="pl-k">using</span> AStarSearch

<span class="pl-c"><span class="pl-c">#</span> Directions are seen as cartesian indexes so that they can be added to a position to get the next position</span>
UP <span class="pl-k">=</span> <span class="pl-c1">CartesianIndex</span>(<span class="pl-k">-</span><span class="pl-c1">1</span>, <span class="pl-c1">0</span>)
DOWN <span class="pl-k">=</span> <span class="pl-c1">CartesianIndex</span>(<span class="pl-c1">1</span>, <span class="pl-c1">0</span>)
LEFT <span class="pl-k">=</span> <span class="pl-c1">CartesianIndex</span>(<span class="pl-c1">0</span>, <span class="pl-k">-</span><span class="pl-c1">1</span>)
RIGHT <span class="pl-k">=</span> <span class="pl-c1">CartesianIndex</span>(<span class="pl-c1">0</span>, <span class="pl-c1">1</span>)
DIRECTIONS <span class="pl-k">=</span> [UP, DOWN, LEFT, RIGHT]

<span class="pl-c"><span class="pl-c">#</span> manhattan distance between positions in the maze matrix</span>
<span class="pl-en">manhattan</span>(a<span class="pl-k">::</span><span class="pl-c1">CartesianIndex</span>, b<span class="pl-k">::</span><span class="pl-c1">CartesianIndex</span>) <span class="pl-k">=</span> <span class="pl-c1">sum</span>(<span class="pl-c1">abs</span>.((b <span class="pl-k">-</span> a)<span class="pl-k">.</span>I))
<span class="pl-c"><span class="pl-c">#</span> check to be in the maze and filter out moves that go into walls</span>
<span class="pl-en">getmazeneighbours</span>(maze, state) <span class="pl-k">=</span> <span class="pl-c1">filter</span>(x <span class="pl-k">-&gt;</span> (<span class="pl-c1">1</span> <span class="pl-k">&lt;=</span> x[<span class="pl-c1">1</span>] <span class="pl-k">&lt;=</span> <span class="pl-c1">size</span>(maze)[<span class="pl-c1">1</span>]) <span class="pl-k">&amp;&amp;</span> (<span class="pl-c1">1</span> <span class="pl-k">&lt;=</span> x[<span class="pl-c1">2</span>] <span class="pl-k">&lt;=</span> <span class="pl-c1">size</span>(maze)[<span class="pl-c1">2</span>]) <span class="pl-k">&amp;&amp;</span> (<span class="pl-k">!</span>maze[x]), [state <span class="pl-k">+</span> d <span class="pl-k">for</span> d <span class="pl-k">in</span> DIRECTIONS])

<span class="pl-c"><span class="pl-c">#</span> 0 = free cell, 1 = wall</span>
maze <span class="pl-k">=</span> [<span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">1</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span>;
        <span class="pl-c1">0</span> <span class="pl-c1">1</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span>;
        <span class="pl-c1">0</span> <span class="pl-c1">1</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">1</span>;
        <span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">1</span> <span class="pl-c1">1</span>;
        <span class="pl-c1">1</span> <span class="pl-c1">0</span> <span class="pl-c1">1</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span>] <span class="pl-k">.==</span> <span class="pl-c1">1</span>
start <span class="pl-k">=</span> <span class="pl-c1">CartesianIndex</span>(<span class="pl-c1">1</span>, <span class="pl-c1">1</span>)
goal <span class="pl-k">=</span> <span class="pl-c1">CartesianIndex</span>(<span class="pl-c1">1</span>, <span class="pl-c1">5</span>)

<span class="pl-en">isgoal</span>(state) <span class="pl-k">=</span> state <span class="pl-k">==</span> goal
<span class="pl-en">getneighbours</span>(state) <span class="pl-k">=</span> <span class="pl-c1">getmazeneighbours</span>(maze, state)
<span class="pl-en">mazeheuristic</span>(state) <span class="pl-k">=</span> <span class="pl-c1">manhattan</span>(state, goal)

res <span class="pl-k">=</span> <span class="pl-c1">astar</span>(start, isgoal, getneighbours, mazeheuristic)
<span class="pl-c1">@test</span> res<span class="pl-k">.</span>status <span class="pl-k">==</span> <span class="pl-c1">:success</span>
<span class="pl-c1">@test</span> res<span class="pl-k">.</span>path <span class="pl-k">==</span>  CartesianIndex{<span class="pl-c1">2</span>}[
    <span class="pl-c1">CartesianIndex</span>(<span class="pl-c1">1</span>, <span class="pl-c1">1</span>),
    <span class="pl-c1">CartesianIndex</span>(<span class="pl-c1">2</span>, <span class="pl-c1">1</span>),
    <span class="pl-c1">CartesianIndex</span>(<span class="pl-c1">3</span>, <span class="pl-c1">1</span>),
    <span class="pl-c1">CartesianIndex</span>(<span class="pl-c1">4</span>, <span class="pl-c1">1</span>),
    <span class="pl-c1">CartesianIndex</span>(<span class="pl-c1">4</span>, <span class="pl-c1">2</span>),
    <span class="pl-c1">CartesianIndex</span>(<span class="pl-c1">4</span>, <span class="pl-c1">3</span>),
    <span class="pl-c1">CartesianIndex</span>(<span class="pl-c1">3</span>, <span class="pl-c1">3</span>),
    <span class="pl-c1">CartesianIndex</span>(<span class="pl-c1">2</span>, <span class="pl-c1">3</span>),
    <span class="pl-c1">CartesianIndex</span>(<span class="pl-c1">2</span>, <span class="pl-c1">4</span>),
    <span class="pl-c1">CartesianIndex</span>(<span class="pl-c1">1</span>, <span class="pl-c1">4</span>),
    <span class="pl-c1">CartesianIndex</span>(<span class="pl-c1">1</span>, <span class="pl-c1">5</span>)]
<span class="pl-c1">@test</span> res<span class="pl-k">.</span>cost <span class="pl-k">==</span> <span class="pl-c1">10</span></pre></div>
<h4><a id="user-content-maze-example-by-subtyping-abstractastar" class="anchor" aria-hidden="true" href="#maze-example-by-subtyping-abstractastar"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Maze Example by subtyping AbstractAStar</h4>
<p>Given that <code>manhattan</code> and <code>getmazeneighbours</code> are defined as above, you can design the same solution like this:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="import AStarSearch: neighbours, heuristic

struct MazeSolver &lt;: AbstractAStarSearch{CartesianIndex{2}}
  maze:: BitArray{2}
end

neighbours(ms::MazeSolver, state::CartesianIndex{2}) = getmazeneighbours(ms.maze, state)
heuristic(ms::MazeSolver, state::CartesianIndex{2}, goal::CartesianIndex{2}) = manhattan(state, goal)

# 0 = free cell, 1 = wall
maze = [0 0 1 0 0;
        0 1 0 0 0;
        0 1 0 0 1;
        0 0 0 1 1;
        1 0 1 0 0] .== 1
mz = MazeSolver(maze)
start = CartesianIndex(1, 1)
goal = CartesianIndex(1, 5)

res = search(mz, start, goal)
"><pre><span class="pl-k">import</span> AStarSearch<span class="pl-k">:</span> neighbours, heuristic

<span class="pl-k">struct</span> MazeSolver <span class="pl-k">&lt;:</span> <span class="pl-c1">AbstractAStarSearch{CartesianIndex{2}}</span>
  maze<span class="pl-k">::</span> <span class="pl-c1">BitArray{2}</span>
<span class="pl-k">end</span>

<span class="pl-en">neighbours</span>(ms<span class="pl-k">::</span><span class="pl-c1">MazeSolver</span>, state<span class="pl-k">::</span><span class="pl-c1">CartesianIndex{2}</span>) <span class="pl-k">=</span> <span class="pl-c1">getmazeneighbours</span>(ms<span class="pl-k">.</span>maze, state)
<span class="pl-en">heuristic</span>(ms<span class="pl-k">::</span><span class="pl-c1">MazeSolver</span>, state<span class="pl-k">::</span><span class="pl-c1">CartesianIndex{2}</span>, goal<span class="pl-k">::</span><span class="pl-c1">CartesianIndex{2}</span>) <span class="pl-k">=</span> <span class="pl-c1">manhattan</span>(state, goal)

<span class="pl-c"><span class="pl-c">#</span> 0 = free cell, 1 = wall</span>
maze <span class="pl-k">=</span> [<span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">1</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span>;
        <span class="pl-c1">0</span> <span class="pl-c1">1</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span>;
        <span class="pl-c1">0</span> <span class="pl-c1">1</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">1</span>;
        <span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">1</span> <span class="pl-c1">1</span>;
        <span class="pl-c1">1</span> <span class="pl-c1">0</span> <span class="pl-c1">1</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span>] <span class="pl-k">.==</span> <span class="pl-c1">1</span>
mz <span class="pl-k">=</span> <span class="pl-c1">MazeSolver</span>(maze)
start <span class="pl-k">=</span> <span class="pl-c1">CartesianIndex</span>(<span class="pl-c1">1</span>, <span class="pl-c1">1</span>)
goal <span class="pl-k">=</span> <span class="pl-c1">CartesianIndex</span>(<span class="pl-c1">1</span>, <span class="pl-c1">5</span>)

res <span class="pl-k">=</span> <span class="pl-c1">search</span>(mz, start, goal)</pre></div>
<p>The same results like above are returned.</p>
<h3><a id="user-content-breaking-changes" class="anchor" aria-hidden="true" href="#breaking-changes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Breaking Changes</h3>
<h4><a id="user-content-030" class="anchor" aria-hidden="true" href="#030"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>0.3.0</h4>
<p>The 0.3.0 release introduces a more strict type checking, requiring uniformity of types between the cost and the heuristics, to improve performance.<br>
If you get type errors, it will probably be because by default the cost is Int64, and you provided a Float heuristic.<br>
You can either provide the cost function that returns a float, or cast the heuristic to Int64.</p>
</article></div>