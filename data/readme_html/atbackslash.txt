<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-atbackslash" class="anchor" aria-hidden="true" href="#atbackslash"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>AtBackslash</h1>
<p dir="auto"><a href="https://travis-ci.com/tkf/AtBackslash.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/e16dd0475d383294e66d0793057c798ecec96eb0c909bf52eff83125eb4d1269/68747470733a2f2f7472617669732d63692e636f6d2f746b662f41744261636b736c6173682e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/tkf/AtBackslash.jl.svg?branch=master" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/tkf/AtBackslash.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/fa7f5c1c89c2f917a8fb23ed9a2fcf077a3152e440a0c3f83d944791824f47df/68747470733a2f2f636f6465636f762e696f2f67682f746b662f41744261636b736c6173682e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/tkf/AtBackslash.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a>
<a href="https://coveralls.io/github/tkf/AtBackslash.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/3e6f66d58a69d681c22333f2b4cd71fc8f482b05baff5b39fad61bf4bb9b183e/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f746b662f41744261636b736c6173682e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coveralls" data-canonical-src="https://coveralls.io/repos/github/tkf/AtBackslash.jl/badge.svg?branch=master" style="max-width: 100%;"></a></p>
<p dir="auto"><code>AtBackslash</code> exports a macro <code>@\</code> to easily create functions that
work with named tuples as input and/or output.</p>
<p dir="auto">The symbol literal like <code>:x</code> in the tuple argument is expanded to be
the property/field of the named tuple of the input and output:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using AtBackslash

julia&gt; (x = 1, y = 2, z = 3) |&gt; @\(:x, :y)
(x = 1, y = 2)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> AtBackslash

julia<span class="pl-k">&gt;</span> (x <span class="pl-k">=</span> <span class="pl-c1">1</span>, y <span class="pl-k">=</span> <span class="pl-c1">2</span>, z <span class="pl-k">=</span> <span class="pl-c1">3</span>) <span class="pl-k">|&gt;</span> @<span class="pl-k">\</span>(<span class="pl-c1">:x</span>, <span class="pl-c1">:y</span>)
(x <span class="pl-k">=</span> <span class="pl-c1">1</span>, y <span class="pl-k">=</span> <span class="pl-c1">2</span>)</pre></div>
<p dir="auto">It also supports normal "verbose" syntax for creating a named tuple:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; (x = 1, y = 2) |&gt; @\(x = :x, y = :y)
(x = 1, y = 2)"><pre>julia<span class="pl-k">&gt;</span> (x <span class="pl-k">=</span> <span class="pl-c1">1</span>, y <span class="pl-k">=</span> <span class="pl-c1">2</span>) <span class="pl-k">|&gt;</span> @<span class="pl-k">\</span>(x <span class="pl-k">=</span> <span class="pl-c1">:x</span>, y <span class="pl-k">=</span> <span class="pl-c1">:y</span>)
(x <span class="pl-k">=</span> <span class="pl-c1">1</span>, y <span class="pl-k">=</span> <span class="pl-c1">2</span>)</pre></div>
<p dir="auto">which is handy when adding new properties:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; (x = 1, y = 2) |&gt; @\(:x, z = :x + :y)
(x = 1, z = 3)"><pre>julia<span class="pl-k">&gt;</span> (x <span class="pl-k">=</span> <span class="pl-c1">1</span>, y <span class="pl-k">=</span> <span class="pl-c1">2</span>) <span class="pl-k">|&gt;</span> @<span class="pl-k">\</span>(<span class="pl-c1">:x</span>, z <span class="pl-k">=</span> <span class="pl-c1">:x</span> <span class="pl-k">+</span> <span class="pl-c1">:y</span>)
(x <span class="pl-k">=</span> <span class="pl-c1">1</span>, z <span class="pl-k">=</span> <span class="pl-c1">3</span>)</pre></div>
<p dir="auto">The argument can be explicitly referred to by <code>_</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; (x = 1, y = 2) |&gt; @\(_..., z = :x + :y)
(x = 1, y = 2, z = 3)"><pre>julia<span class="pl-k">&gt;</span> (x <span class="pl-k">=</span> <span class="pl-c1">1</span>, y <span class="pl-k">=</span> <span class="pl-c1">2</span>) <span class="pl-k">|&gt;</span> @<span class="pl-k">\</span>(_<span class="pl-k">...</span>, z <span class="pl-k">=</span> <span class="pl-c1">:x</span> <span class="pl-k">+</span> <span class="pl-c1">:y</span>)
(x <span class="pl-k">=</span> <span class="pl-c1">1</span>, y <span class="pl-k">=</span> <span class="pl-c1">2</span>, z <span class="pl-k">=</span> <span class="pl-c1">3</span>)</pre></div>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; (x = 1, y = 2) |&gt; @\_.x
1"><pre>julia<span class="pl-k">&gt;</span> (x <span class="pl-k">=</span> <span class="pl-c1">1</span>, y <span class="pl-k">=</span> <span class="pl-c1">2</span>) <span class="pl-k">|&gt;</span> @<span class="pl-k">\</span>_<span class="pl-k">.</span>x
<span class="pl-c1">1</span></pre></div>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; 1 |&gt; @\(x = _, y = 2_)
(x = 1, y = 2)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">1</span> <span class="pl-k">|&gt;</span> @<span class="pl-k">\</span>(x <span class="pl-k">=</span> _, y <span class="pl-k">=</span> <span class="pl-c1">2_</span>)
(x <span class="pl-k">=</span> <span class="pl-c1">1</span>, y <span class="pl-k">=</span> <span class="pl-c1">2</span>)</pre></div>
<p dir="auto">Automatic conversions of <code>:x</code> and <code>(; :x, :y)</code> work at any level of
expression:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; (x = 1, y = 2) |&gt; @\ merge((; :x, :y), (a = :x, b = :y))
(x = 1, y = 2, a = 1, b = 2)"><pre>julia<span class="pl-k">&gt;</span> (x <span class="pl-k">=</span> <span class="pl-c1">1</span>, y <span class="pl-k">=</span> <span class="pl-c1">2</span>) <span class="pl-k">|&gt;</span> @<span class="pl-k">\</span> <span class="pl-c1">merge</span>((; <span class="pl-c1">:x</span>, <span class="pl-c1">:y</span>), (a <span class="pl-k">=</span> <span class="pl-c1">:x</span>, b <span class="pl-k">=</span> <span class="pl-c1">:y</span>))
(x <span class="pl-k">=</span> <span class="pl-c1">1</span>, y <span class="pl-k">=</span> <span class="pl-c1">2</span>, a <span class="pl-k">=</span> <span class="pl-c1">1</span>, b <span class="pl-k">=</span> <span class="pl-c1">2</span>)</pre></div>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; (x = 1, y = 2) |&gt; @\(:x &lt; :y &lt; 3)
true"><pre>julia<span class="pl-k">&gt;</span> (x <span class="pl-k">=</span> <span class="pl-c1">1</span>, y <span class="pl-k">=</span> <span class="pl-c1">2</span>) <span class="pl-k">|&gt;</span> @<span class="pl-k">\</span>(<span class="pl-c1">:x</span> <span class="pl-k">&lt;</span> <span class="pl-c1">:y</span> <span class="pl-k">&lt;</span> <span class="pl-c1">3</span>)
<span class="pl-c1">true</span></pre></div>
<p dir="auto">Use <code>$:x</code> to avoid automatic conversion to <code>_.x</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; (x = 1, y = 2) |&gt; @\(x = $:x, :y)
(x = :x, y = 2)"><pre>julia<span class="pl-k">&gt;</span> (x <span class="pl-k">=</span> <span class="pl-c1">1</span>, y <span class="pl-k">=</span> <span class="pl-c1">2</span>) <span class="pl-k">|&gt;</span> @<span class="pl-k">\</span>(x <span class="pl-k">=</span> <span class="pl-k">$</span><span class="pl-c1">:x</span>, <span class="pl-c1">:y</span>)
(x <span class="pl-k">=</span> <span class="pl-c1">:x</span>, y <span class="pl-k">=</span> <span class="pl-c1">2</span>)</pre></div>
<p dir="auto">Use plain names to refer to the variables in the outer scope:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; let z = 3
           (x = 1, y = 2) |&gt; @\(:x, :y, z)
       end
(x = 1, y = 2, z = 3)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">let</span> z <span class="pl-k">=</span> <span class="pl-c1">3</span>
           (x <span class="pl-k">=</span> <span class="pl-c1">1</span>, y <span class="pl-k">=</span> <span class="pl-c1">2</span>) <span class="pl-k">|&gt;</span> @<span class="pl-k">\</span>(<span class="pl-c1">:x</span>, <span class="pl-c1">:y</span>, z)
       <span class="pl-k">end</span>
(x <span class="pl-k">=</span> <span class="pl-c1">1</span>, y <span class="pl-k">=</span> <span class="pl-c1">2</span>, z <span class="pl-k">=</span> <span class="pl-c1">3</span>)</pre></div>
<p dir="auto">The input can be any object that support <code>getproperty</code>.  For example,
it works with <code>Complex</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; 1 + 2im |&gt; @\(:re, :im)
(re = 1, im = 2)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">1</span> <span class="pl-k">+</span> <span class="pl-c1">2im</span> <span class="pl-k">|&gt;</span> @<span class="pl-k">\</span>(<span class="pl-c1">:re</span>, <span class="pl-c1">:im</span>)
(re <span class="pl-k">=</span> <span class="pl-c1">1</span>, im <span class="pl-k">=</span> <span class="pl-c1">2</span>)</pre></div>
</article></div>