<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-atbackslash" class="anchor" aria-hidden="true" href="#atbackslash"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>AtBackslash</h1>
<p><a href="https://travis-ci.com/tkf/AtBackslash.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/fe7d524abc66e43d2910528ba4394851873396c7/68747470733a2f2f7472617669732d63692e636f6d2f746b662f41744261636b736c6173682e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/tkf/AtBackslash.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/tkf/AtBackslash.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/ebc551ac2aa65f11b19c35f7d5132201b3455917/68747470733a2f2f636f6465636f762e696f2f67682f746b662f41744261636b736c6173682e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/tkf/AtBackslash.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/tkf/AtBackslash.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/9b49795e78b64da2675c144865b3d076b4660ce5/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f746b662f41744261636b736c6173682e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coveralls" data-canonical-src="https://coveralls.io/repos/github/tkf/AtBackslash.jl/badge.svg?branch=master" style="max-width:100%;"></a></p>
<p><code>AtBackslash</code> exports a macro <code>@\</code> to easily create functions that
work with named tuples as input and/or output.</p>
<p>The symbol literal like <code>:x</code> in the tuple argument is expanded to be
the property/field of the named tuple of the input and output:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> AtBackslash

julia<span class="pl-k">&gt;</span> (x <span class="pl-k">=</span> <span class="pl-c1">1</span>, y <span class="pl-k">=</span> <span class="pl-c1">2</span>, z <span class="pl-k">=</span> <span class="pl-c1">3</span>) <span class="pl-k">|&gt;</span> @<span class="pl-k">\</span>(<span class="pl-c1">:x</span>, <span class="pl-c1">:y</span>)
(x <span class="pl-k">=</span> <span class="pl-c1">1</span>, y <span class="pl-k">=</span> <span class="pl-c1">2</span>)</pre></div>
<p>It also supports normal "verbose" syntax for creating a named tuple:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> (x <span class="pl-k">=</span> <span class="pl-c1">1</span>, y <span class="pl-k">=</span> <span class="pl-c1">2</span>) <span class="pl-k">|&gt;</span> @<span class="pl-k">\</span>(x <span class="pl-k">=</span> <span class="pl-c1">:x</span>, y <span class="pl-k">=</span> <span class="pl-c1">:y</span>)
(x <span class="pl-k">=</span> <span class="pl-c1">1</span>, y <span class="pl-k">=</span> <span class="pl-c1">2</span>)</pre></div>
<p>which is handy when adding new properties:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> (x <span class="pl-k">=</span> <span class="pl-c1">1</span>, y <span class="pl-k">=</span> <span class="pl-c1">2</span>) <span class="pl-k">|&gt;</span> @<span class="pl-k">\</span>(<span class="pl-c1">:x</span>, z <span class="pl-k">=</span> <span class="pl-c1">:x</span> <span class="pl-k">+</span> <span class="pl-c1">:y</span>)
(x <span class="pl-k">=</span> <span class="pl-c1">1</span>, z <span class="pl-k">=</span> <span class="pl-c1">3</span>)</pre></div>
<p>The argument can be explicitly referred to by <code>_</code>:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> (x <span class="pl-k">=</span> <span class="pl-c1">1</span>, y <span class="pl-k">=</span> <span class="pl-c1">2</span>) <span class="pl-k">|&gt;</span> @<span class="pl-k">\</span>(_<span class="pl-k">...</span>, z <span class="pl-k">=</span> <span class="pl-c1">:x</span> <span class="pl-k">+</span> <span class="pl-c1">:y</span>)
(x <span class="pl-k">=</span> <span class="pl-c1">1</span>, y <span class="pl-k">=</span> <span class="pl-c1">2</span>, z <span class="pl-k">=</span> <span class="pl-c1">3</span>)</pre></div>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> (x <span class="pl-k">=</span> <span class="pl-c1">1</span>, y <span class="pl-k">=</span> <span class="pl-c1">2</span>) <span class="pl-k">|&gt;</span> @<span class="pl-k">\</span>_<span class="pl-k">.</span>x
<span class="pl-c1">1</span></pre></div>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">1</span> <span class="pl-k">|&gt;</span> @<span class="pl-k">\</span>(x <span class="pl-k">=</span> _, y <span class="pl-k">=</span> <span class="pl-c1">2_</span>)
(x <span class="pl-k">=</span> <span class="pl-c1">1</span>, y <span class="pl-k">=</span> <span class="pl-c1">2</span>)</pre></div>
<p>Automatic conversions of <code>:x</code> and <code>(; :x, :y)</code> work at any level of
expression:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> (x <span class="pl-k">=</span> <span class="pl-c1">1</span>, y <span class="pl-k">=</span> <span class="pl-c1">2</span>) <span class="pl-k">|&gt;</span> @<span class="pl-k">\</span> <span class="pl-c1">merge</span>((; <span class="pl-c1">:x</span>, <span class="pl-c1">:y</span>), (a <span class="pl-k">=</span> <span class="pl-c1">:x</span>, b <span class="pl-k">=</span> <span class="pl-c1">:y</span>))
(x <span class="pl-k">=</span> <span class="pl-c1">1</span>, y <span class="pl-k">=</span> <span class="pl-c1">2</span>, a <span class="pl-k">=</span> <span class="pl-c1">1</span>, b <span class="pl-k">=</span> <span class="pl-c1">2</span>)</pre></div>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> (x <span class="pl-k">=</span> <span class="pl-c1">1</span>, y <span class="pl-k">=</span> <span class="pl-c1">2</span>) <span class="pl-k">|&gt;</span> @<span class="pl-k">\</span>(<span class="pl-c1">:x</span> <span class="pl-k">&lt;</span> <span class="pl-c1">:y</span> <span class="pl-k">&lt;</span> <span class="pl-c1">3</span>)
<span class="pl-c1">true</span></pre></div>
<p>Use <code>$:x</code> to avoid automatic conversion to <code>_.x</code>:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> (x <span class="pl-k">=</span> <span class="pl-c1">1</span>, y <span class="pl-k">=</span> <span class="pl-c1">2</span>) <span class="pl-k">|&gt;</span> @<span class="pl-k">\</span>(x <span class="pl-k">=</span> <span class="pl-k">$</span><span class="pl-c1">:x</span>, <span class="pl-c1">:y</span>)
(x <span class="pl-k">=</span> <span class="pl-c1">:x</span>, y <span class="pl-k">=</span> <span class="pl-c1">2</span>)</pre></div>
<p>Use plain names to refer to the variables in the outer scope:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">let</span> z <span class="pl-k">=</span> <span class="pl-c1">3</span>
           (x <span class="pl-k">=</span> <span class="pl-c1">1</span>, y <span class="pl-k">=</span> <span class="pl-c1">2</span>) <span class="pl-k">|&gt;</span> @<span class="pl-k">\</span>(<span class="pl-c1">:x</span>, <span class="pl-c1">:y</span>, z)
       <span class="pl-k">end</span>
(x <span class="pl-k">=</span> <span class="pl-c1">1</span>, y <span class="pl-k">=</span> <span class="pl-c1">2</span>, z <span class="pl-k">=</span> <span class="pl-c1">3</span>)</pre></div>
<p>The input can be any object that support <code>getproperty</code>.  For example,
it works with <code>Complex</code>:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">1</span> <span class="pl-k">+</span> <span class="pl-c1">2im</span> <span class="pl-k">|&gt;</span> @<span class="pl-k">\</span>(<span class="pl-c1">:re</span>, <span class="pl-c1">:im</span>)
(re <span class="pl-k">=</span> <span class="pl-c1">1</span>, im <span class="pl-k">=</span> <span class="pl-c1">2</span>)</pre></div>
</article></div>