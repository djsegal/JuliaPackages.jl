<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-tensorpolynomialbases" class="anchor" aria-hidden="true" href="#tensorpolynomialbases"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>TensorPolynomialBases</h1>
<p><a href="https://travis-ci.com/gridap/TensorPolynomialBases.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/d39826ae83197aeed6c42cd49fba1bc8e5becb9e/68747470733a2f2f7472617669732d63692e636f6d2f6772696461702f54656e736f72506f6c796e6f6d69616c42617365732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/gridap/TensorPolynomialBases.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/gridap/TensorPolynomialBases.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/2d47683ff220393de1edd05c3172f3b49fc5420c/68747470733a2f2f636f6465636f762e696f2f67682f6772696461702f54656e736f72506f6c796e6f6d69616c42617365732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/gridap/TensorPolynomialBases.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a>
<a href="https://gridap.github.io/TensorPolynomialBases.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/f7b92a177c912c1cc007fc9b40f17ff3ee3bb414/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://gridap.github.io/TensorPolynomialBases.jl/latest" rel="nofollow"><img src="https://camo.githubusercontent.com/57bae07ecd50a99519ad0516d91f4ec8f0f48e12/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6c61746573742d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-latest-blue.svg" style="max-width:100%;"></a></p>
<p>The <strong>TensorPolynomialBases</strong> package provides a collection of different types representing tensor-valued multivariate polynomial bases. It provides a common interface, called <code>TensorPolynomialBasis</code>, and several concrete implementations. At the moment, only a concrete implementation, called <code>MonomialBasis</code> is available, which implements a tensor-valued multivariate monomial basis. For representing the tensor values arising in the evaluation of tensor-valued polynomails, the user can either use the <a href="https://github.com/JuliaArrays/StaticArrays.jl">StaticArrays</a> or the <a href="https://github.com/gridap/TensorValues.jl">TensorValues</a> packages.</p>
<h2><a id="user-content-quick-start" class="anchor" aria-hidden="true" href="#quick-start"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Quick start</h2>
<h3><a id="user-content-create-a-vector-valued-monomial-basis-of-p-polynomials-in-2-variables" class="anchor" aria-hidden="true" href="#create-a-vector-valued-monomial-basis-of-p-polynomials-in-2-variables"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Create a vector-valued monomial basis of P-polynomials in 2 variables</h3>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> TensorPolynomialBases
<span class="pl-k">using</span> StaticArrays

<span class="pl-c"><span class="pl-c">#</span> Define a filter to select the monomials in the P-space</span>
<span class="pl-en">filter</span>(e,order) <span class="pl-k">=</span> <span class="pl-c1">sum</span>(e) <span class="pl-k">&lt;=</span> order

order<span class="pl-k">=</span> <span class="pl-c1">4</span>
P <span class="pl-k">=</span> SVector{<span class="pl-c1">2</span>,Float64} <span class="pl-c"><span class="pl-c">#</span> type of the evaluation point</span>
V <span class="pl-k">=</span> SVector{<span class="pl-c1">3</span>,Float64} <span class="pl-c"><span class="pl-c">#</span> type of the value</span>

basis <span class="pl-k">=</span> <span class="pl-c1">MonomialBasis</span><span class="pl-c1">{P,V}</span>(filter,order)

<span class="pl-c"><span class="pl-c">#</span> Create scratch data that can be reused between evaluations</span>
cache <span class="pl-k">=</span> <span class="pl-c1">ScratchData</span>(basis)

<span class="pl-c"><span class="pl-c">#</span> Evaluation point</span>
x <span class="pl-k">=</span> <span class="pl-c1">@SVector</span> <span class="pl-c1">rand</span>(<span class="pl-c1">3</span>)

<span class="pl-c"><span class="pl-c">#</span> Evaluation</span>
v <span class="pl-k">=</span> <span class="pl-c1">zeros</span>(V,<span class="pl-c1">length</span>(basis))
<span class="pl-c1">evaluate!</span>(v,basis,x,cache) <span class="pl-c"><span class="pl-c">#</span> No memory allocation here</span>
<span class="pl-c1">@show</span> v

<span class="pl-c"><span class="pl-c">#</span> Evaluation of the gradient</span>
G <span class="pl-k">=</span> <span class="pl-c1">gradient_type</span>(basis)
<span class="pl-c"><span class="pl-c">#</span> G == SMatrix{2,3,T,6}</span>
v <span class="pl-k">=</span> <span class="pl-c1">zeros</span>(G,<span class="pl-c1">length</span>(basis))
<span class="pl-c1">gradient!</span>(v,basis,x,cache) <span class="pl-c"><span class="pl-c">#</span> No memory allocation here</span>
<span class="pl-c1">@show</span> v</pre></div>
<h3><a id="user-content-create-a-tensor-valued-monomial-basis-of-the-serendipity-space-in-3-variables-this-time-using-the-types-of-the-tensorvalues-package" class="anchor" aria-hidden="true" href="#create-a-tensor-valued-monomial-basis-of-the-serendipity-space-in-3-variables-this-time-using-the-types-of-the-tensorvalues-package"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Create a Tensor-valued monomial basis of the "serendipity" space in 3 variables (this time using the types of the TensorValues package)</h3>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> TensorValues

<span class="pl-c"><span class="pl-c">#</span> Define the filter for the serendipity space</span>
<span class="pl-en">filter</span>(e,order) <span class="pl-k">=</span> <span class="pl-c1">sum</span>( ( i <span class="pl-k">for</span> i <span class="pl-k">in</span> e <span class="pl-k">if</span> i<span class="pl-k">&gt;</span><span class="pl-c1">1</span> ) ) <span class="pl-k">&lt;=</span> order

order<span class="pl-k">=</span> <span class="pl-c1">3</span>
P <span class="pl-k">=</span> VectorValue{<span class="pl-c1">3</span>,Float64} <span class="pl-c"><span class="pl-c">#</span> type of the evaluation point</span>
V <span class="pl-k">=</span> TensorValue{<span class="pl-c1">3</span>,Float64,<span class="pl-c1">9</span>} <span class="pl-c"><span class="pl-c">#</span> type of the value (3x3 tensor)</span>

basis <span class="pl-k">=</span> <span class="pl-c1">MonomialBasis</span><span class="pl-c1">{P,V}</span>(filter,order)

<span class="pl-c"><span class="pl-c">#</span> Create scratch data that can be reused between evaluations</span>
cache <span class="pl-k">=</span> <span class="pl-c1">ScratchData</span>(basis)

<span class="pl-c"><span class="pl-c">#</span> Evaluation point</span>
x <span class="pl-k">=</span> <span class="pl-c1">VectorValue</span>(<span class="pl-c1">0.1</span>,<span class="pl-c1">2.0</span>,<span class="pl-c1">3.1</span>)

<span class="pl-c"><span class="pl-c">#</span> Evaluation</span>
v <span class="pl-k">=</span> <span class="pl-c1">zeros</span>(V,<span class="pl-c1">length</span>(basis))
<span class="pl-c1">evaluate!</span>(v,basis,x,cache) <span class="pl-c"><span class="pl-c">#</span> No memory allocation here</span>
<span class="pl-c1">@show</span> v
</pre></div>
</article></div>