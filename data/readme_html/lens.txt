<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-a-lens-into-the-soul-of-your-program" class="anchor" aria-hidden="true" href="#a-lens-into-the-soul-of-your-program"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>A Lens into the Soul of your Program</h1>
<p><a href="https://travis-ci.org/zenna/Lens.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/fcd652c075c9268f3cec88a5a21e5de37b6b8f6b05c81919e85d4d8f6cdf14e5/68747470733a2f2f7472617669732d63692e6f72672f7a656e6e612f4c656e732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/zenna/Lens.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p>Lens.jl is a simple Julia package which makes it easy to dynamically inspect and extract values deep within a program, with minimal interference to the program itself.</p>
<p>The philosophy of Lens is that observation should not imply interference.  A running program is like a machine; there are many possible things we might like to know about its behaviour, but we want a clean interface that doesn't require us to mutate our machine in order to observe it.</p>
<h1><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h1>
<p>Lens is in the official Julia Package repository.  You can easily install it from a Julia REPL with:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="] add Lens
"><pre>] add Lens</pre></div>
<h1><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h1>
<p>Suppose we have a function which <a href="http://en.wikipedia.org/wiki/Bubble_sort" rel="nofollow">bubble sorts</a> an array:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="struct Loop end
struct LoopEnd end
function bubblesort(a::AbstractArray{T,1}) where T
  b = copy(a)
  isordered = false
  span = length(b)
  i = 0
  while !isordered &amp;&amp; span &gt; 1
    lens(Loop, (b = b, i = i)) # &lt;--- lens here!!
    isordered = true
    for i in 2:span
      if b[i] &lt; b[i-1]
        t = b[i]
        b[i] = b[i-1]
        b[i-1] = t
        isordered = false
      end
    end
    span -= 1
    i += 1
  end
  lens(LoopEnd, (sorteddata = b, niters = i)) # &lt;--- and here!!
  return b
end
"><pre><span class="pl-k">struct</span> Loop <span class="pl-k">end</span>
<span class="pl-k">struct</span> LoopEnd <span class="pl-k">end</span>
<span class="pl-k">function</span> <span class="pl-en">bubblesort</span>(a<span class="pl-k">::</span><span class="pl-c1">AbstractArray{T,1}</span>) <span class="pl-k">where</span> T
  b <span class="pl-k">=</span> <span class="pl-c1">copy</span>(a)
  isordered <span class="pl-k">=</span> <span class="pl-c1">false</span>
  span <span class="pl-k">=</span> <span class="pl-c1">length</span>(b)
  i <span class="pl-k">=</span> <span class="pl-c1">0</span>
  <span class="pl-k">while</span> <span class="pl-k">!</span>isordered <span class="pl-k">&amp;&amp;</span> span <span class="pl-k">&gt;</span> <span class="pl-c1">1</span>
    <span class="pl-c1">lens</span>(Loop, (b <span class="pl-k">=</span> b, i <span class="pl-k">=</span> i)) <span class="pl-c"><span class="pl-c">#</span> &lt;--- lens here!!</span>
    isordered <span class="pl-k">=</span> <span class="pl-c1">true</span>
    <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">2</span><span class="pl-k">:</span>span
      <span class="pl-k">if</span> b[i] <span class="pl-k">&lt;</span> b[i<span class="pl-k">-</span><span class="pl-c1">1</span>]
        t <span class="pl-k">=</span> b[i]
        b[i] <span class="pl-k">=</span> b[i<span class="pl-k">-</span><span class="pl-c1">1</span>]
        b[i<span class="pl-k">-</span><span class="pl-c1">1</span>] <span class="pl-k">=</span> t
        isordered <span class="pl-k">=</span> <span class="pl-c1">false</span>
      <span class="pl-k">end</span>
    <span class="pl-k">end</span>
    span <span class="pl-k">-=</span> <span class="pl-c1">1</span>
    i <span class="pl-k">+=</span> <span class="pl-c1">1</span>
  <span class="pl-k">end</span>
  <span class="pl-c1">lens</span>(LoopEnd, (sorteddata <span class="pl-k">=</span> b, niters <span class="pl-k">=</span> i)) <span class="pl-c"><span class="pl-c">#</span> &lt;--- and here!!</span>
  <span class="pl-k">return</span> b
<span class="pl-k">end</span></pre></div>
<p>The algorithm details do not matter; what is important is the <code>lens</code>.  Lenses are created in the form:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="lens(lenslabel, x, y, ...)
"><pre><span class="pl-c1">lens</span>(lenslabel, x, y, <span class="pl-k">...</span>)</pre></div>
<p>The first argument is a label which gives a name to the lens.  We'll need to remember the name for later when we attach functions to the lens.
The remaining arguments <code>x, y,...</code> are any values you want the lens to capture.
It is recommended to use keyword <code>NamedTuples</code></p>
<p>Lenses capture values we specify, then propagate that data onto listeners.
Lenses themselves do not contain any information about the listeners, the listeners are attached onto Lens in the context of a particular execution.
This is achieved with Lens Evaluation <code>@leval</code></p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="lmap = (start_of_loop = ((b, i)) -&gt; , end_of_loop = println)
@leval bubblesort lmap
"><pre>lmap <span class="pl-k">=</span> (start_of_loop <span class="pl-k">=</span> ((b, i)) <span class="pl-k">-&gt;</span> , end_of_loop <span class="pl-k">=</span> println)
<span class="pl-c1">@leval</span> bubblesort lmap</pre></div>
<p>The second argument of @leval is a lens map (often abbreivated to <code>lmap</code>).  In this simplest form, it is a <code>NamedTuple</code> where mapping lens names to funtions.</p>
</article></div>