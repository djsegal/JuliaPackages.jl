<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-spinmontecarlojl" class="anchor" aria-hidden="true" href="#spinmontecarlojl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>SpinMonteCarlo.jl</h1>

<p><a href="https://yomichi.github.io/SpinMonteCarlo.jl/latest" rel="nofollow"><img src="https://camo.githubusercontent.com/56f8252ba8e9d3f0b810769543f77823d2fe031ce560d4c2d69fb1fcad800383/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6c61746573742d626c75652e737667" alt="Docs (latest)" data-canonical-src="https://img.shields.io/badge/docs-latest-blue.svg" style="max-width:100%;"></a>
<a href="https://travis-ci.org/yomichi/SpinMonteCarlo.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/f63ea824d50ecd194fd160b128af973d2176541121edf3ea0955f2aa283e06bb/68747470733a2f2f7472617669732d63692e6f72672f796f6d696368692f5370696e4d6f6e74654361726c6f2e6a6c2e737667" alt="Build status (macos/Linux)" data-canonical-src="https://travis-ci.org/yomichi/SpinMonteCarlo.jl.svg" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/yomichi/spinmontecarlo-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/99b0b8a5e1c7c806b87b167d09b2543f00b415b46e6c331af1d0ed8c085c8a64/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f6f6f787739777573673236626b6c71333f7376673d74727565" alt="Build status (win)" data-canonical-src="https://ci.appveyor.com/api/projects/status/ooxw9wusg26bklq3?svg=true" style="max-width:100%;"></a></p>
<p>Markov chain Monte Carlo solver for finite temperature problem of lattie spin system implemented by <a href="https://julialang.org" rel="nofollow">Julia</a> language.</p>
<h1><a id="user-content-install" class="anchor" aria-hidden="true" href="#install"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Install</h1>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="Pkg&gt; add SpinMonteCarlo
"><pre>Pkg<span class="pl-k">&gt;</span> add SpinMonteCarlo</pre></div>
<h1><a id="user-content-simple-example" class="anchor" aria-hidden="true" href="#simple-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Simple example</h1>
<p><a href="example/simple.jl">The following program</a> calculates temperature v.s. specific heat of the ferromagnetic Ising model on a 16x16 square lattice by Swendsen-Wang algorithm.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using SpinMonteCarlo
using Printf

const model = Ising
const lat = &quot;square lattice&quot;
const L = 16
const update = SW_update!

const Tc = 2.0/log1p(sqrt(2))
const Ts = Tc*range(0.85, stop=1.15, length=31)
const MCS = 8192
const Therm = MCS &gt;&gt; 3

for T in Ts
    params = Dict{String,Any}(&quot;Model&quot;=&gt;model, &quot;Lattice&quot;=&gt;lat,
                              &quot;L&quot;=&gt;L, &quot;T&quot;=&gt;T, &quot;J&quot;=&gt;1.0,
                              &quot;Update Method&quot;=&gt;update,
                              &quot;MCS&quot;=&gt;MCS, &quot;Thermalization&quot;=&gt;Therm,
                             )
    result = runMC(params)
    @printf(&quot;%f %.15f %.15f\n&quot;,
            T, mean(result[&quot;Specific Heat&quot;]), stderror(result[&quot;Specific Heat&quot;]))
end
"><pre><span class="pl-k">using</span> SpinMonteCarlo
<span class="pl-k">using</span> Printf

<span class="pl-k">const</span> model <span class="pl-k">=</span> Ising
<span class="pl-k">const</span> lat <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>square lattice<span class="pl-pds">"</span></span>
<span class="pl-k">const</span> L <span class="pl-k">=</span> <span class="pl-c1">16</span>
<span class="pl-k">const</span> update <span class="pl-k">=</span> SW_update!

<span class="pl-k">const</span> Tc <span class="pl-k">=</span> <span class="pl-c1">2.0</span><span class="pl-k">/</span><span class="pl-c1">log1p</span>(<span class="pl-c1">sqrt</span>(<span class="pl-c1">2</span>))
<span class="pl-k">const</span> Ts <span class="pl-k">=</span> Tc<span class="pl-k">*</span><span class="pl-c1">range</span>(<span class="pl-c1">0.85</span>, stop<span class="pl-k">=</span><span class="pl-c1">1.15</span>, length<span class="pl-k">=</span><span class="pl-c1">31</span>)
<span class="pl-k">const</span> MCS <span class="pl-k">=</span> <span class="pl-c1">8192</span>
<span class="pl-k">const</span> Therm <span class="pl-k">=</span> MCS <span class="pl-k">&gt;&gt;</span> <span class="pl-c1">3</span>

<span class="pl-k">for</span> T <span class="pl-k">in</span> Ts
    params <span class="pl-k">=</span> <span class="pl-c1">Dict</span><span class="pl-c1">{String,Any}</span>(<span class="pl-s"><span class="pl-pds">"</span>Model<span class="pl-pds">"</span></span><span class="pl-k">=&gt;</span>model, <span class="pl-s"><span class="pl-pds">"</span>Lattice<span class="pl-pds">"</span></span><span class="pl-k">=&gt;</span>lat,
                              <span class="pl-s"><span class="pl-pds">"</span>L<span class="pl-pds">"</span></span><span class="pl-k">=&gt;</span>L, <span class="pl-s"><span class="pl-pds">"</span>T<span class="pl-pds">"</span></span><span class="pl-k">=&gt;</span>T, <span class="pl-s"><span class="pl-pds">"</span>J<span class="pl-pds">"</span></span><span class="pl-k">=&gt;</span><span class="pl-c1">1.0</span>,
                              <span class="pl-s"><span class="pl-pds">"</span>Update Method<span class="pl-pds">"</span></span><span class="pl-k">=&gt;</span>update,
                              <span class="pl-s"><span class="pl-pds">"</span>MCS<span class="pl-pds">"</span></span><span class="pl-k">=&gt;</span>MCS, <span class="pl-s"><span class="pl-pds">"</span>Thermalization<span class="pl-pds">"</span></span><span class="pl-k">=&gt;</span>Therm,
                             )
    result <span class="pl-k">=</span> <span class="pl-c1">runMC</span>(params)
    <span class="pl-c1">@printf</span>(<span class="pl-s"><span class="pl-pds">"</span>%f %.15f %.15f<span class="pl-cce">\n</span><span class="pl-pds">"</span></span>,
            T, <span class="pl-c1">mean</span>(result[<span class="pl-s"><span class="pl-pds">"</span>Specific Heat<span class="pl-pds">"</span></span>]), <span class="pl-c1">stderror</span>(result[<span class="pl-s"><span class="pl-pds">"</span>Specific Heat<span class="pl-pds">"</span></span>]))
<span class="pl-k">end</span></pre></div>
<h1><a id="user-content-implemented" class="anchor" aria-hidden="true" href="#implemented"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Implemented</h1>
<h2><a id="user-content-model" class="anchor" aria-hidden="true" href="#model"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Model</h2>
<ul>
<li>Classical spin model
<ul>
<li><code>Ising</code> model</li>
<li><code>Q</code> state <code>Potts</code> model
<ul>
<li>order parameter defined as <code>M = (Q-1)/Q * n_1 - (1-n_1)/Q</code>, where <code>n_1</code> is the number density of <code>q=1</code> spins.</li>
</ul>
</li>
<li><code>XY</code> model</li>
<li><code>Q</code> state <code>Clock</code> model</li>
<li><code>AshkinTeller</code> model</li>
</ul>
</li>
<li>Quantum spin model
<ul>
<li>spin-<code>S</code> <code>QuantumXXZ</code> model
<ul>
<li><code>\mathcal{H} = \sum_{ij} [ Jz_{ij} S_i^z S_j^z + \frac{Jxy_{ij}}{2} (S_i^+ S_j^- + S_i^-S_j^+) ] - \sum_i Gamma_i S_i^x</code></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2><a id="user-content-lattice" class="anchor" aria-hidden="true" href="#lattice"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Lattice</h2>
<ul>
<li><code>chain lattice</code>
<ul>
<li><code>L</code></li>
</ul>
</li>
<li><code>bond-alternating chain lattice</code>
<ul>
<li><code>L</code></li>
</ul>
</li>
<li><code>square lattice</code>
<ul>
<li><code>L * W</code></li>
</ul>
</li>
<li><code>triangular lattice</code>
<ul>
<li><code>L * W</code></li>
</ul>
</li>
<li><code>cubic lattice</code>
<ul>
<li><code>L * W * H</code></li>
</ul>
</li>
<li><code>fully connected graph</code>
<ul>
<li><code>N</code></li>
</ul>
</li>
</ul>
<h2><a id="user-content-update-algorithm" class="anchor" aria-hidden="true" href="#update-algorithm"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Update algorithm</h2>
<ul>
<li>Classical spin
<ul>
<li><code>local_update!</code></li>
<li><code>SW_update!</code></li>
<li><code>Wolff_update!</code></li>
</ul>
</li>
<li>Quantum spin
<ul>
<li><code>loop_update!</code></li>
</ul>
</li>
</ul>
<h2><a id="user-content-physical-quantities" class="anchor" aria-hidden="true" href="#physical-quantities"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Physical quantities</h2>
<ul>
<li><code>Ising</code>, <code>Potts</code>
<ul>
<li><code>Magnetization</code>
<ul>
<li><code>:= &lt; M_total/N_site &gt;</code></li>
</ul>
</li>
<li><code>|Magnetization|</code>
<ul>
<li><code>:= &lt; |M_total/N_site| &gt;</code></li>
</ul>
</li>
<li><code>Magnetization^2</code>
<ul>
<li><code>:= &lt; (M_total/N_site)^2 &gt;</code></li>
</ul>
</li>
<li><code>Magnetization^4</code>
<ul>
<li><code>:= &lt; (M_total/N_site)^4 &gt;</code></li>
</ul>
</li>
<li><code>Binder Ratio</code>
<ul>
<li><code>:= "Magnetization^4")/"Magnetization^2"^2</code></li>
</ul>
</li>
<li><code>Susceptibility</code>
<ul>
<li><code>:= \partial_h "Magnetization" = (N/T) * ("Magnetization^2" - "Magnetization"^2)</code></li>
</ul>
</li>
<li><code>Connected Susceptibility</code>
<ul>
<li><code>:= (N_site/T) * ("Magnetization^2"- "|Magnetization|"^2)</code></li>
</ul>
</li>
<li><code>Energy</code>
<ul>
<li><code>:= &lt; E_total/N_site &gt;</code></li>
</ul>
</li>
<li><code>Energy^2</code>
<ul>
<li><code>:= &lt; (E_total/N_site)^2 &gt;</code></li>
</ul>
</li>
<li><code>Specific Heat</code>
<ul>
<li><code>:= \partial_beta "Energy" = (N/T^2)*("Energy^2" - "Energy"^2)</code></li>
</ul>
</li>
</ul>
</li>
<li><code>XY</code>, <code>Clock</code>
<ul>
<li><code>|Magnetization|</code></li>
<li><code>|Magnetization|^2</code></li>
<li><code>|Magnetization|^4</code></li>
<li><code>Binder Ratio</code></li>
<li><code>Susceptibility</code></li>
<li><code>Connected Susceptibility</code></li>
<li><code>Magnetization x</code></li>
<li><code>|Magnetization x|</code></li>
<li><code>Magnetization x^2</code></li>
<li><code>Magnetization x^4</code></li>
<li><code>Binder Ratio x</code></li>
<li><code>Susceptibility x</code></li>
<li><code>Connected Susceptibility x</code></li>
<li><code>Magnetization y</code></li>
<li><code>|Magnetization y|</code></li>
<li><code>Magnetization y^2</code></li>
<li><code>Magnetization y^4</code></li>
<li><code>Binder Ratio y</code></li>
<li><code>Susceptibility y</code></li>
<li><code>Connected Susceptibility y</code></li>
<li><code>Helicity Modulus x</code></li>
<li><code>Helicity Modulus y</code></li>
<li><code>Energy</code></li>
<li><code>Energy^2</code></li>
<li><code>Specific Heat</code></li>
</ul>
</li>
<li><code>QuantumXXZ</code>
<ul>
<li><code>Magnetization</code>
<ul>
<li><code>:= &lt; \sum_i S_i^z &gt; / Nsite</code></li>
</ul>
</li>
<li><code>Magnetization^2</code>
<ul>
<li><code>:= &lt; (\sum_i S_i^z)^2 &gt; / Nsite^2</code></li>
</ul>
</li>
<li><code>Magnetization^4</code>
<ul>
<li><code>:= &lt; (\sum_i S_i^z)^4 &gt; / Nsite^4</code></li>
</ul>
</li>
<li><code>Binder Ratio</code>
<ul>
<li><code>:= "Magnetization^4")/"Magnetization^2"^2</code></li>
</ul>
</li>
<li><code>Susceptibility</code>
<ul>
<li><code>:= \partial_h "Magnetization" = (N/T) * ("Magnetization^2" - "Magnetization"^2)</code></li>
</ul>
</li>
<li><code>Energy</code>
<ul>
<li><code>:= &lt; \mathcal{H} &gt; / Nsite</code></li>
</ul>
</li>
<li><code>Energy^2</code>
<ul>
<li><code>:= &lt; \mathcal{H}^2 &gt; / Nsite^2</code></li>
</ul>
</li>
<li><code>Specific Heat</code>
<ul>
<li><code>:= \partial_beta "Energy" = (N/T^2)*("Energy^2" - "Energy"^2)</code></li>
</ul>
</li>
</ul>
</li>
</ul>
<h1><a id="user-content-future-work" class="anchor" aria-hidden="true" href="#future-work"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Future work</h1>
<ul>
<li><code>Model</code>
<ul>
<li>Classical model
<ul>
<li>Heisenberg model</li>
<li>antiferro interaction</li>
<li>magnetic field</li>
</ul>
</li>
<li>Quantum model
<ul>
<li>SU(N) model</li>
</ul>
</li>
</ul>
</li>
<li><code>Update Method</code>
<ul>
<li>worm algorithm</li>
</ul>
</li>
<li>Others
<ul>
<li>random number parallelization
<ul>
<li>NOTE: parameter parallelization can be realized simply by using <code>@parallel for</code> or <code>pmap</code>.</li>
</ul>
</li>
<li>write algorithmic note
<ul>
<li>especially, Foutuin-Kasteleyn representaion and improved estimators</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1><a id="user-content-author" class="anchor" aria-hidden="true" href="#author"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Author</h1>
<p><a href="https://github.com/yomichi">Yuichi Motoyama</a>, the University of Tokyo, 2016-</p>
<p>This package distributed under the MIT license.</p>
</article></div>