<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-distmesh2djl" class="anchor" aria-hidden="true" href="#distmesh2djl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>DistMesh2D.jl</h1>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/jstarczewski/DistMesh2D.jl/workflows/CI/badge.svg"><img src="https://github.com/jstarczewski/DistMesh2D.jl/workflows/CI/badge.svg" alt="CI" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/jstarczewski/DistMesh2D.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/3e6515367d8e85e3d44ee59f423abf0fd980bed2372171863b1a20c4c2ff31f8/68747470733a2f2f636f6465636f762e696f2f67682f6a73746172637a6577736b692f446973744d65736832442e6a6c2f6d61696e2f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/jstarczewski/DistMesh2D.jl/main/graph/badge.svg" style="max-width: 100%;"></a>
<br><br>
The package provides Julia implementation of <a href="http://persson.berkeley.edu/distmesh/" rel="nofollow">DistMesh</a> algorithm developed by <a href="http://persson.berkeley.edu/" rel="nofollow">Per-Olof Persson</a> and <a href="http://www-math.mit.edu/~gs/" rel="nofollow">Gilbert Strang</a> allowing to generate meshes on 2D plane, using <a href="https://github.com/robertdj/Deldir.jl">DelDir.jl</a> which is a Julia wrapper for Delaunay triangulations and Voronoi/Dirichlet tessellations. Before using this package <b>I highly recommend reading <a href="http://persson.berkeley.edu/distmesh/persson04mesh.pdf" rel="nofollow">this document</a> covering basic MATLAB's use-cases, because this packages tries to provide similar runtime interface to original one.</b>
<br><br></p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">To use DistMesh2D.jl clone the repository and add it to the local package registry.</p>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<p dir="auto">To generate a mesh, define a <a href="http://persson.berkeley.edu/distmesh/persson04mesh.pdf" rel="nofollow">signed distance function</a>, desired edge length function, bounding box, distance between points in initial distribution and run the meshing algorithm.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; fdistance(p) = sqrt(sum(p .^ 2)) - 1
fdistance (generic function with 1 method)

julia&gt; fedgelength(p) = 1.0
fedgelength (generic function with 1 method)

julia&gt; boundingbox = [-1.0 -1.0; 1.0 1.0]
2×2 Array{Float64,2}:
 -1.0  -1.0
  1.0   1.0

julia&gt; initdistance = 0.2
0.2

julia&gt; x, y = distmesh2d(fdistance, fedgelength, boundingbox, initdistance)
([-0.8408297336717067, -0.6993829085766673, NaN, -0.5315455685570857, -0.6993829085766673, NaN, -0.5822722080639808, -0.6993829085766673, NaN, -0.5822722080639808  …  NaN, -0.60618605865758, -0.36756281453508466, NaN, -0.60618605865758, -0.7846917737263828, NaN, -0.60618605865758, -0.5633752938295506, NaN], [-0.5412996931425073, -0.7147471921795109, NaN, -0.8470296986801119, -0.7147471921795109, NaN, -0.5521369576265936, -0.7147471921795109, NaN, -0.5521369576265936  …  NaN, 0.795322867083831, 0.92999869760509, NaN, 0.795322867083831, 0.6198861346071187, NaN, 0.795322867083831, 0.5800262182849156, NaN])"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-en">fdistance</span>(p) <span class="pl-k">=</span> <span class="pl-c1">sqrt</span>(<span class="pl-c1">sum</span>(p <span class="pl-k">.^</span> <span class="pl-c1">2</span>)) <span class="pl-k">-</span> <span class="pl-c1">1</span>
fdistance (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> <span class="pl-en">fedgelength</span>(p) <span class="pl-k">=</span> <span class="pl-c1">1.0</span>
fedgelength (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> boundingbox <span class="pl-k">=</span> [<span class="pl-k">-</span><span class="pl-c1">1.0</span> <span class="pl-k">-</span><span class="pl-c1">1.0</span>; <span class="pl-c1">1.0</span> <span class="pl-c1">1.0</span>]
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">2</span> Array{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-k">-</span><span class="pl-c1">1.0</span>  <span class="pl-k">-</span><span class="pl-c1">1.0</span>
  <span class="pl-c1">1.0</span>   <span class="pl-c1">1.0</span>

julia<span class="pl-k">&gt;</span> initdistance <span class="pl-k">=</span> <span class="pl-c1">0.2</span>
<span class="pl-c1">0.2</span>

julia<span class="pl-k">&gt;</span> x, y <span class="pl-k">=</span> <span class="pl-c1">distmesh2d</span>(fdistance, fedgelength, boundingbox, initdistance)
([<span class="pl-k">-</span><span class="pl-c1">0.8408297336717067</span>, <span class="pl-k">-</span><span class="pl-c1">0.6993829085766673</span>, <span class="pl-c1">NaN</span>, <span class="pl-k">-</span><span class="pl-c1">0.5315455685570857</span>, <span class="pl-k">-</span><span class="pl-c1">0.6993829085766673</span>, <span class="pl-c1">NaN</span>, <span class="pl-k">-</span><span class="pl-c1">0.5822722080639808</span>, <span class="pl-k">-</span><span class="pl-c1">0.6993829085766673</span>, <span class="pl-c1">NaN</span>, <span class="pl-k">-</span><span class="pl-c1">0.5822722080639808</span>  …  <span class="pl-c1">NaN</span>, <span class="pl-k">-</span><span class="pl-c1">0.60618605865758</span>, <span class="pl-k">-</span><span class="pl-c1">0.36756281453508466</span>, <span class="pl-c1">NaN</span>, <span class="pl-k">-</span><span class="pl-c1">0.60618605865758</span>, <span class="pl-k">-</span><span class="pl-c1">0.7846917737263828</span>, <span class="pl-c1">NaN</span>, <span class="pl-k">-</span><span class="pl-c1">0.60618605865758</span>, <span class="pl-k">-</span><span class="pl-c1">0.5633752938295506</span>, <span class="pl-c1">NaN</span>], [<span class="pl-k">-</span><span class="pl-c1">0.5412996931425073</span>, <span class="pl-k">-</span><span class="pl-c1">0.7147471921795109</span>, <span class="pl-c1">NaN</span>, <span class="pl-k">-</span><span class="pl-c1">0.8470296986801119</span>, <span class="pl-k">-</span><span class="pl-c1">0.7147471921795109</span>, <span class="pl-c1">NaN</span>, <span class="pl-k">-</span><span class="pl-c1">0.5521369576265936</span>, <span class="pl-k">-</span><span class="pl-c1">0.7147471921795109</span>, <span class="pl-c1">NaN</span>, <span class="pl-k">-</span><span class="pl-c1">0.5521369576265936</span>  …  <span class="pl-c1">NaN</span>, <span class="pl-c1">0.795322867083831</span>, <span class="pl-c1">0.92999869760509</span>, <span class="pl-c1">NaN</span>, <span class="pl-c1">0.795322867083831</span>, <span class="pl-c1">0.6198861346071187</span>, <span class="pl-c1">NaN</span>, <span class="pl-c1">0.795322867083831</span>, <span class="pl-c1">0.5800262182849156</span>, <span class="pl-c1">NaN</span>])</pre></div>
<p dir="auto">The output of a given function are points that are ready to be plotted with one of the available plotting libraries.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using Gadfly

julia&gt; Gadfly.plot(x = x, y = y, Geom.path, Coord.cartesian(fixed = true))"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Gadfly

julia<span class="pl-k">&gt;</span> Gadfly<span class="pl-k">.</span><span class="pl-c1">plot</span>(x <span class="pl-k">=</span> x, y <span class="pl-k">=</span> y, Geom<span class="pl-k">.</span>path, Coord<span class="pl-k">.</span><span class="pl-c1">cartesian</span>(fixed <span class="pl-k">=</span> <span class="pl-c1">true</span>))</pre></div>
<p dir="auto">The output mesh<br><br>
<a target="_blank" rel="noopener noreferrer nofollow" href="https://user-images.githubusercontent.com/36159919/102119293-2c2ee800-3e41-11eb-8593-663567132d38.png"><img src="https://user-images.githubusercontent.com/36159919/102119293-2c2ee800-3e41-11eb-8593-663567132d38.png" alt="circle" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-generating-more-complex-meshes" class="anchor" aria-hidden="true" href="#generating-more-complex-meshes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Generating more complex meshes</h2>
<p dir="auto">Library provides simple generic signed distance functions to define popular shapes like <code>dcircle</code> and <code>drectangle</code>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="function drectangle(
    p,
    x1::T,
    x2::T,
    y1::T,
    y2::T,
)::T where {T&lt;:Float64}
    return -min(min(min(-y1 + p[2], y2 - p[2], -x1 + p[1], x2 - p[1])))
end

function dcircle(
    p,
    xc::T,
    yc::T,
    r::T
)::T where {T&lt;:Float64}
    return sqrt((p[1] - xc) .^ 2 + (p[2] - yc) .^ 2) - r
end"><pre><span class="pl-k">function</span> <span class="pl-en">drectangle</span>(
    p,
    x1<span class="pl-k">::</span><span class="pl-c1">T</span>,
    x2<span class="pl-k">::</span><span class="pl-c1">T</span>,
    y1<span class="pl-k">::</span><span class="pl-c1">T</span>,
    y2<span class="pl-k">::</span><span class="pl-c1">T</span>,
)<span class="pl-k">::</span><span class="pl-c1">T</span> <span class="pl-k">where</span> {T<span class="pl-k">&lt;:</span><span class="pl-c1">Float64</span>}
    <span class="pl-k">return</span> <span class="pl-k">-</span><span class="pl-c1">min</span>(<span class="pl-c1">min</span>(<span class="pl-c1">min</span>(<span class="pl-k">-</span>y1 <span class="pl-k">+</span> p[<span class="pl-c1">2</span>], y2 <span class="pl-k">-</span> p[<span class="pl-c1">2</span>], <span class="pl-k">-</span>x1 <span class="pl-k">+</span> p[<span class="pl-c1">1</span>], x2 <span class="pl-k">-</span> p[<span class="pl-c1">1</span>])))
<span class="pl-k">end</span>

<span class="pl-k">function</span> <span class="pl-en">dcircle</span>(
    p,
    xc<span class="pl-k">::</span><span class="pl-c1">T</span>,
    yc<span class="pl-k">::</span><span class="pl-c1">T</span>,
    r<span class="pl-k">::</span><span class="pl-c1">T</span>
)<span class="pl-k">::</span><span class="pl-c1">T</span> <span class="pl-k">where</span> {T<span class="pl-k">&lt;:</span><span class="pl-c1">Float64</span>}
    <span class="pl-k">return</span> <span class="pl-c1">sqrt</span>((p[<span class="pl-c1">1</span>] <span class="pl-k">-</span> xc) <span class="pl-k">.^</span> <span class="pl-c1">2</span> <span class="pl-k">+</span> (p[<span class="pl-c1">2</span>] <span class="pl-k">-</span> yc) <span class="pl-k">.^</span> <span class="pl-c1">2</span>) <span class="pl-k">-</span> r
<span class="pl-k">end</span></pre></div>
<p dir="auto">Library provides simple operations on shapes like union, difference and intersections with via functions like <code>dunion</code> <code>ddiff</code> and <code>dintersect</code>. In each definition <code>p</code> is considered point. Other parameters are proper signed distance functions.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="function dunion(
    p,
    dfs::Function...,
)::Float64
    return min([fun(p) for fun in dfs]...)
end

function ddiff(
    p,
    d1::Function,
    dfs::Function...
)::Float64
    return max(d1(p), [-fun(p) for fun in dfs]...)
end

function dintersect(
        p,
        dfs::Function...
)::Float64
    return max([fun(p) for fun in dfs]...)
end"><pre><span class="pl-k">function</span> <span class="pl-en">dunion</span>(
    p,
    dfs<span class="pl-k">::</span><span class="pl-c1">Function...</span>,
)<span class="pl-k">::</span><span class="pl-c1">Float64</span>
    <span class="pl-k">return</span> <span class="pl-c1">min</span>([<span class="pl-c1">fun</span>(p) <span class="pl-k">for</span> fun <span class="pl-k">in</span> dfs]<span class="pl-k">.</span><span class="pl-k">..</span>)
<span class="pl-k">end</span>

<span class="pl-k">function</span> <span class="pl-en">ddiff</span>(
    p,
    d1<span class="pl-k">::</span><span class="pl-c1">Function</span>,
    dfs<span class="pl-k">::</span><span class="pl-c1">Function...</span>
)<span class="pl-k">::</span><span class="pl-c1">Float64</span>
    <span class="pl-k">return</span> <span class="pl-c1">max</span>(<span class="pl-c1">d1</span>(p), [<span class="pl-k">-</span><span class="pl-c1">fun</span>(p) <span class="pl-k">for</span> fun <span class="pl-k">in</span> dfs]<span class="pl-k">.</span><span class="pl-k">..</span>)
<span class="pl-k">end</span>

<span class="pl-k">function</span> <span class="pl-en">dintersect</span>(
        p,
        dfs<span class="pl-k">::</span><span class="pl-c1">Function...</span>
)<span class="pl-k">::</span><span class="pl-c1">Float64</span>
    <span class="pl-k">return</span> <span class="pl-c1">max</span>([<span class="pl-c1">fun</span>(p) <span class="pl-k">for</span> fun <span class="pl-k">in</span> dfs]<span class="pl-k">.</span><span class="pl-k">..</span>)
<span class="pl-k">end</span></pre></div>
<p dir="auto">Other useful functions are <code>huniform</code> which provides uniform height distribution for point <code>p</code> and <code>protate</code> which rotates given point by passed value.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="function huniform(p)::Float64
    return ones(size(p, 1), 1)[1]
end

function protate(p,phi)
    return p*[cos(phi) -sin(phi); sin(phi) cos(phi)]
end"><pre><span class="pl-k">function</span> <span class="pl-en">huniform</span>(p)<span class="pl-k">::</span><span class="pl-c1">Float64</span>
    <span class="pl-k">return</span> <span class="pl-c1">ones</span>(<span class="pl-c1">size</span>(p, <span class="pl-c1">1</span>), <span class="pl-c1">1</span>)[<span class="pl-c1">1</span>]
<span class="pl-k">end</span>

<span class="pl-k">function</span> <span class="pl-en">protate</span>(p,phi)
    <span class="pl-k">return</span> p<span class="pl-k">*</span>[<span class="pl-c1">cos</span>(phi) <span class="pl-k">-</span><span class="pl-c1">sin</span>(phi); <span class="pl-c1">sin</span>(phi) <span class="pl-c1">cos</span>(phi)]
<span class="pl-k">end</span></pre></div>
<h3 dir="auto"><a id="user-content-non-uniform-height-function" class="anchor" aria-hidden="true" href="#non-uniform-height-function"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Non-uniform height function</h3>
<p dir="auto">Meshes with non uniform height functions also can be easily plotted. First we define signed distance functions which in this example is a rectangle with circle hole inside.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; outrect(p) = drectangle(p, -100.0, 100.0, -100.0, 100.0)
outrect (generic function with 1 method)

julia&gt; incircle(p) = dcircle(p, 0.0, 0.0, 40.0)
incircle (generic function with 1 method)

julia&gt; fd(p) = ddiff(p, outrect, incircle)
fd (generic function with 1 method)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-en">outrect</span>(p) <span class="pl-k">=</span> <span class="pl-c1">drectangle</span>(p, <span class="pl-k">-</span><span class="pl-c1">100.0</span>, <span class="pl-c1">100.0</span>, <span class="pl-k">-</span><span class="pl-c1">100.0</span>, <span class="pl-c1">100.0</span>)
outrect (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> <span class="pl-en">incircle</span>(p) <span class="pl-k">=</span> <span class="pl-c1">dcircle</span>(p, <span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">40.0</span>)
incircle (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> <span class="pl-en">fd</span>(p) <span class="pl-k">=</span> <span class="pl-c1">ddiff</span>(p, outrect, incircle)
fd (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)</pre></div>
<p dir="auto">Then we define height functions which is not going to return the same value for every input parameters, but will give finer resolution closer to the circle.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; fh(p) = min(4 * sqrt(sum(p.^2)) - 100)
fh (generic function with 1 method)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-en">fh</span>(p) <span class="pl-k">=</span> <span class="pl-c1">min</span>(<span class="pl-c1">4</span> <span class="pl-k">*</span> <span class="pl-c1">sqrt</span>(<span class="pl-c1">sum</span>(p<span class="pl-k">.^</span><span class="pl-c1">2</span>)) <span class="pl-k">-</span> <span class="pl-c1">100</span>)
fh (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)</pre></div>
<p dir="auto">Next we define a bounding box <code>bbox</code> that can fit our rectangle and a value representing distance between points in initial distribution.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; bbox = [-100.0 -100.0; 100.0 100.0]
2×2 Array{Float64,2}:
 -100.0  -100.0
  100.0   100.0

julia&gt; h0 = 10.0
10.0"><pre>julia<span class="pl-k">&gt;</span> bbox <span class="pl-k">=</span> [<span class="pl-k">-</span><span class="pl-c1">100.0</span> <span class="pl-k">-</span><span class="pl-c1">100.0</span>; <span class="pl-c1">100.0</span> <span class="pl-c1">100.0</span>]
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">2</span> Array{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-k">-</span><span class="pl-c1">100.0</span>  <span class="pl-k">-</span><span class="pl-c1">100.0</span>
  <span class="pl-c1">100.0</span>   <span class="pl-c1">100.0</span>

julia<span class="pl-k">&gt;</span> h0 <span class="pl-k">=</span> <span class="pl-c1">10.0</span>
<span class="pl-c1">10.0</span></pre></div>
<p dir="auto">To let the rectangle withstand the triangulation we need to defined its corner points as fixed.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; pfix = [-100.0 -100.0; -100.0 100.0; 100.0 -100.0; 100.0 100.0]
4×2 Array{Float64,2}:
 -100.0  -100.0
 -100.0   100.0
  100.0  -100.0
  100.0   100.0"><pre>julia<span class="pl-k">&gt;</span> pfix <span class="pl-k">=</span> [<span class="pl-k">-</span><span class="pl-c1">100.0</span> <span class="pl-k">-</span><span class="pl-c1">100.0</span>; <span class="pl-k">-</span><span class="pl-c1">100.0</span> <span class="pl-c1">100.0</span>; <span class="pl-c1">100.0</span> <span class="pl-k">-</span><span class="pl-c1">100.0</span>; <span class="pl-c1">100.0</span> <span class="pl-c1">100.0</span>]
<span class="pl-c1">4</span><span class="pl-k">×</span><span class="pl-c1">2</span> Array{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-k">-</span><span class="pl-c1">100.0</span>  <span class="pl-k">-</span><span class="pl-c1">100.0</span>
 <span class="pl-k">-</span><span class="pl-c1">100.0</span>   <span class="pl-c1">100.0</span>
  <span class="pl-c1">100.0</span>  <span class="pl-k">-</span><span class="pl-c1">100.0</span>
  <span class="pl-c1">100.0</span>   <span class="pl-c1">100.0</span></pre></div>
<p dir="auto">Finally we define the <code>dptol</code> parameter which represents the limit value. Algorithms will loop as long as all movements, relative to bar lengths in given iteration are not below it.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; dptol = 0.003
0.003

julia&gt; x, y = distmesh2d(fd, fh, bbox, h0, pfix=pfix, dptol=dptol)
([-100.0, -76.71718215838415, NaN, -62.29844095886764, -76.71718215838415, NaN, -100.0, -76.71718215838415, NaN, -100.0  …  NaN, 100.0, 100.0, NaN, 100.0, 78.01048490854643, NaN, 100.0, 80.72224653575613, NaN], [-80.56252474196684, -77.31440723125387, NaN, -62.263859671319544, -77.31440723125387, NaN, -65.15571042094268, -77.31440723125387, NaN, -65.15571042094268  …  NaN, 79.78462487451092, 63.972558404391755, NaN, 79.78462487451092, 76.7946778947107, NaN, 79.78462487451092, 100.0, NaN])

julia&gt; Gadfly.plot(x = x, y = y, Geom.path, Coord.cartesian(fixed = true))"><pre>julia<span class="pl-k">&gt;</span> dptol <span class="pl-k">=</span> <span class="pl-c1">0.003</span>
<span class="pl-c1">0.003</span>

julia<span class="pl-k">&gt;</span> x, y <span class="pl-k">=</span> <span class="pl-c1">distmesh2d</span>(fd, fh, bbox, h0, pfix<span class="pl-k">=</span>pfix, dptol<span class="pl-k">=</span>dptol)
([<span class="pl-k">-</span><span class="pl-c1">100.0</span>, <span class="pl-k">-</span><span class="pl-c1">76.71718215838415</span>, <span class="pl-c1">NaN</span>, <span class="pl-k">-</span><span class="pl-c1">62.29844095886764</span>, <span class="pl-k">-</span><span class="pl-c1">76.71718215838415</span>, <span class="pl-c1">NaN</span>, <span class="pl-k">-</span><span class="pl-c1">100.0</span>, <span class="pl-k">-</span><span class="pl-c1">76.71718215838415</span>, <span class="pl-c1">NaN</span>, <span class="pl-k">-</span><span class="pl-c1">100.0</span>  …  <span class="pl-c1">NaN</span>, <span class="pl-c1">100.0</span>, <span class="pl-c1">100.0</span>, <span class="pl-c1">NaN</span>, <span class="pl-c1">100.0</span>, <span class="pl-c1">78.01048490854643</span>, <span class="pl-c1">NaN</span>, <span class="pl-c1">100.0</span>, <span class="pl-c1">80.72224653575613</span>, <span class="pl-c1">NaN</span>], [<span class="pl-k">-</span><span class="pl-c1">80.56252474196684</span>, <span class="pl-k">-</span><span class="pl-c1">77.31440723125387</span>, <span class="pl-c1">NaN</span>, <span class="pl-k">-</span><span class="pl-c1">62.263859671319544</span>, <span class="pl-k">-</span><span class="pl-c1">77.31440723125387</span>, <span class="pl-c1">NaN</span>, <span class="pl-k">-</span><span class="pl-c1">65.15571042094268</span>, <span class="pl-k">-</span><span class="pl-c1">77.31440723125387</span>, <span class="pl-c1">NaN</span>, <span class="pl-k">-</span><span class="pl-c1">65.15571042094268</span>  …  <span class="pl-c1">NaN</span>, <span class="pl-c1">79.78462487451092</span>, <span class="pl-c1">63.972558404391755</span>, <span class="pl-c1">NaN</span>, <span class="pl-c1">79.78462487451092</span>, <span class="pl-c1">76.7946778947107</span>, <span class="pl-c1">NaN</span>, <span class="pl-c1">79.78462487451092</span>, <span class="pl-c1">100.0</span>, <span class="pl-c1">NaN</span>])

julia<span class="pl-k">&gt;</span> Gadfly<span class="pl-k">.</span><span class="pl-c1">plot</span>(x <span class="pl-k">=</span> x, y <span class="pl-k">=</span> y, Geom<span class="pl-k">.</span>path, Coord<span class="pl-k">.</span><span class="pl-c1">cartesian</span>(fixed <span class="pl-k">=</span> <span class="pl-c1">true</span>))</pre></div>
<p dir="auto">The output mesh<br><br>
<a target="_blank" rel="noopener noreferrer nofollow" href="https://user-images.githubusercontent.com/36159919/102122818-5afb8d00-3e46-11eb-8bad-f1baaa09d241.png"><img src="https://user-images.githubusercontent.com/36159919/102122818-5afb8d00-3e46-11eb-8bad-f1baaa09d241.png" alt="nonuni" style="max-width: 100%;"></a></p>
<h3 dir="auto"><a id="user-content-composing-shapes" class="anchor" aria-hidden="true" href="#composing-shapes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Composing shapes</h3>
<p dir="auto">Let's say we want to mesh a simplified version of R2D2 head. By "simplified" I mean a semicircle with a hole in the center. We are going to work on <code>bbox = [0.0 0.0; 20.0 10.0]</code> and <code>h0 = 0.25</code>. First we define the hole as a small circle.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; sc(p) = dcircle(p, 10.0, 5.0, 3.0)
sc (generic function with 1 method)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-en">sc</span>(p) <span class="pl-k">=</span> <span class="pl-c1">dcircle</span>(p, <span class="pl-c1">10.0</span>, <span class="pl-c1">5.0</span>, <span class="pl-c1">3.0</span>)
sc (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)</pre></div>
<p dir="auto">Then we define a bigger circle.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; bc(p) = dcircle(p, 10.0, 0.0, 10.0)
bc (generic function with 1 method)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-en">bc</span>(p) <span class="pl-k">=</span> <span class="pl-c1">dcircle</span>(p, <span class="pl-c1">10.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">10.0</span>)
bc (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)</pre></div>
<p dir="auto">Next we want the smaller circle to stay empty during triangulation so we calculate the difference between functions.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; fds(p) = ddiff(p, bc, sc)
fds (generic function with 1 method)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-en">fds</span>(p) <span class="pl-k">=</span> <span class="pl-c1">ddiff</span>(p, bc, sc)
fds (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)</pre></div>
<p dir="auto">Finally we define a rectangle and calculate its intersection with the area represented by the <code>fds</code> function.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; dr(p) = drectangle(p, 0.0, 20.0, 0.0, 10.0)
dr (generic function with 1 method)

julia&gt; fd(p) = dintersect(p, dr, fds)
fd (generic function with 1 method)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-en">dr</span>(p) <span class="pl-k">=</span> <span class="pl-c1">drectangle</span>(p, <span class="pl-c1">0.0</span>, <span class="pl-c1">20.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">10.0</span>)
dr (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> <span class="pl-en">fd</span>(p) <span class="pl-k">=</span> <span class="pl-c1">dintersect</span>(p, dr, fds)
fd (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)</pre></div>
<p dir="auto">We also need two fixed points.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; pfix = [0.0 0.0; 20.0 0.0]
2×2 Array{Float64,2}:
  0.0  0.0
 20.0  0.0"><pre>julia<span class="pl-k">&gt;</span> pfix <span class="pl-k">=</span> [<span class="pl-c1">0.0</span> <span class="pl-c1">0.0</span>; <span class="pl-c1">20.0</span> <span class="pl-c1">0.0</span>]
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">2</span> Array{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>
 <span class="pl-c1">20.0</span>  <span class="pl-c1">0.0</span></pre></div>
<p dir="auto">Finally we mesh our distance, passing additional <code>logmi</code> parameter with value equal to <code>true</code>. This parameter slows down the algorithm, but turns on logging of the minimal move index value that occured in all triangulations so far. Monitoring minimal move index is helpful to determine whether the algorithm is going forward and closer to <code>dptol</code> which by default is equal to <code>0.001</code>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; x, y = distmesh2d(fd, huniform, bbox, h0, pfix=pfix, logmi=true)
[ Info: Minimal move index is 1.7848378957838162
[ Info: Minimal move index is 0.6341210762677251
[ Info: Minimal move index is 0.3189998493116862
.
.
.
.
[ Info: Minimal move index is 0.0010124268021825809
[ Info: Minimal move index is 0.0010102509818988507
[ Info: Minimal move index is 0.0010080823842259872
[ Info: Minimal move index is 0.0010059209713983509
[ Info: Minimal move index is 0.0010037667055315528
[ Info: Minimal move index is 0.0010016195522329304
([0.39168705623677563, 0.24949716765305802, NaN, 1.4066677906807563, 1.1484883086226838, NaN, 2.089037409389501, 1.9403068274377, NaN, 1.6763442046107901  …  NaN, 5.225956577772305, 5.45051039916194, NaN, 5.225956577772305, 4.9344362730766385, NaN, 5.225956577772305, 5.523495989156209, NaN], [2.063690666551136, 2.2198411283347967, NaN, 1.619386786583647, 1.6285058990860535, NaN, 0.0, 0.23721296745446183, NaN, 0.23008747967549248  …  NaN, 8.786837276630676, 8.730320688506946, NaN, 8.786837276630676, 8.622068433075366, NaN, 8.786837276630676, 8.942086553129595, NaN])"><pre>julia<span class="pl-k">&gt;</span> x, y <span class="pl-k">=</span> <span class="pl-c1">distmesh2d</span>(fd, huniform, bbox, h0, pfix<span class="pl-k">=</span>pfix, logmi<span class="pl-k">=</span><span class="pl-c1">true</span>)
[ Info<span class="pl-k">:</span> Minimal move index is <span class="pl-c1">1.7848378957838162</span>
[ Info<span class="pl-k">:</span> Minimal move index is <span class="pl-c1">0.6341210762677251</span>
[ Info<span class="pl-k">:</span> Minimal move index is <span class="pl-c1">0.3189998493116862</span>
.
.
.
.
[ Info<span class="pl-k">:</span> Minimal move index is <span class="pl-c1">0.0010124268021825809</span>
[ Info<span class="pl-k">:</span> Minimal move index is <span class="pl-c1">0.0010102509818988507</span>
[ Info<span class="pl-k">:</span> Minimal move index is <span class="pl-c1">0.0010080823842259872</span>
[ Info<span class="pl-k">:</span> Minimal move index is <span class="pl-c1">0.0010059209713983509</span>
[ Info<span class="pl-k">:</span> Minimal move index is <span class="pl-c1">0.0010037667055315528</span>
[ Info<span class="pl-k">:</span> Minimal move index is <span class="pl-c1">0.0010016195522329304</span>
([<span class="pl-c1">0.39168705623677563</span>, <span class="pl-c1">0.24949716765305802</span>, <span class="pl-c1">NaN</span>, <span class="pl-c1">1.4066677906807563</span>, <span class="pl-c1">1.1484883086226838</span>, <span class="pl-c1">NaN</span>, <span class="pl-c1">2.089037409389501</span>, <span class="pl-c1">1.9403068274377</span>, <span class="pl-c1">NaN</span>, <span class="pl-c1">1.6763442046107901</span>  …  <span class="pl-c1">NaN</span>, <span class="pl-c1">5.225956577772305</span>, <span class="pl-c1">5.45051039916194</span>, <span class="pl-c1">NaN</span>, <span class="pl-c1">5.225956577772305</span>, <span class="pl-c1">4.9344362730766385</span>, <span class="pl-c1">NaN</span>, <span class="pl-c1">5.225956577772305</span>, <span class="pl-c1">5.523495989156209</span>, <span class="pl-c1">NaN</span>], [<span class="pl-c1">2.063690666551136</span>, <span class="pl-c1">2.2198411283347967</span>, <span class="pl-c1">NaN</span>, <span class="pl-c1">1.619386786583647</span>, <span class="pl-c1">1.6285058990860535</span>, <span class="pl-c1">NaN</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">0.23721296745446183</span>, <span class="pl-c1">NaN</span>, <span class="pl-c1">0.23008747967549248</span>  …  <span class="pl-c1">NaN</span>, <span class="pl-c1">8.786837276630676</span>, <span class="pl-c1">8.730320688506946</span>, <span class="pl-c1">NaN</span>, <span class="pl-c1">8.786837276630676</span>, <span class="pl-c1">8.622068433075366</span>, <span class="pl-c1">NaN</span>, <span class="pl-c1">8.786837276630676</span>, <span class="pl-c1">8.942086553129595</span>, <span class="pl-c1">NaN</span>])</pre></div>
<p dir="auto">The output mesh<br><br>
<a target="_blank" rel="noopener noreferrer nofollow" href="https://user-images.githubusercontent.com/36159919/102132646-27bffa80-3e54-11eb-9dd5-d0f047272678.png"><img src="https://user-images.githubusercontent.com/36159919/102132646-27bffa80-3e54-11eb-9dd5-d0f047272678.png" alt="r2d2" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-error-handling" class="anchor" aria-hidden="true" href="#error-handling"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Error handling</h2>
<p dir="auto">Considering the fact that this package relies on <a href="https://github.com/robertdj/Deldir.jl">DelDir.jl</a> to triangulate points, some errors occurring in triangulation process can be hard to solve, because they can occur in original triangulation package itself. Those errors are caught, wrapped and exposed to the user with information about iteration, triangulated dataset and inner error itself. Supposing we changed <code>bbox</code> and <code>h0</code> from previous example to:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; bbox = [0.0 0.0; 10.0 10.0]
2×2 Array{Float64,2}:
  0.0   0.0
 10.0  10.0

julia&gt; h0 = 2.5
2.5"><pre>julia<span class="pl-k">&gt;</span> bbox <span class="pl-k">=</span> [<span class="pl-c1">0.0</span> <span class="pl-c1">0.0</span>; <span class="pl-c1">10.0</span> <span class="pl-c1">10.0</span>]
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">2</span> Array{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
  <span class="pl-c1">0.0</span>   <span class="pl-c1">0.0</span>
 <span class="pl-c1">10.0</span>  <span class="pl-c1">10.0</span>

julia<span class="pl-k">&gt;</span> h0 <span class="pl-k">=</span> <span class="pl-c1">2.5</span>
<span class="pl-c1">2.5</span></pre></div>
<p dir="auto">Which means that the current area defined by <code>bbox</code> is too small to triangulate points. We are going to face the following error.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; x, y = distmesh2d(fd, huniform, bbox, h0, pfix=pfix)
ERROR: Triangulation failed with given data: 
 Points = [0.125 0.21650635094610965; 0.375 0.21650635094610965; 0.25 0.4330127018922193; 0.375 0.649519052838329; 0.625 0.21650635094610965; 0.5 0.4330127018922193; 0.625 0.649519052838329; 0.875 0.21650635094610965; 0.75 0.8660254037844386; 1.125 0.21650635094610965; 1.0 0.8660254037844386] 
 Iteration = 0 
 Inner error = DomainError([0.0, 1.0, 0.0, 1.0], &quot;Boundary window is too small&quot;)
Stacktrace:
 [1] distmesh2d(::typeof(fd), ::typeof(huniform), ::Array{Float64,2}, ::Float64; pfix::Array{Float64,2}, dptol::Float64, ttol::Float64, geps::Float64, Fscale::Float64, deltat::Float64, deps::Float64, logmi::Bool) at /Users/jstarczewski/GitProjects/DistMesh2D.jl/src/distmesh.jl:33
 [2] top-level scope at none:1
julia&gt; "><pre>julia<span class="pl-k">&gt;</span> x, y <span class="pl-k">=</span> <span class="pl-c1">distmesh2d</span>(fd, huniform, bbox, h0, pfix<span class="pl-k">=</span>pfix)
ERROR<span class="pl-k">:</span> Triangulation failed with given data<span class="pl-k">:</span> 
 Points <span class="pl-k">=</span> [<span class="pl-c1">0.125</span> <span class="pl-c1">0.21650635094610965</span>; <span class="pl-c1">0.375</span> <span class="pl-c1">0.21650635094610965</span>; <span class="pl-c1">0.25</span> <span class="pl-c1">0.4330127018922193</span>; <span class="pl-c1">0.375</span> <span class="pl-c1">0.649519052838329</span>; <span class="pl-c1">0.625</span> <span class="pl-c1">0.21650635094610965</span>; <span class="pl-c1">0.5</span> <span class="pl-c1">0.4330127018922193</span>; <span class="pl-c1">0.625</span> <span class="pl-c1">0.649519052838329</span>; <span class="pl-c1">0.875</span> <span class="pl-c1">0.21650635094610965</span>; <span class="pl-c1">0.75</span> <span class="pl-c1">0.8660254037844386</span>; <span class="pl-c1">1.125</span> <span class="pl-c1">0.21650635094610965</span>; <span class="pl-c1">1.0</span> <span class="pl-c1">0.8660254037844386</span>] 
 Iteration <span class="pl-k">=</span> <span class="pl-c1">0</span> 
 Inner error <span class="pl-k">=</span> <span class="pl-c1">DomainError</span>([<span class="pl-c1">0.0</span>, <span class="pl-c1">1.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">1.0</span>], <span class="pl-s"><span class="pl-pds">"</span>Boundary window is too small<span class="pl-pds">"</span></span>)
Stacktrace<span class="pl-k">:</span>
 [<span class="pl-c1">1</span>] <span class="pl-c1">distmesh2d</span>(<span class="pl-k">::</span><span class="pl-c1">typeof</span>(fd), <span class="pl-k">::</span><span class="pl-c1">typeof</span>(huniform), <span class="pl-k">::</span><span class="pl-c1">Array{Float64,2}</span>, <span class="pl-k">::</span><span class="pl-c1">Float64</span>; pfix<span class="pl-k">::</span><span class="pl-c1">Array{Float64,2}</span>, dptol<span class="pl-k">::</span><span class="pl-c1">Float64</span>, ttol<span class="pl-k">::</span><span class="pl-c1">Float64</span>, geps<span class="pl-k">::</span><span class="pl-c1">Float64</span>, Fscale<span class="pl-k">::</span><span class="pl-c1">Float64</span>, deltat<span class="pl-k">::</span><span class="pl-c1">Float64</span>, deps<span class="pl-k">::</span><span class="pl-c1">Float64</span>, logmi<span class="pl-k">::</span><span class="pl-c1">Bool</span>) at <span class="pl-k">/</span>Users<span class="pl-k">/</span>jstarczewski<span class="pl-k">/</span>GitProjects<span class="pl-k">/</span>DistMesh2D<span class="pl-k">.</span>jl<span class="pl-k">/</span>src<span class="pl-k">/</span>distmesh<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">33</span>
 [<span class="pl-c1">2</span>] top<span class="pl-k">-</span>level scope at none<span class="pl-k">:</span><span class="pl-c1">1</span>
julia<span class="pl-k">&gt;</span> </pre></div>
<p dir="auto">Note that when filling an issue it is highly recommended to check whether the error comes from meshing algorithm or directly from triangulation.</p>
</article></div>