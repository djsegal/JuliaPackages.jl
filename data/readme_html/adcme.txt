<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><p align="center">
  <a target="_blank" rel="noopener noreferrer" href="docs/src/assets/ADCME.gif"><img src="docs/src/assets/ADCME.gif" alt="ADCME" style="max-width:100%;"></a>
</p>
<p><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/0aa77a6ae8caa258a4768f5f79804963bf3a37cb/68747470733a2f2f7472617669732d63692e6f72672f6b61696c6169782f4144434d452e6a6c2e7376673f6272616e63683d6d6173746572"><img src="https://camo.githubusercontent.com/0aa77a6ae8caa258a4768f5f79804963bf3a37cb/68747470733a2f2f7472617669732d63692e6f72672f6b61696c6169782f4144434d452e6a6c2e7376673f6272616e63683d6d6173746572" alt="" data-canonical-src="https://travis-ci.org/kailaix/ADCME.jl.svg?branch=master" style="max-width:100%;"></a>
<a target="_blank" rel="noopener noreferrer" href="https://github.com/kailaix/ADCME.jl/workflows/Documentation/badge.svg"><img src="https://github.com/kailaix/ADCME.jl/workflows/Documentation/badge.svg" alt="" style="max-width:100%;"></a>
<a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/7d10f40bc2f2c7ae178d898a8bfdce48ebee8c3b/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f6b61696c6169782f4144434d452e6a6c2f62616467652e7376673f6272616e63683d6d6173746572"><img src="https://camo.githubusercontent.com/7d10f40bc2f2c7ae178d898a8bfdce48ebee8c3b/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f6b61696c6169782f4144434d452e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/kailaix/ADCME.jl/badge.svg?branch=master" style="max-width:100%;"></a></p>
<p><a target="_blank" rel="noopener noreferrer" href="docs/src/assets/demo.png"><img src="docs/src/assets/demo.png" alt="" style="max-width:100%;"></a></p>
<p>The ADCME library (<strong>A</strong>utomatic <strong>D</strong>ifferentiation Library for <strong>C</strong>omputational and <strong>M</strong>athematical <strong>E</strong>ngineering) aims at general and scalable inverse modeling in scientific computing with gradient-based optimization techniques. It is built on the deep learning framework, <strong>graph-mode <a href="https://www.tensorflow.org/" rel="nofollow">TensorFlow</a></strong>, which provides the automatic differentiation and parallel computing backend. The dataflow model adopted by the framework makes it suitable for high performance computing and inverse modeling in scientific computing. The design principles and methodologies are summarized in the <a href="https://kailaix.github.io/ADCME.jl/dev/assets/Slide/ADCME.pdf" rel="nofollow">slides</a>.</p>
<p>Several features of the library are</p>
<ul>
<li><strong>MATLAB-style Syntax</strong>. Write <code>A*B</code> for matrix production instead of <code>tf.matmul(A,B)</code>.</li>
<li><strong>Custom Operators</strong>. Implement operators in C/C++ for performance critical parts; incorporate legacy code or specially designed C/C++ code in <code>ADCME</code>; automatic differentiation through implicit schemes and iterative solvers.</li>
<li><strong>Numerical Scheme</strong>. Easy to implement numerical schemes for solving PDEs.</li>
<li><strong>Physics Constrained Learning</strong>. Embed neural network into PDEs and solve with any numerical schemes, including implicit and iterative schemes.</li>
<li><strong>Static Graphs</strong>. Compilation time computational graph optimization; automatic parallelism for your simulation codes.</li>
<li><strong>Parallel Computing</strong>. Concurrent execution and model/data parallel distributed optimization.</li>
<li><strong>Custom Optimizers</strong>. Large scale constrained optimization? Use <code>CustomOptimizer</code> to integrate your favorite optimizer. Try out prebuilt <a href="https://kailaix.github.io/ADCME.jl/dev/customopt/#Dropin-substitute-of-BFGS!-1" rel="nofollow">Ipopt and NLopt</a> optimizers.</li>
<li><strong>Sparse Linear Algebra</strong>. Sparse linear algebra library tailored for scientific computing.</li>
<li><strong>Inverse Modeling</strong>. Many inverse modeling algorithms have been developed and implemented in ADCME, with wide applications in solid mechanics, fluid dynamics, geophysics, and stochastic processes.</li>
</ul>
<p>Start building your forward and inverse modeling using ADCME today!</p>
<table>
<thead>
<tr>
<th>Documentation</th>
<th>Tutorial</th>
<th>Applications</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://kailaix.github.io/ADCME.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/bd50b370f2b69bc68a6f64fba6dc6aadf6499b01/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f2d446f63756d656e746174696f6e2d626c7565" alt="" data-canonical-src="https://img.shields.io/badge/-Documentation-blue" style="max-width:100%;"></a></td>
<td><a href="https://kailaix.github.io/ADCME.jl/dev/tutorial/" rel="nofollow"><img src="https://camo.githubusercontent.com/08312c14acd7d703f0a29fecda2bbf6b4426d52b/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f2d5475746f7269616c2d677265656e" alt="" data-canonical-src="https://img.shields.io/badge/-Tutorial-green" style="max-width:100%;"></a></td>
<td><a href="https://kailaix.github.io/ADCME.jl/dev/apps" rel="nofollow"><img src="https://camo.githubusercontent.com/9048544ccd82f1db8d1f979b51d92572c18edcf2/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f2d4170706c69636174696f6e732d6f72616e6765" alt="" data-canonical-src="https://img.shields.io/badge/-Applications-orange" style="max-width:100%;"></a></td>
</tr>
</tbody>
</table>
<h2><a id="user-content-graph-mode-tensorflow-for-high-performance-scientific-computing" class="anchor" aria-hidden="true" href="#graph-mode-tensorflow-for-high-performance-scientific-computing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Graph-mode TensorFlow for High Performance Scientific Computing</h2>
<p>Static computational graph (graph-mode AD) enables compilation time optimization. Below is a benchmark of common AD software from <a href="https://github.com/microsoft/ADBench">here</a>. In inverse modeling, we usually have a scalar-valued objective function, so the left panel is most relevant for ADCME.</p>
<p><a target="_blank" rel="noopener noreferrer" href="https://raw.githubusercontent.com/microsoft/ADBench/master/Documents/figs/2020_Jan.png"><img src="https://raw.githubusercontent.com/microsoft/ADBench/master/Documents/figs/2020_Jan.png" alt="" style="max-width:100%;"></a></p>
<h1><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Installation</h1>
<ol>
<li>
<p>Install <a href="https://julialang.org/" rel="nofollow">Julia</a></p>
</li>
<li>
<p>Install <code>ADCME</code></p>
</li>
</ol>
<pre><code>julia&gt; ]
pkg&gt; add ADCME
</code></pre>
<ol start="3">
<li>(Optional) Test <code>ADCME.jl</code></li>
</ol>
<pre><code>julia&gt; ]
pkg&gt; test ADCME
</code></pre>
<p>See <a href="https://kailaix.github.io/ADCME.jl/dev/tu_customop/#Troubleshooting-1" rel="nofollow">Troubleshooting</a> if you encounter any compilation problems.</p>
<ol start="4">
<li>(Optional) Enable GPU Support
To enable GPU support, first, make sure <code>nvcc</code> is available from your environment (e.g., type <code>nvcc</code> in your shell and you should get the location of the executable binary file).</li>
</ol>
<div class="highlight highlight-source-julia"><pre>ENV[<span class="pl-s"><span class="pl-pds">"</span>GPU<span class="pl-pds">"</span></span>] <span class="pl-k">=</span> <span class="pl-c1">1</span>
Pkg<span class="pl-k">.</span><span class="pl-c1">build</span>(<span class="pl-s"><span class="pl-pds">"</span>ADCME<span class="pl-pds">"</span></span>)</pre></div>
<p>For manual installation without access to the internet, see <a href="https://kailaix.github.io/ADCME.jl/dev/" rel="nofollow">here</a>.</p>
<p><g-emoji class="g-emoji" alias="warning" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/26a0.png">⚠️</g-emoji> <code>PyCall</code> is forced to use the default interpreter by <code>ADCME</code>. Do not try to reset the interpreter by rebuilding <code>PyCall</code>.</p>
<h1><a id="user-content-tutorial" class="anchor" aria-hidden="true" href="#tutorial"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Tutorial</h1>
<p>Here we present two inverse problem examples. The first one is a parameter estimation problem, and the second one is a function inverse problem.</p>
<h3><a id="user-content-parameter-inverse-problem" class="anchor" aria-hidden="true" href="#parameter-inverse-problem"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Parameter Inverse Problem</h3>
<p>Consider solving the following problem</p>
<p><a target="_blank" rel="noopener noreferrer" href="./docs/src/assets/readme-eq1.svg"><img src="./docs/src/assets/readme-eq1.svg" alt="" style="max-width:100%;"></a></p>
<p>where</p>
<p><a target="_blank" rel="noopener noreferrer" href="./docs/src/assets/readme-eq2.svg"><img src="./docs/src/assets/readme-eq2.svg" alt="" style="max-width:100%;"></a></p>
<p>Assume that we have observed <code>u(0.5)=1</code>, we want to estimate <code>b</code>.  In this case, he true value should be <code>b=1</code>.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> LinearAlgebra
<span class="pl-k">using</span> ADCME

n <span class="pl-k">=</span> <span class="pl-c1">101</span> <span class="pl-c"><span class="pl-c">#</span> number of grid nodes in [0,1]</span>
h <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">/</span>(n<span class="pl-k">-</span><span class="pl-c1">1</span>)
x <span class="pl-k">=</span> <span class="pl-c1">LinRange</span>(<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,n)[<span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">end</span><span class="pl-k">-</span><span class="pl-c1">1</span>]

b <span class="pl-k">=</span> <span class="pl-c1">Variable</span>(<span class="pl-c1">10.0</span>) <span class="pl-c"><span class="pl-c">#</span> we use Variable keyword to mark the unknowns</span>
A <span class="pl-k">=</span> <span class="pl-c1">diagm</span>(<span class="pl-c1">0</span><span class="pl-k">=&gt;</span><span class="pl-c1">2</span><span class="pl-k">/</span>h<span class="pl-k">^</span><span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">ones</span>(n<span class="pl-k">-</span><span class="pl-c1">2</span>), <span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">=&gt;</span><span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">/</span>h<span class="pl-k">^</span><span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">ones</span>(n<span class="pl-k">-</span><span class="pl-c1">3</span>), <span class="pl-c1">1</span><span class="pl-k">=&gt;</span><span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">/</span>h<span class="pl-k">^</span><span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">ones</span>(n<span class="pl-k">-</span><span class="pl-c1">3</span>)) 
B <span class="pl-k">=</span> b<span class="pl-k">*</span>A <span class="pl-k">+</span> I  <span class="pl-c"><span class="pl-c">#</span> I stands for the identity matrix</span>
f <span class="pl-k">=</span> <span class="pl-c1">@.</span> <span class="pl-c1">4</span><span class="pl-k">*</span>(<span class="pl-c1">2</span> <span class="pl-k">+</span> x <span class="pl-k">-</span> x<span class="pl-k">^</span><span class="pl-c1">2</span>) 
u <span class="pl-k">=</span> B<span class="pl-k">\</span>f <span class="pl-c"><span class="pl-c">#</span> solve the equation using built-in linear solver</span>
ue <span class="pl-k">=</span> u[<span class="pl-c1">div</span>(n<span class="pl-k">+</span><span class="pl-c1">1</span>,<span class="pl-c1">2</span>)] <span class="pl-c"><span class="pl-c">#</span> extract values at x=0.5</span>

loss <span class="pl-k">=</span> (ue<span class="pl-k">-</span><span class="pl-c1">1.0</span>)<span class="pl-k">^</span><span class="pl-c1">2</span> 

<span class="pl-c"><span class="pl-c">#</span> Optimization</span>
sess <span class="pl-k">=</span> <span class="pl-c1">Session</span>(); <span class="pl-c1">init</span>(sess) 
<span class="pl-c1">BFGS!</span>(sess, loss)

<span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>Estimated b = <span class="pl-pds">"</span></span>, <span class="pl-c1">run</span>(sess, b))</pre></div>
<p>Expected output</p>
<pre><code>Estimated b = 0.9995582304494237
</code></pre>
<p>The gradients can be obtained very easily. For example, if we want the gradients of <code>loss</code> with respect to <code>b</code>, the following code will create a Tensor for the gradient</p>
<pre><code>julia&gt; gradients(loss, b)
PyObject &lt;tf.Tensor 'gradients_1/Mul_grad/Reshape:0' shape=() dtype=float64&gt;
</code></pre>
<h3><a id="user-content-function-inverse-problem-full-field-data" class="anchor" aria-hidden="true" href="#function-inverse-problem-full-field-data"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Function Inverse Problem: Full Field Data</h3>
<p>Consider a nonlinear PDE,</p>
<p><a target="_blank" rel="noopener noreferrer" href="./docs/src/assets/readme-eq3.svg"><img src="./docs/src/assets/readme-eq3.svg" alt="" style="max-width:100%;"></a></p>
<p>where</p>
<p><a target="_blank" rel="noopener noreferrer" href="./docs/src/assets/readme-eq4.svg"><img src="./docs/src/assets/readme-eq4.svg" alt="" style="max-width:100%;"></a></p>
<p>Here <code>f(x)</code> can be computed from an analytical solution</p>
<p><a target="_blank" rel="noopener noreferrer" href="./docs/src/assets/readme-eq5.svg"><img src="./docs/src/assets/readme-eq5.svg" alt="" style="max-width:100%;"></a></p>
<p>In this problem, we are given the full field data of <code>u(x)</code> (the discrete value of <code>u(x)</code> is given on a very fine grid) and want to estimate the nonparametric function <code>b(u)</code>. We approximate <code>b(u)</code> using a neural network and use the <a href="https://kailaix.github.io/ADCME.jl/dev/tu_nn/" rel="nofollow">residual minimization method</a> to find the optimal weights and biases of the neural network. The minimization problem is given by</p>
<p><a target="_blank" rel="noopener noreferrer" href="./docs/src/assets/readme-eq6.svg"><img src="./docs/src/assets/readme-eq6.svg" alt="" style="max-width:100%;"></a></p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> LinearAlgebra
<span class="pl-k">using</span> ADCME
<span class="pl-k">using</span> PyPlot

n <span class="pl-k">=</span> <span class="pl-c1">101</span> 
h <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">/</span>(n<span class="pl-k">-</span><span class="pl-c1">1</span>)
x <span class="pl-k">=</span> <span class="pl-c1">LinRange</span>(<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,n)<span class="pl-k">|&gt;</span>collect

u <span class="pl-k">=</span> <span class="pl-c1">sin</span>.(π<span class="pl-k">*</span>x)
f <span class="pl-k">=</span> <span class="pl-c1">@.</span> (<span class="pl-c1">1</span><span class="pl-k">+</span>u<span class="pl-k">^</span><span class="pl-c1">2</span>)<span class="pl-k">/</span>(<span class="pl-c1">1</span><span class="pl-k">+</span><span class="pl-c1">2</span>u<span class="pl-k">^</span><span class="pl-c1">2</span>) <span class="pl-k">*</span> π<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">*</span> u <span class="pl-k">+</span> u 
<span class="pl-c"><span class="pl-c">#</span> `ae` is short for autoencorder. </span>
<span class="pl-c"><span class="pl-c">#</span> Here we create a neural network with 2 hidden layers, and 20 neuron per layer. </span>
<span class="pl-c"><span class="pl-c">#</span> The default activation function is tanh.</span>
b <span class="pl-k">=</span> <span class="pl-c1">squeeze</span>(<span class="pl-c1">ae</span>(u[<span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">end</span><span class="pl-k">-</span><span class="pl-c1">1</span>], [<span class="pl-c1">20</span>,<span class="pl-c1">20</span>,<span class="pl-c1">1</span>])) 

residual <span class="pl-k">=</span> <span class="pl-k">-</span>b<span class="pl-k">.*</span>(u[<span class="pl-c1">3</span><span class="pl-k">:</span><span class="pl-c1">end</span>]<span class="pl-k">+</span>u[<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">end</span><span class="pl-k">-</span><span class="pl-c1">2</span>]<span class="pl-k">-</span><span class="pl-c1">2</span>u[<span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">end</span><span class="pl-k">-</span><span class="pl-c1">1</span>])<span class="pl-k">/</span>h<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">+</span> u[<span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">end</span><span class="pl-k">-</span><span class="pl-c1">1</span>] <span class="pl-k">-</span> f[<span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">end</span><span class="pl-k">-</span><span class="pl-c1">1</span>]
loss <span class="pl-k">=</span> <span class="pl-c1">sum</span>(residual<span class="pl-k">^</span><span class="pl-c1">2</span>)

sess <span class="pl-k">=</span> <span class="pl-c1">Session</span>(); <span class="pl-c1">init</span>(sess)
<span class="pl-c1">BFGS!</span>(sess, loss)

<span class="pl-c1">plot</span>(x, (<span class="pl-c1">@.</span> (<span class="pl-c1">1</span><span class="pl-k">+</span>x<span class="pl-k">^</span><span class="pl-c1">2</span>)<span class="pl-k">/</span>(<span class="pl-c1">1</span><span class="pl-k">+</span><span class="pl-c1">2</span><span class="pl-k">*</span>x<span class="pl-k">^</span><span class="pl-c1">2</span>)), label<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Reference<span class="pl-pds">"</span></span>)
<span class="pl-c1">plot</span>(u[<span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">end</span><span class="pl-k">-</span><span class="pl-c1">1</span>], <span class="pl-c1">run</span>(sess, b), <span class="pl-s"><span class="pl-pds">"</span>o<span class="pl-pds">"</span></span>, markersize<span class="pl-k">=</span><span class="pl-c1">5.</span>, label<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Estimated<span class="pl-pds">"</span></span>)
<span class="pl-c1">legend</span>(); <span class="pl-c1">xlabel</span>(<span class="pl-s"><span class="pl-pds">"</span><span class="pl-cce">\$</span>u<span class="pl-cce">\$</span><span class="pl-pds">"</span></span>); <span class="pl-c1">ylabel</span>(<span class="pl-s"><span class="pl-pds">"</span><span class="pl-cce">\$</span>b(u)<span class="pl-cce">\$</span><span class="pl-pds">"</span></span>); <span class="pl-c1">grid</span>(<span class="pl-s"><span class="pl-pds">"</span>on<span class="pl-pds">"</span></span>)</pre></div>
<p>Here we show the estimated coefficient function and the reference one:</p>
<p align="center">
  <a target="_blank" rel="noopener noreferrer" href="./docs/src/assets/readmenn.png"><img src="./docs/src/assets/readmenn.png" style="max-width:100%;"></a>
</p>
<h3><a id="user-content-function-inverse-problem-sparse-data" class="anchor" aria-hidden="true" href="#function-inverse-problem-sparse-data"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Function Inverse Problem: Sparse Data</h3>
<p>Now we consider the same problem as above, but only consider we have access to sparse observations. We assume that on the grid only the values of <code>u(x)</code> on every other 5th grid point are observable. We use the <a href="https://arxiv.org/pdf/2002.10521.pdf" rel="nofollow">physics constrained learning</a> technique and train a neural network surrogate for <code>b(u)</code> by minimizing</p>
<p><a target="_blank" rel="noopener noreferrer" href="./docs/src/assets/readme-eq7.svg"><img src="./docs/src/assets/readme-eq7.svg" alt="" style="max-width:100%;"></a></p>
<p>Here <code>uᶿ</code> is the solution to the PDE with</p>
<p><a target="_blank" rel="noopener noreferrer" href="./docs/src/assets/readme-eq8.svg"><img src="./docs/src/assets/readme-eq8.svg" alt="" style="max-width:100%;"></a></p>
<p>We add 1 to the neural network to ensure the initial guess does not result in a singular Jacobian matrix in the Newton Raphson solver.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> LinearAlgebra
<span class="pl-k">using</span> ADCME
<span class="pl-k">using</span> PyPlot

n <span class="pl-k">=</span> <span class="pl-c1">101</span> 
h <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">/</span>(n<span class="pl-k">-</span><span class="pl-c1">1</span>)
x <span class="pl-k">=</span> <span class="pl-c1">LinRange</span>(<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,n)<span class="pl-k">|&gt;</span>collect

u <span class="pl-k">=</span> <span class="pl-c1">sin</span>.(π<span class="pl-k">*</span>x)
f <span class="pl-k">=</span> <span class="pl-c1">@.</span> (<span class="pl-c1">1</span><span class="pl-k">+</span>u<span class="pl-k">^</span><span class="pl-c1">2</span>)<span class="pl-k">/</span>(<span class="pl-c1">1</span><span class="pl-k">+</span><span class="pl-c1">2</span>u<span class="pl-k">^</span><span class="pl-c1">2</span>) <span class="pl-k">*</span> π<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">*</span> u <span class="pl-k">+</span> u 

<span class="pl-c"><span class="pl-c">#</span> we use a Newton Raphson solver to solve the nonlinear PDE problem </span>
<span class="pl-k">function</span> <span class="pl-en">residual_and_jac</span>(θ, x)
    nn <span class="pl-k">=</span> <span class="pl-c1">squeeze</span>(<span class="pl-c1">ae</span>(<span class="pl-c1">reshape</span>(x,:,<span class="pl-c1">1</span>), [<span class="pl-c1">20</span>,<span class="pl-c1">20</span>,<span class="pl-c1">1</span>], θ)) <span class="pl-k">+</span> <span class="pl-c1">1.0</span>
    u_full <span class="pl-k">=</span> <span class="pl-c1">vector</span>(<span class="pl-c1">2</span><span class="pl-k">:</span>n<span class="pl-k">-</span><span class="pl-c1">1</span>, x, n)
    res <span class="pl-k">=</span> <span class="pl-k">-</span>nn<span class="pl-k">.*</span>(u_full[<span class="pl-c1">3</span><span class="pl-k">:</span><span class="pl-c1">end</span>]<span class="pl-k">+</span>u_full[<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">end</span><span class="pl-k">-</span><span class="pl-c1">2</span>]<span class="pl-k">-</span><span class="pl-c1">2</span>u_full[<span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">end</span><span class="pl-k">-</span><span class="pl-c1">1</span>])<span class="pl-k">/</span>h<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">+</span> u_full[<span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">end</span><span class="pl-k">-</span><span class="pl-c1">1</span>] <span class="pl-k">-</span> f[<span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">end</span><span class="pl-k">-</span><span class="pl-c1">1</span>]
    J <span class="pl-k">=</span> <span class="pl-c1">gradients</span>(res, x)
    res, J
<span class="pl-k">end</span>
θ <span class="pl-k">=</span> <span class="pl-c1">Variable</span>(<span class="pl-c1">ae_init</span>([<span class="pl-c1">1</span>,<span class="pl-c1">20</span>,<span class="pl-c1">20</span>,<span class="pl-c1">1</span>]))
u_est <span class="pl-k">=</span> <span class="pl-c1">newton_raphson_with_grad</span>(residual_and_jac, <span class="pl-c1">constant</span>(<span class="pl-c1">zeros</span>(n<span class="pl-k">-</span><span class="pl-c1">2</span>)),θ;
             options<span class="pl-k">=</span><span class="pl-c1">Dict</span>(<span class="pl-s"><span class="pl-pds">"</span>tol<span class="pl-pds">"</span></span><span class="pl-k">=&gt;</span><span class="pl-c1">1e-4</span>, <span class="pl-s"><span class="pl-pds">"</span>rtol<span class="pl-pds">"</span></span><span class="pl-k">=&gt;</span><span class="pl-c1">1e-4</span>))
residual <span class="pl-k">=</span> u_est[<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">5</span><span class="pl-k">:</span><span class="pl-c1">end</span>] <span class="pl-k">-</span> u[<span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">end</span><span class="pl-k">-</span><span class="pl-c1">1</span>][<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">5</span><span class="pl-k">:</span><span class="pl-c1">end</span>]
loss <span class="pl-k">=</span> <span class="pl-c1">sum</span>(residual<span class="pl-k">^</span><span class="pl-c1">2</span>)

b <span class="pl-k">=</span> <span class="pl-c1">squeeze</span>(<span class="pl-c1">ae</span>(<span class="pl-c1">reshape</span>(x,:,<span class="pl-c1">1</span>), [<span class="pl-c1">20</span>,<span class="pl-c1">20</span>,<span class="pl-c1">1</span>], θ)) <span class="pl-k">+</span> <span class="pl-c1">1.0</span>
sess <span class="pl-k">=</span> <span class="pl-c1">Session</span>(); <span class="pl-c1">init</span>(sess)
<span class="pl-c1">BFGS!</span>(sess, loss)

<span class="pl-c1">figure</span>(figsize<span class="pl-k">=</span>(<span class="pl-c1">10</span>,<span class="pl-c1">4</span>))
<span class="pl-c1">subplot</span>(<span class="pl-c1">121</span>)
<span class="pl-c1">plot</span>(x, (<span class="pl-c1">@.</span> (<span class="pl-c1">1</span><span class="pl-k">+</span>x<span class="pl-k">^</span><span class="pl-c1">2</span>)<span class="pl-k">/</span>(<span class="pl-c1">1</span><span class="pl-k">+</span><span class="pl-c1">2</span><span class="pl-k">*</span>x<span class="pl-k">^</span><span class="pl-c1">2</span>)), label<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Reference<span class="pl-pds">"</span></span>)
<span class="pl-c1">plot</span>(x, <span class="pl-c1">run</span>(sess, b), <span class="pl-s"><span class="pl-pds">"</span>o<span class="pl-pds">"</span></span>, markersize<span class="pl-k">=</span><span class="pl-c1">5.</span>, label<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Estimated<span class="pl-pds">"</span></span>)
<span class="pl-c1">legend</span>(); <span class="pl-c1">xlabel</span>(<span class="pl-s"><span class="pl-pds">"</span><span class="pl-cce">\$</span>u<span class="pl-cce">\$</span><span class="pl-pds">"</span></span>); <span class="pl-c1">ylabel</span>(<span class="pl-s"><span class="pl-pds">"</span><span class="pl-cce">\$</span>b(u)<span class="pl-cce">\$</span><span class="pl-pds">"</span></span>); <span class="pl-c1">grid</span>(<span class="pl-s"><span class="pl-pds">"</span>on<span class="pl-pds">"</span></span>)
<span class="pl-c1">subplot</span>(<span class="pl-c1">122</span>)
<span class="pl-c1">plot</span>(x, (<span class="pl-c1">@.</span> <span class="pl-c1">sin</span>(π<span class="pl-k">*</span>x)), label<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Reference<span class="pl-pds">"</span></span>)
<span class="pl-c1">plot</span>(x[<span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">end</span><span class="pl-k">-</span><span class="pl-c1">1</span>], <span class="pl-c1">run</span>(sess, u_est), <span class="pl-s"><span class="pl-pds">"</span>--<span class="pl-pds">"</span></span>, label<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Estimated<span class="pl-pds">"</span></span>)
<span class="pl-c1">plot</span>(x[<span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">end</span><span class="pl-k">-</span><span class="pl-c1">1</span>][<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">5</span><span class="pl-k">:</span><span class="pl-c1">end</span>], <span class="pl-c1">run</span>(sess, u_est)[<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">5</span><span class="pl-k">:</span><span class="pl-c1">end</span>], <span class="pl-s"><span class="pl-pds">"</span>x<span class="pl-pds">"</span></span>, markersize<span class="pl-k">=</span><span class="pl-c1">5.</span>, label<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Data<span class="pl-pds">"</span></span>)
<span class="pl-c1">legend</span>(); <span class="pl-c1">xlabel</span>(<span class="pl-s"><span class="pl-pds">"</span><span class="pl-cce">\$</span>x<span class="pl-cce">\$</span><span class="pl-pds">"</span></span>); <span class="pl-c1">ylabel</span>(<span class="pl-s"><span class="pl-pds">"</span><span class="pl-cce">\$</span>u<span class="pl-cce">\$</span><span class="pl-pds">"</span></span>); <span class="pl-c1">grid</span>(<span class="pl-s"><span class="pl-pds">"</span>on<span class="pl-pds">"</span></span>)</pre></div>
<p>We show the reconstructed <code>b(u)</code> and the solution <code>u</code> computed from <code>b(u)</code>. We see that even though the neural network model fits the data very well, <code>b(u)</code> is not the same as the true one. This problem is ubiquitous in inverse modeling, where the unknown may not be unique.</p>
<p><a target="_blank" rel="noopener noreferrer" href="./docs/src/assets/buu.png"><img src="./docs/src/assets/buu.png" alt="" style="max-width:100%;"></a></p>
<p>See <a href="https://kailaix.github.io/ADCME.jl/dev/tutorial/" rel="nofollow">Applications</a> for more inverse modeling techniques and examples.</p>
<h3><a id="user-content-under-the-hood-computational-graph" class="anchor" aria-hidden="true" href="#under-the-hood-computational-graph"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Under the Hood: Computational Graph</h3>
<p>Under the hood, a static computational graph is automatic constructed. The computational graph guides the runtime execution and provides dependencies of  data flows for automatic differentiation. Here we show the computational graph in the parameter inverse problem:</p>
<p><a target="_blank" rel="noopener noreferrer" href="docs/src/assets/code.png"><img src="docs/src/assets/code.png" alt="" style="max-width:100%;"></a></p>
<p>See a detailed <a href="https://kailaix.github.io/ADCME.jl/dev/tutorial/" rel="nofollow">tutorial</a>, or a full <a href="https://kailaix.github.io/ADCME.jl/dev" rel="nofollow">documentation</a>.</p>
<h1><a id="user-content-featured-applications" class="anchor" aria-hidden="true" href="#featured-applications"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Featured Applications</h1>
<table>
<thead>
<tr>
<th><a href="https://kailaix.github.io/ADCME.jl/dev/apps_constitutive_law/" rel="nofollow">Constitutive Modeling</a></th>
<th><a href="https://kailaix.github.io/ADCME.jl/dev/apps_adseismic" rel="nofollow">Seismic Inversion</a></th>
<th><a href="https://kailaix.github.io/ADCME.jl/dev/apps_ad/" rel="nofollow">Coupled Two-Phase Flow and Time-lapse FWI</a></th>
<th><a href="https://kailaix.github.io/ADCME.jl/dev/apps_levy/" rel="nofollow">Calibrating Jump Diffusion</a></th>
</tr>
</thead>
<tbody>
<tr>
<td><a target="_blank" rel="noopener noreferrer" href="docs/src/assets/law.png"><img src="docs/src/assets/law.png" alt="law" style="max-width:100%;"></a></td>
<td><a target="_blank" rel="noopener noreferrer" href="docs/src/assets/earthquake.png"><img src="docs/src/assets/earthquake.png" alt="law" style="max-width:100%;"></a></td>
<td><a target="_blank" rel="noopener noreferrer" href="docs/src/assets/geo.png"><img src="docs/src/assets/geo.png" alt="law" style="max-width:100%;"></a></td>
<td><a target="_blank" rel="noopener noreferrer" href="docs/src/assets/algo.png"><img src="docs/src/assets/algo.png" alt="law" style="max-width:100%;"></a></td>
</tr>
</tbody>
</table>
<p><strong>Domain specific software based on ADCME</strong></p>
<p><a href="https://github.com/kailaix/ADSeismic.jl">ADSeismic.jl</a>: Inverse Problems in Earthquake Location/Source-Time Function, FWI, Rupture Process</p>
<p><a href="https://github.com/lidongzh/FwiFlow.jl">FwiFlow.jl</a>: Seismic Inversion, Two-phase Flow, Coupled seismic and flow equations</p>
<p><a href="https://github.com/kailaix/NNFEM.jl/">NNFEM.jl</a>: Constitutive Modeling, Elasticity, Plasticity, Hyperelasticity, Finite Element Method on Unstructured Grid</p>
<h1><a id="user-content-license" class="anchor" aria-hidden="true" href="#license"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>LICENSE</h1>
<p>ADCME.jl is released under MIT License. See <a href="https://github.com/kailaix/ADCME.jl/tree/master/LICENSE">License</a> for details.</p>
</article></div>