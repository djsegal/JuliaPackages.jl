<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><p><a target="_blank" rel="noopener noreferrer" href="docs/src/assets/icon.jpg"><img src="docs/src/assets/icon.jpg" alt="" style="max-width:100%;"></a></p>
<hr>
<p><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/0aa77a6ae8caa258a4768f5f79804963bf3a37cb/68747470733a2f2f7472617669732d63692e6f72672f6b61696c6169782f4144434d452e6a6c2e7376673f6272616e63683d6d6173746572"><img src="https://camo.githubusercontent.com/0aa77a6ae8caa258a4768f5f79804963bf3a37cb/68747470733a2f2f7472617669732d63692e6f72672f6b61696c6169782f4144434d452e6a6c2e7376673f6272616e63683d6d6173746572" alt="" data-canonical-src="https://travis-ci.org/kailaix/ADCME.jl.svg?branch=master" style="max-width:100%;"></a>
<a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/7d10f40bc2f2c7ae178d898a8bfdce48ebee8c3b/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f6b61696c6169782f4144434d452e6a6c2f62616467652e7376673f6272616e63683d6d6173746572"><img src="https://camo.githubusercontent.com/7d10f40bc2f2c7ae178d898a8bfdce48ebee8c3b/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f6b61696c6169782f4144434d452e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/kailaix/ADCME.jl/badge.svg?branch=master" style="max-width:100%;"></a></p>
<p><a target="_blank" rel="noopener noreferrer" href="docs/src/assets/demo.png"><img src="docs/src/assets/demo.png" alt="" style="max-width:100%;"></a></p>
<p>The ADCME library (<strong>A</strong>utomatic <strong>D</strong>ifferentiation Library for <strong>C</strong>omputational and <strong>M</strong>athematical <strong>E</strong>ngineering) aims at general and scalable inverse modeling in scientific computing with gradient-based optimization techniques. It is built on the deep learning framework <a href="https://www.tensorflow.org/" rel="nofollow">TensorFlow</a>, which provides the automatic differentiation and parallel computing backend. The dataflow model adopted by the framework makes it suitable for high performance computing and inverse modeling in scientific computing. The design principles and methodologies are summarized in the <a href="https://kailaix.github.io/ADCME.jl/dev/assets/Slide/ADCME.pdf" rel="nofollow">slides</a>.</p>
<p>Several features of the library are</p>
<ul>
<li><em>MATLAB-style syntax</em>. Write <code>A*B</code> for matrix production instead of <code>tf.matmul(A,B)</code>.</li>
<li><em>Custom operators</em>. Implement operators in C/C++ for bottleneck parts; incorporate legacy code or specially designed C/C++ code in <code>ADCME</code>; differentiate implicit schemes.</li>
<li><em>Numerical Scheme</em>. Easy to implement numerical schemes for solving PDEs.</li>
<li><em>Static graphs</em>. Compilation time computational graph optimization; automatic parallelism for your simulation codes.</li>
<li><em>Custom optimizers</em>. Large scale constrained optimization? Use <code>CustomOptimizer</code> to integrate your favorite optimizer.</li>
<li><em>Sparse linear algebra</em>. Sparse linear algebra library tailored for scientific computing.</li>
</ul>
<p>Start building your forward and inverse modeling using ADCME today!</p>
<table>
<thead>
<tr>
<th>Documentation</th>
<th>Tutorial</th>
<th>Research</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://kailaix.github.io/ADCME.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/3e353c26ddfe819150acbc732248f4f2a37f5175/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a></td>
<td><a href="https://kailaix.github.io/ADCME.jl/dev/tutorial/" rel="nofollow"><img src="https://camo.githubusercontent.com/5e88de96d5e763076bf3be46e4d0d241570f168c/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f7475746f7269616c732d496e76657273652532304d6f64656c696e672d627269676874677265656e" alt="" data-canonical-src="https://img.shields.io/badge/tutorials-Inverse%20Modeling-brightgreen" style="max-width:100%;"></a></td>
<td><a href="https://kailaix.github.io/ADCME.jl/dev/apps" rel="nofollow"><img src="https://camo.githubusercontent.com/9048544ccd82f1db8d1f979b51d92572c18edcf2/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f2d4170706c69636174696f6e732d6f72616e6765" alt="" data-canonical-src="https://img.shields.io/badge/-Applications-orange" style="max-width:100%;"></a></td>
</tr>
</tbody>
</table>
<h1><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Installation</h1>
<p><g-emoji class="g-emoji" alias="warning" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/26a0.png">⚠️</g-emoji> The latest version only supports Julia≧1.3.</p>
<p><g-emoji class="g-emoji" alias="warning" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/26a0.png">⚠️</g-emoji> <code>PyCall</code> is forced to use the default interpreter by <code>ADCME</code>. Do not try to reset the interpreter by rebuilding <code>PyCall</code>.</p>
<ol>
<li>
<p>Install <a href="https://julialang.org/" rel="nofollow">Julia</a></p>
</li>
<li>
<p>Install <code>ADCME</code></p>
</li>
</ol>
<pre><code>julia&gt; ]
pkg&gt; add ADCME
</code></pre>
<ol start="3">
<li>(Optional) Test <code>ADCME.jl</code></li>
</ol>
<pre><code>julia&gt; ]
pkg&gt; test ADCME
</code></pre>
<ol start="4">
<li>(Optional) Enable GPU Support
To enable GPU support, first, make sure <code>nvcc</code> is available from your environment (e.g., type <code>nvcc</code> in your shell and you should get the location of the executable binary file).</li>
</ol>
<div class="highlight highlight-source-julia"><pre>ENV[<span class="pl-s"><span class="pl-pds">"</span>GPU<span class="pl-pds">"</span></span>] <span class="pl-k">=</span> <span class="pl-c1">1</span>
Pkg<span class="pl-k">.</span><span class="pl-c1">build</span>(<span class="pl-s"><span class="pl-pds">"</span>ADCME<span class="pl-pds">"</span></span>)</pre></div>
<p>For manual installation without access to the internet, see <a href="https://kailaix.github.io/ADCME.jl/dev/" rel="nofollow">here</a>.</p>
<h1><a id="user-content-tutorial" class="anchor" aria-hidden="true" href="#tutorial"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Tutorial</h1>
<p>For a detailed tutorial, click <a href="https://kailaix.github.io/ADCME.jl/dev/tutorial/" rel="nofollow">here</a>. Consider solving the following problem</p>
<p>-bu''(x)+u(x) = f(x), x∈[0,1], u(0)=u(1)=0</p>
<p>where</p>
<p>f(x) = 8 + 4x - 4x²</p>
<p>Assume that we have observed <code>u(0.5)=1</code>, we want to estimate <code>b</code>. The true value, in this case, should be <code>b=1</code>.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> LinearAlgebra
<span class="pl-k">using</span> ADCME

n <span class="pl-k">=</span> <span class="pl-c1">101</span> <span class="pl-c"><span class="pl-c">#</span> number of grid nodes in [0,1]</span>
h <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">/</span>(n<span class="pl-k">-</span><span class="pl-c1">1</span>)
x <span class="pl-k">=</span> <span class="pl-c1">LinRange</span>(<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,n)[<span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">end</span><span class="pl-k">-</span><span class="pl-c1">1</span>]

b <span class="pl-k">=</span> <span class="pl-c1">Variable</span>(<span class="pl-c1">10.0</span>) <span class="pl-c"><span class="pl-c">#</span> we use Variable keyword to mark the unknowns</span>
A <span class="pl-k">=</span> <span class="pl-c1">diagm</span>(<span class="pl-c1">0</span><span class="pl-k">=&gt;</span><span class="pl-c1">2</span><span class="pl-k">/</span>h<span class="pl-k">^</span><span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">ones</span>(n<span class="pl-k">-</span><span class="pl-c1">2</span>), <span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">=&gt;</span><span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">/</span>h<span class="pl-k">^</span><span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">ones</span>(n<span class="pl-k">-</span><span class="pl-c1">3</span>), <span class="pl-c1">1</span><span class="pl-k">=&gt;</span><span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">/</span>h<span class="pl-k">^</span><span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">ones</span>(n<span class="pl-k">-</span><span class="pl-c1">3</span>)) 
B <span class="pl-k">=</span> b<span class="pl-k">*</span>A <span class="pl-k">+</span> I  <span class="pl-c"><span class="pl-c">#</span> I stands for the identity matrix</span>
f <span class="pl-k">=</span> <span class="pl-c1">@.</span> <span class="pl-c1">4</span><span class="pl-k">*</span>(<span class="pl-c1">2</span> <span class="pl-k">+</span> x <span class="pl-k">-</span> x<span class="pl-k">^</span><span class="pl-c1">2</span>) 
u <span class="pl-k">=</span> B<span class="pl-k">\</span>f <span class="pl-c"><span class="pl-c">#</span> solve the equation using built-in linear solver</span>
ue <span class="pl-k">=</span> u[<span class="pl-c1">div</span>(n<span class="pl-k">+</span><span class="pl-c1">1</span>,<span class="pl-c1">2</span>)] <span class="pl-c"><span class="pl-c">#</span> extract values at x=0.5</span>

loss <span class="pl-k">=</span> (ue<span class="pl-k">-</span><span class="pl-c1">1.0</span>)<span class="pl-k">^</span><span class="pl-c1">2</span> 

<span class="pl-c"><span class="pl-c">#</span> Optimization</span>
sess <span class="pl-k">=</span> <span class="pl-c1">Session</span>(); <span class="pl-c1">init</span>(sess) 
<span class="pl-c1">BFGS!</span>(sess, loss)

<span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>Estimated b = <span class="pl-pds">"</span></span>, <span class="pl-c1">run</span>(sess, b))</pre></div>
<p>Expected output</p>
<pre><code>Estimated b = 0.9995582304494237
</code></pre>
<p>The gradients can be obtained very easily. For example, if we want the gradients of <code>loss</code> with respect to <code>b</code>, the following code will create a Tensor for the gradient</p>
<pre><code>julia&gt; gradients(loss, b)
PyObject &lt;tf.Tensor 'gradients_1/Mul_grad/Reshape:0' shape=() dtype=float64&gt;
</code></pre>
<p>Under the hood, a computational graph is created for gradients back-propagation.</p>
<p><a target="_blank" rel="noopener noreferrer" href="docs/src/assets/code.png"><img src="docs/src/assets/code.png" alt="" style="max-width:100%;"></a></p>
<p>For more documentation, see <a href="https://kailaix.github.io/ADCME.jl/dev" rel="nofollow">here</a>.</p>
<h1><a id="user-content-featured-applications" class="anchor" aria-hidden="true" href="#featured-applications"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Featured Applications</h1>
<table>
<thead>
<tr>
<th><a href="https://kailaix.github.io/ADCME.jl/dev/apps_constitutive_law/" rel="nofollow">Constitutive Modeling</a></th>
<th><a href="https://kailaix.github.io/ADCME.jl/dev/apps_adseismic" rel="nofollow">Seismic Inversion</a></th>
<th><a href="https://kailaix.github.io/ADCME.jl/dev/apps_ad/" rel="nofollow">Coupled Two-Phase Flow and Time-lapse FWI</a></th>
<th><a href="https://kailaix.github.io/ADCME.jl/dev/apps_levy/" rel="nofollow">Calibrating Jump Diffusion</a></th>
</tr>
</thead>
<tbody>
<tr>
<td><a target="_blank" rel="noopener noreferrer" href="docs/src/assets/law.png"><img src="docs/src/assets/law.png" alt="law" style="max-width:100%;"></a></td>
<td><a target="_blank" rel="noopener noreferrer" href="docs/src/assets/earthquake.png"><img src="docs/src/assets/earthquake.png" alt="law" style="max-width:100%;"></a></td>
<td><a target="_blank" rel="noopener noreferrer" href="docs/src/assets/geo.png"><img src="docs/src/assets/geo.png" alt="law" style="max-width:100%;"></a></td>
<td><a target="_blank" rel="noopener noreferrer" href="docs/src/assets/algo.png"><img src="docs/src/assets/algo.png" alt="law" style="max-width:100%;"></a></td>
</tr>
</tbody>
</table>
<h1><a id="user-content-license" class="anchor" aria-hidden="true" href="#license"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>LICENSE</h1>
<p>ADCME.jl is released under MIT License. See <a href="https://github.com/kailaix/ADCME.jl/tree/master/LICENSE">License</a> for details.</p>
</article></div>