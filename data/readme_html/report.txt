<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-reportjl" class="anchor" aria-hidden="true" href="#reportjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Report.jl</h1>
<p dir="auto">Lightweight Markdown report generator for Julia.</p>
<p dir="auto">The very general idea is that you can create markdown-formatted reports from within Julia code. Potentially helpful when running a data analysis pipeline that creates tables and plots as output. Uses <a href="http://johnmacfarlane.net/pandoc/" rel="nofollow">pandoc</a> Markdown and some of its extensions.</p>
<p dir="auto">Some examples:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="using Report
# create a Markdown document
doc = Report.Markdown(&quot;Report.md&quot;, &quot;w&quot;, &quot;figures&quot;)

# add a header to the document 
write(doc, Report.Header(1, &quot;Report on Report.jl&quot;))

# do some stuff, read in data, plot something
# Table(nrows, ncolumns, header, data, caption) creates a simple_table
write(doc, Report.Table(6, 3, [&quot;Col1&quot;,&quot;Col2&quot;,&quot;Col3&quot;], data, &quot;Example table&quot;))

# add a plot that was stored in `filename`
write(doc, Report.Figure(filename, &quot;Yet another plot&quot;))

# add some julia code to help you remember what you have done (uses fenced_code_blocks)

code = &quot;&quot;&quot;
doc = Report.Markdown(&quot;Report.md&quot;, &quot;w&quot;, &quot;figures&quot;)
write(doc, Report.Header(1, &quot;Report on Report.jl&quot;))
write(doc, Report.Table(6, 3, [&quot;Col1&quot;,&quot;Col2&quot;,&quot;Col3&quot;], data, &quot;Example table&quot;))
write(doc, Report.Figure(filename, &quot;Yet another plot&quot;))
&quot;&quot;&quot;

write(doc, Report.Code(&quot;julia&quot;, code))"><pre lang="{.julia}" class="notranslate"><code>using Report
# create a Markdown document
doc = Report.Markdown("Report.md", "w", "figures")

# add a header to the document 
write(doc, Report.Header(1, "Report on Report.jl"))

# do some stuff, read in data, plot something
# Table(nrows, ncolumns, header, data, caption) creates a simple_table
write(doc, Report.Table(6, 3, ["Col1","Col2","Col3"], data, "Example table"))

# add a plot that was stored in `filename`
write(doc, Report.Figure(filename, "Yet another plot"))

# add some julia code to help you remember what you have done (uses fenced_code_blocks)

code = """
doc = Report.Markdown("Report.md", "w", "figures")
write(doc, Report.Header(1, "Report on Report.jl"))
write(doc, Report.Table(6, 3, ["Col1","Col2","Col3"], data, "Example table"))
write(doc, Report.Figure(filename, "Yet another plot"))
"""

write(doc, Report.Code("julia", code))
</code></pre></div>
</article></div>