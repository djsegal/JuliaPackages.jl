<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-decentralopfjl" class="anchor" aria-hidden="true" href="#decentralopfjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>DecentralOPF.jl</h1>
<p dir="auto">This repository contains the source code for the implementation of a decentralized algorithm that solves an optimal power flow with multiple time periods and energy storage resources. The algorithm was an outcome of the master thesis <em>"Modeling Decentralized Electricity Markets - Solving Multi-Period Optimal Power Flow using Alternating Direction Method of Multipliers"</em> written at the chair "Wirtschafts- und Infrastrukturpolitik" at TU Berlin and supervised by Dr. Richard Weinhold.</p>
<h2 dir="auto"><a id="user-content-abstract" class="anchor" aria-hidden="true" href="#abstract"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Abstract</h2>
<p dir="auto">Modern electricity systems have undergone an enormous transformation process in the last decades. One primary driver has been climate change and the involved actions to reduce carbon emissions. More and more renewable, non-dispatchable energy resources like photovoltaic and wind generators were integrated into almost every national electricity network, increasing the number of market participants and opposing challenges to the transmission grid operators to sustain a reliable electricity supply. On top of these changes, the availability of high-performance technology at very low costs enables new digital innovations to be on the forerun. One of those innovations is the trend toward decentralized systems. The most famous example is undoubtedly the cryptocurrency Bitcoin which provides an alternative to the centralized banking system and showcases a way to conduct transactions without an intermediary. This thesis investigates whether it is possible to decentralize an optimal power flow calculation that is a prevalent task of every transmission system operator. The optimal power flow considers multi-periods and the integration of energy storage resources. Based on the Alternating Direction Method of Multipliers and a review of current papers related to decentralized electricity markets, a decentralized algorithm is developed that solves an optimal power flow without a central entity knowing all sensitive information about the market participants. All computation is done by the market participants and is exchanged via an information network. The decentralized algorithm is applied to a three node case study system, and the obtained results are compared to a centralized optimal power flow. The comparison yields that the results are nearly identical except for minor differences in the per mille range. Some convergence problems were faced while implementing the mathematical formulations. They were removed by adapting the algorithm. Finally, a decentralized algorithm could be established and published as an open-source package to solve an optimal power flow with multi time periods and energy storage resources. The derivation and implementation of this algorithm are thoroughly documented in this thesis.</p>
<h2 dir="auto"><a id="user-content-getting-started" class="anchor" aria-hidden="true" href="#getting-started"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Getting started</h2>
<p dir="auto">To run the decentralized model, you have to clone the repository:</p>
<div class="highlight highlight-source-batchfile notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="git clone https://github.com/rockstaedt/DecentralOPF.jl.git"><pre>git clone https://github.com/rockstaedt/DecentralOPF.jl.git</pre></div>
<p dir="auto">Change into the directory and activate your Julia REPL.</p>
<div class="highlight highlight-source-batchfile notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="cd DecentralOPF.jl
julia"><pre><span class="pl-k">cd</span> DecentralOPF.jl
julia</pre></div>
<p dir="auto">Go into the Julia package manager (<code>]</code>) and activate and initiate the environment to install all packages.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="(@v1.6) pkg&gt; activate .
(DecentralOPF.jl) pkg&gt; instantiate"><pre class="notranslate"><code>(@v1.6) pkg&gt; activate .
(DecentralOPF.jl) pkg&gt; instantiate
</code></pre></div>
<p dir="auto">Leave the package manager and run either model with the following commands:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; include(&quot;src/opf_central_reference.jl&quot;)
julia&gt; include(&quot;src/opf_admm_decentral.jl&quot;)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">include</span>(<span class="pl-s"><span class="pl-pds">"</span>src/opf_central_reference.jl<span class="pl-pds">"</span></span>)
julia<span class="pl-k">&gt;</span> <span class="pl-c1">include</span>(<span class="pl-s"><span class="pl-pds">"</span>src/opf_admm_decentral.jl<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">Please be aware that you need a valid Gurobi license. An open-source solver like Clp was not tested yet. However, feel free
to replace the solver with a different one. The case study is defined in the file <code>src/cases/three_node.jl</code>.</p>
</article></div>