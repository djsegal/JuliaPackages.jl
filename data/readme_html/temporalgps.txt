<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-temporalgps" class="anchor" aria-hidden="true" href="#temporalgps"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>TemporalGPs</h1>
<p><a href="https://willtebbutt.github.io/TemporalGPs.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/f7b92a177c912c1cc007fc9b40f17ff3ee3bb414/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://willtebbutt.github.io/TemporalGPs.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/3e353c26ddfe819150acbc732248f4f2a37f5175/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a>
<a href="https://travis-ci.com/willtebbutt/TemporalGPs.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/0636bc2fe7de63024ba838b1bdc68b1d9e899532/68747470733a2f2f7472617669732d63692e636f6d2f77696c6c746562627574742f54656d706f72616c4750732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/willtebbutt/TemporalGPs.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/willtebbutt/TemporalGPs.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/6061bc68ef58342aaab3dedca730e530a2595f39/68747470733a2f2f636f6465636f762e696f2f67682f77696c6c746562627574742f54656d706f72616c4750732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/willtebbutt/TemporalGPs.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p>TemporalGPs.jl is a tool to make Gaussian processes (GPs) defined using <a href="https://github.com/willtebbutt/Stheno.jl/">Stheno.jl</a> fast for time-series. It provides a single-function public API that lets you specify that this package should perform inference, rather than Stheno.jl.</p>
<h1><a id="user-content-example-usage" class="anchor" aria-hidden="true" href="#example-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Example Usage</h1>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> Stheno, TemporalGPs

<span class="pl-c"><span class="pl-c">#</span> Specify a Stheno.jl GP as usual</span>
f_naive <span class="pl-k">=</span> <span class="pl-c1">GP</span>(<span class="pl-c1">Matern32</span>(), <span class="pl-c1">GPC</span>())

<span class="pl-c"><span class="pl-c">#</span> Wrap it in an object that TemporalGPs knows how to handle.</span>
f <span class="pl-k">=</span> <span class="pl-c1">to_sde</span>(f_naive)

<span class="pl-c"><span class="pl-c">#</span> Project onto finite-dimensional distribution as usual.</span>
x <span class="pl-k">=</span> <span class="pl-c1">range</span>(<span class="pl-k">-</span><span class="pl-c1">5.0</span>, <span class="pl-c1">5.0</span>; length<span class="pl-k">=</span><span class="pl-c1">1000</span>)
fx <span class="pl-k">=</span> <span class="pl-c1">f</span>(x, <span class="pl-c1">0.1</span>)

<span class="pl-c"><span class="pl-c">#</span> Sample from the prior as usual.</span>
y <span class="pl-k">=</span> <span class="pl-c1">rand</span>(fx_ssm)

<span class="pl-c"><span class="pl-c">#</span> Compute the log marginal likelihood of the data as usual.</span>
<span class="pl-c1">logpdf</span>(fx_ssm, y)</pre></div>
<h1><a id="user-content-performance-optimisations" class="anchor" aria-hidden="true" href="#performance-optimisations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Performance Optimisations</h1>
<p>There are a couple of ways that <code>TemporalGPs.jl</code> can represent things internally. In particular, it can use regular Julia <code>Vector</code> and <code>Matrix</code> objects, or the <code>StaticArrays.jl</code> package to optimise in certain cases. The default is the former. To employ the latter, just add an extra argument to the <code>ssm</code> function:</p>
<div class="highlight highlight-source-julia"><pre>fx_ssm <span class="pl-k">=</span> <span class="pl-c1">ssm</span>(fx, TemporalGPs<span class="pl-k">.</span><span class="pl-c1">StaticStorage</span>())</pre></div>
<p>See the benchmarking results below for the effect that this can have.</p>
<h1><a id="user-content-preliminary-benchmarking-results" class="anchor" aria-hidden="true" href="#preliminary-benchmarking-results"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Preliminary Benchmarking Results</h1>
<p><a target="_blank" rel="noopener noreferrer" href="/examples/preliminary-benchmarks.png"><img src="/examples/preliminary-benchmarks.png" alt="" style="max-width:100%;"></a></p>
<p>"naive" timings are with the usual <a href="https://github.com/willtebbutt/Stheno.jl/">Stheno.jl</a> inference routines, and is the default implementation for GPs. "lgssm" timings are conducted using <code>ssm</code> with no additional arguments. "static-lgssm" uses the <code>TemporalGPs.StaticStorage()</code> option discussed above.</p>
<p>Gradient computations use Zygote. Custom adjoints have been implemented to achieve this level of performance.</p>
<h1><a id="user-content-on-going-work" class="anchor" aria-hidden="true" href="#on-going-work"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>On-going Work</h1>
<ul>
<li>Optimisation -- in particular work needs to be done to reduce the allocations made when the default storage is employed.</li>
<li>Feature coverage -- only a subset of <code>Stheno.jl</code>'s functionality is currently available, but it's possible to cover much more.</li>
</ul>
<p>If you're interested in helping out with this stuff, please get in touch.</p>
<h1><a id="user-content-relevant-literature" class="anchor" aria-hidden="true" href="#relevant-literature"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Relevant literature</h1>
<p>See chapter 12 of [1] for the basics.</p>
<p>[1] - Särkkä, Simo, and Arno Solin. Applied stochastic differential equations. Vol. 10. Cambridge University Press, 2019.</p>
<h1><a id="user-content-gotchas" class="anchor" aria-hidden="true" href="#gotchas"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Gotchas</h1>
<ul>
<li>And time-rescaling is assumed to be a strictly increasing function of time. If this is not the case, then your code will fail silently. This could be addressed via careful engineering.</li>
</ul>
</article></div>