<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-blochsimjl" class="anchor" aria-hidden="true" href="#blochsimjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>BlochSim.jl</h1>
<p dir="auto"><a href="https://github.com/StevenWhitaker/BlochSim.jl">https://github.com/StevenWhitaker/BlochSim.jl</a></p>
<p dir="auto"><a href="https://StevenWhitaker.github.io/BlochSim.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="docs-stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://StevenWhitaker.github.io/BlochSim.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="docs-dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/StevenWhitaker/BlochSim.jl/actions"><img src="https://github.com/StevenWhitaker/BlochSim.jl/actions/workflows/runtests.yml/badge.svg" alt="action status" style="max-width: 100%;"></a>
<a href="https://juliaci.github.io/NanosoldierReports/pkgeval_badges/B/BlochSim.html" rel="nofollow"><img src="https://camo.githubusercontent.com/b5b2c532c1db8e452bef208976942c201b5d4e076973a51ec6516a786c6982b6/68747470733a2f2f6a756c696163692e6769746875622e696f2f4e616e6f736f6c646965725265706f7274732f706b676576616c5f6261646765732f422f426c6f636853696d2e737667" alt="pkgeval status" data-canonical-src="https://juliaci.github.io/NanosoldierReports/pkgeval_badges/B/BlochSim.svg" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/StevenWhitaker/BlochSim.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/bdc1a391c81a3928f2fcf35cbf357e3f44384f58b34bb2fc54a520399b9f0b0c/68747470733a2f2f636f6465636f762e696f2f67682f53746576656e57686974616b65722f426c6f636853696d2e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e7376673f746f6b656e3d74647569654267656d61" alt="codecov" data-canonical-src="https://codecov.io/gh/StevenWhitaker/BlochSim.jl/branch/main/graph/badge.svg?token=tduieBgema" style="max-width: 100%;"></a>
<a href="LICENSE"><img src="https://camo.githubusercontent.com/bbf49a2eb96e6f718803f2493bd7aa3baae61abb09b7f8fc185a94e08c504dc6/687474703a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d627269676874677265656e2e7376673f7374796c653d666c6174" alt="license" data-canonical-src="http://img.shields.io/badge/license-MIT-brightgreen.svg?style=flat" style="max-width: 100%;"></a></p>
<p dir="auto">This Julia package provides functionality
for simulating arbitrary MRI pulse sequences.
It includes support for (traditional) single-compartment Bloch simulations
(using <code>Spin</code> objects) as well as multi-compartment Bloch-McConnell simulations
(using <code>SpinMC</code> objects).</p>
<h2 dir="auto"><a id="user-content-getting-started" class="anchor" aria-hidden="true" href="#getting-started"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Getting started</h2>
<p dir="auto">This package is registered in the
<a href="https://github.com/JuliaRegistries/General">General</a> registry, so you can
install it at the REPL with <code>] add BlochSim</code>.</p>
<p dir="auto">The main functionality is provided by the functions
<code>freeprecess</code>, <code>excite</code>, and <code>spoil</code>
(and their mutating variants <code>freeprecess!</code>, <code>excite!</code>, and <code>spoil!</code>).
These functions can be used to simulate a wide variety of MRI sequences.
In addition, this package provides implementations for
a multi-echo spin echo (MESE) scan (<code>MESEBlochSim</code>)
and a spoiled gradient-recalled echo (SPGR) scan (<code>SPGRBlochSim</code>).</p>
<h2 dir="auto"><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Examples</h2>
<p dir="auto">See the examples given in the documentation strings for how to use the provided
functions. To access the documentation for, e.g., <code>freeprecess</code>, simply type
<code>?freeprecess</code> at the Julia REPL after loading the package.</p>
<p dir="auto">For examples of how to simulate full MRI sequences, see
<a href="src/mese.jl">src/mese.jl</a> and <a href="src/spgr.jl">src/spgr.jl</a> in this repo,
and <a href="https://github.com/StevenWhitaker/STFR.jl">STFR.jl</a>.</p>
<p dir="auto">Below are some concrete examples of how to use this package.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using BlochSim

julia&gt; spin = Spin(1, 1000, 100, 3.75)
Spin{Float64}:
 M = Magnetization(0.0, 0.0, 1.0)
 M0 = 1.0
 T1 = 1000.0 ms
 T2 = 100.0 ms
 Δf = 3.75 Hz
 pos = Position(0.0, 0.0, 0.0) cm

julia&gt; excite!(spin, InstantaneousRF(π/2)) # 90° excitation

julia&gt; spin.M # Mz is not quite 0 due to numerical roundoff
Magnetization vector with eltype Float64:
 Mx = 1.0
 My = 0.0
 Mz = 6.123233995736766e-17

julia&gt; freeprecess!(spin, 100) # Free-precess for 100 ms

julia&gt; spin.M
Magnetization vector with eltype Float64:
 Mx = -0.2601300475114444
 My = -0.2601300475114445
 Mz = 0.09516258196404054

julia&gt; spgr! = SPGRBlochSim(5, 2.5, deg2rad(20)) # Create an object to simulate an SPGR scan
Spoiled Gradient-Recalled Echo (SPGR) Bloch Simulation:
 TR = 5.0 ms
 TE = 2.5 ms
 rf (excitation pulse) = Instantaneous RF pulse with eltype Float64:
 α = 0.3490658503988659 rad
 θ = 0.0 rad
 spoiling = IdealSpoiling()
 steady-state

julia&gt; spgr!(spin) # Simulate a steady-state SPGR scan applied to the given spin

julia&gt; spin.M # Steady-state magnetization
Magnetization vector with eltype Float64:
 Mx = 0.025553542433162182
 My = -0.0015069712547712193
 Mz = 0.07442699373678281

julia&gt; spinmc = SpinMC(1, (0.2, 0.8), (400, 1000), (20, 80), (15, 0), (100, 25))
SpinMC{Float64,2}:
 M = MagnetizationMC((0.0, 0.0, 0.2), (0.0, 0.0, 0.8))
 M0 = 1.0
 frac = (0.2, 0.8)
 T1 = (400.0, 1000.0) ms
 T2 = (20.0, 80.0) ms
 Δf = (15.0, 0.0) Hz
 r = ((0.0, 0.01), (0.04, 0.0)) 1/ms
 pos = Position(0.0, 0.0, 0.0) cm

julia&gt; spgr!(spinmc) # The same SPGR scan can be used on multi-compartment spins

julia&gt; spinmc.M # Steady-state magnetization
2-compartment Magnetization vector with eltype Float64:
 Compartment 1:
  Mx = -0.09359002635156467
  My = 0.02433674787041617
  Mz = -0.36973998540693054
 Compartment 2:
  Mx = 0.1541252837882581
  My = 0.00031515000730316224
  Mz = 0.5077167235922019

julia&gt; signal(spin) # Grab the observed signal from the spin
0.025553542433162182 - 0.0015069712547712193im

julia&gt; signal(spinmc)
0.060535257436693427 + 0.02465189787771933im"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> BlochSim

julia<span class="pl-k">&gt;</span> spin <span class="pl-k">=</span> <span class="pl-c1">Spin</span>(<span class="pl-c1">1</span>, <span class="pl-c1">1000</span>, <span class="pl-c1">100</span>, <span class="pl-c1">3.75</span>)
Spin{Float64}<span class="pl-k">:</span>
 M <span class="pl-k">=</span> <span class="pl-c1">Magnetization</span>(<span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">1.0</span>)
 M0 <span class="pl-k">=</span> <span class="pl-c1">1.0</span>
 T1 <span class="pl-k">=</span> <span class="pl-c1">1000.0</span> ms
 T2 <span class="pl-k">=</span> <span class="pl-c1">100.0</span> ms
 Δf <span class="pl-k">=</span> <span class="pl-c1">3.75</span> Hz
 pos <span class="pl-k">=</span> <span class="pl-c1">Position</span>(<span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>) cm

julia<span class="pl-k">&gt;</span> <span class="pl-c1">excite!</span>(spin, <span class="pl-c1">InstantaneousRF</span>(π<span class="pl-k">/</span><span class="pl-c1">2</span>)) <span class="pl-c"><span class="pl-c">#</span> 90° excitation</span>

julia<span class="pl-k">&gt;</span> spin<span class="pl-k">.</span>M <span class="pl-c"><span class="pl-c">#</span> Mz is not quite 0 due to numerical roundoff</span>
Magnetization vector with eltype Float64<span class="pl-k">:</span>
 Mx <span class="pl-k">=</span> <span class="pl-c1">1.0</span>
 My <span class="pl-k">=</span> <span class="pl-c1">0.0</span>
 Mz <span class="pl-k">=</span> <span class="pl-c1">6.123233995736766e-17</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">freeprecess!</span>(spin, <span class="pl-c1">100</span>) <span class="pl-c"><span class="pl-c">#</span> Free-precess for 100 ms</span>

julia<span class="pl-k">&gt;</span> spin<span class="pl-k">.</span>M
Magnetization vector with eltype Float64<span class="pl-k">:</span>
 Mx <span class="pl-k">=</span> <span class="pl-k">-</span><span class="pl-c1">0.2601300475114444</span>
 My <span class="pl-k">=</span> <span class="pl-k">-</span><span class="pl-c1">0.2601300475114445</span>
 Mz <span class="pl-k">=</span> <span class="pl-c1">0.09516258196404054</span>

julia<span class="pl-k">&gt;</span> spgr! <span class="pl-k">=</span> <span class="pl-c1">SPGRBlochSim</span>(<span class="pl-c1">5</span>, <span class="pl-c1">2.5</span>, <span class="pl-c1">deg2rad</span>(<span class="pl-c1">20</span>)) <span class="pl-c"><span class="pl-c">#</span> Create an object to simulate an SPGR scan</span>
Spoiled Gradient<span class="pl-k">-</span>Recalled Echo (SPGR) Bloch Simulation<span class="pl-k">:</span>
 TR <span class="pl-k">=</span> <span class="pl-c1">5.0</span> ms
 TE <span class="pl-k">=</span> <span class="pl-c1">2.5</span> ms
 rf (excitation pulse) <span class="pl-k">=</span> Instantaneous RF pulse with eltype Float64<span class="pl-k">:</span>
 α <span class="pl-k">=</span> <span class="pl-c1">0.3490658503988659</span> rad
 θ <span class="pl-k">=</span> <span class="pl-c1">0.0</span> rad
 spoiling <span class="pl-k">=</span> <span class="pl-c1">IdealSpoiling</span>()
 steady<span class="pl-k">-</span>state

julia<span class="pl-k">&gt;</span> <span class="pl-c1">spgr!</span>(spin) <span class="pl-c"><span class="pl-c">#</span> Simulate a steady-state SPGR scan applied to the given spin</span>

julia<span class="pl-k">&gt;</span> spin<span class="pl-k">.</span>M <span class="pl-c"><span class="pl-c">#</span> Steady-state magnetization</span>
Magnetization vector with eltype Float64<span class="pl-k">:</span>
 Mx <span class="pl-k">=</span> <span class="pl-c1">0.025553542433162182</span>
 My <span class="pl-k">=</span> <span class="pl-k">-</span><span class="pl-c1">0.0015069712547712193</span>
 Mz <span class="pl-k">=</span> <span class="pl-c1">0.07442699373678281</span>

julia<span class="pl-k">&gt;</span> spinmc <span class="pl-k">=</span> <span class="pl-c1">SpinMC</span>(<span class="pl-c1">1</span>, (<span class="pl-c1">0.2</span>, <span class="pl-c1">0.8</span>), (<span class="pl-c1">400</span>, <span class="pl-c1">1000</span>), (<span class="pl-c1">20</span>, <span class="pl-c1">80</span>), (<span class="pl-c1">15</span>, <span class="pl-c1">0</span>), (<span class="pl-c1">100</span>, <span class="pl-c1">25</span>))
SpinMC{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 M <span class="pl-k">=</span> <span class="pl-c1">MagnetizationMC</span>((<span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">0.2</span>), (<span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">0.8</span>))
 M0 <span class="pl-k">=</span> <span class="pl-c1">1.0</span>
 frac <span class="pl-k">=</span> (<span class="pl-c1">0.2</span>, <span class="pl-c1">0.8</span>)
 T1 <span class="pl-k">=</span> (<span class="pl-c1">400.0</span>, <span class="pl-c1">1000.0</span>) ms
 T2 <span class="pl-k">=</span> (<span class="pl-c1">20.0</span>, <span class="pl-c1">80.0</span>) ms
 Δf <span class="pl-k">=</span> (<span class="pl-c1">15.0</span>, <span class="pl-c1">0.0</span>) Hz
 r <span class="pl-k">=</span> ((<span class="pl-c1">0.0</span>, <span class="pl-c1">0.01</span>), (<span class="pl-c1">0.04</span>, <span class="pl-c1">0.0</span>)) <span class="pl-c1">1</span><span class="pl-k">/</span>ms
 pos <span class="pl-k">=</span> <span class="pl-c1">Position</span>(<span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>) cm

julia<span class="pl-k">&gt;</span> <span class="pl-c1">spgr!</span>(spinmc) <span class="pl-c"><span class="pl-c">#</span> The same SPGR scan can be used on multi-compartment spins</span>

julia<span class="pl-k">&gt;</span> spinmc<span class="pl-k">.</span>M <span class="pl-c"><span class="pl-c">#</span> Steady-state magnetization</span>
<span class="pl-c1">2</span><span class="pl-k">-</span>compartment Magnetization vector with eltype Float64<span class="pl-k">:</span>
 Compartment <span class="pl-c1">1</span><span class="pl-k">:</span>
  Mx <span class="pl-k">=</span> <span class="pl-k">-</span><span class="pl-c1">0.09359002635156467</span>
  My <span class="pl-k">=</span> <span class="pl-c1">0.02433674787041617</span>
  Mz <span class="pl-k">=</span> <span class="pl-k">-</span><span class="pl-c1">0.36973998540693054</span>
 Compartment <span class="pl-c1">2</span><span class="pl-k">:</span>
  Mx <span class="pl-k">=</span> <span class="pl-c1">0.1541252837882581</span>
  My <span class="pl-k">=</span> <span class="pl-c1">0.00031515000730316224</span>
  Mz <span class="pl-k">=</span> <span class="pl-c1">0.5077167235922019</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">signal</span>(spin) <span class="pl-c"><span class="pl-c">#</span> Grab the observed signal from the spin</span>
<span class="pl-c1">0.025553542433162182</span> <span class="pl-k">-</span> <span class="pl-c1">0.0015069712547712193im</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">signal</span>(spinmc)
<span class="pl-c1">0.060535257436693427</span> <span class="pl-k">+</span> <span class="pl-c1">0.02465189787771933im</span></pre></div>
<h2 dir="auto"><a id="user-content-related-packages" class="anchor" aria-hidden="true" href="#related-packages"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Related package(s)</h2>
<ul dir="auto">
<li><a href="https://github.com/JakobAsslaender/MRIgeneralizedBloch.jl">MRIgeneralizedBloch.jl</a>
focuses on <a href="https://doi.org/10.1002/mrm.29071" rel="nofollow">magnetization transfer</a></li>
</ul>
<h2 dir="auto"><a id="user-content-acknowledgement" class="anchor" aria-hidden="true" href="#acknowledgement"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Acknowledgement</h2>
<p dir="auto">This package was developed based on
<a href="http://mrsrl.stanford.edu/~brian/bloch/" rel="nofollow">Brian Hargreaves' Bloch simulation tutorial</a>.
All tests for this package of the form <code>testX0x</code> (like <code>testA5b</code> or <code>testF3d</code>)
are based on the corresponding section in the tutorial (see
<a href="test/matlab.jl">test/matlab.jl</a>).</p>

</article></div>