<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-loggingformatsjl" class="anchor" aria-hidden="true" href="#loggingformatsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>LoggingFormats.jl</h1>
<p dir="auto">This package is an aggregation of various useful format functions to use with the
<a href="https://github.com/JuliaLogging/LoggingExtras.jl#formatlogger-sink">FormatLogger</a> from the
<a href="https://github.com/JuliaLogging/LoggingExtras.jl">LoggingExtras</a> package.</p>
<p dir="auto">Currently, the following functors are available:</p>
<ul dir="auto">
<li><code>JSON</code>: output log events as JSON</li>
<li><code>LogFmt</code>: output log events formatted as <a href="https://brandur.org/logfmt" rel="nofollow">logfmt</a></li>
<li><code>Truncated</code>: truncation of log messages</li>
</ul>
<h2 dir="auto"><a id="user-content-json-output-log-events-as-json" class="anchor" aria-hidden="true" href="#json-output-log-events-as-json"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>JSON</code>: Output log events as JSON</h2>
<p dir="auto"><code>LoggingFormats.JSON()</code> is a function which formats the log message and the log metadata as JSON.
Example:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using LoggingFormats, LoggingExtras

julia&gt; with_logger(FormatLogger(LoggingFormats.JSON(), stderr)) do
           @info &quot;hello, world&quot;
           @error &quot;something is wrong&quot;
       end
{&quot;level&quot;:&quot;info&quot;,&quot;msg&quot;:&quot;hello, world&quot;,&quot;module&quot;:&quot;Main&quot;,&quot;file&quot;:&quot;REPL[10]&quot;,&quot;line&quot;:2,&quot;group&quot;:&quot;REPL[10]&quot;,&quot;id&quot;:&quot;Main_6972c828&quot;,&quot;kwargs&quot;:{}}
{&quot;level&quot;:&quot;error&quot;,&quot;msg&quot;:&quot;something is wrong&quot;,&quot;module&quot;:&quot;Main&quot;,&quot;file&quot;:&quot;REPL[10]&quot;,&quot;line&quot;:3,&quot;group&quot;:&quot;REPL[10]&quot;,&quot;id&quot;:&quot;Main_2289c7f9&quot;,&quot;kwargs&quot;:{}}"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> LoggingFormats, LoggingExtras

julia<span class="pl-k">&gt;</span> <span class="pl-c1">with_logger</span>(<span class="pl-c1">FormatLogger</span>(LoggingFormats<span class="pl-k">.</span><span class="pl-c1">JSON</span>(), <span class="pl-c1">stderr</span>)) <span class="pl-k">do</span>
           <span class="pl-c1">@info</span> <span class="pl-s"><span class="pl-pds">"</span>hello, world<span class="pl-pds">"</span></span>
           <span class="pl-c1">@error</span> <span class="pl-s"><span class="pl-pds">"</span>something is wrong<span class="pl-pds">"</span></span>
       <span class="pl-k">end</span>
{<span class="pl-s"><span class="pl-pds">"</span>level<span class="pl-pds">"</span></span>:<span class="pl-s"><span class="pl-pds">"</span>info<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>msg<span class="pl-pds">"</span></span>:<span class="pl-s"><span class="pl-pds">"</span>hello, world<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>module<span class="pl-pds">"</span></span>:<span class="pl-s"><span class="pl-pds">"</span>Main<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>file<span class="pl-pds">"</span></span>:<span class="pl-s"><span class="pl-pds">"</span>REPL[10]<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>line<span class="pl-pds">"</span></span>:<span class="pl-c1">2</span>,<span class="pl-s"><span class="pl-pds">"</span>group<span class="pl-pds">"</span></span>:<span class="pl-s"><span class="pl-pds">"</span>REPL[10]<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>id<span class="pl-pds">"</span></span>:<span class="pl-s"><span class="pl-pds">"</span>Main_6972c828<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>kwargs<span class="pl-pds">"</span></span>:{}}
{<span class="pl-s"><span class="pl-pds">"</span>level<span class="pl-pds">"</span></span>:<span class="pl-s"><span class="pl-pds">"</span>error<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>msg<span class="pl-pds">"</span></span>:<span class="pl-s"><span class="pl-pds">"</span>something is wrong<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>module<span class="pl-pds">"</span></span>:<span class="pl-s"><span class="pl-pds">"</span>Main<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>file<span class="pl-pds">"</span></span>:<span class="pl-s"><span class="pl-pds">"</span>REPL[10]<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>line<span class="pl-pds">"</span></span>:<span class="pl-c1">3</span>,<span class="pl-s"><span class="pl-pds">"</span>group<span class="pl-pds">"</span></span>:<span class="pl-s"><span class="pl-pds">"</span>REPL[10]<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>id<span class="pl-pds">"</span></span>:<span class="pl-s"><span class="pl-pds">"</span>Main_2289c7f9<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>kwargs<span class="pl-pds">"</span></span>:{}}</pre></div>
<p dir="auto">One can also pass <code>recursive=true</code> to recursively serialize the <code>kwargs</code> as JSON:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using LoggingFormats, LoggingExtras

julia&gt; with_logger(FormatLogger(LoggingFormats.JSON(; recursive=true), stderr)) do
                  @info &quot;hello, world&quot; key=Dict(&quot;hello&quot; =&gt; true)
       end
{&quot;level&quot;:&quot;info&quot;,&quot;msg&quot;:&quot;hello, world&quot;,&quot;module&quot;:&quot;Main&quot;,&quot;file&quot;:&quot;REPL[18]&quot;,&quot;line&quot;:2,&quot;group&quot;:&quot;REPL[18]&quot;,&quot;id&quot;:&quot;Main_ffce16b5&quot;,&quot;kwargs&quot;:{&quot;key&quot;:{&quot;hello&quot;:true}}}"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> LoggingFormats, LoggingExtras

julia<span class="pl-k">&gt;</span> <span class="pl-c1">with_logger</span>(<span class="pl-c1">FormatLogger</span>(LoggingFormats<span class="pl-k">.</span><span class="pl-c1">JSON</span>(; recursive<span class="pl-k">=</span><span class="pl-c1">true</span>), <span class="pl-c1">stderr</span>)) <span class="pl-k">do</span>
                  <span class="pl-c1">@info</span> <span class="pl-s"><span class="pl-pds">"</span>hello, world<span class="pl-pds">"</span></span> key<span class="pl-k">=</span><span class="pl-c1">Dict</span>(<span class="pl-s"><span class="pl-pds">"</span>hello<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">true</span>)
       <span class="pl-k">end</span>
{<span class="pl-s"><span class="pl-pds">"</span>level<span class="pl-pds">"</span></span>:<span class="pl-s"><span class="pl-pds">"</span>info<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>msg<span class="pl-pds">"</span></span>:<span class="pl-s"><span class="pl-pds">"</span>hello, world<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>module<span class="pl-pds">"</span></span>:<span class="pl-s"><span class="pl-pds">"</span>Main<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>file<span class="pl-pds">"</span></span>:<span class="pl-s"><span class="pl-pds">"</span>REPL[18]<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>line<span class="pl-pds">"</span></span>:<span class="pl-c1">2</span>,<span class="pl-s"><span class="pl-pds">"</span>group<span class="pl-pds">"</span></span>:<span class="pl-s"><span class="pl-pds">"</span>REPL[18]<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>id<span class="pl-pds">"</span></span>:<span class="pl-s"><span class="pl-pds">"</span>Main_ffce16b5<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>kwargs<span class="pl-pds">"</span></span>:{<span class="pl-s"><span class="pl-pds">"</span>key<span class="pl-pds">"</span></span>:{<span class="pl-s"><span class="pl-pds">"</span>hello<span class="pl-pds">"</span></span><span class="pl-c1">:true</span>}}}</pre></div>
<p dir="auto">If it encounters something which does not have a defined <code>StructTypes.StructType</code> to use
for serializing to JSON, it will fallback to converting the objects to strings, like the default <code>recursive=false</code> option does. Handles the key <code>exception</code> specially, by printing errors and stacktraces using <code>Base.showerror</code>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; f() = try
                throw(ArgumentError(&quot;Bad input&quot;))
            catch e
                @error &quot;Input error&quot; exception=(e, catch_backtrace())
            end

julia&gt; with_logger(f, FormatLogger(LoggingFormats.JSON(; recursive=true), stderr))
{&quot;level&quot;:&quot;error&quot;,&quot;msg&quot;:&quot;Input error&quot;,&quot;module&quot;:&quot;Main&quot;,&quot;file&quot;:&quot;REPL[2]&quot;,&quot;line&quot;:4,&quot;group&quot;:&quot;REPL[2]&quot;,&quot;id&quot;:&quot;Main_a226875f&quot;,&quot;kwargs&quot;:{&quot;exception&quot;:&quot;ERROR: ArgumentError: Bad input\nStacktrace:\n [1] f()\n   @ Main ./REPL[2]:2\n [2] with_logstate(f::Function, logstate::Any)\n   @ Base.CoreLogging ./logging.jl:511\n [3] with_logger(f::Function, logger::FormatLogger)\n   @ Base.CoreLogging ./logging.jl:623\n [4] top-level scope\n   @ REPL[3]:1\n&quot;}}"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-en">f</span>() <span class="pl-k">=</span> <span class="pl-k">try</span>
                <span class="pl-c1">throw</span>(<span class="pl-c1">ArgumentError</span>(<span class="pl-s"><span class="pl-pds">"</span>Bad input<span class="pl-pds">"</span></span>))
            <span class="pl-k">catch</span> e
                <span class="pl-c1">@error</span> <span class="pl-s"><span class="pl-pds">"</span>Input error<span class="pl-pds">"</span></span> exception<span class="pl-k">=</span>(e, <span class="pl-c1">catch_backtrace</span>())
            <span class="pl-k">end</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">with_logger</span>(f, <span class="pl-c1">FormatLogger</span>(LoggingFormats<span class="pl-k">.</span><span class="pl-c1">JSON</span>(; recursive<span class="pl-k">=</span><span class="pl-c1">true</span>), <span class="pl-c1">stderr</span>))
{<span class="pl-s"><span class="pl-pds">"</span>level<span class="pl-pds">"</span></span>:<span class="pl-s"><span class="pl-pds">"</span>error<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>msg<span class="pl-pds">"</span></span>:<span class="pl-s"><span class="pl-pds">"</span>Input error<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>module<span class="pl-pds">"</span></span>:<span class="pl-s"><span class="pl-pds">"</span>Main<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>file<span class="pl-pds">"</span></span>:<span class="pl-s"><span class="pl-pds">"</span>REPL[2]<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>line<span class="pl-pds">"</span></span>:<span class="pl-c1">4</span>,<span class="pl-s"><span class="pl-pds">"</span>group<span class="pl-pds">"</span></span>:<span class="pl-s"><span class="pl-pds">"</span>REPL[2]<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>id<span class="pl-pds">"</span></span>:<span class="pl-s"><span class="pl-pds">"</span>Main_a226875f<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>kwargs<span class="pl-pds">"</span></span>:{<span class="pl-s"><span class="pl-pds">"</span>exception<span class="pl-pds">"</span></span>:<span class="pl-s"><span class="pl-pds">"</span>ERROR: ArgumentError: Bad input<span class="pl-cce">\n</span>Stacktrace:<span class="pl-cce">\n</span> [1] f()<span class="pl-cce">\n</span>   @ Main ./REPL[2]:2<span class="pl-cce">\n</span> [2] with_logstate(f::Function, logstate::Any)<span class="pl-cce">\n</span>   @ Base.CoreLogging ./logging.jl:511<span class="pl-cce">\n</span> [3] with_logger(f::Function, logger::FormatLogger)<span class="pl-cce">\n</span>   @ Base.CoreLogging ./logging.jl:623<span class="pl-cce">\n</span> [4] top-level scope<span class="pl-cce">\n</span>   @ REPL[3]:1<span class="pl-cce">\n</span><span class="pl-pds">"</span></span>}}</pre></div>
<h2 dir="auto"><a id="user-content-logfmt-format-log-events-as-logfmt" class="anchor" aria-hidden="true" href="#logfmt-format-log-events-as-logfmt"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>LogFmt</code>: Format log events as logfmt</h2>
<p dir="auto"><code>LoggingFormats.LogFmt()</code> is a function which formats the log message in the
<a href="https://brandur.org/logfmt" rel="nofollow">logfmt</a> format. Example:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using LoggingFormats, LoggingExtras

julia&gt; with_logger(FormatLogger(LoggingFormats.LogFmt(), stderr)) do
           @info &quot;hello, world&quot;
           @error &quot;something is wrong&quot;
       end
level=info msg=&quot;hello, world&quot; module=Main file=&quot;REPL[2]&quot; line=2 group=&quot;REPL[2]&quot; id=Main_6972c827
level=error msg=&quot;something is wrong&quot; module=Main file=&quot;REPL[2]&quot; line=3 group=&quot;REPL[2]&quot; id=Main_2289c7f8"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> LoggingFormats, LoggingExtras

julia<span class="pl-k">&gt;</span> <span class="pl-c1">with_logger</span>(<span class="pl-c1">FormatLogger</span>(LoggingFormats<span class="pl-k">.</span><span class="pl-c1">LogFmt</span>(), <span class="pl-c1">stderr</span>)) <span class="pl-k">do</span>
           <span class="pl-c1">@info</span> <span class="pl-s"><span class="pl-pds">"</span>hello, world<span class="pl-pds">"</span></span>
           <span class="pl-c1">@error</span> <span class="pl-s"><span class="pl-pds">"</span>something is wrong<span class="pl-pds">"</span></span>
       <span class="pl-k">end</span>
level<span class="pl-k">=</span>info msg<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>hello, world<span class="pl-pds">"</span></span> <span class="pl-k">module</span><span class="pl-k">=</span>Main file<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>REPL[2]<span class="pl-pds">"</span></span> line<span class="pl-k">=</span><span class="pl-c1">2</span> group<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>REPL[2]<span class="pl-pds">"</span></span> id<span class="pl-k">=</span>Main_6972c827
level<span class="pl-k">=</span>error msg<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>something is wrong<span class="pl-pds">"</span></span> <span class="pl-k">module</span><span class="pl-k">=</span>Main file<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>REPL[2]<span class="pl-pds">"</span></span> line<span class="pl-k">=</span><span class="pl-c1">3</span> group<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>REPL[2]<span class="pl-pds">"</span></span> id<span class="pl-k">=</span>Main_2289c7f8</pre></div>
<h2 dir="auto"><a id="user-content-truncated-truncate-long-variables-and-messages" class="anchor" aria-hidden="true" href="#truncated-truncate-long-variables-and-messages"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>Truncated</code>: Truncate long variables and messages</h2>
<p dir="auto"><code>LoggingFormats.Truncated(max_var_len=5_000)</code> is a function which formats data in similar manner as <code>ConsoleLogger</code>,
but with truncation of string representation when it exceeds <code>max_var_len</code>.
This format truncates the length of message itself, and truncates string representation of
individual variables, but does not truncate the size of whole printed text.</p>
<p dir="auto">See the examples:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using LoggingFormats, LoggingExtras

julia&gt; with_logger(FormatLogger(LoggingFormats.Truncated(30))) do
    short_var = &quot;a&quot;^5
    long_var = &quot;a&quot;^50
    @info &quot;a short message&quot; short_var long_var
    @info &quot;a very long message &quot;^20 short_var long_var
end
┌ Info: a short message
│   short_var = aaaaa
│   long_var = aaaaaaaaaaaa…
└ @ Main REPL[46]:4
┌ Info: a very long message a very lo…
│   short_var = aaaaa
│   long_var = aaaaaaaaaaaa…
└ @ Main REPL[46]:5"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> LoggingFormats, LoggingExtras

julia<span class="pl-k">&gt;</span> <span class="pl-c1">with_logger</span>(<span class="pl-c1">FormatLogger</span>(LoggingFormats<span class="pl-k">.</span><span class="pl-c1">Truncated</span>(<span class="pl-c1">30</span>))) <span class="pl-k">do</span>
    short_var <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>a<span class="pl-pds">"</span></span><span class="pl-k">^</span><span class="pl-c1">5</span>
    long_var <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>a<span class="pl-pds">"</span></span><span class="pl-k">^</span><span class="pl-c1">50</span>
    <span class="pl-c1">@info</span> <span class="pl-s"><span class="pl-pds">"</span>a short message<span class="pl-pds">"</span></span> short_var long_var
    <span class="pl-c1">@info</span> <span class="pl-s"><span class="pl-pds">"</span>a very long message <span class="pl-pds">"</span></span><span class="pl-k">^</span><span class="pl-c1">20</span> short_var long_var
<span class="pl-k">end</span>
┌ Info<span class="pl-k">:</span> a short message
│   short_var <span class="pl-k">=</span> aaaaa
│   long_var <span class="pl-k">=</span> aaaaaaaaaaaa…
└ @ Main REPL[<span class="pl-c1">46</span>]<span class="pl-k">:</span><span class="pl-c1">4</span>
┌ Info<span class="pl-k">:</span> a very long message a very lo…
│   short_var <span class="pl-k">=</span> aaaaa
│   long_var <span class="pl-k">=</span> aaaaaaaaaaaa…
└ @ Main REPL[<span class="pl-c1">46</span>]<span class="pl-k">:</span><span class="pl-c1">5</span></pre></div>
</article></div>