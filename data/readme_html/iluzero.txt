<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-iluzerojl" class="anchor" aria-hidden="true" href="#iluzerojl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>ILUZero.jl</h1>
<p dir="auto"><code>ILUZero.jl</code> is a Julia implementation of incomplete LU factorization with zero level of fill-in. It allows for non-allocating updates of the factorization.</p>
<h2 dir="auto"><a id="user-content-requirements" class="anchor" aria-hidden="true" href="#requirements"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Requirements</h2>
<ul dir="auto">
<li>Julia 1.0 and up</li>
</ul>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; ]
pkg&gt; add ILUZero"><pre>julia<span class="pl-k">&gt;</span> ]
pkg<span class="pl-k">&gt;</span> add ILUZero</pre></div>
<h2 dir="auto"><a id="user-content-why-use-iluzerojl" class="anchor" aria-hidden="true" href="#why-use-iluzerojl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Why use ILUZero.jl?</h2>
<p dir="auto">This package was created to exploit some specific properties of a problem I had:</p>
<ul dir="auto">
<li>the non-zero elements of the matrix were frequently updated</li>
<li>an approximation of the matrix inverse was needed each time the non-zero elements were changed</li>
<li>the sparsity structure of the matrix was never altered</li>
<li>the non-zero elements of the matrix weren't necessarily floating point numbers</li>
</ul>
<p dir="auto">The ILU(0) preconditioner was a great solution for this problem. The method is simple enough to write a performant version purely in Julia which allowed using Julia's flexible type system for the elements. Also, ILU(0) has constant memory requirements so the updating matrix could re-use previously allocated structures<sup>*</sup>. Win win (win win)!</p>
<p dir="auto"><em><sup>*</sup>Hint: take a look at <a href="https://github.com/mcovalt/ConjugateGradients.jl">ConjugateGradients.jl</a> if this type of preconditioner would be beneficial to your project. Combined, these packages can help reduce allocations in those hot paths.</em></p>
<h2 dir="auto"><a id="user-content-how-to-use" class="anchor" aria-hidden="true" href="#how-to-use"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>How to use</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using ILUZero"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> ILUZero</pre></div>
<ul dir="auto">
<li><code>LU = ilu0(A)</code>: Create a factorization based on a sparse matrix <code>A</code></li>
<li><code>ilu0!(LU, A)</code>: Update factorization <code>LU</code> in-place based on a sparse matrix <code>A</code>. This assumes the original factorization was created with another sparse matrix with the exact same sparsity pattern as <code>A</code>. No check is made for this.</li>
<li>To solve for <code>x</code> in <code>(LU)x=b</code>, use the same methods as you typically would: <code>\</code> or <code>ldiv!(x, LU, b)</code>. See <a href="https://docs.julialang.org/en/v1/stdlib/LinearAlgebra/" rel="nofollow">the docs</a> for further information.</li>
<li>There's also:
<ul dir="auto">
<li>Forward substitution: <code>forward_substitution!(y, LU, b)</code> solves <code>L\b</code> and stores the solution in y.</li>
<li>Backward substitution: <code>backward_substitution!(x, LU, y)</code> solves <code>U\y</code> and stores the solution in x.</li>
<li>Nonzero count: <code>nnz(LU)</code> will return the number of nonzero entries in <code>LU</code>.</li>
</ul>
</li>
</ul>
<h2 dir="auto"><a id="user-content-performance" class="anchor" aria-hidden="true" href="#performance"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Performance</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using ILUZero
julia&gt; using BenchmarkTools, LinearAlgebra, SparseArrays
julia&gt; A = sprand(1000, 1000, 5 / 1000) + 10I
julia&gt; fact = @btime ilu0(A)
       119.475 μs (21 allocations: 165.31 KiB)
julia&gt; updated_fact = @btime ilu0!($fact, $A)
       83.079 μs (0 allocations: 0 bytes)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> ILUZero
julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> BenchmarkTools, LinearAlgebra, SparseArrays
julia<span class="pl-k">&gt;</span> A <span class="pl-k">=</span> <span class="pl-c1">sprand</span>(<span class="pl-c1">1000</span>, <span class="pl-c1">1000</span>, <span class="pl-c1">5</span> <span class="pl-k">/</span> <span class="pl-c1">1000</span>) <span class="pl-k">+</span> <span class="pl-c1">10</span>I
julia<span class="pl-k">&gt;</span> fact <span class="pl-k">=</span> <span class="pl-c1">@btime</span> <span class="pl-c1">ilu0</span>(A)
       <span class="pl-c1">119.475</span> μs (<span class="pl-c1">21</span> allocations<span class="pl-k">:</span> <span class="pl-c1">165.31</span> KiB)
julia<span class="pl-k">&gt;</span> updated_fact <span class="pl-k">=</span> <span class="pl-c1">@btime</span> <span class="pl-c1">ilu0!</span>(<span class="pl-k">$</span>fact, <span class="pl-k">$</span>A)
       <span class="pl-c1">83.079</span> μs (<span class="pl-c1">0</span> allocations<span class="pl-k">:</span> <span class="pl-c1">0</span> bytes)</pre></div>
</article></div>