<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-iluzerojl" class="anchor" aria-hidden="true" href="#iluzerojl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>ILUZero.jl</h1>
<p><code>ILUZero.jl</code> is a Julia implementation of incomplete LU factorization with zero level of fill-in. It allows for non-allocating updates of the factorization. The module is compatible with <a href="https://github.com/JuliaDiff/ForwardDiff.jl">ForwardDiff.jl</a>.</p>
<h2><a id="user-content-requirements" class="anchor" aria-hidden="true" href="#requirements"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Requirements</h2>
<ul>
<li>Julia 1.0 and up</li>
</ul>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; ]
pkg&gt; add ILUZero
"><pre>julia<span class="pl-k">&gt;</span> ]
pkg<span class="pl-k">&gt;</span> add ILUZero</pre></div>
<h2><a id="user-content-why-use-iluzerojl" class="anchor" aria-hidden="true" href="#why-use-iluzerojl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Why use ILUZero.jl?</h2>
<p>You probably shouldn't. Julia's built in factorization methods are much better. Julia uses <a href="http://faculty.cse.tamu.edu/davis/suitesparse.html" rel="nofollow">SuiteSparse</a> for sparse matrix factorization which factorizes at about nearly the same speed and results in similarly sized preconditioners which are <em>much</em> more robust. In addition, Julia uses heuristics to determine a good factorization scheme for your matrix automatically.</p>
<p>Due to the zero-fill of this package, however, factorization should be a bit faster and preconditioners can be preallocated if updated by a matrix of identical sparsity.</p>
<h2><a id="user-content-how-to-use" class="anchor" aria-hidden="true" href="#how-to-use"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>How to use</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using ILUZero
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> ILUZero</pre></div>
<ul>
<li><code>LU = ilu0(A)</code>: Create a factorization based on a sparse matrix <code>A</code></li>
<li><code>ilu0!(LU, A)</code>: Update factorization <code>LU</code> in-place based on a sparse matrix <code>A</code>. This assumes the original factorization was created with another sparse matrix with the exact same sparsity pattern as <code>A</code>. No check is made for this.</li>
<li>To solve for <code>x</code> in <code>(LU)x=b</code>, use the same methods as you typically would: <code>\</code> or <code>ldiv!(x, LU, b)</code>. See <a href="https://docs.julialang.org/en/v1/stdlib/LinearAlgebra/" rel="nofollow">the docs</a> for further information.</li>
<li>There's also:
<ul>
<li>Forward substitution: <code>forward_substitution!(y, LU, b)</code> solves <code>L\b</code> and stores the solution in y.</li>
<li>Backward substitution: <code>backward_substitution!(x, LU, y)</code> solves <code>U\y</code> and stores the solution in x.</li>
<li>Nonzero count: <code>nnz(LU)</code> will return the number of nonzero entries in <code>LU</code>.</li>
</ul>
</li>
</ul>
<h2><a id="user-content-performance" class="anchor" aria-hidden="true" href="#performance"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Performance</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using ILUZero
julia&gt; using BenchmarkTools, LinearAlgebra, SparseArrays
julia&gt; A = sprand(1000, 1000, 5 / 1000) + 10I
julia&gt; fact = @btime ilu0(A)
       107.600 μs (16 allocations: 160.81 KiB)
julia&gt; updated_fact = @btime ilu0!($fact, $A)
       71.500 μs (0 allocations: 0 bytes)
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> ILUZero
julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> BenchmarkTools, LinearAlgebra, SparseArrays
julia<span class="pl-k">&gt;</span> A <span class="pl-k">=</span> <span class="pl-c1">sprand</span>(<span class="pl-c1">1000</span>, <span class="pl-c1">1000</span>, <span class="pl-c1">5</span> <span class="pl-k">/</span> <span class="pl-c1">1000</span>) <span class="pl-k">+</span> <span class="pl-c1">10</span>I
julia<span class="pl-k">&gt;</span> fact <span class="pl-k">=</span> <span class="pl-c1">@btime</span> <span class="pl-c1">ilu0</span>(A)
       <span class="pl-c1">107.600</span> μs (<span class="pl-c1">16</span> allocations<span class="pl-k">:</span> <span class="pl-c1">160.81</span> KiB)
julia<span class="pl-k">&gt;</span> updated_fact <span class="pl-k">=</span> <span class="pl-c1">@btime</span> <span class="pl-c1">ilu0!</span>(<span class="pl-k">$</span>fact, <span class="pl-k">$</span>A)
       <span class="pl-c1">71.500</span> μs (<span class="pl-c1">0</span> allocations<span class="pl-k">:</span> <span class="pl-c1">0</span> bytes)</pre></div>
</article></div>