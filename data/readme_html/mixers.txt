<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-mixers" class="anchor" aria-hidden="true" href="#mixers"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Mixers</h1>
<p><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/4b010bcb0c033c6e075ddc4a433053db91658da727144ce135c9e22e4cb57dbd/68747470733a2f2f7777772e676972616666657363616e62616b652e636f6d2f77702d636f6e74656e742f75706c6f6164732f323031362f31322f506f6d656772616e6174652d4d617274696e69332e676966"><img src="https://camo.githubusercontent.com/4b010bcb0c033c6e075ddc4a433053db91658da727144ce135c9e22e4cb57dbd/68747470733a2f2f7777772e676972616666657363616e62616b652e636f6d2f77702d636f6e74656e742f75706c6f6164732f323031362f31322f506f6d656772616e6174652d4d617274696e69332e676966" width="300" height="420" data-canonical-src="https://www.giraffescanbake.com/wp-content/uploads/2016/12/Pomegranate-Martini3.gif" style="max-width:100%;"></a></p>
<p><a href="https://travis-ci.org/rafaqz/Mixers.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/db96d5de8d294dc1ef209924e7aa288809d428274a80ba96ec188089a806df4d/68747470733a2f2f7472617669732d63692e6f72672f72616661717a2f4d69786572732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/rafaqz/Mixers.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="http://codecov.io/github/rafaqz/Mixers.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/6bd71e209e60098e3fa05453dec0fb93c2bdecf01dc5134133eba048e723a25f/687474703a2f2f636f6465636f762e696f2f6769746875622f72616661717a2f4d69786572732e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/rafaqz/Mixers.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
<p>Mixers.jl provides mixin macros, for writing, well, "DRY" code.</p>
<p>Mixers are useful when types share a subset of fields but have no common concrete
type, or adding one would add unnecessary, annoying nesting. Generally it
shouldn't be a replacement for regular composition.</p>
<p>The @mix and @premix macros generate custom macros that can add fields to any
struct, preserving parametric types and macros such as @with_kw from
Parameters.jl. @mix and @premix macros can also be applied to @mix macros, allowing
a kind of mixin inheritance.</p>
<p>@premix inserts fields and types at the start of the definition:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="@premix struct Fruitjuice{P,B}
    pommegranite::P
    orange::B
end

@Fruitjuice struct Punch{L}
    vodka::L
end

julia&gt; fieldnames(Punch)

3-element Array{Symbol,1}:
 :pommegranite
 :orange      
 :vodka       

julia&gt; punch = Punch(20, 150, 2.5)
               
Punch{Int64,Int64,Float64}(20, 15, 12.5) 
"><pre><span class="pl-c1">@premix</span> <span class="pl-k">struct</span> Fruitjuice{P,B}
    pommegranite<span class="pl-k">::</span><span class="pl-c1">P</span>
    orange<span class="pl-k">::</span><span class="pl-c1">B</span>
<span class="pl-k">end</span>

<span class="pl-c1">@Fruitjuice</span> <span class="pl-k">struct</span> Punch{L}
    vodka<span class="pl-k">::</span><span class="pl-c1">L</span>
<span class="pl-k">end</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">fieldnames</span>(Punch)

<span class="pl-c1">3</span><span class="pl-k">-</span>element Array{Symbol,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">:pommegranite</span>
 <span class="pl-c1">:orange</span>      
 <span class="pl-c1">:vodka</span>       

julia<span class="pl-k">&gt;</span> punch <span class="pl-k">=</span> <span class="pl-c1">Punch</span>(<span class="pl-c1">20</span>, <span class="pl-c1">150</span>, <span class="pl-c1">2.5</span>)
               
<span class="pl-c1">Punch</span><span class="pl-c1">{Int64,Int64,Float64}</span>(<span class="pl-c1">20</span>, <span class="pl-c1">15</span>, <span class="pl-c1">12.5</span>) </pre></div>
<p>@mix puts them at the end:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Parameters
using Unitful

@mix @with_kw struct Soda{J}
    soda::J = 2u&quot;L&quot;
end

@Soda struct Drink{M,B}
    lemon::M = 0.4u&quot;kg&quot;
    lime::B = 0.2u&quot;kg&quot;
end

julia&gt; fieldnames(Drinks)

3-element Array{Symbol,1}:
 :lemon
 :lime     
 :soda    
"><pre><span class="pl-k">using</span> Parameters
<span class="pl-k">using</span> Unitful

<span class="pl-c1">@mix</span> <span class="pl-c1">@with_kw</span> <span class="pl-k">struct</span> Soda{J}
    soda<span class="pl-k">::</span><span class="pl-c1">J</span> <span class="pl-k">=</span> <span class="pl-c1">2</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>L<span class="pl-pds">"</span></span>
<span class="pl-k">end</span>

<span class="pl-c1">@Soda</span> <span class="pl-k">struct</span> Drink{M,B}
    lemon<span class="pl-k">::</span><span class="pl-c1">M</span> <span class="pl-k">=</span> <span class="pl-c1">0.4</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>kg<span class="pl-pds">"</span></span>
    lime<span class="pl-k">::</span><span class="pl-c1">B</span> <span class="pl-k">=</span> <span class="pl-c1">0.2</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>kg<span class="pl-pds">"</span></span>
<span class="pl-k">end</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">fieldnames</span>(Drinks)

<span class="pl-c1">3</span><span class="pl-k">-</span>element Array{Symbol,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">:lemon</span>
 <span class="pl-c1">:lime</span>     
 <span class="pl-c1">:soda</span>    </pre></div>
<p>Notice how we added that @with_kw to Soda but left it off Drinks? Inheritable
macro chains are a thing!</p>
<p>The only thing @mix does <em>not</em> preserve is parent abstract types, like
<code>@mix struct Lemonade &lt;: AbstractDrink</code>. These can't really be mixed in as types
can only have one parent, so we keep thing simple and add type inheritance on the actual
struct. If there is anything else @mix ignores that it shouldn't, open an issue.</p>
<p>One gotcha is the need to put empty curly braces on a struct with no
parametric fields, if it is going to have parametric fields after @mix or
@premix. This keeps Mixers.jl code simple, and is a clear visual reminder
that the struct is actually parametrically typed:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="@Fruitjuice struct Juice{} end
"><pre><span class="pl-c1">@Fruitjuice</span> <span class="pl-k">struct</span> Juice{} <span class="pl-k">end</span></pre></div>
<p>To make mixins usable in other modules or scripts, qualify types with the module
name :</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="@mix struct Juice{A, B&lt;:MyModule.MyType} end
    a::MyModule.MyType
    b::B
end
"><pre><span class="pl-c1">@mix</span> <span class="pl-k">struct</span> Juice{A, B<span class="pl-k">&lt;:</span><span class="pl-c1">MyModule.MyType</span>} <span class="pl-k">end</span>
    a<span class="pl-k">::</span><span class="pl-c1">MyModule.MyType</span>
    b<span class="pl-k">::</span><span class="pl-c1">B</span>
<span class="pl-k">end</span></pre></div>
<p>(this may or may not be a good idea - Mixers was intended for code reuse inside a module)</p>
<p>Lastly, @pour is a basic version of @mix. It generates simple macros that insert lines of code.
It doesn't have to be used with structs:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="@pour milk begin
    &quot;Yum&quot;
end

taste() = @milk

julia&gt; taste()                                                                      
&quot;Yum&quot;
"><pre><span class="pl-c1">@pour</span> milk <span class="pl-k">begin</span>
    <span class="pl-s"><span class="pl-pds">"</span>Yum<span class="pl-pds">"</span></span>
<span class="pl-k">end</span>

<span class="pl-en">taste</span>() <span class="pl-k">=</span> <span class="pl-c1">@milk</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">taste</span>()                                                                      
<span class="pl-s"><span class="pl-pds">"</span>Yum<span class="pl-pds">"</span></span></pre></div>
</article></div>