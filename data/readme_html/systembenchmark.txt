<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-systembenchmarkjl" class="anchor" aria-hidden="true" href="#systembenchmarkjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>SystemBenchmark.jl</h1>
<p>Julia package for benchmarking a system. Contributions very welcome!</p>
<p>Submit your benchmarks to <a href="https://github.com/ianshmean/SystemBenchmark.jl/issues/8">SystemBenchmark.jl/issues/8</a></p>
<h2><a id="user-content-status" class="anchor" aria-hidden="true" href="#status"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Status</h2>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/ianshmean/SystemBenchmark.jl/workflows/Run%20tests/badge.svg?branch=master"><img src="https://github.com/ianshmean/SystemBenchmark.jl/workflows/Run%20tests/badge.svg?branch=master" alt="Run Tests" style="max-width:100%;"></a> GitHub Actions - Linux, MacOS, Windows - x86_64</p>
<p><a href="https://travis-ci.com/ianshmean/SystemBenchmark.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/f177ed27721b44213ad4c85cdc7009c77947b2b9c0857854656d90b0c5269752/68747470733a2f2f7472617669732d63692e636f6d2f69616e73686d65616e2f53797374656d42656e63686d61726b2e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/ianshmean/SystemBenchmark.jl.svg?branch=master" style="max-width:100%;"></a> Travis - Linux, MacOS, FreeBSD - x86_64</p>
<p><a href="https://ci.appveyor.com/project/ianshmean/systembenchmark-jl/branch/master" rel="nofollow"><img src="https://camo.githubusercontent.com/114ea6112fa5d1297fd06308852b4e98c06044ed3114b51085c1d1f005b67242/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f6767696b74787137686b6732667666732f6272616e63682f6d61737465723f7376673d74727565" alt="Build status" data-canonical-src="https://ci.appveyor.com/api/projects/status/ggiktxq7hkg2fvfs/branch/master?svg=true" style="max-width:100%;"></a> Appveyor - Windows - x86, x86_64</p>
<p><a href="https://cloud.drone.io/ianshmean/SystemBenchmark.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/37d672fe63271834d445bac4399f38a7c4c361b7082d4ad9ce535b367b4e5f64/68747470733a2f2f636c6f75642e64726f6e652e696f2f6170692f6261646765732f69616e73686d65616e2f53797374656d42656e63686d61726b2e6a6c2f7374617475732e737667" alt="Build Status" data-canonical-src="https://cloud.drone.io/api/badges/ianshmean/SystemBenchmark.jl/status.svg" style="max-width:100%;"></a> Drone - Linux - arm, arm64</p>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<p>Run benchmark</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="pkg&gt; add SystemBenchmark
julia&gt; using SystemBenchmark
julia&gt; res = runbenchmark();
julia&gt; show(res, allrows=true, allcols=true)
32×4 DataFrame
│ Row │ cat         │ testname                  │ units  │ res                                      │
│     │ String      │ String                    │ String │ Any                                      │
├─────┼─────────────┼───────────────────────────┼────────┼──────────────────────────────────────────┤
│ 1   │ info        │ SysBenchVer               │        │ 0.3.0                                    │
│ 2   │ info        │ JuliaVer                  │        │ 1.4.1                                    │
│ 3   │ info        │ OS                        │        │ macOS (x86_64-apple-darwin18.7.0)        │
│ 4   │ info        │ CPU                       │        │ Intel(R) Core(TM) i7-8850H CPU @ 2.60GHz │
│ 5   │ info        │ WORD_SIZE                 │        │ 64                                       │
│ 6   │ info        │ LIBM                      │        │ libopenlibm                              │
│ 7   │ info        │ LLVM                      │        │ libLLVM-8.0.1 (ORCJIT, skylake)          │
│ 8   │ info        │ GPU                       │        │ missing                                  │
│ 9   │ cpu         │ FloatMul                  │ ms     │ 1.708e-6                                 │
│ 10  │ cpu         │ FusedMulAdd               │ ms     │ 1.711e-6                                 │
│ 11  │ cpu         │ FloatSin                  │ ms     │ 4.773e-6                                 │
│ 12  │ cpu         │ VecMulBroad               │ ms     │ 4.55384e-5                               │
│ 13  │ cpu         │ CPUMatMul                 │ ms     │ 0.041647                                 │
│ 14  │ cpu         │ MatMulBroad               │ ms     │ 0.0194466                                │
│ 15  │ cpu         │ 3DMulBroad                │ ms     │ 0.0016652                                │
│ 16  │ cpu         │ peakflops                 │ flops  │ 1.96696e11                               │
│ 17  │ cpu         │ FFMPEGH264Write           │ ms     │ 154.421                                  │
│ 18  │ mem         │ DeepCopy                  │ ms     │ 0.000198299                              │
│ 19  │ mem         │ Bandwidth10kB             │ MiB/s  │ 96265.8                                  │
│ 20  │ mem         │ Bandwidth100kB            │ MiB/s  │ 50003.9                                  │
│ 21  │ mem         │ Bandwidth1MB              │ MiB/s  │ 25855.3                                  │
│ 22  │ mem         │ Bandwidth10MB             │ MiB/s  │ 11320.0                                  │
│ 23  │ mem         │ Bandwidth100MB            │ MiB/s  │ 9684.15                                  │
│ 24  │ diskio      │ DiskWrite1KB              │ ms     │ 0.145131                                 │
│ 25  │ diskio      │ DiskWrite1MB              │ ms     │ 10.4186                                  │
│ 26  │ diskio      │ DiskRead1KB               │ ms     │ 0.0969565                                │
│ 27  │ diskio      │ DiskRead1MB               │ ms     │ 0.560448                                 │
│ 28  │ loading     │ JuliaLoad                 │ ms     │ 209.872                                  │
│ 29  │ compilation │ compilecache              │ ms     │ 338.605                                  │
│ 30  │ compilation │ success_create_expr_cache │ ms     │ 349.521                                  │
│ 31  │ compilation │ create_expr_cache         │ ms     │ 13.648                                   │
│ 32  │ compilation │ output-ji-substart        │ ms     │ 7.2555                                   │
"><pre><code>pkg&gt; add SystemBenchmark
julia&gt; using SystemBenchmark
julia&gt; res = runbenchmark();
julia&gt; show(res, allrows=true, allcols=true)
32×4 DataFrame
│ Row │ cat         │ testname                  │ units  │ res                                      │
│     │ String      │ String                    │ String │ Any                                      │
├─────┼─────────────┼───────────────────────────┼────────┼──────────────────────────────────────────┤
│ 1   │ info        │ SysBenchVer               │        │ 0.3.0                                    │
│ 2   │ info        │ JuliaVer                  │        │ 1.4.1                                    │
│ 3   │ info        │ OS                        │        │ macOS (x86_64-apple-darwin18.7.0)        │
│ 4   │ info        │ CPU                       │        │ Intel(R) Core(TM) i7-8850H CPU @ 2.60GHz │
│ 5   │ info        │ WORD_SIZE                 │        │ 64                                       │
│ 6   │ info        │ LIBM                      │        │ libopenlibm                              │
│ 7   │ info        │ LLVM                      │        │ libLLVM-8.0.1 (ORCJIT, skylake)          │
│ 8   │ info        │ GPU                       │        │ missing                                  │
│ 9   │ cpu         │ FloatMul                  │ ms     │ 1.708e-6                                 │
│ 10  │ cpu         │ FusedMulAdd               │ ms     │ 1.711e-6                                 │
│ 11  │ cpu         │ FloatSin                  │ ms     │ 4.773e-6                                 │
│ 12  │ cpu         │ VecMulBroad               │ ms     │ 4.55384e-5                               │
│ 13  │ cpu         │ CPUMatMul                 │ ms     │ 0.041647                                 │
│ 14  │ cpu         │ MatMulBroad               │ ms     │ 0.0194466                                │
│ 15  │ cpu         │ 3DMulBroad                │ ms     │ 0.0016652                                │
│ 16  │ cpu         │ peakflops                 │ flops  │ 1.96696e11                               │
│ 17  │ cpu         │ FFMPEGH264Write           │ ms     │ 154.421                                  │
│ 18  │ mem         │ DeepCopy                  │ ms     │ 0.000198299                              │
│ 19  │ mem         │ Bandwidth10kB             │ MiB/s  │ 96265.8                                  │
│ 20  │ mem         │ Bandwidth100kB            │ MiB/s  │ 50003.9                                  │
│ 21  │ mem         │ Bandwidth1MB              │ MiB/s  │ 25855.3                                  │
│ 22  │ mem         │ Bandwidth10MB             │ MiB/s  │ 11320.0                                  │
│ 23  │ mem         │ Bandwidth100MB            │ MiB/s  │ 9684.15                                  │
│ 24  │ diskio      │ DiskWrite1KB              │ ms     │ 0.145131                                 │
│ 25  │ diskio      │ DiskWrite1MB              │ ms     │ 10.4186                                  │
│ 26  │ diskio      │ DiskRead1KB               │ ms     │ 0.0969565                                │
│ 27  │ diskio      │ DiskRead1MB               │ ms     │ 0.560448                                 │
│ 28  │ loading     │ JuliaLoad                 │ ms     │ 209.872                                  │
│ 29  │ compilation │ compilecache              │ ms     │ 338.605                                  │
│ 30  │ compilation │ success_create_expr_cache │ ms     │ 349.521                                  │
│ 31  │ compilation │ create_expr_cache         │ ms     │ 13.648                                   │
│ 32  │ compilation │ output-ji-substart        │ ms     │ 7.2555                                   │
</code></pre></div>
<p>Compare benchmark to the default reference (a 2019 MSI Linux i7 Laptop with )</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt; comp = comparetoref(res)
"><pre><code>julia&gt; comp = comparetoref(res)
</code></pre></div>
<p>or to run the benchmark and do the comparison in one move:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt; comp = comparetoref()
[ Info: CuArrays.functional() == false. No usable GPU detected
Compilation tests100%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| Time: 0:01:58
[ Info: Printing of results may be truncated. To view the full results use `show(res, allrows=true)`
32×6 DataFrames.DataFrame
│ Row │ cat         │ testname                  │ units  │ ref_res                                  │ test_res                                 │ factor    │
│     │ String      │ String                    │ String │ Any                                      │ Any                                      │ Any       │
├─────┼─────────────┼───────────────────────────┼────────┼──────────────────────────────────────────┼──────────────────────────────────────────┼───────────┤
│ 1   │ info        │ SysBenchVer               │        │ 0.3.0                                    │ 0.3.0                                    │ Equal     │
│ 2   │ info        │ JuliaVer                  │        │ 1.4.1                                    │ 1.4.1                                    │ Equal     │
│ 3   │ info        │ OS                        │        │ Linux (x86_64-pc-linux-gnu)              │ macOS (x86_64-apple-darwin18.7.0)        │ Not Equal │
│ 4   │ info        │ CPU                       │        │ Intel(R) Core(TM) i7-9750H CPU @ 2.60GHz │ Intel(R) Core(TM) i7-8850H CPU @ 2.60GHz │ Not Equal │
│ 5   │ info        │ WORD_SIZE                 │        │ 64                                       │ 64                                       │ Equal     │
│ 6   │ info        │ LIBM                      │        │ libopenlibm                              │ libopenlibm                              │ Equal     │
│ 7   │ info        │ LLVM                      │        │ libLLVM-8.0.1 (ORCJIT, skylake)          │ libLLVM-8.0.1 (ORCJIT, skylake)          │ Equal     │
│ 8   │ info        │ GPU                       │        │ GeForce GTX 1650 with Max-Q Design       │ missing                                  │ Not Equal │
│ 9   │ cpu         │ FloatMul                  │ ms     │ 1.1339999999999999e-6                    │ 1.715e-6                                 │ 1.51235   │
│ 10  │ cpu         │ FusedMulAdd               │ ms     │ 1.1339999999999999e-6                    │ 1.71e-6                                  │ 1.50794   │
│ 11  │ cpu         │ FloatSin                  │ ms     │ 4.051e-6                                 │ 5.736e-6                                 │ 1.41595   │
│ 12  │ cpu         │ VecMulBroad               │ ms     │ 2.9823115577889445e-5                    │ 5.12837e-5                               │ 1.7196    │
│ 13  │ cpu         │ CPUMatMul                 │ ms     │ 0.018683                                 │ 0.0401375                                │ 2.14834   │
│ 14  │ cpu         │ MatMulBroad               │ ms     │ 0.0042223                                │ 0.0205616                                │ 4.86976   │
│ 15  │ cpu         │ 3DMulBroad                │ ms     │ 0.0010529                                │ 0.0017379                                │ 1.65058   │
│ 16  │ cpu         │ peakflops                 │ flops  │ 1.8061545733047305e11                    │ 2.46247e11                               │ 1.36338   │
│ 17  │ cpu         │ FFMPEGH264Write           │ ms     │ 107.751337                               │ 150.311                                  │ 1.39498   │
│ 18  │ mem         │ DeepCopy                  │ ms     │ 0.00018790257558790594                   │ 0.000237082                              │ 1.26173   │
│ 19  │ mem         │ Bandwidth10kB             │ MiB/s  │ 104871.77985698299                       │ 96519.5                                  │ 0.920357  │
│ 20  │ mem         │ Bandwidth100kB            │ MiB/s  │ 58579.50346475738                        │ 42754.2                                  │ 0.729848  │
│ 21  │ mem         │ Bandwidth1MB              │ MiB/s  │ 33439.963407070725                       │ 31394.6                                  │ 0.938835  │
│ 22  │ mem         │ Bandwidth10MB             │ MiB/s  │ 5551.476774539766                        │ 10848.2                                  │ 1.95411   │
│ 23  │ mem         │ Bandwidth100MB            │ MiB/s  │ 6910.9558841033295                       │ 8858.09                                  │ 1.28175   │
│ 24  │ diskio      │ DiskWrite1KB              │ ms     │ 0.031895                                 │ 0.14471                                  │ 4.53707   │
│ 25  │ diskio      │ DiskWrite1MB              │ ms     │ 0.920052                                 │ 0.554107                                 │ 0.602257  │
│ 26  │ diskio      │ DiskRead1KB               │ ms     │ 0.006683666666666667                     │ 0.0730455                                │ 10.929    │
│ 27  │ diskio      │ DiskRead1MB               │ ms     │ 0.143755                                 │ 0.592742                                 │ 4.12328   │
│ 28  │ loading     │ JuliaLoad                 │ ms     │ 91.08045                                 │ 213.571                                  │ 2.34486   │
│ 29  │ compilation │ compilecache              │ ms     │ 208.532099                               │ 336.518                                  │ 1.61375   │
│ 30  │ compilation │ success_create_expr_cache │ ms     │ 235.4855485                              │ 334.724                                  │ 1.42142   │
│ 31  │ compilation │ create_expr_cache         │ ms     │ 0.894126                                 │ 12.2583                                  │ 13.7098   │
│ 32  │ compilation │ output-ji-substart        │ ms     │ 32.639706000000004                       │ 42.0636                                  │ 1.28873   │

"><pre><code>julia&gt; comp = comparetoref()
[ Info: CuArrays.functional() == false. No usable GPU detected
Compilation tests100%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| Time: 0:01:58
[ Info: Printing of results may be truncated. To view the full results use `show(res, allrows=true)`
32×6 DataFrames.DataFrame
│ Row │ cat         │ testname                  │ units  │ ref_res                                  │ test_res                                 │ factor    │
│     │ String      │ String                    │ String │ Any                                      │ Any                                      │ Any       │
├─────┼─────────────┼───────────────────────────┼────────┼──────────────────────────────────────────┼──────────────────────────────────────────┼───────────┤
│ 1   │ info        │ SysBenchVer               │        │ 0.3.0                                    │ 0.3.0                                    │ Equal     │
│ 2   │ info        │ JuliaVer                  │        │ 1.4.1                                    │ 1.4.1                                    │ Equal     │
│ 3   │ info        │ OS                        │        │ Linux (x86_64-pc-linux-gnu)              │ macOS (x86_64-apple-darwin18.7.0)        │ Not Equal │
│ 4   │ info        │ CPU                       │        │ Intel(R) Core(TM) i7-9750H CPU @ 2.60GHz │ Intel(R) Core(TM) i7-8850H CPU @ 2.60GHz │ Not Equal │
│ 5   │ info        │ WORD_SIZE                 │        │ 64                                       │ 64                                       │ Equal     │
│ 6   │ info        │ LIBM                      │        │ libopenlibm                              │ libopenlibm                              │ Equal     │
│ 7   │ info        │ LLVM                      │        │ libLLVM-8.0.1 (ORCJIT, skylake)          │ libLLVM-8.0.1 (ORCJIT, skylake)          │ Equal     │
│ 8   │ info        │ GPU                       │        │ GeForce GTX 1650 with Max-Q Design       │ missing                                  │ Not Equal │
│ 9   │ cpu         │ FloatMul                  │ ms     │ 1.1339999999999999e-6                    │ 1.715e-6                                 │ 1.51235   │
│ 10  │ cpu         │ FusedMulAdd               │ ms     │ 1.1339999999999999e-6                    │ 1.71e-6                                  │ 1.50794   │
│ 11  │ cpu         │ FloatSin                  │ ms     │ 4.051e-6                                 │ 5.736e-6                                 │ 1.41595   │
│ 12  │ cpu         │ VecMulBroad               │ ms     │ 2.9823115577889445e-5                    │ 5.12837e-5                               │ 1.7196    │
│ 13  │ cpu         │ CPUMatMul                 │ ms     │ 0.018683                                 │ 0.0401375                                │ 2.14834   │
│ 14  │ cpu         │ MatMulBroad               │ ms     │ 0.0042223                                │ 0.0205616                                │ 4.86976   │
│ 15  │ cpu         │ 3DMulBroad                │ ms     │ 0.0010529                                │ 0.0017379                                │ 1.65058   │
│ 16  │ cpu         │ peakflops                 │ flops  │ 1.8061545733047305e11                    │ 2.46247e11                               │ 1.36338   │
│ 17  │ cpu         │ FFMPEGH264Write           │ ms     │ 107.751337                               │ 150.311                                  │ 1.39498   │
│ 18  │ mem         │ DeepCopy                  │ ms     │ 0.00018790257558790594                   │ 0.000237082                              │ 1.26173   │
│ 19  │ mem         │ Bandwidth10kB             │ MiB/s  │ 104871.77985698299                       │ 96519.5                                  │ 0.920357  │
│ 20  │ mem         │ Bandwidth100kB            │ MiB/s  │ 58579.50346475738                        │ 42754.2                                  │ 0.729848  │
│ 21  │ mem         │ Bandwidth1MB              │ MiB/s  │ 33439.963407070725                       │ 31394.6                                  │ 0.938835  │
│ 22  │ mem         │ Bandwidth10MB             │ MiB/s  │ 5551.476774539766                        │ 10848.2                                  │ 1.95411   │
│ 23  │ mem         │ Bandwidth100MB            │ MiB/s  │ 6910.9558841033295                       │ 8858.09                                  │ 1.28175   │
│ 24  │ diskio      │ DiskWrite1KB              │ ms     │ 0.031895                                 │ 0.14471                                  │ 4.53707   │
│ 25  │ diskio      │ DiskWrite1MB              │ ms     │ 0.920052                                 │ 0.554107                                 │ 0.602257  │
│ 26  │ diskio      │ DiskRead1KB               │ ms     │ 0.006683666666666667                     │ 0.0730455                                │ 10.929    │
│ 27  │ diskio      │ DiskRead1MB               │ ms     │ 0.143755                                 │ 0.592742                                 │ 4.12328   │
│ 28  │ loading     │ JuliaLoad                 │ ms     │ 91.08045                                 │ 213.571                                  │ 2.34486   │
│ 29  │ compilation │ compilecache              │ ms     │ 208.532099                               │ 336.518                                  │ 1.61375   │
│ 30  │ compilation │ success_create_expr_cache │ ms     │ 235.4855485                              │ 334.724                                  │ 1.42142   │
│ 31  │ compilation │ create_expr_cache         │ ms     │ 0.894126                                 │ 12.2583                                  │ 13.7098   │
│ 32  │ compilation │ output-ji-substart        │ ms     │ 32.639706000000004                       │ 42.0636                                  │ 1.28873   │

</code></pre></div>
<p>Save to disk (includes a system report)</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="savebenchmark(path::String, res::DataFrame)
"><pre><code>savebenchmark(path::String, res::DataFrame)
</code></pre></div>
<p>Compare two benchmarks</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="compare(ref::DataFrame, res::DataFrame)
"><pre><code>compare(ref::DataFrame, res::DataFrame)
</code></pre></div>
<h2><a id="user-content-crowdsourced-results" class="anchor" aria-hidden="true" href="#crowdsourced-results"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Crowdsourced Results</h2>
<p>Please consider submitting results to <a href="https://github.com/ianshmean/SystemBenchmark.jl/issues/8">SystemBenchmark.jl/issues/8</a>.
Any <code>.txt</code> results files posted to that issue can easily be collated into a dataframe with:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt; comparison = getsubmittedbenchmarks()
"><pre><code>julia&gt; comparison = getsubmittedbenchmarks()
</code></pre></div>
<p>or to specify another repo/issue:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="getsubmittedbenchmarks(;repo::String=&quot;ianshmean/SystemBenchmark.jl&quot;, issue::Int=8, refname::String=&quot;ref.txt&quot;, transpose::Bool=true)
"><pre><code>getsubmittedbenchmarks(;repo::String="ianshmean/SystemBenchmark.jl", issue::Int=8, refname::String="ref.txt", transpose::Bool=true)
</code></pre></div>
<p>Some basic plotting exists at <a href="https://github.com/ianshmean/SystemBenchmark.jl/reporting/plotting.jl">reporting/plotting.jl</a>, which hasn't been included in the main package due to limitations in platform compatability of Plots.jl.</p>
</article></div>