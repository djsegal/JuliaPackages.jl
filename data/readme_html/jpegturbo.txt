<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-jpegturbo" class="anchor" aria-hidden="true" href="#jpegturbo"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>JpegTurbo</h1>
<p dir="auto"><a href="https://juliaio.github.io/JpegTurbo.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://juliaio.github.io/JpegTurbo.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/johnnychen94/JpegTurbo.jl/actions/workflows/UnitTest.yml?query=branch%3Amaster"><img src="https://github.com/johnnychen94/JpegTurbo.jl/actions/workflows/UnitTest.yml/badge.svg?branch=master" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/johnnychen94/JpegTurbo.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/b3bb362b0bc4154037f955af0ab3a15be57007ebe3ca14a2e2382ef34bceea13/68747470733a2f2f636f6465636f762e696f2f67682f6a6f686e6e796368656e39342f4a706567547572626f2e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/johnnychen94/JpegTurbo.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">JpegTurbo.jl is a Julia wrapper of the C library <a href="https://github.com/libjpeg-turbo/libjpeg-turbo">libjpeg-turbo</a> that provides IO support for
the JPEG image format. This package also backs the JPEG IO part of <a href="https://github.com/JuliaIO/ImageIO.jl">ImageIO</a> and <a href="https://github.com/JuliaIO/FileIO.jl">FileIO</a>.</p>
<p dir="auto">For benchmark results against other image IO backends, please check
<a href="https://github.com/johnnychen94/JpegTurbo.jl/issues/15" data-hovercard-type="issue" data-hovercard-url="/JuliaIO/JpegTurbo.jl/issues/15/hovercard">here</a>.</p>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<p dir="auto">There are two different usages for this package:</p>
<ul dir="auto">
<li>(convenient) via the <a href="https://github.com/JuliaIO/FileIO.jl">FileIO</a>: <code>save</code>/<code>load</code></li>
<li>(powerful) via the JpegTurbo.jl interfaces: <code>jpeg_encode</code>/<code>jpeg_decode</code></li>
</ul>
<h3 dir="auto"><a id="user-content-fileio-interface-saveload" class="anchor" aria-hidden="true" href="#fileio-interface-saveload"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>FileIO interface: <code>save</code>/<code>load</code></h3>
<p dir="auto"><a href="https://github.com/JuliaIO/FileIO.jl">FileIO</a> is an IO frontend with various IO backends; <a href="https://github.com/JuliaIO/ImageIO.jl">ImageIO</a> is the default IO backend provided
by the JuliaImages ecosystem. When JpegTurbo (and/or ImageIO) are available in <code>DEPOT_PATH</code>, FileIO
will uses JpegTurbo to load and save the JPEG images:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using FileIO
img = rand(64, 64)
save(&quot;test.jpg&quot;, img)
load(&quot;test.jpg&quot;)"><pre><span class="pl-k">using</span> FileIO
img <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">64</span>, <span class="pl-c1">64</span>)
<span class="pl-c1">save</span>(<span class="pl-s"><span class="pl-pds">"</span>test.jpg<span class="pl-pds">"</span></span>, img)
<span class="pl-c1">load</span>(<span class="pl-s"><span class="pl-pds">"</span>test.jpg<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">Note that you do not necessarily need to install them in your project environments. For instance,
you can do <code>(@v1.8) pkg&gt; add JpegTurbo</code> or <code>(@v1.8) pkg&gt; add ImageIO</code> and it should work for your
local setup.</p>
<h3 dir="auto"><a id="user-content-jpegturbo-interface-jpeg_encodejpeg_decode" class="anchor" aria-hidden="true" href="#jpegturbo-interface-jpeg_encodejpeg_decode"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>JpegTurbo interface: <code>jpeg_encode</code>/<code>jpeg_decode</code></h3>
<p dir="auto"><code>jpeg_encode</code> is used to compress 2D colorant matrix as JPEG image.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="jpeg_encode(filename::AbstractString, img; kwargs...) -&gt; Int
jpeg_encode(io::IO, img; kwargs...) -&gt; Int
jpeg_encode(img; kwargs...) -&gt; Vector{UInt8}"><pre><span class="pl-c1">jpeg_encode</span>(filename<span class="pl-k">::</span><span class="pl-c1">AbstractString</span>, img; kwargs<span class="pl-k">...</span>) <span class="pl-k">-&gt;</span> Int
<span class="pl-c1">jpeg_encode</span>(io<span class="pl-k">::</span><span class="pl-c1">IO</span>, img; kwargs<span class="pl-k">...</span>) <span class="pl-k">-&gt;</span> Int
<span class="pl-c1">jpeg_encode</span>(img; kwargs<span class="pl-k">...</span>) <span class="pl-k">-&gt;</span> Vector{UInt8}</pre></div>
<p dir="auto"><code>jpeg_decode</code> is used to decompress JPEG image as 2D colorant matrix.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="jpeg_decode([T,] filename::AbstractString; kwargs...) -&gt; Matrix{T}
jpeg_decode([T,] io::IO; kwargs...) -&gt; Matrix{T}
jpeg_decode([T,] data::Vector{UInt8}; kwargs...) -&gt; Matrix{T}"><pre><span class="pl-c1">jpeg_decode</span>([T,] filename<span class="pl-k">::</span><span class="pl-c1">AbstractString</span>; kwargs<span class="pl-k">...</span>) <span class="pl-k">-&gt;</span> Matrix{T}
<span class="pl-c1">jpeg_decode</span>([T,] io<span class="pl-k">::</span><span class="pl-c1">IO</span>; kwargs<span class="pl-k">...</span>) <span class="pl-k">-&gt;</span> Matrix{T}
<span class="pl-c1">jpeg_decode</span>([T,] data<span class="pl-k">::</span><span class="pl-c1">Vector{UInt8}</span>; kwargs<span class="pl-k">...</span>) <span class="pl-k">-&gt;</span> Matrix{T}</pre></div>
<h3 dir="auto"><a id="user-content-advanced-in-memory-encodedecode" class="anchor" aria-hidden="true" href="#advanced-in-memory-encodedecode"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Advanced: in-memory encode/decode</h3>
<p dir="auto">For some applications, it can be faster to do encoding/decoding without the need
to read/write disk:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using JpegTurbo
img = rand(64, 64)
bytes = jpeg_encode(img) # Vector{UInt8}
img_saveload = jpeg_decode(bytes) # size: 64x64"><pre><span class="pl-k">using</span> JpegTurbo
img <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">64</span>, <span class="pl-c1">64</span>)
bytes <span class="pl-k">=</span> <span class="pl-c1">jpeg_encode</span>(img) <span class="pl-c"><span class="pl-c">#</span> Vector{UInt8}</span>
img_saveload <span class="pl-k">=</span> <span class="pl-c1">jpeg_decode</span>(bytes) <span class="pl-c"><span class="pl-c">#</span> size: 64x64</span></pre></div>
<h3 dir="auto"><a id="user-content-advanced-preview-optimization" class="anchor" aria-hidden="true" href="#advanced-preview-optimization"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Advanced: preview optimization</h3>
<p dir="auto">One can request a single-component output or a downsampled output so that fewer calculation is
needed during the decompression. This can be particularly useful to accelerate image preview.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using BenchmarkTools, TestImages, JpegTurbo
filename = testimage(&quot;earth&quot;, download_only=true)
# full decompression
@btime jpeg_decode(filename); # 224.760 ms (7 allocations: 51.54 MiB)
# only decompress luminance component
@btime jpeg_decode(Gray, filename); # 91.157 ms (6 allocations: 17.18 MiB)
# process only a few pixels
@btime jpeg_decode(filename; scale_ratio=0.25); # 77.254 ms (8 allocations: 3.23 MiB)
# process only a few pixels for luminance component
@btime jpeg_decode(Gray, filename; scale_ratio=0.25); # 63.119 ms (6 allocations: 1.08 MiB)"><pre><span class="pl-k">using</span> BenchmarkTools, TestImages, JpegTurbo
filename <span class="pl-k">=</span> <span class="pl-c1">testimage</span>(<span class="pl-s"><span class="pl-pds">"</span>earth<span class="pl-pds">"</span></span>, download_only<span class="pl-k">=</span><span class="pl-c1">true</span>)
<span class="pl-c"><span class="pl-c">#</span> full decompression</span>
<span class="pl-c1">@btime</span> <span class="pl-c1">jpeg_decode</span>(filename); <span class="pl-c"><span class="pl-c">#</span> 224.760 ms (7 allocations: 51.54 MiB)</span>
<span class="pl-c"><span class="pl-c">#</span> only decompress luminance component</span>
<span class="pl-c1">@btime</span> <span class="pl-c1">jpeg_decode</span>(Gray, filename); <span class="pl-c"><span class="pl-c">#</span> 91.157 ms (6 allocations: 17.18 MiB)</span>
<span class="pl-c"><span class="pl-c">#</span> process only a few pixels</span>
<span class="pl-c1">@btime</span> <span class="pl-c1">jpeg_decode</span>(filename; scale_ratio<span class="pl-k">=</span><span class="pl-c1">0.25</span>); <span class="pl-c"><span class="pl-c">#</span> 77.254 ms (8 allocations: 3.23 MiB)</span>
<span class="pl-c"><span class="pl-c">#</span> process only a few pixels for luminance component</span>
<span class="pl-c1">@btime</span> <span class="pl-c1">jpeg_decode</span>(Gray, filename; scale_ratio<span class="pl-k">=</span><span class="pl-c1">0.25</span>); <span class="pl-c"><span class="pl-c">#</span> 63.119 ms (6 allocations: 1.08 MiB)</span></pre></div>
<p dir="auto">An exclusive alternative to <code>scale_ratio</code> is <code>preferred_size</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# minimal `scale_ratio` that output size is greater than or equal to (512, 512)
jpeg_decode(filename; preferred_size=(512, 512)) # size: (751, 750)
# maximal `scale_ratio` that output size is less than or equal to (512, 512)
jpeg_decode(filename; preferred_size=(&lt;=, (512, 512))) # size: (376, 375)"><pre><span class="pl-c"><span class="pl-c">#</span> minimal `scale_ratio` that output size is greater than or equal to (512, 512)</span>
<span class="pl-c1">jpeg_decode</span>(filename; preferred_size<span class="pl-k">=</span>(<span class="pl-c1">512</span>, <span class="pl-c1">512</span>)) <span class="pl-c"><span class="pl-c">#</span> size: (751, 750)</span>
<span class="pl-c"><span class="pl-c">#</span> maximal `scale_ratio` that output size is less than or equal to (512, 512)</span>
<span class="pl-c1">jpeg_decode</span>(filename; preferred_size<span class="pl-k">=</span>(<span class="pl-k">&lt;=</span>, (<span class="pl-c1">512</span>, <span class="pl-c1">512</span>))) <span class="pl-c"><span class="pl-c">#</span> size: (376, 375)</span></pre></div>
<h2 dir="auto"><a id="user-content-acknowledgements" class="anchor" aria-hidden="true" href="#acknowledgements"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Acknowledgements</h2>
<p dir="auto">The purpose of this project is to replace <a href="https://github.com/JuliaIO/ImageMagick.jl">ImageMagick.jl</a> with <a href="https://github.com/JuliaIO/ImageIO.jl">ImageIO</a>. Steven G. Johnson first
initialized an early draft version <a href="https://github.com/stevengj/JpegTurbo.jl">JpegTurbo.jl</a>, this
package steals the name from him :). <a href="https://github.com/JuliaInterop/Clang.jl">Clang.jl</a> is used to generate the low-level ccall wrapper.
<a href="https://github.com/Gnimuc">Yupei Qi</a>, the current maintainer of Clang.jl, has generously help me debugging C-related codes.
This package won't work at all without his help. My another prior project <a href="https://github.com/johnnychen94/Sixel.jl">Sixel.jl</a> was also under
his generous guidance.</p>
</article></div>