<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-stftjl---short-time-fourier-transform" class="anchor" aria-hidden="true" href="#stftjl---short-time-fourier-transform"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>STFT.jl</code> - Short-Time Fourier Transform</h1>
<p dir="auto"><a href="https://docs.zymon.org/STFT.jl/" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a></p>
<p dir="auto"><code>STFT.jl</code> is a small Julia package implementing just Short-Time Fourier Transform (STFT) routines.
It provides the following core functionality:</p>
<ul dir="auto">
<li><strong><em>signal analysis</em></strong>; transform time-domain signal to STFT-domain signal.</li>
<li><strong><em>signal synthesis</em></strong>; transform STFT-domain signal to time-domain signal.</li>
</ul>
<p dir="auto">Check the <a href="https://docs.zymon.org/STFT.jl/" rel="nofollow">documentation</a> for more insights.</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">The package is currently available in General, the default Julia package registry.
To install this package from General registry, use the following command in Julia REPL:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="] add STFT"><pre>] add STFT</pre></div>
<p dir="auto">Alternatively, directly via repository:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="pkg&gt; add https://git.sr.ht/~zymon/STFT.jl"><pre>pkg<span class="pl-k">&gt;</span> add https<span class="pl-k">:</span><span class="pl-k">//</span>git<span class="pl-k">.</span>sr<span class="pl-k">.</span>ht<span class="pl-k">/</span><span class="pl-k">~</span>zymon<span class="pl-k">/</span>STFT<span class="pl-k">.</span>jl</pre></div>
<h2 dir="auto"><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Examples</h2>
<p dir="auto">Below you can find a few standalone examples with basic usage of the package.</p>
<h3 dir="auto"><a id="user-content-show-spectrogram" class="anchor" aria-hidden="true" href="#show-spectrogram"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Show spectrogram</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using STFT
using Plots

x = randn(10000)  # Generate mock signal
W = 64            # Window length
w = ones(W)       # Rectangular analysis window
H = 10            # Hop
L = W - H         # Overlap

X = stft(x, w, L)    # Analysis
s = abs2.(X)         # Compute spectrogram
heatmap(10log10.(s)) # Display spectrogram"><pre><span class="pl-k">using</span> STFT
<span class="pl-k">using</span> Plots

x <span class="pl-k">=</span> <span class="pl-c1">randn</span>(<span class="pl-c1">10000</span>)  <span class="pl-c"><span class="pl-c">#</span> Generate mock signal</span>
W <span class="pl-k">=</span> <span class="pl-c1">64</span>            <span class="pl-c"><span class="pl-c">#</span> Window length</span>
w <span class="pl-k">=</span> <span class="pl-c1">ones</span>(W)       <span class="pl-c"><span class="pl-c">#</span> Rectangular analysis window</span>
H <span class="pl-k">=</span> <span class="pl-c1">10</span>            <span class="pl-c"><span class="pl-c">#</span> Hop</span>
L <span class="pl-k">=</span> W <span class="pl-k">-</span> H         <span class="pl-c"><span class="pl-c">#</span> Overlap</span>

X <span class="pl-k">=</span> <span class="pl-c1">stft</span>(x, w, L)    <span class="pl-c"><span class="pl-c">#</span> Analysis</span>
s <span class="pl-k">=</span> <span class="pl-c1">abs2</span>.(X)         <span class="pl-c"><span class="pl-c">#</span> Compute spectrogram</span>
<span class="pl-c1">heatmap</span>(<span class="pl-c1">10</span><span class="pl-c1">log10</span>.(s)) <span class="pl-c"><span class="pl-c">#</span> Display spectrogram</span></pre></div>
<h3 dir="auto"><a id="user-content-analyse-signal-modify-and-synthesise" class="anchor" aria-hidden="true" href="#analyse-signal-modify-and-synthesise"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Analyse signal, modify, and synthesise</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using STFT

x = randn(10000)   # Generate mock signal
W = 64             # Window length
w = ones(W)        # Rectangular analysis window
H = 10             # Hop
L = W - H          # Overlap

X = stft(x, w, L)  # Analysis
X = f(X)           # Modify STFT-domain signal
y = istft(X, w, L) # Synthesis"><pre><span class="pl-k">using</span> STFT

x <span class="pl-k">=</span> <span class="pl-c1">randn</span>(<span class="pl-c1">10000</span>)   <span class="pl-c"><span class="pl-c">#</span> Generate mock signal</span>
W <span class="pl-k">=</span> <span class="pl-c1">64</span>             <span class="pl-c"><span class="pl-c">#</span> Window length</span>
w <span class="pl-k">=</span> <span class="pl-c1">ones</span>(W)        <span class="pl-c"><span class="pl-c">#</span> Rectangular analysis window</span>
H <span class="pl-k">=</span> <span class="pl-c1">10</span>             <span class="pl-c"><span class="pl-c">#</span> Hop</span>
L <span class="pl-k">=</span> W <span class="pl-k">-</span> H          <span class="pl-c"><span class="pl-c">#</span> Overlap</span>

X <span class="pl-k">=</span> <span class="pl-c1">stft</span>(x, w, L)  <span class="pl-c"><span class="pl-c">#</span> Analysis</span>
X <span class="pl-k">=</span> <span class="pl-c1">f</span>(X)           <span class="pl-c"><span class="pl-c">#</span> Modify STFT-domain signal</span>
y <span class="pl-k">=</span> <span class="pl-c1">istft</span>(X, w, L) <span class="pl-c"><span class="pl-c">#</span> Synthesis</span></pre></div>
<p dir="auto">Alternatively, instead of <code>using STFT</code>, you can <code>import STFT</code>,
and use an alternative API, i.e., <code>analysis</code> and <code>synthesis</code>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="import STFT

x = randm(10000) # Generate mock signal
W = 64           # Window length
w = ones(W)      # Rectangular analysis window
H = 10           # Hop
L = W - H        # Overlap

X = STFT.analysis(x, w, L)  # Analysis
X = f(X)                    # Modify STFT-domain signal
y = STFT.synthesis(X, w, L) # Synthesis"><pre><span class="pl-k">import</span> STFT

x <span class="pl-k">=</span> <span class="pl-c1">randm</span>(<span class="pl-c1">10000</span>) <span class="pl-c"><span class="pl-c">#</span> Generate mock signal</span>
W <span class="pl-k">=</span> <span class="pl-c1">64</span>           <span class="pl-c"><span class="pl-c">#</span> Window length</span>
w <span class="pl-k">=</span> <span class="pl-c1">ones</span>(W)      <span class="pl-c"><span class="pl-c">#</span> Rectangular analysis window</span>
H <span class="pl-k">=</span> <span class="pl-c1">10</span>           <span class="pl-c"><span class="pl-c">#</span> Hop</span>
L <span class="pl-k">=</span> W <span class="pl-k">-</span> H        <span class="pl-c"><span class="pl-c">#</span> Overlap</span>

X <span class="pl-k">=</span> STFT<span class="pl-k">.</span><span class="pl-c1">analysis</span>(x, w, L)  <span class="pl-c"><span class="pl-c">#</span> Analysis</span>
X <span class="pl-k">=</span> <span class="pl-c1">f</span>(X)                    <span class="pl-c"><span class="pl-c">#</span> Modify STFT-domain signal</span>
y <span class="pl-k">=</span> STFT<span class="pl-k">.</span><span class="pl-c1">synthesis</span>(X, w, L) <span class="pl-c"><span class="pl-c">#</span> Synthesis</span></pre></div>
</article></div>