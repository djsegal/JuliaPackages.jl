<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-telegram" class="anchor" aria-hidden="true" href="#telegram"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Telegram</h1>
<table>
<thead>
<tr>
<th align="center"><strong>Documentation</strong></th>
<th align="center"><strong>Build Status</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><a href="https://Arkoniak.github.io/Telegram.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a><a href="https://Arkoniak.github.io/Telegram.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a></td>
<td align="center"><a href="https://github.com/Arkoniak/Telegram.jl/actions"><img src="https://github.com/Arkoniak/Telegram.jl/workflows/CI/badge.svg" alt="Build" style="max-width:100%;"></a><a href="https://codecov.io/gh/Arkoniak/Telegram.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/e4bd9fa498e7093324304dc4292964bcde04670c8864db8bdb86eb479c3e90a6/68747470733a2f2f636f6465636f762e696f2f67682f41726b6f6e69616b2f54656c656772616d2e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/Arkoniak/Telegram.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></td>
</tr>
</tbody>
</table>
<p>Simple <a href="https://telegram.org/" rel="nofollow">Telegram Messaging</a> SDK with logging and bot facilities. Package was built with first-class support of telegram as instant message backend for various notification and reporing systems. So, simpliest way to use this package is by doing something like this</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Telegram, Telegram.API
tg = TelegramClient(&quot;YOUR TOKEN&quot;, chat_id = &quot;YOUR CHAT_ID&quot;)

# Some lengthy calculation
# ...

sendMessage(text  = &quot;Calculation complete, result is $result&quot;)
"><pre><span class="pl-k">using</span> Telegram, Telegram<span class="pl-k">.</span>API
tg <span class="pl-k">=</span> <span class="pl-c1">TelegramClient</span>(<span class="pl-s"><span class="pl-pds">"</span>YOUR TOKEN<span class="pl-pds">"</span></span>, chat_id <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>YOUR CHAT_ID<span class="pl-pds">"</span></span>)

<span class="pl-c"><span class="pl-c">#</span> Some lengthy calculation</span>
<span class="pl-c"><span class="pl-c">#</span> ...</span>

<span class="pl-c1">sendMessage</span>(text  <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>Calculation complete, result is <span class="pl-v">$result</span><span class="pl-pds">"</span></span>)</pre></div>
<p>Please refer to <a href="https://Arkoniak.github.io/Telegram.jl/dev" rel="nofollow">documentation</a> to learn how to properly setup telegram credentials and use package in general.</p>
<h1><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h1>
<p>Package is registered so you can install it in a usual way</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using Pkg
julia&gt; Pkg.add(&quot;Telegram&quot;)
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Pkg
julia<span class="pl-k">&gt;</span> Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>Telegram<span class="pl-pds">"</span></span>)</pre></div>
<h1><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h1>
<h2><a id="user-content-telegram-bot-api" class="anchor" aria-hidden="true" href="#telegram-bot-api"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Telegram Bot API</h2>
<p>Usage is straightforward, <a href="https://core.telegram.org/bots/api#available-methods" rel="nofollow">Telegram Bot API methods</a> are in one to one correspondence with this Julia wrapper. You need to create connection and then simply call necessary methods</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using Telegram, Telegram.API
julia&gt; token = &quot;YOUR TELEGRAM BOT TOKEN&quot;
julia&gt; TelegramClient(token)

julia&gt; getMe()
JSON3.Object{Array{UInt8,1},SubArray{UInt64,1,Array{UInt64,1},Tuple{UnitRange{Int64}},true}} with 7 entries:
  :id                          =&gt; 123456789
  :is_bot                      =&gt; true
  :first_name                  =&gt; &quot;Awesome Bot&quot;
  :username                    =&gt; &quot;AwesomeBot&quot;
  :can_join_groups             =&gt; true
  :can_read_all_group_messages =&gt; false
  :supports_inline_queries     =&gt; false
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Telegram, Telegram<span class="pl-k">.</span>API
julia<span class="pl-k">&gt;</span> token <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>YOUR TELEGRAM BOT TOKEN<span class="pl-pds">"</span></span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">TelegramClient</span>(token)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">getMe</span>()
JSON3<span class="pl-k">.</span>Object{Array{UInt8,<span class="pl-c1">1</span>},SubArray{UInt64,<span class="pl-c1">1</span>,Array{UInt64,<span class="pl-c1">1</span>},Tuple{UnitRange{Int64}},<span class="pl-c1">true</span>}} with <span class="pl-c1">7</span> entries<span class="pl-k">:</span>
  <span class="pl-c1">:id</span>                          <span class="pl-k">=&gt;</span> <span class="pl-c1">123456789</span>
  <span class="pl-c1">:is_bot</span>                      <span class="pl-k">=&gt;</span> <span class="pl-c1">true</span>
  <span class="pl-c1">:first_name</span>                  <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>Awesome Bot<span class="pl-pds">"</span></span>
  <span class="pl-c1">:username</span>                    <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>AwesomeBot<span class="pl-pds">"</span></span>
  <span class="pl-c1">:can_join_groups</span>             <span class="pl-k">=&gt;</span> <span class="pl-c1">true</span>
  <span class="pl-c1">:can_read_all_group_messages</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">false</span>
  <span class="pl-c1">:supports_inline_queries</span>     <span class="pl-k">=&gt;</span> <span class="pl-c1">false</span></pre></div>
<p>Mainly you need to set arguments, but <code>chat_id</code> can be set directly in <code>TelegramClient</code></p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; token = &quot;YOUR TELEGRAM BOT TOKEN&quot;
julia&gt; TelegramClient(token; chat_id = &quot;YOUR TELEGRAM BOT CHAT_ID&quot;)

julia&gt; sendMessage(text = &quot;Hello, world!&quot;)
"><pre>julia<span class="pl-k">&gt;</span> token <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>YOUR TELEGRAM BOT TOKEN<span class="pl-pds">"</span></span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">TelegramClient</span>(token; chat_id <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>YOUR TELEGRAM BOT CHAT_ID<span class="pl-pds">"</span></span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">sendMessage</span>(text <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>Hello, world!<span class="pl-pds">"</span></span>)</pre></div>
<p>You can send files and other <code>IO</code> objects</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; sendPhoto(photo = open(&quot;picture.jpg&quot;, &quot;r&quot;))
julia&gt; io = IOBuffer()
julia&gt; print(io, &quot;Hello world!&quot;)
julia&gt; sendDocument(document = &quot;hello.txt&quot; =&gt; io)
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">sendPhoto</span>(photo <span class="pl-k">=</span> <span class="pl-c1">open</span>(<span class="pl-s"><span class="pl-pds">"</span>picture.jpg<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>r<span class="pl-pds">"</span></span>))
julia<span class="pl-k">&gt;</span> io <span class="pl-k">=</span> <span class="pl-c1">IOBuffer</span>()
julia<span class="pl-k">&gt;</span> <span class="pl-c1">print</span>(io, <span class="pl-s"><span class="pl-pds">"</span>Hello world!<span class="pl-pds">"</span></span>)
julia<span class="pl-k">&gt;</span> <span class="pl-c1">sendDocument</span>(document <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>hello.txt<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> io)</pre></div>
<h2><a id="user-content-logging" class="anchor" aria-hidden="true" href="#logging"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Logging</h2>
<p>You can use <a href="https://github.com/Arkoniak/Telegram.jl">Telegram.jl</a> together with <a href="https://github.com/oxinabox/LoggingExtras.jl">LoggingExtras.jl</a> to create powerful logging with insta messaging in case of critical situations</p>
<p>Put your credentials in <code>.env</code></p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="# .env
TELEGRAM_BOT_TOKEN = &lt;YOUR TELEGRAM BOT TOKEN&gt;
TELEGRAM_BOT_CHAT_ID = &lt;YOUR TELEGRAM CHAT ID&gt;
"><pre><code># .env
TELEGRAM_BOT_TOKEN = &lt;YOUR TELEGRAM BOT TOKEN&gt;
TELEGRAM_BOT_CHAT_ID = &lt;YOUR TELEGRAM CHAT ID&gt;
</code></pre></div>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Telegram
using Logging, LoggingExtras
using ConfigEnv

dotenv() # populate ENV with the data from .env

tg = TelegramClient()
tg_logger = TelegramLogger(tg; async = false)
demux_logger = TeeLogger(
    MinLevelLogger(tg_logger, Logging.Error),
    ConsoleLogger()
)
global_logger(demux_logger)

@warn &quot;It is bad&quot;        # goes to console
@info &quot;normal stuff&quot;     # goes to console
@error &quot;THE WORSE THING&quot; # goes to console and telegram
@debug &quot;it is chill&quot;     # goes to console
"><pre><span class="pl-k">using</span> Telegram
<span class="pl-k">using</span> Logging, LoggingExtras
<span class="pl-k">using</span> ConfigEnv

<span class="pl-c1">dotenv</span>() <span class="pl-c"><span class="pl-c">#</span> populate ENV with the data from .env</span>

tg <span class="pl-k">=</span> <span class="pl-c1">TelegramClient</span>()
tg_logger <span class="pl-k">=</span> <span class="pl-c1">TelegramLogger</span>(tg; async <span class="pl-k">=</span> <span class="pl-c1">false</span>)
demux_logger <span class="pl-k">=</span> <span class="pl-c1">TeeLogger</span>(
    <span class="pl-c1">MinLevelLogger</span>(tg_logger, Logging<span class="pl-k">.</span>Error),
    <span class="pl-c1">ConsoleLogger</span>()
)
<span class="pl-c1">global_logger</span>(demux_logger)

<span class="pl-c1">@warn</span> <span class="pl-s"><span class="pl-pds">"</span>It is bad<span class="pl-pds">"</span></span>        <span class="pl-c"><span class="pl-c">#</span> goes to console</span>
<span class="pl-c1">@info</span> <span class="pl-s"><span class="pl-pds">"</span>normal stuff<span class="pl-pds">"</span></span>     <span class="pl-c"><span class="pl-c">#</span> goes to console</span>
<span class="pl-c1">@error</span> <span class="pl-s"><span class="pl-pds">"</span>THE WORSE THING<span class="pl-pds">"</span></span> <span class="pl-c"><span class="pl-c">#</span> goes to console and telegram</span>
<span class="pl-c1">@debug</span> <span class="pl-s"><span class="pl-pds">"</span>it is chill<span class="pl-pds">"</span></span>     <span class="pl-c"><span class="pl-c">#</span> goes to console</span></pre></div>
<h2><a id="user-content-bots" class="anchor" aria-hidden="true" href="#bots"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Bots</h2>
<p>You can create bot with the <code>run_bot</code> command. Here is for example Echo bot</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="# .env
TELEGRAM_BOT_TOKEN = &lt;YOUR TELEGRAM BOT TOKEN&gt;
"><pre><code># .env
TELEGRAM_BOT_TOKEN = &lt;YOUR TELEGRAM BOT TOKEN&gt;
</code></pre></div>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Telegram, Telegram.API
using ConfigEnv

dotenv()

# Echo bot
run_bot() do msg
    sendMessage(text = msg.message.text, chat_id = msg.message.chat.id)
end
"><pre><span class="pl-k">using</span> Telegram, Telegram<span class="pl-k">.</span>API
<span class="pl-k">using</span> ConfigEnv

<span class="pl-c1">dotenv</span>()

<span class="pl-c"><span class="pl-c">#</span> Echo bot</span>
<span class="pl-c1">run_bot</span>() <span class="pl-k">do</span> msg
    <span class="pl-c1">sendMessage</span>(text <span class="pl-k">=</span> msg<span class="pl-k">.</span>message<span class="pl-k">.</span>text, chat_id <span class="pl-k">=</span> msg<span class="pl-k">.</span>message<span class="pl-k">.</span>chat<span class="pl-k">.</span>id)
<span class="pl-k">end</span></pre></div>
</article></div>