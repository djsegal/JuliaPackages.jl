<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-format" class="anchor" aria-hidden="true" href="#format"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Format</h1>
<p dir="auto">This package offers Python-style general formatting and c-style numerical formatting (for speed).</p>
<p dir="auto"><a href="https://github.com/JuliaString/Format.jl.git"><img src="https://camo.githubusercontent.com/a9061c5cee3d39874b3330ff358dc667027f1ede1935fe1e6e8735e7b6144ae4/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f72656c656173652f4a756c6961537472696e672f466f726d61742e6a6c2e737667" alt="" data-canonical-src="https://img.shields.io/github/release/JuliaString/Format.jl.svg" style="max-width: 100%;"></a> <a href="https://github.com/JuliaString/Format.jl.git"><img src="https://camo.githubusercontent.com/e4875895f45cdec3d6a4fbfdb9aececa726e7dc1ef02a9c97077adf7203bfa4c/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f72656c656173652d646174652f4a756c6961537472696e672f466f726d61742e6a6c2e737667" alt="" data-canonical-src="https://img.shields.io/github/release-date/JuliaString/Format.jl.svg" style="max-width: 100%;"></a> <a href="LICENSE.md"><img src="https://camo.githubusercontent.com/bbf49a2eb96e6f718803f2493bd7aa3baae61abb09b7f8fc185a94e08c504dc6/687474703a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d627269676874677265656e2e7376673f7374796c653d666c6174" alt="" data-canonical-src="http://img.shields.io/badge/license-MIT-brightgreen.svg?style=flat" style="max-width: 100%;"></a> <a href="https://github.com/JuliaString/Format.jl/issues"><img src="https://camo.githubusercontent.com/f5054ffcd4245c10d3ec85ef059e07aacf787b560f83ad4aec2236364437d097/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f6e747269627574696f6e732d77656c636f6d652d627269676874677265656e2e7376673f7374796c653d666c6174" alt="contributions welcome" data-canonical-src="https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat" style="max-width: 100%;"></a></p>
<table>
<thead>
<tr>
<th align="center"><strong>Julia Version</strong></th>
<th align="center"><strong>Unit Tests</strong></th>
<th align="center"><strong>Coverage</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><a href="https://github.com/JuliaLang/Julia"><img src="https://camo.githubusercontent.com/514feca078cec1d0f876174356358ac616bed330b2a880fa65daca3148ead714/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f72656c656173652f4a756c69614c616e672f6a756c69612e737667" alt="" data-canonical-src="https://img.shields.io/github/release/JuliaLang/julia.svg" style="max-width: 100%;"></a></td>
<td align="center"><a href="https://travis-ci.org/JuliaString/Format.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/dc4fe5dc371819efe5e7818c4ec50ed780e34074076a01c3b9a9600e452adbd7/68747470733a2f2f7472617669732d63692e6f72672f4a756c6961537472696e672f466f726d61742e6a6c2e737667" alt="" data-canonical-src="https://travis-ci.org/JuliaString/Format.jl.svg" style="max-width: 100%;"></a></td>
<td align="center"><a href="https://codecov.io/gh/JuliaString/Format.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/ed4ed2eec3e5f5032d7647243a9de570f5e7bbacc27976a1ec147a512160943f/68747470733a2f2f636f6465636f762e696f2f67682f4a756c6961537472696e672f466f726d61742e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="" data-canonical-src="https://codecov.io/gh/JuliaString/Format.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></td>
</tr>
<tr>
<td align="center">Julia Latest</td>
<td align="center"><a href="https://travis-ci.org/JuliaString/Format.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/1536866d3248c3dd7cd3fe0042b8f10af629a264a796123229a8527fa83784b9/68747470733a2f2f7472617669732d63692e6f72672f4a756c6961537472696e672f466f726d61742e6a6c2e7376673f6272616e63683d6d6173746572" alt="" data-canonical-src="https://travis-ci.org/JuliaString/Format.jl.svg?branch=master" style="max-width: 100%;"></a></td>
<td align="center"><a href="https://codecov.io/gh/JuliaString/Format.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/ed4ed2eec3e5f5032d7647243a9de570f5e7bbacc27976a1ec147a512160943f/68747470733a2f2f636f6465636f762e696f2f67682f4a756c6961537472696e672f466f726d61742e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="" data-canonical-src="https://codecov.io/gh/JuliaString/Format.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></td>
</tr>
</tbody>
</table>
<h2 dir="auto"><a id="user-content-getting-started" class="anchor" aria-hidden="true" href="#getting-started"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Getting Started</h2>
<p dir="auto">This package is pure Julia.  It is now registered, so it can be added simply with <code>Pkg.add("Format")</code>.
It is forked off of <a href="https://github.com/JuliaIO/Formatting.jl">Formatting.jl</a>, and I try to keep the oldmaster branch up to date with the master branch of that, and cherry pick or port all necessary changes to <code>Format</code>).</p>
<p dir="auto">To start using the package, you can simply write</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Format"><pre><span class="pl-k">using</span> Format</pre></div>
<p dir="auto">This package depends on Julia of version 0.6 or above, and. The package is MIT-licensed.</p>
<h2 dir="auto"><a id="user-content-python-style-types-and-functions" class="anchor" aria-hidden="true" href="#python-style-types-and-functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Python-style Types and Functions</h2>
<h4 dir="auto"><a id="user-content-types-to-represent-formats" class="anchor" aria-hidden="true" href="#types-to-represent-formats"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Types to Represent Formats</h4>
<p dir="auto">This package has two types <code>FormatSpec</code> and <code>FormatExpr</code> to represent a format specification.</p>
<p dir="auto">In particular, <code>FormatSpec</code> is used to capture the specification of a single entry. One can compile a format specification string into a <code>FormatSpec</code> instance as</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="fspec = FormatSpec(&quot;d&quot;)
fspec = FormatSpec(&quot;&lt;8.4f&quot;)"><pre>fspec <span class="pl-k">=</span> <span class="pl-c1">FormatSpec</span>(<span class="pl-s"><span class="pl-pds">"</span>d<span class="pl-pds">"</span></span>)
fspec <span class="pl-k">=</span> <span class="pl-c1">FormatSpec</span>(<span class="pl-s"><span class="pl-pds">"</span>&lt;8.4f<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">Please refer to <a href="http://docs.python.org/2/library/string.html#formatspec" rel="nofollow">Python's format specification language</a> for details.</p>
<p dir="auto"><code>FormatExpr</code> captures a formatting expression that may involve multiple items. One can compile a formatting string into a <code>FormatExpr</code> instance as</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="fe = FormatExpr(&quot;{1} + {2}&quot;)
fe = FormatExpr(&quot;{1:d} + {2:08.4e} + {3|&gt;abs2}&quot;)"><pre>fe <span class="pl-k">=</span> <span class="pl-c1">FormatExpr</span>(<span class="pl-s"><span class="pl-pds">"</span>{1} + {2}<span class="pl-pds">"</span></span>)
fe <span class="pl-k">=</span> <span class="pl-c1">FormatExpr</span>(<span class="pl-s"><span class="pl-pds">"</span>{1:d} + {2:08.4e} + {3|&gt;abs2}<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">Please refer to <a href="http://docs.python.org/2/library/string.html#format-string-syntax" rel="nofollow">Python's format string syntax</a> for details.</p>
<p dir="auto"><strong>Note:</strong> If the same format is going to be applied for multiple times. It is more efficient to first compile it.</p>
<h4 dir="auto"><a id="user-content-formatted-printing" class="anchor" aria-hidden="true" href="#formatted-printing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Formatted Printing</h4>
<p dir="auto">One can use <code>printfmt</code> and <code>printfmtln</code> for formatted printing:</p>
<ul dir="auto">
<li>
<p dir="auto"><strong>printfmt</strong>(io, fe, args...)</p>
</li>
<li>
<p dir="auto"><strong>printfmt</strong>(fe, args...)</p>
<p dir="auto">Print given arguments using given format <code>fe</code>. Here <code>fe</code> can be a formatting string, an instance of <code>FormatSpec</code> or <code>FormatExpr</code>.</p>
<p dir="auto"><strong>Examples</strong></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="printfmt(&quot;{1:&gt;4s} + {2:.2f}&quot;, &quot;abc&quot;, 12) # --&gt; print(&quot; abc + 12.00&quot;)
printfmt(&quot;{} = {:#04x}&quot;, &quot;abc&quot;, 12) # --&gt; print(&quot;abc = 0x0c&quot;) 

fs = FormatSpec(&quot;#04x&quot;)
printfmt(fs, 12)   # --&gt; print(&quot;0x0c&quot;)

fe = FormatExpr(&quot;{} = {:#04x}&quot;)
printfmt(fe, &quot;abc&quot;, 12)   # --&gt; print(&quot;abc = 0x0c&quot;)"><pre><span class="pl-c1">printfmt</span>(<span class="pl-s"><span class="pl-pds">"</span>{1:&gt;4s} + {2:.2f}<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>abc<span class="pl-pds">"</span></span>, <span class="pl-c1">12</span>) <span class="pl-c"><span class="pl-c">#</span> --&gt; print(" abc + 12.00")</span>
<span class="pl-c1">printfmt</span>(<span class="pl-s"><span class="pl-pds">"</span>{} = {:#04x}<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>abc<span class="pl-pds">"</span></span>, <span class="pl-c1">12</span>) <span class="pl-c"><span class="pl-c">#</span> --&gt; print("abc = 0x0c") </span>

fs <span class="pl-k">=</span> <span class="pl-c1">FormatSpec</span>(<span class="pl-s"><span class="pl-pds">"</span>#04x<span class="pl-pds">"</span></span>)
<span class="pl-c1">printfmt</span>(fs, <span class="pl-c1">12</span>)   <span class="pl-c"><span class="pl-c">#</span> --&gt; print("0x0c")</span>

fe <span class="pl-k">=</span> <span class="pl-c1">FormatExpr</span>(<span class="pl-s"><span class="pl-pds">"</span>{} = {:#04x}<span class="pl-pds">"</span></span>)
<span class="pl-c1">printfmt</span>(fe, <span class="pl-s"><span class="pl-pds">"</span>abc<span class="pl-pds">"</span></span>, <span class="pl-c1">12</span>)   <span class="pl-c"><span class="pl-c">#</span> --&gt; print("abc = 0x0c")</span></pre></div>
<p dir="auto"><strong>Notes</strong></p>
<p dir="auto">If the first argument is a string, it will be first compiled into a <code>FormatExpr</code>, which implies that you can not use specification-only string in the first argument.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="printfmt(&quot;{1:d}&quot;, 10)   # OK, &quot;{1:d}&quot; can be compiled into a FormatExpr instance
printfmt(&quot;d&quot;, 10)       # Error, &quot;d&quot; can not be compiled into a FormatExpr instance
                        # such a string to specify a format specification for single argument

printfmt(FormatSpec(&quot;d&quot;), 10)  # OK
printfmt(FormatExpr(&quot;{1:d}&quot;, 10)) # OK"><pre><span class="pl-c1">printfmt</span>(<span class="pl-s"><span class="pl-pds">"</span>{1:d}<span class="pl-pds">"</span></span>, <span class="pl-c1">10</span>)   <span class="pl-c"><span class="pl-c">#</span> OK, "{1:d}" can be compiled into a FormatExpr instance</span>
<span class="pl-c1">printfmt</span>(<span class="pl-s"><span class="pl-pds">"</span>d<span class="pl-pds">"</span></span>, <span class="pl-c1">10</span>)       <span class="pl-c"><span class="pl-c">#</span> Error, "d" can not be compiled into a FormatExpr instance</span>
                        <span class="pl-c"><span class="pl-c">#</span> such a string to specify a format specification for single argument</span>

<span class="pl-c1">printfmt</span>(<span class="pl-c1">FormatSpec</span>(<span class="pl-s"><span class="pl-pds">"</span>d<span class="pl-pds">"</span></span>), <span class="pl-c1">10</span>)  <span class="pl-c"><span class="pl-c">#</span> OK</span>
<span class="pl-c1">printfmt</span>(<span class="pl-c1">FormatExpr</span>(<span class="pl-s"><span class="pl-pds">"</span>{1:d}<span class="pl-pds">"</span></span>, <span class="pl-c1">10</span>)) <span class="pl-c"><span class="pl-c">#</span> OK</span></pre></div>
</li>
<li>
<p dir="auto"><strong>printfmtln</strong>(io, fe, args...)</p>
</li>
<li>
<p dir="auto"><strong>printfmtln</strong>(fe, args...)</p>
<p dir="auto">Similar to <code>printfmt</code> except that this function print a newline at the end.</p>
</li>
</ul>
<h4 dir="auto"><a id="user-content-formatted-string" class="anchor" aria-hidden="true" href="#formatted-string"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Formatted String</h4>
<p dir="auto">One can use <code>pyfmt</code> to format a single value into a string, or <code>format</code> to format one to multiple arguments into a string using an format expression.</p>
<ul dir="auto">
<li>
<p dir="auto"><strong>pyfmt</strong>(fspec, a)</p>
<p dir="auto">Format a single value using a format specification given by <code>fspec</code>, where <code>fspec</code> can be either a string or an instance of <code>FormatSpec</code>.</p>
</li>
<li>
<p dir="auto"><strong>format</strong>(fe, args...)</p>
<p dir="auto">Format arguments using a format expression given by <code>fe</code>, where <code>fe</code> can be either a string or an instance of <code>FormatSpec</code>.</p>
</li>
</ul>
<h4 dir="auto"><a id="user-content-difference-from-pythons-format" class="anchor" aria-hidden="true" href="#difference-from-pythons-format"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Difference from Python's Format</h4>
<p dir="auto">At this point, this package implements a subset of Python's formatting language (with slight modification). Here is a summary of the differences:</p>
<ul dir="auto">
<li>
<p dir="auto"><code>g</code> and <code>G</code> for floating point formatting have not been supported yet. Please use <code>f</code>, <code>e</code>, or <code>E</code> instead.</p>
</li>
<li>
<p dir="auto">The package currently provides default alignment, left alignment <code>&lt;</code> and right alignment <code>&gt;</code>. Other form of alignment such as centered alignment <code>^</code> has not been supported yet.</p>
</li>
<li>
<p dir="auto">In terms of argument specification, it supports natural ordering (e.g. <code>{} + {}</code>), explicit position (e.g. <code>{1} + {2}</code>). It hasn't supported named arguments or fields extraction yet. Note that mixing these two modes is not allowed (e.g. <code>{1} + {}</code>).</p>
</li>
<li>
<p dir="auto">The package provides support for filtering (for explicitly positioned arguments), such as <code>{1|&gt;lowercase}</code> by allowing one to embed the <code>|&gt;</code> operator, which the Python counter part does not support.</p>
</li>
</ul>
<h2 dir="auto"><a id="user-content-c-style-functions" class="anchor" aria-hidden="true" href="#c-style-functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>C-style functions</h2>
<p dir="auto">The c-style part of this package aims to get around the limitation that
<code>@sprintf</code> has to take a literal string argument.
The core part is basically a c-style print formatter using the standard
<code>@sprintf</code> macro.
It also adds functionalities such as commas separator (thousands), parenthesis for negatives,
stripping trailing zeros, and mixed fractions.</p>
<h3 dir="auto"><a id="user-content-usage-and-implementation" class="anchor" aria-hidden="true" href="#usage-and-implementation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage and Implementation</h3>
<p dir="auto">The idea here is that the package compiles a function only once for each unique
format string within the <code>Format.*</code> name space, so repeated use is faster.
Unrelated parts of a session using the same format string would reuse the same
function, avoiding redundant compilation. To avoid the proliferation of
functions, we limit the usage to only 1 argument. Practical consideration
would suggest that only dozens of functions would be created in a session, which
seems manageable.</p>
<p dir="auto">Usage</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Format

fmt = &quot;%10.3f&quot;
s = cfmt( fmt, 3.14159 ) # usage 1. Quite performant. Easiest to switch to.

fmtrfunc = generate_formatter( fmt ) # usage 2. This bypass repeated lookup of cached function. Most performant.
s = fmtrfunc( 3.14159 )

s = format( 3.14159, precision=3 ) # usage 3. Most flexible, with some non-printf options. Least performant."><pre><span class="pl-k">using</span> Format

fmt <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>%10.3f<span class="pl-pds">"</span></span>
s <span class="pl-k">=</span> <span class="pl-c1">cfmt</span>( fmt, <span class="pl-c1">3.14159</span> ) <span class="pl-c"><span class="pl-c">#</span> usage 1. Quite performant. Easiest to switch to.</span>

fmtrfunc <span class="pl-k">=</span> <span class="pl-c1">generate_formatter</span>( fmt ) <span class="pl-c"><span class="pl-c">#</span> usage 2. This bypass repeated lookup of cached function. Most performant.</span>
s <span class="pl-k">=</span> <span class="pl-c1">fmtrfunc</span>( <span class="pl-c1">3.14159</span> )

s <span class="pl-k">=</span> <span class="pl-c1">format</span>( <span class="pl-c1">3.14159</span>, precision<span class="pl-k">=</span><span class="pl-c1">3</span> ) <span class="pl-c"><span class="pl-c">#</span> usage 3. Most flexible, with some non-printf options. Least performant.</span></pre></div>
<h3 dir="auto"><a id="user-content-speed" class="anchor" aria-hidden="true" href="#speed"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Speed</h3>
<p dir="auto"><code>cfmt</code>: Speed penalty is about 20% for floating point and 30% for integers.</p>
<p dir="auto">If the formatter is stored and used instead (see the example using <code>generate_formatter</code> above),
the speed penalty reduces to 10% for floating point and 15% for integers.</p>
<h3 dir="auto"><a id="user-content-commas" class="anchor" aria-hidden="true" href="#commas"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Commas</h3>
<p dir="auto">This package also supplements the lack of thousand separator e.g. <code>"%'d"</code>, <code>"%'f"</code>, <code>"%'s"</code>.</p>
<p dir="auto">Note: <code>"%'s"</code> behavior is that for small enough floating point (but not too small),
thousand separator would be used. If the number needs to be represented by <code>"%e"</code>, no
separator is used.</p>
<h3 dir="auto"><a id="user-content-flexible-format-function" class="anchor" aria-hidden="true" href="#flexible-format-function"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Flexible <code>format</code> function</h3>
<p dir="auto">This package contains a run-time number formatter <code>format</code> function, which goes beyond
the standard <code>sprintf</code> functionality.</p>
<p dir="auto">An example:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="s = format( 1234, commas=true ) # 1,234
s = format( -1234, commas=true, parens=true ) # (1,234)"><pre>s <span class="pl-k">=</span> <span class="pl-c1">format</span>( <span class="pl-c1">1234</span>, commas<span class="pl-k">=</span><span class="pl-c1">true</span> ) <span class="pl-c"><span class="pl-c">#</span> 1,234</span>
s <span class="pl-k">=</span> <span class="pl-c1">format</span>( <span class="pl-k">-</span><span class="pl-c1">1234</span>, commas<span class="pl-k">=</span><span class="pl-c1">true</span>, parens<span class="pl-k">=</span><span class="pl-c1">true</span> ) <span class="pl-c"><span class="pl-c">#</span> (1,234)</span></pre></div>
<p dir="auto">The keyword arguments are (Bold keywards are not printf standard)</p>
<ul dir="auto">
<li>width. Integer. Try to fit the output into this many characters. May not be successful.
Sacrifice space first, then commas.</li>
<li>precision. Integer. How many decimal places.</li>
<li>leftjustified. Boolean</li>
<li>zeropadding. Boolean</li>
<li>commas. Boolean. Thousands-group separator.</li>
<li>signed. Boolean. Always show +/- sign?</li>
<li>positivespace. Boolean. Prepend an extra space for positive numbers? (so they align nicely with negative numbers)</li>
<li><strong>parens</strong>. Boolean. Use parenthesis instead of "-". e.g. <code>(1.01)</code> instead of <code>-1.01</code>. Useful in finance. Note that
you cannot use <code>signed</code> and <code>parens</code> option at the same time.</li>
<li><strong>stripzeros</strong>. Boolean. Strip trailing '0' to the right of the decimal (and to the left of 'e', if any ).
<ul dir="auto">
<li>It may strip the decimal point itself if all trailing places are zeros.</li>
<li>This is true by default if precision is not given, and vice versa.</li>
</ul>
</li>
<li>alternative. Boolean. See <code>#</code> alternative form explanation in standard printf documentation</li>
<li>conversion. length=1 string. Default is type dependent. It can be one of <code>aAeEfFoxX</code>. See standard
printf documentation.</li>
<li><strong>mixedfraction</strong>. Boolean. If the number is rational, format it in mixed fraction e.g. <code>1_1/2</code> instead of <code>3/2</code></li>
<li><strong>mixedfractionsep</strong>. Default <code>_</code></li>
<li><strong>fractionsep</strong>. Default <code>/</code></li>
<li><strong>fractionwidth</strong>. Integer. Try to pad zeros to the numerator until the fractional part has this width</li>
<li><strong>tryden</strong>. Integer. Try to use this denominator instead of a smaller one. No-op if it'd lose precision.</li>
<li><strong>suffix</strong>. String. This strings will be appended to the output. Useful for units/%</li>
<li><strong>autoscale</strong>. Symbol, default <code>:none</code>. It could be <code>:metric</code>, <code>:binary</code>, or <code>:finance</code>.
<ul dir="auto">
<li><code>:metric</code> implements common SI symbols for large and small numbers e.g. <code>M</code>, <code>k</code>, <code>μ</code>, <code>n</code></li>
<li><code>:binary</code> implements common ISQ symbols for large numbers e.g. <code>Ti</code>, <code>Gi</code>, <code>Mi</code>, <code>Ki</code></li>
<li><code>:finance</code> implements common finance/news symbols for large numbers e.g. <code>b</code> (billion), <code>m</code> (millions)</li>
</ul>
</li>
</ul>
<p dir="auto">See the test script for more examples.</p>
</article></div>