<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-bytepairencodingjl" class="anchor" aria-hidden="true" href="#bytepairencodingjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>BytePairEncoding.jl</h1>
<p><a href="https://github.com/chengchingwen/BytePairEncoding.jl/actions"><img src="https://github.com/chengchingwen/BytePairEncoding.jl/workflows/CI/badge.svg" alt="Build status" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/chengchingwen/BytePairEncoding.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/7b97ea2541886df33bb6500e5b4c773bda986c2ce20c0d18a36a262c808a4ea7/68747470733a2f2f636f6465636f762e696f2f67682f6368656e676368696e6777656e2f4279746550616972456e636f64696e672e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/chengchingwen/BytePairEncoding.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a>
<a href="https://chengchingwen.github.io/BytePairEncoding.jl/dev/" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a></p>
<p>Pure Julia implementation of the Byte Pair Encoding (BPE) method.</p>
<p>The design is inspired by the original python package <a href="https://github.com/rsennrich/subword-nmt">subword-nmt</a> and the byte-level bpe use in <a href="https://github.com/openai/gpt-2">openai-gpt2</a>. <code>BytePairEncoding.jl</code> support different tokenize
method(with the help of WordTokenizers.jl). You can simply set the tokenizer and then learn the BPE map with it.</p>
<h1><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h1>
<p>In the Julia REPL:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="]add BytePairEncoding
"><pre><code>]add BytePairEncoding
</code></pre></div>
<h1><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h1>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using BytePairEncoding, WordTokenizers

# using the bpe from openai gpt
julia&gt; bpe = Bpe(Base.download(&quot;https://huggingface.co/openai-gpt/resolve/main/merges.txt&quot;))
GenericBPE{String}(n_merge=40000, endsym=&lt;/w&gt;, oldendsym=&lt;/w&gt;, input_transform=tokenize)

# reset the tokenize method to do lowercase before tokenization
julia&gt; bpe = GenericBPE(bpe; input_transform = tokenize∘lowercase)
GenericBPE{String}(n_merge=40000, endsym=&lt;/w&gt;, oldendsym=&lt;/w&gt;, input_transform=ComposedFunction{typeof(tokenize), typeof(lowercase)}(WordTokenizers.tokenize, lowercase))

# segment the sentence
julia&gt; bpe(&quot;Peter Piper picked a peck of pickled peppers&quot;)
8-element Vector{String}:
 &quot;peter&lt;/w&gt;&quot;
 &quot;piper&lt;/w&gt;&quot;
 &quot;picked&lt;/w&gt;&quot;
 &quot;a&lt;/w&gt;&quot;
 &quot;peck&lt;/w&gt;&quot;
 &quot;of&lt;/w&gt;&quot;
 &quot;pickled&lt;/w&gt;&quot;
 &quot;peppers&lt;/w&gt;&quot;

# using the byte level bpe from openai gpt2
julia&gt; bbpe = ByteLevelBPE(Base.download(&quot;https://s3.amazonaws.com/models.huggingface.co/bert/gpt2-merges.txt&quot;))
GenericBPE{String}(n_merge=50000, input_transform=gpt2_tokenizer, codemap=BytePairEncoding.CodeMap(StepRange{Char,
Int64}['\0':1:' ', '\x7f':1:' ', '\uad':1:'\uad'], StepRange{Char, Int64}['Ā':1:'Ġ', 'ġ':1:'ł', 'Ń':1:'Ń']))

# segment the sentence
julia&gt; bbpe(&quot;This is a 😺&quot;)
5-element Vector{String}:
 &quot;This&quot;
 &quot;Ġis&quot;
 &quot;Ġa&quot;
 &quot;ĠðŁĺ&quot;
 &quot;º&quot;

# to see the origin input, set the output_transform method that unmap the codepoint
julia&gt; decoded_bbpe = GenericBPE(bbpe; output_transform = BytePairEncoding.UnMap(bbpe.codemap))
GenericBPE{String}(n_merge=50000, input_transform=gpt2_tokenizer, output_transform=BytePairEncoding.UnMap(BytePairEncoding.CodeMap(StepRange{Char, Int64}['\0':1:' ', '\x7f':1:' ', '\uad':1:'\uad'], StepRange{Char, Int64}['Ā':1:'Ġ', 'ġ':1:'ł', 'Ń':1:'Ń'])), codemap=BytePairEncoding.CodeMap(StepRange{Char, Int64}['\0':1:' ', '\x7f':1:' ', '\uad':1:'\uad'], StepRange{Char, Int64}['Ā':1:'Ġ', 'ġ':1:'ł', 'Ń':1:'Ń']))

julia&gt; decoded_bbpe(&quot;This is a 😺&quot;)
5-element Vector{String}:
 &quot;This&quot;
 &quot; is&quot;
 &quot; a&quot;
 &quot; \xf0\x9f\x98&quot;
 &quot;\xba&quot;

julia&gt; join(ans)
&quot;This is a 😺&quot;

"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> BytePairEncoding, WordTokenizers

<span class="pl-c"><span class="pl-c">#</span> using the bpe from openai gpt</span>
julia<span class="pl-k">&gt;</span> bpe <span class="pl-k">=</span> <span class="pl-c1">Bpe</span>(Base<span class="pl-k">.</span><span class="pl-c1">download</span>(<span class="pl-s"><span class="pl-pds">"</span>https://huggingface.co/openai-gpt/resolve/main/merges.txt<span class="pl-pds">"</span></span>))
<span class="pl-c1">GenericBPE</span><span class="pl-c1">{String}</span>(n_merge<span class="pl-k">=</span><span class="pl-c1">40000</span>, endsym<span class="pl-k">=</span><span class="pl-k">&lt;</span><span class="pl-k">/</span>w<span class="pl-k">&gt;</span>, oldendsym<span class="pl-k">=</span><span class="pl-k">&lt;</span><span class="pl-k">/</span>w<span class="pl-k">&gt;</span>, input_transform<span class="pl-k">=</span>tokenize)

<span class="pl-c"><span class="pl-c">#</span> reset the tokenize method to do lowercase before tokenization</span>
julia<span class="pl-k">&gt;</span> bpe <span class="pl-k">=</span> <span class="pl-c1">GenericBPE</span>(bpe; input_transform <span class="pl-k">=</span> tokenize<span class="pl-k">∘</span>lowercase)
<span class="pl-c1">GenericBPE</span><span class="pl-c1">{String}</span>(n_merge<span class="pl-k">=</span><span class="pl-c1">40000</span>, endsym<span class="pl-k">=</span><span class="pl-k">&lt;</span><span class="pl-k">/</span>w<span class="pl-k">&gt;</span>, oldendsym<span class="pl-k">=</span><span class="pl-k">&lt;</span><span class="pl-k">/</span>w<span class="pl-k">&gt;</span>, input_transform<span class="pl-k">=</span><span class="pl-c1">ComposedFunction</span><span class="pl-c1">{typeof(tokenize), typeof(lowercase)}</span>(WordTokenizers<span class="pl-k">.</span>tokenize, lowercase))

<span class="pl-c"><span class="pl-c">#</span> segment the sentence</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">bpe</span>(<span class="pl-s"><span class="pl-pds">"</span>Peter Piper picked a peck of pickled peppers<span class="pl-pds">"</span></span>)
<span class="pl-c1">8</span><span class="pl-k">-</span>element Vector{String}<span class="pl-k">:</span>
 <span class="pl-s"><span class="pl-pds">"</span>peter&lt;/w&gt;<span class="pl-pds">"</span></span>
 <span class="pl-s"><span class="pl-pds">"</span>piper&lt;/w&gt;<span class="pl-pds">"</span></span>
 <span class="pl-s"><span class="pl-pds">"</span>picked&lt;/w&gt;<span class="pl-pds">"</span></span>
 <span class="pl-s"><span class="pl-pds">"</span>a&lt;/w&gt;<span class="pl-pds">"</span></span>
 <span class="pl-s"><span class="pl-pds">"</span>peck&lt;/w&gt;<span class="pl-pds">"</span></span>
 <span class="pl-s"><span class="pl-pds">"</span>of&lt;/w&gt;<span class="pl-pds">"</span></span>
 <span class="pl-s"><span class="pl-pds">"</span>pickled&lt;/w&gt;<span class="pl-pds">"</span></span>
 <span class="pl-s"><span class="pl-pds">"</span>peppers&lt;/w&gt;<span class="pl-pds">"</span></span>

<span class="pl-c"><span class="pl-c">#</span> using the byte level bpe from openai gpt2</span>
julia<span class="pl-k">&gt;</span> bbpe <span class="pl-k">=</span> <span class="pl-c1">ByteLevelBPE</span>(Base<span class="pl-k">.</span><span class="pl-c1">download</span>(<span class="pl-s"><span class="pl-pds">"</span>https://s3.amazonaws.com/models.huggingface.co/bert/gpt2-merges.txt<span class="pl-pds">"</span></span>))
<span class="pl-c1">GenericBPE</span><span class="pl-c1">{String}</span>(n_merge<span class="pl-k">=</span><span class="pl-c1">50000</span>, input_transform<span class="pl-k">=</span>gpt2_tokenizer, codemap<span class="pl-k">=</span>BytePairEncoding<span class="pl-k">.</span><span class="pl-c1">CodeMap</span>(StepRange{Char,
Int64}[<span class="pl-s"><span class="pl-pds">'</span><span class="pl-cce">\0</span><span class="pl-pds">'</span></span>:<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">'</span> <span class="pl-pds">'</span></span>, <span class="pl-s"><span class="pl-pds">'</span><span class="pl-cce">\x</span>7f<span class="pl-pds">'</span></span>:<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">'</span> <span class="pl-pds">'</span></span>, <span class="pl-s"><span class="pl-pds">'</span><span class="pl-cce">\u</span>ad<span class="pl-pds">'</span></span>:<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">'</span><span class="pl-cce">\u</span>ad<span class="pl-pds">'</span></span>], StepRange{Char, Int64}[<span class="pl-s"><span class="pl-pds">'</span>Ā<span class="pl-pds">'</span></span>:<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">'</span>Ġ<span class="pl-pds">'</span></span>, <span class="pl-s"><span class="pl-pds">'</span>ġ<span class="pl-pds">'</span></span>:<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">'</span>ł<span class="pl-pds">'</span></span>, <span class="pl-s"><span class="pl-pds">'</span>Ń<span class="pl-pds">'</span></span>:<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">'</span>Ń<span class="pl-pds">'</span></span>]))

<span class="pl-c"><span class="pl-c">#</span> segment the sentence</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">bbpe</span>(<span class="pl-s"><span class="pl-pds">"</span>This is a 😺<span class="pl-pds">"</span></span>)
<span class="pl-c1">5</span><span class="pl-k">-</span>element Vector{String}<span class="pl-k">:</span>
 <span class="pl-s"><span class="pl-pds">"</span>This<span class="pl-pds">"</span></span>
 <span class="pl-s"><span class="pl-pds">"</span>Ġis<span class="pl-pds">"</span></span>
 <span class="pl-s"><span class="pl-pds">"</span>Ġa<span class="pl-pds">"</span></span>
 <span class="pl-s"><span class="pl-pds">"</span>ĠðŁĺ<span class="pl-pds">"</span></span>
 <span class="pl-s"><span class="pl-pds">"</span>º<span class="pl-pds">"</span></span>

<span class="pl-c"><span class="pl-c">#</span> to see the origin input, set the output_transform method that unmap the codepoint</span>
julia<span class="pl-k">&gt;</span> decoded_bbpe <span class="pl-k">=</span> <span class="pl-c1">GenericBPE</span>(bbpe; output_transform <span class="pl-k">=</span> BytePairEncoding<span class="pl-k">.</span><span class="pl-c1">UnMap</span>(bbpe<span class="pl-k">.</span>codemap))
<span class="pl-c1">GenericBPE</span><span class="pl-c1">{String}</span>(n_merge<span class="pl-k">=</span><span class="pl-c1">50000</span>, input_transform<span class="pl-k">=</span>gpt2_tokenizer, output_transform<span class="pl-k">=</span>BytePairEncoding<span class="pl-k">.</span><span class="pl-c1">UnMap</span>(BytePairEncoding<span class="pl-k">.</span><span class="pl-c1">CodeMap</span>(StepRange{Char, Int64}[<span class="pl-s"><span class="pl-pds">'</span><span class="pl-cce">\0</span><span class="pl-pds">'</span></span>:<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">'</span> <span class="pl-pds">'</span></span>, <span class="pl-s"><span class="pl-pds">'</span><span class="pl-cce">\x</span>7f<span class="pl-pds">'</span></span>:<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">'</span> <span class="pl-pds">'</span></span>, <span class="pl-s"><span class="pl-pds">'</span><span class="pl-cce">\u</span>ad<span class="pl-pds">'</span></span>:<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">'</span><span class="pl-cce">\u</span>ad<span class="pl-pds">'</span></span>], StepRange{Char, Int64}[<span class="pl-s"><span class="pl-pds">'</span>Ā<span class="pl-pds">'</span></span>:<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">'</span>Ġ<span class="pl-pds">'</span></span>, <span class="pl-s"><span class="pl-pds">'</span>ġ<span class="pl-pds">'</span></span>:<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">'</span>ł<span class="pl-pds">'</span></span>, <span class="pl-s"><span class="pl-pds">'</span>Ń<span class="pl-pds">'</span></span>:<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">'</span>Ń<span class="pl-pds">'</span></span>])), codemap<span class="pl-k">=</span>BytePairEncoding<span class="pl-k">.</span><span class="pl-c1">CodeMap</span>(StepRange{Char, Int64}[<span class="pl-s"><span class="pl-pds">'</span><span class="pl-cce">\0</span><span class="pl-pds">'</span></span>:<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">'</span> <span class="pl-pds">'</span></span>, <span class="pl-s"><span class="pl-pds">'</span><span class="pl-cce">\x</span>7f<span class="pl-pds">'</span></span>:<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">'</span> <span class="pl-pds">'</span></span>, <span class="pl-s"><span class="pl-pds">'</span><span class="pl-cce">\u</span>ad<span class="pl-pds">'</span></span>:<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">'</span><span class="pl-cce">\u</span>ad<span class="pl-pds">'</span></span>], StepRange{Char, Int64}[<span class="pl-s"><span class="pl-pds">'</span>Ā<span class="pl-pds">'</span></span>:<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">'</span>Ġ<span class="pl-pds">'</span></span>, <span class="pl-s"><span class="pl-pds">'</span>ġ<span class="pl-pds">'</span></span>:<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">'</span>ł<span class="pl-pds">'</span></span>, <span class="pl-s"><span class="pl-pds">'</span>Ń<span class="pl-pds">'</span></span>:<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">'</span>Ń<span class="pl-pds">'</span></span>]))

julia<span class="pl-k">&gt;</span> <span class="pl-c1">decoded_bbpe</span>(<span class="pl-s"><span class="pl-pds">"</span>This is a 😺<span class="pl-pds">"</span></span>)
<span class="pl-c1">5</span><span class="pl-k">-</span>element Vector{String}<span class="pl-k">:</span>
 <span class="pl-s"><span class="pl-pds">"</span>This<span class="pl-pds">"</span></span>
 <span class="pl-s"><span class="pl-pds">"</span> is<span class="pl-pds">"</span></span>
 <span class="pl-s"><span class="pl-pds">"</span> a<span class="pl-pds">"</span></span>
 <span class="pl-s"><span class="pl-pds">"</span> <span class="pl-cce">\x</span>f0<span class="pl-cce">\x</span>9f<span class="pl-cce">\x</span>98<span class="pl-pds">"</span></span>
 <span class="pl-s"><span class="pl-pds">"</span><span class="pl-cce">\x</span>ba<span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">join</span>(ans)
<span class="pl-s"><span class="pl-pds">"</span>This is a 😺<span class="pl-pds">"</span></span>
</pre></div>
</article></div>