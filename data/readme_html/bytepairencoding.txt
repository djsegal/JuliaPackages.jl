<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><p><a id="user-content-orga6ba865"></a></p>
<h1><a id="user-content-bytepairencodingjl" class="anchor" aria-hidden="true" href="#bytepairencodingjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>BytePairEncoding.jl</h1>
<p><a href="https://travis-ci.com/chengchingwen/BytePairEncoding.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/f653af8038cd69096437db199f69949ea593a1d0/68747470733a2f2f7472617669732d63692e636f6d2f6368656e676368696e6777656e2f4279746550616972456e636f64696e672e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/chengchingwen/BytePairEncoding.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/chengchingwen/bytepairencoding-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/2b95b1f3c5759ab6b7423292a0e04f71ed3ef5c9/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f76793037776a6b6f6a317168617638333f7376673d74727565" alt="Build status" data-canonical-src="https://ci.appveyor.com/api/projects/status/vy07wjkoj1qhav83?svg=true" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/chengchingwen/BytePairEncoding.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/8f5357f8eca2c14813fbdc2168c148af1cc776a3/68747470733a2f2f636f6465636f762e696f2f67682f6368656e676368696e6777656e2f4279746550616972456e636f64696e672e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/chengchingwen/BytePairEncoding.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p>Pure Julia implementation of  the Byte Pair Encoding(BPE) method
in the <a href="https://arxiv.org/abs/1508.07909" rel="nofollow">subword neural machine translation paper</a>. It's a port of
the original python package <a href="https://github.com/rsennrich/subword-nmt">subword-nmt</a>. <code>BytePairEncoding.jl</code> support different tokenize
method(with the help of WordTokenizers.jl). You can simply use <code>set_tokenizer([your tokenize function])</code>
and then Learn the BPE map with it.</p>
<h1><a id="user-content-table-of-contents" class="anchor" aria-hidden="true" href="#table-of-contents"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Table of Contents</h1>
<ol>
<li><a href="#orga6ba865">BytePairEncoding.jl</a></li>
<li><a href="#org3bc249a">API</a>
<ol>
<li><a href="#orgf84a864">Unicode Normalization</a></li>
</ol>
</li>
<li><a href="#orga7c7a03">Examples</a></li>
<li><a href="#orgecfe740">Roadmap</a></li>
</ol>
<p><a id="user-content-org3bc249a"></a></p>
<h1><a id="user-content-api" class="anchor" aria-hidden="true" href="#api"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>API</h1>
<ul>
<li><code>BPELearner([vocabulary files]; num_sym, min_freq, endsym, normalizer)</code>
<ul>
<li>work as the learning configure.
<ul>
<li><code>num_sym</code>: how many pair to generate.</li>
<li><code>min_freq</code>: threshold of learned pair frequency.</li>
<li><code>endsym</code>: the symbol for seperate internal &amp; last pair, if is set, it will automatically
invoke <code>set_endsym(endsym</code>.</li>
<li><code>normalizer</code>: normalizer type, default is identity(not normalized),
see next section for define normalization</li>
</ul>
</li>
<li><code>add!(::BPELearner, newfile)</code>
<ul>
<li>add a new file to learner.</li>
</ul>
</li>
<li><code>learn!(::BPELearner)</code>
<ul>
<li>learn the bpe map.</li>
</ul>
</li>
<li><code>emit(::BPELearner, output_filename)</code>
<ul>
<li>generate the bpe map file.</li>
</ul>
</li>
</ul>
</li>
<li><code>Bpe(bpefile; glossaries, merge, sepsym, endsym, normalizer)</code>
<ul>
<li>the bpe encoding related config.
<ul>
<li><code>merge</code>: how many pair to load.</li>
<li><code>sepsym</code>: seperator symbol for internal pair, default is <code>""</code>.</li>
<li><code>endsym</code>: end symbol of the last pair, default <code>"&lt;/w&gt;"</code>.</li>
<li><code>have_header</code>: skip first line? default <code>true</code></li>
<li><code>glossaries</code>: a list of glossaries, support both Regex &amp; String.</li>
<li><code>normalizer</code>: normalizer type,  default is identity(not normalized),
see next section for define normalization</li>
</ul>
</li>
<li><code>process_line(::Bpe, line)</code>: segment a given line the join as a new line,
leading &amp; trailing whitesplace will remmain.</li>
<li><code>segment(::Bpe, line)</code>: segment a line into a list of segments</li>
<li><code>segment_token(::Bpe, token::String)</code>: segment a given token or a list of tokens.</li>
</ul>
</li>
<li><code>set_endsym(::String)</code>: set the end symbol, default <code>"&lt;/w&gt;"</code>.</li>
<li><code>set_tokenizer(func)</code>: set the tokenizer fucntion , default is <code>nltk_word_tokenize</code>.</li>
<li><code>whitespace_tokenize(str)</code>: simply the <code>split(str)</code> function, for use with <code>set_tokenizer</code>.</li>
</ul>
<p><a id="user-content-orgf84a864"></a></p>
<h2><a id="user-content-unicode-normalization" class="anchor" aria-hidden="true" href="#unicode-normalization"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Unicode Normalization</h2>
<p>support unicode normalization</p>
<ul>
<li><code>UtfNormalizer</code>
<ul>
<li>wrapper type on Julia built-in unicode normalization function
<ul>
<li><code>UtfNormalizer(::Symbol)</code>: support <code>:NFC</code>, <code>:NFD</code>, <code>:NFKC</code>, <code>:NFKD</code>, <code>:NFKC_CF</code></li>
<li><code>UtfNormalizer([option_names=all_default_false])</code>: options (stable, compat,
compose, decompose, stripignore, rejectna, newline2ls, newline2ps, newline2lf,
stripcc, casefold, lump, stripmark), usage example: <code>UtfNormalizer(stable=true, compose=true)</code></li>
</ul>
</li>
<li><code>normalize(::AbstractNormalizer, ::String)</code>: normalize given string with specific normalizer.</li>
</ul>
</li>
</ul>
<p><a id="user-content-orga7c7a03"></a></p>
<h1><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Examples</h1>
<pre><code>               _
   _       _ _(_)_     |  Documentation: https://docs.julialang.org
  (_)     | (_) (_)    |
   _ _   _| |_  __ _   |  Type "?" for help, "]?" for Pkg help.
  | | | | | | |/ _` |  |
  | | |_| | | | (_| |  |  Version 1.0.2 (2018-11-08)
 _/ |\__'_|_|_|\__'_|  |
|__/                   |

julia&gt; using BytePairEncoding

julia&gt; using WordTokenizers

julia&gt; set_tokenizer(nltk_word_tokenize)
tokenize (generic function with 1 method)

julia&gt; norm = UtfNormalizer(:NFKC)
UtfNormalizer(14)

julia&gt; vocabfiles = ["./data/.....", "./another/data/....." ...]

julia&gt; bper = BPELearner(vocabfiles, 1000; normalizer=norm)
BPELearner(num_sym=1000, min_freq=2, endsym="&lt;/w&gt;", normailzer=UtfNormalizer)

julia&gt; learn!(bper)

julia&gt; emit(bper, "./bpe.out")
"./bpe.out"

julia&gt; bpe = Bpe("./bpe.out"; normalizer=norm)
Bpe(merge=-1, sepsym="", endsym="&lt;/w&gt;", num_glossaries=0, normalizer=UtfNormalizer)

julia&gt; sample_sent =  "It's interesting that technology often works as a servant for us, yet frequently we become a
 servant to it. E-mail is a useful tool but many feel controlled by this new tool. The average business person is g
etting about 80e-mails per day and many feel that about 80% of the messages in their \"Inbox\" are of little or no
       value. So, I have four suggestions to help you to become better at \"Erasing E-mail\".\n1.Get off the lists.
 The best way to deal with a problem is to never have it. If you are receiving a lot of unwanted e-mails, ask to be
 removed from the various lists. This would include your inclusion in unwanted lists.\n2.\"Unlisted address\". Just
 as you keep an \"unlisted\" telephone number that you share only with those whom you want to have direct access to
, you might want to get a separate e-mail address only for the important communications you wish to receive.\n"
"It's interesting that technology often works as a servant for us, yet frequently we become a servant to it. E-mail
 is a useful tool but many feel controlled by this new tool. The average business person is getting about 80e-mails
 per day and many feel that about 80% of the messages in their \"Inbox\" are of little or no\nvalue. So, I have fou
r suggestions to help you to become better at \"Erasing E-mail\".\n1.Get off the lists. The best way to deal with a
 problem is to never have it. If you are receiving a lot of unwanted e-mails, ask to be removed from the various li
sts. This would include your inclusion in unwanted lists.\n2.\"Unlisted address\". Just as you keep an \"unlisted\"
 telephone number that you share only with those whom you want to have direct access to, you might want to get a se
parate e-mail address only for the important communications you wish to receive.\n"

julia&gt; first(split_sentences(sample_sent))
"It's interesting that technology often works as a servant for us, yet frequently we become a servant to it."

julia&gt; segment(bpe, ans)
42-element Array{String,1}:
 "I"        
 "t&lt;/w&gt;"    
 "'"        
 "s&lt;/w&gt;"    
 "inter"    
 "est"      
 "ing&lt;/w&gt;"  
 "that&lt;/w&gt;" 
 "t"        
 "ec"       
 "h"        
 "no"       
 "lo"       
 "g"        
 "y&lt;/w&gt;"    
 "of"       
 "ten&lt;/w&gt;"  
 "works&lt;/w&gt;"
 "as&lt;/w&gt;"   
 "a&lt;/w&gt;"    
 ⋮          
 "us&lt;/w&gt;"   
 ",&lt;/w&gt;"    
 "y"        
 "et&lt;/w&gt;"   
 "f"        
 "re"       
 "qu"       
 "ent"      
 "ly&lt;/w&gt;"   
 "we&lt;/w&gt;"   
 "b"        
 "ecom"     
 "e&lt;/w&gt;"    
 "a&lt;/w&gt;"    
 "serv"     
 "ant&lt;/w&gt;"  
 "to&lt;/w&gt;"   
 "it&lt;/w&gt;"   
 ".&lt;/w&gt;"    

julia&gt; for sentence ∈ split_sentences(sample_sent)
           println(process_line(bpe, sentence))
       end
I t&lt;/w&gt; ' s&lt;/w&gt; inter est ing&lt;/w&gt; that&lt;/w&gt; t ec h no lo g y&lt;/w&gt; of ten&lt;/w&gt; works&lt;/w&gt; as&lt;/w&gt; a&lt;/w&gt; serv ant&lt;/w&gt; for&lt;
/w&gt; us&lt;/w&gt; ,&lt;/w&gt; y et&lt;/w&gt; f re qu ent ly&lt;/w&gt; we&lt;/w&gt; b ecom e&lt;/w&gt; a&lt;/w&gt; serv ant&lt;/w&gt; to&lt;/w&gt; it&lt;/w&gt; .&lt;/w&gt;
E - ma il&lt;/w&gt; is&lt;/w&gt; a&lt;/w&gt; us e ful&lt;/w&gt; tool&lt;/w&gt; but&lt;/w&gt; many&lt;/w&gt; fe el&lt;/w&gt; cont ro l led&lt;/w&gt; by&lt;/w&gt; this&lt;/w&gt; new&lt;/
w&gt; tool&lt;/w&gt; .&lt;/w&gt;
T he&lt;/w&gt; a ver age&lt;/w&gt; b us in ess&lt;/w&gt; pers on&lt;/w&gt; is&lt;/w&gt; g et ting&lt;/w&gt; about&lt;/w&gt; 8 0 e - ma il s&lt;/w&gt; p er&lt;/w&gt; day&lt;
/w&gt; and&lt;/w&gt; many&lt;/w&gt; fe el&lt;/w&gt; that&lt;/w&gt; about&lt;/w&gt; 8 0&lt;/w&gt; %&lt;/w&gt; of&lt;/w&gt; the&lt;/w&gt; m es sa ges&lt;/w&gt; in&lt;/w&gt; their&lt;/w&gt; ` `
&lt;/w&gt; In bo x&lt;/w&gt; ' '&lt;/w&gt; are&lt;/w&gt; of&lt;/w&gt; l it t le&lt;/w&gt; or&lt;/w&gt; no&lt;/w&gt;
value&lt;/w&gt; .&lt;/w&gt;
S o&lt;/w&gt; ,&lt;/w&gt; I&lt;/w&gt; have&lt;/w&gt; f our&lt;/w&gt; su g g es tions&lt;/w&gt; to&lt;/w&gt; help&lt;/w&gt; you&lt;/w&gt; to&lt;/w&gt; b ecom e&lt;/w&gt; bet ter&lt;/w&gt;
at&lt;/w&gt; ` `&lt;/w&gt; E r as ing&lt;/w&gt; E - ma il&lt;/w&gt; ' '&lt;/w&gt; .&lt;/w&gt;
1 . G et&lt;/w&gt; of f&lt;/w&gt; the&lt;/w&gt; li sts&lt;/w&gt; .&lt;/w&gt;
T he&lt;/w&gt; b est&lt;/w&gt; way&lt;/w&gt; to&lt;/w&gt; de al&lt;/w&gt; with&lt;/w&gt; a&lt;/w&gt; pro bl em&lt;/w&gt; is&lt;/w&gt; to&lt;/w&gt; n ever&lt;/w&gt; have&lt;/w&gt; it&lt;/w&gt; .
&lt;/w&gt;
I f&lt;/w&gt; you&lt;/w&gt; are&lt;/w&gt; recei ving&lt;/w&gt; a&lt;/w&gt; l ot&lt;/w&gt; of&lt;/w&gt; un w an ted&lt;/w&gt; e - ma il s&lt;/w&gt; ,&lt;/w&gt; as k&lt;/w&gt; to&lt;/w&gt;
be&lt;/w&gt; re mo ved&lt;/w&gt; from&lt;/w&gt; the&lt;/w&gt; vari ous&lt;/w&gt; li sts&lt;/w&gt; .&lt;/w&gt;
T his&lt;/w&gt; would&lt;/w&gt; incl u de&lt;/w&gt; your&lt;/w&gt; incl us i on&lt;/w&gt; in&lt;/w&gt; un w an ted&lt;/w&gt; li sts&lt;/w&gt; .&lt;/w&gt;
2 .&lt;/w&gt; ' '&lt;/w&gt; U n li sted&lt;/w&gt; ad d ress&lt;/w&gt; ' '&lt;/w&gt; .&lt;/w&gt;
J ust&lt;/w&gt; as&lt;/w&gt; you&lt;/w&gt; ke ep&lt;/w&gt; an&lt;/w&gt; ` `&lt;/w&gt; un li sted&lt;/w&gt; ' '&lt;/w&gt; t el e ph one&lt;/w&gt; numb er&lt;/w&gt; that&lt;/w&gt; you
&lt;/w&gt; sh are&lt;/w&gt; only&lt;/w&gt; with&lt;/w&gt; those&lt;/w&gt; who m&lt;/w&gt; you&lt;/w&gt; want&lt;/w&gt; to&lt;/w&gt; have&lt;/w&gt; di rec t&lt;/w&gt; acc ess&lt;/w&gt; to&lt;
/w&gt; ,&lt;/w&gt; you&lt;/w&gt; might&lt;/w&gt; want&lt;/w&gt; to&lt;/w&gt; get&lt;/w&gt; a&lt;/w&gt; se par ate&lt;/w&gt; e - ma il&lt;/w&gt; ad d ress&lt;/w&gt; only&lt;/w&gt; for&lt;/
w&gt; the&lt;/w&gt; im por t ant&lt;/w&gt; comm un ic ations&lt;/w&gt; you&lt;/w&gt; w ish&lt;/w&gt; to&lt;/w&gt; receive&lt;/w&gt; .&lt;/w&gt;

julia&gt; 
</code></pre>
<p><a id="user-content-orgecfe740"></a></p>
<h1><a id="user-content-roadmap" class="anchor" aria-hidden="true" href="#roadmap"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Roadmap</h1>
<ul>
<li>add more interface and function</li>
<li>add pre-learned bpe map</li>
<li>support for different bpe format</li>
<li>support custom normalization</li>
<li>support for google <a href="https://github.com/google/sentencepiece">sentencepiece</a></li>
<li>Maybe add to <a href="https://github.com/JuliaText/Embeddings.jl">Embeddings.jl</a> with <a href="https://github.com/bheinzerling/bpemb">bpemb</a>: pre-train bpe embedding</li>
</ul>
</article></div>