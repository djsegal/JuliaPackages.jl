<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-cudaatomics" class="anchor" aria-hidden="true" href="#cudaatomics"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>CUDAatomics</h1>
<p>Support for atomic operations in <a href="https://github.com/JuliaGPU/CUDAnative.jl">CUDAnative</a> kernels</p>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Usage</h2>
<p>The functions implemented closely follow the functions in the <a href="https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#atomic-functions" rel="nofollow">CUDA C Programming Guide</a>.  All functions and types included in the guide are supported, and function names are the same as in the guide except that only lowercase characters are used.</p>
<p>The first element to each function will be a <code>CuDeviceArray</code> (instead of a pointer as in the C guide).  In addition to the arguments to each function in the C guide, two additional optional arguments are provided for each atomic function:</p>
<pre><code>atomicadd(ary, value, [index=1, fieldname=Val(nothing)])
</code></pre>
<p><code>index</code> specifies which element of the array should be atomically updated, and defaults to the first element.  <code>fieldname</code> is a value type used for extending the atomic functions to user-defined types (see below).</p>
<h2><a id="user-content-automatic-type-conversion" class="anchor" aria-hidden="true" href="#automatic-type-conversion"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Automatic type conversion</h2>
<p>When calling an atomic function such that the <code>eltype</code> of the <code>ary</code> does not match the type of <code>value</code>, the <code>value</code> will be automatically converted to the <code>eltype</code> of <code>ary</code> before the atomic operation is performed.  For instance, one might want to use <code>threadIdx().x</code> (which has type <code>Int64</code>) to perform a compare-and-swap with a 32-bit integer.</p>
<h2><a id="user-content-extending-to-user-defined-types" class="anchor" aria-hidden="true" href="#extending-to-user-defined-types"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Extending to user-defined types</h2>
<p>The optional <code>fieldname</code> argument can be used to specify the field to be updated of a user-defined type.  For instance, to extend <code>atomicadd</code> to a dual-number type, one could do</p>
<pre><code>struct DualFloat
    value::Float32
    partial::Float32
end

function CUDAatomics.atomicadd(a::CuDeviceArray{DualFloat, N, A}, b::DualFloat, index=1) where {N,A}
    CUDAatomics.atomicadd(a, b.value, index, Val(:value))
    CUDAatomics.atomicadd(a, b.partial, index, Val(:partial))
end
</code></pre>
</article></div>