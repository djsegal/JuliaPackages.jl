<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p dir="auto"><a href="https://travis-ci.com/FermiQC/Lints" rel="nofollow"><img src="https://camo.githubusercontent.com/5c81a51f17fbc3f01c1f5d1b5d6011c2e0a88941687360c1418080eebb036c64/68747470733a2f2f7472617669732d63692e636f6d2f4665726d6951432f4c696e74732e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/FermiQC/Lints.svg?branch=master" style="max-width: 100%;"></a>
<a href="https://coveralls.io/github/FermiQC/Lints?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/9d7b3d115f5d82443fd308cd717833334cd9722de844c3a3f090aa251ee73c33/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f4665726d6951432f4c696e74732f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/FermiQC/Lints/badge.svg?branch=master" style="max-width: 100%;"></a></p>
<h1 dir="auto"><a id="user-content-the-julia-interface-to-libint2" class="anchor" aria-hidden="true" href="#the-julia-interface-to-libint2"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>The Julia Interface to Libint2</h1>
<p dir="auto">Lints.jl provides an interface to the Libint2 molecular integral generation library.</p>
<h2 dir="auto"><a id="user-content-current-limitations" class="anchor" aria-hidden="true" href="#current-limitations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Current Limitations</h2>
<p dir="auto">Only the default Libint library is supported, and is distributed as a binary when Lints is installed. Practically speaking, this means
that nuclear gradients and Hessians are currently unavailable. This is not a technical issue, it just has not yet been required by the
developers. If you want a Libint library with different features, please open an issue and we will take care of it!</p>
<h2 dir="auto"><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example</h2>
<p dir="auto">Example of using Lints to compute overlap integrals for a molecule with the cc-pVDZ basis set.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="using Lints
@lints begin
    mol = Lints.Molecule([8,1,1],[[0.0,0.0,0.0],
                                  [1.0,0.0,0.0],
                                  [0.0,1.0,0.0]])
    bas = Lints.BasisSet(&quot;cc-pVDZ&quot;,mol)
    S = Lints.make_S(bas)
end"><pre class="notranslate"><code>using Lints
@lints begin
    mol = Lints.Molecule([8,1,1],[[0.0,0.0,0.0],
                                  [1.0,0.0,0.0],
                                  [0.0,1.0,0.0]])
    bas = Lints.BasisSet("cc-pVDZ",mol)
    S = Lints.make_S(bas)
end
</code></pre></div>
<p dir="auto">Wrapping the code that uses Lints in <code>@lints begin ... end</code> takes care of initializing and finalizing Libint2 for you.
Technically, only some Lints functions are required to be in an <code>@lints</code> block, but its easiest to remember to just put
all Lints-using code inside of one of these blocks.</p>
<h2 dir="auto"><a id="user-content-integrals-available" class="anchor" aria-hidden="true" href="#integrals-available"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Integrals Available</h2>
<table>
<thead>
<tr>
<th>Integral type</th>
<th>Function signature</th>
</tr>
</thead>
<tbody>
<tr>
<td>Overlap</td>
<td><code>make_S(basis::BasisSet)</code></td>
</tr>
<tr>
<td>Kinetic</td>
<td><code>make_T(basis::BasisSet)</code></td>
</tr>
<tr>
<td>Nuclear Attraction</td>
<td><code>make_V(basis::BasisSet)</code></td>
</tr>
<tr>
<td>4 center ERI (mn|rs)</td>
<td><code>make_ERI4(basis::BasisSet)</code></td>
</tr>
<tr>
<td>3-center ERI (Q|mn)</td>
<td><code>make_ERI3(basis::BasisSet,dfbasis::BasisSet)</code></td>
</tr>
<tr>
<td>2-center ERI (P|Q)</td>
<td><code>make_ERI2(basis::BasisSet)</code></td>
</tr>
</tbody>
</table>
</article></div>