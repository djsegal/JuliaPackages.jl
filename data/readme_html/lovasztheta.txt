<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-lovaszthetajl---lovasz-theta-function-and-theta-body-for-graphs" class="anchor" aria-hidden="true" href="#lovaszthetajl---lovasz-theta-function-and-theta-body-for-graphs"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>LovaszTheta.jl - Lovasz theta function and theta body for graphs</h1>
<p dir="auto">LovaszTheta.jl provides functions for computing the Lovasz θ, Schrijver θ⁻, and Szegedy θ⁺
functions of a graph.  These provide upper bounds on the independence number of a graph and lower
bounds on the chromatic number of the complement graph.  They are homomorphism monotones, and
so can be used to provide necessary conditions on the existence of a homomorphism between a
pair of graphs.</p>
<p dir="auto">Variations of these functions are available which accept a vector of vertex weights.  The
theta body is available as a semidefinite programming subroutine - it is possible to
constrain a Convex.jl variable to be within the theta body.</p>
<p dir="auto">Full documentation is <a href="https://dstahlke.github.io/LovaszTheta.jl" rel="nofollow">here</a>.</p>
<h2 dir="auto"><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Examples</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Graphs, LovaszTheta
@assert abs(θ(cycle_graph(5)) - √5) &lt; 1e-7"><pre><span class="pl-k">using</span> Graphs, LovaszTheta
<span class="pl-c1">@assert</span> <span class="pl-c1">abs</span>(<span class="pl-c1">θ</span>(<span class="pl-c1">cycle_graph</span>(<span class="pl-c1">5</span>)) <span class="pl-k">-</span> <span class="pl-k">√</span><span class="pl-c1">5</span>) <span class="pl-k">&lt;</span> <span class="pl-c1">1e-7</span></pre></div>
<p dir="auto">Test that <code>max{sum(w) | w ∈ TH(g)} = θ(g)</code>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Graphs, LovaszTheta, Convex, SCS
g = erdos_renyi(20, 0.5);
w = Variable(nv(g));
problem = maximize(sum(w), [w ∈ TH(g)]);
solve!(problem, () -&gt; SCS.Optimizer(verbose=0, eps=1e-8))
@assert abs(problem.optval - θ(g)) &lt; 1e-7"><pre><span class="pl-k">using</span> Graphs, LovaszTheta, Convex, SCS
g <span class="pl-k">=</span> <span class="pl-c1">erdos_renyi</span>(<span class="pl-c1">20</span>, <span class="pl-c1">0.5</span>);
w <span class="pl-k">=</span> <span class="pl-c1">Variable</span>(<span class="pl-c1">nv</span>(g));
problem <span class="pl-k">=</span> <span class="pl-c1">maximize</span>(<span class="pl-c1">sum</span>(w), [w <span class="pl-k">∈</span> <span class="pl-c1">TH</span>(g)]);
<span class="pl-c1">solve!</span>(problem, () <span class="pl-k">-&gt;</span> SCS<span class="pl-k">.</span><span class="pl-c1">Optimizer</span>(verbose<span class="pl-k">=</span><span class="pl-c1">0</span>, eps<span class="pl-k">=</span><span class="pl-c1">1e-8</span>))
<span class="pl-c1">@assert</span> <span class="pl-c1">abs</span>(problem<span class="pl-k">.</span>optval <span class="pl-k">-</span> <span class="pl-c1">θ</span>(g)) <span class="pl-k">&lt;</span> <span class="pl-c1">1e-7</span></pre></div>
<p dir="auto">Test entropy splitting
(<a href="https://link.springer.com/article/10.1007/BF02122693" rel="nofollow">Entropy splitting for antiblocking corners and perfect graphs</a>).</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Graphs, LovaszTheta, Convex, SCS

function corner_entropy(p, corner)
    w = Variable(nv(g))
    problem = minimize(-p' * log(w), [w ∈ corner])
    solve!(problem, () -&gt; SCS.Optimizer(verbose=0, eps=1e-8))
    return problem.optval
end

g = erdos_renyi(20, 0.5)
p = normalize(rand(nv(g)), 1)
ent = -p'*log.(p)
ce1 = corner_entropy(p, TH(g))
ce2 = corner_entropy(p, TH(complement(g)))
@assert abs(ent - (ce1 + ce2)) &lt; 1e-7"><pre><span class="pl-k">using</span> Graphs, LovaszTheta, Convex, SCS

<span class="pl-k">function</span> <span class="pl-en">corner_entropy</span>(p, corner)
    w <span class="pl-k">=</span> <span class="pl-c1">Variable</span>(<span class="pl-c1">nv</span>(g))
    problem <span class="pl-k">=</span> <span class="pl-c1">minimize</span>(<span class="pl-k">-</span>p<span class="pl-k">'</span> <span class="pl-k">*</span> <span class="pl-c1">log</span>(w), [w <span class="pl-k">∈</span> corner])
    <span class="pl-c1">solve!</span>(problem, () <span class="pl-k">-&gt;</span> SCS<span class="pl-k">.</span><span class="pl-c1">Optimizer</span>(verbose<span class="pl-k">=</span><span class="pl-c1">0</span>, eps<span class="pl-k">=</span><span class="pl-c1">1e-8</span>))
    <span class="pl-k">return</span> problem<span class="pl-k">.</span>optval
<span class="pl-k">end</span>

g <span class="pl-k">=</span> <span class="pl-c1">erdos_renyi</span>(<span class="pl-c1">20</span>, <span class="pl-c1">0.5</span>)
p <span class="pl-k">=</span> <span class="pl-c1">normalize</span>(<span class="pl-c1">rand</span>(<span class="pl-c1">nv</span>(g)), <span class="pl-c1">1</span>)
ent <span class="pl-k">=</span> <span class="pl-k">-</span>p<span class="pl-k">'</span><span class="pl-k">*</span><span class="pl-c1">log</span>.(p)
ce1 <span class="pl-k">=</span> <span class="pl-c1">corner_entropy</span>(p, <span class="pl-c1">TH</span>(g))
ce2 <span class="pl-k">=</span> <span class="pl-c1">corner_entropy</span>(p, <span class="pl-c1">TH</span>(<span class="pl-c1">complement</span>(g)))
<span class="pl-c1">@assert</span> <span class="pl-c1">abs</span>(ent <span class="pl-k">-</span> (ce1 <span class="pl-k">+</span> ce2)) <span class="pl-k">&lt;</span> <span class="pl-c1">1e-7</span></pre></div>
<p dir="auto">More examples can be found in the unit tests.</p>
</article></div>