<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-quasimontecarlojl" class="anchor" aria-hidden="true" href="#quasimontecarlojl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>QuasiMonteCarlo.jl</h1>
<p><a href="https://travis-ci.org/JuliaDiffEq/QuasiMonteCarlo.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/8a4daa32382816cfe0c7a67d3b60fff5b2778b52/68747470733a2f2f7472617669732d63692e6f72672f4a756c69614469666645712f51756173694d6f6e74654361726c6f2e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaDiffEq/QuasiMonteCarlo.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p>This is a lightweight package for generating Quasi Monte Carlo (QMC) samples
using various different methods.</p>
<h2><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Example</h2>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> QuasiMonteCarlo, Distributions
lb <span class="pl-k">=</span> [<span class="pl-c1">0.1</span>,<span class="pl-k">-</span><span class="pl-c1">0.5</span>]
ub <span class="pl-k">=</span> [<span class="pl-c1">1.0</span>,<span class="pl-c1">20.0</span>]
n <span class="pl-k">=</span> <span class="pl-c1">5</span>
d <span class="pl-k">=</span> <span class="pl-c1">2</span>

s <span class="pl-k">=</span> QuasiMonteCarlo<span class="pl-k">.</span><span class="pl-c1">sample</span>(n,lb,ub,<span class="pl-c1">GridSample</span>([<span class="pl-c1">0.1</span>,<span class="pl-c1">0.5</span>]))
s <span class="pl-k">=</span> QuasiMonteCarlo<span class="pl-k">.</span><span class="pl-c1">sample</span>(n,lb,ub,<span class="pl-c1">UniformSample</span>())
s <span class="pl-k">=</span> QuasiMonteCarlo<span class="pl-k">.</span><span class="pl-c1">sample</span>(n,lb,ub,<span class="pl-c1">SobolSample</span>())
s <span class="pl-k">=</span> QuasiMonteCarlo<span class="pl-k">.</span><span class="pl-c1">sample</span>(n,lb,ub,<span class="pl-c1">LatinHypercubeSample</span>())
s <span class="pl-k">=</span> QuasiMonteCarlo<span class="pl-k">.</span><span class="pl-c1">sample</span>(n,lb,ub,<span class="pl-c1">LowDiscrepancySample</span>([<span class="pl-c1">10</span>,<span class="pl-c1">3</span>]))</pre></div>
<p>The output <code>s</code> is a matrix, so one can use things like <code>@uview</code> from
<a href="https://github.com/oschulz/UnsafeArrays.jl">UnsafeArrays.jl</a> for a stack-allocated
view of the <code>i</code>th point:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> UnsafeArrays
<span class="pl-c1">@uview</span> s[:,i]</pre></div>
<h2><a id="user-content-api" class="anchor" aria-hidden="true" href="#api"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>API</h2>
<p>Everything has the same interface:</p>
<div class="highlight highlight-source-julia"><pre>A <span class="pl-k">=</span> QuasiMonteCarlo<span class="pl-k">.</span><span class="pl-c1">sample</span>(n,lb,ub,sample_method)</pre></div>
<p>where:</p>
<ul>
<li><code>n</code> is the number of points to sample.</li>
<li><code>lb</code> is the lower bound for each variable. The length determines the dimensionality.</li>
<li><code>ub</code> is the upper bound.</li>
<li><code>sample_method</code> is the quasi-Monte Carlo sampling strategy.</li>
</ul>
<p>Additionally there is a helper function for generating design matrices:</p>
<div class="highlight highlight-source-julia"><pre>As <span class="pl-k">=</span> QuasiMonteCarlo<span class="pl-k">.</span><span class="pl-c1">generate_design_matrices</span>(n,lb,ub,sample_method,k<span class="pl-k">=</span><span class="pl-c1">2</span>)</pre></div>
<p>which returns <code>As</code> which is an array of <code>k</code> design matrices <code>A[i]</code> which are
all sampled from the same low discrepancy sequence.</p>
<h2><a id="user-content-available-sampling-methods" class="anchor" aria-hidden="true" href="#available-sampling-methods"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Available Sampling Methods</h2>
<ul>
<li><code>GridSample(dx)</code> where the grid is given by <code>lb:dx[i]:ub</code> in the ith direction.</li>
<li><code>UniformSample</code> for uniformly distributed random numbers.</li>
<li><code>SobolSample</code> for the Sobol sequence.</li>
<li><code>LatinHypercubeSample</code> for a Latin Hypercube.</li>
<li><code>LowDiscrepancySample(base)</code> where <code>base[i]</code> is the base in the ith direction.</li>
<li>Additionally, any <code>Distribution</code> can be used, and it will be sampled from.</li>
</ul>
<h2><a id="user-content-adding-a-new-sampling-method" class="anchor" aria-hidden="true" href="#adding-a-new-sampling-method"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Adding a new sampling method</h2>
<p>Adding a new sampling method is a two step process:</p>
<ol>
<li>Add a new SamplingAlgorithm type</li>
<li>Overload the sample function with the new type.</li>
</ol>
<p><strong>Example</strong></p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">struct</span> NewAmazingSamplingAlgorithm{OPTIONAL} <span class="pl-k">&lt;:</span> <span class="pl-c1">SamplingAlgorithm</span> <span class="pl-k">end</span>

<span class="pl-k">function</span> <span class="pl-en">sample</span>(n,lb,ub,<span class="pl-k">::</span><span class="pl-c1">NewAmazingSamplingAlgorithm</span>)
    <span class="pl-k">if</span> lb is  Number
        <span class="pl-k">...</span>
        <span class="pl-k">return</span> x
    <span class="pl-k">else</span>
        <span class="pl-k">...</span>
        <span class="pl-k">return</span> <span class="pl-c1">Tuple</span>.(x)
    <span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>
</article></div>