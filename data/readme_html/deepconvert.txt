<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-deepconvert" class="anchor" aria-hidden="true" href="#deepconvert"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>DeepConvert</h1>
<p><em>convenient literal construction of values of large data types</em></p>

<p>Linux, OSX: <a href="https://travis-ci.org/jlapeyre/DeepConvert.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/d66c3c3661e2a34165299ec6a257a07d5b744427/68747470733a2f2f7472617669732d63692e6f72672f6a6c6170657972652f44656570436f6e766572742e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/jlapeyre/DeepConvert.jl.svg?branch=master" style="max-width:100%;"></a>
 
Windows: <a href="https://ci.appveyor.com/project/jlapeyre/deepconvert-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/d4b6a0c9008b6b3a3d37384a9f9967316f6e12a5/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f6769746875622f6a6c6170657972652f44656570436f6e766572742e6a6c3f6272616e63683d6d6173746572267376673d74727565" alt="Build Status" data-canonical-src="https://ci.appveyor.com/api/projects/status/github/jlapeyre/DeepConvert.jl?branch=master&amp;svg=true" style="max-width:100%;"></a>
     
<a href="https://coveralls.io/github/jlapeyre/DeepConvert.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/10d0bd38d7bcc40840ec07c84778d13f860d4c9c/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6a6c6170657972652f44656570436f6e766572742e6a6c2f62616467652e7376673f6272616e63683d6d617374657226736572766963653d676974687562" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/jlapeyre/DeepConvert.jl/badge.svg?branch=master&amp;service=github" style="max-width:100%;"></a>
<a href="http://codecov.io/github/jlapeyre/DeepConvert.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/43fedc5d939a71294d4f940e33bec0c99b591686/687474703a2f2f636f6465636f762e696f2f6769746875622f6a6c6170657972652f44656570436f6e766572742e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/jlapeyre/DeepConvert.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
<p>Most of the following is also in this <a href="https://github.com/jlapeyre/DeepConvert.jl/blob/master/Notebooks/DeepConvert.ipynb">Jupyter notebook</a>.</p>
<p>This package provides convenient literal construction of values of
large data types.</p>
<p>It defines macros that define functions to convert all
numbers in an expression to a given numeric type and evaluate that
expression. (Like <code>deepcopy</code>, it traverses the entire expression tree.)
It is meant to allow a convenient way to input large
numbers without overflow.</p>
<p>The macros <code>@bigfloat</code>, <code>@bigint</code>, and <code>@int128</code> convert numeric literals
in their argument to BigFloat, BigInt or Int128. See examples below.</p>
<p>Two examples of non-standard AbstractString literals are exported,
<code>bf</code> and <code>bi</code>, which construct <code>BigFloat</code>s and
<code>BigInt</code>s from strings. Note that these are <em>not</em> the same as the string
literal <code>big</code> in Julia <code>Base</code>.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> BigInt[<span class="pl-c1">2</span><span class="pl-k">^</span><span class="pl-c1">63</span>, <span class="pl-c1">2</span><span class="pl-k">^</span><span class="pl-c1">64</span>]
<span class="pl-c1">2</span><span class="pl-k">-</span>element Array{BigInt,<span class="pl-c1">1</span>}<span class="pl-k">:</span>  <span class="pl-c"><span class="pl-c">#</span> awesome, an array of BigInt's!</span>
 <span class="pl-k">-</span><span class="pl-c1">9223372036854775808</span>
                    <span class="pl-c1">0</span>

julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> DeepConvert
julia<span class="pl-k">&gt;</span> <span class="pl-s"><span class="pl-pds"><span class="pl-c1">bi</span>"</span>[2^63, 2^64]<span class="pl-pds">"</span></span>
<span class="pl-c1">2</span><span class="pl-k">-</span>element Array{BigInt,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
  <span class="pl-c1">9223372036854775808</span>
 <span class="pl-c1">18446744073709551616</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@bigint</span> [<span class="pl-c1">2</span><span class="pl-k">^</span><span class="pl-c1">63</span>, <span class="pl-c1">2</span><span class="pl-k">^</span><span class="pl-c1">64</span>]
<span class="pl-c1">2</span><span class="pl-k">-</span>element Array{BigInt,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
  <span class="pl-c1">9223372036854775808</span>
 <span class="pl-c1">18446744073709551616</span></pre></div>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">binomial</span>(<span class="pl-c1">100</span>, <span class="pl-c1">50</span>)
ERROR<span class="pl-k">:</span> OverflowError<span class="pl-k">:</span> <span class="pl-c1">binomial</span>(<span class="pl-c1">100</span>, <span class="pl-c1">50</span>) overflows

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@int128</span> <span class="pl-c1">binomial</span>(<span class="pl-c1">100</span>, <span class="pl-c1">50</span>)
<span class="pl-c1">100891344545564193334812497256</span></pre></div>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">round</span>(<span class="pl-s"><span class="pl-pds"><span class="pl-c1">bf</span>"</span>((1 + 2e-50) - (1 + 1e-50)) / (1e-50)<span class="pl-pds">"</span></span>)
<span class="pl-c1">1.0</span></pre></div>
<p><code>deepbigfloat</code> takes an expression or string as an argument and acts on literals</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> a <span class="pl-k">=</span> <span class="pl-c1">parse</span>(<span class="pl-s"><span class="pl-pds">"</span>1 + 1<span class="pl-pds">"</span></span>)
:(<span class="pl-c1">1</span> <span class="pl-k">+</span> <span class="pl-c1">1</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">deepbigfloat</span>(a)
<span class="pl-c1">2e+00</span> with <span class="pl-c1">256</span> bits of precision

julia<span class="pl-k">&gt;</span> <span class="pl-c1">deepbigfloat</span>(<span class="pl-s"><span class="pl-pds">"</span>1 + 1<span class="pl-pds">"</span></span>)
<span class="pl-c1">2e+00</span> with <span class="pl-c1">256</span> bits of precision</pre></div>
<h2><a id="user-content-mkdeepconvertfuncname-convfunc" class="anchor" aria-hidden="true" href="#mkdeepconvertfuncname-convfunc"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>@mkdeepconvert(funcname, convfunc)</h2>
<h3><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Example</h3>
<p>Define a function that converts <code>Real</code>s in an expression
to Int128</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> DeepConvert

julia<span class="pl-k">&gt;</span> <span class="pl-c1">Int128</span>(<span class="pl-c1">2</span> <span class="pl-k">*</span> (<span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">19</span> <span class="pl-k">+</span> <span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">17</span>))  <span class="pl-c"><span class="pl-c">#</span> does not do what you want</span>
<span class="pl-c1">1753255926290448384</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@mkdeepconvert</span>(convint128, Int128)
convint128 (generic <span class="pl-k">function</span> with <span class="pl-c1">3</span> methods)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">convint128</span>(:( <span class="pl-c1">2</span> <span class="pl-k">*</span> (<span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">19</span> <span class="pl-k">+</span> <span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">17</span>) )) <span class="pl-c"><span class="pl-c">#</span> does what you want</span>
<span class="pl-c1">20200000000000000000</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">convint128</span>(<span class="pl-s"><span class="pl-pds">"</span>2 * (10^19 + 10^17)<span class="pl-pds">"</span></span>)  <span class="pl-c"><span class="pl-c">#</span> can use double quotes, as well</span>
<span class="pl-c1">20200000000000000000</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@mkdeepconvert</span>(convuint64, UInt64)
convuint64 (generic <span class="pl-k">function</span> with <span class="pl-c1">3</span> methods)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">convuint64</span>(<span class="pl-s"><span class="pl-pds">"</span>10^19 + 10^17<span class="pl-pds">"</span></span>)
<span class="pl-c1">0x8c2a687ce7720000</span></pre></div>
<h2><a id="user-content-bi-bf-non-standard-abstractstring-literals" class="anchor" aria-hidden="true" href="#bi-bf-non-standard-abstractstring-literals"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>bi, bf non-standard AbstractString literals</h2>
<p><code>bi</code> is implemented by</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">@mkdeepconvert</span>(deepbigint, BigInt)
<span class="pl-k">macro</span> <span class="pl-en">bi_str</span>(s) <span class="pl-c1">deepbigint</span>(s) <span class="pl-k">end</span></pre></div>
<h2><a id="user-content-bigint-int128" class="anchor" aria-hidden="true" href="#bigint-int128"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>@bigint, @int128</h2>
<p>Any Int and Int128 values in the expression following <code>@bigint</code> are converted to <code>BigInt</code>. A contrived
example:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">@bigint</span> <span class="pl-k">function</span> <span class="pl-en">g</span>(x)
           <span class="pl-k">return</span> <span class="pl-c1">2</span><span class="pl-k">^</span><span class="pl-c1">64</span> <span class="pl-k">*</span> x
        <span class="pl-k">end</span></pre></div>
<p>Gives this,</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">g</span>(<span class="pl-c1">2.0</span>)
<span class="pl-c1">3.6893488147419103232e+19</span></pre></div>
<p>To override the macro, you have to ask for the smaller type,</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">@bigint</span> <span class="pl-k">function</span> <span class="pl-en">g</span>(x)
           <span class="pl-k">return</span> <span class="pl-c1">Int</span>(<span class="pl-c1">2</span>)<span class="pl-k">^</span><span class="pl-c1">Int</span>(<span class="pl-c1">64</span>) <span class="pl-k">*</span> x   <span class="pl-c"><span class="pl-c">#</span> always returns zero</span>
        <span class="pl-k">end</span></pre></div>
<p>In effect, this temporarily makes <code>BigInt</code> the default integer type.</p>




</article></div>