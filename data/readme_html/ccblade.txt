<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-ccbladejl" class="anchor" aria-hidden="true" href="#ccbladejl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>CCBlade.jl</h1>
<p><a href="https://flow.byu.edu/CCBlade.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a target="_blank" rel="noopener noreferrer" href="https://github.com/byuflowlab/CCBlade.jl/workflows/Run%20tests/badge.svg"><img src="https://github.com/byuflowlab/CCBlade.jl/workflows/Run%20tests/badge.svg" alt="" style="max-width:100%;"></a></p>
<p><strong>Summary</strong>: A blade element momentum method for propellers and turbines.</p>
<p><strong>Author</strong>: Andrew Ning</p>
<p><strong>Features</strong>:</p>
<ul>
<li>Methodology is provably convergent (see <a href="http://dx.doi.org/10.1002/we.1636" rel="nofollow">http://dx.doi.org/10.1002/we.1636</a> although multiple improvements have been made since then)</li>
<li>Prandtl hub/tip losses (or user-defined losses)</li>
<li>Glauert/Buhl empirical region for high thrust turbines</li>
<li>Convenience functions for inflow with shear, precone, yaw, tilt, and azimuth</li>
<li>Can do airfoil corrections beforehand or on the fly (Mach, Reynolds, rotation)</li>
<li>Allows for flow reversals (negative inflow/rotation velocities)</li>
<li>Allows for a hover condition (only rotation, no inflow) and rotor locked (no rotation, only inflow)</li>
<li>Compatible with AD tools like ForwardDiff</li>
</ul>
<p><strong>Installation</strong>:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="] add CCBlade
"><pre>] add CCBlade</pre></div>
<p><strong>Documentation</strong>:</p>
<p>The <a href="https://flow.byu.edu/CCBlade.jl/stable/" rel="nofollow">documentation</a> contains</p>
<ul>
<li>A quick start tutorial to learn basic usage,</li>
<li>Guided examples to address specific or more advanced tasks,</li>
<li>A reference describing the API,</li>
<li>Theory in full detail.</li>
</ul>
<p><strong>Run Unit Tests</strong>:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="pkg&gt; activate .
pkg&gt; test
"><pre>pkg<span class="pl-k">&gt;</span> activate .
pkg<span class="pl-k">&gt;</span> test</pre></div>
<p><strong>Citing</strong>:</p>
<p>Ning, A., “Using Blade Element Momentum Methods with Gradient-Based Design Optimization,” Apr. 2020, (in review).</p>
<p><strong>Python / OpenMDAO users</strong></p>
<p>In the <code>openmdao</code> folder there is a Python wrapper to this package to enable usage from <a href="https://openmdao.org" rel="nofollow">OpenMDAO</a>.  This wrapper was developed/maintained by Daniel Ingraham and Justin Gray at NASA Glenn.</p>
</article></div>