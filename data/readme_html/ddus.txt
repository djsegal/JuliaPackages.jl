<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-data-driven-uncertainty-sets-ddus" class="anchor" aria-hidden="true" href="#data-driven-uncertainty-sets-ddus"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Data-Driven Uncertainty Sets (DDUS)</h1>
<p><a href="https://travis-ci.org/vgupta1/DDUS.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/886cbee81bf1dd88527a84c9c3bb4353776b2cd0ef20953cfd01d4b68ce1dd0e/68747470733a2f2f7472617669732d63692e6f72672f766775707461312f444455532e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/vgupta1/DDUS.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://coveralls.io/r/vgupta1/DDUS.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/f3eb8fea2c945102373babdd14884ec6ce118248b74811a24569c5560a99c297/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f766775707461312f444455532e6a6c2f62616467652e737667" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/vgupta1/DDUS.jl/badge.svg" style="max-width:100%;"></a></p>
<p>In the spirit of reproducible research, <strong>DDUS.jl</strong> contains implementations of many of the uncertainty sets from the paper</p>
<blockquote>
<p><a href="https://link.springer.com/article/10.1007/s10107-017-1125-8" rel="nofollow">Data-Driven Robust Optimization</a> by D. Bertsimas, V. Gupta and N. Kallus, Mathematical Programming 167.2 (2018): 235-292.</p>
</blockquote>
<p>This paper is available from <a href="https://link.springer.com/article/10.1007/s10107-017-1125-8" rel="nofollow">Mathematical Programming</a> or the <a href="http://www-bcf.usc.edu/~guptavis/research.html" rel="nofollow">Vishal Gupta's website</a>.</p>
<p>Uncertainty sets are implemented as "oracles" for use with <a href="https://github.com/IainNZ/JuMPeR.jl">JuMPeR.jl</a>. Specifically, I have implemented oracles for each of the following sets (Eq. numbers refer to previous paper):</p>
<ul>
<li>UM (Eq. 28)</li>
<li>UI (Eq. 18)</li>
<li>UFB (Eq. 23)</li>
<li>UCS (Eq. 35)</li>
<li>ULCX (Eq. 31)</li>
</ul>
<p>More sets and additional features may be added going forward based on interest.  For the most part, our implementations closely follow the descriptions in the paper.  In a few places, we have opted for simpler, approximate formulae for improved efficiency where I felt the difference in practice was negligible.</p>
<h2><a id="user-content-citation" class="anchor" aria-hidden="true" href="#citation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Citation</h2>
<p>If you find this package useful, please consider citing the above paper as:</p>
<div class="highlight highlight-text-bibtex position-relative" data-snippet-clipboard-copy-content="@article{bertsimas2018data,
  title={Data-driven robust optimization},
  author={Bertsimas, Dimitris and Gupta, Vishal and Kallus, Nathan},
  journal={Mathematical Programming},
  volume={167},
  number={2},
  pages={235--292},
  year={2018},
  publisher={Springer}
}
"><pre><span class="pl-k">@article</span>{<span class="pl-en">bertsimas2018data</span>,
  <span class="pl-s">title</span>=<span class="pl-s"><span class="pl-pds">{</span>Data-driven robust optimization<span class="pl-pds">}</span></span>,
  <span class="pl-s">author</span>=<span class="pl-s"><span class="pl-pds">{</span>Bertsimas, Dimitris and Gupta, Vishal and Kallus, Nathan<span class="pl-pds">}</span></span>,
  <span class="pl-s">journal</span>=<span class="pl-s"><span class="pl-pds">{</span>Mathematical Programming<span class="pl-pds">}</span></span>,
  <span class="pl-s">volume</span>=<span class="pl-s"><span class="pl-pds">{</span>167<span class="pl-pds">}</span></span>,
  <span class="pl-s">number</span>=<span class="pl-s"><span class="pl-pds">{</span>2<span class="pl-pds">}</span></span>,
  <span class="pl-s">pages</span>=<span class="pl-s"><span class="pl-pds">{</span>235--292<span class="pl-pds">}</span></span>,
  <span class="pl-s">year</span>=<span class="pl-s"><span class="pl-pds">{</span>2018<span class="pl-pds">}</span></span>,
  <span class="pl-s">publisher</span>=<span class="pl-s"><span class="pl-pds">{</span>Springer<span class="pl-pds">}</span></span>
}</pre></div>
<h2><a id="user-content-licensing" class="anchor" aria-hidden="true" href="#licensing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Licensing</h2>
<p>This code is available under the MIT License.<br>
Copyright (c) 2016 Vishal Gupta</p>
<p>Also, if you use any portion of the software, I'd appreciate a quick note telling me the application.  As an academic, I like hearing about when my work is used and when it (hopefully) has impact.</p>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<p>All our sets support JuMPeR's cutting plane functionality, but do not provide reformulations. Reformulation may be supported in the future based on need.  A typical invocation might be:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using JuMPeR, DDUSets
dd_oracle = UCSOracle(data, epsilon, alpha)

m = RobustModel()
# ... Build up the model #

setDefaultOracle!(m, dd_oracle)  # to uses this oracle for all constraints
"><pre><span class="pl-k">using</span> JuMPeR, DDUSets
dd_oracle <span class="pl-k">=</span> <span class="pl-c1">UCSOracle</span>(data, epsilon, alpha)

m <span class="pl-k">=</span> <span class="pl-c1">RobustModel</span>()
<span class="pl-c"><span class="pl-c">#</span> ... Build up the model #</span>

<span class="pl-c1">setDefaultOracle!</span>(m, dd_oracle)  <span class="pl-c"><span class="pl-c">#</span> to uses this oracle for all constraints</span></pre></div>
<p>or</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="addConstraint(m, x[1] * us[1] + xs[2] * us[2] &lt;= 5, dd_oracle)  #only for this one constraint
"><pre><span class="pl-c1">addConstraint</span>(m, x[<span class="pl-c1">1</span>] <span class="pl-k">*</span> us[<span class="pl-c1">1</span>] <span class="pl-k">+</span> xs[<span class="pl-c1">2</span>] <span class="pl-k">*</span> us[<span class="pl-c1">2</span>] <span class="pl-k">&lt;=</span> <span class="pl-c1">5</span>, dd_oracle)  <span class="pl-c"><span class="pl-c">#</span>only for this one constraint</span></pre></div>
<p>Most oracles support a simple constructor as above, taking in the data and two parameters, <code>epsilon</code> and <code>alpha</code>.  Some oracles require additional information, such as the support of the uncertainty. (When in doubt, check the source file for the interface marked "preferred interface.")</p>
<p>All oracles assume that the data are given with each example in a row, and each column representing one component of the uncertainty.  <strong>The ordering of the columns is important</strong> and is assumed to correspond to the index of the uncertainties in the optimization model.  (That is, u[1] is the uncertainty whose data is given by column 1.)  The parameters epsilon and alpha are described in detail the above paper, and roughly control the probability of infeasibility and the decision maker's tolerance for ambiguity, respectively.  See also below on tuning these parameters.</p>
<p>Although fairly robust (<em>punny</em>), the preferred constructors for oracles can sometimes be slow because they perform all of the data analysis required to construct the set.  When possible, one can reuse the same oracle for multiple constraints.  When solving different optimization problems in a loop, one can also used the specialized constructors for the oracles to customize the data analysis step.  (See the comments in the source code.)</p>
<h2><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Examples</h2>
<p>The examples folder contains a simple portfolio allocation demonstrating typical usage of the sets.</p>
<h2><a id="user-content-choosing-the-right-set-and-tuning-epsilon-and-alpha-in-practice" class="anchor" aria-hidden="true" href="#choosing-the-right-set-and-tuning-epsilon-and-alpha-in-practice"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Choosing the "Right" set and Tuning Epsilon and Alpha in Practice</h2>
<p>The cited paper proves that under certain conditions, each of the above sets satisfy a strong probabilistic guarantee.  In applications where it is important to have a provable guarantee on feasibility, those results can help guide the choice of set.</p>
<p>Many applications, however, do not require provably good performance, just <em>practically</em> good performance.  In these cases, we suggest following the suggestions in Section 10 of the paper, and choosing the set, epsilon and alpha via cross-validation.  Some generic functionality to do this will (hopefully) be added soon.  In the meantime, ????? in the examples folder illustrates one possible cross-validation scheme for a particular example.</p>
</article></div>