<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-diffoptjl" class="anchor" aria-hidden="true" href="#diffoptjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>DiffOpt.jl</h1>
<p><a href="https://jump.dev/DiffOpt.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://jump.dev/DiffOpt.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a>
<a href="https://github.com/jump-dev/DiffOpt.jl/actions"><img src="https://github.com/jump-dev/DiffOpt.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/jump-dev/DiffOpt.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/c14acfd25457c632eadfc8f8f0d9b91cd1f37068c05ed86b4decc7245edb6a87/68747470733a2f2f636f6465636f762e696f2f67682f6a756d702d6465762f446966664f70742e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/jump-dev/DiffOpt.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p>Differentiating convex optimization program (<code>JuMP.jl</code> or <code>MathOptInterface.jl</code> models) with respect to program parameters. Currently supports LPs, QPs.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>DiffOpt can be installed through the Julia package manager:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="(v1.3) pkg&gt; add https://github.com/jump-dev/DiffOpt.jl
"><pre><code>(v1.3) pkg&gt; add https://github.com/jump-dev/DiffOpt.jl
</code></pre></div>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<p>Create a differentiable model from
<a href="https://www.juliaopt.org/JuMP.jl/stable/installation/" rel="nofollow">existing optimizers</a>:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using DiffOpt
using GLPK
using MathOptInterface
const MOI = MathOptInterface

diff = diff_optimizer(GLPK.Optimizer)
"><pre><span class="pl-k">using</span> DiffOpt
<span class="pl-k">using</span> GLPK
<span class="pl-k">using</span> MathOptInterface
<span class="pl-k">const</span> MOI <span class="pl-k">=</span> MathOptInterface

diff <span class="pl-k">=</span> <span class="pl-c1">diff_optimizer</span>(GLPK<span class="pl-k">.</span>Optimizer)</pre></div>
<p>Update and solve the model:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="x = MOI.add_variables(diff, 2)
c = MOI.add_constraint(diff, ...)

MOI.optimize!(diff)
"><pre>x <span class="pl-k">=</span> MOI<span class="pl-k">.</span><span class="pl-c1">add_variables</span>(diff, <span class="pl-c1">2</span>)
c <span class="pl-k">=</span> MOI<span class="pl-k">.</span><span class="pl-c1">add_constraint</span>(diff, <span class="pl-k">...</span>)

MOI<span class="pl-k">.</span><span class="pl-c1">optimize!</span>(diff)</pre></div>
<p>Finally, differentiate the model (primal and dual variables specifically) to
obtain product of jacobians with respect to problem parameters and a backward
pass vector.</p>
<p>Currently, DiffOpt supports two backends. If the optimization problem is of quadratic form i.e.</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="minimize_z z^T Q z / 2 + q^T z
subject to: Az = b,
            Gz ≤ h
"><pre><code>minimize_z z^T Q z / 2 + q^T z
subject to: Az = b,
            Gz ≤ h
</code></pre></div>
<p>then one can compute gradients by providing a backward pass vector</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="bpv = [1.0, 1.0]
grads = backward(diff, [&quot;Q&quot;, &quot;q&quot;, &quot;h&quot;], bpv)
"><pre>bpv <span class="pl-k">=</span> [<span class="pl-c1">1.0</span>, <span class="pl-c1">1.0</span>]
grads <span class="pl-k">=</span> <span class="pl-c1">backward</span>(diff, [<span class="pl-s"><span class="pl-pds">"</span>Q<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>q<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>h<span class="pl-pds">"</span></span>], bpv)</pre></div>
<p>Secondly, for a conic problem of the format:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="minimize_x c^T x
subject to: Ax + b in K
"><pre><code>minimize_x c^T x
subject to: Ax + b in K
</code></pre></div>
<p>where</p>
<ul>
<li>the objective is linear</li>
<li><code>K</code> is a Cartesian product of linear, semidefinite, second-order cones
then one can compute gradients by providing perturbations</li>
</ul>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="grads = backward(diff, dA, db, dc)
"><pre>grads <span class="pl-k">=</span> <span class="pl-c1">backward</span>(diff, dA, db, dc)</pre></div>
<h2><a id="user-content-note" class="anchor" aria-hidden="true" href="#note"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Note</h2>
<ul>
<li>This is a <a href="https://summerofcode.withgoogle.com/organizations/4727917315096576/?sp-page=2#5232064888045568" rel="nofollow">NumFOCUS Google Summer of Code (2020) project</a></li>
<li>Benchmarking with CVXPY or QPTH: Refer relevant examples as in <a href="https://github.com/jump-dev/DiffOpt.jl/blob/master/test/MOI_wrapper.jl#L130">test/MOI_wrapper.jl</a></li>
</ul>
</article></div>