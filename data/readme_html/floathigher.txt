<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-floathigherjl" class="anchor" aria-hidden="true" href="#floathigherjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>FloatHigher.jl</h1>
<p>accurate floating point math at extended precisions</p>
<div class="highlight highlight-source-ruby"><pre>        <span class="pl-c1">Jeffrey</span> <span class="pl-c1">A</span>. <span class="pl-c1">Sarnoff</span>                           <span class="pl-c1">2015</span><span class="pl-k">-</span><span class="pl-c1">Dec</span><span class="pl-k">-</span><span class="pl-c1">30</span> <span class="pl-c1">03</span>:<span class="pl-c1">21</span>:<span class="pl-c1">21</span> <span class="pl-c1">UTC</span> <span class="pl-c1">America</span><span class="pl-k">/</span><span class="pl-c1">New_York</span>
                                                     <span class="pl-c1">2015</span><span class="pl-k">-</span><span class="pl-c1">Dec</span><span class="pl-k">-</span><span class="pl-c1">31</span> <span class="pl-c1">06</span>:<span class="pl-c1">00</span>:<span class="pl-c1">00</span> <span class="pl-c1">UTC</span> (multityped ops)
                                                     <span class="pl-c1">2016</span><span class="pl-k">-</span><span class="pl-c1">Jan</span><span class="pl-k">-</span><span class="pl-c1">03</span> <span class="pl-c1">21</span>:<span class="pl-c1">21</span>:<span class="pl-c1">21</span> <span class="pl-c1">UTC</span> (<span class="pl-c1">DigitsNN</span> renamed)</pre></div>
<p><em><strong>+</strong></em><br>
Calculations are substantially faster than BigFloat.<br>
Accuracy more consistently tracks displayed precision than BigFloat.</p>
<p><em><strong>-</strong></em><br>
Pulls in all of Nemo to use some of Arb.<br>
Does not implement some math functions and other operators available with Float64.</p>
<p><em>★</em><br>
Fredrik Johannson has written 2015's best intermediate precision floating point math software. The right next step would be to study William Hart's Julia interface and make Arb's Real and Complex number support directly available in Julia. Matching missing operators and smoothly adding in his other math functions is straightforward.  Julia would loose BigFloat <em>issues</em> working at precisions up through 10,000 decimal digits,
and gain speed and provide more transparent accuracy when working with extended precision real/complex floats.</p>
<p>###<strong>∵</strong><br>
This is as far as I am comfortable taking Julia's search for a first class Float128 implementation.<br>
                          .. with the hope this will have helped ..</p>
<hr>
<p>=====</p>
<p>Digits30, Digits70, Digits140, or Digits300 are selected before 'using' this module<br>
( or, in separate modules: DIGITS30.jl, DIGITS70.jl, DIGITS140.jl, DIGITS300.jl ).<br>
When none are explicitly selected, Digits30 is used.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> FloatHigher
julia<span class="pl-k">&gt;</span> a<span class="pl-k">=</span><span class="pl-c1">Digits30</span>(<span class="pl-c1">2</span>);sqrt2<span class="pl-k">=</span><span class="pl-c1">sqrt</span>(a)
<span class="pl-c1">1.41421356237309504880168872421</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">showball</span>(sqrt2)
[<span class="pl-c1">1.4142135623730950488016887242096980786</span> <span class="pl-k">+/-</span> <span class="pl-c1">4.87e-38</span>]
<span class="pl-c1">quit</span>()

UseDigits70<span class="pl-k">=</span><span class="pl-c1">true</span>
<span class="pl-k">using</span> FloatHigher
julia<span class="pl-k">&gt;</span> a<span class="pl-k">=</span><span class="pl-c1">Digits70</span>(<span class="pl-c1">2</span>);sqrt2<span class="pl-k">=</span><span class="pl-c1">sqrt</span>(a)
<span class="pl-c1">1.414213562373095048801688724209698078569671875376948073176679737990732</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">showball</span>(sqrt2)
 <span class="pl-c1">showball</span>(sqrt2)
[<span class="pl-c1">1.4142135623730950488016887242096980785696718753769480731766797379907324784621</span> <span class="pl-k">+/-</span> <span class="pl-c1">4.99e-77</span>]
<span class="pl-c1">quit</span>()

UseDigits140<span class="pl-k">=</span><span class="pl-c1">true</span>
<span class="pl-k">using</span> FloatHigher
julia<span class="pl-k">&gt;</span> a<span class="pl-k">=</span><span class="pl-c1">Digits140</span>(<span class="pl-c1">0.5</span>);<span class="pl-c1">println</span>(<span class="pl-c1">exp</span>(a));a<span class="pl-k">-</span><span class="pl-c1">log</span>(<span class="pl-c1">exp</span>(a))
<span class="pl-c1">1.648721270700128146848650787814163571653776100710148011575079311640661</span>
 <span class="pl-c1">0211942140244768312883565706777193388588425688402538063164289228771285</span>
<span class="pl-c1">0</span>

UseDigits300<span class="pl-k">=</span><span class="pl-c1">true</span>
<span class="pl-k">using</span> FloatHigher
julia<span class="pl-k">&gt;</span> <span class="pl-c1">asin</span>(<span class="pl-c1">Digits300</span>(<span class="pl-c1">0.5</span>))<span class="pl-k">*</span><span class="pl-c1">6</span>
<span class="pl-c1">3.141592653589793238462643383279502884197169399375105820974944592307816</span>
 <span class="pl-c1">4062861980294536250318213496466758841295330717990647287577300387921745</span>
 <span class="pl-c1">5543798124334760862857823598496915024953863910429488250583465990554483</span>
 <span class="pl-c1">29813888808104138661292381584644317626953125</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">showball</span>(ans)
[<span class="pl-c1">3.141592653589793238462643383279502884197169399375105820974944592307816</span>
  <span class="pl-c1">4062862089986280348253421170679821480865132823066470938446095505822317</span>
  <span class="pl-c1">2535940812848111745028410270193852110555964462294895493038196442881097</span>
  <span class="pl-c1">5665933446128475648233786783165271201909145648566923460348610454326648</span>
  <span class="pl-c1">213393607260249141273724587</span> <span class="pl-k">+/-</span> <span class="pl-c1">2.53e-307</span>]

  
 
</pre></div>
<p>Digits30, Digits70, Digits140, Digits300 can be used together.<br>
Intertype promotion defers to the smaller type (otherwise the result could become quite inaccurate invisibly):</p>
<div class="highlight highlight-source-julia"><pre>UseDigits70<span class="pl-k">=</span><span class="pl-c1">true</span>
UseDigits300<span class="pl-k">=</span><span class="pl-c1">true</span>
<span class="pl-k">using</span> FloatHigher

a<span class="pl-k">=</span><span class="pl-c1">sqrt</span>(<span class="pl-c1">Digits70</span>(<span class="pl-c1">256</span>))
<span class="pl-c1">16</span>
b<span class="pl-k">=</span><span class="pl-c1">sqrt</span>(<span class="pl-c1">Digits300</span>(<span class="pl-c1">1024</span>))
<span class="pl-c1">32</span>
c<span class="pl-k">=</span>a<span class="pl-k">+</span>b; c, <span class="pl-c1">typeof</span>(c)
<span class="pl-c1">48</span>, Digits70
</pre></div>
<hr>
<p>This relies <em>entirely</em> on Fredrik Johansson's Arb software, which is included with William Hart's Nemo package.<br>
The Arb documentation is at <a href="http://fredrikj.net/arb/" rel="nofollow">http://fredrikj.net/arb/</a>.  The documentation for Nemo is at <a href="http://nemocas.org" rel="nofollow">http://nemocas.org</a>.<br>
You will see Nemo's welcome message.  <em>Nemo is required unless Arb is separately available to Julia.</em></p>
</article></div>