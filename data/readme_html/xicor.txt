<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-xicorjl" class="anchor" aria-hidden="true" href="#xicorjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Xicor.jl</h1>
<p dir="auto">An implementation of the Xi Correlation coefficient and hypothesis test as originally described by <a href="https://doi.org/10.1080/01621459.2020.1758115" rel="nofollow">Chatterjee (2021)</a>. The implementation is based on the XICOR CRAN package by <a href="https://cran.r-project.org/web/packages/XICOR/index.html" rel="nofollow">Chatterjee and Holmes</a>.</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">Xicor.jl is available from the Julia registry, you can install it locally from your Julia REPL by typing:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="] add Xicor"><pre>] add Xicor</pre></div>
<h2 dir="auto"><a id="user-content-running" class="anchor" aria-hidden="true" href="#running"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Running</h2>
<p dir="auto">Xicor.jl allows to eaily calculate the Xi correlation coefficient between two vectors <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="bcca414bf150e65bd197bcd085a29550">$X$</math-renderer> and <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="bcca414bf150e65bd197bcd085a29550">$Y$</math-renderer>.</p>
<h3 dir="auto">
<a id="user-content-calculating-xi-correlation" class="anchor" aria-hidden="true" href="#calculating-xi-correlation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Calculating Xi correlation</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="xvec = rand(100)
yvec = rand(100)
xicor(xvec, yvec)"><pre>xvec <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">100</span>)
yvec <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">100</span>)
<span class="pl-c1">xicor</span>(xvec, yvec)</pre></div>
<h3 dir="auto">
<a id="user-content-dependence-testing" class="anchor" aria-hidden="true" href="#dependence-testing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Dependence testing</h3>
<p dir="auto">Aside retrieving a correlation coefficient, Xicor.jl also allows to test for dependence between two vectors <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="bcca414bf150e65bd197bcd085a29550">$X$</math-renderer> and <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="bcca414bf150e65bd197bcd085a29550">$Y$</math-renderer>. This is possible by using the <code>xicor</code> fucntion with the keyword argument 'pvalue' set to <code>true</code>. The function will then return a tuple of the Xi correlation coefficient, the standard deviation, and the associated p-value.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="xicor(xvec, yvec; pvalue=true, method=&quot;asymptotic&quot;)"><pre><span class="pl-c1">xicor</span>(xvec, yvec; pvalue<span class="pl-k">=</span><span class="pl-c1">true</span>, method<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>asymptotic<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">The <code>method</code> keyword argument allows to choose between an asymptotic approximation test and a Monte Carlo permutation
test. The asymptotic approximation test is based on the asymptotic normal distribution of the Xi correlation coefficient. The Monte Carlo permutation test is based on the permutation distribution of the Xi correlation coefficient. The Monte Carlo permutation test also uses a keyword argument <code>nperm</code> to specify the number of permutations to be used. The default value is 1000.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="xicor(xvec, yvec; pvalue=true, method=&quot;permutation&quot;, nperm=1000)"><pre><span class="pl-c1">xicor</span>(xvec, yvec; pvalue<span class="pl-k">=</span><span class="pl-c1">true</span>, method<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>permutation<span class="pl-pds">"</span></span>, nperm<span class="pl-k">=</span><span class="pl-c1">1000</span>)</pre></div>
<h2 dir="auto">
<a id="user-content-application" class="anchor" aria-hidden="true" href="#application"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Application</h2>
<p dir="auto">Due to the asymmetry of the Xi correlation coefficient, it finds an interesting application in the inference of directionality of cause-effect relationships. To test its strengths in this endeavor, we apply the coefficient on the <a href="https://webdav.tuebingen.mpg.de/cause-effect/" rel="nofollow">Tuebingen cause-effect pairs database</a> described in <a href="http://jmlr.org/papers/v17/14-518.html" rel="nofollow">Mooij <em>et al.</em> (2017)</a>. The data can be downloaded from
<a href="https://webdav.tuebingen.mpg.de/cause-effect/pairs.zip" rel="nofollow">https://webdav.tuebingen.mpg.de/cause-effect/pairs.zip</a>, and consists of a
number of txt files, each containing a list of cause-effect pairs and
description files containing information about the data sources and the
ground truth direction of the causal relationships.</p>
<p dir="auto">We test it here on the first pair file, which contains data from the German Weather Service on the relationship between temperature and altitude. The data is loaded in and the Xi correlation coefficient is calculated for both directions of the causal relationship. The direction with the higher Xi correlation coefficient is then chosen as the predicted direction of the causal relationship.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="    # load in the data
    pair_values = hcat(
        [parse.(
            Float64, 
            [q for q in split(i, r&quot;\s+&quot;) if q != &quot;&quot;]
            ) for i in split(chomp(readchomp(&quot;./data/pair0001.txt&quot;)), &quot;\n&quot;)
        ]...
        )
    altitudes = pair_values[1, :]
    temperatures = pair_values[2, :]

    # calculate the Xi correlation coefficient for both directions
    using Xicor
    xy_xi, xy_sd, xy_p = xicor(altitudes, temperatures; pvalue=true)
    yx_xi, yx_sd, yx_p = xicor(temperatures, altitudes; pvalue=true)
    predicted_direction = xy_xi &gt; yx_xi ? &quot;Altitude causes temperature&quot; : &quot;Temperature causes altitude&quot;
    println(&quot;Predicted direction: $predicted_direction&quot;)"><pre>    <span class="pl-c"><span class="pl-c">#</span> load in the data</span>
    pair_values <span class="pl-k">=</span> <span class="pl-c1">hcat</span>(
        [<span class="pl-c1">parse</span>.(
            Float64, 
            [q <span class="pl-k">for</span> q <span class="pl-k">in</span> <span class="pl-c1">split</span>(i, <span class="pl-sr"><span class="pl-pds">r"</span><span class="pl-cce">\s</span>+<span class="pl-pds">"</span></span>) <span class="pl-k">if</span> q <span class="pl-k">!=</span> <span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>]
            ) <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">split</span>(<span class="pl-c1">chomp</span>(<span class="pl-c1">readchomp</span>(<span class="pl-s"><span class="pl-pds">"</span>./data/pair0001.txt<span class="pl-pds">"</span></span>)), <span class="pl-s"><span class="pl-pds">"</span><span class="pl-cce">\n</span><span class="pl-pds">"</span></span>)
        ]<span class="pl-k">.</span><span class="pl-k">..</span>
        )
    altitudes <span class="pl-k">=</span> pair_values[<span class="pl-c1">1</span>, :]
    temperatures <span class="pl-k">=</span> pair_values[<span class="pl-c1">2</span>, :]

    <span class="pl-c"><span class="pl-c">#</span> calculate the Xi correlation coefficient for both directions</span>
    <span class="pl-k">using</span> Xicor
    xy_xi, xy_sd, xy_p <span class="pl-k">=</span> <span class="pl-c1">xicor</span>(altitudes, temperatures; pvalue<span class="pl-k">=</span><span class="pl-c1">true</span>)
    yx_xi, yx_sd, yx_p <span class="pl-k">=</span> <span class="pl-c1">xicor</span>(temperatures, altitudes; pvalue<span class="pl-k">=</span><span class="pl-c1">true</span>)
    predicted_direction <span class="pl-k">=</span> xy_xi <span class="pl-k">&gt;</span> yx_xi <span class="pl-k">?</span> <span class="pl-s"><span class="pl-pds">"</span>Altitude causes temperature<span class="pl-pds">"</span></span> <span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>Temperature causes altitude<span class="pl-pds">"</span></span>
    <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>Predicted direction: <span class="pl-v">$predicted_direction</span><span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">And it correctly predicts the direction of the causal relationship in this case.</p>
<p dir="auto">For a deeper exploration of directional inference using Xi correlation, check out the <a href="https://github.com/stefftaelman/Xicor.jl/tree/main/examples/causal_direction_prediction.jl">causal direction prediction example</a>.</p>
</article></div>