<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-monadfunctions" class="anchor" aria-hidden="true" href="#monadfunctions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>MonadFunctions</h1>
<p><a href="https://github.com/tk3369/MonadFunctions.jl/actions?query=workflow%3ACI"><img src="https://github.com/tk3369/MonadFunctions.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width:100%;"></a>
<a href="http://codecov.io/github/tk3369/MonadFunctions.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/f5375ce151b9c7a307540c9b0df3539f920c1eae1515fae0f9a34bb9cbbf9df9/687474703a2f2f636f6465636f762e696f2f6769746875622f746b333336392f4d6f6e616446756e6374696f6e732e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/tk3369/MonadFunctions.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
<p>This is an experimental package with functions that works with the following types of monads:</p>
<ul>
<li>Maybe</li>
<li>Either / Result</li>
<li>List</li>
</ul>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<h3><a id="user-content-maybe" class="anchor" aria-hidden="true" href="#maybe"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Maybe</h3>
<p>The <code>fmap</code> function can map over any Maybe monad (either <code>Just</code> or <code>None</code>).
If the input is wrapped as a <code>Just</code> object, the output is automatically
wrapped as well.  <code>NONE</code> is a singleton constant of <code>None</code>.</p>
<p>Unlike other implementations, a <code>fmap</code>'ed function can also take ordinary values
rather than monads.  It would then apply the function as usual and return
an ordinary result.  So the result is not <em>elevated</em> to a wrapped monad.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="1       |&gt; fmap(x -&gt; x + 1)   # 2
just(1) |&gt; fmap(x -&gt; x + 1)   # Just(2)
NONE    |&gt; fmap(x -&gt; x + 1)   # NONE
"><pre><span class="pl-c1">1</span>       <span class="pl-k">|&gt;</span> <span class="pl-c1">fmap</span>(x <span class="pl-k">-&gt;</span> x <span class="pl-k">+</span> <span class="pl-c1">1</span>)   <span class="pl-c"><span class="pl-c">#</span> 2</span>
<span class="pl-c1">just</span>(<span class="pl-c1">1</span>) <span class="pl-k">|&gt;</span> <span class="pl-c1">fmap</span>(x <span class="pl-k">-&gt;</span> x <span class="pl-k">+</span> <span class="pl-c1">1</span>)   <span class="pl-c"><span class="pl-c">#</span> Just(2)</span>
NONE    <span class="pl-k">|&gt;</span> <span class="pl-c1">fmap</span>(x <span class="pl-k">-&gt;</span> x <span class="pl-k">+</span> <span class="pl-c1">1</span>)   <span class="pl-c"><span class="pl-c">#</span> NONE</span></pre></div>
<p>Use <code>or_else</code> to switch over to a useful value when <code>NONE</code> is encountered.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="1        |&gt; or_else(2)        # 1
just(1)  |&gt; or_else(2)        # Just(1)
NONE     |&gt; or_else(2)        # 2
"><pre><span class="pl-c1">1</span>        <span class="pl-k">|&gt;</span> <span class="pl-c1">or_else</span>(<span class="pl-c1">2</span>)        <span class="pl-c"><span class="pl-c">#</span> 1</span>
<span class="pl-c1">just</span>(<span class="pl-c1">1</span>)  <span class="pl-k">|&gt;</span> <span class="pl-c1">or_else</span>(<span class="pl-c1">2</span>)        <span class="pl-c"><span class="pl-c">#</span> Just(1)</span>
NONE     <span class="pl-k">|&gt;</span> <span class="pl-c1">or_else</span>(<span class="pl-c1">2</span>)        <span class="pl-c"><span class="pl-c">#</span> 2</span></pre></div>
<p>Use <code>cata</code> to execute either left function when the value is nothing or
the right function when the value is something useful.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="1        |&gt; cata(() -&gt; 0, x -&gt; x + 1)     # 2
NONE     |&gt; cata(() -&gt; 0, x -&gt; x + 1)     # 0
"><pre><span class="pl-c1">1</span>        <span class="pl-k">|&gt;</span> <span class="pl-c1">cata</span>(() <span class="pl-k">-&gt;</span> <span class="pl-c1">0</span>, x <span class="pl-k">-&gt;</span> x <span class="pl-k">+</span> <span class="pl-c1">1</span>)     <span class="pl-c"><span class="pl-c">#</span> 2</span>
NONE     <span class="pl-k">|&gt;</span> <span class="pl-c1">cata</span>(() <span class="pl-k">-&gt;</span> <span class="pl-c1">0</span>, x <span class="pl-k">-&gt;</span> x <span class="pl-k">+</span> <span class="pl-c1">1</span>)     <span class="pl-c"><span class="pl-c">#</span> 0</span></pre></div>
<p>It is possible to extend to your own <code>Just</code> and <code>None</code> types by implementing the
<code>MaybeTypeTrait</code>. Note that <code>Nothing</code> is given a <code>IsNone</code> trait by default.</p>
<h3><a id="user-content-either" class="anchor" aria-hidden="true" href="#either"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Either</h3>
<p>The <code>Either</code> type is used to capture either a left or right object. To create an
Either object, simply use the <code>left</code> or <code>right</code> function. Use <code>left_value</code>
or<code>right_value</code> to extract the wrapped value. Use <code>is_left</code> or <code>is_right</code> to
check if an object is left or right. There is no discrimination which way is
better.</p>
<p>A special case of <code>Either</code> is <code>Result</code>, which is used for exception handling.
Use the <code>result</code> constructor to create a <code>Result</code> object. By default, any
subtypes of <code>ErrorException</code> are considered left. Everything else is considered
right.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; result(1)
MonadResult_Value(1)

julia&gt; result(ArgumentError(&quot;bad input&quot;))
MonadResult_Error(ArgumentError(&quot;bad input&quot;))
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">result</span>(<span class="pl-c1">1</span>)
<span class="pl-c1">MonadResult_Value</span>(<span class="pl-c1">1</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">result</span>(<span class="pl-c1">ArgumentError</span>(<span class="pl-s"><span class="pl-pds">"</span>bad input<span class="pl-pds">"</span></span>))
<span class="pl-c1">MonadResult_Error</span>(<span class="pl-c1">ArgumentError</span>(<span class="pl-s"><span class="pl-pds">"</span>bad input<span class="pl-pds">"</span></span>))</pre></div>
<p>The convenient <code>is_left</code> and <code>is_right</code> functions can be used to
check if the object is left or right.  To extract value from the
object, use <code>left_value</code> or <code>right_value</code>.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; is_right(result(1))
true

julia&gt; is_left(result(ArgumentError(&quot;bad input&quot;)))
true

julia&gt; right_value(result(1))
1

julia&gt; left_value(result(1))
ERROR: MethodError: no method matching left_value(::Either{:R,:Result})
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">is_right</span>(<span class="pl-c1">result</span>(<span class="pl-c1">1</span>))
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">is_left</span>(<span class="pl-c1">result</span>(<span class="pl-c1">ArgumentError</span>(<span class="pl-s"><span class="pl-pds">"</span>bad input<span class="pl-pds">"</span></span>)))
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">right_value</span>(<span class="pl-c1">result</span>(<span class="pl-c1">1</span>))
<span class="pl-c1">1</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">left_value</span>(<span class="pl-c1">result</span>(<span class="pl-c1">1</span>))
ERROR<span class="pl-k">:</span> MethodError<span class="pl-k">:</span> no method matching <span class="pl-c1">left_value</span>(<span class="pl-k">::</span><span class="pl-c1">Either{:R,:Result}</span>)</pre></div>
<h3><a id="user-content-list" class="anchor" aria-hidden="true" href="#list"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>List</h3>
<p>A List monad is essentially a 1-dimensional array.  Use the <code>list</code> constructor to create a new list monad.  We can <code>fmap</code> over all elements, or <code>flatten</code> a nested list.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; m = list(1)
1-element Array{Int64,1}:
 1

julia&gt; v = list([1,2,3])
3-element Array{Int64,1}:
 1
 2
 3

julia&gt; fmap(x -&gt; 2x, v)
3-element Array{Int64,1}:
 2
 4
 6

julia&gt; flatten([1, [2,3], [[4],[5]]])
5-element Array{Int64,1}:
 1
 2
 3
 4
 5
"><pre>julia<span class="pl-k">&gt;</span> m <span class="pl-k">=</span> <span class="pl-c1">list</span>(<span class="pl-c1">1</span>)
<span class="pl-c1">1</span><span class="pl-k">-</span>element Array{Int64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">1</span>

julia<span class="pl-k">&gt;</span> v <span class="pl-k">=</span> <span class="pl-c1">list</span>([<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>])
<span class="pl-c1">3</span><span class="pl-k">-</span>element Array{Int64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">1</span>
 <span class="pl-c1">2</span>
 <span class="pl-c1">3</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">fmap</span>(x <span class="pl-k">-&gt;</span> <span class="pl-c1">2</span>x, v)
<span class="pl-c1">3</span><span class="pl-k">-</span>element Array{Int64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">2</span>
 <span class="pl-c1">4</span>
 <span class="pl-c1">6</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">flatten</span>([<span class="pl-c1">1</span>, [<span class="pl-c1">2</span>,<span class="pl-c1">3</span>], [[<span class="pl-c1">4</span>],[<span class="pl-c1">5</span>]]])
<span class="pl-c1">5</span><span class="pl-k">-</span>element Array{Int64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">1</span>
 <span class="pl-c1">2</span>
 <span class="pl-c1">3</span>
 <span class="pl-c1">4</span>
 <span class="pl-c1">5</span></pre></div>
<h2><a id="user-content-more-examples" class="anchor" aria-hidden="true" href="#more-examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>More Examples</h2>
<h3><a id="user-content-using-maybe-monad-to-handle-nothing" class="anchor" aria-hidden="true" href="#using-maybe-monad-to-handle-nothing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Using maybe monad to handle Nothing</h3>
<p>Maybe is a monad that either contains something useful or nothing. How is it
useful? Sometimes certain functions returns <code>nothing</code> rather than throwing
exception to indicate a negative condition For example:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="match(r&quot;^a.*&quot;, &quot;hello&quot;)     # nothing
"><pre><span class="pl-c1">match</span>(<span class="pl-sr"><span class="pl-pds">r"</span>^a.*<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>hello<span class="pl-pds">"</span></span>)     <span class="pl-c"><span class="pl-c">#</span> nothing</span></pre></div>
<p>It is a bit unfortunate that we must test the condition before using the result:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="matched = match(r&quot;^a.*&quot;, &quot;hello&quot;)
result = if matched !== nothing
    matched.match * &quot; world&quot;
else
    nothing
end
"><pre>matched <span class="pl-k">=</span> <span class="pl-c1">match</span>(<span class="pl-sr"><span class="pl-pds">r"</span>^a.*<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>hello<span class="pl-pds">"</span></span>)
result <span class="pl-k">=</span> <span class="pl-k">if</span> matched <span class="pl-k">!==</span> <span class="pl-c1">nothing</span>
    matched<span class="pl-k">.</span>match <span class="pl-k">*</span> <span class="pl-s"><span class="pl-pds">"</span> world<span class="pl-pds">"</span></span>
<span class="pl-k">else</span>
    <span class="pl-c1">nothing</span>
<span class="pl-k">end</span></pre></div>
<p>If we have the notion of Maybe, then we can do it in a functional style:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="&quot;hello&quot; |&gt; match(r&quot;^a.*&quot;) |&gt; matched |&gt; concat(&quot; world&quot;)
"><pre><span class="pl-s"><span class="pl-pds">"</span>hello<span class="pl-pds">"</span></span> <span class="pl-k">|&gt;</span> <span class="pl-c1">match</span>(<span class="pl-sr"><span class="pl-pds">r"</span>^a.*<span class="pl-pds">"</span></span>) <span class="pl-k">|&gt;</span> matched <span class="pl-k">|&gt;</span> <span class="pl-c1">concat</span>(<span class="pl-s"><span class="pl-pds">"</span> world<span class="pl-pds">"</span></span>)</pre></div>
<p>To make that happen, we can do the following to create composable functions that
only take single arguments.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="Base.match(re::Regex) = Base.Fix1(match, re)
matched(rm::RegexMatch) = rm.match
concat(s::String) = Base.Fix2(string, s)
"><pre>Base<span class="pl-k">.</span><span class="pl-en">match</span>(re<span class="pl-k">::</span><span class="pl-c1">Regex</span>) <span class="pl-k">=</span> Base<span class="pl-k">.</span><span class="pl-c1">Fix1</span>(match, re)
<span class="pl-en">matched</span>(rm<span class="pl-k">::</span><span class="pl-c1">RegexMatch</span>) <span class="pl-k">=</span> rm<span class="pl-k">.</span>match
<span class="pl-en">concat</span>(s<span class="pl-k">::</span><span class="pl-c1">String</span>) <span class="pl-k">=</span> Base<span class="pl-k">.</span><span class="pl-c1">Fix2</span>(string, s)</pre></div>
<p>If you don't like type piracy then define your own <code>match</code> function or convince
the Julia core developers that it is a good addition to the Base library. And,
this would work just fine:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; &quot;hello&quot; |&gt; match(r&quot;^h.*&quot;) |&gt; matched |&gt; concat(&quot; world&quot;)
&quot;hello world&quot;
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>hello<span class="pl-pds">"</span></span> <span class="pl-k">|&gt;</span> <span class="pl-c1">match</span>(<span class="pl-sr"><span class="pl-pds">r"</span>^h.*<span class="pl-pds">"</span></span>) <span class="pl-k">|&gt;</span> matched <span class="pl-k">|&gt;</span> <span class="pl-c1">concat</span>(<span class="pl-s"><span class="pl-pds">"</span> world<span class="pl-pds">"</span></span>)
<span class="pl-s"><span class="pl-pds">"</span>hello world<span class="pl-pds">"</span></span></pre></div>
<p>That's close but this doesn't work for the nothing condition.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; &quot;abc&quot; |&gt; match(r&quot;^h.*&quot;) |&gt; matched |&gt; concat(&quot; world&quot;)
ERROR: MethodError: no method matching matched(::Nothing)
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>abc<span class="pl-pds">"</span></span> <span class="pl-k">|&gt;</span> <span class="pl-c1">match</span>(<span class="pl-sr"><span class="pl-pds">r"</span>^h.*<span class="pl-pds">"</span></span>) <span class="pl-k">|&gt;</span> matched <span class="pl-k">|&gt;</span> <span class="pl-c1">concat</span>(<span class="pl-s"><span class="pl-pds">"</span> world<span class="pl-pds">"</span></span>)
ERROR<span class="pl-k">:</span> MethodError<span class="pl-k">:</span> no method matching <span class="pl-c1">matched</span>(<span class="pl-k">::</span><span class="pl-c1">Nothing</span>)</pre></div>
<p>With the help of <code>fmap</code> function, we can make it work:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; &quot;abc&quot; |&gt; fmap(match(r&quot;^h.*&quot;)) |&gt; fmap(matched) |&gt; fmap(concat(&quot; world&quot;)) === nothing
true
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>abc<span class="pl-pds">"</span></span> <span class="pl-k">|&gt;</span> <span class="pl-c1">fmap</span>(<span class="pl-c1">match</span>(<span class="pl-sr"><span class="pl-pds">r"</span>^h.*<span class="pl-pds">"</span></span>)) <span class="pl-k">|&gt;</span> <span class="pl-c1">fmap</span>(matched) <span class="pl-k">|&gt;</span> <span class="pl-c1">fmap</span>(<span class="pl-c1">concat</span>(<span class="pl-s"><span class="pl-pds">"</span> world<span class="pl-pds">"</span></span>)) <span class="pl-k">===</span> <span class="pl-c1">nothing</span>
<span class="pl-c1">true</span></pre></div>
<p>This is getting a little long and hard to read, so we just compose the functions:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="process = fmap(
    match(r&quot;^h.*&quot;),
    matched,
    concat(&quot; world&quot;)
)

using Test
@test process(&quot;hello&quot;) == &quot;hello world&quot;
@test process(&quot;abc&quot;) == nothing
"><pre>process <span class="pl-k">=</span> <span class="pl-c1">fmap</span>(
    <span class="pl-c1">match</span>(<span class="pl-sr"><span class="pl-pds">r"</span>^h.*<span class="pl-pds">"</span></span>),
    matched,
    <span class="pl-c1">concat</span>(<span class="pl-s"><span class="pl-pds">"</span> world<span class="pl-pds">"</span></span>)
)

<span class="pl-k">using</span> Test
<span class="pl-c1">@test</span> <span class="pl-c1">process</span>(<span class="pl-s"><span class="pl-pds">"</span>hello<span class="pl-pds">"</span></span>) <span class="pl-k">==</span> <span class="pl-s"><span class="pl-pds">"</span>hello world<span class="pl-pds">"</span></span>
<span class="pl-c1">@test</span> <span class="pl-c1">process</span>(<span class="pl-s"><span class="pl-pds">"</span>abc<span class="pl-pds">"</span></span>) <span class="pl-k">==</span> <span class="pl-c1">nothing</span></pre></div>
<p>Look ma, it is just a data flow pipeline without any conditional statement.</p>
<h3><a id="user-content-using-result-monad-for-exception-handling" class="anchor" aria-hidden="true" href="#using-result-monad-for-exception-handling"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Using result monad for exception handling</h3>
<p>Either is a monad that contains data on the left side or right side.
It is useful to keep track of two scenarios.  For examples:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; going_to_party = left(&quot;I am sick&quot;)
MonadEither_Left(I am sick)

julia&gt; is_left(going_to_party)
true

julia&gt; play_badminton = right(&quot;this weekend&quot;)
MonadEither_Right(this weekend)

julia&gt; is_right(play_badminton)
true

julia&gt; right_value(play_badminton)
&quot;this weekend&quot;
"><pre>julia<span class="pl-k">&gt;</span> going_to_party <span class="pl-k">=</span> <span class="pl-c1">left</span>(<span class="pl-s"><span class="pl-pds">"</span>I am sick<span class="pl-pds">"</span></span>)
<span class="pl-c1">MonadEither_Left</span>(I am sick)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">is_left</span>(going_to_party)
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> play_badminton <span class="pl-k">=</span> <span class="pl-c1">right</span>(<span class="pl-s"><span class="pl-pds">"</span>this weekend<span class="pl-pds">"</span></span>)
<span class="pl-c1">MonadEither_Right</span>(this weekend)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">is_right</span>(play_badminton)
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">right_value</span>(play_badminton)
<span class="pl-s"><span class="pl-pds">"</span>this weekend<span class="pl-pds">"</span></span></pre></div>
<p><code>Result</code> is a monad that is a special case of <code>Either</code>. By convention, we stay
on the right track for normal conditions but switch to the left track when we
encounter an error condition. Once we're on the left track, we stay on the it
and ignore all computation until the end. As the error condition was captured
when we switch to the left track, we can tell what went wrong when we come out
of the computation. As you can see, Either monad is useful in handling errors.</p>
<p>A simple example is to run a database query. As part of the process, we need to
establish a connection, obtain a database cursor, and then run the query. The
trouble is that it may throw an exception at any of the database api calls:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="try
    conn = get_connection(url)
    cursor = get_cursor(conn)
    sql = &quot;select * from somehwere&quot;
    return query(cursor, sql)
catch ex 
    @error &quot;Unable to run query due to ex=$ex&quot;
    rethrow(ex)
end
"><pre><span class="pl-k">try</span>
    conn <span class="pl-k">=</span> <span class="pl-c1">get_connection</span>(url)
    cursor <span class="pl-k">=</span> <span class="pl-c1">get_cursor</span>(conn)
    sql <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>select * from somehwere<span class="pl-pds">"</span></span>
    <span class="pl-k">return</span> <span class="pl-c1">query</span>(cursor, sql)
<span class="pl-k">catch</span> ex 
    <span class="pl-c1">@error</span> <span class="pl-s"><span class="pl-pds">"</span>Unable to run query due to ex=<span class="pl-v">$ex</span><span class="pl-pds">"</span></span>
    <span class="pl-c1">rethrow</span>(ex)
<span class="pl-k">end</span></pre></div>
<p>It would be nice if the error just <em>flows</em> to the end. Without using try-catch
statement, we would like to do this:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="# anonymous function to make it composable
run_query(sql) = cursor -&gt; query(cursor, sql)

# error handler
handle_query_result(err::LeftEither) = @error(left_value(err))

# result set handler
handle_query_result(rs::DataFrame) = &quot;good job&quot; 

# establish pipeline
result = fmap(
    url,
    get_connection,
    get_cursor,
    run_query(&quot;select * from sometable&quot;),
    handle_query_result
)
"><pre><span class="pl-c"><span class="pl-c">#</span> anonymous function to make it composable</span>
<span class="pl-en">run_query</span>(sql) <span class="pl-k">=</span> cursor <span class="pl-k">-&gt;</span> <span class="pl-c1">query</span>(cursor, sql)

<span class="pl-c"><span class="pl-c">#</span> error handler</span>
<span class="pl-en">handle_query_result</span>(err<span class="pl-k">::</span><span class="pl-c1">LeftEither</span>) <span class="pl-k">=</span> <span class="pl-c1">@error</span>(<span class="pl-c1">left_value</span>(err))

<span class="pl-c"><span class="pl-c">#</span> result set handler</span>
<span class="pl-en">handle_query_result</span>(rs<span class="pl-k">::</span><span class="pl-c1">DataFrame</span>) <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>good job<span class="pl-pds">"</span></span> 

<span class="pl-c"><span class="pl-c">#</span> establish pipeline</span>
result <span class="pl-k">=</span> <span class="pl-c1">fmap</span>(
    url,
    get_connection,
    get_cursor,
    <span class="pl-c1">run_query</span>(<span class="pl-s"><span class="pl-pds">"</span>select * from sometable<span class="pl-pds">"</span></span>),
    handle_query_result
)</pre></div>
<p>The returned result from <code>run_query</code> is either a good value or an error. We can
find out if it's good or bad by calling <code>is_right</code> and <code>is_left</code> respectively.
If needed, we can also dispatch based upon <code>ResultEither</code> or <code>ErrorEither</code>
types.</p>
</article></div>