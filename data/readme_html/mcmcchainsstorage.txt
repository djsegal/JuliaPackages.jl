<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-mcmcchainsstoragejl-storing-your-chains-on-disk" class="anchor" aria-hidden="true" href="#mcmcchainsstoragejl-storing-your-chains-on-disk"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>MCMCChainsStorage.jl: Storing Your Chains on Disk</h1>
<p>The <code>MCMCChainsStorage.jl</code> package provides options for storing your
<code>MCMCChains.jl</code> chains on disk without using serialization.  Serialization is
not suitable for long-term storage; or for sharing your chains to colleagues
with different operating systems, Julia versions, or even without Julia.
<code>MCMCChainsStorage.jl</code> solves these problems.</p>
<p>Currently only storage in HDF5 file formats is supported, but other storage
options may be added in the future.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>TODO: put this package in the general Julia package registry.</p>
<p>To install the package into a Julia environment, start Julia, activate the
environment, enter the package management context (type <code>]</code>), and issue the
command</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="pkg&gt; add https://github.com/farr/MCMCChainsStorage.jl.git
"><pre>pkg<span class="pl-k">&gt;</span> add https<span class="pl-k">:</span><span class="pl-k">//</span>github<span class="pl-k">.</span>com<span class="pl-k">/</span>farr<span class="pl-k">/</span>MCMCChainsStorage<span class="pl-k">.</span>jl<span class="pl-k">.</span>git</pre></div>
<h3><a id="user-content-dependencies" class="anchor" aria-hidden="true" href="#dependencies"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Dependencies</h3>
<p>The <code>MCMCChainsStorage</code> package depends on the <code>MCMCChains</code> and the <code>HDF5</code>
packages.  If you do not have these packages installed on your system,
installing <code>MCMCChainsStorage</code> will install them automatically.</p>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<p>The packages provides methods for <code>Base.read</code> and <code>Base.write</code> that read an
MCMCChains object from or write it to HDF5 storage:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using HDF5
using MCMCChains
using MCMCChainsStorage

# Construct a chain and write it out...
chain = Chains(randn(500, 2, 4), [:a, :b])
h5open(&quot;an_hdf5_file.h5&quot;, &quot;w&quot;) do f
  write(f, chain)
end

# ...and we can get it back
chain = h5open(&quot;an_hdf5_file.h5&quot;, &quot;r&quot;) do f
  read(f, Chains)
end
"><pre><span class="pl-k">using</span> HDF5
<span class="pl-k">using</span> MCMCChains
<span class="pl-k">using</span> MCMCChainsStorage

<span class="pl-c"><span class="pl-c">#</span> Construct a chain and write it out...</span>
chain <span class="pl-k">=</span> <span class="pl-c1">Chains</span>(<span class="pl-c1">randn</span>(<span class="pl-c1">500</span>, <span class="pl-c1">2</span>, <span class="pl-c1">4</span>), [<span class="pl-c1">:a</span>, <span class="pl-c1">:b</span>])
<span class="pl-c1">h5open</span>(<span class="pl-s"><span class="pl-pds">"</span>an_hdf5_file.h5<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>w<span class="pl-pds">"</span></span>) <span class="pl-k">do</span> f
  <span class="pl-c1">write</span>(f, chain)
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> ...and we can get it back</span>
chain <span class="pl-k">=</span> <span class="pl-c1">h5open</span>(<span class="pl-s"><span class="pl-pds">"</span>an_hdf5_file.h5<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>r<span class="pl-pds">"</span></span>) <span class="pl-k">do</span> f
  <span class="pl-c1">read</span>(f, Chains)
<span class="pl-k">end</span></pre></div>
<p>Reading and writing preserves the sections of the chain, so if you have metadata
stored in, for example, the "internals" section, it will be written out and read
back properly.</p>
<p>It is also possible to write a chain to a group in a larger HDF5 file:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="h5open(&quot;another_hdf5_file.h5&quot;, &quot;w&quot;) do f
  g = create_group(f, &quot;a_chain&quot;)
  write(g, chain)
end

chain = h5open(&quot;another_hdf5_file.h5&quot;, &quot;r&quot;) do f
  read(f[&quot;a_chain&quot;], Chains)
end
"><pre><span class="pl-c1">h5open</span>(<span class="pl-s"><span class="pl-pds">"</span>another_hdf5_file.h5<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>w<span class="pl-pds">"</span></span>) <span class="pl-k">do</span> f
  g <span class="pl-k">=</span> <span class="pl-c1">create_group</span>(f, <span class="pl-s"><span class="pl-pds">"</span>a_chain<span class="pl-pds">"</span></span>)
  <span class="pl-c1">write</span>(g, chain)
<span class="pl-k">end</span>

chain <span class="pl-k">=</span> <span class="pl-c1">h5open</span>(<span class="pl-s"><span class="pl-pds">"</span>another_hdf5_file.h5<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>r<span class="pl-pds">"</span></span>) <span class="pl-k">do</span> f
  <span class="pl-c1">read</span>(f[<span class="pl-s"><span class="pl-pds">"</span>a_chain<span class="pl-pds">"</span></span>], Chains)
<span class="pl-k">end</span></pre></div>
<h2><a id="user-content-details-and-storage-format" class="anchor" aria-hidden="true" href="#details-and-storage-format"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Details and Storage Format</h2>
<p>The chain is stored with one group for each section (<code>parameters</code>, <code>internals</code>,
etc).  Each "name" within the section is stored as a separate HDF5 data set, so
arrays in the chain will be placed in data sets named "x[1]", "x[2]", etc.
Compression is enabled by default; currently there is no way to change this
default, but why would you want to?  An advantage of this format is that generic
tools like <code>h5ls</code> will produce a reasonable description of the chain; and it is
straightforward to reconstruct the chain without too much code in <em>any</em> language
that can interface with the HDF5 storage format.</p>
</article></div>