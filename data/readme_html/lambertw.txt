<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-lambertw" class="anchor" aria-hidden="true" href="#lambertw"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>LambertW</h1>
<h3><a id="user-content-lambert-w-function-and-associated-omega-constant" class="anchor" aria-hidden="true" href="#lambert-w-function-and-associated-omega-constant"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Lambert W function and associated omega constant</h3>
<p>Linux, OSX: <a href="https://travis-ci.org/jlapeyre/LambertW.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/e5568e95e8725006b0fe1d23227a51511749a2e610d98fe70a4cc186d2591801/68747470733a2f2f7472617669732d63692e6f72672f6a6c6170657972652f4c616d62657274572e6a6c2e737667" alt="Build Status" data-canonical-src="https://travis-ci.org/jlapeyre/LambertW.jl.svg" style="max-width:100%;"></a>
 
Windows: <a href="https://ci.appveyor.com/project/jlapeyre/lambertw-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/736987ece846d2936f37c8d0f4c90127c40c293f50ee2a519e016b206c0a3a13/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f6769746875622f6a6c6170657972652f4c616d62657274572e6a6c3f6272616e63683d6d6173746572267376673d74727565" alt="Build Status" data-canonical-src="https://ci.appveyor.com/api/projects/status/github/jlapeyre/LambertW.jl?branch=master&amp;svg=true" style="max-width:100%;"></a>
     
<a href="https://coveralls.io/github/jlapeyre/LambertW.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/5820205230bb368a4192560db5b75da89dbe6c605e75b04ca4df676e574b1880/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f6a6c6170657972652f4c616d62657274572e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/jlapeyre/LambertW.jl/badge.svg?branch=master" style="max-width:100%;"></a>
<a href="http://codecov.io/github/jlapeyre/LambertW.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/031550f69f26650cc86737922ba97d4cd82f8ec56faba5d5dfd013f8d216992f/687474703a2f2f636f6465636f762e696f2f6769746875622f6a6c6170657972652f4c616d62657274572e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/jlapeyre/LambertW.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>

<h3><a id="user-content-lambertw-1" class="anchor" aria-hidden="true" href="#lambertw-1"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>lambertw</h3>
<p>The <a href="http://en.wikipedia.org/wiki/Lambert_W_function" rel="nofollow">Lambert W function</a>,
also called the omega function or product logarithm.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="lambertw(z,k)   # Lambert W function for argument z and branch index k
lambertw(z)     # the same as lambertw(z,0)
"><pre><span class="pl-c1">lambertw</span>(z,k)   <span class="pl-c"><span class="pl-c">#</span> Lambert W function for argument z and branch index k</span>
<span class="pl-c1">lambertw</span>(z)     <span class="pl-c"><span class="pl-c">#</span> the same as lambertw(z,0)</span></pre></div>
<p><code>z</code> may be Complex or Real. <code>k</code> must be an integer. For Real
<code>z</code>, <code>k</code> must be either <code>0</code> or <code>-1</code>.</p>
<p>Examples:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; lambertw(10)
1.7455280027406994

julia&gt; lambertw(e)
1

julia&gt; lambertw(1.0)
0.5671432904097838

julia&gt; lambertw(-pi/2 + 0im)  / pi
4.6681174759251105e-18 + 0.5im
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">lambertw</span>(<span class="pl-c1">10</span>)
<span class="pl-c1">1.7455280027406994</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">lambertw</span>(e)
<span class="pl-c1">1</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">lambertw</span>(<span class="pl-c1">1.0</span>)
<span class="pl-c1">0.5671432904097838</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">lambertw</span>(<span class="pl-k">-</span><span class="pl-c1">pi</span><span class="pl-k">/</span><span class="pl-c1">2</span> <span class="pl-k">+</span> <span class="pl-c1">0im</span>)  <span class="pl-k">/</span> <span class="pl-c1">pi</span>
<span class="pl-c1">4.6681174759251105e-18</span> <span class="pl-k">+</span> <span class="pl-c1">0.5im</span></pre></div>
<h3><a id="user-content-lambertwbpxk0" class="anchor" aria-hidden="true" href="#lambertwbpxk0"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>lambertwbp(x,k=0)</h3>
<p>Return <code>1 + W(-1/e + z)</code>, for <code>z</code> satisfying <code>0 &lt;= abs(z) &lt; 1/e</code>,
on the branch of index <code>k</code>, where <code>k</code> must be either <code>0</code> or <code>-1</code>. This
function is designed to minimize loss of precision near the branch point <code>z=-1/e</code>.
<code>lambertwbp(z,k)</code> converges to <code>Float64</code> precision for <code>abs(z) &lt; 0.32</code>.</p>
<p>If <code>k=-1</code> and <code>imag(z) &lt; 0</code>, the value on the branch <code>k=1</code> is returned.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; lambertwbp(1e-3,-1)
-0.07560894118662498

julia&gt; lambertwbp(0)
-0.0
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">lambertwbp</span>(<span class="pl-c1">1e-3</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>)
<span class="pl-k">-</span><span class="pl-c1">0.07560894118662498</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">lambertwbp</span>(<span class="pl-c1">0</span>)
<span class="pl-k">-</span><span class="pl-c1">0.0</span></pre></div>
<p><code>lambertwbp</code> uses a series expansion about the branch point <code>z=-1/e</code>.
The loss of precision in <code>lambertw</code> is analogous to the loss of precision
in computing the <code>sqrt(1-x)</code> for <code>x</code> close to <code>1</code>.</p>
<h3><a id="user-content-lambertwfinvlambertw" class="anchor" aria-hidden="true" href="#lambertwfinvlambertw"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>LambertW.finv(lambertw)</h3>
<p>The functional inverse of the Lambert W function.</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt; finv(lambertw)(lambertw(1.0))
1.0

julia&gt; finv(lambertw)(lambertw(1+im/2,3))
1.0 + 0.49999999999999944im
"><pre><code>julia&gt; finv(lambertw)(lambertw(1.0))
1.0

julia&gt; finv(lambertw)(lambertw(1+im/2,3))
1.0 + 0.49999999999999944im
</code></pre></div>
<h3><a id="user-content-omega-constant" class="anchor" aria-hidden="true" href="#omega-constant"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>omega constant</h3>
<p>The <a href="http://en.wikipedia.org/wiki/Omega_constant" rel="nofollow">omega constant</a></p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; ω
ω = 0.5671432904097...

julia&gt; omega
ω = 0.5671432904097...

julia&gt; ω * exp(ω)
1.0

julia&gt; big(ω)
5.67143290409783872999968662210355549753815787186512508135131079223045793086683e-01 with 256 bits of precision

julia&gt; lambertw(1) == float(ω)
true
"><pre>julia<span class="pl-k">&gt;</span> ω
ω <span class="pl-k">=</span> <span class="pl-c1">0.5671432904097</span><span class="pl-k">...</span>

julia<span class="pl-k">&gt;</span> omega
ω <span class="pl-k">=</span> <span class="pl-c1">0.5671432904097</span><span class="pl-k">...</span>

julia<span class="pl-k">&gt;</span> ω <span class="pl-k">*</span> <span class="pl-c1">exp</span>(ω)
<span class="pl-c1">1.0</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">big</span>(ω)
<span class="pl-c1">5.67143290409783872999968662210355549753815787186512508135131079223045793086683e-01</span> with <span class="pl-c1">256</span> bits of precision

julia<span class="pl-k">&gt;</span> <span class="pl-c1">lambertw</span>(<span class="pl-c1">1</span>) <span class="pl-k">==</span> <span class="pl-c1">float</span>(ω)
<span class="pl-c1">true</span></pre></div>







</article></div>