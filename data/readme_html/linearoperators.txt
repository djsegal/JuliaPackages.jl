<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-a-julia-linear-operator-package" class="anchor" aria-hidden="true" href="#a-julia-linear-operator-package"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>A <a href="http://julialang.org" rel="nofollow">Julia</a> Linear Operator Package</h1>
<p><a href="https://zenodo.org/badge/latestdoi/20136006" rel="nofollow"><img src="https://camo.githubusercontent.com/a45f5f19a3760ee272de4945e10a37a2095f639f/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f32303133363030362e737667" alt="DOI" data-canonical-src="https://zenodo.org/badge/20136006.svg" style="max-width:100%;"></a>
<a href="https://travis-ci.org/JuliaSmoothOptimizers/LinearOperators.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/7b9e1f61fae0044c59e371f33c959e08e9e08fab/68747470733a2f2f7472617669732d63692e6f72672f4a756c6961536d6f6f74684f7074696d697a6572732f4c696e6561724f70657261746f72732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaSmoothOptimizers/LinearOperators.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/dpo/linearoperators-jl/branch/master" rel="nofollow"><img src="https://camo.githubusercontent.com/2e544de0d06b1103ca63a8de55ba781f7bd6445d/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f6b70316f36656a7575366b67736b76702f6272616e63682f6d61737465723f7376673d74727565" alt="Build status" data-canonical-src="https://ci.appveyor.com/api/projects/status/kp1o6ejuu6kgskvp/branch/master?svg=true" style="max-width:100%;"></a>
<a href="https://cirrus-ci.com/github/JuliaSmoothOptimizers/LinearOperators.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/7c2f3ade65f870944b2d3c99ec288fc2583347d3/68747470733a2f2f6170692e6369727275732d63692e636f6d2f6769746875622f4a756c6961536d6f6f74684f7074696d697a6572732f4c696e6561724f70657261746f72732e6a6c2e737667" alt="Build Status" data-canonical-src="https://api.cirrus-ci.com/github/JuliaSmoothOptimizers/LinearOperators.jl.svg" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/JuliaSmoothOptimizers/LinearOperators.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/3223e77dc4b746d5bb464b9a6dc1a37fe6de20e1/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f4a756c6961536d6f6f74684f7074696d697a6572732f4c696e6561724f70657261746f72732e6a6c2f62616467652e7376673f6272616e63683d6d617374657226736572766963653d676974687562" alt="Coveralls" data-canonical-src="https://coveralls.io/repos/JuliaSmoothOptimizers/LinearOperators.jl/badge.svg?branch=master&amp;service=github" style="max-width:100%;"></a>
<a href="https://codecov.io/github/JuliaSmoothOptimizers/LinearOperators.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/2fe7c2bac74fce947e790cb27de9933c319747b9/68747470733a2f2f636f6465636f762e696f2f6769746875622f4a756c6961536d6f6f74684f7074696d697a6572732f4c696e6561724f70657261746f72732e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="https://codecov.io/github/JuliaSmoothOptimizers/LinearOperators.jl/coverage.svg?branch=master" style="max-width:100%;"></a>
<a href="https://JuliaSmoothOptimizers.github.io/LinearOperators.jl/latest" rel="nofollow"><img src="https://camo.githubusercontent.com/a5af23352326d564443d56721673423cfa303eb5/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6c61746573742d3366353162352e737667" alt="docs" data-canonical-src="https://img.shields.io/badge/docs-latest-3f51b5.svg" style="max-width:100%;"></a></p>
<p>Cite as</p>
<pre><code>Dominique Orban, &amp; Abel Soares Siqueira. (2019, February 7). LinearOperators.jl.
Zenodo. http://doi.org/10.5281/zenodo.2559295
</code></pre>
<p>Operators behave like matrices (with some exceptions - see below) but are defined by their effect when applied to a vector. They can be transposed, conjugated, or combined with other operators cheaply. The costly operation is deferred until multiplied with a vector.</p>
<h2><a id="user-content-compatibility" class="anchor" aria-hidden="true" href="#compatibility"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Compatibility</h2>
<p>Julia 1.0 and up.</p>
<h2><a id="user-content-how-to-install" class="anchor" aria-hidden="true" href="#how-to-install"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>How to Install</h2>
<div class="highlight highlight-source-julia"><pre>pkg<span class="pl-k">&gt;</span> add LinearOperators
pkg<span class="pl-k">&gt;</span> test LinearOperators</pre></div>
<h2><a id="user-content-how-to-use" class="anchor" aria-hidden="true" href="#how-to-use"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>How to use</h2>
<p>Check the
<a href="https://JuliaSmoothOptimizers.github.io/LinearOperators.jl/latest/tutorial" rel="nofollow">tutorial</a>.</p>
<h2><a id="user-content-operators-available" class="anchor" aria-hidden="true" href="#operators-available"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Operators Available</h2>
<table>
<thead>
<tr>
<th>Operator</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>LinearOperator</code></td>
<td>Base class. Useful to define operators from functions</td>
</tr>
<tr>
<td><code>PreallocatedLinearOperator</code></td>
<td>Linear operator with preallocated storage for products</td>
</tr>
<tr>
<td><code>TimedLinearOperator</code></td>
<td>Linear operator instrumented with timers from <a href="https://github.com/KristofferC/TimerOutputs.jl"><code>TimerOutputs</code></a></td>
</tr>
<tr>
<td><code>BlockDiagonalOperator</code></td>
<td>Block-diagonal linear operator</td>
</tr>
<tr>
<td><code>opEye</code></td>
<td>Identity operator</td>
</tr>
<tr>
<td><code>opOnes</code></td>
<td>All ones operator</td>
</tr>
<tr>
<td><code>opZeros</code></td>
<td>All zeros operator</td>
</tr>
<tr>
<td><code>opDiagonal</code></td>
<td>Square (equivalent to <code>diagm()</code>) or rectangular diagonal operator</td>
</tr>
<tr>
<td><code>opInverse</code></td>
<td>Equivalent to <code>\</code></td>
</tr>
<tr>
<td><code>opCholesky</code></td>
<td>More efficient than <code>opInverse</code> for symmetric positive definite matrices</td>
</tr>
<tr>
<td><code>opHouseholder</code></td>
<td>Apply a Householder transformation <code>I-2hh'</code></td>
</tr>
<tr>
<td><code>opHermitian</code></td>
<td>Represent a symmetric/hermitian operator based on the diagonal and strict lower triangle</td>
</tr>
<tr>
<td><code>opRestriction</code></td>
<td>Represent a selection of "rows" when composed on the left with an existing operator</td>
</tr>
<tr>
<td><code>opExtension</code></td>
<td>Represent a selection of "columns" when composed on the right with an existing operator</td>
</tr>
<tr>
<td><code>LBFGSOperator</code></td>
<td>Limited-memory BFGS approximation in operator form (damped or not)</td>
</tr>
<tr>
<td><code>InverseLBFGSOperator</code></td>
<td>Inverse of a limited-memory BFGS approximation in operator form (damped or not)</td>
</tr>
<tr>
<td><code>LSR1Operator</code></td>
<td>Limited-memory SR1 approximation in operator form</td>
</tr>
</tbody>
</table>
<h2><a id="user-content-utility-functions" class="anchor" aria-hidden="true" href="#utility-functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Utility Functions</h2>
<table>
<thead>
<tr>
<th>Function</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>check_ctranspose</code></td>
<td>Cheap check that <code>A'</code> is correctly implemented</td>
</tr>
<tr>
<td><code>check_hermitian</code></td>
<td>Cheap check that <code>A = A'</code></td>
</tr>
<tr>
<td><code>check_positive_definite</code></td>
<td>Cheap check that an operator is positive (semi-)definite</td>
</tr>
<tr>
<td><code>diag</code></td>
<td>Extract the diagonal of an operator</td>
</tr>
<tr>
<td><code>full</code></td>
<td>Convert an abstract operator to a dense array</td>
</tr>
<tr>
<td><code>hermitian</code></td>
<td>Determine whether the operator is Hermitian</td>
</tr>
<tr>
<td><code>push!</code></td>
<td>For L-BFGS or L-SR1 operators, push a new pair {s,y}</td>
</tr>
<tr>
<td><code>reset!</code></td>
<td>For L-BFGS or L-SR1 operators, reset the data</td>
</tr>
<tr>
<td><code>shape</code></td>
<td>Return the size of a linear operator</td>
</tr>
<tr>
<td><code>show</code></td>
<td>Display basic information about an operator</td>
</tr>
<tr>
<td><code>size</code></td>
<td>Return the size of a linear operator</td>
</tr>
<tr>
<td><code>symmetric</code></td>
<td>Determine whether the operator is symmetric</td>
</tr>
</tbody>
</table>
<h2><a id="user-content-other-operations-on-operators" class="anchor" aria-hidden="true" href="#other-operations-on-operators"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Other Operations on Operators</h2>
<p>Operators can be transposed (<code>transpose(A)</code>), conjugated (<code>conj(A)</code>) and conjugate-transposed (<code>A'</code>).
Operators can be sliced (<code>A[:,3]</code>, <code>A[2:4,1:5]</code>, <code>A[1,1]</code>), but unlike matrices, slices always return
operators (see differences below).</p>
<h2><a id="user-content-differences" class="anchor" aria-hidden="true" href="#differences"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Differences</h2>
<p>Unlike matrices, an operator never reduces to a vector or a number.</p>
<div class="highlight highlight-source-julia"><pre>A <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">5</span>,<span class="pl-c1">5</span>)
opA <span class="pl-k">=</span> <span class="pl-c1">LinearOperator</span>(A)
A[:,<span class="pl-c1">1</span>] <span class="pl-k">*</span> <span class="pl-c1">3</span> <span class="pl-c"><span class="pl-c">#</span> Vector</span>
opA[:,<span class="pl-c1">1</span>] <span class="pl-k">*</span> <span class="pl-c1">3</span> <span class="pl-c"><span class="pl-c">#</span> LinearOperator</span>
A[:,<span class="pl-c1">1</span>] <span class="pl-k">*</span> [<span class="pl-c1">3</span>] <span class="pl-c"><span class="pl-c">#</span> ERROR</span>
opA[:,<span class="pl-c1">1</span>] <span class="pl-k">*</span> [<span class="pl-c1">3</span>] <span class="pl-c"><span class="pl-c">#</span> Vector</span></pre></div>
<p>This is also true for <code>A[i,J]</code>, which returns vectors on 0.5, and for the scalar
<code>A[i,j]</code>.
Similarly, <code>opA[1,1]</code> is an operator of size (1,1):"</p>
<div class="highlight highlight-source-julia"><pre>opA[<span class="pl-c1">1</span>,<span class="pl-c1">1</span>] <span class="pl-c"><span class="pl-c">#</span> LinearOperator</span>
A[<span class="pl-c1">1</span>,<span class="pl-c1">1</span>] <span class="pl-c"><span class="pl-c">#</span> Number</span></pre></div>
<p>In the same spirit, the operator <code>full</code> always returns a matrix.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">full</span>(opA[:,<span class="pl-c1">1</span>]) <span class="pl-c"><span class="pl-c">#</span> nx1 matrix</span></pre></div>
<h2><a id="user-content-other-operators" class="anchor" aria-hidden="true" href="#other-operators"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Other Operators</h2>
<ul>
<li><a href="https://github.com/JuliaSmoothOptimizers/LimitedLDLFactorizations.jl">LimitedLDLFactorizations</a> features a limited-memory
LDL<sup>T</sup> factorization operator that may be used as preconditioner
in iterative methods</li>
<li><a href="https://github.com/JuliaSmoothOptimizers/MUMPS.jl">MUMPS.jl</a> features a full
distributed-memory factorization operator that may be used to represent the
preconditioner in, e.g., constraint-preconditioned Krylov methods.</li>
</ul>
</article></div>