<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://repository-images.githubusercontent.com/441460066/a4572ad1-6421-4679-aa31-4c2a45829dc6"><img src="https://repository-images.githubusercontent.com/441460066/a4572ad1-6421-4679-aa31-4c2a45829dc6" alt="Snowflake" style="max-width: 100%;"></a></p>
<h1 dir="auto"><a id="user-content-snowflakejl" class="anchor" aria-hidden="true" href="#snowflakejl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Snowflake.jl</h1>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/anyonlabs/Snowflake.jl/actions/workflows/CI.yml/badge.svg"><img src="https://github.com/anyonlabs/Snowflake.jl/actions/workflows/CI.yml/badge.svg" alt="CI tests" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/anyonlabs/Snowflake.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/66f6dc18f1bfed493f2fd74b8db5c46574bc5c832674c23c3ed921e8702b58ae/68747470733a2f2f636f6465636f762e696f2f67682f616e796f6e6c6162732f536e6f77666c616b652e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e7376673f746f6b656e3d4f423635594f3330374c" alt="codecov" data-canonical-src="https://codecov.io/gh/anyonlabs/Snowflake.jl/branch/main/graph/badge.svg?token=OB65YO307L" style="max-width: 100%;"></a></p>
<p dir="auto">Snowflake is an open source Julia-based software library for implementing quantum circuits, and then running them on quantum computers and quantum simulators.</p>
<h1 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h1>
<p dir="auto">The following installation steps are for people interested in using Snowflake in their own applications. If you are interested in contributing, head right over to our <a href="./CONTRIBUTING.md">Contributing to Snowflake page</a>.</p>
<h3 dir="auto"><a id="user-content-installing-julia" class="anchor" aria-hidden="true" href="#installing-julia"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installing Julia</h3>
<p dir="auto">Make sure your system has Julia installed. If not, download the latest version from <a href="https://julialang.org/downloads/" rel="nofollow">https://julialang.org/downloads/</a>.</p>
<p dir="auto">We officially support the <a href="https://julialang.org/downloads/#current_stable_release" rel="nofollow">latest stable release</a> and the <a href="https://julialang.org/downloads/#long_term_support_release" rel="nofollow">latest Long-term support release</a>. Any release in-between should work (please file a bug if they don't), but we only actively test against the LTS and the latest stable version.</p>
<h3 dir="auto"><a id="user-content-installing-snowflakejl-package" class="anchor" aria-hidden="true" href="#installing-snowflakejl-package"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installing <code>Snowflake.jl</code> package</h3>
<p dir="auto">Snowflake is still in pre-release phase. Therefore, and for the time being, we recommand installing it by checking out the <code>main</code> branch from github. This can be achieved by typing the following commands in the Julia REPL:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="import Pkg
Pkg.add(url=&quot;https://github.com/anyonlabs/Snowflake.jl&quot;, rev=&quot;main&quot;)"><pre><span class="pl-k">import</span> Pkg
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(url<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>https://github.com/anyonlabs/Snowflake.jl<span class="pl-pds">"</span></span>, rev<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>main<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">This will add the Snowflake  package to the current <a href="https://pkgdocs.julialang.org/v1/environments/" rel="nofollow">Julia Environment</a>.</p>
<p dir="auto"><strong>Note</strong> Once <code>Snowflake.jl</code> is released, you can install the latest release using the following command:
<code>julia import Pkg Pkg.add("Snowflake") </code></p>
<h3 dir="auto"><a id="user-content-installing-snowflakeplotsjl-package" class="anchor" aria-hidden="true" href="#installing-snowflakeplotsjl-package"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installing <code>SnowflakePlots.jl</code> package</h3>
<p dir="auto">Multiple visualization tools are available in the SnowflakePlots package. After installing
Snowflake, the SnowflakePlots package can be installed by entering the following in the
Julia REPL:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="import Pkg
Pkg.add(url=&quot;https://github.com/anyonlabs/SnowflakePlots.jl&quot;, rev=&quot;main&quot;)"><pre><span class="pl-k">import</span> Pkg
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(url<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>https://github.com/anyonlabs/SnowflakePlots.jl<span class="pl-pds">"</span></span>, rev<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>main<span class="pl-pds">"</span></span>)</pre></div>
<h1 dir="auto"><a id="user-content-getting-started" class="anchor" aria-hidden="true" href="#getting-started"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Getting Started</h1>
<p dir="auto">A typical workflow to execute a quantum circuit on a quantum service consists of these three steps.</p>
<ul dir="auto">
<li>
<p dir="auto">Create: Build the circuit using quantum gates.</p>
</li>
<li>
<p dir="auto">Transpile: Transpile the circuit to improve performance and make the circuit compatible with the quantum service.</p>
</li>
<li>
<p dir="auto">Execute: Run the compiled circuits on the specified quantum service. The quantum service could be a remote quantum hardware or a local simulator.</p>
</li>
</ul>
<p dir="auto">Now, let's try Snowflake by making a two-qubit circuit which implements a <a href="https://en.wikipedia.org/wiki/Bell_state" rel="nofollow">Bell/EPR state</a>. The quantum circuit for generating a Bell state involves a Hadamard gate on one of the qubits followed by a CNOT gate (see <a href="https://en.wikipedia.org/wiki/Quantum_logic_gate" rel="nofollow">here</a> for an introduction to quantum logic gates). This circuit is shown below:</p>
<div dir="auto">
	<a target="_blank" rel="noopener noreferrer" href="./docs/src/images/bell_circuit.svg"><img src="./docs/src/images/bell_circuit.svg" title="Bell state generator circuit" width="240" style="max-width: 100%;"></a>
</div>
<p dir="auto">First import Snowflake:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Snowflake"><pre><span class="pl-k">using</span> Snowflake</pre></div>
<p dir="auto">With Snowflake imported, we can define our two-qubit circuit.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="c = QuantumCircuit(qubit_count=2)
print(c)

# output
Quantum Circuit Object:
   qubit_count: 2
q[1]:

q[2]:"><pre>c <span class="pl-k">=</span> <span class="pl-c1">QuantumCircuit</span>(qubit_count<span class="pl-k">=</span><span class="pl-c1">2</span>)
<span class="pl-c1">print</span>(c)

<span class="pl-c"><span class="pl-c">#</span> output</span>
Quantum Circuit Object<span class="pl-k">:</span>
   qubit_count<span class="pl-k">:</span> <span class="pl-c1">2</span>
q[<span class="pl-c1">1</span>]<span class="pl-k">:</span>

q[<span class="pl-c1">2</span>]<span class="pl-k">:</span></pre></div>
<p dir="auto">In Snowflake, all qubits start in state <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="dfb0ca848237d274af78cfa93145e422">$\left|0\right\rangle$</math-renderer>. Our circuit is, therefore,  in state <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="dfb0ca848237d274af78cfa93145e422">$\left|00\right\rangle$</math-renderer>. The qubit ordering convention used is qubit number 1 on the left, with each following qubit to the right of it. We now proceed by adding gates to our circuit.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="push!(c, [hadamard(1)])
push!(c, [control_x(1, 2)])

print(c)

# output
Quantum Circuit Object:
   qubit_count: 2
q[1]:──H────*──
            |
q[2]:───────X──"><pre><span class="pl-c1">push!</span>(c, [<span class="pl-c1">hadamard</span>(<span class="pl-c1">1</span>)])
<span class="pl-c1">push!</span>(c, [<span class="pl-c1">control_x</span>(<span class="pl-c1">1</span>, <span class="pl-c1">2</span>)])

<span class="pl-c1">print</span>(c)

<span class="pl-c"><span class="pl-c">#</span> output</span>
Quantum Circuit Object<span class="pl-k">:</span>
   qubit_count<span class="pl-k">:</span> <span class="pl-c1">2</span>
q[<span class="pl-c1">1</span>]<span class="pl-k">:</span>──H────<span class="pl-k">*</span>──
            <span class="pl-k">|</span>
q[<span class="pl-c1">2</span>]<span class="pl-k">:</span>───────X──</pre></div>
<p dir="auto">The first line adds a Hadamard gate to circuit object <code>c</code> which will operate on qubit 1. The second line adds a CNOT gate (Control-X gate) with qubit 1 as the control qubit and qubit 2 as the target qubit.</p>
<p dir="auto"><strong>Note</strong>: Unlike C++ or Python, indexing in Julia starts from "1" and not "0"!</p>
<p dir="auto">The next step we want to take is to simulate our circuit. We do not need to transpile our circuit since our simulator can handle all gates, but for larger circuit you should consider transpilation to reduce the amount of work the simulator has to perform.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="ψ = simulate(c)
print(ψ)

# output
4-element Ket{ComplexF64}:
0.7071067811865475 + 0.0im
0.0 + 0.0im
0.0 + 0.0im
0.7071067811865475 + 0.0im"><pre>ψ <span class="pl-k">=</span> <span class="pl-c1">simulate</span>(c)
<span class="pl-c1">print</span>(ψ)

<span class="pl-c"><span class="pl-c">#</span> output</span>
<span class="pl-c1">4</span><span class="pl-k">-</span>element Ket{ComplexF64}<span class="pl-k">:</span>
<span class="pl-c1">0.7071067811865475</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span>
<span class="pl-c1">0.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span>
<span class="pl-c1">0.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span>
<span class="pl-c1">0.7071067811865475</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span></pre></div>
<p dir="auto">Finally, we can use <a href="https://github.com/anyonlabs/SnowflakePlots.jl">SnowflakePlots</a> to generate a histogram which shows the measurement
output distribution after taking a certain number of shots, in this case 100, on a quantum
computer simulator:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using SnowflakePlots
plot_histogram(c, 100)"><pre><span class="pl-k">using</span> SnowflakePlots
<span class="pl-c1">plot_histogram</span>(c, <span class="pl-c1">100</span>)</pre></div>
<div dir="auto">
	<a target="_blank" rel="noopener noreferrer" href="./docs/src/assets/index/index_histogram.png"><img src="./docs/src/assets/index/index_histogram.png" title="Bell state generator circuit" width="520
		" style="max-width: 100%;"></a>
</div>
<p dir="auto">The script below puts all the steps above together:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Snowflake, SnowflakePlots
c = QuantumCircuit(qubit_count=2)
push!(c, [hadamard(1)])
push!(c, [control_x(1, 2)])
ψ = simulate(c)
plot_histogram(c, 100)"><pre><span class="pl-k">using</span> Snowflake, SnowflakePlots
c <span class="pl-k">=</span> <span class="pl-c1">QuantumCircuit</span>(qubit_count<span class="pl-k">=</span><span class="pl-c1">2</span>)
<span class="pl-c1">push!</span>(c, [<span class="pl-c1">hadamard</span>(<span class="pl-c1">1</span>)])
<span class="pl-c1">push!</span>(c, [<span class="pl-c1">control_x</span>(<span class="pl-c1">1</span>, <span class="pl-c1">2</span>)])
ψ <span class="pl-k">=</span> <span class="pl-c1">simulate</span>(c)
<span class="pl-c1">plot_histogram</span>(c, <span class="pl-c1">100</span>)</pre></div>
<h1 dir="auto">
<a id="user-content-roadmap" class="anchor" aria-hidden="true" href="#roadmap"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Roadmap</h1>
<p dir="auto">See what we have planned by looking at the <a href="https://github.com/orgs/anyonlabs/projects/8">Snowflake Github Project</a>.</p>
<h1 dir="auto">
<a id="user-content-snowflake-contributors-community" class="anchor" aria-hidden="true" href="#snowflake-contributors-community"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Snowflake Contributors Community</h1>
<p dir="auto">We welcome contributions! If you are interested in contributing to this project, a good place to start is to read our <a href="./CONTRIBUTING.md">How to contribute page</a>.</p>
<p dir="auto">We are dedicated to cultivating an open and inclusive community to build software for near term quantum computers. Please read our code of conduct for the rules of engagement within our community.</p>
<h1 dir="auto">
<a id="user-content-alpha-disclaimer" class="anchor" aria-hidden="true" href="#alpha-disclaimer"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Alpha Disclaimer</h1>
<p dir="auto">Snowflake is currently in alpha. We may change or remove parts of Snowflake's API when making new releases.</p>
<p dir="auto">Copyright (c) 2023 by Snowflake Developers and Anyon Systems, Inc.</p>
</article></div>