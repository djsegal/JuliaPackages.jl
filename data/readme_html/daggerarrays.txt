<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h2><a id="user-content-experimental-distributed-arrays-package" class="anchor" aria-hidden="true" href="#experimental-distributed-arrays-package"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Experimental Distributed Arrays package</h2>
<p>This is an attempt to use Tullio.jl to run tensor expressions on Dagger-based distributed arrays.</p>
<h2><a id="user-content-quick-links" class="anchor" aria-hidden="true" href="#quick-links"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Quick links</h2>
<ul>
<li>You need <a href="https://github.com/shashi/Tullio.jl/tree/s/lowered">this branch</a> of Tullio.jl</li>
<li><a href="https://github.com/JuliaParallel/DaggerArrays.jl/blob/master/src/darray.jl#L15-L24">DArray struct</a> is how we represent a distributed array</li>
<li><a href="https://github.com/JuliaParallel/DaggerArrays.jl/blob/master/src/tullio.jl#L127-L128"><code>@dtullio</code> macro</a> is in this file</li>
</ul>
<h2><a id="user-content-what-works" class="anchor" aria-hidden="true" href="#what-works"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>What works</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using DaggerArrays

julia&gt; A = distribute(reshape(1:24, (4,6)), Blocks(2,3))
4×6 DArray{Int64, 2} with 2×2 chunks

julia&gt; B = distribute(reshape(1:24, (6,4)), Blocks(3,2))
6×4 DArray{Int64, 2} with 2×2 chunks

julia&gt; @dtullio C[i,k] := A[i,j] * B[j,k]
4×4 DArray{Any, 2} with 2×2 chunks
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> DaggerArrays

julia<span class="pl-k">&gt;</span> A <span class="pl-k">=</span> <span class="pl-c1">distribute</span>(<span class="pl-c1">reshape</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">24</span>, (<span class="pl-c1">4</span>,<span class="pl-c1">6</span>)), <span class="pl-c1">Blocks</span>(<span class="pl-c1">2</span>,<span class="pl-c1">3</span>))
<span class="pl-c1">4</span><span class="pl-k">×</span><span class="pl-c1">6</span> DArray{Int64, <span class="pl-c1">2</span>} with <span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">2</span> chunks

julia<span class="pl-k">&gt;</span> B <span class="pl-k">=</span> <span class="pl-c1">distribute</span>(<span class="pl-c1">reshape</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">24</span>, (<span class="pl-c1">6</span>,<span class="pl-c1">4</span>)), <span class="pl-c1">Blocks</span>(<span class="pl-c1">3</span>,<span class="pl-c1">2</span>))
<span class="pl-c1">6</span><span class="pl-k">×</span><span class="pl-c1">4</span> DArray{Int64, <span class="pl-c1">2</span>} with <span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">2</span> chunks

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@dtullio</span> C[i,k] <span class="pl-k">:=</span> A[i,j] <span class="pl-k">*</span> B[j,k]
<span class="pl-c1">4</span><span class="pl-k">×</span><span class="pl-c1">4</span> DArray{Any, <span class="pl-c1">2</span>} with <span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">2</span> chunks</pre></div>
<h2><a id="user-content-what-does-not-work-and-should" class="anchor" aria-hidden="true" href="#what-does-not-work-and-should"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>What does not work (and should)</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; @generated matmul(A, B) = :(@dtullio C[i,k] := A[i,j] * B[j,k])
matmul (generic function with 1 method)

julia&gt; matmul(A,B)
ERROR: The function body AST defined by this @generated function is not pure. This likely means it contains a closure or comprehension.
Stacktrace:
 [1] top-level scope at REPL[24]:1
 [2] run_repl(::REPL.AbstractREPL, ::Any) at /build/julia/src/julia-1.5.2/usr/share/julia/stdlib/v1.5/REPL/src/REPL.jl:288
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">@generated</span> <span class="pl-en">matmul</span>(A, B) <span class="pl-k">=</span> :(<span class="pl-c1">@dtullio</span> C[i,k] <span class="pl-k">:=</span> A[i,j] <span class="pl-k">*</span> B[j,k])
matmul (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">matmul</span>(A,B)
ERROR<span class="pl-k">:</span> The <span class="pl-k">function</span> body AST defined by this <span class="pl-c1">@generated</span> <span class="pl-k">function</span> is not pure. This likely means it contains a closure or comprehension.
Stacktrace<span class="pl-k">:</span>
 [<span class="pl-c1">1</span>] top<span class="pl-k">-</span>level scope at REPL[<span class="pl-c1">24</span>]<span class="pl-k">:</span><span class="pl-c1">1</span>
 [<span class="pl-c1">2</span>] <span class="pl-c1">run_repl</span>(<span class="pl-k">::</span><span class="pl-c1">REPL.AbstractREPL</span>, <span class="pl-k">::</span><span class="pl-c1">Any</span>) at <span class="pl-k">/</span>build<span class="pl-k">/</span>julia<span class="pl-k">/</span>src<span class="pl-k">/</span>julia<span class="pl-k">-</span><span class="pl-c1">1.5</span>.<span class="pl-c1">2</span><span class="pl-k">/</span>usr<span class="pl-k">/</span>share<span class="pl-k">/</span>julia<span class="pl-k">/</span>stdlib<span class="pl-k">/</span>v1.<span class="pl-c1">5</span><span class="pl-k">/</span>REPL<span class="pl-k">/</span>src<span class="pl-k">/</span>REPL<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">288</span></pre></div>
<p>This is required to implement dimension-independent operations</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; A = distribute(reshape(1:24, (4,6)), Blocks(2,3))
4×6 DArray{Int64, 2} with 2×2 chunks

julia&gt; B = distribute(reshape(1:24, (6,4)), Blocks(6,2))
6×4 DArray{Int64, 2} with 1×2 chunks

julia&gt; @dtullio C[i,k] := A[i,j] * B[j,k]
ERROR: range of index j must agree
Stacktrace:
 [1] top-level scope at /home/shashi/.julia/dev/Tullio/src/macro.jl:777
 [2] top-level scope at /home/shashi/.julia/dev/DaggerArrays/src/tullio.jl:103
 [3] run_repl(::REPL.AbstractREPL, ::Any) at /build/julia/src/julia-1.5.2/usr/share/julia/stdlib/v1.5/REPL/src/REPL.jl:288
"><pre>julia<span class="pl-k">&gt;</span> A <span class="pl-k">=</span> <span class="pl-c1">distribute</span>(<span class="pl-c1">reshape</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">24</span>, (<span class="pl-c1">4</span>,<span class="pl-c1">6</span>)), <span class="pl-c1">Blocks</span>(<span class="pl-c1">2</span>,<span class="pl-c1">3</span>))
<span class="pl-c1">4</span><span class="pl-k">×</span><span class="pl-c1">6</span> DArray{Int64, <span class="pl-c1">2</span>} with <span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">2</span> chunks

julia<span class="pl-k">&gt;</span> B <span class="pl-k">=</span> <span class="pl-c1">distribute</span>(<span class="pl-c1">reshape</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">24</span>, (<span class="pl-c1">6</span>,<span class="pl-c1">4</span>)), <span class="pl-c1">Blocks</span>(<span class="pl-c1">6</span>,<span class="pl-c1">2</span>))
<span class="pl-c1">6</span><span class="pl-k">×</span><span class="pl-c1">4</span> DArray{Int64, <span class="pl-c1">2</span>} with <span class="pl-c1">1</span><span class="pl-k">×</span><span class="pl-c1">2</span> chunks

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@dtullio</span> C[i,k] <span class="pl-k">:=</span> A[i,j] <span class="pl-k">*</span> B[j,k]
ERROR<span class="pl-k">:</span> range of index j must agree
Stacktrace<span class="pl-k">:</span>
 [<span class="pl-c1">1</span>] top<span class="pl-k">-</span>level scope at <span class="pl-k">/</span>home<span class="pl-k">/</span>shashi<span class="pl-k">/</span><span class="pl-k">.</span>julia<span class="pl-k">/</span>dev<span class="pl-k">/</span>Tullio<span class="pl-k">/</span>src<span class="pl-k">/</span><span class="pl-k">macro</span><span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">777</span>
 [<span class="pl-c1">2</span>] top<span class="pl-k">-</span>level scope at <span class="pl-k">/</span>home<span class="pl-k">/</span>shashi<span class="pl-k">/</span><span class="pl-k">.</span>julia<span class="pl-k">/</span>dev<span class="pl-k">/</span>DaggerArrays<span class="pl-k">/</span>src<span class="pl-k">/</span>tullio<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">103</span>
 [<span class="pl-c1">3</span>] <span class="pl-c1">run_repl</span>(<span class="pl-k">::</span><span class="pl-c1">REPL.AbstractREPL</span>, <span class="pl-k">::</span><span class="pl-c1">Any</span>) at <span class="pl-k">/</span>build<span class="pl-k">/</span>julia<span class="pl-k">/</span>src<span class="pl-k">/</span>julia<span class="pl-k">-</span><span class="pl-c1">1.5</span>.<span class="pl-c1">2</span><span class="pl-k">/</span>usr<span class="pl-k">/</span>share<span class="pl-k">/</span>julia<span class="pl-k">/</span>stdlib<span class="pl-k">/</span>v1.<span class="pl-c1">5</span><span class="pl-k">/</span>REPL<span class="pl-k">/</span>src<span class="pl-k">/</span>REPL<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">288</span></pre></div>
<p>(Should auto-slice B to match the layout of A)</p>
</article></div>