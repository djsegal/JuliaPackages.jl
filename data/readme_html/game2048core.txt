<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-game2048corejl" class="anchor" aria-hidden="true" href="#game2048corejl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Game2048Core.jl</h1>
<p dir="auto">This is a minimalist implementation of the game 2048. The aim is to have a high-performance backbone. So there aren't any visual components to play the game.</p>
<h2 dir="auto"><a id="user-content-the-environment" class="anchor" aria-hidden="true" href="#the-environment"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>The environment</h2>
<p dir="auto">The board is represented by a <code>UInt64</code> value.</p>
<p dir="auto">I did not use any RL environment framework. But here's how you can play with it.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Game2048Core: initbboard, add_tile, move, left, right, up, down, randmove, simulate_bb
import Game2048Core as g

# obtain a new board with 2 tiles populated
board = initbboard()

# you can move left right up or down
old_board = board
new_board = move(board, g.left)

if board != old_board
    # this will add a new tile on the board
    board = add_tile(new_board)
end

# make a random move
randmove(board)

# simulate the game til the end using purely random moves
simulate_bb(board)"><pre><span class="pl-k">using</span> Game2048Core<span class="pl-k">:</span> initbboard, add_tile, move, left, right, up, down, randmove, simulate_bb
<span class="pl-k">import</span> Game2048Core <span class="pl-k">as</span> g

<span class="pl-c"><span class="pl-c">#</span> obtain a new board with 2 tiles populated</span>
board <span class="pl-k">=</span> <span class="pl-c1">initbboard</span>()

<span class="pl-c"><span class="pl-c">#</span> you can move left right up or down</span>
old_board <span class="pl-k">=</span> board
new_board <span class="pl-k">=</span> <span class="pl-c1">move</span>(board, g<span class="pl-k">.</span>left)

<span class="pl-k">if</span> board <span class="pl-k">!=</span> old_board
    <span class="pl-c"><span class="pl-c">#</span> this will add a new tile on the board</span>
    board <span class="pl-k">=</span> <span class="pl-c1">add_tile</span>(new_board)
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> make a random move</span>
<span class="pl-c1">randmove</span>(board)

<span class="pl-c"><span class="pl-c">#</span> simulate the game til the end using purely random moves</span>
<span class="pl-c1">simulate_bb</span>(board)</pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="4×4 Matrix{Int8}:
 1  2  4  1
 4  5  1  3
 3  7  2  1
 1  3  4  2"><pre class="notranslate"><code>4×4 Matrix{Int8}:
 1  2  4  1
 4  5  1  3
 3  7  2  1
 1  3  4  2
</code></pre></div>
<h2 dir="auto"><a id="user-content-performance" class="anchor" aria-hidden="true" href="#performance"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Performance</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using BenchmarkTools

b = initbboard()

@benchmark move($b, $left)"><pre><span class="pl-k">using</span> BenchmarkTools

b <span class="pl-k">=</span> <span class="pl-c1">initbboard</span>()

<span class="pl-c1">@benchmark</span> <span class="pl-c1">move</span>(<span class="pl-k">$</span>b, <span class="pl-k">$</span>left)</pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="BenchmarkTools.Trial: 10000 samples with 1000 evaluations.
 Range (min … max):  3.400 ns … 46.900 ns  ┊ GC (min … max): 0.00% … 0.00%
 Time  (median):     3.400 ns              ┊ GC (median):    0.00%
 Time  (mean ± σ):   3.480 ns ±  0.708 ns  ┊ GC (mean ± σ):  0.00% ± 0.00%

  █                           █                               
  █▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁█▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▂ ▂
  3.4 ns         Histogram: frequency by time         3.6 ns &lt;

 Memory estimate: 0 bytes, allocs estimate: 0."><pre class="notranslate"><code>BenchmarkTools.Trial: 10000 samples with 1000 evaluations.
 Range (min … max):  3.400 ns … 46.900 ns  ┊ GC (min … max): 0.00% … 0.00%
 Time  (median):     3.400 ns              ┊ GC (median):    0.00%
 Time  (mean ± σ):   3.480 ns ±  0.708 ns  ┊ GC (mean ± σ):  0.00% ± 0.00%

  █                           █                               
  █▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁█▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▂ ▂
  3.4 ns         Histogram: frequency by time         3.6 ns &lt;

 Memory estimate: 0 bytes, allocs estimate: 0.
</code></pre></div>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@benchmark move($b, $right)"><pre><span class="pl-c1">@benchmark</span> <span class="pl-c1">move</span>(<span class="pl-k">$</span>b, <span class="pl-k">$</span>right)</pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="BenchmarkTools.Trial: 10000 samples with 1000 evaluations.
 Range (min … max):  2.700 ns … 29.200 ns  ┊ GC (min … max): 0.00% … 0.00%
 Time  (median):     2.800 ns              ┊ GC (median):    0.00%
 Time  (mean ± σ):   2.796 ns ±  0.552 ns  ┊ GC (mean ± σ):  0.00% ± 0.00%

  ▇                  █                                     ▁ ▁
  █▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁█▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▇▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁█ █
  2.7 ns       Histogram: log(frequency) by time        3 ns &lt;

 Memory estimate: 0 bytes, allocs estimate: 0."><pre class="notranslate"><code>BenchmarkTools.Trial: 10000 samples with 1000 evaluations.
 Range (min … max):  2.700 ns … 29.200 ns  ┊ GC (min … max): 0.00% … 0.00%
 Time  (median):     2.800 ns              ┊ GC (median):    0.00%
 Time  (mean ± σ):   2.796 ns ±  0.552 ns  ┊ GC (mean ± σ):  0.00% ± 0.00%

  ▇                  █                                     ▁ ▁
  █▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁█▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▇▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁█ █
  2.7 ns       Histogram: log(frequency) by time        3 ns &lt;

 Memory estimate: 0 bytes, allocs estimate: 0.
</code></pre></div>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@benchmark move($b, $up)"><pre><span class="pl-c1">@benchmark</span> <span class="pl-c1">move</span>(<span class="pl-k">$</span>b, <span class="pl-k">$</span>up)</pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="BenchmarkTools.Trial: 10000 samples with 1000 evaluations.
 Range (min … max):  4.500 ns … 38.900 ns  ┊ GC (min … max): 0.00% … 0.00%
 Time  (median):     4.600 ns              ┊ GC (median):    0.00%
 Time  (mean ± σ):   4.630 ns ±  0.833 ns  ┊ GC (mean ± σ):  0.00% ± 0.00%

  ▅          █           ▁                                   ▁
  █▁▁▁▁▁▁▁▁▁▁█▁▁▁▁▁▁▁▁▁▁▁█▁▁▁▁▁▁▁▁▁▁█▁▁▁▁▁▁▁▁▁▁▁▅▁▁▁▁▁▁▁▁▁▁▄ █
  4.5 ns       Histogram: log(frequency) by time        5 ns &lt;

 Memory estimate: 0 bytes, allocs estimate: 0."><pre class="notranslate"><code>BenchmarkTools.Trial: 10000 samples with 1000 evaluations.
 Range (min … max):  4.500 ns … 38.900 ns  ┊ GC (min … max): 0.00% … 0.00%
 Time  (median):     4.600 ns              ┊ GC (median):    0.00%
 Time  (mean ± σ):   4.630 ns ±  0.833 ns  ┊ GC (mean ± σ):  0.00% ± 0.00%

  ▅          █           ▁                                   ▁
  █▁▁▁▁▁▁▁▁▁▁█▁▁▁▁▁▁▁▁▁▁▁█▁▁▁▁▁▁▁▁▁▁█▁▁▁▁▁▁▁▁▁▁▁▅▁▁▁▁▁▁▁▁▁▁▄ █
  4.5 ns       Histogram: log(frequency) by time        5 ns &lt;

 Memory estimate: 0 bytes, allocs estimate: 0.
</code></pre></div>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@benchmark move($b, $down)"><pre><span class="pl-c1">@benchmark</span> <span class="pl-c1">move</span>(<span class="pl-k">$</span>b, <span class="pl-k">$</span>down)</pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="BenchmarkTools.Trial: 10000 samples with 1000 evaluations.
 Range (min … max):  4.800 ns … 38.800 ns  ┊ GC (min … max): 0.00% … 0.00%
 Time  (median):     4.800 ns              ┊ GC (median):    0.00%
 Time  (mean ± σ):   4.872 ns ±  0.913 ns  ┊ GC (mean ± σ):  0.00% ± 0.00%

  █                  ▆                  ▁                    ▁
  █▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁█▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁█▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▇ █
  4.8 ns       Histogram: log(frequency) by time      5.1 ns &lt;

 Memory estimate: 0 bytes, allocs estimate: 0."><pre class="notranslate"><code>BenchmarkTools.Trial: 10000 samples with 1000 evaluations.
 Range (min … max):  4.800 ns … 38.800 ns  ┊ GC (min … max): 0.00% … 0.00%
 Time  (median):     4.800 ns              ┊ GC (median):    0.00%
 Time  (mean ± σ):   4.872 ns ±  0.913 ns  ┊ GC (mean ± σ):  0.00% ± 0.00%

  █                  ▆                  ▁                    ▁
  █▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁█▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁█▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▇ █
  4.8 ns       Histogram: log(frequency) by time      5.1 ns &lt;

 Memory estimate: 0 bytes, allocs estimate: 0.
</code></pre></div>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@benchmark simulate_bb($board)"><pre><span class="pl-c1">@benchmark</span> <span class="pl-c1">simulate_bb</span>(<span class="pl-k">$</span>board)</pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="BenchmarkTools.Trial: 10000 samples with 1 evaluation.
 Range (min … max):   2.800 μs …  3.577 ms  ┊ GC (min … max): 0.00% … 98.69
%
 Time  (median):     11.200 μs              ┊ GC (median):    0.00%
 Time  (mean ± σ):   12.377 μs ± 36.046 μs  ┊ GC (mean ± σ):  2.85% ±  0.99
%

           ▂▃▇▄▃▆▄▅▅█▅▇▅▇▂▂▁                                   
  ▁▁▁▂▃▃▄▇██████████████████▇▆▇█▆▇▆█▅▅▅▃▃▂▃▂▂▂▂▂▂▂▂▁▁▂▁▁▁▁▁▁▁ ▄
  2.8 μs          Histogram: frequency by time          28 μs &lt;

 Memory estimate: 2.58 KiB, allocs estimate: 33."><pre class="notranslate"><code>BenchmarkTools.Trial: 10000 samples with 1 evaluation.
 Range (min … max):   2.800 μs …  3.577 ms  ┊ GC (min … max): 0.00% … 98.69
%
 Time  (median):     11.200 μs              ┊ GC (median):    0.00%
 Time  (mean ± σ):   12.377 μs ± 36.046 μs  ┊ GC (mean ± σ):  2.85% ±  0.99
%

           ▂▃▇▄▃▆▄▅▅█▅▇▅▇▂▂▁                                   
  ▁▁▁▂▃▃▄▇██████████████████▇▆▇█▆▇▆█▅▅▅▃▃▂▃▂▂▂▂▂▂▂▂▁▁▂▁▁▁▁▁▁▁ ▄
  2.8 μs          Histogram: frequency by time          28 μs &lt;

 Memory estimate: 2.58 KiB, allocs estimate: 33.
</code></pre></div>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@benchmark simulate_bb()"><pre><span class="pl-c1">@benchmark</span> <span class="pl-c1">simulate_bb</span>()</pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="BenchmarkTools.Trial: 10000 samples with 3 evaluations.
 Range (min … max):   4.900 μs …  1.096 ms  ┊ GC (min … max): 0.00% … 98.41
%
 Time  (median):     10.350 μs              ┊ GC (median):    0.00%
 Time  (mean ± σ):   11.232 μs ± 21.695 μs  ┊ GC (mean ± σ):  3.80% ±  1.97
%

               ▂▄▄▄█▆█▆▇█▇▅▄▄▃▃▃                               
  ▁▁▁▁▁▂▃▃▄▅▆█████████████████████▇▇▆▇▅▅▄▄▃▄▃▃▃▂▂▂▂▂▂▂▂▂▁▁▂▁▁ ▄
  4.9 μs          Histogram: frequency by time          19 μs &lt;

 Memory estimate: 4.53 KiB, allocs estimate: 58."><pre class="notranslate"><code>BenchmarkTools.Trial: 10000 samples with 3 evaluations.
 Range (min … max):   4.900 μs …  1.096 ms  ┊ GC (min … max): 0.00% … 98.41
%
 Time  (median):     10.350 μs              ┊ GC (median):    0.00%
 Time  (mean ± σ):   11.232 μs ± 21.695 μs  ┊ GC (mean ± σ):  3.80% ±  1.97
%

               ▂▄▄▄█▆█▆▇█▇▅▄▄▃▃▃                               
  ▁▁▁▁▁▂▃▃▄▅▆█████████████████████▇▇▆▇▅▅▄▄▃▄▃▃▃▂▂▂▂▂▂▂▂▂▁▁▂▁▁ ▄
  4.9 μs          Histogram: frequency by time          19 μs &lt;

 Memory estimate: 4.53 KiB, allocs estimate: 58.
</code></pre></div>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@benchmark randmove($board)"><pre><span class="pl-c1">@benchmark</span> <span class="pl-c1">randmove</span>(<span class="pl-k">$</span>board)</pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="BenchmarkTools.Trial: 10000 samples with 990 evaluations.
 Range (min … max):  46.566 ns …   3.521 μs  ┊ GC (min … max): 0.00% … 97.9
2%
 Time  (median):     47.879 ns               ┊ GC (median):    0.00%
 Time  (mean ± σ):   56.294 ns ± 116.969 ns  ┊ GC (mean ± σ):  7.40% ±  3.5
2%

  ▆█▄▂▃▂▂▂▁▁▁              ▂▂       ▁▂▁                        ▁
  █████████████▇▇▆▆▆▆▇▅▆▆▅▇██▇▇▆▆▆▆█████▇▆▄▄▅▄▅▅▃▄▅▅▄▃▃▃▄▄▃▃▃▄ █
  46.6 ns       Histogram: log(frequency) by time      96.8 ns &lt;

 Memory estimate: 80 bytes, allocs estimate: 1."><pre class="notranslate"><code>BenchmarkTools.Trial: 10000 samples with 990 evaluations.
 Range (min … max):  46.566 ns …   3.521 μs  ┊ GC (min … max): 0.00% … 97.9
2%
 Time  (median):     47.879 ns               ┊ GC (median):    0.00%
 Time  (mean ± σ):   56.294 ns ± 116.969 ns  ┊ GC (mean ± σ):  7.40% ±  3.5
2%

  ▆█▄▂▃▂▂▂▁▁▁              ▂▂       ▁▂▁                        ▁
  █████████████▇▇▆▆▆▆▇▅▆▆▅▇██▇▇▆▆▆▆█████▇▆▄▄▅▄▅▅▃▄▅▅▄▃▃▃▄▄▃▃▃▄ █
  46.6 ns       Histogram: log(frequency) by time      96.8 ns &lt;

 Memory estimate: 80 bytes, allocs estimate: 1.
</code></pre></div>
</article></div>