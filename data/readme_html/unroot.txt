<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-unrootjl" class="anchor" aria-hidden="true" href="#unrootjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>UnROOT.jl</h1>
<p><a href="https://tamasgal.github.io/UnROOT.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/f7b92a177c912c1cc007fc9b40f17ff3ee3bb414/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://tamasgal.github.io/UnROOT.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/3e353c26ddfe819150acbc732248f4f2a37f5175/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a>
<a href="https://travis-ci.com/tamasgal/UnROOT.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/135fd7476836cb70070375a695e549495e6505b4/68747470733a2f2f7472617669732d63692e636f6d2f74616d617367616c2f556e524f4f542e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/tamasgal/UnROOT.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/tamasgal/UnROOT.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/14d520e4d590fe421225c01cab8009474e71a2ef/68747470733a2f2f636f6465636f762e696f2f67682f74616d617367616c2f556e524f4f542e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/tamasgal/UnROOT.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p>UnROOT.jl is a (WIP) reader for the <a href="https://root.cern" rel="nofollow">CERN ROOT</a> file format
written entirely in Julia, without depending on any official ROOT libraries.
In contrast to the C++ ROOT framework, this package focuses only on I/O.</p>
<p>While the ROOT documentation does not contain a detailed description of the
binary structure, the format can be triangulated by other packages like</p>
<ul>
<li><a href="https://github.com/scikit-hep/uproot">uproot</a> (Python)</li>
<li><a href="https://godoc.org/go-hep.org/x/hep/groot#hdr-File_layout" rel="nofollow">groot</a> (Go)</li>
<li><a href="https://github.com/cbourjau/alice-rs/tree/master/root-io">root-io</a> (Rust)</li>
<li><a href="https://github.com/spark-root/laurelin">Laurelin</a> (Java)</li>
<li><a href="https://github.com/root-project/root">ROOT</a> (Official C++ implementation)</li>
</ul>
<p>Here is also a short discussion about the <a href="https://github.com/scikit-hep/uproot/issues/401">ROOT binary format
documentation</a></p>
<h2><a id="user-content-status" class="anchor" aria-hidden="true" href="#status"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Status</h2>
<p>The project is in early alpha prototyping phase and contributions are very
welcome.</p>
<p>Reading of raw basket data is already working for uncompressed and
Zlib-compressed files. The raw data consists of two vectors: the bytes
and the offsets and are available using the
<code>UnROOT.array(f::ROOTFile, path; raw=true)</code> method. This data can
be reinterpreted using a custom type with the method
<code>UnROOT.splitup(data, offsets, T::Type; skipbytes=0)</code>.</p>
<p>Everything is in a very early alpha stage, as mentioned above.</p>
<p>Here is a quick demo of reading a simple branch containing a vector of integers
using the preliminary high-level API, which works for non-jagged branches
(simple vectors of primitive types):</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> UnROOT

julia<span class="pl-k">&gt;</span> f <span class="pl-k">=</span> <span class="pl-c1">ROOTFile</span>(<span class="pl-s"><span class="pl-pds">"</span>test/samples/tree_with_histos.root<span class="pl-pds">"</span></span>)
<span class="pl-c1">ROOTFile</span>(<span class="pl-s"><span class="pl-pds">"</span>test/samples/tree_with_histos.root<span class="pl-pds">"</span></span>) with <span class="pl-c1">1</span> entry and <span class="pl-c1">4</span> streamers.

julia<span class="pl-k">&gt;</span> <span class="pl-c1">array</span>(f, <span class="pl-s"><span class="pl-pds">"</span>t1/mynum<span class="pl-pds">"</span></span>)
<span class="pl-c1">25</span><span class="pl-k">-</span>element Array{Int32,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
  <span class="pl-c1">0</span>
  <span class="pl-c1">1</span>
  <span class="pl-c1">2</span>
  <span class="pl-c1">3</span>
  <span class="pl-c1">4</span>
  <span class="pl-c1">5</span>
  <span class="pl-c1">6</span>
  <span class="pl-c1">7</span>
  <span class="pl-c1">8</span>
  <span class="pl-c1">9</span>
 <span class="pl-c1">10</span>
 <span class="pl-c1">10</span>
 <span class="pl-c1">10</span>
 <span class="pl-c1">10</span>
 <span class="pl-c1">10</span>
 <span class="pl-c1">10</span>
 <span class="pl-c1">10</span>
 <span class="pl-c1">10</span>
 <span class="pl-c1">10</span>
 <span class="pl-c1">10</span>
 <span class="pl-c1">10</span>
 <span class="pl-c1">10</span>
 <span class="pl-c1">10</span>
 <span class="pl-c1">10</span>
 <span class="pl-c1">10</span></pre></div>
<p>There is also a <code>raw</code> keyword which you can pass to <code>array()</code>, so it will skip
the interpretation and return the raw bytes. This is similar to <code>uproot.asdebug</code>
and can be used to read data where the streamers are not available (yet).
Here is it in action, using some data from the KM3NeT experiment:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> UnROOT

julia<span class="pl-k">&gt;</span> f <span class="pl-k">=</span> <span class="pl-c1">ROOTFile</span>(<span class="pl-s"><span class="pl-pds">"</span>test/samples/km3net_online.root<span class="pl-pds">"</span></span>)
<span class="pl-c1">ROOTFile</span>(<span class="pl-s"><span class="pl-pds">"</span>test/samples/km3net_online.root<span class="pl-pds">"</span></span>) with <span class="pl-c1">10</span> entries and <span class="pl-c1">41</span> streamers.

julia<span class="pl-k">&gt;</span> <span class="pl-c1">array</span>(f, <span class="pl-s"><span class="pl-pds">"</span>KM3NET_EVENT/KM3NET_EVENT/triggeredHits<span class="pl-pds">"</span></span>; raw<span class="pl-k">=</span><span class="pl-c1">true</span>)
<span class="pl-c1">2058</span><span class="pl-k">-</span>element Array{UInt8,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">0x00</span>
 <span class="pl-c1">0x03</span>
 <span class="pl-c1">0x00</span>
 <span class="pl-c1">0x01</span>
 <span class="pl-c1">0x00</span>
   â‹®
 <span class="pl-c1">0x56</span>
 <span class="pl-c1">0x45</span>
 <span class="pl-c1">0x4e</span>
 <span class="pl-c1">0x54</span>
 <span class="pl-c1">0x00</span></pre></div>
<p>This is what happens behind the scenes with some additional debug output:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> UnROOT

julia<span class="pl-k">&gt;</span> f <span class="pl-k">=</span> <span class="pl-c1">ROOTFile</span>(<span class="pl-s"><span class="pl-pds">"</span>test/samples/tree_with_histos.root<span class="pl-pds">"</span></span>)
Compressed stream at <span class="pl-c1">1509</span>
<span class="pl-c1">ROOTFile</span>(<span class="pl-s"><span class="pl-pds">"</span>test/samples/tree_with_histos.root<span class="pl-pds">"</span></span>) with <span class="pl-c1">1</span> entry and <span class="pl-c1">4</span> streamers.

julia<span class="pl-k">&gt;</span> <span class="pl-c1">keys</span>(f)
<span class="pl-c1">1</span><span class="pl-k">-</span>element Array{String,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-s"><span class="pl-pds">"</span>t1<span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">keys</span>(f[<span class="pl-s"><span class="pl-pds">"</span>t1<span class="pl-pds">"</span></span>])
Compressed datastream of <span class="pl-c1">1317</span> bytes at <span class="pl-c1">1509</span> (TKey <span class="pl-s"><span class="pl-pds">'</span>t1<span class="pl-pds">'</span></span> (TTree))
<span class="pl-c1">2</span><span class="pl-k">-</span>element Array{String,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-s"><span class="pl-pds">"</span>mynum<span class="pl-pds">"</span></span>
 <span class="pl-s"><span class="pl-pds">"</span>myval<span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> f[<span class="pl-s"><span class="pl-pds">"</span>t1<span class="pl-pds">"</span></span>][<span class="pl-s"><span class="pl-pds">"</span>mynum<span class="pl-pds">"</span></span>]
Compressed datastream of <span class="pl-c1">1317</span> bytes at <span class="pl-c1">6180</span> (TKey <span class="pl-s"><span class="pl-pds">'</span>t1<span class="pl-pds">'</span></span> (TTree))
UnROOT<span class="pl-k">.</span>TBranch
  cursor<span class="pl-k">:</span> UnROOT<span class="pl-k">.</span>Cursor
  fName<span class="pl-k">:</span> String <span class="pl-s"><span class="pl-pds">"</span>mynum<span class="pl-pds">"</span></span>
  fTitle<span class="pl-k">:</span> String <span class="pl-s"><span class="pl-pds">"</span>mynum/I<span class="pl-pds">"</span></span>
  fFillColor<span class="pl-k">:</span> Int16 <span class="pl-c1">0</span>
  fFillStyle<span class="pl-k">:</span> Int16 <span class="pl-c1">1001</span>
  fCompress<span class="pl-k">:</span> Int32 <span class="pl-c1">101</span>
  fBasketSize<span class="pl-k">:</span> Int32 <span class="pl-c1">32000</span>
  fEntryOffsetLen<span class="pl-k">:</span> Int32 <span class="pl-c1">0</span>
  fWriteBasket<span class="pl-k">:</span> Int32 <span class="pl-c1">1</span>
  fEntryNumber<span class="pl-k">:</span> Int64 <span class="pl-c1">25</span>
  fIOFeatures<span class="pl-k">:</span> UnROOT<span class="pl-k">.</span>ROOT_3a3a_TIOFeatures
  fOffset<span class="pl-k">:</span> Int32 <span class="pl-c1">0</span>
  fMaxBaskets<span class="pl-k">:</span> UInt32 <span class="pl-c1">0x0000000a</span>
  fSplitLevel<span class="pl-k">:</span> Int32 <span class="pl-c1">0</span>
  fEntries<span class="pl-k">:</span> Int64 <span class="pl-c1">25</span>
  fFirstEntry<span class="pl-k">:</span> Int64 <span class="pl-c1">0</span>
  fTotBytes<span class="pl-k">:</span> Int64 <span class="pl-c1">170</span>
  fZipBytes<span class="pl-k">:</span> Int64 <span class="pl-c1">116</span>
  fBranches<span class="pl-k">:</span> UnROOT<span class="pl-k">.</span>TObjArray
  fLeaves<span class="pl-k">:</span> UnROOT<span class="pl-k">.</span>TObjArray
  fBaskets<span class="pl-k">:</span> UnROOT<span class="pl-k">.</span>TObjArray
  fBasketBytes<span class="pl-k">:</span> <span class="pl-c1">Array</span><span class="pl-c1">{Int32}</span>((<span class="pl-c1">10</span>,)) Int32[<span class="pl-c1">116</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>]
  fBasketEntry<span class="pl-k">:</span> <span class="pl-c1">Array</span><span class="pl-c1">{Int64}</span>((<span class="pl-c1">10</span>,)) [<span class="pl-c1">0</span>, <span class="pl-c1">25</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>]
  fBasketSeek<span class="pl-k">:</span> <span class="pl-c1">Array</span><span class="pl-c1">{Int64}</span>((<span class="pl-c1">10</span>,)) [<span class="pl-c1">238</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>]
  fFileName<span class="pl-k">:</span> String <span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>


julia<span class="pl-k">&gt;</span> <span class="pl-c1">seek</span>(f<span class="pl-k">.</span>fobj, <span class="pl-c1">238</span>)
<span class="pl-c1">IOStream</span>(<span class="pl-k">&lt;</span>file test<span class="pl-k">/</span>samples<span class="pl-k">/</span>tree_with_histos<span class="pl-k">.</span>root<span class="pl-k">&gt;</span>)

julia<span class="pl-k">&gt;</span> basketkey <span class="pl-k">=</span> UnROOT<span class="pl-k">.</span><span class="pl-c1">unpack</span>(f<span class="pl-k">.</span>fobj, UnROOT<span class="pl-k">.</span>TKey)
UnROOT<span class="pl-k">.</span><span class="pl-c1">TKey64</span>(<span class="pl-c1">116</span>, <span class="pl-c1">1004</span>, <span class="pl-c1">100</span>, <span class="pl-c1">0x6526eafb</span>, <span class="pl-c1">70</span>, <span class="pl-c1">0</span>, <span class="pl-c1">238</span>, <span class="pl-c1">100</span>, <span class="pl-s"><span class="pl-pds">"</span>TBasket<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>mynum<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>t1<span class="pl-pds">"</span></span>)

julia<span class="pl-k">&gt;</span> s <span class="pl-k">=</span> UnROOT<span class="pl-k">.</span><span class="pl-c1">datastream</span>(f<span class="pl-k">.</span>fobj, basketkey)
Compressed datastream of <span class="pl-c1">100</span> bytes at <span class="pl-c1">289</span> (TKey <span class="pl-s"><span class="pl-pds">'</span>mynum<span class="pl-pds">'</span></span> (TBasket))
<span class="pl-c1">IOBuffer</span>(data<span class="pl-k">=</span>UInt8[<span class="pl-k">...</span>], readable<span class="pl-k">=</span><span class="pl-c1">true</span>, writable<span class="pl-k">=</span><span class="pl-c1">false</span>, seekable<span class="pl-k">=</span><span class="pl-c1">true</span>, append<span class="pl-k">=</span><span class="pl-c1">false</span>, size<span class="pl-k">=</span><span class="pl-c1">100</span>, maxsize<span class="pl-k">=</span><span class="pl-c1">Inf</span>, ptr<span class="pl-k">=</span><span class="pl-c1">1</span>, mark<span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">1</span>)

julia<span class="pl-k">&gt;</span> [UnROOT<span class="pl-k">.</span><span class="pl-c1">readtype</span>(s, Int32) <span class="pl-k">for</span> _ <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span>f[<span class="pl-s"><span class="pl-pds">"</span>t1<span class="pl-pds">"</span></span>][<span class="pl-s"><span class="pl-pds">"</span>mynum<span class="pl-pds">"</span></span>]<span class="pl-k">.</span>fEntries]
Compressed datastream of <span class="pl-c1">1317</span> bytes at <span class="pl-c1">6180</span> (TKey <span class="pl-s"><span class="pl-pds">'</span>t1<span class="pl-pds">'</span></span> (TTree))
<span class="pl-c1">25</span><span class="pl-k">-</span>element Array{Int32,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
  <span class="pl-c1">0</span>
  <span class="pl-c1">1</span>
  <span class="pl-c1">2</span>
  <span class="pl-c1">3</span>
  <span class="pl-c1">4</span>
  <span class="pl-c1">5</span>
  <span class="pl-c1">6</span>
  <span class="pl-c1">7</span>
  <span class="pl-c1">8</span>
  <span class="pl-c1">9</span>
 <span class="pl-c1">10</span>
 <span class="pl-c1">10</span>
 <span class="pl-c1">10</span>
 <span class="pl-c1">10</span>
 <span class="pl-c1">10</span>
 <span class="pl-c1">10</span>
 <span class="pl-c1">10</span>
 <span class="pl-c1">10</span>
 <span class="pl-c1">10</span>
 <span class="pl-c1">10</span>
 <span class="pl-c1">10</span>
 <span class="pl-c1">10</span>
 <span class="pl-c1">10</span>
 <span class="pl-c1">10</span>
 <span class="pl-c1">10</span></pre></div>
<h2><a id="user-content-main-challenges" class="anchor" aria-hidden="true" href="#main-challenges"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Main challenges</h2>
<ul>
<li>ROOT data is generally stored as big endian and is a
self-descriptive format, i.e. so-called streamers are stored in the files
which describe the actual structure of the data in the corresponding branches.
These streamers are read during runtime and need to be used to generate
Julia structs and <code>unpack</code> methods on the fly.</li>
<li>Performance is very important for a low level I/O library.</li>
</ul>
<h2><a id="user-content-low-hanging-fruits" class="anchor" aria-hidden="true" href="#low-hanging-fruits"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Low hanging fruits</h2>
<p>Pick one ;)</p>
<ul class="contains-task-list">
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> Parsing the file header</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> Read the <code>TKey</code>s of the top level dictionary</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> Reading the available trees</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> Reading the available streamers</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> Reading a simple dataset with primitive streamers</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> Reading of raw basket bytes for debugging</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> Automatically generate streamer logic</li>
</ul>
<h2><a id="user-content-acknowledgements" class="anchor" aria-hidden="true" href="#acknowledgements"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Acknowledgements</h2>
<p>Special thanks to Jim Pivarski (<a href="https://github.com/jpivarski">@jpivarski</a>)
from the <a href="https://github.com/scikit-hep">Scikit-HEP</a> project, who is the
main author of <a href="https://github.com/scikit-hep/uproot">uproot</a>, a native
Python library to read and write ROOT files, which was and is a great source
of inspiration and information for reverse engineering the ROOT binary
structures.</p>
</article></div>