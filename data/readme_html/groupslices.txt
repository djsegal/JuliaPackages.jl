<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-groupslicesjl" class="anchor" aria-hidden="true" href="#groupslicesjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>GroupSlices.jl</h1>
<p dir="auto"><a href="https://travis-ci.org/mcabbott/GroupSlices.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/1e9b9d36ba240099ea5e6d1f7233aa068eff1a867279d5c4c7f2b33259d03ac9/68747470733a2f2f7472617669732d63692e6f72672f6d636162626f74742f47726f7570536c696365732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/mcabbott/GroupSlices.jl.svg?branch=master" style="max-width: 100%;"></a></p>
<p dir="auto">The function <code>groupslices</code> is related to <code>unique</code>, but instead of returning the unique elements,
it returns a list of indices showing where an equivalent entry first appeared. Like this:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="(v1.2) pkg&gt; add GroupSlices

julia&gt; using GroupSlices

julia&gt; V = rand('α':'γ', 5)
5-element Array{Char,1}:
 'β'
 'β'
 'γ'
 'α'
 'β'

julia&gt; groupslices(V)
5-element Array{Int64,1}:
 1
 1
 3
 4
 1

julia&gt; unique(V)
3-element Array{Char,1}:
 'β'
 'γ'
 'α'

julia&gt; M = rand(2:4, 2,13)
2×13 Array{Int64,2}:
 2  2  3  3  3  4  2  2  2  4  3  2  4
 4  4  4  4  4  4  3  4  3  2  3  4  2

julia&gt; groupslices(M, dims=2) |&gt; transpose
1×13 LinearAlgebra.Transpose{Int64,Array{Int64,1}}:
 1  1  3  3  3  6  7  1  7  10  11  1  10

julia&gt; unique(M, dims=2)
2×6 Array{Int64,2}:
 2  3  4  2  4  3
 4  4  4  3  2  3"><pre>(v1.<span class="pl-c1">2</span>) pkg<span class="pl-k">&gt;</span> add GroupSlices

julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> GroupSlices

julia<span class="pl-k">&gt;</span> V <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-s"><span class="pl-pds">'</span>α<span class="pl-pds">'</span></span>:<span class="pl-s"><span class="pl-pds">'</span>γ<span class="pl-pds">'</span></span>, <span class="pl-c1">5</span>)
<span class="pl-c1">5</span><span class="pl-k">-</span>element Array{Char,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-s"><span class="pl-pds">'</span>β<span class="pl-pds">'</span></span>
 <span class="pl-s"><span class="pl-pds">'</span>β<span class="pl-pds">'</span></span>
 <span class="pl-s"><span class="pl-pds">'</span>γ<span class="pl-pds">'</span></span>
 <span class="pl-s"><span class="pl-pds">'</span>α<span class="pl-pds">'</span></span>
 <span class="pl-s"><span class="pl-pds">'</span>β<span class="pl-pds">'</span></span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">groupslices</span>(V)
<span class="pl-c1">5</span><span class="pl-k">-</span>element Array{Int64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">1</span>
 <span class="pl-c1">1</span>
 <span class="pl-c1">3</span>
 <span class="pl-c1">4</span>
 <span class="pl-c1">1</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">unique</span>(V)
<span class="pl-c1">3</span><span class="pl-k">-</span>element Array{Char,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-s"><span class="pl-pds">'</span>β<span class="pl-pds">'</span></span>
 <span class="pl-s"><span class="pl-pds">'</span>γ<span class="pl-pds">'</span></span>
 <span class="pl-s"><span class="pl-pds">'</span>α<span class="pl-pds">'</span></span>

julia<span class="pl-k">&gt;</span> M <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">4</span>, <span class="pl-c1">2</span>,<span class="pl-c1">13</span>)
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">13</span> Array{Int64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">2</span>  <span class="pl-c1">2</span>  <span class="pl-c1">3</span>  <span class="pl-c1">3</span>  <span class="pl-c1">3</span>  <span class="pl-c1">4</span>  <span class="pl-c1">2</span>  <span class="pl-c1">2</span>  <span class="pl-c1">2</span>  <span class="pl-c1">4</span>  <span class="pl-c1">3</span>  <span class="pl-c1">2</span>  <span class="pl-c1">4</span>
 <span class="pl-c1">4</span>  <span class="pl-c1">4</span>  <span class="pl-c1">4</span>  <span class="pl-c1">4</span>  <span class="pl-c1">4</span>  <span class="pl-c1">4</span>  <span class="pl-c1">3</span>  <span class="pl-c1">4</span>  <span class="pl-c1">3</span>  <span class="pl-c1">2</span>  <span class="pl-c1">3</span>  <span class="pl-c1">4</span>  <span class="pl-c1">2</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">groupslices</span>(M, dims<span class="pl-k">=</span><span class="pl-c1">2</span>) <span class="pl-k">|&gt;</span> transpose
<span class="pl-c1">1</span><span class="pl-k">×</span><span class="pl-c1">13</span> LinearAlgebra<span class="pl-k">.</span>Transpose{Int64,Array{Int64,<span class="pl-c1">1</span>}}<span class="pl-k">:</span>
 <span class="pl-c1">1</span>  <span class="pl-c1">1</span>  <span class="pl-c1">3</span>  <span class="pl-c1">3</span>  <span class="pl-c1">3</span>  <span class="pl-c1">6</span>  <span class="pl-c1">7</span>  <span class="pl-c1">1</span>  <span class="pl-c1">7</span>  <span class="pl-c1">10</span>  <span class="pl-c1">11</span>  <span class="pl-c1">1</span>  <span class="pl-c1">10</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">unique</span>(M, dims<span class="pl-k">=</span><span class="pl-c1">2</span>)
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">6</span> Array{Int64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">2</span>  <span class="pl-c1">3</span>  <span class="pl-c1">4</span>  <span class="pl-c1">2</span>  <span class="pl-c1">4</span>  <span class="pl-c1">3</span>
 <span class="pl-c1">4</span>  <span class="pl-c1">4</span>  <span class="pl-c1">4</span>  <span class="pl-c1">3</span>  <span class="pl-c1">2</span>  <span class="pl-c1">3</span></pre></div>
<p dir="auto">This package was written by <a href="https://github.com/AndyGreenwell/GroupSlices.jl">AndyGreenwell</a>
in 2015, originally for Julia PRs <a href="https://github.com/JuliaLang/julia/pull/14142" data-hovercard-type="pull_request" data-hovercard-url="/JuliaLang/julia/pull/14142/hovercard">#14142</a> and <a href="https://github.com/JuliaLang/julia/pull/15503" data-hovercard-type="pull_request" data-hovercard-url="/JuliaLang/julia/pull/15503/hovercard">#15503</a>.</p>
<p dir="auto">My fork is now the registered version. It has minimal changes to make it work on Julia 1.0,
and to accept keywords like <code>dims=2</code> (although <code>groupslices(M,2)</code> will also still work).</p>
<p dir="auto">See <a href="https://github.com/JuliaLang/julia/issues/1845" data-hovercard-type="issue" data-hovercard-url="/JuliaLang/julia/issues/1845/hovercard">JuliaLang/julia#1845</a> for discussion of possible replacements.</p>
</article></div>