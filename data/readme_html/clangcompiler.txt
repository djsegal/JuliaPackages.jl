<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-clangcompiler" class="anchor" aria-hidden="true" href="#clangcompiler"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>ClangCompiler</h1>
<p dir="auto"><a href="https://github.com/Gnimuc/ClangCompiler.jl/actions/workflows/CI.yml"><img src="https://github.com/Gnimuc/ClangCompiler.jl/actions/workflows/CI.yml/badge.svg" alt="CI" style="max-width: 100%;"></a>
<a href="https://github.com/Gnimuc/ClangCompiler.jl/actions/workflows/TagBot.yml"><img src="https://github.com/Gnimuc/ClangCompiler.jl/actions/workflows/TagBot.yml/badge.svg" alt="TagBot" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/Gnimuc/ClangCompiler.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/8cd211cd84582db7a69cd31bbd53fecf8e53b7fc1b6eb4e5acee5a1498be634c/68747470733a2f2f636f6465636f762e696f2f67682f476e696d75632f436c616e67436f6d70696c65722e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/Gnimuc/ClangCompiler.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">Still WIP...</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">Make sure you don't have <code>LIBCLANGEX_INSTALL_PREFIX</code> in your environment variable.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="pkg&gt; add https://github.com/Gnimuc/ClangCompiler.jl.git"><pre class="notranslate"><code>pkg&gt; add https://github.com/Gnimuc/ClangCompiler.jl.git
</code></pre></div>
<h3 dir="auto"><a id="user-content-developmentmacos-and-linux" class="anchor" aria-hidden="true" href="#developmentmacos-and-linux"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Development(macOS and Linux)</h3>
<ol dir="auto">
<li>Build <a href="https://github.com/Gnimuc/libclangex">libclangex</a> locally and set <code>ENV["LIBCLANGEX_INSTALL_PREFIX"]</code> to the <code>install</code> directory.</li>
<li>Install and test the package by running:</li>
</ol>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="pkg&gt; dev https://github.com/Gnimuc/ClangCompiler.jl.git

pkg&gt; test ClangCompiler"><pre lang="julia-repl" class="notranslate"><code>pkg&gt; dev https://github.com/Gnimuc/ClangCompiler.jl.git

pkg&gt; test ClangCompiler
</code></pre></div>
<h2 dir="auto"><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Examples</h2>
<h3 dir="auto"><a id="user-content-decl-lookup" class="anchor" aria-hidden="true" href="#decl-lookup"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Decl Lookup</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using ClangCompiler

# source file
src = joinpath(dirname(pathof(ClangCompiler)), &quot;..&quot;, &quot;examples&quot;, &quot;sample.cpp&quot;)

# compilation flags
args = get_compiler_args()

cc = ClangCompiler.IncrementalIRGenerator(src, args)

decl_lookup = DeclFinder(cc.instance)

@assert decl_lookup(cc, &quot;vector&quot;, &quot;std::vector&quot;)

decl = get_decl(decl_lookup)
dump(decl)

# clean up
dispose(decl_lookup)
dispose(cc)"><pre><span class="pl-k">using</span> ClangCompiler

<span class="pl-c"><span class="pl-c">#</span> source file</span>
src <span class="pl-k">=</span> <span class="pl-c1">joinpath</span>(<span class="pl-c1">dirname</span>(<span class="pl-c1">pathof</span>(ClangCompiler)), <span class="pl-s"><span class="pl-pds">"</span>..<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>examples<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>sample.cpp<span class="pl-pds">"</span></span>)

<span class="pl-c"><span class="pl-c">#</span> compilation flags</span>
args <span class="pl-k">=</span> <span class="pl-c1">get_compiler_args</span>()

cc <span class="pl-k">=</span> ClangCompiler<span class="pl-k">.</span><span class="pl-c1">IncrementalIRGenerator</span>(src, args)

decl_lookup <span class="pl-k">=</span> <span class="pl-c1">DeclFinder</span>(cc<span class="pl-k">.</span>instance)

<span class="pl-c1">@assert</span> <span class="pl-c1">decl_lookup</span>(cc, <span class="pl-s"><span class="pl-pds">"</span>vector<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>std::vector<span class="pl-pds">"</span></span>)

decl <span class="pl-k">=</span> <span class="pl-c1">get_decl</span>(decl_lookup)
<span class="pl-c1">dump</span>(decl)

<span class="pl-c"><span class="pl-c">#</span> clean up</span>
<span class="pl-c1">dispose</span>(decl_lookup)
<span class="pl-c1">dispose</span>(cc)</pre></div>
<h3 dir="auto"><a id="user-content-jit-experimental" class="anchor" aria-hidden="true" href="#jit-experimental"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>JIT (experimental)</h3>
<p dir="auto">The following example is only tested on macOS.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using ClangCompiler
using ClangCompiler.LLVM

# source file
src = joinpath(dirname(pathof(ClangCompiler)), &quot;..&quot;, &quot;examples&quot;, &quot;sample.cpp&quot;)

# compilation flags
args = get_compiler_args()

# create JIT
jit = LLJIT(;tm=JITTargetMachine())

# generate LLVM IR
irgen = IRGenerator(src, args)

# compile and link
cc = CXCompiler(irgen, jit)
link_process_symbols(cc)
compile(cc)

# lookup and call the main function 
addr = lookup(jit, &quot;main&quot;)
@eval main() = ccall($(pointer(addr)), Cint, ())

main()

# clean up
dispose(cc)"><pre><span class="pl-k">using</span> ClangCompiler
<span class="pl-k">using</span> ClangCompiler<span class="pl-k">.</span>LLVM

<span class="pl-c"><span class="pl-c">#</span> source file</span>
src <span class="pl-k">=</span> <span class="pl-c1">joinpath</span>(<span class="pl-c1">dirname</span>(<span class="pl-c1">pathof</span>(ClangCompiler)), <span class="pl-s"><span class="pl-pds">"</span>..<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>examples<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>sample.cpp<span class="pl-pds">"</span></span>)

<span class="pl-c"><span class="pl-c">#</span> compilation flags</span>
args <span class="pl-k">=</span> <span class="pl-c1">get_compiler_args</span>()

<span class="pl-c"><span class="pl-c">#</span> create JIT</span>
jit <span class="pl-k">=</span> <span class="pl-c1">LLJIT</span>(;tm<span class="pl-k">=</span><span class="pl-c1">JITTargetMachine</span>())

<span class="pl-c"><span class="pl-c">#</span> generate LLVM IR</span>
irgen <span class="pl-k">=</span> <span class="pl-c1">IRGenerator</span>(src, args)

<span class="pl-c"><span class="pl-c">#</span> compile and link</span>
cc <span class="pl-k">=</span> <span class="pl-c1">CXCompiler</span>(irgen, jit)
<span class="pl-c1">link_process_symbols</span>(cc)
<span class="pl-c1">compile</span>(cc)

<span class="pl-c"><span class="pl-c">#</span> lookup and call the main function </span>
addr <span class="pl-k">=</span> <span class="pl-c1">lookup</span>(jit, <span class="pl-s"><span class="pl-pds">"</span>main<span class="pl-pds">"</span></span>)
<span class="pl-c1">@eval</span> <span class="pl-en">main</span>() <span class="pl-k">=</span> <span class="pl-c1">ccall</span>(<span class="pl-k">$</span>(<span class="pl-c1">pointer</span>(addr)), Cint, ())

<span class="pl-c1">main</span>()

<span class="pl-c"><span class="pl-c">#</span> clean up</span>
<span class="pl-c1">dispose</span>(cc)</pre></div>
</article></div>