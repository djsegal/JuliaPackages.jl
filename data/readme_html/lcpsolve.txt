<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-lcpsolvejl" class="anchor" aria-hidden="true" href="#lcpsolvejl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>LCPsolve.jl</h1>
<p>A solver for linear complementarity problems.</p>
<p><a href="https://travis-ci.org/junyuan-chen/LCPsolve.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/a5d70a16555e47e0a582669c0a5ec4a2985f015664dedfab4ab514a348c5d5b7/68747470733a2f2f7472617669732d63692e6f72672f6a756e7975616e2d6368656e2f4c4350736f6c76652e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/junyuan-chen/LCPsolve.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/junyuan-chen/LCPsolve.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/0e4a0a893b0a3b6c0a0ece64c0370249d54194a3f7b402879f00f29ab96cd2ef/68747470733a2f2f636f6465636f762e696f2f67682f6a756e7975616e2d6368656e2f4c4350736f6c76652e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/junyuan-chen/LCPsolve.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p>This package provides a Julia implementation of the
<a href="https://www.mathworks.com/matlabcentral/fileexchange/20952-lcp-mcp-solver-newton-based" rel="nofollow">Matlab routine</a>
written by Yuval Tassa.
The solver is particularly useful when the problem to be solved is ill-conditioned.
This is often the case,
for example,
when the linear system arises from a discretization of
a Hamilton-Jacobi-Bellman variational inequality
in the process of value function iteration.
Illustrative applications in economics for solving optimal stopping problems can be found
<a href="https://benjaminmoll.com/codes/" rel="nofollow">here</a>.</p>
<p>Please see <a href="https://github.com/JuliaNLSolvers/NLsolve.jl">NLsolve.jl</a>
for solvers suitable for alternative scenarios.</p>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<p>An object of type <code>LCP</code> is used to specify the problem.
Passing the object to <code>solve!</code> yields the results,
which is returned in an object of type <code>SolverResults</code>.
The solution is stored in the field <code>sol</code>.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using LCPsolve, SparseArrays
n = 10000
M = spdiagm(0=&gt;[9;fill(17,n-2);9], -1=&gt;fill(-8,n-1), 1=&gt;fill(-8,n-1))
q = -log.(collect(LinRange(0.05,5,n)))
result = solve!(LCP(M,q))
"><pre><span class="pl-k">using</span> LCPsolve, SparseArrays
n <span class="pl-k">=</span> <span class="pl-c1">10000</span>
M <span class="pl-k">=</span> <span class="pl-c1">spdiagm</span>(<span class="pl-c1">0</span><span class="pl-k">=&gt;</span>[<span class="pl-c1">9</span>;<span class="pl-c1">fill</span>(<span class="pl-c1">17</span>,n<span class="pl-k">-</span><span class="pl-c1">2</span>);<span class="pl-c1">9</span>], <span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">=&gt;</span><span class="pl-c1">fill</span>(<span class="pl-k">-</span><span class="pl-c1">8</span>,n<span class="pl-k">-</span><span class="pl-c1">1</span>), <span class="pl-c1">1</span><span class="pl-k">=&gt;</span><span class="pl-c1">fill</span>(<span class="pl-k">-</span><span class="pl-c1">8</span>,n<span class="pl-k">-</span><span class="pl-c1">1</span>))
q <span class="pl-k">=</span> <span class="pl-k">-</span><span class="pl-c1">log</span>.(<span class="pl-c1">collect</span>(<span class="pl-c1">LinRange</span>(<span class="pl-c1">0.05</span>,<span class="pl-c1">5</span>,n)))
result <span class="pl-k">=</span> <span class="pl-c1">solve!</span>(<span class="pl-c1">LCP</span>(M,q))</pre></div>
<h4><a id="user-content-setting-up-the-problem" class="anchor" aria-hidden="true" href="#setting-up-the-problem"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Setting up the Problem</h4>
<p>The complementarity problem can be specified
by constructing an object of type <code>LCP</code>.
By default, calling <code>LCP(M, q)</code> creates a problem for finding a vector <code>x</code> such that
for a square matrix <code>M</code> and a vector <code>q</code>
the following three equations hold simultaneously:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="            x &gt;= 0;
       Mx + q &gt;= 0;
    x'(Mx + q) = 0.
"><pre lang="math"><code>            x &gt;= 0;
       Mx + q &gt;= 0;
    x'(Mx + q) = 0.
</code></pre></div>
<p>It is advisable to construct <code>M</code> as a sparse matrix of type <code>SparseMatrixCSC</code>.</p>
<p>By providing <code>LCP</code> the keyword arguments <code>l</code> and <code>u</code>,
which represent constraints as vectors,
one can solve the more general problem
in which each element of <code>x</code> indexed by <code>i</code>
satisfies the following relations:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="    l[i] &lt; x[i] &lt; u[i]   =&gt;   (Mx)[i] + q[i] = 0;
    (Mx)[i] + q[i] &lt; 0   =&gt;   x[i] = u[i];
    (Mx)[i] + q[i] &gt; 0   =&gt;   x[i] = l[i].
"><pre lang="math"><code>    l[i] &lt; x[i] &lt; u[i]   =&gt;   (Mx)[i] + q[i] = 0;
    (Mx)[i] + q[i] &lt; 0   =&gt;   x[i] = u[i];
    (Mx)[i] + q[i] &gt; 0   =&gt;   x[i] = l[i].
</code></pre></div>
<h4><a id="user-content-solving-the-problem" class="anchor" aria-hidden="true" href="#solving-the-problem"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Solving the Problem</h4>
<p>To solve the problem, pass the <code>LCP</code> object to <code>solve!</code>.
The method <code>solve!</code> accepts an optional argument <code>x0</code>
as the initial starting point for the solver.
Keyword arguments can be passed for adjusting the behavior of the solver.
For details, please use the help mode in REPL.</p>
<p>An object of type <code>SolverResults</code> will be returned by <code>solve!</code>.
The solution is stored in the field <code>sol</code>.
The field <code>converged</code> indicates whether convergence has been reached.</p>
<h4><a id="user-content-applications-in-optimal-stopping-problems" class="anchor" aria-hidden="true" href="#applications-in-optimal-stopping-problems"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Applications in Optimal Stopping Problems</h4>
<p>The <code>examples</code> folder contains more illustrations for the usage of the solver.</p>
<h2><a id="user-content-references" class="anchor" aria-hidden="true" href="#references"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>References</h2>
<p>Fischer, A. (1995). A Newton-type method for positive-semidefinite linear complementarity problems. Journal of Optimization Theory and Applications, 86(3), 585-608.</p>
<p>Bazaraa, M. S., Sherali, H. D., &amp; Shetty, C. M. (2013). Nonlinear programming: theory and algorithms. John Wiley &amp; Sons.</p>
<p>Tassa, Y. (2008). LCP / MCP solver (Newton-based). MATLAB Central File Exchange. Retrieved from <a href="https://www.mathworks.com/matlabcentral/fileexchange/20952-lcp-mcp-solver-newton-based" rel="nofollow">https://www.mathworks.com/matlabcentral/fileexchange/20952-lcp-mcp-solver-newton-based</a>.</p>
</article></div>