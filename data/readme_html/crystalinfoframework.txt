<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-crystalinfoframeworkjl" class="anchor" aria-hidden="true" href="#crystalinfoframeworkjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>CrystalInfoFramework.jl</h1>
<p>Julia tools for working with the
<a href="https://www.iucr.org/resources/cif" rel="nofollow">Crystallographic Information Framework</a>,
including reading data files in Crystallographic Information Format (CIF)
versions 1 and 2 (this includes mmCIF files from the PDB). The tools also
understand dictionaries written in DDLm, which can be used to return correct
types and find aliased datanames (note that this is not available for mmCIF
as the PDB uses DDL2 dictionaries).</p>
<h2><a id="user-content-warning-early-release" class="anchor" aria-hidden="true" href="#warning-early-release"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Warning: early release</h2>
<p>While usable for the bulk of typical tasks, this package is still in
an early version. Type and method names may change in later versions.
Various debugging messages are printed, documentation strings are patchy.</p>
<p>On the other hand, if you see ways to improve the naming or architecture,
now is the time to raise an issue.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Installation</h2>
<p>Apart from installing Julia, you will need the C library
<a href="https://github.org/comcifs/cif_api" rel="nofollow">cifapi</a> installed in a standard
place on your system.</p>
<h2><a id="user-content-getting-started" class="anchor" aria-hidden="true" href="#getting-started"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Getting started</h2>
<p>Type <code>NativeCif</code> is like a <code>Dict{String,NativeBlock}</code>. A
<code>NativeBlock</code> works like a <code>Dict{String,Array{Any,1}}</code>.  All returned
values are Arrays, <strong>even if the data name appears as a key-value
pair in the file</strong>. Primitive values are always Strings, unless a DDLm dictionary
has been assigned to the <code>NativeBlock</code>, in which case types are
converted before return. In this case CIF2 Tables become julia <code>Dict</code>
types, and CIF2 lists are julia <code>Array</code> types.</p>
<p>Even in the presence of a dictionary, DDLm Set category values are
returned as 1-element Arrays. <strong>This may change in the future</strong></p>
<h3><a id="user-content-reading" class="anchor" aria-hidden="true" href="#reading"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Reading</h3>
<p>To open a file, and read <code>_cell.length_a</code> from block <code>only_block</code>,
returning a one-element <code>Array{String,1}</code>:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> CrystalInfoFramework

julia<span class="pl-k">&gt;</span> nc <span class="pl-k">=</span> <span class="pl-c1">NativeCif</span>(<span class="pl-s"><span class="pl-pds">"</span>my_cif.cif<span class="pl-pds">"</span></span>)
<span class="pl-k">...</span>
julia<span class="pl-k">&gt;</span> my_block <span class="pl-k">=</span> nc[<span class="pl-s"><span class="pl-pds">"</span>only_block<span class="pl-pds">"</span></span>]  <span class="pl-c"><span class="pl-c">#</span>could also use first(nc).second</span>
<span class="pl-k">...</span>
julia<span class="pl-k">&gt;</span> l <span class="pl-k">=</span> my_block[<span class="pl-s"><span class="pl-pds">"</span>_cell.length_a<span class="pl-pds">"</span></span>]
<span class="pl-c1">1</span><span class="pl-k">-</span>element Array{Any,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-s"><span class="pl-pds">"</span>11.520(12)<span class="pl-pds">"</span></span></pre></div>
<p>To use dictionary type information, assign a dictionary to a block.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> my_dict <span class="pl-k">=</span> <span class="pl-c1">Cifdic</span>(<span class="pl-s"><span class="pl-pds">"</span>cif_core.dic<span class="pl-pds">"</span></span>)
<span class="pl-k">...</span>
julia<span class="pl-k">&gt;</span> bd <span class="pl-k">=</span> <span class="pl-c1">assign_dictionary</span>(my_block,my_dict)
julia<span class="pl-k">&gt;</span> l <span class="pl-k">=</span> bd[<span class="pl-s"><span class="pl-pds">"</span>_cell.length_a<span class="pl-pds">"</span></span>]
<span class="pl-c1">1</span><span class="pl-k">-</span>element Array{Float64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">11.52</span>
julia<span class="pl-k">&gt;</span> l <span class="pl-k">=</span> bd[<span class="pl-s"><span class="pl-pds">"</span>_cell_length_a<span class="pl-pds">"</span></span>] <span class="pl-c"><span class="pl-c">#</span>understand aliases</span>
<span class="pl-c1">1</span><span class="pl-k">-</span>element Array{Float64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">11.52</span></pre></div>
<p><code>get_loop</code>, returns a DataFrame object that can be manipulated using the
methods of that package, most obviously, <code>eachrow</code> to iterate over the
packets in a loop:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> l <span class="pl-k">=</span> <span class="pl-c1">get_loop</span>(my_block,<span class="pl-s"><span class="pl-pds">"</span>_atom_site.label<span class="pl-pds">"</span></span>)
<span class="pl-k">...</span>
julia<span class="pl-k">&gt;</span> <span class="pl-k">for</span> r <span class="pl-k">in</span> <span class="pl-c1">eachrow</span>(l)
    <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span><span class="pl-v">$(r[<span class="pl-c1">Symbol</span>(<span class="pl-s"><span class="pl-pds">"</span>_atom_site.fract_x<span class="pl-pds">"</span></span>)])</span><span class="pl-pds">"</span></span>)
<span class="pl-k">end</span></pre></div>
<p>If a dictionary has been assigned, columns are labelled by their
<code>object_id</code>, not the full name:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> l <span class="pl-k">=</span> <span class="pl-c1">get_loop</span>(bd,<span class="pl-s"><span class="pl-pds">"</span>_atom_site.label<span class="pl-pds">"</span></span>)
<span class="pl-k">...</span>
julia<span class="pl-k">&gt;</span> <span class="pl-k">for</span> r <span class="pl-k">in</span> <span class="pl-c1">eachrow</span>(l)
       <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span><span class="pl-v">$(r[<span class="pl-c1">Symbol</span>(<span class="pl-s"><span class="pl-pds">"</span>fract_x<span class="pl-pds">"</span></span>)])</span><span class="pl-pds">"</span></span>)
       <span class="pl-k">end</span>
<span class="pl-c1">0.5505</span>
<span class="pl-c1">0.4009</span>
<span class="pl-c1">0.2501</span>
<span class="pl-c1">0.417</span>
<span class="pl-k">...</span></pre></div>
<h3><a id="user-content-updating" class="anchor" aria-hidden="true" href="#updating"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Updating</h3>
<p>Values are added in the same way as for a normal dictionary.  No value
type checking is performed even if a dictionary has been assigned.</p>
<div class="highlight highlight-source-julia"><pre>my_block[<span class="pl-s"><span class="pl-pds">"</span>_new_item<span class="pl-pds">"</span></span>] <span class="pl-k">=</span> [<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>]</pre></div>
<p>If the dataname belongs to a loop, following assignment of the value the
new dataname can be added to a previously-existing loop. The following
call adds <code>_new_item</code> to the loop containing <code>_old_item</code>:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">add_to_loop</span>(my_block,<span class="pl-s"><span class="pl-pds">"</span>_old_item<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>_new_item<span class="pl-pds">"</span></span>)</pre></div>
<p>The number of values in the array assigned to <code>_new_item</code> must match
the length of the loop - this is checked.</p>
<h3><a id="user-content-writing" class="anchor" aria-hidden="true" href="#writing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Writing</h3>
<p>There is currently no support for output of <code>NativeCif</code> (or any other) types.
Contributions welcome.</p>
<h2><a id="user-content-architecture" class="anchor" aria-hidden="true" href="#architecture"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Architecture</h2>
<p>The C cifapi library is used for parsing into native Julia structures. An
earlier version visible in the git history used cifapi for all interactions,
but the limitation to one loop traversal at a time was too restrictive.</p>
<p>A datablock with a dictionary assigned is a separate type.</p>
<h2><a id="user-content-further-information" class="anchor" aria-hidden="true" href="#further-information"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Further information</h2>
<p>Read the tests in the tests directory for typical usage examples.</p>
</article></div>