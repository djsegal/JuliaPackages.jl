<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-scenegraphsjl" class="anchor" aria-hidden="true" href="#scenegraphsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>SceneGraphs.jl</h1>
<p>Scene Graphs for abstract (acyclic) representation of 3D Worlds. Designed for 3D engines built upon <a href="https://www.opengl.org/" rel="nofollow">OpenGL</a>, <a href="https://developer.nvidia.com/directx" rel="nofollow">DirectX</a>, or <a href="https://www.vulkan.org/" rel="nofollow">Vulkan</a>.</p>
<p><em>SceneGraphs</em> is a relatively complex project under the hood, exposing a simplified API to operate with in your applications. Refer to the <a href="https://kiruse.dev/docs/SceneGraphs.jl" rel="nofollow">documentation</a> for more details.</p>
<h1><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example</h1>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using SceneGraphs

abstract type AbstractEntity end

struct Entity &lt;: AbstractEntity
    transform::SpriteTransform{Entity, Float64}
end
Entity() = Entity(SpriteTransform())

let scene = Scene3D(), ntt1 = Entity(), ntt2 = Entity(), ntt3 = Entity()
    push!(scene, ntt1)
    
    parent!(ntt3, ntt2)
    parent!(ntt2, ntt1)
    
    translate!(ntt1, 1, 2, 3)
    translate!(ntt2, 2, 3, 4)
    rotate!(ntt2, deg2rad(45))
    scale!(ntt3, 2)
    
    update!(scene)
end
"><pre><span class="pl-k">using</span> SceneGraphs

<span class="pl-k">abstract type</span> AbstractEntity <span class="pl-k">end</span>

<span class="pl-k">struct</span> Entity <span class="pl-k">&lt;:</span> <span class="pl-c1">AbstractEntity</span>
    transform<span class="pl-k">::</span><span class="pl-c1">SpriteTransform{Entity, Float64}</span>
<span class="pl-k">end</span>
<span class="pl-en">Entity</span>() <span class="pl-k">=</span> <span class="pl-c1">Entity</span>(<span class="pl-c1">SpriteTransform</span>())

<span class="pl-k">let</span> scene <span class="pl-k">=</span> <span class="pl-c1">Scene3D</span>(), ntt1 <span class="pl-k">=</span> <span class="pl-c1">Entity</span>(), ntt2 <span class="pl-k">=</span> <span class="pl-c1">Entity</span>(), ntt3 <span class="pl-k">=</span> <span class="pl-c1">Entity</span>()
    <span class="pl-c1">push!</span>(scene, ntt1)
    
    <span class="pl-c1">parent!</span>(ntt3, ntt2)
    <span class="pl-c1">parent!</span>(ntt2, ntt1)
    
    <span class="pl-c1">translate!</span>(ntt1, <span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>)
    <span class="pl-c1">translate!</span>(ntt2, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">4</span>)
    <span class="pl-c1">rotate!</span>(ntt2, <span class="pl-c1">deg2rad</span>(<span class="pl-c1">45</span>))
    <span class="pl-c1">scale!</span>(ntt3, <span class="pl-c1">2</span>)
    
    <span class="pl-c1">update!</span>(scene)
<span class="pl-k">end</span></pre></div>
</article></div>