<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-distributedfactorgraphsjl" class="anchor" aria-hidden="true" href="#distributedfactorgraphsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>DistributedFactorGraphs.jl</h1>
<p dir="auto">Click on badges to follow links:</p>
<table>
<thead>
<tr>
<th>Release v0.18</th>
<th>Dev</th>
<th>Coverage</th>
<th>Documentation</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/JuliaRobotics/DistributedFactorGraphs.jl/actions/workflows/ci.yml"><img src="https://github.com/JuliaRobotics/DistributedFactorGraphs.jl/actions/workflows/ci.yml/badge.svg?branch=release%2Fv0.18" alt="Build Status" style="max-width: 100%;"></a></td>
<td><a href="https://github.com/JuliaRobotics/DistributedFactorGraphs.jl/actions/workflows/ci.yml"><img src="https://github.com/JuliaRobotics/DistributedFactorGraphs.jl/actions/workflows/ci.yml/badge.svg" alt="CI" style="max-width: 100%;"></a> <br> <a href="https://github.com/JuliaRobotics/DistributedFactorGraphs.jl/issues"><img src="https://camo.githubusercontent.com/b6712ed9087c8f9823a412082ac3d205f8196ad61aca3bfec4d2783210945e20/68747470733a2f2f697369746d61696e7461696e65642e636f6d2f62616467652f7265736f6c7574696f6e2f4a756c6961526f626f746963732f4469737472696275746564466163746f724772617068732e6a6c2e737667" alt="Average time to resolve an issue" data-canonical-src="https://isitmaintained.com/badge/resolution/JuliaRobotics/DistributedFactorGraphs.jl.svg" style="max-width: 100%;"></a></td>
<td><a href="https://codecov.io/github/JuliaRobotics/DistributedFactorGraphs.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/ea00fc795dead565693d1207ae5e9fece5cb80aeb37b36485cbfbf607054ab1a/68747470733a2f2f636f6465636f762e696f2f6769746875622f4a756c6961526f626f746963732f4469737472696275746564466163746f724772617068732e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="https://codecov.io/github/JuliaRobotics/DistributedFactorGraphs.jl/coverage.svg?branch=master" style="max-width: 100%;"></a> <br> <a href="https://github.com/JuliaRobotics/DistributedFactorGraphs.jl/issues"><img src="https://camo.githubusercontent.com/7dc44832c8b85b3207e243ead01867a12f22ddf6455a8fb5d58b8156fda2095c/68747470733a2f2f697369746d61696e7461696e65642e636f6d2f62616467652f6f70656e2f4a756c6961526f626f746963732f4469737472696275746564466163746f724772617068732e6a6c2e737667" alt="Percentage of issues still open" data-canonical-src="https://isitmaintained.com/badge/open/JuliaRobotics/DistributedFactorGraphs.jl.svg" style="max-width: 100%;"></a></td>
<td><a href="http://juliarobotics.github.io/DistributedFactorGraphs.jl/latest/" rel="nofollow"><img src="https://camo.githubusercontent.com/ce4c71fc4b5bcdaeb54ce860d85017a22a6fcbe12fc3366b241a14d232d0da66/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f444647446f63732d6c61746573742d626c75652e737667" alt="docs" data-canonical-src="https://img.shields.io/badge/DFGDocs-latest-blue.svg" style="max-width: 100%;"></a> <br> <a href="http://juliarobotics.github.io/Caesar.jl/latest/" rel="nofollow"><img src="https://camo.githubusercontent.com/5cd28800ffafbf6aad3e61c1811ea12811d856e254265e5552b2a309b0d54554/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f436165736172446f63732d6c61746573742d626c75652e737667" alt="docs" data-canonical-src="https://img.shields.io/badge/CaesarDocs-latest-blue.svg" style="max-width: 100%;"></a></td>
</tr>
</tbody>
</table>
<p dir="auto">DistributedFactorGraphs.jl provides a flexible factor graph API for use in the <a href="https://github.com/JuliaRobotics/Caesar.jl">Caesar.jl</a> ecosystem. The package supplies:</p>
<ul dir="auto">
<li>A standardized API for interacting with factor graphs</li>
<li>Implementations of the API for in-memory and database-driven operation</li>
<li>Visualization extensions to validate the underlying graph</li>
</ul>
<p dir="auto"><strong>Note</strong> this package is still under initial development, and will adopt parts of the functionality currently contained in <a href="http://www.github.com/JuliaRobotics/IncrementalInference.jl">IncrementalInference.jl</a>.</p>
<h1 dir="auto"><a id="user-content-documentation" class="anchor" aria-hidden="true" href="#documentation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Documentation</h1>
<p dir="auto">Please see the <a href="http://juliarobotics.github.io/DistributedFactorGraphs.jl/latest/" rel="nofollow">documentation</a> and the <a href="https://github.com/JuliaRobotics/DistributedFactorGraphs.jl/tree/master/test">unit tests</a> for examples on using DistributedFactorGraphs.jl.</p>
<h1 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h1>
<p dir="auto">DistributedFactorGraphs can be installed from Julia packages using:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="add DistributedFactorGraphs"><pre>add DistributedFactorGraphs</pre></div>
<h1 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h1>
<p dir="auto">The in-memory implementation is the default, using Graphs.jl.</p>
<p dir="auto">It is recommended to use <code>IncrementalInference</code> to create factor graphs as they will be solvable.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using DistributedFactorGraphs
using IncrementalInference"><pre><span class="pl-k">using</span> DistributedFactorGraphs
<span class="pl-k">using</span> IncrementalInference</pre></div>
<p dir="auto">Both drivers support the same functions, so choose which you want to use when creating your initial DFG. For example:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# In-memory DFG
# Initialize the default in-memory factor graph with default solver parameters.
dfg = initfg()
# add 2 ContinuousScalar variable types to the new factor graph
addVariable!(dfg, :a, ContinuousScalar)
addVariable!(dfg, :b, ContinuousScalar)
# add a LinearRelative factor
addFactor!(dfg, [:a, :b], LinearRelative(Normal(10.0,1.0)))"><pre><span class="pl-c"><span class="pl-c">#</span> In-memory DFG</span>
<span class="pl-c"><span class="pl-c">#</span> Initialize the default in-memory factor graph with default solver parameters.</span>
dfg <span class="pl-k">=</span> <span class="pl-c1">initfg</span>()
<span class="pl-c"><span class="pl-c">#</span> add 2 ContinuousScalar variable types to the new factor graph</span>
<span class="pl-c1">addVariable!</span>(dfg, <span class="pl-c1">:a</span>, ContinuousScalar)
<span class="pl-c1">addVariable!</span>(dfg, <span class="pl-c1">:b</span>, ContinuousScalar)
<span class="pl-c"><span class="pl-c">#</span> add a LinearRelative factor</span>
<span class="pl-c1">addFactor!</span>(dfg, [<span class="pl-c1">:a</span>, <span class="pl-c1">:b</span>], <span class="pl-c1">LinearRelative</span>(<span class="pl-c1">Normal</span>(<span class="pl-c1">10.0</span>,<span class="pl-c1">1.0</span>)))</pre></div>
</article></div>