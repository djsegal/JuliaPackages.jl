<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-distributedfactorgraphsjl" class="anchor" aria-hidden="true" href="#distributedfactorgraphsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>DistributedFactorGraphs.jl</h1>
<table>
<thead>
<tr>
<th>Release v0.8</th>
<th>Dev</th>
<th>Coverage</th>
<th>DFG Docs</th>
<th>Caesar Docs</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://travis-ci.org/JuliaRobotics/DistributedFactorGraphs.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/bf5231fd5c3c27456ca530608bf6edc6d5c97293/68747470733a2f2f7472617669732d63692e6f72672f4a756c6961526f626f746963732f4469737472696275746564466163746f724772617068732e6a6c2e7376673f6272616e63683d72656c656173652f76302e38" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaRobotics/DistributedFactorGraphs.jl.svg?branch=release/v0.8" style="max-width:100%;"></a></td>
<td><a href="https://travis-ci.org/JuliaRobotics/DistributedFactorGraphs.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/6d4399af6a419cd1d83612edf58e06def274512c/68747470733a2f2f7472617669732d63692e6f72672f4a756c6961526f626f746963732f4469737472696275746564466163746f724772617068732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaRobotics/DistributedFactorGraphs.jl.svg?branch=master" style="max-width:100%;"></a></td>
<td><a href="https://codecov.io/gh/JuliaRobotics/DistributedFactorGraphs.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/91036dfbaac219074d84c8d4f707c58c95b22fc9/68747470733a2f2f636f6465636f762e696f2f67682f4a756c6961526f626f746963732f4469737472696275746564466163746f724772617068732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov Status" data-canonical-src="https://codecov.io/gh/JuliaRobotics/DistributedFactorGraphs.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></td>
<td><a href="http://juliarobotics.github.io/DistributedFactorGraphs.jl/latest/" rel="nofollow"><img src="https://camo.githubusercontent.com/57bae07ecd50a99519ad0516d91f4ec8f0f48e12/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6c61746573742d626c75652e737667" alt="docs" data-canonical-src="https://img.shields.io/badge/docs-latest-blue.svg" style="max-width:100%;"></a></td>
<td><a href="http://juliarobotics.github.io/Caesar.jl/latest/" rel="nofollow"><img src="https://camo.githubusercontent.com/57bae07ecd50a99519ad0516d91f4ec8f0f48e12/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6c61746573742d626c75652e737667" alt="docs" data-canonical-src="https://img.shields.io/badge/docs-latest-blue.svg" style="max-width:100%;"></a></td>
</tr>
</tbody>
</table>
<p>DistributedFactorGraphs.jl provides a flexible factor graph API for use in the <a href="https://github.com/JuliaRobotics/Caesar.jl">Caesar.jl</a> ecosystem. The package supplies:</p>
<ul>
<li>A standardized API for interacting with factor graphs</li>
<li>Implementations of the API for in-memory and database-driven operation</li>
<li>Visualization extensions to validate the underlying graph</li>
</ul>
<p><strong>Note</strong> this package is still under initial development, and will adopt parts of the functionality currently contained in <a href="http://www.github.com/JuliaRobotics/IncrementalInference.jl">IncrementalInference.jl</a>.</p>
<h1><a id="user-content-documentation" class="anchor" aria-hidden="true" href="#documentation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Documentation</h1>
<p>Please see the <a href="http://juliarobotics.github.io/DistributedFactorGraphs.jl/latest/" rel="nofollow">documentation</a> and the <a href="https://github.com/JuliaRobotics/DistributedFactorGraphs.jl/tree/master/test">unit tests</a> for examples on using DistributedFactorGraphs.jl.</p>
<h1><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h1>
<p>DistributedFactorGraphs can be installed from Julia packages using:</p>
<div class="highlight highlight-source-julia"><pre>add DistributedFactorGraphs</pre></div>
<h1><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h1>
<p>The in-memory implementation is the default, using LightGraphs.jl.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> DistributedFactorGraphs</pre></div>
<p>Both drivers support the same functions, so choose which you want to use when creating your initial DFG. For example:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span> In-memory DFG</span>
dfg <span class="pl-k">=</span> <span class="pl-c1">LightDFG</span><span class="pl-c1">{NoSolverParams}</span>()
<span class="pl-c1">addVariable!</span>(dfg, <span class="pl-c1">DFGVariable</span>(<span class="pl-c1">:a</span>))
<span class="pl-c1">addVariable!</span>(dfg, <span class="pl-c1">DFGVariable</span>(<span class="pl-c1">:b</span>))
<span class="pl-c1">addFactor!</span>(dfg, [v1, v2], <span class="pl-c1">DFGFactor</span><span class="pl-c1">{Int, :Symbol}</span>(<span class="pl-c1">:f1</span>)) <span class="pl-c"><span class="pl-c">#</span> Rather use a RoME-type factor here (e.g. Pose2Pose2) rather than an Int, this is just for demonstrative purposes.</span></pre></div>
</article></div>