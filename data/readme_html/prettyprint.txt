<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-prettyprint" class="anchor" aria-hidden="true" href="#prettyprint"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>PrettyPrint</h1>
<p dir="auto"><a href="https://travis-ci.org/thautwarm/PrettyPrint.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/c9024aadd53b25d58989846e787835e2610a370fb20d7a1aabbdcc9dcc91b1cc/68747470733a2f2f7472617669732d63692e6f72672f74686175747761726d2f5072657474795072696e742e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/thautwarm/PrettyPrint.jl.svg?branch=master" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/thautwarm/PrettyPrint.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/d20832ff0f50cec4cffea60234f396a0aef3c6b22fc98bf1fcc71c63e0eacdc3/68747470733a2f2f636f6465636f762e696f2f67682f74686175747761726d2f5072657474795072696e742e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/thautwarm/PrettyPrint.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">PrettyPrint.jl is a library for easy pretty printing in Julia.</p>
<p dir="auto">It does not aim to provide very high extensibility and customizations(but still very rich), instead, it targets extreme simplicity and <em>99%</em> use cases when pretty printing is needed.</p>
<p dir="auto"><em>99%</em> users exclusively use 2 functions <code>pprintln</code> and <code>pformat</code>.</p>
<ul dir="auto">
<li><code>pprint(io::IO, data)::Nothing</code></li>
<li><code>pformat(data)::String</code></li>
<li><code>pprintln</code>: add a newline after <code>pprint</code></li>
</ul>
<h2 dir="auto"><a id="user-content-alternatives" class="anchor" aria-hidden="true" href="#alternatives"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Alternatives</h2>
<p dir="auto">There are other pprint libraries in Julia ecosystem, some of which are more extensible but might not very user-friendly, while some takes an opposite approach.</p>
<ul dir="auto">
<li><a href="https://github.com/Roger-luo/GarishPrint.jl">GarishPrint.jl</a>: An opinioned pretty printing package for Julia objects. Only export a <code>pprint</code>.</li>
<li><a href="https://github.com/MechanicalRabbit/PrettyPrinting.jl">PrettyPrinting.jl</a>: Julia library for optimal formatting of composite data structures. Highly extensible and support pretty-printing a wide range of builtin data types.</li>
<li><a href="https://github.com/ronisbr/PrettyNumbers.jl">PrettyNumbers</a>: Pretty print numbers in Julia.</li>
</ul>
<p dir="auto">Choose the one that fits your use.</p>
<h2 dir="auto"><a id="user-content-tips-for-v01-users" class="anchor" aria-hidden="true" href="#tips-for-v01-users"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Tips for <code>v0.1</code> Users</h2>
<p dir="auto"><code>v0.1</code> APIs broke because I didn't find a good approach to emit deprecation warnings when adding method overloads incorrectly. Only in this way can I prevent users continuously using <code>pprint_impl(io, data, indent, newline) = ...</code>.</p>
<p dir="auto"><strong>A pp extension method implementation change to <code>pp_impl(io, data, indent)</code> instead of <code>pprint_impl(io, data, indent, newline)</code>.</strong></p>
<p dir="auto">Besides, the new API <code>pp_impl</code> should <strong>return an integer</strong> indicating the final indentation level.</p>
<p dir="auto">Example:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="function PrettyPrint.pp_impl(io, data::MyData, indent::Int)
   s = &quot;&lt;&quot; * repr(data) * &quot;&gt;&quot;
   print(io, s)
   return length(s) + indent
end"><pre><span class="pl-k">function</span> PrettyPrint<span class="pl-k">.</span><span class="pl-en">pp_impl</span>(io, data<span class="pl-k">::</span><span class="pl-c1">MyData</span>, indent<span class="pl-k">::</span><span class="pl-c1">Int</span>)
   s <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>&lt;<span class="pl-pds">"</span></span> <span class="pl-k">*</span> <span class="pl-c1">repr</span>(data) <span class="pl-k">*</span> <span class="pl-s"><span class="pl-pds">"</span>&gt;<span class="pl-pds">"</span></span>
   <span class="pl-c1">print</span>(io, s)
   <span class="pl-k">return</span> <span class="pl-c1">length</span>(s) <span class="pl-k">+</span> indent
<span class="pl-k">end</span></pre></div>
<h2 dir="auto"><a id="user-content-install" class="anchor" aria-hidden="true" href="#install"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Install</h2>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="pkg&gt; add PrettyPrint"><pre class="notranslate"><code>pkg&gt; add PrettyPrint
</code></pre></div>
<h2 dir="auto"><a id="user-content-basic-usage" class="anchor" aria-hidden="true" href="#basic-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Basic Usage</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using PrettyPrint

struct S1
    i :: Int
    f :: Float64
end

struct S2
    s  :: Vector{String}
    s1 :: S1
end

data = S2(
    [&quot;114514&quot;, &quot;as we can&quot;],
    S1(42, 9.96)
)
pprintln(data) # or println(pformat(data))"><pre><span class="pl-k">using</span> PrettyPrint

<span class="pl-k">struct</span> S1
    i <span class="pl-k">::</span> <span class="pl-c1">Int</span>
    f <span class="pl-k">::</span> <span class="pl-c1">Float64</span>
<span class="pl-k">end</span>

<span class="pl-k">struct</span> S2
    s  <span class="pl-k">::</span> <span class="pl-c1">Vector{String}</span>
    s1 <span class="pl-k">::</span> <span class="pl-c1">S1</span>
<span class="pl-k">end</span>

data <span class="pl-k">=</span> <span class="pl-c1">S2</span>(
    [<span class="pl-s"><span class="pl-pds">"</span>114514<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>as we can<span class="pl-pds">"</span></span>],
    <span class="pl-c1">S1</span>(<span class="pl-c1">42</span>, <span class="pl-c1">9.96</span>)
)
<span class="pl-c1">pprintln</span>(data) <span class="pl-c"><span class="pl-c">#</span> or println(pformat(data))</span></pre></div>
<p dir="auto">produces</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="S2(
  s=[&quot;114514&quot;, &quot;as we can&quot;],
  s1=S1(i=42, f=9.96),
)"><pre><span class="pl-c1">S2</span>(
  s<span class="pl-k">=</span>[<span class="pl-s"><span class="pl-pds">"</span>114514<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>as we can<span class="pl-pds">"</span></span>],
  s1<span class="pl-k">=</span><span class="pl-c1">S1</span>(i<span class="pl-k">=</span><span class="pl-c1">42</span>, f<span class="pl-k">=</span><span class="pl-c1">9.96</span>),
)</pre></div>
<h2 dir="auto"><a id="user-content-extensions-via-pp_impl" class="anchor" aria-hidden="true" href="#extensions-via-pp_impl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Extensions via <code>pp_impl</code></h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using PrettyPrint
struct Account
    username :: String
    password :: String
end

@info :before_extension
pprint(
  [Account(&quot;van&quot;, &quot;gd&quot;), Account(&quot;thautwarm&quot;, &quot;996icu&quot;)]
)
println()

PrettyPrint.pp_impl(io, account::Account, indent::Int) = print(io, &quot;Account($(account.username))&quot;)

@info :after_extension
pprint(
  [Account(&quot;van&quot;, &quot;gd&quot;), Account(&quot;thautwarm&quot;, &quot;996icu&quot;)]
)
println()"><pre><span class="pl-k">using</span> PrettyPrint
<span class="pl-k">struct</span> Account
    username <span class="pl-k">::</span> <span class="pl-c1">String</span>
    password <span class="pl-k">::</span> <span class="pl-c1">String</span>
<span class="pl-k">end</span>

<span class="pl-c1">@info</span> <span class="pl-c1">:before_extension</span>
<span class="pl-c1">pprint</span>(
  [<span class="pl-c1">Account</span>(<span class="pl-s"><span class="pl-pds">"</span>van<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>gd<span class="pl-pds">"</span></span>), <span class="pl-c1">Account</span>(<span class="pl-s"><span class="pl-pds">"</span>thautwarm<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>996icu<span class="pl-pds">"</span></span>)]
)
<span class="pl-c1">println</span>()

PrettyPrint<span class="pl-k">.</span><span class="pl-en">pp_impl</span>(io, account<span class="pl-k">::</span><span class="pl-c1">Account</span>, indent<span class="pl-k">::</span><span class="pl-c1">Int</span>) <span class="pl-k">=</span> <span class="pl-c1">print</span>(io, <span class="pl-s"><span class="pl-pds">"</span>Account(<span class="pl-v">$(account<span class="pl-k">.</span>username)</span>)<span class="pl-pds">"</span></span>)

<span class="pl-c1">@info</span> <span class="pl-c1">:after_extension</span>
<span class="pl-c1">pprint</span>(
  [<span class="pl-c1">Account</span>(<span class="pl-s"><span class="pl-pds">"</span>van<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>gd<span class="pl-pds">"</span></span>), <span class="pl-c1">Account</span>(<span class="pl-s"><span class="pl-pds">"</span>thautwarm<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>996icu<span class="pl-pds">"</span></span>)]
)
<span class="pl-c1">println</span>()</pre></div>
<p dir="auto">produces</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="[ Info: before_extension
[
  Account(username=&quot;van&quot;, password=&quot;gd&quot;),
  Account(username=&quot;thautwarm&quot;, password=&quot;996icu&quot;),
]
[ Info: after_extension
[
  Account(van),
  Account(thautwarm),
]"><pre>[ Info<span class="pl-k">:</span> before_extension
[
  <span class="pl-c1">Account</span>(username<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>van<span class="pl-pds">"</span></span>, password<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>gd<span class="pl-pds">"</span></span>),
  <span class="pl-c1">Account</span>(username<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>thautwarm<span class="pl-pds">"</span></span>, password<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>996icu<span class="pl-pds">"</span></span>),
]
[ Info<span class="pl-k">:</span> after_extension
[
  <span class="pl-c1">Account</span>(van),
  <span class="pl-c1">Account</span>(thautwarm),
]</pre></div>
<h2 dir="auto"><a id="user-content-built-in-supported-datatypes" class="anchor" aria-hidden="true" href="#built-in-supported-datatypes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Built-in Supported Datatypes</h2>
<ol dir="auto">
<li>Vector</li>
<li>Tuple</li>
<li>Set</li>
<li>String</li>
<li>Nothing</li>
<li>Dict</li>
</ol>
<p dir="auto">Any other datatypes are also supported with a default <code>pp_impl</code>.</p>
<h2 dir="auto"><a id="user-content-is_simple_t-protocol" class="anchor" aria-hidden="true" href="#is_simple_t-protocol"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>is_simple_t</code> Protocol</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="pprint([1, 2, 3])
# =&gt; [1, 2, 3]
pprint([Account(&quot;van&quot;, &quot;gd&quot;)])
# [
    Account(username=&quot;van&quot;, password=&quot;gd&quot;)
# ]"><pre><span class="pl-c1">pprint</span>([<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>])
<span class="pl-c"><span class="pl-c">#</span> =&gt; [1, 2, 3]</span>
<span class="pl-c1">pprint</span>([<span class="pl-c1">Account</span>(<span class="pl-s"><span class="pl-pds">"</span>van<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>gd<span class="pl-pds">"</span></span>)])
<span class="pl-c"><span class="pl-c">#</span> [</span>
    <span class="pl-c1">Account</span>(username<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>van<span class="pl-pds">"</span></span>, password<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>gd<span class="pl-pds">"</span></span>)
<span class="pl-c"><span class="pl-c">#</span> ]</span></pre></div>
<p dir="auto">What's the difference?</p>
<p dir="auto"><strong>Because <code>PrettyPrint.is_simple_t(Int) == true</code> while <code>PrettyPrint.is_simple_t(Account) == false</code></strong>.</p>
<p dir="auto">If you want to have the following effect:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="struct K
  a :: Int
end
pprint([K(1), K(2)])
# [
#  K(a=1,),
#  K(a=2,),
# ]
"><pre><span class="pl-k">struct</span> K
  a <span class="pl-k">::</span> <span class="pl-c1">Int</span>
<span class="pl-k">end</span>
<span class="pl-c1">pprint</span>([<span class="pl-c1">K</span>(<span class="pl-c1">1</span>), <span class="pl-c1">K</span>(<span class="pl-c1">2</span>)])
<span class="pl-c"><span class="pl-c">#</span> [</span>
<span class="pl-c"><span class="pl-c">#</span>  K(a=1,),</span>
<span class="pl-c"><span class="pl-c">#</span>  K(a=2,),</span>
<span class="pl-c"><span class="pl-c">#</span> ]</span>
</pre></div>
<p dir="auto">do this</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="PrettyPrint.is_simple_t(::Type{K}) = true
# [K(a=1,), K(a=2,)]"><pre>PrettyPrint<span class="pl-k">.</span><span class="pl-en">is_simple_t</span>(<span class="pl-k">::</span><span class="pl-c1">Type{K}</span>) <span class="pl-k">=</span> <span class="pl-c1">true</span>
<span class="pl-c"><span class="pl-c">#</span> [K(a=1,), K(a=2,)]</span></pre></div>
<h2 dir="auto"><a id="user-content-is_atom_t-protocol" class="anchor" aria-hidden="true" href="#is_atom_t-protocol"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>is_atom_t</code> Protocol</h2>
<p dir="auto">If you want to pp data via <code>repr</code> instead of recursively pretty printing, try</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="struct X
  a
  b
end
pprint(X([1, 2], 1))
# X(
#   a = [1, 2],
#   b = 1
# )
PrettyPrint.is_atom_t(::Type{X}) = true
pprint(X([1, 2], 1))
# X([1, 2], 1)"><pre><span class="pl-k">struct</span> X
  a
  b
<span class="pl-k">end</span>
<span class="pl-c1">pprint</span>(<span class="pl-c1">X</span>([<span class="pl-c1">1</span>, <span class="pl-c1">2</span>], <span class="pl-c1">1</span>))
<span class="pl-c"><span class="pl-c">#</span> X(</span>
<span class="pl-c"><span class="pl-c">#</span>   a = [1, 2],</span>
<span class="pl-c"><span class="pl-c">#</span>   b = 1</span>
<span class="pl-c"><span class="pl-c">#</span> )</span>
PrettyPrint<span class="pl-k">.</span><span class="pl-en">is_atom_t</span>(<span class="pl-k">::</span><span class="pl-c1">Type{X}</span>) <span class="pl-k">=</span> <span class="pl-c1">true</span>
<span class="pl-c1">pprint</span>(<span class="pl-c1">X</span>([<span class="pl-c1">1</span>, <span class="pl-c1">2</span>], <span class="pl-c1">1</span>))
<span class="pl-c"><span class="pl-c">#</span> X([1, 2], 1)</span></pre></div>
<h2 dir="auto"><a id="user-content-expected-maximum-column-length" class="anchor" aria-hidden="true" href="#expected-maximum-column-length"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Expected Maximum Column Length</h2>
<p dir="auto">This is not strict, but you can adjust the column length of PrettyPrint.jl by</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="PrettyPrint.MaxIndentExpected[] = 42"><pre>PrettyPrint<span class="pl-k">.</span>MaxIndentExpected[] <span class="pl-k">=</span> <span class="pl-c1">42</span></pre></div>
</article></div>