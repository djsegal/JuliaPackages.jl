<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-qgljl" class="anchor" aria-hidden="true" href="#qgljl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>QGL.jl</h1>
<p><a href="https://travis-ci.org/BBN-Q/QGL.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/4f96e2d1aafda6f81d9290bb78ed02824cfed0b139a51c23ca07bbcda6566001/68747470733a2f2f7472617669732d63692e6f72672f42424e2d512f51474c2e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/BBN-Q/QGL.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p>A performance orientated <a href="https://github.com/BBN-Q/QGL">QGL</a> compiler.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>The package is not yet registered with METADATA.jl and so must be cloned with</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="Pkg.clone(&quot;https://github.com/BBN-Q/QGL.jl.git&quot;)
"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">clone</span>(<span class="pl-s"><span class="pl-pds">"</span>https://github.com/BBN-Q/QGL.jl.git<span class="pl-pds">"</span></span>)</pre></div>
<h2><a id="user-content-benchmarks" class="anchor" aria-hidden="true" href="#benchmarks"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Benchmarks</h2>
<p>Preliminary benchmarks show speed-ups for Python QGL of ~25-30X.</p>
<p>In the absence of proper benchmarking and regression testing we use the 1 qubit
GST sequences from <a href="https://github.com/BBN-Q/QGL/issues/69">QGL issue #69</a> and
the sequence creation script in <code>test/benchmark.jl</code>. With <code>q1</code> having 20ns
pulses and 100MHz sidebanding frequency and at commit 8fbbee6. Since it takes
5-6 seconds to compile and the default Benchmarking.jl times out with a single
run. There is some variation so it is worth running a few trials.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using QGL
julia&gt; q1 = Qubit(&quot;q1&quot;)
q1

julia&gt; include(&quot;test/benchmark.jl&quot;)
create_1Q_GST_seqs

julia&gt; seqs = create_1Q_GST_seqs(&quot;/home/cryan/Downloads/sequence_numbers.csv&quot;, q1);

julia&gt; using BenchmarkTools
julia&gt; t = @benchmark compile_to_hardware(seqs, &quot;silly&quot;) samples=5 seconds=60
BenchmarkTools.Trial:
  memory estimate:  1.56 gb
  allocs estimate:  66356642
  --------------
  minimum time:     6.685 s (5.09% GC)
  median time:      7.104 s (5.14% GC)
  mean time:        7.091 s (5.26% GC)
  maximum time:     7.373 s (5.65% GC)
  --------------
  samples:          5
  evals/sample:     1
  time tolerance:   5.00%
  memory tolerance: 1.00%
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> QGL
julia<span class="pl-k">&gt;</span> q1 <span class="pl-k">=</span> <span class="pl-c1">Qubit</span>(<span class="pl-s"><span class="pl-pds">"</span>q1<span class="pl-pds">"</span></span>)
q1

julia<span class="pl-k">&gt;</span> <span class="pl-c1">include</span>(<span class="pl-s"><span class="pl-pds">"</span>test/benchmark.jl<span class="pl-pds">"</span></span>)
create_1Q_GST_seqs

julia<span class="pl-k">&gt;</span> seqs <span class="pl-k">=</span> <span class="pl-c1">create_1Q_GST_seqs</span>(<span class="pl-s"><span class="pl-pds">"</span>/home/cryan/Downloads/sequence_numbers.csv<span class="pl-pds">"</span></span>, q1);

julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> BenchmarkTools
julia<span class="pl-k">&gt;</span> t <span class="pl-k">=</span> <span class="pl-c1">@benchmark</span> <span class="pl-c1">compile_to_hardware</span>(seqs, <span class="pl-s"><span class="pl-pds">"</span>silly<span class="pl-pds">"</span></span>) samples<span class="pl-k">=</span><span class="pl-c1">5</span> seconds<span class="pl-k">=</span><span class="pl-c1">60</span>
BenchmarkTools<span class="pl-k">.</span>Trial<span class="pl-k">:</span>
  memory estimate<span class="pl-k">:</span>  <span class="pl-c1">1.56</span> gb
  allocs estimate<span class="pl-k">:</span>  <span class="pl-c1">66356642</span>
  <span class="pl-k">--------------</span>
  minimum time<span class="pl-k">:</span>     <span class="pl-c1">6.685</span> s (<span class="pl-c1">5.09</span><span class="pl-k">%</span> GC)
  median time<span class="pl-k">:</span>      <span class="pl-c1">7.104</span> s (<span class="pl-c1">5.14</span><span class="pl-k">%</span> GC)
  mean time<span class="pl-k">:</span>        <span class="pl-c1">7.091</span> s (<span class="pl-c1">5.26</span><span class="pl-k">%</span> GC)
  maximum time<span class="pl-k">:</span>     <span class="pl-c1">7.373</span> s (<span class="pl-c1">5.65</span><span class="pl-k">%</span> GC)
  <span class="pl-k">--------------</span>
  samples<span class="pl-k">:</span>          <span class="pl-c1">5</span>
  evals<span class="pl-k">/</span>sample<span class="pl-k">:</span>     <span class="pl-c1">1</span>
  time tolerance<span class="pl-k">:</span>   <span class="pl-c1">5.00</span><span class="pl-k">%</span>
  memory tolerance<span class="pl-k">:</span> <span class="pl-c1">1.00</span><span class="pl-k">%</span></pre></div>
<h2><a id="user-content-license" class="anchor" aria-hidden="true" href="#license"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>License</h2>
<p>Apache License v2.0</p>
<h2><a id="user-content-funding" class="anchor" aria-hidden="true" href="#funding"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Funding</h2>
<p>This work was funded in part by the Army Research Office under contract W911NF-14-C-0048.</p>
</article></div>