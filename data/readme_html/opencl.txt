<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-opencljl" class="anchor" aria-hidden="true" href="#opencljl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>OpenCL.jl</h1>
<p>OpenCL bindings for Julia</p>
<p><strong>Build status</strong>: <a href="http://ci.maleadt.net/shields/url.php?builder=OpenCL-julia05-x86-64bit" rel="nofollow"><img src="https://camo.githubusercontent.com/2fadb3a239fdf3b378152cf755abf2fc682820e3/687474703a2f2f63692e6d616c656164742e6e65742f736869656c64732f6275696c642e7068703f6275696c6465723d4f70656e434c2d6a756c696130352d7838362d3634626974266e616d653d6a756c6961253230302e35" alt="" data-canonical-src="http://ci.maleadt.net/shields/build.php?builder=OpenCL-julia05-x86-64bit&amp;name=julia%200.5" style="max-width:100%;"></a> <a href="http://ci.maleadt.net/shields/url.php?builder=OpenCL-julia06-x86-64bit" rel="nofollow"><img src="https://camo.githubusercontent.com/8af171be72571a619e9485cab00d8d613118b7ba/687474703a2f2f63692e6d616c656164742e6e65742f736869656c64732f6275696c642e7068703f6275696c6465723d4f70656e434c2d6a756c696130362d7838362d3634626974266e616d653d6a756c6961253230302e36" alt="" data-canonical-src="http://ci.maleadt.net/shields/build.php?builder=OpenCL-julia06-x86-64bit&amp;name=julia%200.6" style="max-width:100%;"></a> <a href="https://travis-ci.org/JuliaGPU/OpenCL.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/718057997763d1d7e9f2f8738bb0d2bfcbda3702/68747470733a2f2f7472617669732d63692e6f72672f4a756c69614750552f4f70656e434c2e6a6c2e7376673f6272616e63683d6d6173746572" alt="" data-canonical-src="https://travis-ci.org/JuliaGPU/OpenCL.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p><strong>Code coverage</strong>: <a href="https://coveralls.io/r/JuliaGPU/OpenCL.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/af2890c328704e68df27d4cd141551f31849a041/68747470733a2f2f696d672e736869656c64732e696f2f636f766572616c6c732f4a756c69614750552f4f70656e434c2e6a6c2e706e67" alt="" data-canonical-src="https://img.shields.io/coveralls/JuliaGPU/OpenCL.jl.png" style="max-width:100%;"></a></p>
<p>Julia interface for the OpenCL parallel computation API</p>
<p>This package aims to be a complete solution for OpenCL programming in Julia, similar in scope to <a href="http://mathema.tician.de/software/pyopencl/" rel="nofollow">PyOpenCL</a> for Python.
It provides a high level api for OpenCL to make programing GPU's and multicore CPU's much less onerous.</p>
<p>OpenCL.jl provides access to OpenCL API versions 1.0, 1.1, 1.2 and 2.0.</p>
<h4><a id="user-content-this-package-is-based-off-the-work-of-others" class="anchor" aria-hidden="true" href="#this-package-is-based-off-the-work-of-others"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>This package is based off the work of others:</h4>
<ul>
<li><a href="http://mathema.tician.de/software/pyopencl/" rel="nofollow">PyOpenCL</a> by Andreas Klockner</li>
<li><a href="https://github.com/srossross/oclpb">oclpb</a>    by Sean Ross</li>
<li><a href="https://github.com/kylelutz/compute">Boost.Compute</a> by Kyle Lutz</li>
<li><a href="https://github.com/luqmana/rust-opencl">rust-opencl</a></li>
</ul>
<p>OpenCL.jl has had contributions from <a href="https://github.com/JuliaGPU/OpenCL.jl/graphs/contributors">many developers</a>.</p>
<h2><a id="user-content-currently-supported-julia-versions" class="anchor" aria-hidden="true" href="#currently-supported-julia-versions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Currently supported Julia versions</h2>
<ul>
<li>Julia <code>v"0.4.x"</code> is supported on the <code>release-0.4</code> branch and the OpenCL.jl versions <code>v"0.4.x"</code>. Only bug-fixes will be applied.</li>
<li>Julia <code>v"0.5.x"</code> is supported on the <code>master</code> branch and the OpenCL.jl versions <code>v"0.5.x"</code>.</li>
<li>Julia <code>v"0.6.x"</code> is <em>experimentally</em> supported on the <code>master</code> branch and the OpenCL.jl versions <code>v"0.5.x"</code>.</li>
</ul>
<h3><a id="user-content-discontinued-support" class="anchor" aria-hidden="true" href="#discontinued-support"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Discontinued support</h3>
<ul>
<li>Julia <code>v"0.3.x"</code> was supported on OpenCL.jl versions <code>v"0.3.x"</code>. It should still be installable and work.</li>
</ul>
<h2><a id="user-content-setup" class="anchor" aria-hidden="true" href="#setup"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Setup</h2>
<ol>
<li>Install an OpenCL driver. If you use OSX, OpenCL is already available</li>
<li>Checkout the packages from the Julia repl</li>
</ol>
<div class="highlight highlight-source-julia"><pre>  Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>OpenCL<span class="pl-pds">"</span></span>)</pre></div>
<ol start="3">
<li>OpenCL will be installed in your <code>.julia</code> directory</li>
<li><code>cd</code> into your <code>.julia</code> directory to run the tests and try out the examples</li>
<li>To update to the latest development version, from the Julia repl:</li>
</ol>
<div class="highlight highlight-source-julia"><pre>  Pkg<span class="pl-k">.</span><span class="pl-c1">update</span>()</pre></div>
<h2><a id="user-content-ijulia-notebooks" class="anchor" aria-hidden="true" href="#ijulia-notebooks"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>IJulia Notebooks</h2>
<ul>
<li><a href="http://nbviewer.ipython.org/7517923" rel="nofollow">OpenCL Fractals</a></li>
<li><a href="http://nbviewer.ipython.org/7517952" rel="nofollow">GPU Buffer Transpose</a></li>
<li><a href="http://nbviewer.ipython.org/7452048" rel="nofollow">Low Level API</a></li>
</ul>
<h2><a id="user-content-quick-example" class="anchor" aria-hidden="true" href="#quick-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Quick Example</h2>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> OpenCL

<span class="pl-k">const</span> sum_kernel <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span></span>
<span class="pl-s">   __kernel void sum(__global const float *a,</span>
<span class="pl-s">                     __global const float *b,</span>
<span class="pl-s">                     __global float *c)</span>
<span class="pl-s">    {</span>
<span class="pl-s">      int gid = get_global_id(0);</span>
<span class="pl-s">      c[gid] = a[gid] + b[gid];</span>
<span class="pl-s">    }</span>
<span class="pl-s"><span class="pl-pds">"</span></span>
a <span class="pl-k">=</span> <span class="pl-c1">rand</span>(Float32, <span class="pl-c1">50_000</span>)
b <span class="pl-k">=</span> <span class="pl-c1">rand</span>(Float32, <span class="pl-c1">50_000</span>)

device, ctx, queue <span class="pl-k">=</span> cl<span class="pl-k">.</span><span class="pl-c1">create_compute_context</span>()

a_buff <span class="pl-k">=</span> cl<span class="pl-k">.</span><span class="pl-c1">Buffer</span>(Float32, ctx, (<span class="pl-c1">:r</span>, <span class="pl-c1">:copy</span>), hostbuf<span class="pl-k">=</span>a)
b_buff <span class="pl-k">=</span> cl<span class="pl-k">.</span><span class="pl-c1">Buffer</span>(Float32, ctx, (<span class="pl-c1">:r</span>, <span class="pl-c1">:copy</span>), hostbuf<span class="pl-k">=</span>b)
c_buff <span class="pl-k">=</span> cl<span class="pl-k">.</span><span class="pl-c1">Buffer</span>(Float32, ctx, <span class="pl-c1">:w</span>, <span class="pl-c1">length</span>(a))

p <span class="pl-k">=</span> cl<span class="pl-k">.</span><span class="pl-c1">Program</span>(ctx, source<span class="pl-k">=</span>sum_kernel) <span class="pl-k">|&gt;</span> cl<span class="pl-k">.</span>build!
k <span class="pl-k">=</span> cl<span class="pl-k">.</span><span class="pl-c1">Kernel</span>(p, <span class="pl-s"><span class="pl-pds">"</span>sum<span class="pl-pds">"</span></span>)

<span class="pl-c1">queue</span>(k, <span class="pl-c1">size</span>(a), <span class="pl-c1">nothing</span>, a_buff, b_buff, c_buff)

r <span class="pl-k">=</span> cl<span class="pl-k">.</span><span class="pl-c1">read</span>(queue, c_buff)

<span class="pl-k">if</span> <span class="pl-c1">isapprox</span>(<span class="pl-c1">norm</span>(r <span class="pl-k">-</span> (a<span class="pl-k">+</span>b)), <span class="pl-c1">zero</span>(Float32))
    <span class="pl-c1">info</span>(<span class="pl-s"><span class="pl-pds">"</span>Success!<span class="pl-pds">"</span></span>)
<span class="pl-k">else</span>
    <span class="pl-c1">error</span>(<span class="pl-s"><span class="pl-pds">"</span>Norm should be 0.0f<span class="pl-pds">"</span></span>)
<span class="pl-k">end</span></pre></div>
</article></div>