<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-argparse2" class="anchor" aria-hidden="true" href="#argparse2"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>ArgParse2</h1>



<p><a href="https://travis-ci.com/kmsquire/ArgParse2.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/7e179574bd0fc9af6448bf57072ebcdb143ad1cb/68747470733a2f2f7472617669732d63692e636f6d2f6b6d7371756972652f4172675061727365322e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/kmsquire/ArgParse2.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/kmsquire/ArgParse2-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/6f7262cf5ae46911db46d4817a7b00460357cee2/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f6769746875622f6b6d7371756972652f4172675061727365322e6a6c3f7376673d74727565" alt="Build Status" data-canonical-src="https://ci.appveyor.com/api/projects/status/github/kmsquire/ArgParse2.jl?svg=true" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/kmsquire/ArgParse2.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/ed76a4824b32e91c17a99a63797cb3e3e7e7ce7e/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f6b6d7371756972652f4172675061727365322e6a6c2f62616467652e7376673f6272616e63683d6d617374657226736572766963653d676974687562" alt="Coveralls" data-canonical-src="https://coveralls.io/repos/github/kmsquire/ArgParse2.jl/badge.svg?branch=master&amp;service=github" style="max-width:100%;"></a></p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>This package is not registered yet, but can be installed directly from this repo.
From the Julia REPL or in a Jupyter cell, run</p>
<div class="highlight highlight-source-julia"><pre>]activate .  <span class="pl-c"><span class="pl-c">#</span> Optionally activate a project</span>
]add https<span class="pl-k">:</span><span class="pl-k">//</span>github<span class="pl-k">.</span>com<span class="pl-k">/</span>kmsquire<span class="pl-k">/</span>ArgParse2<span class="pl-k">.</span>jl</pre></div>
<p>Or, equivalently, from the command line with</p>
<div class="highlight highlight-source-shell"><pre>julia --project=. -e <span class="pl-s"><span class="pl-pds">'</span>import Pkg; Pkg.add("https://github.com/kmsquire/ArgParse2.jl")<span class="pl-pds">'</span></span></pre></div>
<p>(Remove <code>--project=.</code> if not working in a project... but you should be!)</p>
<h2><a id="user-content-overview" class="anchor" aria-hidden="true" href="#overview"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Overview</h2>
<p>This is (another) argument parser for Julia, inspired by and based on Python's <code>argparse</code>
library.</p>
<p>At the time of this writing, there are two other argument parsers available.</p>
<ol>
<li><a href="https://github.com/carlobaldassi/ArgParse.jl/">ArgParse.jl</a>, also largely based on Python's
<a href="https://docs.python.org/3/library/argparse.html" rel="nofollow">argparse module</a>.</li>
<li><a href="https://github.com/docopt/DocOpt.jl">DocOpt.jl</a>, based on a the Python <a href="http://docopt.org/" rel="nofollow">docopt module</a>.</li>
</ol>
<p>Both are actually quite feature full.  What I found was that the startup, compile, and
sometimes parse overhead were quite high for a project I was working on.  <code>ArgParse2.jl</code> was an
attempt to do better.</p>
<p>Some differences from <code>ArgParse.jl</code>:</p>
<ul>
<li>More closely copies the interface from Python's argparse.  In particular, all but one of the
(supported) arguments to <code>ArgumentParser</code> and <code>add_argument!</code> have the same names.  (<code>const</code>
is a keyword in Julia, so that was renamed to <code>constant</code>)</li>
<li><code>ArgParse2.jl</code> uses functions instead of macros for setting up the parser, so the parsing
setup is somewhat different.  Again, this is more similar to Python's <code>argparse</code>.</li>
<li><code>ArgParse2.jl</code> returns a <code>NamedTuple</code> object with the parsed arguments; <code>ArgParse.jl</code>
returns a dictionary.  (<code>NamedTuples</code> did  not exist in the language when <code>ArgParse.jl</code> was written, but it's output could trivially be put into one.)</li>
</ul>
<p><code>DocOpt.jl</code> is quite different (and quite cool).  From my limited exploration, it doesn't
quite give the same level of control over argument behavior, but has the advantage of a much
more concise syntax.</p>
<h2><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example</h2>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> ArgParse2

<span class="pl-en">in_danger</span>() <span class="pl-k">=</span> <span class="pl-c1">rand</span>(Bool)

<span class="pl-k">function</span> <span class="pl-en">julia_main</span>()<span class="pl-k">::</span><span class="pl-c1">Cint</span>
    parser <span class="pl-k">=</span> <span class="pl-c1">ArgumentParser</span>(prog <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>frodo<span class="pl-pds">"</span></span>,
                            description <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>Welcome to Middle Earth<span class="pl-pds">"</span></span>,
                            epilog <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>There is no real going back<span class="pl-pds">"</span></span>)

    <span class="pl-c1">add_argument!</span>(parser, <span class="pl-s"><span class="pl-pds">"</span>surname<span class="pl-pds">"</span></span>, help <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>Your surname<span class="pl-pds">"</span></span>)
    <span class="pl-c1">add_argument!</span>(parser, <span class="pl-s"><span class="pl-pds">"</span>-s<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>--ring-size<span class="pl-pds">"</span></span>, type <span class="pl-k">=</span> Int, help <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>Ring size<span class="pl-pds">"</span></span>)
    <span class="pl-c1">add_argument!</span>(parser,
        <span class="pl-s"><span class="pl-pds">"</span>--auto-hide<span class="pl-pds">"</span></span>,
        action <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>store_true<span class="pl-pds">"</span></span>,
        default <span class="pl-k">=</span> <span class="pl-c1">false</span>,
        help <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>Turn invisible when needed<span class="pl-pds">"</span></span>)
    <span class="pl-c1">add_argument!</span>(parser, <span class="pl-s"><span class="pl-pds">"</span>--friends<span class="pl-pds">"</span></span>, metavar<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>FRIEND<span class="pl-pds">"</span></span>, nargs <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>+<span class="pl-pds">"</span></span>, required <span class="pl-k">=</span> <span class="pl-c1">true</span>)

    args <span class="pl-k">=</span> <span class="pl-c1">parse_args</span>(parser)

    <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>Welcome, Frodo <span class="pl-v">$(args<span class="pl-k">.</span>surname)</span>!<span class="pl-pds">"</span></span>)
    <span class="pl-k">if</span> args<span class="pl-k">.</span>ring_size <span class="pl-k">===</span> <span class="pl-c1">nothing</span>
        <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>Let's get you fitted for a ring.  We'll need to measure your ring size.<span class="pl-pds">"</span></span>)
    <span class="pl-k">else</span>
        <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>I see your ring size is <span class="pl-v">$(args<span class="pl-k">.</span>ring_size)</span><span class="pl-pds">"</span></span>)
    <span class="pl-k">end</span>

    <span class="pl-k">if</span> <span class="pl-c1">in_danger</span>() <span class="pl-k">&amp;&amp;</span> args<span class="pl-k">.</span>auto_hide
        <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>Orcs are near!  You turn invisible.<span class="pl-pds">"</span></span>)
    <span class="pl-k">end</span>

    <span class="pl-k">if</span> <span class="pl-c1">length</span>(args<span class="pl-k">.</span>friends) <span class="pl-k">&gt;</span> <span class="pl-c1">0</span>
        travel_companions <span class="pl-k">=</span> <span class="pl-c1">join</span>(args<span class="pl-k">.</span>friends, <span class="pl-s"><span class="pl-pds">"</span>, <span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span> and <span class="pl-pds">"</span></span>)
        <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>You're traveling to Mordor with <span class="pl-v">$travel_companions</span>.<span class="pl-pds">"</span></span>)
    <span class="pl-k">end</span>

    <span class="pl-k">return</span> <span class="pl-c1">0</span>
<span class="pl-k">end</span>

<span class="pl-c1">julia_main</span>()</pre></div>
<p>Running this gives</p>
<div class="highlight highlight-source-shell"><pre>$ julia --project=.. frodo.jl -h
Usage: frodo.jl [-h] [-s RING_SIZE] [--auto-hide] --friends FRIEND
              [FRIEND ...] surname

Welcome to Middle Earth

Positional arguments:
 surname      Your surname

Optional arguments:
 -h, --help   show this <span class="pl-c1">help</span> message and <span class="pl-c1">exit</span>
 -s RING_SIZE, --ring-size RING_SIZE
              Ring size
 --auto-hide  Turn invisible when needed
 --friends FRIEND [FRIEND ...]
              friends <span class="pl-c1">help</span>

There is no real going back
$ julia --project=.. frodo.jl Baggins --auto-hide --friends <span class="pl-s"><span class="pl-pds">"</span>Samwise Gangee<span class="pl-pds">"</span></span> <span class="pl-s"><span class="pl-pds">"</span>Peregrin Took<span class="pl-pds">"</span></span> <span class="pl-s"><span class="pl-pds">"</span>Meriadoc Brandybuck<span class="pl-pds">"</span></span> <span class="pl-s"><span class="pl-pds">"</span>Fredegar Bolger<span class="pl-pds">"</span></span>
Welcome, Frodo Baggins<span class="pl-k">!</span>
Let<span class="pl-s"><span class="pl-pds">'</span>s get you fitted for a ring.  We<span class="pl-pds">'</span></span>ll need to measure your ring size.
Orcs are near<span class="pl-k">!</span>  You turn invisible.
You<span class="pl-s"><span class="pl-pds">'</span>re traveling to Mordor with Samwise Gangee, Peregrin Took, Meriadoc Brandybuck and Fredegar Bolger.</span></pre></div>
<h2><a id="user-content-status" class="anchor" aria-hidden="true" href="#status"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Status</h2>
<p>At this point, <code>ArgParse2.jl</code> isn't feature full (e.g., commands are not implemented) but it is
quite usable for simple command line parsing.</p>
<p>Load/compile time is currently faster than both parsers mentioned above, and (from some very
minor testing) parse time is faster than <code>ArgParse.jl</code> and about on par with <code>DocOpt.jl</code> (for
the features supported).  That will probably change as more features are added (it might get slower).
There's probably room for optimization as well.</p>
<p>There's no documentation yet--for now, you can use the example above (also in the <code>examples</code>
directory) and the tests as guidelines.</p>
<p>If you're familiar with Python's <code>argparse</code> library,
this library should feel very familiar.</p>
</article></div>