<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-piecewiseincreasingranges" class="anchor" aria-hidden="true" href="#piecewiseincreasingranges"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>PiecewiseIncreasingRanges</h1>
<p><a href="https://travis-ci.org/simonster/PiecewiseIncreasingRanges.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/47b86f218b03a5298d9250dad9d955c15397b89c97428909823e942b60788ec2/68747470733a2f2f7472617669732d63692e6f72672f73696d6f6e737465722f506965636577697365496e6372656173696e6752616e6765732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/simonster/PiecewiseIncreasingRanges.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://coveralls.io/r/simonster/PiecewiseIncreasingRanges.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/5dc64c12c088f6314380666d49858256f177e4efca31a32bdbebe84729a1c95b/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f73696d6f6e737465722f506965636577697365496e6372656173696e6752616e6765732e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/simonster/PiecewiseIncreasingRanges.jl/badge.svg?branch=master" style="max-width:100%;"></a></p>
<p>PiecewiseIncreasingRanges.jl provides a PiecewiseIncreasingRange type that corresponds to a set of concatenated, monotonically increasing ranges. It implements indexing as well as <code>searchsortedfirst</code>, <code>searchsortedlast</code>, and a <code>findnearest</code> function. This type is useful for holding the potentially discontinuous timestamps corresponding to large quantities of sampled data, where creating and indexing a vector would be undesirably slow.</p>
<h2><a id="user-content-construction" class="anchor" aria-hidden="true" href="#construction"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Construction</h2>
<p>You can construct a PiecewiseIncreasingRange as below:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; PiecewiseIncreasingRange(StepRange{Int,Int}[0:5:15, 18:2:20])
6-element PiecewiseIncreasingRanges.PiecewiseIncreasingRange{Int64,StepRange{Int64,Int64},Void}:
  0
  5
 10
 15
 18
 20
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">PiecewiseIncreasingRange</span>(StepRange{Int,Int}[<span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">5</span><span class="pl-k">:</span><span class="pl-c1">15</span>, <span class="pl-c1">18</span><span class="pl-k">:</span><span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">20</span>])
<span class="pl-c1">6</span><span class="pl-k">-</span>element PiecewiseIncreasingRanges<span class="pl-k">.</span>PiecewiseIncreasingRange{Int64,StepRange{Int64,Int64},Void}<span class="pl-k">:</span>
  <span class="pl-c1">0</span>
  <span class="pl-c1">5</span>
 <span class="pl-c1">10</span>
 <span class="pl-c1">15</span>
 <span class="pl-c1">18</span>
 <span class="pl-c1">20</span></pre></div>
<p>PiecewiseIncreasingRanges also accept an optional divisor, which is divided out of all elements:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; PiecewiseIncreasingRange(UnitRange{Int}[0:3, 15:16], 4)
6-element PiecewiseIncreasingRanges.PiecewiseIncreasingRange{Float64,UnitRange{Int64},Int64}:
 0.0 
 0.25
 0.5 
 0.75
 3.75
 4.0
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">PiecewiseIncreasingRange</span>(UnitRange{Int}[<span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">3</span>, <span class="pl-c1">15</span><span class="pl-k">:</span><span class="pl-c1">16</span>], <span class="pl-c1">4</span>)
<span class="pl-c1">6</span><span class="pl-k">-</span>element PiecewiseIncreasingRanges<span class="pl-k">.</span>PiecewiseIncreasingRange{Float64,UnitRange{Int64},Int64}<span class="pl-k">:</span>
 <span class="pl-c1">0.0</span> 
 <span class="pl-c1">0.25</span>
 <span class="pl-c1">0.5</span> 
 <span class="pl-c1">0.75</span>
 <span class="pl-c1">3.75</span>
 <span class="pl-c1">4.0</span></pre></div>
<h2><a id="user-content-findnearest" class="anchor" aria-hidden="true" href="#findnearest"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>findnearest</h2>
<p><code>findnearest(rg, x, within_half_sample)</code> finds the index of the element of <code>rg</code> closest to <code>x</code>. If <code>x</code> is equidistant between two samples, it chooses the earlier one. If <code>within_half_sample</code> is true, <code>findnearest</code> throws a <code>NoNearestSampleError</code> if there is no sample within half of a step of <code>x</code>.</p>
</article></div>