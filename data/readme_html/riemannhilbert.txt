<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-riemannhilbertjl" class="anchor" aria-hidden="true" href="#riemannhilbertjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>RiemannHilbert.jl</h1>
<p>A Julia package for solving Riemann–Hilbert problems</p>
<p><a href="https://travis-ci.org/JuliaHolomorphic/RiemannHilbert.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/00afa032766742fd0440b2012e8593af19805647/68747470733a2f2f7472617669732d63692e6f72672f4a756c6961486f6c6f6d6f72706869632f5269656d616e6e48696c626572742e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaHolomorphic/RiemannHilbert.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/JuliaHolomorphic/RiemannHilbert.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/66ab1307302f0642bd790190479b68831fcb7578/68747470733a2f2f636f6465636f762e696f2f67682f4a756c6961486f6c6f6d6f72706869632f5269656d616e6e48696c626572742e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/JuliaHolomorphic/RiemannHilbert.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a>
<a href="https://gitter.im/JuliaApproximation/ApproxFun.jl?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge&amp;utm_content=badge" rel="nofollow"><img src="https://camo.githubusercontent.com/4241f01c4a09755ef30c5ef44d58463dacb081cd/68747470733a2f2f6261646765732e6769747465722e696d2f4a756c6961417070726f78696d6174696f6e2f417070726f7846756e2e6a6c2e737667" alt="Join the chat at https://gitter.im/JuliaApproximation/ApproxFun.jl" data-canonical-src="https://badges.gitter.im/JuliaApproximation/ApproxFun.jl.svg" style="max-width:100%;"></a></p>

<p><a target="_blank" rel="noopener noreferrer" href="images/sixrays.jpg"><img src="images/sixrays.jpg" height="250" alt="." style="max-width:100%;"></a></p>  

<p>A Riemann–Hilbert problem is a certain type of boundary value problem in the complex plane where an analytic function has prescribed jumps.
They arise in integrable systems, random matrices, spectral analysis, orthogonal polynomials, and elsewhere. This package implements
the numerical method of [Olver 2011, Olver 2012] (see also review in [Trogodon &amp; Olver 2015]) for solving Riemann–Hilbert problems, and is very much related to <a href="https://github.com/dlfivefifty/RHPackage">RHPackage</a>.</p>
<p>For an example, the following calculates the Hastings–McLeod solution to Painlev'e II at the origin,
which is posed on 4 rays:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span> Define the contour</span>
Γ <span class="pl-k">=</span> <span class="pl-c1">Segment</span>(<span class="pl-c1">0</span>, <span class="pl-c1">2.5</span><span class="pl-c1">exp</span>(im<span class="pl-k">*</span>π<span class="pl-k">/</span><span class="pl-c1">6</span>)) <span class="pl-k">∪</span> <span class="pl-c1">Segment</span>(<span class="pl-c1">0</span>, <span class="pl-c1">2.5</span><span class="pl-c1">exp</span>(<span class="pl-c1">5im</span><span class="pl-k">*</span>π<span class="pl-k">/</span><span class="pl-c1">6</span>)) <span class="pl-k">∪</span>
		<span class="pl-c1">Segment</span>(<span class="pl-c1">0</span>, <span class="pl-c1">2.5</span><span class="pl-c1">exp</span>(<span class="pl-k">-</span><span class="pl-c1">5im</span><span class="pl-k">*</span>π<span class="pl-k">/</span><span class="pl-c1">6</span>)) <span class="pl-k">∪</span> <span class="pl-c1">Segment</span>(<span class="pl-c1">0</span>, <span class="pl-c1">2.5</span><span class="pl-c1">exp</span>(<span class="pl-k">-</span>im<span class="pl-k">*</span>π<span class="pl-k">/</span><span class="pl-c1">6</span>))

<span class="pl-c"><span class="pl-c">#</span> Defe the jump function</span>
G <span class="pl-k">=</span> <span class="pl-c1">Fun</span>( z <span class="pl-k">-&gt;</span> <span class="pl-k">if</span> <span class="pl-c1">angle</span>(z) <span class="pl-k">≈</span> π<span class="pl-k">/</span><span class="pl-c1">6</span>
					[<span class="pl-c1">1</span> <span class="pl-c1">0</span>; im<span class="pl-k">*</span><span class="pl-c1">exp</span>(<span class="pl-c1">8im</span><span class="pl-k">/</span><span class="pl-c1">3</span><span class="pl-k">*</span>z<span class="pl-k">^</span><span class="pl-c1">3</span>) <span class="pl-c1">1</span>]
				<span class="pl-k">elseif</span> <span class="pl-c1">angle</span>(z) <span class="pl-k">≈</span> <span class="pl-c1">5</span>π<span class="pl-k">/</span><span class="pl-c1">6</span>
					[<span class="pl-c1">1</span> <span class="pl-c1">0</span>; <span class="pl-k">-</span>im<span class="pl-k">*</span><span class="pl-c1">exp</span>(<span class="pl-c1">8im</span><span class="pl-k">/</span><span class="pl-c1">3</span><span class="pl-k">*</span>z<span class="pl-k">^</span><span class="pl-c1">3</span>) <span class="pl-c1">1</span>]
				<span class="pl-k">elseif</span> <span class="pl-c1">angle</span>(z) <span class="pl-k">≈</span> <span class="pl-k">-</span>π<span class="pl-k">/</span><span class="pl-c1">6</span>
					[<span class="pl-c1">1</span> im<span class="pl-k">*</span><span class="pl-c1">exp</span>(<span class="pl-k">-</span><span class="pl-c1">8im</span><span class="pl-k">/</span><span class="pl-c1">3</span><span class="pl-k">*</span>z<span class="pl-k">^</span><span class="pl-c1">3</span>); <span class="pl-c1">0</span> <span class="pl-c1">1</span>]
				<span class="pl-k">elseif</span> <span class="pl-c1">angle</span>(z) <span class="pl-k">≈</span> <span class="pl-k">-</span><span class="pl-c1">5</span>π<span class="pl-k">/</span><span class="pl-c1">6</span>
					[<span class="pl-c1">1</span> <span class="pl-k">-</span>im<span class="pl-k">*</span><span class="pl-c1">exp</span>(<span class="pl-k">-</span><span class="pl-c1">8im</span><span class="pl-k">/</span><span class="pl-c1">3</span><span class="pl-k">*</span>z<span class="pl-k">^</span><span class="pl-c1">3</span>); <span class="pl-c1">0</span> <span class="pl-c1">1</span>]
				<span class="pl-k">end</span>, Γ)

<span class="pl-c"><span class="pl-c">#</span> Solve the Riemann–Hilbert problem. We transpose to recast a left</span>
<span class="pl-c"><span class="pl-c">#</span> Riemann–Hilbert problem as a left one.				</span>
Φ <span class="pl-k">=</span> <span class="pl-c1">transpose</span>(<span class="pl-c1">rhsolve</span>(<span class="pl-c1">transpose</span>(G), <span class="pl-c1">4</span><span class="pl-k">*</span><span class="pl-c1">200</span>)) <span class="pl-c"><span class="pl-c">#</span> use 200 collocation points per ray</span>
z <span class="pl-k">=</span> <span class="pl-c1">Fun</span>(ℂ) <span class="pl-c"><span class="pl-c">#</span> The function z in the complex plane</span>
<span class="pl-c1">2</span>(z<span class="pl-k">*</span>Φ[<span class="pl-c1">1</span>,<span class="pl-c1">2</span>])(<span class="pl-c1">Inf</span>) <span class="pl-c"><span class="pl-c">#</span> Evaluate 2lim_{z -&gt; ∞} zΦ(z)_{1,2}</span></pre></div>
<h1><a id="user-content-references" class="anchor" aria-hidden="true" href="#references"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>References</h1>
<ol>
<li>T. Trogdon &amp; S. Olver (2015), <a href="http://bookstore.siam.org/ot146/" rel="nofollow">Riemann–Hilbert Problems, Their Numerical Solution and the Computation of Nonlinear Special Functions</a>, SIAM.</li>
<li>S. Olver (2012), <a href="https://link.springer.com/article/10.1007/s00211-012-0459-7" rel="nofollow">A general framework for solving Riemann–Hilbert problems numerically</a>, Numer. Math., 122: 305–340.</li>
<li>S. Olver (2011), <a href="https://link.springer.com/article/10.1007/s10208-010-9079-8" rel="nofollow">Numerical solution of Riemann–Hilbert problems: Painlevé II</a>, Found. Comput. Maths, 11: 153–179.</li>
</ol>
</article></div>