<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-soilprofilesjl" class="anchor" aria-hidden="true" href="#soilprofilesjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>SoilProfiles.jl</h1>
<p dir="auto"><a href="https://github.com/brownag/SoilProfiles.jl/actions/workflows/test.yml"><img src="https://github.com/brownag/SoilProfiles.jl/actions/workflows/test.yml/badge.svg" alt="tests" style="max-width: 100%;"></a>
<a href="https://codecov.io/github/brownag/SoilProfiles.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/0d707286b8f4e602d71955c8cf468a821322da59dadbb150e31f694b2788037b/68747470733a2f2f636f6465636f762e696f2f6769746875622f62726f776e61672f536f696c50726f66696c65732e6a6c2f6272616e63682f6d61696e2f6772617068732f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/github/brownag/SoilProfiles.jl/branch/main/graphs/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto"><em>SoilProfiles.jl</em> is a <a href="http://julialang.org" rel="nofollow">Julia</a> package for representing soil profile information using the "site-layer" model. Soil profiles are essentially cross sections where distinct "layers" are defined by a top and bottom depth for a point, line or area on the land surface.</p>
<p dir="auto">There is generally a many:one relationship between layers observed within a soil profile and the site-level information that identifies or summarizes that profile. The <em>SoilProfile</em> object allows for simultaneous indexing and operations on paired or pooled site and layer data.</p>
<p dir="auto">The <em>SoilProfile</em> object in <em>SoilProfiles.jl</em> conceptually mirrors the <em>SoilProfileCollection</em> object defined by the <a href="http://github.com/ncss-tech/aqp">aqp</a> <strong>R</strong> package. In Julia, we are using the <em>DataFrames.jl</em> package instead of <strong>R</strong> <em>data.frame</em> objects.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using SoilProfiles
using DataFrames

# 6 sites with 3 profiles of layer data
s = DataFrame(pid = 1:6, elev = 100:105)
l = DataFrame(pid = [1,1,1,1,1,2,2,2,2,2,3,3,3,3,3],
              top = [0,10,20,30,40,0,5,10,15,20,0,20,40,60,80],
              bot = [10,20,30,40,50,5,10,15,20,25,20,40,60,80,100])

# Construct a SoilProfile from DataFrames
#  Must specify:
#  - unique profile ID
#  - top and bottom depth column names in layer DataFrame
#  - site DataFrame and layer DataFrame

sp1 = SoilProfile(&quot;pid&quot;, [&quot;top&quot;, &quot;bot&quot;], s, l)

# equivalent syntax
# when ID specified as argument
sp2 = SoilProfile(&quot;pid&quot;, s, l)
# or when ID as first column in site data
sp3 = SoilProfile(s, l)

show(sp1)

# empty SoilProfile
show(SoilProfile())

# site and layer extraction
res = spc[2:6, 2:4]
show(res)

# view the layer depths
depths(res)

# all layers have a site
println(isValid(res))

# but not all sites have layers [4,5,6]
println(sitesWithoutLayers(res))

# check that site and layer order are in sync
checkIntegrity(res)

# check that layers in top depth order have bottom depths matching adjacent top depths
checkTopology(res)

show(spc[1,1])

# iterate using for i in SoilProfile
for i in sp1
 show(i)
end

# or use foreach(::Function, ::SoilProfile)
foreach(show, sp1)"><pre><span class="pl-k">using</span> SoilProfiles
<span class="pl-k">using</span> DataFrames

<span class="pl-c"><span class="pl-c">#</span> 6 sites with 3 profiles of layer data</span>
s <span class="pl-k">=</span> <span class="pl-c1">DataFrame</span>(pid <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">6</span>, elev <span class="pl-k">=</span> <span class="pl-c1">100</span><span class="pl-k">:</span><span class="pl-c1">105</span>)
l <span class="pl-k">=</span> <span class="pl-c1">DataFrame</span>(pid <span class="pl-k">=</span> [<span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">2</span>,<span class="pl-c1">2</span>,<span class="pl-c1">2</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>,<span class="pl-c1">3</span>,<span class="pl-c1">3</span>,<span class="pl-c1">3</span>,<span class="pl-c1">3</span>],
              top <span class="pl-k">=</span> [<span class="pl-c1">0</span>,<span class="pl-c1">10</span>,<span class="pl-c1">20</span>,<span class="pl-c1">30</span>,<span class="pl-c1">40</span>,<span class="pl-c1">0</span>,<span class="pl-c1">5</span>,<span class="pl-c1">10</span>,<span class="pl-c1">15</span>,<span class="pl-c1">20</span>,<span class="pl-c1">0</span>,<span class="pl-c1">20</span>,<span class="pl-c1">40</span>,<span class="pl-c1">60</span>,<span class="pl-c1">80</span>],
              bot <span class="pl-k">=</span> [<span class="pl-c1">10</span>,<span class="pl-c1">20</span>,<span class="pl-c1">30</span>,<span class="pl-c1">40</span>,<span class="pl-c1">50</span>,<span class="pl-c1">5</span>,<span class="pl-c1">10</span>,<span class="pl-c1">15</span>,<span class="pl-c1">20</span>,<span class="pl-c1">25</span>,<span class="pl-c1">20</span>,<span class="pl-c1">40</span>,<span class="pl-c1">60</span>,<span class="pl-c1">80</span>,<span class="pl-c1">100</span>])

<span class="pl-c"><span class="pl-c">#</span> Construct a SoilProfile from DataFrames</span>
<span class="pl-c"><span class="pl-c">#</span>  Must specify:</span>
<span class="pl-c"><span class="pl-c">#</span>  - unique profile ID</span>
<span class="pl-c"><span class="pl-c">#</span>  - top and bottom depth column names in layer DataFrame</span>
<span class="pl-c"><span class="pl-c">#</span>  - site DataFrame and layer DataFrame</span>

sp1 <span class="pl-k">=</span> <span class="pl-c1">SoilProfile</span>(<span class="pl-s"><span class="pl-pds">"</span>pid<span class="pl-pds">"</span></span>, [<span class="pl-s"><span class="pl-pds">"</span>top<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>bot<span class="pl-pds">"</span></span>], s, l)

<span class="pl-c"><span class="pl-c">#</span> equivalent syntax</span>
<span class="pl-c"><span class="pl-c">#</span> when ID specified as argument</span>
sp2 <span class="pl-k">=</span> <span class="pl-c1">SoilProfile</span>(<span class="pl-s"><span class="pl-pds">"</span>pid<span class="pl-pds">"</span></span>, s, l)
<span class="pl-c"><span class="pl-c">#</span> or when ID as first column in site data</span>
sp3 <span class="pl-k">=</span> <span class="pl-c1">SoilProfile</span>(s, l)

<span class="pl-c1">show</span>(sp1)

<span class="pl-c"><span class="pl-c">#</span> empty SoilProfile</span>
<span class="pl-c1">show</span>(<span class="pl-c1">SoilProfile</span>())

<span class="pl-c"><span class="pl-c">#</span> site and layer extraction</span>
res <span class="pl-k">=</span> spc[<span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">6</span>, <span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">4</span>]
<span class="pl-c1">show</span>(res)

<span class="pl-c"><span class="pl-c">#</span> view the layer depths</span>
<span class="pl-c1">depths</span>(res)

<span class="pl-c"><span class="pl-c">#</span> all layers have a site</span>
<span class="pl-c1">println</span>(<span class="pl-c1">isValid</span>(res))

<span class="pl-c"><span class="pl-c">#</span> but not all sites have layers [4,5,6]</span>
<span class="pl-c1">println</span>(<span class="pl-c1">sitesWithoutLayers</span>(res))

<span class="pl-c"><span class="pl-c">#</span> check that site and layer order are in sync</span>
<span class="pl-c1">checkIntegrity</span>(res)

<span class="pl-c"><span class="pl-c">#</span> check that layers in top depth order have bottom depths matching adjacent top depths</span>
<span class="pl-c1">checkTopology</span>(res)

<span class="pl-c1">show</span>(spc[<span class="pl-c1">1</span>,<span class="pl-c1">1</span>])

<span class="pl-c"><span class="pl-c">#</span> iterate using for i in SoilProfile</span>
<span class="pl-k">for</span> i <span class="pl-k">in</span> sp1
 <span class="pl-c1">show</span>(i)
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> or use foreach(::Function, ::SoilProfile)</span>
<span class="pl-c1">foreach</span>(show, sp1)</pre></div>
</article></div>