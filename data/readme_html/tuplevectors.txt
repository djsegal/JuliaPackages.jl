<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-tuplevectors" class="anchor" aria-hidden="true" href="#tuplevectors"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>TupleVectors</h1>
<p><a href="https://cscherrer.github.io/TupleVectors.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://cscherrer.github.io/TupleVectors.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a>
<a href="https://github.com/cscherrer/TupleVectors.jl/actions"><img src="https://github.com/cscherrer/TupleVectors.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/cscherrer/TupleVectors.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/8a38463a72f879c7210734791ea84860a724ebc434228ce8544009c177813e9b/68747470733a2f2f636f6465636f762e696f2f67682f6373636865727265722f5475706c65566563746f72732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/cscherrer/TupleVectors.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p>A <code>TupleVector</code> is a vector of named tuples that's stored internally as a named tuple of vectors. For example,</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; tv = TupleVector((u = rand(3), z = randn(3)))
3-element TupleVector with schema (u = Float64, z = Float64)
(u = 0.42±0.33, z = 1.1±1.5)

julia&gt; TupleVectors.unwrap(tv)
(u = [0.14975088814532667, 0.7856209553858793, 0.31574449850794095], z = [2.674728297554503, -0.3239546802964563, 1.0536358658855687])
"><pre>julia<span class="pl-k">&gt;</span> tv <span class="pl-k">=</span> <span class="pl-c1">TupleVector</span>((u <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">3</span>), z <span class="pl-k">=</span> <span class="pl-c1">randn</span>(<span class="pl-c1">3</span>)))
<span class="pl-c1">3</span><span class="pl-k">-</span>element TupleVector with schema (u <span class="pl-k">=</span> Float64, z <span class="pl-k">=</span> Float64)
(u <span class="pl-k">=</span> <span class="pl-c1">0.42</span>±<span class="pl-c1">0.33</span>, z <span class="pl-k">=</span> <span class="pl-c1">1.1</span>±<span class="pl-c1">1.5</span>)

julia<span class="pl-k">&gt;</span> TupleVectors<span class="pl-k">.</span><span class="pl-c1">unwrap</span>(tv)
(u <span class="pl-k">=</span> [<span class="pl-c1">0.14975088814532667</span>, <span class="pl-c1">0.7856209553858793</span>, <span class="pl-c1">0.31574449850794095</span>], z <span class="pl-k">=</span> [<span class="pl-c1">2.674728297554503</span>, <span class="pl-k">-</span><span class="pl-c1">0.3239546802964563</span>, <span class="pl-c1">1.0536358658855687</span>])</pre></div>
<p>The <code>0.42±0.33</code> above is a <code>RealSummary</code>, and comes from <code>summarize</code>. This can be called independently as well:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; summarize(1:100)
50.5±29.0
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">summarize</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">100</span>)
<span class="pl-c1">50.5</span>±<span class="pl-c1">29.0</span></pre></div>
<p>You can get or set values by index or name:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; tv[1] = (u=π-3, z=ℯ)
(u = 0.14159265358979312, z = ℯ)

julia&gt; tv[1]
(u = 0.14159265358979312, z = 2.718281828459045)

julia&gt; tv.z
3-element Vector{Float64}:
  2.718281828459045
 -0.3239546802964563
  1.0536358658855687
"><pre>julia<span class="pl-k">&gt;</span> tv[<span class="pl-c1">1</span>] <span class="pl-k">=</span> (u<span class="pl-k">=</span>π<span class="pl-k">-</span><span class="pl-c1">3</span>, z<span class="pl-k">=</span>ℯ)
(u <span class="pl-k">=</span> <span class="pl-c1">0.14159265358979312</span>, z <span class="pl-k">=</span> ℯ)

julia<span class="pl-k">&gt;</span> tv[<span class="pl-c1">1</span>]
(u <span class="pl-k">=</span> <span class="pl-c1">0.14159265358979312</span>, z <span class="pl-k">=</span> <span class="pl-c1">2.718281828459045</span>)

julia<span class="pl-k">&gt;</span> tv<span class="pl-k">.</span>z
<span class="pl-c1">3</span><span class="pl-k">-</span>element Vector{Float64}<span class="pl-k">:</span>
  <span class="pl-c1">2.718281828459045</span>
 <span class="pl-k">-</span><span class="pl-c1">0.3239546802964563</span>
  <span class="pl-c1">1.0536358658855687</span></pre></div>
<p>TupleVectors is based on NestedTuples.jl, so of course they can be nested:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; nested = TupleVector((x = randn(1000), y = (a = 1:1000, b = 1 ./ randn(1000))))
1000-element TupleVector with schema (x = Float64, y = (a = Int64, b = Float64))
(x = -0.03±0.99, y = (a = 500.0±290.0, b = 4.0±120.0))
"><pre>julia<span class="pl-k">&gt;</span> nested <span class="pl-k">=</span> <span class="pl-c1">TupleVector</span>((x <span class="pl-k">=</span> <span class="pl-c1">randn</span>(<span class="pl-c1">1000</span>), y <span class="pl-k">=</span> (a <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">1000</span>, b <span class="pl-k">=</span> <span class="pl-c1">1</span> <span class="pl-k">./</span> <span class="pl-c1">randn</span>(<span class="pl-c1">1000</span>))))
<span class="pl-c1">1000</span><span class="pl-k">-</span>element TupleVector with schema (x <span class="pl-k">=</span> Float64, y <span class="pl-k">=</span> (a <span class="pl-k">=</span> Int64, b <span class="pl-k">=</span> Float64))
(x <span class="pl-k">=</span> <span class="pl-k">-</span><span class="pl-c1">0.03</span>±<span class="pl-c1">0.99</span>, y <span class="pl-k">=</span> (a <span class="pl-k">=</span> <span class="pl-c1">500.0</span>±<span class="pl-c1">290.0</span>, b <span class="pl-k">=</span> <span class="pl-c1">4.0</span>±<span class="pl-c1">120.0</span>))</pre></div>
<p><code>map</code> can be awkward with nested structures, so we can use <code>NestedTuple.rmap</code>. Note that we need to broadcast over the arrays.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; rmap(x -&gt; log.(x .^ 2) , nested)
1000-element TupleVector with schema (x = Float64, y = (a = Float64, b = Float64))
(x = -1.2±2.1, y = (a = 11.8±2.0, b = 1.3±2.2))
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">rmap</span>(x <span class="pl-k">-&gt;</span> <span class="pl-c1">log</span>.(x <span class="pl-k">.^</span> <span class="pl-c1">2</span>) , nested)
<span class="pl-c1">1000</span><span class="pl-k">-</span>element TupleVector with schema (x <span class="pl-k">=</span> Float64, y <span class="pl-k">=</span> (a <span class="pl-k">=</span> Float64, b <span class="pl-k">=</span> Float64))
(x <span class="pl-k">=</span> <span class="pl-k">-</span><span class="pl-c1">1.2</span>±<span class="pl-c1">2.1</span>, y <span class="pl-k">=</span> (a <span class="pl-k">=</span> <span class="pl-c1">11.8</span>±<span class="pl-c1">2.0</span>, b <span class="pl-k">=</span> <span class="pl-c1">1.3</span>±<span class="pl-c1">2.2</span>))</pre></div>
<p>For more complex structures, it can be useful to initialize separately. This way TupleVectors can determine appropriate types to use.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; fancy = TupleVector(undef, (x=[1,2,3],y=rand(3,2), z=true), 10)
10-element TupleVector with schema (x = Vector{Int64}, y = Matrix{Float64}, z = Bool)
(x = [1.4e13±4.4e13, 0.0±0.0, 1.4e13±4.4e13], y = [6.21245e-310±0.0 6.21245e-310±0.0; 6.21245e-310±0.0 5.52218e-310±0.0; 6.21245e-310±0.0 5.52218e-310±0.0], z = 0.1±0.32)

julia&gt; fancy.x
2-element ArraysOfArrays.ArrayOfSimilarArrays{Int64, 1, 1, 2, ElasticArrays.ElasticMatrix{Int64, 1, Vector{Int64}}}:
 [11, 2, 139711215933697]
 [17, 4, 29441]

julia&gt; fancy.y
2-element ArraysOfArrays.VectorOfSimilarArrays{Float64, 2, 3, ElasticArrays.ElasticArray{Float64, 3, 2, Vector{Float64}}}:
 [0.0 0.0; 0.0 0.0; 0.0 0.0]
 [0.0 0.0; 0.0 0.0; 0.0 0.0]

julia&gt; fancy.z
2-element ElasticArrays.ElasticVector{Bool, 0, Vector{Bool}}:
 1
 0
"><pre>julia<span class="pl-k">&gt;</span> fancy <span class="pl-k">=</span> <span class="pl-c1">TupleVector</span>(undef, (x<span class="pl-k">=</span>[<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>],y<span class="pl-k">=</span><span class="pl-c1">rand</span>(<span class="pl-c1">3</span>,<span class="pl-c1">2</span>), z<span class="pl-k">=</span><span class="pl-c1">true</span>), <span class="pl-c1">10</span>)
<span class="pl-c1">10</span><span class="pl-k">-</span>element TupleVector with schema (x <span class="pl-k">=</span> Vector{Int64}, y <span class="pl-k">=</span> Matrix{Float64}, z <span class="pl-k">=</span> Bool)
(x <span class="pl-k">=</span> [<span class="pl-c1">1.4e13</span>±<span class="pl-c1">4.4e13</span>, <span class="pl-c1">0.0</span>±<span class="pl-c1">0.0</span>, <span class="pl-c1">1.4e13</span>±<span class="pl-c1">4.4e13</span>], y <span class="pl-k">=</span> [<span class="pl-c1">6.21245e-310</span>±<span class="pl-c1">0.0</span> <span class="pl-c1">6.21245e-310</span>±<span class="pl-c1">0.0</span>; <span class="pl-c1">6.21245e-310</span>±<span class="pl-c1">0.0</span> <span class="pl-c1">5.52218e-310</span>±<span class="pl-c1">0.0</span>; <span class="pl-c1">6.21245e-310</span>±<span class="pl-c1">0.0</span> <span class="pl-c1">5.52218e-310</span>±<span class="pl-c1">0.0</span>], z <span class="pl-k">=</span> <span class="pl-c1">0.1</span>±<span class="pl-c1">0.32</span>)

julia<span class="pl-k">&gt;</span> fancy<span class="pl-k">.</span>x
<span class="pl-c1">2</span><span class="pl-k">-</span>element ArraysOfArrays<span class="pl-k">.</span>ArrayOfSimilarArrays{Int64, <span class="pl-c1">1</span>, <span class="pl-c1">1</span>, <span class="pl-c1">2</span>, ElasticArrays<span class="pl-k">.</span>ElasticMatrix{Int64, <span class="pl-c1">1</span>, Vector{Int64}}}<span class="pl-k">:</span>
 [<span class="pl-c1">11</span>, <span class="pl-c1">2</span>, <span class="pl-c1">139711215933697</span>]
 [<span class="pl-c1">17</span>, <span class="pl-c1">4</span>, <span class="pl-c1">29441</span>]

julia<span class="pl-k">&gt;</span> fancy<span class="pl-k">.</span>y
<span class="pl-c1">2</span><span class="pl-k">-</span>element ArraysOfArrays<span class="pl-k">.</span>VectorOfSimilarArrays{Float64, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>, ElasticArrays<span class="pl-k">.</span>ElasticArray{Float64, <span class="pl-c1">3</span>, <span class="pl-c1">2</span>, Vector{Float64}}}<span class="pl-k">:</span>
 [<span class="pl-c1">0.0</span> <span class="pl-c1">0.0</span>; <span class="pl-c1">0.0</span> <span class="pl-c1">0.0</span>; <span class="pl-c1">0.0</span> <span class="pl-c1">0.0</span>]
 [<span class="pl-c1">0.0</span> <span class="pl-c1">0.0</span>; <span class="pl-c1">0.0</span> <span class="pl-c1">0.0</span>; <span class="pl-c1">0.0</span> <span class="pl-c1">0.0</span>]

julia<span class="pl-k">&gt;</span> fancy<span class="pl-k">.</span>z
<span class="pl-c1">2</span><span class="pl-k">-</span>element ElasticArrays<span class="pl-k">.</span>ElasticVector{Bool, <span class="pl-c1">0</span>, Vector{Bool}}<span class="pl-k">:</span>
 <span class="pl-c1">1</span>
 <span class="pl-c1">0</span></pre></div>
<p>Setting things up this way makes it so we can still <code>push!</code> to the TupleVector:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; push!(fancy, (x = [7,8,9], y = rand(3,2), z = true))
4-element TupleVector with schema (x = Vector{Int64}, y = Matrix{Float64}, z = Bool)
(x = [10.5±4.7, 5.5±3.0, 3.5e13±7.0e13], y = [0.19±0.39 0.048±0.096; 0.064±0.13 0.051±0.1; 0.23±0.46 0.2±0.4], z = 0.5±0.58)
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">push!</span>(fancy, (x <span class="pl-k">=</span> [<span class="pl-c1">7</span>,<span class="pl-c1">8</span>,<span class="pl-c1">9</span>], y <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">3</span>,<span class="pl-c1">2</span>), z <span class="pl-k">=</span> <span class="pl-c1">true</span>))
<span class="pl-c1">4</span><span class="pl-k">-</span>element TupleVector with schema (x <span class="pl-k">=</span> Vector{Int64}, y <span class="pl-k">=</span> Matrix{Float64}, z <span class="pl-k">=</span> Bool)
(x <span class="pl-k">=</span> [<span class="pl-c1">10.5</span>±<span class="pl-c1">4.7</span>, <span class="pl-c1">5.5</span>±<span class="pl-c1">3.0</span>, <span class="pl-c1">3.5e13</span>±<span class="pl-c1">7.0e13</span>], y <span class="pl-k">=</span> [<span class="pl-c1">0.19</span>±<span class="pl-c1">0.39</span> <span class="pl-c1">0.048</span>±<span class="pl-c1">0.096</span>; <span class="pl-c1">0.064</span>±<span class="pl-c1">0.13</span> <span class="pl-c1">0.051</span>±<span class="pl-c1">0.1</span>; <span class="pl-c1">0.23</span>±<span class="pl-c1">0.46</span> <span class="pl-c1">0.2</span>±<span class="pl-c1">0.4</span>], z <span class="pl-k">=</span> <span class="pl-c1">0.5</span>±<span class="pl-c1">0.58</span>)</pre></div>
<p>It's often important to be able to create a new <code>Vector</code> or <code>TupleVector</code> from an existing one. For that we have <code>@with</code>:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; tv = TupleVector((u=rand(1000), v=rand(1000)))
1000-element TupleVector with schema (u = Float64, v = Float64)
(u = 0.505±0.29, v = 0.502±0.29)

julia&gt; polar = @with tv begin
              r = hypot(u,v)
              θ = atan(v,u)
              (;r,θ)
              end
1000-element TupleVector with schema (r = Float64, θ = Float64)
(r = 0.77±0.29, θ = 0.78±0.41)
"><pre>julia<span class="pl-k">&gt;</span> tv <span class="pl-k">=</span> <span class="pl-c1">TupleVector</span>((u<span class="pl-k">=</span><span class="pl-c1">rand</span>(<span class="pl-c1">1000</span>), v<span class="pl-k">=</span><span class="pl-c1">rand</span>(<span class="pl-c1">1000</span>)))
<span class="pl-c1">1000</span><span class="pl-k">-</span>element TupleVector with schema (u <span class="pl-k">=</span> Float64, v <span class="pl-k">=</span> Float64)
(u <span class="pl-k">=</span> <span class="pl-c1">0.505</span>±<span class="pl-c1">0.29</span>, v <span class="pl-k">=</span> <span class="pl-c1">0.502</span>±<span class="pl-c1">0.29</span>)

julia<span class="pl-k">&gt;</span> polar <span class="pl-k">=</span> <span class="pl-c1">@with</span> tv <span class="pl-k">begin</span>
              r <span class="pl-k">=</span> <span class="pl-c1">hypot</span>(u,v)
              θ <span class="pl-k">=</span> <span class="pl-c1">atan</span>(v,u)
              (;r,θ)
              <span class="pl-k">end</span>
<span class="pl-c1">1000</span><span class="pl-k">-</span>element TupleVector with schema (r <span class="pl-k">=</span> Float64, θ <span class="pl-k">=</span> Float64)
(r <span class="pl-k">=</span> <span class="pl-c1">0.77</span>±<span class="pl-c1">0.29</span>, θ <span class="pl-k">=</span> <span class="pl-c1">0.78</span>±<span class="pl-c1">0.41</span>)</pre></div>
<p><code>@with</code> can be extended by adding methods to <code>NestedTuples.with</code>. For example, here's on with signature</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="NestedTuples.with(m::Module, hcube_nt::NamedTuple{N,Tuple{H}}, n :: Int, ex::TypelevelExpr{E}) where {T,X,E, N, H&lt;:Hypercube}
"><pre>NestedTuples<span class="pl-k">.</span><span class="pl-c1">with</span>(m<span class="pl-k">::</span><span class="pl-c1">Module</span>, hcube_nt<span class="pl-k">::</span><span class="pl-c1">NamedTuple{N,Tuple{H}}</span>, n <span class="pl-k">::</span> <span class="pl-c1">Int</span>, ex<span class="pl-k">::</span><span class="pl-c1">TypelevelExpr{E}</span>) <span class="pl-k">where</span> {T,X,E, N, H<span class="pl-k">&lt;:</span><span class="pl-c1">Hypercube</span>}</pre></div>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using TupleVectors, Sobol, UnicodePlots

julia&gt; ω = SobolHypercube(2)
SobolHypercube{2}(2-dimensional Sobol sequence on [0,1]^2, [0.5, 0.5], Base.RefValue{Int64}(0))

julia&gt; tv = @with (;ω) 1000 begin
           x = 2π * rand(ω)
           y = sin(x) + rand(ω)
           (; x, y)
       end
1000-element TupleVector with schema (x = Float64, y = Float64)
(x = 3.14±1.8, y = 0.5±0.77)

julia&gt; @with TupleVectors.unwrap(tv) begin
           scatterplot(x,y)
       end
      ┌────────────────────────────────────────┐ 
    2 │⠀⠀⠀⠀⠀⠀⠤⣲⡞⢳⣶⠠⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ 
      │⠀⠀⠀⠀⣐⣺⣑⡮⡽⢮⠵⣚⢗⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ 
      │⠀⠀⠠⢖⠟⢵⠆⣝⣳⣟⣫⠔⡫⠺⡢⠄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ 
      │⠀⠰⣪⡙⣮⢛⣍⡳⢵⡾⢕⡩⢜⠚⠫⣳⢂⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ 
      │⡠⣳⣥⡺⢤⡟⡒⢽⣍⢝⡿⣒⡗⡮⢟⣪⢶⢄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ 
      │⢣⢧⡫⢶⣪⡽⠉⠁⠀⠀⠈⠡⢪⢭⠮⣑⡖⡊⢅⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡰⠀⠀⠀⠀│ 
      │⠯⢆⢟⣫⠋⠀⠀⠀⠀⠀⠀⠀⠀⠑⣝⡋⡽⠜⡫⡢⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡴⠖⠀⠀⠀⠀│ 
      │⣞⠞⡔⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠐⢝⠱⡱⢬⣭⣢⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡐⡘⠭⡥⠀⠀⠀⠀│ 
      │⡔⡝⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠣⢢⣒⣓⡡⢳⠀⠀⠀⠀⠀⠀⠀⠀⠀⠐⣜⠝⣛⣊⠀⠀⠀⠀│ 
      │⠈⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢁⡪⠯⢍⠧⢛⡲⣀⡀⠀⠀⢀⣐⢜⡻⣱⣻⠦⡑⠀⠀⠀⠀│ 
      │⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠙⣝⡛⣟⠿⢯⠯⣫⡛⣻⣛⠿⡽⢿⣯⢟⣟⠋⠉⠉⠉⠉│ 
      │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠐⡭⡰⣬⣗⣛⢴⠺⠶⡞⣙⣺⣥⢾⡬⠂⠀⠀⠀⠀⠀│ 
      │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠯⣐⡮⠶⣩⢵⣥⣽⠰⢵⣚⡜⠀⠀⠀⠀⠀⠀⠀│ 
      │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠩⣝⡭⢟⣢⣚⣲⠭⡫⠉⠀⠀⠀⠀⠀⠀⠀⠀│ 
   -1 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠁⠵⢍⡽⠭⠓⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ 
      └────────────────────────────────────────┘ 
      0                                        7
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> TupleVectors, Sobol, UnicodePlots

julia<span class="pl-k">&gt;</span> ω <span class="pl-k">=</span> <span class="pl-c1">SobolHypercube</span>(<span class="pl-c1">2</span>)
<span class="pl-c1">SobolHypercube</span><span class="pl-c1">{2}</span>(<span class="pl-c1">2</span><span class="pl-k">-</span>dimensional Sobol sequence on [<span class="pl-c1">0</span>,<span class="pl-c1">1</span>]<span class="pl-k">^</span><span class="pl-c1">2</span>, [<span class="pl-c1">0.5</span>, <span class="pl-c1">0.5</span>], Base<span class="pl-k">.</span><span class="pl-c1">RefValue</span><span class="pl-c1">{Int64}</span>(<span class="pl-c1">0</span>))

julia<span class="pl-k">&gt;</span> tv <span class="pl-k">=</span> <span class="pl-c1">@with</span> (;ω) <span class="pl-c1">1000</span> <span class="pl-k">begin</span>
           x <span class="pl-k">=</span> <span class="pl-c1">2</span>π <span class="pl-k">*</span> <span class="pl-c1">rand</span>(ω)
           y <span class="pl-k">=</span> <span class="pl-c1">sin</span>(x) <span class="pl-k">+</span> <span class="pl-c1">rand</span>(ω)
           (; x, y)
       <span class="pl-k">end</span>
<span class="pl-c1">1000</span><span class="pl-k">-</span>element TupleVector with schema (x <span class="pl-k">=</span> Float64, y <span class="pl-k">=</span> Float64)
(x <span class="pl-k">=</span> <span class="pl-c1">3.14</span>±<span class="pl-c1">1.8</span>, y <span class="pl-k">=</span> <span class="pl-c1">0.5</span>±<span class="pl-c1">0.77</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@with</span> TupleVectors<span class="pl-k">.</span><span class="pl-c1">unwrap</span>(tv) <span class="pl-k">begin</span>
           <span class="pl-c1">scatterplot</span>(x,y)
       <span class="pl-k">end</span>
      ┌────────────────────────────────────────┐ 
    <span class="pl-c1">2</span> │⠀⠀⠀⠀⠀⠀⠤⣲⡞⢳⣶⠠⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ 
      │⠀⠀⠀⠀⣐⣺⣑⡮⡽⢮⠵⣚⢗⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ 
      │⠀⠀⠠⢖⠟⢵⠆⣝⣳⣟⣫⠔⡫⠺⡢⠄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ 
      │⠀⠰⣪⡙⣮⢛⣍⡳⢵⡾⢕⡩⢜⠚⠫⣳⢂⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ 
      │⡠⣳⣥⡺⢤⡟⡒⢽⣍⢝⡿⣒⡗⡮⢟⣪⢶⢄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ 
      │⢣⢧⡫⢶⣪⡽⠉⠁⠀⠀⠈⠡⢪⢭⠮⣑⡖⡊⢅⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡰⠀⠀⠀⠀│ 
      │⠯⢆⢟⣫⠋⠀⠀⠀⠀⠀⠀⠀⠀⠑⣝⡋⡽⠜⡫⡢⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡴⠖⠀⠀⠀⠀│ 
      │⣞⠞⡔⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠐⢝⠱⡱⢬⣭⣢⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡐⡘⠭⡥⠀⠀⠀⠀│ 
      │⡔⡝⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠣⢢⣒⣓⡡⢳⠀⠀⠀⠀⠀⠀⠀⠀⠀⠐⣜⠝⣛⣊⠀⠀⠀⠀│ 
      │⠈⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢁⡪⠯⢍⠧⢛⡲⣀⡀⠀⠀⢀⣐⢜⡻⣱⣻⠦⡑⠀⠀⠀⠀│ 
      │⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠙⣝⡛⣟⠿⢯⠯⣫⡛⣻⣛⠿⡽⢿⣯⢟⣟⠋⠉⠉⠉⠉│ 
      │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠐⡭⡰⣬⣗⣛⢴⠺⠶⡞⣙⣺⣥⢾⡬⠂⠀⠀⠀⠀⠀│ 
      │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠯⣐⡮⠶⣩⢵⣥⣽⠰⢵⣚⡜⠀⠀⠀⠀⠀⠀⠀│ 
      │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠩⣝⡭⢟⣢⣚⣲⠭⡫⠉⠀⠀⠀⠀⠀⠀⠀⠀│ 
   <span class="pl-k">-</span><span class="pl-c1">1</span> │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠁⠵⢍⡽⠭⠓⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ 
      └────────────────────────────────────────┘ 
      <span class="pl-c1">0</span>                                        <span class="pl-c1">7</span></pre></div>
</article></div>