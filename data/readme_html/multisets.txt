<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-multisets" class="anchor" aria-hidden="true" href="#multisets"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Multisets</h1>
<p dir="auto">A <code>Set</code> is an unordered collection of things in which an item may appear at most once.</p>
<p dir="auto">A <code>Multiset</code> is an unordered collection of things with repetition permitted.</p>
<h2 dir="auto"><a id="user-content-new-in-version-04x" class="anchor" aria-hidden="true" href="#new-in-version-04x"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>New in Version 0.4.x</h2>
<ul dir="auto">
<li>A <code>Multiset</code> is now a subtype of <code>AbstractSet</code>.</li>
<li>Set operations between a <code>Multiset</code> and a <code>Set</code> (or <code>BitSet</code>) are now supported.</li>
<li>The operators <code>&amp;</code> and <code>|</code> have been removed; use <code>∩</code> and <code>∪</code> instead.</li>
<li>The operators <code>&lt;</code>, <code>&lt;=</code>, <code>&gt;</code>, and <code>&gt;=</code> have been removed. Use <code>⊆</code> and <code>⊇</code> instead, or use the function <code>issubset</code>.</li>
</ul>
<h2 dir="auto"><a id="user-content-creating-a-multiset" class="anchor" aria-hidden="true" href="#creating-a-multiset"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Creating a Multiset</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using Multisets
julia&gt; M = Multiset{Type}()"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Multisets
julia<span class="pl-k">&gt;</span> M <span class="pl-k">=</span> <span class="pl-c1">Multiset</span><span class="pl-c1">{Type}</span>()</pre></div>
<p dir="auto">where <code>Type</code> is the type of elements to be held in <code>M</code>
(e.g., <code>Int</code> or <code>String</code>).
If <code>Type</code> is omitted, this defaults to <code>Any</code>.</p>
<p dir="auto">Given a collection <code>list</code> of elements (such as a <code>Vector</code> or <code>Set</code>)
invoking <code>Multiset(list)</code> creates a new <code>Multiset</code> in which the elements
of <code>list</code> appear with the appropriate multiplicity. For example,
<code>Multiset(ones(Int,3))</code> creates the multiset <code>{1,1,1}</code>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; M = Multiset([1,1,2,3,5])
{1,1,2,3,5}

julia&gt; M = Multiset(5,3,2,1,1)
{1,1,2,3,5}

julia&gt; eltype(M)
Int64"><pre>julia<span class="pl-k">&gt;</span> M <span class="pl-k">=</span> <span class="pl-c1">Multiset</span>([<span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>,<span class="pl-c1">5</span>])
{<span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>,<span class="pl-c1">5</span>}

julia<span class="pl-k">&gt;</span> M <span class="pl-k">=</span> <span class="pl-c1">Multiset</span>(<span class="pl-c1">5</span>,<span class="pl-c1">3</span>,<span class="pl-c1">2</span>,<span class="pl-c1">1</span>,<span class="pl-c1">1</span>)
{<span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>,<span class="pl-c1">5</span>}

julia<span class="pl-k">&gt;</span> <span class="pl-c1">eltype</span>(M)
Int64</pre></div>
<h2 dir="auto"><a id="user-content-addingdeleting-elements" class="anchor" aria-hidden="true" href="#addingdeleting-elements"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Adding/Deleting Elements</h2>
<ul dir="auto">
<li><code>push!(M,x)</code> increases the multiplicity of <code>x</code> in <code>M</code> by 1. If <code>x</code> is not
already in <code>M</code>, then it is added to <code>M</code>.</li>
<li><code>push!(M,x,incr)</code> increases the multiplicity of <code>x</code> in <code>M</code> by <code>incr</code>. We
allow <code>incr</code> to be negative to decrease the multiplicity of <code>x</code>
(but not below 0).</li>
<li><code>M[x]=m</code> explicitly sets the multiplicty of <code>x</code> to <code>m</code>.</li>
<li><code>delete!(M,x)</code> removes <code>x</code> from <code>M</code>. <code>M[x]=0</code> has the same effect.</li>
</ul>
<h2 dir="auto"><a id="user-content-keysvaluespairs" class="anchor" aria-hidden="true" href="#keysvaluespairs"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Keys/Values/Pairs</h2>
<ul dir="auto">
<li><code>keys(M)</code> returns an iterator for the elements of <code>M</code> (that have multiplicyt at least one).</li>
<li><code>values(M)</code> returns an iterator for the multiplicities of the elements of <code>M</code>.</li>
<li><code>pairs(M)</code> returns an iterator over <code>element =&gt; multiplicity</code> pairs for <code>M</code>.</li>
</ul>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; M = Multiset(&quot;alpha&quot;, &quot;beta&quot;, &quot;beta&quot;, &quot;gamma&quot;, &quot;gamma&quot;, &quot;gamma&quot;)
{alpha,beta,beta,gamma,gamma,gamma}

julia&gt; collect(keys(M))
3-element Array{String,1}:
 &quot;alpha&quot;
 &quot;gamma&quot;
 &quot;beta&quot;

julia&gt; collect(values(M))
3-element Array{Int64,1}:
 1
 3
 2

julia&gt; pairs(M)
Dict{String,Int64} with 3 entries:
  &quot;alpha&quot; =&gt; 1
  &quot;gamma&quot; =&gt; 3
  &quot;beta&quot;  =&gt; 2"><pre>julia<span class="pl-k">&gt;</span> M <span class="pl-k">=</span> <span class="pl-c1">Multiset</span>(<span class="pl-s"><span class="pl-pds">"</span>alpha<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>beta<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>beta<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>gamma<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>gamma<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>gamma<span class="pl-pds">"</span></span>)
{alpha,beta,beta,gamma,gamma,gamma}

julia<span class="pl-k">&gt;</span> <span class="pl-c1">collect</span>(<span class="pl-c1">keys</span>(M))
<span class="pl-c1">3</span><span class="pl-k">-</span>element Array{String,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-s"><span class="pl-pds">"</span>alpha<span class="pl-pds">"</span></span>
 <span class="pl-s"><span class="pl-pds">"</span>gamma<span class="pl-pds">"</span></span>
 <span class="pl-s"><span class="pl-pds">"</span>beta<span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">collect</span>(<span class="pl-c1">values</span>(M))
<span class="pl-c1">3</span><span class="pl-k">-</span>element Array{Int64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">1</span>
 <span class="pl-c1">3</span>
 <span class="pl-c1">2</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">pairs</span>(M)
Dict{String,Int64} with <span class="pl-c1">3</span> entries<span class="pl-k">:</span>
  <span class="pl-s"><span class="pl-pds">"</span>alpha<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1</span>
  <span class="pl-s"><span class="pl-pds">"</span>gamma<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">3</span>
  <span class="pl-s"><span class="pl-pds">"</span>beta<span class="pl-pds">"</span></span>  <span class="pl-k">=&gt;</span> <span class="pl-c1">2</span></pre></div>
<h2 dir="auto"><a id="user-content-access" class="anchor" aria-hidden="true" href="#access"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Access</h2>
<p dir="auto">To determine the multiplicity of <code>x</code> in <code>M</code> use <code>M[x]</code>. This returns <code>0</code>
if <code>x</code> was never added to <code>M</code>.</p>
<p dir="auto">To get a list of all the elements in <code>M</code>, use <code>collect</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; collect(M)
6-element Array{Int64,1}:
 1
 1
 2
 2
 3
 4"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">collect</span>(M)
<span class="pl-c1">6</span><span class="pl-k">-</span>element Array{Int64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">1</span>
 <span class="pl-c1">1</span>
 <span class="pl-c1">2</span>
 <span class="pl-c1">2</span>
 <span class="pl-c1">3</span>
 <span class="pl-c1">4</span></pre></div>
<p dir="auto">Notice that elements are repeated per their multiplicity.
To get a list of the elements in which elements appear
only once each use <code>collect(keys(M))</code>.</p>
<p dir="auto">To convert <code>M</code> into a Julia <code>Set</code> (effectively, set all multiplicities to 1)
use <code>Set(M)</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; Set(M)
Set([4,2,3,1])"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">Set</span>(M)
<span class="pl-c1">Set</span>([<span class="pl-c1">4</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>,<span class="pl-c1">1</span>])</pre></div>
<h2 dir="auto"><a id="user-content-printing" class="anchor" aria-hidden="true" href="#printing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Printing</h2>
<p dir="auto">The result of <code>println(M)</code> can be controlled by the following functions.
Suppose a multiset is created as follows:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; M = Multiset{String}();
julia&gt; push!(M,&quot;alpha&quot;);
julia&gt; push!(M,&quot;beta&quot;, 2);"><pre>julia<span class="pl-k">&gt;</span> M <span class="pl-k">=</span> <span class="pl-c1">Multiset</span><span class="pl-c1">{String}</span>();
julia<span class="pl-k">&gt;</span> <span class="pl-c1">push!</span>(M,<span class="pl-s"><span class="pl-pds">"</span>alpha<span class="pl-pds">"</span></span>);
julia<span class="pl-k">&gt;</span> <span class="pl-c1">push!</span>(M,<span class="pl-s"><span class="pl-pds">"</span>beta<span class="pl-pds">"</span></span>, <span class="pl-c1">2</span>);</pre></div>
<ul dir="auto">
<li><code>set_braces_show()</code> causes multisets to be printed
as a list enclosed in curly braces:
<code>{alpha,beta,beta}</code>. This is the default. If the multiset is empty, <code>∅</code> is printed.</li>
<li><code>set_short_show()</code> causes multisets to be printed in an
abbreviated format like this: <code>Multiset{String} with 3 elements</code>.</li>
<li><code>set_julia_show()</code> causes multisets to be printed in a form that would
be a proper Julia definition of that multiset:
<code>Multiset(String["alpha","beta","beta"])</code>.</li>
<li><code>set_key_value_show()</code> causes multisets to be printed in a way that
shows each element
and its multiplicity as key-value pairs: <code>Multiset{String}("alpha" =&gt; 1, "beta" =&gt; 2)</code>.</li>
</ul>
<h2 dir="auto"><a id="user-content-operations" class="anchor" aria-hidden="true" href="#operations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Operations</h2>
<h4 dir="auto"><a id="user-content-unionintersection" class="anchor" aria-hidden="true" href="#unionintersection"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Union/Intersection</h4>
<p dir="auto">The functions <code>union</code> and <code>intersect</code> compute the union and intersection
of multisets. For example:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; A = Multiset(1,2,2,3)
{1,2,2,3}

julia&gt; B = Multiset(1,1,1,2,4)
{1,1,1,2,4}

julia&gt; union(A,B)
{1,1,1,2,2,3,4}

julia&gt; intersect(A,B)
{1,2}"><pre>julia<span class="pl-k">&gt;</span> A <span class="pl-k">=</span> <span class="pl-c1">Multiset</span>(<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>)
{<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>}

julia<span class="pl-k">&gt;</span> B <span class="pl-k">=</span> <span class="pl-c1">Multiset</span>(<span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">4</span>)
{<span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">4</span>}

julia<span class="pl-k">&gt;</span> <span class="pl-c1">union</span>(A,B)
{<span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>,<span class="pl-c1">4</span>}

julia<span class="pl-k">&gt;</span> <span class="pl-c1">intersect</span>(A,B)
{<span class="pl-c1">1</span>,<span class="pl-c1">2</span>}</pre></div>
<p dir="auto">The multiplicity of <code>x</code> in <code>union(A,B)</code> is <code>max(A[x],B[x])</code> and
the multiplicity in <code>intersect(A,B)</code> is <code>min(A[x],B[x])</code>.</p>
<p dir="auto">See <code>+</code> below (disjoint union) which behaves differently.</p>
<h4 dir="auto"><a id="user-content-productsumdifference" class="anchor" aria-hidden="true" href="#productsumdifference"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Product/Sum/Difference</h4>
<ul dir="auto">
<li>
<p dir="auto">The <em>Cartesian product</em> of multisets <code>A</code> and <code>B</code> is computed with <code>A*B</code>.
If <code>a</code> is an element of <code>A</code> and <code>b</code> is an element of <code>B</code> then the
multiplicity of <code>(a,b)</code> in <code>A*B</code> is <code>A[x]*B[x]</code>.</p>
</li>
<li>
<p dir="auto">For a nonnegative integer <code>n</code> and a multiset <code>A</code> the result of <code>n*A</code> is
a new multiset in which the multiplicy of <code>x</code> is <code>n*A[x]</code>.</p>
</li>
<li>
<p dir="auto">The <em>disjoint union</em> of <code>A</code> and <code>B</code> is computed with <code>A+B</code>.
If <code>a</code> is an element of <code>A</code> and <code>b</code> is an element of <code>B</code> then the
multiplicity of <code>(a,b)</code> in <code>A*B</code> is <code>A[x]+B[x]</code>.</p>
</li>
<li>
<p dir="auto">The <em>difference</em> of multisets is computed as <code>A-B</code>. In the result,
the multiplicity of <code>x</code> is <code>max(0, A[x]-B[x])</code>. This is not the same as <code>setdiff</code> because
<code>setdiff(A,B)</code> gives a multiset in which any element of <code>B</code> is completely removed from <code>A</code>.</p>
</li>
</ul>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; A = Multiset(1,1,2,3)
{1,1,2,3}
julia&gt; B = Multiset(1,2)
{1,2}
julia&gt; A-B
{1,3}
julia&gt; setdiff(A,B)
{3}"><pre>julia<span class="pl-k">&gt;</span> A <span class="pl-k">=</span> <span class="pl-c1">Multiset</span>(<span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>)
{<span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>}
julia<span class="pl-k">&gt;</span> B <span class="pl-k">=</span> <span class="pl-c1">Multiset</span>(<span class="pl-c1">1</span>,<span class="pl-c1">2</span>)
{<span class="pl-c1">1</span>,<span class="pl-c1">2</span>}
julia<span class="pl-k">&gt;</span> A<span class="pl-k">-</span>B
{<span class="pl-c1">1</span>,<span class="pl-c1">3</span>}
julia<span class="pl-k">&gt;</span> <span class="pl-c1">setdiff</span>(A,B)
{<span class="pl-c1">3</span>}</pre></div>
<h4 dir="auto"><a id="user-content-cardinality" class="anchor" aria-hidden="true" href="#cardinality"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Cardinality</h4>
<p dir="auto">The function <code>length</code> computes the cardinality (number of elements)
in a multiset (including multiplicities).</p>
<p dir="auto">The function <code>isempty</code> returns <code>true</code> exactly when <code>length(M)==0</code>.</p>
<h2 dir="auto"><a id="user-content-comparison" class="anchor" aria-hidden="true" href="#comparison"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Comparison</h2>
<p dir="auto">The operator <code>A==B</code> and the function <code>issubset(A,B)</code> are provided to determine
if <code>A</code> and <code>B</code> are equal or <code>A</code>is a submultiset of <code>B</code>. This can also be expressed
as <code>A ⊆ B</code> or <code>B ⊇ A</code>.</p>
<p dir="auto">Note that <code>A==B</code> holds when <code>A[x]==B[x]</code> for all <code>x</code> and <code>issubset(A,B)</code>
holds when <code>A[x] &lt;= B[x]</code> for all <code>x</code>.</p>
<p dir="auto">To test if <code>x</code> is an element of a multiset <code>A</code>, one may use any of the following:</p>
<ul dir="auto">
<li><code>x ∈ A</code></li>
<li><code>in(x,A)</code></li>
<li><code>A ∋ x</code></li>
<li><code>A[x] &gt; 0</code></li>
</ul>
<h2 dir="auto"><a id="user-content-iteration" class="anchor" aria-hidden="true" href="#iteration"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Iteration</h2>
<p dir="auto">When iterating over a <code>Multiset</code> each element is repeated according to its
multiplicity.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; A = Multiset(1,2,1,2,3)
{1,1,2,2,3}

julia&gt; for a in A
       println(a)
       end
2
2
3
1
1

julia&gt; sum(A)
9"><pre>julia<span class="pl-k">&gt;</span> A <span class="pl-k">=</span> <span class="pl-c1">Multiset</span>(<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>)
{<span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>}

julia<span class="pl-k">&gt;</span> <span class="pl-k">for</span> a <span class="pl-k">in</span> A
       <span class="pl-c1">println</span>(a)
       <span class="pl-k">end</span>
<span class="pl-c1">2</span>
<span class="pl-c1">2</span>
<span class="pl-c1">3</span>
<span class="pl-c1">1</span>
<span class="pl-c1">1</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">sum</span>(A)
<span class="pl-c1">9</span></pre></div>
<h2 dir="auto"><a id="user-content-multisets-as-counters" class="anchor" aria-hidden="true" href="#multisets-as-counters"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Multisets as Counters</h2>
<p dir="auto">Multisets are useful devices for counting. For example, suppose a program
reads in words from a text file and we want to count how often each word
appears in that file. We can let <code>M = Multiset{String}()</code> and then
step through the words in the file pushing each instance into <code>M</code>.
The basic structure looks like this:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="for word in FILE
  push!(M,word)
end"><pre><span class="pl-k">for</span> word <span class="pl-k">in</span> FILE
  <span class="pl-c1">push!</span>(M,word)
<span class="pl-k">end</span></pre></div>
<p dir="auto">In the end, <code>M[word]</code> will return how often <code>word</code> was seen in the file.
See also my <a href="https://github.com/scheinerman/Counters.jl.git"><code>Counters</code></a> module.</p>
<h2 dir="auto"><a id="user-content-miscellaneous" class="anchor" aria-hidden="true" href="#miscellaneous"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Miscellaneous</h2>
<h3 dir="auto"><a id="user-content-implementation" class="anchor" aria-hidden="true" href="#implementation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Implementation</h3>
<p dir="auto">A <code>Multiset</code> consists of a single data field called <code>data</code> that is a
dictionary mapping elements to their multiplicities. The various
<code>Multiset</code> functions ensure the integrity of <code>data</code> (enforcing nonnegativity).</p>
<p dir="auto">The function <code>clean!</code> purges the <code>data</code> field of any elements with multiplicity
equal to <code>0</code>. This is used by the <code>hash</code> function which is provided so a <code>Multiset</code>
can be used as a key in a dictionary, etc. The hash of a
<code>Multiset</code> is simply the hash of its cleaned <code>data</code> field.</p>
<p dir="auto"><strong>Note</strong>: The <code>clean!</code> function is not exported. There probably should be no
reason for the user to invoke it, but if desired use
<code>Multisets.clean!(M)</code>.</p>
<h3 dir="auto"><a id="user-content-making-a-copy-of-a-multiset" class="anchor" aria-hidden="true" href="#making-a-copy-of-a-multiset"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Making a copy of a <code>Multiset</code></h3>
<p dir="auto">If <code>A</code> is a <code>Multiset</code>, then <code>B=A</code> assigns <code>B</code> to be the same object as <code>A</code>. That is,
any changes to one affects the other:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; A = Multiset(1,1,2,3,5)
{1,1,2,3,5}
julia&gt; B = A
{1,1,2,3,5}
julia&gt; A[8]=2;

julia&gt; A
{1,1,2,3,5,8,8}
julia&gt; B
{1,1,2,3,5,8,8}"><pre>julia<span class="pl-k">&gt;</span> A <span class="pl-k">=</span> <span class="pl-c1">Multiset</span>(<span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>,<span class="pl-c1">5</span>)
{<span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>,<span class="pl-c1">5</span>}
julia<span class="pl-k">&gt;</span> B <span class="pl-k">=</span> A
{<span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>,<span class="pl-c1">5</span>}
julia<span class="pl-k">&gt;</span> A[<span class="pl-c1">8</span>]<span class="pl-k">=</span><span class="pl-c1">2</span>;

julia<span class="pl-k">&gt;</span> A
{<span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>,<span class="pl-c1">5</span>,<span class="pl-c1">8</span>,<span class="pl-c1">8</span>}
julia<span class="pl-k">&gt;</span> B
{<span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>,<span class="pl-c1">5</span>,<span class="pl-c1">8</span>,<span class="pl-c1">8</span>}</pre></div>
<p dir="auto">To make an independent copy, use <code>copy</code> or <code>deepcopy</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; A = Multiset(1,1,2,3,5)
{1,1,2,3,5}
julia&gt; B = deepcopy(A)
{1,1,2,3,5}
julia&gt; A[8]=2;

julia&gt; A
{1,1,2,3,5,8,8}
julia&gt; B
{1,1,2,3,5}"><pre>julia<span class="pl-k">&gt;</span> A <span class="pl-k">=</span> <span class="pl-c1">Multiset</span>(<span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>,<span class="pl-c1">5</span>)
{<span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>,<span class="pl-c1">5</span>}
julia<span class="pl-k">&gt;</span> B <span class="pl-k">=</span> <span class="pl-c1">deepcopy</span>(A)
{<span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>,<span class="pl-c1">5</span>}
julia<span class="pl-k">&gt;</span> A[<span class="pl-c1">8</span>]<span class="pl-k">=</span><span class="pl-c1">2</span>;

julia<span class="pl-k">&gt;</span> A
{<span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>,<span class="pl-c1">5</span>,<span class="pl-c1">8</span>,<span class="pl-c1">8</span>}
julia<span class="pl-k">&gt;</span> B
{<span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>,<span class="pl-c1">5</span>}</pre></div>
<p dir="auto">Note that <code>deepcopy</code> duplicates all elements of the multiset. If the elements are immutable,
then <code>deepcopy</code> is more efficient than <code>copy</code>. On the other hand, if the elements are
mutable, then <code>deepcopy</code> is slower because it creates independent copies of the elements.</p>
</article></div>