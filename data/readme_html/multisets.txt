<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-multisets" class="anchor" aria-hidden="true" href="#multisets"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Multisets</h1>
<p><a href="https://travis-ci.org/scheinerman/Multisets.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/7b8c0d8382ec63da44a1827a1fda4a0137318ec1/68747470733a2f2f7472617669732d63692e6f72672f73636865696e65726d616e2f4d756c7469736574732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/scheinerman/Multisets.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p><a href="https://coveralls.io/github/scheinerman/Multisets.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/4a536cf44f7bd7ac393f2824725ab0a960eddef3/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f73636865696e65726d616e2f4d756c7469736574732e6a6c2f62616467652e7376673f6272616e63683d6d617374657226736572766963653d676974687562" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/scheinerman/Multisets.jl/badge.svg?branch=master&amp;service=github" style="max-width:100%;"></a></p>
<p><a href="http://codecov.io/github/scheinerman/Multisets.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/3cb25de4bab84471384e221d6de341ef9834ee83/687474703a2f2f636f6465636f762e696f2f6769746875622f73636865696e65726d616e2f4d756c7469736574732e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/scheinerman/Multisets.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
<p>Finite multisets in Julia.</p>
<p>A <em>multiset</em> is an unordered collection of things with repetition permitted.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Installation</h2>
<div class="highlight highlight-source-julia"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">clone</span>(<span class="pl-s"><span class="pl-pds">"</span>https://github.com/scheinerman/Multisets.jl.git<span class="pl-pds">"</span></span>)</pre></div>
<h2><a id="user-content-creating-a-multiset" class="anchor" aria-hidden="true" href="#creating-a-multiset"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Creating a multiset</h2>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Multisets
julia<span class="pl-k">&gt;</span> M <span class="pl-k">=</span> <span class="pl-c1">Multiset</span><span class="pl-c1">{Type}</span>()</pre></div>
<p>where <code>Type</code> is the type of elements to be held in <code>M</code>
(e.g., <code>Int</code> or <code>String</code>).
If <code>Type</code> is omitted, this defaults to <code>Any</code>.</p>
<p>Given a collection <code>list</code> of elements (such as a <code>Vector</code> or <code>Set</code>)
invoking <code>Multiset(list)</code> creates a new <code>Multiset</code> in which the elements
of <code>list</code> appear with the appropriate multiplicity. For example,
<code>Multiset(eye(Int,3))</code> creates the multiset <code>{0,0,0,0,0,0,1,1,1}</code>.</p>
<h2><a id="user-content-addingdeleting-elements" class="anchor" aria-hidden="true" href="#addingdeleting-elements"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Adding/deleting elements</h2>
<ul>
<li><code>push!(M,x)</code> increases the multiplicity of <code>x</code> in <code>M</code> by 1. If <code>x</code> is not
already in <code>M</code>, then it is added to <code>M</code>.</li>
<li><code>push!(M,x,incr)</code> increases the multiplicity of <code>x</code> in <code>M</code> by <code>incr</code>. We
allow <code>incr</code> to be negative to decrease the multiplicity of <code>x</code>
(but not below 0).</li>
<li><code>M[x]=m</code> explicitly sets the multiplicty of <code>x</code> to <code>m</code>.</li>
<li><code>delete!(M,x)</code> removes <code>x</code> from <code>M</code>. <code>M[x]=0</code> has the same effect.</li>
</ul>
<h2><a id="user-content-access" class="anchor" aria-hidden="true" href="#access"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Access</h2>
<p>To determine the multiplicity of <code>x</code> in <code>M</code> use <code>M[x]</code>. This returns <code>0</code>
if <code>x</code> was never added to <code>M</code>.</p>
<p>To get a list of all the elements in <code>M</code>, use <code>collect</code>:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">collect</span>(M)
<span class="pl-c1">6</span><span class="pl-k">-</span>element Array{Int64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">1</span>
 <span class="pl-c1">1</span>
 <span class="pl-c1">2</span>
 <span class="pl-c1">2</span>
 <span class="pl-c1">3</span>
 <span class="pl-c1">4</span></pre></div>
<p>Notice that elements are repeated per their multiplicity.
To get a list of the elements in which elements appear
only once each use <code>unique(collect(M))</code>.</p>
<p>To convert <code>M</code> into a Julia <code>Set</code> (effectively, set all multiplicities to 1)
use <code>Set(M)</code>:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">Set</span>(M)
<span class="pl-c1">Set</span>([<span class="pl-c1">4</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>,<span class="pl-c1">1</span>])</pre></div>
<h2><a id="user-content-printing" class="anchor" aria-hidden="true" href="#printing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Printing</h2>
<p>The result of <code>println(M)</code> can be controlled by the following functions.
Suppose a multiset is created as follows:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> M <span class="pl-k">=</span> <span class="pl-c1">Multiset</span><span class="pl-c1">{String}</span>();
julia<span class="pl-k">&gt;</span> <span class="pl-c1">push!</span>(M,<span class="pl-s"><span class="pl-pds">"</span>alpha<span class="pl-pds">"</span></span>);
julia<span class="pl-k">&gt;</span> <span class="pl-c1">push!</span>(M,<span class="pl-s"><span class="pl-pds">"</span>beta<span class="pl-pds">"</span></span>, <span class="pl-c1">2</span>);</pre></div>
<ul>
<li><code>set_braces_show()</code> causes multisets to be printed
as a list enclosed in curly braces:
<code>{alpha,beta,beta}</code>. This is the default.</li>
<li><code>set_short_show()</code> causes multisets to be printed in an
abbreviated format like this: <code>Multiset{String} with 3 elements</code>.</li>
<li><code>set_julia_show()</code> causes multisets to be printed in a form that would
be a proper Julia definition of that multiset:
<code>Multiset(String["alpha","beta","beta"])</code>.</li>
</ul>
<h2><a id="user-content-operations" class="anchor" aria-hidden="true" href="#operations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Operations</h2>
<h4><a id="user-content-unionintersection" class="anchor" aria-hidden="true" href="#unionintersection"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Union/Intersection</h4>
<p>The functions <code>union</code> and <code>intersect</code> compute the union and intersection
of multisets. For example:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> A <span class="pl-k">=</span> <span class="pl-c1">Multiset</span>(<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>)
{<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>}

julia<span class="pl-k">&gt;</span> B <span class="pl-k">=</span> <span class="pl-c1">Multiset</span>(<span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">4</span>)
{<span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">4</span>}

julia<span class="pl-k">&gt;</span> <span class="pl-c1">union</span>(A,B)
{<span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>,<span class="pl-c1">4</span>}

julia<span class="pl-k">&gt;</span> <span class="pl-c1">intersect</span>(A,B)
{<span class="pl-c1">1</span>,<span class="pl-c1">2</span>}</pre></div>
<p>The multiplicity of <code>x</code> in <code>union(A,B)</code> is <code>max(A[x],B[x])</code> and
the multiplicity in <code>intersect(A,B)</code> is <code>min(A[x],B[x])</code>.</p>
<p>Union and intersection can be abbreviated <code>A|B</code> and <code>A&amp;B</code>, respectively.
See <code>+</code> below (disjoint union) which behaves differently.</p>
<h4><a id="user-content-productsumdifference" class="anchor" aria-hidden="true" href="#productsumdifference"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Product/sum/difference</h4>
<ul>
<li>
<p>The <em>Cartesian product</em> of multisets <code>A</code> and <code>B</code> is computed with <code>A*B</code>.
If <code>a</code> is an element of <code>A</code> and <code>b</code> is an element of <code>B</code> then the
multiplicity of <code>(a,b)</code> in <code>A*B</code> is <code>A[x]*B[x]</code>.</p>
</li>
<li>
<p>For a nonnegative integer <code>n</code> and a multiset <code>A</code> the result of <code>n*A</code> is
a new multiset in which the multiplicy of <code>x</code> is <code>n*A[x]</code>.</p>
</li>
<li>
<p>The <em>disjoint union</em> of <code>A</code> and <code>B</code> is computed with <code>A+B</code>.
If <code>a</code> is an element of <code>A</code> and <code>b</code> is an element of <code>B</code> then the
multiplicity of <code>(a,b)</code> in <code>A*B</code> is <code>A[x]+B[x]</code>.</p>
</li>
<li>
<p>The <em>difference</em> of multisets is computed as <code>A-B</code>. In the result,
the multiplicity of <code>x</code> is <code>max(0, A[x]-B[x])</code>.</p>
</li>
</ul>
<h4><a id="user-content-cardinality" class="anchor" aria-hidden="true" href="#cardinality"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Cardinality</h4>
<p>The function <code>length</code> computes the cardinality (number of elements)
in a multiset (including multiplicities).</p>
<p>The function <code>isempty</code> returns <code>true</code> exactly when <code>length(M)==0</code>.</p>
<h2><a id="user-content-comparison" class="anchor" aria-hidden="true" href="#comparison"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Comparison</h2>
<p>The operator <code>A==B</code> and the function <code>issubset(A,B)</code> are provided to determine
if <code>A</code> and <code>B</code> are equal or <code>A</code>is a submultiset of <code>B</code>.</p>
<p>Note that <code>A==B</code> holds when <code>A[x]==B[x]</code> for all <code>x</code> and <code>issubset(A,B)</code>
holds when <code>A[x] &lt;= B[x]</code> for all <code>x</code>.</p>
<p>The following can be used for testing subset and superset:</p>
<ul>
<li><code>A &lt;= B</code></li>
<li><code>A &lt; B</code></li>
<li><code>A &gt;= B</code></li>
<li><code>A &gt; B</code></li>
</ul>
<h2><a id="user-content-multisets-as-counters" class="anchor" aria-hidden="true" href="#multisets-as-counters"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Multisets as counters</h2>
<p>Multisets are useful devices for counting. For example, suppose a program
reads in words from a text file and we want to count how often each word
appears in that file. We can let <code>M = Multiset{String}()</code> and then
step through the words in the file pushing each instance into <code>M</code>.
The basic structure looks like this:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">for</span> word <span class="pl-k">in</span> FILE
  <span class="pl-c1">push!</span>(M,word)
<span class="pl-k">end</span></pre></div>
<p>In the end, <code>M[word]</code> will return how often <code>word</code> was seen in the file.
See also my <code>Counters</code> module.</p>
<h2><a id="user-content-miscellaneous" class="anchor" aria-hidden="true" href="#miscellaneous"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Miscellaneous</h2>
<p>A <code>Multiset</code> consists of a single data field called <code>data</code> that is a
dictionary mapping elements to their multiplicities. The various
<code>Multiset</code> functions ensure the integrity of <code>data</code> (enforcing nonnegativity).</p>
<p>The function <code>clean!</code> purges the <code>data</code> field of any elements with multiplicity
equal to <code>0</code>. This is only used by the <code>hash</code> function which is provided so
a <code>Multiset</code> can be used as a key in a dictionary, etc. The hash of a
<code>Multiset</code> is simply the hash of its cleaned <code>data</code> field.
<strong>Note</strong>: The <code>clean!</code> function is not exported. There probably should be no
reason for the user to invoke it, but if desired used
<code>Multisets.clean!(M)</code>.</p>
</article></div>