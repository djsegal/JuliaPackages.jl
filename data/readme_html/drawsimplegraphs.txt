<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-drawsimplegraphs" class="anchor" aria-hidden="true" href="#drawsimplegraphs"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>DrawSimpleGraphs</h1>
<p>Drawing functions for <code>SimpleGraphs</code>.</p>
<p><a href="https://travis-ci.org/scheinerman/DrawSimpleGraphs.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/16e25eec5eebc154ada1ddae63acfa7690fef9f6/68747470733a2f2f7472617669732d63692e6f72672f73636865696e65726d616e2f4472617753696d706c654772617068732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/scheinerman/DrawSimpleGraphs.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p><a href="http://codecov.io/github/scheinerman/DrawSimpleGraphs.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/e4777e660676e946b6d7e50cb2b36c51a18e6e03/687474703a2f2f636f6465636f762e696f2f6769746875622f73636865696e65726d616e2f4472617753696d706c654772617068732e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/scheinerman/DrawSimpleGraphs.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
<p>Given a <code>SimpleGraph</code>, the function <code>draw(G)</code> draws <code>G</code> in its current embedding.
If the graph does not have an embedding, then it is given a circular embedding.</p>
<p>If further operations on the drawing are desired,
then <code>Plots</code> or <code>SimpleDrawing</code> functions may be used.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> SimpleGraphs, DrawSimpleGraphs, Plots

julia<span class="pl-k">&gt;</span> G <span class="pl-k">=</span> <span class="pl-c1">Cube</span>(<span class="pl-c1">4</span>)
Cube graph <span class="pl-c1">Q</span>(<span class="pl-c1">4</span>) (n<span class="pl-k">=</span><span class="pl-c1">16</span>, m<span class="pl-k">=</span><span class="pl-c1">32</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">embed</span>(G,<span class="pl-c1">:combined</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">draw</span>(G)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">savefig</span>(<span class="pl-s"><span class="pl-pds">"</span>four-cube.png<span class="pl-pds">"</span></span>)</pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="four-cube.png"><img src="four-cube.png" alt="" style="max-width:100%;"></a></p>
<h2><a id="user-content-embedding-commands" class="anchor" aria-hidden="true" href="#embedding-commands"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Embedding Commands</h2>
<p>The following functions reside in <code>SimpleGraphs</code>. They are used to
create and manipulate embeddings associated with a graph.</p>
<h3><a id="user-content-create-an-embedding" class="anchor" aria-hidden="true" href="#create-an-embedding"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Create an embedding</h3>
<p><code>embed(G,method)</code> creates a new embedding of <code>G</code>. The second
argument method is a symbol associated with an embedding algorithm.
The <code>method</code> can be one of the following:</p>
<ul>
<li><code>:circular</code> (default) arranges the vertices in a circle.</li>
<li><code>:random</code> arranges the vertices at random.</li>
<li><code>:spring</code> arranges the vertices by modeling edges as springs holding repelling vertices together.</li>
<li><code>:stress</code> arranges the vertices by attempting to put vertices geometric distance equal to their graph-theoretic distance.</li>
<li><code>:combined</code> is equivalent to first performing a <code>spring</code> embedding followed by a <code>stress</code> embedding. Often gives nice results.</li>
<li><code>:spectral</code> arranges the vertices based on the eigenvectors of the Laplacian matrix of the graph. Specifically, the <code>x</code>-coordinates come from the eigenvector
associated with the second smallest eigenvalue, and the
<code>y</code>-coordinates come from the eigenvector associated with the third
smallest.</li>
</ul>
<p>In addition, <code>embed(G,xy)</code> will give the graph an embedding
specified in the dictionary <code>xy</code> where maps vertices to two-element
vectors.</p>
<h3><a id="user-content-modify-an-embedding" class="anchor" aria-hidden="true" href="#modify-an-embedding"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Modify an embedding</h3>
<ul>
<li>
<p><code>has_embedding(G)</code> checks to see if the graph has been provided with an embedding.</p>
</li>
<li>
<p><code>getxy(G)</code> retrieves a copy of the embedding. Modifying the output of <code>getxy</code> does <em>not</em> modify the embedding of the graph.</p>
</li>
<li>
<p><code>set_line_color(G,name)</code> assigns the color in the string <code>name</code> to the edges and boundaries of the vertices. Defaults to <code>"black"</code>.</p>
</li>
<li>
<p><code>get_line_color(G)</code> returns the line color.</p>
</li>
<li>
<p><code>set_fill_color(G,name)</code> assigns the color in the string <code>name</code> to be the fill color of the vertices. Defaults to <code>"white"</code>.</p>
</li>
<li>
<p><code>set_vertex_size(G,sz)</code> sets the size of the drawn vertices to
the integer <code>sz</code>.</p>
</li>
<li>
<p><code>get_vertex_size(G)</code> returns the size of the vertices.</p>
</li>
<li>
<p><code>transform(G,A,b)</code> applies an affine transformation to all coordinates in the graph's drawing. Here <code>A</code> is 2-by-2 matrix and <code>b</code> is a 2-vector. Each point <code>p</code> is mapped to <code>A*p+b</code>. Special
versions of this command are provided by <code>scale</code>, <code>rotate</code>, <code>translate</code>, and <code>recenter</code>. (Note: Some of these function names cause collisions, so I may change them.)</p>
</li>
<li>
<p><code>edge_length(G,uv)</code> returns the geometric length of the edge <code>uv</code>. Note this fails if <code>G</code> does not have an embedding.
<code>edge_length(G)</code> returns an array of the edge lengths.</p>
</li>
</ul>
<h2><a id="user-content-vertex-labels" class="anchor" aria-hidden="true" href="#vertex-labels"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Vertex Labels</h2>
<p>Use <code>draw_labels(G)</code> after <code>draw(G)</code> to insert vertex names into the drawing.
Optionally, add a font size, <code>draw_labels(G,sz)</code>, to make the labels small
enough to fit (or use <code>set_vertex_size</code> to make larger vertices).</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> G <span class="pl-k">=</span> <span class="pl-c1">Cube</span>(<span class="pl-c1">3</span>)
Cube graph <span class="pl-c1">Q</span>(<span class="pl-c1">3</span>) (n<span class="pl-k">=</span><span class="pl-c1">8</span>, m<span class="pl-k">=</span><span class="pl-c1">12</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">embed</span>(G,<span class="pl-c1">:combined</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">set_vertex_size</span>(G,<span class="pl-c1">20</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">draw</span>(G)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">draw_labels</span>(G)</pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="cube.png"><img src="cube.png" alt="" style="max-width:100%;"></a></p>
<h2><a id="user-content-example-knights-tour" class="anchor" aria-hidden="true" href="#example-knights-tour"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Example: Knight's Tour</h2>
<p>The function <code>KnightTourDrawing(r,c)</code> to solve the problem
of finding a knight's tour on an <code>r</code>-by-<code>c</code> chess board and
drawing the solution.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">KnightTourDrawing</span>(<span class="pl-c1">8</span>,<span class="pl-c1">8</span>)
Searching <span class="pl-k">for</span> a Hamiltonian cycle <span class="pl-k">in</span> an <span class="pl-c1">8</span><span class="pl-k">-</span>by<span class="pl-k">-</span><span class="pl-c1">8</span> Knight<span class="pl-k">'</span>s move graph
<span class="pl-c1">1374.144891</span> seconds (<span class="pl-c1">9.02</span> G allocations<span class="pl-k">:</span> <span class="pl-c1">1002.489</span> GiB, <span class="pl-c1">12.68</span><span class="pl-k">%</span> gc time)
Finished</pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="knight.png"><img src="knight.png" alt="" style="max-width:100%;"></a></p>
</article></div>