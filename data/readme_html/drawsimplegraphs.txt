<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-drawsimplegraphs" class="anchor" aria-hidden="true" href="#drawsimplegraphs"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>DrawSimpleGraphs</h1>
<p dir="auto">Drawing functions for <code>SimpleGraphs</code>.</p>
<p dir="auto">Given an <code>UndirectedGraph</code>, the function <code>draw(G)</code> draws <code>G</code> in its current embedding.
If the graph does not have an embedding, then it is given a circular embedding.</p>
<p dir="auto">If further operations on the drawing are desired,
then <code>Plots</code> or <code>SimpleDrawing</code> functions may be used.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using SimpleGraphs, DrawSimpleGraphs, Plots

julia&gt; G = Cube(4)
Cube graph Q(4) (n=16, m=32)

julia&gt; embed(G,:combined)

julia&gt; draw(G)

julia&gt; savefig(&quot;four-cube.png&quot;)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> SimpleGraphs, DrawSimpleGraphs, Plots

julia<span class="pl-k">&gt;</span> G <span class="pl-k">=</span> <span class="pl-c1">Cube</span>(<span class="pl-c1">4</span>)
Cube graph <span class="pl-c1">Q</span>(<span class="pl-c1">4</span>) (n<span class="pl-k">=</span><span class="pl-c1">16</span>, m<span class="pl-k">=</span><span class="pl-c1">32</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">embed</span>(G,<span class="pl-c1">:combined</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">draw</span>(G)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">savefig</span>(<span class="pl-s"><span class="pl-pds">"</span>four-cube.png<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="four-cube.png"><img src="four-cube.png" alt="" style="max-width: 100%;"></a></p>
<p dir="auto">The <code>draw</code> function may be called with an optional second argument: <code>draw(G,clear_first)</code>. If called as <code>draw(G,false)</code> then the drawing window is not erased prior to drawing.</p>
<h3 dir="auto"><a id="user-content-extra-drawing-functions" class="anchor" aria-hidden="true" href="#extra-drawing-functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Extra drawing functions</h3>
<ul dir="auto">
<li><code>draw_nodes(G)</code> just draws the vertices.</li>
<li><code>draw_edges(G)</code> just draws the edges.</li>
</ul>
<h2 dir="auto"><a id="user-content-embedding-commands" class="anchor" aria-hidden="true" href="#embedding-commands"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Embedding Commands</h2>
<p dir="auto">The following functions reside in <code>SimpleGraphs</code>. They are used to
create and manipulate embeddings associated with a graph.</p>
<h3 dir="auto"><a id="user-content-create-an-embedding" class="anchor" aria-hidden="true" href="#create-an-embedding"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Create an embedding</h3>
<p dir="auto"><code>embed(G,method)</code> creates a new embedding of <code>G</code>. The second
argument method is a symbol associated with an embedding algorithm.
The <code>method</code> can be one of the following:</p>
<ul dir="auto">
<li><code>:circular</code> (default) arranges the vertices in a circle.</li>
<li><code>:random</code> arranges the vertices at random.</li>
<li><code>:spring</code> arranges the vertices by modeling edges as springs holding repelling vertices together.</li>
<li><code>:stress</code> arranges the vertices by attempting to put vertices geometric distance equal to their graph-theoretic distance.</li>
<li><code>:combined</code> is equivalent to first performing a <code>spring</code> embedding followed by a <code>stress</code> embedding. Often gives nice results.</li>
<li><code>:spectral</code> arranges the vertices based on the eigenvectors of the Laplacian matrix of the graph. Specifically, the <code>x</code>-coordinates come from the eigenvector
associated with the second smallest eigenvalue, and the
<code>y</code>-coordinates come from the eigenvector associated with the third
smallest.</li>
</ul>
<p dir="auto">In addition, <code>embed(G,xy)</code> will give the graph an embedding
specified in the dictionary <code>xy</code> where maps vertices to two-element
vectors.</p>
<h3 dir="auto"><a id="user-content-modify-an-embedding" class="anchor" aria-hidden="true" href="#modify-an-embedding"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Modify an embedding</h3>
<ul dir="auto">
<li>
<p dir="auto"><code>has_embedding(G)</code> checks to see if the graph has been provided with an embedding.</p>
</li>
<li>
<p dir="auto"><code>getxy(G)</code> retrieves a copy of the embedding. Modifying the output of <code>getxy</code> does <em>not</em> modify the embedding of the graph.</p>
</li>
<li>
<p dir="auto"><code>set_line_color(G,name)</code> assigns the color in the string <code>name</code> to the edges and boundaries of the vertices. Defaults to <code>"black"</code>.</p>
</li>
<li>
<p dir="auto"><code>get_line_color(G)</code> returns the line color.</p>
</li>
<li>
<p dir="auto"><code>set_fill_color(G,name)</code> assigns the color in the string <code>name</code> to be the fill color of the vertices. Defaults to <code>"white"</code>.</p>
</li>
<li>
<p dir="auto"><code>set_vertex_size(G,sz)</code> sets the size of the drawn vertices to
the integer <code>sz</code>.</p>
</li>
<li>
<p dir="auto"><code>get_vertex_size(G)</code> returns the size of the vertices.</p>
</li>
<li>
<p dir="auto"><code>transform(G,A,b)</code> applies an affine transformation to all coordinates in the graph's drawing. Here <code>A</code> is 2-by-2 matrix and <code>b</code> is a 2-vector. Each point <code>p</code> is mapped to <code>A*p+b</code>. Special
versions of this command are provided by <code>scale</code>, <code>rotate</code>, <code>translate</code>, and <code>recenter</code>. (Note: Some of these function names cause collisions, so I may change them.)</p>
</li>
<li>
<p dir="auto"><code>edge_length(G,uv)</code> returns the geometric length of the edge <code>uv</code>. Note this fails if <code>G</code> does not have an embedding.
<code>edge_length(G)</code> returns an array of the edge lengths.</p>
</li>
</ul>
<h2 dir="auto"><a id="user-content-vertex-labels" class="anchor" aria-hidden="true" href="#vertex-labels"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Vertex Labels</h2>
<p dir="auto">Use <code>draw_labels(G)</code> after <code>draw(G)</code> to insert vertex names into the drawing.
Optionally, add a font size, <code>draw_labels(G,sz)</code>, to make the labels small
enough to fit (or use <code>set_vertex_size</code> to make larger vertices).</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; G = Cube(3)
Cube graph Q(3) (n=8, m=12)

julia&gt; embed(G,:combined)

julia&gt; set_vertex_size(G,20)

julia&gt; draw(G)

julia&gt; draw_labels(G)"><pre>julia<span class="pl-k">&gt;</span> G <span class="pl-k">=</span> <span class="pl-c1">Cube</span>(<span class="pl-c1">3</span>)
Cube graph <span class="pl-c1">Q</span>(<span class="pl-c1">3</span>) (n<span class="pl-k">=</span><span class="pl-c1">8</span>, m<span class="pl-k">=</span><span class="pl-c1">12</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">embed</span>(G,<span class="pl-c1">:combined</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">set_vertex_size</span>(G,<span class="pl-c1">20</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">draw</span>(G)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">draw_labels</span>(G)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="cube.png"><img src="cube.png" alt="" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-example-knights-tour" class="anchor" aria-hidden="true" href="#example-knights-tour"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example: Knight's Tour</h2>
<p dir="auto">The function <code>KnightTourDrawing(r,c)</code> to solve the problem
of finding a knight's tour on an <code>r</code>-by-<code>c</code> chess board and
drawing the solution.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; KnightTourDrawing(8,8)
Searching for a Hamiltonian cycle in an 8-by-8 Knight's move graph
1374.144891 seconds (9.02 G allocations: 1002.489 GiB, 12.68% gc time)
Finished"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">KnightTourDrawing</span>(<span class="pl-c1">8</span>,<span class="pl-c1">8</span>)
Searching <span class="pl-k">for</span> a Hamiltonian cycle <span class="pl-k">in</span> an <span class="pl-c1">8</span><span class="pl-k">-</span>by<span class="pl-k">-</span><span class="pl-c1">8</span> Knight<span class="pl-k">'</span>s move graph
<span class="pl-c1">1374.144891</span> seconds (<span class="pl-c1">9.02</span> G allocations<span class="pl-k">:</span> <span class="pl-c1">1002.489</span> GiB, <span class="pl-c1">12.68</span><span class="pl-k">%</span> gc time)
Finished</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="knight.png"><img src="knight.png" alt="" style="max-width: 100%;"></a></p>
</article></div>