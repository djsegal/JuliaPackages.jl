<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-jfemtools" class="anchor" aria-hidden="true" href="#jfemtools"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>jFEMTools</h1>
<p><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/0058ce9713cb93a553c2f23207afbb49b1b852a70a4a24de20e2e816c58b299e/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6966656379636c652d6578706572696d656e74616c2d6f72616e67652e737667"><img src="https://camo.githubusercontent.com/0058ce9713cb93a553c2f23207afbb49b1b852a70a4a24de20e2e816c58b299e/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6966656379636c652d6578706572696d656e74616c2d6f72616e67652e737667" alt="Lifecycle" data-canonical-src="https://img.shields.io/badge/lifecycle-experimental-orange.svg" style="max-width:100%;"></a>
<a href="https://travis-ci.org/Paulms/jFEMTools.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/a8091eaa2d26028e8ad25bd0fad152eb988972f08976bfac8e862ffa7284a958/68747470733a2f2f7472617669732d63692e6f72672f5061756c6d732f6a46454d546f6f6c732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Travis" data-canonical-src="https://travis-ci.org/Paulms/jFEMTools.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/Paulms/jfemtools-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/01c116b0072e71820af68c8b4a8072ecdde5bfd19d2ee8c214988cd793818c5d/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f393967786770796b71326e64376770383f7376673d74727565" alt="AppVeyor" data-canonical-src="https://ci.appveyor.com/api/projects/status/99gxgpykq2nd7gp8?svg=true" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/Paulms/jFEMTools.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/6fffd3699954a423dcf0e3ce0edfe65f8ed3c5d437b0305a75bcb911ef15a503/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f5061756c6d732f6a46454d546f6f6c732e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/Paulms/jFEMTools.jl/badge.svg?branch=master" style="max-width:100%;"></a>
<a href="http://codecov.io/github/Paulms/jFEMTools.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/2e7949168db6eba3813f749ca8831e3b94aba4cad4ce10fef95ec652312e37e5/687474703a2f2f636f6465636f762e696f2f6769746875622f5061756c6d732f6a46454d546f6f6c732e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/Paulms/jFEMTools.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
<p>Tools for FEM and VEM code</p>
<p>VEM implementation based on:</p>
<ul>
<li>The Hitchhiker's Guide to the Virtual Element Method
L. Beirão da Veiga, F. Brezzi, L. D. Marini, and A. Russo, Mathematical Models and Methods in Applied Sciences 2014 24:08, 1541-1573</li>
</ul>
<p>FEM implementation based on</p>
<ul>
<li>
<p>JuaFEM: <a href="https://github.com/KristofferC/JuAFEM.jl.git">https://github.com/KristofferC/JuAFEM.jl.git</a></p>
</li>
<li>
<p>Logg, Mardal, Wells, Kirby, FIAT: numerical construction of finite element basis functions.</p>
</li>
</ul>
<h1><a id="user-content-fem" class="anchor" aria-hidden="true" href="#fem"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>FEM</h1>
<ul>
<li>Continuous Lagrange finite elements of arbitrary order:</li>
</ul>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="    ContinuousLagrange(:Shape, order)
"><pre>    <span class="pl-c1">ContinuousLagrange</span>(<span class="pl-c1">:Shape</span>, order)</pre></div>
<p>where <code>:Shape</code> = :Triangle, :Quad, :Hexahedron, :Tetrahedron</p>
<ul>
<li>VTK saving using <code>WriteVTK.jl</code> package.</li>
</ul>
<h2><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example</h2>
<p>See <code>examples</code> directory for more information. Below, a simple Poisson PDE with homogeneous Dirichlet boundary conditions, in a 3D unitary cube.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using jFEMTools
import Tensors: Vec,  ⋅
using SparseArrays
import WriteVTK
const jF = jFEMTools

# Problem: 

# Δu = f  in Ω
# u  = 0  in ∂Ω

# We start  generating a simple grid with 10x10x10 Hexahedron elements
# on unitary cube. The generator defaults to the unit hyper_cube.
mesh = hyper_rectagle_mesh2(HexahedronCell,(10,10,10))

# ### Initiate finite element function Space
dim = jF.getdim(mesh)
P1 = ContinuousLagrange(:Hexahedron,1)
Wh = FEMFunctionSpace(mesh, P1, 1)

# Declare variables
u_h = TrialFunction(Wh)
#v_h = TestFunction(Wh)

# ### Degrees of freedom
# We create the `DofHandler` and then add a single field called `u_h`.
dh = DofHandler(mesh,[u_h])

# This function returns a sparse matrix with the correct elements stored.
K = jF.create_sparsity_pattern(dh);

# ### Boundary conditions
dbc = Dirichlet(dh, u_h, &quot;boundary&quot;, 0.0)

# ### RHS function
f(x::Vec{dim}) where {dim} = 2*π^2*sin(π*x[1])*sin(π*x[2])*sin(π*x[3])

# ### Assembling the linear system
function doassemble(Wh, K::SparseMatrixCSC, dh::jF.DofHandler)
  # Allocate the element stiffness matrix and element force vector
  # global and local matrices
  n_basefuncs = jF.getnbasefunctions(Wh)
  Ke = zeros(n_basefuncs, n_basefuncs)
  fe = zeros(n_basefuncs)
  b = zeros(jF.ndofs(dh))
  cell_dofs = Vector{Int}(undef, jF.ndofs_per_cell(dh))
  assembler = jF.start_assemble(K, b)

  # It is now time to loop over all the cells in our mesh
  @inbounds for (cellcount, cell) in enumerate(CellIterator(mesh))
      # We recompute local data for each cell
      fill!(Ke, 0)
      fill!(fe, 0)
      jF.reinit!(Wh, cell)

      # Loop over all the quadrature points in the cell and
      # assemble the contribution to `Ke` and `fe`. The integration weight
      # can be queried using `getdetJdV`.
      for q_point in 1:jF.getnquadpoints(Wh)
          dΩ = jF.getdetJdV(Wh, q_point)
          fh = jF.function_value(f, Wh, cell, q_point)
          # For each quadrature point we loop over all the (local) shape functions.
          # We need the value and gradient of the testfunction `v` and also the gradient
          # of the trial function `u`.
          for i in 1:n_basefuncs
              v  = jF.shape_value(Wh, q_point, i)
              ∇v = jF.shape_gradient(Wh, q_point, i)
              fe[i] += fh*v * dΩ
              for j in 1:n_basefuncs
                  ∇u = jF.shape_gradient(Wh, q_point, j)
                  Ke[i, j] += (∇v ⋅ ∇u) * dΩ
              end
          end
      end
      # The last step in the element loop is to assemble `Ke` and `fe`
      # into the global `K` and `f` with `assemble!`.
      jF.celldofs!(cell_dofs, dh, cell)
      jF.assemble!(assembler, cell_dofs, fe, Ke)
  end
  return K, b
end

# ### Solution of the system
K, b = doassemble(Wh, K, dh);

# To account for the boundary conditions we use the `apply!` function.
apply!(K,b,dbc);
u = K \ b;

# Save approximation on vtu file
vi = jFEMTools.vertexdofs(dh, u_h);
vtk_file = vtk_grid(&quot;poisson3D&quot;, mesh)
vtk_file[&quot;u&quot;, WriteVTK.VTKPointData()] = u[vi]
outfiles = WriteVTK.vtk_save(vtk_file)
"><pre><span class="pl-k">using</span> jFEMTools
<span class="pl-k">import</span> Tensors<span class="pl-k">:</span> Vec,  <span class="pl-k">⋅</span>
<span class="pl-k">using</span> SparseArrays
<span class="pl-k">import</span> WriteVTK
<span class="pl-k">const</span> jF <span class="pl-k">=</span> jFEMTools

<span class="pl-c"><span class="pl-c">#</span> Problem: </span>

<span class="pl-c"><span class="pl-c">#</span> Δu = f  in Ω</span>
<span class="pl-c"><span class="pl-c">#</span> u  = 0  in ∂Ω</span>

<span class="pl-c"><span class="pl-c">#</span> We start  generating a simple grid with 10x10x10 Hexahedron elements</span>
<span class="pl-c"><span class="pl-c">#</span> on unitary cube. The generator defaults to the unit hyper_cube.</span>
mesh <span class="pl-k">=</span> <span class="pl-c1">hyper_rectagle_mesh2</span>(HexahedronCell,(<span class="pl-c1">10</span>,<span class="pl-c1">10</span>,<span class="pl-c1">10</span>))

<span class="pl-c"><span class="pl-c">#</span> ### Initiate finite element function Space</span>
dim <span class="pl-k">=</span> jF<span class="pl-k">.</span><span class="pl-c1">getdim</span>(mesh)
P1 <span class="pl-k">=</span> <span class="pl-c1">ContinuousLagrange</span>(<span class="pl-c1">:Hexahedron</span>,<span class="pl-c1">1</span>)
Wh <span class="pl-k">=</span> <span class="pl-c1">FEMFunctionSpace</span>(mesh, P1, <span class="pl-c1">1</span>)

<span class="pl-c"><span class="pl-c">#</span> Declare variables</span>
u_h <span class="pl-k">=</span> <span class="pl-c1">TrialFunction</span>(Wh)
<span class="pl-c"><span class="pl-c">#</span>v_h = TestFunction(Wh)</span>

<span class="pl-c"><span class="pl-c">#</span> ### Degrees of freedom</span>
<span class="pl-c"><span class="pl-c">#</span> We create the `DofHandler` and then add a single field called `u_h`.</span>
dh <span class="pl-k">=</span> <span class="pl-c1">DofHandler</span>(mesh,[u_h])

<span class="pl-c"><span class="pl-c">#</span> This function returns a sparse matrix with the correct elements stored.</span>
K <span class="pl-k">=</span> jF<span class="pl-k">.</span><span class="pl-c1">create_sparsity_pattern</span>(dh);

<span class="pl-c"><span class="pl-c">#</span> ### Boundary conditions</span>
dbc <span class="pl-k">=</span> <span class="pl-c1">Dirichlet</span>(dh, u_h, <span class="pl-s"><span class="pl-pds">"</span>boundary<span class="pl-pds">"</span></span>, <span class="pl-c1">0.0</span>)

<span class="pl-c"><span class="pl-c">#</span> ### RHS function</span>
<span class="pl-en">f</span>(x<span class="pl-k">::</span><span class="pl-c1">Vec{dim}</span>) <span class="pl-k">where</span> {dim} <span class="pl-k">=</span> <span class="pl-c1">2</span><span class="pl-k">*</span>π<span class="pl-k">^</span><span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">sin</span>(π<span class="pl-k">*</span>x[<span class="pl-c1">1</span>])<span class="pl-k">*</span><span class="pl-c1">sin</span>(π<span class="pl-k">*</span>x[<span class="pl-c1">2</span>])<span class="pl-k">*</span><span class="pl-c1">sin</span>(π<span class="pl-k">*</span>x[<span class="pl-c1">3</span>])

<span class="pl-c"><span class="pl-c">#</span> ### Assembling the linear system</span>
<span class="pl-k">function</span> <span class="pl-en">doassemble</span>(Wh, K<span class="pl-k">::</span><span class="pl-c1">SparseMatrixCSC</span>, dh<span class="pl-k">::</span><span class="pl-c1">jF.DofHandler</span>)
  <span class="pl-c"><span class="pl-c">#</span> Allocate the element stiffness matrix and element force vector</span>
  <span class="pl-c"><span class="pl-c">#</span> global and local matrices</span>
  n_basefuncs <span class="pl-k">=</span> jF<span class="pl-k">.</span><span class="pl-c1">getnbasefunctions</span>(Wh)
  Ke <span class="pl-k">=</span> <span class="pl-c1">zeros</span>(n_basefuncs, n_basefuncs)
  fe <span class="pl-k">=</span> <span class="pl-c1">zeros</span>(n_basefuncs)
  b <span class="pl-k">=</span> <span class="pl-c1">zeros</span>(jF<span class="pl-k">.</span><span class="pl-c1">ndofs</span>(dh))
  cell_dofs <span class="pl-k">=</span> <span class="pl-c1">Vector</span><span class="pl-c1">{Int}</span>(undef, jF<span class="pl-k">.</span><span class="pl-c1">ndofs_per_cell</span>(dh))
  assembler <span class="pl-k">=</span> jF<span class="pl-k">.</span><span class="pl-c1">start_assemble</span>(K, b)

  <span class="pl-c"><span class="pl-c">#</span> It is now time to loop over all the cells in our mesh</span>
  <span class="pl-c1">@inbounds</span> <span class="pl-k">for</span> (cellcount, cell) <span class="pl-k">in</span> <span class="pl-c1">enumerate</span>(<span class="pl-c1">CellIterator</span>(mesh))
      <span class="pl-c"><span class="pl-c">#</span> We recompute local data for each cell</span>
      <span class="pl-c1">fill!</span>(Ke, <span class="pl-c1">0</span>)
      <span class="pl-c1">fill!</span>(fe, <span class="pl-c1">0</span>)
      jF<span class="pl-k">.</span><span class="pl-c1">reinit!</span>(Wh, cell)

      <span class="pl-c"><span class="pl-c">#</span> Loop over all the quadrature points in the cell and</span>
      <span class="pl-c"><span class="pl-c">#</span> assemble the contribution to `Ke` and `fe`. The integration weight</span>
      <span class="pl-c"><span class="pl-c">#</span> can be queried using `getdetJdV`.</span>
      <span class="pl-k">for</span> q_point <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span>jF<span class="pl-k">.</span><span class="pl-c1">getnquadpoints</span>(Wh)
          dΩ <span class="pl-k">=</span> jF<span class="pl-k">.</span><span class="pl-c1">getdetJdV</span>(Wh, q_point)
          fh <span class="pl-k">=</span> jF<span class="pl-k">.</span><span class="pl-c1">function_value</span>(f, Wh, cell, q_point)
          <span class="pl-c"><span class="pl-c">#</span> For each quadrature point we loop over all the (local) shape functions.</span>
          <span class="pl-c"><span class="pl-c">#</span> We need the value and gradient of the testfunction `v` and also the gradient</span>
          <span class="pl-c"><span class="pl-c">#</span> of the trial function `u`.</span>
          <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span>n_basefuncs
              v  <span class="pl-k">=</span> jF<span class="pl-k">.</span><span class="pl-c1">shape_value</span>(Wh, q_point, i)
              ∇v <span class="pl-k">=</span> jF<span class="pl-k">.</span><span class="pl-c1">shape_gradient</span>(Wh, q_point, i)
              fe[i] <span class="pl-k">+=</span> fh<span class="pl-k">*</span>v <span class="pl-k">*</span> dΩ
              <span class="pl-k">for</span> j <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span>n_basefuncs
                  ∇u <span class="pl-k">=</span> jF<span class="pl-k">.</span><span class="pl-c1">shape_gradient</span>(Wh, q_point, j)
                  Ke[i, j] <span class="pl-k">+=</span> (∇v <span class="pl-k">⋅</span> ∇u) <span class="pl-k">*</span> dΩ
              <span class="pl-k">end</span>
          <span class="pl-k">end</span>
      <span class="pl-k">end</span>
      <span class="pl-c"><span class="pl-c">#</span> The last step in the element loop is to assemble `Ke` and `fe`</span>
      <span class="pl-c"><span class="pl-c">#</span> into the global `K` and `f` with `assemble!`.</span>
      jF<span class="pl-k">.</span><span class="pl-c1">celldofs!</span>(cell_dofs, dh, cell)
      jF<span class="pl-k">.</span><span class="pl-c1">assemble!</span>(assembler, cell_dofs, fe, Ke)
  <span class="pl-k">end</span>
  <span class="pl-k">return</span> K, b
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> ### Solution of the system</span>
K, b <span class="pl-k">=</span> <span class="pl-c1">doassemble</span>(Wh, K, dh);

<span class="pl-c"><span class="pl-c">#</span> To account for the boundary conditions we use the `apply!` function.</span>
<span class="pl-c1">apply!</span>(K,b,dbc);
u <span class="pl-k">=</span> K <span class="pl-k">\</span> b;

<span class="pl-c"><span class="pl-c">#</span> Save approximation on vtu file</span>
vi <span class="pl-k">=</span> jFEMTools<span class="pl-k">.</span><span class="pl-c1">vertexdofs</span>(dh, u_h);
vtk_file <span class="pl-k">=</span> <span class="pl-c1">vtk_grid</span>(<span class="pl-s"><span class="pl-pds">"</span>poisson3D<span class="pl-pds">"</span></span>, mesh)
vtk_file[<span class="pl-s"><span class="pl-pds">"</span>u<span class="pl-pds">"</span></span>, WriteVTK<span class="pl-k">.</span><span class="pl-c1">VTKPointData</span>()] <span class="pl-k">=</span> u[vi]
outfiles <span class="pl-k">=</span> WriteVTK<span class="pl-k">.</span><span class="pl-c1">vtk_save</span>(vtk_file)</pre></div>
<h1><a id="user-content-vem" class="anchor" aria-hidden="true" href="#vem"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>VEM</h1>
<h2><a id="user-content-example-1" class="anchor" aria-hidden="true" href="#example-1"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example</h2>
<p>We solve a Poisson PDE using Virtual Element Method:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using jFEMTools
import Tensors
const jF = jFEMTools

mesh = unitSquareMesh2(RectangleCell, (3,3));

# forcing function
rhs(x::Tensors.Vec{2}) = 2*π^2*sin(π*x[1])*sin(π*x[2])

degree = 2;
dim = jF.getdim(mesh);
element = PoissonVirtualElement(dim,degree);
u = TrialFunction(VEMFunctionSpace(mesh,element))
dofs = DofHandler(mesh, [u]);
operators = VEMOperators(dofs, u;load = rhs);

K = assemble_stiffnessMat(operators);
b = assemble_load(operators);

# Boundary condition
g(x::Tensors.Vec{2}) = sin(π * x[2])*sin(π * x[1]);
dbc = Dirichlet(dofs,u,&quot;boundary&quot;,g);
apply!(K,b,dbc);

#Solve
x = K\b

#Plot numerical solution against exact, using Makie
using Makie
import AbstractPlotting
include(&quot;src/plot_recipes.jl&quot;)
scene = Scene(resolution = (400, 200))
# Plot approximation
vi = jFEMTools.vertexdofs(dofs, u)
plot!(scene, mesh, color = x[vi])

#Plot exact solution
vv = get_vertices_matrix(mesh)
xx = [g(vv) for vv in mesh.vertices];
plot!(scene, mesh, color = xx)
"><pre><span class="pl-k">using</span> jFEMTools
<span class="pl-k">import</span> Tensors
<span class="pl-k">const</span> jF <span class="pl-k">=</span> jFEMTools

mesh <span class="pl-k">=</span> <span class="pl-c1">unitSquareMesh2</span>(RectangleCell, (<span class="pl-c1">3</span>,<span class="pl-c1">3</span>));

<span class="pl-c"><span class="pl-c">#</span> forcing function</span>
<span class="pl-en">rhs</span>(x<span class="pl-k">::</span><span class="pl-c1">Tensors.Vec{2}</span>) <span class="pl-k">=</span> <span class="pl-c1">2</span><span class="pl-k">*</span>π<span class="pl-k">^</span><span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">sin</span>(π<span class="pl-k">*</span>x[<span class="pl-c1">1</span>])<span class="pl-k">*</span><span class="pl-c1">sin</span>(π<span class="pl-k">*</span>x[<span class="pl-c1">2</span>])

degree <span class="pl-k">=</span> <span class="pl-c1">2</span>;
dim <span class="pl-k">=</span> jF<span class="pl-k">.</span><span class="pl-c1">getdim</span>(mesh);
element <span class="pl-k">=</span> <span class="pl-c1">PoissonVirtualElement</span>(dim,degree);
u <span class="pl-k">=</span> <span class="pl-c1">TrialFunction</span>(<span class="pl-c1">VEMFunctionSpace</span>(mesh,element))
dofs <span class="pl-k">=</span> <span class="pl-c1">DofHandler</span>(mesh, [u]);
operators <span class="pl-k">=</span> <span class="pl-c1">VEMOperators</span>(dofs, u;load <span class="pl-k">=</span> rhs);

K <span class="pl-k">=</span> <span class="pl-c1">assemble_stiffnessMat</span>(operators);
b <span class="pl-k">=</span> <span class="pl-c1">assemble_load</span>(operators);

<span class="pl-c"><span class="pl-c">#</span> Boundary condition</span>
<span class="pl-en">g</span>(x<span class="pl-k">::</span><span class="pl-c1">Tensors.Vec{2}</span>) <span class="pl-k">=</span> <span class="pl-c1">sin</span>(π <span class="pl-k">*</span> x[<span class="pl-c1">2</span>])<span class="pl-k">*</span><span class="pl-c1">sin</span>(π <span class="pl-k">*</span> x[<span class="pl-c1">1</span>]);
dbc <span class="pl-k">=</span> <span class="pl-c1">Dirichlet</span>(dofs,u,<span class="pl-s"><span class="pl-pds">"</span>boundary<span class="pl-pds">"</span></span>,g);
<span class="pl-c1">apply!</span>(K,b,dbc);

<span class="pl-c"><span class="pl-c">#</span>Solve</span>
x <span class="pl-k">=</span> K<span class="pl-k">\</span>b

<span class="pl-c"><span class="pl-c">#</span>Plot numerical solution against exact, using Makie</span>
<span class="pl-k">using</span> Makie
<span class="pl-k">import</span> AbstractPlotting
<span class="pl-c1">include</span>(<span class="pl-s"><span class="pl-pds">"</span>src/plot_recipes.jl<span class="pl-pds">"</span></span>)
scene <span class="pl-k">=</span> <span class="pl-c1">Scene</span>(resolution <span class="pl-k">=</span> (<span class="pl-c1">400</span>, <span class="pl-c1">200</span>))
<span class="pl-c"><span class="pl-c">#</span> Plot approximation</span>
vi <span class="pl-k">=</span> jFEMTools<span class="pl-k">.</span><span class="pl-c1">vertexdofs</span>(dofs, u)
<span class="pl-c1">plot!</span>(scene, mesh, color <span class="pl-k">=</span> x[vi])

<span class="pl-c"><span class="pl-c">#</span>Plot exact solution</span>
vv <span class="pl-k">=</span> <span class="pl-c1">get_vertices_matrix</span>(mesh)
xx <span class="pl-k">=</span> [<span class="pl-c1">g</span>(vv) <span class="pl-k">for</span> vv <span class="pl-k">in</span> mesh<span class="pl-k">.</span>vertices];
<span class="pl-c1">plot!</span>(scene, mesh, color <span class="pl-k">=</span> xx)</pre></div>
</article></div>