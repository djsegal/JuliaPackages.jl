<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-rdrandjl" class="anchor" aria-hidden="true" href="#rdrandjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>RdRand.jl</h1>
<h2><a id="user-content-introduction" class="anchor" aria-hidden="true" href="#introduction"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Introduction</h2>
<p>The RdRand package provides an interface for using Intel's <a href="http://en.wikipedia.org/wiki/RdRand" rel="nofollow">RDRAND</a>
instruction, which provides extremely high quality random numbers. The instruction is currently
only available on <a href="http://en.wikipedia.org/wiki/Ivy_Bridge_(microarchitecture)" rel="nofollow">Ivy Bridge</a> processors.</p>
<p>On a 1.8 GHz Intel Core i5 (i5-3427U) each <code>rdrand()</code> call takes about 50
nanoseconds, while <code>rand()</code>, which uses a <a href="http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/SFMT/#dSFMT" rel="nofollow">SIMD Mersenne Twister implementation</a>, takes about 5 nanoseconds.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Installation</h2>
<p>In the Julia interpreter type:</p>
<p><code>Pkg.add("RdRand")</code></p>
<h2><a id="user-content-api" class="anchor" aria-hidden="true" href="#api"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>API</h2>
<ul>
<li><code>rdrand()</code>: provides a random number on the interval [0,1]</li>
<li><code>rdrand16()</code>: provides a UInt16 random number</li>
<li><code>rdrand32()</code>: provides a UInt32 random number</li>
<li><code>rdrand64()</code>: provides a UInt64 random number</li>
</ul>
<h2><a id="user-content-randomness" class="anchor" aria-hidden="true" href="#randomness"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Randomness</h2>
<p>The random numbers are generated by combining a high quality hardware source of entropy (thermal noise)
with a cryptographically secure random number generator (CSPRNG).
Quoting Intel's <a href="http://software.intel.com/en-us/articles/intel-digital-random-number-generator-drng-software-implementation-guide" rel="nofollow">guide</a>:</p>
<blockquote>
<p>With respect to the RNG taxonomy discussed above, the DRNG follows the cascade construction RNG model, using a processor resident entropy source to repeatedly seed a hardware-implemented CSPRNG. Unlike software approaches, it includes a high-quality entropy source implementation that can be sampled quickly to repeatedly seed the CSPRNG with high-quality entropy. Furthermore, it represents a self-contained hardware module that is isolated from software attacks on its internal state. The result is a solution that achieves RNG objectives with considerable robustness: statistical quality (independence, uniform distribution), highly unpredictable random number sequences, high performance, and protection against attack.</p>
</blockquote>
<p><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/c7b52aebfe90c7d3743c1f5e912f71ec2dd30336/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313632393738302f3831373032352f37363234663066632d656636322d313165322d383631392d3135666639323036383331662e706e67"><img src="https://camo.githubusercontent.com/c7b52aebfe90c7d3743c1f5e912f71ec2dd30336/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313632393738302f3831373032352f37363234663066632d656636322d313165322d383631392d3135666639323036383331662e706e67" alt="image" data-canonical-src="https://f.cloud.github.com/assets/1629780/817025/7624f0fc-ef62-11e2-8619-15ff9206831f.png" style="max-width:100%;"></a></p>
</article></div>