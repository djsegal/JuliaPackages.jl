<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-dimers" class="anchor" aria-hidden="true" href="#dimers"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Dimers</h1>
<p><code>Dimers</code> is a package for simulating the
<a href="http://en.wikipedia.org/wiki/Domino_tiling" rel="nofollow">dimer model</a> on a 2D
rectangular grid, using
<a href="http://arxiv.org/pdf/math/9903025v2.pdf" rel="nofollow">an algorithm of Kenyon, Propp, and Wilson</a>. <code>Dimers</code>
also provides support for loop erased random walks and Wilson's algorithm
on an arbitrary graph.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="showgraphics(drawgraph(dimersample(20)))
"><pre><span class="pl-c1">showgraphics</span>(<span class="pl-c1">drawgraph</span>(<span class="pl-c1">dimersample</span>(<span class="pl-c1">20</span>)))</pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/sswatson/Dimers.jl/blob/master/images/dimersample.png"><img src="https://github.com/sswatson/Dimers.jl/raw/master/images/dimersample.png" alt="Dimer sample" style="max-width:100%;"></a></p>
<p>We can also compute the height function associated with the dimer sample:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="dimerheight(dimersample(20))
"><pre><span class="pl-c1">dimerheight</span>(<span class="pl-c1">dimersample</span>(<span class="pl-c1">20</span>))</pre></div>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="11x11 Array{Int64,2}:
  0   1   0   1   0  1   0   1   0   1   0
 -1  -2  -1  -2  -1  2  -1  -2  -1  -2  -1
  0  -3  -4  -3   0  1   0   1   0  -3   0
 -1  -2  -1  -2  -1  2  -1  -2  -1  -2  -1
  0  -3   0   1   0  1   0   1   0   1   0
 -1  -2  -1   2  -1  2  -1  -2  -1   2  -1
  0   1   0   1   0  1   0   1   0   1   0
 -1  -2  -1   2  -1  2   3   2  -1  -2  -1
  0   1   0   1   0  1   0   1   0   1   0
 -1   2   3   2   3  2   3   2   3   2  -1
  0   1   0   1   0  1   0   1   0   1   0
"><pre><code>11x11 Array{Int64,2}:
  0   1   0   1   0  1   0   1   0   1   0
 -1  -2  -1  -2  -1  2  -1  -2  -1  -2  -1
  0  -3  -4  -3   0  1   0   1   0  -3   0
 -1  -2  -1  -2  -1  2  -1  -2  -1  -2  -1
  0  -3   0   1   0  1   0   1   0   1   0
 -1  -2  -1   2  -1  2  -1  -2  -1   2  -1
  0   1   0   1   0  1   0   1   0   1   0
 -1  -2  -1   2  -1  2   3   2  -1  -2  -1
  0   1   0   1   0  1   0   1   0   1   0
 -1   2   3   2   3  2   3   2   3   2  -1
  0   1   0   1   0  1   0   1   0   1   0
</code></pre></div>
<p><code>Wilson</code> takes a graph as its first argument and an array of <code>true</code>/<code>false</code>
values specifying the roots.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="showgraphics(drawgraph(Wilson(G,[[true];[false for i=1:length(G.vertices)-1]])))
"><pre><span class="pl-c1">showgraphics</span>(<span class="pl-c1">drawgraph</span>(<span class="pl-c1">Wilson</span>(G,[[<span class="pl-c1">true</span>];[<span class="pl-c1">false</span> <span class="pl-k">for</span> i<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">length</span>(G<span class="pl-k">.</span>vertices)<span class="pl-k">-</span><span class="pl-c1">1</span>]])))</pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/sswatson/Dimers.jl/blob/master/images/USTsample.png"><img src="https://github.com/sswatson/Dimers.jl/raw/master/images/USTsample.png" alt="UST sample" style="max-width:100%;"></a></p>
<p><code>LERW(G,v0,roots)</code> samples a loop-erased random walk on the graph <code>G</code>
starting from the vertex whose index in <code>G.vertices</code> is <code>v0</code> stopped upon
hitting one of the vertices <code>v</code> for which <code>roots[v]</code> is <code>true</code>.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="import Graphs
n = 100
G = Graphs.adjlist((Int64,Int64),is_directed=false)

for i=1:n
    for j=1:n
        Graphs.add_vertex!(G,(i,j))
    end
end

roots = Bool[v[1] == 1 || v[1] == n || v[2] == 1 || v[2] == n  for v in
G.vertices];

v0 = find(x-&gt;x==(div(n,2),div(n,2)),G.vertices)[1]

lerw = LERW(gridgraph(n),v0,roots)
for i=1:length(lerw)-1
    add_edge!(G,lerw[i],lerw[i+1])
end

showgraphics(drawgraph(G))
"><pre><span class="pl-k">import</span> Graphs
n <span class="pl-k">=</span> <span class="pl-c1">100</span>
G <span class="pl-k">=</span> Graphs<span class="pl-k">.</span><span class="pl-c1">adjlist</span>((Int64,Int64),is_directed<span class="pl-k">=</span><span class="pl-c1">false</span>)

<span class="pl-k">for</span> i<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">:</span>n
    <span class="pl-k">for</span> j<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">:</span>n
        Graphs<span class="pl-k">.</span><span class="pl-c1">add_vertex!</span>(G,(i,j))
    <span class="pl-k">end</span>
<span class="pl-k">end</span>

roots <span class="pl-k">=</span> Bool[v[<span class="pl-c1">1</span>] <span class="pl-k">==</span> <span class="pl-c1">1</span> <span class="pl-k">||</span> v[<span class="pl-c1">1</span>] <span class="pl-k">==</span> n <span class="pl-k">||</span> v[<span class="pl-c1">2</span>] <span class="pl-k">==</span> <span class="pl-c1">1</span> <span class="pl-k">||</span> v[<span class="pl-c1">2</span>] <span class="pl-k">==</span> n  <span class="pl-k">for</span> v <span class="pl-k">in</span>
G<span class="pl-k">.</span>vertices];

v0 <span class="pl-k">=</span> <span class="pl-c1">find</span>(x<span class="pl-k">-&gt;</span>x<span class="pl-k">==</span>(<span class="pl-c1">div</span>(n,<span class="pl-c1">2</span>),<span class="pl-c1">div</span>(n,<span class="pl-c1">2</span>)),G<span class="pl-k">.</span>vertices)[<span class="pl-c1">1</span>]

lerw <span class="pl-k">=</span> <span class="pl-c1">LERW</span>(<span class="pl-c1">gridgraph</span>(n),v0,roots)
<span class="pl-k">for</span> i<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">length</span>(lerw)<span class="pl-k">-</span><span class="pl-c1">1</span>
    <span class="pl-c1">add_edge!</span>(G,lerw[i],lerw[i<span class="pl-k">+</span><span class="pl-c1">1</span>])
<span class="pl-k">end</span>

<span class="pl-c1">showgraphics</span>(<span class="pl-c1">drawgraph</span>(G))</pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/sswatson/Dimers.jl/blob/master/images/lerwsample.png"><img src="https://github.com/sswatson/Dimers.jl/raw/master/images/lerwsample.png" alt="Loop-erased random walk sample" style="max-width:100%;"></a></p>
<p><a href="https://travis-ci.org/sswatson/Dimers.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/0139b86b5ba608463a678dd269ca29ab071144113103d15123246fddccdd5d70/68747470733a2f2f7472617669732d63692e6f72672f7373776174736f6e2f44696d6572732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/sswatson/Dimers.jl.svg?branch=master" style="max-width:100%;"></a></p>
</article></div>