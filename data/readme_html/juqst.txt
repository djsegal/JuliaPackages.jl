<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-juqst-julia-quantum-software-toolbox-" class="anchor" aria-hidden="true" href="#juqst-julia-quantum-software-toolbox-"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Juqst: JUlia Quantum Software Toolbox <a href="https://travis-ci.com/rharper2/Juqst.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/dc84287907cac66692176b622a825a4d7b42ba2a0710f059f7079a341bafecec/68747470733a2f2f7472617669732d63692e636f6d2f72686172706572322f4a757173742e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/rharper2/Juqst.jl.svg?branch=master" style="max-width:100%;"></a></h1>
<h1><a id="user-content-to-install" class="anchor" aria-hidden="true" href="#to-install"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>To install</h1>
<p>It should be a matter of simply using the package manager. (Shortly I'll submit this to the Julia repo, which will simplify things further).</p>
<p>This has not yet been put on the main public distribution, so you will need to point to the registry:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="pkg&gt; add https://github.com/rharper2/Juqst.jl
"><pre>pkg<span class="pl-k">&gt;</span> add https<span class="pl-k">:</span><span class="pl-k">//</span>github<span class="pl-k">.</span>com<span class="pl-k">/</span>rharper2<span class="pl-k">/</span>Juqst<span class="pl-k">.</span>jl</pre></div>
<p>The docs/examples directory contains, suprisingly enough, some example notebooks, which I aim to continually improve. They assume IJulia.</p>
<p>While you are able to view them on github, the latex rendering of printed arrays doesn't appear to work with the github viewer, so they might be a bit difficult to read on github. If you download them and look at them through Jupyter they should render fine. The one that shows how to use the stabiliser mechanisms and plotting functions is called "A stabiliser run through". It is probably worth running that one early if you are interested in the Stabiliser part of this package.</p>
<h2><a id="user-content-package-aims" class="anchor" aria-hidden="true" href="#package-aims"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Package Aims</h2>
<p>The package consolidates a number of things I use when researching better methods of characterizing noise in quantum systems (often called QCVV for Quantum Control Verification and Validation). Just now it consists of three main branches:</p>
<ul>
<li><strong>Quantum Noise</strong> - which contains all the algorithms and mechanisms necessary to extract $2^n$ eigenvalues/probabilities from a Quantum System in a single randomized benchmarking style experiment. It basically contains all the analysis code used in <strong>Efficient Learning of quantum Noise</strong> <a href="https://arxiv.org/abs/1907.13022" rel="nofollow">arXiv:1907.13022</a>. The workbooks, and graph drawing software all appear in <strong>docs/example/quantumNoise</strong> and show how to reproduce all the analysis and charts in that paper (and more), using the software in this package.</li>
<li><strong>Channel conversions and random channel creation</strong>. The first leans heavily on a package <a href="https://github.com/BBN-Q/QuantumInfo.jl/blob/master/src/open-systems.jl">open-system.jl</a> by Blake Johnson and Marcus da Silva - although rather than just import it, I have incorporated the software so I can tweak some minor aspects of it to fit in with the rest of my sofware. There are a number of minor convenience functions I have added, including the rendering I have added for arrays, the ability to generate 'Super-Vectors' and various labels for charts etc. The second part (in rchannels.jl) deals with ways of creating random noise channels, and utilised the insights contained in a paper by Rudnicki, Puchała, Zyczkowski <a href="https://arxiv.org/abs/1707.06926" rel="nofollow">Gauge invariant information concerning quantum channels</a>. This allows the creation of CPTP maps that have a nice spread of various characteristics such as fidelity and unitarity.</li>
<li><strong>CHP and Clifford creation</strong>. This implements the Stabiliser formalism of Aaronson and Gottesman and the and the ability to efficiently create/select arbitrary Cliffords by Koenig and Smolin. The Stabiliser formalism is prevalent in Quantum Computing and is going to become more relevant in QCVV as we move towards implementing error detection and correction codes. We can use this work to create the circuits we need to run. For instance by setting up a Clifford in the stabiliser state, we can automatically produce the Qiskit commands to create the Clifford.</li>
</ul>
<p>I have still to incorporate the recent Bravyi and Maslov <a href="https://arxiv.org/abs/2003.09412" rel="nofollow">Hadamard-free circuits expose the structure of the Clifford group</a> paper into this code. Futher minor todos are to check we have valid stabiliser state before we try and decompose (invalid stabiliser states can cause infinite loops) and to automate the finding of the destabilisers.</p>
<h2><a id="user-content-documentation" class="anchor" aria-hidden="true" href="#documentation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Documentation</h2>
<p>This readme mainly details the CHP part of the programs included, there is documentation on the other functionality which can be found here: <a href="https://rharper2.github.io/Juqst.jl/docs/build/index.html" rel="nofollow">https://rharper2.github.io/Juqst.jl/docs/build/index.html</a>. As perviously Mentioned the docs/examples directory contains Jupyter notebooks that work through a lot of the functionality.</p>
<p>Below is a introduction to the CHP part of the package.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="    Tableau(n::Integer)
"><pre>    <span class="pl-c1">Tableau</span>(n<span class="pl-k">::</span><span class="pl-c1">Integer</span>)</pre></div>
<p>sets up and returns the a CHP Tableau for n qubits.</p>
<p>This is based on the formalism given by: <em>Improved Simulation of Stabilizer Circuits</em>,
Scott Aaronson and Daniel Gottesman, arXiv:quant-ph/0406196v5</p>
<p>The initial tableau represents a |00...0⟩ ket in the stabiliser state
This stabilises with "Z" and anti-stabilises with "X"</p>
<p>For the purposes of this port, the tableau is exactly replicated as per the paper
i.e. the "state" (Tableau.state) is an Int32 array (used as a bit array)
containing the following information.</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content=" x11   .....  x1n  | z11   ...       z1n | r1
  .    \\       .  |  .    \\          . |  .
  .     \\      .  |  .     \\         . |  .     Destabilisers
  .      \\     .  |  .      \\        . |  .
 xn1      \\   xnn | zn1      \\      znn| rn
 ______________________________________________
 x(n+1)1. x(n+1)n  | z(n+1) ... z(n+1)n  | r(n+1)
  .    \\       .  |  .      \\        . |  .
  .     \\      .  |  .       \\       . |  .     Stabilisers
  .      \\     .  |  .        \\      . |  .
 x(2n)1   \\x(2n)n | z(2n)1     \\ z(2n)n| r(2n)
"><pre><code> x11   .....  x1n  | z11   ...       z1n | r1
  .    \\       .  |  .    \\          . |  .
  .     \\      .  |  .     \\         . |  .     Destabilisers
  .      \\     .  |  .      \\        . |  .
 xn1      \\   xnn | zn1      \\      znn| rn
 ______________________________________________
 x(n+1)1. x(n+1)n  | z(n+1) ... z(n+1)n  | r(n+1)
  .    \\       .  |  .      \\        . |  .
  .     \\      .  |  .       \\       . |  .     Stabilisers
  .      \\     .  |  .        \\      . |  .
 x(2n)1   \\x(2n)n | z(2n)1     \\ z(2n)n| r(2n)
</code></pre></div>
<p>Set Tableau.showRaw to true to see the underlying state as a matrix.</p>
<h1><a id="user-content-sample-use" class="anchor" aria-hidden="true" href="#sample-use"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Sample use</h1>
<h2><a id="user-content-stabiliser-circuits" class="anchor" aria-hidden="true" href="#stabiliser-circuits"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Stabiliser Circuits</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="state = setup(number_ofQubits)
"><pre>state <span class="pl-k">=</span> <span class="pl-c1">setup</span>(number_ofQubits)</pre></div>
<p>prepares the stabiliser state for the correct number of qubits in the |000..000⟩ basis state</p>
<p>The state is represented internally as a matrix of the form:</p>
<p><a target="_blank" rel="noopener noreferrer" href="readMeFigures/Matrix.png"><img src="readMeFigures/Matrix.png" style="max-width:100%;"></a></p>
<p><a href="https://arxiv.org/abs/quant-ph/0406196" rel="nofollow">Aaronson/Gottesman arXiv:quant-ph/0406196</a></p>
<p>Currently I am just using Int32 Arrays, although binary arrays would save space (if it ever becomes necessary).
Rows 1 to n of the tableau represent the destabiliser generators, rows n+1 to 2n represent the stabiliser generators. Each row is read
as follows: if the x<sub>ij</sub> and z<sub>ij</sub> are 1, the de/stabiliser is a Y, if they are both 0, its I otherwise its an X or Z depending on which one is set.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="output(state)
"><pre><span class="pl-c1">output</span>(state)</pre></div>
<p>Prints the state in a human readable form. The states above the line are the 'destabiliser' state, below the line are the 'stabiliser' states.</p>
<p>So in a 3 qubit system the initial state of |000⟩ is coded as</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="XII
IXI
IIX
---
ZII
IZI
IIZ
"><pre><code>XII
IXI
IIX
---
ZII
IZI
IIZ
</code></pre></div>
<p>The following commands are defined</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="hadamard(t::Tableau,qubit)  # apply a hadamard to the relevant qubit
phase(t::Tableau,qubit)     # apply a phase gate to the relevant qubit
cnot(t::Tableau,control,target) # apply a controlled not from control qubit to target qubit
"><pre><span class="pl-c1">hadamard</span>(t<span class="pl-k">::</span><span class="pl-c1">Tableau</span>,qubit)  <span class="pl-c"><span class="pl-c">#</span> apply a hadamard to the relevant qubit</span>
<span class="pl-c1">phase</span>(t<span class="pl-k">::</span><span class="pl-c1">Tableau</span>,qubit)     <span class="pl-c"><span class="pl-c">#</span> apply a phase gate to the relevant qubit</span>
<span class="pl-c1">cnot</span>(t<span class="pl-k">::</span><span class="pl-c1">Tableau</span>,control,target) <span class="pl-c"><span class="pl-c">#</span> apply a controlled not from control qubit to target qubit</span></pre></div>
<p>Output of the resultant state can be enabled by adding an extra true parameter</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="hadamard(t::Tableau,qubit,true) # hadamard as before, but show output
"><pre><span class="pl-c1">hadamard</span>(t<span class="pl-k">::</span><span class="pl-c1">Tableau</span>,qubit,<span class="pl-c1">true</span>) <span class="pl-c"><span class="pl-c">#</span> hadamard as before, but show output</span></pre></div>
<p><strong>NOTE! that these commands alter the state passed into them. I have broken Julia convention which requires functions
with side effects to be written thus - hadamard!(state,qubit), rather hadamard!(qubit) alters a globally defined variable, called state.</strong></p>
<h2><a id="user-content-arbitrary-cliffords" class="anchor" aria-hidden="true" href="#arbitrary-cliffords"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Arbitrary cliffords</h2>
<p><a href="https://arxiv.org/abs/1406.2170" rel="nofollow">Koenig/Smolin arXiv:quant-ph/1406.2170</a></p>
<p>The idea behind this paper is that we can implement a one-to-one mapping between the cliffords and an integer (plus a random phase string).</p>
<p>The mapping is as follows:</p>
<p><a target="_blank" rel="noopener noreferrer" href="readMeFigures/Clifford Mapping.png"><img src="readMeFigures/Clifford Mapping.png" style="max-width:100%;"></a>Koenig/Smolin arXiv:quant-ph/1406.2170</p>
<p>We can generate the alpha,beta,gamma and delta via</p>
<p>symplectic(i,n) # i = integer represting the clifford, n is the number of qubits</p>
<p>Which returns the nxn arrays (alpha-&gt;delta) coded as follows:</p>
<p><a target="_blank" rel="noopener noreferrer" href="readMeFigures/coding.png"><img src="readMeFigures/coding.png" style="max-width:100%;"></a>Koenig/Smolin arXiv:quant-ph/1406.2170</p>
<p>More usefully these can be placed into a stabiliser tableau (that is the equivlent of passing the state |0000⟩ through a gate that implements the unitary in question as follows:</p>
<p>e.g.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="t = cliffordToTableau(4,23,1)
"><pre>t <span class="pl-k">=</span> <span class="pl-c1">cliffordToTableau</span>(<span class="pl-c1">4</span>,<span class="pl-c1">23</span>,<span class="pl-c1">1</span>)</pre></div>
<p>Where the qubits are 4 the Clifford chosen is 23, and we have chosen the first of 4<sup>n</sup> phase patterns (here n = 4).</p>
<h1><a id="user-content-decomposing-a-tableau" class="anchor" aria-hidden="true" href="#decomposing-a-tableau"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Decomposing a tableau</h1>
<p>This will be made more general, but just now it decomposes an arbitrary tableau. This is not particulary efficient. Also it hangs if you pass in a tableau with an illformed state (All the stabilisers commute. The destabilisers anti-commute with the corresponding stabiliser, but commute with all the other stabilisers and the other destabilisers).</p>
<p>Todo: add sanity checks!</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="decomposeState(tableau)
"><pre><span class="pl-c1">decomposeState</span>(tableau)</pre></div>
<p>This prints out the elementary gates that would reconstruct the relevant clifford unitary. There is an optional parameter rationalise that defaults to true. Rationalise simply eliminates 4 phases in a row, two hadamards in a row or self cancelling cnots.</p>
<p>The commands are stored as string in the vector commands</p>
<h1><a id="user-content-draw-the-circuit" class="anchor" aria-hidden="true" href="#draw-the-circuit"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Draw the circuit</h1>
<p>This is a bit more involved, just now as it uses python packages. There should be an example in the notebooks. More details to be added.</p>
</article></div>