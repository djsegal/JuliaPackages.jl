<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-gaussian-direct-coupling-analysis-for-protein-contacts-predicion" class="anchor" aria-hidden="true" href="#gaussian-direct-coupling-analysis-for-protein-contacts-predicion"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Gaussian Direct Coupling Analysis for protein contacts predicion</h1>
<p><a href="https://github.com/carlobaldassi/GaussDCA.jl/actions/workflows/ci.yml"><img src="https://github.com/carlobaldassi/GaussDCA.jl/actions/workflows/ci.yml/badge.svg" alt="CI" style="max-width:100%;"></a> <a href="https://codecov.io/gh/carlobaldassi/GaussDCA.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/b507dcc54938b0e9446b95adb9ad270659128af91edadf7e4f5e6324adb9d0ef/68747470733a2f2f636f6465636f762e696f2f67682f6361726c6f62616c64617373692f47617573734443412e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="CODECOV" data-canonical-src="https://codecov.io/gh/carlobaldassi/GaussDCA.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<h2><a id="user-content-overview" class="anchor" aria-hidden="true" href="#overview"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Overview</h2>
<p>This is the code which accompanies the paper <a href="http://www.plosone.org/article/info%3Adoi%2F10.1371%2Fjournal.pone.0092721" rel="nofollow">"Fast and accurate multivariate
Gaussian modeling of protein families: Predicting residue contacts and
protein-interaction partners"</a>
by Carlo Baldassi, Marco Zamparo, Christoph Feinauer, Andrea Procaccini,
Riccardo Zecchina, Martin Weigt and Andrea Pagnani, (2014)
PLoS ONE 9(3): e92721. doi:10.1371/journal.pone.0092721</p>
<p>See also <a href="https://en.wikipedia.org/wiki/Direct_coupling_analysis" rel="nofollow">this Wikipedia article</a> for a general overview of the Direct
Coupling Analysis technique.</p>
<p>This code is released under the GPL version 3 (or later) license; see the
<code>LICENSE.md</code> file for details.</p>
<p>The code is written in <a href="https://www.julialang.org" rel="nofollow">Julia</a> and requires julia version
1.5 or later; it provides a function which reads
a multiple sequence alignment (in FASTA format) and returns a ranking of all
pairs of residue positions in the aligned amino-acid sequences.</p>
<p>Since version 2, most of the internal functions used to parse and manipulate
the data have been factored out into the package <a href="https://github.com/carlobaldassi/DCAUtils.jl">DCAUtils.jl</a>.
The code in this module is essentially a wrapper around those utilities.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>To install the package, enter in Pkg mode by pressing the <kbd>]</kbd> key,
then in the pkg prompt enter</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="(@v1.5) pkg&gt; add https://github.com/carlobaldassi/GaussDCA.jl&quot;
"><pre><code>(@v1.5) pkg&gt; add https://github.com/carlobaldassi/GaussDCA.jl"
</code></pre></div>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<p>To load the code, just type <code>using GaussDCA</code>.</p>
<p>This software provides one main function, <code>gDCA(filname::String, ...)</code>. This
function takes the name of a (possibly gzipped) FASTA file, and returns a
predicted contact ranking, in the form of a Vector of triples, each triple
containing two indices <code>i</code> and <code>j</code> (with <code>i</code> &lt; <code>j</code>) and a score. The indices
start counting from 1, and denote pair of residue positions in the given
alignment; pairs which are separated by less than a given number of residues
(by default 5) are filtered out. The triples are sorted by score in descending
order, such that predicted contacts should come up on top.</p>
<p>For convenience, a utility function is also provided, <code>printrank(output, R)</code>,
which prints the result of <code>gDCA</code> either in a file or to a stream, given as
first argument.  If the first argument <code>output</code> is omitted, the standard
terminal output will be used.</p>
<p>The <code>gDCA</code> function takes some additional, optional keyword arguments:</p>
<ul>
<li><code>pseudocount</code>: the value of the pseudo-count parameter, between <code>0</code> and <code>1</code>.
the default is <code>0.8</code>, which gives good results when the
Frobenius norm score is used (see below); a good value for the
Direct Information score is <code>0.2</code>.</li>
<li><code>θ</code>: the value of the similarity threshold. By default it is <code>:auto</code>,
which means it will be automatically computed (this takes additional
time); otherwise, a real value between <code>0</code> and <code>1</code> can be given.</li>
<li><code>max_gap_fraction</code>: maximum fraction of gap symbols in a sequence; sequences
that exceed this threshold are discarded. The default
value is <code>0.9</code>.</li>
<li><code>score</code>: the scoring function to use. There are two possibilities, <code>:DI</code> for
the Direct Information, and <code>:frob</code> for the Frobenius norm. The
default is <code>:frob</code>. (Note the leading colon: this argument is passed
as a symbol).</li>
<li><code>min_separation</code>: the minimum separation between residues in the output
ranking. Must be ≥ <code>1</code>. The default
is <code>5</code>.</li>
</ul>
<p>The code is multi-threaded: if you start julia with the <code>-t</code> option, for example
as <code>julia -t 8</code>, the computations will run in parallel on the given number of
threads.</p>
<h2><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Examples</h2>
<p>Here is a basic usage example, assuming an alignment in FASTA format is found
in the file "alignment.fasta.gz":</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt; using GaussDCA

julia&gt; FNR = gDCA(&quot;alignment.fasta.gz&quot;);

julia&gt; printrank(&quot;results_FN.txt&quot;, FNR)
"><pre><code>julia&gt; using GaussDCA

julia&gt; FNR = gDCA("alignment.fasta.gz");

julia&gt; printrank("results_FN.txt", FNR)
</code></pre></div>
<p>The above uses the Frobenius norm ranking with default parameters.
This is how to get the Direct Information ranking instead:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt; DIR = gDCA(&quot;alignment.fasta.gz&quot;, pseudocount = 0.2, score = :DI);

julia&gt; printrank(&quot;results_DI.txt&quot;, DIR)
"><pre><code>julia&gt; DIR = gDCA("alignment.fasta.gz", pseudocount = 0.2, score = :DI);

julia&gt; printrank("results_DI.txt", DIR)
</code></pre></div>
</article></div>