<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-lightgraphsflows" class="anchor" aria-hidden="true" href="#lightgraphsflows"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>LightGraphsFlows</h1>
<p><a href="https://github.com/JuliaGraphs/LightGraphsFlows.jl/actions/workflows/ci.yml"><img src="https://github.com/JuliaGraphs/LightGraphsFlows.jl/actions/workflows/ci.yml/badge.svg" alt="CI" style="max-width:100%;"></a>
<a href="http://codecov.io/github/JuliaGraphs/LightGraphsFlows.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/f7bd1dd665df0a0e2fef82bc4b6bacaa58cb4d5172ebf2b13878edcb51336239/687474703a2f2f636f6465636f762e696f2f6769746875622f4a756c69614772617068732f4c69676874477261706873466c6f77732e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/JuliaGraphs/LightGraphsFlows.jl/coverage.svg?branch=master" style="max-width:100%;"></a>
<a href="https://juliagraphs.github.io/LightGraphsFlows.jl/stable/" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a></p>
<p>Flow algorithms on top of <a href="https://github.com/JuliaGraphs/LightGraphs.jl">LightGraphs.jl</a>,
including <code>maximum_flow</code>, <code>multiroute_flow</code> and <code>mincost_flow</code>.
See <a href="https://en.wikipedia.org/wiki/Maximum_flow_problem" rel="nofollow">Maximum flow problem</a>
for a detailed description of the problem.</p>
<p>Documentation for this package is available <a href="https://juliagraphs.github.io/LightGraphsFlows.jl/latest/" rel="nofollow">here</a>. For an overview of JuliaGraphs, see <a href="https://juliagraphs.github.io/" rel="nofollow">this page</a>.</p>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<h3><a id="user-content-maxflow" class="anchor" aria-hidden="true" href="#maxflow"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Maxflow</h3>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using LightGraphs, LightGraphsFlows
julia&gt; const LG = LightGraphs
julia&gt; flow_graph = LG.DiGraph(8) # Create a flow graph
julia&gt; flow_edges = [
    (1,2,10),(1,3,5),(1,4,15),(2,3,4),(2,5,9),
    (2,6,15),(3,4,4),(3,6,8),(4,7,16),(5,6,15),
    (5,8,10),(6,7,15),(6,8,10),(7,3,6),(7,8,10)
]

julia&gt; capacity_matrix = zeros(Int, 8, 8)  # Create a capacity matrix

julia&gt; for e in flow_edges
    u, v, f = e
    LG.add_edge!(flow_graph, u, v)
    capacity_matrix[u,v] = f
end

julia&gt; f, F = maximum_flow(flow_graph, 1, 8) # Run default maximum_flow (push-relabel) without the capacity_matrix

julia&gt; f, F = maximum_flow(flow_graph, 1, 8, capacity_matrix) # Run default maximum_flow with the capacity_matrix

julia&gt; f, F = maximum_flow(flow_graph, 1, 8, capacity_matrix, algorithm=EdmondsKarpAlgorithm()) # Run Edmonds-Karp algorithm

julia&gt; f, F = maximum_flow(flow_graph, 1, 8, capacity_matrix, algorithm=DinicAlgorithm()) # Run Dinic's algorithm

julia&gt; f, F, labels = maximum_flow(flow_graph, 1, 8, capacity_matrix, algorithm=BoykovKolmogorovAlgorithm()) # Run Boykov-Kolmogorov algorithm
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> LightGraphs, LightGraphsFlows
julia<span class="pl-k">&gt;</span> <span class="pl-k">const</span> LG <span class="pl-k">=</span> LightGraphs
julia<span class="pl-k">&gt;</span> flow_graph <span class="pl-k">=</span> LG<span class="pl-k">.</span><span class="pl-c1">DiGraph</span>(<span class="pl-c1">8</span>) <span class="pl-c"><span class="pl-c">#</span> Create a flow graph</span>
julia<span class="pl-k">&gt;</span> flow_edges <span class="pl-k">=</span> [
    (<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">10</span>),(<span class="pl-c1">1</span>,<span class="pl-c1">3</span>,<span class="pl-c1">5</span>),(<span class="pl-c1">1</span>,<span class="pl-c1">4</span>,<span class="pl-c1">15</span>),(<span class="pl-c1">2</span>,<span class="pl-c1">3</span>,<span class="pl-c1">4</span>),(<span class="pl-c1">2</span>,<span class="pl-c1">5</span>,<span class="pl-c1">9</span>),
    (<span class="pl-c1">2</span>,<span class="pl-c1">6</span>,<span class="pl-c1">15</span>),(<span class="pl-c1">3</span>,<span class="pl-c1">4</span>,<span class="pl-c1">4</span>),(<span class="pl-c1">3</span>,<span class="pl-c1">6</span>,<span class="pl-c1">8</span>),(<span class="pl-c1">4</span>,<span class="pl-c1">7</span>,<span class="pl-c1">16</span>),(<span class="pl-c1">5</span>,<span class="pl-c1">6</span>,<span class="pl-c1">15</span>),
    (<span class="pl-c1">5</span>,<span class="pl-c1">8</span>,<span class="pl-c1">10</span>),(<span class="pl-c1">6</span>,<span class="pl-c1">7</span>,<span class="pl-c1">15</span>),(<span class="pl-c1">6</span>,<span class="pl-c1">8</span>,<span class="pl-c1">10</span>),(<span class="pl-c1">7</span>,<span class="pl-c1">3</span>,<span class="pl-c1">6</span>),(<span class="pl-c1">7</span>,<span class="pl-c1">8</span>,<span class="pl-c1">10</span>)
]

julia<span class="pl-k">&gt;</span> capacity_matrix <span class="pl-k">=</span> <span class="pl-c1">zeros</span>(Int, <span class="pl-c1">8</span>, <span class="pl-c1">8</span>)  <span class="pl-c"><span class="pl-c">#</span> Create a capacity matrix</span>

julia<span class="pl-k">&gt;</span> <span class="pl-k">for</span> e <span class="pl-k">in</span> flow_edges
    u, v, f <span class="pl-k">=</span> e
    LG<span class="pl-k">.</span><span class="pl-c1">add_edge!</span>(flow_graph, u, v)
    capacity_matrix[u,v] <span class="pl-k">=</span> f
<span class="pl-k">end</span>

julia<span class="pl-k">&gt;</span> f, F <span class="pl-k">=</span> <span class="pl-c1">maximum_flow</span>(flow_graph, <span class="pl-c1">1</span>, <span class="pl-c1">8</span>) <span class="pl-c"><span class="pl-c">#</span> Run default maximum_flow (push-relabel) without the capacity_matrix</span>

julia<span class="pl-k">&gt;</span> f, F <span class="pl-k">=</span> <span class="pl-c1">maximum_flow</span>(flow_graph, <span class="pl-c1">1</span>, <span class="pl-c1">8</span>, capacity_matrix) <span class="pl-c"><span class="pl-c">#</span> Run default maximum_flow with the capacity_matrix</span>

julia<span class="pl-k">&gt;</span> f, F <span class="pl-k">=</span> <span class="pl-c1">maximum_flow</span>(flow_graph, <span class="pl-c1">1</span>, <span class="pl-c1">8</span>, capacity_matrix, algorithm<span class="pl-k">=</span><span class="pl-c1">EdmondsKarpAlgorithm</span>()) <span class="pl-c"><span class="pl-c">#</span> Run Edmonds-Karp algorithm</span>

julia<span class="pl-k">&gt;</span> f, F <span class="pl-k">=</span> <span class="pl-c1">maximum_flow</span>(flow_graph, <span class="pl-c1">1</span>, <span class="pl-c1">8</span>, capacity_matrix, algorithm<span class="pl-k">=</span><span class="pl-c1">DinicAlgorithm</span>()) <span class="pl-c"><span class="pl-c">#</span> Run Dinic's algorithm</span>

julia<span class="pl-k">&gt;</span> f, F, labels <span class="pl-k">=</span> <span class="pl-c1">maximum_flow</span>(flow_graph, <span class="pl-c1">1</span>, <span class="pl-c1">8</span>, capacity_matrix, algorithm<span class="pl-k">=</span><span class="pl-c1">BoykovKolmogorovAlgorithm</span>()) <span class="pl-c"><span class="pl-c">#</span> Run Boykov-Kolmogorov algorithm</span></pre></div>
<h3><a id="user-content-multi-route-flow" class="anchor" aria-hidden="true" href="#multi-route-flow"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Multi-route flow</h3>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using LightGraphs, LightGraphsFlows
julia&gt; const LG =  LightGraphs

julia&gt; flow_graph = LG.DiGraph(8) # Create a flow graph

julia&gt; flow_edges = [
(1, 2, 10), (1, 3, 5),  (1, 4, 15), (2, 3, 4),  (2, 5, 9),
(2, 6, 15), (3, 4, 4),  (3, 6, 8),  (4, 7, 16), (5, 6, 15),
(5, 8, 10), (6, 7, 15), (6, 8, 10), (7, 3, 6),  (7, 8, 10)
]

julia&gt; capacity_matrix = zeros(Int, 8, 8) # Create a capacity matrix

julia&gt; for e in flow_edges
    u, v, f = e
    LG.add_edge!(flow_graph, u, v)
    capacity_matrix[u, v] = f
end

julia&gt; f, F = multiroute_flow(flow_graph, 1, 8, capacity_matrix, routes = 2) # Run default multiroute_flow with an integer number of routes = 2

julia&gt; f, F = multiroute_flow(flow_graph, 1, 8, capacity_matrix, routes = 1.5) # Run default multiroute_flow with a noninteger number of routes = 1.5

julia&gt; points = multiroute_flow(flow_graph, 1, 8, capacity_matrix) # Run default multiroute_flow for all the breaking points values

julia&gt; f, F = multiroute_flow(points, 1.5) # Then run multiroute flow algorithm for any positive number of routes

julia&gt; f, F, labels = multiroute_flow(flow_graph, 1, 8, capacity_matrix, flow_algorithm = BoykovKolmogorovAlgorithm(), routes = 2) # Run multiroute flow algorithm using Boykov-Kolmogorov algorithm as maximum_flow routine
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> LightGraphs, LightGraphsFlows
julia<span class="pl-k">&gt;</span> <span class="pl-k">const</span> LG <span class="pl-k">=</span>  LightGraphs

julia<span class="pl-k">&gt;</span> flow_graph <span class="pl-k">=</span> LG<span class="pl-k">.</span><span class="pl-c1">DiGraph</span>(<span class="pl-c1">8</span>) <span class="pl-c"><span class="pl-c">#</span> Create a flow graph</span>

julia<span class="pl-k">&gt;</span> flow_edges <span class="pl-k">=</span> [
(<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">10</span>), (<span class="pl-c1">1</span>, <span class="pl-c1">3</span>, <span class="pl-c1">5</span>),  (<span class="pl-c1">1</span>, <span class="pl-c1">4</span>, <span class="pl-c1">15</span>), (<span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">4</span>),  (<span class="pl-c1">2</span>, <span class="pl-c1">5</span>, <span class="pl-c1">9</span>),
(<span class="pl-c1">2</span>, <span class="pl-c1">6</span>, <span class="pl-c1">15</span>), (<span class="pl-c1">3</span>, <span class="pl-c1">4</span>, <span class="pl-c1">4</span>),  (<span class="pl-c1">3</span>, <span class="pl-c1">6</span>, <span class="pl-c1">8</span>),  (<span class="pl-c1">4</span>, <span class="pl-c1">7</span>, <span class="pl-c1">16</span>), (<span class="pl-c1">5</span>, <span class="pl-c1">6</span>, <span class="pl-c1">15</span>),
(<span class="pl-c1">5</span>, <span class="pl-c1">8</span>, <span class="pl-c1">10</span>), (<span class="pl-c1">6</span>, <span class="pl-c1">7</span>, <span class="pl-c1">15</span>), (<span class="pl-c1">6</span>, <span class="pl-c1">8</span>, <span class="pl-c1">10</span>), (<span class="pl-c1">7</span>, <span class="pl-c1">3</span>, <span class="pl-c1">6</span>),  (<span class="pl-c1">7</span>, <span class="pl-c1">8</span>, <span class="pl-c1">10</span>)
]

julia<span class="pl-k">&gt;</span> capacity_matrix <span class="pl-k">=</span> <span class="pl-c1">zeros</span>(Int, <span class="pl-c1">8</span>, <span class="pl-c1">8</span>) <span class="pl-c"><span class="pl-c">#</span> Create a capacity matrix</span>

julia<span class="pl-k">&gt;</span> <span class="pl-k">for</span> e <span class="pl-k">in</span> flow_edges
    u, v, f <span class="pl-k">=</span> e
    LG<span class="pl-k">.</span><span class="pl-c1">add_edge!</span>(flow_graph, u, v)
    capacity_matrix[u, v] <span class="pl-k">=</span> f
<span class="pl-k">end</span>

julia<span class="pl-k">&gt;</span> f, F <span class="pl-k">=</span> <span class="pl-c1">multiroute_flow</span>(flow_graph, <span class="pl-c1">1</span>, <span class="pl-c1">8</span>, capacity_matrix, routes <span class="pl-k">=</span> <span class="pl-c1">2</span>) <span class="pl-c"><span class="pl-c">#</span> Run default multiroute_flow with an integer number of routes = 2</span>

julia<span class="pl-k">&gt;</span> f, F <span class="pl-k">=</span> <span class="pl-c1">multiroute_flow</span>(flow_graph, <span class="pl-c1">1</span>, <span class="pl-c1">8</span>, capacity_matrix, routes <span class="pl-k">=</span> <span class="pl-c1">1.5</span>) <span class="pl-c"><span class="pl-c">#</span> Run default multiroute_flow with a noninteger number of routes = 1.5</span>

julia<span class="pl-k">&gt;</span> points <span class="pl-k">=</span> <span class="pl-c1">multiroute_flow</span>(flow_graph, <span class="pl-c1">1</span>, <span class="pl-c1">8</span>, capacity_matrix) <span class="pl-c"><span class="pl-c">#</span> Run default multiroute_flow for all the breaking points values</span>

julia<span class="pl-k">&gt;</span> f, F <span class="pl-k">=</span> <span class="pl-c1">multiroute_flow</span>(points, <span class="pl-c1">1.5</span>) <span class="pl-c"><span class="pl-c">#</span> Then run multiroute flow algorithm for any positive number of routes</span>

julia<span class="pl-k">&gt;</span> f, F, labels <span class="pl-k">=</span> <span class="pl-c1">multiroute_flow</span>(flow_graph, <span class="pl-c1">1</span>, <span class="pl-c1">8</span>, capacity_matrix, flow_algorithm <span class="pl-k">=</span> <span class="pl-c1">BoykovKolmogorovAlgorithm</span>(), routes <span class="pl-k">=</span> <span class="pl-c1">2</span>) <span class="pl-c"><span class="pl-c">#</span> Run multiroute flow algorithm using Boykov-Kolmogorov algorithm as maximum_flow routine</span></pre></div>
<h2><a id="user-content-mincost-flow" class="anchor" aria-hidden="true" href="#mincost-flow"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Mincost flow</h2>
<p>Mincost flow is solving a linear optimization problem and thus requires a LP optimizer
defined by <a href="https://www.juliaopt.org/MathOptInterface.jl/stable/" rel="nofollow">MathOptInterface.jl</a>.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using SparseArrays: spzeros
julia&gt; import Clp

julia&gt; using LightGraphs, LightGraphsFlows
julia&gt; const LG =  LightGraphs

julia&gt; g = LG.DiGraph(6)
julia&gt; LG.add_edge!(g, 5, 1)
julia&gt; LG.add_edge!(g, 5, 2)
julia&gt; LG.add_edge!(g, 3, 6)
julia&gt; LG.add_edge!(g, 4, 6)
julia&gt; LG.add_edge!(g, 1, 3)
julia&gt; LG.add_edge!(g, 1, 4)
julia&gt; LG.add_edge!(g, 2, 3)
julia&gt; LG.add_edge!(g, 2, 4)
julia&gt; cost = zeros(6,6)
julia&gt; cost[1,3] = 10.
julia&gt; cost[1,4] = 5.
julia&gt; cost[2,3] = 2.
julia&gt; cost[2,4] = 2.

# v2 -&gt; sink have demand of one
julia&gt; demand = spzeros(6,6)
julia&gt; demand[3,6] = 1
julia&gt; demand[4,6] = 1
julia&gt; node_demand = spzeros(6)
julia&gt; capacity = ones(6,6)

# returns the sparse flow matrix
julia&gt; flow = mincost_flow(g, node_demand, capacity, cost, Clp.Optimizer, edge_demand=demand, source_nodes=[5], sink_nodes=[6])
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> SparseArrays<span class="pl-k">:</span> spzeros
julia<span class="pl-k">&gt;</span> <span class="pl-k">import</span> Clp

julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> LightGraphs, LightGraphsFlows
julia<span class="pl-k">&gt;</span> <span class="pl-k">const</span> LG <span class="pl-k">=</span>  LightGraphs

julia<span class="pl-k">&gt;</span> g <span class="pl-k">=</span> LG<span class="pl-k">.</span><span class="pl-c1">DiGraph</span>(<span class="pl-c1">6</span>)
julia<span class="pl-k">&gt;</span> LG<span class="pl-k">.</span><span class="pl-c1">add_edge!</span>(g, <span class="pl-c1">5</span>, <span class="pl-c1">1</span>)
julia<span class="pl-k">&gt;</span> LG<span class="pl-k">.</span><span class="pl-c1">add_edge!</span>(g, <span class="pl-c1">5</span>, <span class="pl-c1">2</span>)
julia<span class="pl-k">&gt;</span> LG<span class="pl-k">.</span><span class="pl-c1">add_edge!</span>(g, <span class="pl-c1">3</span>, <span class="pl-c1">6</span>)
julia<span class="pl-k">&gt;</span> LG<span class="pl-k">.</span><span class="pl-c1">add_edge!</span>(g, <span class="pl-c1">4</span>, <span class="pl-c1">6</span>)
julia<span class="pl-k">&gt;</span> LG<span class="pl-k">.</span><span class="pl-c1">add_edge!</span>(g, <span class="pl-c1">1</span>, <span class="pl-c1">3</span>)
julia<span class="pl-k">&gt;</span> LG<span class="pl-k">.</span><span class="pl-c1">add_edge!</span>(g, <span class="pl-c1">1</span>, <span class="pl-c1">4</span>)
julia<span class="pl-k">&gt;</span> LG<span class="pl-k">.</span><span class="pl-c1">add_edge!</span>(g, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>)
julia<span class="pl-k">&gt;</span> LG<span class="pl-k">.</span><span class="pl-c1">add_edge!</span>(g, <span class="pl-c1">2</span>, <span class="pl-c1">4</span>)
julia<span class="pl-k">&gt;</span> cost <span class="pl-k">=</span> <span class="pl-c1">zeros</span>(<span class="pl-c1">6</span>,<span class="pl-c1">6</span>)
julia<span class="pl-k">&gt;</span> cost[<span class="pl-c1">1</span>,<span class="pl-c1">3</span>] <span class="pl-k">=</span> <span class="pl-c1">10.</span>
julia<span class="pl-k">&gt;</span> cost[<span class="pl-c1">1</span>,<span class="pl-c1">4</span>] <span class="pl-k">=</span> <span class="pl-c1">5.</span>
julia<span class="pl-k">&gt;</span> cost[<span class="pl-c1">2</span>,<span class="pl-c1">3</span>] <span class="pl-k">=</span> <span class="pl-c1">2.</span>
julia<span class="pl-k">&gt;</span> cost[<span class="pl-c1">2</span>,<span class="pl-c1">4</span>] <span class="pl-k">=</span> <span class="pl-c1">2.</span>

<span class="pl-c"><span class="pl-c">#</span> v2 -&gt; sink have demand of one</span>
julia<span class="pl-k">&gt;</span> demand <span class="pl-k">=</span> <span class="pl-c1">spzeros</span>(<span class="pl-c1">6</span>,<span class="pl-c1">6</span>)
julia<span class="pl-k">&gt;</span> demand[<span class="pl-c1">3</span>,<span class="pl-c1">6</span>] <span class="pl-k">=</span> <span class="pl-c1">1</span>
julia<span class="pl-k">&gt;</span> demand[<span class="pl-c1">4</span>,<span class="pl-c1">6</span>] <span class="pl-k">=</span> <span class="pl-c1">1</span>
julia<span class="pl-k">&gt;</span> node_demand <span class="pl-k">=</span> <span class="pl-c1">spzeros</span>(<span class="pl-c1">6</span>)
julia<span class="pl-k">&gt;</span> capacity <span class="pl-k">=</span> <span class="pl-c1">ones</span>(<span class="pl-c1">6</span>,<span class="pl-c1">6</span>)

<span class="pl-c"><span class="pl-c">#</span> returns the sparse flow matrix</span>
julia<span class="pl-k">&gt;</span> flow <span class="pl-k">=</span> <span class="pl-c1">mincost_flow</span>(g, node_demand, capacity, cost, Clp<span class="pl-k">.</span>Optimizer, edge_demand<span class="pl-k">=</span>demand, source_nodes<span class="pl-k">=</span>[<span class="pl-c1">5</span>], sink_nodes<span class="pl-k">=</span>[<span class="pl-c1">6</span>])</pre></div>
</article></div>