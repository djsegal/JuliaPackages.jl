<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-lightgraphsflows" class="anchor" aria-hidden="true" href="#lightgraphsflows"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>LightGraphsFlows</h1>
<p><a href="https://travis-ci.org/JuliaGraphs/LightGraphsFlows.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/77bdc9c40252bbd94f057eaff6886c04121b27da/68747470733a2f2f7472617669732d63692e6f72672f4a756c69614772617068732f4c69676874477261706873466c6f77732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaGraphs/LightGraphsFlows.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/JuliaGraphs/LightGraphsFlows.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/a25de23be031d51346921e39957c599846656895/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f4a756c69614772617068732f4c69676874477261706873466c6f77732e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/JuliaGraphs/LightGraphsFlows.jl/badge.svg?branch=master" style="max-width:100%;"></a>
<a href="http://codecov.io/github/JuliaGraphs/LightGraphsFlows.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/02c6962b3c9d738c80a5b99ef76bda7128c67534/687474703a2f2f636f6465636f762e696f2f6769746875622f4a756c69614772617068732f4c69676874477261706873466c6f77732e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/JuliaGraphs/LightGraphsFlows.jl/coverage.svg?branch=master" style="max-width:100%;"></a>
<a href="https://juliagraphs.github.io/LightGraphsFlows.jl/dev/" rel="nofollow"><img src="https://camo.githubusercontent.com/57bae07ecd50a99519ad0516d91f4ec8f0f48e12/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6c61746573742d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-latest-blue.svg" style="max-width:100%;"></a></p>
<p>Flow algorithms on top of <a href="https://github.com/JuliaGraphs/LightGraphs.jl">LightGraphs.jl</a>,
including <code>maximum_flow</code>, <code>multiroute_flow</code> and <code>mincost_flow</code>.
See <a href="https://en.wikipedia.org/wiki/Maximum_flow_problem" rel="nofollow">Maximum flow problem</a>
for a detailed description of the problem.</p>
<p>Documentation for this package is available <a href="https://juliagraphs.github.io/LightGraphsFlows.jl/latest/" rel="nofollow">here</a>. For an overview of JuliaGraphs, see <a href="https://juliagraphs.github.io/" rel="nofollow">this page</a>.</p>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Usage</h2>
<h3><a id="user-content-maxflow" class="anchor" aria-hidden="true" href="#maxflow"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Maxflow</h3>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> flow_graph <span class="pl-k">=</span> lg<span class="pl-k">.</span><span class="pl-c1">DiGraph</span>(<span class="pl-c1">8</span>) <span class="pl-c"><span class="pl-c">#</span> Create a flow-graph</span>
julia<span class="pl-k">&gt;</span> flow_edges <span class="pl-k">=</span> [
(<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">10</span>),(<span class="pl-c1">1</span>,<span class="pl-c1">3</span>,<span class="pl-c1">5</span>),(<span class="pl-c1">1</span>,<span class="pl-c1">4</span>,<span class="pl-c1">15</span>),(<span class="pl-c1">2</span>,<span class="pl-c1">3</span>,<span class="pl-c1">4</span>),(<span class="pl-c1">2</span>,<span class="pl-c1">5</span>,<span class="pl-c1">9</span>),
(<span class="pl-c1">2</span>,<span class="pl-c1">6</span>,<span class="pl-c1">15</span>),(<span class="pl-c1">3</span>,<span class="pl-c1">4</span>,<span class="pl-c1">4</span>),(<span class="pl-c1">3</span>,<span class="pl-c1">6</span>,<span class="pl-c1">8</span>),(<span class="pl-c1">4</span>,<span class="pl-c1">7</span>,<span class="pl-c1">16</span>),(<span class="pl-c1">5</span>,<span class="pl-c1">6</span>,<span class="pl-c1">15</span>),
(<span class="pl-c1">5</span>,<span class="pl-c1">8</span>,<span class="pl-c1">10</span>),(<span class="pl-c1">6</span>,<span class="pl-c1">7</span>,<span class="pl-c1">15</span>),(<span class="pl-c1">6</span>,<span class="pl-c1">8</span>,<span class="pl-c1">10</span>),(<span class="pl-c1">7</span>,<span class="pl-c1">3</span>,<span class="pl-c1">6</span>),(<span class="pl-c1">7</span>,<span class="pl-c1">8</span>,<span class="pl-c1">10</span>)
]

julia<span class="pl-k">&gt;</span> capacity_matrix <span class="pl-k">=</span> <span class="pl-c1">zeros</span>(Int, <span class="pl-c1">8</span>, <span class="pl-c1">8</span>)  <span class="pl-c"><span class="pl-c">#</span> Create a capacity matrix</span>

julia<span class="pl-k">&gt;</span> <span class="pl-k">for</span> e <span class="pl-k">in</span> flow_edges
    u, v, f <span class="pl-k">=</span> e
    lg<span class="pl-k">.</span><span class="pl-c1">add_edge!</span>(flow_graph, u, v)
    capacity_matrix[u,v] <span class="pl-k">=</span> f
<span class="pl-k">end</span>

julia<span class="pl-k">&gt;</span> f, F <span class="pl-k">=</span> <span class="pl-c1">maximum_flow</span>(flow_graph, <span class="pl-c1">1</span>, <span class="pl-c1">8</span>) <span class="pl-c"><span class="pl-c">#</span> Run default maximum_flow (push-relabel) without the capacity_matrix</span>

julia<span class="pl-k">&gt;</span> f, F <span class="pl-k">=</span> <span class="pl-c1">maximum_flow</span>(flow_graph, <span class="pl-c1">1</span>, <span class="pl-c1">8</span>, capacity_matrix) <span class="pl-c"><span class="pl-c">#</span> Run default maximum_flow with the capacity_matrix</span>

julia<span class="pl-k">&gt;</span> f, F <span class="pl-k">=</span> <span class="pl-c1">maximum_flow</span>(flow_graph, <span class="pl-c1">1</span>, <span class="pl-c1">8</span>, capacity_matrix, algorithm<span class="pl-k">=</span><span class="pl-c1">EdmondsKarpAlgorithm</span>()) <span class="pl-c"><span class="pl-c">#</span> Run Edmonds-Karp algorithm</span>

julia<span class="pl-k">&gt;</span> f, F <span class="pl-k">=</span> <span class="pl-c1">maximum_flow</span>(flow_graph, <span class="pl-c1">1</span>, <span class="pl-c1">8</span>, capacity_matrix, algorithm<span class="pl-k">=</span><span class="pl-c1">DinicAlgorithm</span>()) <span class="pl-c"><span class="pl-c">#</span> Run Dinic's algorithm</span>

julia<span class="pl-k">&gt;</span> f, F, labels <span class="pl-k">=</span> <span class="pl-c1">maximum_flow</span>(flow_graph, <span class="pl-c1">1</span>, <span class="pl-c1">8</span>, capacity_matrix, algorithm<span class="pl-k">=</span><span class="pl-c1">BoykovKolmogorovAlgorithm</span>()) <span class="pl-c"><span class="pl-c">#</span> Run Boykov-Kolmogorov algorithm</span></pre></div>
<h3><a id="user-content-multi-route-flow" class="anchor" aria-hidden="true" href="#multi-route-flow"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Multi-route flow</h3>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> flow_graph <span class="pl-k">=</span> lg<span class="pl-k">.</span><span class="pl-c1">DiGraph</span>(<span class="pl-c1">8</span>) <span class="pl-c"><span class="pl-c">#</span> Create a flow graph</span>

julia<span class="pl-k">&gt;</span> flow_edges <span class="pl-k">=</span> [
(<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">10</span>), (<span class="pl-c1">1</span>, <span class="pl-c1">3</span>, <span class="pl-c1">5</span>),  (<span class="pl-c1">1</span>, <span class="pl-c1">4</span>, <span class="pl-c1">15</span>), (<span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">4</span>),  (<span class="pl-c1">2</span>, <span class="pl-c1">5</span>, <span class="pl-c1">9</span>),
(<span class="pl-c1">2</span>, <span class="pl-c1">6</span>, <span class="pl-c1">15</span>), (<span class="pl-c1">3</span>, <span class="pl-c1">4</span>, <span class="pl-c1">4</span>),  (<span class="pl-c1">3</span>, <span class="pl-c1">6</span>, <span class="pl-c1">8</span>),  (<span class="pl-c1">4</span>, <span class="pl-c1">7</span>, <span class="pl-c1">16</span>), (<span class="pl-c1">5</span>, <span class="pl-c1">6</span>, <span class="pl-c1">15</span>),
(<span class="pl-c1">5</span>, <span class="pl-c1">8</span>, <span class="pl-c1">10</span>), (<span class="pl-c1">6</span>, <span class="pl-c1">7</span>, <span class="pl-c1">15</span>), (<span class="pl-c1">6</span>, <span class="pl-c1">8</span>, <span class="pl-c1">10</span>), (<span class="pl-c1">7</span>, <span class="pl-c1">3</span>, <span class="pl-c1">6</span>),  (<span class="pl-c1">7</span>, <span class="pl-c1">8</span>, <span class="pl-c1">10</span>)
]

julia<span class="pl-k">&gt;</span> capacity_matrix <span class="pl-k">=</span> <span class="pl-c1">zeros</span>(Int, <span class="pl-c1">8</span>, <span class="pl-c1">8</span>) <span class="pl-c"><span class="pl-c">#</span> Create a capacity matrix</span>

julia<span class="pl-k">&gt;</span> <span class="pl-k">for</span> e <span class="pl-k">in</span> flow_edges
    u, v, f <span class="pl-k">=</span> e
    <span class="pl-c1">add_edge!</span>(flow_graph, u, v)
    capacity_matrix[u, v] <span class="pl-k">=</span> f
<span class="pl-k">end</span>

julia<span class="pl-k">&gt;</span> f, F <span class="pl-k">=</span> <span class="pl-c1">multiroute_flow</span>(flow_graph, <span class="pl-c1">1</span>, <span class="pl-c1">8</span>, capacity_matrix, routes <span class="pl-k">=</span> <span class="pl-c1">2</span>) <span class="pl-c"><span class="pl-c">#</span> Run default multiroute_flow with an integer number of routes = 2</span>

julia<span class="pl-k">&gt;</span> f, F <span class="pl-k">=</span> <span class="pl-c1">multiroute_flow</span>(flow_graph, <span class="pl-c1">1</span>, <span class="pl-c1">8</span>, capacity_matrix, routes <span class="pl-k">=</span> <span class="pl-c1">1.5</span>) <span class="pl-c"><span class="pl-c">#</span> Run default multiroute_flow with a noninteger number of routes = 1.5</span>

julia<span class="pl-k">&gt;</span> points <span class="pl-k">=</span> <span class="pl-c1">multiroute_flow</span>(flow_graph, <span class="pl-c1">1</span>, <span class="pl-c1">8</span>, capacity_matrix) <span class="pl-c"><span class="pl-c">#</span> Run default multiroute_flow for all the breaking points values</span>

julia<span class="pl-k">&gt;</span> f, F <span class="pl-k">=</span> <span class="pl-c1">multiroute_flow</span>(points, <span class="pl-c1">1.5</span>) <span class="pl-c"><span class="pl-c">#</span> Then run multiroute flow algorithm for any positive number of routes</span>

julia<span class="pl-k">&gt;</span> f <span class="pl-k">=</span> <span class="pl-c1">multiroute_flow</span>(points, <span class="pl-c1">1.5</span>, valueonly <span class="pl-k">=</span> <span class="pl-c1">true</span>)

julia<span class="pl-k">&gt;</span> f, F, labels <span class="pl-k">=</span> <span class="pl-c1">multiroute_flow</span>(flow_graph, <span class="pl-c1">1</span>, <span class="pl-c1">8</span>, capacity_matrix, algorithm <span class="pl-k">=</span> <span class="pl-c1">BoykovKolmogorovAlgorithm</span>(), routes <span class="pl-k">=</span> <span class="pl-c1">2</span>) <span class="pl-c"><span class="pl-c">#</span> Run multiroute flow algorithm using Boykov-Kolmogorov algorithm as maximum_flow routine</span></pre></div>
<h2><a id="user-content-mincost-flow" class="anchor" aria-hidden="true" href="#mincost-flow"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Mincost flow</h2>
<p>Mincost flow is solving a linear optimization problem and thus requires a LP solver
defined by <a href="http://mathprogbasejl.readthedocs.io" rel="nofollow">MathProgBase.jl</a>.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> SparseArrays<span class="pl-k">:</span> spzeros
<span class="pl-k">import</span> Clp
<span class="pl-k">using</span> JuMP<span class="pl-k">:</span> with_optimizer

g <span class="pl-k">=</span> lg<span class="pl-k">.</span><span class="pl-c1">DiGraph</span>(<span class="pl-c1">6</span>)
lg<span class="pl-k">.</span><span class="pl-c1">add_edge!</span>(g, <span class="pl-c1">5</span>, <span class="pl-c1">1</span>)
lg<span class="pl-k">.</span><span class="pl-c1">add_edge!</span>(g, <span class="pl-c1">5</span>, <span class="pl-c1">2</span>)
lg<span class="pl-k">.</span><span class="pl-c1">add_edge!</span>(g, <span class="pl-c1">3</span>, <span class="pl-c1">6</span>)
lg<span class="pl-k">.</span><span class="pl-c1">add_edge!</span>(g, <span class="pl-c1">4</span>, <span class="pl-c1">6</span>)
lg<span class="pl-k">.</span><span class="pl-c1">add_edge!</span>(g, <span class="pl-c1">1</span>, <span class="pl-c1">3</span>)
lg<span class="pl-k">.</span><span class="pl-c1">add_edge!</span>(g, <span class="pl-c1">1</span>, <span class="pl-c1">4</span>)
lg<span class="pl-k">.</span><span class="pl-c1">add_edge!</span>(g, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>)
lg<span class="pl-k">.</span><span class="pl-c1">add_edge!</span>(g, <span class="pl-c1">2</span>, <span class="pl-c1">4</span>)
cost <span class="pl-k">=</span> <span class="pl-c1">zeros</span>(<span class="pl-c1">6</span>,<span class="pl-c1">6</span>)
cost[<span class="pl-c1">1</span>,<span class="pl-c1">3</span>] <span class="pl-k">=</span> <span class="pl-c1">10.</span>
cost[<span class="pl-c1">1</span>,<span class="pl-c1">4</span>] <span class="pl-k">=</span> <span class="pl-c1">5.</span>
cost[<span class="pl-c1">2</span>,<span class="pl-c1">3</span>] <span class="pl-k">=</span> <span class="pl-c1">2.</span>
cost[<span class="pl-c1">2</span>,<span class="pl-c1">4</span>] <span class="pl-k">=</span> <span class="pl-c1">2.</span>
<span class="pl-c"><span class="pl-c">#</span> v2 -&gt; sink have demand of one</span>
demand <span class="pl-k">=</span> <span class="pl-c1">spzeros</span>(<span class="pl-c1">6</span>,<span class="pl-c1">6</span>)
demand[<span class="pl-c1">3</span>,<span class="pl-c1">6</span>] <span class="pl-k">=</span> <span class="pl-c1">1</span>
demand[<span class="pl-c1">4</span>,<span class="pl-c1">6</span>] <span class="pl-k">=</span> <span class="pl-c1">1</span>
node_demand <span class="pl-k">=</span> <span class="pl-c1">spzeros</span>(<span class="pl-c1">6</span>)
capacity <span class="pl-k">=</span> <span class="pl-c1">ones</span>(<span class="pl-c1">6</span>,<span class="pl-c1">6</span>)

flow <span class="pl-k">=</span> <span class="pl-c1">mincost_flow</span>(g, node_demand, capacity, cost, <span class="pl-c1">with_optimizer</span>(Clp<span class="pl-k">.</span>Optimizer), edge_demand<span class="pl-k">=</span>demand, source_nodes<span class="pl-k">=</span>[<span class="pl-c1">5</span>], sink_nodes<span class="pl-k">=</span>[<span class="pl-c1">6</span>])</pre></div>
</article></div>