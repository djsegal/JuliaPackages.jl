<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><table>
<thead>
<tr>
<th align="center">Testing</th>
<th align="center">Coverage</th>
<th align="center">Documentation</th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><a href="https://travis-ci.org/sisl/NeuralVerification.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/44a110cc7aede52fcea81ea103bbde7db947d9eb/68747470733a2f2f7472617669732d63692e6f72672f7369736c2f4e657572616c566572696669636174696f6e2e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/sisl/NeuralVerification.jl.svg?branch=master" style="max-width:100%;"></a></td>
<td align="center"><a href="https://coveralls.io/github/sisl/NeuralVerification.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/a53d938c35534d3a0b0878be06c317debb68e22b/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f7369736c2f4e657572616c566572696669636174696f6e2e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/sisl/NeuralVerification.jl/badge.svg?branch=master" style="max-width:100%;"></a></td>
<td align="center"><a href="https://sisl.github.io/NeuralVerification.jl/latest" rel="nofollow"><img src="https://camo.githubusercontent.com/57bae07ecd50a99519ad0516d91f4ec8f0f48e12/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6c61746573742d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-latest-blue.svg" style="max-width:100%;"></a></td>
</tr>
</tbody>
</table>
<h1><a id="user-content-neuralverificationjl" class="anchor" aria-hidden="true" href="#neuralverificationjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>NeuralVerification.jl</h1>
<p>This library contains implementations of various methods to soundly verify deep neural networks.
In general, we verify whether a neural network satisfies certain input-output constraints.
The verification methods are divided into five categories:</p>
<ul>
<li>
<p><em>Reachability methods:</em>
<a href="https://arxiv.org/abs/1712.08163" rel="nofollow">ExactReach</a>,
<a href="https://arxiv.org/abs/1708.03322" rel="nofollow">MaxSens</a>,
<a href="https://ieeexplore.ieee.org/document/8418593" rel="nofollow">Ai2</a>,</p>
</li>
<li>
<p><em>Primal optimization methods:</em>
<a href="https://arxiv.org/abs/1706.07351" rel="nofollow">NSVerify</a>,
<a href="https://arxiv.org/abs/1711.07356" rel="nofollow">MIPVerify</a>,
<a href="https://arxiv.org/abs/1605.07262" rel="nofollow">ILP</a></p>
</li>
<li>
<p><em>Dual optimization methods:</em>
<a href="https://arxiv.org/abs/1803.06567" rel="nofollow">Duality</a>,
<a href="https://arxiv.org/abs/1711.00851" rel="nofollow">ConvDual</a>,
<a href="https://arxiv.org/abs/1801.09344" rel="nofollow">Certify</a></p>
</li>
<li>
<p><em>Search and reachability methods:</em>
<a href="https://arxiv.org/abs/1804.10829" rel="nofollow">ReluVal</a>,
<a href="https://arxiv.org/abs/1610.06940" rel="nofollow">DLV</a>,
<a href="https://arxiv.org/abs/1804.09699" rel="nofollow">FastLin</a>,
<a href="https://arxiv.org/abs/1804.09699" rel="nofollow">FastLip</a></p>
</li>
<li>
<p><em>Search and optimization methods:</em>
<a href="https://arxiv.org/abs/1709.09130" rel="nofollow">Sherlock</a>,
<a href="https://arxiv.org/abs/1711.00455" rel="nofollow">BaB</a>,
<a href="https://arxiv.org/abs/1705.01320" rel="nofollow">Planet</a>,
<a href="https://arxiv.org/abs/1702.01135" rel="nofollow">Reluplex</a></p>
</li>
</ul>
<p>Reference: C. Liu, T. Arnon, C. Lazarus, C. Barrett, and M. Kochenderfer, "Algorithms for Verifying Neural Networks," <a href="https://arxiv.org/abs/1903.06758" rel="nofollow">arXiv:1903.06758</a>.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Installation</h2>
<p>To download this library, clone it from the julia package manager like so:</p>
<div class="highlight highlight-source-julia"><pre>(v1<span class="pl-c1">.0</span>) pkg<span class="pl-k">&gt;</span> add https<span class="pl-k">:</span><span class="pl-k">//</span>github<span class="pl-k">.</span>com<span class="pl-k">/</span>sisl<span class="pl-k">/</span>NeuralVerification<span class="pl-k">.</span>jl</pre></div>
<p>Please note that the implementations of the algorithms are pedagogical in nature, and so may not perform optimally.
Derivation and discussion of these algorithms is presented in the survey paper linked above.</p>
<p><em>Note:</em> At present, <code>Ai2</code>, <code>ExactReach</code>, and <code>Duality</code> do not work in higher dimensions (e.g. image classification).
This is being addressed in <a href="https://github.com/sisl/NeuralVerification.jl/issues/9">#9</a></p>
<p>The implementations run in Julia 1.0.</p>
<h2><a id="user-content-example-usage" class="anchor" aria-hidden="true" href="#example-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Example Usage</h2>
<h3><a id="user-content-choose-a-solver" class="anchor" aria-hidden="true" href="#choose-a-solver"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Choose a solver</h3>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> NeuralVerification

solver <span class="pl-k">=</span> <span class="pl-c1">BaB</span>()</pre></div>
<h3><a id="user-content-set-up-the-problem" class="anchor" aria-hidden="true" href="#set-up-the-problem"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Set up the problem</h3>
<div class="highlight highlight-source-julia"><pre>nnet <span class="pl-k">=</span> <span class="pl-c1">read_nnet</span>(<span class="pl-s"><span class="pl-pds">"</span>examples/networks/small_nnet.nnet<span class="pl-pds">"</span></span>)
input_set  <span class="pl-k">=</span> <span class="pl-c1">Hyperrectangle</span>(low <span class="pl-k">=</span> [<span class="pl-k">-</span><span class="pl-c1">1.0</span>], high <span class="pl-k">=</span> [<span class="pl-c1">1.0</span>])
output_set <span class="pl-k">=</span> <span class="pl-c1">Hyperrectangle</span>(low <span class="pl-k">=</span> [<span class="pl-k">-</span><span class="pl-c1">1.0</span>], high <span class="pl-k">=</span> [<span class="pl-c1">70.0</span>])
problem <span class="pl-k">=</span> <span class="pl-c1">Problem</span>(nnet, input_set, output_set)</pre></div>
<h3><a id="user-content-solve" class="anchor" aria-hidden="true" href="#solve"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Solve</h3>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> result <span class="pl-k">=</span> <span class="pl-c1">solve</span>(solver, problem)
<span class="pl-c1">CounterExampleResult</span>(<span class="pl-c1">:violated</span>, [<span class="pl-c1">1.0</span>])

julia<span class="pl-k">&gt;</span> result<span class="pl-k">.</span>status
<span class="pl-c1">:violated</span></pre></div>
<p>For a full list of <code>Solvers</code> and their properties, requirements, and <code>Result</code> types, please refer to the documentation.</p>
</article></div>