<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><table>
<thead>
<tr>
<th align="center">Testing</th>
<th align="center">Coverage</th>
<th align="center">Documentation</th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><a href="https://travis-ci.org/sisl/NeuralVerification.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/283332c5e8ef79127a6373649b5b19b2017b6074e6d19d9802e21bd070e17ed3/68747470733a2f2f7472617669732d63692e6f72672f7369736c2f4e657572616c566572696669636174696f6e2e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/sisl/NeuralVerification.jl.svg?branch=master" style="max-width:100%;"></a></td>
<td align="center"><a href="https://coveralls.io/github/sisl/NeuralVerification.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/7dc88297dfd0a80ba6e2cda9bbcd838cbb49b137731b52a10fe55f0a1b3dbec8/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f7369736c2f4e657572616c566572696669636174696f6e2e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/sisl/NeuralVerification.jl/badge.svg?branch=master" style="max-width:100%;"></a></td>
<td align="center"><a href="https://sisl.github.io/NeuralVerification.jl/latest" rel="nofollow"><img src="https://camo.githubusercontent.com/56f8252ba8e9d3f0b810769543f77823d2fe031ce560d4c2d69fb1fcad800383/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6c61746573742d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-latest-blue.svg" style="max-width:100%;"></a></td>
</tr>
</tbody>
</table>
<h1><a id="user-content-neuralverificationjl" class="anchor" aria-hidden="true" href="#neuralverificationjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>NeuralVerification.jl</h1>
<p>This library contains implementations of various methods to soundly verify deep neural networks.
In general, we verify whether a neural network satisfies certain input-output constraints.
The verification methods are divided into five categories:</p>
<ul>
<li>
<p><em>Reachability methods:</em>
<a href="https://arxiv.org/abs/1712.08163" rel="nofollow">ExactReach</a>,
<a href="https://arxiv.org/abs/1708.03322" rel="nofollow">MaxSens</a>,
<a href="https://ieeexplore.ieee.org/document/8418593" rel="nofollow">Ai2</a>,</p>
</li>
<li>
<p><em>Primal optimization methods:</em>
<a href="https://arxiv.org/abs/1706.07351" rel="nofollow">NSVerify</a>,
<a href="https://arxiv.org/abs/1711.07356" rel="nofollow">MIPVerify</a>,
<a href="https://arxiv.org/abs/1605.07262" rel="nofollow">ILP</a></p>
</li>
<li>
<p><em>Dual optimization methods:</em>
<a href="https://arxiv.org/abs/1803.06567" rel="nofollow">Duality</a>,
<a href="https://arxiv.org/abs/1711.00851" rel="nofollow">ConvDual</a>,
<a href="https://arxiv.org/abs/1801.09344" rel="nofollow">Certify</a></p>
</li>
<li>
<p><em>Search and reachability methods:</em>
<a href="https://arxiv.org/abs/1804.10829" rel="nofollow">ReluVal</a>,
<a href="https://arxiv.org/abs/1809.08098" rel="nofollow">Neurify</a>,
<a href="https://arxiv.org/abs/1610.06940" rel="nofollow">DLV</a>,
<a href="https://arxiv.org/abs/1804.09699" rel="nofollow">FastLin</a>,
<a href="https://arxiv.org/abs/1804.09699" rel="nofollow">FastLip</a></p>
</li>
<li>
<p><em>Search and optimization methods:</em>
<a href="https://arxiv.org/abs/1709.09130" rel="nofollow">Sherlock</a>,
<a href="https://arxiv.org/abs/1711.00455" rel="nofollow">BaB</a>,
<a href="https://arxiv.org/abs/1705.01320" rel="nofollow">Planet</a>,
<a href="https://arxiv.org/abs/1702.01135" rel="nofollow">Reluplex</a></p>
</li>
</ul>
<p>Reference: C. Liu, T. Arnon, C. Lazarus, C. Strong, C. Barrett, and M. Kochenderfer, "Algorithms for Verifying Deep Neural Networks," to appear in Foundations and Trend in Optimization. <a href="https://arxiv.org/abs/1903.06758" rel="nofollow">arXiv:1903.06758</a>.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>To download this library, clone it from the julia package manager like so:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="(v1.0) pkg&gt; add https://github.com/sisl/NeuralVerification.jl
"><pre>(v1.<span class="pl-c1">0</span>) pkg<span class="pl-k">&gt;</span> add https<span class="pl-k">:</span><span class="pl-k">//</span>github<span class="pl-k">.</span>com<span class="pl-k">/</span>sisl<span class="pl-k">/</span>NeuralVerification<span class="pl-k">.</span>jl</pre></div>
<p>Please note that the implementations of the algorithms are pedagogical in nature, and so may not perform optimally.
Derivation and discussion of these algorithms is presented in the survey paper linked above.</p>
<p><em>Note:</em> At present, <code>Ai2</code>, <code>ExactReach</code>, and <code>Duality</code> do not work in higher dimensions (e.g. image classification).
This is being addressed in <a href="https://github.com/sisl/NeuralVerification.jl/issues/9">#9</a></p>
<p>The implementations run in Julia 1.0.</p>
<h2><a id="user-content-example-usage" class="anchor" aria-hidden="true" href="#example-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example Usage</h2>
<h3><a id="user-content-choose-a-solver" class="anchor" aria-hidden="true" href="#choose-a-solver"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Choose a solver</h3>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using NeuralVerification

solver = BaB()
"><pre><span class="pl-k">using</span> NeuralVerification

solver <span class="pl-k">=</span> <span class="pl-c1">BaB</span>()</pre></div>
<h3><a id="user-content-set-up-the-problem" class="anchor" aria-hidden="true" href="#set-up-the-problem"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Set up the problem</h3>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="nnet = read_nnet(&quot;examples/networks/small_nnet.nnet&quot;)
input_set  = Hyperrectangle(low = [-1.0], high = [1.0])
output_set = Hyperrectangle(low = [-1.0], high = [70.0])
problem = Problem(nnet, input_set, output_set)
"><pre>nnet <span class="pl-k">=</span> <span class="pl-c1">read_nnet</span>(<span class="pl-s"><span class="pl-pds">"</span>examples/networks/small_nnet.nnet<span class="pl-pds">"</span></span>)
input_set  <span class="pl-k">=</span> <span class="pl-c1">Hyperrectangle</span>(low <span class="pl-k">=</span> [<span class="pl-k">-</span><span class="pl-c1">1.0</span>], high <span class="pl-k">=</span> [<span class="pl-c1">1.0</span>])
output_set <span class="pl-k">=</span> <span class="pl-c1">Hyperrectangle</span>(low <span class="pl-k">=</span> [<span class="pl-k">-</span><span class="pl-c1">1.0</span>], high <span class="pl-k">=</span> [<span class="pl-c1">70.0</span>])
problem <span class="pl-k">=</span> <span class="pl-c1">Problem</span>(nnet, input_set, output_set)</pre></div>
<h3><a id="user-content-solve" class="anchor" aria-hidden="true" href="#solve"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Solve</h3>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; result = solve(solver, problem)
CounterExampleResult(:violated, [1.0])

julia&gt; result.status
:violated
"><pre>julia<span class="pl-k">&gt;</span> result <span class="pl-k">=</span> <span class="pl-c1">solve</span>(solver, problem)
<span class="pl-c1">CounterExampleResult</span>(<span class="pl-c1">:violated</span>, [<span class="pl-c1">1.0</span>])

julia<span class="pl-k">&gt;</span> result<span class="pl-k">.</span>status
<span class="pl-c1">:violated</span></pre></div>
<p>For a full list of <code>Solvers</code> and their properties, requirements, and <code>Result</code> types, please refer to the documentation.</p>
<h2><a id="user-content-example-use-cases" class="anchor" aria-hidden="true" href="#example-use-cases"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example Use Cases</h2>
<h3><a id="user-content-cars-workshop" class="anchor" aria-hidden="true" href="#cars-workshop"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>CARS Workshop</h3>
<p>Head to <a href="https://github.com/sisl/NeuralVerification-CARS-Workshop">https://github.com/sisl/NeuralVerification-CARS-Workshop</a> for the material used at the NeuralVerification workshop held at the Stanford Center for Automotive research. Where NeuralVerification.jl was used to verify image classification networks and air collision avoidance systems among some other examples.</p>
</article></div>