<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-omopcdmdatabaseconnector" class="anchor" aria-hidden="true" href="#omopcdmdatabaseconnector"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>OMOPCDMDatabaseConnector</h1>
<p dir="auto"><a href="https://github.com/invenia/BlueStyle"><img src="https://camo.githubusercontent.com/c18fbaa52d94d16b90b19701fc90d289b8a5bb920c74c79bab200b14e75420a4/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c75652d3434393564312e737667" alt="Code Style: Blue" data-canonical-src="https://img.shields.io/badge/code%20style-blue-4495d1.svg" style="max-width: 100%;"></a>
<a href="https://julialang.zulipchat.com/#narrow/stream/237221-biology-health-and-medicine" rel="nofollow"><img src="https://camo.githubusercontent.com/11e6556bfe778e7cf7331cac9c44bd0616062722036cc0d9bb0b7909aaae8779/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f7a756c69702d6a6f696e5f636861742d627269676874677265656e2e737667" alt="Zulip" data-canonical-src="https://img.shields.io/badge/zulip-join_chat-brightgreen.svg" style="max-width: 100%;"></a></p>
<p dir="auto">Utility package to connect to databases in the OMOP CDM database</p>
<blockquote>
<p dir="auto"><strong>NOTE: WORK IN PROGRESS. API HAS NOT BEEN STABILIZED YET. EXPECT BREAKS UNTIL VERSION 1.0.0</strong></p>
</blockquote>
<h1 dir="auto"><a id="user-content-description" class="anchor" aria-hidden="true" href="#description"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Description</h1>
<p dir="auto">This is a <strong>work in progress package</strong> that provides utilities to connect to an OMOP CDM database.
This package works on version 5.4 of the OMOP CDM.
While documentation has not yet been set up, all functions are documented.</p>
<p dir="auto">For questions, feel free to <a href="https://github.com/JuliaHealth/OMOPCDMDatabaseConnector.jl/discussions">start a discussion</a>, create an <a href="https://github.com/JuliaHealth/OMOPCDMDatabaseConnector.jl/issues">issue</a>, or post on <a href="https://github.com/JuliaHealth/OMOPCDMDatabaseConnector.jl/discussions">Zulip</a>.</p>
<h1 dir="auto"><a id="user-content-example-usage" class="anchor" aria-hidden="true" href="#example-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example Usage</h1>
<p dir="auto">This assumes you have access to an OMOP CDM database set-up with PostgreSQL.</p>
<ol dir="auto">
<li>Add needed packages to a Julia environment as follows:</li>
</ol>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="] add https://github.com/JuliaHealth/OMOPCDMCohortCreator.jl
] add https://github.com/JuliaHealth/OMOPCDMDatabaseConnector.jl 
] add DBInterface, LibPQ"><pre class="notranslate"><code>] add https://github.com/JuliaHealth/OMOPCDMCohortCreator.jl
] add https://github.com/JuliaHealth/OMOPCDMDatabaseConnector.jl 
] add DBInterface, LibPQ
</code></pre></div>
<ol start="2" dir="auto">
<li>Use the packages:</li>
</ol>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using DBInterface
using LibPQ
using OMOPCDMDatabaseConnector 
using OMOPCDMDatabaseConnector"><pre><span class="pl-k">using</span> DBInterface
<span class="pl-k">using</span> LibPQ
<span class="pl-k">using</span> OMOPCDMDatabaseConnector 
<span class="pl-k">using</span> OMOPCDMDatabaseConnector</pre></div>
<ol start="3" dir="auto">
<li>Create a database connection:</li>
</ol>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="conn = DBInterface.connect(LibPQ.Connection, &quot;host=[your host] port=[your port] user=[your user] password=[your password]&quot;)"><pre>conn <span class="pl-k">=</span> DBInterface<span class="pl-k">.</span><span class="pl-c1">connect</span>(LibPQ<span class="pl-k">.</span>Connection, <span class="pl-s"><span class="pl-pds">"</span>host=[your host] port=[your port] user=[your user] password=[your password]<span class="pl-pds">"</span></span>)</pre></div>
<ol start="4" dir="auto">
<li>Generate database details:</li>
</ol>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="GenerateDatabaseDetails(
    :postgresql,
    &quot;synpuf5&quot;
)"><pre><span class="pl-c1">GenerateDatabaseDetails</span>(
    <span class="pl-c1">:postgresql</span>,
    <span class="pl-s"><span class="pl-pds">"</span>synpuf5<span class="pl-pds">"</span></span>
)</pre></div>
<ol start="5" dir="auto">
<li>Generate Julia representation of database tables:</li>
</ol>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="tables = GenerateTables(conn)"><pre>tables <span class="pl-k">=</span> <span class="pl-c1">GenerateTables</span>(conn)</pre></div>
<ol start="6" dir="auto">
<li>As an example, now run the following to get all <code>person_id</code>'s from the database:</li>
</ol>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="GetDatabasePersonIDs(conn)"><pre><span class="pl-c1">GetDatabasePersonIDs</span>(conn)</pre></div>
<p dir="auto">If everything worked and you got a DataFrame of <code>person_id</code>'s at the end of these steps, you are set to continue working with and interfacing with the database to build your own network study.</p>
</article></div>