<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-kernsmooth" class="anchor" aria-hidden="true" href="#kernsmooth"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>KernSmooth</h1>
<p dir="auto"><a href="https://travis-ci.org/lendle/KernSmooth.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/166bae836c6a035b97a30077da71e1647d094ce13e853564bd31ce10d12a3744/68747470733a2f2f7472617669732d63692e6f72672f6c656e646c652f4b65726e536d6f6f74682e6a6c2e706e67" alt="Build Status" data-canonical-src="https://travis-ci.org/lendle/KernSmooth.jl.png" style="max-width: 100%;"></a></p>
<p dir="auto"><a href="https://github.com/IainNZ/PackageEvaluator.jl"><img src="https://camo.githubusercontent.com/de7cb02c690a658fdbcb22f019d9326b01a1756965bff4b9e0a3cc703e073a76/687474703a2f2f6961696e6e7a2e6769746875622e696f2f7061636b616765732e6a756c69616c616e672e6f72672f6261646765732f4b65726e536d6f6f74685f302e332e737667" alt="PackageEvaluator" data-canonical-src="http://iainnz.github.io/packages.julialang.org/badges/KernSmooth_0.3.svg" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-about" class="anchor" aria-hidden="true" href="#about"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>About</h2>
<p dir="auto">KernSmooth.jl is the a partial port of the R package <a href="http://cran.r-project.org/web/packages/KernSmooth/index.html" rel="nofollow">KernSmooth</a>, (v2.23-10.)
The R package carries an unlimited license.</p>
<p dir="auto">Currently the <code>locpoly</code> and <code>dpill</code> functions are ported.
<code>locpoly</code> uses local polynomials to estimate pdf of a single variable or a regression function for two variables, or their derivatives.
<code>dpill</code> provides a method to select a bandwidth for local linear regression.</p>
<p dir="auto">Other functionality provided by the R package but not ported to KernSmooth.jl pertains to univariate and bivariate kernel density estimation.
Univariate and bivariate kernel density estimation is provided by the <code>kde</code> function in <a href="https://github.com/JuliaStats/StatsBase.jl/">StatsBase.jl</a>.</p>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<h3 dir="auto"><a id="user-content-locpoly---estimate-regression-or-density-functions-or-their-derivatives-using-local-polynomials" class="anchor" aria-hidden="true" href="#locpoly---estimate-regression-or-density-functions-or-their-derivatives-using-local-polynomials"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>locpoly</code> - Estimate regression or density functions or their derivatives using local polynomials</h3>
<p dir="auto">The method signatures:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="locpoly(x::Vector{Float64}, y::Vector{Float64}, bandwidth::Union(Float64, Vector{Float64});
    drv::Int = 0,
    degree::Int=drv+1,
    kernel::Symbol = :normal,
    gridsize::Int = 401,
    bwdisc::Int = 25,
    range_x::Vector{Float64}=Float64[],
    binned::Bool = false,
    truncate::Bool = true)

locpoly(x::Vector{Float64}, bandwidth::Union(Float64, Vector{Float64}); args...)"><pre><span class="pl-c1">locpoly</span>(x<span class="pl-k">::</span><span class="pl-c1">Vector{Float64}</span>, y<span class="pl-k">::</span><span class="pl-c1">Vector{Float64}</span>, bandwidth<span class="pl-k">::</span><span class="pl-c1">Union(Float64, Vector{Float64})</span>;
    drv<span class="pl-k">::</span><span class="pl-c1">Int</span> <span class="pl-k">=</span> <span class="pl-c1">0</span>,
    degree<span class="pl-k">::</span><span class="pl-c1">Int</span><span class="pl-k">=</span>drv<span class="pl-k">+</span><span class="pl-c1">1</span>,
    kernel<span class="pl-k">::</span><span class="pl-c1">Symbol</span> <span class="pl-k">=</span> <span class="pl-c1">:normal</span>,
    gridsize<span class="pl-k">::</span><span class="pl-c1">Int</span> <span class="pl-k">=</span> <span class="pl-c1">401</span>,
    bwdisc<span class="pl-k">::</span><span class="pl-c1">Int</span> <span class="pl-k">=</span> <span class="pl-c1">25</span>,
    range_x<span class="pl-k">::</span><span class="pl-c1">Vector{Float64}</span><span class="pl-k">=</span>Float64[],
    binned<span class="pl-k">::</span><span class="pl-c1">Bool</span> <span class="pl-k">=</span> <span class="pl-c1">false</span>,
    truncate<span class="pl-k">::</span><span class="pl-c1">Bool</span> <span class="pl-k">=</span> <span class="pl-c1">true</span>)

<span class="pl-c1">locpoly</span>(x<span class="pl-k">::</span><span class="pl-c1">Vector{Float64}</span>, bandwidth<span class="pl-k">::</span><span class="pl-c1">Union(Float64, Vector{Float64})</span>; args<span class="pl-k">...</span>)</pre></div>
<ul dir="auto">
<li><code>x</code> - vector of x data</li>
<li><code>y</code> - vector of y data. For density estimation (of <code>x</code>), <code>y</code> should be omitted or be an empty <code>Vector{T}</code></li>
<li><code>bandwidth</code> - should be a scalar or vector of length <code>gridsize</code></li>
<li>Other arguments are optional. For their descriptions, see the <a href="https://stat.ethz.ch/R-manual/R-devel/library/KernSmooth/html/locpoly.html" rel="nofollow">R documentation</a></li>
</ul>
<p dir="auto">A <code>(Vector{Float64}, Vector{Float64})</code> is returned.  The first vector is the sorted set of points at which an estimate was computed. The estimates are in the second vector.</p>
<h3 dir="auto"><a id="user-content-dpill---direct-plug-in-method-to-select-a-bandwidth-for-local-linear-gaussian-kernel-regression" class="anchor" aria-hidden="true" href="#dpill---direct-plug-in-method-to-select-a-bandwidth-for-local-linear-gaussian-kernel-regression"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>dpill</code> - Direct plug-in method to select a bandwidth for local linear Gaussian kernel regression</h3>
<p dir="auto">The method signature</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="function dpill(x::Vector{Float64}, y::Vector{Float64};
               blockmax::Int = 5,
               divisor::Int = 20,
               trim::Float64 = 0.01,
               proptrun::Float64 = 0.05,
               gridsize::Int = 401,
               range_x::Vector{Float64} = Float64[],
               truncate = true)"><pre><span class="pl-k">function</span> <span class="pl-en">dpill</span>(x<span class="pl-k">::</span><span class="pl-c1">Vector{Float64}</span>, y<span class="pl-k">::</span><span class="pl-c1">Vector{Float64}</span>;
               blockmax<span class="pl-k">::</span><span class="pl-c1">Int</span> <span class="pl-k">=</span> <span class="pl-c1">5</span>,
               divisor<span class="pl-k">::</span><span class="pl-c1">Int</span> <span class="pl-k">=</span> <span class="pl-c1">20</span>,
               trim<span class="pl-k">::</span><span class="pl-c1">Float64</span> <span class="pl-k">=</span> <span class="pl-c1">0.01</span>,
               proptrun<span class="pl-k">::</span><span class="pl-c1">Float64</span> <span class="pl-k">=</span> <span class="pl-c1">0.05</span>,
               gridsize<span class="pl-k">::</span><span class="pl-c1">Int</span> <span class="pl-k">=</span> <span class="pl-c1">401</span>,
               range_x<span class="pl-k">::</span><span class="pl-c1">Vector{Float64}</span> <span class="pl-k">=</span> Float64[],
               truncate <span class="pl-k">=</span> <span class="pl-c1">true</span>)</pre></div>
<ul dir="auto">
<li><code>x</code> - vector of x data</li>
<li><code>y</code> - vector of y data.</li>
<li>Other arguments are optional. For their descriptions, see the <a href="https://stat.ethz.ch/R-manual/R-devel/library/KernSmooth/html/dpill.html" rel="nofollow">R documentation</a></li>
</ul>
<h2 dir="auto"><a id="user-content-regression-example" class="anchor" aria-hidden="true" href="#regression-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Regression example</h2>
<p dir="auto">Estimate regression using different bandwidths, including the bandwidth selected by <code>dpill</code>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="xgrid2, yhat0_5 = locpoly(x, y, 0.5)
yhat1_0 = locpoly(x, y, 1.0)[2]
yhat2_0 = locpoly(x, y, 2.0)[2]
h = dpill(x, y)
yhath = locpoly(x, y, h)[2]"><pre>xgrid2, yhat0_5 <span class="pl-k">=</span> <span class="pl-c1">locpoly</span>(x, y, <span class="pl-c1">0.5</span>)
yhat1_0 <span class="pl-k">=</span> <span class="pl-c1">locpoly</span>(x, y, <span class="pl-c1">1.0</span>)[<span class="pl-c1">2</span>]
yhat2_0 <span class="pl-k">=</span> <span class="pl-c1">locpoly</span>(x, y, <span class="pl-c1">2.0</span>)[<span class="pl-c1">2</span>]
h <span class="pl-k">=</span> <span class="pl-c1">dpill</span>(x, y)
yhath <span class="pl-k">=</span> <span class="pl-c1">locpoly</span>(x, y, h)[<span class="pl-c1">2</span>]</pre></div>

<p dir="auto">A plot of the estimates and true regression:</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="examples/scatter.png"><img src="examples/scatter.png" alt="&quot;Scatter plot&quot;" style="max-width: 100%;"></a></p>
<p dir="auto">The full code for the example is <a href="http://nbviewer.ipython.org/gist/lendle/9314892" rel="nofollow">here</a>.</p>
</article></div>