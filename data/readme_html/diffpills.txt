<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p align="center" dir="auto">
  <a target="_blank" rel="noopener noreferrer" href="https://github.com/kevin-tracy/DiffPills.jl/blob/master/extras/images/diff_pills_logo.png"><img width="400" src="https://github.com/kevin-tracy/DiffPills.jl/raw/master/extras/images/diff_pills_logo.png" style="max-width: 100%;"></a>
</p>
<p dir="auto">DiffPills.jl is a tool for computing proximity between two pill-shaped objects, and providing analytical smooth gradients of this operation.</p>
<h2 dir="auto"><a id="user-content-basic-usage" class="anchor" aria-hidden="true" href="#basic-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>basic usage</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using StaticArrays
import DiffPills as dp

# create the pill objects (with :MRP or :quat for attitude)
pill_1 = dp.create_capsule(:MRP)
pill_2 = dp.create_capsule(:MRP)

# put position, attitude (MRP), radius, and length in
pill_1.r = @SVector randn(3);   pill_2.r = @SVector randn(3)
pill_1.p = @SVector randn(3);   pill_2.p = @SVector randn(3)
pill_1.R = 0.75;                pill_1.R = 1.5
pill_1.L = 3.0;                 pill_1.L = 2.0

# calculate proximity
ℓ = dp.proximity(pill_1, pill_2)

# calculate proximity gradients
∂ℓ_∂r1, ∂ℓ_∂p1, ∂ℓ_∂r2, ∂ℓ_∂p2 = dp.proximity_jacobians(pill_1, pill_2)"><pre><span class="pl-k">using</span> StaticArrays
<span class="pl-k">import</span> DiffPills <span class="pl-k">as</span> dp

<span class="pl-c"><span class="pl-c">#</span> create the pill objects (with :MRP or :quat for attitude)</span>
pill_1 <span class="pl-k">=</span> dp<span class="pl-k">.</span><span class="pl-c1">create_capsule</span>(<span class="pl-c1">:MRP</span>)
pill_2 <span class="pl-k">=</span> dp<span class="pl-k">.</span><span class="pl-c1">create_capsule</span>(<span class="pl-c1">:MRP</span>)

<span class="pl-c"><span class="pl-c">#</span> put position, attitude (MRP), radius, and length in</span>
pill_1<span class="pl-k">.</span>r <span class="pl-k">=</span> <span class="pl-c1">@SVector</span> <span class="pl-c1">randn</span>(<span class="pl-c1">3</span>);   pill_2<span class="pl-k">.</span>r <span class="pl-k">=</span> <span class="pl-c1">@SVector</span> <span class="pl-c1">randn</span>(<span class="pl-c1">3</span>)
pill_1<span class="pl-k">.</span>p <span class="pl-k">=</span> <span class="pl-c1">@SVector</span> <span class="pl-c1">randn</span>(<span class="pl-c1">3</span>);   pill_2<span class="pl-k">.</span>p <span class="pl-k">=</span> <span class="pl-c1">@SVector</span> <span class="pl-c1">randn</span>(<span class="pl-c1">3</span>)
pill_1<span class="pl-k">.</span>R <span class="pl-k">=</span> <span class="pl-c1">0.75</span>;                pill_1<span class="pl-k">.</span>R <span class="pl-k">=</span> <span class="pl-c1">1.5</span>
pill_1<span class="pl-k">.</span>L <span class="pl-k">=</span> <span class="pl-c1">3.0</span>;                 pill_1<span class="pl-k">.</span>L <span class="pl-k">=</span> <span class="pl-c1">2.0</span>

<span class="pl-c"><span class="pl-c">#</span> calculate proximity</span>
ℓ <span class="pl-k">=</span> dp<span class="pl-k">.</span><span class="pl-c1">proximity</span>(pill_1, pill_2)

<span class="pl-c"><span class="pl-c">#</span> calculate proximity gradients</span>
∂ℓ_∂r1, ∂ℓ_∂p1, ∂ℓ_∂r2, ∂ℓ_∂p2 <span class="pl-k">=</span> dp<span class="pl-k">.</span><span class="pl-c1">proximity_jacobians</span>(pill_1, pill_2)</pre></div>
</article></div>