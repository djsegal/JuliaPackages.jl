<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-compatdevtoolsjl" class="anchor" aria-hidden="true" href="#compatdevtoolsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>CompatDevTools.jl</h1>
<p dir="auto">Julia compat-related development tools.</p>
<h2 dir="auto"><a id="user-content-why-was-this-developed" class="anchor" aria-hidden="true" href="#why-was-this-developed"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Why was this developed?</h2>
<p dir="auto"><a href="https://github.com/JuliaRegistries/CompatHelper.jl">CompatHelper.jl</a> does a great job of letting package maintainers know which compat entries should be updated to allow using the latest versions. However, managing many packages, or a package with many environments, requires keeping many compat entries up-to-date. In addition, package managers may want to keep these compat entries, between these many environments, synchronized to some extent. CompatDevTools.jl was developed to help ease this process.</p>
<h2 dir="auto"><a id="user-content-features" class="anchor" aria-hidden="true" href="#features"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Features</h2>
<p dir="auto">The primary feature of CompatDevTools.jl is <code>synchronize_compats</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="    synchronize_compats(code_dir::AbstractString)

This function
 - Recursively finds all Project.toml files in `code_dir`
 - Collects the compat entries
 - Finds any inconsistent compat entries
 - Asks the user (via `REPL.TerminalMenus`) which
   version (if any) to update to, and modifies the
   Project.toml files accordingly."><pre>    <span class="pl-c1">synchronize_compats</span>(code_dir<span class="pl-k">::</span><span class="pl-c1">AbstractString</span>)

This <span class="pl-k">function</span>
 <span class="pl-k">-</span> Recursively finds all Project<span class="pl-k">.</span>toml files <span class="pl-k">in</span> <span class="pl-s"><span class="pl-pds">`</span>code_dir<span class="pl-pds">`</span></span>
 <span class="pl-k">-</span> Collects the compat entries
 <span class="pl-k">-</span> Finds any inconsistent compat entries
 <span class="pl-k">-</span> Asks the user (via <span class="pl-s"><span class="pl-pds">`</span>REPL.TerminalMenus<span class="pl-pds">`</span></span>) which
   version (<span class="pl-k">if</span> any) to update to, and modifies the
   Project<span class="pl-k">.</span>toml files accordingly.</pre></div>
<p dir="auto">Another simple utility function, <code>compat_kick_start</code>, was added to this package:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="    compat_kick_start(code_dir::String, julia_version = &quot;1&quot;)

Given a directory containing both a Project.toml and
Manifest.toml, print a string of a suggested compat
entry for all Project.toml dependencies."><pre>    <span class="pl-c1">compat_kick_start</span>(code_dir<span class="pl-k">::</span><span class="pl-c1">String</span>, julia_version <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>1<span class="pl-pds">"</span></span>)

Given a directory containing both a Project<span class="pl-k">.</span>toml and
Manifest<span class="pl-k">.</span>toml, print a string of a suggested compat
entry <span class="pl-k">for</span> all Project<span class="pl-k">.</span>toml dependencies.</pre></div>
<p dir="auto">This may be useful if you've started working on a new package which may have many dependencies and you need to generate your first set of compat entries. This function prints compat entries based on the existing Manifest.toml (and Project.toml) files.</p>
</article></div>