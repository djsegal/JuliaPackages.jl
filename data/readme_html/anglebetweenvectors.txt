<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-anglebetweenvectorsjl" class="anchor" aria-hidden="true" href="#anglebetweenvectorsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>AngleBetweenVectors.jl</h1>
<h4 dir="auto"><a id="user-content-when-computing-the-arc-separating-two-cartesian-vectors-this-is-robustly-stable-others-are-not" class="anchor" aria-hidden="true" href="#when-computing-the-arc-separating-two-cartesian-vectors-this-is-robustly-stable-others-are-not"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>When computing the arc separating two cartesian vectors, this is robustly stable; others are not.</h4>
<hr>
<h4 dir="auto"><a id="user-content-copyright-2018-2022-by-jeffrey-sarnoff--this-work-is-released-under-the-mit-license" class="anchor" aria-hidden="true" href="#copyright-2018-2022-by-jeffrey-sarnoff--this-work-is-released-under-the-mit-license"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Copyright © 2018-2022 by Jeffrey Sarnoff.    This work is released under The MIT License.</h4>
<p dir="auto"><a href="https://travis-ci.org/JeffreySarnoff/AngleBetweenVectors.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/49f0e4aa16a4bb1b097a8aa9c900b6bd53331fcdf3f2cf423987ff6f141fdf34/68747470733a2f2f7472617669732d63692e6f72672f4a6566667265795361726e6f66662f416e676c654265747765656e566563746f72732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JeffreySarnoff/AngleBetweenVectors.jl.svg?branch=master" style="max-width: 100%;"></a>
<a href="https://coveralls.io/github/JeffreySarnoff/AngleBetweenVectors.jl?branch=main" rel="nofollow"><img src="https://camo.githubusercontent.com/9613e0054ebf5fdc94249794335cd2bde2fb3cc7121002af00b34033b39bdfad/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f4a6566667265795361726e6f66662f416e676c654265747765656e566563746f72732e6a6c2f62616467652e7376673f6272616e63683d6d61696e" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/JeffreySarnoff/AngleBetweenVectors.jl/badge.svg?branch=main" style="max-width: 100%;"></a>
<a href="https://doi.org/10.5281/zenodo.6745689" rel="nofollow"><img src="https://camo.githubusercontent.com/3bb545bb81a4429131ad91f5decbbd5bd22b68af3dc1151ace0e8c3d149dfe50/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f444f492f31302e353238312f7a656e6f646f2e363734353638392e737667" alt="DOI" data-canonical-src="https://zenodo.org/badge/DOI/10.5281/zenodo.6745689.svg" style="max-width: 100%;"></a></p>
<h5 dir="auto"><a id="user-content-preferred-citiation" class="anchor" aria-hidden="true" href="#preferred-citiation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>preferred citiation</h5>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="Sarnoff, Jeffrey (2022). AngleBetweenVectors (Version 0.3.1) [Source Code].
Open access at  https://github.com/JeffreySarnoff/AngleBetweenVectors.jl
https://doi.org/10.5281/zenodo.6745689"><pre class="notranslate"><code>Sarnoff, Jeffrey (2022). AngleBetweenVectors (Version 0.3.1) [Source Code].
Open access at  https://github.com/JeffreySarnoff/AngleBetweenVectors.jl
https://doi.org/10.5281/zenodo.6745689
</code></pre></div>
<hr>
<p dir="auto"><a href="https://github.com/JeffreySarnoff/AngleBetweenVectors.jl">AngleBetweenVectors</a> exports <code>angle</code>.
<code>angle(point1, point2)</code> determines the angle of their separation.   The smaller of the two solutions is used.  <code>π</code> obtains If the points are opposed, [(1,0), (-1,0)]; so <code>0 &lt;= angle(p1, p2) &lt;= pi</code>.</p>
<p dir="auto">This function expects two points from a 2D, 3D .. ManyD space, in Cartesian coordinates.  Tuples and Vectors are handled immediately (prefer Tuples for speed). To use another point representations, just define a <code>Tuple</code> constructor for it.  NamedTuples and SVectors have this already.</p>
<p dir="auto">Most software uses <code>acos(dot(p1, p2) / sqrt(norm(p1) norm(p2))</code> instead.  While they coincide often; it is exceedingly easy to find cases where <code>angle</code> is more accurate and then, usually they differ by a few ulps. Not always.</p>
<hr>
<h3 dir="auto"><a id="user-content-provides" class="anchor" aria-hidden="true" href="#provides"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>provides</h3>
<ul dir="auto">
<li><code>angle( point₁, point₂ )</code>
<ul dir="auto">
<li>points are given as Cartesian coordinates</li>
<li>points may be of any finite dimension &gt;= 2</li>
<li>points may be any type with a Tuple constructor defined</li>
</ul>
</li>
</ul>
<h4 dir="auto"><a id="user-content-point-representations-that-just-work" class="anchor" aria-hidden="true" href="#point-representations-that-just-work"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>point representations that just work</h4>
<ul dir="auto">
<li>points as Tuples</li>
<li>points as NamedTuples</li>
<li>points as Vectors</li>
<li>points as SVectors     (StaticArrays)</li>
</ul>
<h4 dir="auto"><a id="user-content-working-with-other-point-representations" class="anchor" aria-hidden="true" href="#working-with-other-point-representations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>working with other point representations</h4>
<p dir="auto">Just define a <code>Tuple</code> constructor for the representation.  That's all.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# working with this?
struct Point3D{T}
    x::T
    y::T
    z::T
end

#  define this:
Base.Tuple(a::Point3D{T}) where {T} = (a.x, a.y, a.z)

#  this just works:
angle(point1::Point3D{T}, point2::Point3D{T})  where {T}"><pre><span class="pl-c"><span class="pl-c">#</span> working with this?</span>
<span class="pl-k">struct</span> Point3D{T}
    x<span class="pl-k">::</span><span class="pl-c1">T</span>
    y<span class="pl-k">::</span><span class="pl-c1">T</span>
    z<span class="pl-k">::</span><span class="pl-c1">T</span>
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span>  define this:</span>
Base<span class="pl-k">.</span><span class="pl-en">Tuple</span>(a<span class="pl-k">::</span><span class="pl-c1">Point3D{T}</span>) <span class="pl-k">where</span> {T} <span class="pl-k">=</span> (a<span class="pl-k">.</span>x, a<span class="pl-k">.</span>y, a<span class="pl-k">.</span>z)

<span class="pl-c"><span class="pl-c">#</span>  this just works:</span>
<span class="pl-c1">angle</span>(point1<span class="pl-k">::</span><span class="pl-c1">Point3D{T}</span>, point2<span class="pl-k">::</span><span class="pl-c1">Point3D{T}</span>)  <span class="pl-k">where</span> {T}</pre></div>
<h3 dir="auto"><a id="user-content-why-use-it" class="anchor" aria-hidden="true" href="#why-use-it"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>why use it</h3>
<p dir="auto">This implementation is more robustly accurate than the usual method.</p>
<p dir="auto">You can work with points in 2D, 3D, .. 1000D .. ?.</p>
<hr>
<h3 dir="auto"><a id="user-content-notes" class="anchor" aria-hidden="true" href="#notes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>notes</h3>
<ul dir="auto">
<li>
<p dir="auto">The shorter of two angles is given as an unoriented magnitude (0 &lt;= radians &lt; π).</p>
</li>
<li>
<p dir="auto">Vectors are given by their Cartesian coordinates in 2D, 3D or .. N-dimensions.</p>
</li>
<li>
<p dir="auto">This follows a note by Professor Kahan <a href="https://people.eecs.berkeley.edu/%7Ewkahan/MathH110/Cross.pdf" rel="nofollow">Computing Cross-Products and Rotations</a> (pg 15):</p>
</li>
</ul>
<blockquote>
<p dir="auto">"More uniformly accurate .. valid for  Euclidean  spaces of any dimension,
it never errs by more than a modest multiple of ε."</p>
</blockquote>
</article></div>