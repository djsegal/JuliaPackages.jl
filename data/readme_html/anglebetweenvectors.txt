<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-anglebetweenvectorsjl" class="anchor" aria-hidden="true" href="#anglebetweenvectorsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>AngleBetweenVectors.jl</h1>
<h4><a id="user-content-when-computing-the-arc-separating-two-cartesian-vectors-this-is-robustly-stable-others-are-not" class="anchor" aria-hidden="true" href="#when-computing-the-arc-separating-two-cartesian-vectors-this-is-robustly-stable-others-are-not"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>When computing the arc separating two cartesian vectors, this is robustly stable; others are not.</h4>
<hr>
<h4><a id="user-content-copyright-2018-2019-by-jeffrey-sarnoff--this-work-is-released-under-the-mit-license" class="anchor" aria-hidden="true" href="#copyright-2018-2019-by-jeffrey-sarnoff--this-work-is-released-under-the-mit-license"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Copyright © 2018-2019 by Jeffrey Sarnoff.    This work is released under The MIT License.</h4>
<hr>
<p><a href="https://www.actionspanel.app/app/phunki/actionspanel" rel="nofollow"><img src="https://camo.githubusercontent.com/2c24673a1390d4ea52dc638101261315f10dcd59/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f616374696f6e7370616e656c2d656e61626c65642d627269676874677265656e" alt="Actions Panel" data-canonical-src="https://img.shields.io/badge/actionspanel-enabled-brightgreen" style="max-width:100%;"></a>-----</p>
<p><a href="https://travis-ci.org/JeffreySarnoff/AngleBetweenVectors.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/b6527427b8fdd742ce135d783e76eaa764c64f14/68747470733a2f2f7472617669732d63692e6f72672f4a6566667265795361726e6f66662f416e676c654265747765656e566563746f72732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JeffreySarnoff/AngleBetweenVectors.jl.svg?branch=master" style="max-width:100%;"></a></p>
<hr>
<p><a href="https://github.com/JeffreySarnoff/AngleBetweenVectors.jl">AngleBetweenVectors</a> exports <code>angle</code>.
<code>angle(point1, point2)</code> determines the angle of their separation.   The smaller of the two solutions is used.  <code>π</code> obtains If the points are opposed, [(1,0), (-1,0)]; so <code>0 &lt;= angle(p1, p2) &lt;= pi</code>.</p>
<p>This function expects two points from a 2D, 3D .. ManyD space, in Cartesian coordinates.  Tuples and Vectors are handled immediately (prefer Tuples for speed). To use another point representations, just define a <code>Tuple</code> constructor for it.  NamedTuples and SVectors have this already.</p>
<p>Most software uses <code>acos(dot(p1, p2) / sqrt(norm(p1) norm(p2))</code> instead.  While they coincide often; it is exceedingly easy to find cases where <code>angle</code> is more accurate and then, usually they differ by a few ulps. Not always.</p>
<hr>
<h3><a id="user-content-provides" class="anchor" aria-hidden="true" href="#provides"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>provides</h3>
<ul>
<li><code>angle( point₁, point₂ )</code>
<ul>
<li>points are given as Cartesian coordinates</li>
<li>points may be of any finite dimension &gt;= 2</li>
<li>points may be any type with a Tuple constructor defined</li>
</ul>
</li>
</ul>
<h4><a id="user-content-point-representations-that-just-work" class="anchor" aria-hidden="true" href="#point-representations-that-just-work"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>point representations that just work</h4>
<ul>
<li>points as Tuples</li>
<li>points as NamedTuples</li>
<li>points as Vectors</li>
<li>points as SVectors     (StaticArrays)</li>
</ul>
<h4><a id="user-content-working-with-other-point-representations" class="anchor" aria-hidden="true" href="#working-with-other-point-representations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>working with other point representations</h4>
<p>Just define a <code>Tuple</code> constructor for the representation.  That's all.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span> working with this?</span>
<span class="pl-k">struct</span> Point3D{T}
    x<span class="pl-k">::</span><span class="pl-c1">T</span>
    y<span class="pl-k">::</span><span class="pl-c1">T</span>
    z<span class="pl-k">::</span><span class="pl-c1">T</span>
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span>  define this:</span>
Base<span class="pl-k">.</span><span class="pl-en">Tuple</span>(a<span class="pl-k">::</span><span class="pl-c1">Point3D{T}</span>) <span class="pl-k">where</span> {T} <span class="pl-k">=</span> (a<span class="pl-k">.</span>x, a<span class="pl-k">.</span>y, a<span class="pl-k">.</span>z)

<span class="pl-c"><span class="pl-c">#</span>  this just works:</span>
<span class="pl-c1">angle</span>(point1<span class="pl-k">::</span><span class="pl-c1">Point3D{T}</span>, point2<span class="pl-k">::</span><span class="pl-c1">Point3D{T}</span>)  <span class="pl-k">where</span> {T}</pre></div>
<h3><a id="user-content-why-use-it" class="anchor" aria-hidden="true" href="#why-use-it"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>why use it</h3>
<p>This implementation is more robustly accurate than the usual method.</p>
<p>You can work with points in 2D, 3D, .. 1000D .. ?.</p>
<hr>
<h3><a id="user-content-notes" class="anchor" aria-hidden="true" href="#notes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>notes</h3>
<ul>
<li>
<p>The shorter of two angle solutions is returned as an unoriented magnitude (0 &lt;= radians &lt; π).</p>
</li>
<li>
<p>Vectors are given by their Cartesian coordinates in 2D, 3D or .. N-dimensions.</p>
</li>
<li>
<p>This follows a note by Professor Kahan in <a href="https://people.eecs.berkeley.edu/%7Ewkahan/MathH110/Cross.pdf" rel="nofollow">Computing Cross-Products and Rotations</a> (pg 15): "More uniformly accurate .. valid for  Euclidean  spaces of any dimension,   it never errs by more than a modest multiple of ε."</p>
</li>
</ul>
</article></div>