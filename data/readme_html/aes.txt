<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-aesjl" class="anchor" aria-hidden="true" href="#aesjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>AES.jl</h1>
<p dir="auto"><a href="https://travis-ci.org/kanav99/AES.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/8c70f86cdd249a97fa2bd9edaeb128f35cd9edd9006bac0d7dac3f136fce7291/68747470733a2f2f7472617669732d63692e6f72672f6b616e617639392f4145532e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/kanav99/AES.jl.svg?branch=master" style="max-width: 100%;"></a></p>
<p dir="auto">AES On-the-Fly mode in Julia</p>
<h2 dir="auto"><a id="user-content-api" class="anchor" aria-hidden="true" href="#api"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>API</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using AES

# make a new key
k = [0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c]
key = AES128Key(k)

# make a cipher object
cipher = AESCipher(;key_length=128, mode=AES.CBC, key=key)

# encrypt!
plaintext = &quot;The quick brown fox jumps over the lazy dog.&quot;
ct = encrypt(plaintext, cipher)
pt = decrypt(ct, cipher)
@assert pt === plaintext

# you can set custom initialization vector
iv = [0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f]
ct = encrypt(plaintext, cipher; iv=iv)
pt = decrypt(ct, cipher)

@assert pt == transcode(UInt8, plaintext)
# or, if it's known that the original plaintext was valid UTF-8
@assert String(pt) == plaintext"><pre><span class="pl-k">using</span> AES

<span class="pl-c"><span class="pl-c">#</span> make a new key</span>
k <span class="pl-k">=</span> [<span class="pl-c1">0x2b</span>, <span class="pl-c1">0x7e</span>, <span class="pl-c1">0x15</span>, <span class="pl-c1">0x16</span>, <span class="pl-c1">0x28</span>, <span class="pl-c1">0xae</span>, <span class="pl-c1">0xd2</span>, <span class="pl-c1">0xa6</span>, <span class="pl-c1">0xab</span>, <span class="pl-c1">0xf7</span>, <span class="pl-c1">0x15</span>, <span class="pl-c1">0x88</span>, <span class="pl-c1">0x09</span>, <span class="pl-c1">0xcf</span>, <span class="pl-c1">0x4f</span>, <span class="pl-c1">0x3c</span>]
key <span class="pl-k">=</span> <span class="pl-c1">AES128Key</span>(k)

<span class="pl-c"><span class="pl-c">#</span> make a cipher object</span>
cipher <span class="pl-k">=</span> <span class="pl-c1">AESCipher</span>(;key_length<span class="pl-k">=</span><span class="pl-c1">128</span>, mode<span class="pl-k">=</span>AES<span class="pl-k">.</span>CBC, key<span class="pl-k">=</span>key)

<span class="pl-c"><span class="pl-c">#</span> encrypt!</span>
plaintext <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>The quick brown fox jumps over the lazy dog.<span class="pl-pds">"</span></span>
ct <span class="pl-k">=</span> <span class="pl-c1">encrypt</span>(plaintext, cipher)
pt <span class="pl-k">=</span> <span class="pl-c1">decrypt</span>(ct, cipher)
<span class="pl-c1">@assert</span> pt <span class="pl-k">===</span> plaintext

<span class="pl-c"><span class="pl-c">#</span> you can set custom initialization vector</span>
iv <span class="pl-k">=</span> [<span class="pl-c1">0x00</span>, <span class="pl-c1">0x01</span>, <span class="pl-c1">0x02</span>, <span class="pl-c1">0x03</span>, <span class="pl-c1">0x04</span>, <span class="pl-c1">0x05</span>, <span class="pl-c1">0x06</span>, <span class="pl-c1">0x07</span>, <span class="pl-c1">0x08</span>, <span class="pl-c1">0x09</span>, <span class="pl-c1">0x0a</span>, <span class="pl-c1">0x0b</span>, <span class="pl-c1">0x0c</span>, <span class="pl-c1">0x0d</span>, <span class="pl-c1">0x0e</span>, <span class="pl-c1">0x0f</span>]
ct <span class="pl-k">=</span> <span class="pl-c1">encrypt</span>(plaintext, cipher; iv<span class="pl-k">=</span>iv)
pt <span class="pl-k">=</span> <span class="pl-c1">decrypt</span>(ct, cipher)

<span class="pl-c1">@assert</span> pt <span class="pl-k">==</span> <span class="pl-c1">transcode</span>(UInt8, plaintext)
<span class="pl-c"><span class="pl-c">#</span> or, if it's known that the original plaintext was valid UTF-8</span>
<span class="pl-c1">@assert</span> <span class="pl-c1">String</span>(pt) <span class="pl-k">==</span> plaintext</pre></div>
</article></div>