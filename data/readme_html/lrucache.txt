<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-lrucachejl" class="anchor" aria-hidden="true" href="#lrucachejl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>LRUCache.jl</h1>
<p><a href="https://travis-ci.org/JuliaCollections/LRUCache.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/7d8c1dff6ee0db76263ee3458220ec318995c725/68747470733a2f2f7472617669732d63692e6f72672f4a756c6961436f6c6c656374696f6e732f4c525543616368652e6a6c2e737667" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaCollections/LRUCache.jl.svg" style="max-width:100%;"></a>
<a href="LICENSE.md"><img src="https://camo.githubusercontent.com/4440d5deb3a53c4f8661ee765378e6071e7878e8/687474703a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d627269676874677265656e2e7376673f7374796c653d666c6174" alt="License" data-canonical-src="http://img.shields.io/badge/license-MIT-brightgreen.svg?style=flat" style="max-width:100%;"></a>
<a href="http://codecov.io/github/JuliaCollections/LRUCache.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/28c43162a58607e629581a15053af4ae6fc0a070/687474703a2f2f636f6465636f762e696f2f6769746875622f4a756c6961436f6c6c656374696f6e732f4c525543616368652e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/JuliaCollections/LRUCache.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
<p>Provides a thread-safe implementation of a Least Recently Used (LRU) Cache for Julia.</p>
<p>An LRU Cache is a useful associative data structure (<code>AbstractDict</code> in Julia) that has a
set maximum size (as measured by number of elements or a custom size measure for items).
Once that size is reached, the least recently used items are removed first. A lock ensures
that data access does not lead to race conditions.</p>
<p>A particular use case of this package is to implement function memoization for functions
that can simultaneously be called from different threads.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>Install with the package manager via <code>]add LRUCache</code> or</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> Pkg
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>LRUCache<span class="pl-pds">"</span></span>)</pre></div>
<h2><a id="user-content-interface" class="anchor" aria-hidden="true" href="#interface"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Interface</h2>
<p><code>LRU</code> supports the standard <code>AbstractDict</code> interface. Some examples of common
operations are shown below:</p>
<p><strong>Creation</strong></p>
<div class="highlight highlight-source-julia"><pre>lru <span class="pl-k">=</span> <span class="pl-c1">LRU</span><span class="pl-c1">{K, V}</span>(, maxsize <span class="pl-k">=</span> size [, by <span class="pl-k">=</span> <span class="pl-k">...</span>])</pre></div>
<p>Create an LRU Cache with a maximum size (number of items) specified by the <em>required</em>
keyword argument <code>maxsize</code>. Here, the size can be the number of elements (default), or the
maximal total size of the values in the dictionary, as counted by an arbitrary user
function (which should return a single value of type <code>Int</code>) specified with the keyword
argument <code>by</code>. Sensible choices would for example be <code>by = sizeof</code> for e.g. values which
are <code>Array</code>s of bitstypes, or <code>by = Base.summarysize</code> for values of some arbitrary user
type.</p>
<p><strong>Add an item to the cache</strong></p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">setindex!</span>(lru, value, key)
lru[key] <span class="pl-k">=</span> value</pre></div>
<p><strong>Lookup an item in the cache</strong></p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">getindex</span>(lru, key)
lru[key]</pre></div>
<p><strong>Change the maxsize</strong></p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">resize!</span>(lru; maxsize <span class="pl-k">=</span> size)</pre></div>
<p>Here, the maximal size is specified via a required keyword argument. Remember that the
maximal size is not necessarily the same as the maximal length, if a custom function was
specified using the keyword argument <code>by</code> in the construction of the LRU cache.</p>
<p><strong>Empty the cache</strong></p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">empty!</span>(lru)</pre></div>
<h3><a id="user-content-caching-use" class="anchor" aria-hidden="true" href="#caching-use"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Caching Use</h3>
<p>To effectively use <code>LRU</code> as a cache, several functions from the <code>AbstractDict</code> interface
can be used for easy checking if an item is present, and if not quickly calculating a
default.</p>
<h4><a id="user-content-getlrulru-key-default" class="anchor" aria-hidden="true" href="#getlrulru-key-default"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>get!(lru::LRU, key, default)</h4>
<p>Returns the value stored in <code>lru</code> for <code>key</code> if present. If not, stores <code>key =&gt; default</code>, and returns <code>default</code>.</p>
<h4><a id="user-content-getdefaultcallable-lrulru-key" class="anchor" aria-hidden="true" href="#getdefaultcallable-lrulru-key"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>get!(default::Callable, lru::LRU, key)</h4>
<p>Like above, except if <code>key</code> is not present, stores <code>key =&gt; default()</code>, and
returns the result. This is intended to be used in <code>do</code> block syntax:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">get!</span>(lru, key) <span class="pl-k">do</span>
   <span class="pl-k">...</span>
<span class="pl-k">end</span></pre></div>
<h4><a id="user-content-getlrulru-key-default-1" class="anchor" aria-hidden="true" href="#getlrulru-key-default-1"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>get(lru::LRU, key, default)</h4>
<p>Returns the value stored in <code>lru</code> for <code>key</code> if present. If not, returns default without
storing this value in <code>lru</code>. Also comes in the following form:</p>
<h4><a id="user-content-getdefaultcallable-lrulru-key-1" class="anchor" aria-hidden="true" href="#getdefaultcallable-lrulru-key-1"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>get(default::Callable, lru::LRU, key)</h4>
<h2><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example</h2>
<p>Commonly, you may have some long running function that sometimes gets called with the same
parameters more than once. As such, it may benefit from caching the results.</p>
<p>Here's our example, long running calculation:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">function</span> <span class="pl-en">foo</span>(a<span class="pl-k">::</span><span class="pl-c1">Float64</span>, b<span class="pl-k">::</span><span class="pl-c1">Float64</span>)
    <span class="pl-c1">sleep</span>(<span class="pl-c1">100</span>)
    result <span class="pl-k">=</span> a <span class="pl-k">*</span> b
<span class="pl-k">end</span></pre></div>
<p>As this function requires more than one parameter, we need a cache from
<code>(Float64, Float64)</code> to <code>Float64</code>. A cached version is then:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">const</span> lru <span class="pl-k">=</span> <span class="pl-c1">LRU</span><span class="pl-c1">{Tuple{Float64, Float64}, Float64}</span>()

<span class="pl-k">function</span> <span class="pl-en">cached_foo</span>(a<span class="pl-k">::</span><span class="pl-c1">Float64</span>, b<span class="pl-k">::</span><span class="pl-c1">Float64</span>)
    <span class="pl-c1">get!</span>(lru, (a, b)) <span class="pl-k">do</span>
      <span class="pl-c1">foo</span>(a,b)
    <span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>
</article></div>