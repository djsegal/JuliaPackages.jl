<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-lrucachejl" class="anchor" aria-hidden="true" href="#lrucachejl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>LRUCache.jl</h1>
<p dir="auto"><a href="https://github.com/JuliaCollections/LRUCache.jl/actions/workflows/ci.yml"><img src="https://github.com/JuliaCollections/LRUCache.jl/actions/workflows/ci.yml/badge.svg" alt="CI" style="max-width: 100%;"></a>
<a href="https://github.com/JuliaCollections/LRUCache.jl/actions/workflows/ci-julia-nightly.yml"><img src="https://github.com/JuliaCollections/LRUCache.jl/actions/workflows/ci-julia-nightly.yml/badge.svg" alt="CI (Julia nightly)" style="max-width: 100%;"></a>
<a href="LICENSE.md"><img src="https://camo.githubusercontent.com/bbf49a2eb96e6f718803f2493bd7aa3baae61abb09b7f8fc185a94e08c504dc6/687474703a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d627269676874677265656e2e7376673f7374796c653d666c6174" alt="License" data-canonical-src="http://img.shields.io/badge/license-MIT-brightgreen.svg?style=flat" style="max-width: 100%;"></a>
<a href="http://codecov.io/github/JuliaCollections/LRUCache.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/c4ec0c2b0735479d0828275b224e473c18666066b4627e7ce2a3a2fd1c0012be/687474703a2f2f636f6465636f762e696f2f6769746875622f4a756c6961436f6c6c656374696f6e732f4c525543616368652e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/JuliaCollections/LRUCache.jl/coverage.svg?branch=master" style="max-width: 100%;"></a></p>
<p dir="auto">Provides a thread-safe implementation of a Least Recently Used (LRU) Cache for Julia.</p>
<p dir="auto">An LRU Cache is a useful associative data structure (<code>AbstractDict</code> in Julia) that has a
set maximum size (as measured by number of elements or a custom size measure for items).
Once that size is reached, the least recently used items are removed first. A lock ensures
that data access does not lead to race conditions.</p>
<p dir="auto">A particular use case of this package is to implement function memoization for functions
that can simultaneously be called from different threads.</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">Install with the package manager via <code>]add LRUCache</code> or</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Pkg
Pkg.add(&quot;LRUCache&quot;)"><pre><span class="pl-k">using</span> Pkg
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>LRUCache<span class="pl-pds">"</span></span>)</pre></div>
<h2 dir="auto"><a id="user-content-interface" class="anchor" aria-hidden="true" href="#interface"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Interface</h2>
<p dir="auto"><code>LRU</code> supports the standard <code>AbstractDict</code> interface. Some examples of common
operations are shown below:</p>
<p dir="auto"><strong>Creation</strong></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="lru = LRU{K, V}(, maxsize = size [, by = ...] [,finalizer = ...])"><pre>lru <span class="pl-k">=</span> <span class="pl-c1">LRU</span><span class="pl-c1">{K, V}</span>(, maxsize <span class="pl-k">=</span> size [, by <span class="pl-k">=</span> <span class="pl-k">...</span>] [,finalizer <span class="pl-k">=</span> <span class="pl-k">...</span>])</pre></div>
<p dir="auto">Create an LRU Cache with a maximum size (number of items) specified by the <em>required</em>
keyword argument <code>maxsize</code>. Here, the size can be the number of elements (default), or the
maximal total size of the values in the dictionary, as counted by an arbitrary user
function (which should return a single value of type <code>Int</code>) specified with the keyword
argument <code>by</code>. Sensible choices would for example be <code>by = sizeof</code> for e.g. values which
are <code>Array</code>s of bitstypes, or <code>by = Base.summarysize</code> for values of some arbitrary user
type.</p>
<p dir="auto">If <code>finalizer</code> is set, it is called for each entry that leaves the cache, with <code>key</code> and
<code>value</code> as arguments. This is useful if the cached values contain some resource that you
want to recover.</p>
<p dir="auto"><strong>Add an item to the cache</strong></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="setindex!(lru, value, key)
lru[key] = value"><pre><span class="pl-c1">setindex!</span>(lru, value, key)
lru[key] <span class="pl-k">=</span> value</pre></div>
<p dir="auto"><strong>Lookup an item in the cache</strong></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="getindex(lru, key)
lru[key]"><pre><span class="pl-c1">getindex</span>(lru, key)
lru[key]</pre></div>
<p dir="auto"><strong>Change the maxsize</strong></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="resize!(lru; maxsize = size)"><pre><span class="pl-c1">resize!</span>(lru; maxsize <span class="pl-k">=</span> size)</pre></div>
<p dir="auto">Here, the maximal size is specified via a required keyword argument. Remember that the
maximal size is not necessarily the same as the maximal length, if a custom function was
specified using the keyword argument <code>by</code> in the construction of the LRU cache.</p>
<p dir="auto"><strong>Empty the cache</strong></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="empty!(lru)"><pre><span class="pl-c1">empty!</span>(lru)</pre></div>
<h3 dir="auto"><a id="user-content-caching-use" class="anchor" aria-hidden="true" href="#caching-use"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Caching Use</h3>
<p dir="auto">To effectively use <code>LRU</code> as a cache, several functions from the <code>AbstractDict</code> interface
can be used for easy checking if an item is present, and if not quickly calculating a
default.</p>
<h4 dir="auto"><a id="user-content-getlrulru-key-default" class="anchor" aria-hidden="true" href="#getlrulru-key-default"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>get!(lru::LRU, key, default)</h4>
<p dir="auto">Returns the value stored in <code>lru</code> for <code>key</code> if present. If not, stores <code>key =&gt; default</code>, and returns <code>default</code>.</p>
<h4 dir="auto"><a id="user-content-getdefaultcallable-lrulru-key" class="anchor" aria-hidden="true" href="#getdefaultcallable-lrulru-key"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>get!(default::Callable, lru::LRU, key)</h4>
<p dir="auto">Like above, except if <code>key</code> is not present, stores <code>key =&gt; default()</code>, and
returns the result. This is intended to be used in <code>do</code> block syntax:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="get!(lru, key) do
   ...
end"><pre><span class="pl-c1">get!</span>(lru, key) <span class="pl-k">do</span>
   <span class="pl-k">...</span>
<span class="pl-k">end</span></pre></div>
<h4 dir="auto"><a id="user-content-getlrulru-key-default-1" class="anchor" aria-hidden="true" href="#getlrulru-key-default-1"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>get(lru::LRU, key, default)</h4>
<p dir="auto">Returns the value stored in <code>lru</code> for <code>key</code> if present. If not, returns default without
storing this value in <code>lru</code>. Also comes in the following form:</p>
<h4 dir="auto"><a id="user-content-getdefaultcallable-lrulru-key-1" class="anchor" aria-hidden="true" href="#getdefaultcallable-lrulru-key-1"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>get(default::Callable, lru::LRU, key)</h4>
<h2 dir="auto"><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example</h2>
<p dir="auto">Commonly, you may have some long running function that sometimes gets called with the same
parameters more than once. As such, it may benefit from caching the results.</p>
<p dir="auto">Here's our example, long running calculation:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="function foo(a::Float64, b::Float64)
    sleep(100)
    result = a * b
end"><pre><span class="pl-k">function</span> <span class="pl-en">foo</span>(a<span class="pl-k">::</span><span class="pl-c1">Float64</span>, b<span class="pl-k">::</span><span class="pl-c1">Float64</span>)
    <span class="pl-c1">sleep</span>(<span class="pl-c1">100</span>)
    result <span class="pl-k">=</span> a <span class="pl-k">*</span> b
<span class="pl-k">end</span></pre></div>
<p dir="auto">As this function requires more than one parameter, we need a cache from
<code>(Float64, Float64)</code> to <code>Float64</code>. A cached version is then:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="const lru = LRU{Tuple{Float64, Float64}, Float64}(maxsize=10)

function cached_foo(a::Float64, b::Float64)
    get!(lru, (a, b)) do
      foo(a,b)
    end
end"><pre><span class="pl-k">const</span> lru <span class="pl-k">=</span> <span class="pl-c1">LRU</span><span class="pl-c1">{Tuple{Float64, Float64}, Float64}</span>(maxsize<span class="pl-k">=</span><span class="pl-c1">10</span>)

<span class="pl-k">function</span> <span class="pl-en">cached_foo</span>(a<span class="pl-k">::</span><span class="pl-c1">Float64</span>, b<span class="pl-k">::</span><span class="pl-c1">Float64</span>)
    <span class="pl-c1">get!</span>(lru, (a, b)) <span class="pl-k">do</span>
      <span class="pl-c1">foo</span>(a,b)
    <span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>
</article></div>