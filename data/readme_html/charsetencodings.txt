<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-charsetencodings" class="anchor" aria-hidden="true" href="#charsetencodings"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>CharSetEncodings</h1>
<table>
<thead>
<tr>
<th align="center"><strong>Info</strong></th>
<th align="center"><strong>Windows</strong></th>
<th align="center"><strong>Linux &amp; MacOS</strong></th>
<th align="center"><strong>Package Evaluator</strong></th>
<th align="center"><strong>CodeCov</strong></th>
<th align="center"><strong>Coveralls</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><a href="LICENSE.md"><img src="https://camo.githubusercontent.com/4440d5deb3a53c4f8661ee765378e6071e7878e8/687474703a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d627269676874677265656e2e7376673f7374796c653d666c6174" alt="" data-canonical-src="http://img.shields.io/badge/license-MIT-brightgreen.svg?style=flat" style="max-width:100%;"></a></td>
<td align="center"><a href="https://ci.appveyor.com/project/ScottPJones/charsetencodings-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/bd8e614f35f4673371a50bf04439f2a84b9bc70b/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f3038796c786c343665786c7469656d643f7376673d74727565" alt="" data-canonical-src="https://ci.appveyor.com/api/projects/status/08ylxl46exltiemd?svg=true" style="max-width:100%;"></a></td>
<td align="center"><a href="https://travis-ci.org/JuliaString/CharSetEncodings.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/25843e57c7bfa2fdd90ea3e4f3f3a20b21d2bf3e/68747470733a2f2f7472617669732d63692e6f72672f4a756c6961537472696e672f43686172536574456e636f64696e67732e6a6c2e737667" alt="" data-canonical-src="https://travis-ci.org/JuliaString/CharSetEncodings.jl.svg" style="max-width:100%;"></a></td>
<td align="center"><a href="http://pkg.julialang.org/?pkg=CharSetEncodings" rel="nofollow"><img src="https://camo.githubusercontent.com/22b2ecf90a525fdfae285a998adad82037c2e69e/687474703a2f2f706b672e6a756c69616c616e672e6f72672f6261646765732f43686172536574456e636f64696e67735f302e362e737667" alt="" data-canonical-src="http://pkg.julialang.org/badges/CharSetEncodings_0.6.svg" style="max-width:100%;"></a></td>
<td align="center"><a href="https://codecov.io/gh/JuliaString/CharSetEncodings.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/c412b77cf941a69d23e27b0959d7ede9ed479b99/68747470733a2f2f636f6465636f762e696f2f67682f4a756c6961537472696e672f43686172536574456e636f64696e67732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="" data-canonical-src="https://codecov.io/gh/JuliaString/CharSetEncodings.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></td>
<td align="center"><a href="https://coveralls.io/github/JuliaString/CharSetEncodings.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/d1f1a266f90f0a0385c77474a6e4932948ac70a9/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f4a756c6961537472696e672f43686172536574456e636f64696e67732e6a6c2f62616467652e737667" alt="" data-canonical-src="https://coveralls.io/repos/github/JuliaString/CharSetEncodings.jl/badge.svg" style="max-width:100%;"></a></td>
</tr>
<tr>
<td align="center"><a href="https://gitter.im/JuliaString/Lobby?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge" rel="nofollow"><img src="https://camo.githubusercontent.com/da2edb525cde1455a622c58c0effc3a90b9a181c/68747470733a2f2f6261646765732e6769747465722e696d2f4a6f696e253230436861742e737667" alt="" data-canonical-src="https://badges.gitter.im/Join%20Chat.svg" style="max-width:100%;"></a></td>
<td align="center"><a href="https://ci.appveyor.com/project/ScottPJones/charsetencodings-jl/branch/master" rel="nofollow"><img src="https://camo.githubusercontent.com/77b7f736ade04fb8d314fcab2f65f0b8f923c998/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f3038796c786c343665786c7469656d642f6272616e63682f6d61737465723f7376673d74727565" alt="" data-canonical-src="https://ci.appveyor.com/api/projects/status/08ylxl46exltiemd/branch/master?svg=true" style="max-width:100%;"></a></td>
<td align="center"><a href="https://travis-ci.org/JuliaString/CharSetEncodings.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/165eb5955062ddea5b3293914f23f196afe203d8/68747470733a2f2f7472617669732d63692e6f72672f4a756c6961537472696e672f43686172536574456e636f64696e67732e6a6c2e7376673f6272616e63683d6d6173746572" alt="" data-canonical-src="https://travis-ci.org/JuliaString/CharSetEncodings.jl.svg?branch=master" style="max-width:100%;"></a></td>
<td align="center"><a href="http://pkg.julialang.org/?pkg=CharSetEncodings" rel="nofollow"><img src="https://camo.githubusercontent.com/10f0290a8ba60ef67469cc1a53e1fcd3d41c3e3d/687474703a2f2f706b672e6a756c69616c616e672e6f72672f6261646765732f43686172536574456e636f64696e67735f302e372e737667" alt="" data-canonical-src="http://pkg.julialang.org/badges/CharSetEncodings_0.7.svg" style="max-width:100%;"></a></td>
<td align="center"><a href="https://codecov.io/gh/JuliaString/CharSetEncodings.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/c412b77cf941a69d23e27b0959d7ede9ed479b99/68747470733a2f2f636f6465636f762e696f2f67682f4a756c6961537472696e672f43686172536574456e636f64696e67732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="" data-canonical-src="https://codecov.io/gh/JuliaString/CharSetEncodings.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></td>
<td align="center"><a href="https://coveralls.io/github/JuliaString/CharSetEncodings.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/4e49a6f70113cd9a41bd33975fbdec9d3712885c/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f4a756c6961537472696e672f43686172536574456e636f64696e67732e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="" data-canonical-src="https://coveralls.io/repos/github/JuliaString/CharSetEncodings.jl/badge.svg?branch=master" style="max-width:100%;"></a></td>
</tr>
</tbody>
</table>
<h2><a id="user-content-architecture" class="anchor" aria-hidden="true" href="#architecture"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Architecture</h2>
<p>This provides the basic types and mode methods for dealing with character sets, encodings,
and character set encodings.</p>
<h2><a id="user-content-types" class="anchor" aria-hidden="true" href="#types"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Types</h2>
<p>Currently, there are the following types:</p>
<ul>
<li><code>CodeUnitTypes</code>  a Union of the 3 codeunit types (UInt8, UInt16, UInt32) for convenience</li>
<li><code>CharSet</code>        a struct type, which is parameterized by the name of the character set and the type needed to represent a code point</li>
<li><code>Encoding</code>       a struct type, parameterized by the name of the encoding</li>
</ul>
<h2><a id="user-content-built-in-character-sets--character-set-encodings" class="anchor" aria-hidden="true" href="#built-in-character-sets--character-set-encodings"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Built-in Character Sets / Character Set Encodings</h2>
<ul>
<li>
<p><code>Binary</code>  For storing non-textual data as a sequence of bytes, 0-0xff</p>
</li>
<li>
<p><code>ASCII</code>   ASCII (Unicode subset, 0-0x7f)</p>
</li>
<li>
<p><code>Latin</code>   Latin-1 (ISO-8859-1) (Unicode subset, 0-0xff)</p>
</li>
<li>
<p><code>UCS2</code>    UCS-2 (Unicode subset, 0-0xd7ff, 0xe000-0xffff, BMP only, no surrogates)</p>
</li>
<li>
<p><code>UTF32</code>   UTF-32 (Full Unicode, 0-0xd7ff, 0xe000-0x10ffff)</p>
</li>
<li>
<p><code>UniPlus</code> Unvalidated Unicode (i.e. like <code>String</code>, can contain invalid codepoints)</p>
</li>
<li>
<p><code>Text1</code>   Unknown 1-byte character set</p>
</li>
<li>
<p><code>Text2</code>   Unknown 2-byte character set</p>
</li>
<li>
<p><code>Text4</code>   Unknown 4-byte character set</p>
</li>
</ul>
<h2><a id="user-content-built-in-encodings" class="anchor" aria-hidden="true" href="#built-in-encodings"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Built-in Encodings</h2>
<ul>
<li><code>UTF8Encoding</code></li>
<li><code>Native1Byte</code></li>
<li><code>Native2Byte</code></li>
<li><code>Native4Byte</code></li>
<li><code>NativeUTF16</code></li>
<li><code>Swapped4Byte</code></li>
<li><code>Swapped2Byte</code></li>
<li><code>SwappedUTF16</code></li>
<li><code>LE2</code></li>
<li><code>BE2</code></li>
<li><code>LE4</code></li>
<li><code>BE4</code></li>
<li><code>UTF16LE</code></li>
<li><code>UTF16BE</code></li>
<li><code>2Byte</code></li>
<li><code>4Byte</code></li>
<li><code>UTF16</code></li>
</ul>
<h2><a id="user-content-built-in-cses" class="anchor" aria-hidden="true" href="#built-in-cses"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Built-in CSEs</h2>
<ul>
<li>
<p><code>BinaryCSE</code>, <code>Text1CSE</code>, <code>ASCIICSE</code>, <code>LatinCSE</code></p>
</li>
<li>
<p><code>Text2CSE</code>, <code>UCS2CSE</code></p>
</li>
<li>
<p><code>Text4CSE</code>, <code>UTF32CSE</code></p>
</li>
<li>
<p><code>UTF8CSE</code>    <code>UTF32CharSet</code>, all valid, using <code>UTF8Encoding</code>,
conforming to the Unicode Organization's standard,
i.e. no long encodings, surrogates, or invalid bytes.</p>
</li>
<li>
<p><code>RawUTF8CSE</code> <code>UniPlusCharSet</code>, not validated, using <code>UTF8Encoding</code>,
may have invalid sequences, long encodings, encode surrogates and characters
up to <code>0x7fffffff</code></p>
</li>
<li>
<p><code>UTF16CSE</code>   <code>UTF32CharSet</code>, all valid, using <code>UTF16</code> Encoding (native order),
conforming to the Unicode standard, i.e. no out of order or isolated surrogates.</p>
</li>
</ul>
<h2><a id="user-content-internal-unicode-subset-types" class="anchor" aria-hidden="true" href="#internal-unicode-subset-types"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Internal Unicode subset types</h2>
<ul>
<li><code>_LatinCSE</code>   Indicates has at least 1 character &gt; 0x7f, all &lt;= 0xff</li>
<li><code>_UCS2CSE</code>    Indicates has at least 1 character &gt; 0xff, all &lt;= 0xffff</li>
<li><code>_UTF32CSE</code>   Indicates has at least 1 non-BMP character</li>
</ul>
<h2><a id="user-content-api" class="anchor" aria-hidden="true" href="#api"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>API</h2>
<p>The <code>cse</code> function returns the character set encoding for a string type, string.
Returns <code>RawUTF8CSE</code> as a fallback for <code>AbstractString</code> (i.e. same as <code>String</code>)
The <code>charset</code> function returns the character set for a string type, string, character type, or character.
The <code>encoding</code> function returns the encoding for a type or string.
The <code>codeunit</code> function returns the code unit used for a character set encoding
The <code>cs"..."</code> string macro creates a CharSet type with that name
The <code>enc"..."</code> string macro creates an Encoding type with that name
The <code>@cse(cs, enc)</code> macro creates a character set encoding with the given character set and encoding</p>
<p>Also Exports the helpful constant <code>Bool</code> flags <code>BIG_ENDIAN</code> and <code>LITTLE_ENDIAN</code></p>
</article></div>