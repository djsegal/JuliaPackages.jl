<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-currenciesbasejl" class="anchor" aria-hidden="true" href="#currenciesbasejl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>CurrenciesBase.jl</h1>
<p dir="auto"><a href="https://travis-ci.org/JuliaFinance/CurrenciesBase.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/ac30bfdaad23f6d6fc358e0850b656f6ded3947d7b832ce90e2f67ff13baf82f/68747470733a2f2f7472617669732d63692e6f72672f4a756c696146696e616e63652f43757272656e63696573426173652e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaFinance/CurrenciesBase.jl.svg?branch=master" style="max-width: 100%;"></a>
<a href="https://ci.appveyor.com/project/EricForgy/currenciesbase-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/2fb39f88645445161f21ff091c217ef2747b2e35eeffa52027c7c2af7123e443/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f313539336d6c736c657269616578346a3f7376673d74727565" alt="Build status" data-canonical-src="https://ci.appveyor.com/api/projects/status/1593mlsleriaex4j?svg=true" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-purpose" class="anchor" aria-hidden="true" href="#purpose"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Purpose</h2>
<p dir="auto">This package provides the core functionality for <a href="https://github.com/JuliaFinance/Currencies.jl">Currencies.jl</a>.</p>
<h2 dir="auto"><a id="user-content-data-source" class="anchor" aria-hidden="true" href="#data-source"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Data Source</h2>
<p dir="auto">The currency-related information for this package comes from <a href="https://en.wikipedia.org/wiki/ISO_4217#cite_note-divby5-9" rel="nofollow">this Wikipedia page</a>, the official ISO standard, and other Wikipedia pages. It is compiled manually and may be in error; please do submit a pull request to correct any errors.</p>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<p dir="auto">This README.md file provides a basic guide to getting started. It is not a replacement for the <a href="https://juliafinance.github.io/Currencies.jl/latest/" rel="nofollow">documentation</a>. Please file any corrections or missing parts of the documentation as issues, or even better, send in a pull request.</p>
<p dir="auto">The <code>Currencies</code> module exports the <code>Monetary</code> type. To access currencies, use the <code>@usingcurrencies</code> macro. Basic operation is as follows:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@usingcurrencies USD
1USD + 2USD  # 3.00 USD
3 * 1.5USD   # 4.50 USD"><pre><span class="pl-c1">@usingcurrencies</span> USD
<span class="pl-c1">1</span>USD <span class="pl-k">+</span> <span class="pl-c1">2</span>USD  <span class="pl-c"><span class="pl-c">#</span> 3.00 USD</span>
<span class="pl-c1">3</span> <span class="pl-k">*</span> <span class="pl-c1">1.5</span>USD   <span class="pl-c"><span class="pl-c">#</span> 4.50 USD</span></pre></div>
<p dir="auto">Mixed arithmetic is not supported:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@usingcurrencies USD, CAD
10USD + 3CAD  # ArgumentError"><pre><span class="pl-c1">@usingcurrencies</span> USD, CAD
<span class="pl-c1">10</span>USD <span class="pl-k">+</span> <span class="pl-c1">3</span>CAD  <span class="pl-c"><span class="pl-c">#</span> ArgumentError</span></pre></div>
<p dir="auto">Monetary amounts can be compared:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@usingcurrencies USD, EUR
1USD &lt; 2USD        # true
sort([2EUR, 1EUR]) # [1EUR, 2EUR]"><pre><span class="pl-c1">@usingcurrencies</span> USD, EUR
<span class="pl-c1">1</span>USD <span class="pl-k">&lt;</span> <span class="pl-c1">2</span>USD        <span class="pl-c"><span class="pl-c">#</span> true</span>
<span class="pl-c1">sort</span>([<span class="pl-c1">2</span>EUR, <span class="pl-c1">1</span>EUR]) <span class="pl-c"><span class="pl-c">#</span> [1EUR, 2EUR]</span></pre></div>
<h2 dir="auto"><a id="user-content-using-monetary-in-practice" class="anchor" aria-hidden="true" href="#using-monetary-in-practice"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Using <code>Monetary</code> in Practice</h2>
<p dir="auto"><code>Monetary</code> types behave a lot like integer types, and they can be used like them for a lot of practical situations. For example, here is a (quite fast) function to give optimal change using the common European system of having coins and bills worth 0.01€, 0.02€, 0.05€, 0.10€, 0.20€, 0.50€, 1.00€, and so forth until 500.00€ (this algorithm doesn't necessarily work for all combinations of coin values).</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@usingcurrencies EUR
COINS = [500EUR, 200EUR, 100EUR, 50EUR, 20EUR, 10EUR, 5EUR, 2EUR, 1EUR, 0.5EUR,
    0.2EUR, 0.1EUR, 0.05EUR, 0.02EUR, 0.01EUR]
function change(amount::Monetary{:EUR,Int})
    coins = Dict{Monetary{:EUR,Int}, Int}()
    for denomination in COINS
        coins[denomination], amount = divrem(amount, denomination)
    end
    coins
end

sum([k*v for (k, v) in change(167.25EUR)])  # 167.25EUR"><pre><span class="pl-c1">@usingcurrencies</span> EUR
COINS <span class="pl-k">=</span> [<span class="pl-c1">500</span>EUR, <span class="pl-c1">200</span>EUR, <span class="pl-c1">100</span>EUR, <span class="pl-c1">50</span>EUR, <span class="pl-c1">20</span>EUR, <span class="pl-c1">10</span>EUR, <span class="pl-c1">5</span>EUR, <span class="pl-c1">2</span>EUR, <span class="pl-c1">1</span>EUR, <span class="pl-c1">0.5</span>EUR,
    <span class="pl-c1">0.2</span>EUR, <span class="pl-c1">0.1</span>EUR, <span class="pl-c1">0.05</span>EUR, <span class="pl-c1">0.02</span>EUR, <span class="pl-c1">0.01</span>EUR]
<span class="pl-k">function</span> <span class="pl-en">change</span>(amount<span class="pl-k">::</span><span class="pl-c1">Monetary{:EUR,Int}</span>)
    coins <span class="pl-k">=</span> <span class="pl-c1">Dict</span><span class="pl-c1">{Monetary{:EUR,Int}, Int}</span>()
    <span class="pl-k">for</span> denomination <span class="pl-k">in</span> COINS
        coins[denomination], amount <span class="pl-k">=</span> <span class="pl-c1">divrem</span>(amount, denomination)
    <span class="pl-k">end</span>
    coins
<span class="pl-k">end</span>

<span class="pl-c1">sum</span>([k<span class="pl-k">*</span>v <span class="pl-k">for</span> (k, v) <span class="pl-k">in</span> <span class="pl-c1">change</span>(<span class="pl-c1">167.25</span>EUR)])  <span class="pl-c"><span class="pl-c">#</span> 167.25EUR</span></pre></div>
</article></div>