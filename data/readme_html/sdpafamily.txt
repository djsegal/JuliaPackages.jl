<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-sdpafamily" class="anchor" aria-hidden="true" href="#sdpafamily"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>SDPAFamily</h1>
<p><a href="https://github.com/ericphanson/SDPAFamily.jl/actions/workflows/ci.yml"><img src="https://github.com/ericphanson/SDPAFamily.jl/actions/workflows/ci.yml/badge.svg" alt="CI" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/ericphanson/SDPAFamily.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/83a4c1262ca560019573000fc4e0be3d8c81e6cd3fccc9f074fabf71704a555f/68747470733a2f2f636f6465636f762e696f2f67682f657269637068616e736f6e2f5344504146616d696c792e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/ericphanson/SDPAFamily.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a>
<a href="https://ericphanson.github.io/SDPAFamily.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://ericphanson.github.io/SDPAFamily.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a></p>
<p>An interface to using SDPA-GMP, SDPA-DD, and SDPA-QD in Julia
(<a href="http://sdpa.sourceforge.net" rel="nofollow">http://sdpa.sourceforge.net</a>). This package is registered in the
General registry; to install, type <code>]</code> in the Julia command prompt, then enter</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="pkg&gt; add SDPAFamily
"><pre>pkg<span class="pl-k">&gt;</span> add SDPAFamily</pre></div>
<p>Call <code>SDPAFamily.Optimizer()</code> to use this wrapper via <code>MathOptInterface</code>, which
is an intermediate layer between low-level solvers (such as SDPA-GMP, SDPA-QD,
and SDPA-DD) and high level modelling languages, such as
<a href="https://github.com/JuliaOpt/JuMP.jl">JuMP.jl</a> and
<a href="https://github.com/JuliaOpt/Convex.jl/">Convex.jl</a>.</p>
<p>Convex.jl 0.13+ supports MathOptInterface and can be used to solve problems with
the solvers from this package.</p>
<p>JuMP currently only supports <code>Float64</code> numeric types, which means that problems
can only be specified to 64-bits of precision, and results can only be recovered
at that level of precision, when using JuMP. This is tracked in the issue
<a href="https://github.com/JuliaOpt/JuMP.jl/issues/2025">JuMP#2025</a>.</p>
<h2><a id="user-content-quick-example" class="anchor" aria-hidden="true" href="#quick-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Quick Example</h2>
<p>Here is a simple optimization problem formulated with Convex.jl:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using SDPAFamily, LinearAlgebra
using Convex
y = Semidefinite(3)
p = maximize(eigmin(y), tr(y) &lt;= 5; numeric_type = BigFloat)
solve!(p, () -&gt; SDPAFamily.Optimizer(presolve=true))
@show p.optval
"><pre><span class="pl-k">using</span> SDPAFamily, LinearAlgebra
<span class="pl-k">using</span> Convex
y <span class="pl-k">=</span> <span class="pl-c1">Semidefinite</span>(<span class="pl-c1">3</span>)
p <span class="pl-k">=</span> <span class="pl-c1">maximize</span>(<span class="pl-c1">eigmin</span>(y), <span class="pl-c1">tr</span>(y) <span class="pl-k">&lt;=</span> <span class="pl-c1">5</span>; numeric_type <span class="pl-k">=</span> BigFloat)
<span class="pl-c1">solve!</span>(p, () <span class="pl-k">-&gt;</span> SDPAFamily<span class="pl-k">.</span><span class="pl-c1">Optimizer</span>(presolve<span class="pl-k">=</span><span class="pl-c1">true</span>))
<span class="pl-c1">@show</span> p<span class="pl-k">.</span>optval</pre></div>
<p>See the documentation linked above for troubleshooting help and usage
information.</p>
</article></div>