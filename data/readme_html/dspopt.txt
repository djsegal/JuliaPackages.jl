<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-dspoptjl" class="anchor" aria-hidden="true" href="#dspoptjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>DSPopt.jl</h1>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/kibaekkim/DSPopt.jl/workflows/Run%20tests/badge.svg"><img src="https://github.com/kibaekkim/DSPopt.jl/workflows/Run%20tests/badge.svg" alt="Run tests" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/kibaekkim/DSPopt.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/3a8000acedfe1d409cde40519235355050ddc5e8b6dff853761673e79280fbc1/68747470733a2f2f636f6465636f762e696f2f67682f6b696261656b6b696d2f4453506f70742e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/kibaekkim/DSPopt.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p>DSPopt.jl is an interface to a parallel decomposition mixed-integer programming solver <a href="https://github.com/Argonne-National-Laboratory/DSP">DSP</a>.
This package allows users to define block structures in optimization model written in <a href="https://github.com/StructJuMP/StructJuMP.jl">StructJuMP</a>
and solve the block-structured problem using the parallle solver <code>DSP</code>.</p>
<p>This package can model and solve (by interfacing <code>DSP</code>) the following optimization problems:</p>
<ul>
<li>Two-stage stochastic (mixed-integer) quadratic constrained programming (TSSP)</li>
<li>The Wasserstein-based distributionally robust variant of TSSP</li>
<li>Block-structured (mixed-integer) linear programming</li>
</ul>
<h2><a id="user-content-intallation" class="anchor" aria-hidden="true" href="#intallation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Intallation</h2>
<blockquote>
<p><strong><em>NOTE:</em></strong> You need to install solver <a href="https://github.com/Argonne-National-Laboratory/DSP">DSP</a> first. This package provides an interface only.</p>
</blockquote>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="] add DSPopt
"><pre>] add DSPopt</pre></div>
<h2><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Examples</h2>
<p>This is one simple example of <code>stochastic</code> form.
Please find more examples in <code>./examples</code> particularly for <code>block</code> form.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using MPI
using StructJuMP
using DSPopt

# Comment out this line if you want to run in serial
MPI.Init()

# Initialize DSPopt.jl with the communicator.
DSPopt.parallelize(MPI.COMM_WORLD)

xi = [[7,7] [11,11] [13,13]]

# create StructuredModel with number of scenarios
m = StructuredModel(num_scenarios = 3)

@variable(m, 0 &lt;= x[i=1:2] &lt;= 5, Int)
@objective(m, Min, -1.5 * x[1] - 4 * x[2])
for s = 1:3
    # create a StructuredModel linked to m with id s and probability 1/3
    blk = StructuredModel(parent = m, id = s, prob = 1/3)
    @variable(blk, y[j=1:4], Bin)
    @objective(blk, Min, -16 * y[1] + 19 * y[2] + 23 * y[3] + 28 * y[4])
    @constraint(blk, 2 * y[1] + 3 * y[2] + 4 * y[3] + 5 * y[4] &lt;= xi[1,s] - x[1])
    @constraint(blk, 6 * y[1] + y[2] + 3 * y[3] + 2 * y[4] &lt;= xi[2,s] - x[2])

    # Quadratic constraints supported from DSP version 2.0.0 or higher
    @constraint(blk, const_quad, w[1]^2 &lt;= 1600)
    if s == 1
        @constraint(blk, const_quad2, 2 * w[1]^2 + 2 * w[2]^2 &lt;= 400)
    elseif s == 2
        @constraint(blk, const_quad2, 5 * w[1] - w[2]^2 -2 * w[3]^2 &gt;= -100)
    end
end

# The Wasserstein ambiguity set of order-2 can be imposed with the size limit of 1.0.
DSPopt.set(WassersteinSet, 2, 1.0)

status = optimize!(m, 
    is_stochastic = true, # Needs to indicate that the model is a stochastic program.
    solve_type = DSPopt.DW, # see instances(DSPopt.Methods) for other methods
)

# Comment out this line if you want to run in serial
MPI.Finalize()
"><pre><span class="pl-k">using</span> MPI
<span class="pl-k">using</span> StructJuMP
<span class="pl-k">using</span> DSPopt

<span class="pl-c"><span class="pl-c">#</span> Comment out this line if you want to run in serial</span>
MPI<span class="pl-k">.</span><span class="pl-c1">Init</span>()

<span class="pl-c"><span class="pl-c">#</span> Initialize DSPopt.jl with the communicator.</span>
DSPopt<span class="pl-k">.</span><span class="pl-c1">parallelize</span>(MPI<span class="pl-k">.</span>COMM_WORLD)

xi <span class="pl-k">=</span> [[<span class="pl-c1">7</span>,<span class="pl-c1">7</span>] [<span class="pl-c1">11</span>,<span class="pl-c1">11</span>] [<span class="pl-c1">13</span>,<span class="pl-c1">13</span>]]

<span class="pl-c"><span class="pl-c">#</span> create StructuredModel with number of scenarios</span>
m <span class="pl-k">=</span> <span class="pl-c1">StructuredModel</span>(num_scenarios <span class="pl-k">=</span> <span class="pl-c1">3</span>)

<span class="pl-c1">@variable</span>(m, <span class="pl-c1">0</span> <span class="pl-k">&lt;=</span> x[i<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span>] <span class="pl-k">&lt;=</span> <span class="pl-c1">5</span>, Int)
<span class="pl-c1">@objective</span>(m, Min, <span class="pl-k">-</span><span class="pl-c1">1.5</span> <span class="pl-k">*</span> x[<span class="pl-c1">1</span>] <span class="pl-k">-</span> <span class="pl-c1">4</span> <span class="pl-k">*</span> x[<span class="pl-c1">2</span>])
<span class="pl-k">for</span> s <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">3</span>
    <span class="pl-c"><span class="pl-c">#</span> create a StructuredModel linked to m with id s and probability 1/3</span>
    blk <span class="pl-k">=</span> <span class="pl-c1">StructuredModel</span>(parent <span class="pl-k">=</span> m, id <span class="pl-k">=</span> s, prob <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-c1">3</span>)
    <span class="pl-c1">@variable</span>(blk, y[j<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">4</span>], Bin)
    <span class="pl-c1">@objective</span>(blk, Min, <span class="pl-k">-</span><span class="pl-c1">16</span> <span class="pl-k">*</span> y[<span class="pl-c1">1</span>] <span class="pl-k">+</span> <span class="pl-c1">19</span> <span class="pl-k">*</span> y[<span class="pl-c1">2</span>] <span class="pl-k">+</span> <span class="pl-c1">23</span> <span class="pl-k">*</span> y[<span class="pl-c1">3</span>] <span class="pl-k">+</span> <span class="pl-c1">28</span> <span class="pl-k">*</span> y[<span class="pl-c1">4</span>])
    <span class="pl-c1">@constraint</span>(blk, <span class="pl-c1">2</span> <span class="pl-k">*</span> y[<span class="pl-c1">1</span>] <span class="pl-k">+</span> <span class="pl-c1">3</span> <span class="pl-k">*</span> y[<span class="pl-c1">2</span>] <span class="pl-k">+</span> <span class="pl-c1">4</span> <span class="pl-k">*</span> y[<span class="pl-c1">3</span>] <span class="pl-k">+</span> <span class="pl-c1">5</span> <span class="pl-k">*</span> y[<span class="pl-c1">4</span>] <span class="pl-k">&lt;=</span> xi[<span class="pl-c1">1</span>,s] <span class="pl-k">-</span> x[<span class="pl-c1">1</span>])
    <span class="pl-c1">@constraint</span>(blk, <span class="pl-c1">6</span> <span class="pl-k">*</span> y[<span class="pl-c1">1</span>] <span class="pl-k">+</span> y[<span class="pl-c1">2</span>] <span class="pl-k">+</span> <span class="pl-c1">3</span> <span class="pl-k">*</span> y[<span class="pl-c1">3</span>] <span class="pl-k">+</span> <span class="pl-c1">2</span> <span class="pl-k">*</span> y[<span class="pl-c1">4</span>] <span class="pl-k">&lt;=</span> xi[<span class="pl-c1">2</span>,s] <span class="pl-k">-</span> x[<span class="pl-c1">2</span>])

    <span class="pl-c"><span class="pl-c">#</span> Quadratic constraints supported from DSP version 2.0.0 or higher</span>
    <span class="pl-c1">@constraint</span>(blk, const_quad, w[<span class="pl-c1">1</span>]<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">&lt;=</span> <span class="pl-c1">1600</span>)
    <span class="pl-k">if</span> s <span class="pl-k">==</span> <span class="pl-c1">1</span>
        <span class="pl-c1">@constraint</span>(blk, const_quad2, <span class="pl-c1">2</span> <span class="pl-k">*</span> w[<span class="pl-c1">1</span>]<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">+</span> <span class="pl-c1">2</span> <span class="pl-k">*</span> w[<span class="pl-c1">2</span>]<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">&lt;=</span> <span class="pl-c1">400</span>)
    <span class="pl-k">elseif</span> s <span class="pl-k">==</span> <span class="pl-c1">2</span>
        <span class="pl-c1">@constraint</span>(blk, const_quad2, <span class="pl-c1">5</span> <span class="pl-k">*</span> w[<span class="pl-c1">1</span>] <span class="pl-k">-</span> w[<span class="pl-c1">2</span>]<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">-</span><span class="pl-c1">2</span> <span class="pl-k">*</span> w[<span class="pl-c1">3</span>]<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">&gt;=</span> <span class="pl-k">-</span><span class="pl-c1">100</span>)
    <span class="pl-k">end</span>
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> The Wasserstein ambiguity set of order-2 can be imposed with the size limit of 1.0.</span>
DSPopt<span class="pl-k">.</span><span class="pl-c1">set</span>(WassersteinSet, <span class="pl-c1">2</span>, <span class="pl-c1">1.0</span>)

status <span class="pl-k">=</span> <span class="pl-c1">optimize!</span>(m, 
    is_stochastic <span class="pl-k">=</span> <span class="pl-c1">true</span>, <span class="pl-c"><span class="pl-c">#</span> Needs to indicate that the model is a stochastic program.</span>
    solve_type <span class="pl-k">=</span> DSPopt<span class="pl-k">.</span>DW, <span class="pl-c"><span class="pl-c">#</span> see instances(DSPopt.Methods) for other methods</span>
)

<span class="pl-c"><span class="pl-c">#</span> Comment out this line if you want to run in serial</span>
MPI<span class="pl-k">.</span><span class="pl-c1">Finalize</span>()</pre></div>
<h2><a id="user-content-acknowledgements" class="anchor" aria-hidden="true" href="#acknowledgements"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Acknowledgements</h2>
<p>This material is based upon work supported by the U.S. Department of Energy, Office of Science, under contract number DE-AC02-06CH11357.</p>
</article></div>