<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-waveletsextjl" class="anchor" aria-hidden="true" href="#waveletsextjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>WaveletsExt.jl</h1>
<table>
<thead>
<tr>
<th>Docs</th>
<th>Build</th>
<th>Test</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://UCD4IDS.github.io/WaveletsExt.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a></td>
<td><a href="https://github.com/UCD4IDS/WaveletsExt.jl/actions"><img src="https://github.com/UCD4IDS/WaveletsExt.jl/actions/workflows/CI.yml/badge.svg" alt="CI" style="max-width:100%;"></a></td>
<td><a href="https://codecov.io/gh/UCD4IDS/WaveletsExt.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/f1575dea8f46c6733eb3b932b4f6b342da9155d82149063a95ea2bb220c167f4/68747470733a2f2f636f6465636f762e696f2f67682f554344344944532f576176656c6574734578742e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e7376673f746f6b656e3d5533454f736341765045" alt="codecov" data-canonical-src="https://codecov.io/gh/UCD4IDS/WaveletsExt.jl/branch/master/graph/badge.svg?token=U3EOscAvPE" style="max-width:100%;"></a></td>
</tr>
<tr>
<td><a href="https://UCD4IDS.github.io/WaveletsExt.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>This package is a <a href="https://github.com/JuliaLang/julia">Julia</a> extension package to <a href="https://github.com/JuliaDSP/Wavelets.jl">Wavelets.jl</a> (WaveletsExt is short for Wavelets Extension). It contains additional functionalities that complement Wavelets.jl, which include multiple best basis algorithms, denoising methods, <a href="https://www.math.ucdavis.edu/~saito/publications/saito_ldb_jmiv.pdf" rel="nofollow">Local Discriminant Basis (LDB)</a>, <a href="https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.49.2662&amp;rep=rep1&amp;type=pdf" rel="nofollow">Stationary Wavelet Transform</a>, <a href="https://www.math.ucdavis.edu/~saito/publications/saito_minframe.pdf" rel="nofollow">Autocorrelation Wavelet Transform (ACWT)</a>, and the <a href="https://israelcohen.com/wp-content/uploads/2018/05/ICASSP95.pdf" rel="nofollow">Shift Invariant Wavelet Decomposition</a>.</p>
<h2><a id="user-content-authors" class="anchor" aria-hidden="true" href="#authors"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Authors</h2>
<p>This package is written and maintained by Zeng Fung Liew and Shozen Dan under the supervision of Professor Naoki Saito at the University of California, Davis.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>The package is part of the official Julia Registry. It can be install via the Julia REPL.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="(@1.6) pkg&gt; add WaveletsExt
"><pre>(@<span class="pl-c1">1.6</span>) pkg<span class="pl-k">&gt;</span> add WaveletsExt</pre></div>
<p>or</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using Pkg; Pkg.add(&quot;WaveletsExt&quot;)
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Pkg; Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>WaveletsExt<span class="pl-pds">"</span></span>)</pre></div>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<p>Load the WaveletsExt module along with Wavelets.jl.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Wavelets, WaveletsExt
"><pre><span class="pl-k">using</span> Wavelets, WaveletsExt</pre></div>
<h2><a id="user-content-wavelet-packet-decomposition" class="anchor" aria-hidden="true" href="#wavelet-packet-decomposition"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Wavelet Packet Decomposition</h2>
<p>In contrast to Wavelets.jl's <code>wpt</code> function, <code>wpd</code> outputs expansion coefficients of all levels of a given signal. Each column represents a level in the decomposition tree.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="y = wpd(x, wavelet(WT.db4))
"><pre>y <span class="pl-k">=</span> <span class="pl-c1">wpd</span>(x, <span class="pl-c1">wavelet</span>(WT<span class="pl-k">.</span>db4))</pre></div>
<h2><a id="user-content-stationary-wavelet-transform" class="anchor" aria-hidden="true" href="#stationary-wavelet-transform"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Stationary Wavelet Transform</h2>
<p>The redundant and non-orthogonal transform by Nason-Silverman can be implemented using either <code>sdwt</code> (for stationary discrete wavelet transform) or <code>iswpd</code> (for stationary wavelet packet decomposition). Similarly, the reconstruction of signals can be computed using <code>isdwt</code> and <code>iswpt</code>.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="# stationary discrete wavelet transform
y = sdwt(x, wavelet(WT.db4))
z = isdwt(y, wavelet(WT.db4))

# stationary wavelet packet decomposition
y = swpd(x, wavelet(WT.db4))
z = iswpt(y, wavelet(WT.db4))
"><pre><span class="pl-c"><span class="pl-c">#</span> stationary discrete wavelet transform</span>
y <span class="pl-k">=</span> <span class="pl-c1">sdwt</span>(x, <span class="pl-c1">wavelet</span>(WT<span class="pl-k">.</span>db4))
z <span class="pl-k">=</span> <span class="pl-c1">isdwt</span>(y, <span class="pl-c1">wavelet</span>(WT<span class="pl-k">.</span>db4))

<span class="pl-c"><span class="pl-c">#</span> stationary wavelet packet decomposition</span>
y <span class="pl-k">=</span> <span class="pl-c1">swpd</span>(x, <span class="pl-c1">wavelet</span>(WT<span class="pl-k">.</span>db4))
z <span class="pl-k">=</span> <span class="pl-c1">iswpt</span>(y, <span class="pl-c1">wavelet</span>(WT<span class="pl-k">.</span>db4))</pre></div>
<h2><a id="user-content-autocorrelation-wavelet-transform" class="anchor" aria-hidden="true" href="#autocorrelation-wavelet-transform"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Autocorrelation Wavelet Transform</h2>
<p>The <a href="https://www.math.ucdavis.edu/~saito/publications/saito_minframe.pdf" rel="nofollow">autocorrelation wavelet transform (ACWT)</a> is a special case of the stationary wavelet transform. Some desirable properties of ACWT are symmetry without losing vanishing moments, edge detection/characterization capabilities, and shift invariance. To transform a signal using AC wavelets, use <code>acwt</code> (discreate AC wavelet transform) or <code>acwpt</code> (a.c. packet transform). <code>acwt</code> can also handle 2D signals, which is useful in applications such as image denoising or compression. The reconstruction of signals can be performed using <code>iacwt</code> and <code>iacwpt</code>.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="# autocorrelation discrete wavelet transform
y = acwt(x, wavelet(WT.db4))
z = iacwt(y)

# autocorrelation wavelet packet transform
tree = maketree(x, :full)
y = acwpt(x, wavelet(WT.db4))
z = iacwpt(y, tree)
"><pre><span class="pl-c"><span class="pl-c">#</span> autocorrelation discrete wavelet transform</span>
y <span class="pl-k">=</span> <span class="pl-c1">acwt</span>(x, <span class="pl-c1">wavelet</span>(WT<span class="pl-k">.</span>db4))
z <span class="pl-k">=</span> <span class="pl-c1">iacwt</span>(y)

<span class="pl-c"><span class="pl-c">#</span> autocorrelation wavelet packet transform</span>
tree <span class="pl-k">=</span> <span class="pl-c1">maketree</span>(x, <span class="pl-c1">:full</span>)
y <span class="pl-k">=</span> <span class="pl-c1">acwpt</span>(x, <span class="pl-c1">wavelet</span>(WT<span class="pl-k">.</span>db4))
z <span class="pl-k">=</span> <span class="pl-c1">iacwpt</span>(y, tree)</pre></div>
<h2><a id="user-content-best-basis" class="anchor" aria-hidden="true" href="#best-basis"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Best Basis</h2>
<p>In addition to the best basis algorithm by M.V. Wickerhauser implemented in Wavelets.jl, WaveletsExt.jl contains the implementation of the Joint Best Basis (JBB) by Wickerhauser an the <a href="https://www.math.ucdavis.edu/~saito/courses/ACHA.suppl/lsdb-pr-journal.pdf" rel="nofollow">Least Statistically-Dependent Basis (LSDB)</a> by Saito.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="y = cat([wpd(x[:,i], wt) for i in N]..., dims=3)    # x has size (2^L, N)

# individual best basis trees
bbt = bestbasistree(y, BB())
# joint best basis
bbt = bestbasistree(y, JBB())
# least statistically dependent basis
bbt = bestbasistree(y, LSDB())
"><pre>y <span class="pl-k">=</span> <span class="pl-c1">cat</span>([<span class="pl-c1">wpd</span>(x[:,i], wt) <span class="pl-k">for</span> i <span class="pl-k">in</span> N]<span class="pl-k">.</span><span class="pl-k">..</span>, dims<span class="pl-k">=</span><span class="pl-c1">3</span>)    <span class="pl-c"><span class="pl-c">#</span> x has size (2^L, N)</span>

<span class="pl-c"><span class="pl-c">#</span> individual best basis trees</span>
bbt <span class="pl-k">=</span> <span class="pl-c1">bestbasistree</span>(y, <span class="pl-c1">BB</span>())
<span class="pl-c"><span class="pl-c">#</span> joint best basis</span>
bbt <span class="pl-k">=</span> <span class="pl-c1">bestbasistree</span>(y, <span class="pl-c1">JBB</span>())
<span class="pl-c"><span class="pl-c">#</span> least statistically dependent basis</span>
bbt <span class="pl-k">=</span> <span class="pl-c1">bestbasistree</span>(y, <span class="pl-c1">LSDB</span>())</pre></div>
<p>Given a <code>BitVector</code> representing a best basis tree, one can obtain the corresponding expansion coefficients using <code>bestbasiscoef</code>.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="coef = bestbasiscoef(y, bbt)
"><pre>coef <span class="pl-k">=</span> <span class="pl-c1">bestbasiscoef</span>(y, bbt)</pre></div>
<h2><a id="user-content-local-discriminant-basis" class="anchor" aria-hidden="true" href="#local-discriminant-basis"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Local Discriminant Basis</h2>
<p>Local Discriminant Basis (LDB) is a feature extraction method developed by Naoki Saito.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="X, y = generateclassdata(ClassData(:tri, 5, 5, 5))
wt = wavelet(WT.haar)

f = LocalDiscriminantBasis(wt, top_k=5, n_features=5)
Xt = fit_transform(f, X, y)
"><pre>X, y <span class="pl-k">=</span> <span class="pl-c1">generateclassdata</span>(<span class="pl-c1">ClassData</span>(<span class="pl-c1">:tri</span>, <span class="pl-c1">5</span>, <span class="pl-c1">5</span>, <span class="pl-c1">5</span>))
wt <span class="pl-k">=</span> <span class="pl-c1">wavelet</span>(WT<span class="pl-k">.</span>haar)

f <span class="pl-k">=</span> <span class="pl-c1">LocalDiscriminantBasis</span>(wt, top_k<span class="pl-k">=</span><span class="pl-c1">5</span>, n_features<span class="pl-k">=</span><span class="pl-c1">5</span>)
Xt <span class="pl-k">=</span> <span class="pl-c1">fit_transform</span>(f, X, y)</pre></div>
<h2><a id="user-content-todoby-v020" class="anchor" aria-hidden="true" href="#todoby-v020"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>TODO(By v0.2.0):</h2>
<ul>
<li>Improve webpage "Manual" documentation</li>
</ul>
<h2><a id="user-content-todolong-term" class="anchor" aria-hidden="true" href="#todolong-term"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>TODO(long term):</h2>
<ul>
<li>Inverse Transforms for Shift-Invariant WPT</li>
<li>Better documentation.</li>
</ul>
</article></div>