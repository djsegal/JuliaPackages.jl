<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-flexfloatjl" class="anchor" aria-hidden="true" href="#flexfloatjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>FlexFloat.jl</h1>
<h4></h4>
<h4><a id="user-content-these-are-values-that-stretch-preserve-accuracy" class="anchor" aria-hidden="true" href="#these-are-values-that-stretch-preserve-accuracy"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>These are values that stretch preserve accuracy.</h4>
<p>The underlying representation is an interval with bounds that may be closed (exact) or open (inexact).  An exact bound takes the floating point value given at that boundry to be a precisely accurate quantity.  Two examples of exact quantities are counts and monetary balances. An inexact bound takes the floating point value given at the lower [higher] boundry to be largest [smallest] possible quantity to be included in the bounding value's span.  An inexact bound bound extendes away from the center of the interval, almost reaching the next lower [higher] floating point value.  Inexact bounds cover a real span that is not fully representable with machine floats -- and from that fact tend to follow results with relatively tight bounds.</p>
<p>The package internals handle all of that without additional guidance.  There are four kinds of intervals:</p>
<pre><code>  (a) both bounds are exact (closed): clcl(1,2)
  (b) both bounds are inexact (open): oppp(1,2)
  (c) only the lower bound is exact : clop(1,2)
  (d) only the upper bound is exact : opcl(1,2)
</code></pre>
<p>An exact value of 1 is entered as Exact(1).  Exact is a synonym for clcl.<br>
An interval with exact bounds of zero and one is entered as Exact(0,1).<br>
An inexact value of 3 is entered as Inexact(3).  Inexact is a synonym for opop.<br>
     this indicates any value within the Real range that extends from prevfloat(3) to nextfloat(3) without including either.<br>
The inexact interval Inexact(1,2) indicates any value within the Real range from prevfloat(1) to nextfloat(2), exclusively.</p>
<h4><a id="user-content-any-values-may-exist-in-one-of-two-states" class="anchor" aria-hidden="true" href="#any-values-may-exist-in-one-of-two-states"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Any values may exist in one of two states</h4>
<h6><a id="user-content-states-exact-inexact-are-exported--situated-enhanced-are-the-internal-names" class="anchor" aria-hidden="true" href="#states-exact-inexact-are-exported--situated-enhanced-are-the-internal-names"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>states 'exact', 'inexact' are exported;  'situated', 'enhanced' are the internal names.</h6>
<p><em>This capability exists transparently -- apps that do not need it do not see it.</em></p>
<p>Each Flex may be [re]assigned either of two states and the statefulness persists unless reassigned.
There is no limit on state changes, nor any requirement that states change.  The state is independant of the kind of interval (ClCl, OpOp, ClOp, OpCl); one may create some logical dependance in code. To simplify use,</p>
<pre><code>        clcl(), opop(), clop(), opcl() create values in the 'inexact' stat
        ClCl(), OpOp(), ClOp(), OpCl() create values in the 'exact' state
        (lowercase is used with situated values, titlecase with enhanced values)

   Assignment, determination and utilization of statefulness is entirely given to your application.
   
              op(a,b) where isexact(a)&amp;isinexact(b) and a,b are not of the same sculpture
              is not predefinded, nor are associated conversions .. **encode your intent**.
</code></pre>
<p>The file 'src/type/cvtqualia.jl' has the comparison and conversion defaults for statefulness.</p>
<p>###Quick Guide</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#=</span></span>
<span class="pl-c">   a closed boundry (an exact bound)  is shown with single angle brackets</span>
<span class="pl-c">   an open boundry (an inexact bound) is shown with double angle brackets</span>
<span class="pl-c"></span>
<span class="pl-c">   when the lower bound and the upper bound are equal one number is shown</span>
<span class="pl-c">   when the lower bound and the upper bound are equal, one may use it alone</span>
<span class="pl-c">   </span>
<span class="pl-c">   values in the 'exact' state are tied with '⌁', '~' ties 'inexact' values</span>
<span class="pl-c"><span class="pl-c">=#</span></span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">opop</span>(<span class="pl-c1">1.2345</span>,<span class="pl-c1">1.2346</span>), <span class="pl-c1">ClCl</span>(<span class="pl-c1">1</span>), <span class="pl-c1">clcl</span>(<span class="pl-c1">1</span>,<span class="pl-c1">1</span>), <span class="pl-c1">OpOp</span>(<span class="pl-c1">1.2</span>,<span class="pl-c1">1.2</span>)
(⟪<span class="pl-c1">1.2345</span>⌁<span class="pl-c1">1.2346</span>⟫,⟨<span class="pl-c1">1.0</span>⌁⟩,⟨<span class="pl-c1">1.0</span><span class="pl-k">~</span>⟩,⟪<span class="pl-c1">1.2</span><span class="pl-k">~</span>⟫)

<span class="pl-c"><span class="pl-c">#</span> different sorts of values may be intermixed for arithmetic</span>
julia<span class="pl-k">&gt;</span> a<span class="pl-k">=</span><span class="pl-c1">clcl</span>(<span class="pl-c1">2.0</span>); b<span class="pl-k">=</span><span class="pl-c1">opcl</span>(<span class="pl-c1">1.5</span>, <span class="pl-c1">2.0</span>); a<span class="pl-k">-</span>b, a<span class="pl-k">*</span>b, a<span class="pl-k">/</span>b
(⟪<span class="pl-c1">0.0</span>⌁<span class="pl-c1">0.5</span>⟩,⟪<span class="pl-c1">3.0</span>⌁<span class="pl-c1">4.0</span>⟩,⟪<span class="pl-c1">1.0</span>⌁<span class="pl-c1">1.3333333333333335</span>⟩)

<span class="pl-c"><span class="pl-c">#</span> Flex64 is a typealias, it works like clcl()</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">Flex64</span>(<span class="pl-c1">1.0</span>)
⟨<span class="pl-c1">1.0</span>⌁<span class="pl-c1">2.0</span>⟩
julia<span class="pl-k">&gt;</span> <span class="pl-c1">Flex64</span>(<span class="pl-c1">1.0</span>,<span class="pl-c1">2.0</span>)
⟨<span class="pl-c1">1.0</span>⌁<span class="pl-c1">2.0</span>⟩
</pre></div>
<p>###And More</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span> elementary functions of FlexFloat values</span>
julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> FlexFloat

julia<span class="pl-k">&gt;</span> <span class="pl-c1">exp</span>(<span class="pl-c1">OpOp</span>(<span class="pl-c1">1.0</span>))
⟨<span class="pl-c1">2.7182818284590446</span><span class="pl-k">~</span><span class="pl-c1">2.7182818284590455</span>⟩ <span class="pl-c"><span class="pl-c">#</span> diameter: 8.88e-16</span>

<span class="pl-c"><span class="pl-c">#</span> optionally using CRlibm for more accuracy</span>
julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> CRlibm      <span class="pl-c"><span class="pl-c">#</span> must preceed using FlexFloat</span>
julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> FlexFloat

julia<span class="pl-k">&gt;</span> <span class="pl-c1">exp</span>(<span class="pl-c1">OpOp</span>(<span class="pl-c1">1.0</span>))
⟨<span class="pl-c1">2.718281828459045</span><span class="pl-k">~</span><span class="pl-c1">2.7182818284590455</span>⟩ <span class="pl-c"><span class="pl-c">#</span> diameter: 4.44e-16</span>

<span class="pl-c"><span class="pl-c">#</span> polynomial evaluation at FlexFloat values</span>
julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Polynomials
julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> FlexFloat

julia<span class="pl-k">&gt;</span> p <span class="pl-k">=</span> <span class="pl-c1">Poly</span>([<span class="pl-c1">4.0</span>,<span class="pl-c1">8</span>,<span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">5</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">1</span>]);
julia<span class="pl-k">&gt;</span> <span class="pl-c1">polyval</span>(p,<span class="pl-c1">OpOp</span>(<span class="pl-c1">2.5</span>,<span class="pl-c1">2.5</span><span class="pl-k">+</span><span class="pl-c1">eps</span>(<span class="pl-c1">2.5</span>)))
⟪<span class="pl-c1">10.718749999999991</span><span class="pl-k">~</span><span class="pl-c1">10.718750000000039</span>⟫

<span class="pl-c"><span class="pl-c">#</span> cdf, pdf, quantile at FlexFloat values</span>
<span class="pl-c"><span class="pl-c">#</span> for continuous univariate distributions</span>
julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Distributions  <span class="pl-c"><span class="pl-c">#</span> must preceed using FlexFloat</span>
julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> FlexFloat

julia<span class="pl-k">&gt;</span> ND<span class="pl-k">=</span><span class="pl-c1">normal</span>();
julia<span class="pl-k">&gt;</span> <span class="pl-c1">pdf</span>(ND, <span class="pl-c1">ClCl</span>(<span class="pl-c1">0.999</span>,<span class="pl-c1">0.9995</span>))
⟨<span class="pl-c1">0.24209170987131956</span><span class="pl-k">~</span><span class="pl-c1">0.24221269516298546</span>⟩
julia<span class="pl-k">&gt;</span> <span class="pl-c1">pdf</span>(ND, <span class="pl-c1">OpOp</span>(<span class="pl-c1">0.999</span>,<span class="pl-c1">0.9995</span>))
⟨<span class="pl-c1">0.24209170987131953</span><span class="pl-k">~</span><span class="pl-c1">0.24221269516298546</span>⟩


</pre></div>
<h6><a id="user-content-supports" class="anchor" aria-hidden="true" href="#supports"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>supports</h6>
<pre><code>         (==), (!=), (&lt;), (&lt;=), (&gt;=), (&gt;),
         (+), (-), (*), (/),
         sqrt, exp, log,
         sin, cos, tan, csc, sec, cot,
         asin, acos, atan, acsc, asec, acot,
         sinh, cosh, tanh, csch, sech, coth,
         asinh, acosh, atanh, acsch, asech, acoth,
         erf, erfinv

         when the Distributions package is pre-loaded:
            cdf, pdf, quantile for univariate continuous distributions
</code></pre>
<h6><a id="user-content-references" class="anchor" aria-hidden="true" href="#references"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>References</h6>
<p>(please see doc/References.md for all referenced material and links)</p>
<p>John L. Gustafson, <em>The End of Error: Unum Computing</em><br>
Ulrich Kulisch, <em>Up-to-date Interval Arithmetic</em></p>
</article></div>