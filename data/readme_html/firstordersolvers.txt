<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-firstordersolvers" class="anchor" aria-hidden="true" href="#firstordersolvers"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>FirstOrderSolvers</h1>
<p dir="auto"><a href="https://travis-ci.org/mfalt/FirstOrderSolvers.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/56b684b1f3a74d82d46e66e5cbfdd18b617d9ebe0a156124fc45a5d83c66b297/68747470733a2f2f7472617669732d63692e6f72672f6d66616c742f46697273744f72646572536f6c766572732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/mfalt/FirstOrderSolvers.jl.svg?branch=master" style="max-width: 100%;"></a>
<a href="https://coveralls.io/github/mfalt/FirstOrderSolvers.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/68947d9760cbc17ef91768360344977f2d1348cb36e9808265fb3ea598853c47/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6d66616c742f46697273744f72646572536f6c766572732e6a6c2f62616467652e7376673f6272616e63683d6d617374657226736572766963653d676974687562" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/mfalt/FirstOrderSolvers.jl/badge.svg?branch=master&amp;service=github" style="max-width: 100%;"></a>
<a href="http://codecov.io/github/mfalt/FirstOrderSolvers.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/0a7b4e8b23a331bf7cf1fe9172da05ff28da97c605fc557eaff54333de860a8e/687474703a2f2f636f6465636f762e696f2f6769746875622f6d66616c742f46697273744f72646572536f6c766572732e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/mfalt/FirstOrderSolvers.jl/coverage.svg?branch=master" style="max-width: 100%;"></a></p>
<p dir="auto">Package for large scale convex optimization solvers in julia. This package is intended to allow for easy <strong>implementation</strong>, <strong>testing</strong>, and <strong>running</strong> of solvers through the <a href="https://github.com/JuliaOpt/Convex.jl">Convex.jl</a> interface.
The package is currently under <strong>active development</strong> and uses the <a href="https://github.com/kul-forbes/ProximalOperators.jl">ProximalOperators.jl</a> package to do the low level projections.</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">To run the solvers you need to have the following packages</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Pkg.add(&quot;Convex&quot;)
Pkg.clone(&quot;https://github.com/mfalt/FirstOrderSolvers.jl.git&quot;)"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>Convex<span class="pl-pds">"</span></span>)
Pkg<span class="pl-k">.</span><span class="pl-c1">clone</span>(<span class="pl-s"><span class="pl-pds">"</span>https://github.com/mfalt/FirstOrderSolvers.jl.git<span class="pl-pds">"</span></span>)</pre></div>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<p dir="auto">Define an optimization problem in the format supported by <code>Convex.jl</code>, and supply the desired solver to the <code>solve!</code> function. Exaple using DR for feasibility problems with the <code>GAP</code> solver</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Convex, FirstOrderSolvers
m = 40;  n = 50
A = randn(m, n); b = randn(m, 1)
x = Variable(n)
problem = minimize(sumsquares(A * x - b), [x &gt;= 0])

solve!(problem, GAP(0.5, 2.0, 2.0, max_iters=2000))"><pre><span class="pl-k">using</span> Convex, FirstOrderSolvers
m <span class="pl-k">=</span> <span class="pl-c1">40</span>;  n <span class="pl-k">=</span> <span class="pl-c1">50</span>
A <span class="pl-k">=</span> <span class="pl-c1">randn</span>(m, n); b <span class="pl-k">=</span> <span class="pl-c1">randn</span>(m, <span class="pl-c1">1</span>)
x <span class="pl-k">=</span> <span class="pl-c1">Variable</span>(n)
problem <span class="pl-k">=</span> <span class="pl-c1">minimize</span>(<span class="pl-c1">sumsquares</span>(A <span class="pl-k">*</span> x <span class="pl-k">-</span> b), [x <span class="pl-k">&gt;=</span> <span class="pl-c1">0</span>])

<span class="pl-c1">solve!</span>(problem, <span class="pl-c1">GAP</span>(<span class="pl-c1">0.5</span>, <span class="pl-c1">2.0</span>, <span class="pl-c1">2.0</span>, max_iters<span class="pl-k">=</span><span class="pl-c1">2000</span>))</pre></div>
<h2 dir="auto"><a id="user-content-solvers" class="anchor" aria-hidden="true" href="#solvers"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Solvers</h2>
<p dir="auto">Currently, the available solvers are</p>
<table>
<thead>
<tr>
<th>Solver</th>
<th>Description</th>
<th>Reference</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>GAP(α=0.8, α1=1.8, α2=1.8; kwargs...)</code></td>
<td>Generalized Alternating Projections</td>
<td></td>
</tr>
<tr>
<td><code>DR(α=0.5; kwargs...)</code></td>
<td>Douglas-Rachford (<code>GAP(α, 2.0, 2.0)</code>)</td>
<td>Douglas, Rachford (1956)</td>
</tr>
<tr>
<td><code>AP(α=0.5; kwargs...)</code></td>
<td>Alternating Projections (<code>GAP(α, 1.0, 1.0)</code>)</td>
<td>Agmon (1954), Bregman (1967)</td>
</tr>
<tr>
<td><code>GAPA(α=1.0; kwargs...)</code></td>
<td>GAP Adaptive</td>
<td><a href="https://arxiv.org/abs/1703.10547" rel="nofollow">Fält, Giselsson (2017)</a></td>
</tr>
<tr>
<td><code>FISTA(α=1.0; kwargs...)</code></td>
<td>FISTA</td>
<td>Beck, Teboulle (2009)</td>
</tr>
<tr>
<td><code>Dykstra(; kwargs...)</code></td>
<td>Dykstra</td>
<td>Boyle, Dykstra (1986)</td>
</tr>
<tr>
<td><code>GAPP(α=0.8, α1=1.8, α2=1.8; iproj=100; kwargs...)</code></td>
<td>Projected GAP</td>
<td><a href="https://arxiv.org/abs/1609.05920" rel="nofollow">Fält, Giselsson (2016)</a></td>
</tr>
</tbody>
</table>
<h2 dir="auto"><a id="user-content-keyword-arguments" class="anchor" aria-hidden="true" href="#keyword-arguments"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Keyword Arguments</h2>
<p dir="auto">All solvers accept for the following keyword arguments:</p>
<table>
<thead>
<tr>
<th>Argument</th>
<th>Default</th>
<th>Description (Values)</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>max_iters</code></td>
<td><code>10000</code></td>
<td>Maximum number of iterations</td>
</tr>
<tr>
<td><code>verbose</code></td>
<td><code>1</code></td>
<td>Print verbosity level <code>0,1</code></td>
</tr>
<tr>
<td><code>debug</code></td>
<td><code>1</code></td>
<td>Level of debug data to save <code>0,1,2</code></td>
</tr>
<tr>
<td><code>eps</code></td>
<td><code>1e-5</code></td>
<td>Accuracy of solution</td>
</tr>
<tr>
<td><code>checki</code></td>
<td><code>100</code></td>
<td>Interval for checking convergence</td>
</tr>
</tbody>
</table>
<h2 dir="auto"><a id="user-content-debugging" class="anchor" aria-hidden="true" href="#debugging"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Debugging</h2>
<p dir="auto">If the keyword argument debug is set to <code>1</code> or <code>2</code> the following values will be stored in a <a href="https://github.com/JuliaPackageMirrors/ValueHistories.jl"><code>ValueHistories.MVHistory</code></a> in  <code>problem.model.history</code>, for each iteration the convergence check is run:</p>
<table>
<thead>
<tr>
<th>Name</th>
<th>Debug Level Required</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>:p</code></td>
<td>1</td>
<td>Relative Primal Residual</td>
</tr>
<tr>
<td><code>:d</code></td>
<td>1</td>
<td>Relative Dual Residual</td>
</tr>
<tr>
<td><code>:g</code></td>
<td>1</td>
<td>Relative Duality Gap</td>
</tr>
<tr>
<td><code>:ctx</code></td>
<td>1</td>
<td><code>cᵀx</code></td>
</tr>
<tr>
<td><code>:bty</code></td>
<td>1</td>
<td><code>bᵀy</code></td>
</tr>
<tr>
<td><code>:κ</code></td>
<td>1</td>
<td><code>κ</code></td>
</tr>
<tr>
<td><code>:τ</code></td>
<td>1</td>
<td><code>τ</code></td>
</tr>
<tr>
<td><code>:x</code></td>
<td>2</td>
<td><code>x</code></td>
</tr>
<tr>
<td><code>:y</code></td>
<td>2</td>
<td><code>y</code></td>
</tr>
<tr>
<td><code>:s</code></td>
<td>2</td>
<td><code>s</code></td>
</tr>
</tbody>
</table>
<p dir="auto">These values correspond to the values in the paper <a href="https://arxiv.org/abs/1312.3039" rel="nofollow">Conic Optimization via Operator Splitting and Homogeneous Self-Dual Embedding (O'Donoghue et.al)</a>.</p>
</article></div>