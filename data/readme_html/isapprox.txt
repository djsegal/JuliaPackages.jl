<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p dir="auto"><a href="https://github.com/jlapeyre/IsApprox.jl/actions/workflows/CI.yml?query=branch%3Amain"><img src="https://github.com/jlapeyre/IsApprox.jl/actions/workflows/CI.yml/badge.svg?branch=main" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/jlapeyre/IsApprox.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/d34602ac7e2227bdf48de19cb394fa827d7f06a78c15bbc11c700934f5a4b063/68747470733a2f2f636f6465636f762e696f2f67682f6a6c6170657972652f4973417070726f782e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/jlapeyre/IsApprox.jl/branch/main/graph/badge.svg" style="max-width: 100%;"></a>
<a href="https://github.com/JuliaTesting/Aqua.jl"><img src="https://raw.githubusercontent.com/JuliaTesting/Aqua.jl/master/badge.svg" alt="Aqua QA" style="max-width: 100%;"></a>
<a href="https://github.com/aviatesk/JET.jl"><img src="https://camo.githubusercontent.com/3de76230f538a94a3ea8c5dc7c7abb94992d39a234fbb796184101d790424d9e/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4a45542e6a6c2d2545322539432538382545462542382538462d253233616134343434" alt="JET QA" data-canonical-src="https://img.shields.io/badge/JET.jl-%E2%9C%88%EF%B8%8F-%23aa4444" style="max-width: 100%;"></a></p>
<h1 dir="auto"><a id="user-content-isapprox" class="anchor" aria-hidden="true" href="#isapprox"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>IsApprox</h1>
<h2 dir="auto"><a id="user-content-introduction" class="anchor" aria-hidden="true" href="#introduction"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Introduction</h2>
<p dir="auto"><code>IsApprox</code> implements an interface for applying different definitions of "approximate" in tests for approximate (or exact) equality.
It is also fun and hip.</p>
<p dir="auto">Design requirements of <code>IsApprox</code> are:</p>
<ul dir="auto">
<li>
<p dir="auto">It should provide a drop-in replacement for (and extend) <code>isapprox</code> as well as
several application functions, such as <code>isone</code> and <code>issymmetric</code>.  In
particular, many functions that currently check for a property exactly (to
machine precision) will instead use <code>IsApprox</code> to implement both exact and
approximate comparison.</p>
</li>
<li>
<p dir="auto">Replacements of existing methods (eg. <code>isone(::Float64)</code>) must incur no run-time penalty.
In practice, this means specifying the notion of "approximate" via types, eg <code>Equal</code> and <code>Approx</code>
so that the compiler inlines the comparison code.</p>
</li>
</ul>
<h2 dir="auto"><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Examples</h2>
<p dir="auto">See this <a href="https://github.com/jlapeyre/IsApprox.jl/blob/master/Notebooks/IsApprox.ipynb">Jupyter notebook</a>
for examples. See also the <a href="https://github.com/jlapeyre/IsApprox.jl/blob/master/test/runtests.jl">test suite</a>.</p>
<h2 dir="auto"><a id="user-content-motivation" class="anchor" aria-hidden="true" href="#motivation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Motivation</h2>
<p dir="auto">For some applications, <code>LinearAlgebra</code> wants to know if a matrix is exactly
Hermitian. Quantum information packages, on the other hand, might want to know
if a matrix is approximately (or exactly) Hermitian. Furthermore, many functions that check
whether a property (approximately) holds are interdependent. For example
<code>isdiag</code> calls functions that eventually call <code>iszero</code>. And <code>isposdef</code> calls
<code>ishermitian</code>. Furthermore again, one might want to check approximate equality
in norm; or elementwise. One might want to specify a tolerance and have it
propagate. In practice, packages
tend to reimplement tests in ways that do not satisfy all these criteria,
and fail to be composable.
Such packages include <a href="https://github.com/iitis/QuantumInformation.jl"><code>QuantumInformation</code></a>(
<a href="https://github.com/iitis/QuantumInformation.jl/blob/b47400ebb09d10cc1eba5f7bf06badeb6cfe5429/src/utils.jl#L93-L113">code example</a>)
,
<a href="https://github.com/BBN-Q/QuantumInfo.jl"><code>QuantumInfo</code></a>(
<a href="https://github.com/BBN-Q/QuantumInfo.jl/blob/cbafdc7f295e7d56e41116c5ef4eca9500d45909/src/basics.jl#L248-L255">code example</a>),
and
<a href="https://github.com/QuantumBFS/Yao.jl"><code>Yao</code></a>(
<a href="https://github.com/QuantumBFS/YaoBase.jl/blob/master/src/inspect.jl">code example</a>).
Clearly, a general interface for approximate
equality is needed.</p>
<h2 dir="auto"><a id="user-content-description" class="anchor" aria-hidden="true" href="#description"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Description</h2>
<p dir="auto"><code>IsApprox</code> allows users to specify different definitions of
closeness, via a zero-cost abstraction. That is, specifying the definition of closeness
need not incur a run-time cost.  The code that implements tests for properties such as
symmetry or positivity may then be somewhat decoupled from the specification of
closeness. Furthermore, a simple, small, collection of closeness measures should be
adequate for the vast majority of use cases.</p>
<p dir="auto">Four subtypes of <code>AbstractApprox</code> are included, <code>Equal</code>, <code>Approx</code>, <code>EachApprox</code>, and <code>UpToPhase</code>.</p>
<p dir="auto"><code>IsApprox</code> implements the interface at least partially for each of: <code>isone</code>, <code>iszero</code>, <code>ishermitian</code>, <code>issymmetric</code>,
<code>isreal</code>, <code>isinteger</code>, <code>istriu</code>, <code>istril</code>, <code>isbanded</code>, <code>isdiag</code>, <code>isposdef</code>,
<code>ispossemidef</code>, <code>isunitary</code>, <code>isinvolution</code>, <code>isnormalized</code>, <code>isprobdist</code>.</p>
<p dir="auto">Consider <code>ishermitian</code>.</p>
<ul dir="auto">
<li>
<p dir="auto"><code>ishermitian(A)</code> or equivalently <code>ishermitian(A, Equal())</code> demands exact equality.
This implementation and the function of the same name in <code>LinearAlgebra</code> lower to the same code.
That is, the <code>IsApprox</code> interface adds no performance penalty.</p>
</li>
<li>
<p dir="auto"><code>ishermitian(A, Approx(kws...))</code> has the same semantics as <code>Base.isapprox</code>. In this
case, we test that <code>A</code> is close to Hermitian in some norm. In this case, a separate code
path is required, namely</p>
</li>
</ul>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="ishermitian(A::AbstractMatrix, approx::Approx) = isapprox(approx, A, adjoint(A))"><pre><span class="pl-en">ishermitian</span>(A<span class="pl-k">::</span><span class="pl-c1">AbstractMatrix</span>, approx<span class="pl-k">::</span><span class="pl-c1">Approx</span>) <span class="pl-k">=</span> <span class="pl-c1">isapprox</span>(approx, A, <span class="pl-c1">adjoint</span>(A))</pre></div>
<ul dir="auto">
<li><code>ishermitian(A, EachApprox(kws...))</code>. <code>EachApprox</code> specifies element-wise closeness.
If <code>A</code> is not close to Hermitian, this test is much faster than <code>Approx</code> because
only order <code>1</code> elements must be tested. This implementation shares a code path
with that for <code>Equal</code>.</li>
</ul>
<h2 dir="auto"><a id="user-content-api" class="anchor" aria-hidden="true" href="#api"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>API</h2>
<h3 dir="auto"><a id="user-content-abstractapprox" class="anchor" aria-hidden="true" href="#abstractapprox"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>AbstractApprox</h3>
<p dir="auto"><code>AbstractApprox</code>, <code>Equal</code>, <code>Approx</code>, <code>UpToPhase</code>, and <code>EachApprox</code> are exported.</p>
<h3 dir="auto"><a id="user-content-isapprox-1" class="anchor" aria-hidden="true" href="#isapprox-1"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>isapprox</code></h3>
<p dir="auto">This extends <code>Base.isapprox</code> with methods that take an initial argument of type <code>AbstractApprox</code>.
The application functions below take an optional argument of type <code>AbstractApprox</code> in the final
position and (may) forward this argument to <code>isapprox</code>.</p>
<h3 dir="auto"><a id="user-content-isone-iszero-ishermitian-etc" class="anchor" aria-hidden="true" href="#isone-iszero-ishermitian-etc"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>isone</code>, <code>iszero</code>, <code>ishermitian</code>, etc.</h3>
<p dir="auto">These are not exported, and do not extend the <code>Base</code> and <code>LinearAlgebra</code> functions of the same names.
They take an optional final argument of type <code>AbstractApprox</code>. They are not exported because they
would overwrite existing definitions. However, the <code>AbstractApprox</code> interface could be moved into
<code>Base</code>.</p>
<p dir="auto">There are also functions, which <em>are</em> exported, that are in neither <code>Base</code> nor the standard library, such
as <code>IsApprox.isunitary</code>. These follow the parameter ordering and calling conventions
as <code>IsApprox.isone</code>, etc.</p>
<h2 dir="auto"><a id="user-content-style" class="anchor" aria-hidden="true" href="#style"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Style</h2>
<p dir="auto">This package will probably try to follow the <a href="https://github.com/invenia/BlueStyle">Blue Style Guide</a>.
An important rule is broken immediately: predicates are written <code>isprop</code> rather than <code>is_prop</code>.
And <code>ispropmod1mod2</code> rather than <code>is_prop_mod1_mod2</code>. The main reason is that some of these
functions exist by the same name in <code>Base</code>. And some are very closely related.</p>




</article></div>