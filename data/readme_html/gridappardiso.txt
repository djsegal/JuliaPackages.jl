<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-gridappardiso" class="anchor" aria-hidden="true" href="#gridappardiso"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>GridapPardiso</h1>
<p><a href="https://gridap.github.io/GridapPardiso.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/f7b92a177c912c1cc007fc9b40f17ff3ee3bb414/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://gridap.github.io/GridapPardiso.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/3e353c26ddfe819150acbc732248f4f2a37f5175/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a>
<a href="https://travis-ci.com/gridap/GridapPardiso.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/15c09380ce7a23ccf985a95466bafbdce9116c6a/68747470733a2f2f7472617669732d63692e636f6d2f6772696461702f4772696461705061726469736f2e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/gridap/GridapPardiso.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/gridap/GridapPardiso.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/2d318f68acc0c7fb07170ee4c6b6af7f439c20ae/68747470733a2f2f636f6465636f762e696f2f67682f6772696461702f4772696461705061726469736f2e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/gridap/GridapPardiso.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p><a href="https://github.com/gridap/Gridap.jl">Gridap</a> (Grid-based approximation of partial differential equations in Julia) plugin to use the <a href="https://software.intel.com/en-us/mkl-developer-reference-fortran-intel-mkl-pardiso-parallel-direct-sparse-solver-interface" rel="nofollow">Intel Pardiso MKL direct sparse solver</a>.</p>
<h2><a id="user-content-basic-usage" class="anchor" aria-hidden="true" href="#basic-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Basic Usage</h2>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> Gridap
<span class="pl-k">using</span> GridapPardiso
A <span class="pl-k">=</span> <span class="pl-c1">sparse</span>([<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>,<span class="pl-c1">4</span>,<span class="pl-c1">5</span>],[<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>,<span class="pl-c1">4</span>,<span class="pl-c1">5</span>],[<span class="pl-c1">1.0</span>,<span class="pl-c1">2.0</span>,<span class="pl-c1">3.0</span>,<span class="pl-c1">4.0</span>,<span class="pl-c1">5.0</span>])
b <span class="pl-k">=</span> <span class="pl-c1">ones</span>(A<span class="pl-k">.</span>n)
x <span class="pl-k">=</span> <span class="pl-c1">similar</span>(b)
msglvl <span class="pl-k">=</span> <span class="pl-c1">1</span>
ps <span class="pl-k">=</span> <span class="pl-c1">PardisoSolver</span>(GridapPardiso<span class="pl-k">.</span>MTYPE_REAL_NON_SYMMETRIC, <span class="pl-c1">new_iparm</span>(A), msglvl)
ss <span class="pl-k">=</span> <span class="pl-c1">symbolic_setup</span>(ps, A)
ns <span class="pl-k">=</span> <span class="pl-c1">numerical_setup</span>(ss, A)
<span class="pl-c1">solve!</span>(x, ns, b)</pre></div>
<h2><a id="user-content-usage-in-a-finite-element-computation" class="anchor" aria-hidden="true" href="#usage-in-a-finite-element-computation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage in a Finite Element computation</h2>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> Gridap
<span class="pl-k">using</span> GridapPardiso

<span class="pl-c"><span class="pl-c">#</span> Define the FE problem</span>
<span class="pl-c"><span class="pl-c">#</span> -Δu = x*y in (0,1)^3, u = 0 on the boundary.</span>

model <span class="pl-k">=</span> <span class="pl-c1">CartesianDiscreteModel</span>((<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>), (<span class="pl-c1">10</span>,<span class="pl-c1">10</span>,<span class="pl-c1">10</span>))

V <span class="pl-k">=</span> <span class="pl-c1">TestFESpace</span>(reffe<span class="pl-k">=</span><span class="pl-c1">:Lagrangian</span>, order<span class="pl-k">=</span><span class="pl-c1">1</span>, valuetype<span class="pl-k">=</span>Float64,
  conformity<span class="pl-k">=</span><span class="pl-c1">:H1</span>, model<span class="pl-k">=</span>model, dirichlet_tags<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>boundary<span class="pl-pds">"</span></span>)

U <span class="pl-k">=</span> <span class="pl-c1">TrialFESpace</span>(V)

trian <span class="pl-k">=</span> <span class="pl-c1">get_triangulation</span>(model)
quad <span class="pl-k">=</span> <span class="pl-c1">CellQuadrature</span>(trian,<span class="pl-c1">2</span>)

t_Ω <span class="pl-k">=</span> <span class="pl-c1">AffineFETerm</span>(
  (u,v) <span class="pl-k">-&gt;</span> <span class="pl-c1">inner</span>(<span class="pl-c1">∇</span>(v),<span class="pl-c1">∇</span>(u)),
  (v) <span class="pl-k">-&gt;</span> <span class="pl-c1">inner</span>(v, (x) <span class="pl-k">-&gt;</span> x[<span class="pl-c1">1</span>]<span class="pl-k">*</span>x[<span class="pl-c1">2</span>] ),
  trian, quad)

op <span class="pl-k">=</span> <span class="pl-c1">AffineFEOperator</span>(SparseMatrixCSR{<span class="pl-c1">1</span>,Float64,Int},U,V,t_Ω)

ls <span class="pl-k">=</span> <span class="pl-c1">PardisoSolver</span>(op)
solver <span class="pl-k">=</span> <span class="pl-c1">LinearFESolver</span>(ls)

uh <span class="pl-k">=</span> <span class="pl-c1">solve</span>(solver,op)</pre></div>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p><strong>GridPardiso</strong> itself is installed when you add and use it into another project.</p>
<p>First, ensure that your system fulfill the requirements (see instructions below). Only after these steps, to include into your project form Julia REPL, use the following commands:</p>
<pre><code>pkg&gt; add GridapPardiso
julia&gt; using GridapPardiso
</code></pre>
<p>If, for any reason, you need to manually build the project (e.g., you added the project with the wrong environment resulting a build that fails, you have fixed the environment and want to re-build the project), write down the following commands in Julia REPL:</p>
<pre><code>pkg&gt; add GridapPardiso
pkg&gt; build GridPardiso
julia&gt; using GridapPardiso
</code></pre>
<h3><a id="user-content-requirements" class="anchor" aria-hidden="true" href="#requirements"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Requirements</h3>
<ul>
<li><code>MKLROOT</code> environment variable must be set pointing to the MKL installation root directory.</li>
<li><code>gcc</code> compiler must be installed and accessible in your system.</li>
<li><code>OpenMP</code> library (<code>libgomp1</code> in linux OS) must be installed and accesible in your system.</li>
</ul>
<p><strong>GridapPardiso</strong> relies on <a href="https://software.intel.com/en-us/mkl-developer-reference-fortran-intel-mkl-pardiso-parallel-direct-sparse-solver-interface" rel="nofollow">Intel Pardiso MKL direct sparse solver</a>. So, you need it in order to be able to use <strong>GridPardiso</strong>.</p>
<p><a href="https://software.intel.com/en-us/mkl" rel="nofollow">Intel MKL</a> includes <code>/opt/intel/mkl/bin/mklvars.sh</code> script to setup the correct environment to use it. We strongly recommend to run this script as follows:</p>
<pre><code>$ source /opt/intel/mkl/bin/mklvars.sh intel64
</code></pre>
<p>This script setup the <code>MKLROOT</code> environment variable required by <strong>GridapPardiso</strong> to build it correctly.</p>
<p>In addition, please make sure that <a href="https://www.openmp.org/" rel="nofollow">OpenMP</a> is installed. We use the default distribution package that is installed together with <code>GCC</code> compilers in Linux environments.</p>
<p>To fullfil this requirements, in a debian-based OS, we recommend install the following packages:</p>
<pre><code>$ apt-get update
$ apt-get install -y gcc libgomp1
</code></pre>
</article></div>