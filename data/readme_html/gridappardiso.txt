<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-gridappardiso" class="anchor" aria-hidden="true" href="#gridappardiso"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>GridapPardiso</h1>
<p><a href="https://gridap.github.io/GridapPardiso.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://gridap.github.io/GridapPardiso.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a>
<a href="https://travis-ci.com/gridap/GridapPardiso.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/f250ad4a289c1264c9930508124564d15d800d4ceeb0c50d388e044f50787dfd/68747470733a2f2f7472617669732d63692e636f6d2f6772696461702f4772696461705061726469736f2e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/gridap/GridapPardiso.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/gridap/GridapPardiso.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/4396d89f865652d13af7fa263a639fa23252ef60a8f2d1dc94ad4339eb26b8ba/68747470733a2f2f636f6465636f762e696f2f67682f6772696461702f4772696461705061726469736f2e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/gridap/GridapPardiso.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p><a href="https://github.com/gridap/Gridap.jl">Gridap</a> (Grid-based approximation of partial differential equations in Julia) plugin to use the <a href="https://software.intel.com/en-us/mkl-developer-reference-fortran-intel-mkl-pardiso-parallel-direct-sparse-solver-interface" rel="nofollow">Intel Pardiso MKL direct sparse solver</a>.</p>
<h2><a id="user-content-basic-usage" class="anchor" aria-hidden="true" href="#basic-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Basic Usage</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Gridap
using GridapPardiso
A = sparse([1,2,3,4,5],[1,2,3,4,5],[1.0,2.0,3.0,4.0,5.0])
b = ones(A.n)
x = similar(b)
msglvl = 1
ps = PardisoSolver(GridapPardiso.MTYPE_REAL_NON_SYMMETRIC, new_iparm(A), msglvl)
ss = symbolic_setup(ps, A)
ns = numerical_setup(ss, A)
solve!(x, ns, b)
"><pre><span class="pl-k">using</span> Gridap
<span class="pl-k">using</span> GridapPardiso
A <span class="pl-k">=</span> <span class="pl-c1">sparse</span>([<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>,<span class="pl-c1">4</span>,<span class="pl-c1">5</span>],[<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>,<span class="pl-c1">4</span>,<span class="pl-c1">5</span>],[<span class="pl-c1">1.0</span>,<span class="pl-c1">2.0</span>,<span class="pl-c1">3.0</span>,<span class="pl-c1">4.0</span>,<span class="pl-c1">5.0</span>])
b <span class="pl-k">=</span> <span class="pl-c1">ones</span>(A<span class="pl-k">.</span>n)
x <span class="pl-k">=</span> <span class="pl-c1">similar</span>(b)
msglvl <span class="pl-k">=</span> <span class="pl-c1">1</span>
ps <span class="pl-k">=</span> <span class="pl-c1">PardisoSolver</span>(GridapPardiso<span class="pl-k">.</span>MTYPE_REAL_NON_SYMMETRIC, <span class="pl-c1">new_iparm</span>(A), msglvl)
ss <span class="pl-k">=</span> <span class="pl-c1">symbolic_setup</span>(ps, A)
ns <span class="pl-k">=</span> <span class="pl-c1">numerical_setup</span>(ss, A)
<span class="pl-c1">solve!</span>(x, ns, b)</pre></div>
<h2><a id="user-content-usage-in-a-finite-element-computation" class="anchor" aria-hidden="true" href="#usage-in-a-finite-element-computation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage in a Finite Element computation</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Gridap
using GridapPardiso

# Define the FE problem
# -Δu = x*y in (0,1)^3, u = 0 on the boundary.

model = CartesianDiscreteModel((0,1,0,1,0,1), (10,10,10))

V = TestFESpace(reffe=:Lagrangian, order=1, valuetype=Float64,
  conformity=:H1, model=model, dirichlet_tags=&quot;boundary&quot;)

U = TrialFESpace(V)

trian = get_triangulation(model)
quad = CellQuadrature(trian,2)

t_Ω = AffineFETerm(
  (u,v) -&gt; inner(∇(v),∇(u)),
  (v) -&gt; inner(v, (x) -&gt; x[1]*x[2] ),
  trian, quad)

op = AffineFEOperator(SparseMatrixCSR{1,Float64,Int},U,V,t_Ω)

ls = PardisoSolver(op)
solver = LinearFESolver(ls)

uh = solve(solver,op)
"><pre><span class="pl-k">using</span> Gridap
<span class="pl-k">using</span> GridapPardiso

<span class="pl-c"><span class="pl-c">#</span> Define the FE problem</span>
<span class="pl-c"><span class="pl-c">#</span> -Δu = x*y in (0,1)^3, u = 0 on the boundary.</span>

model <span class="pl-k">=</span> <span class="pl-c1">CartesianDiscreteModel</span>((<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>), (<span class="pl-c1">10</span>,<span class="pl-c1">10</span>,<span class="pl-c1">10</span>))

V <span class="pl-k">=</span> <span class="pl-c1">TestFESpace</span>(reffe<span class="pl-k">=</span><span class="pl-c1">:Lagrangian</span>, order<span class="pl-k">=</span><span class="pl-c1">1</span>, valuetype<span class="pl-k">=</span>Float64,
  conformity<span class="pl-k">=</span><span class="pl-c1">:H1</span>, model<span class="pl-k">=</span>model, dirichlet_tags<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>boundary<span class="pl-pds">"</span></span>)

U <span class="pl-k">=</span> <span class="pl-c1">TrialFESpace</span>(V)

trian <span class="pl-k">=</span> <span class="pl-c1">get_triangulation</span>(model)
quad <span class="pl-k">=</span> <span class="pl-c1">CellQuadrature</span>(trian,<span class="pl-c1">2</span>)

t_Ω <span class="pl-k">=</span> <span class="pl-c1">AffineFETerm</span>(
  (u,v) <span class="pl-k">-&gt;</span> <span class="pl-c1">inner</span>(<span class="pl-c1">∇</span>(v),<span class="pl-c1">∇</span>(u)),
  (v) <span class="pl-k">-&gt;</span> <span class="pl-c1">inner</span>(v, (x) <span class="pl-k">-&gt;</span> x[<span class="pl-c1">1</span>]<span class="pl-k">*</span>x[<span class="pl-c1">2</span>] ),
  trian, quad)

op <span class="pl-k">=</span> <span class="pl-c1">AffineFEOperator</span>(SparseMatrixCSR{<span class="pl-c1">1</span>,Float64,Int},U,V,t_Ω)

ls <span class="pl-k">=</span> <span class="pl-c1">PardisoSolver</span>(op)
solver <span class="pl-k">=</span> <span class="pl-c1">LinearFESolver</span>(ls)

uh <span class="pl-k">=</span> <span class="pl-c1">solve</span>(solver,op)</pre></div>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p><strong>GridPardiso</strong> itself is installed when you add and use it into another project.</p>
<p>First, ensure that your system fulfills the requirements (see instructions below). Only after these steps, to include into your project from the Julia REPL, use the following commands:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="pkg&gt; add GridapPardiso
julia&gt; using GridapPardiso
"><pre><code>pkg&gt; add GridapPardiso
julia&gt; using GridapPardiso
</code></pre></div>
<p>If, for any reason, you need to manually build the project (e.g., you added the project with the wrong environment resulting in a build that fails, you have fixed the environment and want to re-build the project), write down the following commands in Julia REPL:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="pkg&gt; add GridapPardiso
pkg&gt; build GridPardiso
julia&gt; using GridapPardiso
"><pre><code>pkg&gt; add GridapPardiso
pkg&gt; build GridPardiso
julia&gt; using GridapPardiso
</code></pre></div>
<h3><a id="user-content-requirements" class="anchor" aria-hidden="true" href="#requirements"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Requirements</h3>
<p><strong>GridapPardiso</strong> requires the following software to be installed on your system:</p>
<ol>
<li>Intel MKL library. In particular, <strong>GridapPardiso</strong> relies on the
<a href="https://software.intel.com/en-us/mkl-developer-reference-fortran-intel-mkl-pardiso-parallel-direct-sparse-solver-interface" rel="nofollow">Intel Pardiso MKL direct sparse solver</a>.</li>
<li>GNU C compiler (<code>gcc</code>) + GNU <code>OpenMP</code> library (<code>libgomp</code>).</li>
</ol>
<p>In order to find 1., the build system of <strong>GridapPardiso</strong> relies on the <code>MKLROOT</code> environment variable. This variable must point to the MKL installation directory on your system. <a href="https://software.intel.com/en-us/mkl" rel="nofollow">Intel MKL</a> includes the <code>mklvars.sh</code> Unix shell script in order to set up appropriately this environment variable. Assuming that <code>/opt/intel/mkl/</code> is the Intel MKL installation directory on your system, you have to run this script using the following command (most preferably in a script that is executed automatically when a new shell is opened):</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="$ source /opt/intel/mkl/bin/mklvars.sh intel64
"><pre><code>$ source /opt/intel/mkl/bin/mklvars.sh intel64
</code></pre></div>
<p>In order to find 2., there are two alternatives:</p>
<ul>
<li>The user may optionally set the <code>GRIDAP_PARDISO_LIBGOMP_DIR</code> environment variable. This variable must contain the absolute path to the folder in which the <code>libgomp</code> dynamic library file resides on your system.</li>
<li>The build system tries to do its best to find <code>libgomp</code> on the system.</li>
</ul>
<p>If <code>GRIDAP_PARDISO_LIBGOMP_DIR</code> is defined, then the build system follows the first alternative. If not, then it follows the second. Thus, the environment variable has precedence over the default behaviour of trying to find the library automatically.</p>
<p>In general, the user may let the build system to find <code>libgomp</code> in the first place. If the build system fails, or it finds an undesired version of <code>libgomp</code>, then the environment variable can be used as a fallback solution, e.g., for those systems with a non-standard installation of <code>libgomp</code>, and/or several simultaneous installations of <code>libgomp</code>.</p>
<p>We note that, in Debian-based Linux OSs, the following commands can be installed in order to satisfy requirement 2. (typically executed as sudo):</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="$ apt-get update
$ apt-get install -y gcc libgomp1
"><pre><code>$ apt-get update
$ apt-get install -y gcc libgomp1
</code></pre></div>
<p>In such systems, the build system is able to automatically find <code>libgomp</code>.</p>
</article></div>