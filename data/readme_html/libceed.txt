<div id="readme" class="rst" data-path="README.rst"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-libceed-the-ceed-library" class="anchor" aria-hidden="true" href="#libceed-the-ceed-library"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>libCEED: the CEED Library</h1>
<a href="https://github.com/CEED/libCEED/actions"><img alt="GitHub Actions" src="https://github.com/CEED/libCEED/workflows/C/Fortran/badge.svg" style="max-width:100%;">
</a>
<a href="https://gitlab.com/libceed/libCEED/-/pipelines?page=1&amp;scope=all&amp;ref=main" rel="nofollow"><img alt="GitLab-CI" src="https://camo.githubusercontent.com/c34a424f15640056c1eb9caef7c932e510ade76a93766463740243ecefe9aabd/68747470733a2f2f6769746c61622e636f6d2f6c6962636565642f6c6962434545442f6261646765732f6d61696e2f706970656c696e652e7376673f6b65795f746578743d4769744c61622d4349" data-canonical-src="https://gitlab.com/libceed/libCEED/badges/main/pipeline.svg?key_text=GitLab-CI" style="max-width:100%;"></a>
<a href="https://dev.azure.com/CEED-ECP/libCEED/_build?definitionId=2" rel="nofollow"><img alt="Azure Pipelines" src="https://camo.githubusercontent.com/48999dccc66919a6a27913accc606b83113241aa291480f47ab1d5e536c1c1a4/68747470733a2f2f6465762e617a7572652e636f6d2f434545442d4543502f6c6962434545442f5f617069732f6275696c642f7374617475732f434545442e6c6962434545443f6272616e63684e616d653d6d61696e" data-canonical-src="https://dev.azure.com/CEED-ECP/libCEED/_apis/build/status/CEED.libCEED?branchName=main" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/CEED/libCEED/" rel="nofollow"><img alt="Code Coverage" src="https://camo.githubusercontent.com/81fad5765bd84f9ba5234daa0e519206f0487bc572155ad1933c5a2860deeec8/68747470733a2f2f636f6465636f762e696f2f67682f434545442f6c6962434545442f6272616e63682f6d61696e2f6772617068732f62616467652e737667" data-canonical-src="https://codecov.io/gh/CEED/libCEED/branch/main/graphs/badge.svg" style="max-width:100%;">
</a>
<a href="https://opensource.org/licenses/BSD-2-Clause" rel="nofollow"><img alt="License" src="https://camo.githubusercontent.com/6329ad11a39c9adff3158e6eeea1fe1fdab471c9f3d4a01aa6035e66797f2bae/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d425344253230322d2d436c617573652d6f72616e67652e737667" data-canonical-src="https://img.shields.io/badge/License-BSD%202--Clause-orange.svg" style="max-width:100%;">
</a>
<a href="https://libceed.readthedocs.io/en/latest/?badge=latest" rel="nofollow"><img alt="Read the Docs" src="https://camo.githubusercontent.com/da5ae8a07b81567b5de9212e4f311dc7902214fb1f5cd54d41a82a44eb352990/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f6c6962636565642f62616467652f3f76657273696f6e3d6c6174657374" data-canonical-src="https://readthedocs.org/projects/libceed/badge/?version=latest" style="max-width:100%;"></a>
<a href="https://mybinder.org/v2/gh/CEED/libCEED/main?urlpath=lab/tree/examples/tutorials/tutorial-0-ceed.ipynb" rel="nofollow"><img alt="Binder" src="https://camo.githubusercontent.com/bcad2ee3e04d735b2ddc5d5641031944e2aaa3f4e9c1aacc4c2edeec025972c9/687474703a2f2f6d7962696e6465722e6f72672f62616467655f6c6f676f2e737667" data-canonical-src="http://mybinder.org/badge_logo.svg" style="max-width:100%;">
</a>
<a name="user-content-code-for-efficient-extensible-discretization"></a>
<h2><a id="user-content-code-for-efficient-extensible-discretization" class="anchor" aria-hidden="true" href="#code-for-efficient-extensible-discretization"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Code for Efficient Extensible Discretization</h2>
<p>This repository contains an initial low-level API library for the efficient
high-order discretization methods developed by the ECP co-design
<a href="http://ceed.exascaleproject.org" rel="nofollow">Center for Efficient Exascale Discretizations (CEED)</a>.
While our focus is on high-order finite elements, the approach is mostly
algebraic and thus applicable to other discretizations in factored form, as
explained in the <a href="https://libceed.readthedocs.io/en/latest/" rel="nofollow">user manual</a> and
API implementation portion of the
<a href="https://libceed.readthedocs.io/en/latest/api/" rel="nofollow">documentation</a>.</p>
<p>One of the challenges with high-order methods is that a global sparse matrix is
no longer a good representation of a high-order linear operator, both with
respect to the FLOPs needed for its evaluation, as well as the memory transfer
needed for a matvec.  Thus, high-order methods require a new "format" that still
represents a linear (or more generally non-linear) operator, but not through a
sparse matrix.</p>
<p>The goal of libCEED is to propose such a format, as well as supporting
implementations and data structures, that enable efficient operator evaluation
on a variety of computational device types (CPUs, GPUs, etc.). This new operator
description is based on algebraically
<a href="https://libceed.readthedocs.io/en/latest/libCEEDapi/#finite-element-operator-decomposition" rel="nofollow">factored form</a>,
which is easy to incorporate in a wide variety of applications, without significant
refactoring of their own discretization infrastructure.</p>
<p>The repository is part of the
<a href="http://ceed.exascaleproject.org/software/" rel="nofollow">CEED software suite</a>, a collection of
software benchmarks, miniapps, libraries and APIs for efficient exascale
discretizations based on high-order finite element and spectral element methods.
See <a href="http://github.com/ceed">http://github.com/ceed</a> for more information and source code availability.</p>
<p>The CEED research is supported by the
<a href="https://exascaleproject.org/exascale-computing-project" rel="nofollow">Exascale Computing Project</a>
(17-SC-20-SC), a collaborative effort of two U.S. Department of Energy
organizations (Office of Science and the National Nuclear Security
Administration) responsible for the planning and preparation of a
<a href="https://exascaleproject.org/what-is-exascale" rel="nofollow">capable exascale ecosystem</a>, including
software, applications, hardware, advanced system engineering and early testbed
platforms, in support of the nationâ€™s exascale computing imperative.</p>
<p>For more details on the CEED API see the <a href="https://libceed.readthedocs.io/en/latest/" rel="nofollow">user manual</a>.</p>
<a name="user-content-building"></a>
<h2><a id="user-content-building" class="anchor" aria-hidden="true" href="#building"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Building</h2>
<p>The CEED library, <code>libceed</code>, is a C99 library with no required dependencies, and
with Fortran, Python, Julia, and Rust interfaces.  It can be built using:</p>
<pre>make
</pre>
<p>or, with optimization flags:</p>
<pre>make OPT='-O3 -march=skylake-avx512 -ffp-contract=fast'
</pre>
<p>These optimization flags are used by all languages (C, C++, Fortran) and this
makefile variable can also be set for testing and examples (below).</p>
<p>The library attempts to automatically detect support for the AVX
instruction set using gcc-style compiler options for the host.
Support may need to be manually specified via:</p>
<pre>make AVX=1
</pre>
<p>or:</p>
<pre>make AVX=0
</pre>
<p>if your compiler does not support gcc-style options, if you are cross
compiling, etc.</p>
<p>To enable CUDA support, add <code>CUDA_DIR=/opt/cuda</code> or an appropriate directory
to your <code>make</code> invocation. To enable HIP support, add <code>HIP_DIR=/opt/rocm</code> or
an appropriate directory. To store these or other arguments as defaults for
future invocations of <code>make</code>, use:</p>
<pre>make configure CUDA_DIR=/usr/local/cuda HIP_DIR=/opt/rocm OPT='-O3 -march=znver2'
</pre>
<p>which stores these variables in <code>config.mk</code>.</p>
<a name="user-content-additional-language-interfaces"></a>
<h2><a id="user-content-additional-language-interfaces" class="anchor" aria-hidden="true" href="#additional-language-interfaces"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Additional Language Interfaces</h2>
<p>The Fortran interface is built alongside the library automatically.</p>
<p>Python users can install using:</p>
<pre>pip install libceed
</pre>
<p>or in a clone of the repository via <code>pip install .</code>.</p>
<p>Julia users can install using:</p>
<pre>$ julia
julia&gt; ]
pkg&gt; add LibCEED
</pre>
<p>in the Julia package manager or in a clone of the repository via:</p>
<pre>JULIA_LIBCEED_LIB=/path/to/libceed.so julia
julia&gt; # press ] to enter package manager
(env) pkg&gt; build LibCEED
</pre>
<p>Rust users can include libCEED via <code>Cargo.toml</code>:</p>
<div class="highlight highlight-source-toml position-relative" data-snippet-clipboard-copy-content="[dependencies]
libceed = { git = &quot;https://github.com/CEED/libCEED&quot;, branch = &quot;main&quot; }
"><pre>[<span class="pl-en">dependencies</span>]
<span class="pl-smi">libceed</span> = { <span class="pl-smi">git</span> = <span class="pl-s"><span class="pl-pds">"</span>https://github.com/CEED/libCEED<span class="pl-pds">"</span></span>, <span class="pl-smi">branch</span> = <span class="pl-s"><span class="pl-pds">"</span>main<span class="pl-pds">"</span></span> }</pre></div>
<p>See the <a href="https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories" rel="nofollow">Cargo documentation</a> for details.</p>
<a name="user-content-testing"></a>
<h2><a id="user-content-testing" class="anchor" aria-hidden="true" href="#testing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Testing</h2>
<p>The test suite produces <a href="https://testanything.org" rel="nofollow">TAP</a> output and is run by:</p>
<pre>make test
</pre>
<p>or, using the <code>prove</code> tool distributed with Perl (recommended):</p>
<pre>make prove
</pre>
<a name="user-content-backends"></a>
<h2><a id="user-content-backends" class="anchor" aria-hidden="true" href="#backends"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Backends</h2>
<p>There are multiple supported backends, which can be selected at runtime in the examples:</p>
<table>





<tbody valign="top">
<tr><td>CEED resource</td>
<td>Backend</td>
<td>Deterministic Capable</td>
</tr>
<tr><td colspan="3">CPU Native Backends</td>
</tr>
<tr><td><code>/cpu/self/ref/serial</code></td>
<td>Serial reference implementation</td>
<td>Yes</td>
</tr>
<tr><td><code>/cpu/self/ref/blocked</code></td>
<td>Blocked reference implementation</td>
<td>Yes</td>
</tr>
<tr><td><code>/cpu/self/opt/serial</code></td>
<td>Serial optimized C implementation</td>
<td>Yes</td>
</tr>
<tr><td><code>/cpu/self/opt/blocked</code></td>
<td>Blocked optimized C implementation</td>
<td>Yes</td>
</tr>
<tr><td><code>/cpu/self/avx/serial</code></td>
<td>Serial AVX implementation</td>
<td>Yes</td>
</tr>
<tr><td><code>/cpu/self/avx/blocked</code></td>
<td>Blocked AVX implementation</td>
<td>Yes</td>
</tr>
<tr><td colspan="3">CPU Valgrind Backends</td>
</tr>
<tr><td><code>/cpu/self/memcheck/*</code></td>
<td>Memcheck backends, undefined value checks</td>
<td>Yes</td>
</tr>
<tr><td colspan="3">CPU LIBXSMM Backends</td>
</tr>
<tr><td><code>/cpu/self/xsmm/serial</code></td>
<td>Serial LIBXSMM implementation</td>
<td>Yes</td>
</tr>
<tr><td><code>/cpu/self/xsmm/blocked</code></td>
<td>Blocked LIBXSMM implementation</td>
<td>Yes</td>
</tr>
<tr><td colspan="3">CUDA Native Backends</td>
</tr>
<tr><td><code>/gpu/cuda/ref</code></td>
<td>Reference pure CUDA kernels</td>
<td>Yes</td>
</tr>
<tr><td><code>/gpu/cuda/shared</code></td>
<td>Optimized pure CUDA kernels using shared memory</td>
<td>Yes</td>
</tr>
<tr><td><code>/gpu/cuda/gen</code></td>
<td>Optimized pure CUDA kernels using code generation</td>
<td>No</td>
</tr>
<tr><td colspan="3">HIP Native Backends</td>
</tr>
<tr><td><code>/gpu/hip/ref</code></td>
<td>Reference pure HIP kernels</td>
<td>Yes</td>
</tr>
<tr><td><code>/gpu/hip/shared</code></td>
<td>Optimized pure HIP kernels using shared memory</td>
<td>Yes</td>
</tr>
<tr><td><code>/gpu/hip/gen</code></td>
<td>Optimized pure HIP kernels using code generation</td>
<td>No</td>
</tr>
<tr><td colspan="3">MAGMA Backends</td>
</tr>
<tr><td><code>/gpu/cuda/magma</code></td>
<td>CUDA MAGMA kernels</td>
<td>No</td>
</tr>
<tr><td><code>/gpu/cuda/magma/det</code></td>
<td>CUDA MAGMA kernels</td>
<td>Yes</td>
</tr>
<tr><td><code>/gpu/hip/magma</code></td>
<td>HIP MAGMA kernels</td>
<td>No</td>
</tr>
<tr><td><code>/gpu/hip/magma/det</code></td>
<td>HIP MAGMA kernels</td>
<td>Yes</td>
</tr>
<tr><td colspan="3">OCCA Backends</td>
</tr>
<tr><td><code>/*/occa</code></td>
<td>Selects backend based on available OCCA modes</td>
<td>Yes</td>
</tr>
<tr><td><code>/cpu/self/occa</code></td>
<td>OCCA backend with serial CPU kernels</td>
<td>Yes</td>
</tr>
<tr><td><code>/cpu/openmp/occa</code></td>
<td>OCCA backend with OpenMP kernels</td>
<td>Yes</td>
</tr>
<tr><td><code>/gpu/cuda/occa</code></td>
<td>OCCA backend with CUDA kernels</td>
<td>Yes</td>
</tr>
<tr><td><code>/gpu/hip/occa</code></td>
<td>OCCA backend with HIP kernels</td>
<td>Yes</td>
</tr>
</tbody>
</table>
<p>The <code>/cpu/self/*/serial</code> backends process one element at a time and are intended for meshes
with a smaller number of high order elements. The <code>/cpu/self/*/blocked</code> backends process
blocked batches of eight interlaced elements and are intended for meshes with higher numbers
of elements.</p>
<p>The <code>/cpu/self/ref/*</code> backends are written in pure C and provide basic functionality.</p>
<p>The <code>/cpu/self/opt/*</code> backends are written in pure C and use partial e-vectors to improve performance.</p>
<p>The <code>/cpu/self/avx/*</code> backends rely upon AVX instructions to provide vectorized CPU performance.</p>
<p>The <code>/cpu/self/memcheck/*</code> backends rely upon the <a href="http://valgrind.org/" rel="nofollow">Valgrind</a> Memcheck tool
to help verify that user QFunctions have no undefined values. To use, run your code with
Valgrind and the Memcheck backends, e.g. <code>valgrind ./build/ex1 -ceed /cpu/self/ref/memcheck</code>. A
'development' or 'debugging' version of Valgrind with headers is required to use this backend.
This backend can be run in serial or blocked mode and defaults to running in the serial mode
if <code>/cpu/self/memcheck</code> is selected at runtime.</p>
<p>The <code>/cpu/self/xsmm/*</code> backends rely upon the <a href="http://github.com/hfp/libxsmm">LIBXSMM</a> package
to provide vectorized CPU performance. If linking MKL and LIBXSMM is desired but
the Makefile is not detecting <code>MKLROOT</code>, linking libCEED against MKL can be
forced by setting the environment variable <code>MKL=1</code>.</p>
<p>The <code>/gpu/cuda/*</code> backends provide GPU performance strictly using CUDA.</p>
<p>The <code>/gpu/hip/*</code> backends provide GPU performance strictly using HIP. They are based on
the <code>/gpu/cuda/*</code> backends.  ROCm version 3.5 or newer is required.</p>
<p>The <code>/gpu/*/magma/*</code> backends rely upon the <a href="https://bitbucket.org/icl/magma" rel="nofollow">MAGMA</a> package.
To enable the MAGMA backends, the environment variable <code>MAGMA_DIR</code> must point to the top-level
MAGMA directory, with the MAGMA library located in <code>$(MAGMA_DIR)/lib/</code>.
By default, <code>MAGMA_DIR</code> is set to <code>../magma</code>; to build the MAGMA backends
with a MAGMA installation located elsewhere, create a link to <code>magma/</code> in libCEED's parent
directory, or set <code>MAGMA_DIR</code> to the proper location.  MAGMA version 2.5.0 or newer is required.
Currently, each MAGMA library installation is only built for either CUDA or HIP.  The corresponding
set of libCEED backends (<code>/gpu/cuda/magma/*</code> or <code>/gpu/hip/magma/*</code>) will automatically be built
for the version of the MAGMA library found in <code>MAGMA_DIR</code>.</p>
<p>Users can specify a device for all CUDA, HIP, and MAGMA backends through adding :device_id=#
after the resource name.  For example:</p>
<blockquote>
<ul>
<li>/gpu/cuda/gen:device_id=1</li>
</ul>
</blockquote>
<p>The <code>/*/occa</code> backends rely upon the <a href="http://github.com/libocca/occa">OCCA</a> package to provide
cross platform performance. To enable the OCCA backend, the environment variable <code>OCCA_DIR</code> must point
to the top-level OCCA directory, with the OCCA library located in the <code>${OCCA_DIR}/lib</code> (By default,
<code>OCCA_DIR</code> is set to <code>../occa</code>).</p>
<p>Additionally, users can pass specific OCCA device properties after setting the CEED resource.
For example:</p>
<blockquote>
<ul>
<li>"/*/occa:mode='CUDA',device_id=0"</li>
</ul>
</blockquote>
<p>Bit-for-bit reproducibility is important in some applications.
However, some libCEED backends use non-deterministic operations, such as <code>atomicAdd</code> for increased performance.
The backends which are capable of generating reproducible results, with the proper compilation options, are highlighted in the list above.</p>
<a name="user-content-examples"></a>
<h2><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Examples</h2>
<p>libCEED comes with several examples of its usage, ranging from standalone C
codes in the <code>/examples/ceed</code> directory to examples based on external packages,
such as MFEM, PETSc, and Nek5000. Nek5000 v18.0 or greater is required.</p>
<p>To build the examples, set the <code>MFEM_DIR</code>, <code>PETSC_DIR</code>, and
<code>NEK5K_DIR</code> variables and run:</p>
<pre>cd examples/
</pre>
<div class="highlight highlight-text-shell-session position-relative" data-snippet-clipboard-copy-content="# libCEED examples on CPU and GPU
cd ceed/
make
./ex1-volume -ceed /cpu/self
./ex1-volume -ceed /gpu/cuda
./ex2-surface -ceed /cpu/self
./ex2-surface -ceed /gpu/cuda
cd ..

# MFEM+libCEED examples on CPU and GPU
cd mfem/
make
./bp1 -ceed /cpu/self -no-vis
./bp3 -ceed /gpu/cuda -no-vis
cd ..

# Nek5000+libCEED examples on CPU and GPU
cd nek/
make
./nek-examples.sh -e bp1 -ceed /cpu/self -b 3
./nek-examples.sh -e bp3 -ceed /gpu/cuda -b 3
cd ..

# PETSc+libCEED examples on CPU and GPU
cd petsc/
make
./bps -problem bp1 -ceed /cpu/self
./bps -problem bp2 -ceed /gpu/cuda
./bps -problem bp3 -ceed /cpu/self
./bps -problem bp4 -ceed /gpu/cuda
./bps -problem bp5 -ceed /cpu/self
./bps -problem bp6 -ceed /gpu/cuda
cd ..

cd petsc/
make
./bpsraw -problem bp1 -ceed /cpu/self
./bpsraw -problem bp2 -ceed /gpu/cuda
./bpsraw -problem bp3 -ceed /cpu/self
./bpsraw -problem bp4 -ceed /gpu/cuda
./bpsraw -problem bp5 -ceed /cpu/self
./bpsraw -problem bp6 -ceed /gpu/cuda
cd ..

cd petsc/
make
./bpssphere -problem bp1 -ceed /cpu/self
./bpssphere -problem bp2 -ceed /gpu/cuda
./bpssphere -problem bp3 -ceed /cpu/self
./bpssphere -problem bp4 -ceed /gpu/cuda
./bpssphere -problem bp5 -ceed /cpu/self
./bpssphere -problem bp6 -ceed /gpu/cuda
cd ..

cd petsc/
make
./area -problem cube -ceed /cpu/self -degree 3
./area -problem cube -ceed /gpu/cuda -degree 3
./area -problem sphere -ceed /cpu/self -degree 3 -dm_refine 2
./area -problem sphere -ceed /gpu/cuda -degree 3 -dm_refine 2

cd fluids/
make
./navierstokes -ceed /cpu/self -degree 1
./navierstokes -ceed /gpu/cuda -degree 1
cd ..

cd solids/
make
./elasticity -ceed /cpu/self -mesh [.exo file] -degree 2 -E 1 -nu 0.3 -problem Linear -forcing mms
./elasticity -ceed /gpu/cuda -mesh [.exo file] -degree 2 -E 1 -nu 0.3 -problem Linear -forcing mms
cd ..
"><pre># <span class="pl-s1">libCEED examples on CPU and GPU</span>
<span class="pl-c1">cd ceed/</span>
<span class="pl-c1">make</span>
<span class="pl-c1">./ex1-volume -ceed /cpu/self</span>
<span class="pl-c1">./ex1-volume -ceed /gpu/cuda</span>
<span class="pl-c1">./ex2-surface -ceed /cpu/self</span>
<span class="pl-c1">./ex2-surface -ceed /gpu/cuda</span>
<span class="pl-c1">cd ..</span>

# <span class="pl-s1">MFEM+libCEED examples on CPU and GPU</span>
<span class="pl-c1">cd mfem/</span>
<span class="pl-c1">make</span>
<span class="pl-c1">./bp1 -ceed /cpu/self -no-vis</span>
<span class="pl-c1">./bp3 -ceed /gpu/cuda -no-vis</span>
<span class="pl-c1">cd ..</span>

# <span class="pl-s1">Nek5000+libCEED examples on CPU and GPU</span>
<span class="pl-c1">cd nek/</span>
<span class="pl-c1">make</span>
<span class="pl-c1">./nek-examples.sh -e bp1 -ceed /cpu/self -b 3</span>
<span class="pl-c1">./nek-examples.sh -e bp3 -ceed /gpu/cuda -b 3</span>
<span class="pl-c1">cd ..</span>

# <span class="pl-s1">PETSc+libCEED examples on CPU and GPU</span>
<span class="pl-c1">cd petsc/</span>
<span class="pl-c1">make</span>
<span class="pl-c1">./bps -problem bp1 -ceed /cpu/self</span>
<span class="pl-c1">./bps -problem bp2 -ceed /gpu/cuda</span>
<span class="pl-c1">./bps -problem bp3 -ceed /cpu/self</span>
<span class="pl-c1">./bps -problem bp4 -ceed /gpu/cuda</span>
<span class="pl-c1">./bps -problem bp5 -ceed /cpu/self</span>
<span class="pl-c1">./bps -problem bp6 -ceed /gpu/cuda</span>
<span class="pl-c1">cd ..</span>

<span class="pl-c1">cd petsc/</span>
<span class="pl-c1">make</span>
<span class="pl-c1">./bpsraw -problem bp1 -ceed /cpu/self</span>
<span class="pl-c1">./bpsraw -problem bp2 -ceed /gpu/cuda</span>
<span class="pl-c1">./bpsraw -problem bp3 -ceed /cpu/self</span>
<span class="pl-c1">./bpsraw -problem bp4 -ceed /gpu/cuda</span>
<span class="pl-c1">./bpsraw -problem bp5 -ceed /cpu/self</span>
<span class="pl-c1">./bpsraw -problem bp6 -ceed /gpu/cuda</span>
<span class="pl-c1">cd ..</span>

<span class="pl-c1">cd petsc/</span>
<span class="pl-c1">make</span>
<span class="pl-c1">./bpssphere -problem bp1 -ceed /cpu/self</span>
<span class="pl-c1">./bpssphere -problem bp2 -ceed /gpu/cuda</span>
<span class="pl-c1">./bpssphere -problem bp3 -ceed /cpu/self</span>
<span class="pl-c1">./bpssphere -problem bp4 -ceed /gpu/cuda</span>
<span class="pl-c1">./bpssphere -problem bp5 -ceed /cpu/self</span>
<span class="pl-c1">./bpssphere -problem bp6 -ceed /gpu/cuda</span>
<span class="pl-c1">cd ..</span>

<span class="pl-c1">cd petsc/</span>
<span class="pl-c1">make</span>
<span class="pl-c1">./area -problem cube -ceed /cpu/self -degree 3</span>
<span class="pl-c1">./area -problem cube -ceed /gpu/cuda -degree 3</span>
<span class="pl-c1">./area -problem sphere -ceed /cpu/self -degree 3 -dm_refine 2</span>
<span class="pl-c1">./area -problem sphere -ceed /gpu/cuda -degree 3 -dm_refine 2</span>

<span class="pl-c1">cd fluids/</span>
<span class="pl-c1">make</span>
<span class="pl-c1">./navierstokes -ceed /cpu/self -degree 1</span>
<span class="pl-c1">./navierstokes -ceed /gpu/cuda -degree 1</span>
<span class="pl-c1">cd ..</span>

<span class="pl-c1">cd solids/</span>
<span class="pl-c1">make</span>
<span class="pl-c1">./elasticity -ceed /cpu/self -mesh [.exo file] -degree 2 -E 1 -nu 0.3 -problem Linear -forcing mms</span>
<span class="pl-c1">./elasticity -ceed /gpu/cuda -mesh [.exo file] -degree 2 -E 1 -nu 0.3 -problem Linear -forcing mms</span>
<span class="pl-c1">cd ..</span></pre></div>
<p>For the last example shown, sample meshes to be used in place of
<code>[.exo file]</code> can be found at <a href="https://github.com/jeremylt/ceedSampleMeshes">https://github.com/jeremylt/ceedSampleMeshes</a></p>
<p>The above code assumes a GPU-capable machine with the OCCA backend
enabled. Depending on the available backends, other CEED resource
specifiers can be provided with the <code>-ceed</code> option. Other command line
arguments can be found in <a href="https://github.com/CEED/libCEED/blob/main/examples/petsc/README.md">examples/petsc</a>.</p>
<a name="user-content-benchmarks"></a>
<h2><a id="user-content-benchmarks" class="anchor" aria-hidden="true" href="#benchmarks"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Benchmarks</h2>
<p>A sequence of benchmarks for all enabled backends can be run using:</p>
<pre>make benchmarks
</pre>
<p>The results from the benchmarks are stored inside the <code>benchmarks/</code> directory
and they can be viewed using the commands (requires python with matplotlib):</p>
<pre>cd benchmarks
python postprocess-plot.py petsc-bps-bp1-*-output.txt
python postprocess-plot.py petsc-bps-bp3-*-output.txt
</pre>
<p>Using the <code>benchmarks</code> target runs a comprehensive set of benchmarks which may
take some time to run. Subsets of the benchmarks can be run using the scripts in the <code>benchmarks</code> folder.</p>
<p>For more details about the benchmarks, see the <code>benchmarks/README.md</code> file.</p>
<a name="user-content-install"></a>
<h2><a id="user-content-install" class="anchor" aria-hidden="true" href="#install"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Install</h2>
<p>To install libCEED, run:</p>
<pre>make install prefix=/usr/local
</pre>
<p>or (e.g., if creating packages):</p>
<pre>make install prefix=/usr DESTDIR=/packaging/path
</pre>
<p>The usual variables like <code>CC</code> and <code>CFLAGS</code> are used, and optimization flags
for all languages can be set using the likes of <code>OPT='-O3 -march=native'</code>. Use
<code>STATIC=1</code> to build static libraries (<code>libceed.a</code>).</p>
<p>To install libCEED for Python, run:</p>
<pre>pip install libceed
</pre>
<p>with the desired setuptools options, such as --user.</p>
<a name="user-content-pkg-config"></a>
<h3><a id="user-content-pkg-config" class="anchor" aria-hidden="true" href="#pkg-config"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>pkg-config</h3>
<p>In addition to library and header, libCEED provides a <a href="https://en.wikipedia.org/wiki/Pkg-config" rel="nofollow">pkg-config</a>
file that can be used to easily compile and link.
<a href="https://people.freedesktop.org/~dbn/pkg-config-guide.html#faq" rel="nofollow">For example</a>, if
<code>$prefix</code> is a standard location or you set the environment variable
<code>PKG_CONFIG_PATH</code>:</p>
<pre>cc `pkg-config --cflags --libs ceed` -o myapp myapp.c
</pre>
<p>will build <code>myapp</code> with libCEED.  This can be used with the source or
installed directories.  Most build systems have support for pkg-config.</p>
<a name="user-content-contact"></a>
<h2><a id="user-content-contact" class="anchor" aria-hidden="true" href="#contact"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Contact</h2>
<p>You can reach the libCEED team by emailing <a href="mailto:ceed-users@llnl.gov">ceed-users@llnl.gov</a>
or by leaving a comment in the <a href="https://github.com/CEED/libCEED/issues">issue tracker</a>.</p>
<a name="user-content-how-to-cite"></a>
<h2><a id="user-content-how-to-cite" class="anchor" aria-hidden="true" href="#how-to-cite"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>How to Cite</h2>
<p>If you utilize libCEED please cite:</p>
<pre>@misc{libceed-user-manual,
  author       = {Abdelfattah, Ahmad and
                  Barra, Valeria and
                  Beams, Natalie and
                  Brown, Jed and
                  Camier, Jean-Sylvain and
                  Dobrev, Veselin and
                  Dudouit, Yohann and
                  Ghaffari, Leila and
                  Kolev, Tzanio and
                  Medina, David and
                  Rathnayake, Thilina and
                  Thompson, Jeremy L and
                  Tomov, Stanimire},
  title        = {libCEED User Manual},
  month        = sep,
  year         = 2020,
  publisher    = {Zenodo},
  version      = {0.7},
  doi          = {10.5281/zenodo.4302737},
  url          = {https://doi.org/10.5281/zenodo.4302737}
}
</pre>
<p>For libCEED's Python interface please cite:</p>
<pre>@InProceedings{libceed-paper-proc-scipy-2020,
  author    = {{V}aleria {B}arra and {J}ed {B}rown and {J}eremy {T}hompson and {Y}ohann {D}udouit},
  title     = {{H}igh-performance operator evaluations with ease of use: lib{C}{E}{E}{D}'s {P}ython interface},
  booktitle = {{P}roceedings of the 19th {P}ython in {S}cience {C}onference},
  pages     = {85 - 90},
  year      = {2020},
  editor    = {{M}eghann {A}garwal and {C}hris {C}alloway and {D}illon {N}iederhut and {D}avid {S}hupe},
  doi       = {10.25080/Majora-342d178e-00c},
  url       = {https://doi.org/10.25080/Majora-342d178e-00c}
}
</pre>
<p>The BiBTeX entries for these references can be found in the
doc/bib/references.bib file.</p>
<a name="user-content-copyright"></a>
<h2><a id="user-content-copyright" class="anchor" aria-hidden="true" href="#copyright"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Copyright</h2>
<p>The following copyright applies to each file in the CEED software suite, unless
otherwise stated in the file:</p>
<blockquote>
Copyright (c) 2017, Lawrence Livermore National Security, LLC. Produced at the
Lawrence Livermore National Laboratory. LLNL-CODE-734707. All Rights reserved.</blockquote>
<p>See files LICENSE and NOTICE for details.</p>

</article></div>