<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-libceed-efficient-extensible-discretization" class="anchor" aria-hidden="true" href="#libceed-efficient-extensible-discretization"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>libCEED: Efficient Extensible Discretization</h1>
<p dir="auto"><a href="https://github.com/CEED/libCEED/actions"><img src="https://github.com/CEED/libCEED/workflows/C/Fortran/badge.svg" alt="GitHub Actions" style="max-width: 100%;"></a>
<a href="https://gitlab.com/libceed/libCEED/-/pipelines?page=1&amp;scope=all&amp;ref=main" rel="nofollow"><img src="https://camo.githubusercontent.com/c34a424f15640056c1eb9caef7c932e510ade76a93766463740243ecefe9aabd/68747470733a2f2f6769746c61622e636f6d2f6c6962636565642f6c6962434545442f6261646765732f6d61696e2f706970656c696e652e7376673f6b65795f746578743d4769744c61622d4349" alt="GitLab-CI" data-canonical-src="https://gitlab.com/libceed/libCEED/badges/main/pipeline.svg?key_text=GitLab-CI" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/CEED/libCEED/" rel="nofollow"><img src="https://camo.githubusercontent.com/81fad5765bd84f9ba5234daa0e519206f0487bc572155ad1933c5a2860deeec8/68747470733a2f2f636f6465636f762e696f2f67682f434545442f6c6962434545442f6272616e63682f6d61696e2f6772617068732f62616467652e737667" alt="Code coverage" data-canonical-src="https://codecov.io/gh/CEED/libCEED/branch/main/graphs/badge.svg" style="max-width: 100%;"></a>
<a href="https://opensource.org/licenses/BSD-2-Clause" rel="nofollow"><img src="https://camo.githubusercontent.com/6329ad11a39c9adff3158e6eeea1fe1fdab471c9f3d4a01aa6035e66797f2bae/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d425344253230322d2d436c617573652d6f72616e67652e737667" alt="BSD-2-Clause" data-canonical-src="https://img.shields.io/badge/License-BSD%202--Clause-orange.svg" style="max-width: 100%;"></a>
<a href="https://libceed.org/en/latest/?badge=latest" rel="nofollow"><img src="https://camo.githubusercontent.com/da5ae8a07b81567b5de9212e4f311dc7902214fb1f5cd54d41a82a44eb352990/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f6c6962636565642f62616467652f3f76657273696f6e3d6c6174657374" alt="Documentation" data-canonical-src="https://readthedocs.org/projects/libceed/badge/?version=latest" style="max-width: 100%;"></a>
<a href="https://doi.org/10.21105/joss.02945" rel="nofollow"><img src="https://camo.githubusercontent.com/fbd7b1a4cbdc35d50bef4639434f5a5502595d3acf9dbd3e4c1694e22581b649/68747470733a2f2f6a6f73732e7468656f6a2e6f72672f7061706572732f31302e32313130352f6a6f73732e30323934352f7374617475732e737667" alt="JOSS paper" data-canonical-src="https://joss.theoj.org/papers/10.21105/joss.02945/status.svg" style="max-width: 100%;"></a>
<a href="https://mybinder.org/v2/gh/CEED/libCEED/main?urlpath=lab/tree/examples/python/tutorial-0-ceed.ipynb" rel="nofollow"><img src="https://camo.githubusercontent.com/bcad2ee3e04d735b2ddc5d5641031944e2aaa3f4e9c1aacc4c2edeec025972c9/687474703a2f2f6d7962696e6465722e6f72672f62616467655f6c6f676f2e737667" alt="Binder" data-canonical-src="http://mybinder.org/badge_logo.svg" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-summary-and-purpose" class="anchor" aria-hidden="true" href="#summary-and-purpose"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Summary and Purpose</h2>
<p dir="auto">libCEED provides fast algebra for element-based discretizations, designed for performance portability, run-time flexibility, and clean embedding in higher level libraries and applications.
It offers a C99 interface as well as bindings for Fortran, Python, Julia, and Rust.
While our focus is on high-order finite elements, the approach is mostly algebraic and thus applicable to other discretizations in factored form, as explained in the <a href="https://libceed.org/en/latest/" rel="nofollow">user manual</a> and API implementation portion of the <a href="https://libceed.org/en/latest/api/" rel="nofollow">documentation</a>.</p>
<p dir="auto">One of the challenges with high-order methods is that a global sparse matrix is no longer a good representation of a high-order linear operator, both with respect to the FLOPs needed for its evaluation, as well as the memory transfer needed for a matvec.
Thus, high-order methods require a new "format" that still represents a linear (or more generally non-linear) operator, but not through a sparse matrix.</p>
<p dir="auto">The goal of libCEED is to propose such a format, as well as supporting implementations and data structures, that enable efficient operator evaluation on a variety of computational device types (CPUs, GPUs, etc.).
This new operator description is based on algebraically <a href="https://libceed.org/en/latest/libCEEDapi/#finite-element-operator-decomposition" rel="nofollow">factored form</a>, which is easy to incorporate in a wide variety of applications, without significant refactoring of their own discretization infrastructure.</p>
<p dir="auto">The repository is part of the <a href="http://ceed.exascaleproject.org/software/" rel="nofollow">CEED software suite</a>, a collection of software benchmarks, miniapps, libraries and APIs for efficient exascale discretizations based on high-order finite element and spectral element methods.
See <a href="http://github.com/ceed">http://github.com/ceed</a> for more information and source code availability.</p>
<p dir="auto">The CEED research is supported by the <a href="https://exascaleproject.org/exascale-computing-project" rel="nofollow">Exascale Computing Project</a> (17-SC-20-SC), a collaborative effort of two U.S. Department of Energy organizations (Office of Science and the National Nuclear Security Administration) responsible for the planning and preparation of a <a href="https://exascaleproject.org/what-is-exascale" rel="nofollow">capable exascale ecosystem</a>, including software, applications, hardware, advanced system engineering and early testbed platforms, in support of the nationâ€™s exascale computing imperative.</p>
<p dir="auto">For more details on the CEED API see the <a href="https://libceed.org/en/latest/" rel="nofollow">user manual</a>.</p>
<p dir="auto">% gettingstarted-inclusion-marker</p>
<h2 dir="auto"><a id="user-content-building" class="anchor" aria-hidden="true" href="#building"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Building</h2>
<p dir="auto">The CEED library, <code>libceed</code>, is a C99 library with no required dependencies, and with Fortran, Python, Julia, and Rust interfaces.
It can be built using:</p>
<div class="highlight highlight-text-shell-session notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ make"><pre>$ <span class="pl-s1">make</span></pre></div>
<p dir="auto">or, with optimization flags:</p>
<div class="highlight highlight-text-shell-session notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ make OPT='-O3 -march=skylake-avx512 -ffp-contract=fast'"><pre>$ <span class="pl-s1">make OPT=<span class="pl-s"><span class="pl-pds">'</span>-O3 -march=skylake-avx512 -ffp-contract=fast<span class="pl-pds">'</span></span></span></pre></div>
<p dir="auto">These optimization flags are used by all languages (C, C++, Fortran) and this makefile variable can also be set for testing and examples (below).</p>
<p dir="auto">The library attempts to automatically detect support for the AVX instruction set using gcc-style compiler options for the host.
Support may need to be manually specified via:</p>
<div class="highlight highlight-text-shell-session notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ make AVX=1"><pre>$ <span class="pl-s1">make AVX=1</span></pre></div>
<p dir="auto">or:</p>
<div class="highlight highlight-text-shell-session notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ make AVX=0"><pre>$ <span class="pl-s1">make AVX=0</span></pre></div>
<p dir="auto">if your compiler does not support gcc-style options, if you are cross compiling, etc.</p>
<p dir="auto">To enable CUDA support, add <code>CUDA_DIR=/opt/cuda</code> or an appropriate directory to your <code>make</code> invocation.
To enable HIP support, add <code>ROCM_DIR=/opt/rocm</code> or an appropriate directory.
To store these or other arguments as defaults for future invocations of <code>make</code>, use:</p>
<div class="highlight highlight-text-shell-session notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ make configure CUDA_DIR=/usr/local/cuda ROCM_DIR=/opt/rocm OPT='-O3 -march=znver2'"><pre>$ <span class="pl-s1">make configure CUDA_DIR=/usr/local/cuda ROCM_DIR=/opt/rocm OPT=<span class="pl-s"><span class="pl-pds">'</span>-O3 -march=znver2<span class="pl-pds">'</span></span></span></pre></div>
<p dir="auto">which stores these variables in <code>config.mk</code>.</p>
<h3 dir="auto"><a id="user-content-webassembly" class="anchor" aria-hidden="true" href="#webassembly"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>WebAssembly</h3>
<p dir="auto">libCEED can be built for WASM using <a href="https://emscripten.org" rel="nofollow">Emscripten</a>. For example, one can build the library and run a standalone WASM executable using</p>
<div class="highlight highlight-text-shell-session notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ emmake make build/ex2-surface.wasm
$ wasmer build/ex2-surface.wasm -- -s 200000"><pre>$ <span class="pl-s1">emmake make build/ex2-surface.wasm</span>
$ <span class="pl-s1">wasmer build/ex2-surface.wasm -- -s 200000</span></pre></div>
<h2 dir="auto"><a id="user-content-additional-language-interfaces" class="anchor" aria-hidden="true" href="#additional-language-interfaces"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Additional Language Interfaces</h2>
<p dir="auto">The Fortran interface is built alongside the library automatically.</p>
<p dir="auto">Python users can install using:</p>
<div class="highlight highlight-text-shell-session notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ pip install libceed"><pre>$ <span class="pl-s1">pip install libceed</span></pre></div>
<p dir="auto">or in a clone of the repository via <code>pip install .</code>.</p>
<p dir="auto">Julia users can install using:</p>
<div class="highlight highlight-text-shell-session notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ julia
julia&gt; ]
pkg&gt; add LibCEED"><pre>$ <span class="pl-s1">julia</span>
<span class="pl-c1">julia&gt; ]</span>
<span class="pl-c1">pkg&gt; add LibCEED</span></pre></div>
<p dir="auto">See the <a href="http://ceed.exascaleproject.org/libCEED-julia-docs/dev/" rel="nofollow">LibCEED.jl documentation</a> for more information.</p>
<p dir="auto">Rust users can include libCEED via <code>Cargo.toml</code>:</p>
<div class="highlight highlight-source-toml notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="[dependencies]
libceed = &quot;0.11.0&quot;"><pre>[<span class="pl-en">dependencies</span>]
<span class="pl-smi">libceed</span> = <span class="pl-s"><span class="pl-pds">"</span>0.11.0<span class="pl-pds">"</span></span></pre></div>
<p dir="auto">See the <a href="https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories" rel="nofollow">Cargo documentation</a> for details.</p>
<h2 dir="auto"><a id="user-content-testing" class="anchor" aria-hidden="true" href="#testing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Testing</h2>
<p dir="auto">The test suite produces <a href="https://testanything.org" rel="nofollow">TAP</a> output and is run by:</p>
<div class="highlight highlight-text-shell-session notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ make test"><pre>$ <span class="pl-s1">make <span class="pl-c1">test</span></span></pre></div>
<p dir="auto">or, using the <code>prove</code> tool distributed with Perl (recommended):</p>
<div class="highlight highlight-text-shell-session notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ make prove"><pre>$ <span class="pl-s1">make prove</span></pre></div>
<h2 dir="auto"><a id="user-content-backends" class="anchor" aria-hidden="true" href="#backends"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Backends</h2>
<p dir="auto">There are multiple supported backends, which can be selected at runtime in the examples:</p>
<table>
<thead>
<tr>
<th align="left">CEED resource</th>
<th align="left">Backend</th>
<th align="center">Deterministic Capable</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left"></td>
<td align="left"></td>
<td align="center"></td>
</tr>
<tr>
<td align="left"><strong>CPU Native</strong></td>
<td align="left"></td>
<td align="center"></td>
</tr>
<tr>
<td align="left"><code>/cpu/self/ref/serial</code></td>
<td align="left">Serial reference implementation</td>
<td align="center">Yes</td>
</tr>
<tr>
<td align="left"><code>/cpu/self/ref/blocked</code></td>
<td align="left">Blocked reference implementation</td>
<td align="center">Yes</td>
</tr>
<tr>
<td align="left"><code>/cpu/self/opt/serial</code></td>
<td align="left">Serial optimized C implementation</td>
<td align="center">Yes</td>
</tr>
<tr>
<td align="left"><code>/cpu/self/opt/blocked</code></td>
<td align="left">Blocked optimized C implementation</td>
<td align="center">Yes</td>
</tr>
<tr>
<td align="left"><code>/cpu/self/avx/serial</code></td>
<td align="left">Serial AVX implementation</td>
<td align="center">Yes</td>
</tr>
<tr>
<td align="left"><code>/cpu/self/avx/blocked</code></td>
<td align="left">Blocked AVX implementation</td>
<td align="center">Yes</td>
</tr>
<tr>
<td align="left"></td>
<td align="left"></td>
<td align="center"></td>
</tr>
<tr>
<td align="left"><strong>CPU Valgrind</strong></td>
<td align="left"></td>
<td align="center"></td>
</tr>
<tr>
<td align="left"><code>/cpu/self/memcheck/*</code></td>
<td align="left">Memcheck backends, undefined value checks</td>
<td align="center">Yes</td>
</tr>
<tr>
<td align="left"></td>
<td align="left"></td>
<td align="center"></td>
</tr>
<tr>
<td align="left"><strong>CPU LIBXSMM</strong></td>
<td align="left"></td>
<td align="center"></td>
</tr>
<tr>
<td align="left"><code>/cpu/self/xsmm/serial</code></td>
<td align="left">Serial LIBXSMM implementation</td>
<td align="center">Yes</td>
</tr>
<tr>
<td align="left"><code>/cpu/self/xsmm/blocked</code></td>
<td align="left">Blocked LIBXSMM implementation</td>
<td align="center">Yes</td>
</tr>
<tr>
<td align="left"></td>
<td align="left"></td>
<td align="center"></td>
</tr>
<tr>
<td align="left"><strong>CUDA Native</strong></td>
<td align="left"></td>
<td align="center"></td>
</tr>
<tr>
<td align="left"><code>/gpu/cuda/ref</code></td>
<td align="left">Reference pure CUDA kernels</td>
<td align="center">Yes</td>
</tr>
<tr>
<td align="left"><code>/gpu/cuda/shared</code></td>
<td align="left">Optimized pure CUDA kernels using shared memory</td>
<td align="center">Yes</td>
</tr>
<tr>
<td align="left"><code>/gpu/cuda/gen</code></td>
<td align="left">Optimized pure CUDA kernels using code generation</td>
<td align="center">No</td>
</tr>
<tr>
<td align="left"></td>
<td align="left"></td>
<td align="center"></td>
</tr>
<tr>
<td align="left"><strong>HIP Native</strong></td>
<td align="left"></td>
<td align="center"></td>
</tr>
<tr>
<td align="left"><code>/gpu/hip/ref</code></td>
<td align="left">Reference pure HIP kernels</td>
<td align="center">Yes</td>
</tr>
<tr>
<td align="left"><code>/gpu/hip/shared</code></td>
<td align="left">Optimized pure HIP kernels using shared memory</td>
<td align="center">Yes</td>
</tr>
<tr>
<td align="left"><code>/gpu/hip/gen</code></td>
<td align="left">Optimized pure HIP kernels using code generation</td>
<td align="center">No</td>
</tr>
<tr>
<td align="left"></td>
<td align="left"></td>
<td align="center"></td>
</tr>
<tr>
<td align="left"><strong>MAGMA</strong></td>
<td align="left"></td>
<td align="center"></td>
</tr>
<tr>
<td align="left"><code>/gpu/cuda/magma</code></td>
<td align="left">CUDA MAGMA kernels</td>
<td align="center">No</td>
</tr>
<tr>
<td align="left"><code>/gpu/cuda/magma/det</code></td>
<td align="left">CUDA MAGMA kernels</td>
<td align="center">Yes</td>
</tr>
<tr>
<td align="left"><code>/gpu/hip/magma</code></td>
<td align="left">HIP MAGMA kernels</td>
<td align="center">No</td>
</tr>
<tr>
<td align="left"><code>/gpu/hip/magma/det</code></td>
<td align="left">HIP MAGMA kernels</td>
<td align="center">Yes</td>
</tr>
<tr>
<td align="left"></td>
<td align="left"></td>
<td align="center"></td>
</tr>
<tr>
<td align="left"><strong>OCCA</strong></td>
<td align="left"></td>
<td align="center"></td>
</tr>
<tr>
<td align="left"><code>/*/occa</code></td>
<td align="left">Selects backend based on available OCCA modes</td>
<td align="center">Yes</td>
</tr>
<tr>
<td align="left"><code>/cpu/self/occa</code></td>
<td align="left">OCCA backend with serial CPU kernels</td>
<td align="center">Yes</td>
</tr>
<tr>
<td align="left"><code>/cpu/openmp/occa</code></td>
<td align="left">OCCA backend with OpenMP kernels</td>
<td align="center">Yes</td>
</tr>
<tr>
<td align="left"><code>/cpu/dpcpp/occa</code></td>
<td align="left">OCCA backend with CPC++ kernels</td>
<td align="center">Yes</td>
</tr>
<tr>
<td align="left"><code>/gpu/cuda/occa</code></td>
<td align="left">OCCA backend with CUDA kernels</td>
<td align="center">Yes</td>
</tr>
<tr>
<td align="left"><code>/gpu/hip/occa</code>~</td>
<td align="left">OCCA backend with HIP kernels</td>
<td align="center">Yes</td>
</tr>
</tbody>
</table>
<p dir="auto">The <code>/cpu/self/*/serial</code> backends process one element at a time and are intended for meshes with a smaller number of high order elements.
The <code>/cpu/self/*/blocked</code> backends process blocked batches of eight interlaced elements and are intended for meshes with higher numbers of elements.</p>
<p dir="auto">The <code>/cpu/self/ref/*</code> backends are written in pure C and provide basic functionality.</p>
<p dir="auto">The <code>/cpu/self/opt/*</code> backends are written in pure C and use partial e-vectors to improve performance.</p>
<p dir="auto">The <code>/cpu/self/avx/*</code> backends rely upon AVX instructions to provide vectorized CPU performance.</p>
<p dir="auto">The <code>/cpu/self/memcheck/*</code> backends rely upon the <a href="http://valgrind.org/" rel="nofollow">Valgrind</a> Memcheck tool to help verify that user QFunctions have no undefined values.
To use, run your code with Valgrind and the Memcheck backends, e.g. <code>valgrind ./build/ex1 -ceed /cpu/self/ref/memcheck</code>.
A 'development' or 'debugging' version of Valgrind with headers is required to use this backend.
This backend can be run in serial or blocked mode and defaults to running in the serial mode if <code>/cpu/self/memcheck</code> is selected at runtime.</p>
<p dir="auto">The <code>/cpu/self/xsmm/*</code> backends rely upon the <a href="http://github.com/hfp/libxsmm">LIBXSMM</a> package to provide vectorized CPU performance.
If linking MKL and LIBXSMM is desired but the Makefile is not detecting <code>MKLROOT</code>, linking libCEED against MKL can be forced by setting the environment variable <code>MKL=1</code>.</p>
<p dir="auto">The <code>/gpu/cuda/*</code> backends provide GPU performance strictly using CUDA.</p>
<p dir="auto">The <code>/gpu/hip/*</code> backends provide GPU performance strictly using HIP.
They are based on the <code>/gpu/cuda/*</code> backends.
ROCm version 4.2 or newer is required.</p>
<p dir="auto">The <code>/gpu/*/magma/*</code> backends rely upon the <a href="https://bitbucket.org/icl/magma" rel="nofollow">MAGMA</a> package.
To enable the MAGMA backends, the environment variable <code>MAGMA_DIR</code> must point to the top-level MAGMA directory, with the MAGMA library located in <code>$(MAGMA_DIR)/lib/</code>.
By default, <code>MAGMA_DIR</code> is set to <code>../magma</code>; to build the MAGMA backends with a MAGMA installation located elsewhere, create a link to <code>magma/</code> in libCEED's parent directory, or set <code>MAGMA_DIR</code> to the proper location.
MAGMA version 2.5.0 or newer is required.
Currently, each MAGMA library installation is only built for either CUDA or HIP.
The corresponding set of libCEED backends (<code>/gpu/cuda/magma/*</code> or <code>/gpu/hip/magma/*</code>) will automatically be built for the version of the MAGMA library found in <code>MAGMA_DIR</code>.</p>
<p dir="auto">Users can specify a device for all CUDA, HIP, and MAGMA backends through adding <code>:device_id=#</code> after the resource name.
For example:</p>
<blockquote>
<ul dir="auto">
<li><code>/gpu/cuda/gen:device_id=1</code></li>
</ul>
</blockquote>
<p dir="auto">The <code>/*/occa</code> backends rely upon the <a href="http://github.com/libocca/occa">OCCA</a> package to provide cross platform performance.
To enable the OCCA backend, the environment variable <code>OCCA_DIR</code> must point to the top-level OCCA directory, with the OCCA library located in the <code>${OCCA_DIR}/lib</code> (By default, <code>OCCA_DIR</code> is set to <code>../occa</code>).
OCCA version 1.4.0 or newer is required.</p>
<p dir="auto">Users can pass specific OCCA device properties after setting the CEED resource.
For example:</p>
<blockquote>
<ul dir="auto">
<li><code>"/*/occa:mode='CUDA',device_id=0"</code></li>
</ul>
</blockquote>
<p dir="auto">Bit-for-bit reproducibility is important in some applications.
However, some libCEED backends use non-deterministic operations, such as <code>atomicAdd</code> for increased performance.
The backends which are capable of generating reproducible results, with the proper compilation options, are highlighted in the list above.</p>
<h2 dir="auto"><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Examples</h2>
<p dir="auto">libCEED comes with several examples of its usage, ranging from standalone C codes in the <code>/examples/ceed</code> directory to examples based on external packages, such as MFEM, PETSc, and Nek5000.
Nek5000 v18.0 or greater is required.</p>
<p dir="auto">To build the examples, set the <code>MFEM_DIR</code>, <code>PETSC_DIR</code>, and <code>NEK5K_DIR</code> variables and run:</p>
<div class="highlight highlight-text-shell-session notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ cd examples/"><pre>$ <span class="pl-s1"><span class="pl-c1">cd</span> examples/</span></pre></div>
<p dir="auto">% running-examples-inclusion-marker</p>
<div class="highlight highlight-text-shell-session notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# libCEED examples on CPU and GPU
$ cd ceed/
$ make
$ ./ex1-volume -ceed /cpu/self
$ ./ex1-volume -ceed /gpu/cuda
$ ./ex2-surface -ceed /cpu/self
$ ./ex2-surface -ceed /gpu/cuda
$ cd ..

# MFEM+libCEED examples on CPU and GPU
$ cd mfem/
$ make
$ ./bp1 -ceed /cpu/self -no-vis
$ ./bp3 -ceed /gpu/cuda -no-vis
$ cd ..

# Nek5000+libCEED examples on CPU and GPU
$ cd nek/
$ make
$ ./nek-examples.sh -e bp1 -ceed /cpu/self -b 3
$ ./nek-examples.sh -e bp3 -ceed /gpu/cuda -b 3
$ cd ..

# PETSc+libCEED examples on CPU and GPU
$ cd petsc/
$ make
$ ./bps -problem bp1 -ceed /cpu/self
$ ./bps -problem bp2 -ceed /gpu/cuda
$ ./bps -problem bp3 -ceed /cpu/self
$ ./bps -problem bp4 -ceed /gpu/cuda
$ ./bps -problem bp5 -ceed /cpu/self
$ ./bps -problem bp6 -ceed /gpu/cuda
$ cd ..

$ cd petsc/
$ make
$ ./bpsraw -problem bp1 -ceed /cpu/self
$ ./bpsraw -problem bp2 -ceed /gpu/cuda
$ ./bpsraw -problem bp3 -ceed /cpu/self
$ ./bpsraw -problem bp4 -ceed /gpu/cuda
$ ./bpsraw -problem bp5 -ceed /cpu/self
$ ./bpsraw -problem bp6 -ceed /gpu/cuda
$ cd ..

$ cd petsc/
$ make
$ ./bpssphere -problem bp1 -ceed /cpu/self
$ ./bpssphere -problem bp2 -ceed /gpu/cuda
$ ./bpssphere -problem bp3 -ceed /cpu/self
$ ./bpssphere -problem bp4 -ceed /gpu/cuda
$ ./bpssphere -problem bp5 -ceed /cpu/self
$ ./bpssphere -problem bp6 -ceed /gpu/cuda
$ cd ..

$ cd petsc/
$ make
$ ./area -problem cube -ceed /cpu/self -degree 3
$ ./area -problem cube -ceed /gpu/cuda -degree 3
$ ./area -problem sphere -ceed /cpu/self -degree 3 -dm_refine 2
$ ./area -problem sphere -ceed /gpu/cuda -degree 3 -dm_refine 2

$ cd fluids/
$ make
$ ./navierstokes -ceed /cpu/self -degree 1
$ ./navierstokes -ceed /gpu/cuda -degree 1
$ cd ..

$ cd solids/
$ make
$ ./elasticity -ceed /cpu/self -mesh [.exo file] -degree 2 -E 1 -nu 0.3 -problem Linear -forcing mms
$ ./elasticity -ceed /gpu/cuda -mesh [.exo file] -degree 2 -E 1 -nu 0.3 -problem Linear -forcing mms
$ cd .."><pre># <span class="pl-s1">libCEED examples on CPU and GPU</span>
$ <span class="pl-s1"><span class="pl-c1">cd</span> ceed/</span>
$ <span class="pl-s1">make</span>
$ <span class="pl-s1">./ex1-volume -ceed /cpu/self</span>
$ <span class="pl-s1">./ex1-volume -ceed /gpu/cuda</span>
$ <span class="pl-s1">./ex2-surface -ceed /cpu/self</span>
$ <span class="pl-s1">./ex2-surface -ceed /gpu/cuda</span>
$ <span class="pl-s1"><span class="pl-c1">cd</span> ..</span>

# <span class="pl-s1">MFEM+libCEED examples on CPU and GPU</span>
$ <span class="pl-s1"><span class="pl-c1">cd</span> mfem/</span>
$ <span class="pl-s1">make</span>
$ <span class="pl-s1">./bp1 -ceed /cpu/self -no-vis</span>
$ <span class="pl-s1">./bp3 -ceed /gpu/cuda -no-vis</span>
$ <span class="pl-s1"><span class="pl-c1">cd</span> ..</span>

# <span class="pl-s1">Nek5000+libCEED examples on CPU and GPU</span>
$ <span class="pl-s1"><span class="pl-c1">cd</span> nek/</span>
$ <span class="pl-s1">make</span>
$ <span class="pl-s1">./nek-examples.sh -e bp1 -ceed /cpu/self -b 3</span>
$ <span class="pl-s1">./nek-examples.sh -e bp3 -ceed /gpu/cuda -b 3</span>
$ <span class="pl-s1"><span class="pl-c1">cd</span> ..</span>

# <span class="pl-s1">PETSc+libCEED examples on CPU and GPU</span>
$ <span class="pl-s1"><span class="pl-c1">cd</span> petsc/</span>
$ <span class="pl-s1">make</span>
$ <span class="pl-s1">./bps -problem bp1 -ceed /cpu/self</span>
$ <span class="pl-s1">./bps -problem bp2 -ceed /gpu/cuda</span>
$ <span class="pl-s1">./bps -problem bp3 -ceed /cpu/self</span>
$ <span class="pl-s1">./bps -problem bp4 -ceed /gpu/cuda</span>
$ <span class="pl-s1">./bps -problem bp5 -ceed /cpu/self</span>
$ <span class="pl-s1">./bps -problem bp6 -ceed /gpu/cuda</span>
$ <span class="pl-s1"><span class="pl-c1">cd</span> ..</span>

$ <span class="pl-s1"><span class="pl-c1">cd</span> petsc/</span>
$ <span class="pl-s1">make</span>
$ <span class="pl-s1">./bpsraw -problem bp1 -ceed /cpu/self</span>
$ <span class="pl-s1">./bpsraw -problem bp2 -ceed /gpu/cuda</span>
$ <span class="pl-s1">./bpsraw -problem bp3 -ceed /cpu/self</span>
$ <span class="pl-s1">./bpsraw -problem bp4 -ceed /gpu/cuda</span>
$ <span class="pl-s1">./bpsraw -problem bp5 -ceed /cpu/self</span>
$ <span class="pl-s1">./bpsraw -problem bp6 -ceed /gpu/cuda</span>
$ <span class="pl-s1"><span class="pl-c1">cd</span> ..</span>

$ <span class="pl-s1"><span class="pl-c1">cd</span> petsc/</span>
$ <span class="pl-s1">make</span>
$ <span class="pl-s1">./bpssphere -problem bp1 -ceed /cpu/self</span>
$ <span class="pl-s1">./bpssphere -problem bp2 -ceed /gpu/cuda</span>
$ <span class="pl-s1">./bpssphere -problem bp3 -ceed /cpu/self</span>
$ <span class="pl-s1">./bpssphere -problem bp4 -ceed /gpu/cuda</span>
$ <span class="pl-s1">./bpssphere -problem bp5 -ceed /cpu/self</span>
$ <span class="pl-s1">./bpssphere -problem bp6 -ceed /gpu/cuda</span>
$ <span class="pl-s1"><span class="pl-c1">cd</span> ..</span>

$ <span class="pl-s1"><span class="pl-c1">cd</span> petsc/</span>
$ <span class="pl-s1">make</span>
$ <span class="pl-s1">./area -problem cube -ceed /cpu/self -degree 3</span>
$ <span class="pl-s1">./area -problem cube -ceed /gpu/cuda -degree 3</span>
$ <span class="pl-s1">./area -problem sphere -ceed /cpu/self -degree 3 -dm_refine 2</span>
$ <span class="pl-s1">./area -problem sphere -ceed /gpu/cuda -degree 3 -dm_refine 2</span>

$ <span class="pl-s1"><span class="pl-c1">cd</span> fluids/</span>
$ <span class="pl-s1">make</span>
$ <span class="pl-s1">./navierstokes -ceed /cpu/self -degree 1</span>
$ <span class="pl-s1">./navierstokes -ceed /gpu/cuda -degree 1</span>
$ <span class="pl-s1"><span class="pl-c1">cd</span> ..</span>

$ <span class="pl-s1"><span class="pl-c1">cd</span> solids/</span>
$ <span class="pl-s1">make</span>
$ <span class="pl-s1">./elasticity -ceed /cpu/self -mesh [.exo file] -degree 2 -E 1 -nu 0.3 -problem Linear -forcing mms</span>
$ <span class="pl-s1">./elasticity -ceed /gpu/cuda -mesh [.exo file] -degree 2 -E 1 -nu 0.3 -problem Linear -forcing mms</span>
$ <span class="pl-s1"><span class="pl-c1">cd</span> ..</span></pre></div>
<p dir="auto">For the last example shown, sample meshes to be used in place of <code>[.exo file]</code> can be found at <a href="https://github.com/jeremylt/ceedSampleMeshes">https://github.com/jeremylt/ceedSampleMeshes</a></p>
<p dir="auto">The above code assumes a GPU-capable machine with the CUDA backends enabled.
Depending on the available backends, other CEED resource specifiers can be provided with the <code>-ceed</code> option.
Other command line arguments can be found in <a href="https://github.com/CEED/libCEED/blob/main/examples/petsc/README.md">examples/petsc</a>.</p>
<p dir="auto">% benchmarks-marker</p>
<h2 dir="auto"><a id="user-content-benchmarks" class="anchor" aria-hidden="true" href="#benchmarks"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Benchmarks</h2>
<p dir="auto">A sequence of benchmarks for all enabled backends can be run using:</p>
<div class="highlight highlight-text-shell-session notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ make benchmarks"><pre>$ <span class="pl-s1">make benchmarks</span></pre></div>
<p dir="auto">The results from the benchmarks are stored inside the <code>benchmarks/</code> directory and they can be viewed using the commands (requires python with matplotlib):</p>
<div class="highlight highlight-text-shell-session notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ cd benchmarks
$ python postprocess-plot.py petsc-bps-bp1-*-output.txt
$ python postprocess-plot.py petsc-bps-bp3-*-output.txt"><pre>$ <span class="pl-s1"><span class="pl-c1">cd</span> benchmarks</span>
$ <span class="pl-s1">python postprocess-plot.py petsc-bps-bp1-<span class="pl-k">*</span>-output.txt</span>
$ <span class="pl-s1">python postprocess-plot.py petsc-bps-bp3-<span class="pl-k">*</span>-output.txt</span></pre></div>
<p dir="auto">Using the <code>benchmarks</code> target runs a comprehensive set of benchmarks which may take some time to run.
Subsets of the benchmarks can be run using the scripts in the <code>benchmarks</code> folder.</p>
<p dir="auto">For more details about the benchmarks, see the <code>benchmarks/README.md</code> file.</p>
<h2 dir="auto"><a id="user-content-install" class="anchor" aria-hidden="true" href="#install"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Install</h2>
<p dir="auto">To install libCEED, run:</p>
<div class="highlight highlight-text-shell-session notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ make install prefix=/path/to/install/dir"><pre>$ <span class="pl-s1">make install prefix=/path/to/install/dir</span></pre></div>
<p dir="auto">or (e.g., if creating packages):</p>
<div class="highlight highlight-text-shell-session notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ make install prefix=/usr DESTDIR=/packaging/path"><pre>$ <span class="pl-s1">make install prefix=/usr DESTDIR=/packaging/path</span></pre></div>
<p dir="auto">To build and install in separate steps, run:</p>
<div class="highlight highlight-text-shell-session notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ make for_install=1 prefix=/path/to/install/dir
$ make install prefix=/path/to/install/dir"><pre>$ <span class="pl-s1">make for_install=1 prefix=/path/to/install/dir</span>
$ <span class="pl-s1">make install prefix=/path/to/install/dir</span></pre></div>
<p dir="auto">The usual variables like <code>CC</code> and <code>CFLAGS</code> are used, and optimization flags for all languages can be set using the likes of <code>OPT='-O3 -march=native'</code>.
Use <code>STATIC=1</code> to build static libraries (<code>libceed.a</code>).</p>
<p dir="auto">To install libCEED for Python, run:</p>
<div class="highlight highlight-text-shell-session notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ pip install libceed"><pre>$ <span class="pl-s1">pip install libceed</span></pre></div>
<p dir="auto">with the desired setuptools options, such as <code>--user</code>.</p>
<h3 dir="auto"><a id="user-content-pkg-config" class="anchor" aria-hidden="true" href="#pkg-config"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>pkg-config</h3>
<p dir="auto">In addition to library and header, libCEED provides a <a href="https://en.wikipedia.org/wiki/Pkg-config" rel="nofollow">pkg-config</a> file that can be used to easily compile and link.
<a href="https://people.freedesktop.org/~dbn/pkg-config-guide.html#faq" rel="nofollow">For example</a>, if <code>$prefix</code> is a standard location or you set the environment variable <code>PKG_CONFIG_PATH</code>:</p>
<div class="highlight highlight-text-shell-session notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ cc `pkg-config --cflags --libs ceed` -o myapp myapp.c"><pre>$ <span class="pl-s1">cc <span class="pl-s"><span class="pl-pds">`</span>pkg-config --cflags --libs ceed<span class="pl-pds">`</span></span> -o myapp myapp.c</span></pre></div>
<p dir="auto">will build <code>myapp</code> with libCEED.
This can be used with the source or installed directories.
Most build systems have support for pkg-config.</p>
<h2 dir="auto"><a id="user-content-contact" class="anchor" aria-hidden="true" href="#contact"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Contact</h2>
<p dir="auto">You can reach the libCEED team by emailing <a href="mailto:ceed-users@llnl.gov">ceed-users@llnl.gov</a> or by leaving a comment in the <a href="https://github.com/CEED/libCEED/issues">issue tracker</a>.</p>
<h2 dir="auto"><a id="user-content-how-to-cite" class="anchor" aria-hidden="true" href="#how-to-cite"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>How to Cite</h2>
<p dir="auto">If you utilize libCEED please cite:</p>
<div class="highlight highlight-text-bibtex notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@article{libceed-joss-paper,
  author       = {Jed Brown and Ahmad Abdelfattah and Valeria Barra and Natalie Beams and Jean Sylvain Camier and Veselin Dobrev and Yohann Dudouit and Leila Ghaffari and Tzanio Kolev and David Medina and Will Pazner and Thilina Ratnayaka and Jeremy Thompson and Stan Tomov},
  title        = {{libCEED}: Fast algebra for high-order element-based discretizations},
  journal      = {Journal of Open Source Software},
  year         = {2021},
  publisher    = {The Open Journal},
  volume       = {6},
  number       = {63},
  pages        = {2945},
  doi          = {10.21105/joss.02945}
}"><pre><span class="pl-k">@article</span>{<span class="pl-en">libceed-joss-paper</span>,
  <span class="pl-s">author</span>       = <span class="pl-s"><span class="pl-pds">{</span>Jed Brown and Ahmad Abdelfattah and Valeria Barra and Natalie Beams and Jean Sylvain Camier and Veselin Dobrev and Yohann Dudouit and Leila Ghaffari and Tzanio Kolev and David Medina and Will Pazner and Thilina Ratnayaka and Jeremy Thompson and Stan Tomov<span class="pl-pds">}</span></span>,
  <span class="pl-s">title</span>        = <span class="pl-s"><span class="pl-pds">{</span>{libCEED}: Fast algebra for high-order element-based discretizations<span class="pl-pds">}</span></span>,
  <span class="pl-s">journal</span>      = <span class="pl-s"><span class="pl-pds">{</span>Journal of Open Source Software<span class="pl-pds">}</span></span>,
  <span class="pl-s">year</span>         = <span class="pl-s"><span class="pl-pds">{</span>2021<span class="pl-pds">}</span></span>,
  <span class="pl-s">publisher</span>    = <span class="pl-s"><span class="pl-pds">{</span>The Open Journal<span class="pl-pds">}</span></span>,
  <span class="pl-s">volume</span>       = <span class="pl-s"><span class="pl-pds">{</span>6<span class="pl-pds">}</span></span>,
  <span class="pl-s">number</span>       = <span class="pl-s"><span class="pl-pds">{</span>63<span class="pl-pds">}</span></span>,
  <span class="pl-s">pages</span>        = <span class="pl-s"><span class="pl-pds">{</span>2945<span class="pl-pds">}</span></span>,
  <span class="pl-s">doi</span>          = <span class="pl-s"><span class="pl-pds">{</span>10.21105/joss.02945<span class="pl-pds">}</span></span>
}</pre></div>
<p dir="auto">The archival copy of the libCEED user manual is maintained on <a href="https://doi.org/10.5281/zenodo.4302736" rel="nofollow">Zenodo</a>.
To cite the user manual:</p>
<div class="highlight highlight-text-bibtex notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@misc{libceed-user-manual,
  author       = {Abdelfattah, Ahmad and
                  Barra, Valeria and
                  Beams, Natalie and
                  Brown, Jed and
                  Camier, Jean-Sylvain and
                  Dobrev, Veselin and
                  Dudouit, Yohann and
                  Ghaffari, Leila and
                  Kolev, Tzanio and
                  Medina, David and
                  Pazner, Will and
                  Ratnayaka, Thilina and
                  Shakeri, Rezgar and
                  Thompson, Jeremy L and
                  Tomov, Stanimire and
                  Wright III, James},
  title        = {{libCEED} User Manual},
  month        = dec,
  year         = 2022,
  publisher    = {Zenodo},
  version      = {0.11.0},
  doi          = {10.5281/zenodo.7480454}
}"><pre><span class="pl-k">@misc</span>{<span class="pl-en">libceed-user-manual</span>,
  <span class="pl-s">author</span>       = <span class="pl-s"><span class="pl-pds">{</span>Abdelfattah, Ahmad and</span>
<span class="pl-s">                  Barra, Valeria and</span>
<span class="pl-s">                  Beams, Natalie and</span>
<span class="pl-s">                  Brown, Jed and</span>
<span class="pl-s">                  Camier, Jean-Sylvain and</span>
<span class="pl-s">                  Dobrev, Veselin and</span>
<span class="pl-s">                  Dudouit, Yohann and</span>
<span class="pl-s">                  Ghaffari, Leila and</span>
<span class="pl-s">                  Kolev, Tzanio and</span>
<span class="pl-s">                  Medina, David and</span>
<span class="pl-s">                  Pazner, Will and</span>
<span class="pl-s">                  Ratnayaka, Thilina and</span>
<span class="pl-s">                  Shakeri, Rezgar and</span>
<span class="pl-s">                  Thompson, Jeremy L and</span>
<span class="pl-s">                  Tomov, Stanimire and</span>
<span class="pl-s">                  Wright III, James<span class="pl-pds">}</span></span>,
  <span class="pl-s">title</span>        = <span class="pl-s"><span class="pl-pds">{</span>{libCEED} User Manual<span class="pl-pds">}</span></span>,
  <span class="pl-s">month</span>        = dec,
  <span class="pl-s">year</span>         = <span class="pl-c1">2022</span>,
  <span class="pl-s">publisher</span>    = <span class="pl-s"><span class="pl-pds">{</span>Zenodo<span class="pl-pds">}</span></span>,
  <span class="pl-s">version</span>      = <span class="pl-s"><span class="pl-pds">{</span>0.11.0<span class="pl-pds">}</span></span>,
  <span class="pl-s">doi</span>          = <span class="pl-s"><span class="pl-pds">{</span>10.5281/zenodo.7480454<span class="pl-pds">}</span></span>
}</pre></div>
<p dir="auto">For libCEED's Python interface please cite:</p>
<div class="highlight highlight-text-bibtex notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@InProceedings{libceed-paper-proc-scipy-2020,
  author    = {{V}aleria {B}arra and {J}ed {B}rown and {J}eremy {T}hompson and {Y}ohann {D}udouit},
  title     = {{H}igh-performance operator evaluations with ease of use: lib{C}{E}{E}{D}'s {P}ython interface},
  booktitle = {{P}roceedings of the 19th {P}ython in {S}cience {C}onference},
  pages     = {85 - 90},
  year      = {2020},
  editor    = {{M}eghann {A}garwal and {C}hris {C}alloway and {D}illon {N}iederhut and {D}avid {S}hupe},
  doi       = {10.25080/Majora-342d178e-00c}
}"><pre><span class="pl-k">@InProceedings</span>{<span class="pl-en">libceed-paper-proc-scipy-2020</span>,
  <span class="pl-s">author</span>    = <span class="pl-s"><span class="pl-pds">{</span>{V}aleria {B}arra and {J}ed {B}rown and {J}eremy {T}hompson and {Y}ohann {D}udouit<span class="pl-pds">}</span></span>,
  <span class="pl-s">title</span>     = <span class="pl-s"><span class="pl-pds">{</span>{H}igh-performance operator evaluations with ease of use: lib{C}{E}{E}{D}'s {P}ython interface<span class="pl-pds">}</span></span>,
  <span class="pl-s">booktitle</span> = <span class="pl-s"><span class="pl-pds">{</span>{P}roceedings of the 19th {P}ython in {S}cience {C}onference<span class="pl-pds">}</span></span>,
  <span class="pl-s">pages</span>     = <span class="pl-s"><span class="pl-pds">{</span>85 - 90<span class="pl-pds">}</span></span>,
  <span class="pl-s">year</span>      = <span class="pl-s"><span class="pl-pds">{</span>2020<span class="pl-pds">}</span></span>,
  <span class="pl-s">editor</span>    = <span class="pl-s"><span class="pl-pds">{</span>{M}eghann {A}garwal and {C}hris {C}alloway and {D}illon {N}iederhut and {D}avid {S}hupe<span class="pl-pds">}</span></span>,
  <span class="pl-s">doi</span>       = <span class="pl-s"><span class="pl-pds">{</span>10.25080/Majora-342d178e-00c<span class="pl-pds">}</span></span>
}</pre></div>
<p dir="auto">The BibTeX entries for these references can be found in the <code>doc/bib/references.bib</code> file.</p>
<h2 dir="auto"><a id="user-content-copyright" class="anchor" aria-hidden="true" href="#copyright"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Copyright</h2>
<p dir="auto">The following copyright applies to each file in the CEED software suite, unless otherwise stated in the file:</p>
<blockquote>
<p dir="auto">Copyright (c) 2017-2023, Lawrence Livermore National Security, LLC and other CEED contributors.
All rights reserved.</p>
</blockquote>
<p dir="auto">See files LICENSE and NOTICE for details.</p>
</article></div>