<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-smoothingsplines" class="anchor" aria-hidden="true" href="#smoothingsplines"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>SmoothingSplines</h1>
<p><a href="https://github.com/nignatiadis/SmoothingSplines.jl/actions"><img src="https://github.com/nignatiadis/SmoothingSplines.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/nignatiadis/SmoothingSplines.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/2d5f14ce7150da6e26abc691d84f675f8a1e5d5eed28bacb8e5196039ac742f0/68747470733a2f2f636f6465636f762e696f2f67682f6e69676e617469616469732f536d6f6f7468696e6753706c696e65732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/nignatiadis/SmoothingSplines.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p>A Julia package for nonparametric regression with Cubic Smoothing Splines. The initial aim is to provide the same functionality as R's <code>smooth.spline</code> function and competitive computational performance. The implementation however is completely independent of the R function and based on the algorithm by Reinsch [1], as described in Chapter 2 of [2].</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using SmoothingSplines
using RDatasets
using Gadfly

cars = dataset(&quot;datasets&quot;,&quot;cars&quot;)
X = map(Float64,convert(Array,cars[:Speed]))
Y = map(Float64,convert(Array,cars[:Dist]))

spl = fit(SmoothingSpline, X, Y, 250.0) # 位=250.0
Ypred = predict(spl) # fitted vector
plot(layer(x=X, y=Y, Geom.point),
	layer(x=X, y=Ypred, Geom.line, 	Theme(default_color=colorant&quot;red&quot;)))

predict(spl, 20.0) #prediction at arbitrary point
"><pre><span class="pl-k">using</span> SmoothingSplines
<span class="pl-k">using</span> RDatasets
<span class="pl-k">using</span> Gadfly

cars <span class="pl-k">=</span> <span class="pl-c1">dataset</span>(<span class="pl-s"><span class="pl-pds">"</span>datasets<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>cars<span class="pl-pds">"</span></span>)
X <span class="pl-k">=</span> <span class="pl-c1">map</span>(Float64,<span class="pl-c1">convert</span>(Array,cars[<span class="pl-c1">:Speed</span>]))
Y <span class="pl-k">=</span> <span class="pl-c1">map</span>(Float64,<span class="pl-c1">convert</span>(Array,cars[<span class="pl-c1">:Dist</span>]))

spl <span class="pl-k">=</span> <span class="pl-c1">fit</span>(SmoothingSpline, X, Y, <span class="pl-c1">250.0</span>) <span class="pl-c"><span class="pl-c">#</span> 位=250.0</span>
Ypred <span class="pl-k">=</span> <span class="pl-c1">predict</span>(spl) <span class="pl-c"><span class="pl-c">#</span> fitted vector</span>
<span class="pl-c1">plot</span>(<span class="pl-c1">layer</span>(x<span class="pl-k">=</span>X, y<span class="pl-k">=</span>Y, Geom<span class="pl-k">.</span>point),
	<span class="pl-c1">layer</span>(x<span class="pl-k">=</span>X, y<span class="pl-k">=</span>Ypred, Geom<span class="pl-k">.</span>line, 	<span class="pl-c1">Theme</span>(default_color<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">colorant</span>"</span>red<span class="pl-pds">"</span></span>)))

<span class="pl-c1">predict</span>(spl, <span class="pl-c1">20.0</span>) <span class="pl-c"><span class="pl-c">#</span>prediction at arbitrary point</span></pre></div>
<h3><a id="user-content-todo" class="anchor" aria-hidden="true" href="#todo"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>TODO</h3>
<ul>
<li>Better docs</li>
<li>conversion between regularization parameter 位 and degrees of freedom</li>
<li>automatic selection of 位 (LOOCV, GCV)</li>
<li>subsampling of design grid for higher efficiency</li>
</ul>
<p><strong>References</strong></p>
<p>[1] Reinsch, Christian H. "Smoothing by spline functions." Numerische mathematik 10.3 (1967): 177-183.</p>
<p>[2] Green, Peter J., and Bernard W. Silverman. Nonparametric regression and generalized linear models: a roughness penalty approach. CRC Press, 1993.</p>
</article></div>