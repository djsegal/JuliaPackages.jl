<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-smoothingsplines" class="anchor" aria-hidden="true" href="#smoothingsplines"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>SmoothingSplines</h1>
<p><a href="https://travis-ci.org/nignatiadis/SmoothingSplines.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/90fa72c39f9859a6cf521b56279118511f6f5920/68747470733a2f2f7472617669732d63692e6f72672f6e69676e617469616469732f536d6f6f7468696e6753706c696e65732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/nignatiadis/SmoothingSplines.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/nignatiadis/smoothingsplines-jl/branch/master" rel="nofollow"><img src="https://camo.githubusercontent.com/5103c546d8b3dc424ed0a7aee6904df4d17940c8/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f6769746875622f6e69676e617469616469732f536d6f6f7468696e6753706c696e65732e6a6c3f6272616e63683d6d6173746572267376673d74727565" alt="Build Status" data-canonical-src="https://ci.appveyor.com/api/projects/status/github/nignatiadis/SmoothingSplines.jl?branch=master&amp;svg=true" style="max-width:100%;"></a></p>
<p>A Julia package for nonparametric regression with Cubic Smoothing Splines. The initial aim is to provide the same functionality as R's <code>smooth.spline</code> function and competitive computational performance. The implementation however is completely independent of the R function and based on the algorithm by Reinsch [1], as described in Chapter 2 of [2].</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> SmoothingSplines
<span class="pl-k">using</span> RDatasets
<span class="pl-k">using</span> Gadfly

cars <span class="pl-k">=</span> <span class="pl-c1">dataset</span>(<span class="pl-s"><span class="pl-pds">"</span>datasets<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>cars<span class="pl-pds">"</span></span>)
X <span class="pl-k">=</span> <span class="pl-c1">map</span>(Float64,<span class="pl-c1">convert</span>(Array,cars[<span class="pl-c1">:Speed</span>]))
Y <span class="pl-k">=</span> <span class="pl-c1">map</span>(Float64,<span class="pl-c1">convert</span>(Array,cars[<span class="pl-c1">:Dist</span>]))

spl <span class="pl-k">=</span> <span class="pl-c1">fit</span>(SmoothingSpline, X, Y, <span class="pl-c1">250.0</span>) <span class="pl-c"><span class="pl-c">#</span> λ=250.0</span>
Ypred <span class="pl-k">=</span> SmoothingSplines<span class="pl-k">.</span><span class="pl-c1">predict</span>(spl) <span class="pl-c"><span class="pl-c">#</span> fitted vector</span>
<span class="pl-c1">plot</span>(<span class="pl-c1">layer</span>(x<span class="pl-k">=</span>X, y<span class="pl-k">=</span>Y, Geom<span class="pl-k">.</span>point),
	<span class="pl-c1">layer</span>(x<span class="pl-k">=</span>X, y<span class="pl-k">=</span>Ypred, Geom<span class="pl-k">.</span>line, 	<span class="pl-c1">Theme</span>(default_color<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">colorant</span>"</span>red<span class="pl-pds">"</span></span>)))

SmoothingSplines<span class="pl-k">.</span><span class="pl-c1">predict</span>(spl, <span class="pl-c1">20.0</span>) <span class="pl-c"><span class="pl-c">#</span>prediction at arbitrary point</span></pre></div>
<h3><a id="user-content-todo" class="anchor" aria-hidden="true" href="#todo"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>TODO</h3>
<ul>
<li>Better docs</li>
<li>conversion between regularization parameter λ and degrees of freedom</li>
<li>automatic selection of λ (LOOCV, GCV)</li>
<li>subsampling of design grid for higher efficiency</li>
</ul>
<p><strong>References</strong></p>
<p>[1] Reinsch, Christian H. "Smoothing by spline functions." Numerische mathematik 10.3 (1967): 177-183.</p>
<p>[2] Green, Peter J., and Bernard W. Silverman. Nonparametric regression and generalized linear models: a roughness penalty approach. CRC Press, 1993.</p>
</article></div>