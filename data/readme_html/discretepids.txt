<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-discretepids" class="anchor" aria-hidden="true" href="#discretepids"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>DiscretePIDs</h1>
<p dir="auto"><a href="https://github.com/JuliaControl/DiscretePIDs.jl/actions/workflows/CI.yml?query=branch%3Amain"><img src="https://github.com/JuliaControl/DiscretePIDs.jl/actions/workflows/CI.yml/badge.svg?branch=main" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/JuliaControl/DiscretePIDs.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/3bf84e4e981cb62bc7f11a0c8dfabc2f92c145c72c2ceca22f41869b0005f7be/68747470733a2f2f636f6465636f762e696f2f67682f4a756c6961436f6e74726f6c2f4469736372657465504944732e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/JuliaControl/DiscretePIDs.jl/branch/main/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">This package implements a discrete-time PID controller on the form
<math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="84f9f426153c505be0d0ed91c413b3de">$$U(s) = K \left( bR(s) - Y(s) + \dfrac{1}{sT_i} \left( R(s) - Y(s) \right) - \dfrac{sT_d}{1 + s T_d / N}Y(s) \right) + U_\textrm{ff}(s)$$</math-renderer></p>
<p dir="auto">where</p>
<ul dir="auto">
<li>
<math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="84f9f426153c505be0d0ed91c413b3de">$u(t) \leftrightarrow U(s)$</math-renderer> is the control signal</li>
<li>
<math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="84f9f426153c505be0d0ed91c413b3de">$y(t) \leftrightarrow Y(s)$</math-renderer> is the measurement signal</li>
<li>
<math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="84f9f426153c505be0d0ed91c413b3de">$r(t) \leftrightarrow R(s)$</math-renderer> is the reference / set point</li>
<li>
<math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="84f9f426153c505be0d0ed91c413b3de">$u_\textrm{ff}(t) \leftrightarrow U_\textrm{ff}(s)$</math-renderer> is the feed-forward contribution</li>
<li>
<math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="84f9f426153c505be0d0ed91c413b3de">$K$</math-renderer> is the proportional gain</li>
<li>
<math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="84f9f426153c505be0d0ed91c413b3de">$T_i$</math-renderer> is the integral time</li>
<li>
<math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="84f9f426153c505be0d0ed91c413b3de">$T_d$</math-renderer> is the derivative time</li>
<li>
<math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="84f9f426153c505be0d0ed91c413b3de">$N$</math-renderer> is the maximum derivative gain</li>
<li>
<math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="84f9f426153c505be0d0ed91c413b3de">$b \in [0, 1]$</math-renderer> is the proportion of the reference signal that appears in the proportional term.</li>
</ul>
<p dir="auto">The controller further has output saturation controlled by <code>umin, umax</code> and integrator anti-windup controlled by the tracking time <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="84f9f426153c505be0d0ed91c413b3de">$T_t$</math-renderer>.</p>
<p dir="auto">Construct a controller using</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="pid = DiscretePID(; K = 1, Ti = false, Td = false, Tt = √(Ti*Td), N = 10, b = 1, umin = -Inf, umax = Inf, Ts, I = 0, D = 0, yold = 0)"><pre>pid <span class="pl-k">=</span> <span class="pl-c1">DiscretePID</span>(; K <span class="pl-k">=</span> <span class="pl-c1">1</span>, Ti <span class="pl-k">=</span> <span class="pl-c1">false</span>, Td <span class="pl-k">=</span> <span class="pl-c1">false</span>, Tt <span class="pl-k">=</span> <span class="pl-k">√</span>(Ti<span class="pl-k">*</span>Td), N <span class="pl-k">=</span> <span class="pl-c1">10</span>, b <span class="pl-k">=</span> <span class="pl-c1">1</span>, umin <span class="pl-k">=</span> <span class="pl-k">-</span><span class="pl-c1">Inf</span>, umax <span class="pl-k">=</span> <span class="pl-c1">Inf</span>, Ts, I <span class="pl-k">=</span> <span class="pl-c1">0</span>, D <span class="pl-k">=</span> <span class="pl-c1">0</span>, yold <span class="pl-k">=</span> <span class="pl-c1">0</span>)</pre></div>
<p dir="auto">and compute a control signal using</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="u = pid(r, y, uff)"><pre>u <span class="pl-k">=</span> <span class="pl-c1">pid</span>(r, y, uff)</pre></div>
<p dir="auto">or</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="u = calculate_control!(pid, r, y, uff)"><pre>u <span class="pl-k">=</span> <span class="pl-c1">calculate_control!</span>(pid, r, y, uff)</pre></div>
<p dir="auto">The parameters <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="84f9f426153c505be0d0ed91c413b3de">$K, T_i, T_d$</math-renderer> may be updated using the functions, <code>set_K!, set_Ti!, set_Td!</code>.</p>
<h2 dir="auto">
<a id="user-content-example-using-controlsystems" class="anchor" aria-hidden="true" href="#example-using-controlsystems"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example using ControlSystems:</h2>
<p dir="auto">The following example simulates the PID controller using ControlSystems.jl. We will simulate a load disturbance <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="84f9f426153c505be0d0ed91c413b3de">$d(t) = 1$</math-renderer> entering on the process input, while the reference is <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="84f9f426153c505be0d0ed91c413b3de">$r(t) = 0$</math-renderer>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using DiscretePIDs, ControlSystemsBase, Plots
Tf = 15   # Simulation time
K  = 1    # Proportional gain
Ti = 1    # Integral time
Td = 1    # Derivative time
Ts = 0.01 # sample time

P   = c2d(ss(tf(1, [1, 1])), Ts) # Process to be controlled, discretized using zero-order hold
pid = DiscretePID(; K, Ts, Ti, Td)

ctrl = function(x,t)
    y = (P.C*x)[] # measurement
    d = 1         # disturbance
    r = 0         # reference
    u = pid(r, y)
    u + d # Plant input is control signal + disturbance
end

res = lsim(P, ctrl, Tf)

plot(res, plotu=true); ylabel!(&quot;u + d&quot;, sp=2)"><pre><span class="pl-k">using</span> DiscretePIDs, ControlSystemsBase, Plots
Tf <span class="pl-k">=</span> <span class="pl-c1">15</span>   <span class="pl-c"><span class="pl-c">#</span> Simulation time</span>
K  <span class="pl-k">=</span> <span class="pl-c1">1</span>    <span class="pl-c"><span class="pl-c">#</span> Proportional gain</span>
Ti <span class="pl-k">=</span> <span class="pl-c1">1</span>    <span class="pl-c"><span class="pl-c">#</span> Integral time</span>
Td <span class="pl-k">=</span> <span class="pl-c1">1</span>    <span class="pl-c"><span class="pl-c">#</span> Derivative time</span>
Ts <span class="pl-k">=</span> <span class="pl-c1">0.01</span> <span class="pl-c"><span class="pl-c">#</span> sample time</span>

P   <span class="pl-k">=</span> <span class="pl-c1">c2d</span>(<span class="pl-c1">ss</span>(<span class="pl-c1">tf</span>(<span class="pl-c1">1</span>, [<span class="pl-c1">1</span>, <span class="pl-c1">1</span>])), Ts) <span class="pl-c"><span class="pl-c">#</span> Process to be controlled, discretized using zero-order hold</span>
pid <span class="pl-k">=</span> <span class="pl-c1">DiscretePID</span>(; K, Ts, Ti, Td)

ctrl <span class="pl-k">=</span> <span class="pl-k">function</span>(x,t)
    y <span class="pl-k">=</span> (P<span class="pl-k">.</span>C<span class="pl-k">*</span>x)[] <span class="pl-c"><span class="pl-c">#</span> measurement</span>
    d <span class="pl-k">=</span> <span class="pl-c1">1</span>         <span class="pl-c"><span class="pl-c">#</span> disturbance</span>
    r <span class="pl-k">=</span> <span class="pl-c1">0</span>         <span class="pl-c"><span class="pl-c">#</span> reference</span>
    u <span class="pl-k">=</span> <span class="pl-c1">pid</span>(r, y)
    u <span class="pl-k">+</span> d <span class="pl-c"><span class="pl-c">#</span> Plant input is control signal + disturbance</span>
<span class="pl-k">end</span>

res <span class="pl-k">=</span> <span class="pl-c1">lsim</span>(P, ctrl, Tf)

<span class="pl-c1">plot</span>(res, plotu<span class="pl-k">=</span><span class="pl-c1">true</span>); <span class="pl-c1">ylabel!</span>(<span class="pl-s"><span class="pl-pds">"</span>u + d<span class="pl-pds">"</span></span>, sp<span class="pl-k">=</span><span class="pl-c1">2</span>)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://user-images.githubusercontent.com/3797491/172366365-c1533aed-e877-499d-9ebb-01df62107dfb.png"><img src="https://user-images.githubusercontent.com/3797491/172366365-c1533aed-e877-499d-9ebb-01df62107dfb.png" alt="Simulation result" style="max-width: 100%;"></a></p>
<h2 dir="auto">
<a id="user-content-example-using-differentialequations" class="anchor" aria-hidden="true" href="#example-using-differentialequations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example using DifferentialEquations:</h2>
<p dir="auto">The following example is identical to the one above, but uses DifferentialEquations.jl to simulate the PID controller. This is useful if you want to simulate the controller in a more complex system, e.g., with a nonlinear plant.</p>
<p dir="auto">There are several different ways one could go about including a discrete-time controller in a continuous-time simulation, in particular, we must choose a way to store the computed control signal</p>
<ol dir="auto">
<li>Use a global variable into which we write the control signal at each discrete time step.</li>
<li>Add an extra state variable to the system, and use this state to store the control signal. This is the approach taken in the example below since it has the added benefit of adding the computed control signal to the solution object.</li>
</ol>
<p dir="auto">We will use a <code>DiffEqCallbacks.PeriodicCallback</code> in which we perform the PID-controller update, and store the computed control signal in the extra state variable.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using DiscretePIDs, ControlSystemsBase, OrdinaryDiffEq, DiffEqCallbacks, Plots

Tf = 15   # Simulation time
K  = 1    # Proportional gain
Ti = 1    # Integral time
Td = 1    # Derivative time
Ts = 0.01 # sample time

P = ss(tf(1, [1, 1]))  # Process to be controlled in continuous time
A, B, C, D = ssdata(P) # Extract the system matrices
pid = DiscretePID(; K, Ts, Ti, Td)

function dynamics!(dxu, xu, p, t)
    A, B, C, r, d = p   # We store the reference and disturbance in the parameter object
    x = xu[1:P.nx]      # Extract the state
    u = xu[P.nx+1:end]  # Extract the control signal
    dxu[1:P.nx] .= A*x .+ B*(u .+ d) # Plant input is control signal + disturbance
    dxu[P.nx+1:end] .= 0             # The control signal has no dynamics, it's updated by the callback
end

cb = PeriodicCallback(Ts) do integrator
    p = integrator.p    # Extract the parameter object from the integrator
    (; C, r, d) = p     # Extract the reference and disturbance from the parameter object
    x = integrator.u[1:P.nx] # Extract the state (the integrator uses the variable name `u` to refer to the state, in control theory we typically use the variable name `x`)
    y = (C*x)[]         # Simulated measurement
    u = pid(r, y)       # Compute the control signal
    integrator.u[P.nx+1:end] .= u # Update the control-signal state variable 
end

parameters = (; A, B, C, r=0, d=1) # reference = 0, disturbance = 1
xu0 = zeros(P.nx + P.nu) # Initial state of the system + control signals
prob = ODEProblem(dynamics!, xu0, (0, Tf), parameters, callback=cb) # reference = 0, disturbance = 1
sol = solve(prob, Tsit5(), saveat=Ts)

plot(sol, layout=(2, 1), ylabel=[&quot;x&quot; &quot;u&quot;], lab=&quot;&quot;)"><pre><span class="pl-k">using</span> DiscretePIDs, ControlSystemsBase, OrdinaryDiffEq, DiffEqCallbacks, Plots

Tf <span class="pl-k">=</span> <span class="pl-c1">15</span>   <span class="pl-c"><span class="pl-c">#</span> Simulation time</span>
K  <span class="pl-k">=</span> <span class="pl-c1">1</span>    <span class="pl-c"><span class="pl-c">#</span> Proportional gain</span>
Ti <span class="pl-k">=</span> <span class="pl-c1">1</span>    <span class="pl-c"><span class="pl-c">#</span> Integral time</span>
Td <span class="pl-k">=</span> <span class="pl-c1">1</span>    <span class="pl-c"><span class="pl-c">#</span> Derivative time</span>
Ts <span class="pl-k">=</span> <span class="pl-c1">0.01</span> <span class="pl-c"><span class="pl-c">#</span> sample time</span>

P <span class="pl-k">=</span> <span class="pl-c1">ss</span>(<span class="pl-c1">tf</span>(<span class="pl-c1">1</span>, [<span class="pl-c1">1</span>, <span class="pl-c1">1</span>]))  <span class="pl-c"><span class="pl-c">#</span> Process to be controlled in continuous time</span>
A, B, C, D <span class="pl-k">=</span> <span class="pl-c1">ssdata</span>(P) <span class="pl-c"><span class="pl-c">#</span> Extract the system matrices</span>
pid <span class="pl-k">=</span> <span class="pl-c1">DiscretePID</span>(; K, Ts, Ti, Td)

<span class="pl-k">function</span> <span class="pl-en">dynamics!</span>(dxu, xu, p, t)
    A, B, C, r, d <span class="pl-k">=</span> p   <span class="pl-c"><span class="pl-c">#</span> We store the reference and disturbance in the parameter object</span>
    x <span class="pl-k">=</span> xu[<span class="pl-c1">1</span><span class="pl-k">:</span>P<span class="pl-k">.</span>nx]      <span class="pl-c"><span class="pl-c">#</span> Extract the state</span>
    u <span class="pl-k">=</span> xu[P<span class="pl-k">.</span>nx<span class="pl-k">+</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">end</span>]  <span class="pl-c"><span class="pl-c">#</span> Extract the control signal</span>
    dxu[<span class="pl-c1">1</span><span class="pl-k">:</span>P<span class="pl-k">.</span>nx] <span class="pl-k">.=</span> A<span class="pl-k">*</span>x <span class="pl-k">.+</span> B<span class="pl-k">*</span>(u <span class="pl-k">.+</span> d) <span class="pl-c"><span class="pl-c">#</span> Plant input is control signal + disturbance</span>
    dxu[P<span class="pl-k">.</span>nx<span class="pl-k">+</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">end</span>] <span class="pl-k">.=</span> <span class="pl-c1">0</span>             <span class="pl-c"><span class="pl-c">#</span> The control signal has no dynamics, it's updated by the callback</span>
<span class="pl-k">end</span>

cb <span class="pl-k">=</span> <span class="pl-c1">PeriodicCallback</span>(Ts) <span class="pl-k">do</span> integrator
    p <span class="pl-k">=</span> integrator<span class="pl-k">.</span>p    <span class="pl-c"><span class="pl-c">#</span> Extract the parameter object from the integrator</span>
    (; C, r, d) <span class="pl-k">=</span> p     <span class="pl-c"><span class="pl-c">#</span> Extract the reference and disturbance from the parameter object</span>
    x <span class="pl-k">=</span> integrator<span class="pl-k">.</span>u[<span class="pl-c1">1</span><span class="pl-k">:</span>P<span class="pl-k">.</span>nx] <span class="pl-c"><span class="pl-c">#</span> Extract the state (the integrator uses the variable name `u` to refer to the state, in control theory we typically use the variable name `x`)</span>
    y <span class="pl-k">=</span> (C<span class="pl-k">*</span>x)[]         <span class="pl-c"><span class="pl-c">#</span> Simulated measurement</span>
    u <span class="pl-k">=</span> <span class="pl-c1">pid</span>(r, y)       <span class="pl-c"><span class="pl-c">#</span> Compute the control signal</span>
    integrator<span class="pl-k">.</span>u[P<span class="pl-k">.</span>nx<span class="pl-k">+</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">end</span>] <span class="pl-k">.=</span> u <span class="pl-c"><span class="pl-c">#</span> Update the control-signal state variable </span>
<span class="pl-k">end</span>

parameters <span class="pl-k">=</span> (; A, B, C, r<span class="pl-k">=</span><span class="pl-c1">0</span>, d<span class="pl-k">=</span><span class="pl-c1">1</span>) <span class="pl-c"><span class="pl-c">#</span> reference = 0, disturbance = 1</span>
xu0 <span class="pl-k">=</span> <span class="pl-c1">zeros</span>(P<span class="pl-k">.</span>nx <span class="pl-k">+</span> P<span class="pl-k">.</span>nu) <span class="pl-c"><span class="pl-c">#</span> Initial state of the system + control signals</span>
prob <span class="pl-k">=</span> <span class="pl-c1">ODEProblem</span>(dynamics!, xu0, (<span class="pl-c1">0</span>, Tf), parameters, callback<span class="pl-k">=</span>cb) <span class="pl-c"><span class="pl-c">#</span> reference = 0, disturbance = 1</span>
sol <span class="pl-k">=</span> <span class="pl-c1">solve</span>(prob, <span class="pl-c1">Tsit5</span>(), saveat<span class="pl-k">=</span>Ts)

<span class="pl-c1">plot</span>(sol, layout<span class="pl-k">=</span>(<span class="pl-c1">2</span>, <span class="pl-c1">1</span>), ylabel<span class="pl-k">=</span>[<span class="pl-s"><span class="pl-pds">"</span>x<span class="pl-pds">"</span></span> <span class="pl-s"><span class="pl-pds">"</span>u<span class="pl-pds">"</span></span>], lab<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">The figure should look more or less identical to the one above, except that we plot the control signal <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="84f9f426153c505be0d0ed91c413b3de">$u$</math-renderer> instead of the combined input <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="84f9f426153c505be0d0ed91c413b3de">$u + d$</math-renderer> like we did above. Due to the fast sample rate <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="84f9f426153c505be0d0ed91c413b3de">$T_s$</math-renderer>, the control signal looks continuous, however, increase <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="84f9f426153c505be0d0ed91c413b3de">$T_s$</math-renderer> and you'll notice the zero-order-hold nature of <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="84f9f426153c505be0d0ed91c413b3de">$u$</math-renderer>.</p>
<h2 dir="auto">
<a id="user-content-details" class="anchor" aria-hidden="true" href="#details"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Details</h2>
<ul dir="auto">
<li>The derivative term only acts on the (filtered) measurement and not the command signal. It is thus safe to pass step changes in the reference to the controller. The parameter <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="84f9f426153c505be0d0ed91c413b3de">$b$</math-renderer> can further be set to zero to avoid step changes in the control signal in response to step changes in the reference.</li>
<li>Bumpless transfer when updating <code>K</code> is realized by updating the state <code>I</code>. See the docs for <code>set_K!</code> for more details.</li>
<li>The total control signal <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="84f9f426153c505be0d0ed91c413b3de">$u(t)$</math-renderer> (PID + feed-forward) is limited by the integral anti-windup.</li>
</ul>
<h2 dir="auto">
<a id="user-content-see-also" class="anchor" aria-hidden="true" href="#see-also"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>See also</h2>
<ul dir="auto">
<li>
<a href="https://github.com/baggepinnen/TrajectoryLimiters.jl">TrajectoryLimiters.jl</a> To generate dynamically feasible reference trajectories with bounded velocity and acceleration given an instantaneous reference <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="84f9f426153c505be0d0ed91c413b3de">$r(t)$</math-renderer> which may change abruptly.</li>
<li>
<a href="https://github.com/JuliaControl/SymbolicControlSystems.jl">SymbolicControlSystems.jl</a> For C-code generation of LTI systems.</li>
</ul>
</article></div>