<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-emphtjl" class="anchor" aria-hidden="true" href="#emphtjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>EMpht.jl</h1>
<p dir="auto">A Julia port of the EMpht.c program, used for fitting Phase-Type distributions via an EM algorithm.</p>
<p dir="auto">The original C — which is available on <a href="https://web.archive.org/web/20180617130551/http://home.math.au.dk/asmus/pspapers.html" rel="nofollow">Søren Asmussen's website</a> — is well documented and has a decent performance for phase-type distributions with a small or moderate number of phases. However it is quite slow for when the number of phases is large (&gt;= 20), and the UX is very old-school Unix.</p>
<p dir="auto">This port is much simpler and faster. See the examples given below and the test cases.</p>
<h2 dir="auto"><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Examples</h2>
<p dir="auto">To fit a phase-type distribution to some data:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Distributions
using EMpht

data = rand(Exponential(1/10), 1_000)  # Generate some data to fit 
sample = EMpht.Sample(obs=data)        # Create an EMpht Sample object with this data
ph = empht(sample, p=5)                # Fit the data using p=5 phases

xGrid = range(0, 8, length=1_00)       # Create a grid to evaluate the density function over
fitPDFs = pdf.(ph, xGrid)              # The probability density function of the fitted phase-type"><pre><span class="pl-k">using</span> Distributions
<span class="pl-k">using</span> EMpht

data <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">Exponential</span>(<span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-c1">10</span>), <span class="pl-c1">1_000</span>)  <span class="pl-c"><span class="pl-c">#</span> Generate some data to fit </span>
sample <span class="pl-k">=</span> EMpht<span class="pl-k">.</span><span class="pl-c1">Sample</span>(obs<span class="pl-k">=</span>data)        <span class="pl-c"><span class="pl-c">#</span> Create an EMpht Sample object with this data</span>
ph <span class="pl-k">=</span> <span class="pl-c1">empht</span>(sample, p<span class="pl-k">=</span><span class="pl-c1">5</span>)                <span class="pl-c"><span class="pl-c">#</span> Fit the data using p=5 phases</span>

xGrid <span class="pl-k">=</span> <span class="pl-c1">range</span>(<span class="pl-c1">0</span>, <span class="pl-c1">8</span>, length<span class="pl-k">=</span><span class="pl-c1">1_00</span>)       <span class="pl-c"><span class="pl-c">#</span> Create a grid to evaluate the density function over</span>
fitPDFs <span class="pl-k">=</span> <span class="pl-c1">pdf</span>.(ph, xGrid)              <span class="pl-c"><span class="pl-c">#</span> The probability density function of the fitted phase-type</span></pre></div>
<p dir="auto">The default structure of the phase-type is "Coxian" (see below for details).
For large values of <code>p</code> the "CanonicalForm1" is recommended.
To impose no structure on the phase-type, use "General", though the results degrade quickly with <code>p &gt; 5</code> or so.
Another available option is "GeneralisedCoxian".</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="phGen = empht(sample, p=20, ph_structure=&quot;General&quot;)
phCox = empht(sample, p=20, ph_structure=&quot;Coxian&quot;)
phCF1 = empht(sample, p=50, ph_structure=&quot;CanonicalForm1&quot;)"><pre>phGen <span class="pl-k">=</span> <span class="pl-c1">empht</span>(sample, p<span class="pl-k">=</span><span class="pl-c1">20</span>, ph_structure<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>General<span class="pl-pds">"</span></span>)
phCox <span class="pl-k">=</span> <span class="pl-c1">empht</span>(sample, p<span class="pl-k">=</span><span class="pl-c1">20</span>, ph_structure<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Coxian<span class="pl-pds">"</span></span>)
phCF1 <span class="pl-k">=</span> <span class="pl-c1">empht</span>(sample, p<span class="pl-k">=</span><span class="pl-c1">50</span>, ph_structure<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>CanonicalForm1<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">If the data is not fully observed, i.e. the data is binned (interval-censored), then the Sample object is updated like so:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# The intervals
int = [1.5 2.0; 2.0 2.5; 2.5 3.0; 3.0 3.5; 3.5 4.0; 4.0 4.5; 4.5 5.0; 5.0 5.5;
        5.5 6.0; 6.0 6.5; 6.5 7.0; 7.0 7.5]
# The number of observations falling into each interval
intweight = [4.0, 34.0, 107.0, 170.0, 202.0, 222.0, 140.0, 77.0, 24.0, 14.0,
        4.0, 2.0]
 # Create an EMpht Sample object with this data
sInt = EMpht.Sample(int=int, intweight=intweight)

# Fitting the interval-censored data
phCF1 = empht(sInt, p=100, ph_structure=&quot;CanonicalForm1&quot;)
xGrid = range(0, 8, length=1_000)
fitPDFs = pdf.(phCF1, xGrid)"><pre><span class="pl-c"><span class="pl-c">#</span> The intervals</span>
int <span class="pl-k">=</span> [<span class="pl-c1">1.5</span> <span class="pl-c1">2.0</span>; <span class="pl-c1">2.0</span> <span class="pl-c1">2.5</span>; <span class="pl-c1">2.5</span> <span class="pl-c1">3.0</span>; <span class="pl-c1">3.0</span> <span class="pl-c1">3.5</span>; <span class="pl-c1">3.5</span> <span class="pl-c1">4.0</span>; <span class="pl-c1">4.0</span> <span class="pl-c1">4.5</span>; <span class="pl-c1">4.5</span> <span class="pl-c1">5.0</span>; <span class="pl-c1">5.0</span> <span class="pl-c1">5.5</span>;
        <span class="pl-c1">5.5</span> <span class="pl-c1">6.0</span>; <span class="pl-c1">6.0</span> <span class="pl-c1">6.5</span>; <span class="pl-c1">6.5</span> <span class="pl-c1">7.0</span>; <span class="pl-c1">7.0</span> <span class="pl-c1">7.5</span>]
<span class="pl-c"><span class="pl-c">#</span> The number of observations falling into each interval</span>
intweight <span class="pl-k">=</span> [<span class="pl-c1">4.0</span>, <span class="pl-c1">34.0</span>, <span class="pl-c1">107.0</span>, <span class="pl-c1">170.0</span>, <span class="pl-c1">202.0</span>, <span class="pl-c1">222.0</span>, <span class="pl-c1">140.0</span>, <span class="pl-c1">77.0</span>, <span class="pl-c1">24.0</span>, <span class="pl-c1">14.0</span>,
        <span class="pl-c1">4.0</span>, <span class="pl-c1">2.0</span>]
 <span class="pl-c"><span class="pl-c">#</span> Create an EMpht Sample object with this data</span>
sInt <span class="pl-k">=</span> EMpht<span class="pl-k">.</span><span class="pl-c1">Sample</span>(int<span class="pl-k">=</span>int, intweight<span class="pl-k">=</span>intweight)

<span class="pl-c"><span class="pl-c">#</span> Fitting the interval-censored data</span>
phCF1 <span class="pl-k">=</span> <span class="pl-c1">empht</span>(sInt, p<span class="pl-k">=</span><span class="pl-c1">100</span>, ph_structure<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>CanonicalForm1<span class="pl-pds">"</span></span>)
xGrid <span class="pl-k">=</span> <span class="pl-c1">range</span>(<span class="pl-c1">0</span>, <span class="pl-c1">8</span>, length<span class="pl-k">=</span><span class="pl-c1">1_000</span>)
fitPDFs <span class="pl-k">=</span> <span class="pl-c1">pdf</span>.(phCF1, xGrid)</pre></div>
<p dir="auto">To choose the algorithm used to fit the data (see papers below for details):</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="phunif = empht(sample, p=5, method=:unif)  # Fit using the uniformization technique (default)
phode = empht(sample, p=5, method=:ode)    # Fit using the more traditional ODE solving technique"><pre>phunif <span class="pl-k">=</span> <span class="pl-c1">empht</span>(sample, p<span class="pl-k">=</span><span class="pl-c1">5</span>, method<span class="pl-k">=</span><span class="pl-c1">:unif</span>)  <span class="pl-c"><span class="pl-c">#</span> Fit using the uniformization technique (default)</span>
phode <span class="pl-k">=</span> <span class="pl-c1">empht</span>(sample, p<span class="pl-k">=</span><span class="pl-c1">5</span>, method<span class="pl-k">=</span><span class="pl-c1">:ode</span>)    <span class="pl-c"><span class="pl-c">#</span> Fit using the more traditional ODE solving technique</span></pre></div>
<p dir="auto">EMpht.jl can read all necessary information from a JSON file (the number of phases to fit, the special structure of the phase-type, the sample to fit). For example, if you download the Coxian100.json file inside the test directory, the following will launch a fit based on those parameters:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="ph100 = empht(&quot;Coxian100.json&quot;)"><pre>ph100 <span class="pl-k">=</span> <span class="pl-c1">empht</span>(<span class="pl-s"><span class="pl-pds">"</span>Coxian100.json<span class="pl-pds">"</span></span>)</pre></div>
<h2 dir="auto"><a id="user-content-resources" class="anchor" aria-hidden="true" href="#resources"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Resources</h2>
<p dir="auto">The relevant papers for the algorithms are:</p>
<ul dir="auto">
<li>S. Asmussen, O. Nerman &amp; M. Olsson, <em>Fitting phase-type distribution via the EM algorithm</em>, Scandinavian Journal of Statistics 23, 419-441 (1996),</li>
<li>M. Olsson, <em>Estimation of phase-type distributions from censored data</em>, Scandinavian Journal of Statistics 23, 443-460 (1996).</li>
<li>H. Okamura, T. Dohi, K.S. Trivedi, <em>A refined EM algorithm for PH distributions</em>, Performance Evaluation 68, 938-954 (2011)</li>
<li>H. Okamura, T. Dohi, K.S. Trivedi, <em>Improvement of expectation-maximization algorithm for phase-type distributions with grouped and truncated data</em>, Appl. Stochastic Models Bus. Ind. 29, 141-156 (2013)</li>
</ul>
<p dir="auto">Some case studies using this package are:</p>
<ul dir="auto">
<li>S. Asmussen, P.J. Laub, H. Yang, <em>Phase-type models in life insurance: fitting and valuation of equity-linked benefits</em>, Risks 7(1), 17 pages (2019)</li>
<li>A. Vuorinen, <em>The blockchain propagation process: a machine learning and matrix analytic approach</em>, University of Melbourne Masters Thesis (2019), see <a href="https://bitcoin.aapelivuorinen.com/" rel="nofollow">website</a> or <a href="https://bitcoin.aapelivuorinen.com/thesis.pdf" rel="nofollow">thesis</a>.</li>
</ul>
</article></div>