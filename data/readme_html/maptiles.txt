<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-maptiles" class="anchor" aria-hidden="true" href="#maptiles"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>MapTiles</h1>
<p dir="auto"><a href="https://github.com/JuliaGeo/MapTiles.jl/actions?query=workflow%3ACI"><img src="https://github.com/JuliaGeo/MapTiles.jl/workflows/CI/badge.svg" alt="CI" style="max-width: 100%;"></a>
<a href="http://codecov.io/github/JuliaGeo/MapTiles.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/8b0cf17e0c84cbd1ebee08bb156e1d524710da3bbd9ef046c69c212fb4fabb66/687474703a2f2f636f6465636f762e696f2f6769746875622f4a756c696147656f2f4d617054696c65732e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/JuliaGeo/MapTiles.jl/coverage.svg?branch=master" style="max-width: 100%;"></a></p>
<p dir="auto">MapTiles is a <a href="https://julialang.org/" rel="nofollow">Julia</a> package for working with
<a href="https://en.wikipedia.org/wiki/Tiled_web_map" rel="nofollow">tiled web maps</a>, also known as slippy maps.
It mainly concerns itself with getting a set of tile indices based on a given area of
interest and zoom level, specified in WGS84 longitude/latitude or Web Mercator.
It does not download any tile images, but can be used together with
<a href="https://github.com/JuliaGeo/TileProviders.jl">TileProviders.jl</a> to create URIs for tiles,
which can then be downloaded and plotted. <a href="https://github.com/MakieOrg/Tyler.jl">Tyler.jl</a>
is a <a href="http://makie.org/" rel="nofollow">Makie</a> package that uses MapTiles and TileProviders to plot
interactive web maps, for instance as a background layer to plot geospatial data on top of.</p>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using MapTiles, TileProviders
import HTTP, ImageMagick
using GeoInterface: Extent, extent

# get a single Tile with x, y and z index from a point and zoom level
point_wgs = (-105.0, 40.0)
tile = Tile(point_wgs, 8, MapTiles.wgs84)
# -&gt; Tile(53, 96, 8)

# get the extent of a Tile in Web Mercator coordinates
bbox = extent(tile, MapTiles.web_mercator)
# -&gt; Extent(X = (-1.1740727e7, -1.1584184e7), Y = (4.8528340e6, 5.0093770e6))

# get a TileGrid from an Extent and zoom level
bbox = Extent(X = (-1.23, 5.65), Y = (-5.68, 4.77))
tilegrid = TileGrid(bbox, 8, MapTiles.wgs84)
# -&gt; TileGrid(CartesianIndices((127:132, 124:132)), 8)

# load the zoom 0 OpenStreetMap tile into an image
provider = OpenStreetMap()
tile = Tile(0, 0, 0)
url = geturl(provider, tile.x, tile.y, tile.z)
result = HTTP.get(url)
img = ImageMagick.readblob(result.body)
# -&gt; 256×256 Array{RGB{N0f8},2}"><pre><span class="pl-k">using</span> MapTiles, TileProviders
<span class="pl-k">import</span> HTTP, ImageMagick
<span class="pl-k">using</span> GeoInterface<span class="pl-k">:</span> Extent, extent

<span class="pl-c"><span class="pl-c">#</span> get a single Tile with x, y and z index from a point and zoom level</span>
point_wgs <span class="pl-k">=</span> (<span class="pl-k">-</span><span class="pl-c1">105.0</span>, <span class="pl-c1">40.0</span>)
tile <span class="pl-k">=</span> <span class="pl-c1">Tile</span>(point_wgs, <span class="pl-c1">8</span>, MapTiles<span class="pl-k">.</span>wgs84)
<span class="pl-c"><span class="pl-c">#</span> -&gt; Tile(53, 96, 8)</span>

<span class="pl-c"><span class="pl-c">#</span> get the extent of a Tile in Web Mercator coordinates</span>
bbox <span class="pl-k">=</span> <span class="pl-c1">extent</span>(tile, MapTiles<span class="pl-k">.</span>web_mercator)
<span class="pl-c"><span class="pl-c">#</span> -&gt; Extent(X = (-1.1740727e7, -1.1584184e7), Y = (4.8528340e6, 5.0093770e6))</span>

<span class="pl-c"><span class="pl-c">#</span> get a TileGrid from an Extent and zoom level</span>
bbox <span class="pl-k">=</span> <span class="pl-c1">Extent</span>(X <span class="pl-k">=</span> (<span class="pl-k">-</span><span class="pl-c1">1.23</span>, <span class="pl-c1">5.65</span>), Y <span class="pl-k">=</span> (<span class="pl-k">-</span><span class="pl-c1">5.68</span>, <span class="pl-c1">4.77</span>))
tilegrid <span class="pl-k">=</span> <span class="pl-c1">TileGrid</span>(bbox, <span class="pl-c1">8</span>, MapTiles<span class="pl-k">.</span>wgs84)
<span class="pl-c"><span class="pl-c">#</span> -&gt; TileGrid(CartesianIndices((127:132, 124:132)), 8)</span>

<span class="pl-c"><span class="pl-c">#</span> load the zoom 0 OpenStreetMap tile into an image</span>
provider <span class="pl-k">=</span> <span class="pl-c1">OpenStreetMap</span>()
tile <span class="pl-k">=</span> <span class="pl-c1">Tile</span>(<span class="pl-c1">0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>)
url <span class="pl-k">=</span> <span class="pl-c1">geturl</span>(provider, tile<span class="pl-k">.</span>x, tile<span class="pl-k">.</span>y, tile<span class="pl-k">.</span>z)
result <span class="pl-k">=</span> HTTP<span class="pl-k">.</span><span class="pl-c1">get</span>(url)
img <span class="pl-k">=</span> ImageMagick<span class="pl-k">.</span><span class="pl-c1">readblob</span>(result<span class="pl-k">.</span>body)
<span class="pl-c"><span class="pl-c">#</span> -&gt; 256×256 Array{RGB{N0f8},2}</span></pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://user-images.githubusercontent.com/4471859/213268199-bacda46b-8b16-4695-befb-25ae10898693.png"><img src="https://user-images.githubusercontent.com/4471859/213268199-bacda46b-8b16-4695-befb-25ae10898693.png" alt="Tile(0, 0, 0) of OpenStreetMap" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-packages-in-other-languages" class="anchor" aria-hidden="true" href="#packages-in-other-languages"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Packages in other Languages</h2>
<p dir="auto">If you're coming from Python or R, you might be interested in the following packages instead:</p>
<ul dir="auto">
<li><a href="https://github.com/mapbox/mercantile">mercantile: Spherical mercator tile and coordinate utilities</a>
<ul dir="auto">
<li>The design of this package is largely based on mercantile.</li>
</ul>
</li>
<li><a href="https://github.com/rossant/smopy">Smopy: OpenStreetMap Image Tiles in Python</a></li>
<li><a href="https://github.com/mapbox/rio-tiler">Rio-tiler: Rasterio pluggin to serve tiles from AWS S3 hosted files</a></li>
<li><a href="https://github.com/dkahle/ggmap">ggmap: makes it easy to retrieve raster map tiles from popular online mapping services</a></li>
</ul>
</article></div>