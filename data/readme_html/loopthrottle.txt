<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-loopthrottle" class="anchor" aria-hidden="true" href="#loopthrottle"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>LoopThrottle</h1>
<p dir="auto"><a href="https://travis-ci.org/tkoolen/LoopThrottle.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/f5d486d2952ed71b9bfd4c75979c14561a01a1ab2db056daf7f73edfae2c65e1/68747470733a2f2f7472617669732d63692e6f72672f746b6f6f6c656e2f4c6f6f705468726f74746c652e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/tkoolen/LoopThrottle.jl.svg?branch=master" style="max-width: 100%;"></a>
<a href="http://codecov.io/github/tkoolen/LoopThrottle.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/d21cc0c285d20e59f09d36cf2c3b8b61925070a9d721021de8e39ec043190d3b/687474703a2f2f636f6465636f762e696f2f6769746875622f746b6f6f6c656e2f4c6f6f705468726f74746c652e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/tkoolen/LoopThrottle.jl/coverage.svg?branch=master" style="max-width: 100%;"></a></p>
<p dir="auto">LoopThrottle is a tiny Julia package that exports the <code>@throttle</code> macro, which can be used to
slow down a <code>for</code> loop or <code>while</code> loop by calling <code>sleep</code> at the beginning of each
loop iteration (if necessary), so that a designated variable increases
at a rate of at most <code>max_rate</code> (compared to wall time).</p>
<h2 dir="auto"><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Examples</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="x = 0
@throttle t for t = 1 : 0.01 : 2
    x += 1
end max_rate = 2."><pre>x <span class="pl-k">=</span> <span class="pl-c1">0</span>
<span class="pl-c1">@throttle</span> t <span class="pl-k">for</span> t <span class="pl-k">=</span> <span class="pl-c1">1</span> <span class="pl-k">:</span> <span class="pl-c1">0.01</span> <span class="pl-k">:</span> <span class="pl-c1">2</span>
    x <span class="pl-k">+=</span> <span class="pl-c1">1</span>
<span class="pl-k">end</span> max_rate <span class="pl-k">=</span> <span class="pl-c1">2.</span></pre></div>
<p dir="auto">will finish in approximately 0.5 second.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="x = 0.
@throttle x for i = 0 : 1000
    x += 1e-3
end"><pre>x <span class="pl-k">=</span> <span class="pl-c1">0.</span>
<span class="pl-c1">@throttle</span> x <span class="pl-k">for</span> i <span class="pl-k">=</span> <span class="pl-c1">0</span> <span class="pl-k">:</span> <span class="pl-c1">1000</span>
    x <span class="pl-k">+=</span> <span class="pl-c1">1e-3</span>
<span class="pl-k">end</span></pre></div>
<p dir="auto">will use the default <code>max_rate</code> value of <code>1.</code> and thus finish in approximately 1 second.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="i = 0
@throttle i while i &lt;= 10
    println(i)
    i += 1
end min_sleep_time=1.5 max_rate=1"><pre>i <span class="pl-k">=</span> <span class="pl-c1">0</span>
<span class="pl-c1">@throttle</span> i <span class="pl-k">while</span> i <span class="pl-k">&lt;=</span> <span class="pl-c1">10</span>
    <span class="pl-c1">println</span>(i)
    i <span class="pl-k">+=</span> <span class="pl-c1">1</span>
<span class="pl-k">end</span> min_sleep_time<span class="pl-k">=</span><span class="pl-c1">1.5</span> max_rate<span class="pl-k">=</span><span class="pl-c1">1</span></pre></div>
<p dir="auto">will print the numbers from 0 to 10 at an average rate of one per second, while never
sleeping for less than 1.5 second.</p>
</article></div>