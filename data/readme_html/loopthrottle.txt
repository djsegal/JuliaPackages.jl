<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-loopthrottle" class="anchor" aria-hidden="true" href="#loopthrottle"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>LoopThrottle</h1>
<p><a href="https://travis-ci.org/tkoolen/LoopThrottle.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/261a171bd4f581e5ef7d9a0495d2bb0482b93fa5/68747470733a2f2f7472617669732d63692e6f72672f746b6f6f6c656e2f4c6f6f705468726f74746c652e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/tkoolen/LoopThrottle.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="http://codecov.io/github/tkoolen/LoopThrottle.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/7428f90cef7865f6657acd1a50e1387dff021006/687474703a2f2f636f6465636f762e696f2f6769746875622f746b6f6f6c656e2f4c6f6f705468726f74746c652e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/tkoolen/LoopThrottle.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
<p>LoopThrottle is a tiny Julia package that exports the <code>@throttle</code> macro, which can be used to
slow down a <code>for</code> loop or <code>while</code> loop by calling <code>sleep</code> at the beginning of each
loop iteration (if necessary), so that a designated variable increases
at a rate of at most <code>max_rate</code> (compared to wall time).</p>
<h2><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Examples</h2>
<div class="highlight highlight-source-julia"><pre>x <span class="pl-k">=</span> <span class="pl-c1">0</span>
<span class="pl-c1">@throttle</span> t <span class="pl-k">for</span> t <span class="pl-k">=</span> <span class="pl-c1">1</span> : <span class="pl-c1">0.01</span> : <span class="pl-c1">2</span>
    x <span class="pl-k">+=</span> <span class="pl-c1">1</span>
<span class="pl-k">end</span> max_rate <span class="pl-k">=</span> <span class="pl-c1">2.</span></pre></div>
<p>will finish in approximately 0.5 second.</p>
<div class="highlight highlight-source-julia"><pre>x <span class="pl-k">=</span> <span class="pl-c1">0.</span>
<span class="pl-c1">@throttle</span> x <span class="pl-k">for</span> i <span class="pl-k">=</span> <span class="pl-c1">0</span> : <span class="pl-c1">1000</span>
    x <span class="pl-k">+=</span> <span class="pl-c1">1e-3</span>
<span class="pl-k">end</span></pre></div>
<p>will use the default <code>max_rate</code> value of <code>1.</code> and thus finish in approximately 1 second.</p>
<div class="highlight highlight-source-julia"><pre>i <span class="pl-k">=</span> <span class="pl-c1">0</span>
<span class="pl-c1">@throttle</span> i <span class="pl-k">while</span> i <span class="pl-k">&lt;=</span> <span class="pl-c1">10</span>
    <span class="pl-c1">println</span>(i)
    i <span class="pl-k">+=</span> <span class="pl-c1">1</span>
<span class="pl-k">end</span> min_sleep_time<span class="pl-k">=</span><span class="pl-c1">1.5</span> max_rate<span class="pl-k">=</span><span class="pl-c1">1</span></pre></div>
<p>will print the numbers from 0 to 10 at an average rate of one per second, while never
sleeping for less than 1.5 second.</p>
</article></div>