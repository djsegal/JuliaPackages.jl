<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-recordarraysjl-flexible-array-of-structures-representation-for-julia" class="anchor" aria-hidden="true" href="#recordarraysjl-flexible-array-of-structures-representation-for-julia"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>RecordArrays.jl: flexible Array-of-Structures representation for Julia</h1>
<p dir="auto"><strong>NOTE</strong>: Packages such as
<a href="https://github.com/JuliaArrays/StructArrays.jl">StructArrays.jl</a>,
<a href="https://github.com/cscherrer/TupleVectors.jl">TupleVectors.jl</a>, and
<a href="https://github.com/JuliaData/TypedTables.jl">TypedTables.jl</a> provide the
abstract array interface for Structure-of-Arrays representation which is much
more appropriate for many performance-oriented programs.</p>
<p dir="auto">RecordArrays.jl is a package for using Array-of-Structures representation with
more control than <code>Array{T}</code>.  For example, it can be used for creating
task-local state aligned to cache line.  Updating a single field at single
index does not mutate other fields.</p>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using RecordArrays

julia&gt; xs = RecordArrays.fill((a = 1, b = 2), 5; align = 64)
5-element RecordArray{NamedTuple{(:a, :b), Tuple{Int64, Int64}},1,…}:
 (a = 1, b = 2)
 (a = 1, b = 2)
 (a = 1, b = 2)
 (a = 1, b = 2)
 (a = 1, b = 2)

julia&gt; all(i -&gt; mod(UInt(pointer(xs, i)), 64) == 0, eachindex(xs))
true

julia&gt; xs[1] = (a = 111, b = 222);

julia&gt; xs
5-element RecordArray{NamedTuple{(:a, :b), Tuple{Int64, Int64}},1,…}:
 (a = 111, b = 222)
 (a = 1, b = 2)
 (a = 1, b = 2)
 (a = 1, b = 2)
 (a = 1, b = 2)

julia&gt; xs.a
5-element FieldArray{:a,Int64,1,…}:
 111
   1
   1
   1
   1

julia&gt; xs.a[2] = 11111;

julia&gt; xs
5-element RecordArray{NamedTuple{(:a, :b), Tuple{Int64, Int64}},1,…}:
 (a = 111, b = 222)
 (a = 11111, b = 2)
 (a = 1, b = 2)
 (a = 1, b = 2)
 (a = 1, b = 2)

julia&gt; x3 = view(xs, 3)  # acts like a `NamedTuple` of `Ref`s
1-element RecordArray{NamedTuple{(:a, :b), Tuple{Int64, Int64}},0,…}:
(a = 1, b = 2)

julia&gt; x3.a[]
1

julia&gt; x3.a[] = 333;

julia&gt; xs
5-element RecordArray{NamedTuple{(:a, :b), Tuple{Int64, Int64}},1,…}:
 (a = 111, b = 222)
 (a = 11111, b = 2)
 (a = 333, b = 2)
 (a = 1, b = 2)
 (a = 1, b = 2)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> RecordArrays

julia<span class="pl-k">&gt;</span> xs <span class="pl-k">=</span> RecordArrays<span class="pl-k">.</span><span class="pl-c1">fill</span>((a <span class="pl-k">=</span> <span class="pl-c1">1</span>, b <span class="pl-k">=</span> <span class="pl-c1">2</span>), <span class="pl-c1">5</span>; align <span class="pl-k">=</span> <span class="pl-c1">64</span>)
<span class="pl-c1">5</span><span class="pl-k">-</span>element RecordArray{NamedTuple{(<span class="pl-c1">:a</span>, <span class="pl-c1">:b</span>), Tuple{Int64, Int64}},<span class="pl-c1">1</span>,…}<span class="pl-k">:</span>
 (a <span class="pl-k">=</span> <span class="pl-c1">1</span>, b <span class="pl-k">=</span> <span class="pl-c1">2</span>)
 (a <span class="pl-k">=</span> <span class="pl-c1">1</span>, b <span class="pl-k">=</span> <span class="pl-c1">2</span>)
 (a <span class="pl-k">=</span> <span class="pl-c1">1</span>, b <span class="pl-k">=</span> <span class="pl-c1">2</span>)
 (a <span class="pl-k">=</span> <span class="pl-c1">1</span>, b <span class="pl-k">=</span> <span class="pl-c1">2</span>)
 (a <span class="pl-k">=</span> <span class="pl-c1">1</span>, b <span class="pl-k">=</span> <span class="pl-c1">2</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">all</span>(i <span class="pl-k">-&gt;</span> <span class="pl-c1">mod</span>(<span class="pl-c1">UInt</span>(<span class="pl-c1">pointer</span>(xs, i)), <span class="pl-c1">64</span>) <span class="pl-k">==</span> <span class="pl-c1">0</span>, <span class="pl-c1">eachindex</span>(xs))
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> xs[<span class="pl-c1">1</span>] <span class="pl-k">=</span> (a <span class="pl-k">=</span> <span class="pl-c1">111</span>, b <span class="pl-k">=</span> <span class="pl-c1">222</span>);

julia<span class="pl-k">&gt;</span> xs
<span class="pl-c1">5</span><span class="pl-k">-</span>element RecordArray{NamedTuple{(<span class="pl-c1">:a</span>, <span class="pl-c1">:b</span>), Tuple{Int64, Int64}},<span class="pl-c1">1</span>,…}<span class="pl-k">:</span>
 (a <span class="pl-k">=</span> <span class="pl-c1">111</span>, b <span class="pl-k">=</span> <span class="pl-c1">222</span>)
 (a <span class="pl-k">=</span> <span class="pl-c1">1</span>, b <span class="pl-k">=</span> <span class="pl-c1">2</span>)
 (a <span class="pl-k">=</span> <span class="pl-c1">1</span>, b <span class="pl-k">=</span> <span class="pl-c1">2</span>)
 (a <span class="pl-k">=</span> <span class="pl-c1">1</span>, b <span class="pl-k">=</span> <span class="pl-c1">2</span>)
 (a <span class="pl-k">=</span> <span class="pl-c1">1</span>, b <span class="pl-k">=</span> <span class="pl-c1">2</span>)

julia<span class="pl-k">&gt;</span> xs<span class="pl-k">.</span>a
<span class="pl-c1">5</span><span class="pl-k">-</span>element FieldArray{<span class="pl-c1">:a</span>,Int64,<span class="pl-c1">1</span>,…}<span class="pl-k">:</span>
 <span class="pl-c1">111</span>
   <span class="pl-c1">1</span>
   <span class="pl-c1">1</span>
   <span class="pl-c1">1</span>
   <span class="pl-c1">1</span>

julia<span class="pl-k">&gt;</span> xs<span class="pl-k">.</span>a[<span class="pl-c1">2</span>] <span class="pl-k">=</span> <span class="pl-c1">11111</span>;

julia<span class="pl-k">&gt;</span> xs
<span class="pl-c1">5</span><span class="pl-k">-</span>element RecordArray{NamedTuple{(<span class="pl-c1">:a</span>, <span class="pl-c1">:b</span>), Tuple{Int64, Int64}},<span class="pl-c1">1</span>,…}<span class="pl-k">:</span>
 (a <span class="pl-k">=</span> <span class="pl-c1">111</span>, b <span class="pl-k">=</span> <span class="pl-c1">222</span>)
 (a <span class="pl-k">=</span> <span class="pl-c1">11111</span>, b <span class="pl-k">=</span> <span class="pl-c1">2</span>)
 (a <span class="pl-k">=</span> <span class="pl-c1">1</span>, b <span class="pl-k">=</span> <span class="pl-c1">2</span>)
 (a <span class="pl-k">=</span> <span class="pl-c1">1</span>, b <span class="pl-k">=</span> <span class="pl-c1">2</span>)
 (a <span class="pl-k">=</span> <span class="pl-c1">1</span>, b <span class="pl-k">=</span> <span class="pl-c1">2</span>)

julia<span class="pl-k">&gt;</span> x3 <span class="pl-k">=</span> <span class="pl-c1">view</span>(xs, <span class="pl-c1">3</span>)  <span class="pl-c"><span class="pl-c">#</span> acts like a `NamedTuple` of `Ref`s</span>
<span class="pl-c1">1</span><span class="pl-k">-</span>element RecordArray{NamedTuple{(<span class="pl-c1">:a</span>, <span class="pl-c1">:b</span>), Tuple{Int64, Int64}},<span class="pl-c1">0</span>,…}<span class="pl-k">:</span>
(a <span class="pl-k">=</span> <span class="pl-c1">1</span>, b <span class="pl-k">=</span> <span class="pl-c1">2</span>)

julia<span class="pl-k">&gt;</span> x3<span class="pl-k">.</span>a[]
<span class="pl-c1">1</span>

julia<span class="pl-k">&gt;</span> x3<span class="pl-k">.</span>a[] <span class="pl-k">=</span> <span class="pl-c1">333</span>;

julia<span class="pl-k">&gt;</span> xs
<span class="pl-c1">5</span><span class="pl-k">-</span>element RecordArray{NamedTuple{(<span class="pl-c1">:a</span>, <span class="pl-c1">:b</span>), Tuple{Int64, Int64}},<span class="pl-c1">1</span>,…}<span class="pl-k">:</span>
 (a <span class="pl-k">=</span> <span class="pl-c1">111</span>, b <span class="pl-k">=</span> <span class="pl-c1">222</span>)
 (a <span class="pl-k">=</span> <span class="pl-c1">11111</span>, b <span class="pl-k">=</span> <span class="pl-c1">2</span>)
 (a <span class="pl-k">=</span> <span class="pl-c1">333</span>, b <span class="pl-k">=</span> <span class="pl-c1">2</span>)
 (a <span class="pl-k">=</span> <span class="pl-c1">1</span>, b <span class="pl-k">=</span> <span class="pl-c1">2</span>)
 (a <span class="pl-k">=</span> <span class="pl-c1">1</span>, b <span class="pl-k">=</span> <span class="pl-c1">2</span>)</pre></div>
<p dir="auto">Use <code>RecordArray{T}(undef, dims)</code> to allocate a new uninitialized array:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using RecordArrays

julia&gt; xs = RecordArray{Some{Union{Nothing,Int}}}(undef, 3);

julia&gt; xs .= Some.(1:3)
3-element RecordArray{Some{Union{Nothing, Int64}},1,…}:
 1
 2
 3"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> RecordArrays

julia<span class="pl-k">&gt;</span> xs <span class="pl-k">=</span> <span class="pl-c1">RecordArray</span><span class="pl-c1">{Some{Union{Nothing,Int}}}</span>(undef, <span class="pl-c1">3</span>);

julia<span class="pl-k">&gt;</span> xs <span class="pl-k">.=</span> <span class="pl-c1">Some</span>.(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">3</span>)
<span class="pl-c1">3</span><span class="pl-k">-</span>element RecordArray{Some{Union{Nothing, Int64}},<span class="pl-c1">1</span>,…}<span class="pl-k">:</span>
 <span class="pl-c1">1</span>
 <span class="pl-c1">2</span>
 <span class="pl-c1">3</span></pre></div>
<p dir="auto">Another way to allocate a new array is to use <code>RecordArrays.unsafe_zeros</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using RecordArrays

julia&gt; xs = RecordArrays.unsafe_zeros(NTuple{5, UInt8}, 3)
3-element RecordArray{NTuple{5, UInt8},1,…}:
 (0x00, 0x00, 0x00, 0x00, 0x00)
 (0x00, 0x00, 0x00, 0x00, 0x00)
 (0x00, 0x00, 0x00, 0x00, 0x00)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> RecordArrays

julia<span class="pl-k">&gt;</span> xs <span class="pl-k">=</span> RecordArrays<span class="pl-k">.</span><span class="pl-c1">unsafe_zeros</span>(NTuple{<span class="pl-c1">5</span>, UInt8}, <span class="pl-c1">3</span>)
<span class="pl-c1">3</span><span class="pl-k">-</span>element RecordArray{NTuple{<span class="pl-c1">5</span>, UInt8},<span class="pl-c1">1</span>,…}<span class="pl-k">:</span>
 (<span class="pl-c1">0x00</span>, <span class="pl-c1">0x00</span>, <span class="pl-c1">0x00</span>, <span class="pl-c1">0x00</span>, <span class="pl-c1">0x00</span>)
 (<span class="pl-c1">0x00</span>, <span class="pl-c1">0x00</span>, <span class="pl-c1">0x00</span>, <span class="pl-c1">0x00</span>, <span class="pl-c1">0x00</span>)
 (<span class="pl-c1">0x00</span>, <span class="pl-c1">0x00</span>, <span class="pl-c1">0x00</span>, <span class="pl-c1">0x00</span>, <span class="pl-c1">0x00</span>)</pre></div>
<h2 dir="auto"><a id="user-content-see-also" class="anchor" aria-hidden="true" href="#see-also"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>See also</h2>
<ul dir="auto">
<li><a href="https://github.com/Vitaliy-Yakovchuk/StructViews.jl">https://github.com/Vitaliy-Yakovchuk/StructViews.jl</a></li>
</ul>
</article></div>