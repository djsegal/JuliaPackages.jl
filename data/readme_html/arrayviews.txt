<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-arrayviewsjl" class="anchor" aria-hidden="true" href="#arrayviewsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>ArrayViews.jl</h1>
<p dir="auto"><a href="https://travis-ci.org/JuliaArrays/ArrayViews.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/7f80ae09f9ce0a06b1d8697d011aa46b5eb17ecdbcbeab357242887298d38322/68747470733a2f2f7472617669732d63692e6f72672f4a756c69614172726179732f417272617956696577732e6a6c2e737667" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaArrays/ArrayViews.jl.svg" style="max-width: 100%;"></a>
<a href="https://coveralls.io/r/JuliaArrays/ArrayViews.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/13dfacefa966049768c6a9503be8148cf8fc89870fc18328b56536908547efce/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f4a756c69614172726179732f417272617956696577732e6a6c2f62616467652e737667" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/JuliaArrays/ArrayViews.jl/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto"><a href="http://pkg.julialang.org/?pkg=ArrayViews&amp;ver=0.6" rel="nofollow"><img src="https://camo.githubusercontent.com/af159dbe6062d04726c2659cf8ae08cee21beee56adae5e6a8bca1d2cfc93240/687474703a2f2f706b672e6a756c69616c616e672e6f72672f6261646765732f417272617956696577735f302e362e737667" alt="ArrayViews" data-canonical-src="http://pkg.julialang.org/badges/ArrayViews_0.6.svg" style="max-width: 100%;"></a></p>
<p dir="auto">A Julia package to explore a new system of array views.</p>
<hr>
<h2 dir="auto"><a id="user-content-for-users-of-julia-04-or-higher" class="anchor" aria-hidden="true" href="#for-users-of-julia-04-or-higher"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>For users of julia 0.4 or higher</h2>
<p dir="auto">By and large, this package is no longer necessary: base julia now has
efficient <code>SubArrays</code> (i.e., <code>sub</code> and <code>slice</code>).  In choosing whether
to use <code>SubArray</code>s or the <code>ArrayView</code>s package, here are some
considerations:</p>
<p dir="auto">Reasons to prefer <code>SubArrays</code>:</p>
<ul dir="auto">
<li>
<p dir="auto"><code>ArrayViews</code> can only make a view of an <code>Array</code>, whereas <code>SubArray</code>s
can create a view of any <code>AbstractArray</code>.</p>
</li>
<li>
<p dir="auto">The views created by <code>ArrayViews</code> are most efficient for
<code>ContiguousView</code>s such as column slices. In contrast, the views
created by <code>SubArray</code>s are efficient for any type of view (e.g.,
also row slices), in some cases resulting in a 3- to 10-fold
advantage. In either case, it's generally recommended to write functions
using cartesian indexing rather than linear indexing (e.g.,
<code>for I in eachindex(S)</code> rather than <code>for i = 1:length(S)</code>),
although in both cases there are some view types that are also
efficient under linear indexing.</p>
</li>
<li>
<p dir="auto"><code>SubArray</code>s allow more general slicing behavior, e.g., you can make
a view with <code>S = sub(A, [1,3,17], :)</code>.</p>
</li>
<li>
<p dir="auto">By default, <code>SubArray</code>s check bounds upon construction whereas
<code>ArrayView</code>s do not: <code>V = view(A, -5:10, :)</code> does not generate an
error, and if <code>V</code> is used in a function with an <code>@inbounds</code>
declaration you are likely to get a segfault.  (You can bypass
bounds checking with <code>Base._sub</code> and <code>Base._slice</code>, in cases where
you want out-of-bounds construction for <code>SubArray</code>s.)</p>
</li>
</ul>
<p dir="auto">Reasons to prefer <code>ArrayViews</code>:</p>
<ul dir="auto">
<li>Construction of <code>SubArray</code>s is frequently (but not always) 2-4 times
slower than construction of <code>view</code>s. If you are constructing many
column views, <code>ArrayView</code>s may still be the better choice.</li>
</ul>
<h2 dir="auto"><a id="user-content-main-features" class="anchor" aria-hidden="true" href="#main-features"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Main Features</h2>
<ul dir="auto">
<li>An efficient <code>aview</code> function that implements array views</li>
<li>Support of arrays of arbitrary dimension and arbitrary combinations of indexers</li>
<li>Support <code>aview</code> composition (<em>i.e.</em> construct views over views)</li>
<li>Special attention to ensure type stability in most cases</li>
<li>Efficient indexing (both cartesian and linear)</li>
<li>Light weight array view construction</li>
<li>A systematic approach to detect contiguous views (statically)</li>
<li>Views work with linear algebra functions</li>
</ul>
<h2 dir="auto"><a id="user-content-overview" class="anchor" aria-hidden="true" href="#overview"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Overview</h2>
<p dir="auto">The key function in this package is <code>aview</code>. This function is similar to <code>sub</code> in Julia Base, except that it returns an aview instance with more efficient representation:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="a = rand(4, 5, 6)

aview(a, :)
aview(a, :, 2)
aview(a, 1:2, 1:2:5, 4)
aview(a, 2, :, 3:6)"><pre>a <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">4</span>, <span class="pl-c1">5</span>, <span class="pl-c1">6</span>)

<span class="pl-c1">aview</span>(a, :)
<span class="pl-c1">aview</span>(a, :, <span class="pl-c1">2</span>)
<span class="pl-c1">aview</span>(a, <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span>, <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">5</span>, <span class="pl-c1">4</span>)
<span class="pl-c1">aview</span>(a, <span class="pl-c1">2</span>, :, <span class="pl-c1">3</span><span class="pl-k">:</span><span class="pl-c1">6</span>)</pre></div>
<p dir="auto">The <code>aview</code> function returns an array view of type <code>ArrayView</code>.
Here, <code>ArrayView</code> is an abstract type with two derived types (<code>ContiguousView</code> and <code>StridedView</code>), defined as:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="abstract type ArrayView{T,N,M} &lt;: DenseArray{T,N} end"><pre><span class="pl-k">abstract type</span> ArrayView{T,N,M} <span class="pl-k">&lt;:</span> <span class="pl-c1">DenseArray{T,N}</span> <span class="pl-k">end</span></pre></div>
<p dir="auto">We can see that each view type has three static properties: element type <code>T</code>, the number of dimensions <code>N</code>, and the <em>contiguous rank</em> <code>M</code>.</p>
<h4 dir="auto"><a id="user-content-contiguous-rank" class="anchor" aria-hidden="true" href="#contiguous-rank"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Contiguous Rank</h4>
<p dir="auto">The <em>contiguous rank</em> plays an important role in determining (statically) the contiguousness of a subview. Below are illustrations of 2D views respective with contiguous rank <code>0</code>, <code>1</code>, and <code>2</code>.</p>
<p dir="auto"><strong>2D View with contiguous rank 0</strong></p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="* * * * * *
. . . . . .
* * * * * *
. . . . . .
* * * * * *
. . . . . ."><pre class="notranslate"><code>* * * * * *
. . . . . .
* * * * * *
. . . . . .
* * * * * *
. . . . . .
</code></pre></div>
<p dir="auto">Here, <code>*</code> indicates a position covered by the array view, and <code>.</code> otherwise. We can see that the columns are not contiguous.</p>
<p dir="auto"><strong>2D View with contiguous rank 1</strong></p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="* * * * * *
* * * * * *
* * * * * *
* * * * * *
. . . . . .
. . . . . ."><pre class="notranslate"><code>* * * * * *
* * * * * *
* * * * * *
* * * * * *
. . . . . .
. . . . . .
</code></pre></div>
<p dir="auto">We can see that each column is contiguous, while the entire array view is not.</p>
<p dir="auto"><strong>2D View with contiguous rank 2</strong></p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="* * * * * *
* * * * * *
* * * * * *
* * * * * *
* * * * * *
* * * * * *"><pre class="notranslate"><code>* * * * * *
* * * * * *
* * * * * *
* * * * * *
* * * * * *
* * * * * *
</code></pre></div>
<p dir="auto">The entire 2D array view is contiguous.</p>
<p dir="auto">Formally, when <code>v</code> is an array view with contiguous rank <code>M</code>, then <code>aview(v, :, :, ..., :, 1)</code> must be contiguous when the number of colons is less than or equal to <code>M</code>.</p>
<h4 dir="auto"><a id="user-content-view-types" class="anchor" aria-hidden="true" href="#view-types"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>View Types</h4>
<p dir="auto">The package provide a hierarchy of array view types (defined as follows):</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# T: the element type
# N: the number of dimensions
# M: the contiguous rank

abstract StridedArrayView{T,N,M} &lt;: DenseArray{T,N}
abstract ArrayView{T,N,M} &lt;: StridedArrayView{T,N,M}
abstract UnsafeArrayView{T,N,M} &lt;: StridedArrayView{T,N,M}

immutable ContiguousView{T,N,Arr&lt;:Array} &lt;: ArrayView{T,N,N}
immutable StridedView{T,N,M,Arr&lt;:Array} &lt;: ArrayView{T,N,M}

immutable UnsafeContiguousView{T,N} &lt;: UnsafeArrayView{T,N,N}
immutable UnsafeStridedView{T,N,M} &lt;: UnsafeArrayView{T,N,M}"><pre><span class="pl-c"><span class="pl-c">#</span> T: the element type</span>
<span class="pl-c"><span class="pl-c">#</span> N: the number of dimensions</span>
<span class="pl-c"><span class="pl-c">#</span> M: the contiguous rank</span>

abstract StridedArrayView{T,N,M} <span class="pl-k">&lt;:</span> <span class="pl-c1">DenseArray{T,N}</span>
abstract ArrayView{T,N,M} <span class="pl-k">&lt;:</span> <span class="pl-c1">StridedArrayView{T,N,M}</span>
abstract UnsafeArrayView{T,N,M} <span class="pl-k">&lt;:</span> <span class="pl-c1">StridedArrayView{T,N,M}</span>

immutable ContiguousView{T,N,Arr<span class="pl-k">&lt;:</span><span class="pl-c1">Array</span>} <span class="pl-k">&lt;:</span> <span class="pl-c1">ArrayView{T,N,N}</span>
immutable StridedView{T,N,M,Arr<span class="pl-k">&lt;:</span><span class="pl-c1">Array</span>} <span class="pl-k">&lt;:</span> <span class="pl-c1">ArrayView{T,N,M}</span>

immutable UnsafeContiguousView{T,N} <span class="pl-k">&lt;:</span> <span class="pl-c1">UnsafeArrayView{T,N,N}</span>
immutable UnsafeStridedView{T,N,M} <span class="pl-k">&lt;:</span> <span class="pl-c1">UnsafeArrayView{T,N,M}</span></pre></div>
<p dir="auto">Here, an instance of <code>ArrayView</code> maintains a reference to the underlying array, and is generally safe to use in most cases. An instance of <code>UnsafeArrayView</code> maintains a raw pointer, and should only be used within a local scope (as it does not guarantee that the source array remains valid if it is passed out of a function).</p>
<h4 dir="auto"><a id="user-content-view-types-in-action" class="anchor" aria-hidden="true" href="#view-types-in-action"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>View Types in Action</h4>
<p dir="auto">The following example illustrates how contiguous rank is used to determine aview types in practice.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="a = rand(m, n)

# safe views

v0 = aview(a, :)         # of type ContiguousView{Float64, 1}

u1 = aview(a, a:b, :)    # of type StridedView{Float64, 2, 1}
u2 = aview(u1, :, i)     # of type ContiguousView{Float64, 1}

v1 = aview(a, a:2:b, :)  # of type StridedView{Float64, 2, 0}
v2 = aview(v1, :, i)     # of type StridedView{Float64, 1, 0}

# unsafe views

v0 = unsafe_aview(a, :)         # of type UnsafeContiguousView{Float64, 1}

u1 = unsafe_aview(a, a:b, :)    # of type UnsafeStridedView{Float64, 2, 1}
u2 = unsafe_aview(u1, :, i)     # of type UnsafeContiguousView{Float64, 1}

v1 = unsafe_aview(a, a:2:b, :)  # of type UnsafeStridedView{Float64, 2, 0}
v2 = unsafe_aview(v1, :, i)     # of type UnsafeStridedView{Float64, 1, 0}"><pre>a <span class="pl-k">=</span> <span class="pl-c1">rand</span>(m, n)

<span class="pl-c"><span class="pl-c">#</span> safe views</span>

v0 <span class="pl-k">=</span> <span class="pl-c1">aview</span>(a, :)         <span class="pl-c"><span class="pl-c">#</span> of type ContiguousView{Float64, 1}</span>

u1 <span class="pl-k">=</span> <span class="pl-c1">aview</span>(a, a<span class="pl-k">:</span>b, :)    <span class="pl-c"><span class="pl-c">#</span> of type StridedView{Float64, 2, 1}</span>
u2 <span class="pl-k">=</span> <span class="pl-c1">aview</span>(u1, :, i)     <span class="pl-c"><span class="pl-c">#</span> of type ContiguousView{Float64, 1}</span>

v1 <span class="pl-k">=</span> <span class="pl-c1">aview</span>(a, a<span class="pl-k">:</span><span class="pl-c1">2</span><span class="pl-k">:</span>b, :)  <span class="pl-c"><span class="pl-c">#</span> of type StridedView{Float64, 2, 0}</span>
v2 <span class="pl-k">=</span> <span class="pl-c1">aview</span>(v1, :, i)     <span class="pl-c"><span class="pl-c">#</span> of type StridedView{Float64, 1, 0}</span>

<span class="pl-c"><span class="pl-c">#</span> unsafe views</span>

v0 <span class="pl-k">=</span> <span class="pl-c1">unsafe_aview</span>(a, :)         <span class="pl-c"><span class="pl-c">#</span> of type UnsafeContiguousView{Float64, 1}</span>

u1 <span class="pl-k">=</span> <span class="pl-c1">unsafe_aview</span>(a, a<span class="pl-k">:</span>b, :)    <span class="pl-c"><span class="pl-c">#</span> of type UnsafeStridedView{Float64, 2, 1}</span>
u2 <span class="pl-k">=</span> <span class="pl-c1">unsafe_aview</span>(u1, :, i)     <span class="pl-c"><span class="pl-c">#</span> of type UnsafeContiguousView{Float64, 1}</span>

v1 <span class="pl-k">=</span> <span class="pl-c1">unsafe_aview</span>(a, a<span class="pl-k">:</span><span class="pl-c1">2</span><span class="pl-k">:</span>b, :)  <span class="pl-c"><span class="pl-c">#</span> of type UnsafeStridedView{Float64, 2, 0}</span>
v2 <span class="pl-k">=</span> <span class="pl-c1">unsafe_aview</span>(v1, :, i)     <span class="pl-c"><span class="pl-c">#</span> of type UnsafeStridedView{Float64, 1, 0}</span></pre></div>
<p dir="auto">Four kinds of indexers are supported, integer, range (<em>e.g.</em> <code>a:b</code>), stepped range (<em>e.g.</em> <code>a:b:c</code>), and colon (<em>i.e.</em>, <code>:</code>).</p>
<h2 dir="auto"><a id="user-content-view-construction" class="anchor" aria-hidden="true" href="#view-construction"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>View Construction</h2>
<p dir="auto">The procedure of constructing a aview consists of several steps:</p>
<ol dir="auto">
<li>
<p dir="auto">Compute the shape of an array view. This is done by an internal function <code>vshape</code>.</p>
</li>
<li>
<p dir="auto">Compute the offset of an array view. This is done by an internal function <code>aoffset</code>. The computation is based on the following formula:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="offset(v(I1, I2, ..., Im)) = (first(I1) - 1) * stride(v, 1)
                           + (first(I2) - 1) * stride(v, 2)
                           + ...
                           + (first(Im) - 1) * stride(v, m)"><pre class="notranslate"><code>offset(v(I1, I2, ..., Im)) = (first(I1) - 1) * stride(v, 1)
                           + (first(I2) - 1) * stride(v, 2)
                           + ...
                           + (first(Im) - 1) * stride(v, m)
</code></pre></div>
</li>
<li>
<p dir="auto">Compute the contiguous rank, based on both view shape and the combination of indexer types. A type <code>ContRank{M}</code> is introduced for static computation of contiguous rank (please refer to <code>src/contrank.jl</code> for details).</p>
</li>
<li>
<p dir="auto">Construct a aview, where the array view type is determined by both the number of dimensions and the value of contiguous rank (which is determined statically).</p>
</li>
</ol>
<p dir="auto">For runtime efficiency, specialized methods of these functions are implemented for views of 1D, 2D, and 3D. These methods are extensively tested.</p>
<h2 dir="auto"><a id="user-content-convenience-functions" class="anchor" aria-hidden="true" href="#convenience-functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Convenience Functions</h2>
<p dir="auto">The <em>ArrayViews</em> package provides several functions to make it more convenient to constructing certain views:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="
diagview(a)   # make a strided view of the diagonal elements, the length is `min(size(a)...)`
              # `a` needs to be a matrix here (contiguous or strided)

flatten_view(a)   # make a contiguous view of `a` as a vector
                  # `a` needs to be contiguous here

reshape_view(a, shp)   # make a contiguous view of `a` of shape `shp`
                       # `a` needs to be contiguous here.

rowvec_view(a, i)   # make a view of `a[i,:]` as a strided vector.
                    # `a` needs to be a matrix here (contiguous or strided)

ellipview(a, i)     # make a view of the i-th slice of a
                    # e.g. `a` is a matrix =&gt; this is equiv. to `aview(a, :, i)`
                    #      `a` is a cube =&gt; this is equiv. to `aview(a, :, :, i)`, etc."><pre><span class="pl-c1">diagview</span>(a)   <span class="pl-c"><span class="pl-c">#</span> make a strided view of the diagonal elements, the length is `min(size(a)...)`</span>
              <span class="pl-c"><span class="pl-c">#</span> `a` needs to be a matrix here (contiguous or strided)</span>

<span class="pl-c1">flatten_view</span>(a)   <span class="pl-c"><span class="pl-c">#</span> make a contiguous view of `a` as a vector</span>
                  <span class="pl-c"><span class="pl-c">#</span> `a` needs to be contiguous here</span>

<span class="pl-c1">reshape_view</span>(a, shp)   <span class="pl-c"><span class="pl-c">#</span> make a contiguous view of `a` of shape `shp`</span>
                       <span class="pl-c"><span class="pl-c">#</span> `a` needs to be contiguous here.</span>

<span class="pl-c1">rowvec_view</span>(a, i)   <span class="pl-c"><span class="pl-c">#</span> make a view of `a[i,:]` as a strided vector.</span>
                    <span class="pl-c"><span class="pl-c">#</span> `a` needs to be a matrix here (contiguous or strided)</span>

<span class="pl-c1">ellipview</span>(a, i)     <span class="pl-c"><span class="pl-c">#</span> make a view of the i-th slice of a</span>
                    <span class="pl-c"><span class="pl-c">#</span> e.g. `a` is a matrix =&gt; this is equiv. to `aview(a, :, i)`</span>
                    <span class="pl-c"><span class="pl-c">#</span>      `a` is a cube =&gt; this is equiv. to `aview(a, :, :, i)`, etc.</span></pre></div>
</article></div>