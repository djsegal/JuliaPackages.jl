<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-optimjl" class="anchor" aria-hidden="true" href="#optimjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Optim.jl</h1>
<p>Univariate and multivariate optimization in Julia.</p>
<p>Optim.jl is part of the <a href="https://github.com/JuliaNLSolvers">JuliaNLSolvers</a> family.</p>
<table>
<thead>
<tr>
<th align="center"><strong>Documentation</strong></th>
<th align="center"><strong>Build Status</strong></th>
<th align="center"><strong>Social</strong></th>
<th align="center"><strong>Reference to cite</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><a href="https://julianlsolvers.github.io/Optim.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/f7b92a177c912c1cc007fc9b40f17ff3ee3bb414/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a></td>
<td align="center"><a href="https://travis-ci.org/JuliaNLSolvers/Optim.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/382661a59b7f19e0648b402de573eda6d53895f4/68747470733a2f2f7472617669732d63692e6f72672f4a756c69614e4c536f6c766572732f4f7074696d2e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaNLSolvers/Optim.jl.svg?branch=master" style="max-width:100%;"></a></td>
<td align="center"><a href="https://gitter.im/JuliaNLSolvers/Optim.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/74bbfb3c6aab24f5a0793ad8750d14f01af89204/68747470733a2f2f6261646765732e6769747465722e696d2f4a756c69614e4c536f6c766572732f4f7074696d2e6a6c2e737667" alt="" data-canonical-src="https://badges.gitter.im/JuliaNLSolvers/Optim.jl.svg" style="max-width:100%;"></a></td>
<td align="center"><a href="https://doi.org/10.21105/joss.00615" rel="nofollow"><img src="https://camo.githubusercontent.com/7a0cac49eb2a077b403717883539f542be132c08/687474703a2f2f6a6f73732e7468656f6a2e6f72672f7061706572732f31302e32313130352f6a6f73732e30303631352f7374617475732e737667" alt="JOSS" data-canonical-src="http://joss.theoj.org/papers/10.21105/joss.00615/status.svg" style="max-width:100%;"></a></td>
</tr>
<tr>
<td align="center"></td>
<td align="center"><a href="https://ci.appveyor.com/project/blegat/optim-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/8287e82af0387b88e2c1afb63c98f125d462701e/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f707270387967667034727239746166653f7376673d74727565" alt="Build Status" data-canonical-src="https://ci.appveyor.com/api/projects/status/prp8ygfp4rr9tafe?svg=true" style="max-width:100%;"></a></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center"><a href="https://codecov.io/gh/JuliaNLSolvers/Optim.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/d02513986468ecfdf949210c7f3bea064a2cdc60/68747470733a2f2f696d672e736869656c64732e696f2f636f6465636f762f632f6769746875622f4a756c69614e4c536f6c766572732f4f7074696d2e6a6c2f6d61737465722e7376673f6d61784167653d32353932303030" alt="Codecov branch" data-canonical-src="https://img.shields.io/codecov/c/github/JuliaNLSolvers/Optim.jl/master.svg?maxAge=2592000" style="max-width:100%;"></a></td>
<td align="center"></td>
<td align="center"></td>
</tr>
</tbody>
</table>
<h1><a id="user-content-optimization" class="anchor" aria-hidden="true" href="#optimization"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Optimization</h1>
<p>Optim.jl is a package for univariate and multivariate optimization of functions.
A typical example of the usage of Optim.jl is</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> Optim
<span class="pl-en">rosenbrock</span>(x) <span class="pl-k">=</span>  (<span class="pl-c1">1.0</span> <span class="pl-k">-</span> x[<span class="pl-c1">1</span>])<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">+</span> <span class="pl-c1">100.0</span> <span class="pl-k">*</span> (x[<span class="pl-c1">2</span>] <span class="pl-k">-</span> x[<span class="pl-c1">1</span>]<span class="pl-k">^</span><span class="pl-c1">2</span>)<span class="pl-k">^</span><span class="pl-c1">2</span>
result <span class="pl-k">=</span> <span class="pl-c1">optimize</span>(rosenbrock, <span class="pl-c1">zeros</span>(<span class="pl-c1">2</span>), <span class="pl-c1">BFGS</span>())</pre></div>
<p>This minimizes the <a href="https://en.wikipedia.org/wiki/Rosenbrock_function" rel="nofollow">Rosenbrock function</a></p>
<p><a target="_blank" rel="noopener noreferrer" href="https://user-images.githubusercontent.com/8431156/31627324-2bbc9ebc-b2ad-11e7-916f-857ad8dcb714.gif"><img src="https://user-images.githubusercontent.com/8431156/31627324-2bbc9ebc-b2ad-11e7-916f-857ad8dcb714.gif" title="f(x,y) = (a-x)^2+b(y-x^2)^2" style="max-width:100%;"></a></p>
<p>with a = 1, b = 100 and the initial values x=0, y=0.
The minimum is at (a,a^2).</p>
<p>The above code gives the output</p>
<pre lang="jlcon"><code>
* Status: success

* Candidate solution
  Minimizer: [1.00e+00, 1.00e+00]
  Minimum:   5.471433e-17

* Found with
  Algorithm:     BFGS
  Initial Point: [0.00e+00, 0.00e+00]

* Convergence measures
  |x - x'|               = 3.47e-07 ≰ 0.0e+00
  |x - x'|/|x'|          = 3.47e-07 ≰ 0.0e+00
  |f(x) - f(x')|         = 6.59e-14 ≰ 0.0e+00
  |f(x) - f(x')|/|f(x')| = 1.20e+03 ≰ 0.0e+00
  |g(x)|                 = 2.33e-09 ≤ 1.0e-08

* Work counters
  Seconds run:   0  (vs limit Inf)
  Iterations:    16
  f(x) calls:    53
  ∇f(x) calls:   53
</code></pre>
<p>To get information on the keywords used to construct method instances, use the Julia REPL help prompt (<code>?</code>)</p>
<pre><code>help?&gt; LBFGS
search: LBFGS

     LBFGS
    ≡≡≡≡≡≡≡

     Constructor
    =============

  LBFGS(; m::Integer = 10,
  alphaguess = LineSearches.InitialStatic(),
  linesearch = LineSearches.HagerZhang(),
  P=nothing,
  precondprep = (P, x) -&gt; nothing,
  manifold = Flat(),
  scaleinvH0::Bool = true &amp;&amp; (typeof(P) &lt;: Nothing))

  LBFGS has two special keywords; the memory length m, and
  the scaleinvH0 flag. The memory length determines how many
  previous Hessian approximations to store. When scaleinvH0
  == true, then the initial guess in the two-loop recursion
  to approximate the inverse Hessian is the scaled identity,
  as can be found in Nocedal and Wright (2nd edition) (sec.
  7.2).

  In addition, LBFGS supports preconditioning via the P and
  precondprep keywords.

     Description
    =============

  The LBFGS method implements the limited-memory BFGS
  algorithm as described in Nocedal and Wright (sec. 7.2,
  2006) and original paper by Liu &amp; Nocedal (1989). It is a
  quasi-Newton method that updates an approximation to the
  Hessian using past approximations as well as the gradient.

     References
    ============

    •    Wright, S. J. and J. Nocedal (2006), Numerical
        optimization, 2nd edition. Springer

    •    Liu, D. C. and Nocedal, J. (1989). "On the
        Limited Memory Method for Large Scale
        Optimization". Mathematical Programming B. 45
        (3): 503–528
</code></pre>
<h1><a id="user-content-documentation" class="anchor" aria-hidden="true" href="#documentation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Documentation</h1>
<p>For more details and options, see the documentation</p>
<ul>
<li><a href="https://julianlsolvers.github.io/Optim.jl/stable" rel="nofollow">STABLE</a> — most recently tagged version of the documentation.</li>
<li><a href="https://julianlsolvers.github.io/Optim.jl/latest" rel="nofollow">LATEST</a> — in-development version of the documentation.</li>
</ul>
<h1><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h1>
<p>The package is a registered package, and can be installed with <code>Pkg.add</code>.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Pkg; Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>Optim<span class="pl-pds">"</span></span>)</pre></div>
<p>or through the <code>pkg</code> REPL mode by typing</p>
<pre><code>] add Optim
</code></pre>
<h1><a id="user-content-citation" class="anchor" aria-hidden="true" href="#citation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Citation</h1>
<p>If you use <code>Optim.jl</code> in your work, please cite the following.</p>
<div class="highlight highlight-text-tex-latex"><pre>@article{mogensen2018optim,
  author  = {Mogensen, Patrick Kofod and Riseth, Asbj{<span class="pl-c1">\o</span>}rn Nilsen},
  title   = {Optim: A mathematical optimization package for {Julia}},
  journal = {Journal of Open Source Software},
  year    = {2018},
  volume  = {3},
  number  = {24},
  pages   = {615},
  doi     = {10.21105/joss.00615}
}</pre></div>
</article></div>