<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-polylogarithms" class="anchor" aria-hidden="true" href="#polylogarithms"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Polylogarithms</h1>
<p dir="auto"><a href="https://mroughan.github.io/Polylogarithms.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a></p>

<p dir="auto"><a href="https://travis-ci.com/mroughan/Polylogarithms.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/21a29306c255335814e4ebffbe4e8da877e132d5ab33dd46a6d1753e7cba5f0a/68747470733a2f2f7472617669732d63692e636f6d2f6d726f756768616e2f506f6c796c6f6761726974686d732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/mroughan/Polylogarithms.jl.svg?branch=master" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/mroughan/Polylogarithms.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/a89a4890d90f04bc4887132550c6b0813206c3a399917d6d994df3c22f0a99dc/68747470733a2f2f636f6465636f762e696f2f67682f6d726f756768616e2f506f6c796c6f6761726974686d732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/mroughan/Polylogarithms.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">This implements the
<a href="https://en.wikipedia.org/wiki/Polylogarithm#Relationship_to_other_functions" rel="nofollow">Polylogarithm</a>
and some related functions that were needed (Harmonic numbers,
Stieltjes constants, and Bernoulli numbers and polynomials, and Euler numbers).</p>
<p dir="auto">The code is aimed at calculating Li_s(z) for all (complex) s and z.</p>
<p dir="auto">This is still a little experimental, but there is a fairly large test
set that all works nicely.</p>
<p dir="auto">Note that the aimed for accuracy is 1.0e-12 relative error, but that
occasional errors as large as 1.0e-11 have been seen.</p>
<h1 dir="auto"><a id="user-content-functions" class="anchor" aria-hidden="true" href="#functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Functions</h1>
<ul dir="auto">
<li>
<p dir="auto"><code>polylog(s, z)</code> the polylogarithm function</p>
</li>
<li>
<p dir="auto"><code>bernoulli(n)</code>  Provides the first 59 Bernoulli numbers as exact rationals</p>
</li>
<li>
<p dir="auto"><code>bernoulli(n,x)</code>  Provides the Bernoulli polynomials</p>
</li>
<li>
<p dir="auto"><code>euler(n)</code>  Provides the first 61 Euler numbers as BigInt</p>
</li>
<li>
<p dir="auto"><code>harmonic(n)</code> Provides the Harmonic numbers</p>
</li>
<li>
<p dir="auto"><code>harmonic(n,r)</code> Provides the generalised Harmonic numbers</p>
</li>
<li>
<p dir="auto"><code>stieltjes(n)</code> Provides the first 10 <a href="https://en.wikipedia.org/wiki/Stieltjes_constants" rel="nofollow">Stieltjes
constants</a> (see
Abramowitz and Stegun, 23.2.5), also known as the generalized
Euler-Mascheroni constants.</p>
</li>
<li>
<p dir="auto"><code>dirichlet_beta(z)</code> Provides the Dirichlet beta function</p>
</li>
</ul>
<h1 dir="auto"><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Examples</h1>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; using Polylogarithms
julia&gt; polylog(2.0, 1.0)
1.6449340668482273"><pre class="notranslate"><code>julia&gt; using Polylogarithms
julia&gt; polylog(2.0, 1.0)
1.6449340668482273
</code></pre></div>
<h1 dir="auto"><a id="user-content-details-and-accuracy" class="anchor" aria-hidden="true" href="#details-and-accuracy"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Details and Accuracy</h1>
<p dir="auto">Extended details of the algorithms being used here are provided at
<a href="https://arxiv.org/abs/2010.09860" rel="nofollow">https://arxiv.org/abs/2010.09860</a>.</p>
<p dir="auto">Accuracy has been tested over a wide range of scenarios. It starts to
falter for large <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="76b2f58c2983e420c449a01223cb335a">$z$</math-renderer> and <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="76b2f58c2983e420c449a01223cb335a">$\Re(s) &amp;gt; 8$</math-renderer>.</p>
<h1 dir="auto">
<a id="user-content-note" class="anchor" aria-hidden="true" href="#note"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Note</h1>
<p dir="auto">According to naming conventions, this package should have been called
Polylogarithm, but there is already an older package doing
polylogarithms, <a href="https://github.com/Expander/polylogarithm">https://github.com/Expander/polylogarithm</a> but it's
using C/CPP/Fortran bindings, and only appears to do s=2,3,4,5,6.</p>
<p dir="auto">There is a new package
<a href="https://github.com/Expander/PolyLog.jl">PolyLog</a>, which does some
newer stuff for dilogarithms, so that might be for you if you care
about that case.</p>
</article></div>