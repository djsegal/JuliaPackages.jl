<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><p>A quantum circuit simulator using tensor network methods.</p>
<h1><a id="user-content-install" class="anchor" aria-hidden="true" href="#install"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Install</h1>
<p>To get started, run following commands:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">import</span> Pkg
<span class="pl-c"><span class="pl-c">#</span> to install ITensors.jl</span>
ITensorsPkg <span class="pl-k">=</span> Pkg<span class="pl-k">.</span><span class="pl-c1">PackageSpec</span>(url<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>https://github.com/ITensor/ITensors.jl.git<span class="pl-pds">"</span></span>)
<span class="pl-c"><span class="pl-c">#</span> to install LinQu</span>
LinQuPkg <span class="pl-k">=</span>  Pkg<span class="pl-k">.</span><span class="pl-c1">PackageSpec</span>(url<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>https://github.com/YiqingZhouKelly/LinQu.jl.git<span class="pl-pds">"</span></span>)
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>([ITensorsPkg, LinQuPkg])</pre></div>
<p>Then you should be ready to go!</p>
<h1><a id="user-content-tutorial" class="anchor" aria-hidden="true" href="#tutorial"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Tutorial</h1>
<p>(For more detailed examples, checkout the <a href="https://github.com/YiqingZhouKelly/LinQu.jl/tree/master/example"><code>example</code></a> folder.)</p>
<ul>
<li>Construct a state</li>
</ul>
<div class="highlight highlight-source-julia"><pre>N <span class="pl-k">=</span> <span class="pl-c1">5</span> <span class="pl-c"><span class="pl-c">#</span> for 5 qubits</span>
state1 <span class="pl-k">=</span> <span class="pl-c1">MPSState</span>(N) <span class="pl-c"><span class="pl-c">#</span> use MPS to represent state of a quantum device</span>
state2 <span class="pl-k">=</span> <span class="pl-c1">ExactState</span>(N) <span class="pl-c"><span class="pl-c">#</span> use a tensor of order N to represent state of a quantum device</span></pre></div>
<ul>
<li>
<p>Apply a gate</p>
<ul>
<li>Single qubit gate
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">apply!</span>(state, H, <span class="pl-c1">1</span>) <span class="pl-c"><span class="pl-c">#</span> apply a Hadamard gate to qubit 1</span>
<span class="pl-c1">apply!</span>(state, <span class="pl-c1">H</span>(<span class="pl-c1">1</span>)) <span class="pl-c"><span class="pl-c">#</span> alternative interface</span></pre></div>
</li>
<li>Multiple qubit gate
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span> apply a CNOT gate to state, qubit 3 is control bit and qubit 5 is target bit</span>
<span class="pl-c1">apply!</span>(state, CNOT, [<span class="pl-c1">3</span>,<span class="pl-c1">5</span>])
<span class="pl-c1">apply!</span>(state, <span class="pl-c1">CNOT</span>(<span class="pl-c1">3</span>,<span class="pl-c1">5</span>))</pre></div>
</li>
</ul>
</li>
<li>
<p>Build a QCircuit</p>
</li>
</ul>
<div class="highlight highlight-source-julia"><pre>N <span class="pl-k">=</span> <span class="pl-c1">10</span> <span class="pl-c"><span class="pl-c">#</span> 10 quits</span>
state <span class="pl-k">=</span> <span class="pl-c1">MPSState</span>(N)
circuit <span class="pl-k">=</span> <span class="pl-c1">QCircuit</span>(N)
<span class="pl-c1">add!</span>(circuit, H, <span class="pl-c1">1</span>)
<span class="pl-c1">add!</span>(circuit, <span class="pl-c1">H</span>(<span class="pl-c1">1</span>),
              <span class="pl-c1">X</span>(<span class="pl-c1">2</span>),
              <span class="pl-c1">CNOT</span>(<span class="pl-c1">1</span>,<span class="pl-c1">2</span>))
<span class="pl-c1">apply!</span>(state, circuit)</pre></div>
<ul>
<li>Allow SVD truncation for approximation</li>
</ul>
<div class="highlight highlight-source-julia"><pre>N <span class="pl-k">=</span> <span class="pl-c1">10</span> <span class="pl-c"><span class="pl-c">#</span> 10 quits</span>
state <span class="pl-k">=</span> <span class="pl-c1">MPSState</span>(N)
circuit <span class="pl-k">=</span> <span class="pl-c1">QCircuit</span>(N)
<span class="pl-c1">add!</span>(circuit, H, <span class="pl-c1">1</span>)
<span class="pl-c1">add!</span>(circuit, <span class="pl-c1">H</span>(<span class="pl-c1">1</span>),
              <span class="pl-c1">X</span>(<span class="pl-c1">2</span>),
              <span class="pl-c1">CNOT</span>(<span class="pl-c1">1</span>,<span class="pl-c1">2</span>))

<span class="pl-c1">apply!</span>(state, circuit; maxdim <span class="pl-k">=</span> <span class="pl-c1">10</span>) <span class="pl-c"><span class="pl-c">#</span> use keyword arguments</span>
                                    <span class="pl-c"><span class="pl-c">#</span> to specify truncation </span>
                                    <span class="pl-c"><span class="pl-c">#</span> mode</span>
<span class="pl-c"><span class="pl-c">#</span> see doc string of apply! function for a complete set of supported keyword arguments</span></pre></div>
<ul>
<li>Measurements
<ul>
<li><code>measure!</code>: This function does not change the current state physically, but may change the gauge center.</li>
<li><code>collapse!</code>: This function collapses measured qubits to measurement results (i.e. changes the physical meaning current state).</li>
</ul>
</li>
</ul>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> state <span class="pl-k">=</span> <span class="pl-c1">MPSState</span>(<span class="pl-c1">10</span>)
<span class="pl-c1">10</span><span class="pl-k">-</span>qubit MPSState


julia<span class="pl-k">&gt;</span> <span class="pl-c1">apply!</span>(state, H, <span class="pl-c1">1</span>)
<span class="pl-c1">10</span><span class="pl-k">-</span>qubit MPSState

julia<span class="pl-k">&gt;</span> <span class="pl-c1">measure!</span>(state, <span class="pl-c1">1</span>, <span class="pl-c1">3</span>)
<span class="pl-c1">3</span><span class="pl-k">-</span>element Array{Int64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">0</span>
 <span class="pl-c1">1</span>
 <span class="pl-c1">0</span>

 julia<span class="pl-k">&gt;</span> <span class="pl-c1">measure!</span>(state, <span class="pl-c1">1</span>, <span class="pl-c1">3</span>) 
<span class="pl-c1">3</span><span class="pl-k">-</span>element Array{Int64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">1</span>
 <span class="pl-c1">0</span>
 <span class="pl-c1">0</span>

 julia<span class="pl-k">&gt;</span> <span class="pl-c1">collapse!</span>(state, <span class="pl-c1">1</span>)
<span class="pl-c1">0</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">sum</span>(<span class="pl-c1">measure!</span>(state, <span class="pl-c1">1</span>, <span class="pl-c1">100</span>)) <span class="pl-c"><span class="pl-c">#</span>always get zero after calling collapse!</span>
<span class="pl-c1">0</span></pre></div>
</article></div>