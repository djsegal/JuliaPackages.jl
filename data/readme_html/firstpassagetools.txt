<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-firstpassagetools" class="anchor" aria-hidden="true" href="#firstpassagetools"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>FirstPassageTools</h1>
<p dir="auto"><a href="https://github.com/garrett-m-smith/FirstPassageTools.jl/actions/workflows/CI.yml?query=branch%3Amain"><img src="https://github.com/garrett-m-smith/FirstPassageTools.jl/actions/workflows/CI.yml/badge.svg?branch=main" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/garrett-m-smith/FirstPassageTools.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/0d320c5f2ea9827b4501315eb6e27c91663510185744c7b7ebae9d416c8b0787/68747470733a2f2f636f6465636f762e696f2f67682f676172726574742d6d2d736d6974682f466972737450617373616765546f6f6c732e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/garrett-m-smith/FirstPassageTools.jl/branch/main/graph/badge.svg" style="max-width: 100%;"></a>
<a href="https://zenodo.org/badge/latestdoi/465749757" rel="nofollow"><img src="https://camo.githubusercontent.com/7f0ad0e237aa1a0dc7f035579c9cbd4b10d98434f525e2074ac2996d37dea205/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f3436353734393735372e737667" alt="DOI" data-canonical-src="https://zenodo.org/badge/465749757.svg" style="max-width: 100%;"></a></p>
<p dir="auto"><code>FirstPassageTools</code> is a Julia package for setting up first-passage time distributions for
continuous-time, discrete-state Markov processes. The first-passage time distributions can
then be fit to empirical first-passage time data using <a href="https://turing.ml" rel="nofollow">Turing.jl</a>.</p>
<h1 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h1>
<p dir="auto">FirstPassageTools.jl can be installed from Juila's central package repository:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; ]
pkg&gt; add FirstPassageTools"><pre>julia<span class="pl-k">&gt;</span> ]
pkg<span class="pl-k">&gt;</span> add FirstPassageTools</pre></div>
<p dir="auto">FirstPassageTools.jl can also be installed directly from Github in the Julia REPL:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; ]
pkg&gt; add https://github.com/garrett-m-smith/FirstPassageTools.jl"><pre>julia<span class="pl-k">&gt;</span> ]
pkg<span class="pl-k">&gt;</span> add https<span class="pl-k">:</span><span class="pl-k">//</span>github<span class="pl-k">.</span>com<span class="pl-k">/</span>garrett<span class="pl-k">-</span>m<span class="pl-k">-</span>smith<span class="pl-k">/</span>FirstPassageTools<span class="pl-k">.</span>jl</pre></div>
<h1 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h1>
<p dir="auto">To set up a first-passage time distribution, one needs to provide two transition rate
matrices and a vector with the initial probability distribution over the transient states
(<code>p0</code> in the example below). The first matrix (<code>T</code> below) determines the transition rates
between transient states of the system. The second determines the transition rates from the
transient states to one or more absorbing states (<code>A</code> below). The rows of the transient
matrix T should sum to the values given in the absorbing matrix. For both matrices, the
<math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="1b9d02e469fb77ce742982ef2bd8047d">$i,j$</math-renderer>-th entry should provide the transition rate from state <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="1b9d02e469fb77ce742982ef2bd8047d">$j$</math-renderer> to state <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="1b9d02e469fb77ce742982ef2bd8047d">$i$</math-renderer>.</p>
<p dir="auto">Currently, the most complete functionality is available for the first-passage time to <em>any</em>
absorbing state by time t. When a system has more than one absorbing state, one might be
interested in the conditional first-passage time to reach a particular absorbing state
before all others. Some methods are implemented for this, but not everything.</p>
<p dir="auto">For a single transient state and a single absorbing state, the first-passage time
distribution is equivalent to the exponential distribution:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using FirstPassageTools
julia&gt; T = [-1.0;;]  # transition rate matrices need to be 2-dimensional
julia&gt; A = [1.0;;]
julia&gt; p0 = [1.0]
julia&gt; fp = fpdistribution(T, A, p0)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> FirstPassageTools
julia<span class="pl-k">&gt;</span> T <span class="pl-k">=</span> [<span class="pl-k">-</span><span class="pl-c1">1.0</span>;;]  <span class="pl-c"><span class="pl-c">#</span> transition rate matrices need to be 2-dimensional</span>
julia<span class="pl-k">&gt;</span> A <span class="pl-k">=</span> [<span class="pl-c1">1.0</span>;;]
julia<span class="pl-k">&gt;</span> p0 <span class="pl-k">=</span> [<span class="pl-c1">1.0</span>]
julia<span class="pl-k">&gt;</span> fp <span class="pl-k">=</span> <span class="pl-c1">fpdistribution</span>(T, A, p0)</pre></div>
<p dir="auto">Available methods for first-passage time distributions include <code>mean()</code>, <code>var()</code>, <code>rand()</code>,
<code>pdf()</code>, <code>logpdf()</code>, <code>cdf()</code>, and <code>quantile()</code>. From here, the transition rates of the
distribution can be fit to data. See the notebooks directory for additional tutorials and
parameter recovery exercises.</p>
<p dir="auto">Because the first-passage time distributions here are sub-types of the continuous univariate
distribution from<a href="https://github.com/JuliaStats/Distributions.jl"><code>Distributions.jl</code></a>,
plotting functions from <a href="https://github.com/JuliaPlots/StatsPlots.jl"><code>StatsPlots.jl</code></a>
work out of the box. For example, to plot the probability density function and the
cumulative distribution function from the above sample, you can run:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using Plots, StatsPlots
julia&gt; plot(fp, label=&quot;PDF&quot;)
julia&gt; plot!(fp, func=cdf, label=&quot;CDF&quot;)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Plots, StatsPlots
julia<span class="pl-k">&gt;</span> <span class="pl-c1">plot</span>(fp, label<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>PDF<span class="pl-pds">"</span></span>)
julia<span class="pl-k">&gt;</span> <span class="pl-c1">plot!</span>(fp, func<span class="pl-k">=</span>cdf, label<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>CDF<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">Additional examples are provided in the notebooks directory. Verification of correct
sampling, at least for certain statistical models, is provided in the
<code>SimulationBasedCalibration.jl</code> script in the <code>notebooks</code> directory.</p>
</article></div>