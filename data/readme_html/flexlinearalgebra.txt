<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-flexlinearalgebra" class="anchor" aria-hidden="true" href="#flexlinearalgebra"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>FlexLinearAlgebra</h1>
<p dir="auto"><a href="https://travis-ci.com/scheinerman/FlexLinearAlgebra.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/fcdbc7b83e4a107ebafc3188078b3ab347730e16b5fac937f2833408e33b55a9/68747470733a2f2f7472617669732d63692e636f6d2f73636865696e65726d616e2f466c65784c696e656172416c67656272612e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/scheinerman/FlexLinearAlgebra.jl.svg?branch=master" style="max-width: 100%;"></a></p>
<p dir="auto">A typical vector is indexed by integers 1, 2, 3, ..., n. The goal of this package
is to create vectors (and eventually matrices) with arbitrary index sets.</p>
<h2 dir="auto"><a id="user-content-the-flexvector" class="anchor" aria-hidden="true" href="#the-flexvector"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>The <code>FlexVector</code></h2>
<p dir="auto">A <code>FlexVector</code> behaves much like a linear algebra vector, but the index set
can be arbitrary. A new, all zero-valued vector is created by calling
<code>FlexVector(dom)</code> where <code>dom</code> is the index set. This can be any iterable
Julia object (such as an <code>Array</code>, <code>Set</code>, etc.). By default, the zero values
in this vector are of type <code>Float64</code>, but one can also invoke <code>FlexVector{Int}(dom)</code>
and the resulting vector's values are <code>Int</code>s.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using FlexLinearAlgebra

julia&gt; v = FlexVector(4:7)
FlexVector{Int64,Float64}:
  4 =&gt; 0.0
  5 =&gt; 0.0
  6 =&gt; 0.0
  7 =&gt; 0.0

julia&gt; w = FlexVector{Int}([1,3,5])
FlexVector{Int64,Int64}:
  1 =&gt; 0
  3 =&gt; 0
  5 =&gt; 0

julia&gt; dom = [&quot;alpha&quot;, &quot;bravo&quot;, &quot;charlie&quot;]
3-element Array{String,1}:
 &quot;alpha&quot;  
 &quot;bravo&quot;  
 &quot;charlie&quot;

julia&gt; FlexVector{Complex}(dom)
FlexVector{String,Complex}:
  alpha =&gt; 0 + 0im
  bravo =&gt; 0 + 0im
  charlie =&gt; 0 + 0im"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> FlexLinearAlgebra

julia<span class="pl-k">&gt;</span> v <span class="pl-k">=</span> <span class="pl-c1">FlexVector</span>(<span class="pl-c1">4</span><span class="pl-k">:</span><span class="pl-c1">7</span>)
FlexVector{Int64,Float64}<span class="pl-k">:</span>
  <span class="pl-c1">4</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">0.0</span>
  <span class="pl-c1">5</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">0.0</span>
  <span class="pl-c1">6</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">0.0</span>
  <span class="pl-c1">7</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">0.0</span>

julia<span class="pl-k">&gt;</span> w <span class="pl-k">=</span> <span class="pl-c1">FlexVector</span><span class="pl-c1">{Int}</span>([<span class="pl-c1">1</span>,<span class="pl-c1">3</span>,<span class="pl-c1">5</span>])
FlexVector{Int64,Int64}<span class="pl-k">:</span>
  <span class="pl-c1">1</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">0</span>
  <span class="pl-c1">3</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">0</span>
  <span class="pl-c1">5</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">0</span>

julia<span class="pl-k">&gt;</span> dom <span class="pl-k">=</span> [<span class="pl-s"><span class="pl-pds">"</span>alpha<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>bravo<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>charlie<span class="pl-pds">"</span></span>]
<span class="pl-c1">3</span><span class="pl-k">-</span>element Array{String,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-s"><span class="pl-pds">"</span>alpha<span class="pl-pds">"</span></span>  
 <span class="pl-s"><span class="pl-pds">"</span>bravo<span class="pl-pds">"</span></span>  
 <span class="pl-s"><span class="pl-pds">"</span>charlie<span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">FlexVector</span><span class="pl-c1">{Complex}</span>(dom)
FlexVector{String,Complex}<span class="pl-k">:</span>
  alpha <span class="pl-k">=&gt;</span> <span class="pl-c1">0</span> <span class="pl-k">+</span> <span class="pl-c1">0im</span>
  bravo <span class="pl-k">=&gt;</span> <span class="pl-c1">0</span> <span class="pl-k">+</span> <span class="pl-c1">0im</span>
  charlie <span class="pl-k">=&gt;</span> <span class="pl-c1">0</span> <span class="pl-k">+</span> <span class="pl-c1">0im</span></pre></div>
<h3 dir="auto"><a id="user-content-additional-constructors" class="anchor" aria-hidden="true" href="#additional-constructors"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Additional constructors</h3>
<p dir="auto">The function <code>FlexOnes</code> can be used to generate a vector of all ones. Use
either <code>FlexOnes(dom)</code> or <code>FlexOnes(T,dom)</code> like this:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; FlexOnes(3:5)
FlexVector{Int64,Float64}:
  3 =&gt; 1.0
  4 =&gt; 1.0
  5 =&gt; 1.0

julia&gt; FlexOnes(Complex,3:5)
FlexVector{Int64,Complex}:
  3 =&gt; 1 + 0im
  4 =&gt; 1 + 0im
  5 =&gt; 1 + 0im"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">FlexOnes</span>(<span class="pl-c1">3</span><span class="pl-k">:</span><span class="pl-c1">5</span>)
FlexVector{Int64,Float64}<span class="pl-k">:</span>
  <span class="pl-c1">3</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1.0</span>
  <span class="pl-c1">4</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1.0</span>
  <span class="pl-c1">5</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1.0</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">FlexOnes</span>(Complex,<span class="pl-c1">3</span><span class="pl-k">:</span><span class="pl-c1">5</span>)
FlexVector{Int64,Complex}<span class="pl-k">:</span>
  <span class="pl-c1">3</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1</span> <span class="pl-k">+</span> <span class="pl-c1">0im</span>
  <span class="pl-c1">4</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1</span> <span class="pl-k">+</span> <span class="pl-c1">0im</span>
  <span class="pl-c1">5</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1</span> <span class="pl-k">+</span> <span class="pl-c1">0im</span></pre></div>
<p dir="auto">The function <code>FlexConvert</code> converts an ordinary <code>Vector</code> into a
<code>FlexVector</code>. The index set for the result is  <code>1,2,...,n</code>
where <code>n</code> is the length of the vector.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; FlexConvert([1-2im,2+3im])
FlexVector{Int64,Complex{Int64}}:
  1 =&gt; 1 - 2im
  2 =&gt; 2 + 3im"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">FlexConvert</span>([<span class="pl-c1">1</span><span class="pl-k">-</span><span class="pl-c1">2im</span>,<span class="pl-c1">2</span><span class="pl-k">+</span><span class="pl-c1">3im</span>])
FlexVector{Int64,Complex{Int64}}<span class="pl-k">:</span>
  <span class="pl-c1">1</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1</span> <span class="pl-k">-</span> <span class="pl-c1">2im</span>
  <span class="pl-c1">2</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">2</span> <span class="pl-k">+</span> <span class="pl-c1">3im</span></pre></div>
<h3 dir="auto"><a id="user-content-accessing-elements-of-a-flexvector" class="anchor" aria-hidden="true" href="#accessing-elements-of-a-flexvector"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Accessing elements of a <code>FlexVector</code></h3>
<p dir="auto">The values held in a <code>FlexVector</code> may be accessed and modified using the usual
Julia square-bracket notation:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; v[4]=7
7

julia&gt; v
FlexVector{Int64,Float64}:
  4 =&gt; 7.0
  5 =&gt; 0.0
  6 =&gt; 0.0
  7 =&gt; 0.0"><pre>julia<span class="pl-k">&gt;</span> v[<span class="pl-c1">4</span>]<span class="pl-k">=</span><span class="pl-c1">7</span>
<span class="pl-c1">7</span>

julia<span class="pl-k">&gt;</span> v
FlexVector{Int64,Float64}<span class="pl-k">:</span>
  <span class="pl-c1">4</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">7.0</span>
  <span class="pl-c1">5</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">0.0</span>
  <span class="pl-c1">6</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">0.0</span>
  <span class="pl-c1">7</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">0.0</span></pre></div>
<p dir="auto">The indices for a <code>FlexVector</code> <code>v</code> can be recovered using <code>keys(v)</code>.</p>
<p dir="auto">To delete an entry from a <code>FlexVector</code> use <code>delete_entry!(v,k)</code> where
<code>k</code> is the index of the entry to be deleted.</p>
<p dir="auto"><strong>Note</strong>: It is not an error to access a key that is undefined for a given
vector. Even if <code>k</code> is not a key, one may assign to <code>v[k]</code>, in which case
the vector is modified to include that value. One may also look up the value
<code>v[k]</code> in which case zero is returned and the vector is <em>not</em> modified.</p>
<h3 dir="auto"><a id="user-content-convert-to-a-julia-vector" class="anchor" aria-hidden="true" href="#convert-to-a-julia-vector"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Convert to a Julia <code>Vector</code></h3>
<p dir="auto">If <code>v</code> is a <code>FlexVector</code>, then <code>Vector(v)</code> converts <code>v</code> into a Julia
vector. The keys are lost and we simply have the values of <code>v</code> placed
into a one-dimensional array.</p>
<h2 dir="auto"><a id="user-content-vector-arithmetic" class="anchor" aria-hidden="true" href="#vector-arithmetic"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Vector arithmetic</h2>
<p dir="auto">Vector addition/subtraction and scalar multiplication are supported.
If the domains of the two vectors are not the same, the resulting vector's
domain is the union of the two domains. For example:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; v = FlexOnes(Complex{Int},1:4)
FlexVector{Int64,Complex{Int64}}:
  1 =&gt; 1 + 0im
  2 =&gt; 1 + 0im
  3 =&gt; 1 + 0im
  4 =&gt; 1 + 0im

julia&gt; w = FlexOnes(3:6)
FlexVector{Int64,Float64}:
  3 =&gt; 1.0
  4 =&gt; 1.0
  5 =&gt; 1.0
  6 =&gt; 1.0

julia&gt; v+w
FlexVector{Int64,Complex{Float64}}:
  1 =&gt; 1.0 + 0.0im
  2 =&gt; 1.0 + 0.0im
  3 =&gt; 2.0 + 0.0im
  4 =&gt; 2.0 + 0.0im
  5 =&gt; 1.0 + 0.0im
  6 =&gt; 1.0 + 0.0im"><pre>julia<span class="pl-k">&gt;</span> v <span class="pl-k">=</span> <span class="pl-c1">FlexOnes</span>(Complex{Int},<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">4</span>)
FlexVector{Int64,Complex{Int64}}<span class="pl-k">:</span>
  <span class="pl-c1">1</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1</span> <span class="pl-k">+</span> <span class="pl-c1">0im</span>
  <span class="pl-c1">2</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1</span> <span class="pl-k">+</span> <span class="pl-c1">0im</span>
  <span class="pl-c1">3</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1</span> <span class="pl-k">+</span> <span class="pl-c1">0im</span>
  <span class="pl-c1">4</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1</span> <span class="pl-k">+</span> <span class="pl-c1">0im</span>

julia<span class="pl-k">&gt;</span> w <span class="pl-k">=</span> <span class="pl-c1">FlexOnes</span>(<span class="pl-c1">3</span><span class="pl-k">:</span><span class="pl-c1">6</span>)
FlexVector{Int64,Float64}<span class="pl-k">:</span>
  <span class="pl-c1">3</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1.0</span>
  <span class="pl-c1">4</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1.0</span>
  <span class="pl-c1">5</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1.0</span>
  <span class="pl-c1">6</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1.0</span>

julia<span class="pl-k">&gt;</span> v<span class="pl-k">+</span>w
FlexVector{Int64,Complex{Float64}}<span class="pl-k">:</span>
  <span class="pl-c1">1</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span>
  <span class="pl-c1">2</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span>
  <span class="pl-c1">3</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">2.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span>
  <span class="pl-c1">4</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">2.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span>
  <span class="pl-c1">5</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span>
  <span class="pl-c1">6</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span></pre></div>
<p dir="auto">Notice that the two domains overlap at keys 2 and 3, so the result of the
addition at those values is <code>2.0 + 0.0im</code>. At other keys, there's a tacit zero value
taken from the vector that does not have that key.</p>
<p dir="auto">The sum of the entries in a vector can be computed with <code>sum(v)</code>. The
dot product of two vectors is computed with <code>dot</code>. If <code>v</code> contains
complex values, then <code>dot(v,w)</code> conjugates the values in <code>v</code>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; v
FlexVector{Int64,Float64}:
  1 =&gt; 2.0
  2 =&gt; 4.0

julia&gt; w
FlexVector{Int64,Float64}:
  1 =&gt; 3.0
  2 =&gt; 5.0

julia&gt; dot(v,w)
26.0

julia&gt; v = FlexConvert([1-2im,2+3im])
FlexVector{Int64,Complex{Int64}}:
  1 =&gt; 1 - 2im
  2 =&gt; 2 + 3im

julia&gt; w = FlexConvert([-3im,5+2im])
FlexVector{Int64,Complex{Int64}}:
  1 =&gt; 0 - 3im
  2 =&gt; 5 + 2im

julia&gt; dot(v,w)
22 - 14im

julia&gt; dot(w,v)
22 + 14im"><pre>julia<span class="pl-k">&gt;</span> v
FlexVector{Int64,Float64}<span class="pl-k">:</span>
  <span class="pl-c1">1</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">2.0</span>
  <span class="pl-c1">2</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">4.0</span>

julia<span class="pl-k">&gt;</span> w
FlexVector{Int64,Float64}<span class="pl-k">:</span>
  <span class="pl-c1">1</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">3.0</span>
  <span class="pl-c1">2</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">5.0</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">dot</span>(v,w)
<span class="pl-c1">26.0</span>

julia<span class="pl-k">&gt;</span> v <span class="pl-k">=</span> <span class="pl-c1">FlexConvert</span>([<span class="pl-c1">1</span><span class="pl-k">-</span><span class="pl-c1">2im</span>,<span class="pl-c1">2</span><span class="pl-k">+</span><span class="pl-c1">3im</span>])
FlexVector{Int64,Complex{Int64}}<span class="pl-k">:</span>
  <span class="pl-c1">1</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1</span> <span class="pl-k">-</span> <span class="pl-c1">2im</span>
  <span class="pl-c1">2</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">2</span> <span class="pl-k">+</span> <span class="pl-c1">3im</span>

julia<span class="pl-k">&gt;</span> w <span class="pl-k">=</span> <span class="pl-c1">FlexConvert</span>([<span class="pl-k">-</span><span class="pl-c1">3im</span>,<span class="pl-c1">5</span><span class="pl-k">+</span><span class="pl-c1">2im</span>])
FlexVector{Int64,Complex{Int64}}<span class="pl-k">:</span>
  <span class="pl-c1">1</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">0</span> <span class="pl-k">-</span> <span class="pl-c1">3im</span>
  <span class="pl-c1">2</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">5</span> <span class="pl-k">+</span> <span class="pl-c1">2im</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">dot</span>(v,w)
<span class="pl-c1">22</span> <span class="pl-k">-</span> <span class="pl-c1">14im</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">dot</span>(w,v)
<span class="pl-c1">22</span> <span class="pl-k">+</span> <span class="pl-c1">14im</span></pre></div>
<h2 dir="auto"><a id="user-content-the-flexmatrix" class="anchor" aria-hidden="true" href="#the-flexmatrix"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>The <code>FlexMatrix</code></h2>
<p dir="auto">A <code>FlexMatrix</code> is the 2-dimensional analogue of a <code>FlexVector</code>. Important
functions include:</p>
<ul dir="auto">
<li>Arithmetic: Addition, subtraction, and multiplication (scalar, matrix-matrix,
and matrix-vector).</li>
<li>Indexing: Usual <code>A[i,j]</code> notation. Also see <code>row_keys</code> and <code>col_keys</code>
to get a list for the row/column names.</li>
<li><code>FlexConvert</code> to convert a Julia matrix into a <code>FlexMatrix</code>.</li>
<li><code>Matrix(A)</code> to convert a <code>FlexMatrix</code> <code>A</code> into a Julia matrix.</li>
<li><code>delete_row!(A,r)</code> and <code>delete_col!(A,c)</code> are used to delete the line of
<code>A</code> specified.</li>
</ul>
<p dir="auto">Note that assigning to a matrix <code>A[i,j]=x</code> will not fail. The set of row and
column names will simply be expanded and extra slots filled with zeros.</p>
<hr>
<p dir="auto">Can't seem to get <code>.*</code> multiplication working.</p>
</article></div>