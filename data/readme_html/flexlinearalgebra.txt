<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-flexlinearalgebra" class="anchor" aria-hidden="true" href="#flexlinearalgebra"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>FlexLinearAlgebra</h1>
<p><a href="https://travis-ci.org/scheinerman/FlexLinearAlgebra.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/a687e98629ab1c4d0844f80690515b2c4410045f/68747470733a2f2f7472617669732d63692e6f72672f73636865696e65726d616e2f466c65784c696e656172416c67656272612e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/scheinerman/FlexLinearAlgebra.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p><a href="https://coveralls.io/github/scheinerman/FlexLinearAlgebra.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/17e932d1af85a50ecf3d22e0743d9dcf8cd35514/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f73636865696e65726d616e2f466c65784c696e656172416c67656272612e6a6c2f62616467652e7376673f6272616e63683d6d617374657226736572766963653d676974687562" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/scheinerman/FlexLinearAlgebra.jl/badge.svg?branch=master&amp;service=github" style="max-width:100%;"></a></p>
<p><a href="http://codecov.io/github/scheinerman/FlexLinearAlgebra.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/df2d9d0e5280251f4d82d5c37d9867fadd89fa27/687474703a2f2f636f6465636f762e696f2f6769746875622f73636865696e65726d616e2f466c65784c696e656172416c67656272612e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/scheinerman/FlexLinearAlgebra.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
<p>A typical vector is indexed by integers 1, 2, 3, ..., n. The goal of this package
is to create vectors (and eventually matrices) with arbitrary index sets.</p>
<h2><a id="user-content-the-flexvector" class="anchor" aria-hidden="true" href="#the-flexvector"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>The <code>FlexVector</code></h2>
<p>A <code>FlexVector</code> behaves much like a linear algebra vector, but the index set
can be arbitrary. A new, all zero-valued vector is created by calling
<code>FlexVector(dom)</code> where <code>dom</code> is the index set. This can be any iterable
Julia object (such as an <code>Array</code>, <code>Set</code>, etc.). By default, the zero values
in this vector are of type <code>Float64</code>, but one can also invoke <code>FlexVector{Int}(dom)</code>
and the resulting vector's values are <code>Int</code>s.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> FlexLinearAlgebra

julia<span class="pl-k">&gt;</span> v <span class="pl-k">=</span> <span class="pl-c1">FlexVector</span>(<span class="pl-c1">4</span><span class="pl-k">:</span><span class="pl-c1">7</span>)
FlexVector{Int64,Float64}<span class="pl-k">:</span>
  <span class="pl-c1">4</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">0.0</span>
  <span class="pl-c1">5</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">0.0</span>
  <span class="pl-c1">6</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">0.0</span>
  <span class="pl-c1">7</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">0.0</span>

julia<span class="pl-k">&gt;</span> w <span class="pl-k">=</span> <span class="pl-c1">FlexVector</span><span class="pl-c1">{Int}</span>([<span class="pl-c1">1</span>,<span class="pl-c1">3</span>,<span class="pl-c1">5</span>])
FlexVector{Int64,Int64}<span class="pl-k">:</span>
  <span class="pl-c1">1</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">0</span>
  <span class="pl-c1">3</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">0</span>
  <span class="pl-c1">5</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">0</span>

julia<span class="pl-k">&gt;</span> dom <span class="pl-k">=</span> [<span class="pl-s"><span class="pl-pds">"</span>alpha<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>bravo<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>charlie<span class="pl-pds">"</span></span>]
<span class="pl-c1">3</span><span class="pl-k">-</span>element Array{String,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-s"><span class="pl-pds">"</span>alpha<span class="pl-pds">"</span></span>  
 <span class="pl-s"><span class="pl-pds">"</span>bravo<span class="pl-pds">"</span></span>  
 <span class="pl-s"><span class="pl-pds">"</span>charlie<span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">FlexVector</span><span class="pl-c1">{Complex}</span>(dom)
FlexVector{String,Complex}<span class="pl-k">:</span>
  alpha <span class="pl-k">=&gt;</span> <span class="pl-c1">0</span> <span class="pl-k">+</span> <span class="pl-c1">0im</span>
  bravo <span class="pl-k">=&gt;</span> <span class="pl-c1">0</span> <span class="pl-k">+</span> <span class="pl-c1">0im</span>
  charlie <span class="pl-k">=&gt;</span> <span class="pl-c1">0</span> <span class="pl-k">+</span> <span class="pl-c1">0im</span></pre></div>
<h3><a id="user-content-additional-constructors" class="anchor" aria-hidden="true" href="#additional-constructors"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Additional constructors</h3>
<p>The function <code>FlexOnes</code> can be used to generate a vector of all ones. Use
either <code>FlexOnes(dom)</code> or <code>FlexOnes(T,dom)</code> like this:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">FlexOnes</span>(<span class="pl-c1">3</span><span class="pl-k">:</span><span class="pl-c1">5</span>)
FlexVector{Int64,Float64}<span class="pl-k">:</span>
  <span class="pl-c1">3</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1.0</span>
  <span class="pl-c1">4</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1.0</span>
  <span class="pl-c1">5</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1.0</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">FlexOnes</span>(Complex,<span class="pl-c1">3</span><span class="pl-k">:</span><span class="pl-c1">5</span>)
FlexVector{Int64,Complex}<span class="pl-k">:</span>
  <span class="pl-c1">3</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1</span> <span class="pl-k">+</span> <span class="pl-c1">0im</span>
  <span class="pl-c1">4</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1</span> <span class="pl-k">+</span> <span class="pl-c1">0im</span>
  <span class="pl-c1">5</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1</span> <span class="pl-k">+</span> <span class="pl-c1">0im</span></pre></div>
<p>The function <code>FlexConvert</code> converts an ordinary <code>Vector</code> into a
<code>FlexVector</code>. The index set for the result is  <code>1,2,...,n</code>
where <code>n</code> is the length of the vector.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">FlexConvert</span>([<span class="pl-c1">1</span><span class="pl-k">-</span><span class="pl-c1">2im</span>,<span class="pl-c1">2</span><span class="pl-k">+</span><span class="pl-c1">3im</span>])
FlexVector{Int64,Complex{Int64}}<span class="pl-k">:</span>
  <span class="pl-c1">1</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1</span> <span class="pl-k">-</span> <span class="pl-c1">2im</span>
  <span class="pl-c1">2</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">2</span> <span class="pl-k">+</span> <span class="pl-c1">3im</span></pre></div>
<h3><a id="user-content-accessing-elements-of-a-flexvector" class="anchor" aria-hidden="true" href="#accessing-elements-of-a-flexvector"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Accessing elements of a <code>FlexVector</code></h3>
<p>The values held in a <code>FlexVector</code> may be accessed and modified using the usual
Julia square-bracket notation:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> v[<span class="pl-c1">4</span>]<span class="pl-k">=</span><span class="pl-c1">7</span>
<span class="pl-c1">7</span>

julia<span class="pl-k">&gt;</span> v
FlexVector{Int64,Float64}<span class="pl-k">:</span>
  <span class="pl-c1">4</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">7.0</span>
  <span class="pl-c1">5</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">0.0</span>
  <span class="pl-c1">6</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">0.0</span>
  <span class="pl-c1">7</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">0.0</span></pre></div>
<p>The indices for a <code>FlexVector</code> <code>v</code> can be recovered using <code>keys(v)</code>.</p>
<p>To delete an entry from a <code>FlexVector</code> use <code>delete_entry!(v,k)</code> where
<code>k</code> is the index of the entry to be deleted.</p>
<p><strong>Note</strong>: It is not an error to access a key that is undefined for a given
vector. Even if <code>k</code> is not a key, one may assign to <code>v[k]</code>, in which case
the vector is modified to include that value. One may also look up the value
<code>v[k]</code> in which case zero is returned and the vector is <em>not</em> modified.</p>
<h3><a id="user-content-convert-to-a-julia-vector" class="anchor" aria-hidden="true" href="#convert-to-a-julia-vector"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Convert to a Julia <code>Vector</code></h3>
<p>If <code>v</code> is a <code>FlexVector</code>, then <code>Vector(v)</code> converts <code>v</code> into a Julia
vector. The keys are lost and we simply have the values of <code>v</code> placed
into a one-dimensional array.</p>
<h2><a id="user-content-vector-arithmetic" class="anchor" aria-hidden="true" href="#vector-arithmetic"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Vector arithmetic</h2>
<p>Vector addition/subtraction and scalar multiplication are supported.
If the domains of the two vectors are not the same, the resulting vector's
domain is the union of the two domains. For example:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> v <span class="pl-k">=</span> <span class="pl-c1">FlexOnes</span>(Complex{Int},<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">4</span>)
FlexVector{Int64,Complex{Int64}}<span class="pl-k">:</span>
  <span class="pl-c1">1</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1</span> <span class="pl-k">+</span> <span class="pl-c1">0im</span>
  <span class="pl-c1">2</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1</span> <span class="pl-k">+</span> <span class="pl-c1">0im</span>
  <span class="pl-c1">3</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1</span> <span class="pl-k">+</span> <span class="pl-c1">0im</span>
  <span class="pl-c1">4</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1</span> <span class="pl-k">+</span> <span class="pl-c1">0im</span>

julia<span class="pl-k">&gt;</span> w <span class="pl-k">=</span> <span class="pl-c1">FlexOnes</span>(<span class="pl-c1">3</span><span class="pl-k">:</span><span class="pl-c1">6</span>)
FlexVector{Int64,Float64}<span class="pl-k">:</span>
  <span class="pl-c1">3</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1.0</span>
  <span class="pl-c1">4</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1.0</span>
  <span class="pl-c1">5</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1.0</span>
  <span class="pl-c1">6</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1.0</span>

julia<span class="pl-k">&gt;</span> v<span class="pl-k">+</span>w
FlexVector{Int64,Complex{Float64}}<span class="pl-k">:</span>
  <span class="pl-c1">1</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span>
  <span class="pl-c1">2</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span>
  <span class="pl-c1">3</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">2.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span>
  <span class="pl-c1">4</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">2.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span>
  <span class="pl-c1">5</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span>
  <span class="pl-c1">6</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span></pre></div>
<p>Notice that the two domains overlap at keys 2 and 3, so the result of the
addition at those values is <code>2.0 + 0.0im</code>. At other keys, there's a tacit zero value
taken from the vector that does not have that key.</p>
<p>The sum of the entries in a vector can be computed with <code>sum(v)</code>. The
dot product of two vectors is computed with <code>dot</code>. If <code>v</code> contains
complex values, then <code>dot(v,w)</code> conjugates the values in <code>v</code>.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> v
FlexVector{Int64,Float64}<span class="pl-k">:</span>
  <span class="pl-c1">1</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">2.0</span>
  <span class="pl-c1">2</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">4.0</span>

julia<span class="pl-k">&gt;</span> w
FlexVector{Int64,Float64}<span class="pl-k">:</span>
  <span class="pl-c1">1</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">3.0</span>
  <span class="pl-c1">2</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">5.0</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">dot</span>(v,w)
<span class="pl-c1">26.0</span>

julia<span class="pl-k">&gt;</span> v <span class="pl-k">=</span> <span class="pl-c1">FlexConvert</span>([<span class="pl-c1">1</span><span class="pl-k">-</span><span class="pl-c1">2im</span>,<span class="pl-c1">2</span><span class="pl-k">+</span><span class="pl-c1">3im</span>])
FlexVector{Int64,Complex{Int64}}<span class="pl-k">:</span>
  <span class="pl-c1">1</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1</span> <span class="pl-k">-</span> <span class="pl-c1">2im</span>
  <span class="pl-c1">2</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">2</span> <span class="pl-k">+</span> <span class="pl-c1">3im</span>

julia<span class="pl-k">&gt;</span> w <span class="pl-k">=</span> <span class="pl-c1">FlexConvert</span>([<span class="pl-k">-</span><span class="pl-c1">3im</span>,<span class="pl-c1">5</span><span class="pl-k">+</span><span class="pl-c1">2im</span>])
FlexVector{Int64,Complex{Int64}}<span class="pl-k">:</span>
  <span class="pl-c1">1</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">0</span> <span class="pl-k">-</span> <span class="pl-c1">3im</span>
  <span class="pl-c1">2</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">5</span> <span class="pl-k">+</span> <span class="pl-c1">2im</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">dot</span>(v,w)
<span class="pl-c1">22</span> <span class="pl-k">-</span> <span class="pl-c1">14im</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">dot</span>(w,v)
<span class="pl-c1">22</span> <span class="pl-k">+</span> <span class="pl-c1">14im</span></pre></div>
<h2><a id="user-content-the-flexmatrix" class="anchor" aria-hidden="true" href="#the-flexmatrix"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>The <code>FlexMatrix</code></h2>
<p>A <code>FlexMatrix</code> is the 2-dimensional analogue of a <code>FlexVector</code>. Important
functions include:</p>
<ul>
<li>Arithmetic: Addition, subtraction, and multiplication (scalar, matrix-matrix,
and matrix-vector).</li>
<li>Indexing: Usual <code>A[i,j]</code> notation. Also see <code>row_keys</code> and <code>col_keys</code>
to get a list for the row/column names.</li>
<li><code>FlexConvert</code> to convert a Julia matrix into a <code>FlexMatrix</code>.</li>
<li><code>Matrix(A)</code> to convert a <code>FlexMatrix</code> <code>A</code> into a Julia matrix.</li>
<li><code>delete_row!(A,r)</code> and <code>delete_col!(A,c)</code> are used to delete the line of
<code>A</code> specified.</li>
</ul>
<p>Note that assigning to a matrix <code>A[i,j]=x</code> will not fail. The set of row and
column names will simply be expanded and extra slots filled with zeros.</p>
<hr>
<p>Can't seem to get <code>.*</code> multiplication working.</p>
</article></div>