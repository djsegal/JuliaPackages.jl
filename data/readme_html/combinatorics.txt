<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-combinatorics" class="anchor" aria-hidden="true" href="#combinatorics"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Combinatorics</h1>
<p><a href="https://travis-ci.org/JuliaMath/Combinatorics.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/e378a32eec6bb2a4ffde058343faddda57b7e5d2f98298462ef1b14c9d0f47b1/68747470733a2f2f7472617669732d63692e6f72672f4a756c69614d6174682f436f6d62696e61746f726963732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaMath/Combinatorics.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/JuliaMath/Combinatorics.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/88d0bc4b5eea124c2412d89dc36ff324fcb67dced319e96c2b15a4e761e7b82a/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f4a756c69614d6174682f436f6d62696e61746f726963732e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/JuliaMath/Combinatorics.jl/badge.svg?branch=master" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/JuliaMath/Combinatorics.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/45f3dc9535e99ebbcef837ae497d4a070affa7e1a7047cd93cdbfda6dc731932/68747470733a2f2f636f6465636f762e696f2f67682f4a756c69614d6174682f436f6d62696e61746f726963732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/JuliaMath/Combinatorics.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p>A combinatorics library for Julia, focusing mostly (as of now) on enumerative
combinatorics and permutations.  As overflows are expected even for low values,
most of the functions always return <code>BigInt</code>, and are marked as such below.</p>
<p>This library provides the following functions:</p>
<ul>
<li><code>bellnum(n)</code>: returns the n-th Bell number; always returns a <code>BigInt</code>;</li>
<li><code>catalannum(n)</code>: returns the n-th Catalan number; always returns a <code>BigInt</code>;</li>
<li><code>lobbnum(m,n)</code>: returns the generalised Catalan number at <code>m</code> and <code>n</code>; always returns a <code>BigInt</code>;</li>
<li><code>narayana(n,k)</code>: returns the general Narayana number at any given <code>n</code> and <code>k</code>; always returns a <code>BigInt</code>;</li>
<li><code>combinations(a,n)</code>: returns all combinations of <code>n</code> elements of indexable object <code>a</code>;</li>
<li><code>combinations(a)</code>: returns combinations of all order by chaining calls to <code>combinations(a,n)</code>;</li>
<li><code>derangement(n)</code>/<code>subfactorial(n)</code>: returns the number of permutations of n with no fixed points; always returns a <code>BigInt</code>;</li>
<li><code>partialderangement(n, k)</code>: returns the number of permutations of n with exactly k fixed points; always returns a <code>BigInt</code>;</li>
<li><code>doublefactorial(n)</code>: returns the double factorial n!!; always returns a <code>BigInt</code>;</li>
<li><code>fibonaccinum(n)</code>: the n-th Fibonacci number; always returns a <code>BigInt</code>;</li>
<li><code>hyperfactorial(n)</code>: the n-th hyperfactorial, i.e. prod([i^i for i = 2:n]; always returns a <code>BigInt</code>;</li>
<li><code>integer_partitions(n)</code>: returns a <code>Vector{Int}</code> consisting of the partitions of the number <code>n</code>.</li>
<li><code>jacobisymbol(a,b)</code>: returns the Jacobi symbol (a/b);</li>
<li><code>lassallenum(n)</code>: returns the nth Lassalle number A<sub>n</sub> defined in <a href="http://arxiv.org/abs/1009.4225" rel="nofollow">arXiv:1009.4225</a> (<a href="http://oeis.org/A180874" rel="nofollow">OEIS A180874</a>); always returns a <code>BigInt</code>;</li>
<li><code>legendresymbol(a,p)</code>: returns the Legendre symbol (a/p);</li>
<li><code>lucasnum(n)</code>: the n-th Lucas number; always returns a <code>BigInt</code>;</li>
<li><code>multifactorial(n)</code>: returns the m-multifactorial n(!^m); always returns a <code>BigInt</code>;</li>
<li><code>multinomial(k...)</code>: receives a tuple of <code>k_1, ..., k_n</code> and calculates the multinomial coefficient <code>(n k)</code>, where <code>n = sum(k)</code>; returns a <code>BigInt</code> only if given a <code>BigInt</code>;</li>
<li><code>multiexponents(m,n)</code>: returns the exponents in the multinomial expansion (x₁ + x₂ + ... + xₘ)ⁿ;</li>
<li><code>primorial(n)</code>: returns the product of all positive prime numbers &lt;= n; always returns a <code>BigInt</code>;</li>
<li><code>stirlings1(n, k, signed=false)</code>: returns the <code>(n,k)</code>-th Stirling number of the first kind; the number is signed if <code>signed</code> is true; returns a <code>BigInt</code> only if given a <code>BigInt</code>.</li>
<li><code>stirlings2(n, k)</code>: returns the <code>(n,k)</code>-th Stirling number of the second kind; returns a <code>BigInt</code> only if given a <code>BigInt</code>.</li>
<li><code>nthperm(a, k)</code>: Compute the <code>k</code>th lexicographic permutation of the vector <code>a</code>.</li>
<li><code>permutations(a)</code>: Generate all permutations of an indexable object <code>a</code> in lexicographic order.</li>
</ul>
<h2><a id="user-content-young-diagrams" class="anchor" aria-hidden="true" href="#young-diagrams"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Young diagrams</h2>
<p>Limited support for working with Young diagrams is provided.</p>
<ul>
<li><code>partitionsequence(a)</code>: computes partition sequence for an integer partition <code>a</code></li>
<li><code>x = a \ b</code> creates the skew diagram for partitions (tuples) <code>a</code>, <code>b</code></li>
<li><code>isrimhook(x)</code>: checks if skew diagram <code>x</code> is a rim hook</li>
<li><code>leglength(x)</code>: computes leg length of rim hook <code>x</code></li>
<li><code>character(a, b)</code>: computes character the partition <code>b</code> in the <code>a</code>th irrep of Sn</li>
</ul>
</article></div>