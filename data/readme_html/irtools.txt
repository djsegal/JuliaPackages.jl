<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-irtools" class="anchor" aria-hidden="true" href="#irtools"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>IRTools</h1>
<p><a href="https://travis-ci.org/FluxML/IRTools.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/b7c43b11405532e711a20923dc781f894a973a075a3f92438b00dd97d4c4de95/68747470733a2f2f7472617669732d63692e6f72672f466c75784d4c2f4952546f6f6c732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/FluxML/IRTools.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://fluxml.github.io/IRTools.jl/latest/" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a></p>
<p>IRTools aims to provide a simple and flexible IR format, expressive enough to work with both lowered and typed Julia code, as well as external IRs. It can be used with Julia metaprogramming tools such as <a href="https://github.com/jrevels/Cassette.jl">Cassette</a>.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using IRTools

julia&gt; function pow(x, n) # A simple Julia function
         r = 1
         while n &gt; 0
           n -= 1
           r *= x
         end
         return r
       end

julia&gt; ir = @code_ir pow(1, 1) # Get its IR
1: (%1, %2, %3)
  br 2 (%3, 1)
2: (%4, %5)
  %6 = %4 &gt; 0
  br 4 unless %6
  br 3
3:
  %7 = %4 - 1
  %8 = %5 * %2
  br 2 (%7, %8)
4:
  return %5

julia&gt; using IRTools: var, xcall

julia&gt; ir[var(8)] = xcall(:+, var(5), var(2)) # Tweak it
:(%5 + %2)

julia&gt; ir
1: (%1, %2, %3)
  br 2 (%3, 1)
2: (%4, %5)
  %6 = %4 &gt; 0
  br 4 unless %6
  br 3
3:
  %7 = %4 - 1
  %8 = %5 + %2
  br 2 (%7, %8)
4:
  return %5

julia&gt; f = IRTools.func(ir); # Turn the new IR into a lambda

julia&gt; f(nothing, 10, 5)
51

julia&gt; @code_llvm f(nothing, 10, 5)
define i64 @&quot;julia_##399_17438&quot;(i64, i64) {
top:
     %2 = icmp slt i64 %1, 1
     %3 = mul i64 %1, %0
     %4 = add i64 %3, 1
     %value_phi1.lcssa = select i1 %2, i64 1, i64 %4
    ret i64 %value_phi1.lcssa
}
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> IRTools

julia<span class="pl-k">&gt;</span> <span class="pl-k">function</span> <span class="pl-en">pow</span>(x, n) <span class="pl-c"><span class="pl-c">#</span> A simple Julia function</span>
         r <span class="pl-k">=</span> <span class="pl-c1">1</span>
         <span class="pl-k">while</span> n <span class="pl-k">&gt;</span> <span class="pl-c1">0</span>
           n <span class="pl-k">-=</span> <span class="pl-c1">1</span>
           r <span class="pl-k">*=</span> x
         <span class="pl-k">end</span>
         <span class="pl-k">return</span> r
       <span class="pl-k">end</span>

julia<span class="pl-k">&gt;</span> ir <span class="pl-k">=</span> <span class="pl-c1">@code_ir</span> <span class="pl-c1">pow</span>(<span class="pl-c1">1</span>, <span class="pl-c1">1</span>) <span class="pl-c"><span class="pl-c">#</span> Get its IR</span>
<span class="pl-c1">1</span><span class="pl-k">:</span> (<span class="pl-k">%</span><span class="pl-c1">1</span>, <span class="pl-k">%</span><span class="pl-c1">2</span>, <span class="pl-k">%</span><span class="pl-c1">3</span>)
  br <span class="pl-c1">2</span> (<span class="pl-k">%</span><span class="pl-c1">3</span>, <span class="pl-c1">1</span>)
<span class="pl-c1">2</span><span class="pl-k">:</span> (<span class="pl-k">%</span><span class="pl-c1">4</span>, <span class="pl-k">%</span><span class="pl-c1">5</span>)
  <span class="pl-k">%</span><span class="pl-c1">6</span> <span class="pl-k">=</span> <span class="pl-k">%</span><span class="pl-c1">4</span> <span class="pl-k">&gt;</span> <span class="pl-c1">0</span>
  br <span class="pl-c1">4</span> unless <span class="pl-k">%</span><span class="pl-c1">6</span>
  br <span class="pl-c1">3</span>
<span class="pl-c1">3</span><span class="pl-k">:</span>
  <span class="pl-k">%</span><span class="pl-c1">7</span> <span class="pl-k">=</span> <span class="pl-k">%</span><span class="pl-c1">4</span> <span class="pl-k">-</span> <span class="pl-c1">1</span>
  <span class="pl-k">%</span><span class="pl-c1">8</span> <span class="pl-k">=</span> <span class="pl-k">%</span><span class="pl-c1">5</span> <span class="pl-k">*</span> <span class="pl-k">%</span><span class="pl-c1">2</span>
  br <span class="pl-c1">2</span> (<span class="pl-k">%</span><span class="pl-c1">7</span>, <span class="pl-k">%</span><span class="pl-c1">8</span>)
<span class="pl-c1">4</span><span class="pl-k">:</span>
  <span class="pl-k">return</span> <span class="pl-k">%</span><span class="pl-c1">5</span>

julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> IRTools<span class="pl-k">:</span> var, xcall

julia<span class="pl-k">&gt;</span> ir[<span class="pl-c1">var</span>(<span class="pl-c1">8</span>)] <span class="pl-k">=</span> <span class="pl-c1">xcall</span>(:<span class="pl-k">+</span>, <span class="pl-c1">var</span>(<span class="pl-c1">5</span>), <span class="pl-c1">var</span>(<span class="pl-c1">2</span>)) <span class="pl-c"><span class="pl-c">#</span> Tweak it</span>
:(<span class="pl-k">%</span><span class="pl-c1">5</span> <span class="pl-k">+</span> <span class="pl-k">%</span><span class="pl-c1">2</span>)

julia<span class="pl-k">&gt;</span> ir
<span class="pl-c1">1</span><span class="pl-k">:</span> (<span class="pl-k">%</span><span class="pl-c1">1</span>, <span class="pl-k">%</span><span class="pl-c1">2</span>, <span class="pl-k">%</span><span class="pl-c1">3</span>)
  br <span class="pl-c1">2</span> (<span class="pl-k">%</span><span class="pl-c1">3</span>, <span class="pl-c1">1</span>)
<span class="pl-c1">2</span><span class="pl-k">:</span> (<span class="pl-k">%</span><span class="pl-c1">4</span>, <span class="pl-k">%</span><span class="pl-c1">5</span>)
  <span class="pl-k">%</span><span class="pl-c1">6</span> <span class="pl-k">=</span> <span class="pl-k">%</span><span class="pl-c1">4</span> <span class="pl-k">&gt;</span> <span class="pl-c1">0</span>
  br <span class="pl-c1">4</span> unless <span class="pl-k">%</span><span class="pl-c1">6</span>
  br <span class="pl-c1">3</span>
<span class="pl-c1">3</span><span class="pl-k">:</span>
  <span class="pl-k">%</span><span class="pl-c1">7</span> <span class="pl-k">=</span> <span class="pl-k">%</span><span class="pl-c1">4</span> <span class="pl-k">-</span> <span class="pl-c1">1</span>
  <span class="pl-k">%</span><span class="pl-c1">8</span> <span class="pl-k">=</span> <span class="pl-k">%</span><span class="pl-c1">5</span> <span class="pl-k">+</span> <span class="pl-k">%</span><span class="pl-c1">2</span>
  br <span class="pl-c1">2</span> (<span class="pl-k">%</span><span class="pl-c1">7</span>, <span class="pl-k">%</span><span class="pl-c1">8</span>)
<span class="pl-c1">4</span><span class="pl-k">:</span>
  <span class="pl-k">return</span> <span class="pl-k">%</span><span class="pl-c1">5</span>

julia<span class="pl-k">&gt;</span> f <span class="pl-k">=</span> IRTools<span class="pl-k">.</span><span class="pl-c1">func</span>(ir); <span class="pl-c"><span class="pl-c">#</span> Turn the new IR into a lambda</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">f</span>(<span class="pl-c1">nothing</span>, <span class="pl-c1">10</span>, <span class="pl-c1">5</span>)
<span class="pl-c1">51</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@code_llvm</span> <span class="pl-c1">f</span>(<span class="pl-c1">nothing</span>, <span class="pl-c1">10</span>, <span class="pl-c1">5</span>)
define i64 @<span class="pl-s"><span class="pl-pds">"</span>julia_##399_17438<span class="pl-pds">"</span></span>(i64, i64) {
top<span class="pl-k">:</span>
     <span class="pl-k">%</span><span class="pl-c1">2</span> <span class="pl-k">=</span> icmp slt i64 <span class="pl-k">%</span><span class="pl-c1">1</span>, <span class="pl-c1">1</span>
     <span class="pl-k">%</span><span class="pl-c1">3</span> <span class="pl-k">=</span> mul i64 <span class="pl-k">%</span><span class="pl-c1">1</span>, <span class="pl-k">%</span><span class="pl-c1">0</span>
     <span class="pl-k">%</span><span class="pl-c1">4</span> <span class="pl-k">=</span> add i64 <span class="pl-k">%</span><span class="pl-c1">3</span>, <span class="pl-c1">1</span>
     <span class="pl-k">%</span>value_phi1<span class="pl-k">.</span>lcssa <span class="pl-k">=</span> select i1 <span class="pl-k">%</span><span class="pl-c1">2</span>, i64 <span class="pl-c1">1</span>, i64 <span class="pl-k">%</span><span class="pl-c1">4</span>
    ret i64 <span class="pl-k">%</span>value_phi1<span class="pl-k">.</span>lcssa
}</pre></div>
</article></div>