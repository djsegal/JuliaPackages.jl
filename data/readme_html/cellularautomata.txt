<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p dir="auto"><a href="https://github.com/MartinuzziFrancesco/CellularAutomata.jl/actions?query=workflow%3ACI"><img src="https://github.com/MartinuzziFrancesco/CellularAutomata.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/MartinuzziFrancesco/CellularAutomata.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/61533f09d4ff0ef9f6390a7f89915be76023cb9971e64701d1ce9f02fbeb3b13/68747470733a2f2f636f6465636f762e696f2f67682f4d617274696e757a7a694672616e636573636f2f43656c6c756c61724175746f6d6174612e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="Codecov" data-canonical-src="https://codecov.io/gh/MartinuzziFrancesco/CellularAutomata.jl/coverage.svg?branch=master" style="max-width: 100%;"></a>
<a href="https://zenodo.org/badge/latestdoi/244027385" rel="nofollow"><img src="https://camo.githubusercontent.com/286a4496be592b0c0cf0ca8f51e610832de44cc4b4a891f5b22278a7435a92b5/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f3234343032373338352e737667" alt="DOI" data-canonical-src="https://zenodo.org/badge/244027385.svg" style="max-width: 100%;"></a></p>
<h1 dir="auto"><a id="user-content-cellularautomata" class="anchor" aria-hidden="true" href="#cellularautomata"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>CellularAutomata</h1>
<p dir="auto">Cellular automata creation and analysis tools</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">CellularAutomata.jl is registered on the general registry. For the installation follow:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using Pkg
julia&gt; Pkg.add(&quot;CellularAutomata&quot;)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Pkg
julia<span class="pl-k">&gt;</span> Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>CellularAutomata<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">or, if you prefer:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using Pkg
julia&gt; Pkg.add(&quot;https://github.com/MartinuzziFrancesco/CellularAutomata.jl&quot;)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Pkg
julia<span class="pl-k">&gt;</span> Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>https://github.com/MartinuzziFrancesco/CellularAutomata.jl<span class="pl-pds">"</span></span>)</pre></div>
<h2 dir="auto"><a id="user-content-discrete-cellular-automata" class="anchor" aria-hidden="true" href="#discrete-cellular-automata"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Discrete Cellular Automata</h2>
<p dir="auto">The package offers creation of all the cellular automata described in A New Kind of Science by Wolfram, and the rules for the creation are labelled as in the book.
We will recreate some of the examples that can be found in the <a href="http://atlas.wolfram.com/TOC/TOC_200.html" rel="nofollow">wolfram atlas</a> both for elementary and totalistic cellular automata.</p>
<h3 dir="auto"><a id="user-content-elementary-cellular-automata" class="anchor" aria-hidden="true" href="#elementary-cellular-automata"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Elementary Cellular Automata</h3>
<p dir="auto">Elementary Cellular Automata (ECA) have a radius of one and can be in only two possible states. Here we show a couple of examples:</p>
<p dir="auto"><a href="http://atlas.wolfram.com/01/01/18/" rel="nofollow">Rule 18</a></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using CellularAutomata, Plots

states = 2
radius = 1
generations = 50
ncells = 111
starting_val = zeros(Bool, ncells)
starting_val[Int(floor(ncells/2)+1)] = 1

rule = 18

ca = CellularAutomaton(DCA(rule), starting_val, generations)

heatmap(ca.evolution, 
    yflip=true, 
    c=cgrad([:white, :black]),
    legend = :none,
    axis=false,
    ticks=false)"><pre><span class="pl-k">using</span> CellularAutomata, Plots

states <span class="pl-k">=</span> <span class="pl-c1">2</span>
radius <span class="pl-k">=</span> <span class="pl-c1">1</span>
generations <span class="pl-k">=</span> <span class="pl-c1">50</span>
ncells <span class="pl-k">=</span> <span class="pl-c1">111</span>
starting_val <span class="pl-k">=</span> <span class="pl-c1">zeros</span>(Bool, ncells)
starting_val[<span class="pl-c1">Int</span>(<span class="pl-c1">floor</span>(ncells<span class="pl-k">/</span><span class="pl-c1">2</span>)<span class="pl-k">+</span><span class="pl-c1">1</span>)] <span class="pl-k">=</span> <span class="pl-c1">1</span>

rule <span class="pl-k">=</span> <span class="pl-c1">18</span>

ca <span class="pl-k">=</span> <span class="pl-c1">CellularAutomaton</span>(<span class="pl-c1">DCA</span>(rule), starting_val, generations)

<span class="pl-c1">heatmap</span>(ca<span class="pl-k">.</span>evolution, 
    yflip<span class="pl-k">=</span><span class="pl-c1">true</span>, 
    c<span class="pl-k">=</span><span class="pl-c1">cgrad</span>([<span class="pl-c1">:white</span>, <span class="pl-c1">:black</span>]),
    legend <span class="pl-k">=</span> <span class="pl-c1">:none</span>,
    axis<span class="pl-k">=</span><span class="pl-c1">false</span>,
    ticks<span class="pl-k">=</span><span class="pl-c1">false</span>)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://user-images.githubusercontent.com/10376688/75625854-4a816b00-5bc2-11ea-8337-9132553cd38b.png"><img src="https://user-images.githubusercontent.com/10376688/75625854-4a816b00-5bc2-11ea-8337-9132553cd38b.png" alt="dca18" style="max-width: 100%;"></a></p>
<p dir="auto"><a href="http://atlas.wolfram.com/01/01/30/" rel="nofollow">Rule 30</a></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using CellularAutomata, Plots

states = 2
radius = 1
generations = 50
ncells = 111
starting_val = zeros(Bool, ncells)
starting_val[Int(floor(ncells/2)+1)] = 1

rule = 30

ca = CellularAutomaton(DCA(rule), starting_val, generations)

heatmap(ca.evolution, 
    yflip=true, 
    c=cgrad([:white, :black]),
    legend = :none,
    axis=false,
    ticks=false)"><pre><span class="pl-k">using</span> CellularAutomata, Plots

states <span class="pl-k">=</span> <span class="pl-c1">2</span>
radius <span class="pl-k">=</span> <span class="pl-c1">1</span>
generations <span class="pl-k">=</span> <span class="pl-c1">50</span>
ncells <span class="pl-k">=</span> <span class="pl-c1">111</span>
starting_val <span class="pl-k">=</span> <span class="pl-c1">zeros</span>(Bool, ncells)
starting_val[<span class="pl-c1">Int</span>(<span class="pl-c1">floor</span>(ncells<span class="pl-k">/</span><span class="pl-c1">2</span>)<span class="pl-k">+</span><span class="pl-c1">1</span>)] <span class="pl-k">=</span> <span class="pl-c1">1</span>

rule <span class="pl-k">=</span> <span class="pl-c1">30</span>

ca <span class="pl-k">=</span> <span class="pl-c1">CellularAutomaton</span>(<span class="pl-c1">DCA</span>(rule), starting_val, generations)

<span class="pl-c1">heatmap</span>(ca<span class="pl-k">.</span>evolution, 
    yflip<span class="pl-k">=</span><span class="pl-c1">true</span>, 
    c<span class="pl-k">=</span><span class="pl-c1">cgrad</span>([<span class="pl-c1">:white</span>, <span class="pl-c1">:black</span>]),
    legend <span class="pl-k">=</span> <span class="pl-c1">:none</span>,
    axis<span class="pl-k">=</span><span class="pl-c1">false</span>,
    ticks<span class="pl-k">=</span><span class="pl-c1">false</span>)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://user-images.githubusercontent.com/10376688/75625882-874d6200-5bc2-11ea-904a-e6658aab8403.png"><img src="https://user-images.githubusercontent.com/10376688/75625882-874d6200-5bc2-11ea-904a-e6658aab8403.png" alt="dca30" style="max-width: 100%;"></a></p>
<h3 dir="auto"><a id="user-content-general-cellular-automata" class="anchor" aria-hidden="true" href="#general-cellular-automata"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>General Cellular Automata</h3>
<p dir="auto">General Cellular Automata have the same rule of ECA but they can have a radius larger than unity and/or a number of states greater than two. Here are provided examples for every possible permutation, starting with a Cellular Automaton with 3 states.</p>
<p dir="auto"><a href="https://www.wolframalpha.com/input/?i=rule+7%2C110%2C222%2C193%2C934+k%3D3&amp;lk=3" rel="nofollow">Rule 7110222193934</a></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using CellularAutomata, Plots

states = 3
radius = 1
generations = 50
ncells = 111
starting_val = zeros(ncells)
starting_val[Int(floor(ncells/2)+1)] = 2

rule = 7110222193934 

ca = CellularAutomaton(DCA(rule,states=states,radius=radius), 
                       starting_val, generations)

heatmap(ca.evolution, 
    yflip=true, 
    c=cgrad([:white, :black]),
    legend = :none,
    axis=false,
    ticks=false,
    size=(ncells*10, generations*10))"><pre><span class="pl-k">using</span> CellularAutomata, Plots

states <span class="pl-k">=</span> <span class="pl-c1">3</span>
radius <span class="pl-k">=</span> <span class="pl-c1">1</span>
generations <span class="pl-k">=</span> <span class="pl-c1">50</span>
ncells <span class="pl-k">=</span> <span class="pl-c1">111</span>
starting_val <span class="pl-k">=</span> <span class="pl-c1">zeros</span>(ncells)
starting_val[<span class="pl-c1">Int</span>(<span class="pl-c1">floor</span>(ncells<span class="pl-k">/</span><span class="pl-c1">2</span>)<span class="pl-k">+</span><span class="pl-c1">1</span>)] <span class="pl-k">=</span> <span class="pl-c1">2</span>

rule <span class="pl-k">=</span> <span class="pl-c1">7110222193934</span> 

ca <span class="pl-k">=</span> <span class="pl-c1">CellularAutomaton</span>(<span class="pl-c1">DCA</span>(rule,states<span class="pl-k">=</span>states,radius<span class="pl-k">=</span>radius), 
                       starting_val, generations)

<span class="pl-c1">heatmap</span>(ca<span class="pl-k">.</span>evolution, 
    yflip<span class="pl-k">=</span><span class="pl-c1">true</span>, 
    c<span class="pl-k">=</span><span class="pl-c1">cgrad</span>([<span class="pl-c1">:white</span>, <span class="pl-c1">:black</span>]),
    legend <span class="pl-k">=</span> <span class="pl-c1">:none</span>,
    axis<span class="pl-k">=</span><span class="pl-c1">false</span>,
    ticks<span class="pl-k">=</span><span class="pl-c1">false</span>,
    size<span class="pl-k">=</span>(ncells<span class="pl-k">*</span><span class="pl-c1">10</span>, generations<span class="pl-k">*</span><span class="pl-c1">10</span>))</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://user-images.githubusercontent.com/10376688/137601771-3ee335ab-4334-4250-9a48-679b206009be.png"><img src="https://user-images.githubusercontent.com/10376688/137601771-3ee335ab-4334-4250-9a48-679b206009be.png" alt="dca7110222193934" style="max-width: 100%;"></a></p>
<p dir="auto">The following examples shows a Cellular Automaton with radius=2, with two only possible states:</p>
<p dir="auto"><a href="https://www.wolframalpha.com/input/?i=rule+1%2C388%2C968%2C789+r%3D2&amp;lk=3" rel="nofollow">Rule 1388968789</a></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using CellularAutomata, Plots

states = 2
radius = 2
generations = 30
ncells = 111
starting_val = zeros(ncells)
starting_val[Int(floor(ncells/2)+1)] = 1

rule = 1388968789 

ca = CellularAutomaton(DCA(rule,states=states,radius=radius), 
                           starting_val, generations)

heatmap(ca.evolution, 
    yflip=true, 
    c=cgrad([:white, :black]),
    legend = :none,
    axis=false,
    ticks=false,
    size=(ncells*10, generations*10))"><pre><span class="pl-k">using</span> CellularAutomata, Plots

states <span class="pl-k">=</span> <span class="pl-c1">2</span>
radius <span class="pl-k">=</span> <span class="pl-c1">2</span>
generations <span class="pl-k">=</span> <span class="pl-c1">30</span>
ncells <span class="pl-k">=</span> <span class="pl-c1">111</span>
starting_val <span class="pl-k">=</span> <span class="pl-c1">zeros</span>(ncells)
starting_val[<span class="pl-c1">Int</span>(<span class="pl-c1">floor</span>(ncells<span class="pl-k">/</span><span class="pl-c1">2</span>)<span class="pl-k">+</span><span class="pl-c1">1</span>)] <span class="pl-k">=</span> <span class="pl-c1">1</span>

rule <span class="pl-k">=</span> <span class="pl-c1">1388968789</span> 

ca <span class="pl-k">=</span> <span class="pl-c1">CellularAutomaton</span>(<span class="pl-c1">DCA</span>(rule,states<span class="pl-k">=</span>states,radius<span class="pl-k">=</span>radius), 
                           starting_val, generations)

<span class="pl-c1">heatmap</span>(ca<span class="pl-k">.</span>evolution, 
    yflip<span class="pl-k">=</span><span class="pl-c1">true</span>, 
    c<span class="pl-k">=</span><span class="pl-c1">cgrad</span>([<span class="pl-c1">:white</span>, <span class="pl-c1">:black</span>]),
    legend <span class="pl-k">=</span> <span class="pl-c1">:none</span>,
    axis<span class="pl-k">=</span><span class="pl-c1">false</span>,
    ticks<span class="pl-k">=</span><span class="pl-c1">false</span>,
    size<span class="pl-k">=</span>(ncells<span class="pl-k">*</span><span class="pl-c1">10</span>, generations<span class="pl-k">*</span><span class="pl-c1">10</span>))</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://user-images.githubusercontent.com/10376688/137601749-3ccfe90d-b847-4401-93a5-076db48b5954.png"><img src="https://user-images.githubusercontent.com/10376688/137601749-3ccfe90d-b847-4401-93a5-076db48b5954.png" alt="dca1388968789" style="max-width: 100%;"></a></p>
<p dir="auto">And finally, three states with a radius equal to two:</p>
<p dir="auto"><a href="https://www.wolframalpha.com/input/?i=CA+k%3D3+r%3D2+rule+914752986721674989234787899872473589234512347899&amp;lk=3" rel="nofollow">Rule 914752986721674989234787899872473589234512347899</a></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using CellularAutomata, Plots

states = 3
radius = 2
generations = 30
ncells = 111
starting_val = zeros(ncells)
starting_val[Int(floor(ncells/2)+1)] = 2

rule = 914752986721674989234787899872473589234512347899 

ca = CellularAutomaton(DCA(rule,states=states,radius=radius), 
                       starting_val, generations)

heatmap(ca.evolution, 
    yflip=true, 
    c=cgrad([:white, :black]),
    legend = :none,
    axis=false,
    ticks=false,
    size=(ncells*10, generations*10))"><pre><span class="pl-k">using</span> CellularAutomata, Plots

states <span class="pl-k">=</span> <span class="pl-c1">3</span>
radius <span class="pl-k">=</span> <span class="pl-c1">2</span>
generations <span class="pl-k">=</span> <span class="pl-c1">30</span>
ncells <span class="pl-k">=</span> <span class="pl-c1">111</span>
starting_val <span class="pl-k">=</span> <span class="pl-c1">zeros</span>(ncells)
starting_val[<span class="pl-c1">Int</span>(<span class="pl-c1">floor</span>(ncells<span class="pl-k">/</span><span class="pl-c1">2</span>)<span class="pl-k">+</span><span class="pl-c1">1</span>)] <span class="pl-k">=</span> <span class="pl-c1">2</span>

rule <span class="pl-k">=</span> <span class="pl-c1">914752986721674989234787899872473589234512347899</span> 

ca <span class="pl-k">=</span> <span class="pl-c1">CellularAutomaton</span>(<span class="pl-c1">DCA</span>(rule,states<span class="pl-k">=</span>states,radius<span class="pl-k">=</span>radius), 
                       starting_val, generations)

<span class="pl-c1">heatmap</span>(ca<span class="pl-k">.</span>evolution, 
    yflip<span class="pl-k">=</span><span class="pl-c1">true</span>, 
    c<span class="pl-k">=</span><span class="pl-c1">cgrad</span>([<span class="pl-c1">:white</span>, <span class="pl-c1">:black</span>]),
    legend <span class="pl-k">=</span> <span class="pl-c1">:none</span>,
    axis<span class="pl-k">=</span><span class="pl-c1">false</span>,
    ticks<span class="pl-k">=</span><span class="pl-c1">false</span>,
    size<span class="pl-k">=</span>(ncells<span class="pl-k">*</span><span class="pl-c1">10</span>, generations<span class="pl-k">*</span><span class="pl-c1">10</span>))</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://user-images.githubusercontent.com/10376688/137601733-aabc0b7b-8769-474b-885a-1e9d90c62696.png"><img src="https://user-images.githubusercontent.com/10376688/137601733-aabc0b7b-8769-474b-885a-1e9d90c62696.png" alt="dca914752986721674989234787899872473589234512347899" style="max-width: 100%;"></a></p>
<p dir="auto">It is also possible to specify asymmetric neighborhoods, giving a tuple to the kwarg detailing the number of neighbors to considerate at the left and right of the cell:
<a href="https://www.wolframalpha.com/input/?i=radius+3%2F2+rule+1235&amp;lk=3" rel="nofollow">Rule 1235</a></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using CellularAutomata, Plots

states = 2
radius = (2,1)
generations = 30
ncells = 111
starting_val = zeros(ncells)
starting_val[Int(floor(ncells/2)+1)] = 1

rule = 1235 

ca = CellularAutomaton(DCA(rule,states=states,radius=radius), 
                       starting_val, generations)

heatmap(ca.evolution, 
    yflip=true, 
    c=cgrad([:white, :black]),
    legend = :none,
    axis=false,
    ticks=false,
    size=(ncells*10, generations*10))"><pre><span class="pl-k">using</span> CellularAutomata, Plots

states <span class="pl-k">=</span> <span class="pl-c1">2</span>
radius <span class="pl-k">=</span> (<span class="pl-c1">2</span>,<span class="pl-c1">1</span>)
generations <span class="pl-k">=</span> <span class="pl-c1">30</span>
ncells <span class="pl-k">=</span> <span class="pl-c1">111</span>
starting_val <span class="pl-k">=</span> <span class="pl-c1">zeros</span>(ncells)
starting_val[<span class="pl-c1">Int</span>(<span class="pl-c1">floor</span>(ncells<span class="pl-k">/</span><span class="pl-c1">2</span>)<span class="pl-k">+</span><span class="pl-c1">1</span>)] <span class="pl-k">=</span> <span class="pl-c1">1</span>

rule <span class="pl-k">=</span> <span class="pl-c1">1235</span> 

ca <span class="pl-k">=</span> <span class="pl-c1">CellularAutomaton</span>(<span class="pl-c1">DCA</span>(rule,states<span class="pl-k">=</span>states,radius<span class="pl-k">=</span>radius), 
                       starting_val, generations)

<span class="pl-c1">heatmap</span>(ca<span class="pl-k">.</span>evolution, 
    yflip<span class="pl-k">=</span><span class="pl-c1">true</span>, 
    c<span class="pl-k">=</span><span class="pl-c1">cgrad</span>([<span class="pl-c1">:white</span>, <span class="pl-c1">:black</span>]),
    legend <span class="pl-k">=</span> <span class="pl-c1">:none</span>,
    axis<span class="pl-k">=</span><span class="pl-c1">false</span>,
    ticks<span class="pl-k">=</span><span class="pl-c1">false</span>,
    size<span class="pl-k">=</span>(ncells<span class="pl-k">*</span><span class="pl-c1">10</span>, generations<span class="pl-k">*</span><span class="pl-c1">10</span>))</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://user-images.githubusercontent.com/10376688/137601708-7f204735-eba0-4b83-8b65-cc4d0ceb0fb6.png"><img src="https://user-images.githubusercontent.com/10376688/137601708-7f204735-eba0-4b83-8b65-cc4d0ceb0fb6.png" alt="dca1235" style="max-width: 100%;"></a></p>
<h3 dir="auto"><a id="user-content-totalistic-cellular-automata" class="anchor" aria-hidden="true" href="#totalistic-cellular-automata"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Totalistic Cellular Automata</h3>
<p dir="auto">Totalistic Cellular Automata takes the sum of the neighborhood to calculate the value of the next step.</p>
<p dir="auto"><a href="http://atlas.wolfram.com/01/02/1635/" rel="nofollow">Rule 1635</a></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using CellularAutomata, Plots

states = 3
radius = 1
generations = 50
ncells = 111
starting_val = zeros(Integer, ncells)
starting_val[Int(floor(ncells/2)+1)] = 1

rule = 1635

ca = CellularAutomaton(DCA(rule, states=states), 
                       starting_val, generations)

heatmap(ca.evolution, 
    yflip=true, 
    c=cgrad([:white, :black]),
    legend = :none,
    axis=false,
    ticks=false)"><pre><span class="pl-k">using</span> CellularAutomata, Plots

states <span class="pl-k">=</span> <span class="pl-c1">3</span>
radius <span class="pl-k">=</span> <span class="pl-c1">1</span>
generations <span class="pl-k">=</span> <span class="pl-c1">50</span>
ncells <span class="pl-k">=</span> <span class="pl-c1">111</span>
starting_val <span class="pl-k">=</span> <span class="pl-c1">zeros</span>(Integer, ncells)
starting_val[<span class="pl-c1">Int</span>(<span class="pl-c1">floor</span>(ncells<span class="pl-k">/</span><span class="pl-c1">2</span>)<span class="pl-k">+</span><span class="pl-c1">1</span>)] <span class="pl-k">=</span> <span class="pl-c1">1</span>

rule <span class="pl-k">=</span> <span class="pl-c1">1635</span>

ca <span class="pl-k">=</span> <span class="pl-c1">CellularAutomaton</span>(<span class="pl-c1">DCA</span>(rule, states<span class="pl-k">=</span>states), 
                       starting_val, generations)

<span class="pl-c1">heatmap</span>(ca<span class="pl-k">.</span>evolution, 
    yflip<span class="pl-k">=</span><span class="pl-c1">true</span>, 
    c<span class="pl-k">=</span><span class="pl-c1">cgrad</span>([<span class="pl-c1">:white</span>, <span class="pl-c1">:black</span>]),
    legend <span class="pl-k">=</span> <span class="pl-c1">:none</span>,
    axis<span class="pl-k">=</span><span class="pl-c1">false</span>,
    ticks<span class="pl-k">=</span><span class="pl-c1">false</span>)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://user-images.githubusercontent.com/10376688/75628258-7eb35680-5bd7-11ea-81c5-b95b25f1369d.png"><img src="https://user-images.githubusercontent.com/10376688/75628258-7eb35680-5bd7-11ea-81c5-b95b25f1369d.png" alt="dca1635" style="max-width: 100%;"></a></p>
<p dir="auto"><a href="http://atlas.wolfram.com/01/03/107398/" rel="nofollow">Rule 107398</a></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using CellularAutomata, Plots

states = 4
radius = 1
generations = 50
ncells = 111
starting_val = zeros(Integer, ncells)
starting_val[Int(floor(ncells/2)+1)] = 1

rule = 107398

ca = CellularAutomaton(DCA(rule, states=states), 
                       starting_val, generations)

heatmap(ca.evolution, 
    yflip=true, 
    c=cgrad([:white, :black]),
    legend = :none,
    axis=false,
    ticks=false)"><pre><span class="pl-k">using</span> CellularAutomata, Plots

states <span class="pl-k">=</span> <span class="pl-c1">4</span>
radius <span class="pl-k">=</span> <span class="pl-c1">1</span>
generations <span class="pl-k">=</span> <span class="pl-c1">50</span>
ncells <span class="pl-k">=</span> <span class="pl-c1">111</span>
starting_val <span class="pl-k">=</span> <span class="pl-c1">zeros</span>(Integer, ncells)
starting_val[<span class="pl-c1">Int</span>(<span class="pl-c1">floor</span>(ncells<span class="pl-k">/</span><span class="pl-c1">2</span>)<span class="pl-k">+</span><span class="pl-c1">1</span>)] <span class="pl-k">=</span> <span class="pl-c1">1</span>

rule <span class="pl-k">=</span> <span class="pl-c1">107398</span>

ca <span class="pl-k">=</span> <span class="pl-c1">CellularAutomaton</span>(<span class="pl-c1">DCA</span>(rule, states<span class="pl-k">=</span>states), 
                       starting_val, generations)

<span class="pl-c1">heatmap</span>(ca<span class="pl-k">.</span>evolution, 
    yflip<span class="pl-k">=</span><span class="pl-c1">true</span>, 
    c<span class="pl-k">=</span><span class="pl-c1">cgrad</span>([<span class="pl-c1">:white</span>, <span class="pl-c1">:black</span>]),
    legend <span class="pl-k">=</span> <span class="pl-c1">:none</span>,
    axis<span class="pl-k">=</span><span class="pl-c1">false</span>,
    ticks<span class="pl-k">=</span><span class="pl-c1">false</span>)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://user-images.githubusercontent.com/10376688/75628292-cd60f080-5bd7-11ea-93c7-66277b0b6bd6.png"><img src="https://user-images.githubusercontent.com/10376688/75628292-cd60f080-5bd7-11ea-93c7-66277b0b6bd6.png" alt="dca107398" style="max-width: 100%;"></a></p>
<p dir="auto">Here are some results for a bigger radius, using a radius of 2 as an example.</p>
<p dir="auto"><a href="http://atlas.wolfram.com/01/06/Rules/53/index.html#01_06_9_53" rel="nofollow">Rule 53</a></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using CellularAutomata, Plots

states = 2
radius = 2
generations = 50
ncells = 111
starting_val = zeros(Integer, ncells)
starting_val[Int(floor(ncells/2)+1)] = 1

rule = 53

ca = CellularAutomaton(DCA(rule, radius=radius), 
                           starting_val, generations)

heatmap(ca.evolution, 
    yflip=true, 
    c=cgrad([:white, :black]),
    legend = :none,
    axis=false,
    ticks=false)"><pre><span class="pl-k">using</span> CellularAutomata, Plots

states <span class="pl-k">=</span> <span class="pl-c1">2</span>
radius <span class="pl-k">=</span> <span class="pl-c1">2</span>
generations <span class="pl-k">=</span> <span class="pl-c1">50</span>
ncells <span class="pl-k">=</span> <span class="pl-c1">111</span>
starting_val <span class="pl-k">=</span> <span class="pl-c1">zeros</span>(Integer, ncells)
starting_val[<span class="pl-c1">Int</span>(<span class="pl-c1">floor</span>(ncells<span class="pl-k">/</span><span class="pl-c1">2</span>)<span class="pl-k">+</span><span class="pl-c1">1</span>)] <span class="pl-k">=</span> <span class="pl-c1">1</span>

rule <span class="pl-k">=</span> <span class="pl-c1">53</span>

ca <span class="pl-k">=</span> <span class="pl-c1">CellularAutomaton</span>(<span class="pl-c1">DCA</span>(rule, radius<span class="pl-k">=</span>radius), 
                           starting_val, generations)

<span class="pl-c1">heatmap</span>(ca<span class="pl-k">.</span>evolution, 
    yflip<span class="pl-k">=</span><span class="pl-c1">true</span>, 
    c<span class="pl-k">=</span><span class="pl-c1">cgrad</span>([<span class="pl-c1">:white</span>, <span class="pl-c1">:black</span>]),
    legend <span class="pl-k">=</span> <span class="pl-c1">:none</span>,
    axis<span class="pl-k">=</span><span class="pl-c1">false</span>,
    ticks<span class="pl-k">=</span><span class="pl-c1">false</span>)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://user-images.githubusercontent.com/10376688/136658595-0c860395-9a0d-4df2-ac4d-2ed85bd2927c.png"><img src="https://user-images.githubusercontent.com/10376688/136658595-0c860395-9a0d-4df2-ac4d-2ed85bd2927c.png" alt="dca53r2" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-continuous-cellular-automata" class="anchor" aria-hidden="true" href="#continuous-cellular-automata"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Continuous Cellular Automata</h2>
<p dir="auto">Continuous Cellular Automata work in the same way as the totalistic but with real values. The examples are taken from the already mentioned book <a href="https://www.wolframscience.com/nks/p159--continuous-cellular-automata/" rel="nofollow">NKS</a>.</p>
<p dir="auto">Rule 0.025</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using CellularAutomata, Plots

generations = 50
ncells = 111
starting_val = zeros(Float64, ncells)
starting_val[Int(floor(ncells/2)+1)] = 1.0

rule = 0.025

ca = CellularAutomaton(CCA(rule), starting_val, generations)

heatmap(ca.evolution, 
    yflip=true, 
    c=cgrad([:white, :black]),
    legend = :none,
    axis=false,
    ticks=false)"><pre><span class="pl-k">using</span> CellularAutomata, Plots

generations <span class="pl-k">=</span> <span class="pl-c1">50</span>
ncells <span class="pl-k">=</span> <span class="pl-c1">111</span>
starting_val <span class="pl-k">=</span> <span class="pl-c1">zeros</span>(Float64, ncells)
starting_val[<span class="pl-c1">Int</span>(<span class="pl-c1">floor</span>(ncells<span class="pl-k">/</span><span class="pl-c1">2</span>)<span class="pl-k">+</span><span class="pl-c1">1</span>)] <span class="pl-k">=</span> <span class="pl-c1">1.0</span>

rule <span class="pl-k">=</span> <span class="pl-c1">0.025</span>

ca <span class="pl-k">=</span> <span class="pl-c1">CellularAutomaton</span>(<span class="pl-c1">CCA</span>(rule), starting_val, generations)

<span class="pl-c1">heatmap</span>(ca<span class="pl-k">.</span>evolution, 
    yflip<span class="pl-k">=</span><span class="pl-c1">true</span>, 
    c<span class="pl-k">=</span><span class="pl-c1">cgrad</span>([<span class="pl-c1">:white</span>, <span class="pl-c1">:black</span>]),
    legend <span class="pl-k">=</span> <span class="pl-c1">:none</span>,
    axis<span class="pl-k">=</span><span class="pl-c1">false</span>,
    ticks<span class="pl-k">=</span><span class="pl-c1">false</span>)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://user-images.githubusercontent.com/10376688/75628344-5f68f900-5bd8-11ea-8941-892c14036f37.png"><img src="https://user-images.githubusercontent.com/10376688/75628344-5f68f900-5bd8-11ea-8941-892c14036f37.png" alt="cca0025" style="max-width: 100%;"></a></p>
<p dir="auto">Rule 0.2</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using CellularAutomata, Plots

radius = 1
generations = 50
ncells = 111
starting_val = zeros(Float64, ncells)
starting_val[Int(floor(ncells/2)+1)] = 1.0

rule = 0.2

ca = CellularAutomaton(CCA(rule, radius=radius), 
                       starting_val, generations)

heatmap(ca.evolution, 
    yflip=true, 
    c=cgrad([:white, :black]),
    legend = :none,
    axis=false,
    ticks=false)"><pre><span class="pl-k">using</span> CellularAutomata, Plots

radius <span class="pl-k">=</span> <span class="pl-c1">1</span>
generations <span class="pl-k">=</span> <span class="pl-c1">50</span>
ncells <span class="pl-k">=</span> <span class="pl-c1">111</span>
starting_val <span class="pl-k">=</span> <span class="pl-c1">zeros</span>(Float64, ncells)
starting_val[<span class="pl-c1">Int</span>(<span class="pl-c1">floor</span>(ncells<span class="pl-k">/</span><span class="pl-c1">2</span>)<span class="pl-k">+</span><span class="pl-c1">1</span>)] <span class="pl-k">=</span> <span class="pl-c1">1.0</span>

rule <span class="pl-k">=</span> <span class="pl-c1">0.2</span>

ca <span class="pl-k">=</span> <span class="pl-c1">CellularAutomaton</span>(<span class="pl-c1">CCA</span>(rule, radius<span class="pl-k">=</span>radius), 
                       starting_val, generations)

<span class="pl-c1">heatmap</span>(ca<span class="pl-k">.</span>evolution, 
    yflip<span class="pl-k">=</span><span class="pl-c1">true</span>, 
    c<span class="pl-k">=</span><span class="pl-c1">cgrad</span>([<span class="pl-c1">:white</span>, <span class="pl-c1">:black</span>]),
    legend <span class="pl-k">=</span> <span class="pl-c1">:none</span>,
    axis<span class="pl-k">=</span><span class="pl-c1">false</span>,
    ticks<span class="pl-k">=</span><span class="pl-c1">false</span>)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://user-images.githubusercontent.com/10376688/75628407-ed44e400-5bd8-11ea-95c4-d7a5a569923c.png"><img src="https://user-images.githubusercontent.com/10376688/75628407-ed44e400-5bd8-11ea-95c4-d7a5a569923c.png" alt="cca02" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-game-of-life" class="anchor" aria-hidden="true" href="#game-of-life"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Game of Life</h2>
<p dir="auto">This package can also reproduce Conway's Game of Life, and any variation based on it. The <code>Life()</code> function takes in a tuple containing the number of neighbors that will gave birth to a new cell, or that will make an existing cell survive. (For example in the Conways's Life the tuple (3, (2,3)) indicates having 3 live neighbors will give birth to an otherwise dead cell, and having either 2 or 3 lie neighbors will make an alive cell continue living.) The implementation follows the <a href="http://golly.sourceforge.net/Help/changes.html" rel="nofollow">Golly</a> notation.</p>
<p dir="auto">This script reproduces the famous glider:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using CellularAutomata, Plots

glider = [[0, 0, 1, 0, 0] [0, 0, 0, 1, 0] [0, 1, 1, 1, 0]]

space = zeros(Bool, 30, 30)
insert = 1
space[insert:insert+size(glider, 1)-1, insert:insert+size(glider, 2)-1] = glider
gens = 100
space_gliding = CellularAutomaton(Life((3, (2,3))), space, gens)

anim = @animate for i = 1:gens
    heatmap(space_gliding.evolution[:,:,i], 
    yflip=true, 
    c=cgrad([:white, :black]),
    legend = :none,
    size=(1080,1080),
    axis=false,
    ticks=false)
end
 
gif(anim, &quot;glider.gif&quot;, fps = 15)"><pre><span class="pl-k">using</span> CellularAutomata, Plots

glider <span class="pl-k">=</span> [[<span class="pl-c1">0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">1</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>] [<span class="pl-c1">0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">1</span>, <span class="pl-c1">0</span>] [<span class="pl-c1">0</span>, <span class="pl-c1">1</span>, <span class="pl-c1">1</span>, <span class="pl-c1">1</span>, <span class="pl-c1">0</span>]]

space <span class="pl-k">=</span> <span class="pl-c1">zeros</span>(Bool, <span class="pl-c1">30</span>, <span class="pl-c1">30</span>)
insert <span class="pl-k">=</span> <span class="pl-c1">1</span>
space[insert<span class="pl-k">:</span>insert<span class="pl-k">+</span><span class="pl-c1">size</span>(glider, <span class="pl-c1">1</span>)<span class="pl-k">-</span><span class="pl-c1">1</span>, insert<span class="pl-k">:</span>insert<span class="pl-k">+</span><span class="pl-c1">size</span>(glider, <span class="pl-c1">2</span>)<span class="pl-k">-</span><span class="pl-c1">1</span>] <span class="pl-k">=</span> glider
gens <span class="pl-k">=</span> <span class="pl-c1">100</span>
space_gliding <span class="pl-k">=</span> <span class="pl-c1">CellularAutomaton</span>(<span class="pl-c1">Life</span>((<span class="pl-c1">3</span>, (<span class="pl-c1">2</span>,<span class="pl-c1">3</span>))), space, gens)

anim <span class="pl-k">=</span> <span class="pl-c1">@animate</span> <span class="pl-k">for</span> i <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span>gens
    <span class="pl-c1">heatmap</span>(space_gliding<span class="pl-k">.</span>evolution[:,:,i], 
    yflip<span class="pl-k">=</span><span class="pl-c1">true</span>, 
    c<span class="pl-k">=</span><span class="pl-c1">cgrad</span>([<span class="pl-c1">:white</span>, <span class="pl-c1">:black</span>]),
    legend <span class="pl-k">=</span> <span class="pl-c1">:none</span>,
    size<span class="pl-k">=</span>(<span class="pl-c1">1080</span>,<span class="pl-c1">1080</span>),
    axis<span class="pl-k">=</span><span class="pl-c1">false</span>,
    ticks<span class="pl-k">=</span><span class="pl-c1">false</span>)
<span class="pl-k">end</span>
 
<span class="pl-c1">gif</span>(anim, <span class="pl-s"><span class="pl-pds">"</span>glider.gif<span class="pl-pds">"</span></span>, fps <span class="pl-k">=</span> <span class="pl-c1">15</span>)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://user-images.githubusercontent.com/10376688/137601901-97940211-f6e7-4ab1-9eee-325165000fd4.gif"><img src="https://user-images.githubusercontent.com/10376688/137601901-97940211-f6e7-4ab1-9eee-325165000fd4.gif" alt="glider" data-animated-image="" style="max-width: 100%;"></a></p>
</article></div>