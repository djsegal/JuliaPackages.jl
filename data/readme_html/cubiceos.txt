<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-cubiceosjl" class="anchor" aria-hidden="true" href="#cubiceosjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>CubicEoS.jl</h1>
<p dir="auto"><a href="https://github.com/invenia/BlueStyle"><img src="https://camo.githubusercontent.com/c18fbaa52d94d16b90b19701fc90d289b8a5bb920c74c79bab200b14e75420a4/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c75652d3434393564312e737667" alt="Code Style: Blue" data-canonical-src="https://img.shields.io/badge/code%20style-blue-4495d1.svg" style="max-width: 100%;"></a></p>
<p dir="auto">CubicEoS.jl is an extensible package for thermodynamic calculations. The package defines an abstract interface needed to implement an equation of state (EoS) and uses it to calculate NVT phase equilibrium.</p>
<p dir="auto">As an example of EoS, the package implements the general cubic equation of state [<a href="https://doi.org/10.2118/20180-PA" rel="nofollow">Brusilovsky, SPE Reservoir Engineering, February 1992</a>]. To implement an EoS you need, use <code>src/BrusilovskyEoS</code> submodule as a template.</p>
<p dir="auto">TODO: add links to other extensions: CPPCSAFT and MBWREoS.</p>
<p dir="auto">What CubicEoS.jl do provide?</p>
<ul dir="auto">
<li>Interface needed to solve NVT phase equilibrium problem;</li>
<li>NVT solvers: phase stability and phase split which
<ul dir="auto">
<li>Support automatic differentation;</li>
<li>Based on optimization: currently uses Cholesky BFGS with control of step from <strong><a href="https://github.com/vvpisarev/Downhill.jl">Downhill.jl</a></strong>;</li>
<li>Provide choice of internal variables for better scaling of a problem;</li>
</ul>
</li>
<li>Implementation of the general equation of state.</li>
</ul>
<p dir="auto">Most of implemented functions</p>
<ul dir="auto">
<li>are designed in a zero-allocating way, such functions has optional <code>buf</code> keyword;</li>
<li>has a desctructive option <code>func!</code>.</li>
</ul>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">The package registry is <strong><a href="https://github.com/stepanzh-test-org/LammpsToolsRegistry">LammpsToolsRegistry</a></strong>. So, you need to add the registry and then install CubicEoS.jl in a usual Julia-way.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="]pkg&gt; registry add https://github.com/stepanzh-test-org/LammpsToolsRegistry
pkg&gt; add CubicEoS"><pre>]pkg<span class="pl-k">&gt;</span> registry add https<span class="pl-k">:</span><span class="pl-k">//</span>github<span class="pl-k">.</span>com<span class="pl-k">/</span>stepanzh<span class="pl-k">-</span>test<span class="pl-k">-</span>org<span class="pl-k">/</span>LammpsToolsRegistry
pkg<span class="pl-k">&gt;</span> add CubicEoS</pre></div>
<h2 dir="auto"><a id="user-content-documentation" class="anchor" aria-hidden="true" href="#documentation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Documentation</h2>
<p dir="auto">Currently, only docstrings are provided. You may also take a look at tests with minimal working examples.</p>
<h2 dir="auto"><a id="user-content-brusilovsky-equation-of-state" class="anchor" aria-hidden="true" href="#brusilovsky-equation-of-state"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Brusilovsky equation of state</h2>
<p dir="auto">Components and mixtures may be constructed either explicitly or by loading.</p>
<p dir="auto">A <strong>component</strong> can be defined explicitly</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="BrusilovskyEoSComponent(; name=&quot;No Name&quot;, critical_pressure, critical_temperature, acentric_factor, Omegac, Zc, Psi, molar_mass, carbon_number::Integer)"><pre><span class="pl-c1">BrusilovskyEoSComponent</span>(; name<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>No Name<span class="pl-pds">"</span></span>, critical_pressure, critical_temperature, acentric_factor, Omegac, Zc, Psi, molar_mass, carbon_number<span class="pl-k">::</span><span class="pl-c1">Integer</span>)</pre></div>
<p dir="auto">where the values of parameters <code>Omegac</code>, <code>Zc</code> and <code>Psi</code> may be found in Brusilovsky's paper (<a href="https://doi.org/10.2118/20180-PA" rel="nofollow">https://doi.org/10.2118/20180-PA</a>).</p>
<p dir="auto">The temperatures must be in absolute scale (e.g., in Kelvins).</p>
<p dir="auto">Or, the component can be loaded from a file (using <strong><a href="https://github.com/stepanzh/CubicEoSDatabase.jl">CubicEoSDatabase.jl</a></strong>)</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="methane = CubicEoS.load(BrusilovskyEoSComponent; name=&quot;methane&quot;[, custom_databases...])"><pre>methane <span class="pl-k">=</span> CubicEoS<span class="pl-k">.</span><span class="pl-c1">load</span>(BrusilovskyEoSComponent; name<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>methane<span class="pl-pds">"</span></span>[, custom_databases<span class="pl-k">...</span>])</pre></div>
<p dir="auto">A <strong>mixture</strong> is constructed via</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="BrusilovskyEoSMixture(; components::AbstractVector{&lt;:BrusilovskyEoSComponent}, constant, linear, quadratic)"><pre><span class="pl-c1">BrusilovskyEoSMixture</span>(; components<span class="pl-k">::</span><span class="pl-c1">AbstractVector{&lt;:BrusilovskyEoSComponent}</span>, constant, linear, quadratic)</pre></div>
<p dir="auto">where <code>constant</code>, <code>linear</code> and <code>quadratic</code> are matrices of constant, linear and quadratic in temperature terms for Zudkevitch-Joffe corrections.</p>
<p dir="auto">Or can be loaded from a file (using <strong><a href="https://github.com/stepanzh/CubicEoSDatabase.jl">CubicEoSDatabase.jl</a></strong>):</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="c1c5 = CubicEoS.load(BrusilovskyEoSMixture; names=(&quot;methane&quot;, &quot;n-pentane&quot;)[, custom_databases...])"><pre>c1c5 <span class="pl-k">=</span> CubicEoS<span class="pl-k">.</span><span class="pl-c1">load</span>(BrusilovskyEoSMixture; names<span class="pl-k">=</span>(<span class="pl-s"><span class="pl-pds">"</span>methane<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>n-pentane<span class="pl-pds">"</span></span>)[, custom_databases<span class="pl-k">...</span>])</pre></div>
<h2 dir="auto"><a id="user-content-basic-thermodynamics" class="anchor" aria-hidden="true" href="#basic-thermodynamics"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Basic thermodynamics</h2>
<p dir="auto">Basic thermodynamics includes pressure, Wilson saturation pressure and z-factor (<code>compressibility</code>).</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="pressure(component or mixture, nmol, volume, temperature)"><pre><span class="pl-c1">pressure</span>(component or mixture, nmol, volume, temperature)</pre></div>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="wilson_saturation_pressure(component, RT)"><pre><span class="pl-c1">wilson_saturation_pressure</span>(component, RT)</pre></div>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="compressibility(mixture, nmol, pressure, RT, phase='g')"><pre><span class="pl-c1">compressibility</span>(mixture, nmol, pressure, RT, phase<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">'</span>g<span class="pl-pds">'</span></span>)</pre></div>
<h2 dir="auto"><a id="user-content-chemical-potential" class="anchor" aria-hidden="true" href="#chemical-potential"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Chemical potential</h2>
<p dir="auto">The packages includes functions for calculating activity coefficient and its Jacobian matrix for a mixture defined by Brusilovsky EoS.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="log_ca = log_c_activity(mixture, nmol, volume, RT)
log_ca, jac = log_c_activity_wj(mixture, nmol, volume, RT)"><pre>log_ca <span class="pl-k">=</span> <span class="pl-c1">log_c_activity</span>(mixture, nmol, volume, RT)
log_ca, jac <span class="pl-k">=</span> <span class="pl-c1">log_c_activity_wj</span>(mixture, nmol, volume, RT)</pre></div>
<p dir="auto">In case of a component you may use a mixture of one component.</p>
<h2 dir="auto"><a id="user-content-nvt-phase-equilibrium" class="anchor" aria-hidden="true" href="#nvt-phase-equilibrium"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>NVT phase equilibrium</h2>
<p dir="auto"><strong>Phase stability.</strong> To check if a single-phase state is stable, defined in NVT variables, use</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="issuccess, isstable, results = vt_stability(mix, nmol, volume, RT, StateVariables)"><pre>issuccess, isstable, results <span class="pl-k">=</span> <span class="pl-c1">vt_stability</span>(mix, nmol, volume, RT, StateVariables)</pre></div>
<p dir="auto"><strong>Phase split.</strong> To calculate NVT phase equilibrium use</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="result = vt_split(mix, nmol, volume, RT, trial_concentration, StateVariables)"><pre>result <span class="pl-k">=</span> <span class="pl-c1">vt_split</span>(mix, nmol, volume, RT, trial_concentration, StateVariables)</pre></div>
<p dir="auto">where type <code>StateVariables</code> defines an internal variables used at phase split stage in optimization solver (e.g. <code>CubicEoS.PhysicalState</code>). For the split <code>trial_concentration</code> is given from results of the stability.</p>
<p dir="auto">There are several options to control behavior of the solvers. Check docstrings of <code>vt_stability</code> and <code>vt_split</code> for overview.</p>
<h2 dir="auto"><a id="user-content-extensions-to-other-equations-of-state" class="anchor" aria-hidden="true" href="#extensions-to-other-equations-of-state"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Extensions to other equations of state</h2>
<p dir="auto">Currently, to implement an EoS you need, use <code>src/BrusilovskyEoS</code> submodule as a template (check functions that add methods to the main module, e.g. <code>CubicEoS.pressure</code>).</p>
<p dir="auto">Briefly speaking, the interface can be divided into servicing and physical categories. The servicing interface mostly requires getter-like functions. The physical interface requires minimal set of functions to compute pressure, activity coefficients and constraints on phases introducing by an EoS.</p>
<p dir="auto">Currently, there are several EoS under development:</p>
<p dir="auto">TODO: add links to other extensions: CPPCSAFT and MBWREoS.</p>
</article></div>