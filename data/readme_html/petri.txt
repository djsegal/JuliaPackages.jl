<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p><a target="_blank" rel="noopener noreferrer" href="docs/src/assets/full-logo.png"><img src="docs/src/assets/full-logo.png" alt="Petri.jl" style="max-width:100%;"></a></p>
<p><a href="https://mehalter.github.io/Petri.jl/stable/" rel="nofollow"><img src="https://github.com/mehalter/Petri.jl/workflows/Documentation/badge.svg" alt="Documentation" style="max-width:100%;"></a>
<a target="_blank" rel="noopener noreferrer" href="https://github.com/mehalter/Petri.jl/workflows/Tests/badge.svg"><img src="https://github.com/mehalter/Petri.jl/workflows/Tests/badge.svg" alt="Tests" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/mehalter/Petri.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/5cb49ea910abab3f94c1116eb465fab18770d69b788d830dcc7da3e612b717b3/68747470733a2f2f636f6465636f762e696f2f67682f6d6568616c7465722f50657472692e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/mehalter/Petri.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a>
<a href="https://zenodo.org/badge/latestdoi/203420191" rel="nofollow"><img src="https://camo.githubusercontent.com/dc306748b06ad26cfb335e04fa39d51d61a29de9ae5b428cd43a57a40cc6a8bf/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f3230333432303139312e737667" alt="DOI" data-canonical-src="https://zenodo.org/badge/203420191.svg" style="max-width:100%;"></a></p>
<p><code>Petri.jl</code> is a Petri net modeling framework for the Julia programming language.
<code>Petri</code> makes it easy to build complex reaction networks using a simple DSL.
Once a model is defined, <code>Petri.jl</code> has support to generate ODE solutions and
stochastic simulations using <code>DifferentialEquations.jl</code>. Examples and basic
usage can be found in the documentation.</p>
<h2><a id="user-content-goals" class="anchor" aria-hidden="true" href="#goals"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Goals</h2>
<p>This is related to the
<a href="https://github.com/JuliaDiffEq/DiffEqBiological.jl">DiffeqBiological</a> Reaction
DSL, but takes a different implementation approach. Instead of building our
framework around symbolic algebra and standard chemical notion, we are working
off the Applied Category Theory approach to reaction networks [<a href="http://math.ucr.edu/home/baez/RxNet.pdf" rel="nofollow">Baez Pollard, 2017</a>].</p>
<p>There are operations that are easy to do on the <code>Petri.Model</code> like "add a
transition from R to S" that require simultaneously changing multiple parts of
the algebraic formulation. Applied Category Theory gives a sound theoretical
framework for manipulating Petri Nets as a model in terms of the given domain.
<code>Petri</code> is a Julia package primarily intended to investigate how we can
operationalize this theory into practical scientific software.</p>
<p>See <a href="https://github.com/AlgebraicJulia/AlgebraicPetri.jl">AlgebraicPetri</a> for
tools that work with Petri net models and manipulating them with higher level
APIs based on Applied Category Theory.</p>
</article></div>