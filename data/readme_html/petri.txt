<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><p><a target="_blank" rel="noopener noreferrer" href="docs/src/assets/full-logo.png"><img src="docs/src/assets/full-logo.png" alt="Petri.jl" style="max-width:100%;"></a></p>
<p><a href="https://mehalter.github.io/Petri.jl/stable/" rel="nofollow"><img src="https://github.com/mehalter/Petri.jl/workflows/Documentation/badge.svg" alt="Documentation" style="max-width:100%;"></a>
<a target="_blank" rel="noopener noreferrer" href="https://github.com/mehalter/Petri.jl/workflows/Tests/badge.svg"><img src="https://github.com/mehalter/Petri.jl/workflows/Tests/badge.svg" alt="Tests" style="max-width:100%;"></a></p>
<p><code>Petri.jl</code> is a Petri net modeling framework for the Julia programming language.</p>
<h2><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Examples</h2>
<p>We need to include our dependencies. <code>Petri</code> is the only requirement to build the models. <code>OrdinaryDiffEq</code> is required for simulating the network with and ordinary differential equation. <code>Plots</code> can be used to plot the solutions generated by <code>OrdinaryDiffEq</code>. <code>LabelledArrays</code> can be used to make things more readable, but is not necessary. Lastly, <code>Catlab</code> is required for visualizing the models as graphviz diagrams.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> Petri
<span class="pl-k">using</span> LabelledArrays
<span class="pl-k">using</span> OrdinaryDiffEq
<span class="pl-k">using</span> Plots
<span class="pl-k">using</span> Catlab<span class="pl-k">.</span>Graphics<span class="pl-k">.</span>Graphiz
<span class="pl-k">import</span> Catlab<span class="pl-k">.</span>Graphics<span class="pl-k">.</span>Graphviz<span class="pl-k">:</span> Graph</pre></div>
<p>The SIR model represents the epidemiological dynamics of an infectious disease that causes immunity in its victims. There are three <em>states:</em> <code>Suceptible ,Infected, Recovered</code>. These states interact through two <em>transitions</em>. Infection has the form <code>S+I -&gt; 2I</code> where a susceptible person meets an infected person and results in two infected people. The second transition is recovery <code>I -&gt; R</code> where an infected person recovers spontaneously.</p>
<p><a target="_blank" rel="noopener noreferrer" href="/docs/src/img/sir_petri+ode.png?raw=true"><img src="/docs/src/img/sir_petri+ode.png?raw=true" alt="The SIR model system shown as a Petri net with ODE formulas" title="SIR Model" style="max-width:100%;"></a></p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span> define the structure of the model</span>
sir <span class="pl-k">=</span> Petri<span class="pl-k">.</span><span class="pl-c1">Model</span>([<span class="pl-c1">:S</span>,<span class="pl-c1">:I</span>,<span class="pl-c1">:R</span>],<span class="pl-c1">LVector</span>(
                                inf<span class="pl-k">=</span>(<span class="pl-c1">LVector</span>(S<span class="pl-k">=</span><span class="pl-c1">1</span>,I<span class="pl-k">=</span><span class="pl-c1">1</span>), <span class="pl-c1">LVector</span>(I<span class="pl-k">=</span><span class="pl-c1">2</span>)),
                                rec<span class="pl-k">=</span>(<span class="pl-c1">LVector</span>(I<span class="pl-k">=</span><span class="pl-c1">1</span>),     <span class="pl-c1">LVector</span>(R<span class="pl-k">=</span><span class="pl-c1">1</span>))))

<span class="pl-c"><span class="pl-c">#</span> define the initial conditions</span>
u0 <span class="pl-k">=</span> <span class="pl-c1">LVector</span>(S<span class="pl-k">=</span><span class="pl-c1">100.0</span>, I<span class="pl-k">=</span><span class="pl-c1">1</span>, R<span class="pl-k">=</span><span class="pl-c1">0</span>)

<span class="pl-c"><span class="pl-c">#</span> define the parameters of the model, each rate corresponds to a transition</span>
p <span class="pl-k">=</span> <span class="pl-c1">LVector</span>(inf<span class="pl-k">=</span><span class="pl-c1">0.05</span>, rec<span class="pl-k">=</span><span class="pl-c1">0.35</span>)

<span class="pl-c"><span class="pl-c">#</span> evaluate the expression to create a runnable function</span>
f <span class="pl-k">=</span> <span class="pl-c1">toODE</span>(sir)

<span class="pl-c"><span class="pl-c">#</span> this is regular OrdinaryDiffEq problem setup</span>
prob <span class="pl-k">=</span> <span class="pl-c1">ODEProblem</span>(f,u0,(<span class="pl-c1">0.0</span>,<span class="pl-c1">365.0</span>),p)
sol <span class="pl-k">=</span> OrdinaryDiffEq<span class="pl-k">.</span><span class="pl-c1">solve</span>(prob,<span class="pl-c1">Tsit5</span>())

<span class="pl-c"><span class="pl-c">#</span> generate a graphviz visualization of the model</span>
graph <span class="pl-k">=</span> <span class="pl-c1">Graph</span>(sir)

<span class="pl-c"><span class="pl-c">#</span> visualize the solution</span>
plt <span class="pl-k">=</span> <span class="pl-c1">plot</span>(sol)</pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="/docs/src/img/sir_sol.png?raw=true"><img src="/docs/src/img/sir_sol.png?raw=true" alt="A solution to the SIR model system" title="SIR Solution" style="max-width:100%;"></a></p>
<p>Petri Nets are a simple language for describing reaction networks, you can make increasingly complex diseases. For example the <code>SEIR</code> model has an <code>Exposed</code> phase where people have the disease, but are not infectious yet.</p>
<p><a target="_blank" rel="noopener noreferrer" href="/docs/src/img/seir.png?raw=true"><img src="/docs/src/img/seir.png?raw=true" alt="The SEIR model system shown as a Petri net" title="SEIR Model" style="max-width:100%;"></a></p>
<div class="highlight highlight-source-julia"><pre>seir <span class="pl-k">=</span> Petri<span class="pl-k">.</span><span class="pl-c1">Model</span>([<span class="pl-c1">:S</span>,<span class="pl-c1">:E</span>,<span class="pl-c1">:I</span>,<span class="pl-c1">:R</span>],<span class="pl-c1">LVector</span>(
                                    exp<span class="pl-k">=</span>(<span class="pl-c1">LVector</span>(S<span class="pl-k">=</span><span class="pl-c1">1</span>,I<span class="pl-k">=</span><span class="pl-c1">1</span>), <span class="pl-c1">LVector</span>(I<span class="pl-k">=</span><span class="pl-c1">1</span>,E<span class="pl-k">=</span><span class="pl-c1">1</span>)),
                                    inf<span class="pl-k">=</span>(<span class="pl-c1">LVector</span>(E<span class="pl-k">=</span><span class="pl-c1">1</span>),     <span class="pl-c1">LVector</span>(I<span class="pl-k">=</span><span class="pl-c1">1</span>)),
                                    rec<span class="pl-k">=</span>(<span class="pl-c1">LVector</span>(I<span class="pl-k">=</span><span class="pl-c1">1</span>),     <span class="pl-c1">LVector</span>(R<span class="pl-k">=</span><span class="pl-c1">1</span>))))
u0 <span class="pl-k">=</span> <span class="pl-c1">LVector</span>(S<span class="pl-k">=</span><span class="pl-c1">100.0</span>, E<span class="pl-k">=</span><span class="pl-c1">1</span>, I<span class="pl-k">=</span><span class="pl-c1">0</span>, R<span class="pl-k">=</span><span class="pl-c1">0</span>)
p <span class="pl-k">=</span> (exp<span class="pl-k">=</span><span class="pl-c1">0.35</span>, inf<span class="pl-k">=</span><span class="pl-c1">0.05</span>, rec<span class="pl-k">=</span><span class="pl-c1">0.05</span>)
f <span class="pl-k">=</span> <span class="pl-c1">toODE</span>(seir)
prob <span class="pl-k">=</span> <span class="pl-c1">ODEProblem</span>(f,u0,(<span class="pl-c1">0.0</span>,<span class="pl-c1">365.0</span>),p)
sol <span class="pl-k">=</span> OrdinaryDiffEq<span class="pl-k">.</span><span class="pl-c1">solve</span>(prob,<span class="pl-c1">Tsit5</span>())
plt <span class="pl-k">=</span> <span class="pl-c1">plot</span>(sol)</pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="/docs/src/img/seir_sol.png?raw=true"><img src="/docs/src/img/seir_sol.png?raw=true" alt="A solution to the SEIR model system" title="SEIR Solution" style="max-width:100%;"></a></p>
<p>The previous models have transitory behavior, the infection spreads and then terminates as you end up with no infected people in the population. The following <code>SEIRS</code> model has a non-trivial steady state, because recovered people lose their immunity and become susceptible again.</p>
<p><a target="_blank" rel="noopener noreferrer" href="/docs/src/img/seirs.png?raw=true"><img src="/docs/src/img/seirs.png?raw=true" alt="The SEIRS model system shown as a Petri net" title="SEIR Model" style="max-width:100%;"></a></p>
<div class="highlight highlight-source-julia"><pre>seirs <span class="pl-k">=</span> Petri<span class="pl-k">.</span><span class="pl-c1">Model</span>([<span class="pl-c1">:S</span>,<span class="pl-c1">:E</span>,<span class="pl-c1">:I</span>,<span class="pl-c1">:R</span>],<span class="pl-c1">LVector</span>(
                                    exp<span class="pl-k">=</span>(<span class="pl-c1">LVector</span>(S<span class="pl-k">=</span><span class="pl-c1">1</span>,I<span class="pl-k">=</span><span class="pl-c1">1</span>), <span class="pl-c1">LVector</span>(I<span class="pl-k">=</span><span class="pl-c1">1</span>,E<span class="pl-k">=</span><span class="pl-c1">1</span>)),
                                    inf<span class="pl-k">=</span>(<span class="pl-c1">LVector</span>(E<span class="pl-k">=</span><span class="pl-c1">1</span>),     <span class="pl-c1">LVector</span>(I<span class="pl-k">=</span><span class="pl-c1">1</span>)),
                                    rec<span class="pl-k">=</span>(<span class="pl-c1">LVector</span>(I<span class="pl-k">=</span><span class="pl-c1">1</span>),     <span class="pl-c1">LVector</span>(R<span class="pl-k">=</span><span class="pl-c1">1</span>)),
                                    deg<span class="pl-k">=</span>(<span class="pl-c1">LVector</span>(R<span class="pl-k">=</span><span class="pl-c1">1</span>),     <span class="pl-c1">LVector</span>(S<span class="pl-k">=</span><span class="pl-c1">1</span>))))
u0 <span class="pl-k">=</span> <span class="pl-c1">LVector</span>(S<span class="pl-k">=</span><span class="pl-c1">100.0</span>, E<span class="pl-k">=</span><span class="pl-c1">1</span>, I<span class="pl-k">=</span><span class="pl-c1">0</span>, R<span class="pl-k">=</span><span class="pl-c1">0</span>)
p <span class="pl-k">=</span> <span class="pl-c1">LVector</span>(exp<span class="pl-k">=</span><span class="pl-c1">0.35</span>, inf<span class="pl-k">=</span><span class="pl-c1">0.05</span>, rec<span class="pl-k">=</span><span class="pl-c1">0.07</span>, deg<span class="pl-k">=</span><span class="pl-c1">0.3</span>)
f <span class="pl-k">=</span> <span class="pl-c1">toODE</span>(seirs)
prob <span class="pl-k">=</span> <span class="pl-c1">ODEProblem</span>(f,u0,(<span class="pl-c1">0.0</span>,<span class="pl-c1">365.0</span>),p)
sol <span class="pl-k">=</span> OrdinaryDiffEq<span class="pl-k">.</span><span class="pl-c1">solve</span>(prob,<span class="pl-c1">Tsit5</span>())
plt <span class="pl-k">=</span> <span class="pl-c1">plot</span>(sol)</pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="/docs/src/img/seirs_sol.png?raw=true"><img src="/docs/src/img/seirs_sol.png?raw=true" alt="A solution to the SEIRS model system" title="SEIRS Solution" style="max-width:100%;"></a></p>
<h2><a id="user-content-goals" class="anchor" aria-hidden="true" href="#goals"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Goals</h2>
<p><code>Petri</code> makes it easy to build complex reaction networks using a simple DSL. This is related to the<a href="https://github.com/JuliaDiffEq/DiffEqBiological.jl" title="DiffEqBiological">DiffeqBiological</a> Reaction DSL, but takes a different implementation approach. Instead of building our framework around symbolic algebra and standard chemical notion, we are working off the Applied Category Theory approach to reaction networks [<a href="http://math.ucr.edu/home/baez/RxNet.pdf" title="baezpollard2017" rel="nofollow">Baez Pollard, 2017</a>].</p>
<p>There are operations that are easy to do on the <code>Petri.Model</code> like "add a transition from R to S" that require simultaneously changing multiple parts of the algebraic formulation. Applied Category Theory gives a sound theoretical framework for manipulating Petri Nets as a model of chemical reactions. <code>Petri</code> is a Julia package primarily intended to investigate how we can operationalize this theory into practical scientific software.</p>
<p>See <a href="https://github.com/jpfairbanks/SemanticModels.jl">SemanticModels</a> for tools that work with Petri net models and manipulating them with higher level APIs based on ACT.</p>
</article></div>