<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-excelfiles" class="anchor" aria-hidden="true" href="#excelfiles"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>ExcelFiles</h1>
<p><a href="http://www.repostatus.org/#active" rel="nofollow"><img src="https://camo.githubusercontent.com/31267b3e96ca20997396b88f7c44233710fcc637/687474703a2f2f7777772e7265706f7374617475732e6f72672f6261646765732f6c61746573742f6163746976652e737667" alt="Project Status: Active - The project has reached a stable, usable state and is being actively developed." data-canonical-src="http://www.repostatus.org/badges/latest/active.svg" style="max-width:100%;"></a>
<a href="https://travis-ci.org/queryverse/ExcelFiles.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/196bb8a92a69708ef089bb61b0b95ccbb8136476/68747470733a2f2f7472617669732d63692e6f72672f717565727976657273652f457863656c46696c65732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/queryverse/ExcelFiles.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/queryverse/excelfiles-jl/branch/master" rel="nofollow"><img src="https://camo.githubusercontent.com/950194bf9f2140f82d3805132e564a0f8bbba041/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f7766783561766a3073326d30783934772f6272616e63682f6d61737465723f7376673d74727565" alt="Build status" data-canonical-src="https://ci.appveyor.com/api/projects/status/wfx5avj0s2m0x94w/branch/master?svg=true" style="max-width:100%;"></a>
<a href="http://codecov.io/github/queryverse/ExcelFiles.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/b7680d6c6cd3d1be9475b7ebf0bb94169ca49ef1/687474703a2f2f636f6465636f762e696f2f6769746875622f717565727976657273652f457863656c46696c65732e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/queryverse/ExcelFiles.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
<h2><a id="user-content-overview" class="anchor" aria-hidden="true" href="#overview"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Overview</h2>
<p>This package provides load support for Excel files under the
<a href="https://github.com/JuliaIO/FileIO.jl">FileIO.jl</a> package.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Installation</h2>
<p>Use <code>Pkg.add("ExcelFiles")</code> in Julia to install ExcelFiles and its dependencies.</p>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Usage</h2>
<h3><a id="user-content-load-an-excel-file" class="anchor" aria-hidden="true" href="#load-an-excel-file"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Load an Excel file</h3>
<p>To read a Excel file into a <code>DataFrame</code>, use the following julia code:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> ExcelFiles, DataFrames

df <span class="pl-k">=</span> <span class="pl-c1">DataFrame</span>(<span class="pl-c1">load</span>(<span class="pl-s"><span class="pl-pds">"</span>data.xlsx<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Sheet1<span class="pl-pds">"</span></span>))</pre></div>
<p>The call to <code>load</code> returns a <code>struct</code> that is an <a href="https://github.com/queryverse/IterableTables.jl">IterableTable.jl</a>, so it can be passed to any function that can handle iterable tables, i.e. all the sinks in <a href="https://github.com/queryverse/IterableTables.jl">IterableTable.jl</a>. Here are some examples of materializing an Excel file into data structures that are not a <code>DataFrame</code>:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> ExcelFiles, DataTables, IndexedTables, TimeSeries, Temporal, Gadfly

<span class="pl-c"><span class="pl-c">#</span> Load into a DataTable</span>
dt <span class="pl-k">=</span> <span class="pl-c1">DataTable</span>(<span class="pl-c1">load</span>(<span class="pl-s"><span class="pl-pds">"</span>data.xlsx<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Sheet1<span class="pl-pds">"</span></span>))

<span class="pl-c"><span class="pl-c">#</span> Load into an IndexedTable</span>
it <span class="pl-k">=</span> <span class="pl-c1">IndexedTable</span>(<span class="pl-c1">load</span>(<span class="pl-s"><span class="pl-pds">"</span>data.xlsx<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Sheet1<span class="pl-pds">"</span></span>))

<span class="pl-c"><span class="pl-c">#</span> Load into a TimeArray</span>
ta <span class="pl-k">=</span> <span class="pl-c1">TimeArray</span>(<span class="pl-c1">load</span>(<span class="pl-s"><span class="pl-pds">"</span>data.xlsx<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Sheet1<span class="pl-pds">"</span></span>))

<span class="pl-c"><span class="pl-c">#</span> Load into a TS</span>
ts <span class="pl-k">=</span> <span class="pl-c1">TS</span>(<span class="pl-c1">load</span>(<span class="pl-s"><span class="pl-pds">"</span>data.xlsx<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Sheet1<span class="pl-pds">"</span></span>))

<span class="pl-c"><span class="pl-c">#</span> Plot directly with Gadfly</span>
<span class="pl-c1">plot</span>(<span class="pl-c1">load</span>(<span class="pl-s"><span class="pl-pds">"</span>data.xlsx<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Sheet1<span class="pl-pds">"</span></span>), x<span class="pl-k">=</span><span class="pl-c1">:a</span>, y<span class="pl-k">=</span><span class="pl-c1">:b</span>, Geom<span class="pl-k">.</span>line)</pre></div>
<p>The <code>load</code> function also takes a number of parameters:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">function</span> <span class="pl-en">load</span>(f<span class="pl-k">::</span><span class="pl-c1">FileIO.File{FileIO.format"Excel"}</span>, range; keywords<span class="pl-k">...</span>)</pre></div>
<h4><a id="user-content-arguments" class="anchor" aria-hidden="true" href="#arguments"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Arguments:</h4>
<ul>
<li><code>range</code>: either the name of the sheet in the Excel file to read, or a full Excel range specification (i.e. "Sheetname!A1:B2").</li>
<li>The <code>keywords</code> arguments are the same as in <a href="https://github.com/queryverse/ExcelReaders.jl">ExcelReaders.jl</a> (which is used under the hood to read Excel files). When <code>range</code> is a sheet name, the keyword arguments for the <code>readxlsheet</code> function from ExcelReaders.jl apply, if <code>range</code> is a range specification, the keyword arguments for the <code>readxl</code> function apply.</li>
</ul>
<h3><a id="user-content-save-an-excel-file" class="anchor" aria-hidden="true" href="#save-an-excel-file"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Save an Excel file</h3>
<p>The following code saves any iterable table as an excel file:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> ExcelFiles

<span class="pl-c1">save</span>(<span class="pl-s"><span class="pl-pds">"</span>output.xlsx<span class="pl-pds">"</span></span>, it)</pre></div>
<p>This will work as long as it is any of the types supported as sources in IterableTables.jl.</p>
<h3><a id="user-content-using-the-pipe-syntax" class="anchor" aria-hidden="true" href="#using-the-pipe-syntax"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Using the pipe syntax</h3>
<p><code>load</code> also support the pipe syntax. For example, to load an Excel file into a <code>DataFrame</code>, one can use the following code:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> ExcelFiles, DataFrame

df <span class="pl-k">=</span> <span class="pl-c1">load</span>(<span class="pl-s"><span class="pl-pds">"</span>data.xlsx<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Sheet1<span class="pl-pds">"</span></span>) <span class="pl-k">|&gt;</span> DataFrame</pre></div>
<p>To save an iterable table, one can use the following form:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> ExcelFiles, DataFrame

df <span class="pl-k">=</span> <span class="pl-c"><span class="pl-c">#</span> Aquire a DataFrame somehow</span>

df <span class="pl-k">|&gt;</span> <span class="pl-c1">save</span>(<span class="pl-s"><span class="pl-pds">"</span>output.xlsx<span class="pl-pds">"</span></span>)</pre></div>
<p>The pipe syntax is especially useful when combining it with <a href="https://github.com/queryverse/Query.jl">Query.jl</a> queries, for example one can easily load an Excel file, pipe it into a query, then pipe it to the <code>save</code> function to store the results in a new file.</p>
</article></div>