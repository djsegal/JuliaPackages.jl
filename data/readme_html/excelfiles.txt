<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-excelfiles" class="anchor" aria-hidden="true" href="#excelfiles"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>ExcelFiles</h1>
<p dir="auto"><a href="http://www.repostatus.org/#active" rel="nofollow"><img src="https://camo.githubusercontent.com/ed51270ad41e2b842f9423b165977ac42f8498581be7c17c78818d1a45b834d5/687474703a2f2f7777772e7265706f7374617475732e6f72672f6261646765732f6c61746573742f6163746976652e737667" alt="Project Status: Active - The project has reached a stable, usable state and is being actively developed." data-canonical-src="http://www.repostatus.org/badges/latest/active.svg" style="max-width: 100%;"></a>
<a href="https://travis-ci.org/queryverse/ExcelFiles.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/28ee12bb19bb323bbbfc9f2daba36a25b6ded95a1479d3751408762f56ff5e7c/68747470733a2f2f7472617669732d63692e6f72672f717565727976657273652f457863656c46696c65732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/queryverse/ExcelFiles.jl.svg?branch=master" style="max-width: 100%;"></a>
<a href="https://ci.appveyor.com/project/queryverse/excelfiles-jl/branch/master" rel="nofollow"><img src="https://camo.githubusercontent.com/cafb67a8a5f3f7947ee7052dbbf984c2ffb25a2d43a04a38b87978109021b7bf/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f7766783561766a3073326d30783934772f6272616e63682f6d61737465723f7376673d74727565" alt="Build status" data-canonical-src="https://ci.appveyor.com/api/projects/status/wfx5avj0s2m0x94w/branch/master?svg=true" style="max-width: 100%;"></a>
<a href="http://codecov.io/github/queryverse/ExcelFiles.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/364a228014ba6302dbba3f1329ff056c3eeec5eaf07586ba1b6d62eb9ddb4c2a/687474703a2f2f636f6465636f762e696f2f6769746875622f717565727976657273652f457863656c46696c65732e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/queryverse/ExcelFiles.jl/coverage.svg?branch=master" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-overview" class="anchor" aria-hidden="true" href="#overview"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Overview</h2>
<p dir="auto">This package provides load support for Excel files under the
<a href="https://github.com/JuliaIO/FileIO.jl">FileIO.jl</a> package.</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">Use <code>Pkg.add("ExcelFiles")</code> in Julia to install ExcelFiles and its dependencies.</p>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<h3 dir="auto"><a id="user-content-load-an-excel-file" class="anchor" aria-hidden="true" href="#load-an-excel-file"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Load an Excel file</h3>
<p dir="auto">To read a Excel file into a <code>DataFrame</code>, use the following julia code:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using ExcelFiles, DataFrames

df = DataFrame(load(&quot;data.xlsx&quot;, &quot;Sheet1&quot;))"><pre><span class="pl-k">using</span> ExcelFiles, DataFrames

df <span class="pl-k">=</span> <span class="pl-c1">DataFrame</span>(<span class="pl-c1">load</span>(<span class="pl-s"><span class="pl-pds">"</span>data.xlsx<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Sheet1<span class="pl-pds">"</span></span>))</pre></div>
<p dir="auto">The call to <code>load</code> returns a <code>struct</code> that is an <a href="https://github.com/queryverse/IterableTables.jl">IterableTable.jl</a>, so it can be passed to any function that can handle iterable tables, i.e. all the sinks in <a href="https://github.com/queryverse/IterableTables.jl">IterableTable.jl</a>. Here are some examples of materializing an Excel file into data structures that are not a <code>DataFrame</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using ExcelFiles, DataTables, IndexedTables, TimeSeries, Temporal, Gadfly

# Load into a DataTable
dt = DataTable(load(&quot;data.xlsx&quot;, &quot;Sheet1&quot;))

# Load into an IndexedTable
it = IndexedTable(load(&quot;data.xlsx&quot;, &quot;Sheet1&quot;))

# Load into a TimeArray
ta = TimeArray(load(&quot;data.xlsx&quot;, &quot;Sheet1&quot;))

# Load into a TS
ts = TS(load(&quot;data.xlsx&quot;, &quot;Sheet1&quot;))

# Plot directly with Gadfly
plot(load(&quot;data.xlsx&quot;, &quot;Sheet1&quot;), x=:a, y=:b, Geom.line)"><pre><span class="pl-k">using</span> ExcelFiles, DataTables, IndexedTables, TimeSeries, Temporal, Gadfly

<span class="pl-c"><span class="pl-c">#</span> Load into a DataTable</span>
dt <span class="pl-k">=</span> <span class="pl-c1">DataTable</span>(<span class="pl-c1">load</span>(<span class="pl-s"><span class="pl-pds">"</span>data.xlsx<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Sheet1<span class="pl-pds">"</span></span>))

<span class="pl-c"><span class="pl-c">#</span> Load into an IndexedTable</span>
it <span class="pl-k">=</span> <span class="pl-c1">IndexedTable</span>(<span class="pl-c1">load</span>(<span class="pl-s"><span class="pl-pds">"</span>data.xlsx<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Sheet1<span class="pl-pds">"</span></span>))

<span class="pl-c"><span class="pl-c">#</span> Load into a TimeArray</span>
ta <span class="pl-k">=</span> <span class="pl-c1">TimeArray</span>(<span class="pl-c1">load</span>(<span class="pl-s"><span class="pl-pds">"</span>data.xlsx<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Sheet1<span class="pl-pds">"</span></span>))

<span class="pl-c"><span class="pl-c">#</span> Load into a TS</span>
ts <span class="pl-k">=</span> <span class="pl-c1">TS</span>(<span class="pl-c1">load</span>(<span class="pl-s"><span class="pl-pds">"</span>data.xlsx<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Sheet1<span class="pl-pds">"</span></span>))

<span class="pl-c"><span class="pl-c">#</span> Plot directly with Gadfly</span>
<span class="pl-c1">plot</span>(<span class="pl-c1">load</span>(<span class="pl-s"><span class="pl-pds">"</span>data.xlsx<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Sheet1<span class="pl-pds">"</span></span>), x<span class="pl-k">=</span><span class="pl-c1">:a</span>, y<span class="pl-k">=</span><span class="pl-c1">:b</span>, Geom<span class="pl-k">.</span>line)</pre></div>
<p dir="auto">The <code>load</code> function also takes a number of parameters:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="function load(f::FileIO.File{FileIO.format&quot;Excel&quot;}, range; keywords...)"><pre><span class="pl-k">function</span> <span class="pl-en">load</span>(f<span class="pl-k">::</span><span class="pl-c1">FileIO.File{FileIO.format"Excel"}</span>, range; keywords<span class="pl-k">...</span>)</pre></div>
<h4 dir="auto"><a id="user-content-arguments" class="anchor" aria-hidden="true" href="#arguments"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Arguments:</h4>
<ul dir="auto">
<li><code>range</code>: either the name of the sheet in the Excel file to read, or a full Excel range specification (i.e. "Sheetname!A1:B2").</li>
<li>The <code>keywords</code> arguments are the same as in <a href="https://github.com/queryverse/ExcelReaders.jl">ExcelReaders.jl</a> (which is used under the hood to read Excel files). When <code>range</code> is a sheet name, the keyword arguments for the <code>readxlsheet</code> function from ExcelReaders.jl apply, if <code>range</code> is a range specification, the keyword arguments for the <code>readxl</code> function apply.</li>
</ul>
<h3 dir="auto"><a id="user-content-save-an-excel-file" class="anchor" aria-hidden="true" href="#save-an-excel-file"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Save an Excel file</h3>
<p dir="auto">The following code saves any iterable table as an excel file:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using ExcelFiles

save(&quot;output.xlsx&quot;, it)"><pre><span class="pl-k">using</span> ExcelFiles

<span class="pl-c1">save</span>(<span class="pl-s"><span class="pl-pds">"</span>output.xlsx<span class="pl-pds">"</span></span>, it)</pre></div>
<p dir="auto">This will work as long as it is any of the types supported as sources in IterableTables.jl.</p>
<h3 dir="auto"><a id="user-content-using-the-pipe-syntax" class="anchor" aria-hidden="true" href="#using-the-pipe-syntax"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Using the pipe syntax</h3>
<p dir="auto"><code>load</code> also support the pipe syntax. For example, to load an Excel file into a <code>DataFrame</code>, one can use the following code:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using ExcelFiles, DataFrame

df = load(&quot;data.xlsx&quot;, &quot;Sheet1&quot;) |&gt; DataFrame"><pre><span class="pl-k">using</span> ExcelFiles, DataFrame

df <span class="pl-k">=</span> <span class="pl-c1">load</span>(<span class="pl-s"><span class="pl-pds">"</span>data.xlsx<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Sheet1<span class="pl-pds">"</span></span>) <span class="pl-k">|&gt;</span> DataFrame</pre></div>
<p dir="auto">To save an iterable table, one can use the following form:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using ExcelFiles, DataFrame

df = # Aquire a DataFrame somehow

df |&gt; save(&quot;output.xlsx&quot;)"><pre><span class="pl-k">using</span> ExcelFiles, DataFrame

df <span class="pl-k">=</span> <span class="pl-c"><span class="pl-c">#</span> Aquire a DataFrame somehow</span>

df <span class="pl-k">|&gt;</span> <span class="pl-c1">save</span>(<span class="pl-s"><span class="pl-pds">"</span>output.xlsx<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">The pipe syntax is especially useful when combining it with <a href="https://github.com/queryverse/Query.jl">Query.jl</a> queries, for example one can easily load an Excel file, pipe it into a query, then pipe it to the <code>save</code> function to store the results in a new file.</p>
</article></div>