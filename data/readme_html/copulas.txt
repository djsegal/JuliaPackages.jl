<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-copulas" class="anchor" aria-hidden="true" href="#copulas"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Copulas</h1>

<p dir="auto"><a href="https://lrnv.github.io/Copulas.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/lrnv/Copulas.jl/actions/workflows/CI.yml?query=branch%3Amain"><img src="https://github.com/lrnv/Copulas.jl/actions/workflows/CI.yml/badge.svg?branch=main" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/lrnv/Copulas.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/751f9749b003f03b2d327f7bb29c831dacd3fee58677e637ea1f0df8cd4cf0b0/68747470733a2f2f636f6465636f762e696f2f67682f6c726e762f436f70756c61732e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/lrnv/Copulas.jl/branch/main/graph/badge.svg" style="max-width: 100%;"></a>
<a href="https://github.com/invenia/BlueStyle"><img src="https://camo.githubusercontent.com/c18fbaa52d94d16b90b19701fc90d289b8a5bb920c74c79bab200b14e75420a4/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c75652d3434393564312e737667" alt="Code Style: Blue" data-canonical-src="https://img.shields.io/badge/code%20style-blue-4495d1.svg" style="max-width: 100%;"></a>
<a href="https://github.com/SciML/ColPrac"><img src="https://camo.githubusercontent.com/a6c1efcb19a957860ecb25966a730260b03d6e05380d0c27992ee7f9e3b1feb3/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f436f6c507261632d436f6e7472696275746f72277325323047756964652d626c756576696f6c6574" alt="ColPrac: Contributor's Guide on Collaborative Practices for Community Packages" data-canonical-src="https://img.shields.io/badge/ColPrac-Contributor's%20Guide-blueviolet" style="max-width: 100%;"></a>
<a href="https://zenodo.org/badge/latestdoi/456485213" rel="nofollow"><img src="https://camo.githubusercontent.com/7549e4b247245248f5515a4a9d1247dc70cd670a9cb9c0601775a48f2a4fadc4/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f3435363438353231332e737667" alt="DOI" data-canonical-src="https://zenodo.org/badge/456485213.svg" style="max-width: 100%;"></a></p>
<h1 dir="auto"><a id="user-content-what-is-this-package-" class="anchor" aria-hidden="true" href="#what-is-this-package-"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>What is this package ?</h1>
<p dir="auto"><strong>Warning: This is fairly untested and experimental work and the API might change without notice.</strong></p>
<p dir="auto">This package brings most standard <a href="https://en.wikipedia.org/wiki/Copula_(probability_theory)" rel="nofollow">copula</a> features into native Julia: random number generation, pdf and cdf, fitting, copula-based multivariate distributions through Sklar's theorem, etc., while fully complying with the <a href="https://github.com/JuliaStats/Distributions.jl"><code>Distributions.jl</code></a> API (after all, copulas are distributions functions) in order to provide interoperability with other packages based on this API such as, e.g., <a href="https://github.com/TuringLang/Turing.jl"><code>Turing.jl</code></a>.</p>
<p dir="auto">Usually, people that use and work with copulas turn to R, because of the amazing <code>R</code> package <a href="https://cran.r-project.org/web/packages/copula/copula.pdf" rel="nofollow"><code>copula</code></a>.
While it is still well maintained and regularly updated, the <code>R</code> package <code>copula</code> is a mixture of obscure, heavily optimized <code>C</code> code and more standard <code>R</code> code, which makes it a complicated code base for readability, extensibility, reliability and maintenance.</p>
<p dir="auto">This is an attempt to provide a very light, fast, reliable and maintainable copula implementation in native Julia (which means, in particular, floating point type agnostic, i.e. compatibility with <code>BigFloat</code>, <a href="https://github.com/JuliaMath/DoubleFloats.jl"><code>DoubleFloats</code></a>, <a href="https://github.com/dzhang314/MultiFloats.jl"><code>MultiFloats</code></a> and other kind of numbers). The two most important exported types are:</p>
<ul dir="auto">
<li><code>Copula</code>: an abstract mother type for all the copulas in the package.</li>
<li><code>SklarDist</code>:  allows construction of a multivariate distribution by specifying the copula and the marginals through <a href="https://en.wikipedia.org/wiki/Copula_(probability_theory)#Sklar's_theorem" rel="nofollow">Sklar's theorem</a>.</li>
</ul>
<h1 dir="auto"><a id="user-content-what-is-already-implemented" class="anchor" aria-hidden="true" href="#what-is-already-implemented"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>What is already implemented</h1>
<p dir="auto">The API contains random number generation, cdf and pdf evaluation, and the <code>fit</code> function from <code>Distributions.jl</code>. A typical use case might look like this:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Copulas, Distributions, Random
X₁ = Gamma(2,3)
X₂ = Pareto()
X₃ = LogNormal(0,1)
C = ClaytonCopula(3,0.7) # A 3-variate Clayton Copula with θ = 0.7
D = SklarDist(C,(X₁,X₂,X₃)) # The final distribution

# This generates a (3,1000)-sized dataset from the multivariate distribution D
simu = rand(D,1000)

# While the following estimates the parameters of the model from a dataset: 
D̂ = fit(SklarDist{FrankCopula,Tuple{Gamma,Normal,LogNormal}}, simu)
# Increase the number of observations to get a beter fit (or not?)  "><pre><span class="pl-k">using</span> Copulas, Distributions, Random
X₁ <span class="pl-k">=</span> <span class="pl-c1">Gamma</span>(<span class="pl-c1">2</span>,<span class="pl-c1">3</span>)
X₂ <span class="pl-k">=</span> <span class="pl-c1">Pareto</span>()
X₃ <span class="pl-k">=</span> <span class="pl-c1">LogNormal</span>(<span class="pl-c1">0</span>,<span class="pl-c1">1</span>)
C <span class="pl-k">=</span> <span class="pl-c1">ClaytonCopula</span>(<span class="pl-c1">3</span>,<span class="pl-c1">0.7</span>) <span class="pl-c"><span class="pl-c">#</span> A 3-variate Clayton Copula with θ = 0.7</span>
D <span class="pl-k">=</span> <span class="pl-c1">SklarDist</span>(C,(X₁,X₂,X₃)) <span class="pl-c"><span class="pl-c">#</span> The final distribution</span>

<span class="pl-c"><span class="pl-c">#</span> This generates a (3,1000)-sized dataset from the multivariate distribution D</span>
simu <span class="pl-k">=</span> <span class="pl-c1">rand</span>(D,<span class="pl-c1">1000</span>)

<span class="pl-c"><span class="pl-c">#</span> While the following estimates the parameters of the model from a dataset: </span>
D̂ <span class="pl-k">=</span> <span class="pl-c1">fit</span>(SklarDist{FrankCopula,Tuple{Gamma,Normal,LogNormal}}, simu)
<span class="pl-c"><span class="pl-c">#</span> Increase the number of observations to get a beter fit (or not?)  </span></pre></div>
<p dir="auto">Available copula families are:</p>
<ul dir="auto">
<li><code>GaussianCopula</code>,</li>
<li><code>TCopula</code>,</li>
<li><code>ArchimedeanCopula</code> (for any generator),</li>
<li><code>ClaytonCopula</code>,<code>FrankCopula</code>, <code>AMHCopula</code>, <code>JoeCopula</code>, <code>GumbelCopula</code> as example of the <code>ArchimedeanCopula</code> abstract type, see below,</li>
<li><code>WCopula</code> and <code>MCopula</code>, which are <a href="https://en.wikipedia.org/wiki/Copula_(probability_theory)#Fr%C3%A9chet%E2%80%93Hoeffding_copula_bounds" rel="nofollow">Fréchet-Hoeffding bounds</a>,</li>
<li><code>EmpiricalCopula</code> to follow closely a given dataset.</li>
</ul>
<p dir="auto">The next ones to be implemented will probably be:</p>
<ul dir="auto">
<li>Nested archimedeans (general, with the possibility to nest any family with any family, assuming it is possible, with parameter checks.)</li>
<li>Bernstein copula and more general Beta copula as smoothing of the Empirical copula.</li>
<li><code>CheckerboardCopula</code> (and more generally <code>PatchworkCopula</code>)</li>
</ul>
<p dir="auto">Adding a new <code>ArchimedeanCopula</code> is very easy. The <code>Clayton</code> implementation is as short as:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="struct ClaytonCopula{d,T} &lt;: ArchimedeanCopula{d}
    θ::T
end
ClaytonCopula(d,θ)            = ClaytonCopula{d,typeof(θ)}(θ)     # Constructor
ϕ(C::ClaytonCopula, t)        = (1+sign(C.θ)*t)^(-1/C.θ)          # Generator
ϕ⁻¹(C::ClaytonCopula,t)       = sign(C.θ)*(t^(-C.θ)-1)            # Inverse Generator
τ(C::ClaytonCopula)           = C.θ/(C.θ+2)                       # θ -&gt; τ
τ⁻¹(::Type{ClaytonCopula},τ)  = 2τ/(1-τ)                          # τ -&gt; θ
radial_dist(C::ClaytonCopula) = Distributions.Gamma(1/C.θ,1)      # Radial distribution"><pre><span class="pl-k">struct</span> ClaytonCopula{d,T} <span class="pl-k">&lt;:</span> <span class="pl-c1">ArchimedeanCopula{d}</span>
    θ<span class="pl-k">::</span><span class="pl-c1">T</span>
<span class="pl-k">end</span>
<span class="pl-en">ClaytonCopula</span>(d,θ)            <span class="pl-k">=</span> <span class="pl-c1">ClaytonCopula</span><span class="pl-c1">{d,typeof(θ)}</span>(θ)     <span class="pl-c"><span class="pl-c">#</span> Constructor</span>
<span class="pl-en">ϕ</span>(C<span class="pl-k">::</span><span class="pl-c1">ClaytonCopula</span>, t)        <span class="pl-k">=</span> (<span class="pl-c1">1</span><span class="pl-k">+</span><span class="pl-c1">sign</span>(C<span class="pl-k">.</span>θ)<span class="pl-k">*</span>t)<span class="pl-k">^</span>(<span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">/</span>C<span class="pl-k">.</span>θ)          <span class="pl-c"><span class="pl-c">#</span> Generator</span>
<span class="pl-en">ϕ⁻¹</span>(C<span class="pl-k">::</span><span class="pl-c1">ClaytonCopula</span>,t)       <span class="pl-k">=</span> <span class="pl-c1">sign</span>(C<span class="pl-k">.</span>θ)<span class="pl-k">*</span>(t<span class="pl-k">^</span>(<span class="pl-k">-</span>C<span class="pl-k">.</span>θ)<span class="pl-k">-</span><span class="pl-c1">1</span>)            <span class="pl-c"><span class="pl-c">#</span> Inverse Generator</span>
<span class="pl-en">τ</span>(C<span class="pl-k">::</span><span class="pl-c1">ClaytonCopula</span>)           <span class="pl-k">=</span> C<span class="pl-k">.</span>θ<span class="pl-k">/</span>(C<span class="pl-k">.</span>θ<span class="pl-k">+</span><span class="pl-c1">2</span>)                       <span class="pl-c"><span class="pl-c">#</span> θ -&gt; τ</span>
<span class="pl-en">τ⁻¹</span>(<span class="pl-k">::</span><span class="pl-c1">Type{ClaytonCopula}</span>,τ)  <span class="pl-k">=</span> <span class="pl-c1">2</span>τ<span class="pl-k">/</span>(<span class="pl-c1">1</span><span class="pl-k">-</span>τ)                          <span class="pl-c"><span class="pl-c">#</span> τ -&gt; θ</span>
<span class="pl-en">radial_dist</span>(C<span class="pl-k">::</span><span class="pl-c1">ClaytonCopula</span>) <span class="pl-k">=</span> Distributions<span class="pl-k">.</span><span class="pl-c1">Gamma</span>(<span class="pl-c1">1</span><span class="pl-k">/</span>C<span class="pl-k">.</span>θ,<span class="pl-c1">1</span>)      <span class="pl-c"><span class="pl-c">#</span> Radial distribution</span></pre></div>
<p dir="auto">The Archimedean API is modular:</p>
<ul dir="auto">
<li>To sample an archimedean, only <code>radial_dist</code> and <code>ϕ</code> are needed.</li>
<li>To evaluate the cdf and (log-)density in any dimension, only <code>ϕ</code> and <code>ϕ⁻¹</code> are needed.</li>
<li>Currently, to fit the copula <code>τ⁻¹</code> is needed as we use the inverse tau moment method. But we plan on also implementing inverse rho and MLE (density needed).</li>
<li>Note that the generator <code>ϕ</code> follows the convention <code>ϕ(0)=1</code>, while others (e.g., <a href="https://en.wikipedia.org/wiki/Copula_(probability_theory)#Archimedean_copulas" rel="nofollow">https://en.wikipedia.org/wiki/Copula_(probability_theory)#Archimedean_copulas</a>) use <code>ϕ⁻¹</code> as the generator.</li>
<li>We plan on implementing the Williamson transformations so that <code>radial-dist</code> can be automaticlaly deduced from <code>ϕ</code> and vice versa, if you dont know much about your archimedean family</li>
</ul>
<h1 dir="auto"><a id="user-content-dev-roadmap" class="anchor" aria-hidden="true" href="#dev-roadmap"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Dev Roadmap</h1>
<h2 dir="auto"><a id="user-content-urgent-things" class="anchor" aria-hidden="true" href="#urgent-things"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Urgent things</h2>
<ul class="contains-task-list">
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> Add tests and documentation</li>
</ul>
<h2 dir="auto"><a id="user-content-next" class="anchor" aria-hidden="true" href="#next"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Next</h2>
<ul class="contains-task-list">
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> Extensive documentation and tests for the current implementation.</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> Implement archimedean density generally.</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> Docs: show how to implement another archimedean.</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> Give the user the choice of fitting method via <code>fit(dist,data; method="MLE")</code> or <code>fit(dist,data; method="itau")</code> or <code>fit(dist,data; method="irho")</code>.</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> Fitting a generic archimedean : should provide an empirical generator</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> Make <code>Archimedean</code> more generic : inputing only <code>radial_dist</code> or only <code>phi</code> shoudl be enough to get <code>pdf, cdf, rand, tau, rho, itau, irho, fit, radial_dist</code>, etc...  <strong>Williamson d-transform and inverse d-transform should be implemented.</strong> The checking of nesting possibility should be done automatically with some rules (is phi_inv \circ phi complementely monotonous ? with obviously shortcut for inter-family nestings.)</li>
</ul>
<h2 dir="auto"><a id="user-content-maybe-later" class="anchor" aria-hidden="true" href="#maybe-later"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Maybe later</h2>
<ul class="contains-task-list">
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> <code>Vines</code>?</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> <code>NestedArchimedean</code> and very easy implementation of new archimeean copulas via the radial dist or the phi/invphi + Williamson transform.</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> <code>BernsteinCopula</code> and <code>BetaCopula</code> could also be implemented.</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> <code>PatchworkCopula</code> and <code>CheckerboardCopula</code>: could be nice things to have :)</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> Goodness of fits tests ?</li>
</ul>
<h2 dir="auto"><a id="user-content-contributions-are-welcome" class="anchor" aria-hidden="true" href="#contributions-are-welcome"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Contributions are welcome</h2>
<p dir="auto">Do not hesitate to open an issue to discuss :)</p>
</article></div>