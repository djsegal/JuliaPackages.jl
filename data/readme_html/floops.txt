<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-floops-fold-for-humans" class="anchor" aria-hidden="true" href="#floops-fold-for-humans"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>FLoops: <code>fold</code> for humansâ„¢</h1>
<p><a href="https://juliafolds.github.io/FLoops.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a>
<a href="https://github.com/JuliaFolds/FLoops.jl/actions?query=workflow%3A%22Run+tests%22"><img src="https://github.com/JuliaFolds/FLoops.jl/workflows/Run%20tests/badge.svg" alt="GitHub Actions" style="max-width:100%;"></a></p>
<p><a href="https://github.com/JuliaFolds/FLoops.jl">FLoops.jl</a> provides a macro
<code>@floop</code>. It can be used to generate a fast generic sequential and parallel
iteration over complex collections.</p>
<p>Furthermore, the loop written in <code>@floop</code> can be executed with any compatible
<a href="https://juliafolds.github.io/FLoops.jl/dev/tutorials/parallel/#tutorials-executor" rel="nofollow">executors</a>.
See <a href="https://github.com/JuliaFolds/FoldsThreads.jl">FoldsThreads.jl</a> for
various thread-based executors that are optimized for different kinds of
loops. <a href="https://github.com/JuliaFolds/FoldsCUDA.jl">FoldsCUDA.jl</a> provides an
executor for GPU. FLoops.jl also provide a simple distributed executor.</p>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<h1><a id="user-content-sequential-single-thread-loops" class="anchor" aria-hidden="true" href="#sequential-single-thread-loops"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Sequential (single-thread) loops</h1>
<p>Simply wrap a <code>for</code> loop and its initialization part by <code>@floop</code>:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using FLoops  # exports @floop macro

julia&gt; @floop begin
           s = 0
           for x in 1:3
               s += x
           end
       end
       s
6
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> FLoops  <span class="pl-c"><span class="pl-c">#</span> exports @floop macro</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@floop</span> <span class="pl-k">begin</span>
           s <span class="pl-k">=</span> <span class="pl-c1">0</span>
           <span class="pl-k">for</span> x <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">3</span>
               s <span class="pl-k">+=</span> x
           <span class="pl-k">end</span>
       <span class="pl-k">end</span>
       s
<span class="pl-c1">6</span></pre></div>
<p>For more examples, see
<a href="https://juliafolds.github.io/FLoops.jl/dev/tutorials/sequential/" rel="nofollow">sequential loops tutorial</a>.</p>
<h1><a id="user-content-parallel-loop" class="anchor" aria-hidden="true" href="#parallel-loop"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Parallel loop</h1>
<p><code>@floop</code> is a superset of <code>Threads.@threads</code> (see below) and in particular
supports complex reduction with additional syntax <code>@reduce</code>:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; @floop for (x, y) in zip(1:3, 1:2:6)
           a = x + y
           b = x - y
           @reduce(s += a, t += b)
       end
       (s, t)
(15, -3)
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">@floop</span> <span class="pl-k">for</span> (x, y) <span class="pl-k">in</span> <span class="pl-c1">zip</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">3</span>, <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">6</span>)
           a <span class="pl-k">=</span> x <span class="pl-k">+</span> y
           b <span class="pl-k">=</span> x <span class="pl-k">-</span> y
           <span class="pl-c1">@reduce</span>(s <span class="pl-k">+=</span> a, t <span class="pl-k">+=</span> b)
       <span class="pl-k">end</span>
       (s, t)
(<span class="pl-c1">15</span>, <span class="pl-k">-</span><span class="pl-c1">3</span>)</pre></div>
<p>For more examples, see
<a href="https://juliafolds.github.io/FLoops.jl/dev/tutorials/parallel/" rel="nofollow">parallel loops tutorial</a>.</p>
<h2><a id="user-content-advantages-over-threadsthreads" class="anchor" aria-hidden="true" href="#advantages-over-threadsthreads"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Advantages over <code>Threads.@threads</code></h2>
<p><code>@floop</code> is a superset of <code>Threads.@threads</code> and has a couple of advantages:</p>
<ul>
<li><code>@floop</code> supports various input collection types including
arrays, dicts, sets, strings, and many iterators from <code>Base.Iterators</code> such
as <code>zip</code> and <code>product</code>. More precisely, <code>@floop</code> can generate high-performance
parallel iterations for any collections that supports
<a href="https://github.com/JuliaFolds/SplittablesBase.jl">SplittablesBase.jl</a>
interface.</li>
<li>With <a href="https://juliafolds.github.io/FoldsThreads.jl/dev/#FoldsThreads.NondeterministicEx" rel="nofollow"><code>FoldsThreads.NondeterministicEx</code></a>,
<code>@floop</code> can even parallelize iterations over non-parallelizable input collections
(although it is beneficial only for heavier workload).</li>
<li><a href="https://github.com/JuliaFolds/FoldsThreads.jl">FoldsThreads.jl</a> provides
multiple alternative thread-based executors (= loop execution backend) that
can be used to tune the performance without touching the loop itself.</li>
<li><a href="https://github.com/JuliaFolds/FoldsCUDA.jl">FoldsCUDA.jl</a> provides a simple
GPU executor.</li>
<li><code>@reduce</code> syntax for supporting complex reduction in a forward-compatible manner
<ul>
<li>Note: <code>threadid</code>-based reduction (that is commonly used in conjunction with
<code>@threads</code>) may not be forward-compatible to Julia that supports
migrating tasks across threads.</li>
</ul>
</li>
<li>There is a trick for <a href="https://juliafolds.github.io/data-parallelism/howto/faq/#set-nthreads-at-run-time" rel="nofollow">"changing" the effective number of threads without
restarting <code>julia</code> using the <code>basesize</code>
option</a>.</li>
</ul>
<p>The relative disadvantages may be that <code>@floop</code> is much newer than
<code>Threads.@threads</code> and has much more flexible internals. These points can
contribute to undiscovered bugs.</p>
<h2><a id="user-content-how-it-works" class="anchor" aria-hidden="true" href="#how-it-works"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>How it works</h2>
<p><code>@floop</code> works by converting the native Julia <code>for</code> loop syntax to
<code>foldl</code> defined by
<a href="https://github.com/JuliaFolds/Transducers.jl">Transducers.jl</a>.  Unlike
<code>foldl</code> defined in <code>Base</code>, <code>foldl</code> defined by Transducers.jl is
<a href="https://juliafolds.github.io/Transducers.jl/dev/reference/manual/#Base.foreach" rel="nofollow">powerful enough to cover the <code>for</code> loop semantics and more</a>.</p>
</article></div>