<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-herbswipljl" class="anchor" aria-hidden="true" href="#herbswipljl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>HerbSWIPL.jl</h1>
<p dir="auto">HerbSWIPL is a Julia wrapper around <a href="https://www.swi-prolog.org/" rel="nofollow">SWI Prolog</a> allow you to fully utilise Prolog from your Julia programs.</p>
<p dir="auto">HerbSWIPL is part of a larger project, <a href="https://github.com/Herb-AI">Herb</a>, aiming to provide a programmable toolkit for program synthesis and induction.</p>
<h1 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h1>
<p dir="auto">First install <a href="https://www.swi-prolog.org/" rel="nofollow">SWIPL</a> and make sure its shared library (<code>libswipl.dylib</code> on OSX, <code>libswipl.so</code> on Linux) is available through <code>DYLD_LIBRARY_PATH</code> env variable.</p>
<p dir="auto">Enter the package manager by pressing <code>]</code> in Julia REPL, then run:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="add &lt;link to this git repository&gt;"><pre class="notranslate"><code>add &lt;link to this git repository&gt;
</code></pre></div>
<h1 dir="auto"><a id="user-content-features" class="anchor" aria-hidden="true" href="#features"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Features</h1>
<ul dir="auto">
<li>Prolog-like syntax</li>
<li>Performant wrapper built around SWIPL's foreign function interface</li>
<li>Access to the majority of SWIPL's capabilities</li>
<li>Add Julia functions as Prolog predicates</li>
</ul>
<h1 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h1>
<p dir="auto">HerbSWIPL.jl is built around <a href="https://github.com/ztangent/Julog.jl">Julog</a>, a Julia implementation of a Prolog engine.
HerbSWIPL.jl uses Julog to represent logic programs and follows it interface, making it easy to switch between engines.</p>
<p dir="auto">Start the Prolog engine</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="prolog = Swipl()
start(prolog)"><pre>prolog <span class="pl-k">=</span> <span class="pl-c1">Swipl</span>()
<span class="pl-c1">start</span>(prolog)</pre></div>
<p dir="auto">Represent a knowledge base/logic program with the <code>@julog</code> macro</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="clauses = @julog [
  ancestor(sakyamuni, bodhidharma) &lt;&lt;= true,
  teacher(bodhidharma, huike) &lt;&lt;= true,
  teacher(huike, sengcan) &lt;&lt;= true,
  teacher(sengcan, daoxin) &lt;&lt;= true,
  teacher(daoxin, hongren) &lt;&lt;= true,
  teacher(hongren, huineng) &lt;&lt;= true,
  ancestor(A, B) &lt;&lt;= teacher(A, B),
  ancestor(A, C) &lt;&lt;= teacher(B, C) &amp; ancestor(A, B),
  grandteacher(A, C) &lt;&lt;= teacher(A, B) &amp; teacher(B, C)
]"><pre>clauses <span class="pl-k">=</span> <span class="pl-c1">@julog</span> [
  <span class="pl-c1">ancestor</span>(sakyamuni, bodhidharma) <span class="pl-k">&lt;&lt;=</span> <span class="pl-c1">true</span>,
  <span class="pl-c1">teacher</span>(bodhidharma, huike) <span class="pl-k">&lt;&lt;=</span> <span class="pl-c1">true</span>,
  <span class="pl-c1">teacher</span>(huike, sengcan) <span class="pl-k">&lt;&lt;=</span> <span class="pl-c1">true</span>,
  <span class="pl-c1">teacher</span>(sengcan, daoxin) <span class="pl-k">&lt;&lt;=</span> <span class="pl-c1">true</span>,
  <span class="pl-c1">teacher</span>(daoxin, hongren) <span class="pl-k">&lt;&lt;=</span> <span class="pl-c1">true</span>,
  <span class="pl-c1">teacher</span>(hongren, huineng) <span class="pl-k">&lt;&lt;=</span> <span class="pl-c1">true</span>,
  <span class="pl-c1">ancestor</span>(A, B) <span class="pl-k">&lt;&lt;=</span> <span class="pl-c1">teacher</span>(A, B),
  <span class="pl-c1">ancestor</span>(A, C) <span class="pl-k">&lt;&lt;=</span> <span class="pl-c1">teacher</span>(B, C) <span class="pl-k">&amp;</span> <span class="pl-c1">ancestor</span>(A, B),
  <span class="pl-c1">grandteacher</span>(A, C) <span class="pl-k">&lt;&lt;=</span> <span class="pl-c1">teacher</span>(A, B) <span class="pl-k">&amp;</span> <span class="pl-c1">teacher</span>(B, C)
]</pre></div>
<p dir="auto">Query SWIPL via <code>resolve</code> function</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# Query: Who are the grandteachers of whom?
julia&gt; goals = @julog [grandteacher(X, Y)];
julia&gt; sat, subst = resolve(prolog, goals, clauses);
julia&gt; sat
true
julia&gt; subst
4-element Array{Any,1}:
  {Y =&gt; sengcan, X =&gt; bodhidharma}
  {Y =&gt; daoxin, X =&gt; huike}
  {Y =&gt; hongren, X =&gt; sengcan}
  {Y =&gt; huineng, X =&gt; daoxin}"><pre><span class="pl-c"><span class="pl-c">#</span> Query: Who are the grandteachers of whom?</span>
julia<span class="pl-k">&gt;</span> goals <span class="pl-k">=</span> <span class="pl-c1">@julog</span> [<span class="pl-c1">grandteacher</span>(X, Y)];
julia<span class="pl-k">&gt;</span> sat, subst <span class="pl-k">=</span> <span class="pl-c1">resolve</span>(prolog, goals, clauses);
julia<span class="pl-k">&gt;</span> sat
<span class="pl-c1">true</span>
julia<span class="pl-k">&gt;</span> subst
<span class="pl-c1">4</span><span class="pl-k">-</span>element Array{Any,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
  {Y <span class="pl-k">=&gt;</span> sengcan, X <span class="pl-k">=&gt;</span> bodhidharma}
  {Y <span class="pl-k">=&gt;</span> daoxin, X <span class="pl-k">=&gt;</span> huike}
  {Y <span class="pl-k">=&gt;</span> hongren, X <span class="pl-k">=&gt;</span> sengcan}
  {Y <span class="pl-k">=&gt;</span> huineng, X <span class="pl-k">=&gt;</span> daoxin}</pre></div>
<p dir="auto">You can specify the number of solutions with ther <code>mode</code> keyword:</p>
<ul dir="auto">
<li><code>:all</code>: return all solutions</li>
<li><code>:any</code>: return a single solution</li>
<li><code>:max</code>: return the number of solutions specified through the <code>max_solutions</code> keyword</li>
</ul>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; sat, subst = resolve(prolog, goals, clauses; mode=:all);
julia&gt; sat, subst = resolve(prolog, goals, clauses; mode=:max, max_solution=5);"><pre>julia<span class="pl-k">&gt;</span> sat, subst <span class="pl-k">=</span> <span class="pl-c1">resolve</span>(prolog, goals, clauses; mode<span class="pl-k">=</span><span class="pl-c1">:all</span>);
julia<span class="pl-k">&gt;</span> sat, subst <span class="pl-k">=</span> <span class="pl-c1">resolve</span>(prolog, goals, clauses; mode<span class="pl-k">=</span><span class="pl-c1">:max</span>, max_solution<span class="pl-k">=</span><span class="pl-c1">5</span>);</pre></div>
<p dir="auto">By default, <code>resolve</code> will assert the provided clauses before running the query and retract them upon query completion.
You can prevent <code>resolve</code> from retracting everything through the <code>keep</code> option: <code>keep=true</code>.</p>
<p dir="auto">By default, HerbSWIPL returns lists in the pair format.
However, this turns out to be extremely inefficient for long lists.
A significantly more efficient alternative is to return answers as Julia Vectors.
For this reason, HerbSWIPL allows you to choose the format of the lists through the <code>lists</code> option:</p>
<ul dir="auto">
<li><code>:julia</code> returns lists as Julia Vector</li>
<li><code>:julog</code> returns lists in the pair format</li>
</ul>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="sat, res = swipl_resolve(prolog, goal, clauses; lists=:julia)"><pre class="notranslate"><code>sat, res = swipl_resolve(prolog, goal, clauses; lists=:julia)
</code></pre></div>
<h1 dir="auto"><a id="user-content-julia-functions-as-prolog-predicates" class="anchor" aria-hidden="true" href="#julia-functions-as-prolog-predicates"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Julia functions as Prolog predicates</h1>
<p dir="auto">HerbSWIPL.jl supports converting Julia functions to Prolog predicates</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; prolog = Swipl()
julia&gt; start(prolog)

julia&gt; function hello(term::Const)
    println(&quot;Hello $(term)!&quot;)
    return (true, Dict{Int64,Term}())
end

julia&gt; register_foreign(hello; mode=:det)
julia&gt; goal = @julog hello(toby)
julia&gt; sat, result = swipl_resolve(prolog, goal, Vector{Clause}())
Hello toby!
julia&gt; stop(prolog)"><pre>julia<span class="pl-k">&gt;</span> prolog <span class="pl-k">=</span> <span class="pl-c1">Swipl</span>()
julia<span class="pl-k">&gt;</span> <span class="pl-c1">start</span>(prolog)

julia<span class="pl-k">&gt;</span> <span class="pl-k">function</span> <span class="pl-en">hello</span>(term<span class="pl-k">::</span><span class="pl-c1">Const</span>)
    <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>Hello <span class="pl-v">$(term)</span>!<span class="pl-pds">"</span></span>)
    <span class="pl-k">return</span> (<span class="pl-c1">true</span>, <span class="pl-c1">Dict</span><span class="pl-c1">{Int64,Term}</span>())
<span class="pl-k">end</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">register_foreign</span>(hello; mode<span class="pl-k">=</span><span class="pl-c1">:det</span>)
julia<span class="pl-k">&gt;</span> goal <span class="pl-k">=</span> <span class="pl-c1">@julog</span> <span class="pl-c1">hello</span>(toby)
julia<span class="pl-k">&gt;</span> sat, result <span class="pl-k">=</span> <span class="pl-c1">swipl_resolve</span>(prolog, goal, <span class="pl-c1">Vector</span><span class="pl-c1">{Clause}</span>())
Hello toby!
julia<span class="pl-k">&gt;</span> <span class="pl-c1">stop</span>(prolog)</pre></div>
<p dir="auto">Julia foreign functions need to obey the following specification:</p>
<ul dir="auto">
<li>they should expect Julog terms as arguments</li>
<li>they should return a tuple where:
<ul dir="auto">
<li>the first element is a <code>Bool</code> indicating whether the call has succeeded</li>
<li>the second element is a <code>Dict{Int,Term}</code> mapping the arguments of the function to the terms they should unify to upon completing this call. The terms should be represented as Julog terms.</li>
</ul>
</li>
</ul>
<p dir="auto">For instance, consider a function <code>function married(so1::Const, so2::Const)</code> which maps to the predicate <code>married(X,Y)</code> which is true if <code>X</code> is married to <code>Y</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="function married(so1::Const, so2::Const)
    if so1.name == :toby
        return (true, Dict{Int,Term}(2 =&gt; Const(:mary)))
    else
        return (false, Dict{Int,Term}())
    end
end"><pre><span class="pl-k">function</span> <span class="pl-en">married</span>(so1<span class="pl-k">::</span><span class="pl-c1">Const</span>, so2<span class="pl-k">::</span><span class="pl-c1">Const</span>)
    <span class="pl-k">if</span> so1<span class="pl-k">.</span>name <span class="pl-k">==</span> <span class="pl-c1">:toby</span>
        <span class="pl-k">return</span> (<span class="pl-c1">true</span>, <span class="pl-c1">Dict</span><span class="pl-c1">{Int,Term}</span>(<span class="pl-c1">2</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">Const</span>(<span class="pl-c1">:mary</span>)))
    <span class="pl-k">else</span>
        <span class="pl-k">return</span> (<span class="pl-c1">false</span>, <span class="pl-c1">Dict</span><span class="pl-c1">{Int,Term}</span>())
    <span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>
<p dir="auto">In case the first argument is <code>toby</code> the funtion returns <code>(true, Dict{Int,Term}(2 =&gt; Const(:mary)))</code>.
<code>true</code> indicates that the query succeeded, while <code>Dict{Int,Term}(2 =&gt; Const(:mary))</code> indicates that the second argument of the function <code>so2</code> should be unified with <code>mary</code> (represented as <code>Const(:mary)</code> in Julog).
In all other cases, the function returns  <code>(false, Dict{Int,Term}())</code>, indicating that the query has not succeeded, and no unifications need to be performed (empty <code>Dict</code>).
Note that the arguments are 1-indexed.</p>
<p dir="auto"><strong>Note:</strong> only the deterministic foreign functions are currently supported.</p>
</article></div>