<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-nrrd" class="anchor" aria-hidden="true" href="#nrrd"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>NRRD</h1>
<p dir="auto"><a href="https://github.com/JuliaIO/NRRD.jl/actions/workflows/CI.yml"><img src="https://github.com/JuliaIO/NRRD.jl/actions/workflows/CI.yml/badge.svg" alt="Build status" style="max-width: 100%;"></a>
<a href="http://codecov.io/github/JuliaIO/NRRD.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/45ed5ce6b910360ba4919f3d7eff4eeaf70975882f16d2c9dde054c19173d6a9/687474703a2f2f636f6465636f762e696f2f6769746875622f4a756c6961494f2f4e5252442e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/JuliaIO/NRRD.jl/coverage.svg?branch=master" style="max-width: 100%;"></a>
<a href="https://juliaci.github.io/NanosoldierReports/pkgeval_badges/report.html" rel="nofollow"><img src="https://camo.githubusercontent.com/a979297bdc441d4270371c75c88bb3d519df71617d0c0b8945673eb7e64a5da5/68747470733a2f2f6a756c696163692e6769746875622e696f2f4e616e6f736f6c646965725265706f7274732f706b676576616c5f6261646765732f4e2f4e5252442e737667" alt="PkgEval" data-canonical-src="https://juliaci.github.io/NanosoldierReports/pkgeval_badges/N/NRRD.svg" style="max-width: 100%;"></a></p>
<p dir="auto">Package for reading NRRD files.
Implements the  <a href="https://github.com/JuliaIO/FileIO.jl">FileIO</a> interface.</p>
<p dir="auto">Originally located in <a href="https://github.com/timholy/Images.jl">Images.jl</a></p>
<h2 dir="auto"><a id="user-content-writing-plain-nrrd-headers" class="anchor" aria-hidden="true" href="#writing-plain-nrrd-headers"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Writing plain NRRD headers</h2>
<p dir="auto">Normal usage is as easy as</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="img = load(&quot;myfile.nrrd&quot;)
img = load(&quot;myfile.nhdr&quot;)
save(&quot;myotherfile.nrrd&quot;, img)"><pre>img <span class="pl-k">=</span> <span class="pl-c1">load</span>(<span class="pl-s"><span class="pl-pds">"</span>myfile.nrrd<span class="pl-pds">"</span></span>)
img <span class="pl-k">=</span> <span class="pl-c1">load</span>(<span class="pl-s"><span class="pl-pds">"</span>myfile.nhdr<span class="pl-pds">"</span></span>)
<span class="pl-c1">save</span>(<span class="pl-s"><span class="pl-pds">"</span>myotherfile.nrrd<span class="pl-pds">"</span></span>, img)</pre></div>
<p dir="auto">However, if you already have a raw binary representing the "data
file", the FileIO interface isn't sufficently flexible for writing
just the header. Assuming you want to save "rich" axis information, a
low-level approach using AxisArrays is the following:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using NRRD, FileIO, ImageCore, AxisArrays, Unitful
using Unitful: μm, s

# For a 480x640x200 image with time as the third axis,
# assuming a pixel spacing of 0.25μm and a framerate of 8fps
axy = Axis{:y}((1:480)*0.25μm)
axx = Axis{:x}((1:640)*0.25μm)
axt = Axis{:time}((1:200)*0.125s)

header = NRRD.headerinfo(N0f16, (axy, axx, axt))  # assuming N0f16 data
header[&quot;datafile&quot;] = &quot;mydata.raw&quot;

open(&quot;mydata.nhdr&quot;, &quot;w&quot;) do io
    write(io, magic(format&quot;NRRD&quot;))
    NRRD.write_header(io, &quot;0004&quot;, header)
end"><pre><span class="pl-k">using</span> NRRD, FileIO, ImageCore, AxisArrays, Unitful
<span class="pl-k">using</span> Unitful<span class="pl-k">:</span> μm, s

<span class="pl-c"><span class="pl-c">#</span> For a 480x640x200 image with time as the third axis,</span>
<span class="pl-c"><span class="pl-c">#</span> assuming a pixel spacing of 0.25μm and a framerate of 8fps</span>
axy <span class="pl-k">=</span> <span class="pl-c1">Axis</span><span class="pl-c1">{:y}</span>((<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">480</span>)<span class="pl-k">*</span><span class="pl-c1">0.25</span>μm)
axx <span class="pl-k">=</span> <span class="pl-c1">Axis</span><span class="pl-c1">{:x}</span>((<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">640</span>)<span class="pl-k">*</span><span class="pl-c1">0.25</span>μm)
axt <span class="pl-k">=</span> <span class="pl-c1">Axis</span><span class="pl-c1">{:time}</span>((<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">200</span>)<span class="pl-k">*</span><span class="pl-c1">0.125</span>s)

header <span class="pl-k">=</span> NRRD<span class="pl-k">.</span><span class="pl-c1">headerinfo</span>(N0f16, (axy, axx, axt))  <span class="pl-c"><span class="pl-c">#</span> assuming N0f16 data</span>
header[<span class="pl-s"><span class="pl-pds">"</span>datafile<span class="pl-pds">"</span></span>] <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>mydata.raw<span class="pl-pds">"</span></span>

<span class="pl-c1">open</span>(<span class="pl-s"><span class="pl-pds">"</span>mydata.nhdr<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>w<span class="pl-pds">"</span></span>) <span class="pl-k">do</span> io
    <span class="pl-c1">write</span>(io, <span class="pl-c1">magic</span>(<span class="pl-s"><span class="pl-pds"><span class="pl-c1">format</span>"</span>NRRD<span class="pl-pds">"</span></span>))
    NRRD<span class="pl-k">.</span><span class="pl-c1">write_header</span>(io, <span class="pl-s"><span class="pl-pds">"</span>0004<span class="pl-pds">"</span></span>, header)
<span class="pl-k">end</span></pre></div>
</article></div>