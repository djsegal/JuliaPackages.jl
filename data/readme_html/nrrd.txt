<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-nrrd" class="anchor" aria-hidden="true" href="#nrrd"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>NRRD</h1>
<p><a href="https://travis-ci.org/JuliaIO/NRRD.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/6f05b90d2b3644def7ff67a05baec521610c9f3e/68747470733a2f2f7472617669732d63692e6f72672f4a756c6961494f2f4e5252442e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaIO/NRRD.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="http://codecov.io/github/JuliaIO/NRRD.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/557e76ba751bf8b2efc4594c187d82a6d122e5ff/687474703a2f2f636f6465636f762e696f2f6769746875622f4a756c6961494f2f4e5252442e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/JuliaIO/NRRD.jl/coverage.svg?branch=master" style="max-width:100%;"></a>
<a href="https://juliaci.github.io/NanosoldierReports/pkgeval_badges/report.html" rel="nofollow"><img src="https://camo.githubusercontent.com/ded46ddf463a0da2c82a6cbc0c744c88b2e0f128/68747470733a2f2f6a756c696163692e6769746875622e696f2f4e616e6f736f6c646965725265706f7274732f706b676576616c5f6261646765732f4e2f4e5252442e737667" alt="PkgEval" data-canonical-src="https://juliaci.github.io/NanosoldierReports/pkgeval_badges/N/NRRD.svg" style="max-width:100%;"></a></p>
<p>Package for reading NRRD files.
Implements the  <a href="https://github.com/JuliaIO/FileIO.jl">FileIO</a> interface.</p>
<p>Originally located in <a href="https://github.com/timholy/Images.jl">Images.jl</a></p>
<h2><a id="user-content-writing-plain-nrrd-headers" class="anchor" aria-hidden="true" href="#writing-plain-nrrd-headers"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Writing plain NRRD headers</h2>
<p>Normal usage is as easy as</p>
<div class="highlight highlight-source-julia"><pre>img <span class="pl-k">=</span> <span class="pl-c1">load</span>(<span class="pl-s"><span class="pl-pds">"</span>myfile.nrrd<span class="pl-pds">"</span></span>)
img <span class="pl-k">=</span> <span class="pl-c1">load</span>(<span class="pl-s"><span class="pl-pds">"</span>myfile.nhdr<span class="pl-pds">"</span></span>)
<span class="pl-c1">save</span>(<span class="pl-s"><span class="pl-pds">"</span>myotherfile.nrrd<span class="pl-pds">"</span></span>, img)</pre></div>
<p>However, if you already have a raw binary representing the "data
file", the FileIO interface isn't sufficently flexible for writing
just the header. Assuming you want to save "rich" axis information, a
low-level approach using AxisArrays is the following:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> NRRD, FileIO, ImageCore, AxisArrays, Unitful
<span class="pl-k">using</span> Unitful<span class="pl-k">:</span> μm, s

<span class="pl-c"><span class="pl-c">#</span> For a 480x640x200 image with time as the third axis,</span>
<span class="pl-c"><span class="pl-c">#</span> assuming a pixel spacing of 0.25μm and a framerate of 8fps</span>
axy <span class="pl-k">=</span> <span class="pl-c1">Axis</span><span class="pl-c1">{:y}</span>((<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">480</span>)<span class="pl-k">*</span><span class="pl-c1">0.25</span>μm)
axx <span class="pl-k">=</span> <span class="pl-c1">Axis</span><span class="pl-c1">{:x}</span>((<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">640</span>)<span class="pl-k">*</span><span class="pl-c1">0.25</span>μm)
axt <span class="pl-k">=</span> <span class="pl-c1">Axis</span><span class="pl-c1">{:time}</span>((<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">200</span>)<span class="pl-k">*</span><span class="pl-c1">0.125</span>s)

header <span class="pl-k">=</span> NRRD<span class="pl-k">.</span><span class="pl-c1">headerinfo</span>(N0f16, (axy, axx, axt))  <span class="pl-c"><span class="pl-c">#</span> assuming N0f16 data</span>
header[<span class="pl-s"><span class="pl-pds">"</span>datafile<span class="pl-pds">"</span></span>] <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>mydata.raw<span class="pl-pds">"</span></span>

<span class="pl-c1">open</span>(<span class="pl-s"><span class="pl-pds">"</span>mydata.nhdr<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>w<span class="pl-pds">"</span></span>) <span class="pl-k">do</span> io
    <span class="pl-c1">write</span>(io, <span class="pl-c1">magic</span>(<span class="pl-s"><span class="pl-pds"><span class="pl-c1">format</span>"</span>NRRD<span class="pl-pds">"</span></span>))
    NRRD<span class="pl-k">.</span><span class="pl-c1">write_header</span>(io, <span class="pl-s"><span class="pl-pds">"</span>0004<span class="pl-pds">"</span></span>, header)
<span class="pl-k">end</span></pre></div>
</article></div>