<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-satsolverjl" class="anchor" aria-hidden="true" href="#satsolverjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>SatSolver.jl</h1>
<p dir="auto">Yet another Sat Solver, but in Julia</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">The package is available in the official General registry, and therefore can be downloaded directly from the julia package manager.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; ]
(@v1.6) pkg&gt; add SatSolver"><pre>julia<span class="pl-k">&gt;</span> ]
(<span class="pl-c1">@v1</span>.<span class="pl-c1">6</span>) pkg<span class="pl-k">&gt;</span> add SatSolver</pre></div>
<p dir="auto">or</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; import Pkg; Pkg.add(&quot;SatSolver&quot;)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">import</span> Pkg; Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>SatSolver<span class="pl-pds">"</span></span>)</pre></div>
<h2 dir="auto"><a id="user-content-description" class="anchor" aria-hidden="true" href="#description"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Description</h2>
<p dir="auto">This is a package completely written in Julia which solves the satisfiability problem for formulas in <a href="https://en.wikipedia.org/wiki/Conjunctive_normal_form" rel="nofollow">CNF</a> form.</p>
<p dir="auto">The algorithmic technique used to solve this problem is the intelligent exhaustive search of the solution space, better known as <a href="https://en.wikipedia.org/wiki/Backtracking" rel="nofollow">Backtracking</a></p>
<h2 dir="auto"><a id="user-content-representation-of-formula" class="anchor" aria-hidden="true" href="#representation-of-formula"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Representation of Formula</h2>
<p dir="auto">Conventionally, formulas can be expressed with strings in the following format:</p>
<ul dir="auto">
<li>each row represents a clause</li>
<li>each literal is separated by one (or more) whitespace</li>
<li>each negated literal is preceded by the symbol <code>~</code>, which represents the logical negation</li>
</ul>
<p dir="auto">Example: the logical CNF formula <code>(A or not B or not C) and (not D or E or F)</code> must be written as</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="formula = &quot;&quot;&quot;
A ~B ~C
~D E F
&quot;&quot;&quot;"><pre>formula <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"""</span></span>
<span class="pl-s">A ~B ~C</span>
<span class="pl-s">~D E F</span>
<span class="pl-s"><span class="pl-pds">"""</span></span></pre></div>
<h2 dir="auto"><a id="user-content-initialize-an-instance-of-sat" class="anchor" aria-hidden="true" href="#initialize-an-instance-of-sat"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Initialize an instance of SAT</h2>
<p dir="auto">Given a string representing a sat formula according to the previous description, we can instantiate an instance of sat as follow</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="I::SatSolver.Instance = SatSolver.parseInstance(formula)"><pre>I<span class="pl-k">::</span><span class="pl-c1">SatSolver.Instance</span> <span class="pl-k">=</span> SatSolver<span class="pl-k">.</span><span class="pl-c1">parseInstance</span>(formula)</pre></div>
<p dir="auto">We can also specify the path to a file that contains the string representation of a formula</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="I::SatSolver.Instance = SatSolver.parseInstanceFromFile(&quot;path/to/file.txt&quot;)"><pre>I<span class="pl-k">::</span><span class="pl-c1">SatSolver.Instance</span> <span class="pl-k">=</span> SatSolver<span class="pl-k">.</span><span class="pl-c1">parseInstanceFromFile</span>(<span class="pl-s"><span class="pl-pds">"</span>path/to/file.txt<span class="pl-pds">"</span></span>)</pre></div>
<h2 dir="auto"><a id="user-content-solve-an-instance" class="anchor" aria-hidden="true" href="#solve-an-instance"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Solve an instance</h2>
<p dir="auto">Function <code>sat</code> determines if the given instance is satisfiable, and returns the set of assignments that satisfy the instance, <code>false</code> otherwise.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; formula = &quot;&quot;&quot;
       A ~B ~C
       ~D E F
       &quot;&quot;&quot;;

julia&gt; I = parseInstance(formula);

julia&gt; sat(I)
Dict{String, Bool} with 2 entries:
  &quot;B&quot; =&gt; 0
  &quot;D&quot; =&gt; 0
  
julia&gt; formula = &quot;&quot;&quot;
       A
       ~A
       &quot;&quot;&quot;;
       
julia&gt; J = parseInstance(formula);

julia&gt; sat(J)
false"><pre>julia<span class="pl-k">&gt;</span> formula <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"""</span></span>
<span class="pl-s">       A ~B ~C</span>
<span class="pl-s">       ~D E F</span>
<span class="pl-s">       <span class="pl-pds">"""</span></span>;

julia<span class="pl-k">&gt;</span> I <span class="pl-k">=</span> <span class="pl-c1">parseInstance</span>(formula);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">sat</span>(I)
Dict{String, Bool} with <span class="pl-c1">2</span> entries<span class="pl-k">:</span>
  <span class="pl-s"><span class="pl-pds">"</span>B<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">0</span>
  <span class="pl-s"><span class="pl-pds">"</span>D<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">0</span>
  
julia<span class="pl-k">&gt;</span> formula <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"""</span></span>
<span class="pl-s">       A</span>
<span class="pl-s">       ~A</span>
<span class="pl-s">       <span class="pl-pds">"""</span></span>;
       
julia<span class="pl-k">&gt;</span> J <span class="pl-k">=</span> <span class="pl-c1">parseInstance</span>(formula);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">sat</span>(J)
<span class="pl-c1">false</span></pre></div>
<p dir="auto">We can also call the funcion <code>isSatisfiable</code> to determine if a given instance is satisfiable or not.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; isSatisfiable(I)
true

julia&gt; isSatisfiable(J)
false"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">isSatisfiable</span>(I)
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">isSatisfiable</span>(J)
<span class="pl-c1">false</span></pre></div>
<h2 dir="auto"><a id="user-content-visualize" class="anchor" aria-hidden="true" href="#visualize"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Visualize</h2>
<p dir="auto">Function <code>printInstance</code> prints a human readable representation of the logical formula</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; printInstance(I)
(A ~B ~C) (~D E F)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">printInstance</span>(I)
(A <span class="pl-k">~</span>B <span class="pl-k">~</span>C) (<span class="pl-k">~</span>D E F)</pre></div>
<p dir="auto">Given an assignment that satisfies an instance, a "pretty" representation of that assignment can be printed on the screen with functions <code>printSolutionTable</code> and <code>printRawTable</code></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; solution = sat(I);

julia&gt; printSolutionTable(I, solution)
┌──────────┬───────┐
│ Variable │ Value │
├──────────┼───────┤
│        B │ false │
│        A │   Any │
│        C │   Any │
│        D │ false │
│        E │   Any │
│        F │   Any │
└──────────┴───────┘

julia&gt; printRawTable(I, solution)
B : false
A : Any
C : Any
D : false
E : Any
F : Any"><pre>julia<span class="pl-k">&gt;</span> solution <span class="pl-k">=</span> <span class="pl-c1">sat</span>(I);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">printSolutionTable</span>(I, solution)
┌──────────┬───────┐
│ Variable │ Value │
├──────────┼───────┤
│        B │ <span class="pl-c1">false</span> │
│        A │   Any │
│        C │   Any │
│        D │ <span class="pl-c1">false</span> │
│        E │   Any │
│        F │   Any │
└──────────┴───────┘

julia<span class="pl-k">&gt;</span> <span class="pl-c1">printRawTable</span>(I, solution)
B <span class="pl-k">:</span> <span class="pl-c1">false</span>
A <span class="pl-k">:</span> Any
C <span class="pl-k">:</span> Any
D <span class="pl-k">:</span> <span class="pl-c1">false</span>
E <span class="pl-k">:</span> Any
F <span class="pl-k">:</span> Any</pre></div>
<p dir="auto">The <code>Any</code> value indicates that any interpretation (true or false) can be given to the respective variable.</p>
<hr>
<h2 dir="auto"><a id="user-content-todo-list" class="anchor" aria-hidden="true" href="#todo-list"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>TODO list</h2>
<ul class="contains-task-list">
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> write simple documentation</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> write exhaustive documentation</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> test the correctness</li>
</ul>
</article></div>