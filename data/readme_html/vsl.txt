<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-vsljl" class="anchor" aria-hidden="true" href="#vsljl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>VSL.jl</h1>
<p><a href="https://travis-ci.org/sunoru/VSL.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/641cc93dafb54886aec788ae7c2855fe32859a5e62f5d28c5f948e01b7b8ab8a/68747470733a2f2f7472617669732d63692e6f72672f73756e6f72752f56534c2e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/sunoru/VSL.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/sunoru/VSL.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/2cce7a0e2362eb951edde01d84105aca671db19682884c4b2afe1d0a33ed367b/68747470733a2f2f636f6465636f762e696f2f67682f73756e6f72752f56534c2e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/sunoru/VSL.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p>This package provides bindings to the Intel Vector Statistics Library.</p>
<h2><a id="user-content-using-vsljl" class="anchor" aria-hidden="true" href="#using-vsljl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Using VSL.jl</h2>
<p>You must have the <a href="http://software.intel.com/en-us/intel-mkl" rel="nofollow">Intel® Math Kernel Library</a> installed to use VSL.jl, and
the shared library must be in a directory known to the linker.</p>
<p>VML.jl provides several basic random number generators (BRNGs) and distributions, and each distribution has at least
one method to generate random number. After VSL.jl loaded, you can use the distributions such like the followings:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using VSL

julia&gt; brng = BasicRandomNumberGenerator(VSL_BRNG_MT19937, 12345);
# A BRNG created, in which 12345 is the random seed.

julia&gt; u = Uniform(brng, 0.0, 1.0); # Create a uniform distribution between 0.0 and 1.0.

julia&gt; rand(u) # Generate one random number.
0.41661986871622503

julia&gt; rand(u, 2, 3) # Generate an random 2*3 array.
2×3 Array{Float64,2}:
 0.732685   0.820175  0.802848
 0.0101692  0.825207  0.29864 

julia&gt; A = Array{Float64}(3, 4);

julia&gt; rand!(u, A) # Fill an array with random numbers.
3×4 Array{Float64,2}:
 0.855138  0.193661  0.436228  0.124267
 0.368412  0.270245  0.161688  0.874174
 0.931785  0.566008  0.373064  0.432936
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> VSL

julia<span class="pl-k">&gt;</span> brng <span class="pl-k">=</span> <span class="pl-c1">BasicRandomNumberGenerator</span>(VSL_BRNG_MT19937, <span class="pl-c1">12345</span>);
<span class="pl-c"><span class="pl-c">#</span> A BRNG created, in which 12345 is the random seed.</span>

julia<span class="pl-k">&gt;</span> u <span class="pl-k">=</span> <span class="pl-c1">Uniform</span>(brng, <span class="pl-c1">0.0</span>, <span class="pl-c1">1.0</span>); <span class="pl-c"><span class="pl-c">#</span> Create a uniform distribution between 0.0 and 1.0.</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">rand</span>(u) <span class="pl-c"><span class="pl-c">#</span> Generate one random number.</span>
<span class="pl-c1">0.41661986871622503</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">rand</span>(u, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>) <span class="pl-c"><span class="pl-c">#</span> Generate an random 2*3 array.</span>
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">3</span> Array{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">0.732685</span>   <span class="pl-c1">0.820175</span>  <span class="pl-c1">0.802848</span>
 <span class="pl-c1">0.0101692</span>  <span class="pl-c1">0.825207</span>  <span class="pl-c1">0.29864</span> 

julia<span class="pl-k">&gt;</span> A <span class="pl-k">=</span> <span class="pl-c1">Array</span><span class="pl-c1">{Float64}</span>(<span class="pl-c1">3</span>, <span class="pl-c1">4</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">rand!</span>(u, A) <span class="pl-c"><span class="pl-c">#</span> Fill an array with random numbers.</span>
<span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">4</span> Array{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">0.855138</span>  <span class="pl-c1">0.193661</span>  <span class="pl-c1">0.436228</span>  <span class="pl-c1">0.124267</span>
 <span class="pl-c1">0.368412</span>  <span class="pl-c1">0.270245</span>  <span class="pl-c1">0.161688</span>  <span class="pl-c1">0.874174</span>
 <span class="pl-c1">0.931785</span>  <span class="pl-c1">0.566008</span>  <span class="pl-c1">0.373064</span>  <span class="pl-c1">0.432936</span></pre></div>
<h3><a id="user-content-basic-random-number-generators" class="anchor" aria-hidden="true" href="#basic-random-number-generators"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Basic random number generators</h3>
<p>Use the Enum <code>BRNGType</code> to set the type of BRNG.</p>
<table>
<thead>
<tr>
<th>BRNGType Enum</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>VSL_BRNG_MCG31</code></td>
</tr>
<tr>
<td><code>VSL_BRNG_R250</code></td>
</tr>
<tr>
<td><code>VSL_BRNG_MRG32K3A</code></td>
</tr>
<tr>
<td><code>VSL_BRNG_MCG59</code></td>
</tr>
<tr>
<td><code>VSL_BRNG_WH</code></td>
</tr>
<tr>
<td><code>VSL_BRNG_SOBOL</code></td>
</tr>
<tr>
<td><code>VSL_BRNG_NIEDERR</code></td>
</tr>
<tr>
<td><code>VSL_BRNG_MT19937</code></td>
</tr>
<tr>
<td><code>VSL_BRNG_MT2203</code></td>
</tr>
<tr>
<td><code>VSL_BRNG_SFMT19937</code></td>
</tr>
<tr>
<td><code>VSL_BRNG_NONDETERM</code></td>
</tr>
<tr>
<td><code>VSL_BRNG_ARS5</code></td>
</tr>
<tr>
<td><code>VSL_BRNG_PHILOX4X32X10</code></td>
</tr>
</tbody>
</table>
<h3><a id="user-content-supported-distributions" class="anchor" aria-hidden="true" href="#supported-distributions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Supported distributions</h3>
<p>Contigurous: <code>Uniform</code>, <code>Gaussian</code>, <code>GaussianMV</code>, <code>Exponential</code>, <code>Laplace</code>,
<code>Weibull</code>, <code>Cauchy</code>, <code>Rayleigh</code>, <code>Lognormal</code>, <code>Gumbel</code>, <code>Gamma</code>, <code>Beta</code></p>
<p>Discrete: <code>UniformDiscrete</code>, <code>UniformBits</code>, <code>UniformBits32</code>, <code>UniformBits64</code>, <code>Bernoulli</code>,
<code>Geometric</code>, <code>Binomial</code>, <code>Hypergeometric</code>, <code>Poisson</code>, <code>PoissonV</code>, <code>NegBinomial</code></p>
<h3><a id="user-content-notes" class="anchor" aria-hidden="true" href="#notes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Notes</h3>
<p>Most of the discrete distributions return values of 32-bit integer. Please be careful when using those distributions.</p>
<p>For more information, please refer to the
<a href="https://software.intel.com/en-us/articles/mkl-reference-manual" rel="nofollow">Intel® Math Kernel Library Developer Reference</a></p>
<h2><a id="user-content-license" class="anchor" aria-hidden="true" href="#license"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>License</h2>
<p><a href="https://sunoru.mit-license.org" rel="nofollow">MIT license</a></p>
</article></div>