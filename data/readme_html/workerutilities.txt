<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-workerutilitiesjl" class="anchor" aria-hidden="true" href="#workerutilitiesjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>WorkerUtilities.jl</h1>
<p><em>Utilities for working with multithreaded workers for Julia services and applications</em></p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>The package is registered in the <a href="https://github.com/JuliaRegistries/General"><code>General</code></a> registry and so can be installed at the REPL with <code>] add WorkerUtilities</code>.</p>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<h3><a id="user-content-workerutilitiesinit" class="anchor" aria-hidden="true" href="#workerutilitiesinit"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><code>WorkerUtilities.init</code></h3>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="WorkerUtilities.init(nworkers=Threads.nthreads() - 1)
"><pre><code>WorkerUtilities.init(nworkers=Threads.nthreads() - 1)
</code></pre></div>
<p>Initialize background workers that will execute tasks spawned via
<a href="@ref"><code>WorkerUtilities.@spawn</code></a>. If <code>nworkers == 1</code>, a single worker
will be started on thread 1 where tasks will be executed in contention
with other thread 1 work. Background worker tasks can be inspected by
looking at <code>WorkerUtilities.WORKER_TASKS</code>.</p>
<h3><a id="user-content-workerutilitiesspawn" class="anchor" aria-hidden="true" href="#workerutilitiesspawn"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><code>WorkerUtilities.@spawn</code></h3>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="WorkerUtilities.@spawn expr
WorkerUtilities.@spawn passthroughstorage expr
"><pre><code>WorkerUtilities.@spawn expr
WorkerUtilities.@spawn passthroughstorage expr
</code></pre></div>
<p>Similar to <code>Threads.@spawn</code>, schedule and execute a task (given by <code>expr</code>)
that will be run on a "background worker" (see <a href="(@ref)"><code>WorkerUtilities.init</code></a>).</p>
<p>In the 2-argument invocation, <code>passthroughstorage</code> controls whether the task-local storage of the
<code>current_task()</code> should be "passed through" to the spawned task.</p>
<h3><a id="user-content-lockable" class="anchor" aria-hidden="true" href="#lockable"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><code>Lockable</code></h3>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="Lockable(value, lock = ReentrantLock())
"><pre><code>Lockable(value, lock = ReentrantLock())
</code></pre></div>
<p>Creates a <code>Lockable</code> object that wraps <code>value</code> and
associates it with the provided <code>lock</code>.</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="lock(f::Function, l::Lockable)
"><pre><code>lock(f::Function, l::Lockable)
</code></pre></div>
<p>Acquire the lock associated with <code>l</code>, execute <code>f</code> with the lock held,
and release the lock when <code>f</code> returns. <code>f</code> will receive one positional
argument: the value wrapped by <code>l</code>. If the lock is already locked by a
different task/thread, wait for it to become available.
When this function returns, the <code>lock</code> has been released, so the caller should
not attempt to <code>unlock</code> it.</p>
</article></div>