<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-matrixoptinterfacejl" class="anchor" aria-hidden="true" href="#matrixoptinterfacejl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>MatrixOptInterface.jl</h1>
<p><a href="https://github.com/jump-dev/MatrixOptInterface.jl/actions"><img src="https://github.com/jump-dev/MatrixOptInterface.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/jump-dev/MatrixOptInterface.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/111016eb0e0264fd621254198b250ed566301964fdb37cdb889118f3d0688671/68747470733a2f2f636f6465636f762e696f2f67682f6a756d702d6465762f4d61747269784f7074496e746572666163652e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/jump-dev/MatrixOptInterface.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p><strong>This package is this in early development, feedback is welcome!</strong></p>
<p>An interface for optimization problems in matrix forms.
Several matrix forms are represented in subtypes of
<a href="https://github.com/jump-dev/MathOptInterface.jl"><code>MathOptInterface (MOI)</code></a>
models.
As they implement the MOI API, they can be copied directly to an MOI or JuMP
model.</p>
<p>Here is a simple example copying a linear program represented in its standard
form into JuMP:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="import MatrixOptInterface
const MatOI = MatrixOptInterface
lp = MatOI.LPStandardForm{Float64, Matrix{Float64}}(MOI.MAX_SENSE, [1.0, 0.0], [1.0 1.0], [1.0])

using JuMP
model = Model()
MOI.copy_to(model, lp)
"><pre><span class="pl-k">import</span> MatrixOptInterface
<span class="pl-k">const</span> MatOI <span class="pl-k">=</span> MatrixOptInterface
lp <span class="pl-k">=</span> MatOI<span class="pl-k">.</span><span class="pl-c1">LPStandardForm</span><span class="pl-c1">{Float64, Matrix{Float64}}</span>(MOI<span class="pl-k">.</span>MAX_SENSE, [<span class="pl-c1">1.0</span>, <span class="pl-c1">0.0</span>], [<span class="pl-c1">1.0</span> <span class="pl-c1">1.0</span>], [<span class="pl-c1">1.0</span>])

<span class="pl-k">using</span> JuMP
model <span class="pl-k">=</span> <span class="pl-c1">Model</span>()
MOI<span class="pl-k">.</span><span class="pl-c1">copy_to</span>(model, lp)</pre></div>
<p>Giving some arbitrary names to the variables for pretty printing:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="set_name.(all_variables(model), &quot;x&quot; .* string.(1:2))
print(model)
"><pre><span class="pl-c1">set_name</span>.(<span class="pl-c1">all_variables</span>(model), <span class="pl-s"><span class="pl-pds">"</span>x<span class="pl-pds">"</span></span> <span class="pl-k">.*</span> <span class="pl-c1">string</span>.(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span>))
<span class="pl-c1">print</span>(model)</pre></div>
<p>we get the following output:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="Max x1
Subject to
 x1 + x2 = 1.0
 [x1, x2] ∈ MathOptInterface.Nonnegatives(2)
"><pre><code>Max x1
Subject to
 x1 + x2 = 1.0
 [x1, x2] ∈ MathOptInterface.Nonnegatives(2)
</code></pre></div>
<p>The LP standard form is the the only one implemented in this package.
The 4 different available forms of linear programs are given below.
In each form, <code>sense</code> is a <code>MOI.OptimizationSense</code> so its values
are either <code>MOI.FEASIBILITY_SENSE</code>, <code>MOI.MAX_SENSE</code> or <code>MOI.MIN_SENSE</code>.</p>
<p>An LP standard form with <code>LPStandardForm(sense, c, A, b)</code>:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="sense ⟨c, x⟩
s.t.
Ax == b
 x &gt;= 0
"><pre><code>sense ⟨c, x⟩
s.t.
Ax == b
 x &gt;= 0
</code></pre></div>
<p>An LP geometric form with <code>LPGeometricForm(sense, c, A, b)</code>:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="sense ⟨c, x⟩
s.t.
Ax &lt;= b
"><pre><code>sense ⟨c, x⟩
s.t.
Ax &lt;= b
</code></pre></div>
<p>A generic LP form with <code>LPForm(sense, c, A, c_lb, c_ub, v_lb, v_ub)</code>:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="sense ⟨c, x⟩
s.t.
c_lb &lt;= Ax &lt;= c_ub
v_lb &lt;=  x &lt;= v_ub
"><pre><code>sense ⟨c, x⟩
s.t.
c_lb &lt;= Ax &lt;= c_ub
v_lb &lt;=  x &lt;= v_ub
</code></pre></div>
<p>An LP Solver form with <code>LPSolverForm(sense, c, A, b, senses, v_lb, v_ub)</code>:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="sense ⟨c, x⟩
s.t.
Ax senses b
v_lb &lt;=  x &lt;= v_ub
"><pre><code>sense ⟨c, x⟩
s.t.
Ax senses b
v_lb &lt;=  x &lt;= v_ub
</code></pre></div>
<p>where <code>senses</code> is a vector whose <code>i</code>th entry is either</p>
<ul>
<li><code>MatOI.EQUAL_TO</code> if <code>(Ax)_i = b_i</code>,</li>
<li><code>MatOI.LESS_THAN</code> if <code>(Ax)_i &lt;= b_i</code>,</li>
<li><code>MatOI.GREATER_THAN</code> if <code>(Ax)_i &gt;= b_i</code>.</li>
</ul>
<h2><a id="user-content-transition-from-linprog" class="anchor" aria-hidden="true" href="#transition-from-linprog"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Transition from linprog</h2>
<p>If you are used to <a href="https://github.com/JuliaOpt/MathProgBase.jl"><code>MathProgBase</code></a>'s, MATLAB's or scipy's <code>linprog</code> function, this package provides an easy transition.
The package does not provide a one-shot function that takes the form as input are returns the solution and status as
in general, solvers may have multiple solutions to report and the status cannot be summarized in a single value.
<code>MathOptInterface</code> embraces this complexity and allows to retrieve multiple solutions,
has 4 different solver-independent statuses (<code>MOI.TerminationStatus</code>, <code>MOI.PrimalStatus</code>, <code>MOI.DualStatus</code> and <code>MOI.RawStatusString</code>) and also
allows solvers to provide solver independent statuses.
For these reasons, there is no <code>linprog</code> functions covering all use cases but using this packages one covering your use cases can be implemented in just a few lines:</p>
<ol>
<li>Create the appropriate structure from the matrix data, e.g. <code>LPForm</code>, <code>LPSolverForm</code>, ...</li>
<li>Copy it to a JuMP model or MOI optimizer.</li>
<li>Call <code>JuMP.optimize!</code> or <code>MOI.optimize!</code>.</li>
<li>Retrieve and return solutions and statuses.</li>
</ol>
</article></div>