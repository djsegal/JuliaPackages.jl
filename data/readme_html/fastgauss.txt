<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-fastgaussquadraturejl" class="anchor" aria-hidden="true" href="#fastgaussquadraturejl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>FastGaussQuadrature.jl</h1>
<p><a href="https://JuliaApproximation.github.io/FastGaussQuadrature.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://JuliaApproximation.github.io/FastGaussQuadrature.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a>
<a href="https://github.com/JuliaApproximation/FastGaussQuadrature.jl/actions"><img src="https://github.com/JuliaApproximation/FastGaussQuadrature.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/JuliaApproximation/FastGaussQuadrature.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/4f2b32c7f7b183ec0a1b74535db899978240da20850a6e91efaaf64af1c2375e/68747470733a2f2f636f6465636f762e696f2f67682f4a756c6961417070726f78696d6174696f6e2f466173744761757373517561647261747572652e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/JuliaApproximation/FastGaussQuadrature.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p>A Julia package to compute <code>n</code>-point Gauss quadrature nodes and weights to 16-digit accuracy and in <code>O(n)</code> time.
So far the package includes <code>gausschebyshev()</code>, <code>gausslegendre()</code>, <code>gaussjacobi()</code>, <code>gaussradau()</code>, <code>gausslobatto()</code>, <code>gausslaguerre()</code>, and <code>gausshermite()</code>.
This package is heavily influenced by <a href="http://www.chebfun.org" rel="nofollow">Chebfun</a>.</p>
<p>An introduction to Gauss quadrature can be found <a href="http://en.wikipedia.org/wiki/Gaussian_quadrature" rel="nofollow">here</a>.
For a quirky account on the history of computing Gauss-Legendre quadrature, see <a href="http://pi.math.cornell.edu/~ajt/papers/QuadratureEssay.pdf" rel="nofollow">[6]</a>.</p>
<h2><a id="user-content-our-aims" class="anchor" aria-hidden="true" href="#our-aims"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Our Aims</h2>
<ul>
<li>The fastest Julia code for Gauss quadrature nodes and weights (without tabulation).</li>
<li>Change the perception that Gauss quadrature rules are expensive to compute.</li>
</ul>
<h2><a id="user-content-example-usage" class="anchor" aria-hidden="true" href="#example-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example usage</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; @time nodes, weights = gausslegendre( 100000 );
  0.002192 seconds (10 allocations: 2.289 MiB)

# integrates f(x) = x^2 from -1 to 1
julia&gt; @time dot( weights, nodes.^2 )
  0.000184 seconds (7 allocations: 781.422 KiB)
0.6666666666666665
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">@time</span> nodes, weights <span class="pl-k">=</span> <span class="pl-c1">gausslegendre</span>( <span class="pl-c1">100000</span> );
  <span class="pl-c1">0.002192</span> seconds (<span class="pl-c1">10</span> allocations<span class="pl-k">:</span> <span class="pl-c1">2.289</span> MiB)

<span class="pl-c"><span class="pl-c">#</span> integrates f(x) = x^2 from -1 to 1</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">@time</span> <span class="pl-c1">dot</span>( weights, nodes<span class="pl-k">.^</span><span class="pl-c1">2</span> )
  <span class="pl-c1">0.000184</span> seconds (<span class="pl-c1">7</span> allocations<span class="pl-k">:</span> <span class="pl-c1">781.422</span> KiB)
<span class="pl-c1">0.6666666666666665</span></pre></div>
</article></div>