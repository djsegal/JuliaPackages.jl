<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-reversediffoverload" class="anchor" aria-hidden="true" href="#reversediffoverload"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>ReverseDiffOverload</h1>

<p dir="auto">Reverse mode differentiation for pre-defined functions.</p>
<p dir="auto">Using reverse mode differentiation is very simple, just call,</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="reversediff(function, args...)"><pre><span class="pl-c1">reversediff</span>(<span class="pl-k">function</span>, args<span class="pl-k">...</span>)</pre></div>
<p dir="auto">for instance, to differentiate <code>f</code>, defined by,</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="f(a, b) = begin
    c = a*b
    dot(c, c) + dot(c, b)
end"><pre><span class="pl-en">f</span>(a, b) <span class="pl-k">=</span> <span class="pl-k">begin</span>
    c <span class="pl-k">=</span> a<span class="pl-k">*</span>b
    <span class="pl-c1">dot</span>(c, c) <span class="pl-k">+</span> <span class="pl-c1">dot</span>(c, b)
<span class="pl-k">end</span></pre></div>
<p dir="auto">at, <code>[1. 2; 3 4], [1., 2]</code>, call,</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="reversediff(f, [1. 2; 3 4], [1., 2])"><pre><span class="pl-c1">reversediff</span>(f, [<span class="pl-c1">1.</span> <span class="pl-c1">2</span>; <span class="pl-c1">3</span> <span class="pl-c1">4</span>], [<span class="pl-c1">1.</span>, <span class="pl-c1">2</span>])</pre></div>
<p dir="auto">which returns a tuple containing the return value, and the differential of the return value with respect to every argument,</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="(173.0,(
2x2 Array{Float64,2}:
 11.0  22.0
 24.0  48.0,

[88.0,129.0])"><pre>(<span class="pl-c1">173.0</span>,(
<span class="pl-c1">2</span>x2 Array{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">11.0</span>  <span class="pl-c1">22.0</span>
 <span class="pl-c1">24.0</span>  <span class="pl-c1">48.0</span>,

[<span class="pl-c1">88.0</span>,<span class="pl-c1">129.0</span>])</pre></div>
<h2 dir="auto"><a id="user-content-testing" class="anchor" aria-hidden="true" href="#testing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Testing</h2>
<p dir="auto">It is good practice, at this early stage, to test that <code>reversediff</code> produces the correct results for your problem.
To do such a test on your function, simply call,</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="testdiff(g, args...)"><pre><span class="pl-c1">testdiff</span>(g, args<span class="pl-k">...</span>)</pre></div>
<p dir="auto">for instance,</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="testdiff(f, [1. 2; 3 4], [1., 2])"><pre><span class="pl-c1">testdiff</span>(f, [<span class="pl-c1">1.</span> <span class="pl-c1">2</span>; <span class="pl-c1">3</span> <span class="pl-c1">4</span>], [<span class="pl-c1">1.</span>, <span class="pl-c1">2</span>])</pre></div>
<p dir="auto">An error will be generated if finite difference and our method give different results.</p>
<h2 dir="auto"><a id="user-content-troubleshooting" class="anchor" aria-hidden="true" href="#troubleshooting"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Troubleshooting</h2>
<p dir="auto">Of course, things aren't always quite that simple.
There are three common sources of bugs.
First, <code>reversediff</code> differentiates with respect to every argument, so every argument should have type <code>Float64</code>, or <code>Array{Float64}</code>.  Notice the care taken in the example to make sure that we don't get an array of <code>Int</code>.  Second, the type signature of the function you're trying to differentiate may be too constrained - the function needs to let values of type <code>Call</code> propagate through until they reach known functions.  Notice, <code>f</code>, defined above had no type constraints.  Third, you may be trying to use a function whose differential is not yet defined.  You can provide define new definitions using the macro <code>@d1</code>, for one argument functions, or <code>@d2</code>, for two argument functions, for instance, to redefine the differentials for <code>*</code>, we might use,</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="ReverseDiff.@d2(*, d*y', x'*d)"><pre>ReverseDiff<span class="pl-k">.</span><span class="pl-c1">@d2</span>(<span class="pl-k">*</span>, d<span class="pl-k">*</span>y<span class="pl-k">'</span>, x<span class="pl-k">'</span><span class="pl-k">*</span>d)</pre></div>
<p dir="auto">Where <code>x</code> is the first argument to the function, <code>y</code> is the second argument, and <code>d</code> is the differential of the objective with respect to the result of the function call.  Note that you can also annotate the types of <code>x</code> and <code>y</code>, using,</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="ReverseDiff.@d2(*, d*y', x'*d, AbstractArray, AbstractArray)"><pre>ReverseDiff<span class="pl-k">.</span><span class="pl-c1">@d2</span>(<span class="pl-k">*</span>, d<span class="pl-k">*</span>y<span class="pl-k">'</span>, x<span class="pl-k">'</span><span class="pl-k">*</span>d, AbstractArray, AbstractArray)</pre></div>
</article></div>