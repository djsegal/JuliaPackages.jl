<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-tilemaps" class="anchor" aria-hidden="true" href="#tilemaps"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>TileMaps</h1>
<p dir="auto"><code>TileMaps</code> is a package that makes it simple to create 2D tile maps (and higher dimensional equivalents) in Julia. It is designed to be lightweight and fast, and have minimal dependencies.</p>
<p dir="auto"><strong>Note:</strong> This package does not export any names. The examples below that demonstrate the use of this package assume that it has been loaded via <code>import TileMaps as TM</code>.</p>
<p dir="auto"><strong>Acknowledgements:</strong> Big thanks to <a href="https://github.com/findmyway">Jun Tian</a> (@findmyway) for initially introducing the core ideas of this package in <a href="https://github.com/JuliaReinforcementLearning/GridWorlds.jl"><code>GridWorlds</code></a>.</p>
<h3 dir="auto"><a id="user-content-index" class="anchor" aria-hidden="true" href="#index"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Index</h3>
<ol dir="auto">
<li><a href="#objectindexablearray">ObjectIndexableArray</a></li>
<li><a href="#objects">Objects</a></li>
<li><a href="#tilemap">TileMap</a></li>
<li><a href="#constructing-a-tilemap">Constructing a TileMap</a></li>
<li><a href="#indexing-a-tilemap">Indexing a TileMap</a></li>
<li><a href="#visualizing-a-tilemap">Visualizing a TileMap</a></li>
</ol>
<h3 dir="auto"><a id="user-content-objectindexablearray" class="anchor" aria-hidden="true" href="#objectindexablearray"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>ObjectIndexableArray</code></h3>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="struct ObjectIndexableArray{T, N, A, O} &lt;: AbstractArray{T, N}
    array::A
end"><pre class="notranslate"><code>struct ObjectIndexableArray{T, N, A, O} &lt;: AbstractArray{T, N}
    array::A
end
</code></pre></div>
<p dir="auto">An instance of <code>ObjectIndexableArray</code>, referred to as <code>object_indexable_array</code> here, simply wraps an <code>array</code> (whose type is captured by the type parameter <code>A</code> above) and allows us to index its first dimension using a <a href="https://docs.julialang.org/en/v1/manual/types/#man-singleton-types" rel="nofollow">singleton</a> object or an array of singleton objects (in addition to all the other ways of indexing the wrapped <code>array</code>). Information about the objects is stored in the type parameter <code>O</code> above which is essentially the type of tuple of objects along the <code>num_objects</code> dimension. Note that <code>size(object_indexable_array, 1)</code> should be equal to the number of elements in the type parameter <code>O</code>.</p>
<p dir="auto"><code>size(object_indexable_array, 1)</code> should be equal to the number of elements in the type parameter <code>O</code>.</p>
<h3 dir="auto"><a id="user-content-objects" class="anchor" aria-hidden="true" href="#objects"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Objects</h3>
<p dir="auto">Object types are <a href="https://docs.julialang.org/en/v1/manual/types/#man-singleton-types" rel="nofollow">singletons</a> (structs with no fields). Here are the example objects that are provided in this package:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="abstract type AbstractObject end

struct ExampleObject1 &lt;: AbstractObject end
const EXAMPLE_OBJECT_1 = ExampleObject1()

struct ExampleObject2 &lt;: AbstractObject end
const EXAMPLE_OBJECT_2 = ExampleObject2()

struct ExampleObject3 &lt;: AbstractObject end
const EXAMPLE_OBJECT_3 = ExampleObject3()"><pre class="notranslate"><code>abstract type AbstractObject end

struct ExampleObject1 &lt;: AbstractObject end
const EXAMPLE_OBJECT_1 = ExampleObject1()

struct ExampleObject2 &lt;: AbstractObject end
const EXAMPLE_OBJECT_2 = ExampleObject2()

struct ExampleObject3 &lt;: AbstractObject end
const EXAMPLE_OBJECT_3 = ExampleObject3()
</code></pre></div>
<p dir="auto">You can crate your own objects like this:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; struct MyObject &lt;: TM.AbstractObject end

julia&gt;"><pre class="notranslate"><code>julia&gt; struct MyObject &lt;: TM.AbstractObject end

julia&gt;
</code></pre></div>
<p dir="auto">For an <code>object_indexable_array</code>, you can get the type of tuple of objects in it using <code>TM.get_objects_type(object_indexable_array)</code>, or you can get the tuple of objects itself, using <code>TM.get_objects(object_indexable_array)</code>.</p>
<h3 dir="auto"><a id="user-content-tilemap" class="anchor" aria-hidden="true" href="#tilemap"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>TileMap</code></h3>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="const TileMap{O} = ObjectIndexableArray{Bool, 3, BitArray{3}, O}"><pre class="notranslate"><code>const TileMap{O} = ObjectIndexableArray{Bool, 3, BitArray{3}, O}
</code></pre></div>
<p dir="auto">An instance of <code>TileMap</code>, referred to as <code>tile_map</code> here, wraps an <code>array</code> of type <code>BitArray{3}</code> and is of size <code>(num_objects, height, width)</code>, which encodes information about the presence or absence of objects across the tiles using Boolean values. Each tile can contain multiple objects, which is captured by a multi-hot encoding along the first dimension (<code>num_objects</code> dimension) of the <code>array</code>.</p>
<h3 dir="auto"><a id="user-content-constructing-a-tilemap" class="anchor" aria-hidden="true" href="#constructing-a-tilemap"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Constructing a <code>TileMap</code></h3>
<p dir="auto">You can instantiate a <code>TileMap</code> using the following constructor that are provided by this package:</p>
<ol dir="auto">
<li>
<p dir="auto">Create an empty <code>tile_map</code> using a tuple of objects and the desired height (8) and width(16):</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; tile_map = TM.TileMap((TM.EXAMPLE_OBJECT_1, TM.EXAMPLE_OBJECT_2, TM.EXAMPLE_OBJECT_3), 8, 16);

julia&gt;"><pre class="notranslate"><code>julia&gt; tile_map = TM.TileMap((TM.EXAMPLE_OBJECT_1, TM.EXAMPLE_OBJECT_2, TM.EXAMPLE_OBJECT_3), 8, 16);

julia&gt;
</code></pre></div>
</li>
<li>
<p dir="auto">Create a <code>tile_map</code> using a tuple of objects and an existing <code>array</code>:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; tile_map = TM.TileMap((TM.EXAMPLE_OBJECT_1, TM.EXAMPLE_OBJECT_2, TM.EXAMPLE_OBJECT_3), rand(Bool, 3, 8, 16) |&gt; BitArray);

julia&gt;"><pre class="notranslate"><code>julia&gt; tile_map = TM.TileMap((TM.EXAMPLE_OBJECT_1, TM.EXAMPLE_OBJECT_2, TM.EXAMPLE_OBJECT_3), rand(Bool, 3, 8, 16) |&gt; BitArray);

julia&gt;
</code></pre></div>
</li>
</ol>
<h3 dir="auto"><a id="user-content-indexing-a-tilemap" class="anchor" aria-hidden="true" href="#indexing-a-tilemap"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Indexing a <code>TileMap</code></h3>
<p dir="auto">Because of <code>TileMap &lt;: ObjectIndexableArray</code>, we can index the first dimension of a <code>tile_map</code> in a variety of ways. For example, like this:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; tile_map[TM.EXAMPLE_OBJECT_3, 4, 6]
true

julia&gt; tile_map[TM.EXAMPLE_OBJECT_3, 2:4, 6:7]
3×2 BitMatrix:
 1  1
 0  1
 1  1

julia&gt; tile_map[[TM.EXAMPLE_OBJECT_3, TM.EXAMPLE_OBJECT_1], 5, 8]
2-element BitVector:
 0
 1

julia&gt;"><pre class="notranslate"><code>julia&gt; tile_map[TM.EXAMPLE_OBJECT_3, 4, 6]
true

julia&gt; tile_map[TM.EXAMPLE_OBJECT_3, 2:4, 6:7]
3×2 BitMatrix:
 1  1
 0  1
 1  1

julia&gt; tile_map[[TM.EXAMPLE_OBJECT_3, TM.EXAMPLE_OBJECT_1], 5, 8]
2-element BitVector:
 0
 1

julia&gt;
</code></pre></div>
<h3 dir="auto"><a id="user-content-visualizing-a-tilemap" class="anchor" aria-hidden="true" href="#visualizing-a-tilemap"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Visualizing a <code>TileMap</code></h3>
<p dir="auto">Using the <a href="https://github.com/KristofferC/Crayons.jl"><code>Crayons</code></a> package, each object can be displayed as a colored Unicode character. For example, like this:</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/Sid-Bhatia-0/TileMaps.jl/blob/master/assets/example_object_1.png"><img src="https://github.com/Sid-Bhatia-0/TileMaps.jl/raw/master/assets/example_object_1.png" style="max-width: 100%;"></a></p>
<p dir="auto">When you create your custom object like this, for example,</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/Sid-Bhatia-0/TileMaps.jl/blob/master/assets/my_object.png"><img src="https://github.com/Sid-Bhatia-0/TileMaps.jl/raw/master/assets/my_object.png" style="max-width: 100%;"></a></p>
<p dir="auto">you may also want to implement the following methods: <code>get_char(::MyObject)</code> (especially this one), <code>get_foreground_color(::MyObject)</code>, and <code>get_backround_color(::MyObject)</code>. If you don't do so, <code>MY_OBJECT</code> will be displayed based on the following default methods as defined in this package:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="get_char(object::Any) = '?'
get_foreground_color(object::Any) = :white
get_backround_color(object::Any) = :nothing"><pre class="notranslate"><code>get_char(object::Any) = '?'
get_foreground_color(object::Any) = :white
get_backround_color(object::Any) = :nothing
</code></pre></div>
<p dir="auto">A <code>tile_map</code> is displayed as a 2D grid of colored Unicode characters, with one character displayed per tile. Only the first object present (along the first dimension (<code>num_objects</code> dimension) of the <code>array</code>) at a tile is displayed for that tile, even though there may be multiple objects present at that tile.</p>
<p dir="auto">If there are no objects present at a tile, then the <code>⋅</code> character is displayed for that tile (with white color and no background). This behaviour can be customized by overriding the following methods:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="get_char(::Nothing) = '⋅'
get_foreground_color(::Nothing) = :white
get_background_color(::Nothing) = :nothing"><pre class="notranslate"><code>get_char(::Nothing) = '⋅'
get_foreground_color(::Nothing) = :white
get_background_color(::Nothing) = :nothing
</code></pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/Sid-Bhatia-0/TileMaps.jl/blob/master/assets/tile_map.png"><img src="https://github.com/Sid-Bhatia-0/TileMaps.jl/raw/master/assets/tile_map.png" style="max-width: 100%;"></a></p>
<p dir="auto">Note that the <code>get_char</code>, <code>get_foreground_color</code>, and <code>get_background_color</code> methods have purposefully not been explictly defined for the <code>TM.ExampleObject3</code> type in order to demonstrate the fallback to the default character and colors, which is why <code>TM.EXAMPLE_OBJECT_3</code> is displayed using a white colored <code>?</code> with no background.</p>
<p dir="auto">We can also inspect each kind of object in the <code>tile_map</code> separately using the <code>show_layers</code> method. This is very handy for debugging:</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/Sid-Bhatia-0/TileMaps.jl/blob/master/assets/show_layers.png"><img src="https://github.com/Sid-Bhatia-0/TileMaps.jl/raw/master/assets/show_layers.png" style="max-width: 100%;"></a></p>
<p dir="auto">Here we have utilized only a limited number of features from the <code>Crayons</code> package in order to show an an example of how one may want to display a <code>tile_map</code>. <code>Crayons</code> has other features that you can play with to suit your needs.</p>
</article></div>