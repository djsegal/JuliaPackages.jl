<div id="readme" class="md" data-path="readme.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p><a href="https://travis-ci.org/haampie/IncompleteLU.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/2c9d5663a8143ecbb4a892d6094d2952728df191/68747470733a2f2f7472617669732d63692e6f72672f6861616d7069652f496e636f6d706c6574654c552e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/haampie/IncompleteLU.jl.svg?branch=master" style="max-width:100%;"></a> <a href="https://codecov.io/gh/haampie/IncompleteLU.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/39aa95ab44c9f77547f40182e391ede684dc11d6/68747470733a2f2f636f6465636f762e696f2f67682f6861616d7069652f496e636f6d706c6574654c552e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/haampie/IncompleteLU.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<h1><a id="user-content-ilu-for-sparsematrixcsc" class="anchor" aria-hidden="true" href="#ilu-for-sparsematrixcsc"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>ILU for SparseMatrixCSC</h1>
<p>This package implements the left-looking or Crout version of ILU for
the <code>SparseMatrixCSC</code> type. It only exports the function <code>ilu</code>.</p>
<h2><a id="user-content-how-to-install" class="anchor" aria-hidden="true" href="#how-to-install"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>How to install</h2>
<p>In the REPL hit <code>]</code> to open the package manager and run</p>
<div class="highlight highlight-source-julia"><pre>(v1<span class="pl-c1">.0</span>) pkg<span class="pl-k">&gt;</span> add IncompleteLU</pre></div>
<p>The package is then available via</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> IncompleteLU</pre></div>
<h2><a id="user-content-when-to-use-this-package" class="anchor" aria-hidden="true" href="#when-to-use-this-package"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>When to use this package</h2>
<p>Whenever you need an incomplete factorization of a sparse and <em>non-symmetric</em> matrix.</p>
<p>The package also provides means to apply the factorization in-place via <code>ldiv!</code>. This is
useful in the context of preconditioning. See the example below.</p>
<h2><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example</h2>
<p>Using a drop tolerance of <code>0.01</code>, we get a reasonable preconditioner with a bit of fill-in.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">&gt;</span> <span class="pl-k">using</span> IncompleteLU, LinearAlgebra, SparseArrays
<span class="pl-k">&gt;</span> <span class="pl-k">using</span> BenchmarkTools
<span class="pl-k">&gt;</span> A <span class="pl-k">=</span> <span class="pl-c1">sprand</span>(<span class="pl-c1">1000</span>, <span class="pl-c1">1000</span>, <span class="pl-c1">5</span> <span class="pl-k">/</span> <span class="pl-c1">1000</span>) <span class="pl-k">+</span> <span class="pl-c1">10</span>I
<span class="pl-k">&gt;</span> fact <span class="pl-k">=</span> <span class="pl-c1">@btime</span> <span class="pl-c1">ilu</span>(<span class="pl-k">$</span>A, τ <span class="pl-k">=</span> <span class="pl-c1">0.001</span>)
  <span class="pl-c1">2.894</span> ms (<span class="pl-c1">90</span> allocations<span class="pl-k">:</span> <span class="pl-c1">1.18</span> MiB)
<span class="pl-k">&gt;</span> <span class="pl-c1">norm</span>((fact<span class="pl-k">.</span>L <span class="pl-k">+</span> I) <span class="pl-k">*</span> fact<span class="pl-k">.</span>U<span class="pl-k">'</span> <span class="pl-k">-</span> A)
<span class="pl-c1">0.05736313452207798</span>
<span class="pl-k">&gt;</span> <span class="pl-c1">nnz</span>(fact) <span class="pl-k">/</span> <span class="pl-c1">nnz</span>(A)
<span class="pl-c1">3.6793806030969844</span></pre></div>
<p>Full LU is obtained when the drop tolerance is <code>0.0</code>.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">&gt;</span> fact <span class="pl-k">=</span> <span class="pl-c1">@btime</span> <span class="pl-c1">ilu</span>(<span class="pl-k">$</span>A, τ <span class="pl-k">=</span> <span class="pl-c1">0.</span>)
  <span class="pl-c1">209.293</span> ms (<span class="pl-c1">106</span> allocations<span class="pl-k">:</span> <span class="pl-c1">12.18</span> MiB)
<span class="pl-k">&gt;</span> <span class="pl-c1">norm</span>((fact<span class="pl-k">.</span>L <span class="pl-k">+</span> I) <span class="pl-k">*</span> fact<span class="pl-k">.</span>U<span class="pl-k">'</span> <span class="pl-k">-</span> A)
<span class="pl-c1">1.5262736852530086e-13</span>
<span class="pl-k">&gt;</span> <span class="pl-c1">nnz</span>(fact) <span class="pl-k">/</span> <span class="pl-c1">nnz</span>(A)
<span class="pl-c1">69.34213528932355</span></pre></div>
<h2><a id="user-content-preconditioner" class="anchor" aria-hidden="true" href="#preconditioner"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Preconditioner</h2>
<p>ILU is typically used as preconditioner for iterative methods. For instance</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> IterativeSolvers, IncompleteLU
<span class="pl-k">using</span> SparseArrays, LinearAlgebra
<span class="pl-k">using</span> BenchmarkTools
<span class="pl-k">using</span> Plots

<span class="pl-s"><span class="pl-pds">"""</span></span>
<span class="pl-s">Benchmarks a non-symmetric n × n × n problem</span>
<span class="pl-s">with and without the ILU preconditioner.</span>
<span class="pl-s"><span class="pl-pds">"""</span></span>
<span class="pl-k">function</span> <span class="pl-en">mytest</span>(n <span class="pl-k">=</span> <span class="pl-c1">64</span>)
    N <span class="pl-k">=</span> n<span class="pl-k">^</span><span class="pl-c1">3</span>

    A <span class="pl-k">=</span> <span class="pl-c1">spdiagm</span>(
      <span class="pl-k">-</span><span class="pl-c1">1</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">fill</span>(<span class="pl-k">-</span><span class="pl-c1">1.0</span>, n <span class="pl-k">-</span> <span class="pl-c1">1</span>), 
       <span class="pl-c1">0</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">fill</span>(<span class="pl-c1">3.0</span>, n), 
       <span class="pl-c1">1</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">fill</span>(<span class="pl-k">-</span><span class="pl-c1">2.0</span>, n <span class="pl-k">-</span> <span class="pl-c1">1</span>)
    )
    Id <span class="pl-k">=</span> <span class="pl-c1">sparse</span>(<span class="pl-c1">1.0</span>I, n, n)
    A <span class="pl-k">=</span> <span class="pl-c1">kron</span>(A, Id) <span class="pl-k">+</span> <span class="pl-c1">kron</span>(Id, A)
    A <span class="pl-k">=</span> <span class="pl-c1">kron</span>(A, Id) <span class="pl-k">+</span> <span class="pl-c1">kron</span>(Id, A)
    x <span class="pl-k">=</span> <span class="pl-c1">ones</span>(N)
    b <span class="pl-k">=</span> A <span class="pl-k">*</span> x

    LU <span class="pl-k">=</span> <span class="pl-c1">ilu</span>(A, τ <span class="pl-k">=</span> <span class="pl-c1">0.1</span>)
    <span class="pl-c1">@show</span> <span class="pl-c1">nnz</span>(LU) <span class="pl-k">/</span> <span class="pl-c1">nnz</span>(A)

    <span class="pl-c"><span class="pl-c">#</span> Bench</span>
    prec <span class="pl-k">=</span> <span class="pl-c1">@benchmark</span> <span class="pl-c1">ilu</span>(<span class="pl-k">$</span>A, τ <span class="pl-k">=</span> <span class="pl-c1">0.1</span>)
    <span class="pl-c1">@show</span> prec
    with <span class="pl-k">=</span> <span class="pl-c1">@benchmark</span> <span class="pl-c1">bicgstabl</span>(<span class="pl-k">$</span>A, <span class="pl-k">$</span>b, <span class="pl-c1">2</span>, Pl <span class="pl-k">=</span> <span class="pl-k">$</span>LU, max_mv_products <span class="pl-k">=</span> <span class="pl-c1">2000</span>)
    <span class="pl-c1">@show</span> with
    without <span class="pl-k">=</span> <span class="pl-c1">@benchmark</span> <span class="pl-c1">bicgstabl</span>(<span class="pl-k">$</span>A, <span class="pl-k">$</span>b, <span class="pl-c1">2</span>, max_mv_products <span class="pl-k">=</span> <span class="pl-c1">2000</span>)
    <span class="pl-c1">@show</span> without

    <span class="pl-c"><span class="pl-c">#</span> Result</span>
    x_with, hist_with <span class="pl-k">=</span> <span class="pl-c1">bicgstabl</span>(A, b, <span class="pl-c1">2</span>, Pl <span class="pl-k">=</span> LU, max_mv_products <span class="pl-k">=</span> <span class="pl-c1">2000</span>, log <span class="pl-k">=</span> <span class="pl-c1">true</span>)
    x_without, hist_without <span class="pl-k">=</span> <span class="pl-c1">bicgstabl</span>(A, b, <span class="pl-c1">2</span>, max_mv_products <span class="pl-k">=</span> <span class="pl-c1">2000</span>, log <span class="pl-k">=</span> <span class="pl-c1">true</span>)

    <span class="pl-c1">@show</span> <span class="pl-c1">norm</span>(b <span class="pl-k">-</span> A <span class="pl-k">*</span> x_with) <span class="pl-k">/</span> <span class="pl-c1">norm</span>(b) 
    <span class="pl-c1">@show</span> <span class="pl-c1">norm</span>(b <span class="pl-k">-</span> A <span class="pl-k">*</span> x_without) <span class="pl-k">/</span> <span class="pl-c1">norm</span>(b)

    <span class="pl-c1">plot</span>(hist_with[<span class="pl-c1">:resnorm</span>], yscale <span class="pl-k">=</span> <span class="pl-c1">:log10</span>, label <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>With ILU preconditioning<span class="pl-pds">"</span></span>, xlabel <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>Iteration<span class="pl-pds">"</span></span>, ylabel <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>Residual norm (preconditioned)<span class="pl-pds">"</span></span>, mark <span class="pl-k">=</span> <span class="pl-c1">:x</span>)
    <span class="pl-c1">plot!</span>(hist_without[<span class="pl-c1">:resnorm</span>], label <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>Without preconditioning<span class="pl-pds">"</span></span>, mark <span class="pl-k">=</span> <span class="pl-c1">:x</span>)
<span class="pl-k">end</span>

<span class="pl-c1">mytest</span>()</pre></div>
<p>Outputs</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-en">nnz</span>(LU) <span class="pl-k">/</span> <span class="pl-en">nnz</span>(A) <span class="pl-k">=</span> <span class="pl-c1">2.1180353639352374</span>
prec <span class="pl-k">=</span> <span class="pl-c1">Trial</span>(<span class="pl-c1">443.781</span> ms)
with <span class="pl-k">=</span> <span class="pl-c1">Trial</span>(<span class="pl-c1">766.141</span> ms)
without <span class="pl-k">=</span> <span class="pl-c1">Trial</span>(<span class="pl-c1">2.595</span> s)
<span class="pl-en">norm</span>(b <span class="pl-k">-</span> A <span class="pl-k">*</span> x_with) <span class="pl-k">/</span> <span class="pl-en">norm</span>(b) <span class="pl-k">=</span> <span class="pl-c1">2.619046427010899e-9</span>
<span class="pl-en">norm</span>(b <span class="pl-k">-</span> A <span class="pl-k">*</span> x_without) <span class="pl-k">/</span> <span class="pl-en">norm</span>(b) <span class="pl-k">=</span> <span class="pl-c1">1.2501603557459283e-8</span></pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/3cfc3a5b98cca3acf0b1fa912e078735ce7b709c/68747470733a2f2f6861616d7069652e6769746875622e696f2f496e636f6d706c6574654c552e6a6c2f726573696475616c332e706e67"><img src="https://camo.githubusercontent.com/3cfc3a5b98cca3acf0b1fa912e078735ce7b709c/68747470733a2f2f6861616d7069652e6769746875622e696f2f496e636f6d706c6574654c552e6a6c2f726573696475616c332e706e67" alt="Residual norm with preconditioner" data-canonical-src="https://haampie.github.io/IncompleteLU.jl/residual3.png" style="max-width:100%;"></a></p>
<h2><a id="user-content-the-algorithm" class="anchor" aria-hidden="true" href="#the-algorithm"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>The algorithm</h2>
<p>The basic algorithm loops roughly as follows:</p>
<pre><code>for k = 1 : n
  row = zeros(n); row[k:n] = A[k,k:n]
  col = zeros(n); col[k+1:n] = A[k+1:n,k]

  for i = 1 : k - 1 where L[k,i] != 0
    row -= L[k,i] * U[i,k:n]
  end

  for i = 1 : k - 1 where U[i,k] != 0
    col -= U[i,k] * L[k+1:n,i]
  end

  # Apply a dropping rule in row and col

  U[k,:] = row
  L[:,k] = col / U[k,k]
  L[k,k] = 1
end
</code></pre>
<p>which means that at each step <code>k</code> a complete row and column are computed based on the previous rows and columns:</p>
<pre><code>          k
+---+---+---+---+---+---+---+---+
| \ |   | x | x | x | x | x | x |
+---+---+---+---+---+---+---+---+
|   | \ | x | x | x | x | x | x |
+---+---+---+---+---+---+---+---+
|   |   | . | . | . | . | . | . | k
+---+---+---+---+---+---+---+---+
| x | x | . | \ |   |   |   |   |
+---+---+---+---+---+---+---+---+
| x | x | . |   | \ |   |   |   |
+---+---+---+---+---+---+---+---+
| x | x | . |   |   | \ |   |   |
+---+---+---+---+---+---+---+---+
| x | x | . |   |   |   | \ |   |
+---+---+---+---+---+---+---+---+
| x | x | . |   |   |   |   | \ |
+---+---+---+---+---+---+---+---+

col and row are the .'s, updated by the x's.
</code></pre>
<p>At step <code>k</code> we load (part of) a row and column of the matrix <code>A</code>, and subtract the previous rows and columns times a scalar (basically a SpMV product). The problem is that our matrix is column-major, so that loading a row is not cheap. Secondly, it makes sense to store the <code>L</code> factor column-wise and the <code>U</code> factor row-wise (so that we can append columns and rows without data movement), yet we need access to a row of <code>L</code> and a column of <code>U</code>.</p>
<p>The latter problem can be worked around without expensive searches. It's basically smart bookkeeping: going from step <code>k</code> to <code>k+1</code> requires updating indices to the next nonzero of each row of <code>U</code> after column <code>k</code>. If you now store for each column of <code>U</code> a list of nonzero indices, this is the moment you can update it. Similarly for the <code>L</code> factor.</p>
<p>The matrix <code>A</code> can be read row by row as well with the same trick.</p>
<h2><a id="user-content-accumulating-a-new-sparse-row-or-column" class="anchor" aria-hidden="true" href="#accumulating-a-new-sparse-row-or-column"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Accumulating a new sparse row or column</h2>
<p>Throughout the steps two temporary row and column accumulators are used to store the linear combinations of previous sparse rows and columns. There are two implementations of this accumulator: the <code>SparseVectorAccumulator</code> performs insertion in <code>O(1)</code>, but stores the indices unordered; therefore a sort is required when appending to the <code>SparseMatrixCSC</code>. The <code>InsertableSparseVector</code> performs insertion sort, which can be slow, but turns out to be fast in practice. The latter is a result of insertion itself being an <code>O(1)</code> operation due to a linked list structure, and the fact that sorted vectors are added, so that the linear scan does not have to restart at each insertion.</p>
<p>The advantage of <code>SparseVectorAccumulator</code> over <code>InsertableSparseVector</code> is that the former postpones sorting until after dropping, while <code>InsertableSparseVector</code> also performs insertion sort on dropped values.</p>
<h2><a id="user-content-todo" class="anchor" aria-hidden="true" href="#todo"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Todo</h2>
<p>The method does not implement scaling techniques, so the <code>τ</code> parameter is really an
absolute dropping tolerance parameter.</p>
</article></div>