<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-opengene" class="anchor" aria-hidden="true" href="#opengene"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>OpenGene</h1>
<p><code>OpenGene.jl</code> project aims to provide basic functions and rich utilities to analyze sequencing data, with the beautiful language <a href="http://julialang.org/" rel="nofollow">Julia</a></p>
<p>If you want to be an author of OpenGene, please open an issue, or make a pull request.</p>
<p>If you are looking for BAM/SAM read/write, see <a href="https://github.com/OpenGene/HTSLIB.jl">OpenGene/HTSLIB</a><br>
Bug reports and feature requests, please <a href="https://github.com/OpenGene/OpenGene.jl/issues/new">file an issue</a></p>
<h2><a id="user-content-julia" class="anchor" aria-hidden="true" href="#julia"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Julia</h2>
<p>Julia is a fresh programming language with <code>C/C++</code> like performance and <code>Python</code> like simple usage<br>
On Ubuntu, you can install Julia by <code>sudo apt-get install julia</code>, and type <code>julia</code> to open Julia interactive prompt. Details to install Julia is at <a href="http://julialang.org/downloads/platform.html" rel="nofollow">platform specific instructions</a>.</p>
<h2><a id="user-content-add-opengene" class="anchor" aria-hidden="true" href="#add-opengene"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Add OpenGene</h2>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span> run on Julia REPL</span>
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>OpenGene<span class="pl-pds">"</span></span>)</pre></div>
<p>If you want to get the latest dev version of OpenGene (not for beginners)</p>
<div class="highlight highlight-source-julia"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">checkout</span>(<span class="pl-s"><span class="pl-pds">"</span>OpenGene<span class="pl-pds">"</span></span>)</pre></div>
<p>This project is under active developing, remember to update it to get newest features:</p>
<div class="highlight highlight-source-julia"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">update</span>()</pre></div>
<h2><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Examples</h2>
<p><em><strong>sequence operation</strong></em></p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> OpenGene

julia<span class="pl-k">&gt;</span> seq <span class="pl-k">=</span> <span class="pl-c1">dna</span>(<span class="pl-s"><span class="pl-pds">"</span>AAATTTCCCGGGATCGATCGATCG<span class="pl-pds">"</span></span>)
dna<span class="pl-k">:</span>AAATTTCCCGGGATCGATCGATCG
<span class="pl-c"><span class="pl-c">#</span> reverse complement operator</span>
julia<span class="pl-k">&gt;</span> <span class="pl-k">~</span>seq
dna<span class="pl-k">:</span>CGATCGATCGATCCCGGGAAATTT
<span class="pl-c"><span class="pl-c">#</span> transcribiton, note that seq is treated as coding sequence, not template sequence</span>
<span class="pl-c"><span class="pl-c">#</span> so this operation only changes T to U</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">transcribe</span>(seq)
rna<span class="pl-k">:</span>CGAUCGAUCGAUCCCGGGAAAUUU</pre></div>
<p><em><strong>read/write a single fastq/fasta file</strong></em></p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> OpenGene

istream <span class="pl-k">=</span> <span class="pl-c1">fastq_open</span>(<span class="pl-s"><span class="pl-pds">"</span>input.fastq.gz<span class="pl-pds">"</span></span>)
ostream <span class="pl-k">=</span> <span class="pl-c1">fastq_open</span>(<span class="pl-s"><span class="pl-pds">"</span>output.fastq.gz<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>w<span class="pl-pds">"</span></span>)

<span class="pl-c"><span class="pl-c">#</span> fastq_read will return an object FastqRead {name, sequence, strand, quality}</span>
<span class="pl-c"><span class="pl-c">#</span> fastq_write can write a FastqRead into a ouput stream</span>
<span class="pl-k">while</span> (fq <span class="pl-k">=</span> <span class="pl-c1">fastq_read</span>(istream))<span class="pl-k">!=</span><span class="pl-c1">false</span>
    <span class="pl-c1">fastq_write</span>(ostream, fq)
<span class="pl-k">end</span>

<span class="pl-c1">close</span>(ostream)</pre></div>
<p>fasta is supported similarly with <code>fasta_open</code>, <code>fasta_read</code> and <code>fasta_write</code></p>
<p><em><strong>read/write a pair of fastq files</strong></em></p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> OpenGene

istream <span class="pl-k">=</span> <span class="pl-c1">fastq_open_pair</span>(<span class="pl-s"><span class="pl-pds">"</span>R1.fastq.gz<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>R2.fastq.gz<span class="pl-pds">"</span></span>)
ostream <span class="pl-k">=</span> <span class="pl-c1">fastq_open_pair</span>(<span class="pl-s"><span class="pl-pds">"</span>Out.R1.fastq.gz<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>Out.R2.fastq.gz<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>w<span class="pl-pds">"</span></span>)

<span class="pl-c"><span class="pl-c">#</span> fastq_read_pair will return a pair of FastqRead {read1, read2}</span>
<span class="pl-c"><span class="pl-c">#</span> fastq_write_pair can write this pair to two files</span>
<span class="pl-k">while</span> (pair <span class="pl-k">=</span> <span class="pl-c1">fastq_read_pair</span>(istream))<span class="pl-k">!=</span><span class="pl-c1">false</span>
    <span class="pl-c1">fastq_write_pair</span>(ostream, pair)
<span class="pl-k">end</span>

<span class="pl-c1">close</span>(ostream)</pre></div>
<p><em><strong>read/write a bed file</strong></em></p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> OpenGene

<span class="pl-c"><span class="pl-c">#</span> read all records, return an array of Intervals(chrom, chromstart, chromend)</span>
intervals <span class="pl-k">=</span> <span class="pl-c1">bed_read_intervals</span>(<span class="pl-s"><span class="pl-pds">"</span>in.bed<span class="pl-pds">"</span></span>)
<span class="pl-c"><span class="pl-c">#</span> write all records</span>
<span class="pl-c1">bed_write_intervals</span>(<span class="pl-s"><span class="pl-pds">"</span>out.bed<span class="pl-pds">"</span></span>,intervals)</pre></div>
<p><em><strong>read/write a VCF</strong></em></p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> OpenGene

<span class="pl-c"><span class="pl-c">#</span> load the entire VCF data into a vcf object, which has a .header field and a .data field</span>
vcfobj <span class="pl-k">=</span> <span class="pl-c1">vcf_read</span>(<span class="pl-s"><span class="pl-pds">"</span>in.vcf<span class="pl-pds">"</span></span>)
<span class="pl-c"><span class="pl-c">#</span> write the vcf object into a file</span>
<span class="pl-c1">vcf_write</span>(<span class="pl-s"><span class="pl-pds">"</span>out.vcf<span class="pl-pds">"</span></span>, vcfobj)</pre></div>
<p><em><strong>VCF Operations</strong></em></p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> OpenGene

v1 <span class="pl-k">=</span> <span class="pl-c1">vcf_read</span>(<span class="pl-s"><span class="pl-pds">"</span>v1.vcf<span class="pl-pds">"</span></span>)
v2 <span class="pl-k">=</span> <span class="pl-c1">vcf_read</span>(<span class="pl-s"><span class="pl-pds">"</span>v2.vcf<span class="pl-pds">"</span></span>)

<span class="pl-c"><span class="pl-c">#</span> merge by positions</span>
v_merge <span class="pl-k">=</span> v1 <span class="pl-k">+</span> v2

<span class="pl-c"><span class="pl-c">#</span> intersect by positions</span>
v_intersect <span class="pl-k">=</span> v1 <span class="pl-k">*</span> v2

<span class="pl-c"><span class="pl-c">#</span> remove v2 records from v1, by positions</span>
v_minus <span class="pl-k">=</span> v1 <span class="pl-k">-</span> v2</pre></div>
<p><em><strong>read/write a GTF</strong></em></p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> OpenGene

<span class="pl-c"><span class="pl-c">#</span> load the gtf header and data</span>
gtfobj <span class="pl-k">=</span> <span class="pl-c1">gtf_read</span>(<span class="pl-s"><span class="pl-pds">"</span>in.gtf<span class="pl-pds">"</span></span>)

<span class="pl-c"><span class="pl-c">#</span> write the gtf object into a file</span>
<span class="pl-c1">gtf_write</span>(<span class="pl-s"><span class="pl-pds">"</span>out.gtf<span class="pl-pds">"</span></span>, gtfobj)

<span class="pl-c"><span class="pl-c">#</span> if the file is too big, use following to load header only</span>
gtfobj, stream <span class="pl-k">=</span> <span class="pl-c1">gtf_read</span>(<span class="pl-s"><span class="pl-pds">"</span>in.gtf<span class="pl-pds">"</span></span>, loaddata <span class="pl-k">=</span> <span class="pl-c1">false</span>)
<span class="pl-k">while</span> (row <span class="pl-k">=</span> <span class="pl-c1">gtf_read_row</span>(stream)) <span class="pl-k">!=</span> <span class="pl-c1">false</span>
    <span class="pl-c"><span class="pl-c">#</span> do something with row ...</span>
<span class="pl-k">end</span></pre></div>
<p><em><strong>locate the gene/exon/intron</strong></em></p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> OpenGene, OpenGene<span class="pl-k">.</span>Reference

<span class="pl-c"><span class="pl-c">#</span> load the gencode dataset, it will download a file from gencode website if it's not downloaded before</span>
<span class="pl-c"><span class="pl-c">#</span> once it's loaded, it will be cached so future loads will be fast</span>
index <span class="pl-k">=</span> <span class="pl-c1">gencode_load</span>(<span class="pl-s"><span class="pl-pds">"</span>GRCh37<span class="pl-pds">"</span></span>)

<span class="pl-c"><span class="pl-c">#</span> locate which gene chr:pos is in</span>
<span class="pl-c1">gencode_locate</span>(index, <span class="pl-s"><span class="pl-pds">"</span>chr5<span class="pl-pds">"</span></span>, <span class="pl-c1">149526621</span>)
<span class="pl-c"><span class="pl-c">#</span> it will return</span>
<span class="pl-c"><span class="pl-c">#</span> 1-element Array{Any,1}:</span>
<span class="pl-c"><span class="pl-c">#</span>  Dict{ASCIIString,Any}("gene"=&gt;"PDGFRB","number"=&gt;1,"transcript"=&gt;"ENST00000261799.4","type"=&gt;"intron")</span>
genes <span class="pl-k">=</span> <span class="pl-c1">gencode_genes</span>(index, <span class="pl-s"><span class="pl-pds">"</span>TP53<span class="pl-pds">"</span></span>)
<span class="pl-c"><span class="pl-c">#</span> return an array with only one record</span>
genes[<span class="pl-c1">1</span>]<span class="pl-k">.</span>name, genes[<span class="pl-c1">1</span>]<span class="pl-k">.</span>chr, genes[<span class="pl-c1">1</span>]<span class="pl-k">.</span>start_pos, genes[<span class="pl-c1">1</span>]<span class="pl-k">.</span>end_pos
<span class="pl-c"><span class="pl-c">#</span> ("TP53","chr17",7565097,7590856)</span></pre></div>
<p><em><strong>access assembly (hg19/hg38)</strong></em></p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> OpenGene

julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> OpenGene<span class="pl-k">.</span>Reference

julia<span class="pl-k">&gt;</span> hg19 <span class="pl-k">=</span> <span class="pl-c1">load_assembly</span>(<span class="pl-s"><span class="pl-pds">"</span>hg19<span class="pl-pds">"</span></span>)
<span class="pl-c"><span class="pl-c">#</span> Dict{ASCIIString,OpenGene.FastaRead} with 93 entries:</span>

julia<span class="pl-k">&gt;</span> hg19[<span class="pl-s"><span class="pl-pds">"</span>chr17<span class="pl-pds">"</span></span>]
<span class="pl-c"><span class="pl-c">#</span> &gt;chr17</span>
<span class="pl-c"><span class="pl-c">#</span> dna:AAGCTTCTCACCCTGTTCCTGCATAGATAATTGCATGACA......agggtgtgggtgtgggtgtgggtgtgggtgtggtgtgtgggtgtgggtgtgGT</span>

julia<span class="pl-k">&gt;</span> hg19[<span class="pl-s"><span class="pl-pds">"</span>chr17<span class="pl-pds">"</span></span>]<span class="pl-k">.</span>sequence[<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">100</span>]
<span class="pl-c"><span class="pl-c">#</span> dna:AAGCTTCTCACCCTGTTCCTGCATAGATAATTGCATGACAATTGCCTTGTCCCTGCTGAATGTGCTCTGGGGTCTCTGGGGTCTCACCCACGACCAACTC</span></pre></div>
<p><em><strong>merge a pair of reads from pair-end sequencing</strong></em></p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> OpenGene, OpenGene<span class="pl-k">.</span>Algorithm

julia<span class="pl-k">&gt;</span> r1<span class="pl-k">=</span><span class="pl-c1">dna</span>(<span class="pl-s"><span class="pl-pds">"</span>TTTAGGCCTGTCACTGTGAACGCTATCAGCAAGCCTTTGCATGATTTTTCTCTTTCCCACTCCTACATTCTCGGTGATGACAACAACTGTAGCCTGATCCAGATATTTCGAAGTGCAACAAATCGTATTCAATATAGAGTAAGG<span class="pl-pds">"</span></span>)
dna<span class="pl-k">:</span>TTTAGGCCTGTCACTGTGAACGCTATCAGCAAGCCTTTGCATGATTTTTCTCTTTCCCACTCCTACATTCTCGGTGATGACAACAACTGTAGCCTGATCCAGATATTTCGAAGTGCAACAAATCGTATTCAATATAGAGTAAGG

julia<span class="pl-k">&gt;</span> r2<span class="pl-k">=</span><span class="pl-c1">dna</span>(<span class="pl-s"><span class="pl-pds">"</span>GTTAGCTATTACTGTAATCACCGCGAGACAAGTTAATGAGAGAGTTATTCATAAAACTTACTCTATATTGAATACGATTTGTAGCACATCGAAATATCTGGATCAGGCTACAGTTGTAGTCATCACCGAGAATGTAGGAGTGG<span class="pl-pds">"</span></span>)
dna<span class="pl-k">:</span>GTTAGCTATTACTGTAATCACCGCGAGACAAGTTAATGAGAGAGTTATTCATAAAACTTACTCTATATTGAATACGATTTGTAGCACATCGAAATATCTGGATCAGGCTACAGTTGTAGTCATCACCGAGAATGTAGGAGTGG

julia<span class="pl-k">&gt;</span> offset, overlap_len, distance <span class="pl-k">=</span> <span class="pl-c1">overlap</span>(r1, r2)
(<span class="pl-c1">56</span>,<span class="pl-c1">88</span>,<span class="pl-c1">4</span>)

julia<span class="pl-k">&gt;</span> merged <span class="pl-k">=</span> <span class="pl-c1">simple_merge</span>(r1, r2, overlap_len)
dna<span class="pl-k">:</span>TTTAGGCCTGTCACTGTGAACGCTATCAGCAAGCCTTTGCATGATTTTTCTCTTTCCCACTCCTACATTCTCGGTGATGACAACAACTGTAGCCTGATCCAGATATTTCGAAGTGCAACAAATCGTATTCAATATAGAGTAAGGTTTATGAATAACTCTCTCATTAACTTGTCTCGCGGTGATTACAGTAATAGCTAAC</pre></div>
</article></div>