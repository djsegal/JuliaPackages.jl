<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-disjunctiveprogrammingjl" class="anchor" aria-hidden="true" href="#disjunctiveprogrammingjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>DisjunctiveProgramming.jl</h1>
<p dir="auto">Generalized Disjunctive Programming extension to JuMP</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="logo.png"><img src="logo.png" alt="" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Pkg
Pkg.add(&quot;DisjunctiveProgramming&quot;)"><pre><span class="pl-k">using</span> Pkg
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>DisjunctiveProgramming<span class="pl-pds">"</span></span>)</pre></div>
<h2 dir="auto"><a id="user-content-disjunctions" class="anchor" aria-hidden="true" href="#disjunctions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Disjunctions</h2>
<p dir="auto">After defining a JuMP model, disjunctions can be added to the model by using the <code>@disjunction</code> macro. This macro is called by <code>@disjunction(m, disjuncts...; kwargs...), where </code>disjuncts...` is a list of at least two expressions of the form:</p>
<ol dir="auto">
<li>A valid expression accepted by <a href="https://jump.dev/JuMP.jl/stable/reference/constraints/#JuMP.@constraint" rel="nofollow">JuMP.@constraint</a>. Names for the constraints or containers of constraints cannot be passed (use option 2).</li>
<li>A valid expression accepted by <a href="https://jump.dev/JuMP.jl/stable/reference/constraints/#JuMP.@constraints" rel="nofollow">JuMP.@constraints</a> (using `begin...end)</li>
<li>A valid expression accepted by <a href="https://jump.dev/JuMP.jl/stable/reference/nlp/#JuMP.@NLconstraint" rel="nofollow">JuMP.@NLconstraint</a>. Containers of constraints cannot be passed (use option 4). Naming of non-linear constraints is not currently supported.</li>
<li>A valid expression accepted by <a href="https://jump.dev/JuMP.jl/stable/reference/nlp/#JuMP.@NLconstraints" rel="nofollow">JuMP.@NLconstraints</a> (using `begin...end)</li>
<li><code>Tuple</code> of expressions accepted by options 1 and/or 3.</li>
</ol>
<p dir="auto">NOTES:</p>
<ul dir="auto">
<li>Vectorized constraints (using <code>.</code> notation) are not currently supported. The current workarround is to first create the constraint with the <code>@constraint</code> macro and then use the <code>add_disjunction!</code>, instead of the <code>@disjunction</code> macro. The <code>add_disjunction!</code> function receives the same arguments as the <code>@disjunction</code> macro, with the exception that instead of creating the constraints in the disjunctions, references to previously created constraints are used for the disjuncts.</li>
<li>Any constraints that are of <code>EqualTo</code> type are split into two constraints (e.g., <code>f(x) == 0</code> -&gt; <code>0 &lt;= f(x) &lt;= 0</code>). This is necessary only for the Big-M reformulation of equality constraints, but is currently applied regardless of the reformulation technique.</li>
<li>Any constraints that are of <code>Interval</code> type are split into two constraints (one for each bound).</li>
<li>It is assumed that the disjuncts belonging to a disjunction are proper disjunctions (mutually exclussive) and only one of them will be selected (<code>XOR</code>).</li>
</ul>
<p dir="auto">The valid key-word arguments for the <code>@disjunction</code> macro are:</p>
<ul dir="auto">
<li><code>reformulation::Symbol</code>: <code>:big_m</code> for <a href="https://optimization.mccormick.northwestern.edu/index.php/Disjunctive_inequalities#Big-M_Reformulation" rel="nofollow">Big-M Reformulation</a>, <code>:hull</code> for <a href="https://optimization.mccormick.northwestern.edu/index.php/Disjunctive_inequalities#Convex-Hull_Reformulation" rel="nofollow">Hull Reformulation</a></li>
<li><code>M</code>: Big-M value used when <code>reformulation = :big_m</code>.</li>
<li><code>ϵ</code>: epsilon tolerance for the perspective function proposed by <a href="https://link.springer.com/article/10.1007/s10589-020-00176-0" rel="nofollow">Furman, et al. [2020]</a>. Only used when <code>reformulation = :hull</code>.</li>
<li><code>name::Symbol</code>: Name for the disjunction (also name for indicator variable used on that disjunction). If not passed (<code>name = missing</code>), a symbolic name will be generated with the prefix <code>disj</code>. The mutual exclussion constraint on the binary indicator variables can be accessed with <code>model[Symbol("XOR(disj_$name)")]</code>.</li>
</ul>
<p dir="auto">When a disjunction is defined using the <code>@disjunction</code> macro, the disjunctions are reformulated to algebraic constraints via either Big-M or Hull reformulations. For the Hull reformulation, disaggregated variables are generated by adding the suffix <code>_$name$i</code> to the original variables, where <code>i</code> is the index of the disjunct in that disjunction. Bounding constraints are applied to the disaggregated variables and can be accessed with <code>model[Symbol("$&lt;original var&gt;_$name$i_lb")]</code> and <code>model[Symbol("$&lt;original var&gt;_$name$i_ub")]</code> for the lower bound and upper bound constraints, respectively. The aggregation constraint can be accessed with <code>model[Symbol("$&lt;original var&gt;_aggregation")]</code>. For Big-M reformulations, the user may provide an <code>M</code> object that represents the BigM value(s). The <code>M</code> object can be a <code>Number</code> that is applied to all constraints in the disjuncts, or a <code>Vector</code>/<code>Tuple</code> of values that are used for each of the disjuncts. For Hull reformulations, the user may provide an <code>ϵ</code> value for the perspective function (default is <code>ϵ = 1e-6</code>). The <code>ϵ</code> object can be a <code>Number</code> that is applied to all perspective functions, or a <code>Vector</code>/<code>Tuple</code> of values that are used for each of the disjuncts.</p>
<p dir="auto">For empty disjuncts, use <code>nothing</code> for their positional argument (e.g., <code>@disjunction(m, x &lt;= 1, nothing, reformulation = :big_m)</code>).</p>
<p dir="auto">NOTE: <code>:object_dict</code> is used in the extension dictionary to store the object dictionary of models using <em>DisjunctiveProgramming.jl</em>.</p>
<h2 dir="auto"><a id="user-content-logical-propositions" class="anchor" aria-hidden="true" href="#logical-propositions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Logical Propositions</h2>
<p dir="auto">Boolean logic can be included in the model by using the <code>@proposition</code> macro. This macro will take an expression that uses only binary variables from the model (typically a subset of the indicator variables used in the disjunctions) and one or more of the following Boolean operators:</p>
<ul dir="auto">
<li><code>∨</code> (or, typed with <code>\vee + tab</code>)</li>
<li><code>∧</code> (and, typed with <code>\wedge + tab</code>)</li>
<li><code>¬</code> (negation, typed with <code>\neg + tab</code>)</li>
<li><code>⇒</code> (implication, typed with <code>\Rightarrow + tab</code>)</li>
<li><code>⇔</code> (double implication or equivalence, typed with <code>\Leftrightarrow + tab</code>)
The logical proposition is then internally reformulated to an algebraic constraint that is added to the model. This constrait can be accessed with <code>model[Symbol("&lt;logical proposition expression&gt;")]</code>.</li>
</ul>
<h2 dir="auto"><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example</h2>
<p dir="auto">The example below is from the <a href="https://optimization.mccormick.northwestern.edu/index.php/Disjunctive_inequalities" rel="nofollow">Northwestern University Process Optimization Open Textbook</a>.</p>
<p dir="auto">To perform the Big-M reformulation, <code>:big_m</code> is passed to the <code>reformulation</code> keyword argument. If nothing is passed to the keyword argument <code>M</code>, tight Big-M values will be inferred from the variable bounds using IntervalArithmetic.jl. If <code>x</code> is not bounded, Big-M values must be provided for either the whole system (e.g., <code>M = 10</code>) or for each of the constraint arrays in the example (e.g., <code>M = (10,10)</code>).</p>
<p dir="auto">To perform the Hull reformulation, <code>reformulation = :hull</code>. Variables must have bounds for the reformulation to work.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using JuMP
using DisjunctiveProgramming

m = Model()
@variable(m, -5 ≤ x ≤ 10)
@disjunction(
    m,
    0 ≤ x ≤ 3,
    5 ≤ x ≤ 9,
    reformulation=:big_m,
    name=:y
)
@proposition(m, y[1] ∨ y[2]) #this is a redundant proposition

print(m)

┌ Warning: disj_y[1] : x in [0.0, 3.0] uses the `MOI.Interval` set. Each instance of the interval set has been split into two constraints, one for each bound.
┌ Warning: disj_y[2] : x in [5.0, 9.0] uses the `MOI.Interval` set. Each instance of the interval set has been split into two constraints, one for each bound.
Feasibility
Subject to
 XOR(disj_y) : y[1] + y[2] == 1.0         &lt;- XOR constraint
 y[1] ∨ y[2] : y[1] + y[2] &gt;= 1.0         &lt;- reformulated logical proposition (name is the proposition)
 disj_y[1][lb] : -x + 5 y[1] &lt;= 5.0       &lt;- left-side of constraint in 1st disjunct (name is assigned to disj_y[1][lb])
 disj_y[1][ub] : x + 7 y[1] &lt;= 10.0       &lt;- right-side of constraint in 1st disjunct (name is assigned to disj_y[1][ub])
 disj_y[2][lb] : -x + 10 y[2] &lt;= 5.0      &lt;- left-side of constraint in 2nd disjunct (name is assigned to disj_y[2][lb])
 disj_y[2][ub] : x + y[2] &lt;= 10.0         &lt;- right-side of constraint in 2nd disjunct (name is assigned to disj_y[2][ub])
 x &gt;= -5.0                                &lt;- variable lower bound
 x &lt;= 10.0                                &lt;- variable upper bound
 y[1] binary                              &lt;- indicator variable (1st disjunct) is binary
 y[2] binary                              &lt;- indicator variable (2nd disjunct) is binary"><pre><span class="pl-k">using</span> JuMP
<span class="pl-k">using</span> DisjunctiveProgramming

m <span class="pl-k">=</span> <span class="pl-c1">Model</span>()
<span class="pl-c1">@variable</span>(m, <span class="pl-k">-</span><span class="pl-c1">5</span> <span class="pl-k">≤</span> x <span class="pl-k">≤</span> <span class="pl-c1">10</span>)
<span class="pl-c1">@disjunction</span>(
    m,
    <span class="pl-c1">0</span> <span class="pl-k">≤</span> x <span class="pl-k">≤</span> <span class="pl-c1">3</span>,
    <span class="pl-c1">5</span> <span class="pl-k">≤</span> x <span class="pl-k">≤</span> <span class="pl-c1">9</span>,
    reformulation<span class="pl-k">=</span><span class="pl-c1">:big_m</span>,
    name<span class="pl-k">=</span><span class="pl-c1">:y</span>
)
<span class="pl-c1">@proposition</span>(m, y[<span class="pl-c1">1</span>] ∨ y[<span class="pl-c1">2</span>]) <span class="pl-c"><span class="pl-c">#</span>this is a redundant proposition</span>

<span class="pl-c1">print</span>(m)

┌ Warning<span class="pl-k">:</span> disj_y[<span class="pl-c1">1</span>] <span class="pl-k">:</span> x <span class="pl-k">in</span> [<span class="pl-c1">0.0</span>, <span class="pl-c1">3.0</span>] uses the <span class="pl-s"><span class="pl-pds">`</span>MOI.Interval<span class="pl-pds">`</span></span> set. Each instance of the interval set has been split into two constraints, one <span class="pl-k">for</span> each bound.
┌ Warning<span class="pl-k">:</span> disj_y[<span class="pl-c1">2</span>] <span class="pl-k">:</span> x <span class="pl-k">in</span> [<span class="pl-c1">5.0</span>, <span class="pl-c1">9.0</span>] uses the <span class="pl-s"><span class="pl-pds">`</span>MOI.Interval<span class="pl-pds">`</span></span> set. Each instance of the interval set has been split into two constraints, one <span class="pl-k">for</span> each bound.
Feasibility
Subject to
 <span class="pl-c1">XOR</span>(disj_y) <span class="pl-k">:</span> y[<span class="pl-c1">1</span>] <span class="pl-k">+</span> y[<span class="pl-c1">2</span>] <span class="pl-k">==</span> <span class="pl-c1">1.0</span>         <span class="pl-k">&lt;-</span> XOR constraint
 y[<span class="pl-c1">1</span>] ∨ y[<span class="pl-c1">2</span>] <span class="pl-k">:</span> y[<span class="pl-c1">1</span>] <span class="pl-k">+</span> y[<span class="pl-c1">2</span>] <span class="pl-k">&gt;=</span> <span class="pl-c1">1.0</span>         <span class="pl-k">&lt;-</span> reformulated logical proposition (name is the proposition)
 disj_y[<span class="pl-c1">1</span>][lb] <span class="pl-k">:</span> <span class="pl-k">-</span>x <span class="pl-k">+</span> <span class="pl-c1">5</span> y[<span class="pl-c1">1</span>] <span class="pl-k">&lt;=</span> <span class="pl-c1">5.0</span>       <span class="pl-k">&lt;-</span> left<span class="pl-k">-</span>side of constraint <span class="pl-k">in</span> <span class="pl-c1">1</span>st disjunct (name is assigned to disj_y[<span class="pl-c1">1</span>][lb])
 disj_y[<span class="pl-c1">1</span>][ub] <span class="pl-k">:</span> x <span class="pl-k">+</span> <span class="pl-c1">7</span> y[<span class="pl-c1">1</span>] <span class="pl-k">&lt;=</span> <span class="pl-c1">10.0</span>       <span class="pl-k">&lt;-</span> right<span class="pl-k">-</span>side of constraint <span class="pl-k">in</span> <span class="pl-c1">1</span>st disjunct (name is assigned to disj_y[<span class="pl-c1">1</span>][ub])
 disj_y[<span class="pl-c1">2</span>][lb] <span class="pl-k">:</span> <span class="pl-k">-</span>x <span class="pl-k">+</span> <span class="pl-c1">10</span> y[<span class="pl-c1">2</span>] <span class="pl-k">&lt;=</span> <span class="pl-c1">5.0</span>      <span class="pl-k">&lt;-</span> left<span class="pl-k">-</span>side of constraint <span class="pl-k">in</span> <span class="pl-c1">2</span>nd disjunct (name is assigned to disj_y[<span class="pl-c1">2</span>][lb])
 disj_y[<span class="pl-c1">2</span>][ub] <span class="pl-k">:</span> x <span class="pl-k">+</span> y[<span class="pl-c1">2</span>] <span class="pl-k">&lt;=</span> <span class="pl-c1">10.0</span>         <span class="pl-k">&lt;-</span> right<span class="pl-k">-</span>side of constraint <span class="pl-k">in</span> <span class="pl-c1">2</span>nd disjunct (name is assigned to disj_y[<span class="pl-c1">2</span>][ub])
 x <span class="pl-k">&gt;=</span> <span class="pl-k">-</span><span class="pl-c1">5.0</span>                                <span class="pl-k">&lt;-</span> variable lower bound
 x <span class="pl-k">&lt;=</span> <span class="pl-c1">10.0</span>                                <span class="pl-k">&lt;-</span> variable upper bound
 y[<span class="pl-c1">1</span>] binary                              <span class="pl-k">&lt;-</span> indicator variable (<span class="pl-c1">1</span>st disjunct) is binary
 y[<span class="pl-c1">2</span>] binary                              <span class="pl-k">&lt;-</span> indicator variable (<span class="pl-c1">2</span>nd disjunct) is binary</pre></div>
</article></div>