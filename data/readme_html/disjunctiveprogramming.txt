<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-disjunctiveprogrammingjl" class="anchor" aria-hidden="true" href="#disjunctiveprogrammingjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>DisjunctiveProgramming.jl</h1>
<p>Generalized Disjunctive Programming extension to JuMP</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Pkg
Pkg.add(&quot;https://github.com/hdavid16/DisjunctiveProgramming.jl&quot;)
"><pre><span class="pl-k">using</span> Pkg
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>https://github.com/hdavid16/DisjunctiveProgramming.jl<span class="pl-pds">"</span></span>)</pre></div>
<h2><a id="user-content-disjunctions" class="anchor" aria-hidden="true" href="#disjunctions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Disjunctions</h2>
<p>Disjunctions can be applied to standard JuMP models with constraints of that are either <code>GreaterThan</code>, <code>LessThan</code>, or <code>EqualTo</code>. Reformulations on constraints that are <code>Interval</code> are not supported. The disjunctions can be reformulated via the Big-M method or the Convex Hull as described <a href="https://optimization.mccormick.northwestern.edu/index.php/Disjunctive_inequalities" rel="nofollow">here</a>. The user may provide an <code>M</code> object that represents the BigM value(s). The <code>M</code> object can be a <code>Number</code> that is applied to all constraints in the disjuncts, or a <code>Vector</code>/<code>Tuple</code> of values that are used for each of the disjuncts.</p>
<p>For the Convex Hull Reformulation, the perspective function proposed in <a href="https://link.springer.com/article/10.1007/s10589-020-00176-0" rel="nofollow">Furman, et al. [2020]</a> is used.</p>
<h2><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example</h2>
<p>The example below is from the <a href="https://optimization.mccormick.northwestern.edu/index.php/Disjunctive_inequalities" rel="nofollow">Northwestern University Process Optimization Open Textbook</a>.</p>
<p>To perform the Big-M reformulation, <code>:BMR</code> is passed to the <code>reformulation</code> keyword argument. If nothing is passed to the keyword argument <code>M</code>, tight Big-M values will be inferred from the variable bounds using IntervalArithmetic.jl. If <code>x</code> is not bounded, Big-M values must be provided for either the whole system (e.g., <code>M = 10</code>) or for each of the constraint arrays in the example (e.g., <code>M = ((10,10),(10,10))</code>).</p>
<p>To perform the Convex-Hull reformulation, <code>reformulation = :CHR</code>. Variables must have bounds for the reformulation to work.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using JuMP
using DisjunctiveProgramming

m = Model()
@variable(m, 0&lt;=x[1:2]&lt;=10)

@constraint(m, con1[i=1:2], x[i] &lt;= [3,4][i])
@constraint(m, con2[i=1:2], zeros(2)[i] &lt;= x[i])
@constraint(m, con3[i=1:2], [5,4][i] &lt;= x[i])
@constraint(m, con4[i=1:2], x[i] &lt;= [9,6][i])

@disjunction(m,(con1,con2),(con3,con4), reformulation=:BMR)

┌ Warning: No M value passed for con1[1] : x[1] &lt;= 3.0. M = 7.0 was inferred from the variable bounds.
┌ Warning: No M value passed for con1[2] : x[2] &lt;= 4.0. M = 6.0 was inferred from the variable bounds.
┌ Warning: No M value passed for con2[1] : -x[1] &lt;= 0.0. M = 0.0 was inferred from the variable bounds.
┌ Warning: No M value passed for con2[2] : -x[2] &lt;= 0.0. M = 0.0 was inferred from the variable bounds.
┌ Warning: No M value passed for con3[1] : -x[1] &lt;= -5.0. M = 5.0 was inferred from
the variable bounds.
┌ Warning: No M value passed for con3[2] : -x[2] &lt;= -4.0. M = 4.0 was inferred from
the variable bounds.
┌ Warning: No M value passed for con4[1] : x[1] &lt;= 9.0. M = 1.0 was inferred from the variable bounds.
┌ Warning: No M value passed for con4[2] : x[2] &lt;= 6.0. M = 4.0 was inferred from the variable bounds.
"><pre><span class="pl-k">using</span> JuMP
<span class="pl-k">using</span> DisjunctiveProgramming

m <span class="pl-k">=</span> <span class="pl-c1">Model</span>()
<span class="pl-c1">@variable</span>(m, <span class="pl-c1">0</span><span class="pl-k">&lt;=</span>x[<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span>]<span class="pl-k">&lt;=</span><span class="pl-c1">10</span>)

<span class="pl-c1">@constraint</span>(m, con1[i<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span>], x[i] <span class="pl-k">&lt;=</span> [<span class="pl-c1">3</span>,<span class="pl-c1">4</span>][i])
<span class="pl-c1">@constraint</span>(m, con2[i<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span>], <span class="pl-c1">zeros</span>(<span class="pl-c1">2</span>)[i] <span class="pl-k">&lt;=</span> x[i])
<span class="pl-c1">@constraint</span>(m, con3[i<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span>], [<span class="pl-c1">5</span>,<span class="pl-c1">4</span>][i] <span class="pl-k">&lt;=</span> x[i])
<span class="pl-c1">@constraint</span>(m, con4[i<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span>], x[i] <span class="pl-k">&lt;=</span> [<span class="pl-c1">9</span>,<span class="pl-c1">6</span>][i])

<span class="pl-c1">@disjunction</span>(m,(con1,con2),(con3,con4), reformulation<span class="pl-k">=</span><span class="pl-c1">:BMR</span>)

┌ Warning<span class="pl-k">:</span> No M value passed <span class="pl-k">for</span> con1[<span class="pl-c1">1</span>] <span class="pl-k">:</span> x[<span class="pl-c1">1</span>] <span class="pl-k">&lt;=</span> <span class="pl-c1">3.0</span>. M <span class="pl-k">=</span> <span class="pl-c1">7.0</span> was inferred from the variable bounds.
┌ Warning<span class="pl-k">:</span> No M value passed <span class="pl-k">for</span> con1[<span class="pl-c1">2</span>] <span class="pl-k">:</span> x[<span class="pl-c1">2</span>] <span class="pl-k">&lt;=</span> <span class="pl-c1">4.0</span>. M <span class="pl-k">=</span> <span class="pl-c1">6.0</span> was inferred from the variable bounds.
┌ Warning<span class="pl-k">:</span> No M value passed <span class="pl-k">for</span> con2[<span class="pl-c1">1</span>] <span class="pl-k">:</span> <span class="pl-k">-</span>x[<span class="pl-c1">1</span>] <span class="pl-k">&lt;=</span> <span class="pl-c1">0.0</span>. M <span class="pl-k">=</span> <span class="pl-c1">0.0</span> was inferred from the variable bounds.
┌ Warning<span class="pl-k">:</span> No M value passed <span class="pl-k">for</span> con2[<span class="pl-c1">2</span>] <span class="pl-k">:</span> <span class="pl-k">-</span>x[<span class="pl-c1">2</span>] <span class="pl-k">&lt;=</span> <span class="pl-c1">0.0</span>. M <span class="pl-k">=</span> <span class="pl-c1">0.0</span> was inferred from the variable bounds.
┌ Warning<span class="pl-k">:</span> No M value passed <span class="pl-k">for</span> con3[<span class="pl-c1">1</span>] <span class="pl-k">:</span> <span class="pl-k">-</span>x[<span class="pl-c1">1</span>] <span class="pl-k">&lt;=</span> <span class="pl-k">-</span><span class="pl-c1">5.0</span>. M <span class="pl-k">=</span> <span class="pl-c1">5.0</span> was inferred from
the variable bounds.
┌ Warning<span class="pl-k">:</span> No M value passed <span class="pl-k">for</span> con3[<span class="pl-c1">2</span>] <span class="pl-k">:</span> <span class="pl-k">-</span>x[<span class="pl-c1">2</span>] <span class="pl-k">&lt;=</span> <span class="pl-k">-</span><span class="pl-c1">4.0</span>. M <span class="pl-k">=</span> <span class="pl-c1">4.0</span> was inferred from
the variable bounds.
┌ Warning<span class="pl-k">:</span> No M value passed <span class="pl-k">for</span> con4[<span class="pl-c1">1</span>] <span class="pl-k">:</span> x[<span class="pl-c1">1</span>] <span class="pl-k">&lt;=</span> <span class="pl-c1">9.0</span>. M <span class="pl-k">=</span> <span class="pl-c1">1.0</span> was inferred from the variable bounds.
┌ Warning<span class="pl-k">:</span> No M value passed <span class="pl-k">for</span> con4[<span class="pl-c1">2</span>] <span class="pl-k">:</span> x[<span class="pl-c1">2</span>] <span class="pl-k">&lt;=</span> <span class="pl-c1">6.0</span>. M <span class="pl-k">=</span> <span class="pl-c1">4.0</span> was inferred from the variable bounds.</pre></div>
</article></div>