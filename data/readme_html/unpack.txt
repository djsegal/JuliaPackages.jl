<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-unpack" class="anchor" aria-hidden="true" href="#unpack"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>UnPack</h1>
<p><a href="https://travis-ci.com/mauro3/UnPack.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/9a3e75d9390c6da25b689cd64631362c154449be/68747470733a2f2f7472617669732d63692e636f6d2f6d6175726f332f556e5061636b2e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/mauro3/UnPack.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/mauro3/UnPack-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/e9ca00e359d82964790f7b34282633f3dfb69e30/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f6769746875622f6d6175726f332f556e5061636b2e6a6c3f7376673d74727565" alt="Build Status" data-canonical-src="https://ci.appveyor.com/api/projects/status/github/mauro3/UnPack.jl?svg=true" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/mauro3/UnPack.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/f2cc836ddf39fd75b2962803725b8ad32c9449a1/68747470733a2f2f636f6465636f762e696f2f67682f6d6175726f332f556e5061636b2e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/mauro3/UnPack.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a>
<a href="https://cirrus-ci.com/github/mauro3/UnPack.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/c6a4a39a4fd8cd3df23c6ebabdfd8eb5aff488d6/68747470733a2f2f6170692e6369727275732d63692e636f6d2f6769746875622f6d6175726f332f556e5061636b2e6a6c2e737667" alt="Build Status" data-canonical-src="https://api.cirrus-ci.com/github/mauro3/UnPack.jl.svg" style="max-width:100%;"></a></p>
<p>It is often convenient to unpack some or all of the fields of a type,
and pack, in the case of mutable datatypes (for immutables use
<a href="https://github.com/jw3126/Setfield.jl">Setfield.jl</a>). This is often
the case when a struct is passed into a function.</p>
<p>The <a href="@ref"><code>@unpack</code></a> and <a href="@ref"><code>@pack!</code></a> macros work to unpack
types, modules, and dictionaries (and can be customized for other
types too, see next section).</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> UnPack

<span class="pl-k">mutable struct</span> Para
    a<span class="pl-k">::</span><span class="pl-c1">Float64</span>
    b<span class="pl-k">::</span><span class="pl-c1">Int</span>
<span class="pl-k">end</span>

<span class="pl-k">function</span> <span class="pl-en">f!</span>(var, pa<span class="pl-k">::</span><span class="pl-c1">Para</span>)
    <span class="pl-c1">@unpack</span> a, b <span class="pl-k">=</span> pa <span class="pl-c"><span class="pl-c">#</span> equivalent to: a,b = pa.a,pa.b</span>
    out <span class="pl-k">=</span> var <span class="pl-k">+</span> a <span class="pl-k">+</span> b
    b <span class="pl-k">=</span> <span class="pl-c1">77</span>
    <span class="pl-c1">@pack!</span> pa <span class="pl-k">=</span> b <span class="pl-c"><span class="pl-c">#</span> equivalent to: pa.b = b</span>
    <span class="pl-k">return</span> out, pa
<span class="pl-k">end</span>

out, pa <span class="pl-k">=</span> <span class="pl-c1">f!</span>(<span class="pl-c1">7</span>, <span class="pl-c1">Para</span>(<span class="pl-c1">1</span>,<span class="pl-c1">2</span>)) <span class="pl-c"><span class="pl-c">#</span> -&gt; 10.0, Para(1.0, 77)</span></pre></div>
<p>Example with a dictionary:</p>
<div class="highlight highlight-source-julia"><pre>d <span class="pl-k">=</span> <span class="pl-c1">Dict</span><span class="pl-c1">{Symbol,Any}</span>(<span class="pl-c1">:a</span><span class="pl-k">=&gt;</span><span class="pl-c1">5.0</span>, <span class="pl-c1">:b</span><span class="pl-k">=&gt;</span><span class="pl-c1">2</span>, <span class="pl-c1">:c</span><span class="pl-k">=&gt;</span><span class="pl-s"><span class="pl-pds">"</span>Hi!<span class="pl-pds">"</span></span>)
<span class="pl-c1">@unpack</span> a, c <span class="pl-k">=</span> d
a <span class="pl-k">==</span> <span class="pl-c1">5.0</span> <span class="pl-c"><span class="pl-c">#</span>true</span>
c <span class="pl-k">==</span> <span class="pl-s"><span class="pl-pds">"</span>Hi!<span class="pl-pds">"</span></span> <span class="pl-c"><span class="pl-c">#</span>true</span>

d <span class="pl-k">=</span> <span class="pl-c1">Dict</span><span class="pl-c1">{String,Any}</span>()
<span class="pl-c1">@pack!</span> d <span class="pl-k">=</span> a, c
d <span class="pl-c"><span class="pl-c">#</span> -&gt; Dict{String,Any}("a"=&gt;5.0,"c"=&gt;"Hi!")</span></pre></div>
<h2><a id="user-content-customization-of-unpack-and-pack" class="anchor" aria-hidden="true" href="#customization-of-unpack-and-pack"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Customization of <code>@unpack</code> and <code>@pack!</code></h2>
<p>What happens during the (un-)packing of a particular datatype is
determined by the functions <code>UnPack.unpack</code> and <code>UnPack.pack!</code>.</p>
<p>The <code>UnPack.unpack</code> function is invoked to unpack one entity of some
<code>DataType</code> and has signature:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">unpack</span>(dt<span class="pl-k">::</span><span class="pl-c1">Any</span>, <span class="pl-k">::</span><span class="pl-c1">Val{property}</span>) <span class="pl-k">-&gt;</span> value of property</pre></div>
<p>Note that <code>unpack</code> (and <code>pack!</code>) works with <code>Base.getproperty</code>.  By
default this means that all the fields of a type are unpacked but if
<code>getproperty</code> is overloaded, then it will unpack accordingly.</p>
<p>Three method definitions are included in the package to unpack a
composite type/module/NamedTuple, or a dictionary with Symbol or
string keys:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">@inline</span> <span class="pl-en">unpack</span><span class="pl-c1">{f}</span>(x, <span class="pl-k">::</span><span class="pl-c1">Val{f}</span>) <span class="pl-k">=</span> <span class="pl-c1">getproperty</span>(x, f)
<span class="pl-c1">@inline</span> <span class="pl-en">unpack</span><span class="pl-c1">{k}</span>(x<span class="pl-k">::</span><span class="pl-c1">Associative{Symbol}</span>, <span class="pl-k">::</span><span class="pl-c1">Val{k}</span>) <span class="pl-k">=</span> x[k]
<span class="pl-c1">@inline</span> <span class="pl-en">unpack</span><span class="pl-c1">{S&lt;:AbstractString,k}</span>(x<span class="pl-k">::</span><span class="pl-c1">Associative{S}</span>, <span class="pl-k">::</span><span class="pl-c1">Val{k}</span>) <span class="pl-k">=</span> x[<span class="pl-c1">string</span>(k)]</pre></div>
<p>The <code>UnPack.pack!</code> function is invoked to pack one entity into some
<code>DataType</code> and has signature:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">pack!</span>(dt<span class="pl-k">::</span><span class="pl-c1">Any</span>, <span class="pl-k">::</span><span class="pl-c1">Val{field}</span>, value) <span class="pl-k">-&gt;</span> value</pre></div>
<p>Three definitions are included in the package to pack into a mutable composite
type or into a dictionary with Symbol or string keys:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">@inline</span> <span class="pl-en">pack!</span><span class="pl-c1">{f}</span>(x, <span class="pl-k">::</span><span class="pl-c1">Val{f}</span>, val) <span class="pl-k">=</span> <span class="pl-c1">setproperty!</span>(x, f, val)
<span class="pl-c1">@inline</span> <span class="pl-en">pack!</span><span class="pl-c1">{k}</span>(x<span class="pl-k">::</span><span class="pl-c1">Associative{Symbol}</span>, <span class="pl-k">::</span><span class="pl-c1">Val{k}</span>, val) <span class="pl-k">=</span> x[k]<span class="pl-k">=</span>val
<span class="pl-c1">@inline</span> <span class="pl-en">pack!</span><span class="pl-c1">{S&lt;:AbstractString,k}</span>(x<span class="pl-k">::</span><span class="pl-c1">Associative{S}</span>, <span class="pl-k">::</span><span class="pl-c1">Val{k}</span>, val) <span class="pl-k">=</span> x[<span class="pl-c1">string</span>(k)]<span class="pl-k">=</span>val</pre></div>
<p>More methods can be added to <code>unpack</code> and <code>pack!</code> to allow for
specialized unpacking/packing of datatypes. Here is a MWE of customizing
<code>unpack</code>, so that it multiplies the values by 2:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> UnPack
<span class="pl-k">struct</span> Foo
    a
    b
<span class="pl-k">end</span>
p <span class="pl-k">=</span> <span class="pl-c1">Foo</span>(<span class="pl-c1">1</span>, <span class="pl-c1">2</span>)
<span class="pl-c1">@unpack</span> a, b <span class="pl-k">=</span> p
a, b <span class="pl-c"><span class="pl-c">#</span> gives (1, 2)</span>

<span class="pl-c"><span class="pl-c">#</span> Now we specialize unpack for our custom type, `Foo`</span>
<span class="pl-c1">@inline</span> UnPack<span class="pl-k">.</span><span class="pl-en">unpack</span>(x<span class="pl-k">::</span><span class="pl-c1">Foo</span>, <span class="pl-k">::</span><span class="pl-c1">Val{f}</span>) <span class="pl-k">where</span> {f} <span class="pl-k">=</span> <span class="pl-c1">2</span> <span class="pl-k">*</span> <span class="pl-c1">getproperty</span>(x, f)
<span class="pl-c1">@unpack</span> a, b <span class="pl-k">=</span> p
a, b <span class="pl-c"><span class="pl-c">#</span> now gives (2, 4)</span></pre></div>
</article></div>