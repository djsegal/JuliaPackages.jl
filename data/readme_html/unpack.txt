<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-unpack" class="anchor" aria-hidden="true" href="#unpack"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>UnPack</h1>
<p dir="auto"><a href="https://github.com/mauro3/UnPack.jl/actions"><img src="https://github.com/mauro3/UnPack.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://ci.appveyor.com/project/mauro3/UnPack-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/b3bf60912b5699430454765097b751612f746319123864471b0458b0170120d4/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f6769746875622f6d6175726f332f556e5061636b2e6a6c3f7376673d74727565" alt="Build Status" data-canonical-src="https://ci.appveyor.com/api/projects/status/github/mauro3/UnPack.jl?svg=true" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/mauro3/UnPack.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/418b00a78b6b3aacf2dbb3404aa1ae0cc54e7696a3268a73b1a9731be744c405/68747470733a2f2f636f6465636f762e696f2f67682f6d6175726f332f556e5061636b2e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/mauro3/UnPack.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a>
<a href="https://juliahub.com/ui/Packages/UnPack/zm2TF" rel="nofollow"><img src="https://camo.githubusercontent.com/d823011db946e48471969fc6e823bc1e43c35c2022e8b0ce5ec80deba573b8ba/68747470733a2f2f6a756c69616875622e636f6d2f646f63732f556e5061636b2f706b676576616c2e737667" alt="pkgeval" data-canonical-src="https://juliahub.com/docs/UnPack/pkgeval.svg" style="max-width: 100%;"></a></p>
<p dir="auto"><a href="https://juliahub.com/ui/Packages/UnPack/zm2TF?t=2" rel="nofollow"><img src="https://camo.githubusercontent.com/6dc882e30c4c3fa9b3d9f80c21d215ee4d23759f90896120b4551a9c08ef0132/68747470733a2f2f6a756c69616875622e636f6d2f646f63732f556e5061636b2f646570732e737667" alt="deps" data-canonical-src="https://juliahub.com/docs/UnPack/deps.svg" style="max-width: 100%;"></a>
<a href="https://juliahub.com/ui/Packages/UnPack/zm2TF" rel="nofollow"><img src="https://camo.githubusercontent.com/10ebf73d97be8825ecc2d2794e9eb8cff71606a37df4c1b1734cb2877966c89e/68747470733a2f2f6a756c69616875622e636f6d2f646f63732f556e5061636b2f76657273696f6e2e737667" alt="version" data-canonical-src="https://juliahub.com/docs/UnPack/version.svg" style="max-width: 100%;"></a></p>
<p dir="auto">It is often convenient to unpack some or all of the fields of a type,
and pack, in the case of mutable datatypes (for immutables use
<a href="https://github.com/jw3126/Setfield.jl">Setfield.jl</a>). This is often
the case when a struct is passed into a function.</p>
<p dir="auto">The <code>@unpack</code> and <code>@pack!</code> macros work to unpack
types, modules, and dictionaries (and can be customized for other
types too, see next section).</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using UnPack

mutable struct Para
    a::Float64
    b::Int
end

function f!(var, pa::Para)
    @unpack a, b = pa # equivalent to: a,b = pa.a,pa.b
    out = var + a + b
    b = 77
    @pack! pa = b # equivalent to: pa.b = b
    return out, pa
end

out, pa = f!(7, Para(1,2)) # -&gt; 10.0, Para(1.0, 77)"><pre><span class="pl-k">using</span> UnPack

<span class="pl-k">mutable struct</span> Para
    a<span class="pl-k">::</span><span class="pl-c1">Float64</span>
    b<span class="pl-k">::</span><span class="pl-c1">Int</span>
<span class="pl-k">end</span>

<span class="pl-k">function</span> <span class="pl-en">f!</span>(var, pa<span class="pl-k">::</span><span class="pl-c1">Para</span>)
    <span class="pl-c1">@unpack</span> a, b <span class="pl-k">=</span> pa <span class="pl-c"><span class="pl-c">#</span> equivalent to: a,b = pa.a,pa.b</span>
    out <span class="pl-k">=</span> var <span class="pl-k">+</span> a <span class="pl-k">+</span> b
    b <span class="pl-k">=</span> <span class="pl-c1">77</span>
    <span class="pl-c1">@pack!</span> pa <span class="pl-k">=</span> b <span class="pl-c"><span class="pl-c">#</span> equivalent to: pa.b = b</span>
    <span class="pl-k">return</span> out, pa
<span class="pl-k">end</span>

out, pa <span class="pl-k">=</span> <span class="pl-c1">f!</span>(<span class="pl-c1">7</span>, <span class="pl-c1">Para</span>(<span class="pl-c1">1</span>,<span class="pl-c1">2</span>)) <span class="pl-c"><span class="pl-c">#</span> -&gt; 10.0, Para(1.0, 77)</span></pre></div>
<p dir="auto">Example with a dictionary:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="d = Dict{Symbol,Any}(:a=&gt;5.0, :b=&gt;2, :c=&gt;&quot;Hi!&quot;)
@unpack a, c = d
a == 5.0 #true
c == &quot;Hi!&quot; #true

d = Dict{String,Any}()
@pack! d = a, c
d # -&gt; Dict{String,Any}(&quot;a&quot;=&gt;5.0,&quot;c&quot;=&gt;&quot;Hi!&quot;)"><pre>d <span class="pl-k">=</span> <span class="pl-c1">Dict</span><span class="pl-c1">{Symbol,Any}</span>(<span class="pl-c1">:a</span><span class="pl-k">=&gt;</span><span class="pl-c1">5.0</span>, <span class="pl-c1">:b</span><span class="pl-k">=&gt;</span><span class="pl-c1">2</span>, <span class="pl-c1">:c</span><span class="pl-k">=&gt;</span><span class="pl-s"><span class="pl-pds">"</span>Hi!<span class="pl-pds">"</span></span>)
<span class="pl-c1">@unpack</span> a, c <span class="pl-k">=</span> d
a <span class="pl-k">==</span> <span class="pl-c1">5.0</span> <span class="pl-c"><span class="pl-c">#</span>true</span>
c <span class="pl-k">==</span> <span class="pl-s"><span class="pl-pds">"</span>Hi!<span class="pl-pds">"</span></span> <span class="pl-c"><span class="pl-c">#</span>true</span>

d <span class="pl-k">=</span> <span class="pl-c1">Dict</span><span class="pl-c1">{String,Any}</span>()
<span class="pl-c1">@pack!</span> d <span class="pl-k">=</span> a, c
d <span class="pl-c"><span class="pl-c">#</span> -&gt; Dict{String,Any}("a"=&gt;5.0,"c"=&gt;"Hi!")</span></pre></div>
<h2 dir="auto"><a id="user-content-customization-of-unpack-and-pack" class="anchor" aria-hidden="true" href="#customization-of-unpack-and-pack"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Customization of <code>@unpack</code> and <code>@pack!</code></h2>
<p dir="auto">What happens during the (un-)packing of a particular datatype is
determined by the functions <code>UnPack.unpack</code> and <code>UnPack.pack!</code>.</p>
<p dir="auto">The <code>UnPack.unpack</code> function is invoked to unpack one entity of some
<code>DataType</code> and has signature:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="unpack(dt::Any, ::Val{property}) -&gt; value of property"><pre><span class="pl-c1">unpack</span>(dt<span class="pl-k">::</span><span class="pl-c1">Any</span>, <span class="pl-k">::</span><span class="pl-c1">Val{property}</span>) <span class="pl-k">-&gt;</span> value of property</pre></div>
<p dir="auto">Note that <code>unpack</code> (and <code>pack!</code>) works with <code>Base.getproperty</code>.  By
default this means that all the fields of a type are unpacked but if
<code>getproperty</code> is overloaded, then it will unpack accordingly.</p>
<p dir="auto">Three method definitions are included in the package to unpack a
composite type/module/NamedTuple, or a dictionary with Symbol or
string keys:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@inline unpack(x, ::Val{f}) where {f} = getproperty(x, f)
@inline unpack(x::AbstractDict{Symbol}, ::Val{k}) where {k} = x[k]
@inline unpack(x::AbstractDict{&lt;:AbstractString}, ::Val{k}) where {k} = x[string(k)]"><pre><span class="pl-c1">@inline</span> <span class="pl-en">unpack</span>(x, <span class="pl-k">::</span><span class="pl-c1">Val{f}</span>) <span class="pl-k">where</span> {f} <span class="pl-k">=</span> <span class="pl-c1">getproperty</span>(x, f)
<span class="pl-c1">@inline</span> <span class="pl-en">unpack</span>(x<span class="pl-k">::</span><span class="pl-c1">AbstractDict{Symbol}</span>, <span class="pl-k">::</span><span class="pl-c1">Val{k}</span>) <span class="pl-k">where</span> {k} <span class="pl-k">=</span> x[k]
<span class="pl-c1">@inline</span> <span class="pl-en">unpack</span>(x<span class="pl-k">::</span><span class="pl-c1">AbstractDict{&lt;:AbstractString}</span>, <span class="pl-k">::</span><span class="pl-c1">Val{k}</span>) <span class="pl-k">where</span> {k} <span class="pl-k">=</span> x[<span class="pl-c1">string</span>(k)]</pre></div>
<p dir="auto">The <code>UnPack.pack!</code> function is invoked to pack one entity into some
<code>DataType</code> and has signature:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="pack!(dt::Any, ::Val{field}, value) -&gt; value"><pre><span class="pl-c1">pack!</span>(dt<span class="pl-k">::</span><span class="pl-c1">Any</span>, <span class="pl-k">::</span><span class="pl-c1">Val{field}</span>, value) <span class="pl-k">-&gt;</span> value</pre></div>
<p dir="auto">Three definitions are included in the package to pack into a mutable composite
type or into a dictionary with Symbol or string keys:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@inline pack!(x, ::Val{f}, val) where {f} = setproperty!(x, f, val)
@inline pack!(x::AbstractDict{Symbol}, ::Val{k}, val) where {k} = x[k]=val
@inline pack!(x::AbstractDict{&lt;:AbstractString}, ::Val{k}, val) where {k} = x[string(k)]=val"><pre><span class="pl-c1">@inline</span> <span class="pl-en">pack!</span>(x, <span class="pl-k">::</span><span class="pl-c1">Val{f}</span>, val) <span class="pl-k">where</span> {f} <span class="pl-k">=</span> <span class="pl-c1">setproperty!</span>(x, f, val)
<span class="pl-c1">@inline</span> <span class="pl-en">pack!</span>(x<span class="pl-k">::</span><span class="pl-c1">AbstractDict{Symbol}</span>, <span class="pl-k">::</span><span class="pl-c1">Val{k}</span>, val) <span class="pl-k">where</span> {k} <span class="pl-k">=</span> x[k]<span class="pl-k">=</span>val
<span class="pl-c1">@inline</span> <span class="pl-en">pack!</span>(x<span class="pl-k">::</span><span class="pl-c1">AbstractDict{&lt;:AbstractString}</span>, <span class="pl-k">::</span><span class="pl-c1">Val{k}</span>, val) <span class="pl-k">where</span> {k} <span class="pl-k">=</span> x[<span class="pl-c1">string</span>(k)]<span class="pl-k">=</span>val</pre></div>
<p dir="auto">More methods can be added to <code>unpack</code> and <code>pack!</code> to allow for
specialized unpacking/packing of datatypes. Here is a MWE of customizing
<code>unpack</code>, so that it multiplies the values by 2:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using UnPack
struct Foo
    a
    b
end
p = Foo(1, 2)
@unpack a, b = p
a, b # gives (1, 2)

# Now we specialize unpack for our custom type, `Foo`
@inline UnPack.unpack(x::Foo, ::Val{f}) where {f} = 2 * getproperty(x, f)
@unpack a, b = p
a, b # now gives (2, 4)"><pre><span class="pl-k">using</span> UnPack
<span class="pl-k">struct</span> Foo
    a
    b
<span class="pl-k">end</span>
p <span class="pl-k">=</span> <span class="pl-c1">Foo</span>(<span class="pl-c1">1</span>, <span class="pl-c1">2</span>)
<span class="pl-c1">@unpack</span> a, b <span class="pl-k">=</span> p
a, b <span class="pl-c"><span class="pl-c">#</span> gives (1, 2)</span>

<span class="pl-c"><span class="pl-c">#</span> Now we specialize unpack for our custom type, `Foo`</span>
<span class="pl-c1">@inline</span> UnPack<span class="pl-k">.</span><span class="pl-en">unpack</span>(x<span class="pl-k">::</span><span class="pl-c1">Foo</span>, <span class="pl-k">::</span><span class="pl-c1">Val{f}</span>) <span class="pl-k">where</span> {f} <span class="pl-k">=</span> <span class="pl-c1">2</span> <span class="pl-k">*</span> <span class="pl-c1">getproperty</span>(x, f)
<span class="pl-c1">@unpack</span> a, b <span class="pl-k">=</span> p
a, b <span class="pl-c"><span class="pl-c">#</span> now gives (2, 4)</span></pre></div>
<h1 dir="auto"><a id="user-content-related" class="anchor" aria-hidden="true" href="#related"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Related</h1>
<ul dir="auto">
<li>Julia issue on unpacking of function arguments
<a class="issue-link js-issue-link" data-error-text="Failed to load title" data-id="349687532" data-permission-text="Title is private" data-url="https://github.com/JuliaLang/julia/issues/28579" data-hovercard-type="issue" data-hovercard-url="/JuliaLang/julia/issues/28579/hovercard" href="https://github.com/JuliaLang/julia/issues/28579">JuliaLang/julia#28579</a></li>
<li>setting immutables <a href="https://github.com/jw3126/Setfield.jl">https://github.com/jw3126/Setfield.jl</a></li>
</ul>
</article></div>