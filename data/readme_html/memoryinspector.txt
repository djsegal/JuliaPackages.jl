<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-memoryinspectorjl" class="anchor" aria-hidden="true" href="#memoryinspectorjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>MemoryInspector.jl</h1>
<p><a href="https://travis-ci.com/nhdaly/MemoryInspector.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/99b318dbb60da5b4c6455125170e9c55d9faa614/68747470733a2f2f7472617669732d63692e636f6d2f6e6864616c792f4d656d6f7279496e73706563746f722e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/nhdaly/MemoryInspector.jl.svg?branch=master" style="max-width:100%;"></a></p>
<ul>
<li><code>MemoryInspector.@inspect x</code></li>
</ul>
<p>An interactive tool for exploring the sizes of julia objects:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> d <span class="pl-k">=</span> <span class="pl-c1">Dict</span>(<span class="pl-c1">1</span><span class="pl-k">=&gt;</span>(<span class="pl-c1">1</span>,<span class="pl-c1">2</span>), <span class="pl-c1">2</span><span class="pl-k">=&gt;</span><span class="pl-c1">3</span>)
Dict{Int64,Any} with <span class="pl-c1">2</span> entries<span class="pl-k">:</span>
  <span class="pl-c1">2</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">3</span>
  <span class="pl-c1">1</span> <span class="pl-k">=&gt;</span> (<span class="pl-c1">1</span>, <span class="pl-c1">2</span>)

julia<span class="pl-k">&gt;</span> MemoryInspector<span class="pl-k">.</span><span class="pl-c1">@inspect</span> d
—————————————————————————————————————————————————————————————————————————————————————————————————————————
Select a field to recurse into or ↩ to ascend. [q]uit.

Commands<span class="pl-k">:</span> [J]ump to field path.
Toggles<span class="pl-k">:</span> [v]alue of the current field.

(d)<span class="pl-k">::</span><span class="pl-c1">Dict{Int64,Any}</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">480.0</span> B
   <span class="pl-c1">64.0</span> B internal
<span class="pl-c1">3</span> Allocated Fields<span class="pl-k">:</span>
 → vals<span class="pl-k">::</span><span class="pl-c1">Array{Any,1}</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">192.0</span> B
   keys<span class="pl-k">::</span><span class="pl-c1">Array{Int64,1}</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">168.0</span> B
   slots<span class="pl-k">::</span><span class="pl-c1">Array{UInt8,1}</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">56.0</span> B
   ↩
—————————————————————————————————————————————————————————————————————————————————————————————————————————
Select a field to recurse into or ↩ to ascend. [q]uit.

Commands<span class="pl-k">:</span> [J]ump to field path.
Toggles<span class="pl-k">:</span> [v]alue of the current field.

(d<span class="pl-k">.</span>vals)<span class="pl-k">::</span><span class="pl-c1">Array{Any,1}</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">192.0</span> B
   <span class="pl-c1">168.0</span> B internal
<span class="pl-c1">2</span> Allocated Indexes<span class="pl-k">:</span>
 → <span class="pl-c1">16</span><span class="pl-k">::</span><span class="pl-c1">Tuple{Int64,Int64}</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">16.0</span> B
   <span class="pl-c1">6</span><span class="pl-k">::</span><span class="pl-c1">Int64</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">8.0</span> B
   ↩
—————————————————————————————————————————————————————————————————————————————————————————————————————————
Select a field to recurse into or ↩ to ascend. [q]uit.

Commands<span class="pl-k">:</span> [J]ump to field path.
Toggles<span class="pl-k">:</span> [v]alue of the current field.

(d<span class="pl-k">.</span>vals[<span class="pl-c1">16</span>])<span class="pl-k">::</span><span class="pl-c1">Tuple{Int64,Int64}</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">16.0</span> B
<span class="pl-c1">0</span> Allocated Indexes<span class="pl-k">:</span>
 → ↩

—————————————————————————————————————————————————————————————————————————————————————————————————————————
Select a field to recurse into or ↩ to ascend. [q]uit.

Commands<span class="pl-k">:</span> [J]ump to field path.
Toggles<span class="pl-k">:</span> [v]alue of the current field.

(<span class="pl-c1">1</span>, <span class="pl-c1">2</span>) <span class="pl-k">=&gt;</span> <span class="pl-c1">16.0</span> B
<span class="pl-c1">0</span> Allocated Indexes<span class="pl-k">:</span>
 → ↩
</pre></div>
<h2><a id="user-content-featuring-true-size-accounting" class="anchor" aria-hidden="true" href="#featuring-true-size-accounting"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Featuring <em>True Size Accounting!</em></h2>
<p>Importantly (like <code>Base.summarysize(x)</code>) <code>@inspect x</code> is able to account for self-references
and shared references inside of objects, so that only the true sizes of fields are
displayed! This allows you to correctly investigate the size of truly complex objects.</p>
<p>For example:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">mutable struct</span> Obj{T1,T2}
           a<span class="pl-k">::</span><span class="pl-c1">T1</span>
           b<span class="pl-k">::</span><span class="pl-c1">T2</span>
           <span class="pl-en">Obj</span><span class="pl-c1">{A,B}</span>(a<span class="pl-k">::</span><span class="pl-c1">A</span>,b<span class="pl-k">::</span><span class="pl-c1">B</span>) <span class="pl-k">where</span> {A,B} <span class="pl-k">=</span> <span class="pl-c1">new</span><span class="pl-c1">{A,B}</span>(a,b)
           <span class="pl-en">Obj</span><span class="pl-c1">{A,B}</span>(a<span class="pl-k">::</span><span class="pl-c1">A</span>) <span class="pl-k">where</span> {A,B} <span class="pl-k">=</span> <span class="pl-c1">new</span><span class="pl-c1">{A,B}</span>(a) <span class="pl-c"><span class="pl-c">#</span> Allow partial construction</span>
           <span class="pl-en">Obj</span><span class="pl-c1">{A,B}</span>() <span class="pl-k">where</span> {A,B} <span class="pl-k">=</span> <span class="pl-c1">new</span><span class="pl-c1">{A,B}</span>() <span class="pl-c"><span class="pl-c">#</span> Allow partial construction</span>
           <span class="pl-en">Obj</span>(a<span class="pl-k">::</span><span class="pl-c1">A</span>,b<span class="pl-k">::</span><span class="pl-c1">B</span>) <span class="pl-k">where</span> {A,B} <span class="pl-k">=</span> <span class="pl-c1">Obj</span><span class="pl-c1">{A,B}</span>(a,b)
       <span class="pl-k">end</span>

julia<span class="pl-k">&gt;</span> s <span class="pl-k">=</span> <span class="pl-c1">join</span>(<span class="pl-c1">rand</span>(<span class="pl-s"><span class="pl-pds">'</span>a<span class="pl-pds">'</span></span>:<span class="pl-s"><span class="pl-pds">'</span>z<span class="pl-pds">'</span></span>, <span class="pl-c1">1024</span><span class="pl-k">*</span><span class="pl-c1">1024</span>)); <span class="pl-c"><span class="pl-c">#</span> 1 MiB string</span>

julia<span class="pl-k">&gt;</span> multistring <span class="pl-k">=</span> <span class="pl-c1">Obj</span>(s,s);   <span class="pl-c"><span class="pl-c">#</span> Shared references to large object</span>

julia<span class="pl-k">&gt;</span> selfie <span class="pl-k">=</span> <span class="pl-c1">Obj</span><span class="pl-c1">{Obj,Obj}</span>(multistring);

julia<span class="pl-k">&gt;</span> selfie<span class="pl-k">.</span>b <span class="pl-k">=</span> selfie;    <span class="pl-c"><span class="pl-c">#</span> Self-reference</span>

julia<span class="pl-k">&gt;</span> MemoryInspector<span class="pl-k">.</span><span class="pl-c1">@inspect</span> selfie
———————————————————————————————————————————————————
(selfie)<span class="pl-k">::</span><span class="pl-c1">Obj{Obj,Obj}</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1.0</span> MiB
<span class="pl-c1">2</span> Fields<span class="pl-k">:</span>
   a<span class="pl-k">::</span><span class="pl-c1">Obj{String,String}</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1.0</span> MiB
 → b<span class="pl-k">::</span><span class="pl-c1">Obj{Obj,Obj}</span> <span class="pl-k">=&gt;</span> <span class="pl-k">&lt;</span>self<span class="pl-k">-</span>reference<span class="pl-k">&gt;</span>
   ↩
———————————————————————————————————————————————————
(selfie<span class="pl-k">.</span>b)<span class="pl-k">::</span><span class="pl-c1">Obj{Obj,Obj}</span> <span class="pl-k">=&gt;</span> <span class="pl-k">&lt;</span>self<span class="pl-k">-</span>reference<span class="pl-k">&gt;</span>
<span class="pl-c1">0</span> Fields<span class="pl-k">:</span>
 → ↩

———————————————————————————————————————————————————
(selfie)<span class="pl-k">::</span><span class="pl-c1">Obj{Obj,Obj}</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1.0</span> MiB
<span class="pl-c1">2</span> Fields<span class="pl-k">:</span>
 → a<span class="pl-k">::</span><span class="pl-c1">Obj{String,String}</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1.0</span> MiB
   b<span class="pl-k">::</span><span class="pl-c1">Obj{Obj,Obj}</span> <span class="pl-k">=&gt;</span> <span class="pl-k">&lt;</span>self<span class="pl-k">-</span>reference<span class="pl-k">&gt;</span>
   ↩
———————————————————————————————————————————————————
(selfie<span class="pl-k">.</span>a)<span class="pl-k">::</span><span class="pl-c1">Obj{String,String}</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1.0</span> MiB
<span class="pl-c1">2</span> Fields<span class="pl-k">:</span>
 → a<span class="pl-k">::</span><span class="pl-c1">String</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1.0</span> MiB
   b<span class="pl-k">::</span><span class="pl-c1">String</span> <span class="pl-k">=&gt;</span> <span class="pl-k">&lt;</span>self<span class="pl-k">-</span>reference<span class="pl-k">&gt;</span>
   ↩
———————————————————————————————————————————————————
(selfie<span class="pl-k">.</span>a<span class="pl-k">.</span>a)<span class="pl-k">::</span><span class="pl-c1">String</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1.0</span> MiB
<span class="pl-c1">0</span> Fields<span class="pl-k">:</span>
 → ↩</pre></div>
<p>Note that this does mean that sometimes the bytes may be accounted for in a sub-reference
that may not match your expectations. This tradeoff between breadth-first and depth-first
searching is something we should investigate tuning in the future!</p>
<h2><a id="user-content-desired-features" class="anchor" aria-hidden="true" href="#desired-features"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Desired Features</h2>
<p>See this GitHub Issue for some desired features: <a href="https://github.com/NHDaly/MemoryInspector.jl/issues/1">#1</a></p>
</article></div>