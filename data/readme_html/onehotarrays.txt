<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/FluxML/OneHotArrays.jl/raw/main/docs/src/assets/logo.png"><img align="right" width="200px" src="https://github.com/FluxML/OneHotArrays.jl/raw/main/docs/src/assets/logo.png" style="max-width: 100%;"></a></p>
<h1 dir="auto"><a id="user-content-onehotarraysjl" class="anchor" aria-hidden="true" href="#onehotarraysjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>OneHotArrays.jl</h1>
<p dir="auto"><a href="https://fluxml.ai/OneHotArrays.jl/dev/" rel="nofollow"><img src="https://camo.githubusercontent.com/56f8252ba8e9d3f0b810769543f77823d2fe031ce560d4c2d69fb1fcad800383/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6c61746573742d626c75652e737667" alt="Documentation" data-canonical-src="https://img.shields.io/badge/docs-latest-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/FluxML/OneHotArrays.jl/actions/workflows/CI.yml"><img src="https://github.com/FluxML/OneHotArrays.jl/actions/workflows/CI.yml/badge.svg" alt="Tests" style="max-width: 100%;"></a></p>
<p dir="auto">This package provides memory efficient one-hot array encodings.
It was originally part of <a href="https://github.com/FluxML/Flux.jl">Flux.jl</a>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using OneHotArrays

julia&gt; m = onehotbatch([10, 20, 30, 10, 10], 10:10:40)
4×5 OneHotMatrix(::Vector{UInt32}) with eltype Bool:
 1  ⋅  ⋅  1  1
 ⋅  1  ⋅  ⋅  ⋅
 ⋅  ⋅  1  ⋅  ⋅
 ⋅  ⋅  ⋅  ⋅  ⋅

julia&gt; dump(m)
OneHotMatrix{UInt32, 4, Vector{UInt32}}
  indices: Array{UInt32}((5,)) UInt32[0x00000001, 0x00000002, 0x00000003, 0x00000001, 0x00000001]

julia&gt; @which rand(100, 4) * m
*(A::AbstractMatrix, B::Union{OneHotArray{var&quot;#s14&quot;, L, 1, var&quot;N+1&quot;, I}, Base.ReshapedArray{Bool, var&quot;N+1&quot;, &lt;:OneHotArray{var&quot;#s14&quot;, L, &lt;:Any, &lt;:Any, I}}} where {var&quot;#s14&quot;, var&quot;N+1&quot;, I}) where L
     @ OneHotArrays ~/.julia/dev/OneHotArrays/src/linalg.jl:7"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> OneHotArrays

julia<span class="pl-k">&gt;</span> m <span class="pl-k">=</span> <span class="pl-c1">onehotbatch</span>([<span class="pl-c1">10</span>, <span class="pl-c1">20</span>, <span class="pl-c1">30</span>, <span class="pl-c1">10</span>, <span class="pl-c1">10</span>], <span class="pl-c1">10</span><span class="pl-k">:</span><span class="pl-c1">10</span><span class="pl-k">:</span><span class="pl-c1">40</span>)
<span class="pl-c1">4</span><span class="pl-k">×</span><span class="pl-c1">5</span> <span class="pl-c1">OneHotMatrix</span>(<span class="pl-k">::</span><span class="pl-c1">Vector{UInt32}</span>) with eltype Bool<span class="pl-k">:</span>
 <span class="pl-c1">1</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-c1">1</span>  <span class="pl-c1">1</span>
 <span class="pl-k">⋅</span>  <span class="pl-c1">1</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>
 <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-c1">1</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>
 <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>  <span class="pl-k">⋅</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">dump</span>(m)
OneHotMatrix{UInt32, <span class="pl-c1">4</span>, Vector{UInt32}}
  indices<span class="pl-k">:</span> <span class="pl-c1">Array</span><span class="pl-c1">{UInt32}</span>((<span class="pl-c1">5</span>,)) UInt32[<span class="pl-c1">0x00000001</span>, <span class="pl-c1">0x00000002</span>, <span class="pl-c1">0x00000003</span>, <span class="pl-c1">0x00000001</span>, <span class="pl-c1">0x00000001</span>]

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@which</span> <span class="pl-c1">rand</span>(<span class="pl-c1">100</span>, <span class="pl-c1">4</span>) <span class="pl-k">*</span> m
<span class="pl-k">*</span>(A<span class="pl-k">::</span><span class="pl-c1">AbstractMatrix</span>, B<span class="pl-k">::</span><span class="pl-c1">Union{OneHotArray{var"#s14", L, 1, var"N+1", I}, Base.ReshapedArray{Bool, var"N+1", &lt;:OneHotArray{var"#s14", L, &lt;:Any, &lt;:Any, I}}}</span> <span class="pl-k">where</span> {<span class="pl-c1">var"#s14"</span>, <span class="pl-c1">var"N+1"</span>, I}) <span class="pl-k">where</span> L
     @ OneHotArrays <span class="pl-k">~</span><span class="pl-k">/</span><span class="pl-k">.</span>julia<span class="pl-k">/</span>dev<span class="pl-k">/</span>OneHotArrays<span class="pl-k">/</span>src<span class="pl-k">/</span>linalg<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">7</span></pre></div>
</article></div>