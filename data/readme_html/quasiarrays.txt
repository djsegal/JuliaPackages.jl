<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-quasiarraysjl" class="anchor" aria-hidden="true" href="#quasiarraysjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>QuasiArrays.jl</h1>
<p>A package for representing quasi-arrays</p>
<p><a href="https://travis-ci.org/JuliaApproximation/QuasiArrays.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/97f4042eb13422882251084beea28745c5466b45/68747470733a2f2f7472617669732d63692e6f72672f4a756c6961417070726f78696d6174696f6e2f51756173694172726179732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaApproximation/QuasiArrays.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/JuliaApproximation/QuasiArrays.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/8d61c3a00a10d3d19ed588a67b138ae7e5e227c4/68747470733a2f2f636f6465636f762e696f2f67682f4a756c6961417070726f78696d6174696f6e2f51756173694172726179732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/JuliaApproximation/QuasiArrays.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p>A <em>quasi-array</em> is an array with non-classical indexing, including possibly
continuous indexing. This packages implements quasi-arrays. For example, we
can create a quasi-array where the first index is float valued:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> QuasiArrays
A <span class="pl-k">=</span> <span class="pl-c1">QuasiArray</span>(<span class="pl-c1">rand</span>(<span class="pl-c1">5</span>,<span class="pl-c1">4</span>,<span class="pl-c1">3</span>), (<span class="pl-c1">range</span>(<span class="pl-c1">0</span>,<span class="pl-c1">1</span>; length<span class="pl-k">=</span><span class="pl-c1">5</span>), Base<span class="pl-k">.</span><span class="pl-c1">OneTo</span>(<span class="pl-c1">4</span>), [<span class="pl-c1">2</span>,<span class="pl-c1">3</span>,<span class="pl-c1">6</span>]))
A[<span class="pl-c1">0.25</span>,<span class="pl-c1">2</span>,<span class="pl-c1">6</span>] <span class="pl-c"><span class="pl-c">#</span> equivalent to parent(A)[2,2,3]</span></pre></div>
<p>Analogues of many the base types are supported. For example, we can create a quasi-diagonal matrix</p>
<div class="highlight highlight-source-julia"><pre>v <span class="pl-k">=</span> <span class="pl-c1">QuasiVector</span>(<span class="pl-c1">rand</span>(<span class="pl-c1">5</span>), <span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">0.5</span><span class="pl-k">:</span><span class="pl-c1">2</span>) <span class="pl-c"><span class="pl-c">#</span> diagonal</span>
D <span class="pl-k">=</span> <span class="pl-c1">QuasiDiagonal</span>(v)
D[<span class="pl-c1">0.5</span>,<span class="pl-c1">0.5</span>] <span class="pl-c"><span class="pl-c">#</span> equivalent to parent(D)[0.5] == parent(parent(D))[2]</span></pre></div>
<p>We can take views of quasi-arrays:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">view</span>(A, <span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">0.25</span><span class="pl-k">:</span><span class="pl-c1">0.5</span>, <span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">3</span>, [<span class="pl-c1">2</span>,<span class="pl-c1">6</span>])[<span class="pl-c1">2</span>,<span class="pl-c1">1</span>,<span class="pl-c1">2</span>] <span class="pl-c"><span class="pl-c">#</span> equivalent to A[0.25,2,6]</span></pre></div>
<p>And we can also broadcast, which preserves axes:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">exp</span>.(v)[<span class="pl-c1">0.5</span>] <span class="pl-c"><span class="pl-c">#</span> equivalent to exp(v[0.5])</span></pre></div>
<p>Finally, by combining with IntervalSets.jl we support continuous indexing:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> IntervalSets
x <span class="pl-k">=</span> <span class="pl-c1">Inclusion</span>(<span class="pl-c1">0.0</span><span class="pl-k">..</span><span class="pl-c1">1.0</span>) <span class="pl-c"><span class="pl-c">#</span> Inclusion is identity, e.g. x[0.2] == 0.2</span>
D <span class="pl-k">=</span> <span class="pl-c1">QuasiDiagonal</span>(x)
D[<span class="pl-c1">0.1</span>,<span class="pl-c1">0.2</span>] <span class="pl-c"><span class="pl-c">#</span> 0.0</span>
D[<span class="pl-c1">0.1</span>,<span class="pl-c1">0.1</span>] <span class="pl-c"><span class="pl-c">#</span> 0.1</span></pre></div>
<p>Full functionality for continuous quasi-arrays is in <a href="https://github.com/JuliaApproximation/ContinuumArrays.jl">ContinuumArrays.jl</a>.</p>
<h2><a id="user-content-relation-to-other-julia-packages" class="anchor" aria-hidden="true" href="#relation-to-other-julia-packages"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Relation to other Julia packages</h2>
<p>There are other packages that allow non-standard indexing, such as
<a href="https://github.com/davidavdav/NamedArrays.jl">NamedArrays</a> and <a href="https://github.com/JuliaArrays/AxisArrays.jl">AxisArrays</a>.
QuasiArrays.jl focusses on linear algebra aspects, that is, the axes of a quasi-array
encode the inner product. This forms the basis of <a href="https://github.com/JuliaApproximation/ContinuumArrays.jl">ContinuumArrays.jl</a>
which is a fresh approach to finite element methods and spectral methods, where bases
are represented as quasi-matrices and discretizations arise from linear algebra
operations on quasi-matrices.</p>
</article></div>