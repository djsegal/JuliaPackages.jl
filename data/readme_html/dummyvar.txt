<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-dummyvar" class="anchor" aria-hidden="true" href="#dummyvar"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Dummyvar</h1>
<p dir="auto"><a href="https://github.com/fabrizioleone/Dummyvar.jl/actions/workflows/CI.yml?query=branch%3Amain"><img src="https://github.com/fabrizioleone/Dummyvar.jl/actions/workflows/CI.yml/badge.svg?branch=main" alt="Build Status" style="max-width: 100%;"></a></p>
<p dir="auto">This Julia package allows to create a matrix of zeros and ones from a vector of groups. It reproduces the Matlab's function <a href="https://www.mathworks.com/help/stats/dummyvar.html" rel="nofollow">dummyvar</a>.</p>
<p dir="auto">The input type must be a Vector. The output matrix has a number of columns equal to the number of unique groups contained in the vector, and the ones indicate those groups.</p>
<p dir="auto">To use the package, type in the Julia REPL</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Pkg.add(&quot;Dummyvar&quot;)
using Dummyvar"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>Dummyvar<span class="pl-pds">"</span></span>)
<span class="pl-k">using</span> Dummyvar</pre></div>
<p dir="auto">The function <code>dummycreate</code> creates the matrix of zeros and ones. Here are some examples</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="dummycreate([1.0, 2.0])

2×2 Matrix{Float64}:
 1.0  0.0
 0.0  1.0

dummycreate(['a', 'b'])

2×2 Matrix{Float64}:
 1.0  0.0
 0.0  1.0
 
dummycreate([1, 'a', 'b'])

3×3 Matrix{Float64}:
 1.0  0.0  0.0
 0.0  1.0  0.0
 0.0  0.0  1.0
 
dummycreate([1, 'a', 'b', 1])

4×3 Matrix{Float64}:
 1.0  0.0  0.0
 0.0  1.0  0.0
 0.0  0.0  1.0
 1.0  0.0  0.0
"><pre><span class="pl-c1">dummycreate</span>([<span class="pl-c1">1.0</span>, <span class="pl-c1">2.0</span>])

<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">2</span> Matrix{Float64}<span class="pl-k">:</span>
 <span class="pl-c1">1.0</span>  <span class="pl-c1">0.0</span>
 <span class="pl-c1">0.0</span>  <span class="pl-c1">1.0</span>

<span class="pl-c1">dummycreate</span>([<span class="pl-s"><span class="pl-pds">'</span>a<span class="pl-pds">'</span></span>, <span class="pl-s"><span class="pl-pds">'</span>b<span class="pl-pds">'</span></span>])

<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">2</span> Matrix{Float64}<span class="pl-k">:</span>
 <span class="pl-c1">1.0</span>  <span class="pl-c1">0.0</span>
 <span class="pl-c1">0.0</span>  <span class="pl-c1">1.0</span>
 
<span class="pl-c1">dummycreate</span>([<span class="pl-c1">1</span>, <span class="pl-s"><span class="pl-pds">'</span>a<span class="pl-pds">'</span></span>, <span class="pl-s"><span class="pl-pds">'</span>b<span class="pl-pds">'</span></span>])

<span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">3</span> Matrix{Float64}<span class="pl-k">:</span>
 <span class="pl-c1">1.0</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>
 <span class="pl-c1">0.0</span>  <span class="pl-c1">1.0</span>  <span class="pl-c1">0.0</span>
 <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">1.0</span>
 
<span class="pl-c1">dummycreate</span>([<span class="pl-c1">1</span>, <span class="pl-s"><span class="pl-pds">'</span>a<span class="pl-pds">'</span></span>, <span class="pl-s"><span class="pl-pds">'</span>b<span class="pl-pds">'</span></span>, <span class="pl-c1">1</span>])

<span class="pl-c1">4</span><span class="pl-k">×</span><span class="pl-c1">3</span> Matrix{Float64}<span class="pl-k">:</span>
 <span class="pl-c1">1.0</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>
 <span class="pl-c1">0.0</span>  <span class="pl-c1">1.0</span>  <span class="pl-c1">0.0</span>
 <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">1.0</span>
 <span class="pl-c1">1.0</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>
</pre></div>
</article></div>