<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-libexpat---julia-wrapper-for-libexpat" class="anchor" aria-hidden="true" href="#libexpat---julia-wrapper-for-libexpat"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>LibExpat - Julia wrapper for libexpat</h1>
<p dir="auto"><a href="https://travis-ci.org/JuliaIO/LibExpat.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/6bdff2953d0a2679c347b0e227c96b8e6edd9497d886789df201f6741550ef1b/68747470733a2f2f7472617669732d63692e6f72672f4a756c6961494f2f4c696245787061742e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaIO/LibExpat.jl.svg?branch=master" style="max-width: 100%;"></a>
<a href="https://ci.appveyor.com/project/Keno/libexpat-jl/branch/master" rel="nofollow"><img src="https://camo.githubusercontent.com/1036b7c6f5ed50fcb399a1ce6dba4efa328d1b65f922f46523b650cbb1e6ce3d/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f75716e676f39327362626e6f306c796c2f6272616e63682f6d61737465723f7376673d74727565" alt="Build status" data-canonical-src="https://ci.appveyor.com/api/projects/status/uqngo92sbbno0lyl/branch/master?svg=true" style="max-width: 100%;"></a>
<a href="https://coveralls.io/github/JuliaIO/LibExpat.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/6f1d089a282ae0520c42b9e2f30ff3babaff2b58020ef4e6f23ef696b433beb5/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f4a756c6961494f2f4c696245787061742e6a6c2f62616467652e737667" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/JuliaIO/LibExpat.jl/badge.svg" style="max-width: 100%;"></a></p>
<h1 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h1>
<h2 dir="auto"><a id="user-content-xpath-queries-on-fully-parsed-tree" class="anchor" aria-hidden="true" href="#xpath-queries-on-fully-parsed-tree"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>XPath queries on fully parsed tree</h2>
<p dir="auto">Has only three relevant APIs</p>
<ul dir="auto">
<li>
<p dir="auto"><code>xp_parse(s::String)</code> returns a parsed object of type <code>ETree</code> (used to be called <code>ParsedData</code>).</p>
</li>
<li>
<p dir="auto"><code>LibExpat.find(pd::ETree, element_path::String)</code> is used to search for elements within the parsed data object as returned by <code>xp_parse</code></p>
</li>
<li>
<p dir="auto"><code>(pd::ETree)[xpath::String]</code> or <code>xpath(pd::ETree, xpath::String)</code> is also used to search for elements within the parsed
data object as returned by <code>xp_parse</code>, but using a subset of the xpath specification</p>
</li>
</ul>
<p dir="auto">Examples for <code>element_path</code> are:</p>
<ul dir="auto">
<li>
<p dir="auto"><code>"foo/bar/baz"</code> returns an array of elements, i.e. ETree objects with tag <code>"baz"</code> under <code>foo/bar</code></p>
</li>
<li>
<p dir="auto"><code>"foo//baz"</code> returns an array of elements, i.e. ETree objects with tag <code>"baz"</code> anywhere under <code>foo</code></p>
</li>
<li>
<p dir="auto"><code>"foo/bar/baz[1]"</code> returns a <code>ETree</code> object representing the first element of type <code>"baz"</code></p>
</li>
<li>
<p dir="auto"><code>"foo/bar/baz[1]{qux}"</code> returns a String representing the attribute <code>"qux"</code> of the first element of type <code>"baz"</code> which
has the <code>"qux"</code> attribute</p>
</li>
<li>
<p dir="auto"><code>"foo/bar[2]/baz[1]{qux}"</code> in the case there is more than one <code>"bar"</code> element, this picks up <code>"baz"</code> from the 2nd <code>"bar"</code></p>
</li>
<li>
<p dir="auto"><code>"foo/bar{qux}"</code> returns a String representing the attribute <code>"qux"</code> of <code>foo/bar</code></p>
</li>
<li>
<p dir="auto"><code>"foo/bar/baz[1]#string"</code> returns a String representing the "string-value" for the given element path. The string-value is the
concatenation of all text nodes that are descendants of the given node. NOTE: All whitespace is preserved in the concatenated string.</p>
</li>
</ul>
<p dir="auto">If only one sub-element exists, the index is assumed to be 1 and may be omitted.</p>
<ul dir="auto">
<li>
<p dir="auto"><code>"foo/bar/baz[2]{qux}"</code> is the same as <code>"foo[1]/bar[1]/baz[2]{qux}"</code></p>
</li>
<li>
<p dir="auto">returns an empty list or <code>nothing</code> if an element in the path is not found</p>
</li>
<li>
<p dir="auto">NOTE: If the <code>element_path</code> starts with a <code>/</code> then the search starts from pd as the root pd (the first argument)</p>
</li>
<li>
<p dir="auto">If <code>element_path</code> does NOT start with a <code>/</code> then the search starts with the children of the root pd (the first argument)</p>
</li>
</ul>
<p dir="auto">You can also navigate the returned ETree object directly, i.e., without using <code>LibExpat.find</code>.
The relevant members of ETree are:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="type ETree
    name        # XML Tag
    attr        # Dict of tag attributes as name-value pairs
    elements    # Vector of child nodes (ETree or String)
end"><pre class="notranslate"><code>type ETree
    name        # XML Tag
    attr        # Dict of tag attributes as name-value pairs
    elements    # Vector of child nodes (ETree or String)
end
</code></pre></div>
<p dir="auto">The xpath search consists of two parts: the parser and the search. Calling <code>xpath"some/xpath[expression]"</code> <code>xpath(xp::String)</code> will construct an XPath object that can be passed as the second argument to the xpath search. The search can be used via <code>parseddata[xpath"string"]</code> or <code>xpath(parseddata, xpath"string")</code>. The use of the xpath string macro is not required, but is recommended for performance, and the ability to use $variable interpolation. When xpath is called as a macro, it will parse path elements starting with $ as julia variables and perform limited string interpolation:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="xpath&quot;/a/$b/c[contains(.,'\$x$y$(z)!\'')]&quot;"><pre class="notranslate"><code>xpath"/a/$b/c[contains(.,'\$x$y$(z)!\'')]"
</code></pre></div>
<p dir="auto">The parser handles most of the XPath 1.0 specification. The following features are currently missing:</p>
<ul dir="auto">
<li>accessing parents of attributes</li>
<li>several xpath functions (namespace-uri, lang, processing-instructions, and comment). name and local-name do not account for xmlns namespaces correctly.</li>
<li>parenthesized expressions</li>
<li>xmlns namespace parsing</li>
<li>correct ordering of output</li>
<li>several xpath axes (namespace, following, following-sibling, preceding, preceding-sibling)</li>
<li>" and ' (although you can use <code>\'</code> or <code>\"</code> as escape sequences when using the <code>xpath""</code> string macro)</li>
</ul>
<h2 dir="auto">
<a id="user-content-streaming-xml-parsing" class="anchor" aria-hidden="true" href="#streaming-xml-parsing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Streaming XML parsing</h2>
<p dir="auto">If you do not want to store the whole tree in memory, LibExpat offers the abbility to define callbacks for streaming parsing too. To parse a document, you creata a new <code>XPCallbacks</code> instance and define all callbacks you want to receive.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="type XPCallbacks
    # These are all (yet) available callbacks, by default initialised with a dummy function.
    # Each callback will be handed as first argument a XPStreamHandler and the following other parameters:
    start_cdata     # (..) -- Start of a CDATA section
    end_cdata       # (..) -- End of a CDATA sections
    comment         # (.., comment::String) -- A comment
    character_data  # (.., txt::String) -- A character data section
    default         # (.., txt::String) -- Handler for any characters in the document which wouldn't otherwise be handled.
    default_expand  # (.., txt::String) -- Default handler that doesn't inhibit the expansion of internal entity reference.
    start_element   # (.., name::String, attrs::Dict{String,String}) -- Start of a tag/element
    end_element     # (.., name::String) -- End of a tag/element
    start_namespace # (.., prefix::String, uri::String) -- Start of a namespace declaration
    end_namespace   # (.., prefix::String) -- End of the scope of a namespace
end"><pre>type XPCallbacks
    <span class="pl-c"><span class="pl-c">#</span> These are all (yet) available callbacks, by default initialised with a dummy function.</span>
    <span class="pl-c"><span class="pl-c">#</span> Each callback will be handed as first argument a XPStreamHandler and the following other parameters:</span>
    start_cdata     <span class="pl-c"><span class="pl-c">#</span> (..) -- Start of a CDATA section</span>
    end_cdata       <span class="pl-c"><span class="pl-c">#</span> (..) -- End of a CDATA sections</span>
    comment         <span class="pl-c"><span class="pl-c">#</span> (.., comment::String) -- A comment</span>
    character_data  <span class="pl-c"><span class="pl-c">#</span> (.., txt::String) -- A character data section</span>
    default         <span class="pl-c"><span class="pl-c">#</span> (.., txt::String) -- Handler for any characters in the document which wouldn't otherwise be handled.</span>
    default_expand  <span class="pl-c"><span class="pl-c">#</span> (.., txt::String) -- Default handler that doesn't inhibit the expansion of internal entity reference.</span>
    start_element   <span class="pl-c"><span class="pl-c">#</span> (.., name::String, attrs::Dict{String,String}) -- Start of a tag/element</span>
    end_element     <span class="pl-c"><span class="pl-c">#</span> (.., name::String) -- End of a tag/element</span>
    start_namespace <span class="pl-c"><span class="pl-c">#</span> (.., prefix::String, uri::String) -- Start of a namespace declaration</span>
    end_namespace   <span class="pl-c"><span class="pl-c">#</span> (.., prefix::String) -- End of the scope of a namespace</span>
<span class="pl-k">end</span></pre></div>
<p dir="auto">Using an initialized <code>XPCallbacks</code> object, one can start parsing using <code>xp_streaming_parse</code> which takes the XML document as a string, the <code>XPCallbacks</code> object and an arbitrary data object which can be used to reference some context during parsing. This data object is accessible through the <code>data</code> attribute of the <code>XPStreamHandler</code> instance passed to each callback.</p>
<p dir="auto">If your data is too large to fit into memory, as an alternative you can use <code>xp_streaming_parsefile</code> to parse the XML document line-by-line (the number of lines read and passed to expat is controlled by the keyword argument <code>bufferlines</code>).</p>
<h1 dir="auto">
<a id="user-content-ijulia-demonstration-notebook" class="anchor" aria-hidden="true" href="#ijulia-demonstration-notebook"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>IJulia Demonstration Notebook</h1>
<p dir="auto"><a href="http://nbviewer.ipython.org/urls/raw.github.com/amitmurthy/LibExpat.jl/master/libexpat_test.ipynb" rel="nofollow">LibExpat IJulia Demo </a></p>
</article></div>