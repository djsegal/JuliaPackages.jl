<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-sealjl" class="anchor" aria-hidden="true" href="#sealjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>SEAL.jl</h1>
<p dir="auto"><a href="https://juliacrypto.github.io/SEAL.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Documentation-stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://juliacrypto.github.io/SEAL.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Documentation-dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/JuliaCrypto/SEAL.jl/actions?query=workflow%3ACI"><img src="https://github.com/JuliaCrypto/SEAL.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/JuliaCrypto/SEAL.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/2e34e85dadcdec84041f58db948af11e996320be9887108c6f3e2534a19788f4/68747470733a2f2f636f6465636f762e696f2f67682f4a756c696143727970746f2f5345414c2e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/JuliaCrypto/SEAL.jl/branch/main/graph/badge.svg" style="max-width: 100%;"></a>
<a href="https://opensource.org/licenses/MIT" rel="nofollow"><img src="https://camo.githubusercontent.com/2da4b47047416995ad40532496f4b028e9aeca4a9ad036ed17bee5d2fb753b32/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d4d49542d737563636573732e737667" alt="License: MIT" data-canonical-src="https://img.shields.io/badge/License-MIT-success.svg" style="max-width: 100%;"></a></p>
<p dir="auto"><strong>SEAL.jl</strong> is a Julia package that wraps the Microsoft
<a href="https://github.com/microsoft/SEAL">SEAL</a> library for homomorphic encryption. It
supports the Brakerski/Fan-Vercauteren (BFV) and Cheon-Kim-Kim-Song (CKKS, also
known as HEAAN in literature) schemes and exposes the homomorphic encryption
capabilitites of SEAL in a (mostly) intuitive and Julian way. SEAL.jl is
published under the same permissive MIT license as the Microsoft SEAL library.</p>
<p dir="auto">Currently, SEAL.jl supports all operations that are used in the examples of the
<a href="https://github.com/microsoft/SEAL/tree/master/native/examples">SEAL library</a>.
This includes encoding and encryption, addition and multiplication, rotation,
relinearization and modulus switching for the BFV and CKKS schemes.</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">To install SEAL.jl, start a Julia REPL, hit <code>]</code> to enter Julia's <code>Pkg</code> mode, and
then execute</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="(@v1.5) pkg&gt; add SEAL"><pre>(<span class="pl-c1">@v1</span>.<span class="pl-c1">5</span>) pkg<span class="pl-k">&gt;</span> add SEAL</pre></div>
<p dir="auto">Alternatively, you can install SEAL.jl by using <code>Pkg</code> directly, i.e., by running</p>
<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia -e 'using Pkg; Pkg.add(&quot;SEAL&quot;)'"><pre>julia -e <span class="pl-s"><span class="pl-pds">'</span>using Pkg; Pkg.add("SEAL")<span class="pl-pds">'</span></span></pre></div>
<p dir="auto">SEAL.jl depends on the binary distribution of the SEAL library, which is
available as a Julia package <code>SEAL_jll.jl</code> and which is automatically installed
as a dependency.</p>
<p dir="auto"><em>Note: Currently SEAL_jll.jl is not available on Windows, thus SEAL.jl will
work only on Linux, MacOS and FreeBSD. Also, SEAL_jll.jl does not work on 32-bit
systems.</em></p>
<h2 dir="auto"><a id="user-content-getting-started" class="anchor" aria-hidden="true" href="#getting-started"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Getting started</h2>
<h3 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h3>
<p dir="auto">After installation, load SEAL.jl by running</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using SEAL"><pre><span class="pl-k">using</span> SEAL</pre></div>
<p dir="auto">in the REPL. A <strong>minimal</strong> working example for encrypting an array of integers using the BFV
scheme, squaring it, and decrypting it, looks as follows:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using SEAL
[ Info: Precompiling SEAL [bac81e26-86e4-4b48-8696-7d0406d5dbc1]

julia&gt; parms = EncryptionParameters(SchemeType.bfv)
EncryptionParameters(Ptr{Nothing} @0x0000000002e1d3a0)

julia&gt; poly_modulus_degree = 4096
4096

julia&gt; set_poly_modulus_degree!(parms, poly_modulus_degree)
EncryptionParameters(Ptr{Nothing} @0x0000000002e1d3a0)

julia&gt; set_coeff_modulus!(parms, coeff_modulus_bfv_default(poly_modulus_degree))
EncryptionParameters(Ptr{Nothing} @0x0000000002e1d3a0)

julia&gt; set_plain_modulus!(parms, plain_modulus_batching(poly_modulus_degree, 20))
EncryptionParameters(Ptr{Nothing} @0x0000000002e1d3a0)

julia&gt; context = SEALContext(parms)
SEALContext(Ptr{Nothing} @0x0000000004298440)

julia&gt; keygen = KeyGenerator(context)
KeyGenerator(Ptr{Nothing} @0x00000000021ef540)

julia&gt; public_key_ = PublicKey()
PublicKey(Ptr{Nothing} @0x0000000002272610)

julia&gt; create_public_key!(public_key_, keygen)

julia&gt; secret_key_ = secret_key(keygen)
SecretKey(Ptr{Nothing} @0x0000000001cec2a0)

julia&gt; encryptor = Encryptor(context, public_key_)
Encryptor(Ptr{Nothing} @0x0000000001cd4480)

julia&gt; evaluator = Evaluator(context)
Evaluator(Ptr{Nothing} @0x000000000428bdd0)

julia&gt; decryptor = Decryptor(context, secret_key_)
Decryptor(Ptr{Nothing} @0x00000000037670d0)

julia&gt; batch_encoder = BatchEncoder(context)
BatchEncoder(Ptr{Nothing} @0x0000000001fb4bd0, SEALContext(Ptr{Nothing} @0x0000000001b87780))

julia&gt; pod_matrix = collect(UInt64, 1:slot_count(batch_encoder));

julia&gt; Int.(vcat(pod_matrix[1:3], pod_matrix[end-3:end]))
7-element Array{Int64,1}:
    1
    2
    3
 4093
 4094
 4095
 4096

julia&gt; plain_matrix = Plaintext()
Plaintext(Ptr{Nothing} @0x00000000042db6e0)

julia&gt; encode!(plain_matrix, pod_matrix, batch_encoder)
Plaintext(Ptr{Nothing} @0x0000000002ce0370)

julia&gt; encrypted_matrix = Ciphertext()
Ciphertext(Ptr{Nothing} @0x0000000002d91b80)

julia&gt; encrypt!(encrypted_matrix, plain_matrix, encryptor)
Ciphertext(Ptr{Nothing} @0x0000000002d91b80)

julia&gt; add_inplace!(encrypted_matrix, encrypted_matrix, evaluator)
Ciphertext(Ptr{Nothing} @0x0000000002ce1280)

julia&gt; plain_result = Plaintext()
Plaintext(Ptr{Nothing} @0x0000000004591550)

julia&gt; decrypt!(plain_result, encrypted_matrix, decryptor)
Plaintext(Ptr{Nothing} @0x0000000004591550)

julia&gt; decode!(pod_matrix, plain_result, batch_encoder);

julia&gt; Int.(vcat(pod_matrix[1:3], pod_matrix[end-3:end]))
7-element Array{Int64,1}:
    2
    4
    6
 8186
 8188
 8190
 8192"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> SEAL
[ Info<span class="pl-k">:</span> Precompiling SEAL [bac81e26<span class="pl-k">-</span><span class="pl-c1">86e4</span><span class="pl-k">-</span><span class="pl-c1">4</span>b48<span class="pl-k">-</span><span class="pl-c1">8696</span><span class="pl-k">-</span><span class="pl-c1">7</span>d0406d5dbc1]

julia<span class="pl-k">&gt;</span> parms <span class="pl-k">=</span> <span class="pl-c1">EncryptionParameters</span>(SchemeType<span class="pl-k">.</span>bfv)
<span class="pl-c1">EncryptionParameters</span>(Ptr{Nothing} @<span class="pl-c1">0x0000000002e1d3a0</span>)

julia<span class="pl-k">&gt;</span> poly_modulus_degree <span class="pl-k">=</span> <span class="pl-c1">4096</span>
<span class="pl-c1">4096</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">set_poly_modulus_degree!</span>(parms, poly_modulus_degree)
<span class="pl-c1">EncryptionParameters</span>(Ptr{Nothing} @<span class="pl-c1">0x0000000002e1d3a0</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">set_coeff_modulus!</span>(parms, <span class="pl-c1">coeff_modulus_bfv_default</span>(poly_modulus_degree))
<span class="pl-c1">EncryptionParameters</span>(Ptr{Nothing} @<span class="pl-c1">0x0000000002e1d3a0</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">set_plain_modulus!</span>(parms, <span class="pl-c1">plain_modulus_batching</span>(poly_modulus_degree, <span class="pl-c1">20</span>))
<span class="pl-c1">EncryptionParameters</span>(Ptr{Nothing} @<span class="pl-c1">0x0000000002e1d3a0</span>)

julia<span class="pl-k">&gt;</span> context <span class="pl-k">=</span> <span class="pl-c1">SEALContext</span>(parms)
<span class="pl-c1">SEALContext</span>(Ptr{Nothing} @<span class="pl-c1">0x0000000004298440</span>)

julia<span class="pl-k">&gt;</span> keygen <span class="pl-k">=</span> <span class="pl-c1">KeyGenerator</span>(context)
<span class="pl-c1">KeyGenerator</span>(Ptr{Nothing} @<span class="pl-c1">0x00000000021ef540</span>)

julia<span class="pl-k">&gt;</span> public_key_ <span class="pl-k">=</span> <span class="pl-c1">PublicKey</span>()
<span class="pl-c1">PublicKey</span>(Ptr{Nothing} @<span class="pl-c1">0x0000000002272610</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">create_public_key!</span>(public_key_, keygen)

julia<span class="pl-k">&gt;</span> secret_key_ <span class="pl-k">=</span> <span class="pl-c1">secret_key</span>(keygen)
<span class="pl-c1">SecretKey</span>(Ptr{Nothing} @<span class="pl-c1">0x0000000001cec2a0</span>)

julia<span class="pl-k">&gt;</span> encryptor <span class="pl-k">=</span> <span class="pl-c1">Encryptor</span>(context, public_key_)
<span class="pl-c1">Encryptor</span>(Ptr{Nothing} @<span class="pl-c1">0x0000000001cd4480</span>)

julia<span class="pl-k">&gt;</span> evaluator <span class="pl-k">=</span> <span class="pl-c1">Evaluator</span>(context)
<span class="pl-c1">Evaluator</span>(Ptr{Nothing} @<span class="pl-c1">0x000000000428bdd0</span>)

julia<span class="pl-k">&gt;</span> decryptor <span class="pl-k">=</span> <span class="pl-c1">Decryptor</span>(context, secret_key_)
<span class="pl-c1">Decryptor</span>(Ptr{Nothing} @<span class="pl-c1">0x00000000037670d0</span>)

julia<span class="pl-k">&gt;</span> batch_encoder <span class="pl-k">=</span> <span class="pl-c1">BatchEncoder</span>(context)
<span class="pl-c1">BatchEncoder</span>(Ptr{Nothing} @<span class="pl-c1">0x0000000001fb4bd0</span>, <span class="pl-c1">SEALContext</span>(Ptr{Nothing} @<span class="pl-c1">0x0000000001b87780</span>))

julia<span class="pl-k">&gt;</span> pod_matrix <span class="pl-k">=</span> <span class="pl-c1">collect</span>(UInt64, <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">slot_count</span>(batch_encoder));

julia<span class="pl-k">&gt;</span> <span class="pl-c1">Int</span>.(<span class="pl-c1">vcat</span>(pod_matrix[<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">3</span>], pod_matrix[<span class="pl-c1">end</span><span class="pl-k">-</span><span class="pl-c1">3</span><span class="pl-k">:</span><span class="pl-c1">end</span>]))
<span class="pl-c1">7</span><span class="pl-k">-</span>element Array{Int64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
    <span class="pl-c1">1</span>
    <span class="pl-c1">2</span>
    <span class="pl-c1">3</span>
 <span class="pl-c1">4093</span>
 <span class="pl-c1">4094</span>
 <span class="pl-c1">4095</span>
 <span class="pl-c1">4096</span>

julia<span class="pl-k">&gt;</span> plain_matrix <span class="pl-k">=</span> <span class="pl-c1">Plaintext</span>()
<span class="pl-c1">Plaintext</span>(Ptr{Nothing} @<span class="pl-c1">0x00000000042db6e0</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">encode!</span>(plain_matrix, pod_matrix, batch_encoder)
<span class="pl-c1">Plaintext</span>(Ptr{Nothing} @<span class="pl-c1">0x0000000002ce0370</span>)

julia<span class="pl-k">&gt;</span> encrypted_matrix <span class="pl-k">=</span> <span class="pl-c1">Ciphertext</span>()
<span class="pl-c1">Ciphertext</span>(Ptr{Nothing} @<span class="pl-c1">0x0000000002d91b80</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">encrypt!</span>(encrypted_matrix, plain_matrix, encryptor)
<span class="pl-c1">Ciphertext</span>(Ptr{Nothing} @<span class="pl-c1">0x0000000002d91b80</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">add_inplace!</span>(encrypted_matrix, encrypted_matrix, evaluator)
<span class="pl-c1">Ciphertext</span>(Ptr{Nothing} @<span class="pl-c1">0x0000000002ce1280</span>)

julia<span class="pl-k">&gt;</span> plain_result <span class="pl-k">=</span> <span class="pl-c1">Plaintext</span>()
<span class="pl-c1">Plaintext</span>(Ptr{Nothing} @<span class="pl-c1">0x0000000004591550</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">decrypt!</span>(plain_result, encrypted_matrix, decryptor)
<span class="pl-c1">Plaintext</span>(Ptr{Nothing} @<span class="pl-c1">0x0000000004591550</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">decode!</span>(pod_matrix, plain_result, batch_encoder);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">Int</span>.(<span class="pl-c1">vcat</span>(pod_matrix[<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">3</span>], pod_matrix[<span class="pl-c1">end</span><span class="pl-k">-</span><span class="pl-c1">3</span><span class="pl-k">:</span><span class="pl-c1">end</span>]))
<span class="pl-c1">7</span><span class="pl-k">-</span>element Array{Int64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
    <span class="pl-c1">2</span>
    <span class="pl-c1">4</span>
    <span class="pl-c1">6</span>
 <span class="pl-c1">8186</span>
 <span class="pl-c1">8188</span>
 <span class="pl-c1">8190</span>
 <span class="pl-c1">8192</span></pre></div>
<h3 dir="auto"><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Examples</h3>
<p dir="auto">As you can see, using homomorphic encryption is quite involved: You need to pick
a scheme, provide sensible encryption parameters, encode your raw data into
plaintext, encrypt it to ciphertext, perform your arithmetic operations on it,
and then decrypt and decode again.  Therefore, before starting to use SEAL.jl
for your own applications, it is <strong>highly recommended</strong> to have a look at the
examples in the
<a href="examples/"><code>examples/</code></a>
directory. Otherwise it will be very likely that you are using SEAL.jl (and SEAL) in a
way that is either not secure, will produce unexpected results, or just crashes.
The examples included in SEAL.jl follow almost line-by-line the examples provided by the
<a href="https://github.com/microsoft/SEAL/tree/master/native/examples">SEAL library</a>.
For example, the snippet above is based on the <code>example_batch_encoder()</code> function in
<a href="examples/2_encoders.jl"><code>examples/2_encoders.jl</code></a>.
The full list of examples is as follows:</p>
<table>
<thead>
<tr>
<th>SEAL.jl</th>
<th>SEAL (C++)</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>examples.jl</code></td>
<td><code>examples.cpp</code></td>
<td>The example runner application</td>
</tr>
<tr>
<td><code>1_bfv_basics.jl</code></td>
<td><code>1_bfv_basics.cpp</code></td>
<td>Encrypted modular arithmetic using the BFV scheme</td>
</tr>
<tr>
<td><code>2_encoders.jl</code></td>
<td><code>2_encoders.cpp</code></td>
<td>Encoding more complex data into Microsoft SEAL plaintext objects</td>
</tr>
<tr>
<td><code>3_levels.jl</code></td>
<td><code>3_levels.cpp</code></td>
<td>Introduces the concept of levels; prerequisite for using the CKKS scheme</td>
</tr>
<tr>
<td><code>4_ckks_basics.jl</code></td>
<td><code>4_ckks_basics.cpp</code></td>
<td>Encrypted real number arithmetic using the CKKS scheme</td>
</tr>
<tr>
<td><code>5_rotation.jl</code></td>
<td><code>5_rotation.cpp</code></td>
<td>Performing cyclic rotations on encrypted vectors in the BFV and CKKS schemes</td>
</tr>
<tr>
<td><code>6_serialization.jl</code></td>
<td><code>6_serialization.cpp</code></td>
<td>Serializing objects in Microsoft SEAL</td>
</tr>
<tr>
<td><code>7_performance.jl</code></td>
<td><code>7_performance.cpp</code></td>
<td>Performance tests</td>
</tr>
</tbody>
</table>
<p dir="auto">To run the examples, first install SEAL.jl (as shown <a href="#usage">above</a>) and clone this repository:</p>
<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="git clone https://github.com/JuliaCrypto/SEAL.jl.git"><pre>git clone https://github.com/JuliaCrypto/SEAL.jl.git</pre></div>
<p dir="auto">Then, run Julia and include <code>examples/examples.jl</code> before executing <code>seal_examples()</code>:</p>
<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia --project=. -e 'include(&quot;SEAL.jl/examples/examples.jl&quot;); seal_examples()'"><pre>julia --project=. -e <span class="pl-s"><span class="pl-pds">'</span>include("SEAL.jl/examples/examples.jl"); seal_examples()<span class="pl-pds">'</span></span></pre></div>
<p dir="auto">You will be shown an interactive prompt that lets you run any of the available
examples:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="Microsoft SEAL version: 3.6.2
+---------------------------------------------------------+
| The following examples should be executed while reading |
| comments in associated files in examples/.              |
+---------------------------------------------------------+
| Examples                   | Source Files               |
+----------------------------+----------------------------+
| 1. BFV Basics              | 1_bfv_basics.jl            |
| 2. Encoders                | 2_encoders.jl              |
| 3. Levels                  | 3_levels.jl                |
| 4. CKKS Basics             | 4_ckks_basics.jl           |
| 5. Rotation                | 5_rotation.jl              |
| 6. Serialization           | 6_serialization.jl         |
| 7. Performance Test        | 7_performance.jl           |
+----------------------------+----------------------------+
[      0 MB] Total allocation from the memory pool

&gt; Run example (1 ~ 7) or exit (0): "><pre class="notranslate"><code>Microsoft SEAL version: 3.6.2
+---------------------------------------------------------+
| The following examples should be executed while reading |
| comments in associated files in examples/.              |
+---------------------------------------------------------+
| Examples                   | Source Files               |
+----------------------------+----------------------------+
| 1. BFV Basics              | 1_bfv_basics.jl            |
| 2. Encoders                | 2_encoders.jl              |
| 3. Levels                  | 3_levels.jl                |
| 4. CKKS Basics             | 4_ckks_basics.jl           |
| 5. Rotation                | 5_rotation.jl              |
| 6. Serialization           | 6_serialization.jl         |
| 7. Performance Test        | 7_performance.jl           |
+----------------------------+----------------------------+
[      0 MB] Total allocation from the memory pool

&gt; Run example (1 ~ 7) or exit (0): 
</code></pre></div>
<p dir="auto">Since the examples will not create or modify any files, feel free to run them from
any directory.</p>
<h2 dir="auto"><a id="user-content-implementation-strategy" class="anchor" aria-hidden="true" href="#implementation-strategy"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Implementation strategy</h2>
<p dir="auto">SEAL.jl is <em>work-in-progress</em>, thus only a subset of the many capabilities of
the SEAL library are so far supported (<a href="CONTRIBUTING.md">PRs are welcome!</a>). In
general, SEAL.jl makes use of the C bindings provided by SEAL, but tries to
mimic SEAL's <em>C++</em> API as close as possible. That is, file names,
function/variable names, the order of arguments etc. are as close as
possible to the SEAL C++ code as possible. The reason for this is that the SEAL
library provides excellent inline code documentation, thus by reading (and
understanding) the comments in the C++ files you should immediately be able to
reproduce the same implementation with SEAL.jl.</p>
<p dir="auto">However, some implementation details do not translate well from C++ to
Julia. Also, the Julia community has a few strong conventions that if violated
would make it unnecessarily difficult for experienced Julia users to use SEAL.jl
correctly. Thus, when trying to recreate SEAL examples written in C++ with
SEAL.jl in Julia, there are a few things to watch out for:</p>
<ul dir="auto">
<li>Functions that modify their input are suffixed by <code>!</code>.</li>
<li>Function arguments that are modified come first (but the rest remains in
order) .</li>
<li>When translating C++ member function to Julia, the "owning" object is always
passed as the last argument.</li>
<li>While <code>x.size()</code> in C++ returns a scalar, length-like value, <code>size(x)</code> in
Julia is expected to return a tuple, which is also the case in SEAL.jl.</li>
</ul>
<p dir="auto">The next example shows the first three items in practice. The C++ code
snippet</p>
<div class="highlight highlight-source-c++ notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="evaluator.multiply_plain(x1_encrypted, plain_coeff3, x1_encrypted_coeff3);"><pre>evaluator.multiply_plain(x1_encrypted, plain_coeff3, x1_encrypted_coeff3);</pre></div>
<p dir="auto">is translated to the following Julia code:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="multiply_plain!(x1_encrypted_coeff3, x1_encrypted, plain_coeff3, evaluator)"><pre><span class="pl-c1">multiply_plain!</span>(x1_encrypted_coeff3, x1_encrypted, plain_coeff3, evaluator)</pre></div>
<p dir="auto">Note the trailing <code>!</code>, the fact that <code>x1_encrypted_coeff3</code> as the modified input
variable is now the first argument, and <code>evaluator</code> being passed as the last
argument.</p>
<h2 dir="auto"><a id="user-content-authors" class="anchor" aria-hidden="true" href="#authors"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Authors</h2>
<p dir="auto">SEAL.jl was initiated by
<a href="https://www.mi.uni-koeln.de/NumSim/schlottke-lakemper" rel="nofollow">Michael Schlottke-Lakemper</a>
(University of Cologne, Germany), who is also the principal developer of
SEAL.jl.</p>
<h2 dir="auto"><a id="user-content-license-and-contributing" class="anchor" aria-hidden="true" href="#license-and-contributing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>License and contributing</h2>
<p dir="auto">SEAL.jl is licensed under the MIT license (see <a href="LICENSE.md">LICENSE.md</a>). Since SEAL.jl is
an open-source project, we are very happy to accept contributions from the
community. Please refer to <a href="CONTRIBUTING.md">CONTRIBUTING.md</a> for more details.</p>
<h2 dir="auto"><a id="user-content-acknowledgements" class="anchor" aria-hidden="true" href="#acknowledgements"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Acknowledgements</h2>
<p dir="auto">This Julia package would have not been possible without the excellent work of
the developers of the <a href="https://github.com/microsoft/SEAL">SEAL</a> library. Their
high-quality code documentation plus the fact that they provide C bindings for
the entire functionality of the SEAL C++ library have made developing SEAL.jl
a breeze.</p>
</article></div>