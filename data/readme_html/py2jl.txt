<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-py2jl" class="anchor" aria-hidden="true" href="#py2jl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Py2Jl</h1>
<p>Python-to-Julia transpiler. Python 3 semantics are used (see below).</p>
<p><a href="./preview.png"><img src="./preview.png" alt="Preview" style="max-width:100%;"></a></p>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Usage</h2>
<p>For now, because of a bug in Julia itself, long-term-support (LTS) versions of Julia, e.g. Julia 1.0.4 and 1.0.0 do not work. The package intends to support LTS Julia too, and will as soon as Julia is fixed.</p>
<p>Th package now works on 1.1.x, and before on <a href="https://julialang-s3.julialang.org/bin/linux/x64/1.1/julia-1.1.0-rc2-linux-x86_64.tar.gz" rel="nofollow">Julia 1.1.0-rc2</a>, but earlier versions, at least those named LTS ones, do segfault.</p>
<div class="highlight highlight-source-shell"><pre>pkg<span class="pl-k">&gt;</span> add Py2Jl</pre></div>
<p>To demonstrate, open a file (check out <a href="./demo.jl">demo.jl</a>) and write</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> Py2Jl

<span class="pl-s"><span class="pl-pds"><span class="pl-c1">py2jl</span>"""</span></span>
<span class="pl-s">def sum_by(f, seq):</span>
<span class="pl-s">    s = 0</span>
<span class="pl-s">    for e in seq:</span>
<span class="pl-s">        s = s + f(e)</span>
<span class="pl-s">    return s</span>
<span class="pl-s"><span class="pl-pds">"""</span></span>
<span class="pl-c1">@info</span> <span class="pl-c1">sum_by</span>(x <span class="pl-k">-&gt;</span> <span class="pl-c1">2</span>x, [<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>]) <span class="pl-c"><span class="pl-c">#</span> 12</span>

<span class="pl-c1">@info</span> <span class="pl-c1">py2jl</span>(<span class="pl-s"><span class="pl-pds">"</span>mymod<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"""</span></span>
<span class="pl-s">def sum_by(f, seq):</span>
<span class="pl-s">    s = 0</span>
<span class="pl-s">    for e in seq:</span>
<span class="pl-s">        s = s + e</span>
<span class="pl-s">    return s</span>
<span class="pl-s"><span class="pl-pds">"""</span></span>)</pre></div>
<p>Then type <code>julia demo.jl</code> in your shell to see the results.</p>
<h2><a id="user-content-motivation" class="anchor" aria-hidden="true" href="#motivation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Motivation</h2>
<p>Since packages written in Julia are quite few, and Python is exactly a subset of
Julia despite some implementation details, it's natural to think about taking
advantage of existing Python codebase in Julia ecosystem so that we can have a
great number of powerful and battle-tested packages.</p>
<h2><a id="user-content-status" class="anchor" aria-hidden="true" href="#status"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Status</h2>
<p>Currently, we can transpile a single Python module with limited constructs into
Julia ones.</p>
<h2><a id="user-content-supported-features" class="anchor" aria-hidden="true" href="#supported-features"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Supported Features</h2>
<ul>
<li>All the basic constructs like <code>if-else</code>, <code>for</code>, <code>while</code>, etc</li>
<li><code>while-else</code>, <code>for-else</code> constructs</li>
<li>Function invocation with keyword args and variadic args</li>
<li>Arbitrary <code>try-except</code>s</li>
<li>Annotation (but not equivalent to Julia's)</li>
</ul>
<h2><a id="user-content-not-implemented-yet-features" class="anchor" aria-hidden="true" href="#not-implemented-yet-features"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Not Implemented (yet) Features</h2>
<ul>
<li>Function definitions with keyword args (both <code>kwargs</code> and so-called
<code>keyword arg</code>), default args and variadic args</li>
<li>Classes</li>
<li>Imports (dynamically importing might not be supported forever)</li>
<li>Attributes (<code>obj.attr</code>)</li>
<li>Python-compatible built-in functions like <code>map</code>, <code>print</code> and many standard
libs</li>
</ul>
<h2><a id="user-content-python-3-vs-older-python" class="anchor" aria-hidden="true" href="#python-3-vs-older-python"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Python 3 vs. older Python</h2>
<p>Most of the differences between Python 2 and Python 3 do not matter, as not yet implemented. E.g. this valid Python 2 code translates, but with Python 3 semantics:</p>
<pre><code>julia&gt; py2jl"""
       def divide_by_two(x):
         return x/2
       """

julia&gt; divide_by_two(9)  # Python 2, unlike Python 3 and Julia would return 4.
4.5
</code></pre>
</article></div>