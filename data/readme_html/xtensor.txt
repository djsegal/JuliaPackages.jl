<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="" class="anchor" aria-hidden="true" href="#"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><a target="_blank" rel="noopener noreferrer" href="xtensor-julia.svg"><img src="xtensor-julia.svg" alt="Xtensor.jl" style="max-width:100%;"></a></h1>
<p><a href="https://travis-ci.org/xtensor-stack/Xtensor.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/a37a80a317a5ff1c717874a529e4d9f51be875cf/68747470733a2f2f7472617669732d63692e6f72672f7874656e736f722d737461636b2f5874656e736f722e6a6c2e7376673f6272616e63683d6d6173746572" alt="Travis" data-canonical-src="https://travis-ci.org/xtensor-stack/Xtensor.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/xtensor-stack/xtensor-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/3a5523ad5c90e39c7a1f0de88255c0eccd6287be/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f3938386a6c6867666e73616e6d7336763f7376673d74727565" alt="Apveyor" data-canonical-src="https://ci.appveyor.com/api/projects/status/988jlhgfnsanms6v?svg=true" style="max-width:100%;"></a>
<a href="https://xtensor-julia.readthedocs.io/en/latest/?badge=latest" rel="nofollow"><img src="https://camo.githubusercontent.com/77544018e96173a97d9a9f90121c30bf74598fbd/687474703a2f2f72656164746865646f63732e6f72672f70726f6a656374732f7874656e736f722d6a756c69612f62616467652f3f76657273696f6e3d6c6174657374" alt="Documentation Status" data-canonical-src="http://readthedocs.org/projects/xtensor-julia/badge/?version=latest" style="max-width:100%;"></a>
<a href="https://gitter.im/QuantStack/Lobby?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge&amp;utm_content=badge" rel="nofollow"><img src="https://camo.githubusercontent.com/da2edb525cde1455a622c58c0effc3a90b9a181c/68747470733a2f2f6261646765732e6769747465722e696d2f4a6f696e253230436861742e737667" alt="Join the Gitter Chat" data-canonical-src="https://badges.gitter.im/Join%20Chat.svg" style="max-width:100%;"></a></p>
<p>Julia package for the <code>xtensor-julia</code> library, the Julia bindings for <a href="https://github.com/xtensor-stack/xtensor">xtensor</a>.</p>
<ul>
<li>
<p><code>xtensor</code> is a C++ library for multi-dimensional arrays enabling numpy-style broadcasting and lazy computing.</p>
</li>
<li>
<p><code>xtensor-julia</code> enables inplace use of julia arrays in C++ with all the benefits from <code>xtensor</code></p>
<ul>
<li>C++ universal function and broadcasting</li>
<li>STL - compliant APIs.</li>
<li>A broad coverage of numpy APIs (see <a href="http://xtensor.readthedocs.io/en/latest/numpy.html" rel="nofollow">the numpy to xtensor cheat sheet</a>).</li>
</ul>
</li>
</ul>
<p>The Julia bindings for <code>xtensor</code> are based on the <a href="https://github.com/JuliaInterop/CxxWrap.jl/">CxxWrap.jl</a> C++ library.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Installation</h2>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> Pkg; Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>Xtensor<span class="pl-pds">"</span></span>);</pre></div>
<h2><a id="user-content-documentation" class="anchor" aria-hidden="true" href="#documentation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Documentation</h2>
<p>To get started with using <code>Xtensor.jl</code> and <code>xtensor-julia</code>, check out the full documentation</p>
<p><a href="http://xtensor-julia.readthedocs.io/" rel="nofollow">http://xtensor-julia.readthedocs.io/</a></p>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Usage</h2>
<p>xtensor-julia offers two container types wrapping julia arrays inplace to provide an xtensor semantics</p>
<ul>
<li><code>jltensor</code></li>
<li><code>jlarray</code>.</li>
</ul>
<p>Both containers enable the numpy-style APIs of xtensor (see <a href="http://xtensor.readthedocs.io/en/latest/numpy.html" rel="nofollow">the numpy to xtensor cheat sheet</a>).</p>
<ul>
<li>
<p>On the one hand, <code>jlarray</code> has a dynamic number of dimensions. It can be reshaped dynamically and the new shape is reflected on the Julia side.</p>
</li>
<li>
<p>On the other hand <code>jltensor</code> has a compile time number of dimensions, specified with a template parameter. Shapes of <code>jltensor</code> instances are stack allocated, making <code>jltensor</code> a significantly faster expression than <code>jlarray</code>.</p>
</li>
</ul>
<h3><a id="user-content-example-1-use-an-algorithm-of-the-c-standard-library-with-julia-array" class="anchor" aria-hidden="true" href="#example-1-use-an-algorithm-of-the-c-standard-library-with-julia-array"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Example 1: Use an algorithm of the C++ standard library with Julia array.</h3>
<p><strong>C++ code</strong></p>
<div class="highlight highlight-source-c++"><pre>#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>numeric<span class="pl-pds">&gt;</span></span>                        <span class="pl-c"><span class="pl-c">//</span> Standard library import for std::accumulate</span>
#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>cxx_wrap.hpp<span class="pl-pds">&gt;</span></span>                   <span class="pl-c"><span class="pl-c">//</span> libcxxwrap import to define Julia bindings</span>
#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">"</span>xtensor-julia/jltensor.hpp<span class="pl-pds">"</span></span>     <span class="pl-c"><span class="pl-c">//</span> Import the jltensor container definition</span>
#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">"</span>xtensor/xmath.hpp<span class="pl-pds">"</span></span>              <span class="pl-c"><span class="pl-c">//</span> xtensor import for the C++ universal functions</span>

<span class="pl-k">double</span> <span class="pl-en">sum_of_sines</span>(xt::jltensor&lt;<span class="pl-k">double</span>, <span class="pl-c1">2</span>&gt; m)
{
    <span class="pl-k">auto</span> sines = <span class="pl-c1">xt::sin</span>(m);  <span class="pl-c"><span class="pl-c">//</span> sines does not actually hold values.</span>
    <span class="pl-k">return</span> <span class="pl-c1">std::accumulate</span>(sines.<span class="pl-c1">cbegin</span>(), sines.<span class="pl-c1">cend</span>(), <span class="pl-c1">0.0</span>);
}

JLCXX_MODULE <span class="pl-en">define_julia_module</span>(jlcxx::Module&amp; mod)
{
    mod.<span class="pl-c1">method</span>(<span class="pl-s"><span class="pl-pds">"</span>sum_of_sines<span class="pl-pds">"</span></span>, sum_of_sines);
}</pre></div>
<p><strong>Julia Code</strong></p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> xtensor_julia_test

arr <span class="pl-k">=</span> [[<span class="pl-c1">1.0</span> <span class="pl-c1">2.0</span>]
       [<span class="pl-c1">3.0</span> <span class="pl-c1">4.0</span>]]

s <span class="pl-k">=</span> <span class="pl-c1">sum_of_sines</span>(arr)
s</pre></div>
<p><strong>Outputs</strong></p>
<pre><code>1.1350859243855171
</code></pre>
<h3><a id="user-content-example-2-create-a-numpy-style-universal-function-from-a-c-scalar-function" class="anchor" aria-hidden="true" href="#example-2-create-a-numpy-style-universal-function-from-a-c-scalar-function"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Example 2: Create a numpy-style universal function from a C++ scalar function</h3>
<p><strong>C++ code</strong></p>
<div class="highlight highlight-source-c++"><pre>#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>cxx_wrap.hpp<span class="pl-pds">&gt;</span></span>
#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">"</span>xtensor-julia/jlvectorize.hpp<span class="pl-pds">"</span></span>

<span class="pl-k">double</span> <span class="pl-en">scalar_func</span>(<span class="pl-k">double</span> i, <span class="pl-k">double</span> j)
{
    <span class="pl-k">return</span> <span class="pl-c1">std::sin</span>(i) - <span class="pl-c1">std::cos</span>(j);
}

JLCXX_MODULE <span class="pl-en">define_julia_module</span>(jlcxx::Module&amp; mod)
{
    mod.<span class="pl-c1">method</span>(<span class="pl-s"><span class="pl-pds">"</span>vectorized_func<span class="pl-pds">"</span></span>, <span class="pl-c1">xt::jlvectorize</span>(scalar_func));
}</pre></div>
<p><strong>Julia Code</strong></p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> xtensor_julia_test

x <span class="pl-k">=</span> [[ <span class="pl-c1">0.0</span>  <span class="pl-c1">1.0</span>  <span class="pl-c1">2.0</span>  <span class="pl-c1">3.0</span>  <span class="pl-c1">4.0</span>]
     [ <span class="pl-c1">5.0</span>  <span class="pl-c1">6.0</span>  <span class="pl-c1">7.0</span>  <span class="pl-c1">8.0</span>  <span class="pl-c1">9.0</span>]
     [<span class="pl-c1">10.0</span> <span class="pl-c1">11.0</span> <span class="pl-c1">12.0</span> <span class="pl-c1">13.0</span> <span class="pl-c1">14.0</span>]]
y <span class="pl-k">=</span> [<span class="pl-c1">1.0</span>, <span class="pl-c1">2.0</span>, <span class="pl-c1">3.0</span>, <span class="pl-c1">4.0</span>, <span class="pl-c1">5.0</span>]
z <span class="pl-k">=</span> <span class="pl-c1">vectorized_func</span>(x, y)
z</pre></div>
<p><strong>Outputs</strong></p>
<pre><code>[[-0.540302  1.257618  1.89929   0.794764 -1.040465],
 [-1.499227  0.136731  1.646979  1.643002  0.128456],
 [-1.084323 -0.583843  0.45342   1.073811  0.706945]]
</code></pre>
<h2><a id="user-content-building-the-html-documentation" class="anchor" aria-hidden="true" href="#building-the-html-documentation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Building the HTML Documentation</h2>
<p><code>xtensor-julia</code>'s documentation is built with three tools</p>
<ul>
<li><a href="http://www.doxygen.org" rel="nofollow">doxygen</a></li>
<li><a href="http://www.sphinx-doc.org" rel="nofollow">sphinx</a></li>
<li><a href="https://breathe.readthedocs.io" rel="nofollow">breathe</a></li>
</ul>
<p>While doxygen must be installed separately, you can install breathe by typing</p>
<div class="highlight highlight-source-shell"><pre>pip install breathe</pre></div>
<p>Breathe can also be installed with <code>conda</code></p>
<div class="highlight highlight-source-shell"><pre>conda install -c conda-forge breathe</pre></div>
<p>Finally, build the documentation with</p>
<div class="highlight highlight-source-shell"><pre>make html</pre></div>
<p>from the <code>docs</code> subdirectory.</p>
<h2><a id="user-content-running-the-c-tests" class="anchor" aria-hidden="true" href="#running-the-c-tests"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Running the C++ tests</h2>
<p>From <code>deps/build</code></p>
<pre><code>cmake -D JlCxx_DIR=/path/to/.julia/v1.1/CxxWrap/deps/usr/lib/cmake/JlCxx -D BUILD_TESTS=ON ..
</code></pre>
<h2><a id="user-content-dependencies-on-xtensor-xtensor-julia-and-cxxwrap" class="anchor" aria-hidden="true" href="#dependencies-on-xtensor-xtensor-julia-and-cxxwrap"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Dependencies on <code>xtensor</code>, <code>xtensor-julia</code>, and <code>CxxWrap</code></h2>
<p><code>Xtensor.jl</code> depends on <code>xtensor-julia</code>, <code>xtensor</code> and <code>CxxWrap</code> libraries</p>
<table>
<thead>
<tr>
<th><code>Xtensor.jl</code></th>
<th><code>xtensor</code></th>
<th><code>xtensor-julia</code></th>
<th><code>CxxWrap</code></th>
</tr>
</thead>
<tbody>
<tr>
<td>master</td>
<td>&gt;=0.20.8,&lt;0.21</td>
<td>0.8.4</td>
<td>&gt;=0.8.1,&lt;0.9</td>
</tr>
<tr>
<td>0.8.2</td>
<td>&gt;=0.20.8,&lt;0.21</td>
<td>0.8.4</td>
<td>&gt;=0.8.1,&lt;0.9</td>
</tr>
<tr>
<td>0.8.1</td>
<td>&gt;=0.20.4,&lt;0.21</td>
<td>0.8.2</td>
<td>&gt;=0.8.1,&lt;0.9</td>
</tr>
<tr>
<td>0.8.0</td>
<td>&gt;=0.20.4,&lt;0.21</td>
<td>0.8.2</td>
<td>&gt;=0.8.1,&lt;0.9</td>
</tr>
<tr>
<td>0.7.0</td>
<td>&gt;=0.19.0,&lt;0.20</td>
<td>0.7.0</td>
<td>&gt;=0.8.1,&lt;0.9</td>
</tr>
<tr>
<td>0.6.2</td>
<td>&gt;=0.18.3,&lt;0.19</td>
<td>0.6.2</td>
<td>&gt;=0.8.1,&lt;0.9</td>
</tr>
<tr>
<td>0.6.1</td>
<td>&gt;=0.18.1,&lt;0.19</td>
<td>0.6.0</td>
<td>&gt;=0.8.1,&lt;0.9</td>
</tr>
<tr>
<td>0.6.0</td>
<td>&gt;=0.18.1,&lt;0.19</td>
<td>0.6.0</td>
<td>&gt;=0.8.1,&lt;0.9</td>
</tr>
</tbody>
</table>
<p>These dependencies are automatically resolved when using the Julia package manager.</p>
<h2><a id="user-content-license" class="anchor" aria-hidden="true" href="#license"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>License</h2>
<p>We use a shared copyright model that enables all contributors to maintain the copyright on their contributions.</p>
<p>This software is licensed under the BSD-3-Clause license. See the <a href="LICENSE">LICENSE</a> file for details.</p>
</article></div>