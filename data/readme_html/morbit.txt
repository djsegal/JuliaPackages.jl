<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-morbit" class="anchor" aria-hidden="true" href="#morbit"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Morbit</h1>
<p dir="auto"><a href="https://manuelbb-upb.github.io/Morbit.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/manuelbb-upb/Morbit.jl/actions"><img src="https://github.com/manuelbb-upb/Morbit.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/manuelbb-upb/Morbit.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/52ee39486ec1013f56a2ab607447f68a9e8051c3926e466ffed5d33ddbdcef1d/68747470733a2f2f636f6465636f762e696f2f67682f6d616e75656c62622d7570622f4d6f726269742e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/manuelbb-upb/Morbit.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">The package <code>Morbit.jl</code> provides a local derivative-free solver for multiobjective optimization problems with possibly expensive objectives.
It is meant to find a <strong>single</strong> Pareto-critical point.</p>
<p dir="auto">“Morbit” stands for <strong>M</strong>ultiobjective <strong>O</strong>ptimization by <strong>R</strong>adial <strong>B</strong>asis <strong>F</strong>unction <strong>I</strong>nterpolation <strong>i</strong>n <strong>T</strong>rust-regions.
The name was chosen so as to pay honors to the single objective algorithm ORBIT by Wild et. al.
We have a <a href="https://www.mdpi.com/2297-8747/26/2/31" rel="nofollow">paper</a> explaining the algorithm!</p>
<p dir="auto">This was my first project when I started using Julia and has since then undergone several rewrites.</p>
<p dir="auto">This project was founded by the European Region Development Fund.
<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/7c34e29cbafebe42fa9789b875118ae2d2d9ef3d960d5445f6a88194caa25aa8/68747470733a2f2f7777772e656672652e6e72772e64652f66696c6561646d696e2f4c6f676f732f45552d466f5f5f7264657268696e776569735f5f454652455f2f454652455f466f657264657268696e776569735f656e676c697363685f6661726269672e6a7067"><img alt="EFRE Logo EU" src="https://camo.githubusercontent.com/7c34e29cbafebe42fa9789b875118ae2d2d9ef3d960d5445f6a88194caa25aa8/68747470733a2f2f7777772e656672652e6e72772e64652f66696c6561646d696e2f4c6f676f732f45552d466f5f5f7264657268696e776569735f5f454652455f2f454652455f466f657264657268696e776569735f656e676c697363685f6661726269672e6a7067" width="40%" data-canonical-src="https://www.efre.nrw.de/fileadmin/Logos/EU-Fo__rderhinweis__EFRE_/EFRE_Foerderhinweis_englisch_farbig.jpg" style="max-width: 100%;"></a>
<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/a4c940614554fc4e7a16c1ad18a093cfedcd9586704369e75193e8217e7ea92a/68747470733a2f2f7777772e656672652e6e72772e64652f66696c6561646d696e2f4c6f676f732f50726f6772616d6d5f454652452e4e52572f5a69656c324e52575f5247425f313830395f6a70672e6a7067"><img alt="EFRE Logo NRW" src="https://camo.githubusercontent.com/a4c940614554fc4e7a16c1ad18a093cfedcd9586704369e75193e8217e7ea92a/68747470733a2f2f7777772e656672652e6e72772e64652f66696c6561646d696e2f4c6f676f732f50726f6772616d6d5f454652452e4e52572f5a69656c324e52575f5247425f313830395f6a70672e6a7067" width="40%" data-canonical-src="https://www.efre.nrw.de/fileadmin/Logos/Programm_EFRE.NRW/Ziel2NRW_RGB_1809_jpg.jpg" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-new-features-in-version-31" class="anchor" aria-hidden="true" href="#new-features-in-version-31"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>New Features in Version 3.1+</h2>
<p dir="auto">Constraints :)</p>
<ul dir="auto">
<li>Box constraints are supported natively and respected during model construction.</li>
<li>Relaxable linear constraints are supported natively, i.e., propagated to the internal solver.</li>
<li>Relaxable nonlinear constraints are supported via a filter mechanism.</li>
</ul>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">This package is not registered (yet), so please install via</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="using Pkg
Pkg.add(; url = &quot;https://github.com/manuelbb-upb/Morbit.jl.git&quot;)
# or, using ssh:
# Pkg.add(; url = &quot;git@github.comm/manuelbb-upb/Morbit.jl.git&quot; )"><pre class="notranslate"><code>using Pkg
Pkg.add(; url = "https://github.com/manuelbb-upb/Morbit.jl.git")
# or, using ssh:
# Pkg.add(; url = "git@github.comm/manuelbb-upb/Morbit.jl.git" )
</code></pre></div>
<h2 dir="auto"><a id="user-content-quick-usage-example" class="anchor" aria-hidden="true" href="#quick-usage-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Quick Usage Example</h2>
<p dir="auto">Let's find a critical point for the unconstrained minimization problem with objectives</p>
<math-renderer class="js-display-math" style="display: block" data-static-url="https://github.githubassets.com/static" data-run-id="3e29cef80e9bb6cee8b9d756cd7a93a4">$$f₁(x) = (x₁ - 1)² + (x₂ - 1)², f₂(x) = (x₁ + 1)² + (x₂ + 1)².$$</math-renderer>
<p dir="auto">The critical points coincide with globally Pareto optimal points and lie on the line connecting the individual minima (1,1) and (-1,-1).</p>
<p dir="auto">Setting up Morbit for this problem is fairly easy:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Morbit

f1 = x -&gt; sum( (x .- 1 ).^2 )
f2 = x -&gt; sum( (x .+ 1 ).^2 )

mop = MOP(2) # problem in 2 variables
add_exact_objective!(mop, f1)
add_exact_objective!(mop, f2)

x0 = [ π; -ℯ ]
x, fx, ret_code, database = optimize(mop, x0)"><pre><span class="pl-k">using</span> Morbit

f1 <span class="pl-k">=</span> x <span class="pl-k">-&gt;</span> <span class="pl-c1">sum</span>( (x <span class="pl-k">.-</span> <span class="pl-c1">1</span> )<span class="pl-k">.</span><span class="pl-k">^</span><span class="pl-c1">2</span> )
f2 <span class="pl-k">=</span> x <span class="pl-k">-&gt;</span> <span class="pl-c1">sum</span>( (x <span class="pl-k">.+</span> <span class="pl-c1">1</span> )<span class="pl-k">.</span><span class="pl-k">^</span><span class="pl-c1">2</span> )

mop <span class="pl-k">=</span> <span class="pl-c1">MOP</span>(<span class="pl-c1">2</span>) <span class="pl-c"><span class="pl-c">#</span> problem in 2 variables</span>
<span class="pl-c1">add_exact_objective!</span>(mop, f1)
<span class="pl-c1">add_exact_objective!</span>(mop, f2)

x0 <span class="pl-k">=</span> [ π; <span class="pl-k">-</span>ℯ ]
x, fx, ret_code, database <span class="pl-k">=</span> <span class="pl-c1">optimize</span>(mop, x0)</pre></div>
<p dir="auto">The optimize method accepts either an <code>AlgorithmConfig</code> object via the
<code>algo_config</code> keyword argument or concrete settings as keyword arguments.
E.g.,</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="x, fx, ret_code, database = optimize(mop, x0; max_iter=20, fx_tol_rel=1e-3)"><pre class="notranslate"><code>x, fx, ret_code, database = optimize(mop, x0; max_iter=20, fx_tol_rel=1e-3)
</code></pre></div>
<p dir="auto">sets two stopping criteria.</p>
<p dir="auto">In the above case, both functions are treated as cheap and their gradients are determined using <code>FiniteDiff</code>.
To use automatic differentiation (via <code>ForwardDiff.jl</code>), use</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="add_objective!(mop, f1; 
  n_out=1, model_cfg=ExactConfig(), 
  diff_method=Morbit.AutoDiffWrapper)"><pre><span class="pl-c1">add_objective!</span>(mop, f1; 
  n_out<span class="pl-k">=</span><span class="pl-c1">1</span>, model_cfg<span class="pl-k">=</span><span class="pl-c1">ExactConfig</span>(), 
  diff_method<span class="pl-k">=</span>Morbit<span class="pl-k">.</span>AutoDiffWrapper)</pre></div>
<p dir="auto">Gradients can be provided with the <code>gradients</code> keyword argument.</p>
<p dir="auto">If you wanted to model a objective, say the function <code>f₂</code>, using radial basis functions, you could pass a <code>SurrogateConfig</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="rbf_cfg = RbfConfig(;kernel = :multiquadric)
add_objective!(mop, f1; n_out = 1, model_cfg = rbf_cfg)"><pre>rbf_cfg <span class="pl-k">=</span> <span class="pl-c1">RbfConfig</span>(;kernel <span class="pl-k">=</span> <span class="pl-c1">:multiquadric</span>)
<span class="pl-c1">add_objective!</span>(mop, f1; n_out <span class="pl-k">=</span> <span class="pl-c1">1</span>, model_cfg <span class="pl-k">=</span> rbf_cfg)</pre></div>
<p dir="auto">Alternatively, there is</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="add_rbf_objective!(mop, f1)"><pre><span class="pl-c1">add_rbf_objective!</span>(mop, f1)</pre></div>
<p dir="auto">for scalar objective functions using the default configuration <code>RbfConfig()</code>.</p>
<p dir="auto">Of course, vector-valued objectives are also supported:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="F = x -&gt; [f1(x); f2(x)]
add_rbf_objectives!(mop, F; n_out = 2)
# or 
# add_objective!(mop, F; n_out = 2, model_cfg = RbfConfig())"><pre>F <span class="pl-k">=</span> x <span class="pl-k">-&gt;</span> [<span class="pl-c1">f1</span>(x); <span class="pl-c1">f2</span>(x)]
<span class="pl-c1">add_rbf_objectives!</span>(mop, F; n_out <span class="pl-k">=</span> <span class="pl-c1">2</span>)
<span class="pl-c"><span class="pl-c">#</span> or </span>
<span class="pl-c"><span class="pl-c">#</span> add_objective!(mop, F; n_out = 2, model_cfg = RbfConfig())</span></pre></div>
<p dir="auto">Instead of RBF models, Lagrange models (<code>LagrangeConfig()</code>) and Taylor polynomials (<code>TaylorConfig()</code>) are also supported.</p>
<p dir="auto">Box constraints can easily be defined at initialization of the <code>MOP</code>:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="lb = fill(-4, 2)
ub = -lb
mop_con = MOP(lb, ub)"><pre class="notranslate"><code>lb = fill(-4, 2)
ub = -lb
mop_con = MOP(lb, ub)
</code></pre></div>
<p dir="auto">Linear constraints of the form <code>A * x &lt;= b</code> or <code>A * x == b</code> can be added via</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="add_eq_constraint!(mop, A, b)
add_ineq_constraint!(mop, A, b)"><pre><span class="pl-c1">add_eq_constraint!</span>(mop, A, b)
<span class="pl-c1">add_ineq_constraint!</span>(mop, A, b)</pre></div>
<p dir="auto">Nonlinear constraints <code>g(x) &lt;= 0</code> or <code>h(x) == 0</code> are added like the objectives:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="add_nl_ineq_constraint!(mop, g; n_out = 1 model_cfg = RbfConfig())
add_nl_eq_constraint!(mop, h; n_out = 1 model_cfg = TaylorConfig())"><pre><span class="pl-c1">add_nl_ineq_constraint!</span>(mop, g; n_out <span class="pl-k">=</span> <span class="pl-c1">1</span> model_cfg <span class="pl-k">=</span> <span class="pl-c1">RbfConfig</span>())
<span class="pl-c1">add_nl_eq_constraint!</span>(mop, h; n_out <span class="pl-k">=</span> <span class="pl-c1">1</span> model_cfg <span class="pl-k">=</span> <span class="pl-c1">TaylorConfig</span>())</pre></div>
<p dir="auto">There are many options to configure both the algorithm behavior and the
surrogate modelling techniques.
Please see the <a href="https://manuelbb-upb.github.io/Morbit.jl/dev" rel="nofollow">docs</a>.</p>
</article></div>