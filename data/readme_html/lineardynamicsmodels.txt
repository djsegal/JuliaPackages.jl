<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-lineardynamicsmodelsjl" class="anchor" aria-hidden="true" href="#lineardynamicsmodelsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>LinearDynamicsModels.jl</h1>
<p><a href="https://travis-ci.org/schmrlng/LinearDynamicsModels.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/2fd5f221033ccec7b701719a9bb99e3ff1b15be613cb1778b74a981b5550f65e/68747470733a2f2f7472617669732d63692e6f72672f7363686d726c6e672f4c696e65617244796e616d6963734d6f64656c732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/schmrlng/LinearDynamicsModels.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/schmrlng/lineardynamicsmodels-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/b33d80d669fa77f0eff7c0ce124793096ece9dd76fcb3528ad29534bc92b5d66/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f71696a726e39677373707334743868783f7376673d74727565" alt="Build status" data-canonical-src="https://ci.appveyor.com/api/projects/status/qijrn9gssps4t8hx?svg=true" style="max-width:100%;"></a>
<a href="http://codecov.io/github/schmrlng/LinearDynamicsModels.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/f203ce79a8ea6d301a7f001ad0aec0dc9884b98a746c0e385282903af02ac2b1/687474703a2f2f636f6465636f762e696f2f6769746875622f7363686d726c6e672f4c696e65617244796e616d6963734d6f64656c732e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/schmrlng/LinearDynamicsModels.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
<p>This package serves two purposes:</p>
<ol>
<li>
<p>To extend the interfaces defined in <a href="https://github.com/schmrlng/DifferentialDynamicsModels.jl"><code>DifferentialDynamicsModels.jl</code></a> to linear time-invariant systems of the form <a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/2a31a4031df2518d755021cd3df094ce5fbf3b5b31a27c2aba6ceb1bc234687a/68747470733a2f2f6c617465782e636f6465636f67732e636f6d2f706e672e6c617465783f253543696e6c696e6525323066253238782532432532307525323925323025334425323041782532302b25323042752532302b25323063"><img src="https://camo.githubusercontent.com/2a31a4031df2518d755021cd3df094ce5fbf3b5b31a27c2aba6ceb1bc234687a/68747470733a2f2f6c617465782e636f6465636f67732e636f6d2f706e672e6c617465783f253543696e6c696e6525323066253238782532432532307525323925323025334425323041782532302b25323042752532302b25323063" alt="linear dynamics" data-canonical-src="https://latex.codecogs.com/png.latex?%5Cinline%20f%28x%2C%20u%29%20%3D%20Ax%20+%20Bu%20+%20c" style="max-width:100%;"></a> and implement fast solutions to two-point boundary value problems with these dynamics (provided they are controllable), minimizing the mixed time/control effort criterion <a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/41e585e1c0fc8a45c018cc801a2865f5a1a57dea99e8bf256c373d4d9227d3c4/68747470733a2f2f6c617465782e636f6465636f67732e636f6d2f7376672e6c617465783f253543696e6c696e65253230253543696e745f3025354554253230253238312532302b2532307525323874253239253545542532305225323075253238742532392532392532302535436d6174686f702537422537442535432532312535436d617468726d2537426425374474"><img src="https://camo.githubusercontent.com/41e585e1c0fc8a45c018cc801a2865f5a1a57dea99e8bf256c373d4d9227d3c4/68747470733a2f2f6c617465782e636f6465636f67732e636f6d2f7376672e6c617465783f253543696e6c696e65253230253543696e745f3025354554253230253238312532302b2532307525323874253239253545542532305225323075253238742532392532392532302535436d6174686f702537422537442535432532312535436d617468726d2537426425374474" alt="time plus quadratic control" data-canonical-src="https://latex.codecogs.com/svg.latex?%5Cinline%20%5Cint_0%5ET%20%281%20+%20u%28t%29%5ET%20R%20u%28t%29%29%20%5Cmathop%7B%7D%5C%21%5Cmathrm%7Bd%7Dt" style="max-width:100%;"></a> (where <a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/bfb47b75c2eba9c7df3a5a9bf6c9126877904521fe90559fe3f93cfc27ef3fe4/68747470733a2f2f6c617465782e636f6465636f67732e636f6d2f6769662e6c617465783f253543696e6c696e6525323052"><img src="https://camo.githubusercontent.com/bfb47b75c2eba9c7df3a5a9bf6c9126877904521fe90559fe3f93cfc27ef3fe4/68747470733a2f2f6c617465782e636f6465636f67732e636f6d2f6769662e6c617465783f253543696e6c696e6525323052" alt="R" data-canonical-src="https://latex.codecogs.com/gif.latex?%5Cinline%20R" style="max-width:100%;"></a> is symmetric positive definite).</p>
<ul>
<li><code>LinearDynamics{Dx,Du} &lt;: DifferentialDynamics</code> is the main type exported by this package. The type parameters <code>Dx</code> and <code>Du</code> denote the state and control dimension respectively. <a href="https://github.com/JuliaArrays/StaticArrays.jl">Statically sized arrays</a> are used in this package for their performance benefits; the type constructor requires arguments of the form <code>LinearDynamics(A::StaticMatrix{Dx,Dx}, B::StaticMatrix{Dx,Du}, c::StaticVector{Du})</code>. Though <code>LinearDynamics</code> supports arbitrary values for <code>A</code>, <code>B</code>, and <code>c</code>, this package also exports the convenience constructors <code>DoubleIntegatorDynamics(D::Int)</code>, <code>TripleIntegatorDynamics(D::Int)</code>, and <code>NIntegratorDynamics(N::Int, D::Int)</code> where <code>D</code> is the spatial dimension (e.g., <code>DoubleIntegatorDynamics(3)</code> will model a point mass in three dimensions under controlled acceleration).</li>
<li><code>LinearQuadraticSteering</code> is a type alias for a particular parameterization of <code>SteeringBVP</code>:
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="const LinearQuadraticSteering{Dx,Du,Cache} = SteeringBVP{&lt;:LinearDynamics{Dx,Du},&lt;:TimePlusQuadraticControl{Du},EmptySteeringConstraints,Cache}
"><pre><span class="pl-k">const</span> LinearQuadraticSteering{Dx,Du,Cache} <span class="pl-k">=</span> SteeringBVP{<span class="pl-k">&lt;:</span><span class="pl-c1">LinearDynamics{Dx,Du}</span>,<span class="pl-k">&lt;:</span><span class="pl-c1">TimePlusQuadraticControl{Du}</span>,EmptySteeringConstraints,Cache}</pre></div>
Depending on whether <code>SteeringBVP(f::LinearDynamics, j::TimePlusQuadraticControl)</code> is called with the keyword argument <code>compile=Val(true)</code> or <code>compile=Val(false)</code> (the default), the resulting <code>SteeringBVP</code> instance may contain a cache of optimal control functions/quantities symbolically computed using <a href="https://github.com/JuliaPy/SymPy.jl">SymPy.jl</a>. Compilation greatly reduces BVP computation time (useful if you need to solve millions or even billions of steering problems, as in sampling-based robot motion planning) but introduces a large initial overhead (i.e., stick to <code>compile=Val(false)</code> if you only need to solve a few instances of a particular steering setup). Note that for BVP compilation the user must first <code>using SymPy</code> or <code>import SymPy</code>.</li>
</ul>
</li>
<li>
<p>To implement functions for dynamics linearization, leveraging automatic differentiation provided by <a href="https://github.com/JuliaDiff/ForwardDiff.jl">ForwardDiff.jl</a>. In particular this package provides linearization of continuous-time systems as well as linearization of the corresponding discrete-time systems arising from zero-order hold or first-order hold input.</p>
<ul>
<li><code>linearize(f::DifferentialDynamics, x, u)</code> — linearization of a differential dynamics model <code>f</code> about the state <code>x</code> and control <code>u</code>; returns a <a href="https://github.com/schmrlng/LinearDynamicsModels.jl/blob/master/src/LinearDynamicsModels.jl#L29"><code>LinearDynamics</code></a>.</li>
<li><code>linearize(f::DifferentialDynamics, x, u::StepControl)</code> — linearization of the discrete time model produced by integrating <code>f</code> starting from the state <code>x</code> and applying the zero-order hold control interval <code>u</code> (constant control <code>u.u</code> over duration <code>u.t</code>); returns a <a href="https://github.com/schmrlng/LinearDynamicsModels.jl/blob/master/src/linearization.jl#L109"><code>ZeroOrderHoldLinearization</code></a>. This linearization is exact (up to numerical error) if <code>f isa LinearDynamics</code>.</li>
<li><code>linearize(f::DifferentialDynamics, x, u::RampControl)</code> — linearization of the discrete time model produced by integrating <code>f</code> starting from the state <code>x</code> and applying the first-order hold control interval <code>u</code> (control linearly interpolated from <code>u.u0</code> to <code>u.uf</code> over duration <code>u.t</code>); returns a <a href="https://github.com/schmrlng/LinearDynamicsModels.jl/blob/master/src/linearization.jl#L113"><code>FirstOrderHoldLinearization</code></a>. This linearization is exact (up to numerical error) if <code>f isa LinearDynamics</code>.</li>
</ul>
</li>
</ol>
</article></div>