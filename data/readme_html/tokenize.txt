<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-tokenize" class="anchor" aria-hidden="true" href="#tokenize"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Tokenize</h1>
<p><a href="https://github.com/KristofferC/Tokenize.jl/actions?query=workflows/CI"><img src="https://github.com/KristofferC/Tokenize.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width:100%;"></a></p>
<p><code>Tokenize</code> is a Julia package that serves a similar purpose and API as the <a href="https://docs.python.org/3/library/tokenize.html" rel="nofollow">tokenize module</a> in Python but for Julia. This is to take a string or buffer containing Julia code, perform lexical analysis and return a stream of tokens.</p>
<p>The goals of this package is to be</p>
<ul>
<li>Fast, it currently lexes all of Julia source files in ~0.25 seconds (580 files, 2 million Tokens)</li>
<li>Round trippable, that is, from a stream of tokens the original string should be recoverable exactly.</li>
<li>Non error throwing. Instead of throwing errors a certain error token is returned.</li>
</ul>
<h3><a id="user-content-api" class="anchor" aria-hidden="true" href="#api"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>API</h3>
<h4><a id="user-content-tokenization" class="anchor" aria-hidden="true" href="#tokenization"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Tokenization</h4>
<p>The function <code>tokenize</code> is the main entrypoint for generating <code>Token</code>s.
It takes a string or a buffer and creates an iterator that will sequentially return the next <code>Token</code> until the end of string or buffer. The argument to <code>tokenize</code> can either be a <code>String</code>, <code>IOBuffer</code> or an <code>IOStream</code>.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; collect(tokenize(&quot;function f(x) end&quot;))
 1,1-1,8          KEYWORD        &quot;function&quot;
 1,9-1,9          WHITESPACE     &quot; &quot;
 1,10-1,10        IDENTIFIER     &quot;f&quot;
 1,11-1,11        LPAREN         &quot;(&quot;
 1,12-1,12        IDENTIFIER     &quot;x&quot;
 1,13-1,13        RPAREN         &quot;)&quot;
 1,14-1,14        WHITESPACE     &quot; &quot;
 1,15-1,17        KEYWORD        &quot;end&quot;
 1,18-1,17        ENDMARKER      &quot;&quot;
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">collect</span>(<span class="pl-c1">tokenize</span>(<span class="pl-s"><span class="pl-pds">"</span>function f(x) end<span class="pl-pds">"</span></span>))
 <span class="pl-c1">1</span>,<span class="pl-c1">1</span><span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">8</span>          KEYWORD        <span class="pl-s"><span class="pl-pds">"</span>function<span class="pl-pds">"</span></span>
 <span class="pl-c1">1</span>,<span class="pl-c1">9</span><span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">9</span>          WHITESPACE     <span class="pl-s"><span class="pl-pds">"</span> <span class="pl-pds">"</span></span>
 <span class="pl-c1">1</span>,<span class="pl-c1">10</span><span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">10</span>        IDENTIFIER     <span class="pl-s"><span class="pl-pds">"</span>f<span class="pl-pds">"</span></span>
 <span class="pl-c1">1</span>,<span class="pl-c1">11</span><span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">11</span>        LPAREN         <span class="pl-s"><span class="pl-pds">"</span>(<span class="pl-pds">"</span></span>
 <span class="pl-c1">1</span>,<span class="pl-c1">12</span><span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">12</span>        IDENTIFIER     <span class="pl-s"><span class="pl-pds">"</span>x<span class="pl-pds">"</span></span>
 <span class="pl-c1">1</span>,<span class="pl-c1">13</span><span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">13</span>        RPAREN         <span class="pl-s"><span class="pl-pds">"</span>)<span class="pl-pds">"</span></span>
 <span class="pl-c1">1</span>,<span class="pl-c1">14</span><span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">14</span>        WHITESPACE     <span class="pl-s"><span class="pl-pds">"</span> <span class="pl-pds">"</span></span>
 <span class="pl-c1">1</span>,<span class="pl-c1">15</span><span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">17</span>        KEYWORD        <span class="pl-s"><span class="pl-pds">"</span>end<span class="pl-pds">"</span></span>
 <span class="pl-c1">1</span>,<span class="pl-c1">18</span><span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">17</span>        ENDMARKER      <span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span></pre></div>
<h4><a id="user-content-tokens" class="anchor" aria-hidden="true" href="#tokens"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><code>Token</code>s</h4>
<p>Each <code>Token</code> is represented by where it starts and ends, what string it contains and what type it is.</p>
<p>The API for a <code>Token</code> (non exported from the <code>Tokenize.Tokens</code> module) is.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="startpos(t)::Tuple{Int, Int} # row and column where the token start
endpos(t)::Tuple{Int, Int}   # row and column where the token ends
startbyte(T)::Int            # byte offset where the token start
endbyte(t)::Int              # byte offset where the token ends
untokenize(t)::String        # string representation of the token
kind(t)::Token.Kind          # kind of the token
exactkind(t)::Token.Kind     # exact kind of the token
"><pre><span class="pl-c1">startpos</span>(t)<span class="pl-k">::</span><span class="pl-c1">Tuple{Int, Int}</span> <span class="pl-c"><span class="pl-c">#</span> row and column where the token start</span>
<span class="pl-c1">endpos</span>(t)<span class="pl-k">::</span><span class="pl-c1">Tuple{Int, Int}</span>   <span class="pl-c"><span class="pl-c">#</span> row and column where the token ends</span>
<span class="pl-c1">startbyte</span>(T)<span class="pl-k">::</span><span class="pl-c1">Int</span>            <span class="pl-c"><span class="pl-c">#</span> byte offset where the token start</span>
<span class="pl-c1">endbyte</span>(t)<span class="pl-k">::</span><span class="pl-c1">Int</span>              <span class="pl-c"><span class="pl-c">#</span> byte offset where the token ends</span>
<span class="pl-c1">untokenize</span>(t)<span class="pl-k">::</span><span class="pl-c1">String</span>        <span class="pl-c"><span class="pl-c">#</span> string representation of the token</span>
<span class="pl-c1">kind</span>(t)<span class="pl-k">::</span><span class="pl-c1">Token.Kind</span>          <span class="pl-c"><span class="pl-c">#</span> kind of the token</span>
<span class="pl-c1">exactkind</span>(t)<span class="pl-k">::</span><span class="pl-c1">Token.Kind</span>     <span class="pl-c"><span class="pl-c">#</span> exact kind of the token</span></pre></div>
<p>The difference between <code>kind</code> and <code>exactkind</code> is that <code>kind</code> returns <code>OP</code> for all operators and <code>KEYWORD</code> for all keywords while <code>exactkind</code> returns a unique kind for all different operators and keywords, ex;</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; tok = collect(tokenize(&quot;⇒&quot;))[1];

julia&gt; Tokens.kind(tok)
OP::Tokenize.Tokens.Kind = 90

julia&gt; Tokens.exactkind(tok)
RIGHTWARDS_DOUBLE_ARROW::Tokenize.Tokens.Kind = 128
"><pre>julia<span class="pl-k">&gt;</span> tok <span class="pl-k">=</span> <span class="pl-c1">collect</span>(<span class="pl-c1">tokenize</span>(<span class="pl-s"><span class="pl-pds">"</span>⇒<span class="pl-pds">"</span></span>))[<span class="pl-c1">1</span>];

julia<span class="pl-k">&gt;</span> Tokens<span class="pl-k">.</span><span class="pl-c1">kind</span>(tok)
OP<span class="pl-k">::</span><span class="pl-c1">Tokenize.Tokens.Kind</span> <span class="pl-k">=</span> <span class="pl-c1">90</span>

julia<span class="pl-k">&gt;</span> Tokens<span class="pl-k">.</span><span class="pl-c1">exactkind</span>(tok)
RIGHTWARDS_DOUBLE_ARROW<span class="pl-k">::</span><span class="pl-c1">Tokenize.Tokens.Kind</span> <span class="pl-k">=</span> <span class="pl-c1">128</span></pre></div>
<p>All the different <code>Token.Kind</code> can be seen in the <a href="https://github.com/JuliaLang/Tokenize.jl/blob/master/src/token_kinds.jl"><code>token_kinds.jl</code> file</a></p>
</article></div>