<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-tokenize" class="anchor" aria-hidden="true" href="#tokenize"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Tokenize</h1>
<p><a href="https://travis-ci.org/JuliaLang/Tokenize.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/2b356ff90da049275b4bb8cd9d4899fe21d80ab3/68747470733a2f2f7472617669732d63692e6f72672f4a756c69614c616e672f546f6b656e697a652e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaLang/Tokenize.jl.svg?branch=master" style="max-width:100%;"></a> <a href="https://ci.appveyor.com/project/KristofferC/tokenize-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/bab24313987928d859d85fabebd82fbf7e885ee4/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f683964397765626b78796870783739303f7376673d74727565" alt="Build status" data-canonical-src="https://ci.appveyor.com/api/projects/status/h9d9webkxyhpx790?svg=true" style="max-width:100%;"></a>  <a href="https://codecov.io/github/JuliaLang/Tokenize.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/3c45e1e85e80dc09da708bfd984710616412be69/68747470733a2f2f636f6465636f762e696f2f6769746875622f4a756c69614c616e672f546f6b656e697a652e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="https://codecov.io/github/JuliaLang/Tokenize.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
<p><code>Tokenize</code> is a Julia package that serves a similar purpose and API as the <a href="https://docs.python.org/3/library/tokenize.html" rel="nofollow">tokenize module</a> in Python but for Julia. This is to take a string or buffer containing Julia code, perform lexical analysis and return a stream of tokens.</p>
<p>The goals of this package is to be</p>
<ul>
<li>Fast, it currently lexes all of Julia source files in ~0.3 seconds (295 files, 1.16 million Tokens)</li>
<li>Round trippable, that is, from a stream of tokens the original string should be recoverable exactly.</li>
<li>Non error throwing. Instead of throwing errors a certain error token is returned.</li>
</ul>
<h3><a id="user-content-api" class="anchor" aria-hidden="true" href="#api"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>API</h3>
<h4><a id="user-content-tokenization" class="anchor" aria-hidden="true" href="#tokenization"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Tokenization</h4>
<p>The function <code>tokenize</code> is the main entrypoint for generating <code>Token</code>s.
It takes a string or a buffer and creates an iterator that will sequentially return the next <code>Token</code> until the end of string or buffer. The argument to <code>tokenize</code> can either be a <code>String</code>, <code>IOBuffer</code> or an <code>IOStream</code>.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">collect</span>(<span class="pl-c1">tokenize</span>(<span class="pl-s"><span class="pl-pds">"</span>function f(x) end<span class="pl-pds">"</span></span>))
 <span class="pl-c1">1</span>,<span class="pl-c1">1</span><span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">8</span>          KEYWORD        <span class="pl-s"><span class="pl-pds">"</span>function<span class="pl-pds">"</span></span>
 <span class="pl-c1">1</span>,<span class="pl-c1">9</span><span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">9</span>          WHITESPACE     <span class="pl-s"><span class="pl-pds">"</span> <span class="pl-pds">"</span></span>
 <span class="pl-c1">1</span>,<span class="pl-c1">10</span><span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">10</span>        IDENTIFIER     <span class="pl-s"><span class="pl-pds">"</span>f<span class="pl-pds">"</span></span>
 <span class="pl-c1">1</span>,<span class="pl-c1">11</span><span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">11</span>        LPAREN         <span class="pl-s"><span class="pl-pds">"</span>(<span class="pl-pds">"</span></span>
 <span class="pl-c1">1</span>,<span class="pl-c1">12</span><span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">12</span>        IDENTIFIER     <span class="pl-s"><span class="pl-pds">"</span>x<span class="pl-pds">"</span></span>
 <span class="pl-c1">1</span>,<span class="pl-c1">13</span><span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">13</span>        RPAREN         <span class="pl-s"><span class="pl-pds">"</span>)<span class="pl-pds">"</span></span>
 <span class="pl-c1">1</span>,<span class="pl-c1">14</span><span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">14</span>        WHITESPACE     <span class="pl-s"><span class="pl-pds">"</span> <span class="pl-pds">"</span></span>
 <span class="pl-c1">1</span>,<span class="pl-c1">15</span><span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">17</span>        KEYWORD        <span class="pl-s"><span class="pl-pds">"</span>end<span class="pl-pds">"</span></span>
 <span class="pl-c1">1</span>,<span class="pl-c1">18</span><span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">17</span>        ENDMARKER      <span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span></pre></div>
<h4><a id="user-content-tokens" class="anchor" aria-hidden="true" href="#tokens"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><code>Token</code>s</h4>
<p>Each <code>Token</code> is represented by where it starts and ends, what string it contains and what type it is.</p>
<p>The API for a <code>Token</code> (non exported from the <code>Tokenize.Tokens</code> module) is.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">startpos</span>(t)<span class="pl-k">::</span><span class="pl-c1">Tuple{Int, Int}</span> <span class="pl-c"><span class="pl-c">#</span> row and column where the token start</span>
<span class="pl-c1">endpos</span>(t)<span class="pl-k">::</span><span class="pl-c1">Tuple{Int, Int}</span>   <span class="pl-c"><span class="pl-c">#</span> row and column where the token ends</span>
<span class="pl-c1">startbyte</span>(T)<span class="pl-k">::</span><span class="pl-c1">Int</span>            <span class="pl-c"><span class="pl-c">#</span> byte offset where the token start</span>
<span class="pl-c1">endbyte</span>(t)<span class="pl-k">::</span><span class="pl-c1">Int</span>              <span class="pl-c"><span class="pl-c">#</span> byte offset where the token ends</span>
<span class="pl-c1">untokenize</span>(t)<span class="pl-k">::</span><span class="pl-c1">String</span>        <span class="pl-c"><span class="pl-c">#</span> string representation of the token</span>
<span class="pl-c1">kind</span>(t)<span class="pl-k">::</span><span class="pl-c1">Token.Kind</span>          <span class="pl-c"><span class="pl-c">#</span> kind of the token</span>
<span class="pl-c1">exactkind</span>(t)<span class="pl-k">::</span><span class="pl-c1">Token.Kind</span>     <span class="pl-c"><span class="pl-c">#</span> exact kind of the token</span></pre></div>
<p>The difference between <code>kind</code> and <code>exactkind</code> is that <code>kind</code> returns <code>OP</code> for all operators and <code>KEYWORD</code> for all keywords while <code>exactkind</code> returns a unique kind for all different operators and keywords, ex;</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> tok <span class="pl-k">=</span> <span class="pl-c1">collect</span>(<span class="pl-c1">tokenize</span>(<span class="pl-s"><span class="pl-pds">"</span>â‡’<span class="pl-pds">"</span></span>))[<span class="pl-c1">1</span>];

julia<span class="pl-k">&gt;</span> Tokens<span class="pl-k">.</span><span class="pl-c1">kind</span>(tok)
OP<span class="pl-k">::</span><span class="pl-c1">Tokenize.Tokens.Kind</span> <span class="pl-k">=</span> <span class="pl-c1">90</span>

julia<span class="pl-k">&gt;</span> Tokens<span class="pl-k">.</span><span class="pl-c1">exactkind</span>(tok)
RIGHTWARDS_DOUBLE_ARROW<span class="pl-k">::</span><span class="pl-c1">Tokenize.Tokens.Kind</span> <span class="pl-k">=</span> <span class="pl-c1">128</span></pre></div>
<p>All the different <code>Token.Kind</code> can be seen in the <a href="https://github.com/JuliaLang/Tokenize.jl/blob/master/src/token_kinds.jl"><code>token_kinds.jl</code> file</a></p>
</article></div>