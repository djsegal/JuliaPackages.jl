<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-gigascatterjl" class="anchor" aria-hidden="true" href="#gigascatterjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>GigaScatter.jl</h1>
<p dir="auto">Fast rasterization of huge amounts of tiny transparent points.</p>
<h2 dir="auto"><a id="user-content-how-to" class="anchor" aria-hidden="true" href="#how-to"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>How-To</h2>
<p dir="auto">First, get some data -- you will need point coordinates and their colors (in RGBA).</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="points = randn(2,100000)
colors = rand(4,100000)"><pre>points <span class="pl-k">=</span> <span class="pl-c1">randn</span>(<span class="pl-c1">2</span>,<span class="pl-c1">100000</span>)
colors <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">4</span>,<span class="pl-c1">100000</span>)</pre></div>
<p dir="auto">After that, create a raster (of size 500x500):</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using GigaScatter

raster = rasterize((500,500), points, colors)"><pre><span class="pl-k">using</span> GigaScatter

raster <span class="pl-k">=</span> <span class="pl-c1">rasterize</span>((<span class="pl-c1">500</span>,<span class="pl-c1">500</span>), points, colors)</pre></div>
<p dir="auto">The raster is now basically a 4-layer matrix with channels; you can write it to PNG and see what it looks like:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="savePNG(&quot;demo-random.png&quot;, raster)"><pre><span class="pl-c1">savePNG</span>(<span class="pl-s"><span class="pl-pds">"</span>demo-random.png<span class="pl-pds">"</span></span>, raster)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="media/demo-random.png"><img src="media/demo-random.png" alt="Scatterplot with random data" title="Scatterplot" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-supporting-functions" class="anchor" aria-hidden="true" href="#supporting-functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Supporting functions</h2>
<h3 dir="auto"><a id="user-content-point-size" class="anchor" aria-hidden="true" href="#point-size"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Point size</h3>
<p dir="auto">For efficiency, points are not plotted as large immediately during rasterization, but you can later expand them by a kernel function (the results are same, but the kernel method is more efficient if you have more individual points than pixels in the resulting image, which is in fact common).</p>
<p dir="auto">This expands the pixels to circles of radius <code>3.5</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="rasterWithBigPoints = rasterKernelCircle(3.5, raster)"><pre>rasterWithBigPoints <span class="pl-k">=</span> <span class="pl-c1">rasterKernelCircle</span>(<span class="pl-c1">3.5</span>, raster)</pre></div>
<h3 dir="auto"><a id="user-content-colors" class="anchor" aria-hidden="true" href="#colors"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Colors</h3>
<p dir="auto">There are helper functions for coloring the points based on the class/category, and based on a real value (e.g. expression of some marker).</p>
<p dir="auto">To plot categorical colors, you will need an integer array of categories (we create one manually from the data here):</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="points = vcat(randn(1000000)', rand(1000000)')
colors = classColors(
	# numerically scale and truncate the floats to 10 categories
	Array{Int64,1}(trunc.(points[2,:]*9) .+ 1),
	# create a rainbow-like palette which is pretty good for categories
	clusterPalette(10, alpha=.2))
raster = rasterize((500,500), points, colors)
savePNG(&quot;demo-classes.png&quot;, raster)"><pre>points <span class="pl-k">=</span> <span class="pl-c1">vcat</span>(<span class="pl-c1">randn</span>(<span class="pl-c1">1000000</span>)<span class="pl-k">'</span>, <span class="pl-c1">rand</span>(<span class="pl-c1">1000000</span>)<span class="pl-k">'</span>)
colors <span class="pl-k">=</span> <span class="pl-c1">classColors</span>(
	<span class="pl-c"><span class="pl-c">#</span> numerically scale and truncate the floats to 10 categories</span>
	<span class="pl-c1">Array</span><span class="pl-c1">{Int64,1}</span>(<span class="pl-c1">trunc</span>.(points[<span class="pl-c1">2</span>,:]<span class="pl-k">*</span><span class="pl-c1">9</span>) <span class="pl-k">.+</span> <span class="pl-c1">1</span>),
	<span class="pl-c"><span class="pl-c">#</span> create a rainbow-like palette which is pretty good for categories</span>
	<span class="pl-c1">clusterPalette</span>(<span class="pl-c1">10</span>, alpha<span class="pl-k">=</span>.<span class="pl-c1">2</span>))
raster <span class="pl-k">=</span> <span class="pl-c1">rasterize</span>((<span class="pl-c1">500</span>,<span class="pl-c1">500</span>), points, colors)
<span class="pl-c1">savePNG</span>(<span class="pl-s"><span class="pl-pds">"</span>demo-classes.png<span class="pl-pds">"</span></span>, raster)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="media/demo-classes.png"><img src="media/demo-classes.png" alt="Scatterplot with classful colors" title="Scatterplot" style="max-width: 100%;"></a></p>
<p dir="auto">The same can be done with continuous properties of points, available as floating-point data:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# make some arbitrary floating point numbers from the data
vals = points[1,:] .* points[2,:]
colors = expressionColors(
	# scale the data into interval 0..1, required by expressionColors
	scaleNorm(vals), # (the other choice is scaleMinMax)
	# create a RdYlBu-like palette with enough levels for continuous data
	expressionPalette(256, alpha=.1))
raster = rasterize((500,500), points, colors)
savePNG(&quot;demo-values.png&quot;, raster)"><pre><span class="pl-c"><span class="pl-c">#</span> make some arbitrary floating point numbers from the data</span>
vals <span class="pl-k">=</span> points[<span class="pl-c1">1</span>,:] <span class="pl-k">.*</span> points[<span class="pl-c1">2</span>,:]
colors <span class="pl-k">=</span> <span class="pl-c1">expressionColors</span>(
	<span class="pl-c"><span class="pl-c">#</span> scale the data into interval 0..1, required by expressionColors</span>
	<span class="pl-c1">scaleNorm</span>(vals), <span class="pl-c"><span class="pl-c">#</span> (the other choice is scaleMinMax)</span>
	<span class="pl-c"><span class="pl-c">#</span> create a RdYlBu-like palette with enough levels for continuous data</span>
	<span class="pl-c1">expressionPalette</span>(<span class="pl-c1">256</span>, alpha<span class="pl-k">=</span>.<span class="pl-c1">1</span>))
raster <span class="pl-k">=</span> <span class="pl-c1">rasterize</span>((<span class="pl-c1">500</span>,<span class="pl-c1">500</span>), points, colors)
<span class="pl-c1">savePNG</span>(<span class="pl-s"><span class="pl-pds">"</span>demo-values.png<span class="pl-pds">"</span></span>, raster)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="media/demo-values.png"><img src="media/demo-values.png" alt="Scatterplot with continuous coloring" title="Scatterplot" style="max-width: 100%;"></a></p>
<h3 dir="auto"><a id="user-content-transparency-and-background" class="anchor" aria-hidden="true" href="#transparency-and-background"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Transparency and background</h3>
<p dir="auto">By default, the raster is transparent. You can add an optionally colored background:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="rasterOnWhite = solidBackground(raster)
rasterOnLightGray = solidBackground(raster, [0.5, 0.5, 0.5])"><pre>rasterOnWhite <span class="pl-k">=</span> <span class="pl-c1">solidBackground</span>(raster)
rasterOnLightGray <span class="pl-k">=</span> <span class="pl-c1">solidBackground</span>(raster, [<span class="pl-c1">0.5</span>, <span class="pl-c1">0.5</span>, <span class="pl-c1">0.5</span>])</pre></div>
<p dir="auto">After the alpha channel is removed, saved PNGs will be slightly smaller, and you will be also able to export JPEG images (that cannot handle the alpha channel):</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="saveJPEG(&quot;demo-no-alpha.jpg&quot;, rasterOnLightGray)"><pre><span class="pl-c1">saveJPEG</span>(<span class="pl-s"><span class="pl-pds">"</span>demo-no-alpha.jpg<span class="pl-pds">"</span></span>, rasterOnLightGray)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="media/demo-no-alpha.jpg"><img src="media/demo-no-alpha.jpg" alt="Non-transparent scatterplot with gray background" title="Scatterplot" style="max-width: 100%;"></a></p>
<h3 dir="auto"><a id="user-content-usage-with-gigasomjl" class="anchor" aria-hidden="true" href="#usage-with-gigasomjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage with GigaSOM.jl</h3>
<p dir="auto">We assume you have the input DataFrame in <code>data</code> and cell-to-cluster mapping in <code>cl</code> with totally 10 categories:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# prepare the embedding first
som = GigaSOM.initGigaSOM(data, ...)
som = GigaSOM.trainGigaSOM(som, data, ...)
e = GigaSOM.embedGigaSOM(som, data, ...)

using GigaScatter
# plot the clusters
raster = rasterize((1024, 1024),
                   Matrix{Float64}(e'),
		   classColors(cl, clusterPalette(10, alpha=.2)))
savePNG(&quot;gigasom-clusters.png&quot;, rasterKernelCircle(2.5, raster))
# plot the expression from 5th column from the data
raster = rasterize((1024, 1024),
                   Matrix{Float64}(e'),
		   expressionColors(
		     scaleNorm(Array{Float64}(data[:,5])),
		     expressionPalette(100, alpha=.2)))
savePNG(&quot;gigasom-expression.png&quot;, rasterKernelCircle(2.5, raster))"><pre><span class="pl-c"><span class="pl-c">#</span> prepare the embedding first</span>
som <span class="pl-k">=</span> GigaSOM<span class="pl-k">.</span><span class="pl-c1">initGigaSOM</span>(data, <span class="pl-k">...</span>)
som <span class="pl-k">=</span> GigaSOM<span class="pl-k">.</span><span class="pl-c1">trainGigaSOM</span>(som, data, <span class="pl-k">...</span>)
e <span class="pl-k">=</span> GigaSOM<span class="pl-k">.</span><span class="pl-c1">embedGigaSOM</span>(som, data, <span class="pl-k">...</span>)

<span class="pl-k">using</span> GigaScatter
<span class="pl-c"><span class="pl-c">#</span> plot the clusters</span>
raster <span class="pl-k">=</span> <span class="pl-c1">rasterize</span>((<span class="pl-c1">1024</span>, <span class="pl-c1">1024</span>),
                   <span class="pl-c1">Matrix</span><span class="pl-c1">{Float64}</span>(e<span class="pl-k">'</span>),
		   <span class="pl-c1">classColors</span>(cl, <span class="pl-c1">clusterPalette</span>(<span class="pl-c1">10</span>, alpha<span class="pl-k">=</span>.<span class="pl-c1">2</span>)))
<span class="pl-c1">savePNG</span>(<span class="pl-s"><span class="pl-pds">"</span>gigasom-clusters.png<span class="pl-pds">"</span></span>, <span class="pl-c1">rasterKernelCircle</span>(<span class="pl-c1">2.5</span>, raster))
<span class="pl-c"><span class="pl-c">#</span> plot the expression from 5th column from the data</span>
raster <span class="pl-k">=</span> <span class="pl-c1">rasterize</span>((<span class="pl-c1">1024</span>, <span class="pl-c1">1024</span>),
                   <span class="pl-c1">Matrix</span><span class="pl-c1">{Float64}</span>(e<span class="pl-k">'</span>),
		   <span class="pl-c1">expressionColors</span>(
		     <span class="pl-c1">scaleNorm</span>(<span class="pl-c1">Array</span><span class="pl-c1">{Float64}</span>(data[:,<span class="pl-c1">5</span>])),
		     <span class="pl-c1">expressionPalette</span>(<span class="pl-c1">100</span>, alpha<span class="pl-k">=</span>.<span class="pl-c1">2</span>)))
<span class="pl-c1">savePNG</span>(<span class="pl-s"><span class="pl-pds">"</span>gigasom-expression.png<span class="pl-pds">"</span></span>, <span class="pl-c1">rasterKernelCircle</span>(<span class="pl-c1">2.5</span>, raster))</pre></div>
</article></div>