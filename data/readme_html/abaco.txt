<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-abaco" class="anchor" aria-hidden="true" href="#abaco"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Abaco</h1>
<p dir="auto"><a href="https://attdona.github.io/Abaco.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://attdona.github.io/Abaco.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/attdona/Abaco.jl/actions/workflows/Runtests.yml"><img src="https://github.com/attdona/Abaco.jl/actions/workflows/Runtests.yml/badge.svg" alt="Runtests" style="max-width: 100%;"></a></p>
<p dir="auto">Abaco computes formulas from a stream of input variables.</p>
<p dir="auto">Abaco aims to target the case where a number of IoT sensor, network devices or other types of objects that send periodic variable values must be combined into output values defined by math expressions.</p>
<p dir="auto">In a real world scenario values are coming asynchronously, delayed and out of orders. Abaco may manage values referring to different times.</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/attdona/Abaco.jl/blob/main/docs/images/timeline.png?raw=true"><img src="https://github.com/attdona/Abaco.jl/raw/main/docs/images/timeline.png?raw=true" alt="timeline" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-getting-started" class="anchor" aria-hidden="true" href="#getting-started"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Getting Started</h2>
<p dir="auto">Installation:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using Pkg; Pkg.add(&quot;Abaco&quot;)    "><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Pkg; Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>Abaco<span class="pl-pds">"</span></span>)    </pre></div>
<p dir="auto">Minimal example:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Abaco

# Initialize abaco context with a time span of 60 seconds and handle
# input values with timestamp ts up to 4 (ages) contiguous time intervals.
# When a formula is evaluated because all inputs variables are known traces
# an info record.
abaco = abaco_init(interval=60, ages=4) do ts, ne, fname, value, inputs
    @info &quot;[$ts][$ne] function $fname=$value&quot;
end

# Add desired outputs in terms of inputs variables x, y, z, v, w
outputs = [&quot;xysum = x + y&quot;, &quot;rsigma = x * exp(y-1)&quot;, &quot;wsum = (x*w + z*v)&quot;]

for formula in outputs
    add_formula(abaco, formula)
end

# Start receiving some inputs values
# normally ts is the UTC timestamp from epoch in seconds.
# but for semplicity assume time start from zero.

# the device AG101 sends the x value at timestamp 0.
ts = 0
device = &quot;AG101&quot;
add_value(abaco, ts, device, &quot;x&quot;, 10)

# Time flows and about 1 minute later ...

# the device CE987 sends the y value at timestamp 65.
ts = 65
device = &quot;CE987&quot;
add_value(abaco, ts, device, &quot;y&quot;, 10)

# Time flows and more than 1 minute later ...

# the device AG101 sends the y value calculated at timestamp 0.
# At this instant the formulas that depends on x and y are computable
# for the node AG101 at timestamp 0.
ts = 0
device = &quot;AG101&quot;
add_value(abaco, ts, device, &quot;y&quot;, 20)
[ Info: [0][AG101] function xysum=30
[ Info: [0][AG101] function rsigma=1.7848230096318724e9

# Now arrives the variable x from CE987 that make some formulas computables
# because the received values for x and y are included into time interval [60, 120).
# Note that x timestamp is 65, y timestamp is 101
# and the formulas timestamp is 60: the START_TIME of the time interval
# where formula is computable. 
ts = 101
device = &quot;CE987&quot;
add_value(abaco, ts, device, &quot;x&quot;, 10)
[ Info: [60][CE987] function xysum=20
[ Info: [60][CE987] function rsigma=81030.83927575384
"><pre><span class="pl-k">using</span> Abaco

<span class="pl-c"><span class="pl-c">#</span> Initialize abaco context with a time span of 60 seconds and handle</span>
<span class="pl-c"><span class="pl-c">#</span> input values with timestamp ts up to 4 (ages) contiguous time intervals.</span>
<span class="pl-c"><span class="pl-c">#</span> When a formula is evaluated because all inputs variables are known traces</span>
<span class="pl-c"><span class="pl-c">#</span> an info record.</span>
abaco <span class="pl-k">=</span> <span class="pl-c1">abaco_init</span>(interval<span class="pl-k">=</span><span class="pl-c1">60</span>, ages<span class="pl-k">=</span><span class="pl-c1">4</span>) <span class="pl-k">do</span> ts, ne, fname, value, inputs
    <span class="pl-c1">@info</span> <span class="pl-s"><span class="pl-pds">"</span>[<span class="pl-v">$ts</span>][<span class="pl-v">$ne</span>] function <span class="pl-v">$fname</span>=<span class="pl-v">$value</span><span class="pl-pds">"</span></span>
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> Add desired outputs in terms of inputs variables x, y, z, v, w</span>
outputs <span class="pl-k">=</span> [<span class="pl-s"><span class="pl-pds">"</span>xysum = x + y<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>rsigma = x * exp(y-1)<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>wsum = (x*w + z*v)<span class="pl-pds">"</span></span>]

<span class="pl-k">for</span> formula <span class="pl-k">in</span> outputs
    <span class="pl-c1">add_formula</span>(abaco, formula)
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> Start receiving some inputs values</span>
<span class="pl-c"><span class="pl-c">#</span> normally ts is the UTC timestamp from epoch in seconds.</span>
<span class="pl-c"><span class="pl-c">#</span> but for semplicity assume time start from zero.</span>

<span class="pl-c"><span class="pl-c">#</span> the device AG101 sends the x value at timestamp 0.</span>
ts <span class="pl-k">=</span> <span class="pl-c1">0</span>
device <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>AG101<span class="pl-pds">"</span></span>
<span class="pl-c1">add_value</span>(abaco, ts, device, <span class="pl-s"><span class="pl-pds">"</span>x<span class="pl-pds">"</span></span>, <span class="pl-c1">10</span>)

<span class="pl-c"><span class="pl-c">#</span> Time flows and about 1 minute later ...</span>

<span class="pl-c"><span class="pl-c">#</span> the device CE987 sends the y value at timestamp 65.</span>
ts <span class="pl-k">=</span> <span class="pl-c1">65</span>
device <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>CE987<span class="pl-pds">"</span></span>
<span class="pl-c1">add_value</span>(abaco, ts, device, <span class="pl-s"><span class="pl-pds">"</span>y<span class="pl-pds">"</span></span>, <span class="pl-c1">10</span>)

<span class="pl-c"><span class="pl-c">#</span> Time flows and more than 1 minute later ...</span>

<span class="pl-c"><span class="pl-c">#</span> the device AG101 sends the y value calculated at timestamp 0.</span>
<span class="pl-c"><span class="pl-c">#</span> At this instant the formulas that depends on x and y are computable</span>
<span class="pl-c"><span class="pl-c">#</span> for the node AG101 at timestamp 0.</span>
ts <span class="pl-k">=</span> <span class="pl-c1">0</span>
device <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>AG101<span class="pl-pds">"</span></span>
<span class="pl-c1">add_value</span>(abaco, ts, device, <span class="pl-s"><span class="pl-pds">"</span>y<span class="pl-pds">"</span></span>, <span class="pl-c1">20</span>)
[ Info<span class="pl-k">:</span> [<span class="pl-c1">0</span>][AG101] <span class="pl-k">function</span> xysum<span class="pl-k">=</span><span class="pl-c1">30</span>
[ Info<span class="pl-k">:</span> [<span class="pl-c1">0</span>][AG101] <span class="pl-k">function</span> rsigma<span class="pl-k">=</span><span class="pl-c1">1.7848230096318724e9</span>

<span class="pl-c"><span class="pl-c">#</span> Now arrives the variable x from CE987 that make some formulas computables</span>
<span class="pl-c"><span class="pl-c">#</span> because the received values for x and y are included into time interval [60, 120).</span>
<span class="pl-c"><span class="pl-c">#</span> Note that x timestamp is 65, y timestamp is 101</span>
<span class="pl-c"><span class="pl-c">#</span> and the formulas timestamp is 60: the START_TIME of the time interval</span>
<span class="pl-c"><span class="pl-c">#</span> where formula is computable. </span>
ts <span class="pl-k">=</span> <span class="pl-c1">101</span>
device <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>CE987<span class="pl-pds">"</span></span>
<span class="pl-c1">add_value</span>(abaco, ts, device, <span class="pl-s"><span class="pl-pds">"</span>x<span class="pl-pds">"</span></span>, <span class="pl-c1">10</span>)
[ Info<span class="pl-k">:</span> [<span class="pl-c1">60</span>][CE987] <span class="pl-k">function</span> xysum<span class="pl-k">=</span><span class="pl-c1">20</span>
[ Info<span class="pl-k">:</span> [<span class="pl-c1">60</span>][CE987] <span class="pl-k">function</span> rsigma<span class="pl-k">=</span><span class="pl-c1">81030.83927575384</span>
</pre></div>
</article></div>