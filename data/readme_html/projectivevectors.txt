<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-projectivevectorsjl" class="anchor" aria-hidden="true" href="#projectivevectorsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>ProjectiveVectors.jl</h1>
<table>
<thead>
<tr>
<th align="center"><strong>Documentation</strong></th>
<th align="center"><strong>Build Status</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><a href="https://www.juliahomotopycontinuation.org/ProjectiveVectors.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a></td>
<td align="center"><a href="https://travis-ci.org/JuliaHomotopyContinuation/ProjectiveVectors.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/49c3326bc0efdf55e3e4558567270c8ce085944ad22a14621140bf0894aea279/68747470733a2f2f7472617669732d63692e6f72672f4a756c6961486f6d6f746f7079436f6e74696e756174696f6e2f50726f6a656374697665566563746f72732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaHomotopyContinuation/ProjectiveVectors.jl.svg?branch=master" style="max-width: 100%;"></a></td>
</tr>
<tr>
<td align="center"><a href="https://www.juliahomotopycontinuation.org/ProjectiveVectors.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a></td>
<td align="center"><a href="https://codecov.io/gh/juliahomotopycontinuation/ProjectiveVectors.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/7457975aa7bf9d571eb820b0f15f417248ec735ea257d49caca6587d8c2ab6b5/68747470733a2f2f636f6465636f762e696f2f67682f6a756c6961686f6d6f746f7079636f6e74696e756174696f6e2f486f6d6f746f7079436f6e74696e756174696f6e2e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov branch" data-canonical-src="https://codecov.io/gh/juliahomotopycontinuation/HomotopyContinuation.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></td>
</tr>
</tbody>
</table>
<p dir="auto">Data structure for elements in products of projective spaces. This package defines as type <code>PVector{T,N}</code> where <code>T</code> is the
element type and <code>N</code> is the number of projective spaces in which the vector lives.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using ProjectiveVectors, LinearAlgebra

# We want to consider the vector [1, 2, 3, 4, 5, 6] as a vector [1:2:3]×[4:5:6] in P²×P²
julia&gt; PVector([1, 2, 3, 4, 5, 6], (2, 2))
[1 : 2 : 3] × [4 : 5 : 6]

# We also can embed an affine vector into a projective space.
# Here we embed [2, 3, 4, 5, 6, 7] into P²×P³×P¹
julia&gt; v = embed([2, 3, 4, 5, 6, 7], (2, 3, 1))
[2 : 3 : 1] × [4 : 5 : 6 : 1] × [7 : 1]

# We support several linear algebra routines. These always return a tuple
julia&gt; norm(v)
(3.7416573867739413, 8.831760866327848, 7.0710678118654755)

julia&gt; w = embed([2, 3, 4])
[2 : 3 : 4 : 1]

julia&gt; norm(w, Inf)
(4.0,)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> ProjectiveVectors, LinearAlgebra

<span class="pl-c"><span class="pl-c">#</span> We want to consider the vector [1, 2, 3, 4, 5, 6] as a vector [1:2:3]×[4:5:6] in P²×P²</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">PVector</span>([<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">4</span>, <span class="pl-c1">5</span>, <span class="pl-c1">6</span>], (<span class="pl-c1">2</span>, <span class="pl-c1">2</span>))
[<span class="pl-c1">1</span> <span class="pl-k">:</span> <span class="pl-c1">2</span> <span class="pl-k">:</span> <span class="pl-c1">3</span>] <span class="pl-k">×</span> [<span class="pl-c1">4</span> <span class="pl-k">:</span> <span class="pl-c1">5</span> <span class="pl-k">:</span> <span class="pl-c1">6</span>]

<span class="pl-c"><span class="pl-c">#</span> We also can embed an affine vector into a projective space.</span>
<span class="pl-c"><span class="pl-c">#</span> Here we embed [2, 3, 4, 5, 6, 7] into P²×P³×P¹</span>
julia<span class="pl-k">&gt;</span> v <span class="pl-k">=</span> <span class="pl-c1">embed</span>([<span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">4</span>, <span class="pl-c1">5</span>, <span class="pl-c1">6</span>, <span class="pl-c1">7</span>], (<span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">1</span>))
[<span class="pl-c1">2</span> <span class="pl-k">:</span> <span class="pl-c1">3</span> <span class="pl-k">:</span> <span class="pl-c1">1</span>] <span class="pl-k">×</span> [<span class="pl-c1">4</span> <span class="pl-k">:</span> <span class="pl-c1">5</span> <span class="pl-k">:</span> <span class="pl-c1">6</span> <span class="pl-k">:</span> <span class="pl-c1">1</span>] <span class="pl-k">×</span> [<span class="pl-c1">7</span> <span class="pl-k">:</span> <span class="pl-c1">1</span>]

<span class="pl-c"><span class="pl-c">#</span> We support several linear algebra routines. These always return a tuple</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">norm</span>(v)
(<span class="pl-c1">3.7416573867739413</span>, <span class="pl-c1">8.831760866327848</span>, <span class="pl-c1">7.0710678118654755</span>)

julia<span class="pl-k">&gt;</span> w <span class="pl-k">=</span> <span class="pl-c1">embed</span>([<span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">4</span>])
[<span class="pl-c1">2</span> <span class="pl-k">:</span> <span class="pl-c1">3</span> <span class="pl-k">:</span> <span class="pl-c1">4</span> <span class="pl-k">:</span> <span class="pl-c1">1</span>]

julia<span class="pl-k">&gt;</span> <span class="pl-c1">norm</span>(w, <span class="pl-c1">Inf</span>)
(<span class="pl-c1">4.0</span>,)</pre></div>
</article></div>