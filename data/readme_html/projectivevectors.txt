<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-projectivevectorsjl" class="anchor" aria-hidden="true" href="#projectivevectorsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>ProjectiveVectors.jl</h1>
<table>
<thead>
<tr>
<th align="center"><strong>Documentation</strong></th>
<th align="center"><strong>Build Status</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><a href="https://www.juliahomotopycontinuation.org/ProjectiveVectors.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/f7b92a177c912c1cc007fc9b40f17ff3ee3bb414/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a></td>
<td align="center"><a href="https://travis-ci.org/JuliaHomotopyContinuation/ProjectiveVectors.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/5b247c94c5b2aa76d01f7468285779629ccabcf4/68747470733a2f2f7472617669732d63692e6f72672f4a756c6961486f6d6f746f7079436f6e74696e756174696f6e2f50726f6a656374697665566563746f72732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaHomotopyContinuation/ProjectiveVectors.jl.svg?branch=master" style="max-width:100%;"></a></td>
</tr>
<tr>
<td align="center"><a href="https://www.juliahomotopycontinuation.org/ProjectiveVectors.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/3e353c26ddfe819150acbc732248f4f2a37f5175/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a></td>
<td align="center"><a href="https://codecov.io/gh/juliahomotopycontinuation/ProjectiveVectors.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/e565210420867bf5ef290b9b1a444ad4fb85a729/68747470733a2f2f636f6465636f762e696f2f67682f6a756c6961686f6d6f746f7079636f6e74696e756174696f6e2f486f6d6f746f7079436f6e74696e756174696f6e2e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov branch" data-canonical-src="https://codecov.io/gh/juliahomotopycontinuation/HomotopyContinuation.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></td>
</tr>
</tbody>
</table>
<p>Data structure for elements in products of projective spaces. This package defines as type <code>PVector{T,N}</code> where <code>T</code> is the
element type and <code>N</code> is the number of projective spaces in which the vector lives.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> ProjectiveVectors, LinearAlgebra

<span class="pl-c"><span class="pl-c">#</span> We want to consider the vector [1, 2, 3, 4, 5, 6] as a vector [1:2:3]×[4:5:6] in P²×P²</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">PVector</span>([<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">4</span>, <span class="pl-c1">5</span>, <span class="pl-c1">6</span>], (<span class="pl-c1">2</span>, <span class="pl-c1">2</span>))
[<span class="pl-c1">1</span> : <span class="pl-c1">2</span> : <span class="pl-c1">3</span>] <span class="pl-k">×</span> [<span class="pl-c1">4</span> : <span class="pl-c1">5</span> : <span class="pl-c1">6</span>]

<span class="pl-c"><span class="pl-c">#</span> We also can embed an affine vector into a projective space.</span>
<span class="pl-c"><span class="pl-c">#</span> Here we embed [2, 3, 4, 5, 6, 7] into P²×P³×P¹</span>
julia<span class="pl-k">&gt;</span> v <span class="pl-k">=</span> <span class="pl-c1">embed</span>([<span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">4</span>, <span class="pl-c1">5</span>, <span class="pl-c1">6</span>, <span class="pl-c1">7</span>], (<span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">1</span>))
[<span class="pl-c1">2</span> : <span class="pl-c1">3</span> : <span class="pl-c1">1</span>] <span class="pl-k">×</span> [<span class="pl-c1">4</span> : <span class="pl-c1">5</span> : <span class="pl-c1">6</span> : <span class="pl-c1">1</span>] <span class="pl-k">×</span> [<span class="pl-c1">7</span> : <span class="pl-c1">1</span>]

<span class="pl-c"><span class="pl-c">#</span> We support several linear algebra routines. These always return a tuple</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">norm</span>(v)
(<span class="pl-c1">3.7416573867739413</span>, <span class="pl-c1">8.831760866327848</span>, <span class="pl-c1">7.0710678118654755</span>)

julia<span class="pl-k">&gt;</span> w <span class="pl-k">=</span> <span class="pl-c1">embed</span>([<span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">4</span>])
[<span class="pl-c1">2</span> : <span class="pl-c1">3</span> : <span class="pl-c1">4</span> : <span class="pl-c1">1</span>]

julia<span class="pl-k">&gt;</span> <span class="pl-c1">norm</span>(w, <span class="pl-c1">Inf</span>)
(<span class="pl-c1">4.0</span>,)</pre></div>
</article></div>