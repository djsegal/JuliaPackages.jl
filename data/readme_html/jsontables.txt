<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-jsontablesjl" class="anchor" aria-hidden="true" href="#jsontablesjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>JSONTables.jl</h1>
<p>A package that provides a JSON integration with the <a href="https://github.com/JuliaData/Tables.jl">Tables.jl</a> interface, that is, it provides the <code>jsontable</code> function as a way to treat a JSON object of arrays, or a JSON array of objects, as a Tables.jl-compatible source. This allows, among other things, loading JSON "tabular" data into a <code>DataFrame</code>, or a JuliaDB.jl table, or written out directly as a csv file.</p>
<p>JSONTables.jl also provides two "write" functions, <code>objecttable</code> and <code>arraytable</code>, for taking any Tables.jl-comptabile source (e.g. <code>DataFrame</code>, <code>CSV.File</code>, etc.) and writing the table out either as a JSON object of arrays, or array of objects, respectively.</p>
<p>So in short:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span> treat a json object of arrays or array of objects as a "table"</span>
jtable <span class="pl-k">=</span> <span class="pl-c1">jsontable</span>(json_source)

<span class="pl-c"><span class="pl-c">#</span> turn json table into DataFrame</span>
df <span class="pl-k">=</span> <span class="pl-c1">DataFrame</span>(jtable)

<span class="pl-c"><span class="pl-c">#</span> turn DataFrame back into json object of arrays</span>
<span class="pl-c1">objecttable</span>(df)

<span class="pl-c"><span class="pl-c">#</span> turn DataFrame back into json array of objects</span>
<span class="pl-c1">arraytable</span>(df)</pre></div>
</article></div>