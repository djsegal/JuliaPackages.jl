<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-jsontablesjl" class="anchor" aria-hidden="true" href="#jsontablesjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>JSONTables.jl</h1>
<p><a href="https://github.com/JuliaData/JSONTables.jl/actions?query=workflow%3ACI"><img src="https://github.com/JuliaData/JSONTables.jl/workflows/CI/badge.svg" alt="CI" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/JuliaData/JSONTables.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/6dc55c560ad96e65734359ba5247f6e65c95e20edb2ee3c5a256816177fa1ce8/68747470733a2f2f636f6465636f762e696f2f67682f4a756c6961446174612f4a534f4e5461626c65732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/JuliaData/JSONTables.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a>
<a href="https://juliahub.com/ui/Packages/JSONTables/xbAk4?t=2" rel="nofollow"><img src="https://camo.githubusercontent.com/389c87a63bddf7988ca68fdf5977738ecd6275920666d5e24fc449e41d77713c/68747470733a2f2f6a756c69616875622e636f6d2f646f63732f4a534f4e5461626c65732f646570732e737667" alt="deps" data-canonical-src="https://juliahub.com/docs/JSONTables/deps.svg" style="max-width:100%;"></a>
<a href="https://juliahub.com/ui/Packages/JSONTables/xbAk4" rel="nofollow"><img src="https://camo.githubusercontent.com/68c0284366a4ccabe6214b7d006c5585baecc710f03d12e2df1c532234d97c37/68747470733a2f2f6a756c69616875622e636f6d2f646f63732f4a534f4e5461626c65732f76657273696f6e2e737667" alt="version" data-canonical-src="https://juliahub.com/docs/JSONTables/version.svg" style="max-width:100%;"></a>
<a href="https://juliahub.com/ui/Packages/JSONTables/xbAk4" rel="nofollow"><img src="https://camo.githubusercontent.com/4e968b5f982945aa4baf8354bf8eb83d7735162c17fef57f82ddff20638346fc/68747470733a2f2f6a756c69616875622e636f6d2f646f63732f4a534f4e5461626c65732f706b676576616c2e737667" alt="pkgeval" data-canonical-src="https://juliahub.com/docs/JSONTables/pkgeval.svg" style="max-width:100%;"></a></p>
<p>A package that provides a JSON integration with the <a href="https://github.com/JuliaData/Tables.jl">Tables.jl</a> interface, that is, it provides the <code>jsontable</code> function as a way to treat a JSON object of arrays, or a JSON array of objects, as a Tables.jl-compatible source. This allows, among other things, loading JSON "tabular" data into a <code>DataFrame</code>, or a JuliaDB.jl table, or written out directly as a csv file.</p>
<p>JSONTables.jl also provides two "write" functions, <code>objecttable</code> and <code>arraytable</code>, for taking any Tables.jl-comptabile source (e.g. <code>DataFrame</code>, <code>CSV.File</code>, etc.) and writing the table out either as a JSON object of arrays, or array of objects, respectively.</p>
<p>So in short:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="# treat a json object of arrays or array of objects as a &quot;table&quot;
jtable = jsontable(json_source)

# turn json table into DataFrame
df = DataFrame(jtable)

# turn DataFrame back into json object of arrays
objecttable(df)

# turn DataFrame back into json array of objects
arraytable(df)
"><pre><span class="pl-c"><span class="pl-c">#</span> treat a json object of arrays or array of objects as a "table"</span>
jtable <span class="pl-k">=</span> <span class="pl-c1">jsontable</span>(json_source)

<span class="pl-c"><span class="pl-c">#</span> turn json table into DataFrame</span>
df <span class="pl-k">=</span> <span class="pl-c1">DataFrame</span>(jtable)

<span class="pl-c"><span class="pl-c">#</span> turn DataFrame back into json object of arrays</span>
<span class="pl-c1">objecttable</span>(df)

<span class="pl-c"><span class="pl-c">#</span> turn DataFrame back into json array of objects</span>
<span class="pl-c1">arraytable</span>(df)</pre></div>
</article></div>