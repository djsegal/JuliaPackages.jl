<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-graphnetsjl" class="anchor" aria-hidden="true" href="#graphnetsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>GraphNets.jl</h1>
<p dir="auto"><a href="https://juliamltools.github.io/GraphNets.jl/dev/" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-setup" class="anchor" aria-hidden="true" href="#setup"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Setup</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using GraphNets

X_DE = 10 # Input feature dimension of edges
X_DN = 5 # Input feature dimension of nodes
X_DG = 0 # Input feature dimension of graphs (no graph level input data)
Y_DE = 3 # Output feature dimension of edges
Y_DN = 4 # Output feature dimension of nodes
Y_DG = 5 # Output feature dimension of graphs

block = GNBlock(
    (X_DE,X_DN,X_DG) =&gt; (Y_DE,Y_DN,Y_DG)
)"><pre><span class="pl-k">using</span> GraphNets

X_DE <span class="pl-k">=</span> <span class="pl-c1">10</span> <span class="pl-c"><span class="pl-c">#</span> Input feature dimension of edges</span>
X_DN <span class="pl-k">=</span> <span class="pl-c1">5</span> <span class="pl-c"><span class="pl-c">#</span> Input feature dimension of nodes</span>
X_DG <span class="pl-k">=</span> <span class="pl-c1">0</span> <span class="pl-c"><span class="pl-c">#</span> Input feature dimension of graphs (no graph level input data)</span>
Y_DE <span class="pl-k">=</span> <span class="pl-c1">3</span> <span class="pl-c"><span class="pl-c">#</span> Output feature dimension of edges</span>
Y_DN <span class="pl-k">=</span> <span class="pl-c1">4</span> <span class="pl-c"><span class="pl-c">#</span> Output feature dimension of nodes</span>
Y_DG <span class="pl-k">=</span> <span class="pl-c1">5</span> <span class="pl-c"><span class="pl-c">#</span> Output feature dimension of graphs</span>

block <span class="pl-k">=</span> <span class="pl-c1">GNBlock</span>(
    (X_DE,X_DN,X_DG) <span class="pl-k">=&gt;</span> (Y_DE,Y_DN,Y_DG)
)</pre></div>
<h3 dir="auto"><a id="user-content-example-1-batch-of-graphs-with-same-structure-same-adjacency-matrix" class="anchor" aria-hidden="true" href="#example-1-batch-of-graphs-with-same-structure-same-adjacency-matrix"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example 1: Batch of graphs with same structure (same adjacency matrix)</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="adj_mat = [
    1 0 1;
    1 1 0;
    0 0 1;
] # Adjacency matrix

num_nodes = size(adj_mat, 1)
num_edges = length(filter(isone, adj_mat))

batch_size = 2
edge_features = rand(Float32, X_DE, num_edges, batch_size)
node_features = rand(Float32, X_DN, num_nodes, batch_size)
graph_features = nothing # no graph level input features

x = (
    graphs=adj_mat, # All graphs in this batch have same structure
    ef=edge_features, # (X_DE, num_edges, batch_size)
    nf=node_features, # (X_DN, num_nodes, batch_size)
    gf=graph_features # (X_DG, batch_size)
) |&gt; batch

y = block(x) |&gt; unbatch

@assert size(y.ef) == (Y_DE, num_edges, batch_size)
@assert size(y.nf) == (Y_DN, num_nodes, batch_size)
@assert size(y.gf) == (Y_DG, batch_size)

# Get the output graph edges of the 1st graph
@assert size(y.ef[:,:,1]) == (Y_DE, num_edges)

# Get the output node edges of the 1st graph
@assert size(y.nf[:,:,1]) == (Y_DN, num_nodes)

# Get the output graph edges of the 2nd graph
@assert size(y.gf[:,2]) == (Y_DG,)"><pre>adj_mat <span class="pl-k">=</span> [
    <span class="pl-c1">1</span> <span class="pl-c1">0</span> <span class="pl-c1">1</span>;
    <span class="pl-c1">1</span> <span class="pl-c1">1</span> <span class="pl-c1">0</span>;
    <span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">1</span>;
] <span class="pl-c"><span class="pl-c">#</span> Adjacency matrix</span>

num_nodes <span class="pl-k">=</span> <span class="pl-c1">size</span>(adj_mat, <span class="pl-c1">1</span>)
num_edges <span class="pl-k">=</span> <span class="pl-c1">length</span>(<span class="pl-c1">filter</span>(isone, adj_mat))

batch_size <span class="pl-k">=</span> <span class="pl-c1">2</span>
edge_features <span class="pl-k">=</span> <span class="pl-c1">rand</span>(Float32, X_DE, num_edges, batch_size)
node_features <span class="pl-k">=</span> <span class="pl-c1">rand</span>(Float32, X_DN, num_nodes, batch_size)
graph_features <span class="pl-k">=</span> <span class="pl-c1">nothing</span> <span class="pl-c"><span class="pl-c">#</span> no graph level input features</span>

x <span class="pl-k">=</span> (
    graphs<span class="pl-k">=</span>adj_mat, <span class="pl-c"><span class="pl-c">#</span> All graphs in this batch have same structure</span>
    ef<span class="pl-k">=</span>edge_features, <span class="pl-c"><span class="pl-c">#</span> (X_DE, num_edges, batch_size)</span>
    nf<span class="pl-k">=</span>node_features, <span class="pl-c"><span class="pl-c">#</span> (X_DN, num_nodes, batch_size)</span>
    gf<span class="pl-k">=</span>graph_features <span class="pl-c"><span class="pl-c">#</span> (X_DG, batch_size)</span>
) <span class="pl-k">|&gt;</span> batch

y <span class="pl-k">=</span> <span class="pl-c1">block</span>(x) <span class="pl-k">|&gt;</span> unbatch

<span class="pl-c1">@assert</span> <span class="pl-c1">size</span>(y<span class="pl-k">.</span>ef) <span class="pl-k">==</span> (Y_DE, num_edges, batch_size)
<span class="pl-c1">@assert</span> <span class="pl-c1">size</span>(y<span class="pl-k">.</span>nf) <span class="pl-k">==</span> (Y_DN, num_nodes, batch_size)
<span class="pl-c1">@assert</span> <span class="pl-c1">size</span>(y<span class="pl-k">.</span>gf) <span class="pl-k">==</span> (Y_DG, batch_size)

<span class="pl-c"><span class="pl-c">#</span> Get the output graph edges of the 1st graph</span>
<span class="pl-c1">@assert</span> <span class="pl-c1">size</span>(y<span class="pl-k">.</span>ef[:,:,<span class="pl-c1">1</span>]) <span class="pl-k">==</span> (Y_DE, num_edges)

<span class="pl-c"><span class="pl-c">#</span> Get the output node edges of the 1st graph</span>
<span class="pl-c1">@assert</span> <span class="pl-c1">size</span>(y<span class="pl-k">.</span>nf[:,:,<span class="pl-c1">1</span>]) <span class="pl-k">==</span> (Y_DN, num_nodes)

<span class="pl-c"><span class="pl-c">#</span> Get the output graph edges of the 2nd graph</span>
<span class="pl-c1">@assert</span> <span class="pl-c1">size</span>(y<span class="pl-k">.</span>gf[:,<span class="pl-c1">2</span>]) <span class="pl-k">==</span> (Y_DG,)</pre></div>
<h3 dir="auto"><a id="user-content-example-2-batch-of-graphs-with-different-structures" class="anchor" aria-hidden="true" href="#example-2-batch-of-graphs-with-different-structures"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example 2: Batch of graphs with different structures</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="adj_mat_1 = [
    1 0 1;
    1 1 0;
    0 0 1;
] # Adjacency matrix 1
num_nodes_1 = size(adj_mat_1, 1)
num_edges_1 = length(filter(isone, adj_mat_1))

adj_mat_2 = [
    1 0 1 0;
    1 1 0 1;
    0 0 1 0;
    1 1 0 1;
] # Adjacency matrix 2
num_nodes_2 = size(adj_mat_2, 1)
num_edges_2 = length(filter(isone, adj_mat_2))

edge_features = [
    rand(Float32, X_DE, num_edges_1),
    rand(Float32, X_DE, num_edges_2),
]
node_features = [
    rand(Float32, X_DN, num_nodes_1),
    rand(Float32, X_DN, num_nodes_2),
]
graph_features = nothing # no graph level input features

x = (
    graphs=[adj_mat_1,adj_mat_2],  # Graphs in this batch have different structure
    ef=edge_features, 
    nf=node_features,
    gf=graph_features
) |&gt; batch

y_batched = block(x)
y = y_batched |&gt; unbatch

# Memory-efficient view of features for a batch with different graph structures
@assert size(efview(y_batched, :, :, 1)) == (Y_DE, num_edges_1) # edge features for graph 1
@assert size(nfview(y_batched, :, :, 1)) == (Y_DN, num_nodes_1)  # edge features for graph 1
@assert size(gfview(y_batched, :, 1)) == (Y_DG,) # graph features for graph 1
@assert size(efview(y_batched, :, :, 2)) == (Y_DE, num_edges_2) # edge features for graph 2
@assert size(nfview(y_batched, :, :, 2)) == (Y_DN, num_nodes_2) # node features for graph 2
@assert size(gfview(y_batched, :, 2)) == (Y_DG,) # graph features for graph 2

# Copied array of features (less efficient) for a batch with different graph structures
@assert size(y.ef[1]) == (Y_DE, num_edges_1) # edge features for graph 1
@assert size(y.nf[1]) == (Y_DN, num_nodes_1)  # edge features for graph 1
@assert size(y.gf[1]) == (Y_DG,) # graph features for graph 1
@assert size(y.ef[2]) == (Y_DE, num_edges_2) # edge features for graph 2
@assert size(y.nf[2]) == (Y_DN, num_nodes_2) # node features for graph 2
@assert size(y.gf[2]) == (Y_DG,) # graph features for graph 2"><pre>adj_mat_1 <span class="pl-k">=</span> [
    <span class="pl-c1">1</span> <span class="pl-c1">0</span> <span class="pl-c1">1</span>;
    <span class="pl-c1">1</span> <span class="pl-c1">1</span> <span class="pl-c1">0</span>;
    <span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">1</span>;
] <span class="pl-c"><span class="pl-c">#</span> Adjacency matrix 1</span>
num_nodes_1 <span class="pl-k">=</span> <span class="pl-c1">size</span>(adj_mat_1, <span class="pl-c1">1</span>)
num_edges_1 <span class="pl-k">=</span> <span class="pl-c1">length</span>(<span class="pl-c1">filter</span>(isone, adj_mat_1))

adj_mat_2 <span class="pl-k">=</span> [
    <span class="pl-c1">1</span> <span class="pl-c1">0</span> <span class="pl-c1">1</span> <span class="pl-c1">0</span>;
    <span class="pl-c1">1</span> <span class="pl-c1">1</span> <span class="pl-c1">0</span> <span class="pl-c1">1</span>;
    <span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">1</span> <span class="pl-c1">0</span>;
    <span class="pl-c1">1</span> <span class="pl-c1">1</span> <span class="pl-c1">0</span> <span class="pl-c1">1</span>;
] <span class="pl-c"><span class="pl-c">#</span> Adjacency matrix 2</span>
num_nodes_2 <span class="pl-k">=</span> <span class="pl-c1">size</span>(adj_mat_2, <span class="pl-c1">1</span>)
num_edges_2 <span class="pl-k">=</span> <span class="pl-c1">length</span>(<span class="pl-c1">filter</span>(isone, adj_mat_2))

edge_features <span class="pl-k">=</span> [
    <span class="pl-c1">rand</span>(Float32, X_DE, num_edges_1),
    <span class="pl-c1">rand</span>(Float32, X_DE, num_edges_2),
]
node_features <span class="pl-k">=</span> [
    <span class="pl-c1">rand</span>(Float32, X_DN, num_nodes_1),
    <span class="pl-c1">rand</span>(Float32, X_DN, num_nodes_2),
]
graph_features <span class="pl-k">=</span> <span class="pl-c1">nothing</span> <span class="pl-c"><span class="pl-c">#</span> no graph level input features</span>

x <span class="pl-k">=</span> (
    graphs<span class="pl-k">=</span>[adj_mat_1,adj_mat_2],  <span class="pl-c"><span class="pl-c">#</span> Graphs in this batch have different structure</span>
    ef<span class="pl-k">=</span>edge_features, 
    nf<span class="pl-k">=</span>node_features,
    gf<span class="pl-k">=</span>graph_features
) <span class="pl-k">|&gt;</span> batch

y_batched <span class="pl-k">=</span> <span class="pl-c1">block</span>(x)
y <span class="pl-k">=</span> y_batched <span class="pl-k">|&gt;</span> unbatch

<span class="pl-c"><span class="pl-c">#</span> Memory-efficient view of features for a batch with different graph structures</span>
<span class="pl-c1">@assert</span> <span class="pl-c1">size</span>(<span class="pl-c1">efview</span>(y_batched, :, :, <span class="pl-c1">1</span>)) <span class="pl-k">==</span> (Y_DE, num_edges_1) <span class="pl-c"><span class="pl-c">#</span> edge features for graph 1</span>
<span class="pl-c1">@assert</span> <span class="pl-c1">size</span>(<span class="pl-c1">nfview</span>(y_batched, :, :, <span class="pl-c1">1</span>)) <span class="pl-k">==</span> (Y_DN, num_nodes_1)  <span class="pl-c"><span class="pl-c">#</span> edge features for graph 1</span>
<span class="pl-c1">@assert</span> <span class="pl-c1">size</span>(<span class="pl-c1">gfview</span>(y_batched, :, <span class="pl-c1">1</span>)) <span class="pl-k">==</span> (Y_DG,) <span class="pl-c"><span class="pl-c">#</span> graph features for graph 1</span>
<span class="pl-c1">@assert</span> <span class="pl-c1">size</span>(<span class="pl-c1">efview</span>(y_batched, :, :, <span class="pl-c1">2</span>)) <span class="pl-k">==</span> (Y_DE, num_edges_2) <span class="pl-c"><span class="pl-c">#</span> edge features for graph 2</span>
<span class="pl-c1">@assert</span> <span class="pl-c1">size</span>(<span class="pl-c1">nfview</span>(y_batched, :, :, <span class="pl-c1">2</span>)) <span class="pl-k">==</span> (Y_DN, num_nodes_2) <span class="pl-c"><span class="pl-c">#</span> node features for graph 2</span>
<span class="pl-c1">@assert</span> <span class="pl-c1">size</span>(<span class="pl-c1">gfview</span>(y_batched, :, <span class="pl-c1">2</span>)) <span class="pl-k">==</span> (Y_DG,) <span class="pl-c"><span class="pl-c">#</span> graph features for graph 2</span>

<span class="pl-c"><span class="pl-c">#</span> Copied array of features (less efficient) for a batch with different graph structures</span>
<span class="pl-c1">@assert</span> <span class="pl-c1">size</span>(y<span class="pl-k">.</span>ef[<span class="pl-c1">1</span>]) <span class="pl-k">==</span> (Y_DE, num_edges_1) <span class="pl-c"><span class="pl-c">#</span> edge features for graph 1</span>
<span class="pl-c1">@assert</span> <span class="pl-c1">size</span>(y<span class="pl-k">.</span>nf[<span class="pl-c1">1</span>]) <span class="pl-k">==</span> (Y_DN, num_nodes_1)  <span class="pl-c"><span class="pl-c">#</span> edge features for graph 1</span>
<span class="pl-c1">@assert</span> <span class="pl-c1">size</span>(y<span class="pl-k">.</span>gf[<span class="pl-c1">1</span>]) <span class="pl-k">==</span> (Y_DG,) <span class="pl-c"><span class="pl-c">#</span> graph features for graph 1</span>
<span class="pl-c1">@assert</span> <span class="pl-c1">size</span>(y<span class="pl-k">.</span>ef[<span class="pl-c1">2</span>]) <span class="pl-k">==</span> (Y_DE, num_edges_2) <span class="pl-c"><span class="pl-c">#</span> edge features for graph 2</span>
<span class="pl-c1">@assert</span> <span class="pl-c1">size</span>(y<span class="pl-k">.</span>nf[<span class="pl-c1">2</span>]) <span class="pl-k">==</span> (Y_DN, num_nodes_2) <span class="pl-c"><span class="pl-c">#</span> node features for graph 2</span>
<span class="pl-c1">@assert</span> <span class="pl-c1">size</span>(y<span class="pl-k">.</span>gf[<span class="pl-c1">2</span>]) <span class="pl-k">==</span> (Y_DG,) <span class="pl-c"><span class="pl-c">#</span> graph features for graph 2</span></pre></div>
<h3 dir="auto"><a id="user-content-example-3-encoder---core---decoder-sequential-blocks" class="anchor" aria-hidden="true" href="#example-3-encoder---core---decoder-sequential-blocks"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example 3: Encoder -&gt; Core -&gt; Decoder (sequential blocks)</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="input_dims = (X_DE, X_DN, X_DG)
core_dims = (10, 5, 3)
output_dims = (Y_DE, Y_DN, Y_DG)

struct GNNModel{E,C,D}
    encoder::E
    core_list::C
    decoder::D
end

function GNNModel(; n_cores=2)
    GNNModel(
        GNBlock(input_dims =&gt; core_dims),
        GNCoreList([GNCore(core_dims) for _ in 1:n_cores]),
        GNBlock(core_dims =&gt; output_dims),
    )
end

function (m::GNNModel)(x)
    (m.decoder ∘ m.core_list ∘ m.encoder)(x)
end

m = GNNModel()

adj_mat = [
    1 0 1;
    1 1 0;
    0 0 1;
]

num_nodes = size(adj_mat, 1)
num_edges = length(filter(isone, adj_mat))

batch_size = 2
edge_features = rand(Float32, X_DE, num_edges, batch_size)
node_features = rand(Float32, X_DN, num_nodes, batch_size)
graph_features = nothing # no graph level input features

x = (
    graphs=adj_mat, # All graphs in this batch have same structure
    ef=edge_features, # (X_DE, num_edges, batch_size)
    nf=node_features, # (X_DN, num_nodes, batch_size)
    gf=graph_features # (X_DG, batch_size)
) |&gt; batch

y = block(x) |&gt; unbatch

@assert size(y.ef) == (Y_DE, num_edges, batch_size)
@assert size(y.nf) == (Y_DN, num_nodes, batch_size)
@assert size(y.gf) == (Y_DG, batch_size)"><pre>input_dims <span class="pl-k">=</span> (X_DE, X_DN, X_DG)
core_dims <span class="pl-k">=</span> (<span class="pl-c1">10</span>, <span class="pl-c1">5</span>, <span class="pl-c1">3</span>)
output_dims <span class="pl-k">=</span> (Y_DE, Y_DN, Y_DG)

<span class="pl-k">struct</span> GNNModel{E,C,D}
    encoder<span class="pl-k">::</span><span class="pl-c1">E</span>
    core_list<span class="pl-k">::</span><span class="pl-c1">C</span>
    decoder<span class="pl-k">::</span><span class="pl-c1">D</span>
<span class="pl-k">end</span>

<span class="pl-k">function</span> <span class="pl-en">GNNModel</span>(; n_cores<span class="pl-k">=</span><span class="pl-c1">2</span>)
    <span class="pl-c1">GNNModel</span>(
        <span class="pl-c1">GNBlock</span>(input_dims <span class="pl-k">=&gt;</span> core_dims),
        <span class="pl-c1">GNCoreList</span>([<span class="pl-c1">GNCore</span>(core_dims) <span class="pl-k">for</span> _ <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span>n_cores]),
        <span class="pl-c1">GNBlock</span>(core_dims <span class="pl-k">=&gt;</span> output_dims),
    )
<span class="pl-k">end</span>

<span class="pl-k">function</span> (m<span class="pl-k">::</span><span class="pl-c1">GNNModel</span>)(x)
    (m<span class="pl-k">.</span>decoder <span class="pl-k">∘</span> m<span class="pl-k">.</span>core_list <span class="pl-k">∘</span> m<span class="pl-k">.</span>encoder)(x)
<span class="pl-k">end</span>

m <span class="pl-k">=</span> <span class="pl-c1">GNNModel</span>()

adj_mat <span class="pl-k">=</span> [
    <span class="pl-c1">1</span> <span class="pl-c1">0</span> <span class="pl-c1">1</span>;
    <span class="pl-c1">1</span> <span class="pl-c1">1</span> <span class="pl-c1">0</span>;
    <span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">1</span>;
]

num_nodes <span class="pl-k">=</span> <span class="pl-c1">size</span>(adj_mat, <span class="pl-c1">1</span>)
num_edges <span class="pl-k">=</span> <span class="pl-c1">length</span>(<span class="pl-c1">filter</span>(isone, adj_mat))

batch_size <span class="pl-k">=</span> <span class="pl-c1">2</span>
edge_features <span class="pl-k">=</span> <span class="pl-c1">rand</span>(Float32, X_DE, num_edges, batch_size)
node_features <span class="pl-k">=</span> <span class="pl-c1">rand</span>(Float32, X_DN, num_nodes, batch_size)
graph_features <span class="pl-k">=</span> <span class="pl-c1">nothing</span> <span class="pl-c"><span class="pl-c">#</span> no graph level input features</span>

x <span class="pl-k">=</span> (
    graphs<span class="pl-k">=</span>adj_mat, <span class="pl-c"><span class="pl-c">#</span> All graphs in this batch have same structure</span>
    ef<span class="pl-k">=</span>edge_features, <span class="pl-c"><span class="pl-c">#</span> (X_DE, num_edges, batch_size)</span>
    nf<span class="pl-k">=</span>node_features, <span class="pl-c"><span class="pl-c">#</span> (X_DN, num_nodes, batch_size)</span>
    gf<span class="pl-k">=</span>graph_features <span class="pl-c"><span class="pl-c">#</span> (X_DG, batch_size)</span>
) <span class="pl-k">|&gt;</span> batch

y <span class="pl-k">=</span> <span class="pl-c1">block</span>(x) <span class="pl-k">|&gt;</span> unbatch

<span class="pl-c1">@assert</span> <span class="pl-c1">size</span>(y<span class="pl-k">.</span>ef) <span class="pl-k">==</span> (Y_DE, num_edges, batch_size)
<span class="pl-c1">@assert</span> <span class="pl-c1">size</span>(y<span class="pl-k">.</span>nf) <span class="pl-k">==</span> (Y_DN, num_nodes, batch_size)
<span class="pl-c1">@assert</span> <span class="pl-c1">size</span>(y<span class="pl-k">.</span>gf) <span class="pl-k">==</span> (Y_DG, batch_size)</pre></div>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">The package can be installed with the Julia package manager.
From the Julia REPL, type <code>]</code> to enter the Pkg REPL mode and run:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="pkg&gt; add GraphNets"><pre class="notranslate"><code>pkg&gt; add GraphNets
</code></pre></div>
<p dir="auto">Or, equivalently, via the <code>Pkg</code> API:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; import Pkg; Pkg.add(&quot;GraphNets&quot;)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">import</span> Pkg; Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>GraphNets<span class="pl-pds">"</span></span>)</pre></div>
<h2 dir="auto"><a id="user-content-project-status" class="anchor" aria-hidden="true" href="#project-status"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Project Status</h2>
<p dir="auto">The package is tested against, and being developed for, Julia <code>1.8</code> and above on Linux, macOS, and Windows.</p>
</article></div>