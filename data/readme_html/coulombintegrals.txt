<div id="readme" class="org" data-path="README.org"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-coulombintegralsjl" class="anchor" aria-hidden="true" href="#coulombintegralsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>CoulombIntegrals.jl</h1>
<p dir="auto"><a href="https://github.com/JuliaAtoms/CoulombIntegrals.jl/actions"><img src="https://github.com/JuliaAtoms/CoulombIntegrals.jl/workflows/CI/badge.svg" alt="https://github.com/JuliaAtoms/CoulombIntegrals.jl/workflows/CI/badge.svg" style="max-width: 100%;"></a>
  <a href="https://codecov.io/gh/JuliaAtoms/CoulombIntegrals.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/e30bde7605658fa0744a734305f94968e758fb7d0faaa1943e92b5f84ec9d786/68747470733a2f2f636f6465636f762e696f2f67682f4a756c696141746f6d732f436f756c6f6d62496e74656772616c732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="https://codecov.io/gh/JuliaAtoms/CoulombIntegrals.jl/branch/master/graph/badge.svg" data-canonical-src="https://codecov.io/gh/JuliaAtoms/CoulombIntegrals.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<h1 dir="auto"><a id="user-content-introduction" class="anchor" aria-hidden="true" href="#introduction"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Introduction</h1>
<p dir="auto">Small library to calculate the different integrals that arise from
  Coulomb repulsion. Among these are e.g. the Slater integrals. There
  are different methods of varying speed and accuracy, and the
  intention is to implement at least a few to be able to compare.</p>
<p dir="auto">The library is intended to be independent of basis chosen, and is
  based off <a href="https://github.com/JuliaApproximation/ContinuumArrays.jl">ContinuumArrays.jl</a>. However, at the moment only
  <a href="https://github.com/JuliaApproximation/CompactBases.jl">CompactBases.jl</a> are supported. Moreover, it is only possible to work
  with 1d bases, i.e. tensorial bases are not yet supported.</p>
<h1 dir="auto"><a id="user-content-references" class="anchor" aria-hidden="true" href="#references"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>References</h1>
<ul dir="auto">
  <li>Froese Fischer, C., Brage, T., &amp; Jönsson, P. (1997). Computational
    Atomic Structure : An MCHF Approach. Bristol, UK Philadelphia, Penn:
    Institute of Physics Publ.</li>
  <li>Brage, T., &amp; Fischer, C. F. (1994). Spline-Galerkin Methods for
    Rydberg Series, Including Breit-Pauli Effects. Journal of Physics B:
    Atomic, Molecular and Optical Physics, 27(22),
    5467–5484. <a href="http://dx.doi.org/10.1088/0953-4075/27/22/007" rel="nofollow">http://dx.doi.org/10.1088/0953-4075/27/22/007</a></li>
  <li>Qiu, Y., &amp; Fischer, C. F. (1999). Integration by cell algorithm for
    slater integrals in a spline basis. Journal of Computational
    Physics, 156(2), 257–271. <a href="http://dx.doi.org/10.1006/jcph.1999.6361" rel="nofollow">http://dx.doi.org/10.1006/jcph.1999.6361</a></li>
  <li>McCurdy, C. W., &amp; Martín, F. (2004). Implementation of exterior
    complex scaling in b-splines to solve atomic and molecular collision
    problems. Journal of Physics B: Atomic, Molecular and Optical
    Physics, 37(4),
    917–936. <a href="http://dx.doi.org/10.1088/0953-4075/37/4/017" rel="nofollow">http://dx.doi.org/10.1088/0953-4075/37/4/017</a></li>
  <li>McCurdy, C. W., Baertschy, M., &amp; Rescigno, T. N. (2004). Solving the
    three-body coulomb breakup problem using exterior complex
    scaling. Journal of Physics B: Atomic, Molecular and Optical
    Physics, 37(17),
    137–187. <a href="http://dx.doi.org/10.1088/0953-4075/37/17/r01" rel="nofollow">http://dx.doi.org/10.1088/0953-4075/37/17/r01</a></li>
  <li>Zatsarinny, O. (2006). Bsr: b-spline atomic R-matrix codes. Computer
    Physics Communications, 174(4),
    273–356. <a href="http://dx.doi.org/10.1016/j.cpc.2005.10.006" rel="nofollow">http://dx.doi.org/10.1016/j.cpc.2005.10.006</a></li>
</ul>
</article></div>