<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-timedag" class="anchor" aria-hidden="true" href="#timedag"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>TimeDag</h1>
<p dir="auto"><a href="https://tpgillam.github.io/TimeDag.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://tpgillam.github.io/TimeDag.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/tpgillam/TimeDag.jl/actions"><img src="https://github.com/tpgillam/TimeDag.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/tpgillam/TimeDag.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/adb43afb595f31682ca6a90b7740c40ce3d2381344088f3abd036f3df7f0227e/68747470733a2f2f636f6465636f762e696f2f67682f747067696c6c616d2f54696d654461672e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e7376673f746f6b656e3d4e705841375243427863" alt="Coverage" data-canonical-src="https://codecov.io/gh/tpgillam/TimeDag.jl/branch/main/graph/badge.svg?token=NpXA7RCBxc" style="max-width: 100%;"></a>
<a href="https://github.com/invenia/BlueStyle"><img src="https://camo.githubusercontent.com/c18fbaa52d94d16b90b19701fc90d289b8a5bb920c74c79bab200b14e75420a4/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c75652d3434393564312e737667" alt="Code Style: Blue" data-canonical-src="https://img.shields.io/badge/code%20style-blue-4495d1.svg" style="max-width: 100%;"></a>
<a href="https://github.com/SciML/ColPrac"><img src="https://camo.githubusercontent.com/a6c1efcb19a957860ecb25966a730260b03d6e05380d0c27992ee7f9e3b1feb3/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f436f6c507261632d436f6e7472696275746f72277325323047756964652d626c756576696f6c6574" alt="ColPrac: Contributor's Guide on Collaborative Practices for Community Packages" data-canonical-src="https://img.shields.io/badge/ColPrac-Contributor's%20Guide-blueviolet" style="max-width: 100%;"></a></p>
<p dir="auto">A computational graph for time-series processing.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Dates
using Statistics
using TimeDag

# Create nodes — lazy generators of time-series data.
x = rand(pulse(Hour(2)))
y = rand(pulse(Hour(3)))

# Apply functions to nodes to make new nodes.
z = cov(x, lag(y, 2))

# Evaluate nodes over a time range to pull data through the graph.
evaluate(z, DateTime(2021, 1, 1, 0), DateTime(2021, 1, 1, 15))"><pre><span class="pl-k">using</span> Dates
<span class="pl-k">using</span> Statistics
<span class="pl-k">using</span> TimeDag

<span class="pl-c"><span class="pl-c">#</span> Create nodes — lazy generators of time-series data.</span>
x <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">pulse</span>(<span class="pl-c1">Hour</span>(<span class="pl-c1">2</span>)))
y <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">pulse</span>(<span class="pl-c1">Hour</span>(<span class="pl-c1">3</span>)))

<span class="pl-c"><span class="pl-c">#</span> Apply functions to nodes to make new nodes.</span>
z <span class="pl-k">=</span> <span class="pl-c1">cov</span>(x, <span class="pl-c1">lag</span>(y, <span class="pl-c1">2</span>))

<span class="pl-c"><span class="pl-c">#</span> Evaluate nodes over a time range to pull data through the graph.</span>
<span class="pl-c1">evaluate</span>(z, <span class="pl-c1">DateTime</span>(<span class="pl-c1">2021</span>, <span class="pl-c1">1</span>, <span class="pl-c1">1</span>, <span class="pl-c1">0</span>), <span class="pl-c1">DateTime</span>(<span class="pl-c1">2021</span>, <span class="pl-c1">1</span>, <span class="pl-c1">1</span>, <span class="pl-c1">15</span>))</pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="Block{Float64}(5 knots)
|                time |      value |
|            DateTime |    Float64 |
|---------------------|------------|
| 2021-01-01T08:00:00 |        0.0 |
| 2021-01-01T09:00:00 |  0.0245348 |
| 2021-01-01T10:00:00 |  0.0100269 |
| 2021-01-01T12:00:00 | 0.00183812 |
| 2021-01-01T14:00:00 | 0.00559926 |"><pre class="notranslate"><code>Block{Float64}(5 knots)
|                time |      value |
|            DateTime |    Float64 |
|---------------------|------------|
| 2021-01-01T08:00:00 |        0.0 |
| 2021-01-01T09:00:00 |  0.0245348 |
| 2021-01-01T10:00:00 |  0.0100269 |
| 2021-01-01T12:00:00 | 0.00183812 |
| 2021-01-01T14:00:00 | 0.00559926 |
</code></pre></div>
<p dir="auto">For more information and examples, see the <a href="https://tpgillam.github.io/TimeDag.jl/stable" rel="nofollow">documentation</a>.</p>
</article></div>