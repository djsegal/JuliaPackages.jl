<div id="readme" class="md" data-path="readme.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-callbacks" class="anchor" aria-hidden="true" href="#callbacks"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Callbacks</h1>
<table>
<thead>
<tr>
<th align="left"><strong>Documentation</strong></th>
<th align="left"><strong>Build Status</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td align="left"><a href="https://zenna.github.io/Callbacks.jl/latest" rel="nofollow"><img src="https://camo.githubusercontent.com/57bae07ecd50a99519ad0516d91f4ec8f0f48e12/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6c61746573742d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-latest-blue.svg" style="max-width:100%;"></a></td>
<td align="left"><a href="https://travis-ci.org/zenna/Callbacks.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/80eac175d9db74d7117bc0dc3f94c3d64eb74dfe/68747470733a2f2f7472617669732d63692e6f72672f7a656e6e612f43616c6c6261636b732e6a6c2e7376673f6272616e63683d6d6173746572" alt="" data-canonical-src="https://travis-ci.org/zenna/Callbacks.jl.svg?branch=master" style="max-width:100%;"></a> <a href="http://codecov.io/github/zenna/Callbacks.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/b467cd1c005837ede1e373fa132b8b7fc4f9f8c3/68747470733a2f2f636f6465636f762e696f2f6769746875622f7a656e6e612f43616c6c6261636b732e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="" data-canonical-src="https://codecov.io/github/zenna/Callbacks.jl/coverage.svg?branch=master" style="max-width:100%;"></a></td>
</tr>
</tbody>
</table>
<p>A library of of callbacks useful for monitoring/measuring simulations.</p>
<p>This package is most useful in combination with <a href="http://github.com/zenna/Lens.jl">Lens</a>.</p>
<p>The following example will update a UnicodePlot at every time step.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> Callbacks, Lens

<span class="pl-k">struct</span> Loop <span class="pl-k">end</span>
<span class="pl-k">function</span> <span class="pl-en">simulation</span>()
  x <span class="pl-k">=</span> <span class="pl-c1">0.0</span>
  <span class="pl-k">while</span> <span class="pl-c1">true</span>
    y <span class="pl-k">=</span> <span class="pl-c1">sin</span>(x)
    <span class="pl-c1">lens</span>(Loop, (x <span class="pl-k">=</span> x, y <span class="pl-k">=</span> y))
    x <span class="pl-k">+=</span> <span class="pl-c1">rand</span>()
  <span class="pl-k">end</span>
<span class="pl-k">end</span>

<span class="pl-c1">@leval</span> Loop <span class="pl-k">=&gt;</span> <span class="pl-c1">plotscalar</span>() <span class="pl-c1">simlulation</span>()</pre></div>
<p>This may be a bit more frequent than what I need.
Rather than update every time step, we can update every 1000000.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">@leval</span> Loop <span class="pl-k">=&gt;</span> (<span class="pl-c1">everyn</span>(<span class="pl-c1">1000000</span>) â†’ <span class="pl-c1">plotscalar</span>()) <span class="pl-c1">simulation</span>()</pre></div>
</article></div>