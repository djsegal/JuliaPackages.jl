<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-recursivearraytoolsjl" class="anchor" aria-hidden="true" href="#recursivearraytoolsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>RecursiveArrayTools.jl</h1>
<p><a href="https://travis-ci.org/SciML/RecursiveArrayTools.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/7642faabb0b74cb6713c5a0fec356fb38da29d1c/68747470733a2f2f7472617669732d63692e6f72672f5363694d4c2f5265637572736976654172726179546f6f6c732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/SciML/RecursiveArrayTools.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/ChrisRackauckas/recursivearraytools-jl-r8tdv" rel="nofollow"><img src="https://camo.githubusercontent.com/2de0469c344a528c1c8952e542e5960e4c74c36d/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f69316c7034736b72346e366f373662353f7376673d74727565" alt="Build status" data-canonical-src="https://ci.appveyor.com/api/projects/status/i1lp4skr4n6o76b5?svg=true" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/ChrisRackauckas/RecursiveArrayTools.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/b4b0bccca7546dd76403a7b4b6dab72d19f8f72b/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f43687269735261636b6175636b61732f5265637572736976654172726179546f6f6c732e6a6c2f62616467652e7376673f6272616e63683d6d617374657226736572766963653d676974687562" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/ChrisRackauckas/RecursiveArrayTools.jl/badge.svg?branch=master&amp;service=github" style="max-width:100%;"></a>
<a href="http://codecov.io/github/ChrisRackauckas/RecursiveArrayTools.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/15a7835bbb8ee7d9f0370374f15888f2a874d9d4/687474703a2f2f636f6465636f762e696f2f6769746875622f43687269735261636b6175636b61732f5265637572736976654172726179546f6f6c732e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/ChrisRackauckas/RecursiveArrayTools.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
<p>RecursiveArrayTools.jl is a set of tools for dealing with recursive arrays like
arrays of arrays. The current functionality includes:</p>
<h3><a id="user-content-types" class="anchor" aria-hidden="true" href="#types"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Types</h3>
<h4><a id="user-content-vectorofarray" class="anchor" aria-hidden="true" href="#vectorofarray"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>VectorOfArray</h4>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">VectorOfArray</span>(u<span class="pl-k">::</span><span class="pl-c1">AbstractVector</span>)</pre></div>
<p>A <code>VectorOfArray</code> is an array which has the underlying data structure <code>Vector{AbstractArray{T}}</code>
(but hopefully concretely typed!). This wrapper over such data structures allows one to lazily
act like it's a higher dimensional vector, and easily convert to different forms. The indexing
structure is:</p>
<div class="highlight highlight-source-julia"><pre>A[i] <span class="pl-c"><span class="pl-c">#</span> Returns the ith array in the vector of arrays</span>
A[j,i] <span class="pl-c"><span class="pl-c">#</span> Returns the jth component in the ith array</span>
A[j1,<span class="pl-k">...</span>,jN,i] <span class="pl-c"><span class="pl-c">#</span> Returns the (j1,...,jN) component of the ith array</span></pre></div>
<p>which presents itself as a column-major matrix with the columns being the arrays from the vector.
The <code>AbstractArray</code> interface is implemented, giving access to <code>copy</code>, <code>push</code>, <code>append!</code>, etc. function
which act appropriate. Points to note are:</p>
<ul>
<li>The length is the number of vectors, or <code>length(A.u)</code> where <code>u</code> is the vector of arrays.</li>
<li>Iteration follows the linear index and goes over the vectors</li>
</ul>
<p>Additionally, the <code>convert(Array,VA::AbstractVectorOfArray)</code> function is provided which transforms
the <code>VectorOfArray</code> into a matrix/tensor. Also, <code>vecarr_to_vectors(VA::AbstractVectorOfArray)</code>
returns a vector of the series for each component, that is <code>A[i,:]</code> for each <code>i</code>.
A plot recipe is provided which plots the <code>A[i,:]</code> series.</p>
<h4><a id="user-content-diffeqarray" class="anchor" aria-hidden="true" href="#diffeqarray"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>DiffEqArray</h4>
<p>Related to the <code>VectorOfArray</code> is the <code>DiffEqArray</code></p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">DiffEqArray</span>(u<span class="pl-k">::</span><span class="pl-c1">AbstractVector</span>,t<span class="pl-k">::</span><span class="pl-c1">AbstractVector</span>)</pre></div>
<p>This is a <code>VectorOfArray</code> which stores <code>A.t</code> which matches <code>A.u</code>. This will plot
<code>(A.t[i],A[i,:])</code>. The function <code>tuples(diffeq_arr)</code> returns tuples of <code>(t,u)</code>.</p>
<h4><a id="user-content-arraypartition" class="anchor" aria-hidden="true" href="#arraypartition"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>ArrayPartition</h4>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">ArrayPartition</span>(x<span class="pl-k">::</span><span class="pl-c1">AbstractArray...</span>)</pre></div>
<p>An <code>ArrayPartition</code> <code>A</code> is an array which is made up of different arrays <code>A.x</code>.
These index like a single array, but each subarray may have a different type.
However, broadcast is overloaded to loop in an efficient manner, meaning that
<code>A .+= 2.+B</code> is type-stable in its computations, even if <code>A.x[i]</code> and <code>A.x[j]</code>
do not match types. A full array interface is included for completeness, which
allows this array type to be used in place of a standard array in places where
such a type stable broadcast may be needed. One example is in heterogeneous
differential equations for <a href="https://github.com/JuliaDiffEq/DifferentialEquations.jl">DifferentialEquations.jl</a>.</p>
<p>An <code>ArrayPartition</code> acts like a single array. <code>A[i]</code> indexes through the first
array, then the second, etc. all linearly. But <code>A.x</code> is where the arrays are stored.
Thus for</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> RecursiveArrayTools
A <span class="pl-k">=</span> <span class="pl-c1">ArrayPartition</span>(y,z)</pre></div>
<p>We would have <code>A.x[1]==y</code> and <code>A.x[2]==z</code>. Broadcasting like <code>f.(A)</code> is efficient.</p>
<h3><a id="user-content-functions" class="anchor" aria-hidden="true" href="#functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Functions</h3>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">recursivecopy!</span>(b<span class="pl-k">::</span><span class="pl-c1">Array{T,N}</span>,a<span class="pl-k">::</span><span class="pl-c1">Array{T,N}</span>)</pre></div>
<p>A recursive <code>copy!</code> function. Acts like a <code>deepcopy!</code> on arrays of arrays, but
like <code>copy!</code> on arrays of scalars.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">convert</span>(Array,vecvec)</pre></div>
<p>Technically just a Base fallback that works well. Takes in a vector of arrays,
returns an array of dimension one greater than the original elements.
Works on <code>AbstractVectorOfArray</code>. If the <code>vecvec</code> is ragged, i.e. not all of the
elements are the same, then it uses the size of the first element to determine
the conversion.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">vecvecapply</span>(f<span class="pl-k">::</span><span class="pl-c1">Base.Callable</span>,v)</pre></div>
<p>Calls <code>f</code> on each element of a vecvec <code>v</code>.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">copyat_or_push!</span><span class="pl-c1">{T}</span>(a<span class="pl-k">::</span><span class="pl-c1">AbstractVector{T}</span>,i<span class="pl-k">::</span><span class="pl-c1">Int</span>,x)</pre></div>
<p>If <code>i&lt;length(x)</code>, it's simply a <code>recursivecopy!</code> to the <code>i</code>th element. Otherwise it will
<code>push!</code> a <code>deepcopy</code>.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">recursive_one</span>(a)</pre></div>
<p>Calls <code>one</code> on the bottom container to get the "true element one type"</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">mean</span><span class="pl-c1">{T&lt;:AbstractArray}</span>(vecvec<span class="pl-k">::</span><span class="pl-c1">Vector{T}</span>)
<span class="pl-c1">mean</span><span class="pl-c1">{T&lt;:AbstractArray}</span>(matarr<span class="pl-k">::</span><span class="pl-c1">Matrix{T}</span>,region<span class="pl-k">=</span><span class="pl-c1">0</span>)</pre></div>
<p>Generalized mean functions for vectors of arrays and matrix of arrays.</p>
</article></div>