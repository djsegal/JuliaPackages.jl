<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-the-gr-module-for-julia" class="anchor" aria-hidden="true" href="#the-gr-module-for-julia"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>The GR module for Julia</h1>
<p><a href="LICENSE.md"><img src="https://camo.githubusercontent.com/34c33e2f7f61f9b82750baf175f4aa3260f774ead54e160dd013b7d818992096/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d6f72616e67652e737667" alt="The MIT License" data-canonical-src="https://img.shields.io/badge/license-MIT-orange.svg" style="max-width:100%;"></a>
<a href="https://github.com/jheinen/GR.jl/releases"><img src="https://camo.githubusercontent.com/bfca5ed2fd919ba16fe3d32d370589e95fa02890ca4d8c4d2cf807c1b95dfe68/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f7461672f6a6865696e656e2f47522e6a6c2e737667" alt="GitHub tag" data-canonical-src="https://img.shields.io/github/tag/jheinen/GR.jl.svg" style="max-width:100%;"></a>
<a href="https://travis-ci.org/jheinen/GR.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/52421f536c244fc563a936fe9ff688e46926902571d9ab9b9e23161adc7ae42f/68747470733a2f2f7472617669732d63692e6f72672f6a6865696e656e2f47522e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/jheinen/GR.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://zenodo.org/badge/latestdoi/29193648" rel="nofollow"><img src="https://camo.githubusercontent.com/3e2954360d586f0e80f93bdada4576a8ad5a56f3a9c7a575c67b95f0cc754c49/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f32393139333634382e737667" alt="DOI" data-canonical-src="https://zenodo.org/badge/29193648.svg" style="max-width:100%;"></a>
<a href="https://mybinder.org/v2/gh/jheinen/GR.jl/master" rel="nofollow"><img src="https://camo.githubusercontent.com/581c077bdbc6ca6899c86d0acc6145ae85e9d80e6f805a1071793dbe48917982/68747470733a2f2f6d7962696e6465722e6f72672f62616467655f6c6f676f2e737667" alt="Binder" data-canonical-src="https://mybinder.org/badge_logo.svg" style="max-width:100%;"></a>
<a href="https://gitter.im/jheinen/GR.jl?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge&amp;utm_content=badge" rel="nofollow"><img src="https://camo.githubusercontent.com/5dbac0213da25c445bd11f168587c11a200ba153ef3014e8408e462e410169b3/68747470733a2f2f6261646765732e6769747465722e696d2f4a6f696e253230436861742e737667" alt="Join the chat at https://gitter.im/jheinen/GR.jl" data-canonical-src="https://badges.gitter.im/Join%20Chat.svg" style="max-width:100%;"></a></p>
<p><a href="https://gr-framework.org" rel="nofollow"><img src="https://camo.githubusercontent.com/19d5aa67c6146d9b7ffd03bfcbdecb4e273df86a8bd100ca98043c0f5f70f6b6/68747470733a2f2f67722d6672616d65776f726b2e6f72672f5f696d616765732f73637265656e73686f74732e706e67" alt="Screenshots" data-canonical-src="https://gr-framework.org/_images/screenshots.png" style="max-width:100%;"></a></p>
<p>This module provides a Julia interface to
<a href="http://gr-framework.org/" rel="nofollow">GR</a>, a framework for
visualisation applications.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>From the Julia REPL an up to date version can be installed with:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="Pkg.add(&quot;GR&quot;)
"><pre><code>Pkg.add("GR")
</code></pre></div>
<p>or in the <a href="https://docs.julialang.org/en/v1/stdlib/Pkg/index.html#Getting-Started-1" rel="nofollow">Pkg REPL-mode</a>:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="add GR
"><pre><code>add GR
</code></pre></div>
<p>The Julia package manager will download and install a pre-compiled
run-time (for your hardware architecture), if the GR software is not
already installed in the recommended locations.</p>
<h2><a id="user-content-getting-started" class="anchor" aria-hidden="true" href="#getting-started"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Getting started</h2>
<p>In Julia simply type <code>using GR</code> and begin calling functions
in the <a href="http://gr-framework.org/julia-gr.html" rel="nofollow">GR framework</a> API.</p>
<p>Let's start with a simple example. We generate 10,000 random numbers and
create a histogram. The histogram function automatically chooses an appropriate
number of bins to cover the range of values in x and show the shape of the
underlying distribution.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using GR
histogram(randn(10000))
"><pre><span class="pl-k">using</span> GR
<span class="pl-c1">histogram</span>(<span class="pl-c1">randn</span>(<span class="pl-c1">10000</span>))</pre></div>
<h2><a id="user-content-using-gr-as-backend-for-plotsjl" class="anchor" aria-hidden="true" href="#using-gr-as-backend-for-plotsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Using GR as backend for Plots.jl</h2>
<p><code>Plots</code> is a powerful wrapper around other Julia visualization
"backends", where <code>GR</code> seems to be one of the favorite ones.
To get an impression how complex visualizations may become
easier with <a href="https://juliaplots.github.io" rel="nofollow">Plots</a>, take a look at
<a href="https://docs.juliaplots.org/latest/generated/gr/" rel="nofollow">these</a>  examples.</p>
<p><code>Plots</code> is great on its own, but the real power comes from the ecosystem surrounding it. You can find more information
<a href="https://docs.juliaplots.org/latest/ecosystem/" rel="nofollow">here</a>.</p>
<h2><a id="user-content-alternatives" class="anchor" aria-hidden="true" href="#alternatives"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Alternatives</h2>
<p>Besides <code>GR</code> and <code>Plots</code> there is a nice package called <a href="https://github.com/heliosdrm/GRUtils.jl">GRUtils</a> which provides a user-friendly interface to the low-level <code>GR</code> subsytem, but in a more "Julian" and modular style. Newcomers are recommended to use this package. A detailed documentation can be found <a href="https://heliosdrm.github.io/GRUtils.jl/stable/" rel="nofollow">here</a>.</p>
<p><code>GR</code> and <code>GRUtils</code> are currently still being developed in parallel - but there are plans to merge the two modules in the future.</p>
<h2><a id="user-content-basic-troubleshooting" class="anchor" aria-hidden="true" href="#basic-troubleshooting"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Basic Troubleshooting</h2>
<p>Due to conflicts with already installed GR installations or problems with the download, it can happen that the GR runtime environment is not found. Unfortunately, to classify the problem, one can only proceed step by step:</p>
<ol>
<li>
<p>The first troubleshooting step is to force GR to rebuild. This should reset GR to using GR_jll.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="ENV[&quot;JULIA_DEBUG&quot;] = &quot;GR&quot; # Turn on debug statements    for the GR package
ENV[&quot;GRDIR&quot;] = &quot;&quot; # Force GR to rebuild from default settings
import Pkg; Pkg.build(&quot;GR&quot;)
using GR
"><pre><span class="pl-c1">ENV</span>[<span class="pl-s"><span class="pl-pds">"</span>JULIA_DEBUG<span class="pl-pds">"</span></span>] <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>GR<span class="pl-pds">"</span></span> <span class="pl-c"><span class="pl-c">#</span> Turn on debug statements    for the GR package</span>
<span class="pl-c1">ENV</span>[<span class="pl-s"><span class="pl-pds">"</span>GRDIR<span class="pl-pds">"</span></span>] <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span> <span class="pl-c"><span class="pl-c">#</span> Force GR to rebuild from default settings</span>
<span class="pl-k">import</span> Pkg; Pkg<span class="pl-k">.</span><span class="pl-c1">build</span>(<span class="pl-s"><span class="pl-pds">"</span>GR<span class="pl-pds">"</span></span>)
<span class="pl-k">using</span> GR</pre></div>
<p>Check the generated build.log for errors.</p>
</li>
<li>
<p>The second step is try binaries from GR tarballs which are provided directly by the GR developers as self-contained distributions for selected platforms - independent of the programming language</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="ENV[&quot;JULIA_DEBUG&quot;] = &quot;GR&quot; # Turn on debug statements for the GR package
ENV[&quot;GRDIR&quot;] = &quot;&quot;
ENV[&quot;JULIA_GR_PROVIDER&quot;] = &quot;GR&quot;
# ENV[&quot;JULIA_GR_PROVIDER&quot;] = &quot;BinaryBuilder&quot; # Alternatively, uncomment this
import Pkg; Pkg.build(&quot;GR&quot;)
using GR
"><pre><span class="pl-c1">ENV</span>[<span class="pl-s"><span class="pl-pds">"</span>JULIA_DEBUG<span class="pl-pds">"</span></span>] <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>GR<span class="pl-pds">"</span></span> <span class="pl-c"><span class="pl-c">#</span> Turn on debug statements for the GR package</span>
<span class="pl-c1">ENV</span>[<span class="pl-s"><span class="pl-pds">"</span>GRDIR<span class="pl-pds">"</span></span>] <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>
<span class="pl-c1">ENV</span>[<span class="pl-s"><span class="pl-pds">"</span>JULIA_GR_PROVIDER<span class="pl-pds">"</span></span>] <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>GR<span class="pl-pds">"</span></span>
<span class="pl-c"><span class="pl-c">#</span> ENV["JULIA_GR_PROVIDER"] = "BinaryBuilder" # Alternatively, uncomment this</span>
<span class="pl-k">import</span> Pkg; Pkg<span class="pl-k">.</span><span class="pl-c1">build</span>(<span class="pl-s"><span class="pl-pds">"</span>GR<span class="pl-pds">"</span></span>)
<span class="pl-k">using</span> GR</pre></div>
</li>
<li>
<p>There might be an issue with GR_jll. Check if it can be loaded.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="import Pkg; Pkg.add(&quot;GR_jll&quot;)
using GR_jll
ccall( (:gr_initgr, &quot;libGR&quot;,), Nothing, () )
"><pre><span class="pl-k">import</span> Pkg; Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>GR_jll<span class="pl-pds">"</span></span>)
<span class="pl-k">using</span> GR_jll
<span class="pl-c1">ccall</span>( (<span class="pl-c1">:gr_initgr</span>, <span class="pl-s"><span class="pl-pds">"</span>libGR<span class="pl-pds">"</span></span>,), Nothing, () )</pre></div>
<p>If none of these steps lead to success, please contact the developers.</p>
</li>
</ol>
</article></div>