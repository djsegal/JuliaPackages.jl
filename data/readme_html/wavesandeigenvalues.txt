<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-wavesandeigenvaluesjl" class="anchor" aria-hidden="true" href="#wavesandeigenvaluesjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>WavesAndEigenvalues.jl</h1>
<p dir="auto"><em>Julia package for handling various wave-equations and (non-linear) eigenvalue problems.</em></p>
<table>
<thead>
<tr>
<th align="center"><strong>Documentation</strong></th>
<th align="center"><strong>Build Status</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><a href="https://julholtzdevelopers.github.io/WavesAndEigenvalues.jl/dev/" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a></td>
<td align="center"><a href="https://travis-ci.com/github/JulHoltzDevelopers/WavesAndEigenvalues.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/dab54be58a6b5ed8b81730c031d4c73dd43149b01ea69d654b1529db521e3c25/68747470733a2f2f7472617669732d63692e636f6d2f4a756c486f6c747a446576656c6f706572732f5761766573416e64456967656e76616c7565732e6a6c2e7376673f6272616e63683d6d6173746572" alt="" data-canonical-src="https://travis-ci.com/JulHoltzDevelopers/WavesAndEigenvalues.jl.svg?branch=master" style="max-width: 100%;"></a></td>
</tr>
</tbody>
</table>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">WavesAndEigenvalues can be installed from Julia's official package repository using the built-in package manager. Just type <code>]</code> to enter the package manager and then</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="pkg&gt; add WavesAndEigenvalues"><pre class="notranslate"><code>pkg&gt; add WavesAndEigenvalues
</code></pre></div>
<p dir="auto">or</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; import Pkg; Pkg.add(&quot;WavesAndEigenvalues&quot;)"><pre lang="julia-repl" class="notranslate"><code>julia&gt; import Pkg; Pkg.add("WavesAndEigenvalues")
</code></pre></div>
<p dir="auto">in the REPL and you are good to go.</p>
<h2 dir="auto"><a id="user-content-what-is-wavesandeigenvaluesjl" class="anchor" aria-hidden="true" href="#what-is-wavesandeigenvaluesjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>What is WavesAndEigenvalues.jl?</h2>
<p dir="auto">The package has evolved from academic research in thermoacoustic-stability analysis. But it is designed fairly general. It currently contains three modules, each of which is targeting at one of the main design goals:</p>
<ol dir="auto">
<li>Provide an elaborate interface to define, solve, and perturb nonlinear eigenvalues (<strong>NLEVP</strong>)</li>
<li>Provide a lightweight interface to read unstructured tetrahedral meshes using nastran (<code>*.bdf</code> and <code>*.nas</code>) or the latest gmsh format (<code>*.msh </code>). (<strong>Meshutils</strong>)</li>
<li>Provide a convenient interface for solving the (thermo-acoustic) Helmholtz equation. (<strong>Helmholtz</strong>)</li>
</ol>
<h2 dir="auto"><a id="user-content-nlevp" class="anchor" aria-hidden="true" href="#nlevp"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>NLEVP</h2>
<p dir="auto">Assume you are a <em>literally</em> a rocket scientist and you want to solve an eigenvalue problem like</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="[K+ω*C+ω^2*M+n*exp(-iωτ) F] p = 0"><pre class="notranslate"><code>[K+ω*C+ω^2*M+n*exp(-iωτ) F] p = 0
</code></pre></div>
<p dir="auto">Where <code>K</code>, <code>C</code>, <code>M</code>, and <code>F</code> are some matrices, <code>i</code> the imaginary unit, <code>n</code> and <code>τ</code> some parameters, and <code>ω</code> and <code>p</code> unknown eigenpairs.
Then the <strong>NLEVP</strong> module lets you solve this equation and much more. Actually, any non-linear eigenvalue problem can be solved. Doing science in some other field than rockets or even being a pure mathematician is, thus, no problem at all. Just specify your favourite nonlinear eigenvalue problem and have fun. And <em>fun</em> here includes adjoint-based perturbation of your solution up to arbitrary order!</p>
<h2 dir="auto"><a id="user-content-meshutils" class="anchor" aria-hidden="true" href="#meshutils"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Meshutils</h2>
<p dir="auto">OK, this was theoretical. But you are a real scientist, so you know that the matrices <code>K</code>, <code>C</code>, <code>M</code>, and <code>F</code> are obtained by discretizing some equation using a specific mesh. You do not want to be too limited to simple geometries so unstructured tetrahedral meshing is the method of choice.  <strong>Meshutils</strong> is the module that gives you the tools to read and process such meshes.</p>
<h2 dir="auto"><a id="user-content-helmholtz" class="anchor" aria-hidden="true" href="#helmholtz"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Helmholtz</h2>
<p dir="auto">You are a practitioner? Fine, then eigenvalue theory and mesh handling should not bother your every day work too much.
You just want to read in a mesh, specify some properties (boundary conditions, speed of sound field...), and get a report on
the stability of your configuration? <strong>Helmholtz</strong> is your module! It even tells you how to optimize your design.</p>
</article></div>