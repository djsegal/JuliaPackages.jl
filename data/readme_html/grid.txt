<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-grid-operations-for-the-julia-language" class="anchor" aria-hidden="true" href="#grid-operations-for-the-julia-language"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Grid operations for the Julia language</h1>
<p dir="auto"><a href="http://pkg.julialang.org/?pkg=Grid&amp;ver=release" rel="nofollow"><img src="https://camo.githubusercontent.com/24b34599f96dfe9d17b48a28e8e098eb92095e580dacd23467a9fea825987eee/687474703a2f2f706b672e6a756c69616c616e672e6f72672f6261646765732f477269645f72656c656173652e737667" alt="Grid" data-canonical-src="http://pkg.julialang.org/badges/Grid_release.svg" style="max-width: 100%;"></a>
<a href="https://travis-ci.org/timholy/Grid.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/73ba93f8346b0d597e103388b67f97e1fd52c6099c0021d5fbf83bcc6afa8521/68747470733a2f2f7472617669732d63692e6f72672f74696d686f6c792f477269642e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/timholy/Grid.jl.svg?branch=master" style="max-width: 100%;"></a>
<a href="https://coveralls.io/r/timholy/Grid.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/ab54884d5cc60d4691c863f885b324c76b82336f0c6ab49ed69ea41528027723/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f74696d686f6c792f477269642e6a6c2f62616467652e706e673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/timholy/Grid.jl/badge.png?branch=master" style="max-width: 100%;"></a></p>
<p dir="auto">Continuous objects, such as functions or images, are frequently sampled on a regularly-spaced grid of points. The <strong>Grid</strong> module provides support for common operations on such objects. Currently, the two main operations are <em>interpolation</em> and <em>restriction/prolongation</em>. Restriction and prolongation are frequently used for solving partial differential equations by multigrid methods, but can also be used simply as fast, antialiased methods for two-fold resolution changes (e.g., in computing thumbnails).</p>
<p dir="auto"><strong>Note</strong>: for interpolation, Grid.jl is deprecated in favor of <a href="https://github.com/tlycken/Interpolations.jl">Interpolations</a>. Julia 0.5 is the latest release on which Grid.jl will be installable.</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">Within Julia, use the package manager:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Pkg.add(&quot;Grid&quot;)"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>Grid<span class="pl-pds">"</span></span>)</pre></div>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<p dir="auto">To use the Grid module, begin your code with</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Grid"><pre><span class="pl-k">using</span> Grid</pre></div>
<h3 dir="auto"><a id="user-content-interpolation" class="anchor" aria-hidden="true" href="#interpolation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Interpolation</h3>
<p dir="auto">Let's define a quadratic function in one dimension, and evaluate it on an evenly-spaced grid of 5 points:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="c = 2.3  # center
a = 8.1  # quadratic coefficient
o = 1.6  # vertical offset
qfunc = x -&gt; a*(x-c).^2 + o
xg = Float64[1:5]
y = qfunc(xg)"><pre>c <span class="pl-k">=</span> <span class="pl-c1">2.3</span>  <span class="pl-c"><span class="pl-c">#</span> center</span>
a <span class="pl-k">=</span> <span class="pl-c1">8.1</span>  <span class="pl-c"><span class="pl-c">#</span> quadratic coefficient</span>
o <span class="pl-k">=</span> <span class="pl-c1">1.6</span>  <span class="pl-c"><span class="pl-c">#</span> vertical offset</span>
qfunc <span class="pl-k">=</span> x <span class="pl-k">-&gt;</span> a<span class="pl-k">*</span>(x<span class="pl-k">-</span>c)<span class="pl-k">.</span><span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">+</span> o
xg <span class="pl-k">=</span> Float64[<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">5</span>]
y <span class="pl-k">=</span> <span class="pl-c1">qfunc</span>(xg)</pre></div>
<p dir="auto">From these evaluated points, let's define an <em>interpolation grid</em>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="yi = InterpGrid(y, BCnil, InterpQuadratic)"><pre>yi <span class="pl-k">=</span> <span class="pl-c1">InterpGrid</span>(y, BCnil, InterpQuadratic)</pre></div>
<p dir="auto">The last two arguments will be described later. Note that only <code>y</code> is supplied; as with Julia's arrays, the x-coordinates implicitly start at 1 and increase by 1 with each grid point. It's easy to check that <code>yi[i]</code> is equal to <code>y[i]</code>, within roundoff error:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; y[3]
5.569000000000003

julia&gt; yi[3]
5.569000000000003"><pre>julia<span class="pl-k">&gt;</span> y[<span class="pl-c1">3</span>]
<span class="pl-c1">5.569000000000003</span>

julia<span class="pl-k">&gt;</span> yi[<span class="pl-c1">3</span>]
<span class="pl-c1">5.569000000000003</span></pre></div>
<p dir="auto">However, unlike <code>y</code>, <code>yi</code> can also be evaluated at off-grid points:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; yi[1.9]
2.8959999999999995

julia&gt; qfunc(1.9)
2.8959999999999995"><pre>julia<span class="pl-k">&gt;</span> yi[<span class="pl-c1">1.9</span>]
<span class="pl-c1">2.8959999999999995</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">qfunc</span>(<span class="pl-c1">1.9</span>)
<span class="pl-c1">2.8959999999999995</span></pre></div>
<p dir="auto">It's also possible to evaluate the <em>slope</em> of the interpolation function:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; v,g = valgrad(yi, 4.25)
(32.40025000000001,31.590000000000003)

julia&gt; 2*a*(4.25-c)
31.59"><pre>julia<span class="pl-k">&gt;</span> v,g <span class="pl-k">=</span> <span class="pl-c1">valgrad</span>(yi, <span class="pl-c1">4.25</span>)
(<span class="pl-c1">32.40025000000001</span>,<span class="pl-c1">31.590000000000003</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">2</span><span class="pl-k">*</span>a<span class="pl-k">*</span>(<span class="pl-c1">4.25</span><span class="pl-k">-</span>c)
<span class="pl-c1">31.59</span></pre></div>
<p dir="auto">or the <em>second-order derivative</em> (in multidimensional cases, the <em>Hessian matrix</em>):</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; v,g,h = valgradhess(yi, 4.25)
(32.40025,31.59000000000001,16.200000000000017)

julia&gt; 2a
16.2"><pre>julia<span class="pl-k">&gt;</span> v,g,h <span class="pl-k">=</span> <span class="pl-c1">valgradhess</span>(yi, <span class="pl-c1">4.25</span>)
(<span class="pl-c1">32.40025</span>,<span class="pl-c1">31.59000000000001</span>,<span class="pl-c1">16.200000000000017</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">2</span>a
<span class="pl-c1">16.2</span></pre></div>
<p dir="auto">Interpolation of a function on a (evenly-spaced) grid that is scaled and/or shifted can be created
with <code>CoordInterpGrid</code> that is similar to <code>InterpGrid</code> but takes a range as additional argument:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="x = -1.0:0.1:1.0
z = sin(x)

zi = CoordInterpGrid(x, z, BCnil, InterpQuadratic)

julia&gt; zi[-1.0]
-0.8414709848078965"><pre>x <span class="pl-k">=</span> <span class="pl-k">-</span><span class="pl-c1">1.0</span><span class="pl-k">:</span><span class="pl-c1">0.1</span><span class="pl-k">:</span><span class="pl-c1">1.0</span>
z <span class="pl-k">=</span> <span class="pl-c1">sin</span>(x)

zi <span class="pl-k">=</span> <span class="pl-c1">CoordInterpGrid</span>(x, z, BCnil, InterpQuadratic)

julia<span class="pl-k">&gt;</span> zi[<span class="pl-k">-</span><span class="pl-c1">1.0</span>]
<span class="pl-k">-</span><span class="pl-c1">0.8414709848078965</span></pre></div>
<p dir="auto">While these examples are one-dimensional, you can do interpolation on arrays of any dimensionality. In two or more dimensions <code>CoordInterpGrid</code> expects a tuple of ranges for scaling. For example:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="x = -1.0:0.1:1.0
y = 2.0:0.5:10.0
z_2d = Float64[sin(i+j) for i in x, j in y]

z_2di = CoordInterpGrid((x,y), z_2d, BCnil, InterpQuadratic)

julia&gt; z_2di[0.2, 4.1]
-0.9156696045493824"><pre>x <span class="pl-k">=</span> <span class="pl-k">-</span><span class="pl-c1">1.0</span><span class="pl-k">:</span><span class="pl-c1">0.1</span><span class="pl-k">:</span><span class="pl-c1">1.0</span>
y <span class="pl-k">=</span> <span class="pl-c1">2.0</span><span class="pl-k">:</span><span class="pl-c1">0.5</span><span class="pl-k">:</span><span class="pl-c1">10.0</span>
z_2d <span class="pl-k">=</span> Float64[<span class="pl-c1">sin</span>(i<span class="pl-k">+</span>j) <span class="pl-k">for</span> i <span class="pl-k">in</span> x, j <span class="pl-k">in</span> y]

z_2di <span class="pl-k">=</span> <span class="pl-c1">CoordInterpGrid</span>((x,y), z_2d, BCnil, InterpQuadratic)

julia<span class="pl-k">&gt;</span> z_2di[<span class="pl-c1">0.2</span>, <span class="pl-c1">4.1</span>]
<span class="pl-k">-</span><span class="pl-c1">0.9156696045493824</span></pre></div>
<p dir="auto">The last two parameters of <code>InterpGrid</code> and <code>CoordInterpGrid</code> specify the <em>boundary conditions</em> (what happens near, or beyond, the edges of the grid) and the <em>interpolation order</em>. The choices are specified below:</p>
<table>
  <tbody><tr>
    <td>mode</td> <td>Meaning</td>
  </tr>
  <tr>
    <td>BCnil</td> <td>generates an error when points beyond the grid edge are needed</td>
  </tr>
  <tr>
    <td>BCnan</td> <td>generate NaN when points beyond the grid edge are needed</td>
  </tr>
  <tr>
    <td>BCreflect</td> <td>reflecting boundary conditions</td>
  </tr>
  <tr>
    <td>BCperiodic</td> <td>periodic boundary conditions</td>
  </tr>
  <tr>
    <td>BCnearest</td> <td>when beyond the edge, use the value at the closest interior point</td>
  </tr>
  <tr>
    <td>BCfill</td> <td>produce a specified value when beyond the edge</td>
  </tr>
</tbody></table>
<p dir="auto">Most of these modes are activated by passing them as an argument to <code>InterpGrid</code> or <code>CoordInterpGrid</code> as done in the description above. To activate BCfill, pass the number which is to be produced outside the grid as an argument, instead of the mode "BCfill".</p>
<p dir="auto">The interpolation order can be one of the following:</p>
<table>
  <tbody><tr>
    <td>InterpNearest</td> <td>nearest-neighbor (one-point) interpolation</td>
  </tr>
  <tr>
    <td>InterpLinear</td> <td>piecewise linear (two-point) interpolation (bilinear in two dimensions, etc.)</td>
  </tr>
  <tr>
    <td>InterpQuadratic</td> <td>quadratic (three-point) interpolation</td>
  </tr>
  <tr>
    <td>InterpCubic</td> <td>cubic (four-point) interpolation</td>
  </tr>
</tbody></table>
<p dir="auto">Note that quadratic and cubic interpolation are implemented through <a href="http://en.wikipedia.org/wiki/B-spline" rel="nofollow">B-splines</a> which are technically "non-interpolating", meaning that the coefficients of the interpolating polynomial are not the function values at the grid points. <code>InterpGrid</code> solves the tridiagonal system of equations for you, so in simple cases you do not need to worry about such details. <code>InterpQuadratic</code> is the lowest order of interpolation that yields a continuous gradient, and hence is suitable for use in gradient-based optimization, and <code>InterpCubic</code> is similarly the lowest order of interpolation that yields a continuous Hessian.</p>
<p dir="auto">Note that <code>InterpCubic</code> currently doesn't support all types of boundary conditions; only <code>BCnil</code> and <code>BCnan</code> are supported.</p>
<p dir="auto">In <code>d</code> dimensions, interpolation references <code>n^d</code> grid points, where <code>n</code> is the number of grid points used in one dimension. <code>InterpQuadratic</code> corresponds to <code>n=3</code>, and <code>InterpCubic</code> corresponds to <code>n=4</code>. Consequently, in higher dimensions quadratic interpolation can be a significant savings relative to cubic spline interpolation.</p>
<h4 dir="auto"><a id="user-content-low-level-interface" class="anchor" aria-hidden="true" href="#low-level-interface"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Low-level interface</h4>
<p dir="auto">It should be noted that, in addition to the high-level <code>InterpGrid</code> interface, <strong>Grid</strong> also has lower-level interfaces. Users who need to extract values from multi-valued functions (e.g., an RGB image, which has three colors at each position) can achieve significant savings by using this low-level interface. The main cost of interpolation is computing the coefficients, and by using the low-level interface you can do this just once at each x location and use it for each color channel.</p>
<p dir="auto">Here's one example using the low-level interface, starting from the one-dimensional quadratic example above:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="y = qfunc(xg)
# Do the following once
interp_invert!(y, BCnan, InterpQuadratic)   # solve for generalized interp. coefficients
ic = InterpGridCoefs(y, InterpQuadratic)    # prepare for interpolation on this grid

# Do the following for each evaluation point
set_position(ic, BCnil, true, true, [1.8])  # set position to x=1.8, computes the coefs
v = interp(ic, y)                           # extract the value
# Do this if you want the slope at the same point
set_gradient_coordinate(ic, 1)              # change coefs to calc gradient along coord 1
g = interp(ic, y)                           # extract the gradient
# Do this to evaluate the Hessian at that point
set_hessian_coordinate(ic, 1, 2)            # change coefs to calc hessian element H[1,2], i.e. d2/dxdy
h = interp(ic, y)                           # extract hessian element"><pre>y <span class="pl-k">=</span> <span class="pl-c1">qfunc</span>(xg)
<span class="pl-c"><span class="pl-c">#</span> Do the following once</span>
<span class="pl-c1">interp_invert!</span>(y, BCnan, InterpQuadratic)   <span class="pl-c"><span class="pl-c">#</span> solve for generalized interp. coefficients</span>
ic <span class="pl-k">=</span> <span class="pl-c1">InterpGridCoefs</span>(y, InterpQuadratic)    <span class="pl-c"><span class="pl-c">#</span> prepare for interpolation on this grid</span>

<span class="pl-c"><span class="pl-c">#</span> Do the following for each evaluation point</span>
<span class="pl-c1">set_position</span>(ic, BCnil, <span class="pl-c1">true</span>, <span class="pl-c1">true</span>, [<span class="pl-c1">1.8</span>])  <span class="pl-c"><span class="pl-c">#</span> set position to x=1.8, computes the coefs</span>
v <span class="pl-k">=</span> <span class="pl-c1">interp</span>(ic, y)                           <span class="pl-c"><span class="pl-c">#</span> extract the value</span>
<span class="pl-c"><span class="pl-c">#</span> Do this if you want the slope at the same point</span>
<span class="pl-c1">set_gradient_coordinate</span>(ic, <span class="pl-c1">1</span>)              <span class="pl-c"><span class="pl-c">#</span> change coefs to calc gradient along coord 1</span>
g <span class="pl-k">=</span> <span class="pl-c1">interp</span>(ic, y)                           <span class="pl-c"><span class="pl-c">#</span> extract the gradient</span>
<span class="pl-c"><span class="pl-c">#</span> Do this to evaluate the Hessian at that point</span>
<span class="pl-c1">set_hessian_coordinate</span>(ic, <span class="pl-c1">1</span>, <span class="pl-c1">2</span>)            <span class="pl-c"><span class="pl-c">#</span> change coefs to calc hessian element H[1,2], i.e. d2/dxdy</span>
h <span class="pl-k">=</span> <span class="pl-c1">interp</span>(ic, y)                           <span class="pl-c"><span class="pl-c">#</span> extract hessian element</span></pre></div>
<p dir="auto">If this were an RGB image, you could call <code>interp</code> once for the red color channel, once for the green, and once for the blue, with just one call to <code>set_position</code>.</p>
<p dir="auto">Here is a second example, using a multi-dimensional grid to do multi-value interpolation. Consider that instead of an image, the main data unit of interest is a one-dimensional spectrum, with length <code>Npixels</code>, with three parameters which describe a single spectrum: <code>x1</code>, <code>x2</code>, and <code>x3</code>. If you have a grid of simulations that output spectra for regularly spaced values of these parameters, the following example shows how to interpolate a spectrum with an arbitrary value of <code>x1</code>, <code>x2</code>, and <code>x3</code>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# Our spectra are stored as pixels in a 4d grid
Npixels = 200
grid = rand(10, 10, 10, Npixels)

# For example, the first spectrum (x1=1, x2=1, x3=1), length Npixels, is stored in
# the grid as `raw_spec = grid[:,:,:,1]`
grid_size = size(grid) #(10,10,10,200)
grid_strides = strides(grid) #(1,10,100,1000)

strd = stride(grid, 4) #1000

# solve for the generalized interp. coefficients
# but select only the 1st through 3rd axes for interpolation `dimlist = 1:3`
interp_invert!(grid, BCnil, InterpCubic, 1:3)

# prepare for interpolation on this grid
# but also specify the dimensions and strides of the first three dimensions which we want
# to interpolate over
ic = InterpGridCoefs(eltype(grid), InterpCubic, grid_size[1:3], grid_strides[1:3])

# Set the grid position to the indices corresponding to the x1=1.5, x2=1.5, x3=1.5
# value we wish to interpolate
set_position(ic, BCnil, false, false, [1.5, 1.5, 1.5])

# Iterate over the pixels in the spectrum to interpolate each pixel into a new array
spec = Array(Float64, (Npixels,))
index = 1
for i = 1:Npixels
    spec[i] = interp(ic, grid, index)
    index += strd
end
"><pre><span class="pl-c"><span class="pl-c">#</span> Our spectra are stored as pixels in a 4d grid</span>
Npixels <span class="pl-k">=</span> <span class="pl-c1">200</span>
grid <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">10</span>, <span class="pl-c1">10</span>, <span class="pl-c1">10</span>, Npixels)

<span class="pl-c"><span class="pl-c">#</span> For example, the first spectrum (x1=1, x2=1, x3=1), length Npixels, is stored in</span>
<span class="pl-c"><span class="pl-c">#</span> the grid as `raw_spec = grid[:,:,:,1]`</span>
grid_size <span class="pl-k">=</span> <span class="pl-c1">size</span>(grid) <span class="pl-c"><span class="pl-c">#</span>(10,10,10,200)</span>
grid_strides <span class="pl-k">=</span> <span class="pl-c1">strides</span>(grid) <span class="pl-c"><span class="pl-c">#</span>(1,10,100,1000)</span>

strd <span class="pl-k">=</span> <span class="pl-c1">stride</span>(grid, <span class="pl-c1">4</span>) <span class="pl-c"><span class="pl-c">#</span>1000</span>

<span class="pl-c"><span class="pl-c">#</span> solve for the generalized interp. coefficients</span>
<span class="pl-c"><span class="pl-c">#</span> but select only the 1st through 3rd axes for interpolation `dimlist = 1:3`</span>
<span class="pl-c1">interp_invert!</span>(grid, BCnil, InterpCubic, <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">3</span>)

<span class="pl-c"><span class="pl-c">#</span> prepare for interpolation on this grid</span>
<span class="pl-c"><span class="pl-c">#</span> but also specify the dimensions and strides of the first three dimensions which we want</span>
<span class="pl-c"><span class="pl-c">#</span> to interpolate over</span>
ic <span class="pl-k">=</span> <span class="pl-c1">InterpGridCoefs</span>(<span class="pl-c1">eltype</span>(grid), InterpCubic, grid_size[<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">3</span>], grid_strides[<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">3</span>])

<span class="pl-c"><span class="pl-c">#</span> Set the grid position to the indices corresponding to the x1=1.5, x2=1.5, x3=1.5</span>
<span class="pl-c"><span class="pl-c">#</span> value we wish to interpolate</span>
<span class="pl-c1">set_position</span>(ic, BCnil, <span class="pl-c1">false</span>, <span class="pl-c1">false</span>, [<span class="pl-c1">1.5</span>, <span class="pl-c1">1.5</span>, <span class="pl-c1">1.5</span>])

<span class="pl-c"><span class="pl-c">#</span> Iterate over the pixels in the spectrum to interpolate each pixel into a new array</span>
spec <span class="pl-k">=</span> <span class="pl-c1">Array</span>(Float64, (Npixels,))
index <span class="pl-k">=</span> <span class="pl-c1">1</span>
<span class="pl-k">for</span> i <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span>Npixels
    spec[i] <span class="pl-k">=</span> <span class="pl-c1">interp</span>(ic, grid, index)
    index <span class="pl-k">+=</span> strd
<span class="pl-k">end</span>
</pre></div>
<h3 dir="auto"><a id="user-content-restriction-and-prolongation" class="anchor" aria-hidden="true" href="#restriction-and-prolongation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Restriction and prolongation</h3>
<p dir="auto">Suppose you have an RGB image stored in an array <code>img</code>, where the third dimension is of length 3 and specifies the color. You can create a 2-fold smaller version of the image using <code>restrict</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; size(img)
(1920,1080,3)

julia&gt; imgr = restrict(img, [true,true,false]);

julia&gt; size(imgr)
(961,541,3)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">size</span>(img)
(<span class="pl-c1">1920</span>,<span class="pl-c1">1080</span>,<span class="pl-c1">3</span>)

julia<span class="pl-k">&gt;</span> imgr <span class="pl-k">=</span> <span class="pl-c1">restrict</span>(img, [<span class="pl-c1">true</span>,<span class="pl-c1">true</span>,<span class="pl-c1">false</span>]);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">size</span>(imgr)
(<span class="pl-c1">961</span>,<span class="pl-c1">541</span>,<span class="pl-c1">3</span>)</pre></div>
<p dir="auto">The second argument to <code>restrict</code> specifies which dimensions should be down-sampled.</p>
<p dir="auto">Notice that the sizes are not precisely 2-fold smaller; this is because restriction is technically defined as the adjoint of prolongation, and prolongation interpolates (linearly) at intermediate points. For prolongation, you also have to supply the desired size:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; img2 = prolong(imgr, [size(img)...]);

julia&gt; size(img2)
(1920,1080,3)"><pre>julia<span class="pl-k">&gt;</span> img2 <span class="pl-k">=</span> <span class="pl-c1">prolong</span>(imgr, [<span class="pl-c1">size</span>(img)<span class="pl-k">...</span>]);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">size</span>(img2)
(<span class="pl-c1">1920</span>,<span class="pl-c1">1080</span>,<span class="pl-c1">3</span>)</pre></div>
<p dir="auto">If a given dimension has size <code>n</code>, then the prolonged dimension can be either of size <code>2n-2</code> (if you want it to be even) or <code>2n-1</code> (if you want it to be odd). For odd-sized outputs, the interpolation is at half-grid points; for even-sized outputs, all output values are interpolated, at 1/4 and 3/4 grid points. Having both choices available makes it possible to apply <code>restrict</code> to arrays of any size.</p>
<p dir="auto">If you plan multiple rounds of restriction, you can get the "schedule" of sizes from the function <code>restrict_size</code>:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; pyramid = restrict_size(size(img), [true true true true; true true true true; false false false false])
3x4 Int64 Array:
 961  481  241  121
 541  271  136   69
   3    3    3    3"><pre class="notranslate"><code>julia&gt; pyramid = restrict_size(size(img), [true true true true; true true true true; false false false false])
3x4 Int64 Array:
 961  481  241  121
 541  271  136   69
   3    3    3    3
</code></pre></div>
<p dir="auto">Restriction and prolongation are extremely fast operations, because the coefficients can be specified in advance. For floating-point data types, this implementation makes heavy use of the outstanding performance of BLAS's <code>axpy</code>.</p>
<h2 dir="auto"><a id="user-content-credits" class="anchor" aria-hidden="true" href="#credits"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Credits</h2>
<p dir="auto">The main authors of this package are Tim Holy, Tomas Lycken, Simon Byrne, and Ron Rock.</p>
</article></div>