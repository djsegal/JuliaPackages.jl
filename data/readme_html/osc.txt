<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h2 dir="auto"><a id="user-content-oscjl----implementation-of-the-open-sound-control-serialization-format" class="anchor" aria-hidden="true" href="#oscjl----implementation-of-the-open-sound-control-serialization-format"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>OSC.jl -- Implementation of the Open Sound Control Serialization Format</h2>
<p dir="auto"><a href="https://travis-ci.org/fundamental/OSC.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/b0a740063e152b89ee0233f881812fd3571479741148bf35364280ff5bdf5004/68747470733a2f2f7472617669732d63692e6f72672f66756e64616d656e74616c2f4f53432e6a6c2e706e67" alt="Build Status" data-canonical-src="https://travis-ci.org/fundamental/OSC.jl.png" style="max-width: 100%;"></a></p>
<p dir="auto"><em>OSC.jl</em> provides an implementation of the OSC binary format commonly
used in networked control of musical applications.
The code is based on a relatively straightforward translation of
librtosc(<a href="https://github.com/fundamental/rtosc">https://github.com/fundamental/rtosc</a>)</p>
<h2 dir="auto"><a id="user-content-sample-usage" class="anchor" aria-hidden="true" href="#sample-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Sample Usage</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="i = Int32(          42         ); #integer
f = Float32(        0.25;      ); #float
s =                &quot;string&quot;       #string
b =                 s;            #blob
h = Int64(          -125;      ); #long integer
t = UInt64(         22412;     ); #timetag
d = Float64(        0.125;     ); #double
S =                 &quot;Symbol&quot;      #symbol
c = Char(           'J'        ); #character
r = Int32(          0x12345678 ); #RGBA
m = Array{UInt8,1}( [0x12,0x23,   #midi
                     0x34,0x45]);
#true
#false
#nil
#inf

msg = OscMsg(&quot;/dest&quot;, &quot;[ifsbhtdScrmTFNI]&quot;, i,f,s,b,h,t,d,S,c,r,m);
show(msg)"><pre>i <span class="pl-k">=</span> <span class="pl-c1">Int32</span>(          <span class="pl-c1">42</span>         ); <span class="pl-c"><span class="pl-c">#</span>integer</span>
f <span class="pl-k">=</span> <span class="pl-c1">Float32</span>(        <span class="pl-c1">0.25</span>;      ); <span class="pl-c"><span class="pl-c">#</span>float</span>
s <span class="pl-k">=</span>                <span class="pl-s"><span class="pl-pds">"</span>string<span class="pl-pds">"</span></span>       <span class="pl-c"><span class="pl-c">#</span>string</span>
b <span class="pl-k">=</span>                 s;            <span class="pl-c"><span class="pl-c">#</span>blob</span>
h <span class="pl-k">=</span> <span class="pl-c1">Int64</span>(          <span class="pl-k">-</span><span class="pl-c1">125</span>;      ); <span class="pl-c"><span class="pl-c">#</span>long integer</span>
t <span class="pl-k">=</span> <span class="pl-c1">UInt64</span>(         <span class="pl-c1">22412</span>;     ); <span class="pl-c"><span class="pl-c">#</span>timetag</span>
d <span class="pl-k">=</span> <span class="pl-c1">Float64</span>(        <span class="pl-c1">0.125</span>;     ); <span class="pl-c"><span class="pl-c">#</span>double</span>
S <span class="pl-k">=</span>                 <span class="pl-s"><span class="pl-pds">"</span>Symbol<span class="pl-pds">"</span></span>      <span class="pl-c"><span class="pl-c">#</span>symbol</span>
c <span class="pl-k">=</span> <span class="pl-c1">Char</span>(           <span class="pl-s"><span class="pl-pds">'</span>J<span class="pl-pds">'</span></span>        ); <span class="pl-c"><span class="pl-c">#</span>character</span>
r <span class="pl-k">=</span> <span class="pl-c1">Int32</span>(          <span class="pl-c1">0x12345678</span> ); <span class="pl-c"><span class="pl-c">#</span>RGBA</span>
m <span class="pl-k">=</span> <span class="pl-c1">Array</span><span class="pl-c1">{UInt8,1}</span>( [<span class="pl-c1">0x12</span>,<span class="pl-c1">0x23</span>,   <span class="pl-c"><span class="pl-c">#</span>midi</span>
                     <span class="pl-c1">0x34</span>,<span class="pl-c1">0x45</span>]);
<span class="pl-c"><span class="pl-c">#</span>true</span>
<span class="pl-c"><span class="pl-c">#</span>false</span>
<span class="pl-c"><span class="pl-c">#</span>nil</span>
<span class="pl-c"><span class="pl-c">#</span>inf</span>

msg <span class="pl-k">=</span> <span class="pl-c1">OscMsg</span>(<span class="pl-s"><span class="pl-pds">"</span>/dest<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>[ifsbhtdScrmTFNI]<span class="pl-pds">"</span></span>, i,f,s,b,h,t,d,S,c,r,m);
<span class="pl-c1">show</span>(msg)</pre></div>
<p dir="auto">This produces:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="OSC Message to /dest
    Arguments:
    # 1 i:Int32 - 42
    # 2 f:Float32 - 0.25
    # 3 s:String - string
    # 4 b:Blob - Uint8[115 116 114 105 110 103]
    # 5 h:Int32 - -125
    # 6 t:Uint64 - 22412
    # 7 d:Float64 - 0.125
    # 8 S:Symbol - Symbol
    # 9 c:Char - J
    #10 r:RBG - 305419896
    #11 m:Midi - Uint8[18 35 52 69]
    #12 T: - true
    #13 F: - false
    #14 N:Nothing - nothing
    #15 I:Inf - nothing"><pre class="notranslate"><code>OSC Message to /dest
    Arguments:
    # 1 i:Int32 - 42
    # 2 f:Float32 - 0.25
    # 3 s:String - string
    # 4 b:Blob - Uint8[115 116 114 105 110 103]
    # 5 h:Int32 - -125
    # 6 t:Uint64 - 22412
    # 7 d:Float64 - 0.125
    # 8 S:Symbol - Symbol
    # 9 c:Char - J
    #10 r:RBG - 305419896
    #11 m:Midi - Uint8[18 35 52 69]
    #12 T: - true
    #13 F: - false
    #14 N:Nothing - nothing
    #15 I:Inf - nothing
</code></pre></div>
<p dir="auto">Accessing the fields is done via the [] operator.</p>
<h2 dir="auto"><a id="user-content-networked-usage" class="anchor" aria-hidden="true" href="#networked-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Networked Usage</h2>
<p dir="auto">Most of the usage is going to involve sending the OSC messages over UDP to
another program.
To do this, first start two julia instances.
In the first one run</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Sockets
using OpenSoundControl
sock2 = UDPSocket()
bind(sock2, ip&quot;127.0.0.1&quot;, 7777)
msg2 = OscMsg(recv(sock2))
show(msg2)"><pre><span class="pl-k">using</span> Sockets
<span class="pl-k">using</span> OpenSoundControl
sock2 <span class="pl-k">=</span> <span class="pl-c1">UDPSocket</span>()
<span class="pl-c1">bind</span>(sock2, <span class="pl-s"><span class="pl-pds"><span class="pl-c1">ip</span>"</span>127.0.0.1<span class="pl-pds">"</span></span>, <span class="pl-c1">7777</span>)
msg2 <span class="pl-k">=</span> <span class="pl-c1">OscMsg</span>(<span class="pl-c1">recv</span>(sock2))
<span class="pl-c1">show</span>(msg2)</pre></div>
<p dir="auto">The first instance will now wait for the second to send an OSC message.
To send the an OSC message, in the second window type.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Sockets
using OpenSoundControl
sock1 = UDPSocket()
msg1 = OpenSoundControl.message(&quot;/hello world&quot;, &quot;sSif&quot;, &quot;strings&quot;, &quot;symbols&quot;, Int32(234), Float32(2.3))
send(sock1, ip&quot;127.0.0.1&quot;, 7777, msg1.data)"><pre><span class="pl-k">using</span> Sockets
<span class="pl-k">using</span> OpenSoundControl
sock1 <span class="pl-k">=</span> <span class="pl-c1">UDPSocket</span>()
msg1 <span class="pl-k">=</span> OpenSoundControl<span class="pl-k">.</span><span class="pl-c1">message</span>(<span class="pl-s"><span class="pl-pds">"</span>/hello world<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>sSif<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>strings<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>symbols<span class="pl-pds">"</span></span>, <span class="pl-c1">Int32</span>(<span class="pl-c1">234</span>), <span class="pl-c1">Float32</span>(<span class="pl-c1">2.3</span>))
<span class="pl-c1">send</span>(sock1, <span class="pl-s"><span class="pl-pds"><span class="pl-c1">ip</span>"</span>127.0.0.1<span class="pl-pds">"</span></span>, <span class="pl-c1">7777</span>, msg1<span class="pl-k">.</span>data)</pre></div>
<h2 dir="auto"><a id="user-content-todo" class="anchor" aria-hidden="true" href="#todo"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>TODO</h2>
<ul dir="auto">
<li>Port bundle message support from librtosc</li>
</ul>
<h2 dir="auto"><a id="user-content-license" class="anchor" aria-hidden="true" href="#license"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>LICENSE</h2>
<p dir="auto">OSC.jl is licensed under the LGPLv3 License</p>
</article></div>