<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-btcparserjl" class="anchor" aria-hidden="true" href="#btcparserjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>BTCParser.jl</h1>
<p dir="auto"><a href="https://travis-ci.org/gdkrmr/BTCParser.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/3151bc7a9251d745e03c2a7bb4092269bf82e7746b2d985d3cf6227e20651634/68747470733a2f2f7472617669732d63692e6f72672f67646b726d722f4254435061727365722e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/gdkrmr/BTCParser.jl.svg?branch=master" style="max-width: 100%;"></a>
<a href="http://codecov.io/github/gdkrmr/BTCParser.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/2893db9e4a3f0e53e90ca68543c41fedd10abb8a2c64c6d00660ca987ba40756/687474703a2f2f636f6465636f762e696f2f6769746875622f67646b726d722f4254435061727365722e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/gdkrmr/BTCParser.jl/coverage.svg?branch=master" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-about" class="anchor" aria-hidden="true" href="#about"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>About</h2>
<p dir="auto">A pure Julia implementation of a <a href="https://bitcoincore.org/" rel="nofollow">Bitcoin</a> blockchain
parser. Before using <code>BTCParser.jl</code> you must install a bitcoin client and
download the entire blockchain.</p>
<p dir="auto">Bitcoin core should save the blockchain data into <code>$HOME/.bitcoin/blocks</code>,
<code>BTCParser.jl</code> will look there by default. You can change this directory by
setting the environmental variable <code>BTCPARSER_BLOCK_DIR</code>.</p>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<p dir="auto">Read the chain:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using BTCParser

# this takes ~2-3 minues on a SATA SSD
chain = make_chain()"><pre><span class="pl-k">using</span> BTCParser

<span class="pl-c"><span class="pl-c">#</span> this takes ~2-3 minues on a SATA SSD</span>
chain <span class="pl-k">=</span> <span class="pl-c1">make_chain</span>()</pre></div>
<p dir="auto">Extract the Genesis Block</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="genesis_block = Block(chain[0])"><pre>genesis_block <span class="pl-k">=</span> <span class="pl-c1">Block</span>(chain[<span class="pl-c1">0</span>])</pre></div>
<p dir="auto">Extract Block at height <code>h</code></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="block = Block(chain[h])"><pre>block <span class="pl-k">=</span> <span class="pl-c1">Block</span>(chain[h])</pre></div>
<p dir="auto">chain indexing is 0-based to match the numbering used by the bitcoin core client,
if you require 1-based indexing, use <code>chain.data[h]</code>.</p>
<p dir="auto">Get the hash of a block</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="double_sha256(genesis_block)
double_sha256(chain[0])"><pre><span class="pl-c1">double_sha256</span>(genesis_block)
<span class="pl-c1">double_sha256</span>(chain[<span class="pl-c1">0</span>])</pre></div>
<p dir="auto">Get the header of a block</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Header(chain[1])
Header(genesis_block)"><pre><span class="pl-c1">Header</span>(chain[<span class="pl-c1">1</span>])
<span class="pl-c1">Header</span>(genesis_block)</pre></div>
<p dir="auto">Access transactions</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="genesis_tx = genesis_block.transactions[1]"><pre>genesis_tx <span class="pl-k">=</span> genesis_block<span class="pl-k">.</span>transactions[<span class="pl-c1">1</span>]</pre></div>
<p dir="auto">Hashing transactions</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="double_sha256(genesis_tx)"><pre><span class="pl-c1">double_sha256</span>(genesis_tx)</pre></div>
<p dir="auto">Update an existing chain (in case the bitcoin client is running in the background)</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="chain = make_chain(chain)"><pre>chain <span class="pl-k">=</span> <span class="pl-c1">make_chain</span>(chain)</pre></div>
<h2 dir="auto"><a id="user-content-problems" class="anchor" aria-hidden="true" href="#problems"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Problems</h2>
<ul dir="auto">
<li>Currently only tested on <code>amd64</code> architectures under Linux
<ul dir="auto">
<li>many of the internals are endian-dependent and may not work on other
architectures.</li>
<li>Paths are different under Windows/MacOS.</li>
</ul>
</li>
<li>Testing requires a working copy of the Bitcoin blockchain (200GB) and therefore
testing on travis is difficult.</li>
<li>Grep the code for "TODO" for more stuff.</li>
<li>Please report any issues or improvement proposals
<a href="https://github.com/gdkrmr/BTCParser.jl/issues">here</a>.</li>
</ul>
</article></div>