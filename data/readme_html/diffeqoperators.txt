<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-diffeqoperatorsjl" class="anchor" aria-hidden="true" href="#diffeqoperatorsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>DiffEqOperators.jl</h1>
<p><a href="https://github.com/SciML/DiffEqOperators.jl/actions?query=workflow%3ACI"><img src="https://github.com/SciML/DiffEqOperators.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width:100%;"></a>
<a href="https://buildkite.com/julialang/diffeqoperators-dot-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/884f0931dd7e94d90399a54d570a2c57685364fcd7cbf00f82abe6b305f7cbcc/68747470733a2f2f62616467652e6275696c646b6974652e636f6d2f30626339616361623763663631346235353661373034636665383432326135653361623063666266336462656338336166372e737667" alt="Build status" data-canonical-src="https://badge.buildkite.com/0bc9acab7cf614b556a704cfe8422a5e3ab0cfbf3dbec83af7.svg" style="max-width:100%;"></a>
<a href="http://diffeqoperators.sciml.ai/stable/" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="http://diffeqoperators.sciml.ai/dev/" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a></p>
<p>DiffEqOperators.jl is a package for finite difference discretization of partial
differential equations. It serves two purposes:</p>
<ol>
<li>Building fast lazy operators for high order non-uniform finite differences.</li>
<li>Automated finite difference discretization of symbolically-defined PDEs.</li>
</ol>
<h4><a id="user-content-note-2-is-still-a-work-in-progress" class="anchor" aria-hidden="true" href="#note-2-is-still-a-work-in-progress"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Note: (2) is still a work in progress!</h4>
<p>For the operators, both centered and
<a href="https://en.wikipedia.org/wiki/Upwind_scheme" rel="nofollow">upwind</a> operators are provided,
for domains of any dimension, arbitrarily spaced grids, and for any order of accuracy.
The cases of 1, 2, and 3 dimensions with an evenly spaced grid are optimized with a
convolution routine from <code>NNlib.jl</code>. Care is taken to give efficiency by avoiding
unnecessary allocations, using purpose-built stencil compilers, allowing GPUs
and parallelism, etc. Any operator can be concretized as an <code>Array</code>, a
<code>BandedMatrix</code> or a sparse matrix.</p>
<h2><a id="user-content-documentation" class="anchor" aria-hidden="true" href="#documentation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Documentation</h2>
<p>For information on using the package,
<a href="https://diffeqoperators.sciml.ai/stable/" rel="nofollow">see the stable documentation</a>. Use the
<a href="https://diffeqoperators.sciml.ai/dev/" rel="nofollow">in-development documentation</a> for the version of
the documentation which contains the unreleased features.</p>
<h2><a id="user-content-example-1-automated-finite-difference-solution-to-the-heat-equation" class="anchor" aria-hidden="true" href="#example-1-automated-finite-difference-solution-to-the-heat-equation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example 1: Automated Finite Difference Solution to the Heat Equation</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using OrdinaryDiffEq, ModelingToolkit, DiffEqOperators

# Parameters, variables, and derivatives
@parameters t x
@variables u(..)
@derivatives Dt'~t
@derivatives Dxx''~x

# 1D PDE and boundary conditions
eq  = Dt(u(t,x)) ~ Dxx(u(t,x))
bcs = [u(0,x) ~ cos(x),
       u(t,0) ~ exp(-t),
       u(t,Float64(pi)) ~ -exp(-t)]

# Space and time domains
domains = [t ∈ IntervalDomain(0.0,1.0),
           x ∈ IntervalDomain(0.0,Float64(pi))]

# PDE system
pdesys = PDESystem(eq,bcs,domains,[t,x],[u])

# Method of lines discretization
dx = 0.1
order = 2
discretization = MOLFiniteDifference(dx,order)

# Convert the PDE problem into an ODE problem
prob = discretize(pdesys,discretization)

# Solve ODE problem
sol = solve(prob,Tsit5(),saveat=0.1)
"><pre><span class="pl-k">using</span> OrdinaryDiffEq, ModelingToolkit, DiffEqOperators

<span class="pl-c"><span class="pl-c">#</span> Parameters, variables, and derivatives</span>
<span class="pl-c1">@parameters</span> t x
<span class="pl-c1">@variables</span> <span class="pl-c1">u</span>(<span class="pl-k">..</span>)
<span class="pl-c1">@derivatives</span> Dt<span class="pl-k">'</span><span class="pl-k">~</span>t
<span class="pl-c1">@derivatives</span> Dxx<span class="pl-k">''</span><span class="pl-k">~</span>x

<span class="pl-c"><span class="pl-c">#</span> 1D PDE and boundary conditions</span>
eq  <span class="pl-k">=</span> <span class="pl-c1">Dt</span>(<span class="pl-c1">u</span>(t,x)) <span class="pl-k">~</span> <span class="pl-c1">Dxx</span>(<span class="pl-c1">u</span>(t,x))
bcs <span class="pl-k">=</span> [<span class="pl-c1">u</span>(<span class="pl-c1">0</span>,x) <span class="pl-k">~</span> <span class="pl-c1">cos</span>(x),
       <span class="pl-c1">u</span>(t,<span class="pl-c1">0</span>) <span class="pl-k">~</span> <span class="pl-c1">exp</span>(<span class="pl-k">-</span>t),
       <span class="pl-c1">u</span>(t,<span class="pl-c1">Float64</span>(<span class="pl-c1">pi</span>)) <span class="pl-k">~</span> <span class="pl-k">-</span><span class="pl-c1">exp</span>(<span class="pl-k">-</span>t)]

<span class="pl-c"><span class="pl-c">#</span> Space and time domains</span>
domains <span class="pl-k">=</span> [t <span class="pl-k">∈</span> <span class="pl-c1">IntervalDomain</span>(<span class="pl-c1">0.0</span>,<span class="pl-c1">1.0</span>),
           x <span class="pl-k">∈</span> <span class="pl-c1">IntervalDomain</span>(<span class="pl-c1">0.0</span>,<span class="pl-c1">Float64</span>(<span class="pl-c1">pi</span>))]

<span class="pl-c"><span class="pl-c">#</span> PDE system</span>
pdesys <span class="pl-k">=</span> <span class="pl-c1">PDESystem</span>(eq,bcs,domains,[t,x],[u])

<span class="pl-c"><span class="pl-c">#</span> Method of lines discretization</span>
dx <span class="pl-k">=</span> <span class="pl-c1">0.1</span>
order <span class="pl-k">=</span> <span class="pl-c1">2</span>
discretization <span class="pl-k">=</span> <span class="pl-c1">MOLFiniteDifference</span>(dx,order)

<span class="pl-c"><span class="pl-c">#</span> Convert the PDE problem into an ODE problem</span>
prob <span class="pl-k">=</span> <span class="pl-c1">discretize</span>(pdesys,discretization)

<span class="pl-c"><span class="pl-c">#</span> Solve ODE problem</span>
sol <span class="pl-k">=</span> <span class="pl-c1">solve</span>(prob,<span class="pl-c1">Tsit5</span>(),saveat<span class="pl-k">=</span><span class="pl-c1">0.1</span>)</pre></div>
<h2><a id="user-content-example-2-finite-difference-operator-solution-for-the-heat-equation" class="anchor" aria-hidden="true" href="#example-2-finite-difference-operator-solution-for-the-heat-equation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example 2: Finite Difference Operator Solution for the Heat Equation</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using DiffEqOperators, OrdinaryDiffEq

# # Heat Equation
# This example demonstrates how to combine `OrdinaryDiffEq` with `DiffEqOperators` to solve a time-dependent PDE.
# We consider the heat equation on the unit interval, with Dirichlet boundary conditions:
# ∂ₜu = Δu
# u(x=0,t)  = a
# u(x=1,t)  = b
# u(x, t=0) = u₀(x)
#
# For `a = b = 0` and `u₀(x) = sin(2πx)` a solution is given by:
u_analytic(x, t) = sin(2*π*x) * exp(-t*(2*π)^2)

nknots = 100
h = 1.0/(nknots+1)
knots = range(h, step=h, length=nknots)
ord_deriv = 2
ord_approx = 2

const Δ = CenteredDifference(ord_deriv, ord_approx, h, nknots)
const bc = Dirichlet0BC(Float64)

t0 = 0.0
t1 = 0.03
u0 = u_analytic.(knots, t0)

step(u,p,t) = Δ*bc*u
prob = ODEProblem(step, u0, (t0, t1))
alg = KenCarp4()
sol = solve(prob, alg)
"><pre><span class="pl-k">using</span> DiffEqOperators, OrdinaryDiffEq

<span class="pl-c"><span class="pl-c">#</span> # Heat Equation</span>
<span class="pl-c"><span class="pl-c">#</span> This example demonstrates how to combine `OrdinaryDiffEq` with `DiffEqOperators` to solve a time-dependent PDE.</span>
<span class="pl-c"><span class="pl-c">#</span> We consider the heat equation on the unit interval, with Dirichlet boundary conditions:</span>
<span class="pl-c"><span class="pl-c">#</span> ∂ₜu = Δu</span>
<span class="pl-c"><span class="pl-c">#</span> u(x=0,t)  = a</span>
<span class="pl-c"><span class="pl-c">#</span> u(x=1,t)  = b</span>
<span class="pl-c"><span class="pl-c">#</span> u(x, t=0) = u₀(x)</span>
<span class="pl-c"><span class="pl-c">#</span></span>
<span class="pl-c"><span class="pl-c">#</span> For `a = b = 0` and `u₀(x) = sin(2πx)` a solution is given by:</span>
<span class="pl-en">u_analytic</span>(x, t) <span class="pl-k">=</span> <span class="pl-c1">sin</span>(<span class="pl-c1">2</span><span class="pl-k">*</span>π<span class="pl-k">*</span>x) <span class="pl-k">*</span> <span class="pl-c1">exp</span>(<span class="pl-k">-</span>t<span class="pl-k">*</span>(<span class="pl-c1">2</span><span class="pl-k">*</span>π)<span class="pl-k">^</span><span class="pl-c1">2</span>)

nknots <span class="pl-k">=</span> <span class="pl-c1">100</span>
h <span class="pl-k">=</span> <span class="pl-c1">1.0</span><span class="pl-k">/</span>(nknots<span class="pl-k">+</span><span class="pl-c1">1</span>)
knots <span class="pl-k">=</span> <span class="pl-c1">range</span>(h, step<span class="pl-k">=</span>h, length<span class="pl-k">=</span>nknots)
ord_deriv <span class="pl-k">=</span> <span class="pl-c1">2</span>
ord_approx <span class="pl-k">=</span> <span class="pl-c1">2</span>

<span class="pl-k">const</span> Δ <span class="pl-k">=</span> <span class="pl-c1">CenteredDifference</span>(ord_deriv, ord_approx, h, nknots)
<span class="pl-k">const</span> bc <span class="pl-k">=</span> <span class="pl-c1">Dirichlet0BC</span>(Float64)

t0 <span class="pl-k">=</span> <span class="pl-c1">0.0</span>
t1 <span class="pl-k">=</span> <span class="pl-c1">0.03</span>
u0 <span class="pl-k">=</span> <span class="pl-c1">u_analytic</span>.(knots, t0)

<span class="pl-en">step</span>(u,p,t) <span class="pl-k">=</span> Δ<span class="pl-k">*</span>bc<span class="pl-k">*</span>u
prob <span class="pl-k">=</span> <span class="pl-c1">ODEProblem</span>(step, u0, (t0, t1))
alg <span class="pl-k">=</span> <span class="pl-c1">KenCarp4</span>()
sol <span class="pl-k">=</span> <span class="pl-c1">solve</span>(prob, alg)</pre></div>
</article></div>