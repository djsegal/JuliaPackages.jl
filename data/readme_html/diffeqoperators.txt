<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-diffeqoperatorsjl" class="anchor" aria-hidden="true" href="#diffeqoperatorsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>DiffEqOperators.jl</h1>
<p><a href="https://travis-ci.org/JuliaDiffEq/DiffEqOperators.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/65d8eb822655f19fad25685a9fee9784c4dae410/68747470733a2f2f7472617669732d63692e6f72672f4a756c69614469666645712f4469666645714f70657261746f72732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaDiffEq/DiffEqOperators.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/ChrisRackauckas/diffeqoperators-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/0c8edf0c67306992ca0e0fe7bf0dcc1b857454c7/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f6175396b6e76363375396f68316169653f7376673d74727565" alt="Build status" data-canonical-src="https://ci.appveyor.com/api/projects/status/au9knv63u9oh1aie?svg=true" style="max-width:100%;"></a>
<a href="https://gitlab.com/juliadiffeq/DiffEqOperators-jl/pipelines" rel="nofollow"><img src="https://camo.githubusercontent.com/a5aff3721bab4cc9d520c89f40e0424047d7cc3c/68747470733a2f2f6769746c61622e636f6d2f6a756c69616469666665712f4469666645714f70657261746f72732d6a6c2f6261646765732f6d61737465722f706970656c696e652e737667" alt="GitlabCI" data-canonical-src="https://gitlab.com/juliadiffeq/DiffEqOperators-jl/badges/master/pipeline.svg" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/JuliaDiffEq/DiffEqOperators.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/8ca51d8d62772d60b91e453ef42e7bc2d7e826ee/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f4a756c69614469666645712f4469666645714f70657261746f72732e6a6c2f62616467652e7376673f6272616e63683d6d617374657226736572766963653d676974687562" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/JuliaDiffEq/DiffEqOperators.jl/badge.svg?branch=master&amp;service=github" style="max-width:100%;"></a>
<a href="http://codecov.io/github/JuliaDiffEq/DiffEqOperators.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/6d1f70dffe2a679538c49bc6e14859d87f0e1a0d/687474703a2f2f636f6465636f762e696f2f6769746875622f73686976696e392f4469666645714f70657261746f72732e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/shivin9/DiffEqOperators.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
<p>Construct high order finite-difference operators to discretize a partial
differential equation and its boundary conditions by the method of
lines.  This reduces it to a system of ordinary differential
equations that can be solved by <a href="https://juliadiffeq.org/" rel="nofollow"><code>DifferentialEquations.jl</code></a>.</p>
<p>Both centered and <a href="https://en.wikipedia.org/wiki/Upwind_scheme" rel="nofollow">upwind</a>
operators are provided, for domains of any dimension, arbitrarily
spaced grids, and for any order of accuracy.  The cases of 1, 2 and
3 dimensions with an evenly spaced grid are optimized with a
convolution routine from <code>NNlib.jl</code>.  Care is taken to avoid
unnecessary allocations.</p>
<p>Any operator can be concretised as an <code>Array</code>, a <code>BandedMatrix</code> or
a sparse matrix.</p>
<h2><a id="user-content-the-simplest-case" class="anchor" aria-hidden="true" href="#the-simplest-case"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>The simplest case</h2>
<p>As shown in the figure, the operators act on a set of samples
<code>f_j = f(x_j)</code> for a function <code>f</code> at a grid of points <code>x_j</code>.  The
grid has <code>n</code> interior points at <code>x_j = jh</code> for <code>j = 1</code> to <code>n</code>, and 2
boundary points at <code>x_0 = 0</code> and <code>x_{n+1} = (n+1) h</code>.  The input to
the numerical operators is a vector <code>u = [f_1, f_2, …, f_N]</code>, and
they output a vector of sampled derivatives <code>du ≈ [f'(x_1), f'(x_2), …, f'(x_N)]</code>, or a higher order derivative as requested.</p>
<p>A numerical derivative operator <code>D</code> of order <code>m</code> can be constructed
for this grid with <code>D = CenteredDifference(1, m, h, n)</code>  The argument
<code>1</code> indicates that this is a first derivative.  Order <code>m</code> means
that the operator is exact up to rounding when <code>f</code> is a polynomial
of degree <code>m</code> or lower.</p>
<p>The derivative operator <code>D</code> is used along with a boundary condition
operator <code>Q</code>, to compute derivatives at the interior points of the
grid.  A simple boundary condition <code>f(x_0) = f(x_n+1) = 0</code> is
constructed with <code>Q = Dirichlet0BC(eltype(u))</code>.</p>
<p>Given these definitions, the derivatives are calculated as if the
operators <code>D</code> and <code>Q</code> were matrices.  <code>du = D*Q*u</code>.  This is an
abuse of notation!  The particular <code>Q</code> in this example is a linear
operator, but in general boundary conditions are affine operators.
They have the form <code>Q(x) = M*x + c</code>, where <code>M</code> is a matrix and <code>c</code>
is a constant vector.  As a consequence, <code>Q</code> can not be concretized
to a matrix.</p>
<p><a target="_blank" rel="noopener noreferrer" href="action.svg"><img src="action.svg" alt="Actions of DiffEqOperators on interior points and ghost points" style="max-width:100%;"></a></p>
<p>The operator <code>D</code> works by interpolating a polynomial of degree <code>m</code>
through <code>m+1</code> adjacent points on the grid.  Near the middle of the
grid, the derivative is approximated at <code>x_j</code> by interpolating a
polynomial of order <code>m</code> with <code>x_j</code> at its centre.  To define a
order-<code>m</code> polynomial, values are required at <code>m+1</code> points.  When
<code>x_j</code> is too close to the boundary for that to fit, the polynomial
is interpolated through the leftmost or rightmost <code>m+1</code> points,
including two “ghost” points that <code>Q</code> appends on the boundaries.
The numerical derivatives are linear combinations of the values
through which the polynomials are interpolated.  The vectors of
coefficients in these linear combinations are called “stencils”.
Because <code>D</code> takes values at the ghost points and returns values at
the interior points, it is a <code>n×(n+2)</code> matrix.</p>
<p>The boundary condition operator <code>Q</code>
acts as an <code>(n+2)×n</code> matrix.  The output <code>Q*u</code> is a vector of values
on the <code>n</code> interior and the 2 boundary points, <code>[a, f(x_1), …, f(x_N), b]</code>.
The interior points take the values of <code>u</code>.  The values <code>a</code> and <code>b</code> are
samples at “ghost” points on the grid boundaries.  As shown, these
values are assigned so that an interpolated polynomial <code>P(x)</code> satisfies
the left hand boundary condition, and <code>Q(x)</code> satisfies the right hand
boundary condition.  The boundary conditions provided by the
library are precisely those for which the values <code>a</code> and <code>b</code> are affine
functions of the interior values <code>f_j</code>, so that <code>Q</code> is an affine operator.</p>
<h2><a id="user-content-higher-dimensions" class="anchor" aria-hidden="true" href="#higher-dimensions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Higher dimensions</h2>
<p>In one dimension, <code>u</code> is naturally stored as a <code>Vector</code>,
and the derivative and boundary condition operators are similar
to matrices.</p>
<p>In two dimensions, the values <code>f(x_j)</code> are naturally stored as a
matrix.  Taking derivatives along the downwards axis is easy, because
matrices act columnwise.  Horizontal derivatives can be taken by
transposing the matrices.  The derivative along the rightward axis
is <code>(D*F')' = F*D' </code>.  This is easy to code, but less easy to read
for those who haven't seen it before.</p>
<p>When a function has three or more arguments, its values are naturally
stored in a higher dimensional array.  Julia's multiplication
operator is only defined for <code>Vector</code> and <code>Matrix</code>, so applying an
operator matrix to these arrays would require a complicated and
error prone series of <code>reshape</code> and axis permutation functions.</p>
<p>Therefore the types of derivative and boundary condition operators
are parameterised by the axis along which the operator acts.  With
derivative operators, the axis is supplied as a type parameter.
The simple case <code>CenteredDifference(…)</code> is equivalent to
<code>CenteredDifference{1}(…)</code>, row-wise derivatives are taken by
<code>CenteredDifference{2}(…)</code>, sheet-wise by <code>CenteredDifference{3}(…)</code>,
and along the <code>N</code>th axis by <code>CenteredDifference{N}(…)</code>.</p>
<p>Boundary conditions are more complicated.  See <code>@doc MultiDimBC</code>
for how they are supposed to work in multiple dimensions.  They
don't currently work that way.</p>
<h2><a id="user-content-constructors" class="anchor" aria-hidden="true" href="#constructors"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Constructors</h2>
<p>The constructors are as follows:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">CenteredDifference</span><span class="pl-c1">{N}</span>(derivative_order<span class="pl-k">::</span><span class="pl-c1">Int</span>,
                      approximation_order<span class="pl-k">::</span><span class="pl-c1">Int</span>, dx,
                      len<span class="pl-k">::</span><span class="pl-c1">Int</span>, coeff_func<span class="pl-k">=</span><span class="pl-c1">nothing</span>)

<span class="pl-c1">UpwindDifference</span><span class="pl-c1">{N}</span>(derivative_order<span class="pl-k">::</span><span class="pl-c1">Int</span>,
                    approximation_order<span class="pl-k">::</span><span class="pl-c1">Int</span>, dx
                    len<span class="pl-k">::</span><span class="pl-c1">Int</span>, coeff_func<span class="pl-k">=</span><span class="pl-c1">nothing</span>)</pre></div>
<p>The arguments are:</p>
<ul>
<li><code>N</code>: The directional dimension of the discretization. If <code>N</code> is not given,
it is assumed to be 1, i.e. differencing occurs along columns.</li>
<li><code>derivative_order</code>: the order of the derivative to discretize.</li>
<li><code>approximation_order</code>: the order of the discretization in terms of O(dx^order).</li>
<li><code>dx</code>: the spacing of the discretization. If <code>dx</code> is a <code>Number</code>, the operator
is a uniform discretization. If <code>dx</code> is an array, then the operator is a
non-uniform discretization.</li>
<li><code>len</code>: the length of the discretization in the direction of the operator.</li>
<li><code>coeff_func</code>: An operational argument for a coefficient function <code>f(du,u,p,t)</code>
which sets the coefficients of the operator. If <code>coeff_func</code> is a <code>Number</code>
then the coefficients are set to be constant with that number. If <code>coeff_func</code>
is an <code>AbstractArray</code> with length matching <code>len</code>, then the coefficients are
constant but spatially dependent.</li>
</ul>
<p><code>N</code>-dimensional derivative operators need to act against a value of at least
<code>N</code> dimensions.</p>
<h3><a id="user-content-derivative-operator-actions" class="anchor" aria-hidden="true" href="#derivative-operator-actions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Derivative Operator Actions</h3>
<p>These operators are lazy, meaning the memory is not allocated. Similarly, the
operator actions <code>*</code> can be performed without ever building the operator
matrices. Additionally, <code>mul!(y,L,x)</code> can be performed for non-allocating
applications of the operator.</p>
<h3><a id="user-content-concretizations" class="anchor" aria-hidden="true" href="#concretizations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Concretizations</h3>
<p>The following concretizations are provided:</p>
<ul>
<li><code>Array</code></li>
<li><code>SparseMatrixCSC</code></li>
<li><code>BandedMatrix</code></li>
<li><code>BlockBandedMatrix</code></li>
</ul>
<p>Additionally, the function <code>sparse</code> is overloaded to give the most efficient
matrix type for a given operator. For one-dimensional derivatives this is a
<code>BandedMatrix</code>, while for higher dimensional operators this is a <code>BlockBandedMatrix</code>.
The concretizations are made to act on <code>vec(u)</code>.</p>
<p>A contraction operator concretizes to an ordinary matrix, no matter which dimension
the contraction acts along, by doing the kroncker product formulation. I.e., the
action of the built matrix will match the action on <code>vec(u)</code>.</p>
<h2><a id="user-content-boundary-condition-operators" class="anchor" aria-hidden="true" href="#boundary-condition-operators"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Boundary Condition Operators</h2>
<p>Boundary conditions are implemented through a ghost node approach. The discretized
values <code>u</code> should be the interior of the domain so that, for the boundary value
operator <code>Q</code>, <code>Q*u</code> is the discretization on the closure of the domain. By
using it like this, <code>L*Q*u</code> is the <code>NxN</code> operator which satisfies the boundary
conditions.</p>
<h3><a id="user-content-periodic-boundary-conditions" class="anchor" aria-hidden="true" href="#periodic-boundary-conditions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Periodic Boundary Conditions</h3>
<p>The constructor <code>PeriodicBC</code> provides the periodic boundary condition operator.</p>
<h3><a id="user-content-robin-boundary-conditions" class="anchor" aria-hidden="true" href="#robin-boundary-conditions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Robin Boundary Conditions</h3>
<p>The variables in l are <code>[αl, βl, γl]</code>, and correspond to a BC of the form
<code>al*u(0) + bl*u'(0) = cl</code>, and similarly <code>r</code> for the right boundary
<code>ar*u(N) + br*u'(N) = cl</code>.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">RobinBC</span>(l<span class="pl-k">::</span><span class="pl-c1">AbstractArray{T}</span>, r<span class="pl-k">::</span><span class="pl-c1">AbstractArray{T}</span>, dx<span class="pl-k">::</span><span class="pl-c1">AbstractArray{T}</span>, order <span class="pl-k">=</span> <span class="pl-c1">one</span>(T))</pre></div>
<p>Additionally, the following helpers exist for the Neumann <code>u'(0) = α</code> and
Dirichlet <code>u(0) = α</code> cases.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">DirichletBC</span>(αl<span class="pl-k">::</span><span class="pl-c1">T</span>, αr<span class="pl-k">::</span><span class="pl-c1">T</span>)
<span class="pl-en">Dirichlet0BC</span>(T<span class="pl-k">::</span><span class="pl-c1">Type</span>) <span class="pl-k">=</span> <span class="pl-c1">DirichletBC</span>(<span class="pl-c1">zero</span>(T), <span class="pl-c1">zero</span>(T))</pre></div>
<p>This fixes <code>u = αl</code> at the first point of the grid, and <code>u = αr</code> at the last point.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">Neumann0BC</span>(dx<span class="pl-k">::</span><span class="pl-c1">Union{AbstractVector{T}, T}</span>, order <span class="pl-k">=</span> <span class="pl-c1">1</span>)
<span class="pl-c1">NeumannBC</span>(α<span class="pl-k">::</span><span class="pl-c1">AbstractVector{T}</span>, dx<span class="pl-k">::</span><span class="pl-c1">AbstractVector{T}</span>, order <span class="pl-k">=</span> <span class="pl-c1">1</span>)</pre></div>
<h3><a id="user-content-general-boundary-conditions" class="anchor" aria-hidden="true" href="#general-boundary-conditions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>General Boundary Conditions</h3>
<p>Implements a generalization of the Robin boundary condition, where α is a vector
of coefficients. Represents a condition of the form
α[1] + α[2]u[0] + α[3]u'[0] + α[4]u''[0]+... = 0</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">GeneralBC</span>(αl<span class="pl-k">::</span><span class="pl-c1">AbstractArray{T}</span>, αr<span class="pl-k">::</span><span class="pl-c1">AbstractArray{T}</span>, dx<span class="pl-k">::</span><span class="pl-c1">AbstractArray{T}</span>, order <span class="pl-k">=</span> <span class="pl-c1">1</span>)</pre></div>
<h3><a id="user-content-operator-actions" class="anchor" aria-hidden="true" href="#operator-actions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Operator Actions</h3>
<p>The boundary condition operators act lazily by appending the appropriate values
to the end of the array, building the ghost-point extended version for the
derivative operator to act on. This utilizes special array types to not require
copying the interior data.</p>
<h3><a id="user-content-concretizations-1" class="anchor" aria-hidden="true" href="#concretizations-1"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Concretizations</h3>
<p>The following concretizations are provided:</p>
<ul>
<li><code>Array</code></li>
<li><code>SparseMatrixCSC</code></li>
</ul>
<p>Additionally, the function <code>sparse</code> is overloaded to give the most efficient
matrix type for a given operator. For these operators it's <code>SparseMatrixCSC</code>.
The concretizations are made to act on <code>vec(u)</code>.</p>
<h2><a id="user-content-ghostderivative-operators" class="anchor" aria-hidden="true" href="#ghostderivative-operators"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>GhostDerivative Operators</h2>
<p>When <code>L</code> is a <code>DerivativeOperator</code> and <code>Q</code> is a boundary condition operator,
<code>L*Q</code> produces a <code>GhostDerivative</code> operator which is the composition of the
two operations.</p>
<h3><a id="user-content-concretizations-2" class="anchor" aria-hidden="true" href="#concretizations-2"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Concretizations</h3>
<p>The following concretizations are provided:</p>
<ul>
<li><code>Array</code></li>
<li><code>SparseMatrixCSC</code></li>
<li><code>BandedMatrix</code></li>
</ul>
<p>Additionally, the function <code>sparse</code> is overloaded to give the most efficient
matrix type for a given operator. For these operators it's <code>BandedMatrix</code> unless
the boundary conditions are <code>PeriodicBC</code>, in which case it's <code>SparseMatrixCSC</code>.
The concretizations are made to act on <code>vec(u)</code>.</p>
<h2><a id="user-content-matrix-free-operators" class="anchor" aria-hidden="true" href="#matrix-free-operators"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Matrix-Free Operators</h2>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">MatrixFreeOperator</span>(f<span class="pl-k">::</span><span class="pl-c1">F</span>, args<span class="pl-k">::</span><span class="pl-c1">N</span>;
                   size<span class="pl-k">=</span><span class="pl-c1">nothing</span>, opnorm<span class="pl-k">=</span><span class="pl-c1">true</span>, ishermitian<span class="pl-k">=</span><span class="pl-c1">false</span>) <span class="pl-k">where</span> {F,N}</pre></div>
<p>A <code>MatrixFreeOperator</code> is a linear operator <code>A*u</code> where the action of <code>A</code> is
explicitly defined by an in-place function <code>f(du, u, p, t)</code>.</p>
<h2><a id="user-content-jacobian-vector-product-operators" class="anchor" aria-hidden="true" href="#jacobian-vector-product-operators"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Jacobian-Vector Product Operators</h2>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">JacVecOperator</span><span class="pl-c1">{T}</span>(f,u<span class="pl-k">::</span><span class="pl-c1">AbstractArray</span>,p<span class="pl-k">=</span><span class="pl-c1">nothing</span>,t<span class="pl-k">::</span><span class="pl-c1">Union{Nothing,Number}</span><span class="pl-k">=</span><span class="pl-c1">nothing</span>;autodiff<span class="pl-k">=</span><span class="pl-c1">true</span>,ishermitian<span class="pl-k">=</span><span class="pl-c1">false</span>,opnorm<span class="pl-k">=</span><span class="pl-c1">true</span>)</pre></div>
<p>The <code>JacVecOperator</code> is a linear operator <code>J*v</code> where <code>J</code> acts like <code>df/du</code>
for some function <code>f(u,p,t)</code>. For in-place operations <code>mul!(w,J,v)</code>, <code>f</code>
is an in-place function <code>f(du,u,p,t)</code>.</p>
<h2><a id="user-content-operator-compositions" class="anchor" aria-hidden="true" href="#operator-compositions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Operator Compositions</h2>
<p>Multiplying two DiffEqOperators will build a <code>DiffEqOperatorComposition</code>, while
adding two DiffEqOperators will build a <code>DiffEqOperatorCombination</code>. Multiplying
a DiffEqOperator by a scalar will produce a <code>DiffEqScaledOperator</code>. All
will inherit the appropriate action.</p>
<h3><a id="user-content-efficiency-of-composed-operator-actions" class="anchor" aria-hidden="true" href="#efficiency-of-composed-operator-actions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Efficiency of Composed Operator Actions</h3>
<p>Composed operator actions utilize NNLib.jl in order to do cache-efficient
convolution operations in higher dimensional combinations.</p>
</article></div>