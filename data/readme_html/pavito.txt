<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p><a href="https://github.com/jump-dev/Pavito.jl/actions"><img src="https://github.com/jump-dev/Pavito.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/jump-dev/Pavito.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/318803b16d2e87365ed011ce3313aa52d2a7ff4144fe3ad5ee08f0de9d54ae8e/68747470733a2f2f636f6465636f762e696f2f67682f6a756d702d6465762f50617669746f2e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/jump-dev/Pavito.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<h1><a id="user-content-pavito" class="anchor" aria-hidden="true" href="#pavito"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Pavito</h1>
<p>Pavito is a <strong>mixed-integer convex programming</strong> (MICP) solver package written in <a href="http://julialang.org/" rel="nofollow">Julia</a>. MICP problems are convex except for restrictions that some variables take binary or integer values.</p>
<p>Pavito solves MICP problems by constructing sequential polyhedral outer-approximations of the convex feasible set, similar to <a href="https://projects.coin-or.org/Bonmin" rel="nofollow">Bonmin</a>. Pavito accesses state-of-the-art MILP solvers and continuous, derivative-based nonlinear programming (NLP) solvers through the MathOptInterface interface.</p>
<p>For algorithms that use a conic solver instead of an NLP solver, use <a href="https://github.com/JuliaOpt/Pajarito.jl">Pajarito</a>. Pajarito is a robust mixed-integer conic solver that can handle such established problem classes as mixed-integer second-order cone programming (MISOCP) and mixed-integer semidefinite programming (MISDP).</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>Pavito can be installed through the Julia package manager:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt; ]
pkg&gt; add Pavito
"><pre><code>julia&gt; ]
pkg&gt; add Pavito
</code></pre></div>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<p>There are several convenient ways to model MICPs in Julia and access Pavito:</p>
<table>
<thead>
<tr>
<th></th>
<th><a href="https://github.com/jump-dev/JuMP.jl">JuMP</a></th>
<th><a href="https://github.com/jump-dev/Convex.jl">Convex.jl</a></th>
<th><a href="https://github.com/jump-dev/MathOptInterface.jl">MathOptInterface</a></th>
</tr>
</thead>
<tbody>
<tr>
<td>NLP model</td>
<td><a href="https://jump.dev/JuMP.jl/dev/nlp/" rel="nofollow">X</a></td>
<td></td>
<td><a href="https://jump.dev/MathOptInterface.jl/dev/apireference/#Nonlinear-programming-(NLP)-1" rel="nofollow">X</a></td>
</tr>
<tr>
<td>Conic model</td>
<td>X</td>
<td>X</td>
<td>X</td>
</tr>
</tbody>
</table>
<p>JuMP and Convex.jl are algebraic modeling interfaces, while MathOptInterface is a lower-level interface for providing input in raw callback or matrix form.
Convex.jl is perhaps the most user-friendly way to provide input in conic form, since it transparently handles conversion of algebraic expressions.
JuMP supports general nonlinear smooth functions, e.g. by using <code>@NLconstraint</code>. JuMP also supports conic modeling, but requires cones to be explicitly specified, e.g. by using <code>@constraint(model, [t; x] in SecondOrderCone())</code> for second-order cone constraints.</p>
<h2><a id="user-content-mip-and-continuous-solvers" class="anchor" aria-hidden="true" href="#mip-and-continuous-solvers"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>MIP and continuous solvers</h2>
<p>The algorithm implemented by Pavito itself is relatively simple, and most of the hard work is performed by the MILP solver and the NLP solver.
<strong>The performance of Pavito depends on these two types of solvers.</strong></p>
<p>The mixed-integer solver is specified by using the <code>mip_solver</code> option to <code>Pavito.Optimizer</code>, e.g. <code>optimizer_with_attributes(Pavito.Optimizer, "mip_solver" =&gt; CPLEX.Optimizer)</code>.
You must first load the Julia package which provides the mixed-integer solver, e.g. <code>using CPLEX</code>.
The continuous derivative-based nonlinear solver (e.g. <a href="https://projects.coin-or.org/Ipopt" rel="nofollow">Ipopt</a> or <a href="https://www.artelys.com/solvers/knitro/" rel="nofollow">KNITRO</a>) is specified by using the <code>cont_solver</code> option, e.g. <code>optimizer_with_attributes(Pavito.Optimizer, "cont_solver" =&gt; Ipopt.Optimizer)</code>.</p>
<p>MIP and continuous solver parameters must be specified through their corresponding Julia interfaces.
For example, to turn off the output of Ipopt solver, use <code>"cont_solver" =&gt; optimizer_with_attributes(Ipopt.Optimizer, "print_level" =&gt; 0)</code>.</p>
<h2><a id="user-content-pavito-solver-options" class="anchor" aria-hidden="true" href="#pavito-solver-options"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Pavito solver options</h2>
<p>The following optimizer attributes can set to a <code>Pavito.Optimizer</code> to modify its behavior:</p>
<ul>
<li><code>log_level::Int</code> Verbosity flag: 0 for quiet, higher for basic solve info</li>
<li><code>timeout::Float64</code> Time limit for algorithm (in seconds)</li>
<li><code>rel_gap::Float64</code> Relative optimality gap termination condition</li>
<li><code>mip_solver_drives::Bool</code> Let MILP solver manage convergence ("branch and cut")</li>
<li><code>mip_solver::MathOptInterface.AbstractMathProgSolver</code> MILP solver</li>
<li><code>cont_solver::MathOptInterface.AbstractMathProgSolver</code> Continuous NLP solver</li>
</ul>
<p><strong>Pavito is not yet numerically robust and may require tuning of parameters to improve convergence.</strong>
If the default parameters don't work for you, please let us know.
For improved Pavito performance, MILP solver integrality tolerance and feasibility tolerances should typically be tightened, for example to <code>1e-8</code>.</p>
<h2><a id="user-content-bug-reports-and-support" class="anchor" aria-hidden="true" href="#bug-reports-and-support"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Bug reports and support</h2>
<p>Please report any issues via the Github <strong><a href="https://github.com/jump-dev/Pavito.jl/issues">issue tracker</a></strong>. All types of issues are welcome and encouraged; this includes bug reports, documentation typos, feature requests, etc. The <strong><a href="https://discourse.julialang.org/c/domain/opt" rel="nofollow">Optimization (Mathematical)</a></strong> category on Discourse is appropriate for general discussion.</p>
</article></div>