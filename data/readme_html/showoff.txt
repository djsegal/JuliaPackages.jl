<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-showoff" class="anchor" aria-hidden="true" href="#showoff"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Showoff</h1>
<p><a href="https://travis-ci.org/JuliaGraphics/Showoff.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/8e6d8101ebf34afd05056c56da9e13d0fa402cc94d18eda3e49e5fc85c5ae28b/68747470733a2f2f7472617669732d63692e6f72672f4a756c696147726170686963732f53686f776f66662e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaGraphics/Showoff.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/JuliaGraphics/Showoff.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/f4c39984ce0f92f288be095f2ffe08d366e0d14cd4ee0cf5dff07f8f9e572370/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f4a756c696147726170686963732f53686f776f66662e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/JuliaGraphics/Showoff.jl/badge.svg?branch=master" style="max-width:100%;"></a></p>
<p>Showoff provides an interface for consistently formatting an array of n things,
e.g. numbers, dates, unitful values. It's used in Gadfly, Plots and Makie to
label axes and keys.</p>
<p>It defines a function called <code>showoff</code> that takes an <code>AbstractArray</code> of some
type, and returns an array of strings of the same length.</p>
<p>If you want your type to look nice when plotted, just define a <code>showoff</code>
function. Here's an example.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Showoff

struct Percent
    value::Float64
end

function Showoff.showoff(xs::AbstractArray{Percent})
    return [string(x, &quot;%&quot;) for x in showoff([x.value for x in xs])]
end
"><pre><span class="pl-k">using</span> Showoff

<span class="pl-k">struct</span> Percent
    value<span class="pl-k">::</span><span class="pl-c1">Float64</span>
<span class="pl-k">end</span>

<span class="pl-k">function</span> Showoff<span class="pl-k">.</span><span class="pl-en">showoff</span>(xs<span class="pl-k">::</span><span class="pl-c1">AbstractArray{Percent}</span>)
    <span class="pl-k">return</span> [<span class="pl-c1">string</span>(x, <span class="pl-s"><span class="pl-pds">"</span>%<span class="pl-pds">"</span></span>) <span class="pl-k">for</span> x <span class="pl-k">in</span> <span class="pl-c1">showoff</span>([x<span class="pl-k">.</span>value <span class="pl-k">for</span> x <span class="pl-k">in</span> xs])]
<span class="pl-k">end</span></pre></div>
<p>Now we (and more importantly, Gadfly) can print percentages like:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="map(println, showoff([Percent(100 * rand()) for _ in 1:20]))
"><pre><span class="pl-c1">map</span>(println, <span class="pl-c1">showoff</span>([<span class="pl-c1">Percent</span>(<span class="pl-c1">100</span> <span class="pl-k">*</span> <span class="pl-c1">rand</span>()) <span class="pl-k">for</span> _ <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">20</span>]))</pre></div>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="60.505943%
73.255897%
97.477079%
43.330976%
69.023165%
52.580184%
13.011683%
22.718034%
93.843776%
29.875979%
64.110999%
91.203653%
91.534161%
80.684188%
81.674362%
11.530227%
30.498260%
38.876922%
35.444115%
8.857208%
"><pre><span class="pl-c1">60.505943</span><span class="pl-k">%</span>
<span class="pl-c1">73.255897</span><span class="pl-k">%</span>
<span class="pl-c1">97.477079</span><span class="pl-k">%</span>
<span class="pl-c1">43.330976</span><span class="pl-k">%</span>
<span class="pl-c1">69.023165</span><span class="pl-k">%</span>
<span class="pl-c1">52.580184</span><span class="pl-k">%</span>
<span class="pl-c1">13.011683</span><span class="pl-k">%</span>
<span class="pl-c1">22.718034</span><span class="pl-k">%</span>
<span class="pl-c1">93.843776</span><span class="pl-k">%</span>
<span class="pl-c1">29.875979</span><span class="pl-k">%</span>
<span class="pl-c1">64.110999</span><span class="pl-k">%</span>
<span class="pl-c1">91.203653</span><span class="pl-k">%</span>
<span class="pl-c1">91.534161</span><span class="pl-k">%</span>
<span class="pl-c1">80.684188</span><span class="pl-k">%</span>
<span class="pl-c1">81.674362</span><span class="pl-k">%</span>
<span class="pl-c1">11.530227</span><span class="pl-k">%</span>
<span class="pl-c1">30.498260</span><span class="pl-k">%</span>
<span class="pl-c1">38.876922</span><span class="pl-k">%</span>
<span class="pl-c1">35.444115</span><span class="pl-k">%</span>
<span class="pl-c1">8.857208</span><span class="pl-k">%</span></pre></div>
<p>Notice, that compared to <code>show</code>, these all have the same number of digits
trailing the <code>.</code>, and look nice when right-aligned.</p>
<p>When no specialized <code>showoff</code> is defined, it falls back on the <code>show</code> function.</p>
<p>This package was originally written by <a href="https://github.com/dcjones">Daniel C. Jones</a>.</p>
</article></div>