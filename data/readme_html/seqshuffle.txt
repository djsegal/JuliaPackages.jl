<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-seqshuffle" class="anchor" aria-hidden="true" href="#seqshuffle"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>SeqShuffle</h1>
<p dir="auto"><a href="https://kchu25.github.io/SeqShuffle.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/kchu25/SeqShuffle.jl/actions/workflows/CI.yml?query=branch%3Amain"><img src="https://github.com/kchu25/SeqShuffle.jl/actions/workflows/CI.yml/badge.svg?branch=main" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/kchu25/SeqShuffle.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/ecd6e07c4e6a41ca2a24a823dbb62d44b259017879ad8db574ae69d0e235962c/68747470733a2f2f636f6465636f762e696f2f67682f6b63687532352f53657153687566666c652e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/kchu25/SeqShuffle.jl/branch/main/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">Shuffle a string such that it preserves the k-mer frequency in the string (k <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="908200d3d15a50bc3a5ada3b89b9ff74">$\geq$</math-renderer> 1).</p>
<h1 dir="auto">
<a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h1>
<p dir="auto">To install SeqShuffle.jl use Julia's package manager:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="pkg&gt; add SeqShuffle"><pre class="notranslate"><code>pkg&gt; add SeqShuffle
</code></pre></div>
<h1 dir="auto">
<a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h1>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="
using SeqShuffle

# an example string
str = &quot;CAGCCCCGCAGGCCACTGCCTCGCC&quot;;

# shuffle the string such that it preserves the frequency of 2-mers
seq_shuffle(str; k=2)
&gt; &quot;CTGCCAGCCCCCAGCGCACGGCCTC&quot;

# shuffle the string such that it preserves the frequency of 3-mers
seq_shuffle(str; k=3)
&gt; &quot;CAGCCAGGCCGCACTGCCCCTCGCC&quot;

# k=1 is just the ordinary shuffle
seq_shuffle(str; k=1)
&gt; &quot;CGTTACCGCGCGGCCCACCCAGCCC&quot;

# The shuffling is not restricted to DNA alphabets; other alphabets
# works as well
seq_shuffle(&quot;ababacraggrac&quot;; k=2)
&gt; &quot;ababaggracrac&quot;

# of course, you can use the dot syntax in Julia to shuffle every string in the vector
vec_str = [&quot;GCCCCGCAGGCCACTG&quot;, &quot;CGCAGGCCTG&quot;, &quot;CGTTTTCGCCTCGAAAAG&quot;];
seq_shuffle.(vec_str; k=2)
&gt; 3-element Vector{String}:
  &quot;GCCCCCGCAGGCACTG&quot;
  &quot;CGCCAGGCTG&quot;
  &quot;CCTCGAAAAGTTTTCGCG&quot;

# shuffle every string in the fasta file such that it perserves the 
# frequency of 2-mers in each string; save the result as a new fasta 
# file output. Input and output are absolute filepaths as strings.     
# (optional) Use a fixed seed for reproducibility.
shuffle_fasta(fasta_location::String, 
                fasta_output_location::String;
                k=2, seed::Union{Nothing, Int}=1234)
                
"><pre><span class="pl-k">using</span> SeqShuffle

<span class="pl-c"><span class="pl-c">#</span> an example string</span>
str <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>CAGCCCCGCAGGCCACTGCCTCGCC<span class="pl-pds">"</span></span>;

<span class="pl-c"><span class="pl-c">#</span> shuffle the string such that it preserves the frequency of 2-mers</span>
<span class="pl-c1">seq_shuffle</span>(str; k<span class="pl-k">=</span><span class="pl-c1">2</span>)
<span class="pl-k">&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>CTGCCAGCCCCCAGCGCACGGCCTC<span class="pl-pds">"</span></span>

<span class="pl-c"><span class="pl-c">#</span> shuffle the string such that it preserves the frequency of 3-mers</span>
<span class="pl-c1">seq_shuffle</span>(str; k<span class="pl-k">=</span><span class="pl-c1">3</span>)
<span class="pl-k">&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>CAGCCAGGCCGCACTGCCCCTCGCC<span class="pl-pds">"</span></span>

<span class="pl-c"><span class="pl-c">#</span> k=1 is just the ordinary shuffle</span>
<span class="pl-c1">seq_shuffle</span>(str; k<span class="pl-k">=</span><span class="pl-c1">1</span>)
<span class="pl-k">&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>CGTTACCGCGCGGCCCACCCAGCCC<span class="pl-pds">"</span></span>

<span class="pl-c"><span class="pl-c">#</span> The shuffling is not restricted to DNA alphabets; other alphabets</span>
<span class="pl-c"><span class="pl-c">#</span> works as well</span>
<span class="pl-c1">seq_shuffle</span>(<span class="pl-s"><span class="pl-pds">"</span>ababacraggrac<span class="pl-pds">"</span></span>; k<span class="pl-k">=</span><span class="pl-c1">2</span>)
<span class="pl-k">&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>ababaggracrac<span class="pl-pds">"</span></span>

<span class="pl-c"><span class="pl-c">#</span> of course, you can use the dot syntax in Julia to shuffle every string in the vector</span>
vec_str <span class="pl-k">=</span> [<span class="pl-s"><span class="pl-pds">"</span>GCCCCGCAGGCCACTG<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>CGCAGGCCTG<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>CGTTTTCGCCTCGAAAAG<span class="pl-pds">"</span></span>];
<span class="pl-c1">seq_shuffle</span>.(vec_str; k<span class="pl-k">=</span><span class="pl-c1">2</span>)
<span class="pl-k">&gt;</span> <span class="pl-c1">3</span><span class="pl-k">-</span>element Vector{String}<span class="pl-k">:</span>
  <span class="pl-s"><span class="pl-pds">"</span>GCCCCCGCAGGCACTG<span class="pl-pds">"</span></span>
  <span class="pl-s"><span class="pl-pds">"</span>CGCCAGGCTG<span class="pl-pds">"</span></span>
  <span class="pl-s"><span class="pl-pds">"</span>CCTCGAAAAGTTTTCGCG<span class="pl-pds">"</span></span>

<span class="pl-c"><span class="pl-c">#</span> shuffle every string in the fasta file such that it perserves the </span>
<span class="pl-c"><span class="pl-c">#</span> frequency of 2-mers in each string; save the result as a new fasta </span>
<span class="pl-c"><span class="pl-c">#</span> file output. Input and output are absolute filepaths as strings.     </span>
<span class="pl-c"><span class="pl-c">#</span> (optional) Use a fixed seed for reproducibility.</span>
<span class="pl-c1">shuffle_fasta</span>(fasta_location<span class="pl-k">::</span><span class="pl-c1">String</span>, 
                fasta_output_location<span class="pl-k">::</span><span class="pl-c1">String</span>;
                k<span class="pl-k">=</span><span class="pl-c1">2</span>, seed<span class="pl-k">::</span><span class="pl-c1">Union{Nothing, Int}</span><span class="pl-k">=</span><span class="pl-c1">1234</span>)
                
</pre></div>
</article></div>