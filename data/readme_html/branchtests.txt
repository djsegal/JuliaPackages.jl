<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-branch-tests" class="anchor" aria-hidden="true" href="#branch-tests"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Branch Tests</h1>
<p>Branch tests will help you write tests for sequences of state transitions!</p>
<p><code>BranchTests</code> offers a single test macro - <code>@testbranch</code>. The name was chosen
to sound like <code>@testset</code> - <code>@testbranch</code>s close cousin. The macro accepts all
the same arguments as <code>@testset</code> does.</p>
<p>Let's start with a motivating example:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="@testbranch &quot;Vector&quot; begin
    v = Vector{Int}()
    @test isempty(v)

    @testbranch &quot;adds one element&quot; begin
        push!(v, 1)
        @test length(v) == 1

        @testbranch &quot;adds another element&quot; begin
            push!(v, 2)
            @test length(v) == 2
        end

        @testbranch &quot;removes element&quot; begin
            pop!(v)
            @test isempty(v)
        end
    end
end
"><pre><code>@testbranch "Vector" begin
    v = Vector{Int}()
    @test isempty(v)

    @testbranch "adds one element" begin
        push!(v, 1)
        @test length(v) == 1

        @testbranch "adds another element" begin
            push!(v, 2)
            @test length(v) == 2
        end

        @testbranch "removes element" begin
            pop!(v)
            @test isempty(v)
        end
    end
end
</code></pre></div>
<p>Running the above produces:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="Test Summary:        | Pass  Total
Branches - Vector(2) |    6      6
"><pre><code>Test Summary:        | Pass  Total
Branches - Vector(2) |    6      6
</code></pre></div>
<p>The <code>"Vector"</code> test branch has been run two times. Once for every terminating
test leaf of the test set. Notice how the additional element pushed into <code>v</code>
inside the <code>"adds another element"</code> test branch didn't affect the <code>@test</code> in
the <code>"removes element"</code> test branch? That's how <code>@testbranch</code> differs from
a bare <code>@testset</code>.</p>
<p>Let's add a failing <code>@test</code> in the leaf:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="@testbranch &quot;Vector&quot; begin
    v = Vector{Int}()
    @test isempty(v)

    @testbranch &quot;adds one element&quot; begin
        push!(v, 1)
        @test length(v) == 1

        @testbranch &quot;adds another element&quot; begin
            push!(v, 2)
            @test length(v) == 1                  # FAIL: should be 2
        end

        @testbranch &quot;removes element&quot; begin
            pop!(v)
            @test isempty(v)
        end
    end
end
"><pre><code>@testbranch "Vector" begin
    v = Vector{Int}()
    @test isempty(v)

    @testbranch "adds one element" begin
        push!(v, 1)
        @test length(v) == 1

        @testbranch "adds another element" begin
            push!(v, 2)
            @test length(v) == 1                  # FAIL: should be 2
        end

        @testbranch "removes element" begin
            pop!(v)
            @test isempty(v)
        end
    end
end
</code></pre></div>
<p>Result:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="adds another element: Test Failed at REPL[4]:11
  Expression: length(v) == 1
   Evaluated: 2 == 1
Stacktrace:
 [1] macro expansion at ./REPL[4]:11 [inlined]
 [2] macro expansion at /projects/BranchTests.jl/src/BranchTests.jl:229 [inlined]
 ...
 [12] (::var&quot;#75#76&quot;)(::BranchTests.Run) at /projects/BranchTests.jl/src/BranchTests.jl:228
Test Summary:              | Pass  Fail  Total
Branches - Vector(2)       |    5     1      6
  Vector                   |    2     1      3
    adds one element       |    1     1      2
      adds another element |          1      1
  Vector                   |    3            3
ERROR: Some tests did not pass: 5 passed, 1 failed, 0 errored, 0 broken.
"><pre><code>adds another element: Test Failed at REPL[4]:11
  Expression: length(v) == 1
   Evaluated: 2 == 1
Stacktrace:
 [1] macro expansion at ./REPL[4]:11 [inlined]
 [2] macro expansion at /projects/BranchTests.jl/src/BranchTests.jl:229 [inlined]
 ...
 [12] (::var"#75#76")(::BranchTests.Run) at /projects/BranchTests.jl/src/BranchTests.jl:228
Test Summary:              | Pass  Fail  Total
Branches - Vector(2)       |    5     1      6
  Vector                   |    2     1      3
    adds one element       |    1     1      2
      adds another element |          1      1
  Vector                   |    3            3
ERROR: Some tests did not pass: 5 passed, 1 failed, 0 errored, 0 broken.
</code></pre></div>
<p>Now we see there was a <code>@test</code> failure and a Pass result! The fact that the
<code>"adds another element"</code> leaf test failed did not stop the <code>"removes element"</code>
test from passing.</p>
<p>Let's fail the non-leaf branch now:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="@testbranch &quot;Vector&quot; begin
    v = Vector{Int}()
    @test isempty(v)

    @testbranch &quot;adds one element&quot; begin
        push!(v, 1)
        @test length(v) == 2              # FAIL: should be 1

        @testbranch &quot;adds another element&quot; begin
            push!(v, 2)
            @test length(v) == 2
        end

        @testbranch &quot;removes element&quot; begin
            pop!(v)
            @test isempty(v)
        end
    end
end
"><pre><code>@testbranch "Vector" begin
    v = Vector{Int}()
    @test isempty(v)

    @testbranch "adds one element" begin
        push!(v, 1)
        @test length(v) == 2              # FAIL: should be 1

        @testbranch "adds another element" begin
            push!(v, 2)
            @test length(v) == 2
        end

        @testbranch "removes element" begin
            pop!(v)
            @test isempty(v)
        end
    end
end
</code></pre></div>
<p>Result:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="adds one element: Test Failed at REPL[5]:7
  Expression: length(v) == 2
   Evaluated: 1 == 2
Stacktrace:
 [1] macro expansion at ./REPL[5]:7 [inlined]
 [2] macro expansion at /projects/BranchTests.jl/src/BranchTests.jl:229 [inlined]
 ...
 [8] (::var&quot;#77#78&quot;)(::BranchTests.Run) at /projects/BranchTests.jl/src/BranchTests.jl:228
Test Summary:        | Pass  Fail  Total
Branches - Vector(2) |    1     1      2
  Vector             |    1     1      2
    adds one element |          1      1
ERROR: Some tests did not pass: 1 passed, 1 failed, 0 errored, 0 broken.
"><pre><code>adds one element: Test Failed at REPL[5]:7
  Expression: length(v) == 2
   Evaluated: 1 == 2
Stacktrace:
 [1] macro expansion at ./REPL[5]:7 [inlined]
 [2] macro expansion at /projects/BranchTests.jl/src/BranchTests.jl:229 [inlined]
 ...
 [8] (::var"#77#78")(::BranchTests.Run) at /projects/BranchTests.jl/src/BranchTests.jl:228
Test Summary:        | Pass  Fail  Total
Branches - Vector(2) |    1     1      2
  Vector             |    1     1      2
    adds one element |          1      1
ERROR: Some tests did not pass: 1 passed, 1 failed, 0 errored, 0 broken.
</code></pre></div>
<p>We see that both leaves of the <code>"Vector"</code> branch test failed to run because the
branch they're rooted on has failed.</p>
<h2><a id="user-content-how-it-works" class="anchor" aria-hidden="true" href="#how-it-works"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>How it works</h2>
<p>The <code>@testbranch</code> macro generates a function with <code>@testset</code> macros and some
flow control inside. The function then runs repeatedly while tracking the
branch pass/fail results.</p>
<p>TestBranch isn't in any way an original idea. I've got the idea from the C++
testing framework <a href="https://github.com/catchorg/Catch2/blob/devel/docs/tutorial.md#test-cases-and-sections">Catch2</a>.</p>
<h2><a id="user-content-todo" class="anchor" aria-hidden="true" href="#todo"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>TODO</h2>
<h3><a id="user-content-tear-down" class="anchor" aria-hidden="true" href="#tear-down"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Tear down</h3>
<p>Julia doesn't have deterministic destruction which could be used for after-test
cleanup. I haven't really thought of a nice solution yet. Ideas welcome!</p>
<h3><a id="user-content-better-result-printout" class="anchor" aria-hidden="true" href="#better-result-printout"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Better result printout</h3>
<p>Currently, running</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="@testbranch &quot;Vector&quot; begin
    v = Vector{Int}()
    @test isempty(v)

    @testbranch &quot;adds one element&quot; begin
        push!(v, 1)
        @test length(v) == 1
    end

    @testbranch &quot;equality&quot; begin
        @test v == v
    end
end
"><pre><code>@testbranch "Vector" begin
    v = Vector{Int}()
    @test isempty(v)

    @testbranch "adds one element" begin
        push!(v, 1)
        @test length(v) == 1
    end

    @testbranch "equality" begin
        @test v == v
    end
end
</code></pre></div>
<p>will print</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="Test Summary:        | Pass  Total
Branches - Vector(2) |    4      4
"><pre><code>Test Summary:        | Pass  Total
Branches - Vector(2) |    4      4
</code></pre></div>
<p>I'd like to see</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="Test Summary:        | Pass  Total
Branches - Vector(2) |    4      4
    adds one element |    1      1
    equality         |    1      1
"><pre><code>Test Summary:        | Pass  Total
Branches - Vector(2) |    4      4
    adds one element |    1      1
    equality         |    1      1
</code></pre></div>
<p>or something to the above effect. We should see a line for every test branch
leaf which passed.</p>
</article></div>