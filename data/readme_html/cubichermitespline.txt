<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-cubichermitesplinejl" class="anchor" aria-hidden="true" href="#cubichermitesplinejl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>CubicHermiteSpline.jl</h1>
<p><strong>CubicHermiteSpline.jl</strong> is a naive implementation of cubic Hermite spline interpolation for 1D data points in pure Julia. Currently, the 1st order gradient should be given by the user. It is most useful when the gradient happens to be available. When the function to be interpolated is smooth and the accuracy of the gradients is high, the cubic Hermite spline interpolation should perform extremely well. A demonstration of the power of this interpolation can be found <a href="http://www.yxliu.group/2020/06/cubic-hermite-spline" rel="nofollow">here</a>.</p>
<h2><a id="user-content-features" class="anchor" aria-hidden="true" href="#features"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Features</h2>
<ul>
<li>Interpolation of data points</li>
<li>Gradient (1st order derivative) of the interpolation. (New in version 0.2.0)</li>
</ul>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<p>Below shows a trivial example when the function is a cubic polynomial. In such case, the function can be exactly interpolated.</p>
<p>First, prepare a set of data points to be interpolated. Note that here we use a cubic polynomial function which can be exactly interpolated by the cubic Hermite spline method.</p>
<div class="highlight highlight-text-shell-session position-relative" data-snippet-clipboard-copy-content="julia&gt; using CubicHermiteSpline

julia&gt; f(x) = x^3 - 3x^2 + 2x - 5;

julia&gt; df(x) = 3x^2 - 6x + 2;

julia&gt; x = range(0, 2.5, step=0.5)
0.0:0.5:2.5

julia&gt; y = f.(x)
6-element Array{Float64,1}:
 -5.0
 -4.625
 -5.0
 -5.375
 -5.0
 -3.125
"><pre><span class="pl-c1">julia&gt; using CubicHermiteSpline</span>

<span class="pl-c1">julia&gt; f(x) = x^3 - 3x^2 + 2x - 5;</span>

<span class="pl-c1">julia&gt; df(x) = 3x^2 - 6x + 2;</span>

<span class="pl-c1">julia&gt; x = range(0, 2.5, step=0.5)</span>
<span class="pl-c1">0.0:0.5:2.5</span>

<span class="pl-c1">julia&gt; y = f.(x)</span>
<span class="pl-c1">6-element Array{Float64,1}:</span>
<span class="pl-c1"> -5.0</span>
<span class="pl-c1"> -4.625</span>
<span class="pl-c1"> -5.0</span>
<span class="pl-c1"> -5.375</span>
<span class="pl-c1"> -5.0</span>
<span class="pl-c1"> -3.125</span></pre></div>
<p>The gradients at each data points are also computed which is required by the cubic Hermite spline method.</p>
<div class="highlight highlight-text-shell-session position-relative" data-snippet-clipboard-copy-content="julia&gt; gradient = df.(x)
6-element Array{Float64,1}:
  2.0
 -0.25
 -1.0
 -0.25
  2.0
  5.75
"><pre><span class="pl-c1">julia&gt; gradient = df.(x)</span>
<span class="pl-c1">6-element Array{Float64,1}:</span>
<span class="pl-c1">  2.0</span>
<span class="pl-c1"> -0.25</span>
<span class="pl-c1"> -1.0</span>
<span class="pl-c1"> -0.25</span>
<span class="pl-c1">  2.0</span>
<span class="pl-c1">  5.75</span></pre></div>
<p>Then, we construct a interpolation instance by using CubicHermiteSpline package.</p>
<div class="highlight highlight-text-shell-session position-relative" data-snippet-clipboard-copy-content="julia&gt; spl = CubicHermiteSplineInterpolation(x, y, gradient);
"><pre><span class="pl-c1">julia&gt; spl = CubicHermiteSplineInterpolation(x, y, gradient);</span></pre></div>
<p>Perform interpolation for a single input x.</p>
<div class="highlight highlight-text-shell-session position-relative" data-snippet-clipboard-copy-content="julia&gt; xi = 1.2;

julia&gt; yi = spl(xi)  # Or using interp(spl, xi)
-5.192
"><pre><span class="pl-c1">julia&gt; xi = 1.2;</span>

<span class="pl-c1">julia&gt; yi = spl(xi)  # Or using interp(spl, xi)</span>
<span class="pl-c1">-5.192</span></pre></div>
<p>Perform interpolation for an array of input x.</p>
<div class="highlight highlight-text-shell-session position-relative" data-snippet-clipboard-copy-content="julia&gt; xi = [0.5, 1.2];

julia&gt; yi = spl(xi)  # Or using interp(spl, xi) 
2-element Array{Float64,1}:
 -4.625
 -5.192
"><pre><span class="pl-c1">julia&gt; xi = [0.5, 1.2];</span>

<span class="pl-c1">julia&gt; yi = spl(xi)  # Or using interp(spl, xi) </span>
<span class="pl-c1">2-element Array{Float64,1}:</span>
<span class="pl-c1"> -4.625</span>
<span class="pl-c1"> -5.192</span></pre></div>
<p>The 1st order derivative of the interpolation can be obtained.</p>
<div class="highlight highlight-text-shell-session position-relative" data-snippet-clipboard-copy-content="julia&gt; xi = 1.2;

julia&gt; ki = spl(xi; grad=true)  # Or using grad(spl, xi)
"><pre><span class="pl-c1">julia&gt; xi = 1.2;</span>

<span class="pl-c1">julia&gt; ki = spl(xi; grad=true)  # Or using grad(spl, xi)</span></pre></div>
<p>Note that 1st order gradients at each data points should be provided by the user. Please see <code>doc/tutorial.ipynb</code> for a detailed demonstration of the usage of this package.</p>
<h2><a id="user-content-todo" class="anchor" aria-hidden="true" href="#todo"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>TODO</h2>
<ul>
<li>To support 2D and higher dimension data points.</li>
<li>To allow computing gradients from data points when gradients are not provided by the user.</li>
</ul>
<h2><a id="user-content-contribute" class="anchor" aria-hidden="true" href="#contribute"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Contribute</h2>
<ul>
<li>Star the package on <a href="https://github.com/liuyxpp/CubicHermiteSpline.jl">github.com</a>.</li>
<li>File an issue or make a pull request on <a href="https://github.com/liuyxpp/CubicHermiteSpline.jl">github.com</a>.</li>
<li>Contact the author via email <a href="mailto:lyx@fudan.edu.cn">lyx@fudan.edu.cn</a>.</li>
</ul>
<h2><a id="user-content-links" class="anchor" aria-hidden="true" href="#links"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Links</h2>
<ul>
<li><a href="https://github.com/liuyxpp/CubicHermiteSpline.jl">Source code</a></li>
<li><a href="http://www.yxliu.group/2020/06/cubic-hermite-spline" rel="nofollow">Documentation</a></li>
<li><a href="https://github.com/liuyxpp/CubicHermiteSpline.jl/blob/master/doc/tutorial.ipynb">Tutorial in IPython Notebook</a></li>
</ul>
</article></div>