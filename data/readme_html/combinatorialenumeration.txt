<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content--combinatorialenumerationjl" class="anchor" aria-hidden="true" href="#-combinatorialenumerationjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><a target="_blank" rel="noopener noreferrer" href="docs/src/assets/logo.png"><img src="docs/src/assets/logo.png" alt="CombinatorialEnumeration.jl" style="max-width: 100%;"></a> CombinatorialEnumeration.jl</h1>
<p dir="auto"><a href="https://kris-brown.github.io/CombinatorialEnumeration.jl/dev/" rel="nofollow"><img src="https://github.com/kris-brown/CombinatorialEnumeration.jl/workflows/Documentation/badge.svg" alt="Documentation" style="max-width: 100%;"></a>
<a target="_blank" rel="noopener noreferrer" href="https://github.com/kris-brown/CombinatorialEnumeration.jl/workflows/Tests/badge.svg"><img src="https://github.com/kris-brown/CombinatorialEnumeration.jl/workflows/Tests/badge.svg" alt="Tests" style="max-width: 100%;"></a></p>
<p dir="auto">This package implements a constrained search algorithm, with constraints
specified in the language of
<a href="https://www.math.mcgill.ca/barr/papers/sketch.pdf" rel="nofollow">sketches</a> / category theory.
Formally, given a finite (co)- limit sketch, we enumerate its models <em>up to
isomorphism</em>. See more in the
<a href="https://kris-brown.github.io/CombinatorialEnumeration.jl/dev/" rel="nofollow">documentation</a>
and some examples are in the <code>examples</code> directory (e.g. reflexive graphs,
coequalizers, categories, jointly surjective maps) underneath <code>src</code> and <code>test</code>.</p>
<h2 dir="auto"><a id="user-content-status" class="anchor" aria-hidden="true" href="#status"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Status</h2>
<p dir="auto">This is very experimental code, so there may be frequent breaking changes. There
is great opportunity for massive speed-ups - really the most basic
implementations to get something running is all that is written so far, but done
so in a modular way (e.g. enforcing cone constraints, enforcing cocone
constraints) so that bottlenecks can be identified and improved piecemeal.</p>
</article></div>