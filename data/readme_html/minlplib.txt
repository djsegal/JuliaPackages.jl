<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-minlplib" class="anchor" aria-hidden="true" href="#minlplib"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>MINLPLib</h1>
<p>Dev: <a href="https://travis-ci.org/lanl-ansi/MINLPLib.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/e0a8d1e6eb9a4623071c746f0aecf9506b6a50af/68747470733a2f2f7472617669732d63692e6f72672f6c616e6c2d616e73692f4d494e4c504c69622e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/lanl-ansi/MINLPLib.jl.svg?branch=master" style="max-width:100%;"></a> <a href="https://lanl-ansi.github.io/MINLPLib.jl/latest" rel="nofollow"><img src="https://camo.githubusercontent.com/57bae07ecd50a99519ad0516d91f4ec8f0f48e12/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6c61746573742d626c75652e737667" alt="Docs" data-canonical-src="https://img.shields.io/badge/docs-latest-blue.svg" style="max-width:100%;"></a></p>
<p>MINLPLib.jl is an extensive collection of Mixed-Integer and Continuous Nonlinear Programming Instances in the native <a href="https://github.com/JuliaOpt/JuMP.jl"><code>JuMP.jl</code></a> format. Numerous instances in this library are based on the standard <a href="http://www.minlplib.org" rel="nofollow">MINLPLib.org</a> instances in addition to hundreds of global optimization instances which appear in the litearature. This library can be useful for:</p>
<ul>
<li>
<p>Benchmarking your Julia-based MINLP solvers by performing rigorous numerical experiments</p>
</li>
<li>
<p>Viewing meta information of each instance to assist your analyses and experiments</p>
</li>
</ul>
<h2><a id="user-content-included-libraries" class="anchor" aria-hidden="true" href="#included-libraries"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Included Libraries</h2>
<p>For more details of the libraries included in this package, please see <a href="https://lanl-ansi.github.io/MINLPLib.jl/latest/" rel="nofollow">documentation</a>.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>To install, at your <code>Julia</code> command prompt,</p>
<pre><code>Pkg.clone("https://github.com/lanl-ansi/MINLPLib.jl.git")
</code></pre>
<h2><a id="user-content-fetching-a-model" class="anchor" aria-hidden="true" href="#fetching-a-model"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Fetching a model</h2>
<p>Fetch an instance by its <code>libname/name</code> just like the following,</p>
<pre><code>using MINLPLib
m = fetch_model("minlp2/blend029")
</code></pre>
<p>or</p>
<pre><code>using MINLPLib
m = fetch_model("minlp2", "blend029")
</code></pre>
<p>For special built-in model that requires additional inputs,</p>
<pre><code>using MINLPLib
m = fetch_model("special", "multiKND", options=Dict(:K=&gt;3, :N=&gt;3, :D=&gt;1))
</code></pre>
<p>The above scrip initializes an optimization <a href="https://github.com/JuliaOpt/JuMP.jl">JuMP</a> model <code>multiKND</code>. The formulation is controlled with parameter <code>:K</code>, <code>:N</code>, and <code>:D</code>, which yields the following problem:</p>
<pre><code>Max x[1] * x[2] * x[3] + x[3] * x[4] * x[5] + x[5] * x[6] * x[7]
Subject to
 x[1] + x[2] + x[3] &lt;= 3
 x[3] + x[4] + x[5] &lt;= 3
 x[5] + x[6] + x[7] &lt;= 3
 0.1 &lt;= x[i] &lt;= 10 for all i in {1,2,..,6,7}
</code></pre>
<h2><a id="user-content-viewing-instances-meta-info" class="anchor" aria-hidden="true" href="#viewing-instances-meta-info"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Viewing instance's meta info</h2>
<p>To know a instance better, you can do the following to get a dictionary of meta info.
Note that as we continue to develop and test. More verified attributes will be added to the meta.</p>
<pre><code>julia&gt; meta = MINLPLib.fetch_meta("minlp2", "blend029")
Dict{String,Any} with 18 entries:
  "NINTVARS"   =&gt; 0
  "NLINCONS"   =&gt; 202
  "OBJBOUND"   =&gt; nothing
  "NAME"       =&gt; "blend029"
  "OBJVAL"     =&gt; nothing
  "LIBRARY"    =&gt; "minlp2"
  "NCONS"      =&gt; 214
  "NVARS"      =&gt; 103
  "OBJTYPE"    =&gt; "linear"
  "NLOPERATOR" =&gt; Any["mul"]
  "LOAD"       =&gt; 1.7414
  "OBJSENSE"   =&gt; "Max"
  "NSDPCONS"   =&gt; 0
  "NNLCONS"    =&gt; 12
  "NBINVARS"   =&gt; 36
  "NQUADCONS"  =&gt; 0
  "NSOSCONS"   =&gt; 0
</code></pre>
<h2><a id="user-content-customize-your-own-instance-library" class="anchor" aria-hidden="true" href="#customize-your-own-instance-library"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Customize your own instance library</h2>
<p>Currently, MINLPLib.jl contains over 6000 instances. Experimenting with all
of them can be computationally heavy and risky. For your research projects, the scope may be
limited to a specific type of problems. Hence, it is necessary to construct you very own
library for research experiments. Below, we write a small <code>.jl</code> script that will generate a
user instance library (without actually copying the problem) called <code>USERLib</code> that collect all instances with
<code>exp</code> function. The directory will be created with name <code>instance/USERLib</code>. Please see our
<a href="https://lanl-ansi.github.io/MINLPLib.jl/latest/PODLib.html#PODLib-1" rel="nofollow">PODLib</a> designed for
testing <a href="https://github.com/lanl-ansi/Alpine.jl">Alpine.jl</a> solver. This customized library contains instances reference
as well as full instances. Note that each instance can be drastically different with different formulations and
implementations (peak into the library called <code>special</code> and you will see some examples).
It is up to you to select and construct your own instance library for more exciting and convenient experiments.</p>
<pre><code>using MINLPLib

# Collect target problem from these libraries
for lib in ["bcp", "global", "ibm", "inf", "minlp", "minlp2"]
    NAMES = MINLPLib.fetch_names(lib)   # Fetch a list of instance names
    for i in NAMES
        Meta = MINLPLib.fetch_meta(lib, i)  # Fetch instance meta
        isempty(Meta) &amp;&amp; continue
        !haskey(Meta, "NLOPERATOR") &amp;&amp; continue
        if "exp" in M["NLOPERATOR"][1]
            MINLPLib.add_to_lib("USERLib", lib, i)  # Collect instance
        else
            continue
        end
    end
end
println(MINLPLib.fetch_names("USERLib"))
</code></pre>
</article></div>