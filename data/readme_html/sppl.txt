<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p align="center" dir="auto">
<a target="_blank" rel="noopener noreferrer" href="sppl.png"><img height="100px" src="sppl.png" style="max-width: 100%;"></a>
</p>
<br>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/probcomp/SPPL.jl/actions/workflows/CI.yml/badge.svg"><img src="https://github.com/probcomp/SPPL.jl/actions/workflows/CI.yml/badge.svg" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://probcomp.github.io/SPPL.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Link to Documentation" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a></p>
<blockquote>
<p dir="auto">Julia bindings for using <a href="https://github.com/probcomp/sppl"><code>sppl</code></a> across <a href="https://github.com/cjdoris/PythonCall.jl">PythonCall.jl</a>.</p>
</blockquote>
<h3 dir="auto"><a id="user-content-example-usage" class="anchor" aria-hidden="true" href="#example-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example usage</h3>
<p dir="auto">Allows the usage of direct string macros:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="spn = sppl&quot;&quot;&quot;
Nationality   ~= choice({'India': 0.5, 'USA': 0.5})
if (Nationality == 'India'):
    Perfect       ~= bernoulli(p=0.10)
    if (Perfect == 1):  
        GPA ~= atomic(loc=10)
    else:               
        GPA ~= uniform(loc=0, scale=10)
else:
    Perfect       ~= bernoulli(p=0.15)
    if (Perfect == 1):  
        GPA ~= atomic(loc=4)
    else:               
        GPA ~= uniform(loc=0, scale=4)
&quot;&quot;&quot;"><pre>spn <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds"><span class="pl-c1">sppl</span>"""</span></span>
<span class="pl-s">Nationality   ~= choice({'India': 0.5, 'USA': 0.5})</span>
<span class="pl-s">if (Nationality == 'India'):</span>
<span class="pl-s">    Perfect       ~= bernoulli(p=0.10)</span>
<span class="pl-s">    if (Perfect == 1):  </span>
<span class="pl-s">        GPA ~= atomic(loc=10)</span>
<span class="pl-s">    else:               </span>
<span class="pl-s">        GPA ~= uniform(loc=0, scale=10)</span>
<span class="pl-s">else:</span>
<span class="pl-s">    Perfect       ~= bernoulli(p=0.15)</span>
<span class="pl-s">    if (Perfect == 1):  </span>
<span class="pl-s">        GPA ~= atomic(loc=4)</span>
<span class="pl-s">    else:               </span>
<span class="pl-s">        GPA ~= uniform(loc=0, scale=4)</span>
<span class="pl-s"><span class="pl-pds">"""</span></span></pre></div>
<p dir="auto">as well as the usage of a native macro with native structures:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="spn = @sppl begin
    nationality ~ SPPL.Choice([:India =&gt; 0.5, :USA =&gt; 0.5])
    perfect ~ SPPL.Bernoulli(0.1)
    gpa ~ SPPL.Atomic(4)
end
println(spn)"><pre>spn <span class="pl-k">=</span> <span class="pl-c1">@sppl</span> <span class="pl-k">begin</span>
    nationality <span class="pl-k">~</span> SPPL<span class="pl-k">.</span><span class="pl-c1">Choice</span>([<span class="pl-c1">:India</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">0.5</span>, <span class="pl-c1">:USA</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">0.5</span>])
    perfect <span class="pl-k">~</span> SPPL<span class="pl-k">.</span><span class="pl-c1">Bernoulli</span>(<span class="pl-c1">0.1</span>)
    gpa <span class="pl-k">~</span> SPPL<span class="pl-k">.</span><span class="pl-c1">Atomic</span>(<span class="pl-c1">4</span>)
<span class="pl-k">end</span>
<span class="pl-c1">println</span>(spn)</pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="(nationality = &lt;py Identity('nationality')&gt;, 
 perfect = &lt;py Identity('perfect')&gt;, 
 gpa = &lt;py Identity('gpa')&gt;, 
 model = &lt;py sppl.spe.ProductSPE object at 0x1e6ce3d60&gt;)"><pre class="notranslate"><code>(nationality = &lt;py Identity('nationality')&gt;, 
 perfect = &lt;py Identity('perfect')&gt;, 
 gpa = &lt;py Identity('gpa')&gt;, 
 model = &lt;py sppl.spe.ProductSPE object at 0x1e6ce3d60&gt;)
</code></pre></div>
<p dir="auto">Of course, you can use native abstractions:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@sppl function foo(x::Float64)
    nationality ~ SPPL.Choice([:India =&gt; x, :USA =&gt; 1 - x])
    perfect ~ SPPL.Bernoulli(0.1)
    gpa ~ SPPL.Atomic(4)
end"><pre><span class="pl-c1">@sppl</span> <span class="pl-k">function</span> <span class="pl-en">foo</span>(x<span class="pl-k">::</span><span class="pl-c1">Float64</span>)
    nationality <span class="pl-k">~</span> SPPL<span class="pl-k">.</span><span class="pl-c1">Choice</span>([<span class="pl-c1">:India</span> <span class="pl-k">=&gt;</span> x, <span class="pl-c1">:USA</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1</span> <span class="pl-k">-</span> x])
    perfect <span class="pl-k">~</span> SPPL<span class="pl-k">.</span><span class="pl-c1">Bernoulli</span>(<span class="pl-c1">0.1</span>)
    gpa <span class="pl-k">~</span> SPPL<span class="pl-k">.</span><span class="pl-c1">Atomic</span>(<span class="pl-c1">4</span>)
<span class="pl-k">end</span></pre></div>
<p dir="auto">which expands to produce a generator:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content=":(function foo(x::Float64)
      gpa = Main.IndianGPA.SPPL.Id(:gpa)
      nationality = Main.IndianGPA.SPPL.Id(:nationality)
      perfect = Main.IndianGPA.SPPL.Id(:perfect)
      command = Main.IndianGPA.SPPL.Sequence(
          Main.IndianGPA.SPPL.Sample(nationality, 
            SPPL.Choice([:India =&gt; x, :USA =&gt; 1 - x])), 
          Main.IndianGPA.SPPL.Sample(perfect, SPPL.Bernoulli(0.1)),
          Main.IndianGPA.SPPL.Sample(gpa, SPPL.Atomic(4))
        )
      model = command.interpret()
      namespace = (nationality = Main.IndianGPA.SPPL.Id(:nationality), 
                   perfect = Main.IndianGPA.SPPL.Id(:perfect), 
                   gpa = Main.IndianGPA.SPPL.Id(:gpa), 
                   model = model)
      namespace
  end)"><pre class="notranslate"><code>:(function foo(x::Float64)
      gpa = Main.IndianGPA.SPPL.Id(:gpa)
      nationality = Main.IndianGPA.SPPL.Id(:nationality)
      perfect = Main.IndianGPA.SPPL.Id(:perfect)
      command = Main.IndianGPA.SPPL.Sequence(
          Main.IndianGPA.SPPL.Sample(nationality, 
            SPPL.Choice([:India =&gt; x, :USA =&gt; 1 - x])), 
          Main.IndianGPA.SPPL.Sample(perfect, SPPL.Bernoulli(0.1)),
          Main.IndianGPA.SPPL.Sample(gpa, SPPL.Atomic(4))
        )
      model = command.interpret()
      namespace = (nationality = Main.IndianGPA.SPPL.Id(:nationality), 
                   perfect = Main.IndianGPA.SPPL.Id(:perfect), 
                   gpa = Main.IndianGPA.SPPL.Id(:gpa), 
                   model = model)
      namespace
  end)
</code></pre></div>
<h3 dir="auto"><a id="user-content-syntax" class="anchor" aria-hidden="true" href="#syntax"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Syntax</h3>
<p dir="auto">There are a few special pieces of syntax which the user should keep in mind. Some of these points make the macro parsing unambiguous, others are more for convenience.</p>
<ul dir="auto">
<li><code>Sample</code> statements are expressed using <code>~</code> syntax.</li>
<li><code>Transform</code> expressions (a polynomial for example, expressed in Python as <code>X[1] ~ 8 * W[2]**2 + 5</code>) are specified a "special" operator <code>.&gt;</code>.</li>
<li>The Julia ternary expression <code>foo ? b1 : b2</code> is allowed - this desugars into <code>IfElse</code>.</li>
<li>Array declarations are performed using the library-provided <code>array</code> function interface. Array declarations must be made (!) before indexing/use - or else macro parsing will return an error.</li>
<li><code>==</code> desugars to <code>&lt;&lt;</code> on the Python side (this creates an <code>event</code> - a condition).</li>
<li>The <code>for</code> expression is allowed - but you are restricted to only supply <code>UnitRange{Int64}</code> instances for the parsing/semantics to work properly.</li>
</ul>
<p dir="auto">Examples of each of these points can be found in the <a href="https://github.com/femtomc/SPPL.jl/tree/master/examples"><code>examples</code> directory</a>. These <code>examples</code> come directly from the <a href="https://github.com/probcomp/sppl/tree/master/examples">sppl Jupyter notebooks</a>. If you'd like to help port these over, just setup a PR!</p>
</article></div>