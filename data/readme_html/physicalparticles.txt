<div id="readme" class="md" data-path="Readme.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-physicalparticlesjl" class="anchor" aria-hidden="true" href="#physicalparticlesjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>PhysicalParticles.jl</h1>
<p><a href="https://codecov.io/gh/JuliaAstroSim/PhysicalParticles.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/94a57dac3dcde1eb81ca4720f36c5c7634f2940b0a152b15620be2b25b04450a/68747470733a2f2f636f6465636f762e696f2f67682f4a756c6961417374726f53696d2f506879736963616c5061727469636c65732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/JuliaAstroSim/PhysicalParticles.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a>
<a href="https://juliaastrosim.github.io/PhysicalParticles.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a></p>
<p><em>Physical particle types for scientific simulation. Manipulate vectors as simple as numbers!</em></p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="]add PhysicalParticles
"><pre>]add PhysicalParticles</pre></div>
<p>or</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Pkg; Pkg.add(&quot;PhysicalParticles&quot;)
"><pre><span class="pl-k">using</span> Pkg; Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>PhysicalParticles<span class="pl-pds">"</span></span>)</pre></div>
<p>or</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Pkg; Pkg.add(&quot;https://github.com/JuliaAstroSim/PhysicalParticles.jl&quot;)
"><pre><span class="pl-k">using</span> Pkg; Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>https://github.com/JuliaAstroSim/PhysicalParticles.jl<span class="pl-pds">"</span></span>)</pre></div>
<p>To test the Package:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="]test PhysicalParticles
"><pre>]test PhysicalParticles</pre></div>
<h2><a id="user-content-documentation" class="anchor" aria-hidden="true" href="#documentation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Documentation</h2>
<ul>
<li><a href="https://juliaastrosim.github.io/PhysicalParticles.jl/dev" rel="nofollow"><strong>Dev</strong></a> — <em>documentation of the in-development version.</em></li>
</ul>
<h2><a id="user-content-basic-usage" class="anchor" aria-hidden="true" href="#basic-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Basic Usage</h2>
<h3><a id="user-content-vectors" class="anchor" aria-hidden="true" href="#vectors"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Vectors</h3>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using PhysicalParticles, Unitful, UnitfulAstro

julia&gt; a = PVector()
PVector{Float64}(0.0, 0.0, 0.0)

julia&gt; b = PVector(1.0u&quot;m&quot;, 2.0u&quot;m&quot;, 3.0u&quot;m&quot;)
PVector(1.0 m, 2.0 m, 3.0 m)

julia&gt; c = PVector2D(u&quot;m/s&quot;)
PVector2D(0.0 m s^-1, 0.0 m s^-1)

julia&gt; uconvert(u&quot;m&quot;, PVector(1.0, 1.0, 1.0, u&quot;km&quot;))
PVector(1000.0 m, 1000.0 m, 1000.0 m)

julia&gt; PVector(BigFloat)
PVector{BigFloat}(0.0, 0.0, 0.0)

julia&gt; PVector2D(BigInt, u&quot;m&quot;)
PVector2D(0 m, 0 m)


julia&gt; PVector(1.0, 1.0) * im
PVector2D{Complex{Float64}}(0.0 + 1.0im, 0.0 + 1.0im)

julia&gt; b * 2.0u&quot;s&quot;
PVector(2.0 m s, 4.0 m s, 6.0 m s)

julia&gt; b + PVector(2.0, 2.0, 2.0, u&quot;m&quot;) / 2
PVector(2.0 m, 3.0 m, 4.0 m)

julia&gt; norm(PVector2D(3.0f0,4.0f0))
5.0f0

julia&gt; normalize(PVector(3.0, 4.0))
PVector2D{Float64}(0.6, 0.8)

julia&gt; d = PVector(3u&quot;kpc&quot;, 4u&quot;kpc&quot;)
PVector2D(3 kpc, 4 kpc)

julia&gt; norm(d)
1.5428387907456837e20 m



julia&gt; distance(PVector2D(0.0, 0.0), PVector2D(3.0, 4.0))
5.0

julia&gt; rotate(PVector(1.0, 0.0), 0.5pi)
PVector2D{Float64}(6.123233995736766e-17, 1.0)

julia&gt; rotate(PVector(1.0, 0.0, 0.0), 0.0, 0.0, 0.5pi)
PVector{Float64}(6.123233995736766e-17, 1.0, 0.0)

julia&gt; rotate_z(PVector(1.0, 0.0, 0.0), 90.0u&quot;°&quot;)
PVector{Float64}(0.0, 1.0, 0.0)

julia&gt; rotate(PVector(1.0, 0.0, 0.0), 0.0, 0.0, 90.0u&quot;°&quot;, PVector(-1.0, 0.0, 0.0))
PVector{Float64}(-1.0, 2.0, 0.0)

julia&gt; rotate(PVector(0.0, 1.0, 0.0), PVector(0.0, 1.0, 1.0), pi)
PVector{Float64}(-8.659560562354932e-17, -2.220446049250313e-16, 0.9999999999999998)

# Coordinate Transformations
julia&gt; cylinderial(PVector(sqrt(2), sqrt(2), 1.0, u&quot;m&quot;))
(2.0 m, 0.7853981633974484, 1.0 m)

julia&gt; cylinderial2xyz(2.0u&quot;m&quot;, pi/4, 1.0u&quot;m&quot;)
PVector(1.4142135623730951 m, 1.414213562373095 m, 1.0 m)

julia&gt; spherical(PVector(sqrt(0.5), sqrt(0.5), 1.0, u&quot;m&quot;))
(1.4142135623730951 m, 0.7853981633974484, 0.7853981633974483)

julia&gt; spherical2xyz(sqrt(2)u&quot;m&quot;, pi/4, pi/4)
PVector(0.7071067811865476 m, 0.7071067811865475 m, 1.0000000000000002 m)

julia&gt; zero(PVector{Float64})
PVector{Float64}(0.0, 0.0, 0.0)

julia&gt; iszero(PVector(u&quot;m&quot;))
true

julia&gt; isnan(PVector(NaN, NaN))
true

julia&gt; PVector2D(1.0, 1.0) ≈ PVector2D(1.0 + 1.0e-8, 1.0 + 1.0e-8)
true


julia&gt; ustrip(PVector(1.0, 1.0, 1.0, u&quot;km&quot;))
PVector{Float64}(1.0, 1.0, 1.0)

julia&gt; ustrip(u&quot;m&quot;, PVector(1.0, 1.0, 1.0, u&quot;km&quot;))
PVector{Float64}(1000.0, 1000.0, 1000.0)
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> PhysicalParticles, Unitful, UnitfulAstro

julia<span class="pl-k">&gt;</span> a <span class="pl-k">=</span> <span class="pl-c1">PVector</span>()
<span class="pl-c1">PVector</span><span class="pl-c1">{Float64}</span>(<span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>)

julia<span class="pl-k">&gt;</span> b <span class="pl-k">=</span> <span class="pl-c1">PVector</span>(<span class="pl-c1">1.0</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>m<span class="pl-pds">"</span></span>, <span class="pl-c1">2.0</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>m<span class="pl-pds">"</span></span>, <span class="pl-c1">3.0</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>m<span class="pl-pds">"</span></span>)
<span class="pl-c1">PVector</span>(<span class="pl-c1">1.0</span> m, <span class="pl-c1">2.0</span> m, <span class="pl-c1">3.0</span> m)

julia<span class="pl-k">&gt;</span> c <span class="pl-k">=</span> <span class="pl-c1">PVector2D</span>(<span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>m/s<span class="pl-pds">"</span></span>)
<span class="pl-c1">PVector2D</span>(<span class="pl-c1">0.0</span> m s<span class="pl-k">^-</span><span class="pl-c1">1</span>, <span class="pl-c1">0.0</span> m s<span class="pl-k">^-</span><span class="pl-c1">1</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">uconvert</span>(<span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>m<span class="pl-pds">"</span></span>, <span class="pl-c1">PVector</span>(<span class="pl-c1">1.0</span>, <span class="pl-c1">1.0</span>, <span class="pl-c1">1.0</span>, <span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>km<span class="pl-pds">"</span></span>))
<span class="pl-c1">PVector</span>(<span class="pl-c1">1000.0</span> m, <span class="pl-c1">1000.0</span> m, <span class="pl-c1">1000.0</span> m)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">PVector</span>(BigFloat)
<span class="pl-c1">PVector</span><span class="pl-c1">{BigFloat}</span>(<span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">PVector2D</span>(BigInt, <span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>m<span class="pl-pds">"</span></span>)
<span class="pl-c1">PVector2D</span>(<span class="pl-c1">0</span> m, <span class="pl-c1">0</span> m)


julia<span class="pl-k">&gt;</span> <span class="pl-c1">PVector</span>(<span class="pl-c1">1.0</span>, <span class="pl-c1">1.0</span>) <span class="pl-k">*</span> im
<span class="pl-c1">PVector2D</span><span class="pl-c1">{Complex{Float64}}</span>(<span class="pl-c1">0.0</span> <span class="pl-k">+</span> <span class="pl-c1">1.0im</span>, <span class="pl-c1">0.0</span> <span class="pl-k">+</span> <span class="pl-c1">1.0im</span>)

julia<span class="pl-k">&gt;</span> b <span class="pl-k">*</span> <span class="pl-c1">2.0</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>s<span class="pl-pds">"</span></span>
<span class="pl-c1">PVector</span>(<span class="pl-c1">2.0</span> m s, <span class="pl-c1">4.0</span> m s, <span class="pl-c1">6.0</span> m s)

julia<span class="pl-k">&gt;</span> b <span class="pl-k">+</span> <span class="pl-c1">PVector</span>(<span class="pl-c1">2.0</span>, <span class="pl-c1">2.0</span>, <span class="pl-c1">2.0</span>, <span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>m<span class="pl-pds">"</span></span>) <span class="pl-k">/</span> <span class="pl-c1">2</span>
<span class="pl-c1">PVector</span>(<span class="pl-c1">2.0</span> m, <span class="pl-c1">3.0</span> m, <span class="pl-c1">4.0</span> m)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">norm</span>(<span class="pl-c1">PVector2D</span>(<span class="pl-c1">3.0f0</span>,<span class="pl-c1">4.0f0</span>))
<span class="pl-c1">5.0f0</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">normalize</span>(<span class="pl-c1">PVector</span>(<span class="pl-c1">3.0</span>, <span class="pl-c1">4.0</span>))
<span class="pl-c1">PVector2D</span><span class="pl-c1">{Float64}</span>(<span class="pl-c1">0.6</span>, <span class="pl-c1">0.8</span>)

julia<span class="pl-k">&gt;</span> d <span class="pl-k">=</span> <span class="pl-c1">PVector</span>(<span class="pl-c1">3</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>kpc<span class="pl-pds">"</span></span>, <span class="pl-c1">4</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>kpc<span class="pl-pds">"</span></span>)
<span class="pl-c1">PVector2D</span>(<span class="pl-c1">3</span> kpc, <span class="pl-c1">4</span> kpc)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">norm</span>(d)
<span class="pl-c1">1.5428387907456837e20</span> m



julia<span class="pl-k">&gt;</span> <span class="pl-c1">distance</span>(<span class="pl-c1">PVector2D</span>(<span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>), <span class="pl-c1">PVector2D</span>(<span class="pl-c1">3.0</span>, <span class="pl-c1">4.0</span>))
<span class="pl-c1">5.0</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">rotate</span>(<span class="pl-c1">PVector</span>(<span class="pl-c1">1.0</span>, <span class="pl-c1">0.0</span>), <span class="pl-c1">0.5</span>pi)
<span class="pl-c1">PVector2D</span><span class="pl-c1">{Float64}</span>(<span class="pl-c1">6.123233995736766e-17</span>, <span class="pl-c1">1.0</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">rotate</span>(<span class="pl-c1">PVector</span>(<span class="pl-c1">1.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>), <span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">0.5</span>pi)
<span class="pl-c1">PVector</span><span class="pl-c1">{Float64}</span>(<span class="pl-c1">6.123233995736766e-17</span>, <span class="pl-c1">1.0</span>, <span class="pl-c1">0.0</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">rotate_z</span>(<span class="pl-c1">PVector</span>(<span class="pl-c1">1.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>), <span class="pl-c1">90.0</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>°<span class="pl-pds">"</span></span>)
<span class="pl-c1">PVector</span><span class="pl-c1">{Float64}</span>(<span class="pl-c1">0.0</span>, <span class="pl-c1">1.0</span>, <span class="pl-c1">0.0</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">rotate</span>(<span class="pl-c1">PVector</span>(<span class="pl-c1">1.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>), <span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">90.0</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>°<span class="pl-pds">"</span></span>, <span class="pl-c1">PVector</span>(<span class="pl-k">-</span><span class="pl-c1">1.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>))
<span class="pl-c1">PVector</span><span class="pl-c1">{Float64}</span>(<span class="pl-k">-</span><span class="pl-c1">1.0</span>, <span class="pl-c1">2.0</span>, <span class="pl-c1">0.0</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">rotate</span>(<span class="pl-c1">PVector</span>(<span class="pl-c1">0.0</span>, <span class="pl-c1">1.0</span>, <span class="pl-c1">0.0</span>), <span class="pl-c1">PVector</span>(<span class="pl-c1">0.0</span>, <span class="pl-c1">1.0</span>, <span class="pl-c1">1.0</span>), <span class="pl-c1">pi</span>)
<span class="pl-c1">PVector</span><span class="pl-c1">{Float64}</span>(<span class="pl-k">-</span><span class="pl-c1">8.659560562354932e-17</span>, <span class="pl-k">-</span><span class="pl-c1">2.220446049250313e-16</span>, <span class="pl-c1">0.9999999999999998</span>)

<span class="pl-c"><span class="pl-c">#</span> Coordinate Transformations</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">cylinderial</span>(<span class="pl-c1">PVector</span>(<span class="pl-c1">sqrt</span>(<span class="pl-c1">2</span>), <span class="pl-c1">sqrt</span>(<span class="pl-c1">2</span>), <span class="pl-c1">1.0</span>, <span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>m<span class="pl-pds">"</span></span>))
(<span class="pl-c1">2.0</span> m, <span class="pl-c1">0.7853981633974484</span>, <span class="pl-c1">1.0</span> m)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">cylinderial2xyz</span>(<span class="pl-c1">2.0</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>m<span class="pl-pds">"</span></span>, <span class="pl-c1">pi</span><span class="pl-k">/</span><span class="pl-c1">4</span>, <span class="pl-c1">1.0</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>m<span class="pl-pds">"</span></span>)
<span class="pl-c1">PVector</span>(<span class="pl-c1">1.4142135623730951</span> m, <span class="pl-c1">1.414213562373095</span> m, <span class="pl-c1">1.0</span> m)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">spherical</span>(<span class="pl-c1">PVector</span>(<span class="pl-c1">sqrt</span>(<span class="pl-c1">0.5</span>), <span class="pl-c1">sqrt</span>(<span class="pl-c1">0.5</span>), <span class="pl-c1">1.0</span>, <span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>m<span class="pl-pds">"</span></span>))
(<span class="pl-c1">1.4142135623730951</span> m, <span class="pl-c1">0.7853981633974484</span>, <span class="pl-c1">0.7853981633974483</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">spherical2xyz</span>(<span class="pl-c1">sqrt</span>(<span class="pl-c1">2</span>)<span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>m<span class="pl-pds">"</span></span>, <span class="pl-c1">pi</span><span class="pl-k">/</span><span class="pl-c1">4</span>, <span class="pl-c1">pi</span><span class="pl-k">/</span><span class="pl-c1">4</span>)
<span class="pl-c1">PVector</span>(<span class="pl-c1">0.7071067811865476</span> m, <span class="pl-c1">0.7071067811865475</span> m, <span class="pl-c1">1.0000000000000002</span> m)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">zero</span>(PVector{Float64})
<span class="pl-c1">PVector</span><span class="pl-c1">{Float64}</span>(<span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">iszero</span>(<span class="pl-c1">PVector</span>(<span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>m<span class="pl-pds">"</span></span>))
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">isnan</span>(<span class="pl-c1">PVector</span>(<span class="pl-c1">NaN</span>, <span class="pl-c1">NaN</span>))
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">PVector2D</span>(<span class="pl-c1">1.0</span>, <span class="pl-c1">1.0</span>) <span class="pl-k">≈</span> <span class="pl-c1">PVector2D</span>(<span class="pl-c1">1.0</span> <span class="pl-k">+</span> <span class="pl-c1">1.0e-8</span>, <span class="pl-c1">1.0</span> <span class="pl-k">+</span> <span class="pl-c1">1.0e-8</span>)
<span class="pl-c1">true</span>


julia<span class="pl-k">&gt;</span> <span class="pl-c1">ustrip</span>(<span class="pl-c1">PVector</span>(<span class="pl-c1">1.0</span>, <span class="pl-c1">1.0</span>, <span class="pl-c1">1.0</span>, <span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>km<span class="pl-pds">"</span></span>))
<span class="pl-c1">PVector</span><span class="pl-c1">{Float64}</span>(<span class="pl-c1">1.0</span>, <span class="pl-c1">1.0</span>, <span class="pl-c1">1.0</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">ustrip</span>(<span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>m<span class="pl-pds">"</span></span>, <span class="pl-c1">PVector</span>(<span class="pl-c1">1.0</span>, <span class="pl-c1">1.0</span>, <span class="pl-c1">1.0</span>, <span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>km<span class="pl-pds">"</span></span>))
<span class="pl-c1">PVector</span><span class="pl-c1">{Float64}</span>(<span class="pl-c1">1000.0</span>, <span class="pl-c1">1000.0</span>, <span class="pl-c1">1000.0</span>)</pre></div>
<h3><a id="user-content-particles" class="anchor" aria-hidden="true" href="#particles"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Particles</h3>
<p>We provide 2D version for each type below, for example, the 2D version of <code>Ball</code> is <code>Ball2D</code>:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; Massless()
Massless 0: Pos = PVector{Float64}(0.0, 0.0, 0.0), Vel = PVector{Float64}(0.0, 0.0, 0.0)

julia&gt; Massless(PVector(0.0, 0.0, 0.0), PVector(), 1)
Massless 1: Pos = PVector{Float64}(0.0, 0.0, 0.0), Vel = PVector{Float64}(0.0, 0.0, 0.0)

julia&gt; Massless2D(uCGS)
Massless 0: Pos = PVector2D(0.0 cm, 0.0 cm), Vel = PVector2D(0.0 cm s^-1, 0.0 cm s^-1)

julia&gt; Ball()
Ball 0: Pos = PVector{Float64}(0.0, 0.0, 0.0), Vel = PVector{Float64}(0.0, 0.0, 0.0), Acc = PVector{Float64}(0.0, 0.0, 0.0), Mass = 0.0

julia&gt; Ball(PVector(0.0u&quot;m&quot;, 0.0u&quot;m&quot;, 0.0u&quot;m&quot;), PVector(u&quot;m/s&quot;), PVector(u&quot;m/s^2&quot;), 0.0u&quot;kg&quot;, 1)
Ball 1: Pos = PVector(0.0 m, 0.0 m, 0.0 m), Vel = PVector(0.0 m s^-1, 0.0 m s^-1, 0.0 m s^-1), Acc = PVector(0.0 m s^-2, 0.0 m s^-2, 0.0 m s^-2), Mass = 0.0 kg

julia&gt; Star()
Star 0 STAR: Pos = PVector{Float64}(0.0, 0.0, 0.0), Vel = PVector{Float64}(0.0, 0.0, 0.0), Acc = PVector{Float64}(0.0, 0.0, 0.0), Mass = 0.0, Ti_endstep = 0, Ti_begstep = 0, Potential = 0.0, OldAcc = 0.0

julia&gt; SPHGas()
SPHGas 0 GAS: Pos = PVector{Float64}(0.0, 0.0, 0.0), Vel = PVector{Float64}(0.0, 0.0, 0.0), Acc = PVector{Float64}(0.0, 0.0, 0.0), Mass = 0.0, Ti_endstep = 0, Ti_begstep = 0, Potential = 0.0, OldAcc = 0.0, Entropy = 0.0, Density = 0.0, Hsml = 0.0, Left = 0.0, Right = 0.0, NumNgbFound = 0, RotVel = PVector{Float64}(0.0, 0.0, 0.0), DivVel = 0.0, CurlVel = 0.0, dHsmlRho = 0.0, Pressure = 0.0, DtEntropy = 0.0, MaxSignalVel = 0.0

julia&gt; a = Star(uAstro)
Star 0 STAR: Pos = PVector(0.0 kpc, 0.0 kpc, 0.0 kpc), Vel = PVector(0.0 kpc Gyr^-1, 0.0 kpc Gyr^-1, 0.0 kpc Gyr^-1), Acc = PVector(0.0 kpc Gyr^-2, 0.0 kpc Gyr^-2, 0.0 kpc Gyr^-2), Mass = 0.0 M⊙, Ti_endstep = 0, Ti_begstep = 0, Potential = 0.0 kpc^2 M⊙ Gyr^-2, OldAcc = 0.0 kpc Gyr^-2

julia&gt; b = SPHGas(uAstro)
SPHGas 0 GAS: Pos = PVector(0.0 kpc, 0.0 kpc, 0.0 kpc), Vel = PVector(0.0 kpc Gyr^-1, 0.0 kpc Gyr^-1, 0.0 kpc Gyr^-1), Acc = PVector(0.0 kpc Gyr^-2, 0.0 kpc Gyr^-2, 0.0 kpc Gyr^-2), Mass = 0.0 M⊙, Ti_endstep = 0, Ti_begstep = 0, Potential = 0.0 kpc^2 M⊙ Gyr^-2, OldAcc = 0.0 kpc Gyr^-2, Entropy = 0.0 kpc^2 M⊙ Gyr^-2 K^-1, Density = 0.0 M⊙ kpc^-3, Hsml = 0.0 kpc, Left = 0.0, Right = 0.0, NumNgbFound = 0, RotVel = PVector(0.0 kpc Gyr^-1, 0.0 kpc Gyr^-1, 0.0 kpc Gyr^-1), DivVel = 0.0 Gyr^-1, CurlVel = 0.0 Gyr^-1, dHsmlRho = 0.0 kpc, Pressure = 0.0 M⊙ Gyr^-2 kpc^-1, DtEntropy = 0.0 kpc^2 M⊙ Gyr^-3 K^-1, MaxSignalVel = 0.0 kpc Gyr^-1

julia&gt; distance(a,b)
0.0 m
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">Massless</span>()
Massless <span class="pl-c1">0</span><span class="pl-k">:</span> Pos <span class="pl-k">=</span> <span class="pl-c1">PVector</span><span class="pl-c1">{Float64}</span>(<span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>), Vel <span class="pl-k">=</span> <span class="pl-c1">PVector</span><span class="pl-c1">{Float64}</span>(<span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">Massless</span>(<span class="pl-c1">PVector</span>(<span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>), <span class="pl-c1">PVector</span>(), <span class="pl-c1">1</span>)
Massless <span class="pl-c1">1</span><span class="pl-k">:</span> Pos <span class="pl-k">=</span> <span class="pl-c1">PVector</span><span class="pl-c1">{Float64}</span>(<span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>), Vel <span class="pl-k">=</span> <span class="pl-c1">PVector</span><span class="pl-c1">{Float64}</span>(<span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">Massless2D</span>(uCGS)
Massless <span class="pl-c1">0</span><span class="pl-k">:</span> Pos <span class="pl-k">=</span> <span class="pl-c1">PVector2D</span>(<span class="pl-c1">0.0</span> cm, <span class="pl-c1">0.0</span> cm), Vel <span class="pl-k">=</span> <span class="pl-c1">PVector2D</span>(<span class="pl-c1">0.0</span> cm s<span class="pl-k">^-</span><span class="pl-c1">1</span>, <span class="pl-c1">0.0</span> cm s<span class="pl-k">^-</span><span class="pl-c1">1</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">Ball</span>()
Ball <span class="pl-c1">0</span><span class="pl-k">:</span> Pos <span class="pl-k">=</span> <span class="pl-c1">PVector</span><span class="pl-c1">{Float64}</span>(<span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>), Vel <span class="pl-k">=</span> <span class="pl-c1">PVector</span><span class="pl-c1">{Float64}</span>(<span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>), Acc <span class="pl-k">=</span> <span class="pl-c1">PVector</span><span class="pl-c1">{Float64}</span>(<span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>), Mass <span class="pl-k">=</span> <span class="pl-c1">0.0</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">Ball</span>(<span class="pl-c1">PVector</span>(<span class="pl-c1">0.0</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>m<span class="pl-pds">"</span></span>, <span class="pl-c1">0.0</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>m<span class="pl-pds">"</span></span>, <span class="pl-c1">0.0</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>m<span class="pl-pds">"</span></span>), <span class="pl-c1">PVector</span>(<span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>m/s<span class="pl-pds">"</span></span>), <span class="pl-c1">PVector</span>(<span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>m/s^2<span class="pl-pds">"</span></span>), <span class="pl-c1">0.0</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>kg<span class="pl-pds">"</span></span>, <span class="pl-c1">1</span>)
Ball <span class="pl-c1">1</span><span class="pl-k">:</span> Pos <span class="pl-k">=</span> <span class="pl-c1">PVector</span>(<span class="pl-c1">0.0</span> m, <span class="pl-c1">0.0</span> m, <span class="pl-c1">0.0</span> m), Vel <span class="pl-k">=</span> <span class="pl-c1">PVector</span>(<span class="pl-c1">0.0</span> m s<span class="pl-k">^-</span><span class="pl-c1">1</span>, <span class="pl-c1">0.0</span> m s<span class="pl-k">^-</span><span class="pl-c1">1</span>, <span class="pl-c1">0.0</span> m s<span class="pl-k">^-</span><span class="pl-c1">1</span>), Acc <span class="pl-k">=</span> <span class="pl-c1">PVector</span>(<span class="pl-c1">0.0</span> m s<span class="pl-k">^-</span><span class="pl-c1">2</span>, <span class="pl-c1">0.0</span> m s<span class="pl-k">^-</span><span class="pl-c1">2</span>, <span class="pl-c1">0.0</span> m s<span class="pl-k">^-</span><span class="pl-c1">2</span>), Mass <span class="pl-k">=</span> <span class="pl-c1">0.0</span> kg

julia<span class="pl-k">&gt;</span> <span class="pl-c1">Star</span>()
Star <span class="pl-c1">0</span> STAR<span class="pl-k">:</span> Pos <span class="pl-k">=</span> <span class="pl-c1">PVector</span><span class="pl-c1">{Float64}</span>(<span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>), Vel <span class="pl-k">=</span> <span class="pl-c1">PVector</span><span class="pl-c1">{Float64}</span>(<span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>), Acc <span class="pl-k">=</span> <span class="pl-c1">PVector</span><span class="pl-c1">{Float64}</span>(<span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>), Mass <span class="pl-k">=</span> <span class="pl-c1">0.0</span>, Ti_endstep <span class="pl-k">=</span> <span class="pl-c1">0</span>, Ti_begstep <span class="pl-k">=</span> <span class="pl-c1">0</span>, Potential <span class="pl-k">=</span> <span class="pl-c1">0.0</span>, OldAcc <span class="pl-k">=</span> <span class="pl-c1">0.0</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">SPHGas</span>()
SPHGas <span class="pl-c1">0</span> GAS<span class="pl-k">:</span> Pos <span class="pl-k">=</span> <span class="pl-c1">PVector</span><span class="pl-c1">{Float64}</span>(<span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>), Vel <span class="pl-k">=</span> <span class="pl-c1">PVector</span><span class="pl-c1">{Float64}</span>(<span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>), Acc <span class="pl-k">=</span> <span class="pl-c1">PVector</span><span class="pl-c1">{Float64}</span>(<span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>), Mass <span class="pl-k">=</span> <span class="pl-c1">0.0</span>, Ti_endstep <span class="pl-k">=</span> <span class="pl-c1">0</span>, Ti_begstep <span class="pl-k">=</span> <span class="pl-c1">0</span>, Potential <span class="pl-k">=</span> <span class="pl-c1">0.0</span>, OldAcc <span class="pl-k">=</span> <span class="pl-c1">0.0</span>, Entropy <span class="pl-k">=</span> <span class="pl-c1">0.0</span>, Density <span class="pl-k">=</span> <span class="pl-c1">0.0</span>, Hsml <span class="pl-k">=</span> <span class="pl-c1">0.0</span>, Left <span class="pl-k">=</span> <span class="pl-c1">0.0</span>, Right <span class="pl-k">=</span> <span class="pl-c1">0.0</span>, NumNgbFound <span class="pl-k">=</span> <span class="pl-c1">0</span>, RotVel <span class="pl-k">=</span> <span class="pl-c1">PVector</span><span class="pl-c1">{Float64}</span>(<span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>), DivVel <span class="pl-k">=</span> <span class="pl-c1">0.0</span>, CurlVel <span class="pl-k">=</span> <span class="pl-c1">0.0</span>, dHsmlRho <span class="pl-k">=</span> <span class="pl-c1">0.0</span>, Pressure <span class="pl-k">=</span> <span class="pl-c1">0.0</span>, DtEntropy <span class="pl-k">=</span> <span class="pl-c1">0.0</span>, MaxSignalVel <span class="pl-k">=</span> <span class="pl-c1">0.0</span>

julia<span class="pl-k">&gt;</span> a <span class="pl-k">=</span> <span class="pl-c1">Star</span>(uAstro)
Star <span class="pl-c1">0</span> STAR<span class="pl-k">:</span> Pos <span class="pl-k">=</span> <span class="pl-c1">PVector</span>(<span class="pl-c1">0.0</span> kpc, <span class="pl-c1">0.0</span> kpc, <span class="pl-c1">0.0</span> kpc), Vel <span class="pl-k">=</span> <span class="pl-c1">PVector</span>(<span class="pl-c1">0.0</span> kpc Gyr<span class="pl-k">^-</span><span class="pl-c1">1</span>, <span class="pl-c1">0.0</span> kpc Gyr<span class="pl-k">^-</span><span class="pl-c1">1</span>, <span class="pl-c1">0.0</span> kpc Gyr<span class="pl-k">^-</span><span class="pl-c1">1</span>), Acc <span class="pl-k">=</span> <span class="pl-c1">PVector</span>(<span class="pl-c1">0.0</span> kpc Gyr<span class="pl-k">^-</span><span class="pl-c1">2</span>, <span class="pl-c1">0.0</span> kpc Gyr<span class="pl-k">^-</span><span class="pl-c1">2</span>, <span class="pl-c1">0.0</span> kpc Gyr<span class="pl-k">^-</span><span class="pl-c1">2</span>), Mass <span class="pl-k">=</span> <span class="pl-c1">0.0</span> M⊙, Ti_endstep <span class="pl-k">=</span> <span class="pl-c1">0</span>, Ti_begstep <span class="pl-k">=</span> <span class="pl-c1">0</span>, Potential <span class="pl-k">=</span> <span class="pl-c1">0.0</span> kpc<span class="pl-k">^</span><span class="pl-c1">2</span> M⊙ Gyr<span class="pl-k">^-</span><span class="pl-c1">2</span>, OldAcc <span class="pl-k">=</span> <span class="pl-c1">0.0</span> kpc Gyr<span class="pl-k">^-</span><span class="pl-c1">2</span>

julia<span class="pl-k">&gt;</span> b <span class="pl-k">=</span> <span class="pl-c1">SPHGas</span>(uAstro)
SPHGas <span class="pl-c1">0</span> GAS<span class="pl-k">:</span> Pos <span class="pl-k">=</span> <span class="pl-c1">PVector</span>(<span class="pl-c1">0.0</span> kpc, <span class="pl-c1">0.0</span> kpc, <span class="pl-c1">0.0</span> kpc), Vel <span class="pl-k">=</span> <span class="pl-c1">PVector</span>(<span class="pl-c1">0.0</span> kpc Gyr<span class="pl-k">^-</span><span class="pl-c1">1</span>, <span class="pl-c1">0.0</span> kpc Gyr<span class="pl-k">^-</span><span class="pl-c1">1</span>, <span class="pl-c1">0.0</span> kpc Gyr<span class="pl-k">^-</span><span class="pl-c1">1</span>), Acc <span class="pl-k">=</span> <span class="pl-c1">PVector</span>(<span class="pl-c1">0.0</span> kpc Gyr<span class="pl-k">^-</span><span class="pl-c1">2</span>, <span class="pl-c1">0.0</span> kpc Gyr<span class="pl-k">^-</span><span class="pl-c1">2</span>, <span class="pl-c1">0.0</span> kpc Gyr<span class="pl-k">^-</span><span class="pl-c1">2</span>), Mass <span class="pl-k">=</span> <span class="pl-c1">0.0</span> M⊙, Ti_endstep <span class="pl-k">=</span> <span class="pl-c1">0</span>, Ti_begstep <span class="pl-k">=</span> <span class="pl-c1">0</span>, Potential <span class="pl-k">=</span> <span class="pl-c1">0.0</span> kpc<span class="pl-k">^</span><span class="pl-c1">2</span> M⊙ Gyr<span class="pl-k">^-</span><span class="pl-c1">2</span>, OldAcc <span class="pl-k">=</span> <span class="pl-c1">0.0</span> kpc Gyr<span class="pl-k">^-</span><span class="pl-c1">2</span>, Entropy <span class="pl-k">=</span> <span class="pl-c1">0.0</span> kpc<span class="pl-k">^</span><span class="pl-c1">2</span> M⊙ Gyr<span class="pl-k">^-</span><span class="pl-c1">2</span> K<span class="pl-k">^-</span><span class="pl-c1">1</span>, Density <span class="pl-k">=</span> <span class="pl-c1">0.0</span> M⊙ kpc<span class="pl-k">^-</span><span class="pl-c1">3</span>, Hsml <span class="pl-k">=</span> <span class="pl-c1">0.0</span> kpc, Left <span class="pl-k">=</span> <span class="pl-c1">0.0</span>, Right <span class="pl-k">=</span> <span class="pl-c1">0.0</span>, NumNgbFound <span class="pl-k">=</span> <span class="pl-c1">0</span>, RotVel <span class="pl-k">=</span> <span class="pl-c1">PVector</span>(<span class="pl-c1">0.0</span> kpc Gyr<span class="pl-k">^-</span><span class="pl-c1">1</span>, <span class="pl-c1">0.0</span> kpc Gyr<span class="pl-k">^-</span><span class="pl-c1">1</span>, <span class="pl-c1">0.0</span> kpc Gyr<span class="pl-k">^-</span><span class="pl-c1">1</span>), DivVel <span class="pl-k">=</span> <span class="pl-c1">0.0</span> Gyr<span class="pl-k">^-</span><span class="pl-c1">1</span>, CurlVel <span class="pl-k">=</span> <span class="pl-c1">0.0</span> Gyr<span class="pl-k">^-</span><span class="pl-c1">1</span>, dHsmlRho <span class="pl-k">=</span> <span class="pl-c1">0.0</span> kpc, Pressure <span class="pl-k">=</span> <span class="pl-c1">0.0</span> M⊙ Gyr<span class="pl-k">^-</span><span class="pl-c1">2</span> kpc<span class="pl-k">^-</span><span class="pl-c1">1</span>, DtEntropy <span class="pl-k">=</span> <span class="pl-c1">0.0</span> kpc<span class="pl-k">^</span><span class="pl-c1">2</span> M⊙ Gyr<span class="pl-k">^-</span><span class="pl-c1">3</span> K<span class="pl-k">^-</span><span class="pl-c1">1</span>, MaxSignalVel <span class="pl-k">=</span> <span class="pl-c1">0.0</span> kpc Gyr<span class="pl-k">^-</span><span class="pl-c1">1</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">distance</span>(a,b)
<span class="pl-c1">0.0</span> m</pre></div>
<h3><a id="user-content-structarraysjl-support" class="anchor" aria-hidden="true" href="#structarraysjl-support"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>StructArrays.jl support</h3>
<p><code>StructArray</code> provides a more efficient way to iterate on a field of particles:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="sArray = [Star() for i in 1:5]
sStruct = StructArray(sArray)

# Easier to set properties, and even faster!
sStruct.Mass[1] = 1000.0

assign_particles(sStruct, :Pos, randn_pvector(5))

mean(sStruct.Pos)
"><pre>sArray <span class="pl-k">=</span> [<span class="pl-c1">Star</span>() <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">5</span>]
sStruct <span class="pl-k">=</span> <span class="pl-c1">StructArray</span>(sArray)

<span class="pl-c"><span class="pl-c">#</span> Easier to set properties, and even faster!</span>
sStruct<span class="pl-k">.</span>Mass[<span class="pl-c1">1</span>] <span class="pl-k">=</span> <span class="pl-c1">1000.0</span>

<span class="pl-c1">assign_particles</span>(sStruct, <span class="pl-c1">:Pos</span>, <span class="pl-c1">randn_pvector</span>(<span class="pl-c1">5</span>))

<span class="pl-c1">mean</span>(sStruct<span class="pl-k">.</span>Pos)</pre></div>
<h3><a id="user-content-random-and-conversion" class="anchor" aria-hidden="true" href="#random-and-conversion"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Random and Conversion</h3>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; p = rand_pvector(3)
3-element Array{PVector{Float64},1}:
 PVector{Float64}(0.899541890819791, 0.49609709458549345, 0.22817220536717397)
 PVector{Float64}(0.21907343513386301, 0.39110699072427035, 0.3502946880565312)
 PVector{Float64}(0.8107782153679699, 0.20218167820102884, 0.94236923352867)

julia&gt; pu = rand_pvector(3, u&quot;m&quot;)
3-element Array{PVector{Quantity{Float64,𝐋,Unitful.FreeUnits{(m,),𝐋,nothing}}},1}:
 PVector(0.5346672699901402 m, 0.6988269071898365 m, 0.8120077168096169 m)  
 PVector(0.46886820909936744 m, 0.9575982422487646 m, 0.10413358701332642 m)
 PVector(0.0219005354136228 m, 0.327612194392396 m, 0.2837471711064179 m)

julia&gt; p_Ball = [Ball(uSI) for i=1:3]
3-element Array{Ball{Int64},1}:
 Ball 0: Pos = PVector(0.0 m, 0.0 m, 0.0 m), Vel = PVector(0.0 m s^-1, 0.0 m s^-1, 0.0 m s^-1), Acc = PVector(0.0 m s^-2, 0.0 m s^-2, 0.0 m s^-2), Mass = 0.0 kg
 Ball 0: Pos = PVector(0.0 m, 0.0 m, 0.0 m), Vel = PVector(0.0 m s^-1, 0.0 m s^-1, 0.0 m s^-1), Acc = PVector(0.0 m s^-2, 0.0 m s^-2, 0.0 m s^-2), Mass = 0.0 kg
 Ball 0: Pos = PVector(0.0 m, 0.0 m, 0.0 m), Vel = PVector(0.0 m s^-1, 0.0 m s^-1, 0.0 m s^-1), Acc = PVector(0.0 m s^-2, 0.0 m s^-2, 0.0 m s^-2), Mass = 0.0 kg

julia&gt; assign_points(p_Ball, :Pos, pu)

julia&gt; p_Ball
3-element Array{Ball{Int64},1}:
 Ball 0: Pos = PVector(0.5346672699901402 m, 0.6988269071898365 m, 0.8120077168096169 m), Vel = PVector(0.0 m s^-1, 0.0 m s^-1, 0.0 m s^-1), Acc = PVector(0.0 m s^-2, 0.0 m s^-2, 0.0 m s^-2), Mass = 0.0 kg
 Ball 0: Pos = PVector(0.46886820909936744 m, 0.9575982422487646 m, 0.10413358701332642 m), Vel = PVector(0.0 m s^-1, 0.0 m 
s^-1, 0.0 m s^-1), Acc = PVector(0.0 m s^-2, 0.0 m s^-2, 0.0 m s^-2), Mass = 0.0 kg
 Ball 0: Pos = PVector(0.0219005354136228 m, 0.327612194392396 m, 0.2837471711064179 m), Vel = PVector(0.0 m s^-1, 0.0 m s^-1, 0.0 m s^-1), Acc = PVector(0.0 m s^-2, 0.0 m s^-2, 0.0 m s^-2), Mass = 0.0 kg


julia&gt; pconvert([1.0, 2.0, 3.0])
PVector{Float64}(1.0, 2.0, 3.0)

julia&gt; pconvert([1.0u&quot;m&quot; 4.0u&quot;m&quot;;
                 2.0u&quot;m&quot; 5.0u&quot;m&quot;;
                 3.0u&quot;m&quot; 6.0u&quot;m&quot;])
2-element Array{PVector,1}:
 PVector(1.0 m, 2.0 m, 3.0 m)
 PVector(4.0 m, 5.0 m, 6.0 m)
"><pre>julia<span class="pl-k">&gt;</span> p <span class="pl-k">=</span> <span class="pl-c1">rand_pvector</span>(<span class="pl-c1">3</span>)
<span class="pl-c1">3</span><span class="pl-k">-</span>element Array{PVector{Float64},<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">PVector</span><span class="pl-c1">{Float64}</span>(<span class="pl-c1">0.899541890819791</span>, <span class="pl-c1">0.49609709458549345</span>, <span class="pl-c1">0.22817220536717397</span>)
 <span class="pl-c1">PVector</span><span class="pl-c1">{Float64}</span>(<span class="pl-c1">0.21907343513386301</span>, <span class="pl-c1">0.39110699072427035</span>, <span class="pl-c1">0.3502946880565312</span>)
 <span class="pl-c1">PVector</span><span class="pl-c1">{Float64}</span>(<span class="pl-c1">0.8107782153679699</span>, <span class="pl-c1">0.20218167820102884</span>, <span class="pl-c1">0.94236923352867</span>)

julia<span class="pl-k">&gt;</span> pu <span class="pl-k">=</span> <span class="pl-c1">rand_pvector</span>(<span class="pl-c1">3</span>, <span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>m<span class="pl-pds">"</span></span>)
<span class="pl-c1">3</span><span class="pl-k">-</span>element Array{PVector{Quantity{Float64,𝐋,Unitful<span class="pl-k">.</span>FreeUnits{(m,),𝐋,<span class="pl-c1">nothing</span>}}},<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">PVector</span>(<span class="pl-c1">0.5346672699901402</span> m, <span class="pl-c1">0.6988269071898365</span> m, <span class="pl-c1">0.8120077168096169</span> m)  
 <span class="pl-c1">PVector</span>(<span class="pl-c1">0.46886820909936744</span> m, <span class="pl-c1">0.9575982422487646</span> m, <span class="pl-c1">0.10413358701332642</span> m)
 <span class="pl-c1">PVector</span>(<span class="pl-c1">0.0219005354136228</span> m, <span class="pl-c1">0.327612194392396</span> m, <span class="pl-c1">0.2837471711064179</span> m)

julia<span class="pl-k">&gt;</span> p_Ball <span class="pl-k">=</span> [<span class="pl-c1">Ball</span>(uSI) <span class="pl-k">for</span> i<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">3</span>]
<span class="pl-c1">3</span><span class="pl-k">-</span>element Array{Ball{Int64},<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 Ball <span class="pl-c1">0</span><span class="pl-k">:</span> Pos <span class="pl-k">=</span> <span class="pl-c1">PVector</span>(<span class="pl-c1">0.0</span> m, <span class="pl-c1">0.0</span> m, <span class="pl-c1">0.0</span> m), Vel <span class="pl-k">=</span> <span class="pl-c1">PVector</span>(<span class="pl-c1">0.0</span> m s<span class="pl-k">^-</span><span class="pl-c1">1</span>, <span class="pl-c1">0.0</span> m s<span class="pl-k">^-</span><span class="pl-c1">1</span>, <span class="pl-c1">0.0</span> m s<span class="pl-k">^-</span><span class="pl-c1">1</span>), Acc <span class="pl-k">=</span> <span class="pl-c1">PVector</span>(<span class="pl-c1">0.0</span> m s<span class="pl-k">^-</span><span class="pl-c1">2</span>, <span class="pl-c1">0.0</span> m s<span class="pl-k">^-</span><span class="pl-c1">2</span>, <span class="pl-c1">0.0</span> m s<span class="pl-k">^-</span><span class="pl-c1">2</span>), Mass <span class="pl-k">=</span> <span class="pl-c1">0.0</span> kg
 Ball <span class="pl-c1">0</span><span class="pl-k">:</span> Pos <span class="pl-k">=</span> <span class="pl-c1">PVector</span>(<span class="pl-c1">0.0</span> m, <span class="pl-c1">0.0</span> m, <span class="pl-c1">0.0</span> m), Vel <span class="pl-k">=</span> <span class="pl-c1">PVector</span>(<span class="pl-c1">0.0</span> m s<span class="pl-k">^-</span><span class="pl-c1">1</span>, <span class="pl-c1">0.0</span> m s<span class="pl-k">^-</span><span class="pl-c1">1</span>, <span class="pl-c1">0.0</span> m s<span class="pl-k">^-</span><span class="pl-c1">1</span>), Acc <span class="pl-k">=</span> <span class="pl-c1">PVector</span>(<span class="pl-c1">0.0</span> m s<span class="pl-k">^-</span><span class="pl-c1">2</span>, <span class="pl-c1">0.0</span> m s<span class="pl-k">^-</span><span class="pl-c1">2</span>, <span class="pl-c1">0.0</span> m s<span class="pl-k">^-</span><span class="pl-c1">2</span>), Mass <span class="pl-k">=</span> <span class="pl-c1">0.0</span> kg
 Ball <span class="pl-c1">0</span><span class="pl-k">:</span> Pos <span class="pl-k">=</span> <span class="pl-c1">PVector</span>(<span class="pl-c1">0.0</span> m, <span class="pl-c1">0.0</span> m, <span class="pl-c1">0.0</span> m), Vel <span class="pl-k">=</span> <span class="pl-c1">PVector</span>(<span class="pl-c1">0.0</span> m s<span class="pl-k">^-</span><span class="pl-c1">1</span>, <span class="pl-c1">0.0</span> m s<span class="pl-k">^-</span><span class="pl-c1">1</span>, <span class="pl-c1">0.0</span> m s<span class="pl-k">^-</span><span class="pl-c1">1</span>), Acc <span class="pl-k">=</span> <span class="pl-c1">PVector</span>(<span class="pl-c1">0.0</span> m s<span class="pl-k">^-</span><span class="pl-c1">2</span>, <span class="pl-c1">0.0</span> m s<span class="pl-k">^-</span><span class="pl-c1">2</span>, <span class="pl-c1">0.0</span> m s<span class="pl-k">^-</span><span class="pl-c1">2</span>), Mass <span class="pl-k">=</span> <span class="pl-c1">0.0</span> kg

julia<span class="pl-k">&gt;</span> <span class="pl-c1">assign_points</span>(p_Ball, <span class="pl-c1">:Pos</span>, pu)

julia<span class="pl-k">&gt;</span> p_Ball
<span class="pl-c1">3</span><span class="pl-k">-</span>element Array{Ball{Int64},<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 Ball <span class="pl-c1">0</span><span class="pl-k">:</span> Pos <span class="pl-k">=</span> <span class="pl-c1">PVector</span>(<span class="pl-c1">0.5346672699901402</span> m, <span class="pl-c1">0.6988269071898365</span> m, <span class="pl-c1">0.8120077168096169</span> m), Vel <span class="pl-k">=</span> <span class="pl-c1">PVector</span>(<span class="pl-c1">0.0</span> m s<span class="pl-k">^-</span><span class="pl-c1">1</span>, <span class="pl-c1">0.0</span> m s<span class="pl-k">^-</span><span class="pl-c1">1</span>, <span class="pl-c1">0.0</span> m s<span class="pl-k">^-</span><span class="pl-c1">1</span>), Acc <span class="pl-k">=</span> <span class="pl-c1">PVector</span>(<span class="pl-c1">0.0</span> m s<span class="pl-k">^-</span><span class="pl-c1">2</span>, <span class="pl-c1">0.0</span> m s<span class="pl-k">^-</span><span class="pl-c1">2</span>, <span class="pl-c1">0.0</span> m s<span class="pl-k">^-</span><span class="pl-c1">2</span>), Mass <span class="pl-k">=</span> <span class="pl-c1">0.0</span> kg
 Ball <span class="pl-c1">0</span><span class="pl-k">:</span> Pos <span class="pl-k">=</span> <span class="pl-c1">PVector</span>(<span class="pl-c1">0.46886820909936744</span> m, <span class="pl-c1">0.9575982422487646</span> m, <span class="pl-c1">0.10413358701332642</span> m), Vel <span class="pl-k">=</span> <span class="pl-c1">PVector</span>(<span class="pl-c1">0.0</span> m s<span class="pl-k">^-</span><span class="pl-c1">1</span>, <span class="pl-c1">0.0</span> m 
s<span class="pl-k">^-</span><span class="pl-c1">1</span>, <span class="pl-c1">0.0</span> m s<span class="pl-k">^-</span><span class="pl-c1">1</span>), Acc <span class="pl-k">=</span> <span class="pl-c1">PVector</span>(<span class="pl-c1">0.0</span> m s<span class="pl-k">^-</span><span class="pl-c1">2</span>, <span class="pl-c1">0.0</span> m s<span class="pl-k">^-</span><span class="pl-c1">2</span>, <span class="pl-c1">0.0</span> m s<span class="pl-k">^-</span><span class="pl-c1">2</span>), Mass <span class="pl-k">=</span> <span class="pl-c1">0.0</span> kg
 Ball <span class="pl-c1">0</span><span class="pl-k">:</span> Pos <span class="pl-k">=</span> <span class="pl-c1">PVector</span>(<span class="pl-c1">0.0219005354136228</span> m, <span class="pl-c1">0.327612194392396</span> m, <span class="pl-c1">0.2837471711064179</span> m), Vel <span class="pl-k">=</span> <span class="pl-c1">PVector</span>(<span class="pl-c1">0.0</span> m s<span class="pl-k">^-</span><span class="pl-c1">1</span>, <span class="pl-c1">0.0</span> m s<span class="pl-k">^-</span><span class="pl-c1">1</span>, <span class="pl-c1">0.0</span> m s<span class="pl-k">^-</span><span class="pl-c1">1</span>), Acc <span class="pl-k">=</span> <span class="pl-c1">PVector</span>(<span class="pl-c1">0.0</span> m s<span class="pl-k">^-</span><span class="pl-c1">2</span>, <span class="pl-c1">0.0</span> m s<span class="pl-k">^-</span><span class="pl-c1">2</span>, <span class="pl-c1">0.0</span> m s<span class="pl-k">^-</span><span class="pl-c1">2</span>), Mass <span class="pl-k">=</span> <span class="pl-c1">0.0</span> kg


julia<span class="pl-k">&gt;</span> <span class="pl-c1">pconvert</span>([<span class="pl-c1">1.0</span>, <span class="pl-c1">2.0</span>, <span class="pl-c1">3.0</span>])
<span class="pl-c1">PVector</span><span class="pl-c1">{Float64}</span>(<span class="pl-c1">1.0</span>, <span class="pl-c1">2.0</span>, <span class="pl-c1">3.0</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">pconvert</span>([<span class="pl-c1">1.0</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>m<span class="pl-pds">"</span></span> <span class="pl-c1">4.0</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>m<span class="pl-pds">"</span></span>;
                 <span class="pl-c1">2.0</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>m<span class="pl-pds">"</span></span> <span class="pl-c1">5.0</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>m<span class="pl-pds">"</span></span>;
                 <span class="pl-c1">3.0</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>m<span class="pl-pds">"</span></span> <span class="pl-c1">6.0</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>m<span class="pl-pds">"</span></span>])
<span class="pl-c1">2</span><span class="pl-k">-</span>element Array{PVector,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">PVector</span>(<span class="pl-c1">1.0</span> m, <span class="pl-c1">2.0</span> m, <span class="pl-c1">3.0</span> m)
 <span class="pl-c1">PVector</span>(<span class="pl-c1">4.0</span> m, <span class="pl-c1">5.0</span> m, <span class="pl-c1">6.0</span> m)</pre></div>
<h3><a id="user-content-extent" class="anchor" aria-hidden="true" href="#extent"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Extent</h3>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; p = [Ball(PVector(-1.0u&quot;m&quot;, 1.0u&quot;m&quot;, 1.0u&quot;m&quot;), PVector(u&quot;m/s&quot;), PVector(u&quot;m/s^2&quot;), 1.0u&quot;kg&quot;, 1),
            Ball(PVector(3.0u&quot;m&quot;, -3.0u&quot;m&quot;, -3.0u&quot;m&quot;), PVector(u&quot;m/s&quot;), PVector(u&quot;m/s^2&quot;), 3000.0u&quot;g&quot;, 2)]
2-element Array{Ball{Int64},1}:
 Ball 1: Pos = PVector(-1.0 m, 1.0 m, 1.0 m), Vel = PVector(0.0 m s^-1, 0.0 m s^-1, 0.0 m s^-1), Acc = PVector(0.0 m s^-2, 0.0 m s^-2, 0.0 m s^-2), Mass = 1.0 kg
 Ball 2: Pos = PVector(3.0 m, -3.0 m, -3.0 m), Vel = PVector(0.0 m s^-1, 0.0 m s^-1, 0.0 m s^-1), Acc = PVector(0.0 m s^-2, 0.0 m s^-2, 0.0 m s^-2), Mass = 1000.0 g

julia&gt; minimum_x(p)
-1.0 m

julia&gt; maximum_x(p)
3.0 m

julia&gt; center(p)
PVector(1.0 m, -1.0 m, -1.0 m)

julia&gt; pos_center(p)
PVector(1.0 m, -1.0 m, -1.0 m)

julia&gt; mass_center(p)
PVector(2.0 m, -2.0 m, -2.0 m)

julia&gt; median(p, :Pos)
PVector(1.0 m, -1.0 m, -1.0 m)

julia&gt; extent(p)
Extent: xMin = -1.0 m, xMax = 3.0 m, yMin = -3.0 m, yMax = 1.0 m, zMin = -3.0 m, zMax = 1.0 m, SideLength = 4.0 m, Center = PVector(1.0 m, -1.0 m, -1.0 m)
"><pre>julia<span class="pl-k">&gt;</span> p <span class="pl-k">=</span> [<span class="pl-c1">Ball</span>(<span class="pl-c1">PVector</span>(<span class="pl-k">-</span><span class="pl-c1">1.0</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>m<span class="pl-pds">"</span></span>, <span class="pl-c1">1.0</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>m<span class="pl-pds">"</span></span>, <span class="pl-c1">1.0</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>m<span class="pl-pds">"</span></span>), <span class="pl-c1">PVector</span>(<span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>m/s<span class="pl-pds">"</span></span>), <span class="pl-c1">PVector</span>(<span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>m/s^2<span class="pl-pds">"</span></span>), <span class="pl-c1">1.0</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>kg<span class="pl-pds">"</span></span>, <span class="pl-c1">1</span>),
            <span class="pl-c1">Ball</span>(<span class="pl-c1">PVector</span>(<span class="pl-c1">3.0</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>m<span class="pl-pds">"</span></span>, <span class="pl-k">-</span><span class="pl-c1">3.0</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>m<span class="pl-pds">"</span></span>, <span class="pl-k">-</span><span class="pl-c1">3.0</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>m<span class="pl-pds">"</span></span>), <span class="pl-c1">PVector</span>(<span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>m/s<span class="pl-pds">"</span></span>), <span class="pl-c1">PVector</span>(<span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>m/s^2<span class="pl-pds">"</span></span>), <span class="pl-c1">3000.0</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>g<span class="pl-pds">"</span></span>, <span class="pl-c1">2</span>)]
<span class="pl-c1">2</span><span class="pl-k">-</span>element Array{Ball{Int64},<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 Ball <span class="pl-c1">1</span><span class="pl-k">:</span> Pos <span class="pl-k">=</span> <span class="pl-c1">PVector</span>(<span class="pl-k">-</span><span class="pl-c1">1.0</span> m, <span class="pl-c1">1.0</span> m, <span class="pl-c1">1.0</span> m), Vel <span class="pl-k">=</span> <span class="pl-c1">PVector</span>(<span class="pl-c1">0.0</span> m s<span class="pl-k">^-</span><span class="pl-c1">1</span>, <span class="pl-c1">0.0</span> m s<span class="pl-k">^-</span><span class="pl-c1">1</span>, <span class="pl-c1">0.0</span> m s<span class="pl-k">^-</span><span class="pl-c1">1</span>), Acc <span class="pl-k">=</span> <span class="pl-c1">PVector</span>(<span class="pl-c1">0.0</span> m s<span class="pl-k">^-</span><span class="pl-c1">2</span>, <span class="pl-c1">0.0</span> m s<span class="pl-k">^-</span><span class="pl-c1">2</span>, <span class="pl-c1">0.0</span> m s<span class="pl-k">^-</span><span class="pl-c1">2</span>), Mass <span class="pl-k">=</span> <span class="pl-c1">1.0</span> kg
 Ball <span class="pl-c1">2</span><span class="pl-k">:</span> Pos <span class="pl-k">=</span> <span class="pl-c1">PVector</span>(<span class="pl-c1">3.0</span> m, <span class="pl-k">-</span><span class="pl-c1">3.0</span> m, <span class="pl-k">-</span><span class="pl-c1">3.0</span> m), Vel <span class="pl-k">=</span> <span class="pl-c1">PVector</span>(<span class="pl-c1">0.0</span> m s<span class="pl-k">^-</span><span class="pl-c1">1</span>, <span class="pl-c1">0.0</span> m s<span class="pl-k">^-</span><span class="pl-c1">1</span>, <span class="pl-c1">0.0</span> m s<span class="pl-k">^-</span><span class="pl-c1">1</span>), Acc <span class="pl-k">=</span> <span class="pl-c1">PVector</span>(<span class="pl-c1">0.0</span> m s<span class="pl-k">^-</span><span class="pl-c1">2</span>, <span class="pl-c1">0.0</span> m s<span class="pl-k">^-</span><span class="pl-c1">2</span>, <span class="pl-c1">0.0</span> m s<span class="pl-k">^-</span><span class="pl-c1">2</span>), Mass <span class="pl-k">=</span> <span class="pl-c1">1000.0</span> g

julia<span class="pl-k">&gt;</span> <span class="pl-c1">minimum_x</span>(p)
<span class="pl-k">-</span><span class="pl-c1">1.0</span> m

julia<span class="pl-k">&gt;</span> <span class="pl-c1">maximum_x</span>(p)
<span class="pl-c1">3.0</span> m

julia<span class="pl-k">&gt;</span> <span class="pl-c1">center</span>(p)
<span class="pl-c1">PVector</span>(<span class="pl-c1">1.0</span> m, <span class="pl-k">-</span><span class="pl-c1">1.0</span> m, <span class="pl-k">-</span><span class="pl-c1">1.0</span> m)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">pos_center</span>(p)
<span class="pl-c1">PVector</span>(<span class="pl-c1">1.0</span> m, <span class="pl-k">-</span><span class="pl-c1">1.0</span> m, <span class="pl-k">-</span><span class="pl-c1">1.0</span> m)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">mass_center</span>(p)
<span class="pl-c1">PVector</span>(<span class="pl-c1">2.0</span> m, <span class="pl-k">-</span><span class="pl-c1">2.0</span> m, <span class="pl-k">-</span><span class="pl-c1">2.0</span> m)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">median</span>(p, <span class="pl-c1">:Pos</span>)
<span class="pl-c1">PVector</span>(<span class="pl-c1">1.0</span> m, <span class="pl-k">-</span><span class="pl-c1">1.0</span> m, <span class="pl-k">-</span><span class="pl-c1">1.0</span> m)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">extent</span>(p)
Extent<span class="pl-k">:</span> xMin <span class="pl-k">=</span> <span class="pl-k">-</span><span class="pl-c1">1.0</span> m, xMax <span class="pl-k">=</span> <span class="pl-c1">3.0</span> m, yMin <span class="pl-k">=</span> <span class="pl-k">-</span><span class="pl-c1">3.0</span> m, yMax <span class="pl-k">=</span> <span class="pl-c1">1.0</span> m, zMin <span class="pl-k">=</span> <span class="pl-k">-</span><span class="pl-c1">3.0</span> m, zMax <span class="pl-k">=</span> <span class="pl-c1">1.0</span> m, SideLength <span class="pl-k">=</span> <span class="pl-c1">4.0</span> m, Center <span class="pl-k">=</span> <span class="pl-c1">PVector</span>(<span class="pl-c1">1.0</span> m, <span class="pl-k">-</span><span class="pl-c1">1.0</span> m, <span class="pl-k">-</span><span class="pl-c1">1.0</span> m)</pre></div>
<p>There are differences among <code>center</code>, <code>pos_center</code>, <code>mass_center</code> and <code>median</code>:</p>
<ul>
<li><code>center</code>: box center of particles</li>
<li><code>pos_center</code>: average position of particles</li>
<li><code>mass_center</code>: mass weighted average position of particles</li>
<li><code>median</code>: middle value of positions of particles</li>
</ul>
<h3><a id="user-content-units" class="anchor" aria-hidden="true" href="#units"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Units</h3>
<p>Units are supported by <a href="https://github.com/PainterQubits/Unitful.jl">Unitful.jl</a> and <a href="https://github.com/JuliaAstro/UnitfulAstro.jl">UnitfulAstro.jl</a></p>
<p>Set default units by</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="const uSI = u&quot;m,s,A,K,cd,kg,mol&quot;
preferunits(uSI)
"><pre><span class="pl-k">const</span> uSI <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>m,s,A,K,cd,kg,mol<span class="pl-pds">"</span></span>
<span class="pl-c1">preferunits</span>(uSI)</pre></div>
<p>or simply call <code>si()</code>. <code>astro()</code> and <code>cgs()</code> are implemented in the same way.</p>
<p>This would affect unit promotions in <code>Unitful</code> package and default outputs in related packages, by setting <code>Unitful.promotion</code> and <code>PhysicalParticles.uDefaults</code> respectively.</p>
<p>Interfaces to get basic units:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt; getunits()
(m, s, A, K, cd, kg, mol)

julia&gt; getunits(uAstro)
(kpc, Gyr, A, K, cd, M⊙, mol)

julia&gt; getunits(nothing)
(nothing, nothing, nothing, nothing, nothing, nothing, nothing)

julia&gt; getuLength()
m

julia&gt; getuTime(uSI)
s

julia&gt; getuCurrent(uCGS)
A

julia&gt; getuTemperature(nothing)

julia&gt; getuLuminosity()
cd

julia&gt; getuMass()
kg

julia&gt; getuAmount()
mol
"><pre><code>julia&gt; getunits()
(m, s, A, K, cd, kg, mol)

julia&gt; getunits(uAstro)
(kpc, Gyr, A, K, cd, M⊙, mol)

julia&gt; getunits(nothing)
(nothing, nothing, nothing, nothing, nothing, nothing, nothing)

julia&gt; getuLength()
m

julia&gt; getuTime(uSI)
s

julia&gt; getuCurrent(uCGS)
A

julia&gt; getuTemperature(nothing)

julia&gt; getuLuminosity()
cd

julia&gt; getuMass()
kg

julia&gt; getuAmount()
mol
</code></pre></div>
<p><code>axisunit</code> provides a convenient way to print units in the axis of plots:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; axisunit(nothing)
&quot;&quot;

julia&gt; axisunit(u&quot;m&quot;)
&quot; [m]&quot;

julia&gt; axisunit(&quot;Time&quot;, u&quot;Gyr&quot;)
&quot;TIme [Gyr]&quot;
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">axisunit</span>(<span class="pl-c1">nothing</span>)
<span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">axisunit</span>(<span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>m<span class="pl-pds">"</span></span>)
<span class="pl-s"><span class="pl-pds">"</span> [m]<span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">axisunit</span>(<span class="pl-s"><span class="pl-pds">"</span>Time<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>Gyr<span class="pl-pds">"</span></span>)
<span class="pl-s"><span class="pl-pds">"</span>TIme [Gyr]<span class="pl-pds">"</span></span></pre></div>
<h3><a id="user-content-constants" class="anchor" aria-hidden="true" href="#constants"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Constants</h3>
<p>Physical constants are imported from <code>CODATA2018</code> supported by <a href="https://github.com/JuliaPhysics/PhysicalConstants.jl">PhysicalConstants.jl</a>. However, constants in <code>PhysicalConstants</code> may cause type error if they are not converted to default units.</p>
<p>To prevent this problem, construct an immutable struct <code>Constant</code> corresponding to the provided <code>units</code>:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; Constant()
Converted Constants:
    G = 4.498502151469553e-6 kpc^3 M⊙^-1 Gyr^-2
    m_e = 4.581240435253955e-61 M⊙
    m_n = 8.423451938769546e-58 M⊙
    m_p = 8.411856872862986e-58 M⊙
    k_B = 7.2624677363918e-60 kpc^2 M⊙ K^-1 Gyr^-2
    ACC0 = 3872.920970357523 kpc Gyr^-2

julia&gt; Constant(uSI)
Converted Constants:
    G = 6.6743e-11 m^3 kg^-1 s^-2
    m_e = 9.1093837015e-31 kg
    m_n = 1.67492749804e-27 kg
    m_p = 1.67262192369e-27 kg
    k_B = 1.380649e-23 kg m^2 K^-1 s^-2
    ACC0 = 1.2e-10 m s^-2

julia&gt; Constant(uCGS)
Converted Constants:
    G = 6.674299999999999e-8 cm^3 g^-1 s^-2
    m_e = 9.1093837015e-28 g
    m_n = 1.67492749804e-24 g
    m_p = 1.67262192369e-24 g
    k_B = 1.380649e-16 g cm^2 K^-1 s^-2
    ACC0 = 1.2e-8 cm s^-2

julia&gt; using Unitful

julia&gt; ustrip(Constant())
Converted Constants:
    G = 4.498502151469553e-6
    m_e = 4.581240435253955e-61
    m_n = 8.423451938769546e-58
    m_p = 8.411856872862986e-58
    k_B = 7.2624677363918e-60
    ACC0 = 3872.920970357523
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">Constant</span>()
Converted Constants<span class="pl-k">:</span>
    G <span class="pl-k">=</span> <span class="pl-c1">4.498502151469553e-6</span> kpc<span class="pl-k">^</span><span class="pl-c1">3</span> M⊙<span class="pl-k">^-</span><span class="pl-c1">1</span> Gyr<span class="pl-k">^-</span><span class="pl-c1">2</span>
    m_e <span class="pl-k">=</span> <span class="pl-c1">4.581240435253955e-61</span> M⊙
    m_n <span class="pl-k">=</span> <span class="pl-c1">8.423451938769546e-58</span> M⊙
    m_p <span class="pl-k">=</span> <span class="pl-c1">8.411856872862986e-58</span> M⊙
    k_B <span class="pl-k">=</span> <span class="pl-c1">7.2624677363918e-60</span> kpc<span class="pl-k">^</span><span class="pl-c1">2</span> M⊙ K<span class="pl-k">^-</span><span class="pl-c1">1</span> Gyr<span class="pl-k">^-</span><span class="pl-c1">2</span>
    ACC0 <span class="pl-k">=</span> <span class="pl-c1">3872.920970357523</span> kpc Gyr<span class="pl-k">^-</span><span class="pl-c1">2</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">Constant</span>(uSI)
Converted Constants<span class="pl-k">:</span>
    G <span class="pl-k">=</span> <span class="pl-c1">6.6743e-11</span> m<span class="pl-k">^</span><span class="pl-c1">3</span> kg<span class="pl-k">^-</span><span class="pl-c1">1</span> s<span class="pl-k">^-</span><span class="pl-c1">2</span>
    m_e <span class="pl-k">=</span> <span class="pl-c1">9.1093837015e-31</span> kg
    m_n <span class="pl-k">=</span> <span class="pl-c1">1.67492749804e-27</span> kg
    m_p <span class="pl-k">=</span> <span class="pl-c1">1.67262192369e-27</span> kg
    k_B <span class="pl-k">=</span> <span class="pl-c1">1.380649e-23</span> kg m<span class="pl-k">^</span><span class="pl-c1">2</span> K<span class="pl-k">^-</span><span class="pl-c1">1</span> s<span class="pl-k">^-</span><span class="pl-c1">2</span>
    ACC0 <span class="pl-k">=</span> <span class="pl-c1">1.2e-10</span> m s<span class="pl-k">^-</span><span class="pl-c1">2</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">Constant</span>(uCGS)
Converted Constants<span class="pl-k">:</span>
    G <span class="pl-k">=</span> <span class="pl-c1">6.674299999999999e-8</span> cm<span class="pl-k">^</span><span class="pl-c1">3</span> g<span class="pl-k">^-</span><span class="pl-c1">1</span> s<span class="pl-k">^-</span><span class="pl-c1">2</span>
    m_e <span class="pl-k">=</span> <span class="pl-c1">9.1093837015e-28</span> g
    m_n <span class="pl-k">=</span> <span class="pl-c1">1.67492749804e-24</span> g
    m_p <span class="pl-k">=</span> <span class="pl-c1">1.67262192369e-24</span> g
    k_B <span class="pl-k">=</span> <span class="pl-c1">1.380649e-16</span> g cm<span class="pl-k">^</span><span class="pl-c1">2</span> K<span class="pl-k">^-</span><span class="pl-c1">1</span> s<span class="pl-k">^-</span><span class="pl-c1">2</span>
    ACC0 <span class="pl-k">=</span> <span class="pl-c1">1.2e-8</span> cm s<span class="pl-k">^-</span><span class="pl-c1">2</span>

julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Unitful

julia<span class="pl-k">&gt;</span> <span class="pl-c1">ustrip</span>(<span class="pl-c1">Constant</span>())
Converted Constants<span class="pl-k">:</span>
    G <span class="pl-k">=</span> <span class="pl-c1">4.498502151469553e-6</span>
    m_e <span class="pl-k">=</span> <span class="pl-c1">4.581240435253955e-61</span>
    m_n <span class="pl-k">=</span> <span class="pl-c1">8.423451938769546e-58</span>
    m_p <span class="pl-k">=</span> <span class="pl-c1">8.411856872862986e-58</span>
    k_B <span class="pl-k">=</span> <span class="pl-c1">7.2624677363918e-60</span>
    ACC0 <span class="pl-k">=</span> <span class="pl-c1">3872.920970357523</span></pre></div>
<h3><a id="user-content-zerovalues" class="anchor" aria-hidden="true" href="#zerovalues"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Zerovalues</h3>
<p><code>ZeroValue</code> is useful for accumulated summation, array initialization, etc. Examples:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="ZeroValue(nothing)
ZeroValue()
ZeroValue(uSI)
ZeroValue(uCGS)
"><pre><span class="pl-c1">ZeroValue</span>(<span class="pl-c1">nothing</span>)
<span class="pl-c1">ZeroValue</span>()
<span class="pl-c1">ZeroValue</span>(uSI)
<span class="pl-c1">ZeroValue</span>(uCGS)</pre></div>
<h2><a id="user-content-references" class="anchor" aria-hidden="true" href="#references"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>References</h2>
<ul>
<li><a href="https://github.com/JuliaGeometry/GeometricalPredicates.jl">GeometicalPredicates.jl</a></li>
</ul>
<h2><a id="user-content-package-ecosystem" class="anchor" aria-hidden="true" href="#package-ecosystem"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Package ecosystem</h2>
<ul>
<li>Basic data structure: <a href="https://github.com/JuliaAstroSim/PhysicalParticles.jl">PhysicalParticles.jl</a></li>
<li>File I/O: <a href="https://github.com/JuliaAstroSim/AstroIO.jl">AstroIO.jl</a></li>
<li>Initial Condition: <a href="https://github.com/JuliaAstroSim/AstroIC.jl">AstroIC.jl</a></li>
<li>Parallelism: <a href="https://github.com/JuliaAstroSim/ParallelOperations.jl">ParallelOperations.jl</a></li>
<li>Trees: <a href="https://github.com/JuliaAstroSim/PhysicalTrees.jl">PhysicalTrees.jl</a></li>
<li>Meshes: <a href="https://github.com/JuliaAstroSim/PhysicalMeshes.jl">PhysicalMeshes.jl</a></li>
<li>Plotting: <a href="https://github.com/JuliaAstroSim/AstroPlot.jl">AstroPlot.jl</a></li>
<li>Simulation: <a href="https://github.com/JuliaAstroSim/ISLENT">ISLENT</a></li>
</ul>
</article></div>