<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-numericiojl" class="anchor" aria-hidden="true" href="#numericiojl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>NumericIO.jl</h1>
<p><a href="https://travis-ci.org/ma-laforge/NumericIO.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/5587d3fd47b27476fe54be0a487232f9f7389e9c/68747470733a2f2f7472617669732d63692e6f72672f6d612d6c61666f7267652f4e756d65726963494f2e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/ma-laforge/NumericIO.jl.svg?branch=master" style="max-width:100%;"></a></p>
<h2><a id="user-content-description" class="anchor" aria-hidden="true" href="#description"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Description</h2>
<p>Improved support for formatting numeric data.</p>
<ul>
<li>Includes facilities to display values using SI prefixes (<code>Y</code>, <code>Z</code>, <code>E</code>, <code>P</code>, <code>T</code>, <code>G</code>, <code>M</code>, <code>k</code>, <code>m</code>, μ, <code>n</code>, <code>p</code>, <code>f</code>, <code>a</code>, <code>z</code>, <code>y</code>)</li>
<li>Makes it easy to control the number of significant digits to display.</li>
</ul>
<h2><a id="user-content-basic-usage" class="anchor" aria-hidden="true" href="#basic-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Basic Usage</h2>
<p>NumericIO.jl tries to provide the convenience of c++ <code>ios_base</code> configurability (ex: setting <code>ios_base::precision</code>) <em>without</em> modifying the output format of the base streaming object. Instead, NumericIO.jl uses the <code>FormattedIO</code> wrapper object to print data with the desired output format.  This appears to be somewhat similar (but not as flexible) as the <code>Base.IOContext</code> object used in core Julia.</p>
<p>To obtain a string representation of a <code>Real</code> value using SI prefixes, one can use the <code>formatted</code> function:</p>
<pre><code>formatted(3.14159e-8, :SI, ndigits=3) # =&gt; "31.14n"
</code></pre>
<p>Similarly, one can generate a string using scientific notation with the following:</p>
<pre><code>formatted(3.14159e-8, :SCI, ndigits=3) # =&gt; "3.14×10⁻⁸"
</code></pre>
<p>Or using engineering notation (limiting to powers divisible by 3) with:</p>
<pre><code>formatted(3.14159e-8, :ENG, ndigits=3) # =&gt; "31.4×10⁻⁹"
</code></pre>
<p>To limit results to <code>ASCII</code> output, specify the <code>charset</code> keyword:</p>
<pre><code>formatted(3.14159e-8, :ENG, ndigits=3, charset=:ASCII) # =&gt; "31.4E-9"
</code></pre>
<p>One might also prefer to create a convenience formatting function:</p>
<pre><code>SI(x) = formatted(x, :SI, ndigits=4)
SI(3.14159e-9) # =&gt; "3.142n"
SI(2.71828e12) # =&gt; "2.718T"
</code></pre>
<p>To print out multiple values, it is preferable (more efficient) to directly create a FormattedIO wrapper object:</p>
<pre><code>fio = formatted(STDOUT, :SI, ndigits=4) # =&gt; FormattedIO
println(fio, 3.14159e-9) # =&gt; 3.142n
println(fio, 2.71828e12) # =&gt; 2.718T
...
</code></pre>
<h2><a id="user-content-advanced-usage" class="anchor" aria-hidden="true" href="#advanced-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Advanced Usage</h2>
<p>Lower-level structures of NumericIO can be used to fine-tune numeric output even further, if desired.  The following shows an example that approximates engineering notation using the <code>ASCII</code> characterset only:</p>
<pre><code>asciiexponentfmt = NumericIO.IOFormattingExpNum(
	"x10^", false, '+', '-', NumericIO.ASCII_SUPERSCRIPT_NUMERALS
)
fmt = NumericIO.IOFormattingReal(asciiexponentfmt,
	ndigits=4, decpos=0, decfloating=true, eng=true, minus='-', inf="Inf"
)
fio = formatted(STDOUT, fmt) # =&gt; FormattedIO
println(fio, 3.14159e-8) # =&gt; 31.42x10^-9
</code></pre>
<p>It is also possible to generate the mantissa &amp; exponent portions of a number separately.  This could be useful when displaying a plot's tick labels when using a common axis multiplier.  See implementation of <code>NumericIO.print_formatted(..., showexp=false)</code> and <code>NumericIO.print_formatted_exp(...)</code> for details.</p>
<p><a name="user-content-sample_applications"></a></p>
<h2><a id="user-content-sample-applications" class="anchor" aria-hidden="true" href="#sample-applications"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Sample Applications</h2>
<h3><a id="user-content-improved-repl-output-julia-console" class="anchor" aria-hidden="true" href="#improved-repl-output-julia-console"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Improved REPL output (Julia console)</h3>
<p>Users can make REPL outputs easier to read, simply by adding a few lines to their <code>~/.juliarc.jl</code> file:</p>
<pre><code>using NumericIO
Base.display(r::Base.REPL.REPLDisplay, v::Union{Float32,Float64}) = print(formatted(Base.REPL.outstream(r.repl), :SI, ndigits=4), v)
</code></pre>
<p>This solution should be fairly safe: few programmers writing to REPL displays would later read back values from said display (failing the subsequent read operation).  The most likely issue with this application is that programmers expecting carefully formatted output would now have suboptimal-looking output.</p>
<h4><a id="user-content-re-array-outputs" class="anchor" aria-hidden="true" href="#re-array-outputs"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>RE: Array outputs.</h4>
<p>Note that defining the above <code>display</code> method does not alter how <code>Array{Float}</code> arrays are displayed.  In order to change this particular output, one would have to define something like:</p>
<pre><code>Base.show{T&lt;:Base.AbstractIOBuffer}(ctx::IOContext{T}, v::Union{Float32,Float64}) = print(formatted(ctx.io, :SI, ndigits=4), v)
</code></pre>
<p>... because currently (Julia v0.5.0) arrays generate their outputs by writing to temporary <code>IOBuffer</code>s.</p>
<p><strong>This solution is not recommended</strong>: it involves altering the behaviour of relatively low-level functions.  It is likely to cause issues.</p>
<h4><a id="user-content-re-coordinating-with-siunits" class="anchor" aria-hidden="true" href="#re-coordinating-with-siunits"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>RE: Coordinating with SIUnits.</h4>
<p>Again, the <code>display</code> function described above does not work in conjuction with SIUnits.jl - because the displayed object is of type <code>SIQuantity</code> (not <code>Float32/64</code>).  One could, instead define the following function:</p>
<pre><code>Base.show(io::IOContext{Base.Terminals.TTYTerminal}, v::Union{Float32,Float64}) = print(formatted(io, :SI, ndigits=4), v)
</code></pre>
<p>Which would work for formatting outputs of <code>SIQuantity</code> values, in addition to many (but not all) other values written to terminal.</p>
<p>Note however, that <code>show()</code> is a lower level function, and this definition is more likely to cause undesired behaviours.</p>
<h2><a id="user-content-known-limitations" class="anchor" aria-hidden="true" href="#known-limitations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Known Limitations</h2>
<ul>
<li>Support for SI notation is limited between <code>y (1e-24)</code> and <code>Y (1e24)</code>.  Values beyond this range default to scientific notation.</li>
<li>SI notation displays <code>{1e9, 10e9, 100e9}</code> as <code>{1G, 10G, 100G}</code>.  It would be possible to reconfigure NumericIO to arbitrarily display <code>{1G, 10G, 0.1T}</code>, or <code>{1G, 0.01T, 0.1G}</code>, or ...</li>
<li>Algorithms are likely be a bit more complicated than absolutely necessary.  It would be nice to simplify/optimize the code as much as possible.</li>
<li>Does not support arbitrary bases (ex: <code>1x2^8</code>).</li>
</ul>
<h3><a id="user-content-compatibility" class="anchor" aria-hidden="true" href="#compatibility"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Compatibility</h3>
<p>Extensive compatibility testing of NumericIO.jl has not been performed.  The module has been tested using the following environment(s):</p>
<ul>
<li>Windows / Linux / Julia-1.1.1</li>
</ul>
</article></div>