<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-mods" class="anchor" aria-hidden="true" href="#mods"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Mods</h1>
<p><a href="https://travis-ci.org/scheinerman/Mods.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/8f4a7f7818bfe4199b55acfaa10ea1ba76901214/68747470733a2f2f7472617669732d63692e6f72672f73636865696e65726d616e2f4d6f64732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/scheinerman/Mods.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p><a href="https://coveralls.io/github/scheinerman/Mods.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/53cccc93c66a719e10efd4551362dec6c20141ce/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f73636865696e65726d616e2f4d6f64732e6a6c2f62616467652e7376673f6272616e63683d6d617374657226736572766963653d676974687562" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/scheinerman/Mods.jl/badge.svg?branch=master&amp;service=github" style="max-width:100%;"></a></p>
<p><a href="http://codecov.io/github/scheinerman/Mods.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/30e541f3b7c7ca26b038003a16433874e2c755b2/687474703a2f2f636f6465636f762e696f2f6769746875622f73636865696e65726d616e2f4d6f64732e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/scheinerman/Mods.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
<p>Easy modular arithmetic for Julia.</p>
<p>Construct an immutable <code>Mod</code> object with <code>Mod(val,mod)</code>.  Both <code>val</code>
and <code>mod</code> must <code>Integer</code> values.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Mods

julia<span class="pl-k">&gt;</span> <span class="pl-c1">Mod</span>(<span class="pl-c1">4</span>,<span class="pl-c1">23</span>)
<span class="pl-c1">Mod</span>(<span class="pl-c1">4</span>,<span class="pl-c1">23</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">Mod</span>(<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">23</span>)
<span class="pl-c1">Mod</span>(<span class="pl-c1">22</span>,<span class="pl-c1">23</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">Mod</span>(<span class="pl-c1">99</span>,<span class="pl-c1">12</span>)
<span class="pl-c1">Mod</span>(<span class="pl-c1">3</span>,<span class="pl-c1">12</span>)

julia<span class="pl-k">&gt;</span> x <span class="pl-k">=</span> <span class="pl-c1">Mod</span>(<span class="pl-c1">4</span>,<span class="pl-c1">10</span>)
<span class="pl-c1">Mod</span>(<span class="pl-c1">4</span>,<span class="pl-c1">10</span>)

julia<span class="pl-k">&gt;</span> x<span class="pl-k">.</span>val
<span class="pl-c1">4</span>

julia<span class="pl-k">&gt;</span> x<span class="pl-k">.</span>mod
<span class="pl-c1">10</span></pre></div>
<p>With just a single argument, <code>Mod</code> creates a zero element of the given
modulus.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">Mod</span>(<span class="pl-c1">17</span>)
<span class="pl-c1">Mod</span>(<span class="pl-c1">0</span>,<span class="pl-c1">17</span>)</pre></div>
<h2><a id="user-content-operations" class="anchor" aria-hidden="true" href="#operations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Operations</h2>
<h3><a id="user-content-the-basic-four" class="anchor" aria-hidden="true" href="#the-basic-four"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>The basic four</h3>
<p><code>Mod</code> objects can be added, subtracted, mulitplied, and divided with
one another. The two <code>Mod</code> operands must have the same modulus.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> x <span class="pl-k">=</span> <span class="pl-c1">Mod</span>(<span class="pl-c1">8</span>,<span class="pl-c1">10</span>); y <span class="pl-k">=</span> <span class="pl-c1">Mod</span>(<span class="pl-c1">6</span>,<span class="pl-c1">10</span>);

julia<span class="pl-k">&gt;</span> x<span class="pl-k">+</span>y
<span class="pl-c1">Mod</span>(<span class="pl-c1">4</span>,<span class="pl-c1">10</span>)

julia<span class="pl-k">&gt;</span> x<span class="pl-k">-</span>y
(<span class="pl-c1">2</span>,<span class="pl-c1">10</span>)

julia<span class="pl-k">&gt;</span> x<span class="pl-k">*</span>y
<span class="pl-c1">Mod</span>(<span class="pl-c1">8</span>,<span class="pl-c1">10</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">Mod</span>(<span class="pl-c1">5</span>,<span class="pl-c1">10</span>) <span class="pl-k">+</span> <span class="pl-c1">Mod</span>(<span class="pl-c1">5</span>,<span class="pl-c1">11</span>)
ERROR<span class="pl-k">:</span> Cannot operate on two Mod objects with different moduli</pre></div>
<p>Division can result in an error if the divisor is not invertible. A
<code>Mod</code> object <code>x</code> can be checked for invertibility using
<code>is_invertible(x)</code>. To find the inverse of <code>x</code> (assuming it exists)
use <code>inv(x)</code>. <strong>WARNING</strong>: The syntax <code>x'</code> is no longer valid for finding
the inverse of <code>x</code>.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> x <span class="pl-k">=</span> <span class="pl-c1">Mod</span>(<span class="pl-c1">8</span>,<span class="pl-c1">10</span>); y <span class="pl-k">=</span> <span class="pl-c1">Mod</span>(<span class="pl-c1">6</span>,<span class="pl-c1">10</span>);

julia<span class="pl-k">&gt;</span> x<span class="pl-k">/</span>y
ERROR<span class="pl-k">:</span> <span class="pl-c1">Mod</span>(<span class="pl-c1">6</span>,<span class="pl-c1">10</span>) is not invertible

julia<span class="pl-k">&gt;</span> x <span class="pl-k">=</span> <span class="pl-c1">Mod</span>(<span class="pl-c1">8</span>,<span class="pl-c1">10</span>); y <span class="pl-k">=</span> <span class="pl-c1">Mod</span>(<span class="pl-c1">3</span>,<span class="pl-c1">10</span>);

julia<span class="pl-k">&gt;</span> x<span class="pl-k">/</span>y
<span class="pl-c1">Mod</span>(<span class="pl-c1">6</span>,<span class="pl-c1">10</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">inv</span>(y)
<span class="pl-c1">Mod</span>(<span class="pl-c1">7</span>,<span class="pl-c1">10</span>)</pre></div>
<p>We also support unary minus.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> x <span class="pl-k">=</span> <span class="pl-c1">Mod</span>(<span class="pl-c1">3</span>,<span class="pl-c1">10</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-k">-</span>x
<span class="pl-c1">Mod</span>(<span class="pl-c1">7</span>,<span class="pl-c1">10</span>)</pre></div>
<h3><a id="user-content-mixed-integermod-arithmetic" class="anchor" aria-hidden="true" href="#mixed-integermod-arithmetic"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Mixed Integer/Mod arithmetic</h3>
<p>The basic four operations may also be performed between a <code>Mod</code> object
and an <code>Integer</code>. The calculation proceeds as if the <code>Integer</code> has the
same modulus as the <code>Mod</code> object.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> x <span class="pl-k">=</span> <span class="pl-c1">Mod</span>(<span class="pl-c1">3</span>,<span class="pl-c1">10</span>);

julia<span class="pl-k">&gt;</span> x<span class="pl-k">+</span><span class="pl-c1">9</span>
<span class="pl-c1">Mod</span>(<span class="pl-c1">2</span>,<span class="pl-c1">10</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">4</span>x
<span class="pl-c1">Mod</span>(<span class="pl-c1">2</span>,<span class="pl-c1">10</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">3</span><span class="pl-k">-</span>x
<span class="pl-c1">Mod</span>(<span class="pl-c1">0</span>,<span class="pl-c1">10</span>)

julia<span class="pl-k">&gt;</span> x<span class="pl-k">/</span><span class="pl-c1">7</span>
<span class="pl-c1">Mod</span>(<span class="pl-c1">9</span>,<span class="pl-c1">10</span>)</pre></div>
<h3><a id="user-content-exponentiation" class="anchor" aria-hidden="true" href="#exponentiation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Exponentiation</h3>
<p>Use <code>x^k</code> to raise a <code>Mod</code> object <code>x</code> to an <code>Integer</code> power <code>k</code>. If
<code>k</code> is zero, this always returns <code>Mod(1,m)</code> where <code>m</code> is the modulus
of <code>x</code>. Negative exponentiation succeeds if and only if <code>x</code> is
invertible.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> x <span class="pl-k">=</span> <span class="pl-c1">Mod</span>(<span class="pl-c1">3</span>,<span class="pl-c1">100</span>)
<span class="pl-c1">Mod</span>(<span class="pl-c1">3</span>,<span class="pl-c1">100</span>)

julia<span class="pl-k">&gt;</span> x<span class="pl-k">^</span><span class="pl-c1">10</span>
<span class="pl-c1">Mod</span>(<span class="pl-c1">49</span>,<span class="pl-c1">100</span>)

julia<span class="pl-k">&gt;</span> x<span class="pl-k">^-</span><span class="pl-c1">2</span>
<span class="pl-c1">Mod</span>(<span class="pl-c1">89</span>,<span class="pl-c1">100</span>)

julia<span class="pl-k">&gt;</span> x <span class="pl-k">=</span> <span class="pl-c1">Mod</span>(<span class="pl-c1">5</span>,<span class="pl-c1">100</span>)
<span class="pl-c1">Mod</span>(<span class="pl-c1">5</span>,<span class="pl-c1">100</span>)

julia<span class="pl-k">&gt;</span> x<span class="pl-k">^-</span><span class="pl-c1">3</span>
ERROR<span class="pl-k">:</span> <span class="pl-c1">Mod</span>(<span class="pl-c1">5</span>,<span class="pl-c1">100</span>) is not invertible

julia<span class="pl-k">&gt;</span> <span class="pl-c1">Mod</span>(<span class="pl-c1">0</span>,<span class="pl-c1">10</span>)<span class="pl-k">^</span><span class="pl-c1">0</span>
<span class="pl-c1">Mod</span>(<span class="pl-c1">1</span>,<span class="pl-c1">10</span>)</pre></div>
<h3><a id="user-content-equality-and-hashing" class="anchor" aria-hidden="true" href="#equality-and-hashing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Equality and hashing</h3>
<p>Two <code>Mod</code> objects can be compared for equality with either <code>==</code> or
<code>isequal</code>.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">Mod</span>(<span class="pl-c1">3</span>,<span class="pl-c1">10</span>) <span class="pl-k">==</span> <span class="pl-c1">Mod</span>(<span class="pl-c1">3</span>,<span class="pl-c1">11</span>);
<span class="pl-c1">false</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">Mod</span>(<span class="pl-c1">3</span>,<span class="pl-c1">10</span>) <span class="pl-k">==</span> <span class="pl-c1">Mod</span>(<span class="pl-k">-</span><span class="pl-c1">7</span>,<span class="pl-c1">10</span>)
<span class="pl-c1">true</span></pre></div>
<p>We can also compare <code>Mod</code> objects with <code>Integer</code> objects:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">Mod</span>(<span class="pl-c1">3</span>,<span class="pl-c1">10</span>) <span class="pl-k">==</span> <span class="pl-k">-</span><span class="pl-c1">7</span>
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">Mod</span>(<span class="pl-c1">3</span>,<span class="pl-c1">10</span>) <span class="pl-k">==</span> <span class="pl-c1">7</span>
<span class="pl-c1">false</span></pre></div>
<p>We also define <code>hash</code> for <code>Mod</code> objects so they can be stored in sets
and used as keys in a dictionary.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> A <span class="pl-k">=</span> <span class="pl-c1">Set</span><span class="pl-c1">{Mod}</span>()
<span class="pl-c1">Set</span><span class="pl-c1">{Mod}</span>({})

julia<span class="pl-k">&gt;</span> <span class="pl-c1">push!</span>(A, <span class="pl-c1">Mod</span>(<span class="pl-c1">3</span>,<span class="pl-c1">10</span>))
<span class="pl-c1">Set</span><span class="pl-c1">{Mod}</span>({<span class="pl-c1">Mod</span>(<span class="pl-c1">3</span>,<span class="pl-c1">10</span>)})</pre></div>
<h3><a id="user-content-chinese-remainder-theorem-calculations" class="anchor" aria-hidden="true" href="#chinese-remainder-theorem-calculations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Chinese Remainder Theorem calculations</h3>
<p>The Chinese Remainder Theorem gives a solution to the following
problem. Given integers <code>a, b, m, n</code> with <code>gcd(m,n)==1</code> find an
integer <code>x</code> such that <code>mod(x,m)==mod(a,m)</code> and
<code>mod(x,n)==mod(b,n)</code>. We provide the <code>CRT</code> function to solve this
problem as illustrated here with <code>a=3</code>, <code>m=10</code>, <code>b=5</code>, and <code>n=17</code>:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> s <span class="pl-k">=</span> <span class="pl-c1">Mod</span>(<span class="pl-c1">3</span>,<span class="pl-c1">10</span>); t <span class="pl-k">=</span> <span class="pl-c1">Mod</span>(<span class="pl-c1">5</span>,<span class="pl-c1">17</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">CRT</span>(s,t)
<span class="pl-c1">Mod</span>(<span class="pl-c1">73</span>,<span class="pl-c1">170</span>)</pre></div>
<p>We find that <code>mod(73,10)</code> equals <code>3</code> and <code>mod(73,17)</code> equals <code>5</code> as
required. The answer is reported as <code>Mod(73,170)</code> because any value of
<code>x</code> congruent to 73 modulo 170 is a solution.</p>
<p>The <code>CRT</code> function can be applied to any number of arguments so long
as their moduli are pairwise relatively prime. If called with no
arguments, <code>CRT</code> returns <code>Mod(0,1)</code> since all integers are congruent
to 0 modulo 1.</p>
</article></div>