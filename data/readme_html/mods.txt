<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-mods" class="anchor" aria-hidden="true" href="#mods"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Mods</h1>
<p>Modular arithmetic for Julia.</p>
<table>
<thead>
<tr>
<th align="right"></th>
<th align="left"></th>
</tr>
</thead>
<tbody>
<tr>
<td align="right"><strong>Docs Build</strong></td>
<td align="left"><a href="https://github.com/scheinerman/Mods.jl/actions?query=workflow%3ADocumentation"><img src="https://github.com/scheinerman/Mods.jl/workflows/Documentation/badge.svg" alt="docs build" style="max-width:100%;"></a></td>
</tr>
<tr>
<td align="right"><strong>Documentation</strong></td>
<td align="left"><a href="https://scheinerman.github.io/Mods.jl/dev/" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a></td>
</tr>
<tr>
<td align="right"><strong>Build Status</strong></td>
<td align="left"><a href="https://travis-ci.com/scheinerman/Mods.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/31b0b6ce3c5725b7e992a3a4ada44fe36fa636b2e02e6c2d83d833a49ac62891/68747470733a2f2f7472617669732d63692e636f6d2f73636865696e65726d616e2f4d6f64732e6a6c2e7376673f6272616e63683d6d6173746572" alt="travis ci" data-canonical-src="https://travis-ci.com/scheinerman/Mods.jl.svg?branch=master" style="max-width:100%;"></a></td>
</tr>
</tbody>
</table>
<h2><a id="user-content-quick-overview" class="anchor" aria-hidden="true" href="#quick-overview"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Quick Overview</h2>
<p>This module supports modular values and arithmetic. The moduli are integers (at least 2)
and the values are either integers or Gaussian integers.</p>
<p>An element of $\mathbb{Z}_N$ is entered as <code>Mod{N}(a)</code> and is of type <code>Mod{N}</code>.
An element of $\mathbb{Z}_N[i]$ is entered a <code>Mod{N}(a+b*im)</code> and is of type
<code>GaussMod{N}</code>. Both types are fully interoperable with each other and with
(ordinary) integers and Gaussian integers.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; a = Mod{17}(9); b = Mod{17}(10);

julia&gt; a+b
Mod{17}(2)

julia&gt; 2a
Mod{17}(1)

julia&gt; a = Mod{17}(9-2im)
Mod{17}(9 + 15im)

julia&gt; 2a
Mod{17}(1 + 13im)

julia&gt; a'
Mod{17}(9 + 2im)

julia&gt; typeof(a)
GaussMod{17}

julia&gt; typeof(b)
Mod{17}

julia&gt; supertype(ans)
AbstractMod
"><pre>julia<span class="pl-k">&gt;</span> a <span class="pl-k">=</span> <span class="pl-c1">Mod</span><span class="pl-c1">{17}</span>(<span class="pl-c1">9</span>); b <span class="pl-k">=</span> <span class="pl-c1">Mod</span><span class="pl-c1">{17}</span>(<span class="pl-c1">10</span>);

julia<span class="pl-k">&gt;</span> a<span class="pl-k">+</span>b
<span class="pl-c1">Mod</span><span class="pl-c1">{17}</span>(<span class="pl-c1">2</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">2</span>a
<span class="pl-c1">Mod</span><span class="pl-c1">{17}</span>(<span class="pl-c1">1</span>)

julia<span class="pl-k">&gt;</span> a <span class="pl-k">=</span> <span class="pl-c1">Mod</span><span class="pl-c1">{17}</span>(<span class="pl-c1">9</span><span class="pl-k">-</span><span class="pl-c1">2im</span>)
<span class="pl-c1">Mod</span><span class="pl-c1">{17}</span>(<span class="pl-c1">9</span> <span class="pl-k">+</span> <span class="pl-c1">15im</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">2</span>a
<span class="pl-c1">Mod</span><span class="pl-c1">{17}</span>(<span class="pl-c1">1</span> <span class="pl-k">+</span> <span class="pl-c1">13im</span>)

julia<span class="pl-k">&gt;</span> a<span class="pl-k">'</span>
<span class="pl-c1">Mod</span><span class="pl-c1">{17}</span>(<span class="pl-c1">9</span> <span class="pl-k">+</span> <span class="pl-c1">2im</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">typeof</span>(a)
GaussMod{<span class="pl-c1">17</span>}

julia<span class="pl-k">&gt;</span> <span class="pl-c1">typeof</span>(b)
Mod{<span class="pl-c1">17</span>}

julia<span class="pl-k">&gt;</span> <span class="pl-c1">supertype</span>(ans)
AbstractMod</pre></div>
<h2><a id="user-content-basics" class="anchor" aria-hidden="true" href="#basics"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Basics</h2>
<h3><a id="user-content-mod-numbers" class="anchor" aria-hidden="true" href="#mod-numbers"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><code>Mod</code> numbers</h3>
<p>Integers modulo <code>N</code> (where <code>N&gt;1</code>) are values in the set
<code>{0,1,2,...,N-1}</code>. All arithmetic takes place modulo <code>N</code>. To create a mod-<code>N</code> number
we use <code>Mod{N}(a)</code>. For example:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; Mod{10}(3)
Mod{10}(3)

julia&gt; Mod{10}(23)
Mod{10}(3)

julia&gt; Mod{10}(-3)
Mod{10}(7)
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">Mod</span><span class="pl-c1">{10}</span>(<span class="pl-c1">3</span>)
<span class="pl-c1">Mod</span><span class="pl-c1">{10}</span>(<span class="pl-c1">3</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">Mod</span><span class="pl-c1">{10}</span>(<span class="pl-c1">23</span>)
<span class="pl-c1">Mod</span><span class="pl-c1">{10}</span>(<span class="pl-c1">3</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">Mod</span><span class="pl-c1">{10}</span>(<span class="pl-k">-</span><span class="pl-c1">3</span>)
<span class="pl-c1">Mod</span><span class="pl-c1">{10}</span>(<span class="pl-c1">7</span>)</pre></div>
<p>The usual arithmetic operations may be used. Furthermore, oridinary integers can be
combined with <code>Mod</code> values. However, values of different moduli cannot be used
together in an arithmetic expression.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; a = Mod{10}(5)
Mod{10}(5)

julia&gt; b = Mod{10}(6)
Mod{10}(6)

julia&gt; a+b
Mod{10}(1)

julia&gt; a-b
Mod{10}(9)

julia&gt; a*b
Mod{10}(0)

julia&gt; 2b
Mod{10}(2)
"><pre>julia<span class="pl-k">&gt;</span> a <span class="pl-k">=</span> <span class="pl-c1">Mod</span><span class="pl-c1">{10}</span>(<span class="pl-c1">5</span>)
<span class="pl-c1">Mod</span><span class="pl-c1">{10}</span>(<span class="pl-c1">5</span>)

julia<span class="pl-k">&gt;</span> b <span class="pl-k">=</span> <span class="pl-c1">Mod</span><span class="pl-c1">{10}</span>(<span class="pl-c1">6</span>)
<span class="pl-c1">Mod</span><span class="pl-c1">{10}</span>(<span class="pl-c1">6</span>)

julia<span class="pl-k">&gt;</span> a<span class="pl-k">+</span>b
<span class="pl-c1">Mod</span><span class="pl-c1">{10}</span>(<span class="pl-c1">1</span>)

julia<span class="pl-k">&gt;</span> a<span class="pl-k">-</span>b
<span class="pl-c1">Mod</span><span class="pl-c1">{10}</span>(<span class="pl-c1">9</span>)

julia<span class="pl-k">&gt;</span> a<span class="pl-k">*</span>b
<span class="pl-c1">Mod</span><span class="pl-c1">{10}</span>(<span class="pl-c1">0</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">2</span>b
<span class="pl-c1">Mod</span><span class="pl-c1">{10}</span>(<span class="pl-c1">2</span>)</pre></div>
<p>Division is permitted, but if the denominator is not invertible, an error is thrown.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; a = Mod{10}(5)
Mod{10}(5)

julia&gt; b = Mod{10}(3)
Mod{10}(3)

julia&gt; a/b
Mod{10}(5)

julia&gt; b/a
ERROR: Mod{10}(5) is not invertible
"><pre>julia<span class="pl-k">&gt;</span> a <span class="pl-k">=</span> <span class="pl-c1">Mod</span><span class="pl-c1">{10}</span>(<span class="pl-c1">5</span>)
<span class="pl-c1">Mod</span><span class="pl-c1">{10}</span>(<span class="pl-c1">5</span>)

julia<span class="pl-k">&gt;</span> b <span class="pl-k">=</span> <span class="pl-c1">Mod</span><span class="pl-c1">{10}</span>(<span class="pl-c1">3</span>)
<span class="pl-c1">Mod</span><span class="pl-c1">{10}</span>(<span class="pl-c1">3</span>)

julia<span class="pl-k">&gt;</span> a<span class="pl-k">/</span>b
<span class="pl-c1">Mod</span><span class="pl-c1">{10}</span>(<span class="pl-c1">5</span>)

julia<span class="pl-k">&gt;</span> b<span class="pl-k">/</span>a
ERROR<span class="pl-k">:</span> <span class="pl-c1">Mod</span><span class="pl-c1">{10}</span>(<span class="pl-c1">5</span>) is not invertible</pre></div>
<p>Exponentiation by an integer is permitted.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; a = Mod{17}(2)
Mod{17}(2)

julia&gt; a^16
Mod{17}(1)

julia&gt; a^(-3)
Mod{17}(15)
"><pre>julia<span class="pl-k">&gt;</span> a <span class="pl-k">=</span> <span class="pl-c1">Mod</span><span class="pl-c1">{17}</span>(<span class="pl-c1">2</span>)
<span class="pl-c1">Mod</span><span class="pl-c1">{17}</span>(<span class="pl-c1">2</span>)

julia<span class="pl-k">&gt;</span> a<span class="pl-k">^</span><span class="pl-c1">16</span>
<span class="pl-c1">Mod</span><span class="pl-c1">{17}</span>(<span class="pl-c1">1</span>)

julia<span class="pl-k">&gt;</span> a<span class="pl-k">^</span>(<span class="pl-k">-</span><span class="pl-c1">3</span>)
<span class="pl-c1">Mod</span><span class="pl-c1">{17}</span>(<span class="pl-c1">15</span>)</pre></div>
<p>Invertibility can be checked with <code>is_invertible</code>.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; a = Mod{10}(3)
Mod{10}(3)

julia&gt; is_invertible(a)
true

julia&gt; inv(a)
Mod{10}(7)

julia&gt; a = Mod{10}(4)
Mod{10}(4)

julia&gt; is_invertible(a)
false

julia&gt; inv(a)
ERROR: Mod{10}(4) is not invertible
"><pre>julia<span class="pl-k">&gt;</span> a <span class="pl-k">=</span> <span class="pl-c1">Mod</span><span class="pl-c1">{10}</span>(<span class="pl-c1">3</span>)
<span class="pl-c1">Mod</span><span class="pl-c1">{10}</span>(<span class="pl-c1">3</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">is_invertible</span>(a)
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">inv</span>(a)
<span class="pl-c1">Mod</span><span class="pl-c1">{10}</span>(<span class="pl-c1">7</span>)

julia<span class="pl-k">&gt;</span> a <span class="pl-k">=</span> <span class="pl-c1">Mod</span><span class="pl-c1">{10}</span>(<span class="pl-c1">4</span>)
<span class="pl-c1">Mod</span><span class="pl-c1">{10}</span>(<span class="pl-c1">4</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">is_invertible</span>(a)
<span class="pl-c1">false</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">inv</span>(a)
ERROR<span class="pl-k">:</span> <span class="pl-c1">Mod</span><span class="pl-c1">{10}</span>(<span class="pl-c1">4</span>) is not invertible</pre></div>
<p>Modular number with different moduli cannot be combined using the usual operations.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; a = Mod{10}(1)
Mod{10}(1)

julia&gt; b = Mod{9}(1)
Mod{9}(1)

julia&gt; a+b
ERROR: Cannot operate on two Mod objects with different moduli
"><pre>julia<span class="pl-k">&gt;</span> a <span class="pl-k">=</span> <span class="pl-c1">Mod</span><span class="pl-c1">{10}</span>(<span class="pl-c1">1</span>)
<span class="pl-c1">Mod</span><span class="pl-c1">{10}</span>(<span class="pl-c1">1</span>)

julia<span class="pl-k">&gt;</span> b <span class="pl-k">=</span> <span class="pl-c1">Mod</span><span class="pl-c1">{9}</span>(<span class="pl-c1">1</span>)
<span class="pl-c1">Mod</span><span class="pl-c1">{9}</span>(<span class="pl-c1">1</span>)

julia<span class="pl-k">&gt;</span> a<span class="pl-k">+</span>b
ERROR<span class="pl-k">:</span> Cannot operate on two Mod objects with different moduli</pre></div>
<h3><a id="user-content-gaussmod-numbers" class="anchor" aria-hidden="true" href="#gaussmod-numbers"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><code>GaussMod</code> numbers</h3>
<p>We can also work modulo <code>N</code> with Gaussian integers (numbers of the form <code>a+b*im</code> where <code>a</code>
and <code>b</code> are integers).</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; a = Mod{10}(2-3im)
Mod{10}(2 + 7im)

julia&gt; b = Mod{10}(5+6im)
Mod{10}(5 + 6im)

julia&gt; a+b
Mod{10}(7 + 3im)

julia&gt; a*b
Mod{10}(8 + 7im)
"><pre>julia<span class="pl-k">&gt;</span> a <span class="pl-k">=</span> <span class="pl-c1">Mod</span><span class="pl-c1">{10}</span>(<span class="pl-c1">2</span><span class="pl-k">-</span><span class="pl-c1">3im</span>)
<span class="pl-c1">Mod</span><span class="pl-c1">{10}</span>(<span class="pl-c1">2</span> <span class="pl-k">+</span> <span class="pl-c1">7im</span>)

julia<span class="pl-k">&gt;</span> b <span class="pl-k">=</span> <span class="pl-c1">Mod</span><span class="pl-c1">{10}</span>(<span class="pl-c1">5</span><span class="pl-k">+</span><span class="pl-c1">6im</span>)
<span class="pl-c1">Mod</span><span class="pl-c1">{10}</span>(<span class="pl-c1">5</span> <span class="pl-k">+</span> <span class="pl-c1">6im</span>)

julia<span class="pl-k">&gt;</span> a<span class="pl-k">+</span>b
<span class="pl-c1">Mod</span><span class="pl-c1">{10}</span>(<span class="pl-c1">7</span> <span class="pl-k">+</span> <span class="pl-c1">3im</span>)

julia<span class="pl-k">&gt;</span> a<span class="pl-k">*</span>b
<span class="pl-c1">Mod</span><span class="pl-c1">{10}</span>(<span class="pl-c1">8</span> <span class="pl-k">+</span> <span class="pl-c1">7im</span>)</pre></div>
<p>In addition to the usual arithmetic operations, the following features apply
to <code>GaussMod</code> values.</p>
<h4><a id="user-content-real-and-imaginary-parts" class="anchor" aria-hidden="true" href="#real-and-imaginary-parts"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Real and imaginary parts</h4>
<ul>
<li>Use the functions <code>real</code> and <code>imag</code> (or <code>reim</code>) to extract the real and imaginary parts:</li>
</ul>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; a = Mod{10}(2-3im)
Mod{10}(2 + 7im)

julia&gt; real(a)
Mod{10}(2)

julia&gt; imag(a)
Mod{10}(7)

julia&gt; reim(a)
(Mod{10}(2), Mod{10}(7))
"><pre>julia<span class="pl-k">&gt;</span> a <span class="pl-k">=</span> <span class="pl-c1">Mod</span><span class="pl-c1">{10}</span>(<span class="pl-c1">2</span><span class="pl-k">-</span><span class="pl-c1">3im</span>)
<span class="pl-c1">Mod</span><span class="pl-c1">{10}</span>(<span class="pl-c1">2</span> <span class="pl-k">+</span> <span class="pl-c1">7im</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">real</span>(a)
<span class="pl-c1">Mod</span><span class="pl-c1">{10}</span>(<span class="pl-c1">2</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">imag</span>(a)
<span class="pl-c1">Mod</span><span class="pl-c1">{10}</span>(<span class="pl-c1">7</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">reim</span>(a)
(<span class="pl-c1">Mod</span><span class="pl-c1">{10}</span>(<span class="pl-c1">2</span>), <span class="pl-c1">Mod</span><span class="pl-c1">{10}</span>(<span class="pl-c1">7</span>))</pre></div>
<h4><a id="user-content-complex-conjugate" class="anchor" aria-hidden="true" href="#complex-conjugate"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Complex conjugate</h4>
<p>Use <code>a'</code> (or <code>conj(a)</code>) to get the complex conjugate value:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; a = Mod{10}(2-3im)
Mod{10}(2 + 7im)

julia&gt; a'
Mod{10}(2 + 3im)

julia&gt; a*a'
Mod{10}(3 + 0im)

julia&gt; a+a'
Mod{10}(4 + 0im)
"><pre>julia<span class="pl-k">&gt;</span> a <span class="pl-k">=</span> <span class="pl-c1">Mod</span><span class="pl-c1">{10}</span>(<span class="pl-c1">2</span><span class="pl-k">-</span><span class="pl-c1">3im</span>)
<span class="pl-c1">Mod</span><span class="pl-c1">{10}</span>(<span class="pl-c1">2</span> <span class="pl-k">+</span> <span class="pl-c1">7im</span>)

julia<span class="pl-k">&gt;</span> a<span class="pl-k">'</span>
<span class="pl-c1">Mod</span><span class="pl-c1">{10}</span>(<span class="pl-c1">2</span> <span class="pl-k">+</span> <span class="pl-c1">3im</span>)

julia<span class="pl-k">&gt;</span> a<span class="pl-k">*</span>a<span class="pl-k">'</span>
<span class="pl-c1">Mod</span><span class="pl-c1">{10}</span>(<span class="pl-c1">3</span> <span class="pl-k">+</span> <span class="pl-c1">0im</span>)

julia<span class="pl-k">&gt;</span> a<span class="pl-k">+</span>a<span class="pl-k">'</span>
<span class="pl-c1">Mod</span><span class="pl-c1">{10}</span>(<span class="pl-c1">4</span> <span class="pl-k">+</span> <span class="pl-c1">0im</span>)</pre></div>
<h3><a id="user-content-inspection" class="anchor" aria-hidden="true" href="#inspection"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Inspection</h3>
<p>Given a <code>Mod</code> or <code>GaussMod</code> number, the modulus is recovered using the <code>modulus</code>
function and the numerical value with <code>value</code>:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="ulia&gt; a = Mod{23}(100)
Mod{23}(8)

julia&gt; modulus(a)
23

julia&gt; value(a)
8
"><pre>ulia<span class="pl-k">&gt;</span> a <span class="pl-k">=</span> <span class="pl-c1">Mod</span><span class="pl-c1">{23}</span>(<span class="pl-c1">100</span>)
<span class="pl-c1">Mod</span><span class="pl-c1">{23}</span>(<span class="pl-c1">8</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">modulus</span>(a)
<span class="pl-c1">23</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">value</span>(a)
<span class="pl-c1">8</span></pre></div>
<h3><a id="user-content-overflow-safety" class="anchor" aria-hidden="true" href="#overflow-safety"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Overflow safety</h3>
<p>Integer operations on 64-bit numbers can give results requiring more than
64 bits. Fortunately, when working with modular numbers the results of
the operations are bounded by the modulus.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; N = 10^18                # this is a 60-bit number
1000000000000000000

julia&gt; a = 10^15
1000000000000000

julia&gt; a*a                      # We see that a*a overflows
5076944270305263616

julia&gt; Mod{N}(a*a)              # this gives an incorrect answer
Mod{1000000000000000000}(76944270305263616)

julia&gt; Mod{N}(a) * Mod{N}(a)    # but this is correct!
Mod{1000000000000000000}(0)
"><pre>julia<span class="pl-k">&gt;</span> N <span class="pl-k">=</span> <span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">18</span>                <span class="pl-c"><span class="pl-c">#</span> this is a 60-bit number</span>
<span class="pl-c1">1000000000000000000</span>

julia<span class="pl-k">&gt;</span> a <span class="pl-k">=</span> <span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">15</span>
<span class="pl-c1">1000000000000000</span>

julia<span class="pl-k">&gt;</span> a<span class="pl-k">*</span>a                      <span class="pl-c"><span class="pl-c">#</span> We see that a*a overflows</span>
<span class="pl-c1">5076944270305263616</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">Mod</span><span class="pl-c1">{N}</span>(a<span class="pl-k">*</span>a)              <span class="pl-c"><span class="pl-c">#</span> this gives an incorrect answer</span>
<span class="pl-c1">Mod</span><span class="pl-c1">{1000000000000000000}</span>(<span class="pl-c1">76944270305263616</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">Mod</span><span class="pl-c1">{N}</span>(a) <span class="pl-k">*</span> <span class="pl-c1">Mod</span><span class="pl-c1">{N}</span>(a)    <span class="pl-c"><span class="pl-c">#</span> but this is correct!</span>
<span class="pl-c1">Mod</span><span class="pl-c1">{1000000000000000000}</span>(<span class="pl-c1">0</span>)</pre></div>
<h2><a id="user-content-extras" class="anchor" aria-hidden="true" href="#extras"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Extras</h2>
<h3><a id="user-content-zeros-and-ones" class="anchor" aria-hidden="true" href="#zeros-and-ones"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Zeros and ones</h3>
<p>The standard Julia functions <code>zero</code>, <code>zeros</code>, <code>one</code>, and <code>ones</code> may be used
with <code>Mod</code> and <code>GaussMod</code> types:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; zero(Mod{9})
Mod{9}(0)

julia&gt; one(GaussMod{7})
Mod{7}(1 + 0im)

julia&gt; zeros(Mod{9},2,2)
2×2 Array{Mod{9},2}:
 Mod{9}(0)  Mod{9}(0)
 Mod{9}(0)  Mod{9}(0)

julia&gt; ones(GaussMod{5},4)
4-element Array{GaussMod{5},1}:
 Mod{5}(1 + 0im)
 Mod{5}(1 + 0im)
 Mod{5}(1 + 0im)
 Mod{5}(1 + 0im)
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">zero</span>(Mod{<span class="pl-c1">9</span>})
<span class="pl-c1">Mod</span><span class="pl-c1">{9}</span>(<span class="pl-c1">0</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">one</span>(GaussMod{<span class="pl-c1">7</span>})
<span class="pl-c1">Mod</span><span class="pl-c1">{7}</span>(<span class="pl-c1">1</span> <span class="pl-k">+</span> <span class="pl-c1">0im</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">zeros</span>(Mod{<span class="pl-c1">9</span>},<span class="pl-c1">2</span>,<span class="pl-c1">2</span>)
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">2</span> Array{Mod{<span class="pl-c1">9</span>},<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">Mod</span><span class="pl-c1">{9}</span>(<span class="pl-c1">0</span>)  <span class="pl-c1">Mod</span><span class="pl-c1">{9}</span>(<span class="pl-c1">0</span>)
 <span class="pl-c1">Mod</span><span class="pl-c1">{9}</span>(<span class="pl-c1">0</span>)  <span class="pl-c1">Mod</span><span class="pl-c1">{9}</span>(<span class="pl-c1">0</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">ones</span>(GaussMod{<span class="pl-c1">5</span>},<span class="pl-c1">4</span>)
<span class="pl-c1">4</span><span class="pl-k">-</span>element Array{GaussMod{<span class="pl-c1">5</span>},<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">Mod</span><span class="pl-c1">{5}</span>(<span class="pl-c1">1</span> <span class="pl-k">+</span> <span class="pl-c1">0im</span>)
 <span class="pl-c1">Mod</span><span class="pl-c1">{5}</span>(<span class="pl-c1">1</span> <span class="pl-k">+</span> <span class="pl-c1">0im</span>)
 <span class="pl-c1">Mod</span><span class="pl-c1">{5}</span>(<span class="pl-c1">1</span> <span class="pl-k">+</span> <span class="pl-c1">0im</span>)
 <span class="pl-c1">Mod</span><span class="pl-c1">{5}</span>(<span class="pl-c1">1</span> <span class="pl-k">+</span> <span class="pl-c1">0im</span>)</pre></div>
<h3><a id="user-content-random-values" class="anchor" aria-hidden="true" href="#random-values"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Random values</h3>
<p>The <code>rand</code> function can be used to produce random <code>Mod</code> or <code>GaussMod</code> values:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; rand(Mod{17})
Mod{17}(13)

julia&gt; rand(GaussMod{17})
Mod{17}(3 + 6im)
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">rand</span>(Mod{<span class="pl-c1">17</span>})
<span class="pl-c1">Mod</span><span class="pl-c1">{17}</span>(<span class="pl-c1">13</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">rand</span>(GaussMod{<span class="pl-c1">17</span>})
<span class="pl-c1">Mod</span><span class="pl-c1">{17}</span>(<span class="pl-c1">3</span> <span class="pl-k">+</span> <span class="pl-c1">6im</span>)</pre></div>
<p>With extra arguments, <code>rand</code> produces random vectors or matrices populated with
modular numbers:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; rand(GaussMod{10},4)
4-element Array{GaussMod{10},1}:
 Mod{10}(6 + 0im)
 Mod{10}(3 + 2im)
 Mod{10}(9 + 9im)
 Mod{10}(2 + 5im)

julia&gt; rand(Mod{10},2,5)
2×5 Array{Mod{10},2}:
 Mod{10}(3)  Mod{10}(1)  Mod{10}(1)  Mod{10}(3)  Mod{10}(0)
 Mod{10}(1)  Mod{10}(1)  Mod{10}(8)  Mod{10}(4)  Mod{10}(0)
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">rand</span>(GaussMod{<span class="pl-c1">10</span>},<span class="pl-c1">4</span>)
<span class="pl-c1">4</span><span class="pl-k">-</span>element Array{GaussMod{<span class="pl-c1">10</span>},<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">Mod</span><span class="pl-c1">{10}</span>(<span class="pl-c1">6</span> <span class="pl-k">+</span> <span class="pl-c1">0im</span>)
 <span class="pl-c1">Mod</span><span class="pl-c1">{10}</span>(<span class="pl-c1">3</span> <span class="pl-k">+</span> <span class="pl-c1">2im</span>)
 <span class="pl-c1">Mod</span><span class="pl-c1">{10}</span>(<span class="pl-c1">9</span> <span class="pl-k">+</span> <span class="pl-c1">9im</span>)
 <span class="pl-c1">Mod</span><span class="pl-c1">{10}</span>(<span class="pl-c1">2</span> <span class="pl-k">+</span> <span class="pl-c1">5im</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">rand</span>(Mod{<span class="pl-c1">10</span>},<span class="pl-c1">2</span>,<span class="pl-c1">5</span>)
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">5</span> Array{Mod{<span class="pl-c1">10</span>},<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">Mod</span><span class="pl-c1">{10}</span>(<span class="pl-c1">3</span>)  <span class="pl-c1">Mod</span><span class="pl-c1">{10}</span>(<span class="pl-c1">1</span>)  <span class="pl-c1">Mod</span><span class="pl-c1">{10}</span>(<span class="pl-c1">1</span>)  <span class="pl-c1">Mod</span><span class="pl-c1">{10}</span>(<span class="pl-c1">3</span>)  <span class="pl-c1">Mod</span><span class="pl-c1">{10}</span>(<span class="pl-c1">0</span>)
 <span class="pl-c1">Mod</span><span class="pl-c1">{10}</span>(<span class="pl-c1">1</span>)  <span class="pl-c1">Mod</span><span class="pl-c1">{10}</span>(<span class="pl-c1">1</span>)  <span class="pl-c1">Mod</span><span class="pl-c1">{10}</span>(<span class="pl-c1">8</span>)  <span class="pl-c1">Mod</span><span class="pl-c1">{10}</span>(<span class="pl-c1">4</span>)  <span class="pl-c1">Mod</span><span class="pl-c1">{10}</span>(<span class="pl-c1">0</span>)</pre></div>
<h3><a id="user-content-chinese-remainder-theorem" class="anchor" aria-hidden="true" href="#chinese-remainder-theorem"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Chinese remainder theorem</h3>
<p>The Chinese Remainder Theorem gives a solution to the following
problem. Given integers <code>a, b, m, n</code> with <code>gcd(m,n)==1</code> find an
integer <code>x</code> such that <code>mod(x,m)==mod(a,m)</code> and
<code>mod(x,n)==mod(b,n)</code>. We provide the <code>CRT</code> function to solve this
problem as illustrated here with <code>a=3</code>, <code>m=10</code>, <code>b=5</code>, and <code>n=17</code>:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; s = Mod{10}(3); t = Mod{17}(5);

julia&gt; CRT(s,t)
Mod{170}(73)
"><pre>julia<span class="pl-k">&gt;</span> s <span class="pl-k">=</span> <span class="pl-c1">Mod</span><span class="pl-c1">{10}</span>(<span class="pl-c1">3</span>); t <span class="pl-k">=</span> <span class="pl-c1">Mod</span><span class="pl-c1">{17}</span>(<span class="pl-c1">5</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">CRT</span>(s,t)
<span class="pl-c1">Mod</span><span class="pl-c1">{170}</span>(<span class="pl-c1">73</span>)</pre></div>
<p>We find that <code>mod(73,10)</code> equals <code>3</code> and <code>mod(73,17)</code> equals <code>5</code> as
required. The answer is reported as <code>Mod{170}(73)</code> because any value of
<code>x</code> congruent to 73 modulo 170 is a solution.</p>
<p>The <code>CRT</code> function can be applied to any number of arguments so long
as their moduli are pairwise relatively prime.</p>
<h3><a id="user-content-rationals-and-mods" class="anchor" aria-hidden="true" href="#rationals-and-mods"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Rationals and Mods</h3>
<p>The result of <code>Mod{N}(a//b)</code> is exactly
<code>Mod{N}(numerator(a)) / Mod{n}(denominator(b))</code>. This may equal
<code>Mod{N}(a)/Mod{N}(b)</code> if <code>a</code> and <code>b</code> are relatively prime to each other
and to <code>N</code>.</p>
<p>When a <code>Mod</code> and a <code>Rational</code> are operated with each other, the
<code>Rational</code> is first converted to a <code>Mod</code>, and then the operation
proceeds.</p>
<p>Bad things happen if the denominator and the modulus are not
relatively prime.</p>
<h2><a id="user-content-other-packages-using-mods" class="anchor" aria-hidden="true" href="#other-packages-using-mods"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Other Packages Using <code>Mod</code>s</h2>
<p>The <code>Mod</code> and <code>GaussMod</code> types work well with my
<a href="https://github.com/scheinerman/SimplePolynomials.jl">SimplePolynomials</a> and <a href="https://github.com/scheinerman/LinearAlgebraX.jl">LinearAlgebraX</a> modules.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using LinearAlgebraX

julia&gt; A = rand(GaussMod{13},3,3)
3×3 Array{GaussMod{13},2}:
 Mod{13}(11 + 0im)   Mod{13}(0 + 10im)  Mod{13}(1 + 9im)
  Mod{13}(8 + 4im)  Mod{13}(11 + 10im)  Mod{13}(1 + 8im)
 Mod{13}(11 + 6im)   Mod{13}(10 + 6im)  Mod{13}(7 + 3im)

julia&gt; detx(A)
Mod{13}(2 + 11im)

julia&gt; invx(A)
3×3 Array{GaussMod{13},2}:
  Mod{13}(4 + 6im)   Mod{13}(3 + 3im)    Mod{13}(5 + 1im)
  Mod{13}(5 + 0im)  Mod{13}(9 + 12im)   Mod{13}(3 + 10im)
 Mod{13}(11 + 6im)   Mod{13}(5 + 1im)  Mod{13}(10 + 12im)

julia&gt; ans * A
3×3 Array{GaussMod{13},2}:
 Mod{13}(1 + 0im)  Mod{13}(0 + 0im)  Mod{13}(0 + 0im)
 Mod{13}(0 + 0im)  Mod{13}(1 + 0im)  Mod{13}(0 + 0im)
 Mod{13}(0 + 0im)  Mod{13}(0 + 0im)  Mod{13}(1 + 0im)

julia&gt; char_poly(A)
Mod{13}(11 + 2im) + Mod{13}(2 + 1im)*x + Mod{13}(10 + 0im)*x^2 + Mod{13}(1 + 0im)*x^3
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> LinearAlgebraX

julia<span class="pl-k">&gt;</span> A <span class="pl-k">=</span> <span class="pl-c1">rand</span>(GaussMod{<span class="pl-c1">13</span>},<span class="pl-c1">3</span>,<span class="pl-c1">3</span>)
<span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">3</span> Array{GaussMod{<span class="pl-c1">13</span>},<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">Mod</span><span class="pl-c1">{13}</span>(<span class="pl-c1">11</span> <span class="pl-k">+</span> <span class="pl-c1">0im</span>)   <span class="pl-c1">Mod</span><span class="pl-c1">{13}</span>(<span class="pl-c1">0</span> <span class="pl-k">+</span> <span class="pl-c1">10im</span>)  <span class="pl-c1">Mod</span><span class="pl-c1">{13}</span>(<span class="pl-c1">1</span> <span class="pl-k">+</span> <span class="pl-c1">9im</span>)
  <span class="pl-c1">Mod</span><span class="pl-c1">{13}</span>(<span class="pl-c1">8</span> <span class="pl-k">+</span> <span class="pl-c1">4im</span>)  <span class="pl-c1">Mod</span><span class="pl-c1">{13}</span>(<span class="pl-c1">11</span> <span class="pl-k">+</span> <span class="pl-c1">10im</span>)  <span class="pl-c1">Mod</span><span class="pl-c1">{13}</span>(<span class="pl-c1">1</span> <span class="pl-k">+</span> <span class="pl-c1">8im</span>)
 <span class="pl-c1">Mod</span><span class="pl-c1">{13}</span>(<span class="pl-c1">11</span> <span class="pl-k">+</span> <span class="pl-c1">6im</span>)   <span class="pl-c1">Mod</span><span class="pl-c1">{13}</span>(<span class="pl-c1">10</span> <span class="pl-k">+</span> <span class="pl-c1">6im</span>)  <span class="pl-c1">Mod</span><span class="pl-c1">{13}</span>(<span class="pl-c1">7</span> <span class="pl-k">+</span> <span class="pl-c1">3im</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">detx</span>(A)
<span class="pl-c1">Mod</span><span class="pl-c1">{13}</span>(<span class="pl-c1">2</span> <span class="pl-k">+</span> <span class="pl-c1">11im</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">invx</span>(A)
<span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">3</span> Array{GaussMod{<span class="pl-c1">13</span>},<span class="pl-c1">2</span>}<span class="pl-k">:</span>
  <span class="pl-c1">Mod</span><span class="pl-c1">{13}</span>(<span class="pl-c1">4</span> <span class="pl-k">+</span> <span class="pl-c1">6im</span>)   <span class="pl-c1">Mod</span><span class="pl-c1">{13}</span>(<span class="pl-c1">3</span> <span class="pl-k">+</span> <span class="pl-c1">3im</span>)    <span class="pl-c1">Mod</span><span class="pl-c1">{13}</span>(<span class="pl-c1">5</span> <span class="pl-k">+</span> <span class="pl-c1">1im</span>)
  <span class="pl-c1">Mod</span><span class="pl-c1">{13}</span>(<span class="pl-c1">5</span> <span class="pl-k">+</span> <span class="pl-c1">0im</span>)  <span class="pl-c1">Mod</span><span class="pl-c1">{13}</span>(<span class="pl-c1">9</span> <span class="pl-k">+</span> <span class="pl-c1">12im</span>)   <span class="pl-c1">Mod</span><span class="pl-c1">{13}</span>(<span class="pl-c1">3</span> <span class="pl-k">+</span> <span class="pl-c1">10im</span>)
 <span class="pl-c1">Mod</span><span class="pl-c1">{13}</span>(<span class="pl-c1">11</span> <span class="pl-k">+</span> <span class="pl-c1">6im</span>)   <span class="pl-c1">Mod</span><span class="pl-c1">{13}</span>(<span class="pl-c1">5</span> <span class="pl-k">+</span> <span class="pl-c1">1im</span>)  <span class="pl-c1">Mod</span><span class="pl-c1">{13}</span>(<span class="pl-c1">10</span> <span class="pl-k">+</span> <span class="pl-c1">12im</span>)

julia<span class="pl-k">&gt;</span> ans <span class="pl-k">*</span> A
<span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">3</span> Array{GaussMod{<span class="pl-c1">13</span>},<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">Mod</span><span class="pl-c1">{13}</span>(<span class="pl-c1">1</span> <span class="pl-k">+</span> <span class="pl-c1">0im</span>)  <span class="pl-c1">Mod</span><span class="pl-c1">{13}</span>(<span class="pl-c1">0</span> <span class="pl-k">+</span> <span class="pl-c1">0im</span>)  <span class="pl-c1">Mod</span><span class="pl-c1">{13}</span>(<span class="pl-c1">0</span> <span class="pl-k">+</span> <span class="pl-c1">0im</span>)
 <span class="pl-c1">Mod</span><span class="pl-c1">{13}</span>(<span class="pl-c1">0</span> <span class="pl-k">+</span> <span class="pl-c1">0im</span>)  <span class="pl-c1">Mod</span><span class="pl-c1">{13}</span>(<span class="pl-c1">1</span> <span class="pl-k">+</span> <span class="pl-c1">0im</span>)  <span class="pl-c1">Mod</span><span class="pl-c1">{13}</span>(<span class="pl-c1">0</span> <span class="pl-k">+</span> <span class="pl-c1">0im</span>)
 <span class="pl-c1">Mod</span><span class="pl-c1">{13}</span>(<span class="pl-c1">0</span> <span class="pl-k">+</span> <span class="pl-c1">0im</span>)  <span class="pl-c1">Mod</span><span class="pl-c1">{13}</span>(<span class="pl-c1">0</span> <span class="pl-k">+</span> <span class="pl-c1">0im</span>)  <span class="pl-c1">Mod</span><span class="pl-c1">{13}</span>(<span class="pl-c1">1</span> <span class="pl-k">+</span> <span class="pl-c1">0im</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">char_poly</span>(A)
<span class="pl-c1">Mod</span><span class="pl-c1">{13}</span>(<span class="pl-c1">11</span> <span class="pl-k">+</span> <span class="pl-c1">2im</span>) <span class="pl-k">+</span> <span class="pl-c1">Mod</span><span class="pl-c1">{13}</span>(<span class="pl-c1">2</span> <span class="pl-k">+</span> <span class="pl-c1">1im</span>)<span class="pl-k">*</span>x <span class="pl-k">+</span> <span class="pl-c1">Mod</span><span class="pl-c1">{13}</span>(<span class="pl-c1">10</span> <span class="pl-k">+</span> <span class="pl-c1">0im</span>)<span class="pl-k">*</span>x<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">+</span> <span class="pl-c1">Mod</span><span class="pl-c1">{13}</span>(<span class="pl-c1">1</span> <span class="pl-k">+</span> <span class="pl-c1">0im</span>)<span class="pl-k">*</span>x<span class="pl-k">^</span><span class="pl-c1">3</span></pre></div>
</article></div>