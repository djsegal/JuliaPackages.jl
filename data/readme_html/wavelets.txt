<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p><a target="_blank" rel="noopener noreferrer" href="wavelets.png"><img src="wavelets.png" alt="Wavelets" style="max-width:100%;"></a></p>
<p><a href="https://travis-ci.org/JuliaDSP/Wavelets.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/dc3b31e5bf216c7e3d8a1e5ca1faf7929a40d826/68747470733a2f2f7472617669732d63692e6f72672f4a756c69614453502f576176656c6574732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaDSP/Wavelets.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/JuliaDSP/Wavelets.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/59fd406ac3b39af03f4431e45e07ca9703df68d3/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f4a756c69614453502f576176656c6574732e6a6c2f62616467652e7376673f6272616e63683d6d617374657226736572766963653d676974687562" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/JuliaDSP/Wavelets.jl/badge.svg?branch=master&amp;service=github" style="max-width:100%;"></a></p>
<p>A <a href="https://github.com/JuliaLang/julia">Julia</a> package for fast wavelet transforms (1-D, 2-D, 3-D, by filtering or lifting). The package includes discrete wavelet transforms, column-wise discrete wavelet transforms, and wavelet packet transforms.</p>
<ul>
<li>
<p>1st generation wavelets using filter banks (periodic and orthogonal). Filters are included for the following types: Haar, Daubechies, Coiflet, Symmlet, Battle-Lemarie, Beylkin, Vaidyanathan.</p>
</li>
<li>
<p>2nd generation wavelets by lifting (periodic and general type including orthogonal and biorthogonal). Included lifting schemes are currently only for Haar and Daubechies (under development). A new lifting scheme can be easily constructed by users. The current implementation of the lifting transforms is 2x faster than the filter transforms.</p>
</li>
<li>
<p>Thresholding, best basis and denoising functions, e.g. TI denoising by cycle spinning, best basis for WPT, noise estimation, matching pursuit. See example code and image below.</p>
</li>
<li>
<p>Wavelet utilities e.g. indexing and size calculation, scaling and wavelet functions computation, test functions, up and down sampling, filter mirrors, coefficient counting, inplace circshifts, and more.</p>
</li>
<li>
<p>Plotting/visualization utilities for 1-D and 2-D signals.</p>
</li>
</ul>
<p>See license (MIT) in LICENSE.md.</p>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<p>Install via the package manager and load with <code>using</code></p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>Wavelets<span class="pl-pds">"</span></span>)
julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Wavelets</pre></div>
<h2><a id="user-content-api" class="anchor" aria-hidden="true" href="#api"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>API</h2>
<h4><a id="user-content-wavelet-transforms" class="anchor" aria-hidden="true" href="#wavelet-transforms"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Wavelet Transforms</h4>
<p>The functions <code>dwt</code> and <code>wpt</code> (and their inverses) are linear operators. See <code>wavelet</code> below for construction of the type <code>wt</code>.</p>
<p><strong>Discrete Wavelet Transform</strong></p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span> DWT</span>
<span class="pl-c1">dwt</span>(x, wt, L<span class="pl-k">=</span><span class="pl-c1">maxtransformlevels</span>(x))
<span class="pl-c1">idwt</span>(x, wt, L<span class="pl-k">=</span><span class="pl-c1">maxtransformlevels</span>(x))
<span class="pl-c1">dwt!</span>(y, x, filter, L<span class="pl-k">=</span><span class="pl-c1">maxtransformlevels</span>(x))
<span class="pl-c1">idwt!</span>(y, scheme, L<span class="pl-k">=</span><span class="pl-c1">maxtransformlevels</span>(x))</pre></div>
<p><strong>Wavelet Packet Transform</strong></p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span> WPT (tree can also be an integer, equivalent to maketree(length(x), L, :full))</span>
<span class="pl-c1">wpt</span>(x, wt, tree<span class="pl-k">::</span><span class="pl-c1">BitVector</span><span class="pl-k">=</span><span class="pl-c1">maketree</span>(x, <span class="pl-c1">:full</span>))
<span class="pl-c1">iwpt</span>(x, wt, tree<span class="pl-k">::</span><span class="pl-c1">BitVector</span><span class="pl-k">=</span><span class="pl-c1">maketree</span>(x, <span class="pl-c1">:full</span>))
<span class="pl-c1">wpt!</span>(y, x, filter, tree<span class="pl-k">::</span><span class="pl-c1">BitVector</span><span class="pl-k">=</span><span class="pl-c1">maketree</span>(x, <span class="pl-c1">:full</span>))
<span class="pl-c1">iwpt!</span>(y, scheme, tree<span class="pl-k">::</span><span class="pl-c1">BitVector</span><span class="pl-k">=</span><span class="pl-c1">maketree</span>(y, <span class="pl-c1">:full</span>))</pre></div>
<h4><a id="user-content-wavelet-types" class="anchor" aria-hidden="true" href="#wavelet-types"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Wavelet Types</h4>
<p>The function <code>wavelet</code> is a type contructor for the transform functions. The transform type <code>t</code> can be either <code>WT.Filter</code> or <code>WT.Lifting</code>.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">wavelet</span>(c, t<span class="pl-k">=</span>WT<span class="pl-k">.</span>Filter, boundary<span class="pl-k">=</span>WT<span class="pl-k">.</span>Periodic)</pre></div>
<h4><a id="user-content-wavelet-classes" class="anchor" aria-hidden="true" href="#wavelet-classes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Wavelet Classes</h4>
<p>The module WT contains the types for wavelet classes. The module defines constants of the form e.g. <code>WT.coif4</code> as shortcuts for <code>WT.Coiflet{4}()</code>.
The numbers for orthogonal wavelets indicate the number vanishing moments of the wavelet function.</p>
<table>
<thead>
<tr>
<th align="left">Class Type</th>
<th align="left">Namebase</th>
<th align="left">Supertype</th>
<th align="left">Numbers</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left"><code>Haar</code></td>
<td align="left">haar</td>
<td align="left"><code>OrthoWaveletClass</code></td>
<td align="left"></td>
</tr>
<tr>
<td align="left"><code>Coiflet</code></td>
<td align="left">coif</td>
<td align="left"><code>OrthoWaveletClass</code></td>
<td align="left">2:2:8</td>
</tr>
<tr>
<td align="left"><code>Daubechies</code></td>
<td align="left">db</td>
<td align="left"><code>OrthoWaveletClass</code></td>
<td align="left">1:Inf</td>
</tr>
<tr>
<td align="left"><code>Symlet</code></td>
<td align="left">sym</td>
<td align="left"><code>OrthoWaveletClass</code></td>
<td align="left">4:10</td>
</tr>
<tr>
<td align="left"><code>Battle</code></td>
<td align="left">batt</td>
<td align="left"><code>OrthoWaveletClass</code></td>
<td align="left">2:2:6</td>
</tr>
<tr>
<td align="left"><code>Beylkin</code></td>
<td align="left">beyl</td>
<td align="left"><code>OrthoWaveletClass</code></td>
<td align="left"></td>
</tr>
<tr>
<td align="left"><code>Vaidyanathan</code></td>
<td align="left">vaid</td>
<td align="left"><code>OrthoWaveletClass</code></td>
<td align="left"></td>
</tr>
<tr>
<td align="left"><code>CDF</code></td>
<td align="left">cdf</td>
<td align="left"><code>BiOrthoWaveletClass</code></td>
<td align="left">(9,7)</td>
</tr>
</tbody>
</table>
<p>Class information</p>
<div class="highlight highlight-source-julia"><pre>WT<span class="pl-k">.</span><span class="pl-c1">class</span>(<span class="pl-k">::</span><span class="pl-c1">WaveletClass</span>) <span class="pl-k">::</span><span class="pl-c1">String</span>              <span class="pl-c"><span class="pl-c">#</span> class full name</span>
WT<span class="pl-k">.</span><span class="pl-c1">name</span>(<span class="pl-k">::</span><span class="pl-c1">WaveletClass</span>) <span class="pl-k">::</span><span class="pl-c1">String</span>               <span class="pl-c"><span class="pl-c">#</span> type short name</span>
WT<span class="pl-k">.</span><span class="pl-c1">vanishingmoments</span>(<span class="pl-k">::</span><span class="pl-c1">WaveletClass</span>)            <span class="pl-c"><span class="pl-c">#</span> vanishing moments of wavelet function</span></pre></div>
<p>Transform type information</p>
<div class="highlight highlight-source-julia"><pre>WT<span class="pl-k">.</span><span class="pl-c1">name</span>(wt)                                     <span class="pl-c"><span class="pl-c">#</span> type short name</span>
WT<span class="pl-k">.</span><span class="pl-c1">length</span>(f<span class="pl-k">::</span><span class="pl-c1">OrthoFilter</span>)                       <span class="pl-c"><span class="pl-c">#</span> length of filter</span>
WT<span class="pl-k">.</span><span class="pl-c1">qmf</span>(f<span class="pl-k">::</span><span class="pl-c1">OrthoFilter</span>)                          <span class="pl-c"><span class="pl-c">#</span> quadrature mirror filter</span>
WT<span class="pl-k">.</span><span class="pl-c1">makeqmfpair</span>(f<span class="pl-k">::</span><span class="pl-c1">OrthoFilter</span>, fw<span class="pl-k">=</span><span class="pl-c1">true</span>)
WT<span class="pl-k">.</span><span class="pl-c1">makereverseqmfpair</span>(f<span class="pl-k">::</span><span class="pl-c1">OrthoFilter</span>, fw<span class="pl-k">=</span><span class="pl-c1">true</span>)</pre></div>
<h2><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Examples</h2>
<p>The simplest way to transform a signal x is</p>
<div class="highlight highlight-source-julia"><pre>xt <span class="pl-k">=</span> <span class="pl-c1">dwt</span>(x, <span class="pl-c1">wavelet</span>(WT<span class="pl-k">.</span>db2))</pre></div>
<p>The transform type can be more explicitly specified (filter, Periodic, Orthogonal, 4 vanishing moments)</p>
<div class="highlight highlight-source-julia"><pre>wt <span class="pl-k">=</span> <span class="pl-c1">wavelet</span>(WT<span class="pl-k">.</span><span class="pl-c1">Coiflet</span><span class="pl-c1">{4}</span>(), WT<span class="pl-k">.</span>Filter, WT<span class="pl-k">.</span>Periodic)</pre></div>
<p>For a periodic biorthogonal CDF 9/7 lifting scheme:</p>
<div class="highlight highlight-source-julia"><pre>wt <span class="pl-k">=</span> <span class="pl-c1">wavelet</span>(WT<span class="pl-k">.</span>cdf97, WT<span class="pl-k">.</span>Lifting)</pre></div>
<p>Perform a transform of vector x</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span> 5 level transform</span>
xt <span class="pl-k">=</span> <span class="pl-c1">dwt</span>(x, wt, <span class="pl-c1">5</span>)
<span class="pl-c"><span class="pl-c">#</span> inverse tranform</span>
xti <span class="pl-k">=</span> <span class="pl-c1">idwt</span>(xt, wt, <span class="pl-c1">5</span>)
<span class="pl-c"><span class="pl-c">#</span> a full transform</span>
xt <span class="pl-k">=</span> <span class="pl-c1">dwt</span>(x, wt)</pre></div>
<p>Other examples:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span> scaling filters is easy</span>
wt <span class="pl-k">=</span> <span class="pl-c1">wavelet</span>(WT<span class="pl-k">.</span>haar)
wt <span class="pl-k">=</span> WT<span class="pl-k">.</span><span class="pl-c1">scale</span>(wt, <span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-c1">sqrt</span>(<span class="pl-c1">2</span>))
<span class="pl-c"><span class="pl-c">#</span> signals can be transformed inplace with a low-level command</span>
<span class="pl-c"><span class="pl-c">#</span> requiring very little memory allocation (especially for L=1 for filters)</span>
<span class="pl-c1">dwt!</span>(x, wt, L)      <span class="pl-c"><span class="pl-c">#</span> inplace (lifting)</span>
<span class="pl-c1">dwt!</span>(xt, x, wt, L)  <span class="pl-c"><span class="pl-c">#</span> write to xt (filter)</span>

<span class="pl-c"><span class="pl-c">#</span> denoising with default parameters (VisuShrink hard thresholding)</span>
x0 <span class="pl-k">=</span> <span class="pl-c1">testfunction</span>(<span class="pl-c1">128</span>, <span class="pl-s"><span class="pl-pds">"</span>HeaviSine<span class="pl-pds">"</span></span>)
x <span class="pl-k">=</span> x0 <span class="pl-k">+</span> <span class="pl-c1">0.3</span><span class="pl-k">*</span><span class="pl-c1">randn</span>(<span class="pl-c1">128</span>)
y <span class="pl-k">=</span> <span class="pl-c1">denoise</span>(x)

<span class="pl-c"><span class="pl-c">#</span> plotting utilities 1-d (see images and code in /example)</span>
x <span class="pl-k">=</span> <span class="pl-c1">testfunction</span>(<span class="pl-c1">128</span>, <span class="pl-s"><span class="pl-pds">"</span>Bumps<span class="pl-pds">"</span></span>)
y <span class="pl-k">=</span> <span class="pl-c1">dwt</span>(x, <span class="pl-c1">wavelet</span>(WT<span class="pl-k">.</span>cdf97, WT<span class="pl-k">.</span>Lifting))
d,l <span class="pl-k">=</span> <span class="pl-c1">wplotdots</span>(y, <span class="pl-c1">0.1</span>, <span class="pl-c1">128</span>)
A <span class="pl-k">=</span> <span class="pl-c1">wplotim</span>(y)
<span class="pl-c"><span class="pl-c">#</span> plotting utilities 2-d</span>
img <span class="pl-k">=</span> <span class="pl-c1">imread</span>(<span class="pl-s"><span class="pl-pds">"</span>lena.png<span class="pl-pds">"</span></span>)
x <span class="pl-k">=</span> <span class="pl-c1">permutedims</span>(img<span class="pl-k">.</span>data, [<span class="pl-c1">ndims</span>(img<span class="pl-k">.</span>data)<span class="pl-k">:</span><span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">1</span>])
L <span class="pl-k">=</span> <span class="pl-c1">2</span>
xts <span class="pl-k">=</span> <span class="pl-c1">wplotim</span>(x, L, <span class="pl-c1">wavelet</span>(WT<span class="pl-k">.</span>db3))</pre></div>
<p>See <a href="/example/transform1d_bumps.png">Bumps</a> and <a href="/example/transform2d_lena.jpg">Lena</a> for plot images.</p>
<h2><a id="user-content-thresholding" class="anchor" aria-hidden="true" href="#thresholding"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Thresholding</h2>
<p>The <code>Wavelets.Threshold</code> module includes the following utilities</p>
<ul>
<li>denoising (VisuShrink, translation invariant (TI))</li>
<li>best basis for WPT</li>
<li>noise estimator</li>
<li>matching pursuit</li>
<li>threshold functions (see table for types)</li>
</ul>
<h4><a id="user-content-api-1" class="anchor" aria-hidden="true" href="#api-1"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>API</h4>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span> threshold types with parameter</span>
<span class="pl-c1">threshold!</span>(x<span class="pl-k">::</span><span class="pl-c1">AbstractArray</span>, TH<span class="pl-k">::</span><span class="pl-c1">THType</span>, t<span class="pl-k">::</span><span class="pl-c1">Real</span>)
<span class="pl-c1">threshold</span>(x<span class="pl-k">::</span><span class="pl-c1">AbstractArray</span>, TH<span class="pl-k">::</span><span class="pl-c1">THType</span>, t<span class="pl-k">::</span><span class="pl-c1">Real</span>)
<span class="pl-c"><span class="pl-c">#</span> without parameter (PosTH, NegTH)</span>
<span class="pl-c1">threshold!</span>(x<span class="pl-k">::</span><span class="pl-c1">AbstractArray</span>, TH<span class="pl-k">::</span><span class="pl-c1">THType</span>)
<span class="pl-c1">threshold</span>(x<span class="pl-k">::</span><span class="pl-c1">AbstractArray</span>, TH<span class="pl-k">::</span><span class="pl-c1">THType</span>)
<span class="pl-c"><span class="pl-c">#</span> denoising</span>
<span class="pl-c1">denoise</span>(x<span class="pl-k">::</span><span class="pl-c1">AbstractArray</span>,
        wt<span class="pl-k">=</span>DEFAULT_WAVELET;
        L<span class="pl-k">::</span><span class="pl-c1">Int</span><span class="pl-k">=</span><span class="pl-c1">min</span>(<span class="pl-c1">maxtransformlevels</span>(x),<span class="pl-c1">6</span>),
        dnt<span class="pl-k">=</span><span class="pl-c1">VisuShrink</span>(<span class="pl-c1">size</span>(x,<span class="pl-c1">1</span>)),
        estnoise<span class="pl-k">::</span><span class="pl-c1">Function</span><span class="pl-k">=</span>noisest,
        TI<span class="pl-k">=</span><span class="pl-c1">false</span>,
        nspin<span class="pl-k">=</span><span class="pl-c1">tuple</span>([<span class="pl-c1">8</span> <span class="pl-k">for</span> i<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">ndims</span>(x)]<span class="pl-k">.</span><span class="pl-k">..</span>) )
<span class="pl-c"><span class="pl-c">#</span> entropy</span>
<span class="pl-c1">coefentropy</span>(x, et<span class="pl-k">::</span><span class="pl-c1">Entropy</span>, nrm)
<span class="pl-c"><span class="pl-c">#</span> best basis for WPT limited to active inital tree nodes</span>
<span class="pl-c1">bestbasistree</span>(y<span class="pl-k">::</span><span class="pl-c1">AbstractVector</span>, wt<span class="pl-k">::</span><span class="pl-c1">DiscreteWavelet</span>,
        L<span class="pl-k">::</span><span class="pl-c1">Integer</span><span class="pl-k">=</span><span class="pl-c1">nscales</span>(y), et<span class="pl-k">::</span><span class="pl-c1">Entropy</span><span class="pl-k">=</span><span class="pl-c1">ShannonEntropy</span>() )
<span class="pl-c1">bestbasistree</span>(y<span class="pl-k">::</span><span class="pl-c1">AbstractVector</span>, wt<span class="pl-k">::</span><span class="pl-c1">DiscreteWavelet</span>,
        tree<span class="pl-k">::</span><span class="pl-c1">BitVector</span>, et<span class="pl-k">::</span><span class="pl-c1">Entropy</span><span class="pl-k">=</span><span class="pl-c1">ShannonEntropy</span>() )</pre></div>
<table>
<thead>
<tr>
<th align="left">Type</th>
<th align="left">Details</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left"><strong>Thresholding</strong></td>
<td align="left"><code> &lt;: THType</code></td>
</tr>
<tr>
<td align="left"><code>HardTH</code></td>
<td align="left">hard thresholding</td>
</tr>
<tr>
<td align="left"><code>SoftTH</code></td>
<td align="left">soft threshold</td>
</tr>
<tr>
<td align="left"><code>SemiSoftTH</code></td>
<td align="left">semisoft thresholding</td>
</tr>
<tr>
<td align="left"><code>SteinTH</code></td>
<td align="left">stein thresholding</td>
</tr>
<tr>
<td align="left"><code>PosTH</code></td>
<td align="left">positive thresholding</td>
</tr>
<tr>
<td align="left"><code>NegTH</code></td>
<td align="left">negative thresholding</td>
</tr>
<tr>
<td align="left"><code>BiggestTH</code></td>
<td align="left">biggest m-term (best m-term) approx.</td>
</tr>
<tr>
<td align="left"><strong>Denoising</strong></td>
<td align="left"><code> &lt;: DNFT</code></td>
</tr>
<tr>
<td align="left"><code>VisuShrink</code></td>
<td align="left">VisuShrink denoising</td>
</tr>
<tr>
<td align="left"><strong>Entropy</strong></td>
<td align="left"><code> &lt;: Entropy</code></td>
</tr>
<tr>
<td align="left"><code>ShannonEntropy</code></td>
<td align="left"><code>-v^2*log(v^2)</code> (Coifman-Wickerhauser)</td>
</tr>
<tr>
<td align="left"><code>LogEnergyEntropy</code></td>
<td align="left"><code>-log(v^2)</code></td>
</tr>
</tbody>
</table>
<h4><a id="user-content-examples-1" class="anchor" aria-hidden="true" href="#examples-1"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Examples</h4>
<p>Find best basis tree for <code>wpt</code>, and compare to <code>dwt</code> using biggest m-term approximations.</p>
<div class="highlight highlight-source-julia"><pre>wt <span class="pl-k">=</span> <span class="pl-c1">wavelet</span>(WT<span class="pl-k">.</span>db4)
x <span class="pl-k">=</span> <span class="pl-c1">sin</span>.(<span class="pl-c1">4</span><span class="pl-k">*</span><span class="pl-c1">range</span>(<span class="pl-c1">0</span>, stop<span class="pl-k">=</span><span class="pl-c1">2</span><span class="pl-k">*</span>pi<span class="pl-k">-</span><span class="pl-c1">eps</span>(), length<span class="pl-k">=</span><span class="pl-c1">1024</span>))
tree <span class="pl-k">=</span> <span class="pl-c1">bestbasistree</span>(x, wt)
xtb <span class="pl-k">=</span> <span class="pl-c1">wpt</span>(x, wt, tree)
xt <span class="pl-k">=</span> <span class="pl-c1">dwt</span>(x, wt)
<span class="pl-c"><span class="pl-c">#</span> get biggest m-term approximations</span>
m <span class="pl-k">=</span> <span class="pl-c1">50</span>
<span class="pl-c1">threshold!</span>(xtb, <span class="pl-c1">BiggestTH</span>(), m)
<span class="pl-c1">threshold!</span>(xt, <span class="pl-c1">BiggestTH</span>(), m)
<span class="pl-c"><span class="pl-c">#</span> compare sparse approximations in ell_2 norm</span>
<span class="pl-c1">norm</span>(x <span class="pl-k">-</span> <span class="pl-c1">iwpt</span>(xtb, wt, tree), <span class="pl-c1">2</span>) <span class="pl-c"><span class="pl-c">#</span> best basis wpt</span>
<span class="pl-c1">norm</span>(x <span class="pl-k">-</span> <span class="pl-c1">idwt</span>(xt, wt), <span class="pl-c1">2</span>)        <span class="pl-c"><span class="pl-c">#</span> regular dwt</span></pre></div>
<pre><code>julia&gt; norm(x - iwpt(xtb, wt, tree), 2)
0.008941070750964843
julia&gt; norm(x - idwt(xt, wt), 2)
0.05964431178940861
</code></pre>
<p>Denoising:</p>
<div class="highlight highlight-source-julia"><pre>n <span class="pl-k">=</span> <span class="pl-c1">2</span><span class="pl-k">^</span><span class="pl-c1">11</span>;
x0 <span class="pl-k">=</span> <span class="pl-c1">testfunction</span>(n,<span class="pl-s"><span class="pl-pds">"</span>Doppler<span class="pl-pds">"</span></span>)
x <span class="pl-k">=</span> x0 <span class="pl-k">+</span> <span class="pl-c1">0.05</span><span class="pl-k">*</span><span class="pl-c1">randn</span>(n)
y <span class="pl-k">=</span> <span class="pl-c1">denoise</span>(x,TI<span class="pl-k">=</span><span class="pl-c1">true</span>)</pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="/example/denoise_doppler.png"><img src="/example/denoise_doppler.png" alt="Doppler" style="max-width:100%;"></a></p>
<h2><a id="user-content-benchmarks" class="anchor" aria-hidden="true" href="#benchmarks"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Benchmarks</h2>
<p>Timing of <code>dwt</code> (using <code>db2</code> filter of length 4) and <code>fft</code>. The lifting wavelet transforms are faster and use less memory than <code>fft</code> in 1-D and 2-D. <code>dwt</code> by lifting is currently 2x faster than by filtering.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span> 10 iterations</span>
dwt by filtering (N<span class="pl-k">=</span><span class="pl-c1">1048576</span>), <span class="pl-c1">20</span> levels
elapsed time<span class="pl-k">:</span> <span class="pl-c1">0.247907616</span> seconds (<span class="pl-c1">125861504</span> bytes allocated, <span class="pl-c1">8.81</span><span class="pl-k">%</span> gc time)
dwt by lifting (N<span class="pl-k">=</span><span class="pl-c1">1048576</span>), <span class="pl-c1">20</span> levels
elapsed time<span class="pl-k">:</span> <span class="pl-c1">0.131240966</span> seconds (<span class="pl-c1">104898544</span> bytes allocated, <span class="pl-c1">17.48</span><span class="pl-k">%</span> gc time)
fft (N<span class="pl-k">=</span><span class="pl-c1">1048576</span>), (FFTW)
elapsed time<span class="pl-k">:</span> <span class="pl-c1">0.487693289</span> seconds (<span class="pl-c1">167805296</span> bytes allocated, <span class="pl-c1">8.67</span><span class="pl-k">%</span> gc time)</pre></div>
<p>For 2-D transforms (using a <code>db4</code> filter and CDF 9/7 lifting scheme):</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span> 10 iterations</span>
dwt by filtering (N<span class="pl-k">=</span><span class="pl-c1">1024</span>x1024), <span class="pl-c1">10</span> levels
elapsed time<span class="pl-k">:</span> <span class="pl-c1">0.773281141</span> seconds (<span class="pl-c1">85813504</span> bytes allocated, <span class="pl-c1">2.87</span><span class="pl-k">%</span> gc time)
dwt by lifting (N<span class="pl-k">=</span><span class="pl-c1">1024</span>x1024), <span class="pl-c1">10</span> levels
elapsed time<span class="pl-k">:</span> <span class="pl-c1">0.317705928</span> seconds (<span class="pl-c1">88765424</span> bytes allocated, <span class="pl-c1">3.44</span><span class="pl-k">%</span> gc time)
fft (N<span class="pl-k">=</span><span class="pl-c1">1024</span>x1024), (FFTW)
elapsed time<span class="pl-k">:</span> <span class="pl-c1">0.577537263</span> seconds (<span class="pl-c1">167805888</span> bytes allocated, <span class="pl-c1">5.53</span><span class="pl-k">%</span> gc time)</pre></div>
<p>By using the low-level function <code>dwt!</code> and pre-allocating temporary arrays, significant gains can be made in terms of memory usage (and some speedup). This is useful when transforming multiple times.</p>
<h2><a id="user-content-to-do-list" class="anchor" aria-hidden="true" href="#to-do-list"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>To-do list</h2>
<ul>
<li>Transforms for non-square 2-D signals</li>
<li>Boundary extensions (other than periodic)</li>
<li>Boundary orthogonal wavelets</li>
<li>Define more lifting schemes</li>
<li>WPT in 2-D</li>
<li>Stationary transform</li>
<li>Continuous wavelets</li>
<li>Wavelet scalogram</li>
</ul>
</article></div>