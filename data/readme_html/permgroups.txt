<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p dir="auto">This package implements permutations (<code>Perms</code>), groups (<code>Groups</code>) and combines them to make permutation groups (<code>PermGroups</code>).</p>
<p dir="auto">It just depends on the package <code>Combinat</code>. The modules <code>Perms</code> and <code>Groups</code> could be independent packages of their own.</p>
<p dir="auto"><a id="user-content-permutations"></a></p>
<p dir="auto"><a id="user-content-permutations-1"></a></p>
<h1 dir="auto"><a id="user-content-permutations" class="anchor" aria-hidden="true" href="#permutations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Permutations</h1>
<p dir="auto"><a id="user-content-permgroups.perms" href="#PermGroups.Perms">#</a>
<strong><code>PermGroups.Perms</code></strong> — <em>Module</em>.</p>
<p dir="auto">This package implements permutations and some functions of them. It depends only  on  the  package  <code>Combinat</code> (which itself depends on <code>Primes</code>).</p>
<p dir="auto">This  package  follows  the  design  of  permutations  in the GAP language. <code>Perm</code>s  are permutations  of the  set <code>1:n</code>,  represented internally  as a vector  of <code>n</code>  integers holding  the images  of <code>1:n</code>.  The integer <code>n</code> is called  the degree  of the  permutation. In  this package,  as in  GAP (and contrary  to the philosophy of Magma or the package <code>Permutations.jl</code>), two permutations of different  degrees  can  be  multiplied (the result has the larger  degree). Two permutations  are equal if  and only if  they move the same points in the same way, so two permutations of different degree can be equal; the degree is thus an implementation detail so usually it should not be used. One should rather use the function <code>largest_moved_point</code>.</p>
<p dir="auto">This  design makes it  easy to multiply  permutations coming from different groups, like a group and one of its subgroups. It has a negligible overhead compared to the design where the degree is fixed.</p>
<p dir="auto">The default constructor for a permutation uses the list of images of <code>1:n</code>, like  <code>Perm([2,3,1,5,4])</code>.  Often  it  is  more  convenient  to  use  cycle decompositions:    the   above   permutation    has   cycle   decomposition <code>(1,2,3)(4,5)</code>    thus   can   be    written   <code>Perm(1,2,3)*Perm(4,5)</code>   or <code>perm"(1,2,3)(4,5)"</code>  (this last form  can parse a  permutation coming from GAP  or the default printing at the REPL).  The list of images of <code>1:n</code> can be  recovered from the  permutation by the  function <code>vec</code>; note that equal permutations with different degrees will have different <code>vec</code>.</p>
<p dir="auto">The  complete type of a permutation  is <code>Perm{T}</code> where <code>T&lt;:Integer</code>, where <code>Vector{T}</code>  is the type of the vector which holds the image of <code>1:n</code>. This can  be used to save space or  time. For instance <code>Perm{UInt8}</code> can be used for  Weyl groups of rank≤8 since they permute  at most 240 roots. If <code>T</code> is not  specified we  take it  to be  <code>Int16</code> since  this is a good compromise between   speed,  compactness  and  possible  size  of  <code>n</code>.  One  can  mix permutations of different integer types; they are promoted to the wider one when multiplying.</p>
<p dir="auto"><strong>Examples of operations with permutations</strong></p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; a=Perm(1,2,3)
(1,2,3)

julia&gt; vec(a)
3-element Vector{Int16}:
 2
 3
 1

julia&gt; a==Perm(vec(a))
true

julia&gt; b=Perm(1,2,3,4)
(1,2,3,4)

julia&gt; a*b     # product
(1,3,2,4)

julia&gt; inv(a)  # inverse
(1,3,2)

julia&gt; a/b     # quotient  a*inv(b)
(3,4)

julia&gt; a\b     # left quotient inv(a)*b
(1,4)

julia&gt; a^b     # conjugation inv(b)*a*b
(2,3,4)

julia&gt; b^2     # square
(1,3)(2,4)

julia&gt; 1^a     # image by a of point 1
2

julia&gt; one(a)  # trivial permutation
()

julia&gt; sign(a) # signature of permutation
1

julia&gt; order(a) # order (least trivial power) of permutation
3

julia&gt; largest_moved_point(a)
3

julia&gt; smallest_moved_point(a)
1

julia&gt; Perm{Int8}(a) # convert a to Perm{Int8}
Perm{Int8}: (1,2,3)

julia&gt; Matrix(b)  # permutation matrix of b
4×4 Matrix{Bool}:
 0  1  0  0
 0  0  1  0
 0  0  0  1
 1  0  0  0"><pre lang="julia-repl" class="notranslate"><code>julia&gt; a=Perm(1,2,3)
(1,2,3)

julia&gt; vec(a)
3-element Vector{Int16}:
 2
 3
 1

julia&gt; a==Perm(vec(a))
true

julia&gt; b=Perm(1,2,3,4)
(1,2,3,4)

julia&gt; a*b     # product
(1,3,2,4)

julia&gt; inv(a)  # inverse
(1,3,2)

julia&gt; a/b     # quotient  a*inv(b)
(3,4)

julia&gt; a\b     # left quotient inv(a)*b
(1,4)

julia&gt; a^b     # conjugation inv(b)*a*b
(2,3,4)

julia&gt; b^2     # square
(1,3)(2,4)

julia&gt; 1^a     # image by a of point 1
2

julia&gt; one(a)  # trivial permutation
()

julia&gt; sign(a) # signature of permutation
1

julia&gt; order(a) # order (least trivial power) of permutation
3

julia&gt; largest_moved_point(a)
3

julia&gt; smallest_moved_point(a)
1

julia&gt; Perm{Int8}(a) # convert a to Perm{Int8}
Perm{Int8}: (1,2,3)

julia&gt; Matrix(b)  # permutation matrix of b
4×4 Matrix{Bool}:
 0  1  0  0
 0  0  1  0
 0  0  0  1
 1  0  0  0
</code></pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; randPerm(10) # random permutation of 1:10
(1,8,4,2,9,7,5,10,3,6)"><pre lang="julia-rep1" class="notranslate"><code>julia&gt; randPerm(10) # random permutation of 1:10
(1,8,4,2,9,7,5,10,3,6)
</code></pre></div>
<p dir="auto"><code>Perm</code>s have methods <code>copy</code>, <code>hash</code>, <code>==</code>, so they can be keys in hashes or elements  of sets; two permutations are equal  if they move the same points to  the same images. They have methods <code>cmp</code>, <code>isless</code> (lexicographic order on   moved  points)  so  they  can  be  sorted.  <code>Perm</code>s  are  scalars  for broadcasting.</p>
<p dir="auto">Other   methods   on   permutations   are  <code>cycles,  cycletype,  reflength, mappingPerm, sortPerm, Perm_rowcol</code>.</p>
<p dir="auto">No  method is given in  this package to enumerate  <code>Perm</code>s; you can use the method   <code>arrangements</code>  from   <code>Combinat</code>  or   iterate  the  elements  of <code>symmetric_group</code> with <code>PermGroups</code>.</p>
<p dir="auto"><a href="https://github.com/jmichel7/PermGroups.jl/blob/ed9c11c663734fec8e7bfc81a396c409452cdd82/src/Perms.jl#L1-L118">source</a><br></p>
<p dir="auto"><a id="user-content-permgroups.perms.perm" href="#PermGroups.Perms.Perm">#</a>
<strong><code>PermGroups.Perms.Perm</code></strong> — <em>Type</em>.</p>
<p dir="auto"><code>struct Perm{T&lt;:Integer}</code></p>
<p dir="auto">A  Perm represents a permutation  of the set <code>1:n</code>  and is implemented by a <code>struct</code> with one field, a <code>Vector{T}</code> holding the images of <code>1:n</code>.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; p=Perm(Int16[1,3,2,4])
(2,3)

julia&gt; vec(p)
4-element Vector{Int16}:
 1
 3
 2
 4"><pre lang="julia-repl" class="notranslate"><code>julia&gt; p=Perm(Int16[1,3,2,4])
(2,3)

julia&gt; vec(p)
4-element Vector{Int16}:
 1
 3
 2
 4
</code></pre></div>
<p dir="auto"><a href="https://github.com/jmichel7/PermGroups.jl/blob/ed9c11c663734fec8e7bfc81a396c409452cdd82/src/Perms.jl#L128-L145">source</a><br></p>
<p dir="auto"><a id="user-content-permgroups.perms.perm-tuple{vararg{integer}}" href="#PermGroups.Perms.Perm-Tuple{Vararg{Integer}}">#</a>
<strong><code>PermGroups.Perms.Perm</code></strong> — <em>Method</em>.</p>
<p dir="auto"><code>Perm{T}(x::Integer...)where T&lt;:Integer</code></p>
<p dir="auto">returns  a cycle.  For example  <code>Perm{Int8}(1,2,3)</code> constructs the cycle    <code>(1,2,3)</code> as a <code>Perm{Int8}</code>. If omitted <code>{T}</code> is taken to be <code>{Int16}</code>.</p>
<p dir="auto"><a href="https://github.com/jmichel7/PermGroups.jl/blob/ed9c11c663734fec8e7bfc81a396c409452cdd82/src/Perms.jl#L156-L161">source</a><br></p>
<p dir="auto"><a id="user-content-permgroups.perms.perm-tuple{abstractmatrix{&lt;:integer}}">#</a>
<strong><code>PermGroups.Perms.Perm</code></strong> — <em>Method</em>.</p>
<p dir="auto"><code>Perm{T}(m::AbstractMatrix)</code> If  <code>m</code> is a  permutation matrix, returns  the corresponding permutation of type <code>T</code>. If omitted, <code>T</code> is taken to be <code>Int16</code>.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; m=[0 1 0;0 0 1;1 0 0]
3×3 Matrix{Int64}:
 0  1  0
 0  0  1
 1  0  0

julia&gt; Perm(m)
(1,2,3)"><pre lang="julia-repl" class="notranslate"><code>julia&gt; m=[0 1 0;0 0 1;1 0 0]
3×3 Matrix{Int64}:
 0  1  0
 0  0  1
 1  0  0

julia&gt; Perm(m)
(1,2,3)
</code></pre></div>
<p dir="auto"><a href="https://github.com/jmichel7/PermGroups.jl/blob/ed9c11c663734fec8e7bfc81a396c409452cdd82/src/Perms.jl#L233-L248">source</a><br></p>
<p dir="auto"><a id="user-content-permgroups.perms.perm-tuple{abstractvector, abstractvector}" href="#PermGroups.Perms.Perm-Tuple{AbstractVector, AbstractVector}">#</a>
<strong><code>PermGroups.Perms.Perm</code></strong> — <em>Method</em>.</p>
<p dir="auto"><code>Perm{T}(l::AbstractVector,l1::AbstractVector)</code></p>
<p dir="auto">returns  <code>p</code>,  a  <code>Perm{T}</code>,  such  that  <code>permute(l1,p)==l</code>  if such a <code>p</code> exists;  returns <code>nothing</code>  otherwise. If  not given  <code>{T}</code> is  taken to be <code>{Int16}</code>. Needs the <code>eltype</code> of <code>l</code> and <code>l1</code> to be sortable.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; Perm([0,2,4],[4,0,2])
(1,3,2)"><pre lang="julia-repl" class="notranslate"><code>julia&gt; Perm([0,2,4],[4,0,2])
(1,3,2)
</code></pre></div>
<p dir="auto"><a href="https://github.com/jmichel7/PermGroups.jl/blob/ed9c11c663734fec8e7bfc81a396c409452cdd82/src/Perms.jl#L713-L724">source</a><br></p>
<p dir="auto"><a id="user-content-permgroups.perms.perm-tuple{abstractmatrix, abstractmatrix}" href="#PermGroups.Perms.Perm-Tuple{AbstractMatrix, AbstractMatrix}">#</a>
<strong><code>PermGroups.Perms.Perm</code></strong> — <em>Method</em>.</p>
<p dir="auto"><code>Perm{T}(m::AbstractMatrix,m1::AbstractMatrix;dims=1)</code></p>
<p dir="auto">returns  <code>p</code>, a <code>Perm{T}</code>, which permutes the  rows of <code>m1</code> (the columns of <code>m1</code>  if <code>dims=2</code>, simultaneously the rows  and columns if <code>dims=(1,2)</code>) to bring  them  to  those  of  <code>m</code>,  if  such  a <code>p</code> exists; returns <code>nothing</code> otherwise.  If not given <code>{T}</code> is taken to be <code>{Int16}</code>. Needs the elements of <code>m</code> and <code>m1</code> to be sortable.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; Perm([0 1 0;0 0 1;1 0 0],[1 0 0;0 1 0;0 0 1];dims=1)
(1,3,2)

julia&gt; Perm([0 1 0;0 0 1;1 0 0],[1 0 0;0 1 0;0 0 1];dims=2)
(1,2,3)

julia&gt; m=(1:30)'.*(1:30).%15;

julia&gt; n=permute(m,Perm(1,5,2,8,12,4,7)*Perm(3,9,11,6);dims=(1,2));

julia&gt; Perm(m,n,dims=(1,2))
(1,5,2,8,12,4,7)(3,9,11,6)"><pre lang="julia-repl" class="notranslate"><code>julia&gt; Perm([0 1 0;0 0 1;1 0 0],[1 0 0;0 1 0;0 0 1];dims=1)
(1,3,2)

julia&gt; Perm([0 1 0;0 0 1;1 0 0],[1 0 0;0 1 0;0 0 1];dims=2)
(1,2,3)

julia&gt; m=(1:30)'.*(1:30).%15;

julia&gt; n=permute(m,Perm(1,5,2,8,12,4,7)*Perm(3,9,11,6);dims=(1,2));

julia&gt; Perm(m,n,dims=(1,2))
(1,5,2,8,12,4,7)(3,9,11,6)
</code></pre></div>
<p dir="auto"><a href="https://github.com/jmichel7/PermGroups.jl/blob/ed9c11c663734fec8e7bfc81a396c409452cdd82/src/PermGroups.jl#L795-L818">source</a><br></p>
<p dir="auto"><a id="user-content-permgroups.perms.@perm_str" href="#PermGroups.Perms.@perm_str">#</a>
<strong><code>PermGroups.Perms.@perm_str</code></strong> — <em>Macro</em>.</p>
<p dir="auto">@perm"..."</p>
<p dir="auto">make a <code>Perm</code> from a string; allows GAP-style <code>perm"(1,2)(5,6,7)(4,9)"</code></p>
<p dir="auto"><a href="https://github.com/jmichel7/PermGroups.jl/blob/ed9c11c663734fec8e7bfc81a396c409452cdd82/src/Perms.jl#L184-L188">source</a><br></p>
<p dir="auto"><a id="user-content-permgroups.perms.largest_moved_point-tuple{perm}" href="#PermGroups.Perms.largest_moved_point-Tuple{Perm}">#</a>
<strong><code>PermGroups.Perms.largest_moved_point</code></strong> — <em>Method</em>.</p>
<p dir="auto"><code>largest_moved_point(a::Perm)</code> is the largest integer moved by a</p>
<p dir="auto"><a href="https://github.com/jmichel7/PermGroups.jl/blob/ed9c11c663734fec8e7bfc81a396c409452cdd82/src/Perms.jl#L310">source</a><br></p>
<p dir="auto"><code>largest_moved_point(G::PermGroup)</code> the largest moved point by any <code>g∈ G</code></p>
<p dir="auto"><a href="https://github.com/jmichel7/PermGroups.jl/blob/ed9c11c663734fec8e7bfc81a396c409452cdd82/src/PermGroups.jl#L100">source</a><br></p>
<p dir="auto"><a id="user-content-permgroups.perms.smallest_moved_point" href="#PermGroups.Perms.smallest_moved_point">#</a>
<strong><code>PermGroups.Perms.smallest_moved_point</code></strong> — <em>Function</em>.</p>
<p dir="auto"><code>smallest_moved_point(a::Perm)</code> is the smallest integer moved by a</p>
<p dir="auto"><a href="https://github.com/jmichel7/PermGroups.jl/blob/ed9c11c663734fec8e7bfc81a396c409452cdd82/src/Perms.jl#L316">source</a><br></p>
<p dir="auto"><a id="user-content-permgroups.perms.preimage" href="#PermGroups.Perms.preimage">#</a>
<strong><code>PermGroups.Perms.preimage</code></strong> — <em>Function</em>.</p>
<p dir="auto"><code>preimage(i::Integer,p::Perm)</code> the preimage of <code>i</code> by <code>p</code></p>
<p dir="auto"><a href="https://github.com/jmichel7/PermGroups.jl/blob/ed9c11c663734fec8e7bfc81a396c409452cdd82/src/Perms.jl#L359">source</a><br></p>
<p dir="auto"><a id="user-content-permgroups.perms.permute" href="#PermGroups.Perms.permute">#</a>
<strong><code>PermGroups.Perms.permute</code></strong> — <em>Function</em>.</p>
<p dir="auto"><code>permute(l::AbstractVector,p::Perm)</code></p>
<p dir="auto">returns <code>l</code> permuted by <code>p</code>, a vector <code>r</code> such that <code>r[i^p]==l[i]</code></p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; permute([5,4,6,1,7,5],Perm(1,3,5,6,4))
6-element Vector{Int64}:
 1
 4
 5
 5
 6
 7"><pre lang="julia-repl" class="notranslate"><code>julia&gt; permute([5,4,6,1,7,5],Perm(1,3,5,6,4))
6-element Vector{Int64}:
 1
 4
 5
 5
 6
 7
</code></pre></div>
<p dir="auto">note   that  <code>permute</code>   is  defined   such  it   is  an  action  that  is, <code>permute(permute(l,p),q)==permute(l,p*q)</code> but this has the consequence that <code>sort(a)==permute(a,inv(Perm(sortperm(a))))</code> and that <code>invpermute!(l,vec(p))</code> changes <code>l</code> to <code>permute(l,p)</code>.</p>
<p dir="auto"><a href="https://github.com/jmichel7/PermGroups.jl/blob/ed9c11c663734fec8e7bfc81a396c409452cdd82/src/Perms.jl#L390-L409">source</a><br></p>
<p dir="auto"><code>permute(m::AbstractMatrix,p::Perm;dims=1)</code></p>
<p dir="auto">permutes  by <code>p</code> the rows, columns or  both of the matrix <code>m</code> depending on the value of <code>dims</code>.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; m=[3*i+j for i in 0:2,j in 1:3]
3×3 Matrix{Int64}:
 1  2  3
 4  5  6
 7  8  9

julia&gt; p=Perm(1,2,3)
(1,2,3)

julia&gt; permute(m,p)
3×3 Matrix{Int64}:
 7  8  9
 1  2  3
 4  5  6

julia&gt; permute(m,p;dims=2)
3×3 Matrix{Int64}:
 3  1  2
 6  4  5
 9  7  8

julia&gt; permute(m,p;dims=(1,2))
3×3 Matrix{Int64}:
 9  7  8
 3  1  2
 6  4  5"><pre lang="julia-repl" class="notranslate"><code>julia&gt; m=[3*i+j for i in 0:2,j in 1:3]
3×3 Matrix{Int64}:
 1  2  3
 4  5  6
 7  8  9

julia&gt; p=Perm(1,2,3)
(1,2,3)

julia&gt; permute(m,p)
3×3 Matrix{Int64}:
 7  8  9
 1  2  3
 4  5  6

julia&gt; permute(m,p;dims=2)
3×3 Matrix{Int64}:
 3  1  2
 6  4  5
 9  7  8

julia&gt; permute(m,p;dims=(1,2))
3×3 Matrix{Int64}:
 9  7  8
 3  1  2
 6  4  5
</code></pre></div>
<p dir="auto"><a href="https://github.com/jmichel7/PermGroups.jl/blob/ed9c11c663734fec8e7bfc81a396c409452cdd82/src/Perms.jl#L420-L454">source</a><br></p>
<p dir="auto"><code>permute(m::AbstractMatrix, p1::Perm,p2::Perm)</code></p>
<p dir="auto">permutes the rows of <code>m</code> by <code>p1</code> and the columns of <code>m</code> by <code>p2</code>.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; m=[1 2 3;4 5 6;7 8 9]
3×3 Matrix{Int64}:
 1  2  3
 4  5  6
 7  8  9

julia&gt; permute(m,Perm(1,2),Perm(2,3))
3×3 Matrix{Int64}:
 4  6  5
 1  3  2
 7  9  8"><pre lang="julia-repl" class="notranslate"><code>julia&gt; m=[1 2 3;4 5 6;7 8 9]
3×3 Matrix{Int64}:
 1  2  3
 4  5  6
 7  8  9

julia&gt; permute(m,Perm(1,2),Perm(2,3))
3×3 Matrix{Int64}:
 4  6  5
 1  3  2
 7  9  8
</code></pre></div>
<p dir="auto"><a href="https://github.com/jmichel7/PermGroups.jl/blob/ed9c11c663734fec8e7bfc81a396c409452cdd82/src/Perms.jl#L462-L480">source</a><br></p>
<p dir="auto"><a id="user-content-permgroups.perms.sortperm" href="#PermGroups.Perms.sortPerm">#</a>
<strong><code>PermGroups.Perms.sortPerm</code></strong> — <em>Function</em>.</p>
<p dir="auto">for convenience: <code>sortPerm(a)=Perm(sortperm(a))</code></p>
<p dir="auto"><a href="https://github.com/jmichel7/PermGroups.jl/blob/ed9c11c663734fec8e7bfc81a396c409452cdd82/src/Perms.jl#L326">source</a><br></p>
<p dir="auto"><a id="user-content-permgroups.perms.randperm" href="#PermGroups.Perms.randPerm">#</a>
<strong><code>PermGroups.Perms.randPerm</code></strong> — <em>Function</em>.</p>
<p dir="auto"><code>randPerm([T,]n::Integer)</code> a random permutation of <code>1:n</code> of type <code>T</code>. If omitted <code>T</code> is taken to be <code>Int16</code></p>
<p dir="auto"><a href="https://github.com/jmichel7/PermGroups.jl/blob/ed9c11c663734fec8e7bfc81a396c409452cdd82/src/Perms.jl#L330-L333">source</a><br></p>
<p dir="auto"><a id="user-content-permgroups.perms.orbit-tuple{perm, integer}" href="#PermGroups.Perms.orbit-Tuple{Perm, Integer}">#</a>
<strong><code>PermGroups.Perms.orbit</code></strong> — <em>Method</em>.</p>
<p dir="auto"><code>orbit(a::Perm,i::Integer)</code> returns the orbit of <code>a</code> on <code>i</code>.</p>
<p dir="auto"><a href="https://github.com/jmichel7/PermGroups.jl/blob/ed9c11c663734fec8e7bfc81a396c409452cdd82/src/Perms.jl#L485-L487">source</a><br></p>
<p dir="auto"><a id="user-content-permgroups.perms.orbits-tuple{perm}" href="#PermGroups.Perms.orbits-Tuple{Perm}">#</a>
<strong><code>PermGroups.Perms.orbits</code></strong> — <em>Method</em>.</p>
<p dir="auto"><code>orbits(a::Perm,d::Vector=1:length(a.d))</code></p>
<p dir="auto">returns the orbits of <code>a</code> on domain <code>d</code></p>
<p dir="auto"><strong>Example</strong></p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; orbits(Perm(1,2)*Perm(4,5),1:5)
3-element Vector{Vector{Int16}}:
 [1, 2]
 [3]
 [4, 5]"><pre lang="julia-repl" class="notranslate"><code>julia&gt; orbits(Perm(1,2)*Perm(4,5),1:5)
3-element Vector{Vector{Int16}}:
 [1, 2]
 [3]
 [4, 5]
</code></pre></div>
<p dir="auto"><a href="https://github.com/jmichel7/PermGroups.jl/blob/ed9c11c663734fec8e7bfc81a396c409452cdd82/src/Perms.jl#L499-L512">source</a><br></p>
<p dir="auto"><code>orbits(G::PermGroup)</code> the orbits of <code>G</code> on its moved points.</p>
<p dir="auto"><a href="https://github.com/jmichel7/PermGroups.jl/blob/ed9c11c663734fec8e7bfc81a396c409452cdd82/src/PermGroups.jl#L107">source</a><br></p>
<p dir="auto"><a id="user-content-permgroups.perms.order" href="#PermGroups.Perms.order">#</a>
<strong><code>PermGroups.Perms.order</code></strong> — <em>Function</em>.</p>
<p dir="auto"><code>order(G::Group)</code> the number of elements of <code>G</code>.</p>
<p dir="auto"><code>order(T,G)</code> do the computation with the integer type <code>T</code>.</p>
<p dir="auto"><a href="https://github.com/jmichel7/PermGroups.jl/blob/ed9c11c663734fec8e7bfc81a396c409452cdd82/src/Groups.jl#L572-L576">source</a><br></p>
<p dir="auto"><code>order(a)</code> the smallest integer <code>i≥1</code> such that <code>isone(a^i)</code></p>
<p dir="auto"><a href="https://github.com/jmichel7/PermGroups.jl/blob/ed9c11c663734fec8e7bfc81a396c409452cdd82/src/Groups.jl#L657">source</a><br></p>
<p dir="auto"><a id="user-content-permgroups.perms.cycles-tuple{perm}" href="#PermGroups.Perms.cycles-Tuple{Perm}">#</a>
<strong><code>PermGroups.Perms.cycles</code></strong> — <em>Method</em>.</p>
<p dir="auto"><code>cycles(a::Perm)</code> returns the non-trivial cycles of <code>a</code></p>
<p dir="auto"><strong>Example</strong></p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; cycles(Perm(1,2)*Perm(4,5))
2-element Vector{Vector{Int16}}:
 [1, 2]
 [4, 5]"><pre lang="julia-repl" class="notranslate"><code>julia&gt; cycles(Perm(1,2)*Perm(4,5))
2-element Vector{Vector{Int16}}:
 [1, 2]
 [4, 5]
</code></pre></div>
<p dir="auto"><a href="https://github.com/jmichel7/PermGroups.jl/blob/ed9c11c663734fec8e7bfc81a396c409452cdd82/src/Perms.jl#L528-L537">source</a><br></p>
<p dir="auto"><a id="user-content-permgroups.perms.cycletype-tuple{perm}" href="#PermGroups.Perms.cycletype-Tuple{Perm}">#</a>
<strong><code>PermGroups.Perms.cycletype</code></strong> — <em>Method</em>.</p>
<p dir="auto"><code>cycletype(a::Perm;domain=1:length(a.d),trivial=false)</code></p>
<p dir="auto">returns  the  partition  of  <code>maximum(domain)</code>  associated to the conjugacy class of <code>a</code> in the symmetric group of <code>domain</code>, with ones removed (thus it does  not  depend  on  <code>domain</code>  but  just  on  the  moved  points)  unless <code>trivial=true</code>.</p>
<p dir="auto"><strong>Example</strong></p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; cycletype(Perm(1,2)*Perm(4,5))
2-element Vector{Int64}:
 2
 2

julia&gt; cycletype(Perm(1,2)*Perm(4,5);trivial=true)
3-element Vector{Int64}:
 2
 2
 1

julia&gt; cycletype(Perm(1,2)*Perm(4,5);trivial=true,domain=1:6)
4-element Vector{Int64}:
 2
 2
 1
 1"><pre lang="julia-repl" class="notranslate"><code>julia&gt; cycletype(Perm(1,2)*Perm(4,5))
2-element Vector{Int64}:
 2
 2

julia&gt; cycletype(Perm(1,2)*Perm(4,5);trivial=true)
3-element Vector{Int64}:
 2
 2
 1

julia&gt; cycletype(Perm(1,2)*Perm(4,5);trivial=true,domain=1:6)
4-element Vector{Int64}:
 2
 2
 1
 1
</code></pre></div>
<p dir="auto"><a href="https://github.com/jmichel7/PermGroups.jl/blob/ed9c11c663734fec8e7bfc81a396c409452cdd82/src/Perms.jl#L556-L584">source</a><br></p>
<p dir="auto"><a id="user-content-permgroups.perms.support" href="#PermGroups.Perms.support">#</a>
<strong><code>PermGroups.Perms.support</code></strong> — <em>Function</em>.</p>
<p dir="auto"><code>support(a::Perm)</code> is the set of all points moved by <code>a</code></p>
<p dir="auto"><a href="https://github.com/jmichel7/PermGroups.jl/blob/ed9c11c663734fec8e7bfc81a396c409452cdd82/src/Perms.jl#L322">source</a><br></p>
<p dir="auto"><a id="user-content-base.sign" href="#Base.sign">#</a>
<strong><code>Base.sign</code></strong> — <em>Function</em>.</p>
<p dir="auto"><code>sign(a::Perm)</code> is the signature of  the permutation <code>a</code></p>
<p dir="auto"><a href="https://github.com/jmichel7/PermGroups.jl/blob/ed9c11c663734fec8e7bfc81a396c409452cdd82/src/Perms.jl#L650">source</a><br></p>
<p dir="auto"><a id="user-content-base.matrix-tuple{perm, any}" href="#Base.Matrix-Tuple{Perm, Any}">#</a>
<strong><code>Base.Matrix</code></strong> — <em>Method</em>.</p>
<p dir="auto"><code>Matrix(a::Perm,n=length(a.d))</code> the  permutation matrix  for <code>a</code>  operating on  <code>n</code> points (by default, the degree of <code>a</code>). If given, <code>n</code> should be larger than <code>largest_moved_point(a)</code>.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; Matrix(Perm(2,3,4),5)
5×5 Matrix{Bool}:
 1  0  0  0  0
 0  0  1  0  0
 0  0  0  1  0
 0  1  0  0  0
 0  0  0  0  1"><pre lang="julia-repl" class="notranslate"><code>julia&gt; Matrix(Perm(2,3,4),5)
5×5 Matrix{Bool}:
 1  0  0  0  0
 0  0  1  0  0
 0  0  0  1  0
 0  1  0  0  0
 0  0  0  0  1
</code></pre></div>
<p dir="auto"><a href="https://github.com/jmichel7/PermGroups.jl/blob/ed9c11c663734fec8e7bfc81a396c409452cdd82/src/Perms.jl#L216-L230">source</a><br></p>
<p dir="auto"><a id="user-content-permgroups.perms.restricted-tuple{perm, abstractvector{&lt;:integer}}">#</a>
<strong><code>PermGroups.Perms.restricted</code></strong> — <em>Method</em>.</p>
<p dir="auto"><code>restricted(a::Perm,l::AbstractVector{&lt;:Integer})</code></p>
<p dir="auto"><code>l</code> should be a union of cycles of <code>p</code>; returns <code>p</code> restricted to <code>l</code></p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; restricted(Perm(1,2)*Perm(3,4),3:4)
(3,4)"><pre lang="julia-repl" class="notranslate"><code>julia&gt; restricted(Perm(1,2)*Perm(3,4),3:4)
(3,4)
</code></pre></div>
<p dir="auto"><a href="https://github.com/jmichel7/PermGroups.jl/blob/ed9c11c663734fec8e7bfc81a396c409452cdd82/src/Perms.jl#L653-L662">source</a><br></p>
<p dir="auto"><a id="user-content-permgroups.perms.reflection_length-tuple{perm}" href="#PermGroups.Perms.reflection_length-Tuple{Perm}">#</a>
<strong><code>PermGroups.Perms.reflection_length</code></strong> — <em>Method</em>.</p>
<p dir="auto"><code>reflection_length(a::Perm)</code> or <code>reflength</code></p>
<p dir="auto">gives  the  "reflection  length"  of  <code>a</code>  (when the symmetric group on <code>n</code> points to which <code>a</code> belongs is interpreted as a reflection group on a space of  dimension <code>n</code>), that is, the  minimum number of transpositions of which <code>a</code> is the product.</p>
<p dir="auto"><a href="https://github.com/jmichel7/PermGroups.jl/blob/ed9c11c663734fec8e7bfc81a396c409452cdd82/src/Perms.jl#L624-L631">source</a><br></p>
<p dir="auto"><a id="user-content-permgroups.perms.mappingperm" href="#PermGroups.Perms.mappingPerm">#</a>
<strong><code>PermGroups.Perms.mappingPerm</code></strong> — <em>Function</em>.</p>
<p dir="auto"><code>mappingPerm(a)</code></p>
<p dir="auto">given  a list  of positive  integers without  repetition <code>a</code>, this function finds  a permutation  <code>p</code> such  that <code>sort(a).^p==a</code>.  This can  be used to translate between arrangements and <code>Perm</code>s.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; p=mappingPerm([6,7,5])
(5,6,7)

julia&gt; (5:7).^p
3-element Vector{Int16}:
 6
 7
 5"><pre lang="julia-repl" class="notranslate"><code>julia&gt; p=mappingPerm([6,7,5])
(5,6,7)

julia&gt; (5:7).^p
3-element Vector{Int16}:
 6
 7
 5
</code></pre></div>
<p dir="auto"><a href="https://github.com/jmichel7/PermGroups.jl/blob/ed9c11c663734fec8e7bfc81a396c409452cdd82/src/Perms.jl#L668-L685">source</a><br></p>
<p dir="auto"><code>mappingPerm(a,b)</code></p>
<p dir="auto">given two lists of positive integers without repetition <code>a</code> and <code>b</code>, this function finds a permutation <code>p</code> such that <code>a.^p==b</code>.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; mappingPerm([1,2,5,3],[2,3,4,6])
(1,2,3,6,5,4)"><pre lang="julia-repl" class="notranslate"><code>julia&gt; mappingPerm([1,2,5,3],[2,3,4,6])
(1,2,3,6,5,4)
</code></pre></div>
<p dir="auto"><a href="https://github.com/jmichel7/PermGroups.jl/blob/ed9c11c663734fec8e7bfc81a396c409452cdd82/src/Perms.jl#L693-L703">source</a><br></p>
<p dir="auto"><a id="user-content-permgroups.perms.perm_rowcol" href="#PermGroups.Perms.Perm_rowcol">#</a>
<strong><code>PermGroups.Perms.Perm_rowcol</code></strong> — <em>Function</em>.</p>
<p dir="auto"><code>Perm_rowcol(m1::AbstractMatrix, m2::AbstractMatrix)</code></p>
<p dir="auto">whether <code>m1</code> can be obtained from <code>m2</code> by row/col permutations.</p>
<p dir="auto"><code>m1</code> and <code>m2</code> should be rectangular matrices of the same size. The function returns a <code>Tuple</code> of permutations <code>(p1,p2)</code> such that <code>permute(m1,p1,p2)==m2</code>  if such  permutations exist,  <code>nothing</code> otherwise. The <code>eltype</code> of <code>m1</code> and <code>m2</code> must be sortable.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; a=[1 1 1 -1 -1; 2 0 -2 0 0; 1 -1 1 -1 1; 1 1 1 1 1; 1 -1 1 1 -1]
5×5 Matrix{Int64}:
 1   1   1  -1  -1
 2   0  -2   0   0
 1  -1   1  -1   1
 1   1   1   1   1
 1  -1   1   1  -1

julia&gt; b=[1 -1 -1 1 1; 1 1 -1 -1 1; 1 -1 1 -1 1; 2 0 0 0 -2; 1 1 1 1 1]
5×5 Matrix{Int64}:
 1  -1  -1   1   1
 1   1  -1  -1   1
 1  -1   1  -1   1
 2   0   0   0  -2
 1   1   1   1   1

julia&gt; p1,p2=Perm_rowcol(a,b)
((1,2,4,5,3), (3,5,4))

julia&gt; permute(a,p1,p2)==b
true"><pre lang="julia-repl" class="notranslate"><code>julia&gt; a=[1 1 1 -1 -1; 2 0 -2 0 0; 1 -1 1 -1 1; 1 1 1 1 1; 1 -1 1 1 -1]
5×5 Matrix{Int64}:
 1   1   1  -1  -1
 2   0  -2   0   0
 1  -1   1  -1   1
 1   1   1   1   1
 1  -1   1   1  -1

julia&gt; b=[1 -1 -1 1 1; 1 1 -1 -1 1; 1 -1 1 -1 1; 2 0 0 0 -2; 1 1 1 1 1]
5×5 Matrix{Int64}:
 1  -1  -1   1   1
 1   1  -1  -1   1
 1  -1   1  -1   1
 2   0   0   0  -2
 1   1   1   1   1

julia&gt; p1,p2=Perm_rowcol(a,b)
((1,2,4,5,3), (3,5,4))

julia&gt; permute(a,p1,p2)==b
true
</code></pre></div>
<p dir="auto"><a href="https://github.com/jmichel7/PermGroups.jl/blob/ed9c11c663734fec8e7bfc81a396c409452cdd82/src/Perms.jl#L733-L766">source</a><br></p>
<p dir="auto"><a id="user-content-groups"></a></p>
<p dir="auto"><a id="user-content-groups-1"></a></p>
<h1 dir="auto"><a id="user-content-groups" class="anchor" aria-hidden="true" href="#groups"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Groups</h1>
<p dir="auto"><a id="user-content-permgroups.groups" href="#PermGroups.Groups">#</a>
<strong><code>PermGroups.Groups</code></strong> — <em>Module</em>.</p>
<p dir="auto">This module gives some basic functionality on groups.</p>
<p dir="auto"><code>Group</code>  is  an  abstract  type,  but  the  following is assumed of a group <code>G</code> of one of its concrete implementations:</p>
<ul dir="auto">
<li>The function <code>gens(G)</code> returns the list of generators of <code>G</code>.</li>
<li>The function <code>one(G)</code> returns the identity element of <code>G</code>.</li>
</ul>
<p dir="auto"><strong>Examples</strong></p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; G=Group(Perm(1,2),Perm(1,2,3))
Group((1,2),(1,2,3))

julia&gt; gens(G)
2-element Vector{Perm{Int16}}:
 (1,2)
 (1,2,3)

julia&gt; ngens(G)
2

julia&gt; minimal_words(G)
OrderedDict{Perm{Int16}, Vector{Int64}} with 6 entries:
  ()      =&gt; []
  (1,2)   =&gt; [1]
  (1,2,3) =&gt; [2]
  (1,3)   =&gt; [1, 2]
  (2,3)   =&gt; [2, 1]
  (1,3,2) =&gt; [2, 2]"><pre lang="julia-repl" class="notranslate"><code>julia&gt; G=Group(Perm(1,2),Perm(1,2,3))
Group((1,2),(1,2,3))

julia&gt; gens(G)
2-element Vector{Perm{Int16}}:
 (1,2)
 (1,2,3)

julia&gt; ngens(G)
2

julia&gt; minimal_words(G)
OrderedDict{Perm{Int16}, Vector{Int64}} with 6 entries:
  ()      =&gt; []
  (1,2)   =&gt; [1]
  (1,2,3) =&gt; [2]
  (1,3)   =&gt; [1, 2]
  (2,3)   =&gt; [2, 1]
  (1,3,2) =&gt; [2, 2]
</code></pre></div>
<p dir="auto">There  is a constructor of a group with arbitrary type elements, <code>Group(l)</code> where  <code>l isa AbstractVector{T}</code> constructs a <code>Groupof{T}</code> which knows only the general methods in this module. The examples above use <code>Group(AbstractVector{&lt;:Perm})</code>  which constructs  a <code>PermGroup</code>  which has more efficient methods.</p>
<p dir="auto">for  further information on  the functions defined  in this module, look at the  docstrings of <code>Group,  gens, ngens, comm,  orbit, orbits, transversal, words_transversal,  centralizer,  stabilizer,  center,  normalizer,  words, minimal_words,   word,  in,   elements,  length,   order,  conjugacy_class, conjugacy_classes, classreps, nconjugacy_classes, fusion_conjugacy_classes, position_class,  isabelian,  iscyclic,  istrivial,  rand, transporting_elt, intersect, Hom, kernel, Coset</code></p>
<p dir="auto"><a href="https://github.com/jmichel7/PermGroups.jl/blob/ed9c11c663734fec8e7bfc81a396c409452cdd82/src/Groups.jl#L1-L46">source</a><br></p>
<p dir="auto"><a id="user-content-permgroups.groups.group" href="#PermGroups.Groups.Group">#</a>
<strong><code>PermGroups.Groups.Group</code></strong> — <em>Type</em>.</p>
<p dir="auto"><code>(G::Group)(i...)</code></p>
<p dir="auto">A Group used as a function takes integer arguments in <code>eachindex(gens(W))</code>. This  constructs  the  element  of  <code>G</code>  product of the generators with the specified  indices. An argument  can also be  negative, then the inverse of the corresponding generator is used.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; G=Group(Perm(1,2),Perm(1,2,3))
Group((1,2),(1,2,3))

julia&gt; G(2,1,-2) # returns gens(G)[2]*gens(G)[1]/gens(G)[2]
(1,3)"><pre lang="julia-repl" class="notranslate"><code>julia&gt; G=Group(Perm(1,2),Perm(1,2,3))
Group((1,2),(1,2,3))

julia&gt; G(2,1,-2) # returns gens(G)[2]*gens(G)[1]/gens(G)[2]
(1,3)
</code></pre></div>
<p dir="auto"><a href="https://github.com/jmichel7/PermGroups.jl/blob/ed9c11c663734fec8e7bfc81a396c409452cdd82/src/Groups.jl#L148-L163">source</a><br></p>
<p dir="auto"><code>Group(l::AbstractVector{T}[,one]) where T</code></p>
<p dir="auto">A  group may be constructed  from a list of  <code>l</code> elements of the same type. These  elements must respond to  the functions <code>*</code> and  <code>inv</code>. If it is not possible  to compute  <code>one</code> from  <code>l</code> (because  <code>l[1]</code> does  not respond to <code>one</code>,  or  <code>l</code>  is  empty  and  <code>T</code>  does  not respond to <code>one</code>), then the identity element of the group must be given as a second argument.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; G=Group([[-1 -1;1 0]])
Group([[-1 -1; 1 0]])

julia&gt; elements(G)
3-element Vector{Matrix{Int64}}:
 [0 1; -1 -1]
 [1 0; 0 1]
 [-1 -1; 1 0]"><pre lang="julia-repl" class="notranslate"><code>julia&gt; G=Group([[-1 -1;1 0]])
Group([[-1 -1; 1 0]])

julia&gt; elements(G)
3-element Vector{Matrix{Int64}}:
 [0 1; -1 -1]
 [1 0; 0 1]
 [-1 -1; 1 0]
</code></pre></div>
<p dir="auto"><a href="https://github.com/jmichel7/PermGroups.jl/blob/ed9c11c663734fec8e7bfc81a396c409452cdd82/src/Groups.jl#L829-L848">source</a><br></p>
<p dir="auto"><a id="user-content-permgroups.groups.generators" href="#PermGroups.Groups.generators">#</a>
<strong><code>PermGroups.Groups.generators</code></strong> — <em>Function</em>.</p>
<p dir="auto"><code>gens(G::Group)</code> or <code>generators(G::Group)</code> is the <code>Vector</code> of generators of <code>G</code>.</p>
<p dir="auto"><a href="https://github.com/jmichel7/PermGroups.jl/blob/ed9c11c663734fec8e7bfc81a396c409452cdd82/src/Groups.jl#L140">source</a><br></p>
<p dir="auto"><a id="user-content-permgroups.groups.number_of_generators" href="#PermGroups.Groups.number_of_generators">#</a>
<strong><code>PermGroups.Groups.number_of_generators</code></strong> — <em>Function</em>.</p>
<p dir="auto"><code>ngens(G::Group)</code> or <code>number_of_generators(G::Group)</code> is the number of generators of <code>G</code>.</p>
<p dir="auto"><a href="https://github.com/jmichel7/PermGroups.jl/blob/ed9c11c663734fec8e7bfc81a396c409452cdd82/src/Groups.jl#L144">source</a><br></p>
<p dir="auto"><a id="user-content-base.one-tuple{group}" href="#Base.one-Tuple{Group}">#</a>
<strong><code>Base.one</code></strong> — <em>Method</em>.</p>
<p dir="auto"><code>one(G::Group)</code> returns the identity element of <code>G</code>.</p>
<p dir="auto"><a href="https://github.com/jmichel7/PermGroups.jl/blob/ed9c11c663734fec8e7bfc81a396c409452cdd82/src/Groups.jl#L135">source</a><br></p>
<p dir="auto"><a id="user-content-permgroups.groups.orders_of_generators" href="#PermGroups.Groups.orders_of_generators">#</a>
<strong><code>PermGroups.Groups.orders_of_generators</code></strong> — <em>Function</em>.</p>
<p dir="auto"><code>orders_of_generators(G::Group)</code> or <code>ordergens</code></p>
<p dir="auto">The list of orders of the generators (this may be expensive to compute so could be worth being cached in <code>G</code>).</p>
<p dir="auto"><a href="https://github.com/jmichel7/PermGroups.jl/blob/ed9c11c663734fec8e7bfc81a396c409452cdd82/src/Groups.jl#L668-L673">source</a><br></p>
<p dir="auto"><a id="user-content-permgroups.groups.ontuples" href="#PermGroups.Groups.ontuples">#</a>
<strong><code>PermGroups.Groups.ontuples</code></strong> — <em>Function</em>.</p>
<p dir="auto"><code>ontuples(t,g)</code></p>
<p dir="auto">Assume  that <code>t</code> is a  <code>Vector</code> or a <code>NTuple</code>.  <code>ontuples</code> is the action of <code>g</code> given by <code>(t,g)-&gt;map(x-&gt;x^g,t)</code>.</p>
<p dir="auto"><a href="https://github.com/jmichel7/PermGroups.jl/blob/ed9c11c663734fec8e7bfc81a396c409452cdd82/src/Groups.jl#L174-L179">source</a><br></p>
<p dir="auto"><a id="user-content-permgroups.groups.onsets" href="#PermGroups.Groups.onsets">#</a>
<strong><code>PermGroups.Groups.onsets</code></strong> — <em>Function</em>.</p>
<p dir="auto"><code>onsets(s,g)</code></p>
<p dir="auto">Assume that <code>s</code> is a set, represented as a sorted list without repetitions. <code>onsets</code> is the action of <code>g</code> given by <code>(s,g)-&gt;sort!(map(x-&gt;x^g,s))</code>.</p>
<p dir="auto"><a href="https://github.com/jmichel7/PermGroups.jl/blob/ed9c11c663734fec8e7bfc81a396c409452cdd82/src/Groups.jl#L182-L187">source</a><br></p>
<p dir="auto"><a id="user-content-permgroups.perms.orbit-tuple{abstractvector, any}" href="#PermGroups.Perms.orbit-Tuple{AbstractVector, Any}">#</a>
<strong><code>PermGroups.Perms.orbit</code></strong> — <em>Method</em>.</p>
<p dir="auto"><code>orbit(gens::AbstractVector,p,action::Function=^)</code></p>
<p dir="auto"><code>orbit(G::Group,p,action::Function=^)</code></p>
<p dir="auto">the orbit of point <code>p</code> under repeated action of generators <code>gens</code>. The type of  point <code>p</code> should be hashable. The  default action of a group element is <code>^</code>.  For example if <code>g</code> is a permutation  and <code>p</code> an integer, <code>p^g</code> is the image  of <code>p</code> by <code>g</code>; if <code>h</code> and  <code>g</code> are group elements, then <code>h^g</code> is the conjugate  <code>inv(g)*h*g</code>. If  a group  is given  instead of  generators, the orbit under <code>gens(G)</code> is returned.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; orbit([Perm(1,2),Perm(2,3)],1)
3-element Vector{Int64}:
 1
 2
 3

julia&gt; orbit([Perm(1,2),Perm(2,3)],[1,3],ontuples)
6-element Vector{Vector{Int64}}:
 [1, 3]
 [2, 3]
 [1, 2]
 [3, 2]
 [2, 1]
 [3, 1]

julia&gt; orbit([Perm(1,2),Perm(2,3)],[1,3],(v,g)-&gt;sort(v.^g)) # &quot;OnSets&quot;
3-element Vector{Vector{Int64}}:
 [1, 3]
 [2, 3]
 [1, 2]"><pre lang="julia-repl" class="notranslate"><code>julia&gt; orbit([Perm(1,2),Perm(2,3)],1)
3-element Vector{Int64}:
 1
 2
 3

julia&gt; orbit([Perm(1,2),Perm(2,3)],[1,3],ontuples)
6-element Vector{Vector{Int64}}:
 [1, 3]
 [2, 3]
 [1, 2]
 [3, 2]
 [2, 1]
 [3, 1]

julia&gt; orbit([Perm(1,2),Perm(2,3)],[1,3],(v,g)-&gt;sort(v.^g)) # "OnSets"
3-element Vector{Vector{Int64}}:
 [1, 3]
 [2, 3]
 [1, 2]
</code></pre></div>
<p dir="auto"><a href="https://github.com/jmichel7/PermGroups.jl/blob/ed9c11c663734fec8e7bfc81a396c409452cdd82/src/Groups.jl#L190-L224">source</a><br></p>
<p dir="auto"><a id="user-content-permgroups.perms.orbits-tuple{group, any}" href="#PermGroups.Perms.orbits-Tuple{Group, Any}">#</a>
<strong><code>PermGroups.Perms.orbits</code></strong> — <em>Method</em>.</p>
<p dir="auto"><code>orbits(gens::Vector,v,action=^;trivial=true)</code></p>
<p dir="auto"><code>orbits(G,v,action=^;trivial=true)</code></p>
<p dir="auto">the  orbits on <code>v</code>  of the repeated  action of <code>gens</code>;  the elements of <code>v</code> should  be hashable. If a  group is given instead  of generators, the orbit under  <code>gens(G)</code> is returned. If <code>trivial=false</code> the one-element orbits are not returned.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; G=Group(Perm(1,2),Perm(2,3));
julia&gt; orbits(G,1:4)
2-element Vector{Vector{Int64}}:
 [1, 2, 3]
 [4]"><pre lang="julia-repl" class="notranslate"><code>julia&gt; G=Group(Perm(1,2),Perm(2,3));
julia&gt; orbits(G,1:4)
2-element Vector{Vector{Int64}}:
 [1, 2, 3]
 [4]
</code></pre></div>
<p dir="auto"><a href="https://github.com/jmichel7/PermGroups.jl/blob/ed9c11c663734fec8e7bfc81a396c409452cdd82/src/Groups.jl#L332-L349">source</a><br></p>
<p dir="auto"><a id="user-content-permgroups.groups.elements-tuple{group}" href="#PermGroups.Groups.elements-Tuple{Group}">#</a>
<strong><code>PermGroups.Groups.elements</code></strong> — <em>Method</em>.</p>
<p dir="auto"><code>elements(G::Group)</code> the list of elements of G</p>
<p dir="auto"><a href="https://github.com/jmichel7/PermGroups.jl/blob/ed9c11c663734fec8e7bfc81a396c409452cdd82/src/Groups.jl#L557">source</a><br></p>
<p dir="auto"><a id="user-content-permgroups.groups.transversal" href="#PermGroups.Groups.transversal">#</a>
<strong><code>PermGroups.Groups.transversal</code></strong> — <em>Function</em>.</p>
<p dir="auto"><code>transversal(G::Group,p,action::Function=^)</code></p>
<p dir="auto">returns  an <code>OrderedDict</code> <code>t</code> with keys  <code>orbit(G,p,action)</code> and where <code>t[x]</code> is an element  of  <code>G</code>  such  that  <code>x==action(p,t[x])</code>.  Like  <code>orbit</code>,  it thus requires the type of <code>p</code> to be hashable.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; G=Group(Perm(1,2),Perm(2,3));
julia&gt; transversal(G,1)
OrderedDict{Int64, Perm{Int16}} with 3 entries:
  1 =&gt; ()
  2 =&gt; (1,2)
  3 =&gt; (1,3,2)"><pre lang="julia-repl" class="notranslate"><code>julia&gt; G=Group(Perm(1,2),Perm(2,3));
julia&gt; transversal(G,1)
OrderedDict{Int64, Perm{Int16}} with 3 entries:
  1 =&gt; ()
  2 =&gt; (1,2)
  3 =&gt; (1,3,2)
</code></pre></div>
<p dir="auto">orbit functions can take any action of <code>G</code> as keyword argument</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; transversal(G,(1,2),ontuples)
OrderedDict{Tuple{Int64, Int64}, Perm{Int16}} with 6 entries:
  (1, 2) =&gt; ()
  (2, 1) =&gt; (1,2)
  (1, 3) =&gt; (2,3)
  (3, 1) =&gt; (1,3,2)
  (2, 3) =&gt; (1,2,3)
  (3, 2) =&gt; (1,3)"><pre lang="julia-repl" class="notranslate"><code>julia&gt; transversal(G,(1,2),ontuples)
OrderedDict{Tuple{Int64, Int64}, Perm{Int16}} with 6 entries:
  (1, 2) =&gt; ()
  (2, 1) =&gt; (1,2)
  (1, 3) =&gt; (2,3)
  (3, 1) =&gt; (1,3,2)
  (2, 3) =&gt; (1,2,3)
  (3, 2) =&gt; (1,3)
</code></pre></div>
<p dir="auto"><a href="https://github.com/jmichel7/PermGroups.jl/blob/ed9c11c663734fec8e7bfc81a396c409452cdd82/src/Groups.jl#L240-L267">source</a><br></p>
<p dir="auto"><a id="user-content-permgroups.groups.words_transversal" href="#PermGroups.Groups.words_transversal">#</a>
<strong><code>PermGroups.Groups.words_transversal</code></strong> — <em>Function</em>.</p>
<p dir="auto"><code>words_transversal(gens,p,action::Function=^)</code></p>
<p dir="auto">A   transversal   recording   words.   returns   a  <code>Dict</code>  <code>t</code>  with  keys <code>orbit(gens,p,action)</code> and where <code>t[x]</code> is a sequence of integers such that <code>x==action(p,prod(gens[t[x]]))</code>,  that is for each element <code>x</code> of the orbit of <code>p</code> describes as a word in <code>gens</code> an element bringing <code>p</code> to <code>x</code>.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; words_transversal([Perm(1,2),Perm(2,3)],1)
OrderedDict{Int64, Vector{Int64}} with 3 entries:
  1 =&gt; []
  2 =&gt; [1]
  3 =&gt; [1, 2]"><pre lang="julia-repl" class="notranslate"><code>julia&gt; words_transversal([Perm(1,2),Perm(2,3)],1)
OrderedDict{Int64, Vector{Int64}} with 3 entries:
  1 =&gt; []
  2 =&gt; [1]
  3 =&gt; [1, 2]
</code></pre></div>
<p dir="auto"><a href="https://github.com/jmichel7/PermGroups.jl/blob/ed9c11c663734fec8e7bfc81a396c409452cdd82/src/Groups.jl#L293-L308">source</a><br></p>
<p dir="auto"><a id="user-content-permgroups.groups.centralizer" href="#PermGroups.Groups.centralizer">#</a>
<strong><code>PermGroups.Groups.centralizer</code></strong> — <em>Function</em>.</p>
<p dir="auto"><code>centralizer(G::Group,p,action=^)</code></p>
<p dir="auto">computes  the subgroup of elements <code>g</code> of <code>G</code> such that <code>action(p,g)==p</code>.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; G=Group(Perm(1,2),Perm(1,2,3));
julia&gt; centralizer(G,1)
Group((2,3))"><pre lang="julia-repl" class="notranslate"><code>julia&gt; G=Group(Perm(1,2),Perm(1,2,3));
julia&gt; centralizer(G,1)
Group((2,3))
</code></pre></div>
<p dir="auto"><a href="https://github.com/jmichel7/PermGroups.jl/blob/ed9c11c663734fec8e7bfc81a396c409452cdd82/src/Groups.jl#L352-L362">source</a><br></p>
<p dir="auto"><code>centralizer(G::Group,H::Group)</code> the centralizer in <code>G</code> of the group <code>H</code></p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; G=Group(Perm(1,2),Perm(1,2,3))
Group((1,2),(1,2,3))

julia&gt; centralizer(G,Group(Perm(1,2)))
Group((1,2))"><pre lang="julia-repl" class="notranslate"><code>julia&gt; G=Group(Perm(1,2),Perm(1,2,3))
Group((1,2),(1,2,3))

julia&gt; centralizer(G,Group(Perm(1,2)))
Group((1,2))
</code></pre></div>
<p dir="auto"><a href="https://github.com/jmichel7/PermGroups.jl/blob/ed9c11c663734fec8e7bfc81a396c409452cdd82/src/Groups.jl#L367-L376">source</a><br></p>
<p dir="auto"><a id="user-content-permgroups.groups.center" href="#PermGroups.Groups.center">#</a>
<strong><code>PermGroups.Groups.center</code></strong> — <em>Function</em>.</p>
<p dir="auto"><code>center(G::Group)</code> the center of <code>G</code></p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; G=Group(Perm(1,2),Perm(3,4),Perm(1,3)*Perm(2,4))
Group((1,2),(3,4),(1,3)(2,4))

julia&gt; center(G)
Group((1,2)(3,4))"><pre lang="julia-repl" class="notranslate"><code>julia&gt; G=Group(Perm(1,2),Perm(3,4),Perm(1,3)*Perm(2,4))
Group((1,2),(3,4),(1,3)(2,4))

julia&gt; center(G)
Group((1,2)(3,4))
</code></pre></div>
<p dir="auto"><a href="https://github.com/jmichel7/PermGroups.jl/blob/ed9c11c663734fec8e7bfc81a396c409452cdd82/src/Groups.jl#L408-L418">source</a><br></p>
<p dir="auto"><a id="user-content-permgroups.groups.stabilizer" href="#PermGroups.Groups.stabilizer">#</a>
<strong><code>PermGroups.Groups.stabilizer</code></strong> — <em>Function</em>.</p>
<p dir="auto"><code>stabilizer(G::Group,s,action=^)</code></p>
<p dir="auto">computes  the subgroup of elements <code>g</code> of <code>G</code> such that <code>action(p,g)==p</code>.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; G=Group(Perm(1,2),Perm(1,2,3,4))
Group((1,2),(1,2,3,4))"><pre lang="julia-repl" class="notranslate"><code>julia&gt; G=Group(Perm(1,2),Perm(1,2,3,4))
Group((1,2),(1,2,3,4))
</code></pre></div>
<p dir="auto">Assume that <code>s</code> is a set, represented as a sorted list without repetitions. <code>onsets</code> is the  action  of  <code>g∈  G</code>  given  by  <code>(g,p)-&gt;sort(p.^g)</code>.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; stabilizer(G,[1,2],onsets)
Group((3,4),(1,2))"><pre lang="julia-repl" class="notranslate"><code>julia&gt; stabilizer(G,[1,2],onsets)
Group((3,4),(1,2))
</code></pre></div>
<p dir="auto"><a href="https://github.com/jmichel7/PermGroups.jl/blob/ed9c11c663734fec8e7bfc81a396c409452cdd82/src/Groups.jl#L379-L394">source</a><br></p>
<p dir="auto"><a id="user-content-permgroups.groups.normalizer" href="#PermGroups.Groups.normalizer">#</a>
<strong><code>PermGroups.Groups.normalizer</code></strong> — <em>Function</em>.</p>
<p dir="auto"><code>normalizer(G::Group,H::Group)</code> the normalizer of <code>H</code> in <code>G</code></p>
<p dir="auto"><a href="https://github.com/jmichel7/PermGroups.jl/blob/ed9c11c663734fec8e7bfc81a396c409452cdd82/src/Groups.jl#L130">source</a><br></p>
<p dir="auto"><a id="user-content-permgroups.groups.word-tuple{group, any}" href="#PermGroups.Groups.word-Tuple{Group, Any}">#</a>
<strong><code>PermGroups.Groups.word</code></strong> — <em>Method</em>.</p>
<p dir="auto"><code>word(G::Group,w)</code> a minimal word in <code>gens(G)</code> representing element <code>w</code> of <code>G</code></p>
<p dir="auto"><a href="https://github.com/jmichel7/PermGroups.jl/blob/ed9c11c663734fec8e7bfc81a396c409452cdd82/src/Groups.jl#L543">source</a><br></p>
<p dir="auto"><a id="user-content-permgroups.groups.comm" href="#PermGroups.Groups.comm">#</a>
<strong><code>PermGroups.Groups.comm</code></strong> — <em>Function</em>.</p>
<p dir="auto"><code>comm(a,b)</code> or <code>commutator(a,b)</code> is <code>a^-1*b^-1*a*b</code></p>
<p dir="auto"><a href="https://github.com/jmichel7/PermGroups.jl/blob/ed9c11c663734fec8e7bfc81a396c409452cdd82/src/Groups.jl#L170">source</a><br></p>
<p dir="auto"><a id="user-content-base.length-tuple{group}" href="#Base.length-Tuple{Group}">#</a>
<strong><code>Base.length</code></strong> — <em>Method</em>.</p>
<p dir="auto"><code>length(G::Group)</code> the number of elements of <code>G</code>.</p>
<p dir="auto"><code>length(T,G)</code> do the computation with the integer type <code>T</code>.</p>
<p dir="auto"><a href="https://github.com/jmichel7/PermGroups.jl/blob/ed9c11c663734fec8e7bfc81a396c409452cdd82/src/Groups.jl#L565-L569">source</a><br></p>
<p dir="auto"><a id="user-content-permgroups.groups.classreps-tuple{group}" href="#PermGroups.Groups.classreps-Tuple{Group}">#</a>
<strong><code>PermGroups.Groups.classreps</code></strong> — <em>Method</em>.</p>
<p dir="auto"><code>class_representatives(G::Group)</code>  or <code>classreps</code></p>
<p dir="auto">representatives  of  conjugacy  classes  of  <code>G</code>.  By  default  queries the attribute  <code>G.classreps</code>, and if this attribute  is present it will be used by <code>conjugacy_classes</code>.</p>
<p dir="auto"><a href="https://github.com/jmichel7/PermGroups.jl/blob/ed9c11c663734fec8e7bfc81a396c409452cdd82/src/Groups.jl#L634-L640">source</a><br></p>
<p dir="auto"><a id="user-content-permgroups.groups.conjugacy_classes" href="#PermGroups.Groups.conjugacy_classes">#</a>
<strong><code>PermGroups.Groups.conjugacy_classes</code></strong> — <em>Function</em>.</p>
<p dir="auto"><code>conjugacy_classes(G::Group)</code> conjugacy classes of <code>G</code> (as a <code>Vector{ConjugacyClass}</code>)</p>
<p dir="auto"><a href="https://github.com/jmichel7/PermGroups.jl/blob/ed9c11c663734fec8e7bfc81a396c409452cdd82/src/Groups.jl#L589-L592">source</a><br></p>
<p dir="auto"><a id="user-content-permgroups.groups.conjugacy_class" href="#PermGroups.Groups.conjugacy_class">#</a>
<strong><code>PermGroups.Groups.conjugacy_class</code></strong> — <em>Function</em>.</p>
<p dir="auto"><code>conjugacy_class(G::Group,g)</code> the class of <code>g</code></p>
<p dir="auto"><a href="https://github.com/jmichel7/PermGroups.jl/blob/ed9c11c663734fec8e7bfc81a396c409452cdd82/src/Groups.jl#L614">source</a><br></p>
<p dir="auto"><a id="user-content-permgroups.groups.number_of_conjugacy_classes" href="#PermGroups.Groups.number_of_conjugacy_classes">#</a>
<strong><code>PermGroups.Groups.number_of_conjugacy_classes</code></strong> — <em>Function</em>.</p>
<p dir="auto"><code>number_of_conjugacy_classes(G::Group)</code> or <code>nconjugacy_classes</code></p>
<p dir="auto">the number of conjugacy classes of <code>G</code>"</p>
<p dir="auto"><a href="https://github.com/jmichel7/PermGroups.jl/blob/ed9c11c663734fec8e7bfc81a396c409452cdd82/src/Groups.jl#L649-L653">source</a><br></p>
<p dir="auto"><a id="user-content-permgroups.groups.position_class" href="#PermGroups.Groups.position_class">#</a>
<strong><code>PermGroups.Groups.position_class</code></strong> — <em>Function</em>.</p>
<p dir="auto"><code>position_class(G::Group,g)</code> index of conjugacy class to which <code>g</code> belongs</p>
<p dir="auto"><a href="https://github.com/jmichel7/PermGroups.jl/blob/ed9c11c663734fec8e7bfc81a396c409452cdd82/src/Groups.jl#L617">source</a><br></p>
<p dir="auto"><a id="user-content-permgroups.groups.fusion_conjugacy_classes" href="#PermGroups.Groups.fusion_conjugacy_classes">#</a>
<strong><code>PermGroups.Groups.fusion_conjugacy_classes</code></strong> — <em>Function</em>.</p>
<p dir="auto"><code>fusion_conjugacy_classes(H::Group,G::Group)</code></p>
<p dir="auto">A <code>Vector{Int}</code> telling for each conjugacy class of subgroup <code>H</code> of which class of <code>G</code> is is a subset</p>
<p dir="auto"><a href="https://github.com/jmichel7/PermGroups.jl/blob/ed9c11c663734fec8e7bfc81a396c409452cdd82/src/Groups.jl#L624-L629">source</a><br></p>
<p dir="auto"><a id="user-content-permgroups.groups.minimal_words" href="#PermGroups.Groups.minimal_words">#</a>
<strong><code>PermGroups.Groups.minimal_words</code></strong> — <em>Function</em>.</p>
<p dir="auto"><code>minimal_words(G::Group)</code></p>
<p dir="auto">returns  a <code>Dict</code> giving for each element of <code>G</code> a minimal positive word in the generators representing it.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; G=Group(Perm(1,2),Perm(1,2,3));
julia&gt; minimal_words(G)
OrderedDict{Perm{Int16}, Vector{Int64}} with 6 entries:
  ()      =&gt; []
  (1,2)   =&gt; [1]
  (1,2,3) =&gt; [2]
  (1,3)   =&gt; [1, 2]
  (2,3)   =&gt; [2, 1]
  (1,3,2) =&gt; [2, 2]"><pre lang="julia-repl" class="notranslate"><code>julia&gt; G=Group(Perm(1,2),Perm(1,2,3));
julia&gt; minimal_words(G)
OrderedDict{Perm{Int16}, Vector{Int64}} with 6 entries:
  ()      =&gt; []
  (1,2)   =&gt; [1]
  (1,2,3) =&gt; [2]
  (1,3)   =&gt; [1, 2]
  (2,3)   =&gt; [2, 1]
  (1,3,2) =&gt; [2, 2]
</code></pre></div>
<p dir="auto"><a href="https://github.com/jmichel7/PermGroups.jl/blob/ed9c11c663734fec8e7bfc81a396c409452cdd82/src/Groups.jl#L425-L442">source</a><br></p>
<p dir="auto"><code>minimal_words(G::Group,w)</code></p>
<p dir="auto">Gives all expressions of <code>w</code> as words in the generators of <code>G</code> of minimal length (uses <code>minimal_words(G)</code>).</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; G=Group(Perm(1,2),Perm(2,3));

julia&gt; minimal_words(G,Perm(1,3))
2-element Vector{Vector{Int64}}:
 [1, 2, 1]
 [2, 1, 2]"><pre lang="julia-repl" class="notranslate"><code>julia&gt; G=Group(Perm(1,2),Perm(2,3));

julia&gt; minimal_words(G,Perm(1,3))
2-element Vector{Vector{Int64}}:
 [1, 2, 1]
 [2, 1, 2]
</code></pre></div>
<p dir="auto"><a href="https://github.com/jmichel7/PermGroups.jl/blob/ed9c11c663734fec8e7bfc81a396c409452cdd82/src/Groups.jl#L449-L462">source</a><br></p>
<p dir="auto"><a id="user-content-permgroups.groups.words-tuple{group}" href="#PermGroups.Groups.words-Tuple{Group}">#</a>
<strong><code>PermGroups.Groups.words</code></strong> — <em>Method</em>.</p>
<p dir="auto"><code>words(G::Group)</code></p>
<p dir="auto">returns  a <code>Dict</code>  giving for  each element  of <code>G</code>  a positive word in the generators representing it. It is faster than <code>minimal_words</code> but the words are not guaranteed minimal.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; G=Group(Perm(1,2),Perm(1,2,3));
julia&gt; words(G)
OrderedDict{Perm{Int16}, Vector{Int64}} with 6 entries:
  ()      =&gt; []
  (1,2)   =&gt; [1]
  (1,2,3) =&gt; [2]
  (1,3)   =&gt; [1, 2]
  (2,3)   =&gt; [2, 1]
  (1,3,2) =&gt; [1, 2, 1]"><pre lang="julia-repl" class="notranslate"><code>julia&gt; G=Group(Perm(1,2),Perm(1,2,3));
julia&gt; words(G)
OrderedDict{Perm{Int16}, Vector{Int64}} with 6 entries:
  ()      =&gt; []
  (1,2)   =&gt; [1]
  (1,2,3) =&gt; [2]
  (1,3)   =&gt; [1, 2]
  (2,3)   =&gt; [2, 1]
  (1,3,2) =&gt; [1, 2, 1]
</code></pre></div>
<p dir="auto"><a href="https://github.com/jmichel7/PermGroups.jl/blob/ed9c11c663734fec8e7bfc81a396c409452cdd82/src/Groups.jl#L477-L495">source</a><br></p>
<p dir="auto"><a id="user-content-permgroups.groups.transporting_element" href="#PermGroups.Groups.transporting_element">#</a>
<strong><code>PermGroups.Groups.transporting_element</code></strong> — <em>Function</em>.</p>
<p dir="auto"><code>transporting_elt(G,p,q,action=^)</code>    or <code>transporting_element(G,p,q,action=^)</code></p>
<p dir="auto">returns  an  element  <code>g∈  G</code>  such  that  <code>p^g==q</code> (or <code>action(p,g)==q</code> if <code>action</code> is given), if such a <code>g</code> exists, and nothing otherwise. The set of possible <code>g</code> forms a right coset of the centralizer of p in G.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; g=Group(perm&quot;(1,2,3)(6,7)&quot;,perm&quot;(3,4,5)(7,8)&quot;)
Group((1,2,3)(6,7),(3,4,5)(7,8))

julia&gt; transporting_elt(g,1,5)
(1,5,4,3,2)

julia&gt; transporting_elt(g,1,6)

julia&gt; transporting_elt(g,[1,2,3,4],[2,3,4,5],(s,g)-&gt;sort(s.^g))
(1,2,3,4,5)(6,7,8)

julia&gt; transporting_elt(g,[1,2,3,4],[3,4,5,2],(s,g)-&gt;s.^g)"><pre lang="julia-repl" class="notranslate"><code>julia&gt; g=Group(perm"(1,2,3)(6,7)",perm"(3,4,5)(7,8)")
Group((1,2,3)(6,7),(3,4,5)(7,8))

julia&gt; transporting_elt(g,1,5)
(1,5,4,3,2)

julia&gt; transporting_elt(g,1,6)

julia&gt; transporting_elt(g,[1,2,3,4],[2,3,4,5],(s,g)-&gt;sort(s.^g))
(1,2,3,4,5)(6,7,8)

julia&gt; transporting_elt(g,[1,2,3,4],[3,4,5,2],(s,g)-&gt;s.^g)
</code></pre></div>
<p dir="auto"><a href="https://github.com/jmichel7/PermGroups.jl/blob/ed9c11c663734fec8e7bfc81a396c409452cdd82/src/Groups.jl#L693-L715">source</a><br></p>
<p dir="auto"><a id="user-content-base.intersect-tuple{group, group}" href="#Base.intersect-Tuple{Group, Group}">#</a>
<strong><code>Base.intersect</code></strong> — <em>Method</em>.</p>
<p dir="auto"><code>intersect(G::Group, H::Group)</code> the intersection as a group</p>
<p dir="auto"><a href="https://github.com/jmichel7/PermGroups.jl/blob/ed9c11c663734fec8e7bfc81a396c409452cdd82/src/Groups.jl#L764">source</a><br></p>
<p dir="auto"><a id="user-content-base.rand-tuple{group}" href="#Base.rand-Tuple{Group}">#</a>
<strong><code>Base.rand</code></strong> — <em>Method</em>.</p>
<p dir="auto"><code>rand(W::Group)</code> a random element of <code>W</code></p>
<p dir="auto"><a href="https://github.com/jmichel7/PermGroups.jl/blob/ed9c11c663734fec8e7bfc81a396c409452cdd82/src/Groups.jl#L686">source</a><br></p>
<p dir="auto"><a id="user-content-permgroups.groups.isabelian" href="#PermGroups.Groups.isabelian">#</a>
<strong><code>PermGroups.Groups.isabelian</code></strong> — <em>Function</em>.</p>
<p dir="auto"><code>isabelian(G::Group)</code> whether <code>G</code> is abelian</p>
<p dir="auto"><a href="https://github.com/jmichel7/PermGroups.jl/blob/ed9c11c663734fec8e7bfc81a396c409452cdd82/src/Groups.jl#L677">source</a><br></p>
<p dir="auto"><a id="user-content-permgroups.groups.iscyclic" href="#PermGroups.Groups.iscyclic">#</a>
<strong><code>PermGroups.Groups.iscyclic</code></strong> — <em>Function</em>.</p>
<p dir="auto"><code>iscyclic(G::Group)</code> whether <code>G</code> is cyclic</p>
<p dir="auto"><a href="https://github.com/jmichel7/PermGroups.jl/blob/ed9c11c663734fec8e7bfc81a396c409452cdd82/src/Groups.jl#L680">source</a><br></p>
<p dir="auto"><a id="user-content-permgroups.groups.istrivial" href="#PermGroups.Groups.istrivial">#</a>
<strong><code>PermGroups.Groups.istrivial</code></strong> — <em>Function</em>.</p>
<p dir="auto"><code>istrivial(G::Group)</code> whether <code>G</code> is trivial</p>
<p dir="auto"><a href="https://github.com/jmichel7/PermGroups.jl/blob/ed9c11c663734fec8e7bfc81a396c409452cdd82/src/Groups.jl#L683">source</a><br></p>
<p dir="auto"><a id="user-content-permgroups.groups.hom" href="#PermGroups.Groups.Hom">#</a>
<strong><code>PermGroups.Groups.Hom</code></strong> — <em>Type</em>.</p>
<p dir="auto"><code>Hom(S::Group,T::Group,images)</code></p>
<p dir="auto">builds an object representing the homomorphism from <code>S</code> to <code>T</code> which maps <code>gens(S)</code> to <code>images</code>.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; S=Group(Perm(1,2),Perm(2,3))
Group((1,2),(2,3))

julia&gt; T=Group(Perm(1,2))
Group((1,2))

julia&gt; h=Hom(S,T,[T(1),T(1)])
Hom(Group((1,2),(2,3))→ Group((1,2));[(1,2), (2,3)]↦ [(1,2), (1,2)]

julia&gt; h(S(1,2)) # the image by h
()"><pre lang="julia-repl" class="notranslate"><code>julia&gt; S=Group(Perm(1,2),Perm(2,3))
Group((1,2),(2,3))

julia&gt; T=Group(Perm(1,2))
Group((1,2))

julia&gt; h=Hom(S,T,[T(1),T(1)])
Hom(Group((1,2),(2,3))→ Group((1,2));[(1,2), (2,3)]↦ [(1,2), (1,2)]

julia&gt; h(S(1,2)) # the image by h
()
</code></pre></div>
<p dir="auto"><a href="https://github.com/jmichel7/PermGroups.jl/blob/ed9c11c663734fec8e7bfc81a396c409452cdd82/src/Groups.jl#L774-L793">source</a><br></p>
<p dir="auto"><a id="user-content-permgroups.groups.kernel" href="#PermGroups.Groups.kernel">#</a>
<strong><code>PermGroups.Groups.kernel</code></strong> — <em>Function</em>.</p>
<p dir="auto"><code>kernel(h::Hom)</code> the kernel of the homomorphism <code>h</code></p>
<p dir="auto"><a href="https://github.com/jmichel7/PermGroups.jl/blob/ed9c11c663734fec8e7bfc81a396c409452cdd82/src/Groups.jl#L808">source</a><br></p>
<p dir="auto"><a id="user-content-permgroups.groups.coset" href="#PermGroups.Groups.Coset">#</a>
<strong><code>PermGroups.Groups.Coset</code></strong> — <em>Type</em>.</p>
<p dir="auto"><code>Coset(G::Group,phi=one(G))</code>  constructs the (left)  coset <code>G.phi</code> where <code>G isa  Group{&lt;:T}</code> and <code>phi isa  T</code>, as an object  of type <code>Cosetof{T}</code>. This general  coset knows only the general methods for a coset <code>C=G.phi</code> defined in this module, which are</p>
<ul dir="auto">
<li><code>Group(C)</code> returns <code>G</code>.</li>
<li><code>isone(C)</code> returns <code>true</code> iff <code>phi in G</code></li>
<li><code>one(C)</code> returns the trivial coset <code>G.1</code></li>
<li><code>length(C)</code> returns <code>length(G)</code></li>
<li><code>elements(C)</code> returns <code>elements(G).*Ref(phi)</code></li>
<li><code>x in C</code> returns <code>x/phi in G</code></li>
</ul>
<p dir="auto"><a href="https://github.com/jmichel7/PermGroups.jl/blob/ed9c11c663734fec8e7bfc81a396c409452cdd82/src/Groups.jl#L967-L979">source</a><br></p>
<p dir="auto"><a id="user-content-permgroups.groups.normalcoset" href="#PermGroups.Groups.NormalCoset">#</a>
<strong><code>PermGroups.Groups.NormalCoset</code></strong> — <em>Type</em>.</p>
<p dir="auto"><code>NormalCoset(G::Group,phi=one(G))</code>  constructs the coset <code>C=G.phi</code> where <code>G isa  Group{&lt;:T}</code> and <code>phi isa T</code>,  as an object of type <code>NormalCosetof{T}</code>. It  is assumed that <code>phi</code> normalizes <code>G</code>. This general coset knows only the general  methods defined for normal cosets in the module <code>Groups</code>, which in addition to those defined for cosets (see <code>Coset</code>) are</p>
<ul dir="auto">
<li><code>inv(C)</code> return <code>G.inv(phi)</code> (assumed equal to <code>inv(phi).G</code>)</li>
<li><code>C*D</code> given another coset <code>G.psi</code> returns <code>G.phi*psi</code></li>
<li><code>C/D</code> given another coset <code>G.psi</code> returns <code>G.phi*inv(psi)</code></li>
<li><code>C^D</code> given another coset <code>G.psi</code> returns <code>G.inv(psi)*phi*psi</code></li>
<li><code>C^n</code> returns <code>G.phi^n</code></li>
<li><code>order(C)</code> the smallest <code>n</code> such that <code>isone(C^n)</code></li>
</ul>
<p dir="auto">The  conjugacy  classes  of  a  normal  coset  <code>G.phi</code>  are relative to the conjugation action of <code>G</code> on <code>G.phi</code>. We have the functions <code>conjugacy_classes, nconjugacy_classes, classreps, position_class</code>.</p>
<p dir="auto">Finally  the function  <code>G/H</code> for  two groups  constructs the  quotient as a group of <code>NormalCoset</code>s, and <code>fusion_conjugacy_classes(H::NormalCoset,G::NormalCoset)</code>   expresses   the fusion of conjugacy classes.</p>
<p dir="auto"><a href="https://github.com/jmichel7/PermGroups.jl/blob/ed9c11c663734fec8e7bfc81a396c409452cdd82/src/Groups.jl#L987-L1009">source</a><br></p>
<p dir="auto"><a id="user-content-permutation-groups"></a></p>
<p dir="auto"><a id="user-content-permutation-groups-1"></a></p>
<h1 dir="auto"><a id="user-content-permutation-groups" class="anchor" aria-hidden="true" href="#permutation-groups"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Permutation groups</h1>
<p dir="auto"><a id="user-content-permgroups" href="#PermGroups">#</a>
<strong><code>PermGroups</code></strong> — <em>Module</em>.</p>
<p dir="auto">This  module is a port  of some GAP functionality  on permutation groups. A <code>PermGroup</code> is a <code>Group</code> where <code>gens</code> are <code>Perm</code>s. It depends on the modules <code>Groups</code> and <code>Perms</code> which could be independent packages on their own.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; G=Group([Perm(i,i+1) for i in 1:2])
Group((1,2),(2,3))

# PermGroups are iterators over their elements
julia&gt; collect(G)
6-element Vector{Perm{Int16}}:
 ()
 (1,2)
 (1,3,2)
 (2,3)
 (1,2,3)
 (1,3)

julia&gt; largest_moved_point(G)  # maximum moved point of any element of `G`
3

julia&gt; orbits(G) # the orbits are orbits on points it moves
1-element Vector{Vector{Int16}}:
 [1, 2, 3]

julia&gt; Perm(1,2) in G
true

julia&gt; Perm(1,2,4) in G
false"><pre lang="julia-repl" class="notranslate"><code>julia&gt; G=Group([Perm(i,i+1) for i in 1:2])
Group((1,2),(2,3))

# PermGroups are iterators over their elements
julia&gt; collect(G)
6-element Vector{Perm{Int16}}:
 ()
 (1,2)
 (1,3,2)
 (2,3)
 (1,2,3)
 (1,3)

julia&gt; largest_moved_point(G)  # maximum moved point of any element of `G`
3

julia&gt; orbits(G) # the orbits are orbits on points it moves
1-element Vector{Vector{Int16}}:
 [1, 2, 3]

julia&gt; Perm(1,2) in G
true

julia&gt; Perm(1,2,4) in G
false
</code></pre></div>
<p dir="auto"><code>elements</code>,   <code>in</code>  and   other  functions   are  computed   on  <code>G</code>  using Schreier-Sims theory, that is computing the following</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; get_stabchain(G)
b:1 c:Group((1,2),(2,3))
  δ:1=&gt;(),2=&gt;(1,2),3=&gt;(1,3,2)
b:2 c:Group((2,3))
  δ:2=&gt;(),3=&gt;(2,3)"><pre lang="julia-repl" class="notranslate"><code>julia&gt; get_stabchain(G)
b:1 c:Group((1,2),(2,3))
  δ:1=&gt;(),2=&gt;(1,2),3=&gt;(1,3,2)
b:2 c:Group((2,3))
  δ:2=&gt;(),3=&gt;(2,3)
</code></pre></div>
<p dir="auto">See the docstring of <code>stabchain</code> for explanations.</p>
<p dir="auto">There are efficient methods for <code>PermGroups</code> for the functions <code>in, length, elements,   position_class</code>.  The  function   <code>on_classes</code>  determines  the permutation  of the conjugacy classes effected by an automorphism. Finally, we   give  application  to  the  group   of  simultaneous  row  and  column permutations of a matrix: see <code>onmats, stab_onmats, Perm</code>.</p>
<p dir="auto">finally, benchmarks on julia 1.8</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; @btime collect(symmetric_group(8));
  2.673 ms (129965 allocations: 5.76 MiB)

julia&gt; @btime words(symmetric_group(8));
  7.155 ms (86019 allocations: 11.00 MiB)

julia&gt; @btime elements(symmetric_group(8)); # Gap takes 8 ms
  1.565 ms (49539 allocations: 3.71 MiB)

julia&gt; rubik_gens=[
  perm&quot;(1,3,8,6)(2,5,7,4)(9,33,25,17)(10,34,26,18)(11,35,27,19)&quot;,
  perm&quot;(9,11,16,14)(10,13,15,12)(1,17,41,40)(4,20,44,37)(6,22,46,35)&quot;,
  perm&quot;(17,19,24,22)(18,21,23,20)(6,25,43,16)(7,28,42,13)(8,30,41,11)&quot;,
  perm&quot;(25,27,32,30)(26,29,31,28)(3,38,43,19)(5,36,45,21)(8,33,48,24)&quot;,
  perm&quot;(33,35,40,38)(34,37,39,36)(3,9,46,32)(2,12,47,29)(1,14,48,27)&quot;,
  perm&quot;(41,43,48,46)(42,45,47,44)(14,22,30,38)(15,23,31,39)(16,24,32,40)&quot;];

julia&gt; @btime length(Int128,Group(rubik_gens)) # Gap takes 5ms
  4.906 ms (104874 allocations: 13.64 MiB)
43252003274489856000"><pre lang="benchmark" class="notranslate"><code>julia&gt; @btime collect(symmetric_group(8));
  2.673 ms (129965 allocations: 5.76 MiB)

julia&gt; @btime words(symmetric_group(8));
  7.155 ms (86019 allocations: 11.00 MiB)

julia&gt; @btime elements(symmetric_group(8)); # Gap takes 8 ms
  1.565 ms (49539 allocations: 3.71 MiB)

julia&gt; rubik_gens=[
  perm"(1,3,8,6)(2,5,7,4)(9,33,25,17)(10,34,26,18)(11,35,27,19)",
  perm"(9,11,16,14)(10,13,15,12)(1,17,41,40)(4,20,44,37)(6,22,46,35)",
  perm"(17,19,24,22)(18,21,23,20)(6,25,43,16)(7,28,42,13)(8,30,41,11)",
  perm"(25,27,32,30)(26,29,31,28)(3,38,43,19)(5,36,45,21)(8,33,48,24)",
  perm"(33,35,40,38)(34,37,39,36)(3,9,46,32)(2,12,47,29)(1,14,48,27)",
  perm"(41,43,48,46)(42,45,47,44)(14,22,30,38)(15,23,31,39)(16,24,32,40)"];

julia&gt; @btime length(Int128,Group(rubik_gens)) # Gap takes 5ms
  4.906 ms (104874 allocations: 13.64 MiB)
43252003274489856000
</code></pre></div>
<p dir="auto">Note  the use of  <code>Int128</code> in <code>length</code>:  the computation does  not fit in an <code>Int64</code>.</p>
<p dir="auto"><a href="https://github.com/jmichel7/PermGroups.jl/blob/ed9c11c663734fec8e7bfc81a396c409452cdd82/src/PermGroups.jl#L1-L75">source</a><br></p>
<p dir="auto"><a id="user-content-permgroups.perms.largest_moved_point-tuple{permgroup}" href="#PermGroups.Perms.largest_moved_point-Tuple{PermGroup}">#</a>
<strong><code>PermGroups.Perms.largest_moved_point</code></strong> — <em>Method</em>.</p>
<p dir="auto"><code>largest_moved_point(a::Perm)</code> is the largest integer moved by a</p>
<p dir="auto"><a href="https://github.com/jmichel7/PermGroups.jl/blob/ed9c11c663734fec8e7bfc81a396c409452cdd82/src/Perms.jl#L310">source</a><br></p>
<p dir="auto"><code>largest_moved_point(G::PermGroup)</code> the largest moved point by any <code>g∈ G</code></p>
<p dir="auto"><a href="https://github.com/jmichel7/PermGroups.jl/blob/ed9c11c663734fec8e7bfc81a396c409452cdd82/src/PermGroups.jl#L100">source</a><br></p>
<p dir="auto"><a id="user-content-base.in-tuple{perm, permgroup}" href="#Base.in-Tuple{Perm, PermGroup}">#</a>
<strong><code>Base.in</code></strong> — <em>Method</em>.</p>
<p dir="auto"><code>x in G</code> for <code>G</code> a group: whether <code>x</code> is an element of <code>G</code></p>
<p dir="auto"><a href="https://github.com/jmichel7/PermGroups.jl/blob/ed9c11c663734fec8e7bfc81a396c409452cdd82/src/Groups.jl#L562">source</a><br></p>
<p dir="auto"><a id="user-content-permgroups.on_classes" href="#PermGroups.on_classes">#</a>
<strong><code>PermGroups.on_classes</code></strong> — <em>Function</em>.</p>
<p dir="auto"><code>on_classes(G, aut)</code></p>
<p dir="auto"><code>aut</code>  is an automorphism of  the group <code>G</code> (for  a permutation group, this could  be  given  as  a  permutation  normalizing  <code>G</code>).  The result is the permutation of <code>1:nconjugacy_classes(G)</code> induced by <code>aut</code>.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; W=Group(Perm(1,2),Perm(2,3),Perm(4,5),Perm(5,6))
Group((1,2),(2,3),(4,5),(5,6))

julia&gt; on_classes(W,Perm(1,4,2,5,3,6))
Perm{Int64}: (2,4)(3,7)(6,8)"><pre lang="julia-repl" class="notranslate"><code>julia&gt; W=Group(Perm(1,2),Perm(2,3),Perm(4,5),Perm(5,6))
Group((1,2),(2,3),(4,5),(5,6))

julia&gt; on_classes(W,Perm(1,4,2,5,3,6))
Perm{Int64}: (2,4)(3,7)(6,8)
</code></pre></div>
<p dir="auto"><a href="https://github.com/jmichel7/PermGroups.jl/blob/ed9c11c663734fec8e7bfc81a396c409452cdd82/src/PermGroups.jl#L503-L517">source</a><br></p>
<p dir="auto"><a id="user-content-permgroups.symmetric_group" href="#PermGroups.symmetric_group">#</a>
<strong><code>PermGroups.symmetric_group</code></strong> — <em>Function</em>.</p>
<p dir="auto"><code>symmetric_group(n::Int)</code>  The symmetric group of degree n</p>
<p dir="auto"><a href="https://github.com/jmichel7/PermGroups.jl/blob/ed9c11c663734fec8e7bfc81a396c409452cdd82/src/PermGroups.jl#L654">source</a><br></p>
<p dir="auto"><a id="user-content-permgroups.onmats" href="#PermGroups.onmats">#</a>
<strong><code>PermGroups.onmats</code></strong> — <em>Function</em>.</p>
<p dir="auto"><code>onmats(m::AbstractMatrix,g::Perm)</code> synonym for <code>permute(m,g;dims=(1,2))</code> or <code>permute(m,g,g)</code>.</p>
<p dir="auto"><a href="https://github.com/jmichel7/PermGroups.jl/blob/ed9c11c663734fec8e7bfc81a396c409452cdd82/src/PermGroups.jl#L658-L661">source</a><br></p>
<p dir="auto"><a id="user-content-permgroups.stab_onmats" href="#PermGroups.stab_onmats">#</a>
<strong><code>PermGroups.stab_onmats</code></strong> — <em>Function</em>.</p>
<p dir="auto"><code>stab_onmats([G,]M;extra=nothing)</code></p>
<p dir="auto">If  <code>onmats(m,p)=^(M,p;dims=(1,2))</code>, and  the argument  <code>G</code> is given (which should   be  a  <code>PermGroup</code>)   this  is  just   a  fast  implementation  of <code>centralizer(G,M,onmats)</code>.   If  <code>G</code>   is  omitted   it  is   taken  to  be <code>symmetric_group(size(M,1))</code>.  The  program  uses sophisticated algorithms, and  can handle matrices up to 80×80. If a list <code>extra</code> is given the result centralizes also <code>extra</code>.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; stab_onmats((1:30)'.*(1:30).%15)
Group((10,25),(5,20),(12,27),(3,18),(9,24),(6,21),(13,28),(8,23),(7,22),(2,17),(14,29),(11,26),(4,19),(1,4)(2,8)(3,12)(6,9)(7,13)(11,14)(16,19)(17,23)(18,27)(21,24)(22,28)(26,29),(1,11)(2,7)(4,14)(5,10)(8,13)(16,26)(17,22)(19,29)(20,25)(23,28),(1,16),(15,30))"><pre lang="julia-repl" class="notranslate"><code>julia&gt; stab_onmats((1:30)'.*(1:30).%15)
Group((10,25),(5,20),(12,27),(3,18),(9,24),(6,21),(13,28),(8,23),(7,22),(2,17),(14,29),(11,26),(4,19),(1,4)(2,8)(3,12)(6,9)(7,13)(11,14)(16,19)(17,23)(18,27)(21,24)(22,28)(26,29),(1,11)(2,7)(4,14)(5,10)(8,13)(16,26)(17,22)(19,29)(20,25)(23,28),(1,16),(15,30))
</code></pre></div>
<p dir="auto"><a href="https://github.com/jmichel7/PermGroups.jl/blob/ed9c11c663734fec8e7bfc81a396c409452cdd82/src/PermGroups.jl#L692-L706">source</a><br></p>
<p dir="auto"><a id="user-content-permgroups.perm_onmats" href="#PermGroups.Perm_onmats">#</a>
<strong><code>PermGroups.Perm_onmats</code></strong> — <em>Function</em>.</p>
<p dir="auto"><code>Perm_onmats(M, N[, m ,n])</code></p>
<p dir="auto">returns <code>p</code> such that <code>onmats(M,p)=N</code> if it exists, <code>nothing</code> otherwise; so is just an efficient version of <code>transporting_elt(symmetric_group(size(M,1)),M,N,onmats)</code>  If  in  addition the vectors <code>m</code> and <code>n</code> are given, <code>p</code> should satisfy <code>permute(m,p)=n</code>.</p>
<p dir="auto"><a href="https://github.com/jmichel7/PermGroups.jl/blob/ed9c11c663734fec8e7bfc81a396c409452cdd82/src/PermGroups.jl#L726-L733">source</a><br></p>
<p dir="auto"><a id="user-content-permgroups.proditerator" href="#PermGroups.ProdIterator">#</a>
<strong><code>PermGroups.ProdIterator</code></strong> — <em>Type</em>.</p>
<p dir="auto">A  <code>ProdIterator([i₁,…,iₙ])</code>  takes  a  list  <code>i₁,…,iₙ</code>  of  iterators  and iterates  on all the products <code>i₁[j₁]*…*iₙ[jₙ]</code>  (where the inner loop <code>jₙ</code> runs  the  fastest).  It  tries  to  be  fast  by re-using partial products <code>i₁[j₁]*…*iₖ[jₖ]</code> for <code>k&lt;n</code>.</p>
<p dir="auto">It is used internally for iterating over a permutation group.</p>
<p dir="auto"><a href="https://github.com/jmichel7/PermGroups.jl/blob/ed9c11c663734fec8e7bfc81a396c409452cdd82/src/PermGroups.jl#L526-L533">source</a><br></p>
</article></div>