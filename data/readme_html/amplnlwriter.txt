<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-amplnlwriterjl" class="anchor" aria-hidden="true" href="#amplnlwriterjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>AmplNLWriter.jl</h1>
<p>AmplNLWriter.jl is an interface between <a href="https://github.com/jump-dev/MathOptInterface.jl">MathOptInterface.jl</a>
and <a href="http://ampl.com/products/solvers/all-solvers-for-ampl/" rel="nofollow">AMPL-enabled solvers</a>.</p>
<p><em>Development of AmplNLWriter.jl is community driven and has no official
connection with the AMPL modeling language or AMPL Optimization Inc.</em></p>
<p><a href="https://github.com/jump-dev/AmplNLWriter.jl/actions?query=workflow%3ACI"><img src="https://github.com/jump-dev/AmplNLWriter.jl/workflows/CI/badge.svg?branch=master" alt="Build Status" style="max-width:100%;"></a>
<a href="https://github.com/jump-dev/AmplNLWriter.jl/actions?query=workflow%3AMINLPTests"><img src="https://github.com/jump-dev/AmplNLWriter.jl/workflows/MINLPTests/badge.svg?branch=master" alt="MINLPTests" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/jump-dev/AmplNLWriter.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/a1af5f2f30e6ab2dff2411a51b6c133a6031b5b7c8b50727c1f9f3d6934a3fd2/68747470733a2f2f636f6465636f762e696f2f67682f6a756d702d6465762f416d706c4e4c5772697465722e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/jump-dev/AmplNLWriter.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>The package can be installed with <code>Pkg.add</code>.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="import Pkg
Pkg.add(&quot;AmplNLWriter&quot;)
"><pre><span class="pl-k">import</span> Pkg
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>AmplNLWriter<span class="pl-pds">"</span></span>)</pre></div>
<h3><a id="user-content-solvers" class="anchor" aria-hidden="true" href="#solvers"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Solvers</h3>
<p>You also need an AMPL compatible solver.</p>
<p><strong>Note: the <code>_jll</code> packages require Julia 1.3 or later.</strong></p>
<h4><a id="user-content-bonmin" class="anchor" aria-hidden="true" href="#bonmin"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Bonmin</h4>
<p>To install Bonmin, use:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="Pkg.add(&quot;Bonmin_jll&quot;)
"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>Bonmin_jll<span class="pl-pds">"</span></span>)</pre></div>
<h4><a id="user-content-couenne" class="anchor" aria-hidden="true" href="#couenne"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Couenne</h4>
<p>To install Couenne, use:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="Pkg.add(&quot;Couenne_jll&quot;)
"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>Couenne_jll<span class="pl-pds">"</span></span>)</pre></div>
<h4><a id="user-content-ipopt" class="anchor" aria-hidden="true" href="#ipopt"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Ipopt</h4>
<p>To install Ipopt, use:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="Pkg.add(&quot;Ipopt_jll&quot;)
"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>Ipopt_jll<span class="pl-pds">"</span></span>)</pre></div>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<h3><a id="user-content-jll-packages" class="anchor" aria-hidden="true" href="#jll-packages"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>JLL packages</h3>
<p>To call Ipopt via AmplNLWriter.jl, use:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using JuMP, AmplNLWriter, Ipopt_jll
model = Model(() -&gt; AmplNLWriter.Optimizer(Ipopt_jll.amplexe))

# or equivalently

model = Model() do
    AmplNLWriter.Optimizer(Ipopt_jll.amplexe)
end
"><pre><span class="pl-k">using</span> JuMP, AmplNLWriter, Ipopt_jll
model <span class="pl-k">=</span> <span class="pl-c1">Model</span>(() <span class="pl-k">-&gt;</span> AmplNLWriter<span class="pl-k">.</span><span class="pl-c1">Optimizer</span>(Ipopt_jll<span class="pl-k">.</span>amplexe))

<span class="pl-c"><span class="pl-c">#</span> or equivalently</span>

model <span class="pl-k">=</span> <span class="pl-c1">Model</span>() <span class="pl-k">do</span>
    AmplNLWriter<span class="pl-k">.</span><span class="pl-c1">Optimizer</span>(Ipopt_jll<span class="pl-k">.</span>amplexe)
<span class="pl-k">end</span></pre></div>
<p>Replace <code>Ipopt_jll</code> with <code>Bonmin_jll</code> or <code>Couenne_jll</code> as appropriate.</p>
<h3><a id="user-content-other-binaries" class="anchor" aria-hidden="true" href="#other-binaries"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Other binaries</h3>
<p>You can also pass a string pointing to an AMPL-compatible solver executable. For
example, if the <code>bonmin</code> executable is on the system path, use:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using JuMP, AmplNLWriter
model = Model(() -&gt; AmplNLWriter.Optimizer(&quot;bonmin&quot;))
"><pre><span class="pl-k">using</span> JuMP, AmplNLWriter
model <span class="pl-k">=</span> <span class="pl-c1">Model</span>(() <span class="pl-k">-&gt;</span> AmplNLWriter<span class="pl-k">.</span><span class="pl-c1">Optimizer</span>(<span class="pl-s"><span class="pl-pds">"</span>bonmin<span class="pl-pds">"</span></span>))</pre></div>
<p>If the solver is not on the path, the full path to the solver will need to be
passed in.</p>
<h2><a id="user-content-options" class="anchor" aria-hidden="true" href="#options"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Options</h2>
<p>Options are appended to the solve command separated by spaces, and the required
format depends on the solver that you are using. Generally, they will be of the
form <code>"key=value"</code>, where <code>key</code> is the name of the option to set and <code>value</code> is
the desired value.</p>
<p>For example, to set the <code>"bonmin.nlp_log_level"</code> option to 0 in Bonmin, use:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="model = AmplNLWriter.Optimizer(Bonmin_jll.amplexe)
MOI.set(model, MOI.RawParameter(&quot;bonmin.nlp_log_level&quot;), 0)
"><pre>model <span class="pl-k">=</span> AmplNLWriter<span class="pl-k">.</span><span class="pl-c1">Optimizer</span>(Bonmin_jll<span class="pl-k">.</span>amplexe)
MOI<span class="pl-k">.</span><span class="pl-c1">set</span>(model, MOI<span class="pl-k">.</span><span class="pl-c1">RawParameter</span>(<span class="pl-s"><span class="pl-pds">"</span>bonmin.nlp_log_level<span class="pl-pds">"</span></span>), <span class="pl-c1">0</span>)</pre></div>
<p>For a list of options supported by your solver, check the solver's
documentation, or run <code>/path/to/solver -=</code> at the command line. For <code>_jll</code>
packages, use:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="Bonmin_jll.amplexe() do path
   run(`$(path) -=`)
 end
"><pre>Bonmin_jll<span class="pl-k">.</span><span class="pl-c1">amplexe</span>() <span class="pl-k">do</span> path
   <span class="pl-c1">run</span>(<span class="pl-s"><span class="pl-pds">`</span>$(path) -=<span class="pl-pds">`</span></span>)
 <span class="pl-k">end</span></pre></div>
<p>Note that some of the options don't seem to take effect when specified using the
command-line options (especially for Couenne), and instead you need to use an
<code>.opt</code> file.</p>
<p>The <code>.opt</code> file takes the name of the solver, e.g. <code>bonmin.opt</code>, and each line
of this file contains an option name and the desired value separated by a space.
For instance, to set the absolute and relative tolerances in Couenne to 1 and
0.05 respectively, the <code>couenne.opt</code> file should be</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="allowable_gap 1
allowable_fraction_gap 0.05
"><pre><code>allowable_gap 1
allowable_fraction_gap 0.05
</code></pre></div>
<p>In order for the options to be loaded, this file must be located in the current
working directory whenever the model is solved.</p>
<p>A list of available options for the respective <code>.opt</code> files can be found here:</p>
<ul>
<li><a href="https://coin-or.github.io/Ipopt/OPTIONS.html" rel="nofollow">Ipopt</a></li>
<li><a href="https://github.com/coin-or/Bonmin/blob/master/test/bonmin.opt">Bonmin</a> (plus Ipopt options)</li>
<li><a href="https://github.com/coin-or/Couenne/blob/master/src/couenne.opt">Couenne</a> (plus Ipopt and Bonmin options)</li>
</ul>
</article></div>