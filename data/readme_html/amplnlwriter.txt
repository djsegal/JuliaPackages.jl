<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-amplnlwriterjl" class="anchor" aria-hidden="true" href="#amplnlwriterjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>AmplNLWriter.jl</h1>
<p dir="auto"><a href="https://github.com/jump-dev/AmplNLWriter.jl/actions?query=workflow%3ACI"><img src="https://github.com/jump-dev/AmplNLWriter.jl/workflows/CI/badge.svg?branch=master" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://github.com/jump-dev/AmplNLWriter.jl/actions?query=workflow%3AMINLPTests"><img src="https://github.com/jump-dev/AmplNLWriter.jl/workflows/MINLPTests/badge.svg?branch=master" alt="MINLPTests" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/jump-dev/AmplNLWriter.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/a1af5f2f30e6ab2dff2411a51b6c133a6031b5b7c8b50727c1f9f3d6934a3fd2/68747470733a2f2f636f6465636f762e696f2f67682f6a756d702d6465762f416d706c4e4c5772697465722e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/jump-dev/AmplNLWriter.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto"><a href="https://github.com/jump-dev/AmplNLWriter.jl">AmplNLWriter.jl</a> is an interface
between <a href="https://github.com/jump-dev/MathOptInterface.jl">MathOptInterface.jl</a>
and <a href="http://ampl.com/products/solvers/all-solvers-for-ampl/" rel="nofollow">AMPL-enabled solvers</a>.</p>
<h2 dir="auto"><a id="user-content-affiliation" class="anchor" aria-hidden="true" href="#affiliation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Affiliation</h2>
<p dir="auto">This wrapper is maintained by the JuMP community and has no official connection
with the AMPL modeling language or AMPL Optimization Inc.</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">Install AmplNLWriter using <code>Pkg.add</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="import Pkg
Pkg.add(&quot;AmplNLWriter&quot;)"><pre><span class="pl-k">import</span> Pkg
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>AmplNLWriter<span class="pl-pds">"</span></span>)</pre></div>
<h2 dir="auto"><a id="user-content-use-with-jump" class="anchor" aria-hidden="true" href="#use-with-jump"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Use with JuMP</h2>
<p dir="auto">AmplNLWriter requires an AMPL compatible solver binary to function.</p>
<p dir="auto">Pass a string pointing to any AMPL-compatible solver binary as the first
positional argument to <code>AmplNLWriter</code>.</p>
<p dir="auto">For example, if the <code>bonmin</code> executable is on the system path, use:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using JuMP, AmplNLWriter
model = Model(() -&gt; AmplNLWriter.Optimizer(&quot;bonmin&quot;))"><pre><span class="pl-k">using</span> JuMP, AmplNLWriter
model <span class="pl-k">=</span> <span class="pl-c1">Model</span>(() <span class="pl-k">-&gt;</span> AmplNLWriter<span class="pl-k">.</span><span class="pl-c1">Optimizer</span>(<span class="pl-s"><span class="pl-pds">"</span>bonmin<span class="pl-pds">"</span></span>))</pre></div>
<p dir="auto">If the solver is not on the system path, pass the full path to the solver:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using JuMP, AmplNLWriter
model = Model(() -&gt; AmplNLWriter.Optimizer(&quot;/Users/Oscar/ampl.macos64/bonmin&quot;))"><pre><span class="pl-k">using</span> JuMP, AmplNLWriter
model <span class="pl-k">=</span> <span class="pl-c1">Model</span>(() <span class="pl-k">-&gt;</span> AmplNLWriter<span class="pl-k">.</span><span class="pl-c1">Optimizer</span>(<span class="pl-s"><span class="pl-pds">"</span>/Users/Oscar/ampl.macos64/bonmin<span class="pl-pds">"</span></span>))</pre></div>
<h2 dir="auto"><a id="user-content-precompiled-binaries" class="anchor" aria-hidden="true" href="#precompiled-binaries"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Precompiled binaries</h2>
<p dir="auto">To simplify the process of installing solver binaries, a number of Julia
packages provide precompiled binaries that are compatible with AmplNLWriter.
These are generally the name of the solver, followed by <code>_jll</code>. For example,
<code>bomin</code> is provided by the <code>Bonmin_jll</code> package.</p>
<p dir="auto">To call Bonmin via AmplNLWriter.jl, install the <code>Bonmin_jll</code> package, then run:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using JuMP, AmplNLWriter, Bonmin_jll
model = Model(() -&gt; AmplNLWriter.Optimizer(Bonmin_jll.amplexe))"><pre><span class="pl-k">using</span> JuMP, AmplNLWriter, Bonmin_jll
model <span class="pl-k">=</span> <span class="pl-c1">Model</span>(() <span class="pl-k">-&gt;</span> AmplNLWriter<span class="pl-k">.</span><span class="pl-c1">Optimizer</span>(Bonmin_jll<span class="pl-k">.</span>amplexe))</pre></div>
<p dir="auto">Supported packages include:</p>
<table>
<thead>
<tr>
<th>Solver</th>
<th>Julia Package</th>
<th>Executable</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/coin-or/Bonmin">Bonmin</a></td>
<td><code>Bonmin_jll.jl</code></td>
<td><code>Bomin_jll.amplexe</code></td>
</tr>
<tr>
<td><a href="https://github.com/coin-or/Couenne">Couenne</a></td>
<td><code>Couenne_jll.jl</code></td>
<td><code>Couenne_jll.amplexe</code></td>
</tr>
<tr>
<td><a href="https://github.com/coin-or/Ipopt">Ipopt</a></td>
<td><code>Ipopt_jll.jl</code></td>
<td><code>Ipopt_jll.amplexe</code></td>
</tr>
<tr>
<td><a href="https://github.com/coin-or/SHOT">SHOT</a></td>
<td><code>SHOT_jll.jl</code></td>
<td><code>SHOT_jll.amplexe</code></td>
</tr>
<tr>
<td><a href="https://github.comjump-dev/KNITRO.jl" rel="nofollow">KNITRO</a></td>
<td><code>KNITRO.jl</code></td>
<td><code>KNITRO.amplexe</code></td>
</tr>
</tbody>
</table>
<h2 dir="auto"><a id="user-content-mathoptinterface-api" class="anchor" aria-hidden="true" href="#mathoptinterface-api"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>MathOptInterface API</h2>
<p dir="auto">The AmplNLWriter optimizer supports the following constraints and attributes.</p>
<p dir="auto">List of supported objective functions:</p>
<ul dir="auto">
<li><a href="@ref"><code>MOI.ObjectiveFunction{MOI.ScalarAffineFunction{Float64}}</code></a></li>
<li><a href="@ref"><code>MOI.ObjectiveFunction{MOI.ScalarQuadraticFunction{Float64}}</code></a></li>
<li><a href="@ref"><code>MOI.ObjectiveFunction{MOI.VariableIndex}</code></a></li>
</ul>
<p dir="auto">List of supported variable types:</p>
<ul dir="auto">
<li><a href="@ref"><code>MOI.Reals</code></a></li>
</ul>
<p dir="auto">List of supported constraint types:</p>
<ul dir="auto">
<li><a href="@ref"><code>MOI.ScalarAffineFunction{Float64}</code></a> in <a href="@ref"><code>MOI.EqualTo{Float64}</code></a></li>
<li><a href="@ref"><code>MOI.ScalarAffineFunction{Float64}</code></a> in <a href="@ref"><code>MOI.GreaterThan{Float64}</code></a></li>
<li><a href="@ref"><code>MOI.ScalarAffineFunction{Float64}</code></a> in <a href="@ref"><code>MOI.Interval{Float64}</code></a></li>
<li><a href="@ref"><code>MOI.ScalarAffineFunction{Float64}</code></a> in <a href="@ref"><code>MOI.LessThan{Float64}</code></a></li>
<li><a href="@ref"><code>MOI.ScalarQuadraticFunction{Float64}</code></a> in <a href="@ref"><code>MOI.EqualTo{Float64}</code></a></li>
<li><a href="@ref"><code>MOI.ScalarQuadraticFunction{Float64}</code></a> in <a href="@ref"><code>MOI.GreaterThan{Float64}</code></a></li>
<li><a href="@ref"><code>MOI.ScalarQuadraticFunction{Float64}</code></a> in <a href="@ref"><code>MOI.Interval{Float64}</code></a></li>
<li><a href="@ref"><code>MOI.ScalarQuadraticFunction{Float64}</code></a> in <a href="@ref"><code>MOI.LessThan{Float64}</code></a></li>
<li><a href="@ref"><code>MOI.VariableIndex</code></a> in <a href="@ref"><code>MOI.EqualTo{Float64}</code></a></li>
<li><a href="@ref"><code>MOI.VariableIndex</code></a> in <a href="@ref"><code>MOI.GreaterThan{Float64}</code></a></li>
<li><a href="@ref"><code>MOI.VariableIndex</code></a> in <a href="@ref"><code>MOI.Integer</code></a></li>
<li><a href="@ref"><code>MOI.VariableIndex</code></a> in <a href="@ref"><code>MOI.Interval{Float64}</code></a></li>
<li><a href="@ref"><code>MOI.VariableIndex</code></a> in <a href="@ref"><code>MOI.LessThan{Float64}</code></a></li>
<li><a href="@ref"><code>MOI.VariableIndex</code></a> in <a href="@ref"><code>MOI.ZeroOne</code></a></li>
</ul>
<p dir="auto">List of supported model attributes:</p>
<ul dir="auto">
<li><a href="@ref"><code>MOI.NLPBlock()</code></a></li>
<li><a href="@ref"><code>MOI.Name()</code></a></li>
<li><a href="@ref"><code>MOI.ObjectiveSense()</code></a></li>
</ul>
<p dir="auto">Note that some solver executables may not support the full list of constraint
types. For example, <code>Ipopt_jll</code> does not support <code>MOI.Integer</code> or <code>MOI.ZeroOne</code>
constraints.</p>
<h2 dir="auto"><a id="user-content-options" class="anchor" aria-hidden="true" href="#options"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Options</h2>
<p dir="auto">A list of available options for each solver can be found here:</p>
<ul dir="auto">
<li><a href="https://github.com/coin-or/Bonmin/blob/master/test/bonmin.opt">Bonmin</a> (plus Ipopt options)</li>
<li><a href="https://github.com/coin-or/Couenne/blob/master/src/couenne.opt">Couenne</a> (plus Ipopt and Bonmin options)</li>
<li><a href="https://coin-or.github.io/Ipopt/OPTIONS.html" rel="nofollow">Ipopt</a></li>
<li><a href="https://shotsolver.dev/shot/using-shot/solver-options" rel="nofollow">SHOT</a></li>
</ul>
<p dir="auto">Set an option using <a href="@ref"><code>set_attribute</code></a>. For example, to set the
<code>"bonmin.nlp_log_level"</code> option to 0 in Bonmin, use:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using JuMP
import AmplNLWriter
import Bonmin_jll
model = Model(() -&gt; AmplNLWriter.Optimizer(Bonmin_jll.amplexe))
set_attribute(model, &quot;bonmin.nlp_log_level&quot;, 0)"><pre><span class="pl-k">using</span> JuMP
<span class="pl-k">import</span> AmplNLWriter
<span class="pl-k">import</span> Bonmin_jll
model <span class="pl-k">=</span> <span class="pl-c1">Model</span>(() <span class="pl-k">-&gt;</span> AmplNLWriter<span class="pl-k">.</span><span class="pl-c1">Optimizer</span>(Bonmin_jll<span class="pl-k">.</span>amplexe))
<span class="pl-c1">set_attribute</span>(model, <span class="pl-s"><span class="pl-pds">"</span>bonmin.nlp_log_level<span class="pl-pds">"</span></span>, <span class="pl-c1">0</span>)</pre></div>
<h3 dir="auto"><a id="user-content-opt-files" class="anchor" aria-hidden="true" href="#opt-files"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>opt files</h3>
<p dir="auto">Some options need to be specified via an <code>.opt</code> file.</p>
<p dir="auto">This file must be located in the current working directory whenever the model is
solved.</p>
<p dir="auto">The <code>.opt</code> file must be named after the name of the solver, for example,
<code>bonmin.opt</code>, and each line must contain an option name and the desired value,
separated by a space.</p>
<p dir="auto">For example, to set the absolute and relative tolerances in Couenne to <code>1</code>
and <code>0.05</code> respectively, the <code>couenne.opt</code> file should contain:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="allowable_gap 1
allowable_fraction_gap 0.05"><pre lang="raw" class="notranslate"><code>allowable_gap 1
allowable_fraction_gap 0.05
</code></pre></div>
</article></div>