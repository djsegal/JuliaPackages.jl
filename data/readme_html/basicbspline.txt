<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-basicbsplinejl" class="anchor" aria-hidden="true" href="#basicbsplinejl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>BasicBSpline.jl</h1>
<p dir="auto">Basic (mathematical) operations for B-spline functions and related things with Julia.</p>
<p dir="auto"><a href="https://hyrodium.github.io/BasicBSpline.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://hyrodium.github.io/BasicBSpline.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/hyrodium/BasicBSpline.jl/actions"><img src="https://github.com/hyrodium/BasicBSpline.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/hyrodium/BasicBSpline.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/9036e134c74fd253cc467dadc811b7919a9a39e676d15a1207c78ea5fce9fe62/68747470733a2f2f636f6465636f762e696f2f67682f6879726f6469756d2f42617369634253706c696e652e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/hyrodium/BasicBSpline.jl/branch/main/graph/badge.svg" style="max-width: 100%;"></a>
<a href="https://github.com/JuliaTesting/Aqua.jl"><img src="https://raw.githubusercontent.com/JuliaTesting/Aqua.jl/master/badge.svg" alt="Aqua QA" style="max-width: 100%;"></a>
<a href="https://zenodo.org/badge/latestdoi/258791290" rel="nofollow"><img src="https://camo.githubusercontent.com/5a3bfe075e081f0228357406af0080811f3eebc91ae30c4ddb79c42c8b010bf3/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f3235383739313239302e737667" alt="DOI" data-canonical-src="https://zenodo.org/badge/258791290.svg" style="max-width: 100%;"></a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="docs/src/img/BasicBSplineLogo.png"><img src="docs/src/img/BasicBSplineLogo.png" alt="" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-summary" class="anchor" aria-hidden="true" href="#summary"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Summary</h2>
<p dir="auto">This package provides basic mathematical operations for <a href="https://en.wikipedia.org/wiki/B-spline" rel="nofollow">B-spline</a>.</p>
<ul dir="auto">
<li>B-spline basis function</li>
<li>Some operations for knot vector</li>
<li>Some operations for B-spline space (piecewise polynomial space)</li>
<li>B-spline manifold (includes curve, surface and solid)</li>
<li>Refinement algorithm for B-spline manifold</li>
<li>Fitting control points for a given function</li>
</ul>
<h2 dir="auto"><a id="user-content-comparison-to-other-julia-packages-for-b-spline" class="anchor" aria-hidden="true" href="#comparison-to-other-julia-packages-for-b-spline"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Comparison to other Julia packages for B-spline</h2>
<p dir="auto">Note that the following comparison might not be correct.
If you have any thoughts, please help with <a href="https://github.com/hyrodium/BasicBSpline.jl/issues/161" data-hovercard-type="issue" data-hovercard-url="/hyrodium/BasicBSpline.jl/issues/161/hovercard">issue#161</a>.</p>
<ul dir="auto">
<li><a href="https://github.com/JuliaMath/Interpolations.jl">Interpolations.jl</a>
<ul dir="auto">
<li>
<blockquote>
<p dir="auto">Currently this package's support is best for B-splines and also supports irregular grids.</p>
</blockquote>
</li>
<li>But seems like no method for B-spline manifold.</li>
</ul>
</li>
<li><a href="https://github.com/floswald/ApproXD.jl">ApproXD.jl</a>
<ul dir="auto">
<li>Its functions are similar to Interpolations.jl.</li>
</ul>
</li>
<li><a href="https://github.com/kbarbary/Dierckx.jl">Dierckx.jl</a>
<ul dir="auto">
<li>Wrapper for the dierckx Fortran library.</li>
<li>Only 1-d or 2-d B-spline manifold are supported.</li>
<li>5 or less degree of polynomial are supported.</li>
</ul>
</li>
<li><strong><a href="https://github.com/hyrodium/BasicBSpline.jl">BasicBSpline.jl</a> (this package)</strong>
<ul dir="auto">
<li>Any degrees of polynomials are supported.</li>
<li>Refinement algorithm for B-spline manifold.</li>
<li>Fitting algorithm by least squares.</li>
<li>High performance on speed.</li>
<li>Mathematically oriented.</li>
</ul>
</li>
</ul>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">Install this package</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="]add BasicBSpline"><pre>]add BasicBSpline</pre></div>
<p dir="auto">To export graphics, use <a href="https://github.com/hyrodium/BasicBSplineExporter.jl">BasicBSplineExporter.jl</a>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="]add https://github.com/hyrodium/BasicBSplineExporter.jl"><pre>]add https<span class="pl-k">:</span><span class="pl-k">//</span>github<span class="pl-k">.</span>com<span class="pl-k">/</span>hyrodium<span class="pl-k">/</span>BasicBSplineExporter<span class="pl-k">.</span>jl</pre></div>
<h2 dir="auto"><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example</h2>
<h3 dir="auto"><a id="user-content-b-spline-function" class="anchor" aria-hidden="true" href="#b-spline-function"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>B-spline function</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using BasicBSpline
using Plots

k = KnotVector([0.0, 1.5, 2.5, 5.5, 8.0, 9.0, 9.5, 10.0])
P0 = BSplineSpace{0}(k) # 0th degree piecewise polynomial space
P1 = BSplineSpace{1}(k) # 1st degree piecewise polynomial space
P2 = BSplineSpace{2}(k) # 2nd degree piecewise polynomial space
P3 = BSplineSpace{3}(k) # 3rd degree piecewise polynomial space
plot(
    plot([t-&gt;bsplinebasis(P0,i,t) for i in 1:dim(P0)], 0, 10, ylims=(0,1), legend=false),
    plot([t-&gt;bsplinebasis(P1,i,t) for i in 1:dim(P1)], 0, 10, ylims=(0,1), legend=false),
    plot([t-&gt;bsplinebasis(P2,i,t) for i in 1:dim(P2)], 0, 10, ylims=(0,1), legend=false),
    plot([t-&gt;bsplinebasis(P3,i,t) for i in 1:dim(P3)], 0, 10, ylims=(0,1), legend=false),
    layout=(2,2),
)"><pre><span class="pl-k">using</span> BasicBSpline
<span class="pl-k">using</span> Plots

k <span class="pl-k">=</span> <span class="pl-c1">KnotVector</span>([<span class="pl-c1">0.0</span>, <span class="pl-c1">1.5</span>, <span class="pl-c1">2.5</span>, <span class="pl-c1">5.5</span>, <span class="pl-c1">8.0</span>, <span class="pl-c1">9.0</span>, <span class="pl-c1">9.5</span>, <span class="pl-c1">10.0</span>])
P0 <span class="pl-k">=</span> <span class="pl-c1">BSplineSpace</span><span class="pl-c1">{0}</span>(k) <span class="pl-c"><span class="pl-c">#</span> 0th degree piecewise polynomial space</span>
P1 <span class="pl-k">=</span> <span class="pl-c1">BSplineSpace</span><span class="pl-c1">{1}</span>(k) <span class="pl-c"><span class="pl-c">#</span> 1st degree piecewise polynomial space</span>
P2 <span class="pl-k">=</span> <span class="pl-c1">BSplineSpace</span><span class="pl-c1">{2}</span>(k) <span class="pl-c"><span class="pl-c">#</span> 2nd degree piecewise polynomial space</span>
P3 <span class="pl-k">=</span> <span class="pl-c1">BSplineSpace</span><span class="pl-c1">{3}</span>(k) <span class="pl-c"><span class="pl-c">#</span> 3rd degree piecewise polynomial space</span>
<span class="pl-c1">plot</span>(
    <span class="pl-c1">plot</span>([t<span class="pl-k">-&gt;</span><span class="pl-c1">bsplinebasis</span>(P0,i,t) <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">dim</span>(P0)], <span class="pl-c1">0</span>, <span class="pl-c1">10</span>, ylims<span class="pl-k">=</span>(<span class="pl-c1">0</span>,<span class="pl-c1">1</span>), legend<span class="pl-k">=</span><span class="pl-c1">false</span>),
    <span class="pl-c1">plot</span>([t<span class="pl-k">-&gt;</span><span class="pl-c1">bsplinebasis</span>(P1,i,t) <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">dim</span>(P1)], <span class="pl-c1">0</span>, <span class="pl-c1">10</span>, ylims<span class="pl-k">=</span>(<span class="pl-c1">0</span>,<span class="pl-c1">1</span>), legend<span class="pl-k">=</span><span class="pl-c1">false</span>),
    <span class="pl-c1">plot</span>([t<span class="pl-k">-&gt;</span><span class="pl-c1">bsplinebasis</span>(P2,i,t) <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">dim</span>(P2)], <span class="pl-c1">0</span>, <span class="pl-c1">10</span>, ylims<span class="pl-k">=</span>(<span class="pl-c1">0</span>,<span class="pl-c1">1</span>), legend<span class="pl-k">=</span><span class="pl-c1">false</span>),
    <span class="pl-c1">plot</span>([t<span class="pl-k">-&gt;</span><span class="pl-c1">bsplinebasis</span>(P3,i,t) <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">dim</span>(P3)], <span class="pl-c1">0</span>, <span class="pl-c1">10</span>, ylims<span class="pl-k">=</span>(<span class="pl-c1">0</span>,<span class="pl-c1">1</span>), legend<span class="pl-k">=</span><span class="pl-c1">false</span>),
    layout<span class="pl-k">=</span>(<span class="pl-c1">2</span>,<span class="pl-c1">2</span>),
)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="docs/src/img/cover.png"><img src="docs/src/img/cover.png" alt="" style="max-width: 100%;"></a></p>
<p dir="auto">Try <a href="https://www.desmos.com/calculator/ql6jqgdabs" rel="nofollow">an interactive graph with Desmos graphing calculator</a>!</p>
<h3 dir="auto"><a id="user-content-b-spline-manifold" class="anchor" aria-hidden="true" href="#b-spline-manifold"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>B-spline manifold</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using BasicBSpline
using BasicBSplineExporter
using StaticArrays

p = 2 # degree of polynomial
k1 = KnotVector(1:8)     # knot vector
k2 = KnotVector(rand(7))+(p+1)*KnotVector([1])
P1 = BSplineSpace{p}(k1) # B-spline space
P2 = BSplineSpace{p}(k2)
n1 = dim(P1) # dimension of B-spline space
n2 = dim(P2)
a = [SVector(2i-6.5+rand(),1.5j-6.5+rand()) for i in 1:dim(P1), j in 1:dim(P2)] # random generated control points
M = BSplineManifold(a,(P1,P2)) # Define B-spline manifold
save_png(&quot;2dim.png&quot;, M) # save image"><pre><span class="pl-k">using</span> BasicBSpline
<span class="pl-k">using</span> BasicBSplineExporter
<span class="pl-k">using</span> StaticArrays

p <span class="pl-k">=</span> <span class="pl-c1">2</span> <span class="pl-c"><span class="pl-c">#</span> degree of polynomial</span>
k1 <span class="pl-k">=</span> <span class="pl-c1">KnotVector</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">8</span>)     <span class="pl-c"><span class="pl-c">#</span> knot vector</span>
k2 <span class="pl-k">=</span> <span class="pl-c1">KnotVector</span>(<span class="pl-c1">rand</span>(<span class="pl-c1">7</span>))<span class="pl-k">+</span>(p<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">*</span><span class="pl-c1">KnotVector</span>([<span class="pl-c1">1</span>])
P1 <span class="pl-k">=</span> <span class="pl-c1">BSplineSpace</span><span class="pl-c1">{p}</span>(k1) <span class="pl-c"><span class="pl-c">#</span> B-spline space</span>
P2 <span class="pl-k">=</span> <span class="pl-c1">BSplineSpace</span><span class="pl-c1">{p}</span>(k2)
n1 <span class="pl-k">=</span> <span class="pl-c1">dim</span>(P1) <span class="pl-c"><span class="pl-c">#</span> dimension of B-spline space</span>
n2 <span class="pl-k">=</span> <span class="pl-c1">dim</span>(P2)
a <span class="pl-k">=</span> [<span class="pl-c1">SVector</span>(<span class="pl-c1">2</span>i<span class="pl-k">-</span><span class="pl-c1">6.5</span><span class="pl-k">+</span><span class="pl-c1">rand</span>(),<span class="pl-c1">1.5</span>j<span class="pl-k">-</span><span class="pl-c1">6.5</span><span class="pl-k">+</span><span class="pl-c1">rand</span>()) <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">dim</span>(P1), j <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">dim</span>(P2)] <span class="pl-c"><span class="pl-c">#</span> random generated control points</span>
M <span class="pl-k">=</span> <span class="pl-c1">BSplineManifold</span>(a,(P1,P2)) <span class="pl-c"><span class="pl-c">#</span> Define B-spline manifold</span>
<span class="pl-c1">save_png</span>(<span class="pl-s"><span class="pl-pds">"</span>2dim.png<span class="pl-pds">"</span></span>, M) <span class="pl-c"><span class="pl-c">#</span> save image</span></pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="docs/src/img/2dim.png"><img src="docs/src/img/2dim.png" alt="" style="max-width: 100%;"></a></p>
<h3 dir="auto"><a id="user-content-refinement" class="anchor" aria-hidden="true" href="#refinement"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Refinement</h3>
<h4 dir="auto"><a id="user-content-h-refinement" class="anchor" aria-hidden="true" href="#h-refinement"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>h-refinement</h4>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="k₊=(KnotVector([3.3,4.2]),KnotVector([0.3,0.5])) # additional knot vectors
M_h = refinement(M, k₊) # refinement of B-spline manifold
save_png(&quot;2dim_h-refinement.png&quot;, M_h) # save image"><pre>k₊<span class="pl-k">=</span>(<span class="pl-c1">KnotVector</span>([<span class="pl-c1">3.3</span>,<span class="pl-c1">4.2</span>]),<span class="pl-c1">KnotVector</span>([<span class="pl-c1">0.3</span>,<span class="pl-c1">0.5</span>])) <span class="pl-c"><span class="pl-c">#</span> additional knot vectors</span>
M_h <span class="pl-k">=</span> <span class="pl-c1">refinement</span>(M, k₊) <span class="pl-c"><span class="pl-c">#</span> refinement of B-spline manifold</span>
<span class="pl-c1">save_png</span>(<span class="pl-s"><span class="pl-pds">"</span>2dim_h-refinement.png<span class="pl-pds">"</span></span>, M_h) <span class="pl-c"><span class="pl-c">#</span> save image</span></pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="docs/src/img/2dim_h-refinement.png"><img src="docs/src/img/2dim_h-refinement.png" alt="" style="max-width: 100%;"></a></p>
<p dir="auto">Note that this shape and the last shape are equivalent.</p>
<h4 dir="auto"><a id="user-content-p-refinement" class="anchor" aria-hidden="true" href="#p-refinement"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>p-refinement</h4>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="p₊=(Val(1),Val(2)) # additional degrees
M_p = refinement(M, p₊) # refinement of B-spline manifold
save_png(&quot;2dim_p-refinement.png&quot;, M_p) # save image"><pre>p₊<span class="pl-k">=</span>(<span class="pl-c1">Val</span>(<span class="pl-c1">1</span>),<span class="pl-c1">Val</span>(<span class="pl-c1">2</span>)) <span class="pl-c"><span class="pl-c">#</span> additional degrees</span>
M_p <span class="pl-k">=</span> <span class="pl-c1">refinement</span>(M, p₊) <span class="pl-c"><span class="pl-c">#</span> refinement of B-spline manifold</span>
<span class="pl-c1">save_png</span>(<span class="pl-s"><span class="pl-pds">"</span>2dim_p-refinement.png<span class="pl-pds">"</span></span>, M_p) <span class="pl-c"><span class="pl-c">#</span> save image</span></pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="docs/src/img/2dim_p-refinement.png"><img src="docs/src/img/2dim_p-refinement.png" alt="" style="max-width: 100%;"></a></p>
<p dir="auto">Note that this shape and the last shape are equivalent.</p>
<h3 dir="auto"><a id="user-content-fitting-b-spline-manifold" class="anchor" aria-hidden="true" href="#fitting-b-spline-manifold"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Fitting B-spline manifold</h3>
<p dir="auto"><a href="https://www.desmos.com/calculator/2hm3b1fbdf" rel="nofollow">Try on Desmos graphing calculator!</a></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using BasicBSplineFitting

p1 = 2
p2 = 2
k1 = KnotVector(-10:10)+p1*KnotVector([-10,10])
k2 = KnotVector(-10:10)+p2*KnotVector([-10,10])
P1 = BSplineSpace{p1}(k1)
P2 = BSplineSpace{p2}(k2)

f(u1, u2) = SVector(2u1 + sin(u1) + cos(u2) + u2 / 2, 3u2 + sin(u2) + sin(u1) / 2 + u1^2 / 6) / 5

a = fittingcontrolpoints(f, (P1, P2))
M = BSplineManifold(a, (P1, P2))
save_png(&quot;fitting.png&quot;, M, unitlength=50, xlims=(-10,10), ylims=(-10,10))"><pre><span class="pl-k">using</span> BasicBSplineFitting

p1 <span class="pl-k">=</span> <span class="pl-c1">2</span>
p2 <span class="pl-k">=</span> <span class="pl-c1">2</span>
k1 <span class="pl-k">=</span> <span class="pl-c1">KnotVector</span>(<span class="pl-k">-</span><span class="pl-c1">10</span><span class="pl-k">:</span><span class="pl-c1">10</span>)<span class="pl-k">+</span>p1<span class="pl-k">*</span><span class="pl-c1">KnotVector</span>([<span class="pl-k">-</span><span class="pl-c1">10</span>,<span class="pl-c1">10</span>])
k2 <span class="pl-k">=</span> <span class="pl-c1">KnotVector</span>(<span class="pl-k">-</span><span class="pl-c1">10</span><span class="pl-k">:</span><span class="pl-c1">10</span>)<span class="pl-k">+</span>p2<span class="pl-k">*</span><span class="pl-c1">KnotVector</span>([<span class="pl-k">-</span><span class="pl-c1">10</span>,<span class="pl-c1">10</span>])
P1 <span class="pl-k">=</span> <span class="pl-c1">BSplineSpace</span><span class="pl-c1">{p1}</span>(k1)
P2 <span class="pl-k">=</span> <span class="pl-c1">BSplineSpace</span><span class="pl-c1">{p2}</span>(k2)

<span class="pl-en">f</span>(u1, u2) <span class="pl-k">=</span> <span class="pl-c1">SVector</span>(<span class="pl-c1">2</span>u1 <span class="pl-k">+</span> <span class="pl-c1">sin</span>(u1) <span class="pl-k">+</span> <span class="pl-c1">cos</span>(u2) <span class="pl-k">+</span> u2 <span class="pl-k">/</span> <span class="pl-c1">2</span>, <span class="pl-c1">3</span>u2 <span class="pl-k">+</span> <span class="pl-c1">sin</span>(u2) <span class="pl-k">+</span> <span class="pl-c1">sin</span>(u1) <span class="pl-k">/</span> <span class="pl-c1">2</span> <span class="pl-k">+</span> u1<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">/</span> <span class="pl-c1">6</span>) <span class="pl-k">/</span> <span class="pl-c1">5</span>

a <span class="pl-k">=</span> <span class="pl-c1">fittingcontrolpoints</span>(f, (P1, P2))
M <span class="pl-k">=</span> <span class="pl-c1">BSplineManifold</span>(a, (P1, P2))
<span class="pl-c1">save_png</span>(<span class="pl-s"><span class="pl-pds">"</span>fitting.png<span class="pl-pds">"</span></span>, M, unitlength<span class="pl-k">=</span><span class="pl-c1">50</span>, xlims<span class="pl-k">=</span>(<span class="pl-k">-</span><span class="pl-c1">10</span>,<span class="pl-c1">10</span>), ylims<span class="pl-k">=</span>(<span class="pl-k">-</span><span class="pl-c1">10</span>,<span class="pl-c1">10</span>))</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="docs/src/img/fitting_desmos.png"><img src="docs/src/img/fitting_desmos.png" alt="" style="max-width: 100%;"></a>
<a target="_blank" rel="noopener noreferrer" href="docs/src/img/fitting.png"><img src="docs/src/img/fitting.png" alt="" style="max-width: 100%;"></a></p>
<p dir="auto">If the knot vector span is too coarse, the approximation will be coarse.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="p1 = 2
p2 = 2
k1 = KnotVector(-10:5:10)+p1*KnotVector([-10,10])
k2 = KnotVector(-10:5:10)+p2*KnotVector([-10,10])
P1 = BSplineSpace{p1}(k1)
P2 = BSplineSpace{p2}(k2)

f(u1, u2) = SVector(2u1 + sin(u1) + cos(u2) + u2 / 2, 3u2 + sin(u2) + sin(u1) / 2 + u1^2 / 6) / 5

a = fittingcontrolpoints(f, (P1, P2))
M = BSplineManifold(a, (P1, P2))
save_png(&quot;fitting_coarse.png&quot;, M, unitlength=50, xlims=(-10,10), ylims=(-10,10))"><pre>p1 <span class="pl-k">=</span> <span class="pl-c1">2</span>
p2 <span class="pl-k">=</span> <span class="pl-c1">2</span>
k1 <span class="pl-k">=</span> <span class="pl-c1">KnotVector</span>(<span class="pl-k">-</span><span class="pl-c1">10</span><span class="pl-k">:</span><span class="pl-c1">5</span><span class="pl-k">:</span><span class="pl-c1">10</span>)<span class="pl-k">+</span>p1<span class="pl-k">*</span><span class="pl-c1">KnotVector</span>([<span class="pl-k">-</span><span class="pl-c1">10</span>,<span class="pl-c1">10</span>])
k2 <span class="pl-k">=</span> <span class="pl-c1">KnotVector</span>(<span class="pl-k">-</span><span class="pl-c1">10</span><span class="pl-k">:</span><span class="pl-c1">5</span><span class="pl-k">:</span><span class="pl-c1">10</span>)<span class="pl-k">+</span>p2<span class="pl-k">*</span><span class="pl-c1">KnotVector</span>([<span class="pl-k">-</span><span class="pl-c1">10</span>,<span class="pl-c1">10</span>])
P1 <span class="pl-k">=</span> <span class="pl-c1">BSplineSpace</span><span class="pl-c1">{p1}</span>(k1)
P2 <span class="pl-k">=</span> <span class="pl-c1">BSplineSpace</span><span class="pl-c1">{p2}</span>(k2)

<span class="pl-en">f</span>(u1, u2) <span class="pl-k">=</span> <span class="pl-c1">SVector</span>(<span class="pl-c1">2</span>u1 <span class="pl-k">+</span> <span class="pl-c1">sin</span>(u1) <span class="pl-k">+</span> <span class="pl-c1">cos</span>(u2) <span class="pl-k">+</span> u2 <span class="pl-k">/</span> <span class="pl-c1">2</span>, <span class="pl-c1">3</span>u2 <span class="pl-k">+</span> <span class="pl-c1">sin</span>(u2) <span class="pl-k">+</span> <span class="pl-c1">sin</span>(u1) <span class="pl-k">/</span> <span class="pl-c1">2</span> <span class="pl-k">+</span> u1<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">/</span> <span class="pl-c1">6</span>) <span class="pl-k">/</span> <span class="pl-c1">5</span>

a <span class="pl-k">=</span> <span class="pl-c1">fittingcontrolpoints</span>(f, (P1, P2))
M <span class="pl-k">=</span> <span class="pl-c1">BSplineManifold</span>(a, (P1, P2))
<span class="pl-c1">save_png</span>(<span class="pl-s"><span class="pl-pds">"</span>fitting_coarse.png<span class="pl-pds">"</span></span>, M, unitlength<span class="pl-k">=</span><span class="pl-c1">50</span>, xlims<span class="pl-k">=</span>(<span class="pl-k">-</span><span class="pl-c1">10</span>,<span class="pl-c1">10</span>), ylims<span class="pl-k">=</span>(<span class="pl-k">-</span><span class="pl-c1">10</span>,<span class="pl-c1">10</span>))</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="docs/src/img/fitting_coarse.png"><img src="docs/src/img/fitting_coarse.png" alt="" style="max-width: 100%;"></a></p>
<h3 dir="auto"><a id="user-content-draw-smooth-vector-graphics" class="anchor" aria-hidden="true" href="#draw-smooth-vector-graphics"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Draw smooth vector graphics</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="p = 3
k = KnotVector(range(-2π,2π,length=8))+p*KnotVector(-2π,2π)
P = BSplineSpace{p}(k)

f(u) = SVector(u,sin(u))

a = fittingcontrolpoints(f, P)
M = BSplineManifold(a, P)
save_svg(&quot;sine-curve.svg&quot;, M, unitlength=50, xlims=(-2,2), ylims=(-8,8))
save_svg(&quot;sine-curve_no-points.svg&quot;, M, unitlength=50, xlims=(-2,2), ylims=(-8,8), points=false)"><pre>p <span class="pl-k">=</span> <span class="pl-c1">3</span>
k <span class="pl-k">=</span> <span class="pl-c1">KnotVector</span>(<span class="pl-c1">range</span>(<span class="pl-k">-</span><span class="pl-c1">2</span>π,<span class="pl-c1">2</span>π,length<span class="pl-k">=</span><span class="pl-c1">8</span>))<span class="pl-k">+</span>p<span class="pl-k">*</span><span class="pl-c1">KnotVector</span>(<span class="pl-k">-</span><span class="pl-c1">2</span>π,<span class="pl-c1">2</span>π)
P <span class="pl-k">=</span> <span class="pl-c1">BSplineSpace</span><span class="pl-c1">{p}</span>(k)

<span class="pl-en">f</span>(u) <span class="pl-k">=</span> <span class="pl-c1">SVector</span>(u,<span class="pl-c1">sin</span>(u))

a <span class="pl-k">=</span> <span class="pl-c1">fittingcontrolpoints</span>(f, P)
M <span class="pl-k">=</span> <span class="pl-c1">BSplineManifold</span>(a, P)
<span class="pl-c1">save_svg</span>(<span class="pl-s"><span class="pl-pds">"</span>sine-curve.svg<span class="pl-pds">"</span></span>, M, unitlength<span class="pl-k">=</span><span class="pl-c1">50</span>, xlims<span class="pl-k">=</span>(<span class="pl-k">-</span><span class="pl-c1">2</span>,<span class="pl-c1">2</span>), ylims<span class="pl-k">=</span>(<span class="pl-k">-</span><span class="pl-c1">8</span>,<span class="pl-c1">8</span>))
<span class="pl-c1">save_svg</span>(<span class="pl-s"><span class="pl-pds">"</span>sine-curve_no-points.svg<span class="pl-pds">"</span></span>, M, unitlength<span class="pl-k">=</span><span class="pl-c1">50</span>, xlims<span class="pl-k">=</span>(<span class="pl-k">-</span><span class="pl-c1">2</span>,<span class="pl-c1">2</span>), ylims<span class="pl-k">=</span>(<span class="pl-k">-</span><span class="pl-c1">8</span>,<span class="pl-c1">8</span>), points<span class="pl-k">=</span><span class="pl-c1">false</span>)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="docs/src/img/sine-curve.svg"><img src="docs/src/img/sine-curve.svg" alt="" style="max-width: 100%;"></a>
<a target="_blank" rel="noopener noreferrer" href="docs/src/img/sine-curve_no-points.svg"><img src="docs/src/img/sine-curve_no-points.svg" alt="" style="max-width: 100%;"></a></p>
<p dir="auto">This is useful when you edit graphs (or curves) with your favorite vector graphics editor.</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="docs/src/img/inkscape.png"><img src="docs/src/img/inkscape.png" alt="" style="max-width: 100%;"></a></p>
<p dir="auto">See <a href="https://forem.julialang.org/hyrodium/plotting-smooth-graphs-with-julia-6mj" rel="nofollow">Plotting smooth graphs with Julia</a> for more tutorials.</p>
</article></div>