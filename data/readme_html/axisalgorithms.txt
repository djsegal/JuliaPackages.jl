<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-axisalgorithms" class="anchor" aria-hidden="true" href="#axisalgorithms"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>AxisAlgorithms</h1>
<p><a href="https://travis-ci.org/timholy/AxisAlgorithms.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/bb035896006d498e29e10667b5b908c8c04402ff/68747470733a2f2f7472617669732d63692e6f72672f74696d686f6c792f41786973416c676f726974686d732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/timholy/AxisAlgorithms.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/timholy/AxisAlgorithms.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/abafca40805c1d428832f060abaea5ade2392194/68747470733a2f2f636f6465636f762e696f2f67682f74696d686f6c792f41786973416c676f726974686d732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/timholy/AxisAlgorithms.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p>AxisAlgorithms is a collection of filtering and linear algebra algorithms for multidimensional arrays.
For algorithms that would typically apply along the columns of a matrix, you can instead pick an arbitrary axis (dimension).</p>
<p>Note that all functions come in two variants, a <code>!</code> version that uses pre-allocated output (where the output is
the first argument) and a version that allocates the output. Below, the <code>!</code> versions will be described.</p>
<h3><a id="user-content-tridiagonal-and-woodbury-inversion" class="anchor" aria-hidden="true" href="#tridiagonal-and-woodbury-inversion"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Tridiagonal and Woodbury inversion</h3>
<p>If <code>F</code> is an LU-factorization of a tridiagonal matrix, or a <a href="WoodburyMatrices.jl">Woodbury matrix</a> created from such a factorization,
then <code>A_ldiv_B_md!(dest, F, src, axis)</code> will solve the equation <code>F\b</code> for 1-dimensional slices
along dimension <code>axis</code>.
Unlike many linear algebra algorithms, this one is safe to use as a mutating algorithm with <code>dest=src</code>.
The tridiagonal case does not create temporaries, and it has excellent cache behavior.</p>
<h3><a id="user-content-matrix-multiplication" class="anchor" aria-hidden="true" href="#matrix-multiplication"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Matrix multiplication</h3>
<p>Multiply a matrix <code>M</code> to all 1-dimensional slices along a particular dimension.
Here you have two algorithms to choose from:</p>
<ul>
<li><code>A_mul_B_perm!(dest, M, src, axis)</code> uses <code>permutedims</code> and standard BLAS-accelerated routines; it allocates temporary storage.</li>
<li><code>A_mul_B_md!(dest, M, src, axis)</code> is a non-allocating naive routine. This also has optimized implementations for sparse <code>M</code> and 2x2 matrices.</li>
</ul>
<p>In general it is very difficult to get efficient cache behavior for multidimensional multiplication, and often using <code>A_mul_B_perm!</code> is the best strategy.
However, there are cases where <code>A_mul_B_md!</code> is faster.
It's a good idea to time both and see which works better for your case.</p>
</article></div>