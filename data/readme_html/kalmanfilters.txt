<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p dir="auto"><a href="https://github.com/JuliaGNSS/KalmanFilters.jl/actions"><img src="https://github.com/JuliaGNSS/KalmanFilters.jl/actions/workflows/ci.yml/badge.svg" alt="Tests" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/JuliaGNSS/KalmanFilters.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/643167578a01b65ce958d44fffa2d5a7848207353df96d007f25af7c84659218/68747470733a2f2f636f6465636f762e696f2f67682f4a756c6961474e53532f4b616c6d616e46696c746572732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e7376673f746f6b656e3d5150524a334d36433938" alt="codecov" data-canonical-src="https://codecov.io/gh/JuliaGNSS/KalmanFilters.jl/branch/master/graph/badge.svg?token=QPRJ3M6C98" style="max-width: 100%;"></a></p>
<h1 dir="auto"><a id="user-content-kalmanfiltersjl" class="anchor" aria-hidden="true" href="#kalmanfiltersjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>KalmanFilters.jl</h1>
<p dir="auto">Provides multiple Kalman Filters</p>
<ul dir="auto">
<li>(Square Root) Kalman Filter ((SR-)KF)</li>
<li>(Square Root) Unscented Kalman Filter ((SR-)UKF)</li>
<li>(Square Root) Augment Unscented Kalman Filter ((SR-)AUKF)</li>
</ul>
<p dir="auto">All filter implementation support the real and complexed valued inputs.</p>
<h2 dir="auto"><a id="user-content-getting-started" class="anchor" aria-hidden="true" href="#getting-started"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Getting started</h2>
<p dir="auto">Install:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; ]
pkg&gt; add KalmanFilters"><pre>julia<span class="pl-k">&gt;</span> ]
pkg<span class="pl-k">&gt;</span> add KalmanFilters</pre></div>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<p dir="auto">KalmanFilters.jl has very flexible structure. For example you are free to choose the type of the Kalman-Filter for the time update and measurement update independently. If you have a linear time update, you may choose the (linear) Kalman-Filter and if the measurement update is non-linear, you can choose the Unscented-Kalman-Filter for that or vice versa.
The distinction between the different Kalman-Filters is made by the input types:
If the model is defined by a matrix, the linear Kalman-Filter will be used. If the model is defined by a function or a <a href="https://docs.julialang.org/en/v1/manual/methods/#Function-like-objects" rel="nofollow">functor</a> (in case you need to pass additional information), the implementation will assume, that the model is non-linear, and will, therefore, use the Unscented-Kalman-Filter.
If you’d like to augment the noise covariance, you will have to wrap the noise covariance by the <code>Augment</code> type.</p>
<h3 dir="auto"><a id="user-content-linear-case" class="anchor" aria-hidden="true" href="#linear-case"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Linear case</h3>
<p dir="auto">The linear Kalman Filter will be applied if you pass the process model <code>F</code> or the measurement model <code>H</code> as matrices to the functions <code>time_update</code> or <code>measurement_update</code> respectively.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using KalmanFilters
Δt = 0.1
σ_acc_noise = 0.02
σ_meas_noise = 1.0
# Process model
F = [1 Δt Δt^2/2; 0 1 Δt; 0 0 1]
# Process noise covariance
Q = [Δt^2/2; Δt; 1] * [Δt^2/2 Δt 1] * σ_acc_noise^2
# Measurement model
H = [1, 0, 0]'
# Measurement noise covariance
R = σ_meas_noise^2
# Initial state and covariances
x_init = [0.0, 0.0, 0.0]
P_init = [2.5 0.25 0.1; 0.25 2.5 0.2; 0.1 0.2 2.5]
# Take first measurement
measurement = 2.0 + randn()
mu = measurement_update(x_init, P_init, measurement, H, R)
for i = 1:100
    measurement = 2.0 + randn()
    tu = time_update(get_state(mu), get_covariance(mu), F, Q)
    mu = measurement_update(get_state(tu), get_covariance(tu), measurement, H, R)
end"><pre><span class="pl-k">using</span> KalmanFilters
Δt <span class="pl-k">=</span> <span class="pl-c1">0.1</span>
σ_acc_noise <span class="pl-k">=</span> <span class="pl-c1">0.02</span>
σ_meas_noise <span class="pl-k">=</span> <span class="pl-c1">1.0</span>
<span class="pl-c"><span class="pl-c">#</span> Process model</span>
F <span class="pl-k">=</span> [<span class="pl-c1">1</span> Δt Δt<span class="pl-k">^</span><span class="pl-c1">2</span><span class="pl-k">/</span><span class="pl-c1">2</span>; <span class="pl-c1">0</span> <span class="pl-c1">1</span> Δt; <span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">1</span>]
<span class="pl-c"><span class="pl-c">#</span> Process noise covariance</span>
Q <span class="pl-k">=</span> [Δt<span class="pl-k">^</span><span class="pl-c1">2</span><span class="pl-k">/</span><span class="pl-c1">2</span>; Δt; <span class="pl-c1">1</span>] <span class="pl-k">*</span> [Δt<span class="pl-k">^</span><span class="pl-c1">2</span><span class="pl-k">/</span><span class="pl-c1">2</span> Δt <span class="pl-c1">1</span>] <span class="pl-k">*</span> σ_acc_noise<span class="pl-k">^</span><span class="pl-c1">2</span>
<span class="pl-c"><span class="pl-c">#</span> Measurement model</span>
H <span class="pl-k">=</span> [<span class="pl-c1">1</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>]<span class="pl-k">'</span>
<span class="pl-c"><span class="pl-c">#</span> Measurement noise covariance</span>
R <span class="pl-k">=</span> σ_meas_noise<span class="pl-k">^</span><span class="pl-c1">2</span>
<span class="pl-c"><span class="pl-c">#</span> Initial state and covariances</span>
x_init <span class="pl-k">=</span> [<span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>]
P_init <span class="pl-k">=</span> [<span class="pl-c1">2.5</span> <span class="pl-c1">0.25</span> <span class="pl-c1">0.1</span>; <span class="pl-c1">0.25</span> <span class="pl-c1">2.5</span> <span class="pl-c1">0.2</span>; <span class="pl-c1">0.1</span> <span class="pl-c1">0.2</span> <span class="pl-c1">2.5</span>]
<span class="pl-c"><span class="pl-c">#</span> Take first measurement</span>
measurement <span class="pl-k">=</span> <span class="pl-c1">2.0</span> <span class="pl-k">+</span> <span class="pl-c1">randn</span>()
mu <span class="pl-k">=</span> <span class="pl-c1">measurement_update</span>(x_init, P_init, measurement, H, R)
<span class="pl-k">for</span> i <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">100</span>
    measurement <span class="pl-k">=</span> <span class="pl-c1">2.0</span> <span class="pl-k">+</span> <span class="pl-c1">randn</span>()
    tu <span class="pl-k">=</span> <span class="pl-c1">time_update</span>(<span class="pl-c1">get_state</span>(mu), <span class="pl-c1">get_covariance</span>(mu), F, Q)
    mu <span class="pl-k">=</span> <span class="pl-c1">measurement_update</span>(<span class="pl-c1">get_state</span>(tu), <span class="pl-c1">get_covariance</span>(tu), measurement, H, R)
<span class="pl-k">end</span></pre></div>
<h3 dir="auto"><a id="user-content-non-linear-case" class="anchor" aria-hidden="true" href="#non-linear-case"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Non-linear case</h3>
<p dir="auto">If you define the process model <code>F</code> or the measurement model <code>H</code> as a function (or a <a href="https://docs.julialang.org/en/v1/manual/methods/#Function-like-objects" rel="nofollow">functor</a>), the Unscented-Kalman-Filter will be used.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="F(x) = x .* [1., 2.]
tu = time_update(x, P, F, Q)"><pre><span class="pl-en">F</span>(x) <span class="pl-k">=</span> x <span class="pl-k">.*</span> [<span class="pl-c1">1.</span>, <span class="pl-c1">2.</span>]
tu <span class="pl-k">=</span> <span class="pl-c1">time_update</span>(x, P, F, Q)</pre></div>
<h3 dir="auto"><a id="user-content-augmentation" class="anchor" aria-hidden="true" href="#augmentation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Augmentation</h3>
<p dir="auto">KalmanFilters also allows to augment the noise-covariances:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="F(x) = x .* [1., 2.]
F(x, noise) = x .* [1., 2.] .+ noise
tu = time_update(x, P, F, Augment(Q))
H(x) = x .* [1., 1.]
H(x, noise) = x .* [1., 1.] .+ noise
mu = measurement_update(x, P, measurement, H, Augment(R))"><pre><span class="pl-en">F</span>(x) <span class="pl-k">=</span> x <span class="pl-k">.*</span> [<span class="pl-c1">1.</span>, <span class="pl-c1">2.</span>]
<span class="pl-en">F</span>(x, noise) <span class="pl-k">=</span> x <span class="pl-k">.*</span> [<span class="pl-c1">1.</span>, <span class="pl-c1">2.</span>] <span class="pl-k">.+</span> noise
tu <span class="pl-k">=</span> <span class="pl-c1">time_update</span>(x, P, F, <span class="pl-c1">Augment</span>(Q))
<span class="pl-en">H</span>(x) <span class="pl-k">=</span> x <span class="pl-k">.*</span> [<span class="pl-c1">1.</span>, <span class="pl-c1">1.</span>]
<span class="pl-en">H</span>(x, noise) <span class="pl-k">=</span> x <span class="pl-k">.*</span> [<span class="pl-c1">1.</span>, <span class="pl-c1">1.</span>] <span class="pl-k">.+</span> noise
mu <span class="pl-k">=</span> <span class="pl-c1">measurement_update</span>(x, P, measurement, H, <span class="pl-c1">Augment</span>(R))</pre></div>
<h3 dir="auto"><a id="user-content-square-root-kalman-filter" class="anchor" aria-hidden="true" href="#square-root-kalman-filter"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Square Root Kalman filter</h3>
<p dir="auto">If you'd like to use the square root variant of the Kalman filter, you will have to pass the cholesky decomposition of the corresponding covariance, for e.g.:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using LinearAlgebra
P_init_chol = cholesky(P_init)
Q_chol = cholesky(Q)
R_chol = cholesky(R)
tu = time_update(x_init, P_init_chol, F, Q_chol)
mu = measurement_update(get_state(tu), get_sqrt_covariance(tu), measurement, H, R_chol)"><pre><span class="pl-k">using</span> LinearAlgebra
P_init_chol <span class="pl-k">=</span> <span class="pl-c1">cholesky</span>(P_init)
Q_chol <span class="pl-k">=</span> <span class="pl-c1">cholesky</span>(Q)
R_chol <span class="pl-k">=</span> <span class="pl-c1">cholesky</span>(R)
tu <span class="pl-k">=</span> <span class="pl-c1">time_update</span>(x_init, P_init_chol, F, Q_chol)
mu <span class="pl-k">=</span> <span class="pl-c1">measurement_update</span>(<span class="pl-c1">get_state</span>(tu), <span class="pl-c1">get_sqrt_covariance</span>(tu), measurement, H, R_chol)</pre></div>
<h3 dir="auto"><a id="user-content-considered-states" class="anchor" aria-hidden="true" href="#considered-states"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Considered states</h3>
<p dir="auto">All variants support to <em>consider</em> some of the states in the measurement update. Considered states are states, that are considered in the model with its mean and variance, but are not updated in the update procedure. To use this feature, there is an optional paramter <code>consider</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="measurement_update(x, P, measurement, H, R, consider = 3:5)"><pre><span class="pl-c1">measurement_update</span>(x, P, measurement, H, R, consider <span class="pl-k">=</span> <span class="pl-c1">3</span><span class="pl-k">:</span><span class="pl-c1">5</span>)</pre></div>
<h3 dir="auto"><a id="user-content-statistical-consistency-testing" class="anchor" aria-hidden="true" href="#statistical-consistency-testing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Statistical consistency testing</h3>
<p dir="auto">This module provides two consistency tests</p>
<ul dir="auto">
<li>the Normalized innovation squared (NIS) test</li>
<li>the Innovation sigma bound test
<ul dir="auto">
<li>tests if approximately 68% (95%) of the innovation sequence values lie within the ⨦σ (⨦2σ) bound</li>
</ul>
</li>
</ul>
<h2 dir="auto"><a id="user-content-benchmarks" class="anchor" aria-hidden="true" href="#benchmarks"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Benchmarks</h2>
<p dir="auto">This module was build with performance in mind. For almost all variants of the Kalman-Filter you will find an inplace version. The inplace version is marked with an exclamation mark like e.g. <code>time_update!</code> and <code>measurement_update!</code>. The intermediate results are saved into an pre-allocated buffer. That's</p>
<table>
<thead>
<tr>
<th>Buffer</th>
<th>Variant</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>KFTUIntermediate(num_states)</code></td>
<td>(linear) Kalman-Filter time update</td>
</tr>
<tr>
<td><code>KFMUIntermediate(num_states, num_measurements)</code></td>
<td>(linear) Kalman-Filter measurement update</td>
</tr>
<tr>
<td><code>SRKFTUIntermediate(num_states)</code></td>
<td>(linear) Square-Root Kalman-Filter time update</td>
</tr>
<tr>
<td><code>SRKFMUIntermediate(num_states, num_measurements)</code></td>
<td>(linear) Square-Root Kalman-Filter measurement update</td>
</tr>
<tr>
<td><code>UKFTUIntermediate(num_states)</code></td>
<td>Unscented-Kalman-Filter time update</td>
</tr>
<tr>
<td><code>UKFMUIntermediate(num_states, num_measurements)</code></td>
<td>Unscented-Kalman-Filter measurement update</td>
</tr>
<tr>
<td><code>SRUKFTUIntermediate(num_states)</code></td>
<td>Square-Root Unscented-Kalman-Filter time update</td>
</tr>
<tr>
<td><code>SRUKFMUIntermediate(num_states, num_measurements)</code></td>
<td>Square-Root Unscented-Kalman-Filter measurement update</td>
</tr>
<tr>
<td><code>AUKFTUIntermediate(num_states)</code></td>
<td>Augmented Unscented-Kalman-Filter time update</td>
</tr>
<tr>
<td><code>AUKFMUIntermediate(num_states, num_measurements)</code></td>
<td>Augmented Unscented-Kalman-Filter measurement update</td>
</tr>
<tr>
<td><code>SRAUKFTUIntermediate(num_states)</code></td>
<td>Square-Root Augmented Unscented-Kalman-Filter time update</td>
</tr>
<tr>
<td><code>SRAUKFMUIntermediate(num_states, num_measurements)</code></td>
<td>Square-Root Augmented Unscented-Kalman-Filter measurement update</td>
</tr>
</tbody>
</table>
<p dir="auto">There is a benchmark to compare the different implementations in the benchmark folder. For the benchmark a linear model was chosen, that is supported by all variants.</p>
<h3 dir="auto"><a id="user-content-time-update" class="anchor" aria-hidden="true" href="#time-update"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Time update</h3>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="benchmark/tu_time.png"><img src="benchmark/tu_time.png" alt="Time update timings" style="max-width: 100%;"></a>
<a target="_blank" rel="noopener noreferrer" href="benchmark/tu_alloc.png"><img src="benchmark/tu_alloc.png" alt="Time update allocations" style="max-width: 100%;"></a></p>
<h3 dir="auto"><a id="user-content-measurement-update" class="anchor" aria-hidden="true" href="#measurement-update"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Measurement update</h3>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="benchmark/mu_time.png"><img src="benchmark/mu_time.png" alt="Measurement update timings" style="max-width: 100%;"></a>
<a target="_blank" rel="noopener noreferrer" href="benchmark/mu_alloc.png"><img src="benchmark/mu_alloc.png" alt="Measurement update allocations" style="max-width: 100%;"></a></p>
<p dir="auto">In same cases the inplace variant is slower than the allocating variant. More investigation is needed to find out why this is the case.</p>
<h2 dir="auto"><a id="user-content-license" class="anchor" aria-hidden="true" href="#license"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>License</h2>
<p dir="auto">MIT License</p>
</article></div>