<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-spatialindexingjl" class="anchor" aria-hidden="true" href="#spatialindexingjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>SpatialIndexing.jl</h1>
<p><a href="https://travis-ci.org/alyst/SpatialIndexing.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/d59e7503a8b9efe4a526838951f6464da2f1fabc/68747470733a2f2f7472617669732d63692e6f72672f616c7973742f5370617469616c496e646578696e672e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/alyst/SpatialIndexing.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/alyst/SpatialIndexing.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/3353250a5673e3fafaa62ab40913d792f0b5fb9e/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f616c7973742f5370617469616c496e646578696e672e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/alyst/SpatialIndexing.jl/badge.svg?branch=master" style="max-width:100%;"></a></p>
<p><code>SpatialIndexing</code> package provides the tools for efficient in-memory indexing of
spatial data in Julia (<a href="http://julialang.org/" rel="nofollow">http://julialang.org/</a>).</p>
<h1><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Installation</h1>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> Pkg; Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>SpatialIndexing<span class="pl-pds">"</span></span>)</pre></div>
<p>from Julia REPL.</p>
<h1><a id="user-content-features" class="anchor" aria-hidden="true" href="#features"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Features</h1>
<h2><a id="user-content-r-tree" class="anchor" aria-hidden="true" href="#r-tree"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>R-tree</h2>
<p><a href="https://en.wikipedia.org/wiki/R-tree" rel="nofollow">R-tree</a> organizes data into
hierarchical structure and ensures that:</p>
<ul>
<li>minimal bounding rectangles (MBRs) of the nodes (rectangles that
encompass all data elements in the subtree) stay compact,</li>
<li>MBRs of the nodes from the same R-tree level have minimal overlap
with each other.</li>
</ul>
<p>The key benefit of R-tree is its ability to rebalance itself
and maintain efficient structure while handling dynamic data (massive insertions
and deletions).</p>
<p><code>SpatialIndexing</code> provides <code>RTree</code> type that supports:</p>
<ul>
<li>different R-tree variants (classic <a href="https://en.wikipedia.org/wiki/R-tree" rel="nofollow">R-tree</a>,
<a href="https://en.wikipedia.org/wiki/R*_tree" rel="nofollow">R*-tree</a>, linear and quadratic node splits)</li>
<li><code>insert!(tree, item)</code>, <code>delete!(tree, item)</code> for element-wise insertion and deletion</li>
<li>bulk-loading of data using Overlap-minimizing Top-down (OMT) approach (<code>load!(tree, data)</code>)</li>
<li><code>subtract!(tree, reg)</code> for removing data within specified region <code>reg</code></li>
<li><code>findfirst(tree, reg, [id])</code>, <code>contained_in(tree, reg)</code> and <code>intersects_with(tree, reg)</code> spatial queries</li>
</ul>
<h2><a id="user-content-simple-spatial-index" class="anchor" aria-hidden="true" href="#simple-spatial-index"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Simple Spatial Index</h2>
<p><code>SimpleSpatialIndex</code> stores all data elements in a vector. So, while insertion
of new data takes constant time, the time of spatial searches grows linearly
with the number of elements. This spatial index is intended as a reference
implementation for benchmarking and not recommended for production usage.</p>
<p><strong>TODO</strong></p>
<h1><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Usage</h1>
<p><strong>TODO</strong></p>
<p><code>examples</code> folder contains <code>spiral.jl</code> and <code>pareto.jl</code> examples of using R-tree
for storing spatial data.</p>
<p><a target="_blank" rel="noopener noreferrer" href="examples/spiral_rtree_seq.png"><img src="examples/spiral_rtree_seq.png" alt="R*-tree of 10000 random points (sequential insertions)" style="max-width:100%;"></a></p>
<p><a target="_blank" rel="noopener noreferrer" href="examples/pareto3d_rtree_bulk.jpg"><img src="examples/pareto3d_rtree_bulk.jpg" alt="R*-tree of 3D Pareto Front (1233 of 100000 points; bulk-load)" style="max-width:100%;"></a></p>
<h1><a id="user-content-see-also" class="anchor" aria-hidden="true" href="#see-also"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>See also</h1>
<p>Other Julia packages for spatial data:</p>
<ul>
<li><a href="https://github.com/yeesian/LibSpatialIndex.jl">LibSpatialIndex.jl</a>
(<a href="https://github.com/libspatialindex/libspatialindex">libspatialindex</a> wrapper)</li>
<li><a href="https://github.com/KristofferC/NearestNeighbors.jl">NearestNeighbors.jl</a></li>
<li><a href="https://github.com/rdeits/RegionTrees.jl">RegionTrees.jl</a></li>
<li><a href="https://github.com/Keno/LSH.jl">LSH.jl</a></li>
</ul>
<h1><a id="user-content-references" class="anchor" aria-hidden="true" href="#references"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>References</h1>
<ul>
<li>A.Guttman, <em>“R-Trees: A Dynamic Index Structure for Spatial Searching”</em>
Proc. 1984 ACM-SIGMOD Conference on Management of Data (1985), pp.47-57.</li>
<li>N. Beckmann, H.P. Kriegel, R. Schneider, B. Seeger,
<em>"The R*-tree: an efficient and robust access method for points and rectangles"</em>
Proc. 1990 ACM SIGMOD international conference on Management of data (1990), p.322</li>
<li>T. Lee and S. Lee, <em>"OMT: Overlap Minimizing Top-down Bulk Loading Algorithm for R-tree"</em>,
CAiSE Short Paper Proceedings (2003) <a href="http://ceur-ws.org/Vol-74/files/FORUM_18.pdf" rel="nofollow">paper</a></li>
</ul>
</article></div>