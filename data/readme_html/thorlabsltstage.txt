<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-thorlabsltstage" class="anchor" aria-hidden="true" href="#thorlabsltstage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>ThorlabsLTStage</h1>
<p><a href="https://orchard-ultrasound-innovation.github.io/ThorlabsLTStage.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://orchard-ultrasound-innovation.github.io/ThorlabsLTStage.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a>
<a href="https://github.com/orchard-ultrasound-innovation/ThorlabsLTStage.jl/actions"><img src="https://github.com/orchard-ultrasound-innovation/ThorlabsLTStage.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width:100%;"></a>
<a href="https://travis-ci.com/orchard-ultrasound-innovation/ThorlabsLTStage.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/cb75fa2f8088d4559876903492e7beb05df2509cf43edeec24b75bdd6927c638/68747470733a2f2f7472617669732d63692e636f6d2f6f7263686172642d756c747261736f756e642d696e6e6f766174696f6e2f54686f726c6162734c5453746167652e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/orchard-ultrasound-innovation/ThorlabsLTStage.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/orchard-ultrasound-innovation/ThorlabsLTStage.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/ed56ede989a983e88f017c0d82b35bf39c379e03158411c627340cb492e23f5d/68747470733a2f2f636f6465636f762e696f2f67682f6f7263686172642d756c747261736f756e642d696e6e6f766174696f6e2f54686f726c6162734c5453746167652e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/orchard-ultrasound-innovation/ThorlabsLTStage.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a>
<a href="https://github.com/invenia/BlueStyle"><img src="https://camo.githubusercontent.com/c18fbaa52d94d16b90b19701fc90d289b8a5bb920c74c79bab200b14e75420a4/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c75652d3434393564312e737667" alt="Code Style: Blue" data-canonical-src="https://img.shields.io/badge/code%20style-blue-4495d1.svg" style="max-width:100%;"></a>
<a href="https://github.com/SciML/ColPrac"><img src="https://camo.githubusercontent.com/a6c1efcb19a957860ecb25966a730260b03d6e05380d0c27992ee7f9e3b1feb3/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f436f6c507261632d436f6e7472696275746f72277325323047756964652d626c756576696f6c6574" alt="ColPrac: Contributor's Guide on Collaborative Practices for Community Packages" data-canonical-src="https://img.shields.io/badge/ColPrac-Contributor's%20Guide-blueviolet" style="max-width:100%;"></a></p>
<p>We currently use the Kinesis Windows DLL to control the XYZ Stage.</p>
<p>As such this code will only work on a Windows machine that has
been properly configured. (A Linux interface will hopefully be released by Thorlabs soon)</p>
<p>There are two different backends to this package.</p>
<p>One is a Julia implementation that directly calls the C API to the device.</p>
<p>The other uses Pycall to call the Dot Net API.</p>
<p>The C API is preferred however at the moment it may be a bit buggier.</p>
<h2><a id="user-content-using-the-c-backend" class="anchor" aria-hidden="true" href="#using-the-c-backend"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Using the C Backend</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="pkg&gt; add ThorlabsLTStage
julia&gt; using ThorlabsLTSStage
julia&gt; lts = initialize(LTS)
"><pre>pkg<span class="pl-k">&gt;</span> add ThorlabsLTStage
julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> ThorlabsLTSStage
julia<span class="pl-k">&gt;</span> lts <span class="pl-k">=</span> <span class="pl-c1">initialize</span>(LTS)</pre></div>
<h3><a id="user-content-using-this-package" class="anchor" aria-hidden="true" href="#using-this-package"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Using this package</h3>
<p>The C Backend now uses units from Unitful.jl</p>
<p>As of right now the only supported device are Thorlabs LTS150 or LTS300 stages</p>
<p>To connect to them:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia
julia&gt; using ThorlabsLTStage
lts = initialize(LTS)
"><pre>julia
julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> ThorlabsLTStage
lts <span class="pl-k">=</span> <span class="pl-c1">initialize</span>(LTS)</pre></div>
<p>This will print the serial numbers of all the LTS150 and LTS300 stages connected to the computer and then connect to them.
The first stage detected will be initialized
as the X stage followed by Y and Z.</p>
<p>Lets say for your setup you want to change which stage is considered X, Y and Z.</p>
<p>Edit/Create a config file with your text editor or:
<code>ThorlabsLTStage.edit_config()</code>
to look like the following:</p>
<div class="highlight highlight-source-yaml position-relative" data-snippet-clipboard-copy-content="# Inside .lts_stage.yml
ThorlabsLTS:
  alias: bigStage # This is an optional alias
  x:  
    serial: 45140764 # or whatever your desired serial number is
    min_position: 0
    max_position: .15 # in meters
    max_velocity: 20
    max_acceleration: 20
  y:
    serial: 45146974
    max_velocity: 3 # mm s^-1
    max_acceleration: 5 # mm s^-2
  z:
    serial: 45141924
    # If no limits specified physical device limits will be used
"><pre><span class="pl-c"><span class="pl-c">#</span> Inside .lts_stage.yml</span>
<span class="pl-ent">ThorlabsLTS</span>:
  <span class="pl-ent">alias</span>: <span class="pl-s">bigStage </span><span class="pl-c"><span class="pl-c">#</span> This is an optional alias</span>
  <span class="pl-ent">x</span>:  
    <span class="pl-ent">serial</span>: <span class="pl-c1">45140764</span> <span class="pl-c"><span class="pl-c">#</span> or whatever your desired serial number is</span>
    <span class="pl-ent">min_position</span>: <span class="pl-c1">0</span>
    <span class="pl-ent">max_position</span>: <span class="pl-c1">.15</span> <span class="pl-c"><span class="pl-c">#</span> in meters</span>
    <span class="pl-ent">max_velocity</span>: <span class="pl-c1">20</span>
    <span class="pl-ent">max_acceleration</span>: <span class="pl-c1">20</span>
  <span class="pl-ent">y</span>:
    <span class="pl-ent">serial</span>: <span class="pl-c1">45146974</span>
    <span class="pl-ent">max_velocity</span>: <span class="pl-c1">3</span> <span class="pl-c"><span class="pl-c">#</span> mm s^-1</span>
    <span class="pl-ent">max_acceleration</span>: <span class="pl-c1">5</span> <span class="pl-c"><span class="pl-c">#</span> mm s^-2</span>
  <span class="pl-ent">z</span>:
    <span class="pl-ent">serial</span>: <span class="pl-c1">45141924</span>
    <span class="pl-c"><span class="pl-c">#</span> If no limits specified physical device limits will be used</span></pre></div>
<p>Now when you run</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="lts = initialize(LTS)
"><pre>lts <span class="pl-k">=</span> <span class="pl-c1">initialize</span>(LTS)</pre></div>
<p>the current stages will be configured as X, Y and Z</p>
<h2><a id="user-content-controlling-the-xyz-stage" class="anchor" aria-hidden="true" href="#controlling-the-xyz-stage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Controlling the XYZ Stage</h2>
<p>Move a single axis to a certain position:
<code>move_x_abs(lts, .54u"m")</code></p>
<p>Get position of a single axis:
<code>pos_y(lts)</code></p>
<p>Get position of all stages:
<code>pos_xyz(lts)</code></p>
<p>If you ask a stage to move further than its available length
this package will throw an error. You can however set limits
that will prevent a stage from moving past a particular point.</p>
<p>Note: All positions are in meters</p>
<p>For all the available commands use:</p>
<p><code>help&gt; LTS_3D</code></p>
<h2><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Unitful

lts = initialize(ThorlabsLTS150)

move_xyz(lts, 0.1u&quot;m&quot;, 0.1u&quot;m&quot;, 0.1u&quot;m&quot;)

# Move 0.05 meters forwards
move_x_rel(lts, 0.05u&quot;m&quot;)

# Get position of x stage (0.05m here)
pos_x(lts)

# Move 0.05 meters backwards
move_x_rel(lts, -0.05u&quot;m&quot;)

# Moves device to home position
home(lts)

# Returns x,y,z positions
pos_xyz(lts)

# First tuple contains lower limits, second contains upper limits
# (x_low_lim, y_low_lim, z_low_lim), (x_up_lim, y_up_lim, z_up_lim)
# Arrays can be used instead of tuples as well []
set_limits(lts, (0.01, 0.01, 0.01), (0.1, 0.1, 0.1))

# Will return a pair of tuples with limits you just set
get_limits(lts)

# Will return lower and upper limit for x stage
lower_x, upper_x = get_limits_x(lts)

# Will error: 0.1 (upper limit)
move_x_abs(lts, 0.2u&quot;m&quot;)

# Beyond device limit error: 0.1 (upper limit)
move_x_abs(lts, 5u&quot;m&quot;)

# Will error: 0.01 (lower limit)
move_x_abs(lts, 0u&quot;m&quot;)

# Reset limits to physical device limits
reset_limits(lts)
"><pre><span class="pl-k">using</span> Unitful

lts <span class="pl-k">=</span> <span class="pl-c1">initialize</span>(ThorlabsLTS150)

<span class="pl-c1">move_xyz</span>(lts, <span class="pl-c1">0.1</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>m<span class="pl-pds">"</span></span>, <span class="pl-c1">0.1</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>m<span class="pl-pds">"</span></span>, <span class="pl-c1">0.1</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>m<span class="pl-pds">"</span></span>)

<span class="pl-c"><span class="pl-c">#</span> Move 0.05 meters forwards</span>
<span class="pl-c1">move_x_rel</span>(lts, <span class="pl-c1">0.05</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>m<span class="pl-pds">"</span></span>)

<span class="pl-c"><span class="pl-c">#</span> Get position of x stage (0.05m here)</span>
<span class="pl-c1">pos_x</span>(lts)

<span class="pl-c"><span class="pl-c">#</span> Move 0.05 meters backwards</span>
<span class="pl-c1">move_x_rel</span>(lts, <span class="pl-k">-</span><span class="pl-c1">0.05</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>m<span class="pl-pds">"</span></span>)

<span class="pl-c"><span class="pl-c">#</span> Moves device to home position</span>
<span class="pl-c1">home</span>(lts)

<span class="pl-c"><span class="pl-c">#</span> Returns x,y,z positions</span>
<span class="pl-c1">pos_xyz</span>(lts)

<span class="pl-c"><span class="pl-c">#</span> First tuple contains lower limits, second contains upper limits</span>
<span class="pl-c"><span class="pl-c">#</span> (x_low_lim, y_low_lim, z_low_lim), (x_up_lim, y_up_lim, z_up_lim)</span>
<span class="pl-c"><span class="pl-c">#</span> Arrays can be used instead of tuples as well []</span>
<span class="pl-c1">set_limits</span>(lts, (<span class="pl-c1">0.01</span>, <span class="pl-c1">0.01</span>, <span class="pl-c1">0.01</span>), (<span class="pl-c1">0.1</span>, <span class="pl-c1">0.1</span>, <span class="pl-c1">0.1</span>))

<span class="pl-c"><span class="pl-c">#</span> Will return a pair of tuples with limits you just set</span>
<span class="pl-c1">get_limits</span>(lts)

<span class="pl-c"><span class="pl-c">#</span> Will return lower and upper limit for x stage</span>
lower_x, upper_x <span class="pl-k">=</span> <span class="pl-c1">get_limits_x</span>(lts)

<span class="pl-c"><span class="pl-c">#</span> Will error: 0.1 (upper limit)</span>
<span class="pl-c1">move_x_abs</span>(lts, <span class="pl-c1">0.2</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>m<span class="pl-pds">"</span></span>)

<span class="pl-c"><span class="pl-c">#</span> Beyond device limit error: 0.1 (upper limit)</span>
<span class="pl-c1">move_x_abs</span>(lts, <span class="pl-c1">5</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>m<span class="pl-pds">"</span></span>)

<span class="pl-c"><span class="pl-c">#</span> Will error: 0.01 (lower limit)</span>
<span class="pl-c1">move_x_abs</span>(lts, <span class="pl-c1">0</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>m<span class="pl-pds">"</span></span>)

<span class="pl-c"><span class="pl-c">#</span> Reset limits to physical device limits</span>
<span class="pl-c1">reset_limits</span>(lts)</pre></div>
<h2><a id="user-content-using-the-python-backend" class="anchor" aria-hidden="true" href="#using-the-python-backend"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Using the Python Backend</h2>
<p>If you are having trouble with the C backend you can
use the Python Backend however it may be deprecated in the future.</p>
<h2><a id="user-content-prerequisites" class="anchor" aria-hidden="true" href="#prerequisites"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Prerequisites</h2>
<p>This guide explains how to setup a clean Windows 10 install.</p>
<h3><a id="user-content-install-choco" class="anchor" aria-hidden="true" href="#install-choco"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Install choco</h3>
<p>Start a new powershell as administrator.</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="Set-ExecutionPolicy -Scope CurrentUser

Invoke-Expression ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))
"><pre><code>Set-ExecutionPolicy -Scope CurrentUser

Invoke-Expression ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))
</code></pre></div>
<h3><a id="user-content-install-git" class="anchor" aria-hidden="true" href="#install-git"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Install git</h3>
<p><code>choco install git</code></p>
<h3><a id="user-content-install-python" class="anchor" aria-hidden="true" href="#install-python"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Install python</h3>
<p><code>choco install python --version=3.6.3</code></p>
<p>As of this document any version of python above 3.6.3 will not work</p>
<p><code>pip install --upgrade pip</code></p>
<p><code>pip install wheel</code></p>
<p><code>pip install pythonnet</code></p>
<h3><a id="user-content-install-julia" class="anchor" aria-hidden="true" href="#install-julia"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Install julia</h3>
<p><code>choco install julia</code></p>
<h3><a id="user-content-install-kinesis" class="anchor" aria-hidden="true" href="#install-kinesis"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Install kinesis</h3>
<p>Download &amp; Install <a href="https://www.thorlabs.com/software_pages/ViewSoftwarePage.cfm?Code=Motion_Control&amp;viewtab=0" rel="nofollow">Kinesis</a></p>
<h3><a id="user-content-install-thorlabsltsstage" class="anchor" aria-hidden="true" href="#install-thorlabsltsstage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Install ThorlabsLTSStage</h3>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="pkg&gt; add ThorlabsLTStage
"><pre>pkg<span class="pl-k">&gt;</span> add ThorlabsLTStage</pre></div>
<p>This project uses <a href="https://github.com/Orchard-Ultrasound-Innovation/InstrumentConfig.jl">InstrumentConfig.jl</a>
for configuration. Check out the package for more information.</p>
<h3><a id="user-content-specify-python-location-in-your-config-file" class="anchor" aria-hidden="true" href="#specify-python-location-in-your-config-file"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Specify python location in your config file</h3>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia
julia&gt; using ThorlabsLTStage;
julia&gt; ThorlabsLTStage.create_config()
"><pre>julia
julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> ThorlabsLTStage;
julia<span class="pl-k">&gt;</span> ThorlabsLTStage<span class="pl-k">.</span><span class="pl-c1">create_config</span>()</pre></div>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; load_python()
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">load_python</span>()</pre></div>
<p>The important line in the config is "backend: python"</p>
<p>If you wanted to add this line but the rest of the config doesn't fit your
use case you can also manually create this config file instead.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="echo &quot;backend: python&quot; &gt; .lts_stage.yml
julia
julia&gt; using ThorlabsLTStage; ThorlabsLTStage.create_config()
julia&gt; load_python()
"><pre>echo <span class="pl-s"><span class="pl-pds">"</span>backend: python<span class="pl-pds">"</span></span> <span class="pl-k">&gt;</span> <span class="pl-k">.</span>lts_stage<span class="pl-k">.</span>yml
julia
julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> ThorlabsLTStage; ThorlabsLTStage<span class="pl-k">.</span><span class="pl-c1">create_config</span>()
julia<span class="pl-k">&gt;</span> <span class="pl-c1">load_python</span>()</pre></div>
<h2><a id="user-content-using-this-package-1" class="anchor" aria-hidden="true" href="#using-this-package-1"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Using this package</h2>
<p>As of right now the only supported device is the Thorlabs LTS150</p>
<p>To connect to it:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia
julia&gt; using ThorlabsLTStage; ThorlabsLTStage.load_config()
lts = initialize(ThorlabsLTS150)
"><pre>julia
julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> ThorlabsLTStage; ThorlabsLTStage<span class="pl-k">.</span><span class="pl-c1">load_config</span>()
lts <span class="pl-k">=</span> <span class="pl-c1">initialize</span>(ThorlabsLTS150)</pre></div>
<p>This will print the serial numbers of all the LTS150 stages connected to the
computer and then connect to them. The first stage detected will be initialized
as the X stage followed by Y and Z.</p>
<p>Lets say for your setup you want to change which stage is considered X, Y and Z.</p>
<p>Edit your config file with your text editor or:
<code>ThorlabsLTStage.edit_config()</code>
to look like the following:</p>
<div class="highlight highlight-source-yaml position-relative" data-snippet-clipboard-copy-content="# Inside .lts_stage.yml
backend: python

ThorlabsLTS:
  alias: lts150
  x:  
    serial: 45140764 # or whatever your desired serial number is
    min_position: 0
    max_position: .15 # in meters
    max_velocity: 20
    max_acceleration: 20
  y:
    serial: 45146974
    max_velocity: 3
    max_acceleration: 5
  z:
    serial: 45141924
    # If no limits specified physical device limits will be used
"><pre><span class="pl-c"><span class="pl-c">#</span> Inside .lts_stage.yml</span>
<span class="pl-ent">backend</span>: <span class="pl-s">python</span>

<span class="pl-ent">ThorlabsLTS</span>:
  <span class="pl-ent">alias</span>: <span class="pl-s">lts150</span>
  <span class="pl-ent">x</span>:  
    <span class="pl-ent">serial</span>: <span class="pl-c1">45140764</span> <span class="pl-c"><span class="pl-c">#</span> or whatever your desired serial number is</span>
    <span class="pl-ent">min_position</span>: <span class="pl-c1">0</span>
    <span class="pl-ent">max_position</span>: <span class="pl-c1">.15</span> <span class="pl-c"><span class="pl-c">#</span> in meters</span>
    <span class="pl-ent">max_velocity</span>: <span class="pl-c1">20</span>
    <span class="pl-ent">max_acceleration</span>: <span class="pl-c1">20</span>
  <span class="pl-ent">y</span>:
    <span class="pl-ent">serial</span>: <span class="pl-c1">45146974</span>
    <span class="pl-ent">max_velocity</span>: <span class="pl-c1">3</span>
    <span class="pl-ent">max_acceleration</span>: <span class="pl-c1">5</span>
  <span class="pl-ent">z</span>:
    <span class="pl-ent">serial</span>: <span class="pl-c1">45141924</span>
    <span class="pl-c"><span class="pl-c">#</span> If no limits specified physical device limits will be used</span></pre></div>
<p>Now when you run</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="lts = initialize(ThorlabsLTS150)
"><pre>lts <span class="pl-k">=</span> <span class="pl-c1">initialize</span>(ThorlabsLTS150)</pre></div>
<p>the correct stages will be configured as X, Y and Z</p>
<h2><a id="user-content-controlling-the-xyz-stage-1" class="anchor" aria-hidden="true" href="#controlling-the-xyz-stage-1"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Controlling the XYZ Stage</h2>
<p>Move a single axis to a certain position:
<code>move_x_abs(lts, .54)</code></p>
<p>Get position of a single axis:
<code>pos_y(lts)</code></p>
<p>Get position of all stages:
<code>pos_xyz(lts)</code></p>
<p>If you ask a stage to move further than its available length
this package will throw an error. You can however set limits
that will prevent a stage from moving past a particular point.</p>
<p>Note: All positions are in meters</p>
<p>For all the available commands use:</p>
<p><code>help&gt; ThorlabsLTS150</code></p>
<h2><a id="user-content-example-1" class="anchor" aria-hidden="true" href="#example-1"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="lts = initialize(ThorlabsLTS150)

move_xyz(lts, 0.1, 0.1, 0.1)

# Move 0.05 meters forwards
move_x_rel(lts, 0.05)

# Get position of x stage (0.05 here)
pos_x(lts)

# Move 0.05 meters backwards
move_x_rel(lts, -0.05)

# Moves device to home position
home(lts)

# Returns x,y,z positions
pos_xyz(lts)

# First tuple contains lower limits, second contains upper limits
# (x_low_lim, y_low_lim, z_low_lim), (x_up_lim, y_up_lim, z_up_lim)
# Arrays can be used instead of tuples as well []
set_limits(lts, (0.01, 0.01, 0.01), (0.1, 0.1, 0.1))

# Will return a pair of tuples with limits you just set
get_limits(lts)

# Will return lower and upper limit for x stage
lower_x, upper_x = get_limits_x(lts)

# Will stay at 0.1 (upper limit)
move_x_abs(lts, 0.2)

# Beyond device limit but will stay at 0.1 (upper limit)
move_x_abs(lts, 5)

# Will move to 0.01 (lower limit)
move_x_abs(lts, 0)

# Clear limits
clear_limits(lts)

# Moving beyond your physical device with no limits will throw an error
# Don't do this
move_x_abs(lts, 5)
"><pre>lts <span class="pl-k">=</span> <span class="pl-c1">initialize</span>(ThorlabsLTS150)

<span class="pl-c1">move_xyz</span>(lts, <span class="pl-c1">0.1</span>, <span class="pl-c1">0.1</span>, <span class="pl-c1">0.1</span>)

<span class="pl-c"><span class="pl-c">#</span> Move 0.05 meters forwards</span>
<span class="pl-c1">move_x_rel</span>(lts, <span class="pl-c1">0.05</span>)

<span class="pl-c"><span class="pl-c">#</span> Get position of x stage (0.05 here)</span>
<span class="pl-c1">pos_x</span>(lts)

<span class="pl-c"><span class="pl-c">#</span> Move 0.05 meters backwards</span>
<span class="pl-c1">move_x_rel</span>(lts, <span class="pl-k">-</span><span class="pl-c1">0.05</span>)

<span class="pl-c"><span class="pl-c">#</span> Moves device to home position</span>
<span class="pl-c1">home</span>(lts)

<span class="pl-c"><span class="pl-c">#</span> Returns x,y,z positions</span>
<span class="pl-c1">pos_xyz</span>(lts)

<span class="pl-c"><span class="pl-c">#</span> First tuple contains lower limits, second contains upper limits</span>
<span class="pl-c"><span class="pl-c">#</span> (x_low_lim, y_low_lim, z_low_lim), (x_up_lim, y_up_lim, z_up_lim)</span>
<span class="pl-c"><span class="pl-c">#</span> Arrays can be used instead of tuples as well []</span>
<span class="pl-c1">set_limits</span>(lts, (<span class="pl-c1">0.01</span>, <span class="pl-c1">0.01</span>, <span class="pl-c1">0.01</span>), (<span class="pl-c1">0.1</span>, <span class="pl-c1">0.1</span>, <span class="pl-c1">0.1</span>))

<span class="pl-c"><span class="pl-c">#</span> Will return a pair of tuples with limits you just set</span>
<span class="pl-c1">get_limits</span>(lts)

<span class="pl-c"><span class="pl-c">#</span> Will return lower and upper limit for x stage</span>
lower_x, upper_x <span class="pl-k">=</span> <span class="pl-c1">get_limits_x</span>(lts)

<span class="pl-c"><span class="pl-c">#</span> Will stay at 0.1 (upper limit)</span>
<span class="pl-c1">move_x_abs</span>(lts, <span class="pl-c1">0.2</span>)

<span class="pl-c"><span class="pl-c">#</span> Beyond device limit but will stay at 0.1 (upper limit)</span>
<span class="pl-c1">move_x_abs</span>(lts, <span class="pl-c1">5</span>)

<span class="pl-c"><span class="pl-c">#</span> Will move to 0.01 (lower limit)</span>
<span class="pl-c1">move_x_abs</span>(lts, <span class="pl-c1">0</span>)

<span class="pl-c"><span class="pl-c">#</span> Clear limits</span>
<span class="pl-c1">clear_limits</span>(lts)

<span class="pl-c"><span class="pl-c">#</span> Moving beyond your physical device with no limits will throw an error</span>
<span class="pl-c"><span class="pl-c">#</span> Don't do this</span>
<span class="pl-c1">move_x_abs</span>(lts, <span class="pl-c1">5</span>)</pre></div>
</article></div>