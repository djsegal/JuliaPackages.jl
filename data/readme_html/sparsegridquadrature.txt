<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-sparsegridquadraturejl" class="anchor" aria-hidden="true" href="#sparsegridquadraturejl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>SparseGridQuadrature.jl</h1>
<p dir="auto">Multi-dimensional <a href="https://en.wikipedia.org/wiki/Sparse_grid" rel="nofollow">sparse grid
quadrature</a> in Julia</p>
<ul dir="auto">
<li><a href="https://eschnett.github.io/SparseGridQuadrature.jl/dev/" rel="nofollow">Documentation</a>:
Future documentation</li>
<li><a href="https://github.com/eschnett/SparseGridQuadrature.jl">GitHub</a>: Source
code repository</li>
<li><a href="https://github.com/eschnett/SparseGridQuadrature.jl/actions"><img src="https://github.com/eschnett/SparseGridQuadrature.jl/workflows/CI/badge.svg" alt="GitHub CI" style="max-width: 100%;"></a></li>
<li><a href="https://codecov.io/gh/eschnett/SparseGridQuadrature.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/3150be990f00455367fe799cd681644fe9e8a343923c5473a3f7e1d5afabb91f/68747470733a2f2f636f6465636f762e696f2f67682f657363686e6574742f53706172736547726964517561647261747572652e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e7376673f746f6b656e3d7648744c5a685a704b47" alt="codecov" data-canonical-src="https://codecov.io/gh/eschnett/SparseGridQuadrature.jl/branch/main/graph/badge.svg?token=vHtLZhZpKG" style="max-width: 100%;"></a></li>
</ul>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<p dir="auto">Let us integrate the function <code>f(x) = 3 x⋅x</code> over the four-dimensional
cube <code>[-1; +1]^4</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using SparseGridQuadrature

julia&gt; lmax = 10
10

julia&gt; quad = SGQuadrature{4,Float64}(lmax);

julia&gt; f(x) = 3 * sum(x.^2)
f (generic function with 1 method)

julia&gt; quadsg(f, Float64, quad)
(result = 64.00048828125, nevals = 84481)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> SparseGridQuadrature

julia<span class="pl-k">&gt;</span> lmax <span class="pl-k">=</span> <span class="pl-c1">10</span>
<span class="pl-c1">10</span>

julia<span class="pl-k">&gt;</span> quad <span class="pl-k">=</span> <span class="pl-c1">SGQuadrature</span><span class="pl-c1">{4,Float64}</span>(lmax);

julia<span class="pl-k">&gt;</span> <span class="pl-en">f</span>(x) <span class="pl-k">=</span> <span class="pl-c1">3</span> <span class="pl-k">*</span> <span class="pl-c1">sum</span>(x<span class="pl-k">.^</span><span class="pl-c1">2</span>)
f (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">quadsg</span>(f, Float64, quad)
(result <span class="pl-k">=</span> <span class="pl-c1">64.00048828125</span>, nevals <span class="pl-k">=</span> <span class="pl-c1">84481</span>)</pre></div>
<p dir="auto">This uses a sparse sampling grid with <code>2^9</code> points along each
direction. The Sparse Grid approximation reduces the total number of
grid points from <code>(2^9)^4 = 2^36 ≈ 7*10^10</code> points to only <code>84481</code>
points, while retaining a comparable level of accuracy.</p>
<p dir="auto"><code>SGQuadrature{D,S}(lmax)</code> creates a sparse grid quadrature method for
<code>D</code> dimensions, where coordinates have type <code>S</code>. <code>lmax</code> is the number
of refinement levels. <code>lmax</code> levels correspond to <code>N = 2^(lmax-1)+1</code>
points along each direction.</p>
<p dir="auto">The total number of quadrature points is approximately <code>N log2(N)^(D-1)</code>, and the expected relative error is approximately
<code>log2(N)^(D-1) / N^2</code>. That is, up to logarithmic terms, the total
number of points is of the same order as the number of points along
each edge, and convergence is quadratic.</p>
<p dir="auto">The second argument to <code>quadsg</code>, here <code>Float64</code>, describes the return
type of the quadrature.</p>
<h2 dir="auto"><a id="user-content-specifying-the-quadrature-domain" class="anchor" aria-hidden="true" href="#specifying-the-quadrature-domain"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Specifying the quadrature domain</h2>
<p dir="auto">If the quadrature domain is not the unit cube, then the quadrature
method <code>quad</code> should be updated:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using SparseGridQuadrature

julia&gt; lmax = 10
10

julia&gt; quad = SGQuadrature{4,Float64}(lmax);

julia&gt; transform_domain_size!(quad);

julia&gt; f(x) = 3 * sum(x.^2)
f (generic function with 1 method)

julia&gt; quadsg(f, Float64, quad, (0,0,0,0), (1,1,1,1))
(result = 4.000007629394531, nevals = 84481)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> SparseGridQuadrature

julia<span class="pl-k">&gt;</span> lmax <span class="pl-k">=</span> <span class="pl-c1">10</span>
<span class="pl-c1">10</span>

julia<span class="pl-k">&gt;</span> quad <span class="pl-k">=</span> <span class="pl-c1">SGQuadrature</span><span class="pl-c1">{4,Float64}</span>(lmax);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">transform_domain_size!</span>(quad);

julia<span class="pl-k">&gt;</span> <span class="pl-en">f</span>(x) <span class="pl-k">=</span> <span class="pl-c1">3</span> <span class="pl-k">*</span> <span class="pl-c1">sum</span>(x<span class="pl-k">.^</span><span class="pl-c1">2</span>)
f (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">quadsg</span>(f, Float64, quad, (<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>), (<span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-c1">1</span>))
(result <span class="pl-k">=</span> <span class="pl-c1">4.000007629394531</span>, nevals <span class="pl-k">=</span> <span class="pl-c1">84481</span>)</pre></div>
<p dir="auto">You can instead also update the quadrature method <code>quad</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using SparseGridQuadrature

julia&gt; lmax = 10
10

julia&gt; quad = SGQuadrature{4,Float64}(lmax);

julia&gt; transform_domain_size!(quad, (0,0,0,0), (1,1,1,1));

julia&gt; f(x) = 3 * sum(x.^2)
f (generic function with 1 method)

julia&gt; quadsg(f, Float64, quad)
(result = 4.000007629394531, nevals = 84481)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> SparseGridQuadrature

julia<span class="pl-k">&gt;</span> lmax <span class="pl-k">=</span> <span class="pl-c1">10</span>
<span class="pl-c1">10</span>

julia<span class="pl-k">&gt;</span> quad <span class="pl-k">=</span> <span class="pl-c1">SGQuadrature</span><span class="pl-c1">{4,Float64}</span>(lmax);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">transform_domain_size!</span>(quad, (<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>), (<span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-c1">1</span>));

julia<span class="pl-k">&gt;</span> <span class="pl-en">f</span>(x) <span class="pl-k">=</span> <span class="pl-c1">3</span> <span class="pl-k">*</span> <span class="pl-c1">sum</span>(x<span class="pl-k">.^</span><span class="pl-c1">2</span>)
f (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">quadsg</span>(f, Float64, quad)
(result <span class="pl-k">=</span> <span class="pl-c1">4.000007629394531</span>, nevals <span class="pl-k">=</span> <span class="pl-c1">84481</span>)</pre></div>
<h2 dir="auto"><a id="user-content-chebyshev-gauss-quadrature" class="anchor" aria-hidden="true" href="#chebyshev-gauss-quadrature"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Chebyshev-Gauss quadrature</h2>
<p dir="auto">The quadrature method can also be updated to use a <a href="https://en.wikipedia.org/wiki/Chebyshev%E2%80%93Gauss_quadrature" rel="nofollow">Chebyshev-Gauss
quadrature</a>
instead of the standard trapezoidal rule:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using SparseGridQuadrature

julia&gt; lmax = 14
14

julia&gt; quad = SGQuadrature{4,Float64}(lmax);

julia&gt; transform_chebyshev_gauss!(quad);

julia&gt; transform_domain_size!(quad, (0,0,0,0), (1,1,1,1));

julia&gt; f(x) = 3 * sum(x.^2)
f (generic function with 1 method)

julia&gt; quadsg(f, Float64, quad)
(result = 3.9995680385705787, nevals = 178177)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> SparseGridQuadrature

julia<span class="pl-k">&gt;</span> lmax <span class="pl-k">=</span> <span class="pl-c1">14</span>
<span class="pl-c1">14</span>

julia<span class="pl-k">&gt;</span> quad <span class="pl-k">=</span> <span class="pl-c1">SGQuadrature</span><span class="pl-c1">{4,Float64}</span>(lmax);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">transform_chebyshev_gauss!</span>(quad);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">transform_domain_size!</span>(quad, (<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>), (<span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-c1">1</span>));

julia<span class="pl-k">&gt;</span> <span class="pl-en">f</span>(x) <span class="pl-k">=</span> <span class="pl-c1">3</span> <span class="pl-k">*</span> <span class="pl-c1">sum</span>(x<span class="pl-k">.^</span><span class="pl-c1">2</span>)
f (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">quadsg</span>(f, Float64, quad)
(result <span class="pl-k">=</span> <span class="pl-c1">3.9995680385705787</span>, nevals <span class="pl-k">=</span> <span class="pl-c1">178177</span>)</pre></div>
<p dir="auto">Unfortunately, this is less accurate than the simple trapezoidal rule,
although more evaluation points are used. I assume the reason is that
a sparse grid quadrature already emphasizes the boundary points, which
already captures much of the advantage of the Chebyshev-Gauss rules
which also clusters points near the boundary. Also, switching to a
Chebyshev-Gauss rule then spreads out the points in the interior
requiring more points overall (a larger <code>lmax</code>).</p>
<p dir="auto">Note the order in which the two transformations (the Chebyshev-Gauss
transformation and the change of integration domain) are applied. The
domain size transformation appears last, which means it will be the
first transformation that is visible to the integration kernel.</p>
<h2 dir="auto"><a id="user-content-tanh-sinh-quadrature" class="anchor" aria-hidden="true" href="#tanh-sinh-quadrature"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Tanh-sinh quadrature</h2>
<p dir="auto">The quadrature method can also be updated to use a <a href="https://en.wikipedia.org/wiki/Tanh-sinh_quadrature" rel="nofollow">tanh-sinh
quadrature</a>
instead of the standard trapezoidal rule. This is useful when the
integrand is singular at the boundary:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using SparseGridQuadrature

julia&gt; lmax = 14
14

julia&gt; quad = SGQuadrature{4,Float64}(lmax);

julia&gt; transform_tanh_sinh!(quad);

julia&gt; f(x) = 1 / sqrt(prod(1 .- x .^ 2))
f (generic function with 1 method)

julia&gt; quadsg(f, Float64, quad)
(result = 97.40908811445765, nevals = 178177)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> SparseGridQuadrature

julia<span class="pl-k">&gt;</span> lmax <span class="pl-k">=</span> <span class="pl-c1">14</span>
<span class="pl-c1">14</span>

julia<span class="pl-k">&gt;</span> quad <span class="pl-k">=</span> <span class="pl-c1">SGQuadrature</span><span class="pl-c1">{4,Float64}</span>(lmax);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">transform_tanh_sinh!</span>(quad);

julia<span class="pl-k">&gt;</span> <span class="pl-en">f</span>(x) <span class="pl-k">=</span> <span class="pl-c1">1</span> <span class="pl-k">/</span> <span class="pl-c1">sqrt</span>(<span class="pl-c1">prod</span>(<span class="pl-c1">1</span> <span class="pl-k">.-</span> x <span class="pl-k">.^</span> <span class="pl-c1">2</span>))
f (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">quadsg</span>(f, Float64, quad)
(result <span class="pl-k">=</span> <span class="pl-c1">97.40908811445765</span>, nevals <span class="pl-k">=</span> <span class="pl-c1">178177</span>)</pre></div>
<p dir="auto">The expected result is <code>π^4 = 97.40909103400243</code>, the quadrature error
is <code>3⋅10^-8</code>.</p>
<h2 dir="auto"><a id="user-content-other-examples" class="anchor" aria-hidden="true" href="#other-examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Other examples</h2>
<p dir="auto">The test cases contains additional examples, including more examples
of integrating singular functions.</p>
<h2 dir="auto"><a id="user-content-references" class="anchor" aria-hidden="true" href="#references"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>References</h2>
<p dir="auto">Thomas Gerstner, Michael Griebel, "Numerical integration using sparse
grids", Numerical Algorithms <strong>18</strong>, 209 (1998), DOI
<a href="https://doi.org/10.1023/A:1019129717644" rel="nofollow">10.1023/A:1019129717644</a>.</p>
<h2 dir="auto"><a id="user-content-related-work" class="anchor" aria-hidden="true" href="#related-work"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Related work</h2>
<p dir="auto">Sparse grid quadrature for "Gaussian" integrals:
<a href="https://github.com/robertdj/SparseGrids.jl">SparseGrids.jl</a></p>
</article></div>