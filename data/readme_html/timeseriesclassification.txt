<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-mljtime" class="anchor" aria-hidden="true" href="#mljtime"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>MLJTime</h1>
<p>An <a href="https://github.com/alan-turing-institute/MLJ.jl">MLJ</a> compatible Julia toolbox for machine learning with
time series.</p>
<p><a href="https://github.com/alan-turing-institute/MLJTime.jl/actions"><img src="https://github.com/alan-turing-institute/MLJTime.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width:100%;"></a>
<a href="http://codecov.io/github/alan-turing-institute/MLJTime.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/067e5fc81593d295b5af2499f1c803b0631895196266b5f18e7d63cae7abfc87/687474703a2f2f636f6465636f762e696f2f6769746875622f616c616e2d747572696e672d696e737469747574652f4d4c4a54696d652e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="Coverage" data-canonical-src="http://codecov.io/github/alan-turing-institute/MLJTime.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>To install MLJTime.jl, launch Julia and run:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="]add &quot;https://github.com/alan-turing-institute/MLJTime.jl.git&quot;
"><pre>]add <span class="pl-s"><span class="pl-pds">"</span>https://github.com/alan-turing-institute/MLJTime.jl.git<span class="pl-pds">"</span></span></pre></div>
<p>MLJTime.jl requires Julia version 1.0 or greater.</p>
<h2><a id="user-content-quickstart" class="anchor" aria-hidden="true" href="#quickstart"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Quickstart</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using MLJTime

# load data
X, y = ts_dataset(&quot;Chinatown&quot;)

# split data into training and test set
train, test = partition(eachindex(y), 0.7, shuffle=true, rng=1234) #70:30 split
X_train, y_train = X[train], y[train];
X_test, y_test = X[test], y[test];

# train model
model = TimeSeriesForestClassifier(n_trees=3)
mach = machine(model, matrix(X_train), y_train)
fit!(mach)

# make predictions
y_pred = predict_mode(mach, matrix(X_train))
"><pre><span class="pl-k">using</span> MLJTime

<span class="pl-c"><span class="pl-c">#</span> load data</span>
X, y <span class="pl-k">=</span> <span class="pl-c1">ts_dataset</span>(<span class="pl-s"><span class="pl-pds">"</span>Chinatown<span class="pl-pds">"</span></span>)

<span class="pl-c"><span class="pl-c">#</span> split data into training and test set</span>
train, test <span class="pl-k">=</span> <span class="pl-c1">partition</span>(<span class="pl-c1">eachindex</span>(y), <span class="pl-c1">0.7</span>, shuffle<span class="pl-k">=</span><span class="pl-c1">true</span>, rng<span class="pl-k">=</span><span class="pl-c1">1234</span>) <span class="pl-c"><span class="pl-c">#</span>70:30 split</span>
X_train, y_train <span class="pl-k">=</span> X[train], y[train];
X_test, y_test <span class="pl-k">=</span> X[test], y[test];

<span class="pl-c"><span class="pl-c">#</span> train model</span>
model <span class="pl-k">=</span> <span class="pl-c1">TimeSeriesForestClassifier</span>(n_trees<span class="pl-k">=</span><span class="pl-c1">3</span>)
mach <span class="pl-k">=</span> <span class="pl-c1">machine</span>(model, <span class="pl-c1">matrix</span>(X_train), y_train)
<span class="pl-c1">fit!</span>(mach)

<span class="pl-c"><span class="pl-c">#</span> make predictions</span>
y_pred <span class="pl-k">=</span> <span class="pl-c1">predict_mode</span>(mach, <span class="pl-c1">matrix</span>(X_train))</pre></div>
<h2><a id="user-content-documentation" class="anchor" aria-hidden="true" href="#documentation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Documentation</h2>
<p>To find out more, check out our:</p>
<ul>
<li><a href="https://nextjournal.com/aa25desh" rel="nofollow">Blog post</a></li>
<li><a href="https://github.com/aa25desh/MLJTimeTutorials.jl">Tutorial</a></li>
</ul>
<h2><a id="user-content-future-work" class="anchor" aria-hidden="true" href="#future-work"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Future work</h2>
<p>In future work, we want to add:</p>
<ul>
<li>Support for multivariate time series,</li>
<li>Shapelet based classification algorithms,</li>
<li>Enhancements to KNN (KDTree and BallTree algorithms),</li>
<li>Forecasting framework.</li>
</ul>
<h2><a id="user-content-how-contribute" class="anchor" aria-hidden="true" href="#how-contribute"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>How contribute</h2>
<ul>
<li>If you are interested, please raise an issue or get in touch with the MLJTime team on slack.</li>
</ul>
<h2><a id="user-content-about-the-project" class="anchor" aria-hidden="true" href="#about-the-project"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>About the project</h2>
<p>This project was originally developed as part of the Google Summer of Code 2020 with the support of the Julia community and my mentors <a href="https://warwick.ac.uk/fac/sci/maths/people/staff/vollmer/" rel="nofollow">Sebastian Vollmer</a> and <a href="https://github.com/mloning">Markus Löning</a>.</p>
<p>Active maintainers:</p>
<ul>
<li><a href="https://github.com/aa25desh">Aadesh Deshmukh</a></li>
<li>Markus Löning</li>
<li>Sebastian Vollmer</li>
</ul>
</article></div>