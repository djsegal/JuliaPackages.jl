<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-pipebraces--" class="anchor" aria-hidden="true" href="#pipebraces--"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Pipebraces <code>|&gt; {}</code></h1>
<p dir="auto">A small extension to the surface syntax of <code>Julia Base</code>, which provides a convenient piping tool for prototyping.</p>
<h2 dir="auto"><a id="user-content-with-this-extension-you-can-do-" class="anchor" aria-hidden="true" href="#with-this-extension-you-can-do-"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>With this extension you can do ...</h2>
<ul dir="auto">
<li><code>last(first(["hello", "world"]))</code> could be piping with braces as below.</li>
</ul>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; [&quot;hello&quot;, &quot;world&quot;] |&gt; {
       first;
       last
       }
'o': ASCII/Unicode U+006F (category Ll: Letter, lowercase)"><pre>julia<span class="pl-k">&gt;</span> [<span class="pl-s"><span class="pl-pds">"</span>hello<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>world<span class="pl-pds">"</span></span>] <span class="pl-k">|&gt;</span> {
       first;
       last
       }
<span class="pl-s"><span class="pl-pds">'</span>o<span class="pl-pds">'</span></span>: ASCII<span class="pl-k">/</span>Unicode U<span class="pl-k">+</span><span class="pl-c1">006</span>F (category Ll<span class="pl-k">:</span> Letter, lowercase)</pre></div>
<ul dir="auto">
<li><code>(first(["hello", "world"]), last(["hello", "world"]))</code> could be keyed in as below.</li>
</ul>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; [&quot;hello&quot;, &quot;world&quot;] |&gt; {
       first last
       }
(&quot;hello&quot;, &quot;world&quot;)"><pre>julia<span class="pl-k">&gt;</span> [<span class="pl-s"><span class="pl-pds">"</span>hello<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>world<span class="pl-pds">"</span></span>] <span class="pl-k">|&gt;</span> {
       first last
       }
(<span class="pl-s"><span class="pl-pds">"</span>hello<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>world<span class="pl-pds">"</span></span>)</pre></div>
<ul dir="auto">
<li>Please note that <code>{f;g}</code> is like a column while <code>{f g}</code> is like a row.
In fact it has been deprecated matrix syntax in Julia and the curly braces follows the same concatenation notation as square brackets <code>[]</code>. So the vertical concatenation
<code>{f;g}</code> is the same as</li>
</ul>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="       { f
         g
       }"><pre>       { f
         g
       }</pre></div>
<p dir="auto">Although you could use comma too, like <code>{f,g}</code>, it's not always the case, especially when a row <code>{f g}</code> or a macro <code>{@m f}</code> was involved in the braces. So it's recommended to seperate functions in braces by newline or semicolon.</p>
<ul dir="auto">
<li>Also, you could <code>println</code> intermiate results. Eg. the output of the step 1 in the following example, is printed with three dots "...".</li>
</ul>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; [&quot;hello&quot;, &quot;world&quot;] |&gt; {
       join(_, &quot;, &quot;) * '!'; println
       uppercasefirst
       }
... hello, world!
&quot;Hello, world!&quot;"><pre>julia<span class="pl-k">&gt;</span> [<span class="pl-s"><span class="pl-pds">"</span>hello<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>world<span class="pl-pds">"</span></span>] <span class="pl-k">|&gt;</span> {
       <span class="pl-c1">join</span>(_, <span class="pl-s"><span class="pl-pds">"</span>, <span class="pl-pds">"</span></span>) <span class="pl-k">*</span> <span class="pl-s"><span class="pl-pds">'</span>!<span class="pl-pds">'</span></span>; println
       uppercasefirst
       }
<span class="pl-k">...</span> hello, world!
<span class="pl-s"><span class="pl-pds">"</span>Hello, world!<span class="pl-pds">"</span></span></pre></div>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<ul dir="auto">
<li>When loading the package, a binary choice question shows up.</li>
</ul>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using Pipebraces
Piping directly (y) or using the macro `@pb` (otherwise) ? [y] : "><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Pipebraces
Piping directly (y) or <span class="pl-k">using</span> the <span class="pl-k">macro</span> <span class="pl-s"><span class="pl-pds">`</span>@pb<span class="pl-pds">`</span></span> (otherwise) <span class="pl-k">?</span> [y] <span class="pl-k">:</span> </pre></div>
<p dir="auto">The former choice is the default, i.e., when you hit enter key or input nothing in about 4 seconds, you could pipe without calling the macro in an REPL where users can set <code>Base.active_repl_backend.ast_transforms</code>.</p>
<ul dir="auto">
<li>In Pluto notebooks, where <code>Base.active_repl_backend.ast_transforms</code> is not defined, you might just use the macro by <code>using Pipebraces: @pb</code> and ignore the question.</li>
</ul>
<h3 dir="auto"><a id="user-content-lets-walk-through-a-typical-example" class="anchor" aria-hidden="true" href="#lets-walk-through-a-typical-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Let's walk through a typical example.</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using DataFrames

julia&gt; abspath(DEPOT_PATH[3], &quot;base&quot;) |&gt; {
        # use `_` to specify the position of the argument
        Cmd([&quot;grep&quot;, &quot;-r&quot;, &quot;braces&quot;, _])
        # by default it piped into the first argument when there are no `_` or `__` (Cf. next section for anonymous functions)
        read(String)
        # however you need specify the position of the argument 
        # when it's not a simple function call
        split(_, '\n', keepempty=false)[1:min(20, end)]
        # in dot syntax you also need specify the position of the argument
        split.(_, r&quot;(?&lt;=\.jl):&quot;)
        # multiple functions with space(s) in one line would output a tuple
        # also can't use either one or two `@.` for the two functions in the row, i.e., `basename` and `string`
        basename.(getindex.(_,1)) string.(getindex.(_,2))
        DataFrame(file=_[1], line=_[2])
        }
7×2 DataFrame
 Row │ file            line                              
     │ String          String                            
─────┼───────────────────────────────────────────────────
   1 │ show.jl                                  :braces…
   2 │ show.jl                 if head === :vcat || hea…
   3 │ show.jl                     parens = (isa(a1,Exp…
   4 │ basedocs.jl     Curly braces are used to specify…
   5 │ basedocs.jl     Square braces are used for [inde…
   6 │ namedtuple.jl       Meta.isexpr(ex, :braces) || …
   7 │ toml_parser.jl          # SPEC: No newlines are …
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> DataFrames

julia<span class="pl-k">&gt;</span> <span class="pl-c1">abspath</span>(<span class="pl-c1">DEPOT_PATH</span>[<span class="pl-c1">3</span>], <span class="pl-s"><span class="pl-pds">"</span>base<span class="pl-pds">"</span></span>) <span class="pl-k">|&gt;</span> {
        <span class="pl-c"><span class="pl-c">#</span> use `_` to specify the position of the argument</span>
        <span class="pl-c1">Cmd</span>([<span class="pl-s"><span class="pl-pds">"</span>grep<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>-r<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>braces<span class="pl-pds">"</span></span>, _])
        <span class="pl-c"><span class="pl-c">#</span> by default it piped into the first argument when there are no `_` or `__` (Cf. next section for anonymous functions)</span>
        <span class="pl-c1">read</span>(String)
        <span class="pl-c"><span class="pl-c">#</span> however you need specify the position of the argument </span>
        <span class="pl-c"><span class="pl-c">#</span> when it's not a simple function call</span>
        <span class="pl-c1">split</span>(_, <span class="pl-s"><span class="pl-pds">'</span><span class="pl-cce">\n</span><span class="pl-pds">'</span></span>, keepempty<span class="pl-k">=</span><span class="pl-c1">false</span>)[<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">min</span>(<span class="pl-c1">20</span>, <span class="pl-k">end</span>)]
        <span class="pl-c"><span class="pl-c">#</span> in dot syntax you also need specify the position of the argument</span>
        <span class="pl-c1">split</span>.(_, <span class="pl-sr"><span class="pl-pds">r"</span>(?&lt;=<span class="pl-cce">\.</span>jl):<span class="pl-pds">"</span></span>)
        <span class="pl-c"><span class="pl-c">#</span> multiple functions with space(s) in one line would output a tuple</span>
        <span class="pl-c"><span class="pl-c">#</span> also can't use either one or two `@.` for the two functions in the row, i.e., `basename` and `string`</span>
        <span class="pl-c1">basename</span>.(<span class="pl-c1">getindex</span>.(_,<span class="pl-c1">1</span>)) <span class="pl-c1">string</span>.(<span class="pl-c1">getindex</span>.(_,<span class="pl-c1">2</span>))
        <span class="pl-c1">DataFrame</span>(file<span class="pl-k">=</span>_[<span class="pl-c1">1</span>], line<span class="pl-k">=</span>_[<span class="pl-c1">2</span>])
        }
<span class="pl-c1">7</span><span class="pl-k">×</span><span class="pl-c1">2</span> DataFrame
 Row │ file            line                              
     │ String          String                            
─────┼───────────────────────────────────────────────────
   <span class="pl-c1">1</span> │ show<span class="pl-k">.</span>jl                                  <span class="pl-c1">:braces</span>…
   <span class="pl-c1">2</span> │ show<span class="pl-k">.</span>jl                 <span class="pl-k">if</span> head <span class="pl-k">===</span> <span class="pl-c1">:vcat</span> <span class="pl-k">||</span> hea…
   <span class="pl-c1">3</span> │ show<span class="pl-k">.</span>jl                     parens <span class="pl-k">=</span> (<span class="pl-c1">isa</span>(a1,Exp…
   <span class="pl-c1">4</span> │ basedocs<span class="pl-k">.</span>jl     Curly braces are used to specify…
   <span class="pl-c1">5</span> │ basedocs<span class="pl-k">.</span>jl     Square braces are used <span class="pl-k">for</span> [inde…
   <span class="pl-c1">6</span> │ namedtuple<span class="pl-k">.</span>jl       Meta<span class="pl-k">.</span><span class="pl-c1">isexpr</span>(ex, <span class="pl-c1">:braces</span>) <span class="pl-k">||</span> …
   <span class="pl-c1">7</span> │ toml_parser<span class="pl-k">.</span>jl          <span class="pl-c"><span class="pl-c">#</span> SPEC: No newlines are …</span>
</pre></div>
<h2 dir="auto"><a id="user-content-shortcut-for-anonymous-functions" class="anchor" aria-hidden="true" href="#shortcut-for-anonymous-functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Shortcut for anonymous functions</h2>
<ul dir="auto">
<li>In pipe braces you could write <code>_1 * 100 + _2</code> for the anonymous function <code>(x, y) -&gt; x *100 + y</code>. The variables one can name in the shortcut of anonymous functions should be in the pattern <code>r"^_\d*$"</code>. (one can't use variables <code>_</code> and <code>_00</code> simultaneously as this package would internally treat <code>_</code> as <code>_00</code>.)</li>
</ul>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using DataFrames

julia&gt; df = DataFrame(x = [1, 3, 2, 1], y = 1:4);
julia&gt; df |&gt; {
           filter([:x, :y] =&gt; _1 &gt; _2, __)
           transform([:x, :y] =&gt; _1 *100 + _2 =&gt; :z)
       }
1×3 DataFrame
 Row │ x      y      z     
     │ Int64  Int64  Int64 
─────┼─────────────────────
   1 │     3      2    302"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> DataFrames

julia<span class="pl-k">&gt;</span> df <span class="pl-k">=</span> <span class="pl-c1">DataFrame</span>(x <span class="pl-k">=</span> [<span class="pl-c1">1</span>, <span class="pl-c1">3</span>, <span class="pl-c1">2</span>, <span class="pl-c1">1</span>], y <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">4</span>);
julia<span class="pl-k">&gt;</span> df <span class="pl-k">|&gt;</span> {
           <span class="pl-c1">filter</span>([<span class="pl-c1">:x</span>, <span class="pl-c1">:y</span>] <span class="pl-k">=&gt;</span> _1 <span class="pl-k">&gt;</span> _2, __)
           <span class="pl-c1">transform</span>([<span class="pl-c1">:x</span>, <span class="pl-c1">:y</span>] <span class="pl-k">=&gt;</span> _1 <span class="pl-k">*</span><span class="pl-c1">100</span> <span class="pl-k">+</span> _2 <span class="pl-k">=&gt;</span> <span class="pl-c1">:z</span>)
       }
<span class="pl-c1">1</span><span class="pl-k">×</span><span class="pl-c1">3</span> DataFrame
 Row │ x      y      z     
     │ Int64  Int64  Int64 
─────┼─────────────────────
   <span class="pl-c1">1</span> │     <span class="pl-c1">3</span>      <span class="pl-c1">2</span>    <span class="pl-c1">302</span></pre></div>
<ul dir="auto">
<li>Use <code>__</code> instead of <code>_</code> to reprensent the piping argument here.
Eg. the row of <code>filter</code> in the example above. However, when <code>_</code> is not used for anonymous function, you can <strong>NOT</strong> use <code>__</code> (as no need to do it).</li>
<li>Only one anonymous function can be abbreviated this way per function call in the pipe.</li>
</ul>
<h2 dir="auto"><a id="user-content-the-last-but-not-least" class="anchor" aria-hidden="true" href="#the-last-but-not-least"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>The last but not least</h2>
<ul dir="auto">
<li>Multi-line function calls are not supported, like <code>map</code> with <code>do</code> block.</li>
<li>This package adopts the idea of using curly braces from the <a href="https://discourse.julialang.org/t/fixing-the-piping-chaining-issue-rev-3/90836" rel="nofollow">proposal</a>, but two implementations differ.</li>
</ul>
</article></div>