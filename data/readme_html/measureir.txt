<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p align="center">
  <a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/0f92d8ed41790d67596aa89aaa17dbedfdba882b42231b6701689e8b82ae270d/68747470733a2f2f73736672722e6769746875622e696f2f4d65617375726549522e6a6c2f726561646d655f69722e706e67"><img width="450" src="https://camo.githubusercontent.com/0f92d8ed41790d67596aa89aaa17dbedfdba882b42231b6701689e8b82ae270d/68747470733a2f2f73736672722e6769746875622e696f2f4d65617375726549522e6a6c2f726561646d655f69722e706e67" alt="Simulated Impulse Response Plot" data-canonical-src="https://ssfrr.github.io/MeasureIR.jl/readme_ir.png" style="max-width:100%;"></a>
</p>
<h1><a id="user-content-measureir" class="anchor" aria-hidden="true" href="#measureir"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>MeasureIR</h1>
<p><a href="https://travis-ci.org/ssfrr/MeasureIR.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/ba20926ff896cb053c2d3c4d07cb879217e0ca84257c24d124b58d30342004fe/68747470733a2f2f7472617669732d63692e6f72672f73736672722f4d65617375726549522e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/ssfrr/MeasureIR.jl.svg?branch=master" style="max-width:100%;"></a> <a href="https://coveralls.io/github/ssfrr/MeasureIR.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/62ef7316a535e4042400b96039ee23dd595aa9c9b171739b0e66078d0760a891/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f73736672722f4d65617375726549522e6a6c2f62616467652e7376673f6272616e63683d6d617374657226736572766963653d676974687562" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/ssfrr/MeasureIR.jl/badge.svg?branch=master&amp;service=github" style="max-width:100%;"></a> <a href="http://codecov.io/github/ssfrr/MeasureIR.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/c2e02feaf25d98fb31fbcec414ec0a46a11318290b9d5918ae0180b0c4803319/687474703a2f2f636f6465636f762e696f2f6769746875622f73736672722f4d65617375726549522e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/ssfrr/MeasureIR.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
<p>MeasureIR is a Julia library for measuring and analyzing <a href="https://en.wikipedia.org/wiki/Impulse_response" rel="nofollow">impulse responses</a> (IRs). Impulse responses are generally captured by playing some kind of test signal through the system under test, and then analyzing the response to extract the IR.</p>
<p>The simplest test signal is an actual impulse, like a gunshot, balloon pop, or hand clap. In this case there is no analysis necessary, because the recorded response is a direct impulse response. The downside to this simple approach is that the total energy in the impulse often can't be very large without overdriving the measurement equipment and causing nonlinearities.</p>
<p>For this reason it is more common to use other signals like pseudo-random noise or sine sweeps to characterize a system, as they can spread the energy over a longer time frame, which increases the signal-to-noise ratio of the measurement.</p>
<p>Measuring an impulse response takes place in the following steps:</p>
<ol>
<li>Create a measurement. The library currently supports <code>golay</code>, <code>expsweep</code>, <code>impulse</code>, <code>mls</code> (maximum-length sequence), and <code>rpms</code> (random phase multisine).</li>
<li>Generate a test signal for the measurement using <code>stimulus(m)</code>, where <code>m</code> is a measurement. This signal is a single-channel time-domain signal that could be played directly through a speaker/transducer, or saved to a file for later measurement.</li>
<li>Convolve the test signal with your system. This could be by playing the signal through a speaker into a room you're measuring, or using Julia's built-in <code>conv</code> function for testing. The result of this step should be a (possibly multichannel) response signal.</li>
<li>Analyze the system response to generate the impulse response. The form of this is <code>analyze(m, response)</code> where <code>m</code> is your measurement object and <code>response</code> is the measured output of your system in response to the stimuli.</li>
</ol>
<h2><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Plots: plot
using MeasureIR: golay, stimulus, analyze

meas = golay(4096)

# generate the test stimuli suitable for playback
stim = stimulus(meas)

# create a synthetic impulse response and simulate the system. This
# is where you'd normally play the stimuli through your system and
# record the response
irsim = 1./exp.(0:0.1:9.9) .* (rand(100) .- 0.5)
output = conv(stim, irsim)

# analyze to reconstruct the impulse response
ir = analyze(meas, output)

plot([irsim[1:100], ir[1:100]], labels=[&quot;Convolved IR&quot;, &quot;Measured IR&quot;])
"><pre><span class="pl-k">using</span> Plots<span class="pl-k">:</span> plot
<span class="pl-k">using</span> MeasureIR<span class="pl-k">:</span> golay, stimulus, analyze

meas <span class="pl-k">=</span> <span class="pl-c1">golay</span>(<span class="pl-c1">4096</span>)

<span class="pl-c"><span class="pl-c">#</span> generate the test stimuli suitable for playback</span>
stim <span class="pl-k">=</span> <span class="pl-c1">stimulus</span>(meas)

<span class="pl-c"><span class="pl-c">#</span> create a synthetic impulse response and simulate the system. This</span>
<span class="pl-c"><span class="pl-c">#</span> is where you'd normally play the stimuli through your system and</span>
<span class="pl-c"><span class="pl-c">#</span> record the response</span>
irsim <span class="pl-k">=</span> <span class="pl-c1">1.</span><span class="pl-k">/</span><span class="pl-c1">exp</span>.(<span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">0.1</span><span class="pl-k">:</span><span class="pl-c1">9.9</span>) <span class="pl-k">.*</span> (<span class="pl-c1">rand</span>(<span class="pl-c1">100</span>) <span class="pl-k">.-</span> <span class="pl-c1">0.5</span>)
output <span class="pl-k">=</span> <span class="pl-c1">conv</span>(stim, irsim)

<span class="pl-c"><span class="pl-c">#</span> analyze to reconstruct the impulse response</span>
ir <span class="pl-k">=</span> <span class="pl-c1">analyze</span>(meas, output)

<span class="pl-c1">plot</span>([irsim[<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">100</span>], ir[<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">100</span>]], labels<span class="pl-k">=</span>[<span class="pl-s"><span class="pl-pds">"</span>Convolved IR<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Measured IR<span class="pl-pds">"</span></span>])</pre></div>
<h2><a id="user-content-live-capture-with-portaudiojl" class="anchor" aria-hidden="true" href="#live-capture-with-portaudiojl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Live Capture with PortAudio.jl</h2>
<p>Rather than using an external program to play back the stimulus and record the
response, you can perform the test from within Julia using the PortAudio.jl
package.</p>
<p>This code snippet will play the stimulus <code>stim</code> through your sound card's default output (be careful, the golay stimulus not fun to listen to), and in parallel record through your default input.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using MeasureIR: golay, stimulus, analyze
using PortAudio: PortAudioStream

meas = golay(4*48000)
stim = stimulus(meas)

# run this block of code together, rather than each line individually
sleep(1) # sleep so we don't record the keystroke launching this code
str = PortAudioStream(synced=true)
@async write(str, stim*0.2)
resp = read(str, length(stim))
close(str)

ir = analyze(meas, resp)
"><pre><span class="pl-k">using</span> MeasureIR<span class="pl-k">:</span> golay, stimulus, analyze
<span class="pl-k">using</span> PortAudio<span class="pl-k">:</span> PortAudioStream

meas <span class="pl-k">=</span> <span class="pl-c1">golay</span>(<span class="pl-c1">4</span><span class="pl-k">*</span><span class="pl-c1">48000</span>)
stim <span class="pl-k">=</span> <span class="pl-c1">stimulus</span>(meas)

<span class="pl-c"><span class="pl-c">#</span> run this block of code together, rather than each line individually</span>
<span class="pl-c1">sleep</span>(<span class="pl-c1">1</span>) <span class="pl-c"><span class="pl-c">#</span> sleep so we don't record the keystroke launching this code</span>
str <span class="pl-k">=</span> <span class="pl-c1">PortAudioStream</span>(synced<span class="pl-k">=</span><span class="pl-c1">true</span>)
<span class="pl-c1">@async</span> <span class="pl-c1">write</span>(str, stim<span class="pl-k">*</span><span class="pl-c1">0.2</span>)
resp <span class="pl-k">=</span> <span class="pl-c1">read</span>(str, <span class="pl-c1">length</span>(stim))
<span class="pl-c1">close</span>(str)

ir <span class="pl-k">=</span> <span class="pl-c1">analyze</span>(meas, resp)</pre></div>
</article></div>