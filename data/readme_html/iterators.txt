<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-iteratorsjl" class="anchor" aria-hidden="true" href="#iteratorsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Iterators.jl</h1>
<p><a href="http://pkg.julialang.org/?pkg=Iterators&amp;ver=0.4" rel="nofollow"><img src="https://camo.githubusercontent.com/227cd578479328996f7d02bd3ff26356202ebff1/687474703a2f2f706b672e6a756c69616c616e672e6f72672f6261646765732f4974657261746f72735f302e342e737667" alt="Iterators" data-canonical-src="http://pkg.julialang.org/badges/Iterators_0.4.svg" style="max-width:100%;"></a>
<a href="http://pkg.julialang.org/?pkg=Iterators&amp;ver=0.5" rel="nofollow"><img src="https://camo.githubusercontent.com/99aa987a385c85ab47f4fed2753846301828fae5/687474703a2f2f706b672e6a756c69616c616e672e6f72672f6261646765732f4974657261746f72735f302e352e737667" alt="Iterators" data-canonical-src="http://pkg.julialang.org/badges/Iterators_0.5.svg" style="max-width:100%;"></a></p>
<p><a href="https://travis-ci.org/JuliaCollections/Iterators.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/6f7b1437cba662e1a49643fd7ad50a8fe955eb8d/68747470733a2f2f7472617669732d63692e6f72672f4a756c6961436f6c6c656374696f6e732f4974657261746f72732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaCollections/Iterators.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/JuliaCollections/Iterators.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/c14a553274753b76e926e7c911ccf8820b4f5ad2/68747470733a2f2f636f6465636f762e696f2f67682f4a756c6961436f6c6c656374696f6e732f4974657261746f72732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage Status" data-canonical-src="https://codecov.io/gh/JuliaCollections/Iterators.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p>Common functional iterator patterns.</p>
<h2><a id="user-content-deprecation" class="anchor" aria-hidden="true" href="#deprecation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>DEPRECATION</h2>
<p>Iterators.jl has been deprecated in favour of <a href="https://github.com/JuliaCollections/IterTools.jl">IterTools.jl</a>.
Please update your package dependencies: Iterators 0.3.1 maps to IterTools 0.1.0.</p>
<p>See <a href="https://github.com/JuliaCollections/Iterators.jl/issues/104">#104</a> for more information.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Installation</h2>
<p>Install this package with <code>Pkg.add("Iterators")</code></p>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Usage</h2>
<hr>
<ul>
<li>
<p><strong>takestrict</strong>(xs, n)</p>
<p>Equivalent to <code>take</code>, but will throw an exception if fewer than <code>n</code> items
are encountered in <code>xs</code>.</p>
</li>
<li>
<p><strong>repeatedly</strong>(f, [n])</p>
<p>Call a function <code>n</code> times, or infinitely if <code>n</code> is omitted.</p>
<p>Example:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">for</span> t <span class="pl-k">in</span> <span class="pl-c1">repeatedly</span>(time_ns, <span class="pl-c1">3</span>)
    <span class="pl-c1">@show</span> t
<span class="pl-k">end</span></pre></div>
<pre><code>t = 0x0000592ff83caf87
t = 0x0000592ff83d8cf4
t = 0x0000592ff83dd11e
</code></pre>
</li>
<li>
<p><strong>chain</strong>(xs...)</p>
<p>Iterate through any number of iterators in sequence.</p>
<p>Example:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">chain</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">3</span>, [<span class="pl-s"><span class="pl-pds">'</span>a<span class="pl-pds">'</span></span>, <span class="pl-s"><span class="pl-pds">'</span>b<span class="pl-pds">'</span></span>, <span class="pl-s"><span class="pl-pds">'</span>c<span class="pl-pds">'</span></span>])
    <span class="pl-c1">@show</span> i
<span class="pl-k">end</span></pre></div>
<pre><code>i = 1
i = 2
i = 3
i = 'a'
i = 'b'
i = 'c'
</code></pre>
</li>
<li>
<p><strong>product</strong>(xs...)</p>
<p>Iterate over all combinations in the cartesian product of the inputs.</p>
<p>Example:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">for</span> p <span class="pl-k">in</span> <span class="pl-c1">product</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">3</span>,<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span>)
    <span class="pl-c1">@show</span> p
<span class="pl-k">end</span></pre></div>
<p>yields</p>
<pre><code>p = (1,1)
p = (2,1)
p = (3,1)
p = (1,2)
p = (2,2)
p = (3,2)
</code></pre>
</li>
<li>
<p><strong>distinct</strong>(xs)</p>
<p>Iterate through values skipping over those already encountered.</p>
<p>Example:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">distinct</span>([<span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">4</span>,<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>,<span class="pl-c1">4</span>])
    <span class="pl-c1">@show</span> i
<span class="pl-k">end</span></pre></div>
<pre><code>i = 1
i = 2
i = 4
i = 3
</code></pre>
</li>
<li>
<p><strong>nth</strong>(xs, n)</p>
<p>Return the n'th element of <code>xs</code>. Mostly useful for non indexable collections.</p>
<p>Example:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">nth</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">3</span>, <span class="pl-c1">3</span>)</pre></div>
<pre><code>3
</code></pre>
</li>
<li>
<p><strong>takenth</strong>(xs, n)</p>
<p>Iterate through every n'th element of <code>xs</code></p>
<p>Example:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">collect</span>(<span class="pl-c1">takenth</span>(<span class="pl-c1">5</span><span class="pl-k">:</span><span class="pl-c1">15</span>,<span class="pl-c1">3</span>))</pre></div>
<pre><code>3-element Array{Int32,1}:
  7
 10
 13
</code></pre>
</li>
<li>
<p><strong>partition</strong>(xs, n, [step])</p>
<p>Group values into <code>n</code>-tuples.</p>
<p>Example:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">partition</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">9</span>, <span class="pl-c1">3</span>)
    <span class="pl-c1">@show</span> i
<span class="pl-k">end</span></pre></div>
<pre><code>i = (1,2,3)
i = (4,5,6)
i = (7,8,9)
</code></pre>
<p>If the <code>step</code> parameter is set, each tuple is separated by <code>step</code> values.</p>
<p>Example:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">partition</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">9</span>, <span class="pl-c1">3</span>, <span class="pl-c1">2</span>)
    <span class="pl-c1">@show</span> i
<span class="pl-k">end</span></pre></div>
<pre><code>i = (1,2,3)
i = (3,4,5)
i = (5,6,7)
i = (7,8,9)
</code></pre>
</li>
<li>
<p><strong>groupby</strong>(f, xs)</p>
<p>Group consecutive values that share the same result of applying <code>f</code>.</p>
<p>Example:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">groupby</span>(x <span class="pl-k">-&gt;</span> x[<span class="pl-c1">1</span>], [<span class="pl-s"><span class="pl-pds">"</span>face<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>foo<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>bar<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>book<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>baz<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>zzz<span class="pl-pds">"</span></span>])
    <span class="pl-c1">@show</span> i
<span class="pl-k">end</span></pre></div>
<pre><code>i = ASCIIString["face","foo"]
i = ASCIIString["bar","book","baz"]
i = ASCIIString["zzz"]
</code></pre>
</li>
<li>
<p><strong>imap</strong>(f, xs1, [xs2, ...])</p>
<p>Iterate over values of a function applied to successive values from one or
more iterators.</p>
<p>Example:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">imap</span>(<span class="pl-k">+</span>, [<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>], [<span class="pl-c1">4</span>,<span class="pl-c1">5</span>,<span class="pl-c1">6</span>])
     <span class="pl-c1">@show</span> i
<span class="pl-k">end</span></pre></div>
<pre><code>i = 5
i = 7
i = 9
</code></pre>
</li>
<li>
<p><strong>subsets</strong>(xs)</p>
<p>Iterate over every subset of a collection <code>xs</code>.</p>
<p>Example:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">subsets</span>([<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>])
 <span class="pl-c1">@show</span> i
<span class="pl-k">end</span></pre></div>
<pre><code>i = []
i = [1]
i = [2]
i = [1,2]
i = [3]
i = [1,3]
i = [2,3]
i = [1,2,3]
</code></pre>
</li>
<li>
<p><strong>subsets</strong>(xs, k)</p>
<p>Iterate over every subset of size <code>k</code> from a collection <code>xs</code>.</p>
<p>Example:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">subsets</span>([<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>],<span class="pl-c1">2</span>)
 <span class="pl-c1">@show</span> i
<span class="pl-k">end</span></pre></div>
<pre><code>i = [1,2]
i = [1,3]
i = [2,3]
</code></pre>
</li>
<li>
<p><strong>peekiter</strong>(xs)</p>
<p>Add possibility to peek head element of an iterator without updating the state.</p>
<p>Example:</p>
<div class="highlight highlight-source-julia"><pre>it <span class="pl-k">=</span> <span class="pl-c1">peekiter</span>([<span class="pl-s"><span class="pl-pds">"</span>face<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>foo<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>bar<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>book<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>baz<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>zzz<span class="pl-pds">"</span></span>])
s <span class="pl-k">=</span> <span class="pl-c1">start</span>(it)
<span class="pl-c1">@show</span> <span class="pl-c1">peek</span>(it, s)
<span class="pl-c1">@show</span> <span class="pl-c1">peek</span>(it, s)
x, s <span class="pl-k">=</span> <span class="pl-c1">next</span>(it, s)
<span class="pl-c1">@show</span> x
<span class="pl-c1">@show</span> <span class="pl-c1">peek</span>(it, s)</pre></div>
<pre><code>peek(it,s) = Nullable("face")
peek(it,s) = Nullable("face") # no change
x = "face"
peek(it,s) = Nullable("foo")
</code></pre>
</li>
<li>
<p><strong>ncycle</strong>(xs,n)</p>
<p>Cycles through an iterator <code>n</code> times</p>
<p>Example:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">ncycle</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">3</span>, <span class="pl-c1">2</span>)
    <span class="pl-c1">@show</span> i
<span class="pl-k">end</span></pre></div>
<pre><code>i = 1
i = 2
i = 3
i = 1
i = 2
i = 3
</code></pre>
</li>
<li>
<p><strong>iterate</strong>(f, x)</p>
<p>Iterate over successive applications of <code>f</code>, as in <code>f(x), f(f(x)), f(f(f(x))), ...</code>.</p>
<p>Example:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">take</span>(<span class="pl-c1">iterate</span>(x <span class="pl-k">-&gt;</span> <span class="pl-c1">2</span>x, <span class="pl-c1">1</span>), <span class="pl-c1">5</span>)
    <span class="pl-c1">@show</span> i
<span class="pl-k">end</span></pre></div>
<pre><code>i = 1
i = 2
i = 4
i = 8
i = 16
</code></pre>
</li>
</ul>
<h2><a id="user-content-the-itr-macro-for-automatic-inlining-in-for-loops" class="anchor" aria-hidden="true" href="#the-itr-macro-for-automatic-inlining-in-for-loops"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>The <code>@itr</code> macro for automatic inlining in <code>for</code> loops</h2>
<p>Using functional iterators is powerful and concise, but may incur in some
overhead, and manually inlining the operations can typically improve
performance in critical parts of the code. The <code>@itr</code> macro is provided to do
that automatically in some cases. Its usage is trivial: for example, given this code:</p>
<pre><code>for (x,y) in zip(a,b)
    @show x,y
end
</code></pre>
<p>the automatically inlined version can be obtained by simply doing:</p>
<pre><code>@itr for (x,y) in zip(a,b)
    @show x,y
end
</code></pre>
<p>This typically results in faster code, but its applicability has limitations:</p>
<ul>
<li>it only works with <code>for</code> loops;</li>
<li>if multiple nested iterators are used, only the outermost is affected by the
transformation;</li>
<li>explicit expressions are required (i.e. when a <code>Tuple</code> is expected, an
explicit tuple must be provided, a tuple variable won't be accepted);</li>
<li>splicing is not supported;</li>
<li>multidimensional loops (i.e. expressions such as <code>for x in a, y in b</code>) are
not supported</li>
</ul>
<p>The <code>@itr</code> macro can be used with the following supported iterators:</p>
<ul>
<li>zip</li>
<li>enumerate</li>
<li>take</li>
<li>takestrict</li>
<li>drop</li>
<li>chain</li>
</ul>
</article></div>