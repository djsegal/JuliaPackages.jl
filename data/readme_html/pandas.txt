<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-pandasjl" class="anchor" aria-hidden="true" href="#pandasjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Pandas.jl</h1>
<p><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/10b02eb207cc0acb8fa51cada8a3e87eefecd238/68747470733a2f2f73746f726167652e676f6f676c65617069732e636f6d2f6d616c6d6175642d73747566662f70616e6461735f6c6f676f2e706e673f76657273696f6e3d32"><img src="https://camo.githubusercontent.com/10b02eb207cc0acb8fa51cada8a3e87eefecd238/68747470733a2f2f73746f726167652e676f6f676c65617069732e636f6d2f6d616c6d6175642d73747566662f70616e6461735f6c6f676f2e706e673f76657273696f6e3d32" alt="Pandas.jl logo" data-canonical-src="https://storage.googleapis.com/malmaud-stuff/pandas_logo.png?version=2" style="max-width:100%;"></a></p>
<p><a href="https://travis-ci.org/JuliaPy/Pandas.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/5333b99c9fba62fb6522b34d86518bbdb3e93937/68747470733a2f2f7472617669732d63692e6f72672f4a756c696150792f50616e6461732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Travis status" data-canonical-src="https://travis-ci.org/JuliaPy/Pandas.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p>This package provides a Julia interface to the excellent <a href="http://pandas.pydata.org/pandas-docs/stable/" rel="nofollow">Pandas</a> package. It sticks closely to the Pandas API. One exception is that integer-based indexing is automatically converted from Python's 0-based indexing to Julia's 1-based indexing.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>You must have Pandas installed. Usually you can do that on the command line by typing</p>
<pre><code>sudo pip install pandas
</code></pre>
<p>It also comes with the Anaconda and Enthought Python distributions.</p>
<p>Then in Julia, type</p>
<div class="highlight highlight-source-julia"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>Pandas<span class="pl-pds">"</span></span>)
<span class="pl-k">using</span> Pandas</pre></div>
<p>No-hassle installation is also available via Docker:</p>
<pre><code>docker run -it malmaud/julia_pandas
</code></pre>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<p>In general, if <code>df</code> is a Pandas object (such as a dataframe or series), then the Python command <code>df.x(y, w=z)</code> becomes <code>x(df, y, w=z)</code> in Julia. <code>df.loc[a,b,c]</code> becomes <code>loc(df)[a,b,c]</code> (same for <code>iloc</code> and <code>ix</code>). Example:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">&gt;&gt;</span> <span class="pl-k">using</span> Pandas
<span class="pl-k">&gt;&gt;</span> df <span class="pl-k">=</span> <span class="pl-c1">DataFrame</span>(<span class="pl-c1">Dict</span>(<span class="pl-c1">:age</span><span class="pl-k">=&gt;</span>[<span class="pl-c1">27</span>, <span class="pl-c1">29</span>, <span class="pl-c1">27</span>], <span class="pl-c1">:name</span><span class="pl-k">=&gt;</span>[<span class="pl-s"><span class="pl-pds">"</span>James<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Jill<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Jake<span class="pl-pds">"</span></span>]))
   age   name
<span class="pl-c1">0</span>   <span class="pl-c1">27</span>  James
<span class="pl-c1">1</span>   <span class="pl-c1">29</span>   Jill
<span class="pl-c1">2</span>   <span class="pl-c1">27</span>   Jake

[<span class="pl-c1">3</span> rows x <span class="pl-c1">2</span> columns]
<span class="pl-k">&gt;&gt;</span> <span class="pl-c1">describe</span>(df)
             age
count   <span class="pl-c1">3.000000</span>
mean   <span class="pl-c1">27.666667</span>
std     <span class="pl-c1">1.154701</span>
min    <span class="pl-c1">27.000000</span>
<span class="pl-c1">25</span><span class="pl-k">%</span>    <span class="pl-c1">27.000000</span>
<span class="pl-c1">50</span><span class="pl-k">%</span>    <span class="pl-c1">27.000000</span>
<span class="pl-c1">75</span><span class="pl-k">%</span>    <span class="pl-c1">28.000000</span>
max    <span class="pl-c1">29.000000</span>

[<span class="pl-c1">8</span> rows x <span class="pl-c1">1</span> columns]

df[<span class="pl-c1">:age</span>]
<span class="pl-c1">0</span>    <span class="pl-c1">27</span>
<span class="pl-c1">1</span>    <span class="pl-c1">29</span>
<span class="pl-c1">2</span>    <span class="pl-c1">27</span>
Name<span class="pl-k">:</span> age, dtype<span class="pl-k">:</span> int64

<span class="pl-k">&gt;&gt;</span> df2 <span class="pl-k">=</span> <span class="pl-c1">DataFrame</span>(<span class="pl-c1">Dict</span>(<span class="pl-c1">:income</span><span class="pl-k">=&gt;</span>[<span class="pl-c1">45</span>, <span class="pl-c1">101</span>, <span class="pl-c1">87</span>]), index<span class="pl-k">=</span>[<span class="pl-s"><span class="pl-pds">"</span>Jake<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>James<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Jill<span class="pl-pds">"</span></span>])
<span class="pl-k">&gt;&gt;</span> df3 <span class="pl-k">=</span> <span class="pl-c1">merge</span>(df, df2, left_on<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>name<span class="pl-pds">"</span></span>, right_index<span class="pl-k">=</span><span class="pl-c1">true</span>)
   age   name  income
<span class="pl-c1">0</span>   <span class="pl-c1">27</span>  James     <span class="pl-c1">101</span>
<span class="pl-c1">1</span>   <span class="pl-c1">29</span>   Jill      <span class="pl-c1">87</span>
<span class="pl-c1">2</span>   <span class="pl-c1">27</span>   Jake      <span class="pl-c1">45</span>

[<span class="pl-c1">3</span> rows x <span class="pl-c1">3</span> columns]

<span class="pl-k">&gt;&gt;</span> <span class="pl-c1">iloc</span>(df3)[<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span>, <span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">3</span>]
    name  income
<span class="pl-c1">0</span>  James     <span class="pl-c1">101</span>
<span class="pl-c1">1</span>   Jill      <span class="pl-c1">87</span>

[<span class="pl-c1">2</span> rows x <span class="pl-c1">2</span> columns]

<span class="pl-k">&gt;&gt;</span> <span class="pl-c1">mean</span>(<span class="pl-c1">groupby</span>(df3, <span class="pl-s"><span class="pl-pds">"</span>age<span class="pl-pds">"</span></span>)) <span class="pl-c"><span class="pl-c">#</span>Or groupby(df, "age3") |&gt; mean</span>
     income
age
<span class="pl-c1">27</span>       <span class="pl-c1">73</span>
<span class="pl-c1">29</span>       <span class="pl-c1">87</span>

[<span class="pl-c1">2</span> rows x <span class="pl-c1">1</span> columns]

<span class="pl-k">&gt;&gt;</span> <span class="pl-c1">query</span>(df3, :(income<span class="pl-k">&gt;</span><span class="pl-c1">85</span>)) <span class="pl-c"><span class="pl-c">#</span> or query(df3, "income&gt;85")</span>
   age   name  income
<span class="pl-c1">0</span>   <span class="pl-c1">27</span>  James     <span class="pl-c1">101</span>
<span class="pl-c1">1</span>   <span class="pl-c1">29</span>   Jill      <span class="pl-c1">87</span>

[<span class="pl-c1">2</span> rows x <span class="pl-c1">3</span> columns]

<span class="pl-k">&gt;&gt;</span> <span class="pl-c1">Array</span>(df3)
<span class="pl-c1">3</span>x3 Array{Any,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">27</span>  <span class="pl-s"><span class="pl-pds">"</span>James<span class="pl-pds">"</span></span>  <span class="pl-c1">101</span>
 <span class="pl-c1">29</span>  <span class="pl-s"><span class="pl-pds">"</span>Jill<span class="pl-pds">"</span></span>    <span class="pl-c1">87</span>
 <span class="pl-c1">27</span>  <span class="pl-s"><span class="pl-pds">"</span>Jake<span class="pl-pds">"</span></span>    <span class="pl-c1">45</span>

 <span class="pl-k">&gt;&gt;</span> <span class="pl-c1">plot</span>(df3)</pre></div>
<h2><a id="user-content-inputoutput" class="anchor" aria-hidden="true" href="#inputoutput"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Input/Output</h2>
<p>Example:</p>
<div class="highlight highlight-source-julia"><pre>df <span class="pl-k">=</span> <span class="pl-c1">read_csv</span>(<span class="pl-s"><span class="pl-pds">"</span>my_csv_file.csv<span class="pl-pds">"</span></span>) <span class="pl-c"><span class="pl-c">#</span> Read in a CSV file as a dataframe</span>
<span class="pl-c1">to_json</span>(df, <span class="pl-s"><span class="pl-pds">"</span>my_json_file.json<span class="pl-pds">"</span></span>) <span class="pl-c"><span class="pl-c">#</span> Save a dataframe to disk in JSON format</span></pre></div>
<h2><a id="user-content-performance" class="anchor" aria-hidden="true" href="#performance"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Performance</h2>
<p>Most Pandas operations on medium to large dataframes are very fast, since the overhead of calling into the Python API is small compared to the time spent inside Pandas' highly efficient C implementation.</p>
<p>Setting and getting individual elements of a dataframe or series is slow however, since it requires a round-trip of communication with Python for each operation. Instead, use the <code>values</code> method to get a version of a series or homogeneous dataframe that requires no copying and is as fast to access and write to as a Julia native array. Example:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">&gt;&gt;</span> x_series <span class="pl-k">=</span> <span class="pl-c1">Series</span>(<span class="pl-c1">randn</span>(<span class="pl-c1">10000</span>))
<span class="pl-k">&gt;&gt;</span> <span class="pl-c1">@time</span> x_series[<span class="pl-c1">1</span>]
elapsed time<span class="pl-k">:</span> <span class="pl-c1">0.000121945</span> seconds (<span class="pl-c1">2644</span> bytes allocated)
<span class="pl-k">&gt;&gt;</span> x_values <span class="pl-k">=</span> <span class="pl-c1">values</span>(x_series)
<span class="pl-k">&gt;&gt;</span> <span class="pl-c1">@time</span> x_values[<span class="pl-c1">1</span>]
elapsed time<span class="pl-k">:</span> <span class="pl-c1">2.041e-6</span> seconds (<span class="pl-c1">64</span> bytes allocated)
<span class="pl-k">&gt;&gt;</span> x_native <span class="pl-k">=</span> <span class="pl-c1">randn</span>(<span class="pl-c1">10000</span>)
<span class="pl-k">&gt;&gt;</span> <span class="pl-c1">@time</span> x_native[<span class="pl-c1">1</span>]
elapsed time<span class="pl-k">:</span> <span class="pl-c1">2.689e-6</span> seconds (<span class="pl-c1">64</span> bytes allocated)</pre></div>
<p>Changes to the values(...) array propogate back to the underlying series/dataframe:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">&gt;&gt;</span> <span class="pl-c1">iloc</span>(x_series)[<span class="pl-c1">1</span>]
<span class="pl-k">-</span><span class="pl-c1">0.38390854447454037</span>
<span class="pl-k">&gt;&gt;</span> x_values[<span class="pl-c1">1</span>] <span class="pl-k">=</span> <span class="pl-c1">10</span>
<span class="pl-k">&gt;&gt;</span> <span class="pl-c1">iloc</span>(x_series)[<span class="pl-c1">1</span>]
<span class="pl-c1">10</span></pre></div>
<h2><a id="user-content-caveats" class="anchor" aria-hidden="true" href="#caveats"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Caveats</h2>
<p>Panels-related functions are still unwrapped, as well as a few other obscure functions. Note that even if a function is not wrapped explicitly, it can still be called using various methods from <a href="https://github.com/stevengj/PyCall.jl">PyCall</a>.</p>
</article></div>