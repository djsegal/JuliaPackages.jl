<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-newpkgevaljl" class="anchor" aria-hidden="true" href="#newpkgevaljl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>NewPkgEval.jl</h1>
<p><em>Evaluate Julia packages.</em></p>
<h2><a id="user-content-quick-start" class="anchor" aria-hidden="true" href="#quick-start"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Quick start</h2>
<p>To use NewPkgEval.jl, you need to Docker and make sure you can start containers (typically,
you need to be a member of the <code>docker</code> group):</p>
<pre><code>$ docker run hello-world
Hello from Docker!
This message shows that your installation appears to be working correctly.
</code></pre>
<p>Start by installing the package:</p>
<div class="highlight highlight-source-shell"><pre>git clone https://github.com/JuliaComputing/NewPkgEval.jl.git
<span class="pl-c1">cd</span> NewPkgEval.jl
julia --project -e <span class="pl-s"><span class="pl-pds">'</span>import Pkg; Pkg.instantiate()<span class="pl-pds">'</span></span></pre></div>
<p>Then start Julia with <code>julia --project</code> and use the following commands to run the tests of a
list of packages on a selection of Julia versions:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> NewPkgEval

julia<span class="pl-k">&gt;</span> julia_versions <span class="pl-k">=</span> NewPkgEval<span class="pl-k">.</span><span class="pl-c1">obtain_julia</span>.([<span class="pl-s"><span class="pl-pds">"</span>1.3<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>nightly<span class="pl-pds">"</span></span>])
<span class="pl-c1">2</span><span class="pl-k">-</span>element Array{VersionNumber,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-s"><span class="pl-pds"><span class="pl-c1">v</span>"</span>1.3.0<span class="pl-pds">"</span></span>
 <span class="pl-s"><span class="pl-pds"><span class="pl-c1">v</span>"</span>1.4.0-DEV-3c182bc5c2<span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> NewPkgEval<span class="pl-k">.</span><span class="pl-c1">run</span>(julia_versions, [<span class="pl-s"><span class="pl-pds">"</span>Example<span class="pl-pds">"</span></span>])
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">8</span> DataFrames<span class="pl-k">.</span>DataFrame. Omitted printing of <span class="pl-c1">1</span> columns
│ Row │ julia                   │ registry │ name    │ version   │ status │ reason  │ duration │
│     │ VersionNumber           │ String   │ String  │ Version…⍰ │ Symbol │ Symbol⍰ │ Float64  │
├─────┼─────────────────────────┼──────────┼─────────┼───────────┼────────┼─────────┼──────────┤
│ <span class="pl-c1">1</span>   │ <span class="pl-s"><span class="pl-pds"><span class="pl-c1">v</span>"</span>1.3.0<span class="pl-pds">"</span></span>                │ General  │ Example │ <span class="pl-s"><span class="pl-pds"><span class="pl-c1">v</span>"</span>0.5.3<span class="pl-pds">"</span></span>  │ ok     │ <span class="pl-c1">missing</span> │ <span class="pl-c1">6.94</span>     │
│ <span class="pl-c1">2</span>   │ <span class="pl-s"><span class="pl-pds"><span class="pl-c1">v</span>"</span>1.4.0-DEV-3c182bc5c2<span class="pl-pds">"</span></span> │ General  │ Example │ <span class="pl-s"><span class="pl-pds"><span class="pl-c1">v</span>"</span>0.5.3<span class="pl-pds">"</span></span>  │ ok     │ <span class="pl-c1">missing</span> │ <span class="pl-c1">6.948</span>    │</pre></div>
<p>Test logs are part of this dataframe in the <code>log</code> column. For example, in this case:</p>
<pre><code>Resolving package versions...
Installed Example ─ v0.5.3
...
Testing Example tests passed
</code></pre>
<p>Other <code>run</code> methods, that offer more options and control over the testing process, are
available as well. These methods however require you to first prepare the environment
yourself, by calling <code>prepare_registry</code> to set-up the package registry, <code>prepare_runner</code> to
build the Docker image, and <code>prepare_julia</code> to download and unpack a binary version of
Julia.</p>
<h2><a id="user-content-why-does-my-package-fail" class="anchor" aria-hidden="true" href="#why-does-my-package-fail"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Why does my package fail?</h2>
<p>If you want to debug why your package fails, it's probably easiest to use an interactive
shell:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> NewPkgEval

julia<span class="pl-k">&gt;</span> julia_version <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds"><span class="pl-c1">v</span>"</span>1.3.0<span class="pl-pds">"</span></span>  <span class="pl-c"><span class="pl-c">#</span> use `obtain_julia` if you need a specific build</span>

julia<span class="pl-k">&gt;</span> NewPkgEval<span class="pl-k">.</span><span class="pl-c1">prepare_julia</span>(julia_version)
julia<span class="pl-k">&gt;</span> NewPkgEval<span class="pl-k">.</span><span class="pl-c1">prepare_runner</span>()
julia<span class="pl-k">&gt;</span> NewPkgEval<span class="pl-k">.</span><span class="pl-c1">prepare_registry</span>()

julia<span class="pl-k">&gt;</span> NewPkgEval<span class="pl-k">.</span><span class="pl-c1">run_sandboxed_julia</span>(julia_version)</pre></div>
<p>Now you can install, load end test your package. If that fails because of some missing
dependency, you can just install that using the <code>apt</code> package manager within the container:</p>
<pre><code>julia&gt; # in the spawned container's Julia session, switch to REPL mode by pressing ;

shell&gt; sudo apt update
shell&gt; sudo apt install ...
</code></pre>
<p>Once you've found the missing dependency and verified that it fixes the tests of your
package, make a <a href="https://github.com/JuliaComputing/NewPkgEval.jl/edit/master/runner/Dockerfile">pull
request</a> to
include the dependency in the default image.</p>
<h2><a id="user-content-analyzing-results" class="anchor" aria-hidden="true" href="#analyzing-results"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Analyzing results</h2>
<p>Most of the time, you will want to compare the results that you obtained. For example:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> result <span class="pl-k">=</span> NewPkgEval<span class="pl-k">.</span><span class="pl-c1">run</span>([<span class="pl-s"><span class="pl-pds"><span class="pl-c1">v</span>"</span>1.2.0<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds"><span class="pl-c1">v</span>"</span>1.4.0-DEV-76ebc419f0<span class="pl-pds">"</span></span>], [<span class="pl-s"><span class="pl-pds">"</span>AbstractNumbers<span class="pl-pds">"</span></span>])
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">8</span> DataFrame. Omitted printing of <span class="pl-c1">1</span> columns
│ Row │ julia                   │ registry │ name            │ version   │ status │ reason        │ duration │
│     │ VersionNumber           │ String   │ String          │ Version…⍰ │ Symbol │ Symbol⍰       │ Float64  │
├─────┼─────────────────────────┼──────────┼─────────────────┼───────────┼────────┼───────────────┼──────────┤
│ <span class="pl-c1">1</span>   │ <span class="pl-s"><span class="pl-pds"><span class="pl-c1">v</span>"</span>1.2.0<span class="pl-pds">"</span></span>                │ General  │ AbstractNumbers │ <span class="pl-s"><span class="pl-pds"><span class="pl-c1">v</span>"</span>0.2.0<span class="pl-pds">"</span></span>  │ ok     │ <span class="pl-c1">missing</span>       │ <span class="pl-c1">24.768</span>   │
│ <span class="pl-c1">2</span>   │ <span class="pl-s"><span class="pl-pds"><span class="pl-c1">v</span>"</span>1.4.0-DEV-76ebc419f0<span class="pl-pds">"</span></span> │ General  │ AbstractNumbers │ <span class="pl-s"><span class="pl-pds"><span class="pl-c1">v</span>"</span>0.2.0<span class="pl-pds">"</span></span>  │ fail   │ test_failures │ <span class="pl-c1">26.803</span>   │</pre></div>
<p>If you simply want to compare two Julia versions, use <code>NewPkgEval.compare</code>:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> NewPkgEval<span class="pl-k">.</span><span class="pl-c1">compare</span>(result, <span class="pl-s"><span class="pl-pds"><span class="pl-c1">v</span>"</span>1.2.0<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds"><span class="pl-c1">v</span>"</span>1.4.0-DEV-76ebc419f0<span class="pl-pds">"</span></span>)
On v1<span class="pl-c1">.4.0</span><span class="pl-k">-</span>DEV<span class="pl-k">-</span><span class="pl-c1">76</span>ebc419f0, out of <span class="pl-c1">1</span> packages <span class="pl-c1">0</span> passed, <span class="pl-c1">1</span> failed, <span class="pl-c1">0</span> got killed and <span class="pl-c1">0</span> were skipped.

Comparing against v1<span class="pl-c1">.2.0</span><span class="pl-k">:</span>
<span class="pl-k">-</span> AbstractNumbers status was ok, now fail (reason<span class="pl-k">:</span> test_failures)
In summary, <span class="pl-c1">0</span> packages now succeed, <span class="pl-k">while</span> <span class="pl-c1">1</span> have started to fail.</pre></div>
<p>For more extensive evaluations, or when more versions are involved, use <code>NewPkgEval.render</code>
to generate a HTML site in the <code>website/build</code> directory at the root of the repository:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> NewPkgEval<span class="pl-k">.</span><span class="pl-c1">render</span>(result)
Generating site at <span class="pl-k">/</span>home<span class="pl-k">/</span>tim<span class="pl-k">/</span>Julia<span class="pl-k">/</span>pkg<span class="pl-k">/</span>NewPkgEval<span class="pl-k">/</span>site<span class="pl-k">/</span>build</pre></div>
<h2><a id="user-content-choosing-a-different-version-of-julia" class="anchor" aria-hidden="true" href="#choosing-a-different-version-of-julia"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Choosing a different version of Julia</h2>
<p>NewPkgEval ultimately needs a binary build of Julia to run tests with, but there's multiple
options to provide such a build. The easiest option is to use a version number that has
already been registered in the <code>Versions.toml</code> database, together with an URL and hash to
download an verify the file. An error will be thrown if the specific version cannot be
found. This is done automatically when the <code>prepare_julia</code> function is called (you will need
to call this method explicitly if you use a lower-level interface, i.e., anything but the
<code>run</code> function from the quick start section above):</p>
<pre><code>julia&gt; NewPkgEval.prepare_julia(v"1.2.0-nonexistent")
ERROR: Requested Julia version not found
</code></pre>
<p>Alternatively, you can download a named release as listed in <code>Releases.toml</code>. By calling
<code>obtain_julia_release</code> with a release name, this release will be downloaded, hashed, and
added to the <code>Versions.toml</code> database for later use. The method returns the version number
that corresponds with this added entry; you should use it when calling into other functions
of the package:</p>
<div class="highlight highlight-source-julia"><pre>julia_version <span class="pl-k">=</span> NewPkgEval<span class="pl-k">.</span><span class="pl-c1">obtain_julia_release</span>(<span class="pl-s"><span class="pl-pds">"</span>nightly<span class="pl-pds">"</span></span>)
NewPkgEval<span class="pl-k">.</span><span class="pl-c1">run</span>([julia_version], <span class="pl-k">...</span>)</pre></div>
<p>For even more control, you can build Julia by calling the <code>perform_julia_build</code> function,
passing a string that identifies a branch, tag or commit in the Julia Git repository:</p>
<div class="highlight highlight-source-julia"><pre>julia_version <span class="pl-k">=</span> NewPkgEval<span class="pl-k">.</span><span class="pl-c1">perform_julia_build</span>(<span class="pl-s"><span class="pl-pds">"</span>master<span class="pl-pds">"</span></span>)</pre></div>
<p>Similarly, this function returns a version number that corresponds with an entry added to
<code>Versions.toml</code>:</p>
<pre><code>["1.4.0-DEV-8f7855a7c3"]
file = "julia-1.4.0-DEV-8f7855a7c3.tar.gz"
sha = "dcd105b94906359cae52656129615a1446e7aee1e992ae9c06a15554d83a46f0"
</code></pre>
<p>If you get a permission error while building Julia, try to set the variable
<code>BINARYBUILDER_RUNNER=privileged</code>, restart Julia and try the build again.</p>
<p>To facilitate all this, there's a higher-level function <code>obtain_julia</code> that will try each of
the above methods until a valid version is found and returned. It is of course also possible
to build Julia yourself, in which case you will need to create a tarball, copy it to the
<code>deps/downloads</code> directory, and add a correct version stanza to <code>Versions.toml</code>.</p>
</article></div>