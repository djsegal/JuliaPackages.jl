<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-separatingaxistheorem2djl" class="anchor" aria-hidden="true" href="#separatingaxistheorem2djl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>SeparatingAxisTheorem2D.jl</h1>
<p><a href="https://travis-ci.org/schmrlng/SeparatingAxisTheorem2D.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/a3ed0974e1bcfaac7977a968d97ba23fcdbe3a10/68747470733a2f2f7472617669732d63692e6f72672f7363686d726c6e672f53657061726174696e67417869735468656f72656d32442e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/schmrlng/SeparatingAxisTheorem2D.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/schmrlng/separatingaxistheorem2d-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/cf0a938e40ea7779b23a2810788e056b95a1bd27/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f366b7036357639396e6a6868797332393f7376673d74727565" alt="Build status" data-canonical-src="https://ci.appveyor.com/api/projects/status/6kp65v99njhhys29?svg=true" style="max-width:100%;"></a>
<a href="http://codecov.io/github/schmrlng/SeparatingAxisTheorem2D.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/68299078f267e88ac9056142f25a94e5f8c4bd3f/687474703a2f2f636f6465636f762e696f2f6769746875622f7363686d726c6e672f53657061726174696e67417869735468656f72656d32442e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/schmrlng/SeparatingAxisTheorem2D.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
<p>This package implements collision detection for 2D shapes based on the <a href="https://en.wikipedia.org/wiki/Hyperplane_separation_theorem#Use_in_collision_detection" rel="nofollow">separating axis theorem</a>. Shape representations leverage <a href="https://github.com/JuliaArrays/StaticArrays.jl">StaticArrays.jl</a> for computational efficiency; this package targets applications potentially requiring millions of collision checks, e.g., <a href="https://github.com/schmrlng/MotionPlanning.jl">robot motion planning</a>.</p>
<h2><a id="user-content-shapes" class="anchor" aria-hidden="true" href="#shapes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Shapes</h2>
<p>This package exports the abstract type <code>Shape2D</code> and the following concrete types for collision checking:</p>
<ul>
<li><code>Point</code> (alias for <code>AbstractVector{&lt;:Number}</code>)</li>
<li><code>AxisAlignedBoundingBox &lt;: Shape2D</code> (equivalently, <code>AABB</code>)
<ul>
<li><code>AABB((xl, xu), (yl, yu))</code>: constructs an instance corresponding to the set [<code>xl</code>, <code>xu</code>] × [<code>yl</code>, <code>yu</code>].</li>
<li><code>AABB(Δx, Δy)</code>: constructs an instance corresponding to the set [-<code>Δx/2</code>, <code>Δx/2</code>] × [-<code>Δy/2</code>, <code>Δy/2</code>].</li>
</ul>
</li>
<li><code>LineSegment &lt;: Shape2D</code>
<ul>
<li><code>LineSegment(v, w)</code> constructs a line segment connecting <code>v</code> and <code>w</code>.</li>
</ul>
</li>
<li><code>Polygon &lt;: Shape2D</code>
<ul>
<li><code>Polygon(points...)</code>: constructs a convex polygon with vertices <code>points</code>. <code>points</code> must be supplied in counter-clockwise order.</li>
<li><code>Triangle(p1, p2, p3)</code>: convenience constructor that reorders three points into CCW order before calling <code>Polygon</code>.</li>
</ul>
</li>
<li><code>Circle &lt;: Shape2D</code>
<ul>
<li><code>Circle(c, r)</code>: constructs a circle centered at <code>c</code> with radius <code>r</code>.</li>
<li><code>Circle(r)</code>: constructs a circle centered at the origin with radius <code>r</code>.</li>
</ul>
</li>
<li><code>CompoundShape &lt;: Shape2D</code>
<ul>
<li><code>CompoundShape(parts...)</code>: groups a list of other <code>Shape2D</code>s into a single (possible non-convex) collision object.</li>
</ul>
</li>
</ul>
<p>This package also exports a few methods for transforming/creating new shapes from others.</p>
<ul>
<li><code>Transformation</code>s from <a href="https://github.com/FugroRoames/CoordinateTransformations.jl">CoordinateTranformations.jl</a> may be applied to shapes to produce the expected output; some care must be taken, however, to ensure that only rigid transformations are applied to <code>Circle</code>s as there is currently no <code>Ellipse</code> shape implemented.</li>
<li><code>inflate(X, ε; round_corners=true)</code>: inflates a shape <code>X</code> by a buffer <code>ε</code> &gt; 0. The <code>round_corners</code> keyword argument may be set to <code>false</code> to ensure that inflating an <code>AABB</code>, <code>LineSegment</code>, or <code>Polygon</code> yields just a single <code>Polygon</code> (performing an approximate inflation) instead of a <code>CompoundShape</code> consisting of a <code>Polygon</code> and <code>Circle</code>s.</li>
<li><code>sweep</code>: this function is used internally to facilitate continuous (i.e., "swept") collision detection.
<ul>
<li><code>sweep(X1, X2)</code>: yields a shape corresponding to the area swept out by moving shape <code>X1</code> to shape <code>X2</code> (if sweeping <code>X1</code> to <code>X2</code> involves a rotation, this rotation should be "reasonably small" or this will probably produce junk).</li>
<li><code>sweep(X, f1, f2)</code>: equivalent to <code>sweep(f1(X), f2(X))</code>.</li>
</ul>
</li>
</ul>
<h2><a id="user-content-collision-checking" class="anchor" aria-hidden="true" href="#collision-checking"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Collision Checking</h2>
<p>SeparatingAxisTheorem2D.jl defines the following functions for collision checking:</p>
<ul>
<li><code>intersecting</code> for discrete collision detection.
<ul>
<li><code>intersecting(X, Y)</code>: true iff <code>X</code> and <code>Y</code> are in collision.</li>
<li><code>intersecting(X, Y, f)</code>: true iff <code>X</code> and <code>f(Y)</code> are in collision.</li>
</ul>
</li>
<li><code>sweep_intersecting</code> for continuous collision detection.
<ul>
<li><code>X</code> static and <code>Y</code> dynamic
<ul>
<li><code>sweep_intersecting(X, Y1, Y2)</code>: true iff <code>X</code> and <code>sweep(Y1, Y2)</code> are in collision.</li>
<li><code>sweep_intersecting(X, Y, f1, f2)</code>: true iff <code>X1</code> and <code>sweep(f1(X), f2(X))</code> are in collision.</li>
</ul>
</li>
<li><code>X</code> and <code>Y</code> both dynamic
<ul>
<li><code>sweep_intersecting(X, fX1, fX2, Y, fY1, fY2)</code>: supposing that <code>X</code> is getting swept from transformation <code>fX1</code> to <code>fX2</code> and <code>Y</code> is simultaneously getting swept from transformation <code>fY1</code> to <code>fY2</code>, returns true iff the shapes are ever in collision.</li>
</ul>
</li>
</ul>
</li>
</ul>
</article></div>