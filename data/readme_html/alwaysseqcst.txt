<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-alwaysseqcst" class="anchor" aria-hidden="true" href="#alwaysseqcst"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>AlwaysSeqCst</h1>
<p dir="auto">AlwaysSeqCst.jl provides macros <code>@atomic</code>, <code>@atomicswap</code>, and <code>@atomicreplace</code> that ignore
the ordering arguments and use <code>:sequentially_consistent</code> always.  It may be useful for a
quick debugging of miss-specified memory orderings.</p>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<p dir="auto">At the beginning of the module you are debugging:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using AlwaysSeqCst: @atomic, @atomicswap, @atomicreplace"><pre><span class="pl-k">using</span> AlwaysSeqCst<span class="pl-k">:</span> <span class="pl-c1">@atomic</span>, <span class="pl-c1">@atomicswap</span>, <span class="pl-c1">@atomicreplace</span></pre></div>
<p dir="auto">Alternatively, to ignore the warning from the package loader:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="const AlwaysSeqCst =
    Base.require(Base.PkgId(Base.UUID(0x2a0a5ff3012c40a8861a42ef8f4dfa06), &quot;AlwaysSeqCst&quot;))
using .AlwaysSeqCst: @atomic, @atomicswap, @atomicreplace"><pre><span class="pl-k">const</span> AlwaysSeqCst <span class="pl-k">=</span>
    Base<span class="pl-k">.</span><span class="pl-c1">require</span>(Base<span class="pl-k">.</span><span class="pl-c1">PkgId</span>(Base<span class="pl-k">.</span><span class="pl-c1">UUID</span>(<span class="pl-c1">0x2a0a5ff3012c40a8861a42ef8f4dfa06</span>), <span class="pl-s"><span class="pl-pds">"</span>AlwaysSeqCst<span class="pl-pds">"</span></span>))
<span class="pl-k">using</span> <span class="pl-k">.</span>AlwaysSeqCst<span class="pl-k">:</span> <span class="pl-c1">@atomic</span>, <span class="pl-c1">@atomicswap</span>, <span class="pl-c1">@atomicreplace</span></pre></div>
</article></div>