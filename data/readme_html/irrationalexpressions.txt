<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-irrationalexpressionsjl" class="anchor" aria-hidden="true" href="#irrationalexpressionsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>IrrationalExpressions.jl</h1>
<p><a href="https://travis-ci.com/jishnub/IrrationalExpressions.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/fd3676ec00b94018e9aed4833c5608f64542135b/68747470733a2f2f7472617669732d63692e636f6d2f6a6973686e75622f4972726174696f6e616c45787072657373696f6e732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/jishnub/IrrationalExpressions.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/jishnub/IrrationalExpressions.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/ea12147faa3cf7d75abf1255524e3ef0de37d3d9/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f6a6973686e75622f4972726174696f6e616c45787072657373696f6e732e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/jishnub/IrrationalExpressions.jl/badge.svg?branch=master" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/jishnub/IrrationalExpressions.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/7bdb816de2cbd7787b489d2a648b5a7cd796a830/68747470733a2f2f636f6465636f762e696f2f67682f6a6973686e75622f4972726174696f6e616c45787072657373696f6e732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/jishnub/IrrationalExpressions.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p>IrrationalExpressions is a Julia module that makes expressions like <code>2π</code> behave as irrational numbers, rather than <code>Float64</code>.</p>
<h2><a id="user-content-the-problem" class="anchor" aria-hidden="true" href="#the-problem"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>The Problem</h2>
<p>Julia has a few irrational constants, like <code>π</code> and <code>e</code>. Arbitrary precision packages, like BigFloat, may provide conversion methods that yield these constants with the desired precision. However, any arithmetic operation that happens before conversion defaults to <code>Float64</code>.</p>
<pre><code>julia&gt; BigFloat(π) + BigFloat(-π)
1.224646799147353177226065932275001058209749445923078164062861980294536250318213e-16

julia&gt; typeof(-π)
Float64
</code></pre>
<p>This may lead to subtle bugs. For example, <code>2π*x</code> will only be correct to about 16 decimal places, even if <code>x</code> has higher precision. It must be written as <code>2(π*x)</code> in order to get the precision of <code>x</code>.</p>
<h2><a id="user-content-the-solution" class="anchor" aria-hidden="true" href="#the-solution"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>The Solution</h2>
<p>Using the <code>IrrationalExpressions</code> module, arithmetic operations don't immediately force conversion to Float64. Instead the expression is kept unevaluated until the target type is known.</p>
<pre><code>julia&gt; using IrrationalExpressions

julia&gt; -pi
-π = -3.1415926535897...

julia&gt; BigFloat(π) + BigFloat(-π)
0.0
</code></pre>
<h2><a id="user-content-supported-operations" class="anchor" aria-hidden="true" href="#supported-operations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Supported Operations</h2>
<p><code>+</code>, <code>-</code>, <code>*</code> and <code>/</code> are currently supported.</p>
<p>Downconversion occurs when a floating point value is encountered. The resulting type is that of the floating point value.</p>
<pre><code>julia&gt; τ = 2π
2π = 6.2831853071795...

julia&gt; τ + 0.0
6.283185307179586

julia&gt; τ + BigFloat(0)
6.283185307179586476925286766559005768394338798750211641949889184615632812572396
</code></pre>
<p>Functions in <code>Base</code> typically convert to <code>Float64</code> when encountering an unknown subtype of <code>Real</code>. They will work as usual.</p>
<pre><code>julia&gt; cos(2π)
1.0

julia&gt; typeof(ans)
Float64
</code></pre>
<h2><a id="user-content-supported-types" class="anchor" aria-hidden="true" href="#supported-types"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Supported Types</h2>
<p><code>Integer</code>, <code>Rational</code> and <code>Irrational</code> can be used to build irrational expressions.
Care must be taken so that floats are not accidentally created. <code>(1//2)π</code> is an <code>IrrationalExpr</code>, but <code>(1/2)π</code> is a <code>Float64</code>.</p>
<p>New floating-point types need not explicitly support conversion from <code>IrrationalExpr</code>.
Any subtype of <code>AbstractFloat</code> that has conversions from <code>Integer</code>, <code>Rational</code> and <code>Irrational</code>, promotion from <code>Real</code> and the necessary arithmetic operations is automatically supported.</p>
<h2><a id="user-content-caveat" class="anchor" aria-hidden="true" href="#caveat"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Caveat</h2>
<p>Because this is a quick hack, there's no simplification, or elimination of common subexpressions.
If irrational expressions are inadvertently created in a loop, they can grow exponentially</p>
<pre><code>julia&gt; a = π; for i=1:5; global a = a-a/3; end; a
((((π - π / 3) - (π - π / 3) / 3) - ((π - π / 3) - (π - π / 3) / 3) / 3) - (((π - π / 3) - (π - π / 3) / 3) - ((π - π / 3) - (π - π / 3) / 3) / 3) / 3) - ((((π - π / 3) - (π - π / 3) / 3) - ((π - π / 3) - (π - π / 3) / 3) / 3) - (((π - π / 3) - (π - π / 3) / 3) - ((π - π / 3) - (π - π / 3) / 3) / 3) / 3) / 3 = 0.41370767454680...
</code></pre>
<p>(The work-around is to convert to the desired floating-point type before entering the loop.)</p>
<h2><a id="user-content-to-do-list" class="anchor" aria-hidden="true" href="#to-do-list"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>To-Do-List</h2>
<ul>
<li>There needs to be some way to keep expressions from blowing up in a loop. At minimum, the size should be tracked, and an error thrown at some point.</li>
<li>It would be possible to extend this to things like <code>sqrt(Integer)</code>, <code>Integer^Rational</code>, etc.</li>
<li>Support for complex-valued irrational expressions, like <code>pi * im</code> is still missing.</li>
</ul>
</article></div>