<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-avrcompilerjl" class="anchor" aria-hidden="true" href="#avrcompilerjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>AVRCompiler.jl</h1>
<p dir="auto">AVRCompiler.jl is a julia-to-AVR compiler support library. Its used for compiling julia source code to AVR assembly.</p>
<p dir="auto">To install this package, use <code>]add https://github.com/Seelengrab/AVRCompiler.jl</code></p>
<h2 dir="auto"><a id="user-content-requirements-for-use" class="anchor" aria-hidden="true" href="#requirements-for-use"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Requirements for use</h2>
<p dir="auto">Since julia currently does not come with the AVR backend enabled, you will have to build julia yourself.</p>
<p dir="auto">Change this in <code>deps/llvm.mk</code> of your local clone of the <a href="https://github.com/JuliaLang/julia">julialang repository</a>:</p>
<div class="highlight highlight-source-diff notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="diff --git a/deps/llvm.mk b/deps/llvm.mk
index 5d297b6c36..3a7720bd71 100644
--- a/deps/llvm.mk
+++ b/deps/llvm.mk
@@ -64,7 +64,7 @@ endif
 LLVM_LIB_FILE := libLLVMCodeGen.a
 
 # Figure out which targets to build
-LLVM_TARGETS := host;NVPTX;AMDGPU;WebAssembly;BPF
+LLVM_TARGETS := host;NVPTX;AMDGPU;WebAssembly;BPF;AVR
 LLVM_EXPERIMENTAL_TARGETS :=
 
 LLVM_CFLAGS :="><pre><span class="pl-c1">diff --git a/deps/llvm.mk b/deps/llvm.mk</span>
index 5d297b6c36..3a7720bd71 100644
<span class="pl-md">--- a/deps/llvm.mk</span>
<span class="pl-mi1">+++ b/deps/llvm.mk</span>
<span class="pl-mdr">@@ -64,7 +64,7 @@</span> endif
 LLVM_LIB_FILE := libLLVMCodeGen.a
 
 # Figure out which targets to build
<span class="pl-md"><span class="pl-md">-</span>LLVM_TARGETS := host;NVPTX;AMDGPU;WebAssembly;BPF</span>
<span class="pl-mi1"><span class="pl-mi1">+</span>LLVM_TARGETS := host;NVPTX;AMDGPU;WebAssembly;BPF;AVR</span>
 LLVM_EXPERIMENTAL_TARGETS :=
 
 LLVM_CFLAGS :=</pre></div>
<p dir="auto">And add this to <code>Make.user</code>:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="USE_BINARYBUILDER_LLVM=0  "><pre lang="text" class="notranslate"><code>USE_BINARYBUILDER_LLVM=0  
</code></pre></div>
<p dir="auto">The first patch enables the <code>AVR</code> backend to be built, the second tells the julia build process to build a local version of LLVM.</p>
<p dir="auto">Finally, build julia by running <code>make</code>. Since you're also going to build LLVM, this can take some time - a full build of LLVM takes about
45 minutes on my laptop, running a i7-6600U.</p>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<p dir="auto">The usage workflow generally is like this:</p>
<ul dir="auto">
<li>Write code to be compiled</li>
<li>Compile it like
<ul dir="auto">
<li><code>obj = build_obj(myproject.main, ())</code></li>
</ul>
</li>
<li>Write it to disk
<ul dir="auto">
<li><code>write("out/jl_out.o", obj)</code></li>
</ul>
</li>
<li>Link it from your shell
<ul dir="auto">
<li><code>avr-ld -o jl_out.elf jl_out.o</code></li>
</ul>
</li>
<li>Convert the <code>.elf</code> to the <code>ihex</code> format the Âµc expects
<ul dir="auto">
<li><code>avr-objcopy -O ihex jl_out.elf jl_out.hex</code></li>
</ul>
</li>
<li>Flash the program onto your microcontroller
<ul dir="auto">
<li><code>avrdude -V -c arduino -p &lt;MICROCONTROLLER NAME&gt; -P &lt;MOUNT PATH OF YOUR MICROCONTROLLER&gt; -U flash:w:jl_out.hex</code></li>
</ul>
</li>
</ul>
<p dir="auto">These commands require an AVR buildchain to be installed on your device. This is most commonly called <code>avr-binutils</code>, but may vary
depending on your platform.</p>
<p dir="auto">The commands written above may not work with your exact versions of these utilities - adapt accordingly.</p>
<p dir="auto">See the API section below for more utility functionality. <code>@code_llvm dump_module=true myproject.main()</code> is generally very useful for
debugging purposes, as are JET.jl and Cthulhu.jl. Don't try to run functions intended to be compiled to AVR in a regular julia session -
your program will probably segfault.</p>
<h2 dir="auto"><a id="user-content-api" class="anchor" aria-hidden="true" href="#api"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>API</h2>
<p dir="auto">AVRCompiler.jl currently provides 3 functions for use/inspection:</p>
<ul dir="auto">
<li><code>native_job(f, types, params)</code>
<ul dir="auto">
<li><code>f</code>: The function to compile - most commonly <code>main</code>, taking no arguments</li>
<li><code>types</code>: The argument types to the function - most commonly the empty tuple <code>()</code></li>
<li><code>params</code>: An <code>ArduinoParams</code> object containing metadata for the build, like the name to be used for identification in the binary</li>
<li>Returns a <code>GPUCompiler.Compilerjob</code>, which is the job context that will be used for compilation</li>
</ul>
</li>
<li><code>build_ir(job, f, types; optimize=true)</code>
<ul dir="auto">
<li><code>job</code>: The <code>CompilerJob</code> object to be used for compilation context</li>
<li><code>f</code>: The function to compile - most commonly <code>main</code>, taking no arguments</li>
<li><code>types</code>: The argument types to the function - most commonly the empty tuple <code>()</code></li>
<li><code>optimize</code>: A keyword argument specifying whether the IR should be optimized by GPUCompiler - currently mandatory to be <code>true</code>, if you want the build to remove unused references to the julia runtime (which we can't use on a microcontroller)</li>
<li>Returns a tuple of LLVM-IR and IR-metadata</li>
</ul>
</li>
<li><code>build_obj(func, types[, params]; strip=true, validate=true)</code>
<ul dir="auto">
<li><code>func</code>: The function to compile</li>
<li><code>types</code>: The types of the arguments to compile for func</li>
<li><code>params</code>: An <code>ArduinoParams</code> object containing metadata for the build - defaults to <code>ArduinoParams("unnamed")</code></li>
<li><code>strip</code>: A keyword argument specifying whether the binary should be stripped of symbols - defaults to <code>true</code></li>
<li><code>validate</code>: A keyword argument specifying whether LLVM should check the produce IR for being correct - defaults to <code>true</code></li>
<li>Returns the built artifact as an object file in form of a string. Can be written to disk like <code>write(outpath, obj)</code></li>
</ul>
</li>
<li><code>builddump(func, args)</code>
<ul dir="auto">
<li><code>func</code>: The function to compile</li>
<li><code>args</code>: The argument types to compile <code>func</code> with</li>
<li>Compiles &amp; ultimately prints a decompiled dump of the unlinked object file</li>
<li>Requires <code>avr-objdump</code> to be installed on your system (most commonly installable under the name <code>avr-binutils</code>)</li>
</ul>
</li>
</ul>
</article></div>