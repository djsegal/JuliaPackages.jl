<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-nlpmodels" class="anchor" aria-hidden="true" href="#nlpmodels"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>NLPModels</h1>
<p>This package provides general guidelines to represent optimization problems in Julia and a standardized API to evaluate the functions and their derivatives.
The main objective is to be able to rely on that API when designing optimization solvers in Julia.</p>
<p>Cite as</p>
<pre><code>Abel Soares Siqueira, &amp; Dominique Orban. (2019, February 6). NLPModels.jl. Zenodo.
http://doi.org/10.5281/zenodo.2558627
</code></pre>
<p><a href="https://doi.org/10.5281/zenodo.2558627" rel="nofollow"><img src="https://camo.githubusercontent.com/30c4b9375e6d768bb32f74bb50b51e6bf67e485d/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f444f492f31302e353238312f7a656e6f646f2e323535383632372e737667" alt="DOI" data-canonical-src="https://zenodo.org/badge/DOI/10.5281/zenodo.2558627.svg" style="max-width:100%;"></a>
<a href="https://github.com/JuliaSmoothOptimizers/NLPModels.jl/releases/latest"><img src="https://camo.githubusercontent.com/8dfc2ab0ef6b483928c88ce358548fc3da7ba3cb/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f72656c656173652f4a756c6961536d6f6f74684f7074696d697a6572732f4e4c504d6f64656c732e6a6c2e737667" alt="GitHub release" data-canonical-src="https://img.shields.io/github/release/JuliaSmoothOptimizers/NLPModels.jl.svg" style="max-width:100%;"></a>
<a href="https://JuliaSmoothOptimizers.github.io/NLPModels.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/e73bdd2b93342e91af0a30f41668fbe4a20b7b44/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d3366353162352e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-3f51b5.svg" style="max-width:100%;"></a>
<a href="https://JuliaSmoothOptimizers.github.io/NLPModels.jl/latest" rel="nofollow"><img src="https://camo.githubusercontent.com/a5af23352326d564443d56721673423cfa303eb5/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6c61746573742d3366353162352e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-latest-3f51b5.svg" style="max-width:100%;"></a>
<a href="https://travis-ci.org/JuliaSmoothOptimizers/NLPModels.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/043ab4adb4c39a25e22fb4fb446ffeabec5f8228/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f4a756c6961536d6f6f74684f7074696d697a6572732f4e4c504d6f64656c732e6a6c3f6c6f676f3d747261766973" alt="Master Build Status" data-canonical-src="https://img.shields.io/travis/JuliaSmoothOptimizers/NLPModels.jl?logo=travis" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/dpo/nlpmodels-jl/branch/master" rel="nofollow"><img src="https://camo.githubusercontent.com/922ae46f79c4977e76f6d58c7575202892858b6f/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f6c31727339616a786b796330636572392f6272616e63682f6d61737465723f7376673d74727565" alt="Master Build status" data-canonical-src="https://ci.appveyor.com/api/projects/status/l1rs9ajxkyc0cer9/branch/master?svg=true" style="max-width:100%;"></a>
<a href="https://cirrus-ci.com/github/JuliaSmoothOptimizers/NLPModels.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/2189b800ae4679ae8c076fe1c2ba5c728b3e2304/68747470733a2f2f696d672e736869656c64732e696f2f6369727275732f6769746875622f4a756c6961536d6f6f74684f7074696d697a6572732f4e4c504d6f64656c732e6a6c3f6c6f676f3d4369727275732532304349" alt="Cirrus CI - Base Branch Build Status" data-canonical-src="https://img.shields.io/cirrus/github/JuliaSmoothOptimizers/NLPModels.jl?logo=Cirrus%20CI" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/JuliaSmoothOptimizers/NLPModels.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/7adf18319b82cc1c7b09734c6ad6e4b536cb68af/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f4a756c6961536d6f6f74684f7074696d697a6572732f4e4c504d6f64656c732e6a6c2f62616467652e7376673f6272616e63683d6d617374657226736572766963653d676974687562" alt="Master Coverage Status" data-canonical-src="https://coveralls.io/repos/JuliaSmoothOptimizers/NLPModels.jl/badge.svg?branch=master&amp;service=github" style="max-width:100%;"></a></p>
<h2><a id="user-content-optimization-problems" class="anchor" aria-hidden="true" href="#optimization-problems"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Optimization Problems</h2>
<p>Optimization problems are represented by an instance of (a subtype of) <code>AbstractNLPModel</code>.
Such instances are composed of</p>
<ul>
<li>an instance of <code>NLPModelMeta</code>, which provides information about the problem, including the number of variables, constraints, bounds on the variables, etc.</li>
<li>other data specific to the provenance of the problem.</li>
</ul>
<p>See the
<a href="https://JuliaSmoothOptimizers.github.io/NLPModels.jl/latest" rel="nofollow">documentation</a> for
details on the models, a tutorial and the API.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Installation</h2>
<div class="highlight highlight-source-julia"><pre>pkg<span class="pl-k">&gt;</span> add NLPModels</pre></div>
<h2><a id="user-content-external-models" class="anchor" aria-hidden="true" href="#external-models"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>External models</h2>
<p>In addition to the models available in this package, there are some external models
for specific needs:</p>
<ul>
<li><a href="https://github.com/JuliaSmoothOptimizers/AmplNLReader.jl">AmplNLReader.jl</a>: Interface
for <a href="http://www.ampl.com/" rel="nofollow">AMPL</a>;</li>
<li><a href="https://github.com/JuliaSmoothOptimizers/CUTEst.jl">CUTEst.jl</a>: Interface for CUTEst
problems;</li>
<li><a href="https://github.com/JuliaSmoothOptimizers/NLPModelsJuMP.jl">NLPModelsJuMP.jl</a>:
Converts MathOptInterface/JuMP models to and from NLPModels.</li>
</ul>
<h2><a id="user-content-main-methods" class="anchor" aria-hidden="true" href="#main-methods"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Main Methods</h2>
<p>If <code>model</code> is an instance of an appropriate subtype of <code>AbstractNLPModel</code>, the following methods are normally defined:</p>
<ul>
<li><code>obj(model, x)</code>: evaluate <em>f(x)</em>, the objective at <code>x</code></li>
<li><code>cons(model x)</code>: evaluate <em>c(x)</em>, the vector of general constraints at <code>x</code></li>
</ul>
<p>The following methods are defined if first-order derivatives are available:</p>
<ul>
<li><code>grad(model, x)</code>: evaluate <em>∇f(x)</em>, the objective gradient at <code>x</code></li>
<li><code>jac(model, x)</code>: evaluate <em>J(x)</em>, the Jacobian of <em>c</em> at <code>x</code> as a sparse matrix</li>
</ul>
<p>If Jacobian-vector products can be computed more efficiently than by evaluating the Jacobian explicitly, the following methods may be implemented:</p>
<ul>
<li><code>jprod(model, x, v)</code>: evaluate the result of the matrix-vector product <em>J(x)⋅v</em></li>
<li><code>jtprod(model, x, u)</code>: evaluate the result of the matrix-vector product <em>J(x)ᵀ⋅u</em></li>
</ul>
<p>The following method is defined if second-order derivatives are available:</p>
<ul>
<li><code>hess(model, x, y)</code>: evaluate <em>∇²L(x,y)</em>, the Hessian of the Lagrangian at <code>x</code> and <code>y</code></li>
</ul>
<p>If Hessian-vector products can be computed more efficiently than by evaluating the Hessian explicitly, the following method may be implemented:</p>
<ul>
<li><code>hprod(model, x, v, y)</code>: evaluate the result of the matrix-vector product <em>∇²L(x,y)⋅v</em></li>
</ul>
<p>Several in-place variants of the methods above may also be implemented.</p>
<p>The complete list of methods that an interface may implement can be found in the documentation.</p>
<h2><a id="user-content-attributes" class="anchor" aria-hidden="true" href="#attributes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Attributes</h2>
<p><code>NLPModelMeta</code> objects have the following attributes:</p>
<table>
<thead>
<tr>
<th>Attribute</th>
<th>Type</th>
<th>Notes</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>nvar</code></td>
<td><code>Int             </code></td>
<td>number of variables</td>
</tr>
<tr>
<td><code>x0  </code></td>
<td><code>Array{Float64,1}</code></td>
<td>initial guess</td>
</tr>
<tr>
<td><code>lvar</code></td>
<td><code>Array{Float64,1}</code></td>
<td>vector of lower bounds</td>
</tr>
<tr>
<td><code>uvar</code></td>
<td><code>Array{Float64,1}</code></td>
<td>vector of upper bounds</td>
</tr>
<tr>
<td><code>ifix</code></td>
<td><code>Array{Int64,1}</code></td>
<td>indices of fixed variables</td>
</tr>
<tr>
<td><code>ilow</code></td>
<td><code>Array{Int64,1}</code></td>
<td>indices of variables with lower bound only</td>
</tr>
<tr>
<td><code>iupp</code></td>
<td><code>Array{Int64,1}</code></td>
<td>indices of variables with upper bound only</td>
</tr>
<tr>
<td><code>irng</code></td>
<td><code>Array{Int64,1}</code></td>
<td>indices of variables with lower and upper bound (range)</td>
</tr>
<tr>
<td><code>ifree</code></td>
<td><code>Array{Int64,1}</code></td>
<td>indices of free variables</td>
</tr>
<tr>
<td><code>iinf</code></td>
<td><code>Array{Int64,1}</code></td>
<td>indices of visibly infeasible bounds</td>
</tr>
<tr>
<td><code>ncon</code></td>
<td><code>Int             </code></td>
<td>total number of general constraints</td>
</tr>
<tr>
<td><code>nlin </code></td>
<td><code>Int             </code></td>
<td>number of linear constraints</td>
</tr>
<tr>
<td><code>nnln</code></td>
<td><code>Int             </code></td>
<td>number of nonlinear general constraints</td>
</tr>
<tr>
<td><code>nnet</code></td>
<td><code>Int             </code></td>
<td>number of nonlinear network constraints</td>
</tr>
<tr>
<td><code>y0  </code></td>
<td><code>Array{Float64,1}</code></td>
<td>initial Lagrange multipliers</td>
</tr>
<tr>
<td><code>lcon</code></td>
<td><code>Array{Float64,1}</code></td>
<td>vector of constraint lower bounds</td>
</tr>
<tr>
<td><code>ucon</code></td>
<td><code>Array{Float64,1}</code></td>
<td>vector of constraint upper bounds</td>
</tr>
<tr>
<td><code>lin </code></td>
<td><code>Range1{Int64}   </code></td>
<td>indices of linear constraints</td>
</tr>
<tr>
<td><code>nln</code></td>
<td><code>Range1{Int64}   </code></td>
<td>indices of nonlinear constraints (not network)</td>
</tr>
<tr>
<td><code>nnet</code></td>
<td><code>Range1{Int64}   </code></td>
<td>indices of nonlinear network constraints</td>
</tr>
<tr>
<td><code>jfix</code></td>
<td><code>Array{Int64,1}</code></td>
<td>indices of equality constraints</td>
</tr>
<tr>
<td><code>jlow</code></td>
<td><code>Array{Int64,1}</code></td>
<td>indices of constraints of the form c(x) ≥ cl</td>
</tr>
<tr>
<td><code>jupp</code></td>
<td><code>Array{Int64,1}</code></td>
<td>indices of constraints of the form c(x) ≤ cu</td>
</tr>
<tr>
<td><code>jrng</code></td>
<td><code>Array{Int64,1}</code></td>
<td>indices of constraints of the form cl ≤ c(x) ≤ cu</td>
</tr>
<tr>
<td><code>jfree</code></td>
<td><code>Array{Int64,1}</code></td>
<td>indices of "free" constraints (there shouldn't be any)</td>
</tr>
<tr>
<td><code>jinf</code></td>
<td><code>Array{Int64,1}</code></td>
<td>indices of the visibly infeasible constraints</td>
</tr>
<tr>
<td><code>nnzj</code></td>
<td><code>Int             </code></td>
<td>number of nonzeros in the sparse Jacobian</td>
</tr>
<tr>
<td><code>nnzh</code></td>
<td><code>Int             </code></td>
<td>number of nonzeros in the sparse Hessian</td>
</tr>
<tr>
<td><code>minimize</code></td>
<td><code>Bool            </code></td>
<td>true if <code>optimize == minimize</code></td>
</tr>
<tr>
<td><code>islp</code></td>
<td><code>Bool            </code></td>
<td>true if the problem is a linear program</td>
</tr>
<tr>
<td><code>name</code></td>
<td><code>ASCIIString     </code></td>
<td>problem name</td>
</tr>
</tbody>
</table>
</article></div>