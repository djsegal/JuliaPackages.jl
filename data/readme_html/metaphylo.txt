<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-metaphylo" class="anchor" aria-hidden="true" href="#metaphylo"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>MetaPhylo</h1>
<p dir="auto"><a href="https://banhbio.github.io/MetaPhylo.jl/stable/" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://banhbio.github.io/MetaPhylo.jl/dev/" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/banhbio/MetaPhylo.jl/actions/workflows/CI.yml?query=branch%3Amain"><img src="https://github.com/banhbio/MetaPhylo.jl/actions/workflows/CI.yml/badge.svg?branch=main" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/banhbio/MetaPhylo.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/f2975afe0d677156e82e1df74f7396349fe844d5645c508e3299705083227c02/68747470733a2f2f636f6465636f762e696f2f67682f62616e6862696f2f4d6574615068796c6f2e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/banhbio/MetaPhylo.jl/branch/main/graph/badge.svg" style="max-width: 100%;"></a>
<a href="https://zenodo.org/badge/latestdoi/587552550" rel="nofollow"><img src="https://camo.githubusercontent.com/89b13dc4eff5075838f13dfbec3aea4c0f6ac2ca4d659beef9d66f03a18b8f9c/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f3538373535323535302e737667" alt="DOI" data-canonical-src="https://zenodo.org/badge/587552550.svg" style="max-width: 100%;"></a></p>
<p dir="auto"><code>MetaPhylo.jl</code> is Julia package for dealing with phylogenetic trees.
This package is in the early stage of development and probably has many bugs (especially around Newick format). Bug reports and any suggestions are welcome<g-emoji class="g-emoji" alias="slightly_smiling_face" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f642.png">ðŸ™‚</g-emoji>!</p>
<h2 dir="auto"><a id="user-content-acknowledgements" class="anchor" aria-hidden="true" href="#acknowledgements"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Acknowledgements</h2>
<p dir="auto"><code>MetaPhylo.jl</code> is inspired by <a href="https://github.com/JuliaGraphs/MetaGraphs.jl">MetaGraphs.jl</a> and implemented with <a href="https://github.com/JuliaGraphs/Graphs.jl">Graphs.jl</a> and <a href="https://github.com/JuliaCollections/AbstractTrees.jl">AbstractTrees.jl</a>.</p>
<h2 dir="auto"><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; import Pkg; Pkg.add(&quot;MetaPhylo&quot;);

julia&gt; using MetaPhylo

julia&gt; tree = parse_newick(&quot;((A:0.1,B:0.2)100:0.3,((C:0.4,D:0.5)77:0.6,E:0.7)98:0.8,F:0.9);&quot;, MetaPhylo.Tree{Int, UnRooted, ReRootable})
MetaPhylo.Tree with 6 leaves.
    Rooted: false
    Rerootable: true

julia&gt; print_tree(tree)
1: [root] 
â”œâ”€ 2: [value:100.0, length:0.3] 
â”‚  â”œâ”€ 3: [length:0.1] label:&quot;A&quot;
â”‚  â””â”€ 4: [length:0.2] label:&quot;B&quot;
â”œâ”€ 5: [value:98.0, length:0.8] 
â”‚  â”œâ”€ 6: [value:77.0, length:0.6] 
â”‚  â”‚  â”œâ”€ 7: [length:0.4] label:&quot;C&quot;
â”‚  â”‚  â””â”€ 8: [length:0.5] label:&quot;D&quot;
â”‚  â””â”€ 9: [length:0.7] label:&quot;E&quot;
â””â”€ 10: [length:0.9] label:&quot;F&quot;

julia&gt; tree[3]
Dict{Symbol, Any} with 1 entry:
  :label =&gt; &quot;A&quot;

julia&gt; tree[5,6]
Dict{Symbol, Any} with 2 entries:
  :value  =&gt; 77.0
  :length =&gt; 0.6

julia&gt; findnodes(tree, :label =&gt; isequal(&quot;A&quot;))
1-element Vector{Int64}:
 3

julia&gt; findbranches(tree, :value =&gt; x -&gt; x â‰¥ 90)
1-element Vector{Graphs.SimpleGraphs.SimpleEdge{Int64}}:
 Edge 1 =&gt; 2
 Edge 1 =&gt; 5

julia&gt; @time big_tree = Newick.File(&quot;/path/to/big_tree&quot;) |&gt; MetaPhylo.Tree{Int, UnRooted, ReRootable}
  3.394991 seconds (23.63 M allocations: 1.180 GiB, 32.24% gc time)
MetaPhylo.Tree with 54327 leaves.
    Rooted: false
    Rerootable: true

julia&gt; freeze(big_tree)
MetaPhylo.StaticTree with 54327 leaves.
    Rooted: false
    branch_data: NamedTuple{(:length,), Tuple{Float64}}
    node_data: NamedTuple{(), Tuple{}}"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">import</span> Pkg; Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>MetaPhylo<span class="pl-pds">"</span></span>);

julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> MetaPhylo

julia<span class="pl-k">&gt;</span> tree <span class="pl-k">=</span> <span class="pl-c1">parse_newick</span>(<span class="pl-s"><span class="pl-pds">"</span>((A:0.1,B:0.2)100:0.3,((C:0.4,D:0.5)77:0.6,E:0.7)98:0.8,F:0.9);<span class="pl-pds">"</span></span>, MetaPhylo<span class="pl-k">.</span>Tree{Int, UnRooted, ReRootable})
MetaPhylo<span class="pl-k">.</span>Tree with <span class="pl-c1">6</span> leaves.
    Rooted<span class="pl-k">:</span> <span class="pl-c1">false</span>
    Rerootable<span class="pl-k">:</span> <span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">print_tree</span>(tree)
<span class="pl-c1">1</span><span class="pl-k">:</span> [root] 
â”œâ”€ <span class="pl-c1">2</span><span class="pl-k">:</span> [value<span class="pl-k">:</span><span class="pl-c1">100.0</span>, length<span class="pl-k">:</span><span class="pl-c1">0.3</span>] 
â”‚  â”œâ”€ <span class="pl-c1">3</span><span class="pl-k">:</span> [length<span class="pl-k">:</span><span class="pl-c1">0.1</span>] label<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">"</span>A<span class="pl-pds">"</span></span>
â”‚  â””â”€ <span class="pl-c1">4</span><span class="pl-k">:</span> [length<span class="pl-k">:</span><span class="pl-c1">0.2</span>] label<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">"</span>B<span class="pl-pds">"</span></span>
â”œâ”€ <span class="pl-c1">5</span><span class="pl-k">:</span> [value<span class="pl-k">:</span><span class="pl-c1">98.0</span>, length<span class="pl-k">:</span><span class="pl-c1">0.8</span>] 
â”‚  â”œâ”€ <span class="pl-c1">6</span><span class="pl-k">:</span> [value<span class="pl-k">:</span><span class="pl-c1">77.0</span>, length<span class="pl-k">:</span><span class="pl-c1">0.6</span>] 
â”‚  â”‚  â”œâ”€ <span class="pl-c1">7</span><span class="pl-k">:</span> [length<span class="pl-k">:</span><span class="pl-c1">0.4</span>] label<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">"</span>C<span class="pl-pds">"</span></span>
â”‚  â”‚  â””â”€ <span class="pl-c1">8</span><span class="pl-k">:</span> [length<span class="pl-k">:</span><span class="pl-c1">0.5</span>] label<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">"</span>D<span class="pl-pds">"</span></span>
â”‚  â””â”€ <span class="pl-c1">9</span><span class="pl-k">:</span> [length<span class="pl-k">:</span><span class="pl-c1">0.7</span>] label<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">"</span>E<span class="pl-pds">"</span></span>
â””â”€ <span class="pl-c1">10</span><span class="pl-k">:</span> [length<span class="pl-k">:</span><span class="pl-c1">0.9</span>] label<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">"</span>F<span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> tree[<span class="pl-c1">3</span>]
Dict{Symbol, Any} with <span class="pl-c1">1</span> entry<span class="pl-k">:</span>
  <span class="pl-c1">:label</span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>A<span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> tree[<span class="pl-c1">5</span>,<span class="pl-c1">6</span>]
Dict{Symbol, Any} with <span class="pl-c1">2</span> entries<span class="pl-k">:</span>
  <span class="pl-c1">:value</span>  <span class="pl-k">=&gt;</span> <span class="pl-c1">77.0</span>
  <span class="pl-c1">:length</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">0.6</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">findnodes</span>(tree, <span class="pl-c1">:label</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">isequal</span>(<span class="pl-s"><span class="pl-pds">"</span>A<span class="pl-pds">"</span></span>))
<span class="pl-c1">1</span><span class="pl-k">-</span>element Vector{Int64}<span class="pl-k">:</span>
 <span class="pl-c1">3</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">findbranches</span>(tree, <span class="pl-c1">:value</span> <span class="pl-k">=&gt;</span> x <span class="pl-k">-&gt;</span> x <span class="pl-k">â‰¥</span> <span class="pl-c1">90</span>)
<span class="pl-c1">1</span><span class="pl-k">-</span>element Vector{Graphs<span class="pl-k">.</span>SimpleGraphs<span class="pl-k">.</span>SimpleEdge{Int64}}<span class="pl-k">:</span>
 Edge <span class="pl-c1">1</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">2</span>
 Edge <span class="pl-c1">1</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">5</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@time</span> big_tree <span class="pl-k">=</span> Newick<span class="pl-k">.</span><span class="pl-c1">File</span>(<span class="pl-s"><span class="pl-pds">"</span>/path/to/big_tree<span class="pl-pds">"</span></span>) <span class="pl-k">|&gt;</span> MetaPhylo<span class="pl-k">.</span>Tree{Int, UnRooted, ReRootable}
  <span class="pl-c1">3.394991</span> seconds (<span class="pl-c1">23.63</span> M allocations<span class="pl-k">:</span> <span class="pl-c1">1.180</span> GiB, <span class="pl-c1">32.24</span><span class="pl-k">%</span> gc time)
MetaPhylo<span class="pl-k">.</span>Tree with <span class="pl-c1">54327</span> leaves.
    Rooted<span class="pl-k">:</span> <span class="pl-c1">false</span>
    Rerootable<span class="pl-k">:</span> <span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">freeze</span>(big_tree)
MetaPhylo<span class="pl-k">.</span>StaticTree with <span class="pl-c1">54327</span> leaves.
    Rooted<span class="pl-k">:</span> <span class="pl-c1">false</span>
    branch_data<span class="pl-k">:</span> NamedTuple{(<span class="pl-c1">:length</span>,), Tuple{Float64}}
    node_data<span class="pl-k">:</span> NamedTuple{(), Tuple{}}</pre></div>
</article></div>