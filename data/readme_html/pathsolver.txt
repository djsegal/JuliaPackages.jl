<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-pathsolverjl" class="anchor" aria-hidden="true" href="#pathsolverjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>PATHSolver.jl</h1>

<p><a href="https://travis-ci.org/chkwon/PATHSolver.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/6aeb4ac52b4223320b44574dd26e4b1a359d9019/68747470733a2f2f7472617669732d63692e6f72672f63686b776f6e2f50415448536f6c7665722e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/chkwon/PATHSolver.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/chkwon/pathsolver-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/4d13c74256cc39180194736b7e4d15ddf7a18cdd/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f756c3972623876327273786d343435643f7376673d74727565" alt="Build status" data-canonical-src="https://ci.appveyor.com/api/projects/status/ul9rb8v2rsxm445d?svg=true" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/chkwon/PATHSolver.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/a22393da78945b6d3338db12ca1f652959a1b23d/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f63686b776f6e2f50415448536f6c7665722e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/chkwon/PATHSolver.jl/badge.svg?branch=master" style="max-width:100%;"></a></p>
<p>This package provides a Julia wrapper of <a href="http://pages.cs.wisc.edu/~ferris/path.html" rel="nofollow">the PATH Solver</a> for solving <a href="https://en.wikipedia.org/wiki/Mixed_complementarity_problem" rel="nofollow">Mixed Complementarity Problems (MCP)</a>. This package requires compiled libraries available in <a href="https://github.com/ampl/pathlib">ampl/pathlib</a> and <a href="https://github.com/chkwon/PathJulia">PathJulia</a>.</p>
<p>This package (well the PATH Solver) solves the MCP of the following form:</p>
<pre><code>lb ≤ x ≤ ub ⟂ F(x)
</code></pre>
<p>which means</p>
<ul>
<li><code>x = lb</code>, then <code>F(x) ≥ 0</code></li>
<li><code>lb &lt; x &lt; ub</code>, then <code>F(x) = 0</code></li>
<li><code>x = ub</code>, then <code>F(x) ≤ 0</code></li>
</ul>
<h1><a id="user-content-license" class="anchor" aria-hidden="true" href="#license"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>License</h1>
<p>Without a license, the PATH Solver can solve problem instances up to with up to 300 variables and 2000 non-zeros. For larger problems, the web page of the PATH Solver provides a temporary license that is valid for a year. A new license is provided each year in the web page. Visit the <a href="http://pages.cs.wisc.edu/~ferris/path/LICENSE" rel="nofollow">license page</a> of the PATH Solver.</p>
<p>For example, in Mac OS X: Edit your <code>.bash_profile</code> file. For example, if you have <code>Atom</code> editor:</p>
<div class="highlight highlight-source-shell"><pre>atom <span class="pl-k">~</span>/.bash_profile</pre></div>
<p>and add the following two lines:</p>
<div class="highlight highlight-source-shell"><pre><span class="pl-k">export</span> PATH_LICENSE_STRING=<span class="pl-s"><span class="pl-pds">"</span>---------------------------------------------------------------<span class="pl-pds">"</span></span></pre></div>
<p>You can obtain the most recent <code>PATH_LICENSE_STRING</code> from <a href="http://pages.cs.wisc.edu/~ferris/path/LICENSE" rel="nofollow">the website of the PATH Solver</a>. To reflect the change:</p>
<div class="highlight highlight-source-shell"><pre><span class="pl-c1">source</span> <span class="pl-k">~</span>/.bash_profile</pre></div>
<p>and then rebuild the package:</p>
<div class="highlight highlight-source-julia"><pre>] build PATHSolver</pre></div>
<h1><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Installation</h1>
<p>To install,</p>
<div class="highlight highlight-source-julia"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>PATHSolver<span class="pl-pds">"</span></span>)</pre></div>
<p>and to test if it works,</p>
<div class="highlight highlight-source-julia"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">test</span>(<span class="pl-s"><span class="pl-pds">"</span>PATHSolver<span class="pl-pds">"</span></span>)</pre></div>
<p>To use algebraic modeling language for MCP, install and use the <a href="https://github.com/chkwon/Complementarity.jl">Complementarity.jl</a> package.</p>
<h1><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Example</h1>
<p>This example solves a Linear Complementarity Problem (LCP) in the form of:</p>
<pre><code>0 ≤ x ⟂ F(x) ≥ 0
</code></pre>
<p>or</p>
<pre><code>F(x)' x = 0
F(x) ≥ 0
x ≥ 0
</code></pre>
<p>when <code>F(x) = Mx + q</code>.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> PATHSolver

M <span class="pl-k">=</span> [<span class="pl-c1">0</span>  <span class="pl-c1">0</span> <span class="pl-k">-</span><span class="pl-c1">1</span> <span class="pl-k">-</span><span class="pl-c1">1</span> ;
     <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">1</span> <span class="pl-k">-</span><span class="pl-c1">2</span> ;
     <span class="pl-c1">1</span> <span class="pl-k">-</span><span class="pl-c1">1</span>  <span class="pl-c1">2</span> <span class="pl-k">-</span><span class="pl-c1">2</span> ;
     <span class="pl-c1">1</span>  <span class="pl-c1">2</span> <span class="pl-k">-</span><span class="pl-c1">2</span>  <span class="pl-c1">4</span> ]

q <span class="pl-k">=</span> [<span class="pl-c1">2</span>; <span class="pl-c1">2</span>; <span class="pl-k">-</span><span class="pl-c1">2</span>; <span class="pl-k">-</span><span class="pl-c1">6</span>]

<span class="pl-en">myfunc</span>(x) <span class="pl-k">=</span> M<span class="pl-k">*</span>x <span class="pl-k">+</span> q

n <span class="pl-k">=</span> <span class="pl-c1">4</span>
lb <span class="pl-k">=</span> <span class="pl-c1">zeros</span>(n)
ub <span class="pl-k">=</span> <span class="pl-c1">100</span><span class="pl-k">*</span><span class="pl-c1">ones</span>(n)

<span class="pl-c1">options</span>(convergence_tolerance<span class="pl-k">=</span><span class="pl-c1">1e-2</span>, output<span class="pl-k">=</span><span class="pl-c1">:yes</span>, time_limit<span class="pl-k">=</span><span class="pl-c1">3600</span>)


z, f <span class="pl-k">=</span> <span class="pl-c1">solveMCP</span>(myfunc, lb, ub)</pre></div>
<p>You can also supply a function for Jacobian:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-en">myjac</span>(x) <span class="pl-k">=</span> M
z, f <span class="pl-k">=</span> <span class="pl-c1">solveMCP</span>(myfunc, myjac, lb, ub)</pre></div>
<p>When the Jacobian function is not supplied, it uses the automatic differentiation functionality of <a href="https://github.com/JuliaDiff/ForwardDiff.jl">ForwardDiff.jl</a>.</p>
<p>When the problem is a <strong>linear</strong> complementarity problem (LCP), one can use <code>solveLCP</code>:</p>
<div class="highlight highlight-source-julia"><pre>z, f <span class="pl-k">=</span> <span class="pl-c1">solveLCP</span>(myfunc, lb, ub)</pre></div>
<p>To supply the Jacobian matrix:</p>
<div class="highlight highlight-source-julia"><pre>z, f <span class="pl-k">=</span> <span class="pl-c1">solveLCP</span>(myfunc, M, lb, ub)</pre></div>
<p>These <code>solveLCP</code> functions do not evaluate the derivatives during iterations.</p>
<p>The result is:</p>
<pre><code>Path 4.7.03: Standalone-C Link
4 row/cols, 12 non-zeros, 75.00% dense.
Reading options file path.opt
 &gt; convergence_tolerance 1e-2
 &gt; output yes
 &gt; time_limit 3600
Read of options file complete.
Path 4.7.03 (Thu Jan 24 15:44:03 2013)
Written by Todd Munson, Steven Dirkse, and Michael Ferris
INITIAL POINT STATISTICS
Maximum of X. . . . . . . . . .  0.0000e+00 var: (x[    1])
Maximum of F. . . . . . . . . .  6.0000e+00 eqn: (f[    4])
Maximum of Grad F . . . . . . .  4.0000e+00 eqn: (f[    4])
                                            var: (x[    4])
INITIAL JACOBIAN NORM STATISTICS
Maximum Row Norm. . . . . . . .  9.0000e+00 eqn: (f[    4])
Minimum Row Norm. . . . . . . .  2.0000e+00 eqn: (f[    1])
Maximum Column Norm . . . . . .  9.0000e+00 var: (x[    4])
Minimum Column Norm . . . . . .  2.0000e+00 var: (x[    1])
Crash Log
major  func  diff  size  residual    step       prox   (label)
    0     0             1.2295e+01             0.0e+00 (f[    4])
    1     2     4     2 1.0267e+01  8.0e-01    0.0e+00 (f[    1])
    2     3     2     4 8.4839e-01  1.0e+00    0.0e+00 (f[    4])
    3     4     0     3 4.4409e-16  1.0e+00    0.0e+00 (f[    3])
pn_search terminated: no basis change.
Major Iteration Log
major minor  func  grad  residual    step  type prox    inorm  (label)
    0     0     5     4 4.4409e-16           I 0.0e+00 4.4e-16 (f[    3])
FINAL STATISTICS
Inf-Norm of Complementarity . .  3.5527e-16 eqn: (f[    3])
Inf-Norm of Normal Map. . . . .  4.4409e-16 eqn: (f[    3])
Inf-Norm of Fischer Function. .  4.4409e-16 eqn: (f[    3])
Inf-Norm of Grad Fischer Fcn. .  8.8818e-16 eqn: (f[    3])
Two-Norm of Grad Fischer Fcn. .  1.4043e-15
FINAL POINT STATISTICS
Maximum of X. . . . . . . . . .  2.8000e+00 var: (x[    1])
Maximum of F. . . . . . . . . .  4.0000e-01 eqn: (f[    2])
Maximum of Grad F . . . . . . .  4.0000e+00 eqn: (f[    4])
                                            var: (x[    4])
 ** EXIT - solution found.
Major Iterations. . . . 0
Minor Iterations. . . . 0
Restarts. . . . . . . . 0
Crash Iterations. . . . 3
Gradient Steps. . . . . 0
Function Evaluations. . 5
Gradient Evaluations. . 4
Basis Time. . . . . . . 0.000046
Total Time. . . . . . . 0.060200
Residual. . . . . . . . 4.440892e-16
Residual of 4.44089e-16 is OK
z = [2.8,0.0,0.8,1.2]
f = [0.0,0.40000000000000013,4.440892098500626e-16,0.0]
</code></pre>
<h1><a id="user-content-labels" class="anchor" aria-hidden="true" href="#labels"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Labels</h1>
<p>In the above output, the variable and function names are given as <code>x</code> and <code>f</code> automatically by the solver. If you want to give own names, you can do it as follows:</p>
<div class="highlight highlight-source-julia"><pre>var_name <span class="pl-k">=</span> [<span class="pl-s"><span class="pl-pds">"</span>first var<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>second var<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>third var<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>fourth var<span class="pl-pds">"</span></span>]
con_name <span class="pl-k">=</span> [<span class="pl-s"><span class="pl-pds">"</span>func 1<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>func 2<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>func 3<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>func 4<span class="pl-pds">"</span></span>]

status, z, f <span class="pl-k">=</span> <span class="pl-c1">solveMCP</span>(myfunc, lb, ub)
status, z, f <span class="pl-k">=</span> <span class="pl-c1">solveMCP</span>(myfunc, lb, ub, var_name)
status, z, f <span class="pl-k">=</span> <span class="pl-c1">solveMCP</span>(myfunc, lb, ub, var_name, con_name)
status, z, f <span class="pl-k">=</span> <span class="pl-c1">solveMCP</span>(myfunc, myjac, lb, ub)
status, z, f <span class="pl-k">=</span> <span class="pl-c1">solveMCP</span>(myfunc, myjac, lb, ub, var_name)
status, z, f <span class="pl-k">=</span> <span class="pl-c1">solveMCP</span>(myfunc, myjac, lb, ub, var_name, con_name)</pre></div>
<h1><a id="user-content-warmstart" class="anchor" aria-hidden="true" href="#warmstart"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Warmstart</h1>
<p>You can provide initial values.</p>
<div class="highlight highlight-source-julia"><pre>var_name <span class="pl-k">=</span> [<span class="pl-s"><span class="pl-pds">"</span>first var<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>second var<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>third var<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>fourth var<span class="pl-pds">"</span></span>]
con_name <span class="pl-k">=</span> [<span class="pl-s"><span class="pl-pds">"</span>func 1<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>func 2<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>func 3<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>func 4<span class="pl-pds">"</span></span>]

z0 <span class="pl-k">=</span> [<span class="pl-c1">0.0</span>, <span class="pl-c1">1.0</span>, <span class="pl-c1">2.0</span>, <span class="pl-c1">3.0</span>]

status, z, f <span class="pl-k">=</span> <span class="pl-c1">solveMCP</span>(myfunc, lb, ub, z0)
status, z, f <span class="pl-k">=</span> <span class="pl-c1">solveMCP</span>(myfunc, lb, ub, z0, var_name)
status, z, f <span class="pl-k">=</span> <span class="pl-c1">solveMCP</span>(myfunc, lb, ub, z0, var_name, con_name)
status, z, f <span class="pl-k">=</span> <span class="pl-c1">solveMCP</span>(myfunc, myjac, lb, ub, z0)
status, z, f <span class="pl-k">=</span> <span class="pl-c1">solveMCP</span>(myfunc, myjac, lb, ub, z0, var_name)
status, z, f <span class="pl-k">=</span> <span class="pl-c1">solveMCP</span>(myfunc, myjac, lb, ub, z0, var_name, con_name)</pre></div>
<h1><a id="user-content-solver-options" class="anchor" aria-hidden="true" href="#solver-options"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Solver Options</h1>
<p>Before solving the problem, you can set the solver options; for example:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">options</span>(convergence_tolerance<span class="pl-k">=</span><span class="pl-c1">1e-2</span>, output<span class="pl-k">=</span><span class="pl-c1">:yes</span>, time_limit<span class="pl-k">=</span><span class="pl-c1">3600</span>, lemke_start<span class="pl-k">=</span><span class="pl-c1">:first</span>, nms_searchtype<span class="pl-k">=</span><span class="pl-c1">:line</span>)</pre></div>
<p>The full list of options is available at: <a href="http://pages.cs.wisc.edu/~ferris/path/options.pdf" rel="nofollow">http://pages.cs.wisc.edu/~ferris/path/options.pdf</a></p>
</article></div>