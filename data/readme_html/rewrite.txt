<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-rewritejl" class="anchor" aria-hidden="true" href="#rewritejl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Rewrite.jl</h1>
<p><a href="https://travis-ci.com/HarrisonGrodin/Rewrite.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/c57e164523d2451da3909fd8b5c7bdf35a404b4816fee4844aff3ff9dacf8708/68747470733a2f2f7472617669732d63692e636f6d2f4861727269736f6e47726f64696e2f526577726974652e6a6c2e7376673f6272616e63683d6d6173746572" alt="Travis Build Status" data-canonical-src="https://travis-ci.com/HarrisonGrodin/Rewrite.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/HarrisonGrodin/rewrite-jl/branch/master" rel="nofollow"><img src="https://camo.githubusercontent.com/cf092fa7d422ca7dba8c275bfd09d393f95400cb7aa13f9191299887f2956f84/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f756e6375696f683734326f3636716b392f6272616e63682f6d61737465723f7376673d74727565" alt="AppVeyor Build Status" data-canonical-src="https://ci.appveyor.com/api/projects/status/uncuioh742o66qk9/branch/master?svg=true" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/HarrisonGrodin/Rewrite.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/652a0360094e8df4a755c68cf61f15d2a5b97599c3276c4079948e05c11ef7db/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f4861727269736f6e47726f64696e2f526577726974652e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/HarrisonGrodin/Rewrite.jl/badge.svg?branch=master" style="max-width:100%;"></a></p>
<p><strong>Rewrite.jl</strong> is an efficient symbolic term rewriting engine.</p>
<hr>
<p>There are three primary steps in the development and use of a rewriting program:</p>
<ol>
<li>Map each relevant function symbol to an equational theory. For example, we might specify that <code>+</code> is associative and commutative.</li>
<li>Define a system of rules to rewrite with respect to. For example, we might describe a desired rewrite from <code>x + 0</code> to <code>x</code>, for all <code>x</code>.</li>
<li>Rewrite a concrete term using the rules.</li>
</ol>
<h2><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example</h2>
<h3><a id="user-content-theory-definition" class="anchor" aria-hidden="true" href="#theory-definition"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Theory Definition</h3>
<p>In this example, we'll simplify boolean propositions.</p>
<p>First, we'll define the theories which each function symbol belongs to. "Free" symbols follow no special axioms during matching, whereas AC symbols will match under <a href="https://en.wikipedia.org/wiki/Associative_property" rel="nofollow">associativity</a> and <a href="https://en.wikipedia.org/wiki/Commutative_property" rel="nofollow">commutativity</a>.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="@theory! begin
    F =&gt; FreeTheory()
    T =&gt; FreeTheory()
    (&amp;) =&gt; ACTheory()
    (|) =&gt; ACTheory()
    (!) =&gt; FreeTheory()
end
"><pre><span class="pl-c1">@theory!</span> <span class="pl-k">begin</span>
    F <span class="pl-k">=&gt;</span> <span class="pl-c1">FreeTheory</span>()
    T <span class="pl-k">=&gt;</span> <span class="pl-c1">FreeTheory</span>()
    (<span class="pl-k">&amp;</span>) <span class="pl-k">=&gt;</span> <span class="pl-c1">ACTheory</span>()
    (<span class="pl-k">|</span>) <span class="pl-k">=&gt;</span> <span class="pl-c1">ACTheory</span>()
    (<span class="pl-k">!</span>) <span class="pl-k">=&gt;</span> <span class="pl-c1">FreeTheory</span>()
<span class="pl-k">end</span></pre></div>
<p>Using the <code>@theory!</code> macro, we associate each of our symbols with a theory. Note that <code>F</code> and <code>T</code> will be a nullary (zero-argument) function, so we assign it the <code>FreeTheory</code>.</p>
<h3><a id="user-content-rules-definition" class="anchor" aria-hidden="true" href="#rules-definition"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Rules Definition</h3>
<p>Given the defined theory, we now want to describe the rules which govern boolean logic. We include a handful of cases:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="@rules Prop [x, y] begin
    x &amp; F := F
    x &amp; T := x

    x | F := x
    x | T := T

    !T := F
    !F := T

    !(x &amp; y) := !x | !y
    !(x | y) := !x &amp; !y
    !(!x)    := x
end
"><pre><span class="pl-c1">@rules</span> Prop [x, y] <span class="pl-k">begin</span>
    x <span class="pl-k">&amp;</span> F <span class="pl-k">:=</span> F
    x <span class="pl-k">&amp;</span> T <span class="pl-k">:=</span> x

    x <span class="pl-k">|</span> F <span class="pl-k">:=</span> x
    x <span class="pl-k">|</span> T <span class="pl-k">:=</span> T

    <span class="pl-k">!</span>T <span class="pl-k">:=</span> F
    <span class="pl-k">!</span>F <span class="pl-k">:=</span> T

    <span class="pl-k">!</span>(x <span class="pl-k">&amp;</span> y) <span class="pl-k">:=</span> <span class="pl-k">!</span>x <span class="pl-k">|</span> <span class="pl-k">!</span>y
    <span class="pl-k">!</span>(x <span class="pl-k">|</span> y) <span class="pl-k">:=</span> <span class="pl-k">!</span>x <span class="pl-k">&amp;</span> <span class="pl-k">!</span>y
    <span class="pl-k">!</span>(<span class="pl-k">!</span>x)    <span class="pl-k">:=</span> x
<span class="pl-k">end</span></pre></div>
<p>Naming the rewriting system <code>Prop</code> and using <code>x</code> as a variable, we define many rules. To verbalize a few of them:</p>
<ul>
<li>"<code>x</code> and false" is definitely false.</li>
<li>"not true" is definitely false.</li>
<li>"not (<code>x</code> and <code>y</code>)" is equivalent to "(not <code>x</code>) or (not <code>y</code>)".</li>
<li>"not (not <code>x</code>)" is equivalent to whatever <code>x</code> is.</li>
</ul>
<p>Under the hood, a custom function called <code>Prop</code> was defined, optimized for rewriting with these specific rules.</p>
<h3><a id="user-content-rewriting" class="anchor" aria-hidden="true" href="#rewriting"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Rewriting</h3>
<p>Let's test it out on some concrete terms. First, we can evaluate some expressions which are based on constants:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; @rewrite(Prop, !(T &amp; F) | !(!F))
@term(T())

julia&gt; @rewrite(Prop, !(T &amp; T) | !(!F | F))
@term(F())
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">@rewrite</span>(Prop, <span class="pl-k">!</span>(T <span class="pl-k">&amp;</span> F) <span class="pl-k">|</span> <span class="pl-k">!</span>(<span class="pl-k">!</span>F))
<span class="pl-c1">@term</span>(<span class="pl-c1">T</span>())

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@rewrite</span>(Prop, <span class="pl-k">!</span>(T <span class="pl-k">&amp;</span> T) <span class="pl-k">|</span> <span class="pl-k">!</span>(<span class="pl-k">!</span>F <span class="pl-k">|</span> F))
<span class="pl-c1">@term</span>(<span class="pl-c1">F</span>())</pre></div>
<p>We can also bring in our own custom symbols, which the system knows nothing about:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; @rewrite(Prop, a &amp; (T &amp; b) &amp; (c &amp; !F))
@term(&amp;(a(), b(), c()))

julia&gt; @rewrite(Prop, F | f(!(b &amp; T)))
@term(f(!(b())))
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">@rewrite</span>(Prop, a <span class="pl-k">&amp;</span> (T <span class="pl-k">&amp;</span> b) <span class="pl-k">&amp;</span> (c <span class="pl-k">&amp;</span> <span class="pl-k">!</span>F))
<span class="pl-c1">@term</span>(<span class="pl-k">&amp;</span>(<span class="pl-c1">a</span>(), <span class="pl-c1">b</span>(), <span class="pl-c1">c</span>()))

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@rewrite</span>(Prop, F <span class="pl-k">|</span> <span class="pl-c1">f</span>(<span class="pl-k">!</span>(b <span class="pl-k">&amp;</span> T)))
<span class="pl-c1">@term</span>(<span class="pl-c1">f</span>(<span class="pl-k">!</span>(<span class="pl-c1">b</span>())))</pre></div>
<p>Success! We've rewritten some boolean terms.</p>
</article></div>