<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><div align="center" dir="auto">
   <a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/38b2f477dfd6a155c1d0de605160f0ead0a22d190c32eb1a8dcb90767b896877/68747470733a2f2f692e6b796d2d63646e2e636f6d2f656e74726965732f69636f6e732f6f726967696e616c2f3030302f3032392f3935392f53637265656e5f53686f745f323031392d30362d30355f61745f312e32362e33325f504d2e6a7067"><img src="https://camo.githubusercontent.com/38b2f477dfd6a155c1d0de605160f0ead0a22d190c32eb1a8dcb90767b896877/68747470733a2f2f692e6b796d2d63646e2e636f6d2f656e74726965732f69636f6e732f6f726967696e616c2f3030302f3032392f3935392f53637265656e5f53686f745f323031392d30362d30355f61745f312e32362e33325f504d2e6a7067" alt="Stonks logo" style="height: 150px; width: 266px; max-width: 100%;" data-canonical-src="https://i.kym-cdn.com/entries/icons/original/000/029/959/Screen_Shot_2019-06-05_at_1.26.32_PM.jpg"></a>
  <br>
  <p dir="auto">
    </p><h1 dir="auto"><a id="user-content---------------stonksjl----------" class="anchor" aria-hidden="true" href="#--------------stonksjl----------"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>
      <b>
        Stonks.jl
      </b>
    </h1>
  <p dir="auto"></p>
  <p dir="auto">
    <b> <g-emoji class="g-emoji" alias="chart_with_upwards_trend" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4c8.png">📈</g-emoji> The layman's solution for retrieval and storage of financial data.</b>
  </p>
  <p dir="auto">
  <a href="https://github.com/alinski29/Stonks.jl/actions/workflows/ci.yml/badge.svg?branch=main">
   <img src="https://github.com/alinski29/Stonks.jl/actions/workflows/ci.yml/badge.svg?branch=main" alt="CI status" style="max-width: 100%;">
  </a>
  <a href="https://codecov.io/gh/alinski29/Stonks.jl/branch/main/graph/badge.svg?token=FPIHWY0WD3" rel="nofollow">
   <img src="https://camo.githubusercontent.com/180dda391936c2d973ca502ec1fcb3cb2e2f9833c0f2a500ca656a45ffa559dc/68747470733a2f2f636f6465636f762e696f2f67682f616c696e736b6932392f53746f6e6b732e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e7376673f746f6b656e3d46504948575930574433" alt="Coverage status" data-canonical-src="https://codecov.io/gh/alinski29/Stonks.jl/branch/main/graph/badge.svg?token=FPIHWY0WD3" style="max-width: 100%;">
  </a>
  <a href="https://github.com/alinski29/Stonks.jl/actions/workflows/documentation.yml/badge.svg?branch=main">
  <img src="https://github.com/alinski29/Stonks.jl/actions/workflows/documentation.yml/badge.svg?branch=main" alt="Documentation status" style="max-width: 100%;">
  </a>
  </p>  
  <p dir="auto">
</p></div>
<p dir="auto">Stonks.jl is the Julia library that lets you access and store financial data from multiple APIs into a unified data model. It gives you the tools to generalize the data retrieval and storage from any API with a simple interface in a type-safe manner.</p>
<details open="">
  <summary><b>Table of contents</b></summary>
<hr>
<ul dir="auto">
<li><a href="#features">Features</a></li>
<li><a href="#api-summary">API Summary</a></li>
<li><a href="#basic-usage">Basic Usage</a>
<ul dir="auto">
<li><a href="#get-price-time-series">Get price time series</a></li>
<li><a href="#get-asset-information">Get asset information</a></li>
<li><a href="#get-exchange-rates">Get exchange rates</a></li>
<li><a href="#get-financial-statements">Get financial statements</a></li>
<li><a href="#tablesjl-integration">Tables.jl integration</a></li>
<li><a href="#persisting-data">Persisting data</a></li>
</ul>
</li>
<li><a href="#advanced-usage">Advanced usage</a>
<ul dir="auto">
<li><a href="#plug-in-any-data-format">Plug in any data format</a></li>
<li><a href="#create-api-resources-for-your-custom-models">Create API resources for your custom models</a></li>
<li><a href="#create-your-client-from-combining-api-resources">Create your client from combining API resources</a></li>
</ul>
</li>
<li><a href="#contributing">Contributing</a></li>
<li><a href="#license">License</a></li>
</ul>
<hr>
</details>
<h2 dir="auto"><a id="user-content-features" class="anchor" aria-hidden="true" href="#features"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><strong>Features</strong></h2>
<ul dir="auto">
<li>Designed to work with several APIs in an agnostic way, where several APIs are capable of returning the same data.</li>
<li>Comes with a pre-defined data model (types), but you're free to <a href="#create-api-resources-for-your-custom-models">design your own types</a>.</li>
<li>Store and update data locally with ease using the <a href="#persisting-data"><code>FileStore</code></a>, which can work with <a href="#plug-in-any-data-format">any file format</a>. Supports data partitioning, writes are atomic, schema validation on read and write. Incrementally update everything in your datastore with just one function.</li>
<li>Batching of multiple stock tickers if the API resource allows it, thus minimizing the number of requests.</li>
<li>Asynchronous request processing. Multiple requests will processed asynchronously and multi-threaded, thus minimizing the network wait time.</li>
<li>Silent by design. The main exposed functions for fetching and saving data don't throw an error, making your program crash. Instead, it will return the error with an explanative message of what went wrong.</li>
</ul>
<hr>
<h2 dir="auto"><a id="user-content-api-summary" class="anchor" aria-hidden="true" href="#api-summary"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><strong>API summary</strong></h2>
<p dir="auto">The following data models and functions are exposed by the library.
Typically, Alphavantage client has more historical data.</p>
<table>







<thead>
  <tr>
    <th rowspan="2">Type</th>
    <th rowspan="2">Function</th>
    <th rowspan="2">Description</th>
    <th colspan="2">Clients</th>
  </tr>
  <tr>
    <th>Alphavantage</th>
    <th>Yahoo Finance</th>
  </tr>
</thead>
<tbody>
  <tr>
    <td><a href="https://alinski29.github.io/Stonks.jl/dev/api_types.html#Stonks.Models.AssetInfo" rel="nofollow">AssetInfo</a></td>
    <td><a href="https://alinski29.github.io/Stonks.jl/dev/api_functions.html#Stonks.get_info" rel="nofollow">get_info</a></td>
    <td>Basic stock information</td>
    <td><g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">✅</g-emoji></td>
    <td><g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">✅</g-emoji></td>
  </tr>
  <tr>
    <td><a href="https://alinski29.github.io/Stonks.jl/dev/api_types.html#Stonks.Models.AssetPrice" rel="nofollow">AssetPrice</a></td>
    <td><a href="https://alinski29.github.io/Stonks.jl/dev/api_functions.html#Stonks.get_price" rel="nofollow">get_price</a></td>
    <td>Historical price time series<br></td>
    <td><g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">✅</g-emoji></td>
    <td><g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">✅</g-emoji></td>
  </tr>
  <tr>
    <td><a href="https://alinski29.github.io/Stonks.jl/dev/api_types.html#Stonks.Models.ExchangeRate" rel="nofollow">ExchangeRate</a></td>
    <td><a href="https://alinski29.github.io/Stonks.jl/dev/api_functions.html#Stonks.get_exchange_rate" rel="nofollow">get_exchange_rate</a></td>
    <td>Historical exchange rate time series<br></td>
    <td><g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">✅</g-emoji></td>
    <td><g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">✅</g-emoji></td>
  </tr>
  <tr>
    <td><a href="https://alinski29.github.io/Stonks.jl/dev/api_types.html#Stonks.Models.IncomeStatement" rel="nofollow">IncomeStatement</a></td>
    <td><a href="https://alinski29.github.io/Stonks.jl/dev/api_functions.html#Stonks.get_income_statement" rel="nofollow">get_income_statement</a></td>
    <td>Historical income statement<br></td>
    <td><g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">✅</g-emoji></td>
    <td><g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">✅</g-emoji></td>
  </tr>
  <tr>
    <td><a href="https://alinski29.github.io/Stonks.jl/dev/api_types.html#Stonks.Models.BalanceSheet" rel="nofollow">BalanceSheet</a></td>
    <td><a href="https://alinski29.github.io/Stonks.jl/dev/api_functions.html#Stonks.get_balance_sheet" rel="nofollow">get_balance_sheet</a></td>
    <td>Historical balance sheet data<br></td>
    <td><g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">✅</g-emoji></td>
    <td><g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">✅</g-emoji></td>
  </tr>
  <tr>
    <td><a href="https://alinski29.github.io/Stonks.jl/dev/api_types.html#Stonks.Models.CashflowStatement" rel="nofollow">CashflowStatement</a></td>
    <td><a href="https://alinski29.github.io/Stonks.jl/dev/api_functions.html#Stonks.get_cashflow_statement" rel="nofollow">get_cashflow_statement</a></td>
    <td>Historical cashflow statement data<br></td>
    <td><g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">✅</g-emoji></td>
    <td><g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">✅</g-emoji></td>
  </tr>
  <tr>
    <td><a href="https://alinski29.github.io/Stonks.jl/dev/api_types.html#Stonks.Models.Earnings" rel="nofollow">Earnings</a></td>
    <td><a href="https://alinski29.github.io/Stonks.jl/dev/api_functions.html#Stonks.get_earnings" rel="nofollow">get_earnings</a></td>
    <td>Historical earnings per share (EPS) data<br></td>
    <td><g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">✅</g-emoji></td>
    <td><g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">✅</g-emoji></td>
  </tr>
  <tr>
    <td colspan="2">Upcoming</td>
    <td></td>
    <td></td>
    <td></td>
  </tr>
  <tr>
    <td>EarningsCalendar</td>
    <td>get_earnings_calendar</td>
    <td></td>
    <td></td>
    <td></td>
  </tr>
</tbody>
</table>
<hr>
<h2 dir="auto"><a id="user-content-basic-usage" class="anchor" aria-hidden="true" href="#basic-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><strong>Basic Usage</strong></h2>
<h3 dir="auto"><a id="user-content-get-price-time-series" class="anchor" aria-hidden="true" href="#get-price-time-series"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><strong>Get price time series</strong></h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Dates
using Stonks

# Create a  client
client = YahooClient(&quot;&lt;api_key&gt;&quot;) # or AlphavantageJSONClient(&lt;api_key&gt;)
julia&gt; ref_date = Date(&quot;2022-02-18&quot;)
2022-02-18

# to can be ommited, defaults to current day.
julia&gt; get_price(&quot;AAPL&quot;, client; from=ref_date-Day(1), to=ref_date)
# 2-element Vector{AssetPrice}:
 AssetPrice(&quot;AAPL&quot;, Date(&quot;2022-02-18&quot;), 167.3, 169.82, 170.5413, 166.19, missing, 82772674)
 AssetPrice(&quot;AAPL&quot;, Date(&quot;2022-02-17&quot;), 168.88, 171.03, 171.91, 168.47, missing, 69589344)
 # you can omit the client if you have the correct environment variables set
julia&gt; length(ENV[&quot;ALPHAVANTAGE_TOKEN&quot;]) # ENV[&quot;YAHOOFINANCE_TOKEN&quot;] works as well
16
julia&gt; prices = get_price([&quot;AAPL&quot;, &quot;MSFT&quot;]; from=ref_date-Day(2), to=ref_date) 
# 6-element Vector{AssetPrice}:
 AssetPrice(&quot;AAPL&quot;, Date(&quot;2022-02-18&quot;), 167.3, 169.82, 170.5413, 166.19, missing, 82772674)
 AssetPrice(&quot;AAPL&quot;, Date(&quot;2022-02-17&quot;), 168.88, 171.03, 171.91, 168.47, missing, 69589344)
 AssetPrice(&quot;AAPL&quot;, Date(&quot;2022-02-16&quot;), 172.55, 171.85, 173.34, 170.05, missing, 61177398)
 AssetPrice(&quot;MSFT&quot;, Date(&quot;2022-02-18&quot;), 287.93, 293.05, 293.86, 286.305, missing, 34264008)
 AssetPrice(&quot;MSFT&quot;, Date(&quot;2022-02-17&quot;), 290.73, 296.36, 296.8, 290.0, missing, 32461580)
 AssetPrice(&quot;MSFT&quot;, Date(&quot;2022-02-16&quot;), 299.5, 298.365, 300.87, 293.68, missing, 29982121)
# you can query each symbol with different time intervals
julia&gt; prices = get_price([
  (&quot;AAPL&quot;, Date(&quot;2022-02-15&quot;), Date(&quot;2022-02-16&quot;)),
  (&quot;MSFT&quot;, Date(&quot;2022-02-14&quot;), Date(&quot;2022-02-15&quot;)),
])
# 4-element Vector{AssetPrice}:
 AssetPrice(&quot;MSFT&quot;, Date(&quot;2022-02-15&quot;), 300.47, 300.008, 300.8, 297.02, missing, 27379488)
 AssetPrice(&quot;MSFT&quot;, Date(&quot;2022-02-14&quot;), 295.0, 293.77, 296.76, 291.35, missing, 36359487)
 AssetPrice(&quot;AAPL&quot;, Date(&quot;2022-02-16&quot;), 172.55, 171.85, 173.34, 170.05, missing, 61177398)
 AssetPrice(&quot;AAPL&quot;, Date(&quot;2022-02-15&quot;), 172.79, 170.97, 172.95, 170.25, missing, 64286320)"><pre><span class="pl-k">using</span> Dates
<span class="pl-k">using</span> Stonks

<span class="pl-c"><span class="pl-c">#</span> Create a  client</span>
client <span class="pl-k">=</span> <span class="pl-c1">YahooClient</span>(<span class="pl-s"><span class="pl-pds">"</span>&lt;api_key&gt;<span class="pl-pds">"</span></span>) <span class="pl-c"><span class="pl-c">#</span> or AlphavantageJSONClient(&lt;api_key&gt;)</span>
julia<span class="pl-k">&gt;</span> ref_date <span class="pl-k">=</span> <span class="pl-c1">Date</span>(<span class="pl-s"><span class="pl-pds">"</span>2022-02-18<span class="pl-pds">"</span></span>)
<span class="pl-c1">2022</span><span class="pl-k">-</span><span class="pl-c1">02</span><span class="pl-k">-</span><span class="pl-c1">18</span>

<span class="pl-c"><span class="pl-c">#</span> to can be ommited, defaults to current day.</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">get_price</span>(<span class="pl-s"><span class="pl-pds">"</span>AAPL<span class="pl-pds">"</span></span>, client; from<span class="pl-k">=</span>ref_date<span class="pl-k">-</span><span class="pl-c1">Day</span>(<span class="pl-c1">1</span>), to<span class="pl-k">=</span>ref_date)
<span class="pl-c"><span class="pl-c">#</span> 2-element Vector{AssetPrice}:</span>
 <span class="pl-c1">AssetPrice</span>(<span class="pl-s"><span class="pl-pds">"</span>AAPL<span class="pl-pds">"</span></span>, <span class="pl-c1">Date</span>(<span class="pl-s"><span class="pl-pds">"</span>2022-02-18<span class="pl-pds">"</span></span>), <span class="pl-c1">167.3</span>, <span class="pl-c1">169.82</span>, <span class="pl-c1">170.5413</span>, <span class="pl-c1">166.19</span>, <span class="pl-c1">missing</span>, <span class="pl-c1">82772674</span>)
 <span class="pl-c1">AssetPrice</span>(<span class="pl-s"><span class="pl-pds">"</span>AAPL<span class="pl-pds">"</span></span>, <span class="pl-c1">Date</span>(<span class="pl-s"><span class="pl-pds">"</span>2022-02-17<span class="pl-pds">"</span></span>), <span class="pl-c1">168.88</span>, <span class="pl-c1">171.03</span>, <span class="pl-c1">171.91</span>, <span class="pl-c1">168.47</span>, <span class="pl-c1">missing</span>, <span class="pl-c1">69589344</span>)
 <span class="pl-c"><span class="pl-c">#</span> you can omit the client if you have the correct environment variables set</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">length</span>(<span class="pl-c1">ENV</span>[<span class="pl-s"><span class="pl-pds">"</span>ALPHAVANTAGE_TOKEN<span class="pl-pds">"</span></span>]) <span class="pl-c"><span class="pl-c">#</span> ENV["YAHOOFINANCE_TOKEN"] works as well</span>
<span class="pl-c1">16</span>
julia<span class="pl-k">&gt;</span> prices <span class="pl-k">=</span> <span class="pl-c1">get_price</span>([<span class="pl-s"><span class="pl-pds">"</span>AAPL<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>MSFT<span class="pl-pds">"</span></span>]; from<span class="pl-k">=</span>ref_date<span class="pl-k">-</span><span class="pl-c1">Day</span>(<span class="pl-c1">2</span>), to<span class="pl-k">=</span>ref_date) 
<span class="pl-c"><span class="pl-c">#</span> 6-element Vector{AssetPrice}:</span>
 <span class="pl-c1">AssetPrice</span>(<span class="pl-s"><span class="pl-pds">"</span>AAPL<span class="pl-pds">"</span></span>, <span class="pl-c1">Date</span>(<span class="pl-s"><span class="pl-pds">"</span>2022-02-18<span class="pl-pds">"</span></span>), <span class="pl-c1">167.3</span>, <span class="pl-c1">169.82</span>, <span class="pl-c1">170.5413</span>, <span class="pl-c1">166.19</span>, <span class="pl-c1">missing</span>, <span class="pl-c1">82772674</span>)
 <span class="pl-c1">AssetPrice</span>(<span class="pl-s"><span class="pl-pds">"</span>AAPL<span class="pl-pds">"</span></span>, <span class="pl-c1">Date</span>(<span class="pl-s"><span class="pl-pds">"</span>2022-02-17<span class="pl-pds">"</span></span>), <span class="pl-c1">168.88</span>, <span class="pl-c1">171.03</span>, <span class="pl-c1">171.91</span>, <span class="pl-c1">168.47</span>, <span class="pl-c1">missing</span>, <span class="pl-c1">69589344</span>)
 <span class="pl-c1">AssetPrice</span>(<span class="pl-s"><span class="pl-pds">"</span>AAPL<span class="pl-pds">"</span></span>, <span class="pl-c1">Date</span>(<span class="pl-s"><span class="pl-pds">"</span>2022-02-16<span class="pl-pds">"</span></span>), <span class="pl-c1">172.55</span>, <span class="pl-c1">171.85</span>, <span class="pl-c1">173.34</span>, <span class="pl-c1">170.05</span>, <span class="pl-c1">missing</span>, <span class="pl-c1">61177398</span>)
 <span class="pl-c1">AssetPrice</span>(<span class="pl-s"><span class="pl-pds">"</span>MSFT<span class="pl-pds">"</span></span>, <span class="pl-c1">Date</span>(<span class="pl-s"><span class="pl-pds">"</span>2022-02-18<span class="pl-pds">"</span></span>), <span class="pl-c1">287.93</span>, <span class="pl-c1">293.05</span>, <span class="pl-c1">293.86</span>, <span class="pl-c1">286.305</span>, <span class="pl-c1">missing</span>, <span class="pl-c1">34264008</span>)
 <span class="pl-c1">AssetPrice</span>(<span class="pl-s"><span class="pl-pds">"</span>MSFT<span class="pl-pds">"</span></span>, <span class="pl-c1">Date</span>(<span class="pl-s"><span class="pl-pds">"</span>2022-02-17<span class="pl-pds">"</span></span>), <span class="pl-c1">290.73</span>, <span class="pl-c1">296.36</span>, <span class="pl-c1">296.8</span>, <span class="pl-c1">290.0</span>, <span class="pl-c1">missing</span>, <span class="pl-c1">32461580</span>)
 <span class="pl-c1">AssetPrice</span>(<span class="pl-s"><span class="pl-pds">"</span>MSFT<span class="pl-pds">"</span></span>, <span class="pl-c1">Date</span>(<span class="pl-s"><span class="pl-pds">"</span>2022-02-16<span class="pl-pds">"</span></span>), <span class="pl-c1">299.5</span>, <span class="pl-c1">298.365</span>, <span class="pl-c1">300.87</span>, <span class="pl-c1">293.68</span>, <span class="pl-c1">missing</span>, <span class="pl-c1">29982121</span>)
<span class="pl-c"><span class="pl-c">#</span> you can query each symbol with different time intervals</span>
julia<span class="pl-k">&gt;</span> prices <span class="pl-k">=</span> <span class="pl-c1">get_price</span>([
  (<span class="pl-s"><span class="pl-pds">"</span>AAPL<span class="pl-pds">"</span></span>, <span class="pl-c1">Date</span>(<span class="pl-s"><span class="pl-pds">"</span>2022-02-15<span class="pl-pds">"</span></span>), <span class="pl-c1">Date</span>(<span class="pl-s"><span class="pl-pds">"</span>2022-02-16<span class="pl-pds">"</span></span>)),
  (<span class="pl-s"><span class="pl-pds">"</span>MSFT<span class="pl-pds">"</span></span>, <span class="pl-c1">Date</span>(<span class="pl-s"><span class="pl-pds">"</span>2022-02-14<span class="pl-pds">"</span></span>), <span class="pl-c1">Date</span>(<span class="pl-s"><span class="pl-pds">"</span>2022-02-15<span class="pl-pds">"</span></span>)),
])
<span class="pl-c"><span class="pl-c">#</span> 4-element Vector{AssetPrice}:</span>
 <span class="pl-c1">AssetPrice</span>(<span class="pl-s"><span class="pl-pds">"</span>MSFT<span class="pl-pds">"</span></span>, <span class="pl-c1">Date</span>(<span class="pl-s"><span class="pl-pds">"</span>2022-02-15<span class="pl-pds">"</span></span>), <span class="pl-c1">300.47</span>, <span class="pl-c1">300.008</span>, <span class="pl-c1">300.8</span>, <span class="pl-c1">297.02</span>, <span class="pl-c1">missing</span>, <span class="pl-c1">27379488</span>)
 <span class="pl-c1">AssetPrice</span>(<span class="pl-s"><span class="pl-pds">"</span>MSFT<span class="pl-pds">"</span></span>, <span class="pl-c1">Date</span>(<span class="pl-s"><span class="pl-pds">"</span>2022-02-14<span class="pl-pds">"</span></span>), <span class="pl-c1">295.0</span>, <span class="pl-c1">293.77</span>, <span class="pl-c1">296.76</span>, <span class="pl-c1">291.35</span>, <span class="pl-c1">missing</span>, <span class="pl-c1">36359487</span>)
 <span class="pl-c1">AssetPrice</span>(<span class="pl-s"><span class="pl-pds">"</span>AAPL<span class="pl-pds">"</span></span>, <span class="pl-c1">Date</span>(<span class="pl-s"><span class="pl-pds">"</span>2022-02-16<span class="pl-pds">"</span></span>), <span class="pl-c1">172.55</span>, <span class="pl-c1">171.85</span>, <span class="pl-c1">173.34</span>, <span class="pl-c1">170.05</span>, <span class="pl-c1">missing</span>, <span class="pl-c1">61177398</span>)
 <span class="pl-c1">AssetPrice</span>(<span class="pl-s"><span class="pl-pds">"</span>AAPL<span class="pl-pds">"</span></span>, <span class="pl-c1">Date</span>(<span class="pl-s"><span class="pl-pds">"</span>2022-02-15<span class="pl-pds">"</span></span>), <span class="pl-c1">172.79</span>, <span class="pl-c1">170.97</span>, <span class="pl-c1">172.95</span>, <span class="pl-c1">170.25</span>, <span class="pl-c1">missing</span>, <span class="pl-c1">64286320</span>)</pre></div>
<hr>
<h3 dir="auto"><a id="user-content-get-asset-information" class="anchor" aria-hidden="true" href="#get-asset-information"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><strong>Get asset information</strong></h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; get_info(&quot;AAPL&quot;)
# 1-element Vector{AssetInfo}:
 AssetInfo(&quot;AAPL&quot;, &quot;USD&quot;, &quot;Apple Inc&quot;, &quot;Common Stock&quot;, &quot;NASDAQ&quot;, &quot;USA&quot;, &quot;Electronic Computers&quot;, &quot;Technology&quot;, missing, missing)

julia&gt; get_info([&quot;AAPL&quot;, &quot;MSFT&quot;])
# 2-element Vector{AssetInfo}:
 AssetInfo(&quot;MSFT&quot;, &quot;USD&quot;, &quot;Microsoft Corporation&quot;, &quot;Common Stock&quot;, &quot;NASDAQ&quot;, &quot;USA&quot;, &quot;Services-Prepackaged Software&quot;, &quot;Technology&quot;, missing, missing)
 AssetInfo(&quot;AAPL&quot;, &quot;USD&quot;, &quot;Apple Inc&quot;, &quot;Common Stock&quot;, &quot;NASDAQ&quot;, &quot;USA&quot;, &quot;Electronic Computers&quot;, &quot;Technology&quot;, missing, missing)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">get_info</span>(<span class="pl-s"><span class="pl-pds">"</span>AAPL<span class="pl-pds">"</span></span>)
<span class="pl-c"><span class="pl-c">#</span> 1-element Vector{AssetInfo}:</span>
 <span class="pl-c1">AssetInfo</span>(<span class="pl-s"><span class="pl-pds">"</span>AAPL<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>USD<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Apple Inc<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Common Stock<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>NASDAQ<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>USA<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Electronic Computers<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Technology<span class="pl-pds">"</span></span>, <span class="pl-c1">missing</span>, <span class="pl-c1">missing</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">get_info</span>([<span class="pl-s"><span class="pl-pds">"</span>AAPL<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>MSFT<span class="pl-pds">"</span></span>])
<span class="pl-c"><span class="pl-c">#</span> 2-element Vector{AssetInfo}:</span>
 <span class="pl-c1">AssetInfo</span>(<span class="pl-s"><span class="pl-pds">"</span>MSFT<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>USD<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Microsoft Corporation<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Common Stock<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>NASDAQ<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>USA<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Services-Prepackaged Software<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Technology<span class="pl-pds">"</span></span>, <span class="pl-c1">missing</span>, <span class="pl-c1">missing</span>)
 <span class="pl-c1">AssetInfo</span>(<span class="pl-s"><span class="pl-pds">"</span>AAPL<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>USD<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Apple Inc<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Common Stock<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>NASDAQ<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>USA<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Electronic Computers<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Technology<span class="pl-pds">"</span></span>, <span class="pl-c1">missing</span>, <span class="pl-c1">missing</span>)</pre></div>
<hr>
<h3 dir="auto"><a id="user-content-get-exchange-rates" class="anchor" aria-hidden="true" href="#get-exchange-rates"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><strong>Get exchange rates</strong></h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# Same API as get_price. the symbol needs to be a currency pair like $base/$quote,
# each consisting of exactly 3 characters.
julia&gt; ref_date = Date(&quot;2022-02-18&quot;)
julia&gt; get_exchange_rate(&quot;EUR/USD&quot;, from=ref_date-Day(1), to=ref_date)
# 3-element Vector{ExchangeRate}:
 ExchangeRate(&quot;EUR&quot;, &quot;USD&quot;, Date(&quot;2022-02-18&quot;), 1.13203)
 ExchangeRate(&quot;EUR&quot;, &quot;USD&quot;, Date(&quot;2022-02-17&quot;), 1.13592)
julia&gt; get_exchange_rate([&quot;EUR/USD&quot;, &quot;USD/CAD&quot;], from=ref_date-Day(1), to=ref_date)
# 4-element Vector{ExchangeRate}:
 ExchangeRate(&quot;EUR&quot;, &quot;USD&quot;, Date(&quot;2022-02-18&quot;), 1.13203)
 ExchangeRate(&quot;EUR&quot;, &quot;USD&quot;, Date(&quot;2022-02-17&quot;), 1.13592)
 ExchangeRate(&quot;USD&quot;, &quot;CAD&quot;, Date(&quot;2022-02-18&quot;), 1.2748)
 ExchangeRate(&quot;USD&quot;, &quot;CAD&quot;, Date(&quot;2022-02-17&quot;), 1.2707)
# Also works with []Tuple{String, Date} or []Tuple{String, Date, Date}
julia&gt;get_exchange_rate([
  (&quot;EUR/USD&quot;, Date(&quot;2022-02-15&quot;), Date(&quot;2022-02-16&quot;)),
  (&quot;USD/CAD&quot;, Date(&quot;2022-02-14&quot;), Date(&quot;2022-02-15&quot;)),
])
# 4-element Vector{ExchangeRate}:
..."><pre><span class="pl-c"><span class="pl-c">#</span> Same API as get_price. the symbol needs to be a currency pair like $base/$quote,</span>
<span class="pl-c"><span class="pl-c">#</span> each consisting of exactly 3 characters.</span>
julia<span class="pl-k">&gt;</span> ref_date <span class="pl-k">=</span> <span class="pl-c1">Date</span>(<span class="pl-s"><span class="pl-pds">"</span>2022-02-18<span class="pl-pds">"</span></span>)
julia<span class="pl-k">&gt;</span> <span class="pl-c1">get_exchange_rate</span>(<span class="pl-s"><span class="pl-pds">"</span>EUR/USD<span class="pl-pds">"</span></span>, from<span class="pl-k">=</span>ref_date<span class="pl-k">-</span><span class="pl-c1">Day</span>(<span class="pl-c1">1</span>), to<span class="pl-k">=</span>ref_date)
<span class="pl-c"><span class="pl-c">#</span> 3-element Vector{ExchangeRate}:</span>
 <span class="pl-c1">ExchangeRate</span>(<span class="pl-s"><span class="pl-pds">"</span>EUR<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>USD<span class="pl-pds">"</span></span>, <span class="pl-c1">Date</span>(<span class="pl-s"><span class="pl-pds">"</span>2022-02-18<span class="pl-pds">"</span></span>), <span class="pl-c1">1.13203</span>)
 <span class="pl-c1">ExchangeRate</span>(<span class="pl-s"><span class="pl-pds">"</span>EUR<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>USD<span class="pl-pds">"</span></span>, <span class="pl-c1">Date</span>(<span class="pl-s"><span class="pl-pds">"</span>2022-02-17<span class="pl-pds">"</span></span>), <span class="pl-c1">1.13592</span>)
julia<span class="pl-k">&gt;</span> <span class="pl-c1">get_exchange_rate</span>([<span class="pl-s"><span class="pl-pds">"</span>EUR/USD<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>USD/CAD<span class="pl-pds">"</span></span>], from<span class="pl-k">=</span>ref_date<span class="pl-k">-</span><span class="pl-c1">Day</span>(<span class="pl-c1">1</span>), to<span class="pl-k">=</span>ref_date)
<span class="pl-c"><span class="pl-c">#</span> 4-element Vector{ExchangeRate}:</span>
 <span class="pl-c1">ExchangeRate</span>(<span class="pl-s"><span class="pl-pds">"</span>EUR<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>USD<span class="pl-pds">"</span></span>, <span class="pl-c1">Date</span>(<span class="pl-s"><span class="pl-pds">"</span>2022-02-18<span class="pl-pds">"</span></span>), <span class="pl-c1">1.13203</span>)
 <span class="pl-c1">ExchangeRate</span>(<span class="pl-s"><span class="pl-pds">"</span>EUR<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>USD<span class="pl-pds">"</span></span>, <span class="pl-c1">Date</span>(<span class="pl-s"><span class="pl-pds">"</span>2022-02-17<span class="pl-pds">"</span></span>), <span class="pl-c1">1.13592</span>)
 <span class="pl-c1">ExchangeRate</span>(<span class="pl-s"><span class="pl-pds">"</span>USD<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>CAD<span class="pl-pds">"</span></span>, <span class="pl-c1">Date</span>(<span class="pl-s"><span class="pl-pds">"</span>2022-02-18<span class="pl-pds">"</span></span>), <span class="pl-c1">1.2748</span>)
 <span class="pl-c1">ExchangeRate</span>(<span class="pl-s"><span class="pl-pds">"</span>USD<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>CAD<span class="pl-pds">"</span></span>, <span class="pl-c1">Date</span>(<span class="pl-s"><span class="pl-pds">"</span>2022-02-17<span class="pl-pds">"</span></span>), <span class="pl-c1">1.2707</span>)
<span class="pl-c"><span class="pl-c">#</span> Also works with []Tuple{String, Date} or []Tuple{String, Date, Date}</span>
julia<span class="pl-k">&gt;</span><span class="pl-c1">get_exchange_rate</span>([
  (<span class="pl-s"><span class="pl-pds">"</span>EUR/USD<span class="pl-pds">"</span></span>, <span class="pl-c1">Date</span>(<span class="pl-s"><span class="pl-pds">"</span>2022-02-15<span class="pl-pds">"</span></span>), <span class="pl-c1">Date</span>(<span class="pl-s"><span class="pl-pds">"</span>2022-02-16<span class="pl-pds">"</span></span>)),
  (<span class="pl-s"><span class="pl-pds">"</span>USD/CAD<span class="pl-pds">"</span></span>, <span class="pl-c1">Date</span>(<span class="pl-s"><span class="pl-pds">"</span>2022-02-14<span class="pl-pds">"</span></span>), <span class="pl-c1">Date</span>(<span class="pl-s"><span class="pl-pds">"</span>2022-02-15<span class="pl-pds">"</span></span>)),
])
<span class="pl-c"><span class="pl-c">#</span> 4-element Vector{ExchangeRate}:</span>
<span class="pl-k">...</span></pre></div>
<hr>
<h3 dir="auto"><a id="user-content-get-financial-statements" class="anchor" aria-hidden="true" href="#get-financial-statements"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><strong>Get financial statements</strong></h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="symbol, from_date = &quot;AAPL&quot;, Date(&quot;2020-01-01&quot;)
financials = Dict()
financials[:balance_sheet] = get_balance_sheet(symbol; from=from_date)
financials[:income_statement] = get_income_statement(symbol; from=from_date)
financials[:cashflow_statement] = get_cashflow_statement(symbol; from=from_date)
financials[:earnings] = get_earnings(symbol; from=from_date)

julia&gt; map(x -&gt; (x.date, x.total_revenue, x.net_income), financials[:income_statement])
# 10-element Vector{Tuple{Date, Int64, Int64}}:
 (Date(&quot;2021-09-30&quot;), 363172000000, 94680000000)
 (Date(&quot;2020-09-30&quot;), 271642000000, 57411000000)
 (Date(&quot;2021-12-31&quot;), 123251000000, 34630000000)

julia&gt; financials[:balance_sheet][1:2]
# 6-element Vector{BalanceSheet}:
 BalanceSheet(&quot;AAPL&quot;, &quot;yearly&quot;, Date(&quot;2021-09-25&quot;), &quot;USD&quot;, 351002000000, 287912000000, 63090000000, 34940000000, 51506000000, 6580000000, 27699000000, 14111000000, 134836000000, 49527000000, missing, 127877000000, missing, missing, 54763000000, missing, missing, 53577000000, 125481000000, missing, missing, missing, 109106000000, missing, missing, missing, 0, 5562000000, 57365000000, missing)
 BalanceSheet(&quot;AAPL&quot;, &quot;yearly&quot;, Date(&quot;2020-09-26&quot;), &quot;USD&quot;, 323888000000, 258549000000, 65339000000, 38016000000, 37445000000, 4061000000, 52927000000, 11264000000, 143713000000, 45336000000, missing, 100887000000, missing, missing, 42296000000, missing, missing, 47867000000, 105392000000, missing, missing, missing, 98667000000, missing, missing, missing, 0, 14966000000, 50779000000, missing)

julia&gt; financials[:earnings] |&gt; data -&gt; filter(x -&gt; x.frequency == &quot;quarterly&quot;, data)
# 4-element Vector{Earnings}:
 Earnings(&quot;AAPL&quot;, &quot;quarterly&quot;, Date(&quot;2021-09-30&quot;), &quot;USD&quot;, Float16(1.24), Float16(1.24))
 Earnings(&quot;AAPL&quot;, &quot;quarterly&quot;, Date(&quot;2021-12-31&quot;), &quot;USD&quot;, Float16(2.1), Float16(1.89))
 Earnings(&quot;AAPL&quot;, &quot;quarterly&quot;, Date(&quot;2022-03-31&quot;), &quot;USD&quot;, Float16(1.52), Float16(1.43))
 Earnings(&quot;AAPL&quot;, &quot;quarterly&quot;, Date(&quot;2022-06-30&quot;), &quot;USD&quot;, Float16(1.2), Float16(1.16))
"><pre>symbol, from_date <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>AAPL<span class="pl-pds">"</span></span>, <span class="pl-c1">Date</span>(<span class="pl-s"><span class="pl-pds">"</span>2020-01-01<span class="pl-pds">"</span></span>)
financials <span class="pl-k">=</span> <span class="pl-c1">Dict</span>()
financials[<span class="pl-c1">:balance_sheet</span>] <span class="pl-k">=</span> <span class="pl-c1">get_balance_sheet</span>(symbol; from<span class="pl-k">=</span>from_date)
financials[<span class="pl-c1">:income_statement</span>] <span class="pl-k">=</span> <span class="pl-c1">get_income_statement</span>(symbol; from<span class="pl-k">=</span>from_date)
financials[<span class="pl-c1">:cashflow_statement</span>] <span class="pl-k">=</span> <span class="pl-c1">get_cashflow_statement</span>(symbol; from<span class="pl-k">=</span>from_date)
financials[<span class="pl-c1">:earnings</span>] <span class="pl-k">=</span> <span class="pl-c1">get_earnings</span>(symbol; from<span class="pl-k">=</span>from_date)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">map</span>(x <span class="pl-k">-&gt;</span> (x<span class="pl-k">.</span>date, x<span class="pl-k">.</span>total_revenue, x<span class="pl-k">.</span>net_income), financials[<span class="pl-c1">:income_statement</span>])
<span class="pl-c"><span class="pl-c">#</span> 10-element Vector{Tuple{Date, Int64, Int64}}:</span>
 (<span class="pl-c1">Date</span>(<span class="pl-s"><span class="pl-pds">"</span>2021-09-30<span class="pl-pds">"</span></span>), <span class="pl-c1">363172000000</span>, <span class="pl-c1">94680000000</span>)
 (<span class="pl-c1">Date</span>(<span class="pl-s"><span class="pl-pds">"</span>2020-09-30<span class="pl-pds">"</span></span>), <span class="pl-c1">271642000000</span>, <span class="pl-c1">57411000000</span>)
 (<span class="pl-c1">Date</span>(<span class="pl-s"><span class="pl-pds">"</span>2021-12-31<span class="pl-pds">"</span></span>), <span class="pl-c1">123251000000</span>, <span class="pl-c1">34630000000</span>)

julia<span class="pl-k">&gt;</span> financials[<span class="pl-c1">:balance_sheet</span>][<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span>]
<span class="pl-c"><span class="pl-c">#</span> 6-element Vector{BalanceSheet}:</span>
 <span class="pl-c1">BalanceSheet</span>(<span class="pl-s"><span class="pl-pds">"</span>AAPL<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>yearly<span class="pl-pds">"</span></span>, <span class="pl-c1">Date</span>(<span class="pl-s"><span class="pl-pds">"</span>2021-09-25<span class="pl-pds">"</span></span>), <span class="pl-s"><span class="pl-pds">"</span>USD<span class="pl-pds">"</span></span>, <span class="pl-c1">351002000000</span>, <span class="pl-c1">287912000000</span>, <span class="pl-c1">63090000000</span>, <span class="pl-c1">34940000000</span>, <span class="pl-c1">51506000000</span>, <span class="pl-c1">6580000000</span>, <span class="pl-c1">27699000000</span>, <span class="pl-c1">14111000000</span>, <span class="pl-c1">134836000000</span>, <span class="pl-c1">49527000000</span>, <span class="pl-c1">missing</span>, <span class="pl-c1">127877000000</span>, <span class="pl-c1">missing</span>, <span class="pl-c1">missing</span>, <span class="pl-c1">54763000000</span>, <span class="pl-c1">missing</span>, <span class="pl-c1">missing</span>, <span class="pl-c1">53577000000</span>, <span class="pl-c1">125481000000</span>, <span class="pl-c1">missing</span>, <span class="pl-c1">missing</span>, <span class="pl-c1">missing</span>, <span class="pl-c1">109106000000</span>, <span class="pl-c1">missing</span>, <span class="pl-c1">missing</span>, <span class="pl-c1">missing</span>, <span class="pl-c1">0</span>, <span class="pl-c1">5562000000</span>, <span class="pl-c1">57365000000</span>, <span class="pl-c1">missing</span>)
 <span class="pl-c1">BalanceSheet</span>(<span class="pl-s"><span class="pl-pds">"</span>AAPL<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>yearly<span class="pl-pds">"</span></span>, <span class="pl-c1">Date</span>(<span class="pl-s"><span class="pl-pds">"</span>2020-09-26<span class="pl-pds">"</span></span>), <span class="pl-s"><span class="pl-pds">"</span>USD<span class="pl-pds">"</span></span>, <span class="pl-c1">323888000000</span>, <span class="pl-c1">258549000000</span>, <span class="pl-c1">65339000000</span>, <span class="pl-c1">38016000000</span>, <span class="pl-c1">37445000000</span>, <span class="pl-c1">4061000000</span>, <span class="pl-c1">52927000000</span>, <span class="pl-c1">11264000000</span>, <span class="pl-c1">143713000000</span>, <span class="pl-c1">45336000000</span>, <span class="pl-c1">missing</span>, <span class="pl-c1">100887000000</span>, <span class="pl-c1">missing</span>, <span class="pl-c1">missing</span>, <span class="pl-c1">42296000000</span>, <span class="pl-c1">missing</span>, <span class="pl-c1">missing</span>, <span class="pl-c1">47867000000</span>, <span class="pl-c1">105392000000</span>, <span class="pl-c1">missing</span>, <span class="pl-c1">missing</span>, <span class="pl-c1">missing</span>, <span class="pl-c1">98667000000</span>, <span class="pl-c1">missing</span>, <span class="pl-c1">missing</span>, <span class="pl-c1">missing</span>, <span class="pl-c1">0</span>, <span class="pl-c1">14966000000</span>, <span class="pl-c1">50779000000</span>, <span class="pl-c1">missing</span>)

julia<span class="pl-k">&gt;</span> financials[<span class="pl-c1">:earnings</span>] <span class="pl-k">|&gt;</span> data <span class="pl-k">-&gt;</span> <span class="pl-c1">filter</span>(x <span class="pl-k">-&gt;</span> x<span class="pl-k">.</span>frequency <span class="pl-k">==</span> <span class="pl-s"><span class="pl-pds">"</span>quarterly<span class="pl-pds">"</span></span>, data)
<span class="pl-c"><span class="pl-c">#</span> 4-element Vector{Earnings}:</span>
 <span class="pl-c1">Earnings</span>(<span class="pl-s"><span class="pl-pds">"</span>AAPL<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>quarterly<span class="pl-pds">"</span></span>, <span class="pl-c1">Date</span>(<span class="pl-s"><span class="pl-pds">"</span>2021-09-30<span class="pl-pds">"</span></span>), <span class="pl-s"><span class="pl-pds">"</span>USD<span class="pl-pds">"</span></span>, <span class="pl-c1">Float16</span>(<span class="pl-c1">1.24</span>), <span class="pl-c1">Float16</span>(<span class="pl-c1">1.24</span>))
 <span class="pl-c1">Earnings</span>(<span class="pl-s"><span class="pl-pds">"</span>AAPL<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>quarterly<span class="pl-pds">"</span></span>, <span class="pl-c1">Date</span>(<span class="pl-s"><span class="pl-pds">"</span>2021-12-31<span class="pl-pds">"</span></span>), <span class="pl-s"><span class="pl-pds">"</span>USD<span class="pl-pds">"</span></span>, <span class="pl-c1">Float16</span>(<span class="pl-c1">2.1</span>), <span class="pl-c1">Float16</span>(<span class="pl-c1">1.89</span>))
 <span class="pl-c1">Earnings</span>(<span class="pl-s"><span class="pl-pds">"</span>AAPL<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>quarterly<span class="pl-pds">"</span></span>, <span class="pl-c1">Date</span>(<span class="pl-s"><span class="pl-pds">"</span>2022-03-31<span class="pl-pds">"</span></span>), <span class="pl-s"><span class="pl-pds">"</span>USD<span class="pl-pds">"</span></span>, <span class="pl-c1">Float16</span>(<span class="pl-c1">1.52</span>), <span class="pl-c1">Float16</span>(<span class="pl-c1">1.43</span>))
 <span class="pl-c1">Earnings</span>(<span class="pl-s"><span class="pl-pds">"</span>AAPL<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>quarterly<span class="pl-pds">"</span></span>, <span class="pl-c1">Date</span>(<span class="pl-s"><span class="pl-pds">"</span>2022-06-30<span class="pl-pds">"</span></span>), <span class="pl-s"><span class="pl-pds">"</span>USD<span class="pl-pds">"</span></span>, <span class="pl-c1">Float16</span>(<span class="pl-c1">1.2</span>), <span class="pl-c1">Float16</span>(<span class="pl-c1">1.16</span>))
</pre></div>
<hr>
<h3 dir="auto"><a id="user-content-tablesjl-integration" class="anchor" aria-hidden="true" href="#tablesjl-integration"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><strong>Tables.jl integration</strong></h3>
<p dir="auto">All types inheriting from <code>AbstractStonksRecord</code> can be converted to a Tables.jl interface of named tuples, using <code>to_table</code>. Types from the original model are persisted.
Currently only tested with flat data types.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; data
# 4-element Vector{AssetPrice}:
 AssetPrice(&quot;MSFT&quot;, Date(&quot;2022-02-23&quot;), 280.27, 290.18, 291.7, 280.1, missing, 37811167)
 AssetPrice(&quot;AAPL&quot;, Date(&quot;2022-02-23&quot;), 160.07, 165.54, 166.15, 159.75, missing, 90009247)
julia&gt; data |&gt; to_table
(
  symbol = [&quot;MSFT&quot;, &quot;MSFT&quot;, &quot;AAPL&quot;, &quot;AAPL&quot;], 
  date = [Date(&quot;2022-02-23&quot;), Date(&quot;2022-02-22&quot;), Date(&quot;2022-02-23&quot;), Date(&quot;2022-02-22&quot;)],
  close = [280.27, 287.72, 160.07, 164.32], 
  open = Union{Missing, Float64}[290.18, 285.0, 165.54, 164.98], 
  high = Union{Missing, Float64}[291.7, 291.54, 166.15, 166.69], 
  low = Union{Missing, Float64}[280.1, 284.5, 159.75, 162.15], 
  close_adjusted = Union{Missing, Float64}[missing, missing, missing, missing], 
  volume = Union{Missing, Integer}[37811167, 41569319, 90009247, 90457637]
)
"><pre>julia<span class="pl-k">&gt;</span> data
<span class="pl-c"><span class="pl-c">#</span> 4-element Vector{AssetPrice}:</span>
 <span class="pl-c1">AssetPrice</span>(<span class="pl-s"><span class="pl-pds">"</span>MSFT<span class="pl-pds">"</span></span>, <span class="pl-c1">Date</span>(<span class="pl-s"><span class="pl-pds">"</span>2022-02-23<span class="pl-pds">"</span></span>), <span class="pl-c1">280.27</span>, <span class="pl-c1">290.18</span>, <span class="pl-c1">291.7</span>, <span class="pl-c1">280.1</span>, <span class="pl-c1">missing</span>, <span class="pl-c1">37811167</span>)
 <span class="pl-c1">AssetPrice</span>(<span class="pl-s"><span class="pl-pds">"</span>AAPL<span class="pl-pds">"</span></span>, <span class="pl-c1">Date</span>(<span class="pl-s"><span class="pl-pds">"</span>2022-02-23<span class="pl-pds">"</span></span>), <span class="pl-c1">160.07</span>, <span class="pl-c1">165.54</span>, <span class="pl-c1">166.15</span>, <span class="pl-c1">159.75</span>, <span class="pl-c1">missing</span>, <span class="pl-c1">90009247</span>)
julia<span class="pl-k">&gt;</span> data <span class="pl-k">|&gt;</span> to_table
(
  symbol <span class="pl-k">=</span> [<span class="pl-s"><span class="pl-pds">"</span>MSFT<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>MSFT<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>AAPL<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>AAPL<span class="pl-pds">"</span></span>], 
  date <span class="pl-k">=</span> [<span class="pl-c1">Date</span>(<span class="pl-s"><span class="pl-pds">"</span>2022-02-23<span class="pl-pds">"</span></span>), <span class="pl-c1">Date</span>(<span class="pl-s"><span class="pl-pds">"</span>2022-02-22<span class="pl-pds">"</span></span>), <span class="pl-c1">Date</span>(<span class="pl-s"><span class="pl-pds">"</span>2022-02-23<span class="pl-pds">"</span></span>), <span class="pl-c1">Date</span>(<span class="pl-s"><span class="pl-pds">"</span>2022-02-22<span class="pl-pds">"</span></span>)],
  close <span class="pl-k">=</span> [<span class="pl-c1">280.27</span>, <span class="pl-c1">287.72</span>, <span class="pl-c1">160.07</span>, <span class="pl-c1">164.32</span>], 
  open <span class="pl-k">=</span> Union{Missing, Float64}[<span class="pl-c1">290.18</span>, <span class="pl-c1">285.0</span>, <span class="pl-c1">165.54</span>, <span class="pl-c1">164.98</span>], 
  high <span class="pl-k">=</span> Union{Missing, Float64}[<span class="pl-c1">291.7</span>, <span class="pl-c1">291.54</span>, <span class="pl-c1">166.15</span>, <span class="pl-c1">166.69</span>], 
  low <span class="pl-k">=</span> Union{Missing, Float64}[<span class="pl-c1">280.1</span>, <span class="pl-c1">284.5</span>, <span class="pl-c1">159.75</span>, <span class="pl-c1">162.15</span>], 
  close_adjusted <span class="pl-k">=</span> Union{Missing, Float64}[<span class="pl-c1">missing</span>, <span class="pl-c1">missing</span>, <span class="pl-c1">missing</span>, <span class="pl-c1">missing</span>], 
  volume <span class="pl-k">=</span> Union{Missing, Integer}[<span class="pl-c1">37811167</span>, <span class="pl-c1">41569319</span>, <span class="pl-c1">90009247</span>, <span class="pl-c1">90457637</span>]
)
</pre></div>
<hr>
<h3 dir="auto"><a id="user-content-persisting-data" class="anchor" aria-hidden="true" href="#persisting-data"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><strong>Persisting data</strong></h3>
<p dir="auto">Using a <code>FileStore</code>, you can easily persist and incrementally update data having at least one identifier and one time dimension.
Default file format is CSV, but you can plug in any format you wish. See <a href="#create-api-resources-for-your-custom-models">example for custom file formats</a>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Chain, Dates
using Stonks

dest = joinpath(@__DIR__, &quot;data/prices&quot;)
ds = FileStore{AssetPrice}(; path=dest, ids=[:symbol], partitions=[:symbol], time_column=&quot;date&quot;)
d_end = Date(&quot;2022-03-06&quot;)
2022-03-06

symbols = [&quot;AAPL&quot;, &quot;MSFT&quot;]
data = get_price(symbols; from=d_end-Day(7), to=d_end-Day(5))

save(ds, data)
println(readdir(dest))
[&quot;symbol=AAPL&quot;, &quot;symbol=MSFT&quot;] #data stored in partitions

load(ds)[1:2] # types are persisted
# 2-element Vector{AssetPrice}:
 AssetPrice(&quot;AAPL&quot;, Date(&quot;2022-03-01&quot;), 163.2, 164.695, 166.6, 161.97, missing, 83474425)
 AssetPrice(&quot;AAPL&quot;, Date(&quot;2022-02-28&quot;), 165.12, 163.06, 165.42, 162.43, missing, 95056629)

show_stats(ds) = @chain load(ds) begin  
  Stonks.groupby(_, [:symbol]) 
  Stonks.aggregate(_, [
    :date =&gt; maximum =&gt; :date_max,
    :date =&gt; minimum =&gt; :date_min,
    :symbol =&gt; length =&gt; :count
  ])
end

show_stats(ds)
NamedTuple{(:symbol, :date_max, :date_min, :symbols), Tuple{String, Date, Date, Int64}}[
  (symbol = &quot;AAPL&quot;, date_max = Date(&quot;2022-03-01&quot;), date_min = Date(&quot;2022-02-28&quot;), count = 2),
  (symbol = &quot;MSFT&quot;, date_max = Date(&quot;2022-03-01&quot;), date_min = Date(&quot;2022-02-28&quot;), count = 2)
]

# to is optional, defaults to latest workday. here, we need it for reproductible results.
update(ds; to=d_end)
show_stats(ds) 
# d_end (2022-03-06) is a Sunday, so the latest available data is from a Friday (2022-03-04).
NamedTuple{(:symbol, :date_max, :date_min, :symbols), Tuple{String, Date, Date, Int64}}[
  (symbol = &quot;AAPL&quot;, date_max = Date(&quot;2022-03-04&quot;), date_min = Date(&quot;2022-03-02&quot;), count = 3),
  (symbol = &quot;MSFT&quot;, date_max = Date(&quot;2022-03-04&quot;), date_min = Date(&quot;2022-03-02&quot;), count = 3)
]

d_start = d_end - Day(7)
# we add 2 new stocks to our store.
update(ds, [(&quot;IBM&quot;, d_start, d_end), (&quot;AMD&quot;, d_start, d_end)], to=d_end)
show_stats(ds)
NamedTuple{(:symbol, :date_max, :date_min, :symbols), Tuple{String, Date, Date, Int64}}[
  (symbol = &quot;AAPL&quot;, date_max = Date(&quot;2022-03-04&quot;), date_min = Date(&quot;2022-03-02&quot;), count = 3), 
  (symbol = &quot;IBM&quot;, date_max = Date(&quot;2022-03-04&quot;), date_min = Date(&quot;2022-02-28&quot;), count = 5), 
  (symbol = &quot;MSFT&quot;, date_max = Date(&quot;2022-03-04&quot;), date_min = Date(&quot;2022-03-02&quot;), count = 3),
  (symbol = &quot;AMD&quot;, date_max = Date(&quot;2022-03-04&quot;), date_min = Date(&quot;2022-02-28&quot;), count = 5)
]
# update(ds, [&quot;IBM&quot;, &quot;AMD&quot;]) - will include data since earliest available
# update(ds, vcat(symbols, [&quot;IBM&quot;, &quot;AMD&quot;])) - will also update the existing symbols, 
# if there is new data"><pre><span class="pl-k">using</span> Chain, Dates
<span class="pl-k">using</span> Stonks

dest <span class="pl-k">=</span> <span class="pl-c1">joinpath</span>(<span class="pl-c1">@__DIR__</span>, <span class="pl-s"><span class="pl-pds">"</span>data/prices<span class="pl-pds">"</span></span>)
ds <span class="pl-k">=</span> <span class="pl-c1">FileStore</span><span class="pl-c1">{AssetPrice}</span>(; path<span class="pl-k">=</span>dest, ids<span class="pl-k">=</span>[<span class="pl-c1">:symbol</span>], partitions<span class="pl-k">=</span>[<span class="pl-c1">:symbol</span>], time_column<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>date<span class="pl-pds">"</span></span>)
d_end <span class="pl-k">=</span> <span class="pl-c1">Date</span>(<span class="pl-s"><span class="pl-pds">"</span>2022-03-06<span class="pl-pds">"</span></span>)
<span class="pl-c1">2022</span><span class="pl-k">-</span><span class="pl-c1">03</span><span class="pl-k">-</span><span class="pl-c1">06</span>

symbols <span class="pl-k">=</span> [<span class="pl-s"><span class="pl-pds">"</span>AAPL<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>MSFT<span class="pl-pds">"</span></span>]
data <span class="pl-k">=</span> <span class="pl-c1">get_price</span>(symbols; from<span class="pl-k">=</span>d_end<span class="pl-k">-</span><span class="pl-c1">Day</span>(<span class="pl-c1">7</span>), to<span class="pl-k">=</span>d_end<span class="pl-k">-</span><span class="pl-c1">Day</span>(<span class="pl-c1">5</span>))

<span class="pl-c1">save</span>(ds, data)
<span class="pl-c1">println</span>(<span class="pl-c1">readdir</span>(dest))
[<span class="pl-s"><span class="pl-pds">"</span>symbol=AAPL<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>symbol=MSFT<span class="pl-pds">"</span></span>] <span class="pl-c"><span class="pl-c">#</span>data stored in partitions</span>

<span class="pl-c1">load</span>(ds)[<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span>] <span class="pl-c"><span class="pl-c">#</span> types are persisted</span>
<span class="pl-c"><span class="pl-c">#</span> 2-element Vector{AssetPrice}:</span>
 <span class="pl-c1">AssetPrice</span>(<span class="pl-s"><span class="pl-pds">"</span>AAPL<span class="pl-pds">"</span></span>, <span class="pl-c1">Date</span>(<span class="pl-s"><span class="pl-pds">"</span>2022-03-01<span class="pl-pds">"</span></span>), <span class="pl-c1">163.2</span>, <span class="pl-c1">164.695</span>, <span class="pl-c1">166.6</span>, <span class="pl-c1">161.97</span>, <span class="pl-c1">missing</span>, <span class="pl-c1">83474425</span>)
 <span class="pl-c1">AssetPrice</span>(<span class="pl-s"><span class="pl-pds">"</span>AAPL<span class="pl-pds">"</span></span>, <span class="pl-c1">Date</span>(<span class="pl-s"><span class="pl-pds">"</span>2022-02-28<span class="pl-pds">"</span></span>), <span class="pl-c1">165.12</span>, <span class="pl-c1">163.06</span>, <span class="pl-c1">165.42</span>, <span class="pl-c1">162.43</span>, <span class="pl-c1">missing</span>, <span class="pl-c1">95056629</span>)

<span class="pl-en">show_stats</span>(ds) <span class="pl-k">=</span> <span class="pl-c1">@chain</span> <span class="pl-c1">load</span>(ds) <span class="pl-k">begin</span>  
  Stonks<span class="pl-k">.</span><span class="pl-c1">groupby</span>(_, [<span class="pl-c1">:symbol</span>]) 
  Stonks<span class="pl-k">.</span><span class="pl-c1">aggregate</span>(_, [
    <span class="pl-c1">:date</span> <span class="pl-k">=&gt;</span> maximum <span class="pl-k">=&gt;</span> <span class="pl-c1">:date_max</span>,
    <span class="pl-c1">:date</span> <span class="pl-k">=&gt;</span> minimum <span class="pl-k">=&gt;</span> <span class="pl-c1">:date_min</span>,
    <span class="pl-c1">:symbol</span> <span class="pl-k">=&gt;</span> length <span class="pl-k">=&gt;</span> <span class="pl-c1">:count</span>
  ])
<span class="pl-k">end</span>

<span class="pl-c1">show_stats</span>(ds)
NamedTuple{(<span class="pl-c1">:symbol</span>, <span class="pl-c1">:date_max</span>, <span class="pl-c1">:date_min</span>, <span class="pl-c1">:symbols</span>), Tuple{String, Date, Date, Int64}}[
  (symbol <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>AAPL<span class="pl-pds">"</span></span>, date_max <span class="pl-k">=</span> <span class="pl-c1">Date</span>(<span class="pl-s"><span class="pl-pds">"</span>2022-03-01<span class="pl-pds">"</span></span>), date_min <span class="pl-k">=</span> <span class="pl-c1">Date</span>(<span class="pl-s"><span class="pl-pds">"</span>2022-02-28<span class="pl-pds">"</span></span>), count <span class="pl-k">=</span> <span class="pl-c1">2</span>),
  (symbol <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>MSFT<span class="pl-pds">"</span></span>, date_max <span class="pl-k">=</span> <span class="pl-c1">Date</span>(<span class="pl-s"><span class="pl-pds">"</span>2022-03-01<span class="pl-pds">"</span></span>), date_min <span class="pl-k">=</span> <span class="pl-c1">Date</span>(<span class="pl-s"><span class="pl-pds">"</span>2022-02-28<span class="pl-pds">"</span></span>), count <span class="pl-k">=</span> <span class="pl-c1">2</span>)
]

<span class="pl-c"><span class="pl-c">#</span> to is optional, defaults to latest workday. here, we need it for reproductible results.</span>
<span class="pl-c1">update</span>(ds; to<span class="pl-k">=</span>d_end)
<span class="pl-c1">show_stats</span>(ds) 
<span class="pl-c"><span class="pl-c">#</span> d_end (2022-03-06) is a Sunday, so the latest available data is from a Friday (2022-03-04).</span>
NamedTuple{(<span class="pl-c1">:symbol</span>, <span class="pl-c1">:date_max</span>, <span class="pl-c1">:date_min</span>, <span class="pl-c1">:symbols</span>), Tuple{String, Date, Date, Int64}}[
  (symbol <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>AAPL<span class="pl-pds">"</span></span>, date_max <span class="pl-k">=</span> <span class="pl-c1">Date</span>(<span class="pl-s"><span class="pl-pds">"</span>2022-03-04<span class="pl-pds">"</span></span>), date_min <span class="pl-k">=</span> <span class="pl-c1">Date</span>(<span class="pl-s"><span class="pl-pds">"</span>2022-03-02<span class="pl-pds">"</span></span>), count <span class="pl-k">=</span> <span class="pl-c1">3</span>),
  (symbol <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>MSFT<span class="pl-pds">"</span></span>, date_max <span class="pl-k">=</span> <span class="pl-c1">Date</span>(<span class="pl-s"><span class="pl-pds">"</span>2022-03-04<span class="pl-pds">"</span></span>), date_min <span class="pl-k">=</span> <span class="pl-c1">Date</span>(<span class="pl-s"><span class="pl-pds">"</span>2022-03-02<span class="pl-pds">"</span></span>), count <span class="pl-k">=</span> <span class="pl-c1">3</span>)
]

d_start <span class="pl-k">=</span> d_end <span class="pl-k">-</span> <span class="pl-c1">Day</span>(<span class="pl-c1">7</span>)
<span class="pl-c"><span class="pl-c">#</span> we add 2 new stocks to our store.</span>
<span class="pl-c1">update</span>(ds, [(<span class="pl-s"><span class="pl-pds">"</span>IBM<span class="pl-pds">"</span></span>, d_start, d_end), (<span class="pl-s"><span class="pl-pds">"</span>AMD<span class="pl-pds">"</span></span>, d_start, d_end)], to<span class="pl-k">=</span>d_end)
<span class="pl-c1">show_stats</span>(ds)
NamedTuple{(<span class="pl-c1">:symbol</span>, <span class="pl-c1">:date_max</span>, <span class="pl-c1">:date_min</span>, <span class="pl-c1">:symbols</span>), Tuple{String, Date, Date, Int64}}[
  (symbol <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>AAPL<span class="pl-pds">"</span></span>, date_max <span class="pl-k">=</span> <span class="pl-c1">Date</span>(<span class="pl-s"><span class="pl-pds">"</span>2022-03-04<span class="pl-pds">"</span></span>), date_min <span class="pl-k">=</span> <span class="pl-c1">Date</span>(<span class="pl-s"><span class="pl-pds">"</span>2022-03-02<span class="pl-pds">"</span></span>), count <span class="pl-k">=</span> <span class="pl-c1">3</span>), 
  (symbol <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>IBM<span class="pl-pds">"</span></span>, date_max <span class="pl-k">=</span> <span class="pl-c1">Date</span>(<span class="pl-s"><span class="pl-pds">"</span>2022-03-04<span class="pl-pds">"</span></span>), date_min <span class="pl-k">=</span> <span class="pl-c1">Date</span>(<span class="pl-s"><span class="pl-pds">"</span>2022-02-28<span class="pl-pds">"</span></span>), count <span class="pl-k">=</span> <span class="pl-c1">5</span>), 
  (symbol <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>MSFT<span class="pl-pds">"</span></span>, date_max <span class="pl-k">=</span> <span class="pl-c1">Date</span>(<span class="pl-s"><span class="pl-pds">"</span>2022-03-04<span class="pl-pds">"</span></span>), date_min <span class="pl-k">=</span> <span class="pl-c1">Date</span>(<span class="pl-s"><span class="pl-pds">"</span>2022-03-02<span class="pl-pds">"</span></span>), count <span class="pl-k">=</span> <span class="pl-c1">3</span>),
  (symbol <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>AMD<span class="pl-pds">"</span></span>, date_max <span class="pl-k">=</span> <span class="pl-c1">Date</span>(<span class="pl-s"><span class="pl-pds">"</span>2022-03-04<span class="pl-pds">"</span></span>), date_min <span class="pl-k">=</span> <span class="pl-c1">Date</span>(<span class="pl-s"><span class="pl-pds">"</span>2022-02-28<span class="pl-pds">"</span></span>), count <span class="pl-k">=</span> <span class="pl-c1">5</span>)
]
<span class="pl-c"><span class="pl-c">#</span> update(ds, ["IBM", "AMD"]) - will include data since earliest available</span>
<span class="pl-c"><span class="pl-c">#</span> update(ds, vcat(symbols, ["IBM", "AMD"])) - will also update the existing symbols, </span>
<span class="pl-c"><span class="pl-c">#</span> if there is new data</span></pre></div>
<h2 dir="auto"><a id="user-content-advanced-usage" class="anchor" aria-hidden="true" href="#advanced-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><strong>Advanced usage</strong></h2>
<hr>
<h3 dir="auto"><a id="user-content-plug-in-any-data-format" class="anchor" aria-hidden="true" href="#plug-in-any-data-format"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><strong>Plug in any data format</strong></h3>
<details>
  <summary>Show</summary>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Arrow, Dates, Tables
using Stonks
using Stonks.Stores: apply_schema

function write_arrow(data::Vector{T}, path::String) where {T&lt;:AbstractStonksRecord}
  open(path, &quot;w&quot;) do io
    Arrow.write(io, to_table(data))
  end
end

function read_arrow(path::String, ::Type{T}) where {T&lt;:AbstractStonksRecord}
  apply_schema(collect(Tables.rows(Arrow.Table(path))), T)
end

ds = FileStore{AssetPrice}(;
  path=joinpath(@__DIR__, &quot;data/arrow&quot;),
  ids=[:symbol],
  format=&quot;arrow&quot;,
  time_column=&quot;date&quot;,
  reader=read_arrow,
  writer=write_arrow,
)

data = [
  AssetPrice(; symbol=&quot;MSFT&quot;, date=Date(&quot;2022-02-16&quot;), close=299.5),
  AssetPrice(; symbol=&quot;MSFT&quot;, date=Date(&quot;2022-02-17&quot;), close=290.73),
  AssetPrice(; symbol=&quot;AAPL&quot;, date=Date(&quot;2022-02-17&quot;), close=168.88),
  AssetPrice(; symbol=&quot;AAPL&quot;, date=Date(&quot;2022-02-18&quot;), close=167.3),
]

save(ds, data)
readdir(ds.path)
# 1-element Vector{String}:
 &quot;data.arrow&quot;

load(ds)
# 4-element Vector{AssetPrice}:
 AssetPrice(&quot;MSFT&quot;, Date(&quot;2022-02-16&quot;), 299.5, missing, missing, missing, missing, missing)
 AssetPrice(&quot;MSFT&quot;, Date(&quot;2022-02-17&quot;), 290.73, missing, missing, missing, missing, missing)
 AssetPrice(&quot;AAPL&quot;, Date(&quot;2022-02-17&quot;), 168.88, missing, missing, missing, missing, missing)
 AssetPrice(&quot;AAPL&quot;, Date(&quot;2022-02-18&quot;), 167.3, missing, missing, missing, missing, missing)"><pre><span class="pl-k">using</span> Arrow, Dates, Tables
<span class="pl-k">using</span> Stonks
<span class="pl-k">using</span> Stonks<span class="pl-k">.</span>Stores<span class="pl-k">:</span> apply_schema

<span class="pl-k">function</span> <span class="pl-en">write_arrow</span>(data<span class="pl-k">::</span><span class="pl-c1">Vector{T}</span>, path<span class="pl-k">::</span><span class="pl-c1">String</span>) <span class="pl-k">where</span> {T<span class="pl-k">&lt;:</span><span class="pl-c1">AbstractStonksRecord</span>}
  <span class="pl-c1">open</span>(path, <span class="pl-s"><span class="pl-pds">"</span>w<span class="pl-pds">"</span></span>) <span class="pl-k">do</span> io
    Arrow<span class="pl-k">.</span><span class="pl-c1">write</span>(io, <span class="pl-c1">to_table</span>(data))
  <span class="pl-k">end</span>
<span class="pl-k">end</span>

<span class="pl-k">function</span> <span class="pl-en">read_arrow</span>(path<span class="pl-k">::</span><span class="pl-c1">String</span>, <span class="pl-k">::</span><span class="pl-c1">Type{T}</span>) <span class="pl-k">where</span> {T<span class="pl-k">&lt;:</span><span class="pl-c1">AbstractStonksRecord</span>}
  <span class="pl-c1">apply_schema</span>(<span class="pl-c1">collect</span>(Tables<span class="pl-k">.</span><span class="pl-c1">rows</span>(Arrow<span class="pl-k">.</span><span class="pl-c1">Table</span>(path))), T)
<span class="pl-k">end</span>

ds <span class="pl-k">=</span> <span class="pl-c1">FileStore</span><span class="pl-c1">{AssetPrice}</span>(;
  path<span class="pl-k">=</span><span class="pl-c1">joinpath</span>(<span class="pl-c1">@__DIR__</span>, <span class="pl-s"><span class="pl-pds">"</span>data/arrow<span class="pl-pds">"</span></span>),
  ids<span class="pl-k">=</span>[<span class="pl-c1">:symbol</span>],
  format<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>arrow<span class="pl-pds">"</span></span>,
  time_column<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>date<span class="pl-pds">"</span></span>,
  reader<span class="pl-k">=</span>read_arrow,
  writer<span class="pl-k">=</span>write_arrow,
)

data <span class="pl-k">=</span> [
  <span class="pl-c1">AssetPrice</span>(; symbol<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>MSFT<span class="pl-pds">"</span></span>, date<span class="pl-k">=</span><span class="pl-c1">Date</span>(<span class="pl-s"><span class="pl-pds">"</span>2022-02-16<span class="pl-pds">"</span></span>), close<span class="pl-k">=</span><span class="pl-c1">299.5</span>),
  <span class="pl-c1">AssetPrice</span>(; symbol<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>MSFT<span class="pl-pds">"</span></span>, date<span class="pl-k">=</span><span class="pl-c1">Date</span>(<span class="pl-s"><span class="pl-pds">"</span>2022-02-17<span class="pl-pds">"</span></span>), close<span class="pl-k">=</span><span class="pl-c1">290.73</span>),
  <span class="pl-c1">AssetPrice</span>(; symbol<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>AAPL<span class="pl-pds">"</span></span>, date<span class="pl-k">=</span><span class="pl-c1">Date</span>(<span class="pl-s"><span class="pl-pds">"</span>2022-02-17<span class="pl-pds">"</span></span>), close<span class="pl-k">=</span><span class="pl-c1">168.88</span>),
  <span class="pl-c1">AssetPrice</span>(; symbol<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>AAPL<span class="pl-pds">"</span></span>, date<span class="pl-k">=</span><span class="pl-c1">Date</span>(<span class="pl-s"><span class="pl-pds">"</span>2022-02-18<span class="pl-pds">"</span></span>), close<span class="pl-k">=</span><span class="pl-c1">167.3</span>),
]

<span class="pl-c1">save</span>(ds, data)
<span class="pl-c1">readdir</span>(ds<span class="pl-k">.</span>path)
<span class="pl-c"><span class="pl-c">#</span> 1-element Vector{String}:</span>
 <span class="pl-s"><span class="pl-pds">"</span>data.arrow<span class="pl-pds">"</span></span>

<span class="pl-c1">load</span>(ds)
<span class="pl-c"><span class="pl-c">#</span> 4-element Vector{AssetPrice}:</span>
 <span class="pl-c1">AssetPrice</span>(<span class="pl-s"><span class="pl-pds">"</span>MSFT<span class="pl-pds">"</span></span>, <span class="pl-c1">Date</span>(<span class="pl-s"><span class="pl-pds">"</span>2022-02-16<span class="pl-pds">"</span></span>), <span class="pl-c1">299.5</span>, <span class="pl-c1">missing</span>, <span class="pl-c1">missing</span>, <span class="pl-c1">missing</span>, <span class="pl-c1">missing</span>, <span class="pl-c1">missing</span>)
 <span class="pl-c1">AssetPrice</span>(<span class="pl-s"><span class="pl-pds">"</span>MSFT<span class="pl-pds">"</span></span>, <span class="pl-c1">Date</span>(<span class="pl-s"><span class="pl-pds">"</span>2022-02-17<span class="pl-pds">"</span></span>), <span class="pl-c1">290.73</span>, <span class="pl-c1">missing</span>, <span class="pl-c1">missing</span>, <span class="pl-c1">missing</span>, <span class="pl-c1">missing</span>, <span class="pl-c1">missing</span>)
 <span class="pl-c1">AssetPrice</span>(<span class="pl-s"><span class="pl-pds">"</span>AAPL<span class="pl-pds">"</span></span>, <span class="pl-c1">Date</span>(<span class="pl-s"><span class="pl-pds">"</span>2022-02-17<span class="pl-pds">"</span></span>), <span class="pl-c1">168.88</span>, <span class="pl-c1">missing</span>, <span class="pl-c1">missing</span>, <span class="pl-c1">missing</span>, <span class="pl-c1">missing</span>, <span class="pl-c1">missing</span>)
 <span class="pl-c1">AssetPrice</span>(<span class="pl-s"><span class="pl-pds">"</span>AAPL<span class="pl-pds">"</span></span>, <span class="pl-c1">Date</span>(<span class="pl-s"><span class="pl-pds">"</span>2022-02-18<span class="pl-pds">"</span></span>), <span class="pl-c1">167.3</span>, <span class="pl-c1">missing</span>, <span class="pl-c1">missing</span>, <span class="pl-c1">missing</span>, <span class="pl-c1">missing</span>, <span class="pl-c1">missing</span>)</pre></div>
</details>
<h3 dir="auto"><a id="user-content-create-api-resources-for-your-custom-models" class="anchor" aria-hidden="true" href="#create-api-resources-for-your-custom-models"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><strong>Create API resources for your custom models</strong></h3>
<details>
  <summary>Show</summary>
<p dir="auto">Assume we'll receive the following content from an API.
Source: <a href="https://www.alphavantage.co/query?function=INFLATION&amp;apikey=demo" rel="nofollow">https://www.alphavantage.co/query?function=INFLATION&amp;apikey=demo</a></p>
<div class="highlight highlight-source-json notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content=" {
  &quot;name&quot;: &quot;Inflation - US Consumer Prices&quot;,
  &quot;interval&quot;: &quot;annual&quot;,
  &quot;unit&quot;: &quot;percent&quot;,
  &quot;data&quot;: [
    {&quot;date&quot;: &quot;2020-01-01&quot;, &quot;value&quot;: &quot;1.2335&quot;},
    {&quot;date&quot;: &quot;2019-01-01&quot;, &quot;value&quot;: &quot;1.8122&quot;}
  ]
}"><pre> {
  <span class="pl-ent">"name"</span>: <span class="pl-s"><span class="pl-pds">"</span>Inflation - US Consumer Prices<span class="pl-pds">"</span></span>,
  <span class="pl-ent">"interval"</span>: <span class="pl-s"><span class="pl-pds">"</span>annual<span class="pl-pds">"</span></span>,
  <span class="pl-ent">"unit"</span>: <span class="pl-s"><span class="pl-pds">"</span>percent<span class="pl-pds">"</span></span>,
  <span class="pl-ent">"data"</span>: [
    {<span class="pl-ent">"date"</span>: <span class="pl-s"><span class="pl-pds">"</span>2020-01-01<span class="pl-pds">"</span></span>, <span class="pl-ent">"value"</span>: <span class="pl-s"><span class="pl-pds">"</span>1.2335<span class="pl-pds">"</span></span>},
    {<span class="pl-ent">"date"</span>: <span class="pl-s"><span class="pl-pds">"</span>2019-01-01<span class="pl-pds">"</span></span>, <span class="pl-ent">"value"</span>: <span class="pl-s"><span class="pl-pds">"</span>1.8122<span class="pl-pds">"</span></span>}
  ]
}</pre></div>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Chain, Dates, JSON3
using Stonks: Stonks, APIResource, JSONParser

# Create your custom type
struct MacroIndicator &lt;: AbstractStonksRecord
  name::String
  date::Date
  value::Number
end

# Define a function with the same signature as `parse_conent`
# parse_content(content::AbstractString; kwargs...) -&gt; Vector{&lt;:AbstractStonksRecord}
function parse_inflation_data(content::AbstractString; kwargs...)
  js = JSON3.read(content)
  from, to = get(kwargs, :from, missing), get(kwargs, :to, missing)
  return @chain js[&quot;data&quot;] begin 
    map(x -&gt; MacroIndicator(
      &quot;US Consumer Prices&quot;, tryparse(Date, x[:date]), tryparse(Float64, x[:value])), _,
    )
    isa(from, Date) ? filter(row -&gt; row.date &gt;= from, _) : _
    isa(to, Date) ? filter(row -&gt; row.date &lt;= to, _) : _
  end
end

# Define an API resource, wrap your function around a subtype of AbstractContentParser.
# subtypes(Stonks.Parsers.AbstractContentParser)
# [Stonks.Parsers.JSONParser, Stonks.Parsers.CSVParser]
my_resource = APIResource{MacroIndicator}(;
  url=&quot;https://www.alphavantage.co/query&quot;,
  headers=Dict(&quot;accept&quot; =&gt; &quot;application/json&quot;),
  query_params=Dict(&quot;function&quot; =&gt; &quot;INFLATION&quot;, &quot;apikey&quot; =&gt; &quot;demo&quot;),
  parser=Stonks.JSONParser(parse_inflation_data),
)

data = get_data(my_resource; from=Date(&quot;2019-01-01&quot;))
foreach(println, data)
MacroIndicator(&quot;US Consumer Prices&quot;, Date(&quot;2020-01-01&quot;), 1.23358439630637)
MacroIndicator(&quot;US Consumer Prices&quot;, Date(&quot;2019-01-01&quot;), 1.81221007526015)
"><pre><span class="pl-k">using</span> Chain, Dates, JSON3
<span class="pl-k">using</span> Stonks<span class="pl-k">:</span> Stonks, APIResource, JSONParser

<span class="pl-c"><span class="pl-c">#</span> Create your custom type</span>
<span class="pl-k">struct</span> MacroIndicator <span class="pl-k">&lt;:</span> <span class="pl-c1">AbstractStonksRecord</span>
  name<span class="pl-k">::</span><span class="pl-c1">String</span>
  date<span class="pl-k">::</span><span class="pl-c1">Date</span>
  value<span class="pl-k">::</span><span class="pl-c1">Number</span>
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> Define a function with the same signature as `parse_conent`</span>
<span class="pl-c"><span class="pl-c">#</span> parse_content(content::AbstractString; kwargs...) -&gt; Vector{&lt;:AbstractStonksRecord}</span>
<span class="pl-k">function</span> <span class="pl-en">parse_inflation_data</span>(content<span class="pl-k">::</span><span class="pl-c1">AbstractString</span>; kwargs<span class="pl-k">...</span>)
  js <span class="pl-k">=</span> JSON3<span class="pl-k">.</span><span class="pl-c1">read</span>(content)
  from, to <span class="pl-k">=</span> <span class="pl-c1">get</span>(kwargs, <span class="pl-c1">:from</span>, <span class="pl-c1">missing</span>), <span class="pl-c1">get</span>(kwargs, <span class="pl-c1">:to</span>, <span class="pl-c1">missing</span>)
  <span class="pl-k">return</span> <span class="pl-c1">@chain</span> js[<span class="pl-s"><span class="pl-pds">"</span>data<span class="pl-pds">"</span></span>] <span class="pl-k">begin</span> 
    <span class="pl-c1">map</span>(x <span class="pl-k">-&gt;</span> <span class="pl-c1">MacroIndicator</span>(
      <span class="pl-s"><span class="pl-pds">"</span>US Consumer Prices<span class="pl-pds">"</span></span>, <span class="pl-c1">tryparse</span>(Date, x[<span class="pl-c1">:date</span>]), <span class="pl-c1">tryparse</span>(Float64, x[<span class="pl-c1">:value</span>])), _,
    )
    <span class="pl-c1">isa</span>(from, Date) <span class="pl-k">?</span> <span class="pl-c1">filter</span>(row <span class="pl-k">-&gt;</span> row<span class="pl-k">.</span>date <span class="pl-k">&gt;=</span> from, _) <span class="pl-k">:</span> _
    <span class="pl-c1">isa</span>(to, Date) <span class="pl-k">?</span> <span class="pl-c1">filter</span>(row <span class="pl-k">-&gt;</span> row<span class="pl-k">.</span>date <span class="pl-k">&lt;=</span> to, _) <span class="pl-k">:</span> _
  <span class="pl-k">end</span>
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> Define an API resource, wrap your function around a subtype of AbstractContentParser.</span>
<span class="pl-c"><span class="pl-c">#</span> subtypes(Stonks.Parsers.AbstractContentParser)</span>
<span class="pl-c"><span class="pl-c">#</span> [Stonks.Parsers.JSONParser, Stonks.Parsers.CSVParser]</span>
my_resource <span class="pl-k">=</span> <span class="pl-c1">APIResource</span><span class="pl-c1">{MacroIndicator}</span>(;
  url<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>https://www.alphavantage.co/query<span class="pl-pds">"</span></span>,
  headers<span class="pl-k">=</span><span class="pl-c1">Dict</span>(<span class="pl-s"><span class="pl-pds">"</span>accept<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>application/json<span class="pl-pds">"</span></span>),
  query_params<span class="pl-k">=</span><span class="pl-c1">Dict</span>(<span class="pl-s"><span class="pl-pds">"</span>function<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>INFLATION<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>apikey<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>demo<span class="pl-pds">"</span></span>),
  parser<span class="pl-k">=</span>Stonks<span class="pl-k">.</span><span class="pl-c1">JSONParser</span>(parse_inflation_data),
)

data <span class="pl-k">=</span> <span class="pl-c1">get_data</span>(my_resource; from<span class="pl-k">=</span><span class="pl-c1">Date</span>(<span class="pl-s"><span class="pl-pds">"</span>2019-01-01<span class="pl-pds">"</span></span>))
<span class="pl-c1">foreach</span>(println, data)
<span class="pl-c1">MacroIndicator</span>(<span class="pl-s"><span class="pl-pds">"</span>US Consumer Prices<span class="pl-pds">"</span></span>, <span class="pl-c1">Date</span>(<span class="pl-s"><span class="pl-pds">"</span>2020-01-01<span class="pl-pds">"</span></span>), <span class="pl-c1">1.23358439630637</span>)
<span class="pl-c1">MacroIndicator</span>(<span class="pl-s"><span class="pl-pds">"</span>US Consumer Prices<span class="pl-pds">"</span></span>, <span class="pl-c1">Date</span>(<span class="pl-s"><span class="pl-pds">"</span>2019-01-01<span class="pl-pds">"</span></span>), <span class="pl-c1">1.81221007526015</span>)
</pre></div>
</details>
<h3 dir="auto"><a id="user-content-create-your-client-from-combining-api-resources" class="anchor" aria-hidden="true" href="#create-your-client-from-combining-api-resources"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><strong>Create your client from combining API resources</strong></h3>
<details>
  <summary>Show</summary>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Stonks: Stonks, APIClient

yc = YahooClient(&quot;&lt;my_secret_key&gt;&quot;)
ac = AlphavantageJSONClient(&quot;&lt;my_secret_key&gt;&quot;)

my_client = Stonks.APIClient(Dict(
  &quot;price&quot; =&gt; ac.resources[&quot;price&quot;],
  &quot;info&quot; =&gt; yc.resources[&quot;info&quot;],
  &quot;exchange&quot; =&gt; yc.resources[&quot;exchange&quot;], 
  # ... + your own custom resources
))
Stonks.APIClients.get_supported_types(my_client)
# 3-element Vector{DataType}:
 ExchangeRate
 AssetPrice
 AssetInfo"><pre><span class="pl-k">using</span> Stonks<span class="pl-k">:</span> Stonks, APIClient

yc <span class="pl-k">=</span> <span class="pl-c1">YahooClient</span>(<span class="pl-s"><span class="pl-pds">"</span>&lt;my_secret_key&gt;<span class="pl-pds">"</span></span>)
ac <span class="pl-k">=</span> <span class="pl-c1">AlphavantageJSONClient</span>(<span class="pl-s"><span class="pl-pds">"</span>&lt;my_secret_key&gt;<span class="pl-pds">"</span></span>)

my_client <span class="pl-k">=</span> Stonks<span class="pl-k">.</span><span class="pl-c1">APIClient</span>(<span class="pl-c1">Dict</span>(
  <span class="pl-s"><span class="pl-pds">"</span>price<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> ac<span class="pl-k">.</span>resources[<span class="pl-s"><span class="pl-pds">"</span>price<span class="pl-pds">"</span></span>],
  <span class="pl-s"><span class="pl-pds">"</span>info<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> yc<span class="pl-k">.</span>resources[<span class="pl-s"><span class="pl-pds">"</span>info<span class="pl-pds">"</span></span>],
  <span class="pl-s"><span class="pl-pds">"</span>exchange<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> yc<span class="pl-k">.</span>resources[<span class="pl-s"><span class="pl-pds">"</span>exchange<span class="pl-pds">"</span></span>], 
  <span class="pl-c"><span class="pl-c">#</span> ... + your own custom resources</span>
))
Stonks<span class="pl-k">.</span>APIClients<span class="pl-k">.</span><span class="pl-c1">get_supported_types</span>(my_client)
<span class="pl-c"><span class="pl-c">#</span> 3-element Vector{DataType}:</span>
 ExchangeRate
 AssetPrice
 AssetInfo</pre></div>
</details>
<hr>
<h2 dir="auto"><a id="user-content-contributing" class="anchor" aria-hidden="true" href="#contributing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><strong>Contributing</strong></h2>
<p dir="auto">The project uses <a href="https://danielkummer.github.io/git-flow-cheatsheet/" rel="nofollow">git-flow workflow</a>. <br>
If you want to add a new feature, open a branch feature/$feature-name and make a PR to develop branch. <br>
Reporting issues in Github issues is highly appreciated.</p>
<h2 dir="auto"><a id="user-content-license" class="anchor" aria-hidden="true" href="#license"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><strong>License</strong></h2>
<hr>
<p dir="auto">This project is licensed under the <a href="https://opensource.org/licenses/MIT" rel="nofollow">MIT License</a> - see the <a href="https://github.com/alinski29/Stonks.jl/blob/main/LICENSE"><code>LICENSE</code></a> file for details.</p>
<p dir="auto"><g-emoji class="g-emoji" alias="star" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png">⭐</g-emoji> If you enjoy this project please consider starring the <g-emoji class="g-emoji" alias="chart_with_upwards_trend" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4c8.png">📈</g-emoji> <b>Stonks.jl</b> GitHub repo.</p>
</article></div>