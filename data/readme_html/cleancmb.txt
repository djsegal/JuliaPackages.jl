<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-cleancmb" class="anchor" aria-hidden="true" href="#cleancmb"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>CleanCMB</h1>
<p>This package contains functions to enable extraction of clean maps of the cosmic microwave background (CMB). Some functions can be used to extract non-CMB astrophysical components as well.</p>
<p>Different algorithms exist for extraction of clean maps of the CMB (as well as of astrophysical components). The package currently supports:</p>
<ul>
<li>Internal Linear Combination (ILC) Method</li>
<li>Parametric Maximum Likelihood Method</li>
</ul>
<p>See <a href="https://github.com/komatsu5147/CleanCMB.jl/tree/master/note_on_ilc_vs_ml.pdf">this note</a> for the relationship between them.</p>
<h2><a id="user-content-internal-linear-combination-ilc-method" class="anchor" aria-hidden="true" href="#internal-linear-combination-ilc-method"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Internal Linear Combination (ILC) Method</h2>
<ul>
<li><code>ilc_weights(cij[, e, ℓid=3])</code>: return weights for the internal linear combination (ILC) method, following Equation (12) of <a href="https://journals.aps.org/prd/abstract/10.1103/PhysRevD.68.123523" rel="nofollow">Tegmark et al., PRD, 68, 123523 (2003)</a>.</li>
<li><code>cilc_weights(cij, a, b[, ℓid=3])</code>: return weights for the constrained internal linear combination (CILC) method for two components, following Equation (20) of <a href="https://academic.oup.com/mnras/article/410/4/2481/1007333" rel="nofollow">Remazeilles, et al., MNRAS, 410, 2481 (2011)</a>.</li>
<li><code>milca_weights(cij, a, B[, ℓid=3])</code>: return weights for the modified internal linear combination algorithm (MILCA) method (CILC for N components), following Equation (15) of <a href="https://www.aanda.org/articles/aa/abs/2013/10/aa21891-13/aa21891-13.html" rel="nofollow">Hurier, et al., A&amp;A, 558, A118 (2013)</a>.
<ul>
<li>Note: These papers define weights in various domain, including harmonic, wavelet, and pixel domain. You can choose to work in any domain by supplying a covariance matrix <code>cij</code> in the appropriate domain.</li>
</ul>
</li>
<li><code>ilc_clean_cij(cij, w)</code>: return a covariance matrix multiplied by weights, <code>w' * cij * w</code>, with <code>w</code> returned by any of the above functions, e.g., <code>w = cilc_weights(cij, a, b)</code>.
<ul>
<li>This would be a variance of the extracted component if <code>cij</code> were the same as that used in <code>ilc_weights()</code>, <code>cilc_weights()</code> or <code>milca_weights()</code>.</li>
<li>If <code>cij</code> is a noise covariance matrix, this function returns the noise variance of the cleaned map for each multipole, band-power bin, pixel, etc.</li>
</ul>
</li>
</ul>
<h3><a id="user-content-arguments" class="anchor" aria-hidden="true" href="#arguments"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Arguments</h3>
<ul>
<li><code>cij::Array{&lt;:AbstractFloat,2}</code>: <code>nν</code>-by-<code>nν</code> symmetric covariance matrix, where <code>nν</code> is the number of frequency bands.
<ul>
<li>or, <code>cij::Array{&lt;:AbstractFloat,3}</code>:symmetric covariance matrix with the dimention of <code>(nℓ, nν, nν)</code>, <code>(nν, nℓ, nν)</code> or <code>(nν, nν, nℓ)</code> (default). Here, <code>nℓ</code> is the number of elements in the relevant domain, e.g., multipoles, band-power bins, pixels, etc.</li>
<li>The functions <code>ilc_weights()</code>, <code>cilc_weights()</code> and <code>milca_weights()</code> are <em>multiple dispatch</em>, which detect the dimension of the input <code>cij</code> automatically.</li>
</ul>
</li>
<li><code>a::Array{&lt;:AbstractFloat,1}</code>: vector of the frequency response, for the component to be extracted. E.g., <code>a=[1,...,1]</code> for CMB. The number of elements is <code>nν</code>.</li>
<li><code>b::Array{&lt;:AbstractFloat,1}</code>: vector of the frequency response, for the component to be nulled. The number of elements is <code>nν</code>.</li>
<li><code>B::Array{&lt;:AbstractFloat,2}</code>: <code>nν</code>-by-<code>nrc</code> matrix of the frequency response, for <code>nrc</code> components to be nulled.</li>
</ul>
<h3><a id="user-content-optional-arguments" class="anchor" aria-hidden="true" href="#optional-arguments"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Optional arguments</h3>
<ul>
<li><code>e::Array{&lt;:AbstractFloat,1}</code>: vector of the frequency response, for the component to be extracted. The default value is <code>e=[1,...,1]</code>, i.e., CMB. The number of elements is <code>nν</code>.</li>
<li><code>ℓid::Integer=3</code>: location of the index for the <code>nℓ</code> domain, if the dimension of the input <code>cij</code> is <code>(nℓ, nν, nν)</code>, <code>(nν, nℓ, nν)</code> or <code>(nν, nν, nℓ)</code>.
<code>ℓid=1</code> if <code>cij[nℓ,nν,nν]</code>, <code>ℓid=2</code> if <code>cij[nν,nℓ,nν]</code>, and <code>ℓid=3</code> (the default value) if <code>cij[nν,nν,nℓ]</code>.</li>
</ul>
<h2><a id="user-content-parametric-maximum-likelihood-method" class="anchor" aria-hidden="true" href="#parametric-maximum-likelihood-method"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Parametric Maximum Likelihood Method</h2>
<ul>
<li><code>loglike_beta(nij, A, d)</code> or <code>loglike_beta(nij, A, cij)</code>:: return log(likelihood) for frequency response vectors <code>A</code> given a data vector <code>d</code> or data covariance matrix <code>cij</code>, based on Equation (9) of <a href="https://academic.oup.com/mnras/article/392/1/216/1071929" rel="nofollow">Stompor et al., MNRAS, 392, 216 (2009)</a>.</li>
</ul>

<h3><a id="user-content-arguments-1" class="anchor" aria-hidden="true" href="#arguments-1"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Arguments</h3>
<ul>
<li><code>nij::Array{&lt;:AbstractFloat,2}</code>: <code>nν</code>-by-<code>nν</code> symmetric noise covariance matrix, where <code>nν</code> is the number of frequency bands.</li>
<li><code>A::Array{&lt;:AbstractFloat,2}</code>: <code>nν</code>-by-<code>nc</code> matrix of the frequency response, for <code>nc</code> components in sky.
<ul>
<li>E.g., <code>A = [a B]</code> where <code>a = ones(nν)</code> for CMB and <code>B</code> is a <code>nν</code>-by-<code>nc-1</code> matrix for the frequency response of foreground components.</li>
</ul>
</li>
<li><code>d::Array{&lt;:AbstractFloat,1}</code>: data vector for a given pixel, (ℓ,m), or any other appropriate domain. The number of elements is <code>nν</code>.</li>
<li><code>cij::Array{&lt;:AbstractFloat,2}</code>: <code>nν</code>-by-<code>nν</code> symmetric covariance matrix for a given multipole, pixel, or any other appropriate domain.</li>
</ul>

<h2><a id="user-content-foreground-models" class="anchor" aria-hidden="true" href="#foreground-models"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Foreground models</h2>
<p>The package contains the following functions to return frequency dependence of foreground components:</p>
<ul>
<li><code>tsz(νGHz; units="cmb", Tcmb=2.7255)</code>: Spectrum of the thermal Sunyaev-Zeldovich effect given in Equation (V) in Appendix of <a href="http://articles.adsabs.harvard.edu/pdf/1969Ap%26SS...4..301Z" rel="nofollow">Zeldovich, Sunyaev, Astrophys. Space Sci. 4, 301 (1969)</a>.</li>
<li><code>dust1(νGHz; Td=19.6, βd=1.6, νd=353, units="cmb", Tcmb=2.7255)</code>: Spectrum of 1-component modified black-body thermal dust emission. The output is normalized to unity at <code>νGHz = νd</code>.</li>
<li><code>synch(νGHz; βs=-3, νs=23, Cs=0, νC=40, units="cmb", Tcmb=2.7255)</code>: Spectrum of synchrotron emission. The output is normalized to unity at <code>νGHz = νs</code>.</li>
</ul>
<h3><a id="user-content-arguments-2" class="anchor" aria-hidden="true" href="#arguments-2"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Arguments</h3>
<ul>
<li><code>νGHz::Real</code>: frequency in units of GHz.</li>
</ul>
<h3><a id="user-content-optional-keyword-arguments" class="anchor" aria-hidden="true" href="#optional-keyword-arguments"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Optional keyword arguments</h3>
<ul>
<li><code>units::String</code>: units of the spectrum. For Rayleigh-Jeans temperature (brightness temperature) units, set <code>units = "rj"</code>. The default is the CMB units.</li>
<li><code>Tcmb::Real</code>: present-day temperature of the CMB in units of Kelvin. The default value is <code>2.7255</code>.</li>
<li><code>Td::Real</code>: dust temperature. The default value is <code>19.6</code> (Kelvin).</li>
<li><code>βd::Real</code>: dust emissivity index. The default value is <code>1.6</code>.</li>
<li><code>νd::Real</code>: frequency at which the output dust spectrum is normalized to unity. The default value is <code>353</code> (GHz).</li>
<li><code>βs::Real</code>: synchrotron power-law index. The default is <code>-3</code>.</li>
<li><code>νs::Real</code>: frequency at which the output synchrotron spectrum is normalized to unity. The default is <code>23</code> (GHz).</li>
<li><code>Cs::Real</code>: curvature of the synchrotron spectrum. The default value is <code>0</code>.</li>
<li><code>νC::Real</code>: pivot frequency for curvature of the synchrotron spectrum. The default value is <code>40</code> (GHz).</li>
</ul>
<h2><a id="user-content-example-julia-codes" class="anchor" aria-hidden="true" href="#example-julia-codes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example Julia Codes</h2>
<ul>
<li><a href="https://github.com/komatsu5147/CleanCMB.jl/tree/master/examples/CleanWMAP.jl">examples/CleanWMAP.jl</a>
<ul>
<li>This code applies <code>ilc_weights()</code> in pixel domain to produce a clean map of CMB from the temperature maps of Wilkinson Microwave Anisotropy Probe (WMAP) at five frequency bands.</li>
<li>The code requires <a href="https://github.com/ziotom78/Healpix.jl">Healpix.jl</a>.</li>
</ul>
</li>
</ul>
<h3><a id="user-content-pipelines" class="anchor" aria-hidden="true" href="#pipelines"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Pipelines</h3>
<p>Here we provide example codes for <em>pipelines</em>, which do everything from generation of simulated maps to estimation of the cosmological parameter (tensor-to-scalar ratio of the primordial gravitational waves) in one go.</p>
<ul>
<li>
<p><a href="https://github.com/komatsu5147/CleanCMB.jl/tree/master/examples/ILCPipelineSOSAT.jl">examples/ILCPipelineSOSAT.jl</a></p>
<ul>
<li>This code applies <code>ilc_weights()</code> in harmonic domain to produce power spectra of clean polarisation maps of the CMB.</li>
<li>The code requires <a href="https://github.com/ziotom78/Healpix.jl">Healpix.jl</a> and <a href="https://github.com/ziotom78/Libsharp.jl">Libsharp.jl</a>. It also calls python wrappers <a href="https://github.com/LSSTDESC/NaMaster">pymaster</a> and <a href="https://github.com/lesgourg/class_public/wiki/Python-wrapper">classy</a> via <code>PyCall</code>.</li>
<li>This is a simulation pipeline for the Small Aperture Telescope (SAT) of the <a href="https://simonsobservatory.org" rel="nofollow">Simons Observatory</a>. The code performs the following operations:
<ol>
<li>Read in a hits map and calculate weights for inhomogeneous noise.</li>
<li><code>include("compute_cl_class.jl")</code> (see <a href="https://github.com/komatsu5147/CleanCMB.jl/blob/master/examples/compute_cl_class.jl">examples/compute_cl_class.jl</a>) to generate theoretical scalar- and tensor-mode power spectra of the CMB using <a href="https://github.com/lesgourg/class_public">CLASS</a>.</li>
<li>Read in and smooth foreground maps by beams of the telescope.</li>
<li>Generate Gaussian random realisations of the CMB and noise.</li>
<li>Calculate covariance matrices <code>cij</code> of the foreground, noise, and CMB+foreground+noise maps.</li>
<li>Calculate ILC weights in harmonic domain using <code>ilc_weights()</code>.</li>
<li>Calculate power spectra of the clean CMB maps using <code>ilc_clean_cij()</code>.</li>
<li>Show results for visual inspection, if <code>showresults = true</code>.</li>
<li>Calculate the tensor-to-scalar ratio and its uncertainty from the simulated realisations.</li>
<li>Write out the results (tensor-to-scalar ratios with and without residual foreground marginalisation) to a file <code>ilc_results_sosat.csv</code> and create a PDF figure <code>ilc_clbb_sim_sosat.pdf</code> showing the cleaned B-mode power spectrum, minus noisebias, and minus the residual foreground.</li>
</ol>
</li>
<li>For your reference, the results from 300 realisations starting with the initial seed of <code>5147</code> are given in <a href="https://github.com/komatsu5147/CleanCMB.jl/tree/master/examples/results/ilc_results_sosat_300sims_seed5147.csv">examples/results/ilc_results_sosat_300sims_seed5147.csv</a>. You can compute the mean and standard deviation of the tensor-to-scalar ratios. You should find, for 30 &lt; ℓ &lt; 260:
<ul>
<li>Without FG marginalisation: r = (2.0 ± 1.6) x 10<sup>-3</sup></li>
<li>With marginalisation: r = (-1.0 ± 2.7) x 10<sup>-3</sup></li>
</ul>
</li>
</ul>
</li>
<li>
<p><a href="https://github.com/komatsu5147/CleanCMB.jl/tree/master/examples/MILCAPipelineSOSAT.jl">examples/MILCAPipelineSOSAT.jl</a></p>
<ul>
<li>
<p>This code performs a hybrid of the maximum likelihood and ILC methods. See <a href="https://github.com/komatsu5147/CleanCMB.jl/tree/master/note_on_ilc_vs_ml.pdf">this note</a> for the relationship between them.</p>
<ul>
<li>The code applies <code>loglike_beta()</code> in harmonic domain to find the best-fitting synchrotron and dust spectral indices (<code>βs</code> and <code>βd</code>), and calculates weights using the N-component constrained ILC <code>milca_weights()</code>.</li>
<li>When calculating the weights, it uses the total covariance matrix <code>cij</code> (like for the ILC) rather than the noise covariance matrix <code>nij</code> (like for the maximum likelihood). This minimises further the foreground contribution that is not modeled.</li>
</ul>
</li>
<li>
<p>The code performs the same operations as the above <a href="https://github.com/komatsu5147/CleanCMB.jl/tree/master/examples/ILCPipelineSOSAT.jl">ILC pipeline</a> for the Small Aperture Telescope (SAT) of the <a href="https://simonsobservatory.org" rel="nofollow">Simons Observatory</a>, but replaces the steps f and g with</p>
<ol start="6">
<li>Calculate the best-fitting <code>βs</code> and <code>βd</code> by minimising <code>-loglike_beta()</code> with respect to them.</li>
<li>Calculate weights using <code>milca_weights()</code> with the best-fitting <code>βs</code> and <code>βd</code>, and calculate power spectra of the clean CMB maps using <code>ilc_clean_cij()</code>.</li>
</ol>
</li>
<li>
<p>More detail of the procedure:</p>
<ul>
<li>The code finds the best-fitting <code>βs</code> and <code>βd</code> for each band-power at multipoles below the "switching" multipole, <code>ℓ ≤ ℓswitch</code> (the default value is <code>ℓswitch = 30</code>). This may better handle complex foreground properties on large angular scales.</li>
<li>For higher multipoles, the code finds the global <code>βs</code> and <code>βd</code> using the covariance matrix smoothed to a common resolution specified by <code>smooth_FWHM</code> (in units of degrees; the default value is <code>smooth_FWHM = 0.5</code>). This is equivalent to finding <code>βs</code> and <code>βd</code> on smoothed maps with the common resolution.</li>
</ul>
</li>
<li>
<p>For your reference, the results from 300 realisations starting with the initial seed of <code>5147</code> are given in <a href="https://github.com/komatsu5147/CleanCMB.jl/tree/master/examples/results/milca_results_sosat_300sims_seed5147.csv">examples/results/milca_results_sosat_300sims_seed5147.csv</a>. You can compute the mean and standard deviation of the tensor-to-scalar ratios. You should find, for 30 &lt; ℓ &lt; 260:</p>
<ul>
<li>Without FG marginalisation: r = (1.2 ± 2.7) x 10<sup>-3</sup></li>
<li>With marginalisation: r = (-0.8 ± 5.1) x 10<sup>-3</sup></li>
</ul>
</li>
</ul>
</li>
<li>
<p><a href="https://github.com/komatsu5147/CleanCMB.jl/tree/master/examples/ILCPipelineSOSATCCATp.jl">examples/ILCPipelineSOSATCCATp.jl</a></p>
<ul>
<li>Same as <a href="https://github.com/komatsu5147/CleanCMB.jl/tree/master/examples/ILCPipelineSOSAT.jl">examples/ILCPipelineSOSAT.jl</a>, but add simulated data of the <a href="https://www.ccatobservatory.org" rel="nofollow">CCAT-prime</a> at 350, 410, and 850 GHz with specifications given in Table 1 of <a href="https://link.springer.com/article/10.1007/s10909-020-02428-z" rel="nofollow">Choi et al., JLTP, 199, 1089 (2020)</a>.</li>
</ul>
</li>
<li>
<p><a href="https://github.com/komatsu5147/CleanCMB.jl/tree/master/examples/MILCAPipelineSOSATCCATp.jl">examples/MILCAPipelineSOSATCCATp.jl</a></p>
<ul>
<li>Same as <a href="https://github.com/komatsu5147/CleanCMB.jl/tree/master/examples/MILCAPipelineSOSAT.jl">examples/MILCAPipelineSOSAT.jl</a>, but vary the dust temperature <code>Td</code> as the third foreground parameter, and use Gaussian priors for <code>βs</code>, <code>βd</code> and <code>Td</code>.</li>
<li>Also add simulated data of the <a href="https://www.ccatobservatory.org" rel="nofollow">CCAT-prime</a> at 350, 410, and 850 GHz with specifications given in Table 1 of <a href="https://link.springer.com/article/10.1007/s10909-020-02428-z" rel="nofollow">Choi et al., JLTP, 199, 1089 (2020)</a>.</li>
</ul>
</li>
</ul>
<h3><a id="user-content-splitting-pipelines" class="anchor" aria-hidden="true" href="#splitting-pipelines"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Splitting Pipelines</h3>
<p>The above codes do everything in one go. However, sometimes it is convenient to split the processes. For example, we do not have to re-generate maps and their covariance matrices everytime we make a small modification to the rest of the pipeline.</p>
<p>Here we provide example codes for splitting the pipelines into two pieces: (1) Generation of simulated maps and their covariance matrices, and (2) Application of foreground cleaning methods to the covariance matrices.</p>
<ul>
<li><a href="https://github.com/komatsu5147/CleanCMB.jl/tree/master/examples/GenerateCovMatrices.jl">examples/GenerateCovMatrices.jl</a>: Perform the steps (a)-(e) of the pipeline and write out the covariance matrices to binary files in arrays of <code>(nν, nν, nbands)</code> where <code>nν</code> is the number of frequency channels and <code>nbands</code> is the number of band-powers. It also writes out the binned scalar and tensor power spectra used to generate the simulations to text files.</li>
<li><a href="https://github.com/komatsu5147/CleanCMB.jl/tree/master/examples/PerformILC.jl">examples/PerformILC.jl</a> and <a href="https://github.com/komatsu5147/CleanCMB.jl/tree/master/examples/PerformMILCA.jl">examples/PerformMILCA.jl</a>: Perform the steps (f)-(j) of of the pipeline and write out the estimated tensor-to-scalar ratios to a csv file.
<ul>
<li><strong>Note</strong>: <a href="https://github.com/komatsu5147/CleanCMB.jl/tree/master/examples/PerformMILCA.jl">examples/PerformMILCA.jl</a> varies three parameters, <code>βs</code>, <code>βd</code> and <code>Td</code> with Gaussian priors.</li>
</ul>
</li>
</ul>
<h2><a id="user-content-acknowledgment" class="anchor" aria-hidden="true" href="#acknowledgment"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Acknowledgment</h2>
<p>Development of the functions provided in this package was supported in part by the Deutsche Forschungsgemeinschaft (DFG, German Research Foundation) under Germany's Excellence Strategy - EXC-2094 - 390783311 and JSPS KAKENHI Grant Number JP15H05896. The Kavli IPMU is supported by World Premier International Research Center Initiative (WPI), MEXT, Japan.</p>
</article></div>