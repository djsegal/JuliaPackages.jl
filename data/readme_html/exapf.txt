<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-exapf" class="anchor" aria-hidden="true" href="#exapf"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>ExaPF</h1>
<p><a href="https://exanauts.github.io/ExaPF.jl/" rel="nofollow"><img src="https://camo.githubusercontent.com/56f8252ba8e9d3f0b810769543f77823d2fe031ce560d4c2d69fb1fcad800383/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6c61746573742d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-latest-blue.svg" style="max-width:100%;"></a> <a target="_blank" rel="noopener noreferrer" href="https://github.com/exanauts/ExaPF.jl/workflows/Run%20tests/badge.svg?branch=master"><img src="https://github.com/exanauts/ExaPF.jl/workflows/Run%20tests/badge.svg?branch=master" alt="CI" style="max-width:100%;"></a></p>
<p>ExaPF is a HPC package for solving power flow (PF) on a GPU. It currently solves PF using the Newton-Raphson algorithm on NVIDIA GPUs.
Its main features are:</p>
<ul>
<li>Using <a href="https://juliagpu.gitlab.io/CUDA.jl/" rel="nofollow">CUDA.jl</a> CuArrays arrays for generating CUDA kernels using the broadcast '.' operator.</li>
<li>Using <a href="https://github.com/JuliaDiff/ForwardDiff.jl">ForwardDiff.jl</a> and Jacobian coloring to generate the compressed Jacobian of the PF equations. The Jacobian evaluation is taking place fully on the GPU.</li>
<li>Preconditioned BICGSTAB with support for <a href="https://github.com/JuliaSmoothOptimizers/Krylov.jl">Krylov.jl</a>.</li>
<li>A block Jacobi preconditioner that updates on the GPU.</li>
</ul>
<p>This code will serve as the basis for OPF on GPUs using the reduced gradient method. A similar abstraction than CuArrays will be used to port the code to AMD ROCm and Intel oneAPI through <a href="https://github.com/JuliaGPU/AMDGPU.jl">AMDGPU.jl</a> and <a href="https://github.com/JuliaGPU/oneAPI.jl">oneAPI.jl</a>, respectively.</p>
<h2><a id="user-content-quick-start" class="anchor" aria-hidden="true" href="#quick-start"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Quick-start</h2>
<h3><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h3>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="pkg&gt; add ExaPF
"><pre>pkg<span class="pl-k">&gt;</span> add ExaPF</pre></div>
<h3><a id="user-content-test" class="anchor" aria-hidden="true" href="#test"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Test</h3>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="pkg&gt; test ExaPF
"><pre>pkg<span class="pl-k">&gt;</span> test ExaPF</pre></div>
<h3><a id="user-content-how-to-solve-the-power-flow-of-a-given-matpower-instance" class="anchor" aria-hidden="true" href="#how-to-solve-the-power-flow-of-a-given-matpower-instance"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>How to solve the power flow of a given MATPOWER instance?</h3>
<p>ExaPF implements a Newton-Raphson algorithm to solve
the power flow equations of a power network.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="# Input file
julia&gt; case = &quot;case57.m&quot;
# Instantiate a PolarForm object on the CPU.
julia&gt; polar = ExaPF.PolarForm(case, CPU())
# Instantiate a Newton-Raphson algorithm with verbose activated
julia&gt; pf_algo = NewtonRaphson(verbose=1)
# Resolution
julia&gt; ExaPF.powerflow(polar, algo)
Iteration 0. Residual norm: 4.295.
Iteration 1. Residual norm: 0.250361.
Iteration 2. Residual norm: 0.00441074.
Iteration 3. Residual norm: 2.81269e-06.
Iteration 4. Residual norm: 3.9111e-12.
ExaPF.ConvergenceStatus(true, 4, 3.911102241031109e-12, 0)
"><pre><span class="pl-c"><span class="pl-c">#</span> Input file</span>
julia<span class="pl-k">&gt;</span> case <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>case57.m<span class="pl-pds">"</span></span>
<span class="pl-c"><span class="pl-c">#</span> Instantiate a PolarForm object on the CPU.</span>
julia<span class="pl-k">&gt;</span> polar <span class="pl-k">=</span> ExaPF<span class="pl-k">.</span><span class="pl-c1">PolarForm</span>(case, <span class="pl-c1">CPU</span>())
<span class="pl-c"><span class="pl-c">#</span> Instantiate a Newton-Raphson algorithm with verbose activated</span>
julia<span class="pl-k">&gt;</span> pf_algo <span class="pl-k">=</span> <span class="pl-c1">NewtonRaphson</span>(verbose<span class="pl-k">=</span><span class="pl-c1">1</span>)
<span class="pl-c"><span class="pl-c">#</span> Resolution</span>
julia<span class="pl-k">&gt;</span> ExaPF<span class="pl-k">.</span><span class="pl-c1">powerflow</span>(polar, algo)
Iteration <span class="pl-c1">0.</span> Residual norm<span class="pl-k">:</span> <span class="pl-c1">4.295</span>.
Iteration <span class="pl-c1">1.</span> Residual norm<span class="pl-k">:</span> <span class="pl-c1">0.250361</span>.
Iteration <span class="pl-c1">2.</span> Residual norm<span class="pl-k">:</span> <span class="pl-c1">0.00441074</span>.
Iteration <span class="pl-c1">3.</span> Residual norm<span class="pl-k">:</span> <span class="pl-c1">2.81269e-06</span>.
Iteration <span class="pl-c1">4.</span> Residual norm<span class="pl-k">:</span> <span class="pl-c1">3.9111e-12</span>.
ExaPF<span class="pl-k">.</span><span class="pl-c1">ConvergenceStatus</span>(<span class="pl-c1">true</span>, <span class="pl-c1">4</span>, <span class="pl-c1">3.911102241031109e-12</span>, <span class="pl-c1">0</span>)</pre></div>
<h3><a id="user-content-how-to-solve-the-optimal-power-flow-in-the-reduced-space" class="anchor" aria-hidden="true" href="#how-to-solve-the-optimal-power-flow-in-the-reduced-space"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>How to solve the optimal power flow in the reduced space?</h3>
<p>ExaPF implements a wrapper to <a href="https://github.com/jump-dev/MathOptInterface.jl">MathOptInterface</a>
that allows to solve the optimal power flow problem directly in the reduced space
induced by the power flow equations:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; case = &quot;case57.m&quot;
# Instantiate a ReducedSpaceEvaluator object
julia&gt; nlp = ExaPF.ReducedSpaceEvaluator(datafile)
# MOI optimizer
julia&gt; optimizer = Ipopt.Optimizer()
# Use LBFGS algorithm, as reduced Hessian is not available by default!
julia&gt; MOI.set(optimizer, MOI.RawParameter(&quot;hessian_approximation&quot;), &quot;limited-memory&quot;)
julia&gt; MOI.set(optimizer, MOI.RawParameter(&quot;tol&quot;), 1e-4)
julia&gt; solution = ExaPF.optimize!(optimizer, nlp)
Total number of variables............................:       10
                     variables with only lower bounds:        0
                variables with lower and upper bounds:       10
                     variables with only upper bounds:        0
Total number of equality constraints.................:        0
Total number of inequality constraints...............:       58
        inequality constraints with only lower bounds:        0
   inequality constraints with lower and upper bounds:       58
        inequality constraints with only upper bounds:        0


Number of Iterations....: 9

                                   (scaled)                 (unscaled)
Objective...............:   1.9630480251946040e+03    3.7589338203438238e+04
Dual infeasibility......:   2.5545890554923290e-05    4.8916435433709606e-04
Constraint violation....:   4.7695181137896725e-13    4.7695181137896725e-13
Complementarity.........:   1.0270912626531211e-11    1.9667211572084318e-10
Overall NLP error.......:   2.5545890554923290e-05    4.8916435433709606e-04

[...]
Total CPU secs in IPOPT (w/o function evaluations)   =      0.049
Total CPU secs in NLP function evaluations           =      0.023

EXIT: Optimal Solution Found.
"><pre>julia<span class="pl-k">&gt;</span> case <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>case57.m<span class="pl-pds">"</span></span>
<span class="pl-c"><span class="pl-c">#</span> Instantiate a ReducedSpaceEvaluator object</span>
julia<span class="pl-k">&gt;</span> nlp <span class="pl-k">=</span> ExaPF<span class="pl-k">.</span><span class="pl-c1">ReducedSpaceEvaluator</span>(datafile)
<span class="pl-c"><span class="pl-c">#</span> MOI optimizer</span>
julia<span class="pl-k">&gt;</span> optimizer <span class="pl-k">=</span> Ipopt<span class="pl-k">.</span><span class="pl-c1">Optimizer</span>()
<span class="pl-c"><span class="pl-c">#</span> Use LBFGS algorithm, as reduced Hessian is not available by default!</span>
julia<span class="pl-k">&gt;</span> MOI<span class="pl-k">.</span><span class="pl-c1">set</span>(optimizer, MOI<span class="pl-k">.</span><span class="pl-c1">RawParameter</span>(<span class="pl-s"><span class="pl-pds">"</span>hessian_approximation<span class="pl-pds">"</span></span>), <span class="pl-s"><span class="pl-pds">"</span>limited-memory<span class="pl-pds">"</span></span>)
julia<span class="pl-k">&gt;</span> MOI<span class="pl-k">.</span><span class="pl-c1">set</span>(optimizer, MOI<span class="pl-k">.</span><span class="pl-c1">RawParameter</span>(<span class="pl-s"><span class="pl-pds">"</span>tol<span class="pl-pds">"</span></span>), <span class="pl-c1">1e-4</span>)
julia<span class="pl-k">&gt;</span> solution <span class="pl-k">=</span> ExaPF<span class="pl-k">.</span><span class="pl-c1">optimize!</span>(optimizer, nlp)
Total number of variables<span class="pl-k">............................</span>:       <span class="pl-c1">10</span>
                     variables with only lower bounds<span class="pl-k">:</span>        <span class="pl-c1">0</span>
                variables with lower and upper bounds<span class="pl-k">:</span>       <span class="pl-c1">10</span>
                     variables with only upper bounds<span class="pl-k">:</span>        <span class="pl-c1">0</span>
Total number of equality constraints<span class="pl-k">.................</span>:        <span class="pl-c1">0</span>
Total number of inequality constraints<span class="pl-k">...............</span>:       <span class="pl-c1">58</span>
        inequality constraints with only lower bounds<span class="pl-k">:</span>        <span class="pl-c1">0</span>
   inequality constraints with lower and upper bounds<span class="pl-k">:</span>       <span class="pl-c1">58</span>
        inequality constraints with only upper bounds<span class="pl-k">:</span>        <span class="pl-c1">0</span>


Number of Iterations<span class="pl-k">....</span>: <span class="pl-c1">9</span>

                                   (scaled)                 (unscaled)
Objective<span class="pl-k">...............</span>:   <span class="pl-c1">1.9630480251946040e+03</span>    <span class="pl-c1">3.7589338203438238e+04</span>
Dual infeasibility<span class="pl-k">......</span>:   <span class="pl-c1">2.5545890554923290e-05</span>    <span class="pl-c1">4.8916435433709606e-04</span>
Constraint violation<span class="pl-k">....</span>:   <span class="pl-c1">4.7695181137896725e-13</span>    <span class="pl-c1">4.7695181137896725e-13</span>
Complementarity<span class="pl-k">.........</span>:   <span class="pl-c1">1.0270912626531211e-11</span>    <span class="pl-c1">1.9667211572084318e-10</span>
Overall NLP error<span class="pl-k">.......</span>:   <span class="pl-c1">2.5545890554923290e-05</span>    <span class="pl-c1">4.8916435433709606e-04</span>

[<span class="pl-k">...</span>]
Total CPU secs <span class="pl-k">in</span> IPOPT (w<span class="pl-k">/</span>o <span class="pl-k">function</span> evaluations)   <span class="pl-k">=</span>      <span class="pl-c1">0.049</span>
Total CPU secs <span class="pl-k">in</span> NLP <span class="pl-k">function</span> evaluations           <span class="pl-k">=</span>      <span class="pl-c1">0.023</span>

EXIT<span class="pl-k">:</span> Optimal Solution Found.</pre></div>
<h2><a id="user-content-development" class="anchor" aria-hidden="true" href="#development"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Development</h2>
<p>We welcome any contribution to ExaPF! Bug fixes or feature requests
can be reported with the <a href="https://github.com/exanauts/ExaPF.jl/issues">issue tracker</a>,
and new contributions can be made by opening a pull request on the <code>develop</code>
branch. For more information about development guidelines, please
refer to <a href="https://github.com/exanauts/ExaPF.jl/blob/master/CONTRIBUTING.md">CONTRIBUTING.md</a></p>
<h2><a id="user-content-funding" class="anchor" aria-hidden="true" href="#funding"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Funding</h2>
<p>This research was supported by the Exascale Computing Project (17-SC-20-SC), a joint project of the U.S. Department of Energy’s Office of Science and National Nuclear Security Administration, responsible for delivering a capable exascale ecosystem, including software, applications, and hardware technology, to support the nation’s exascale computing imperative.</p>
</article></div>