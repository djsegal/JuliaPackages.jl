<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-exapf" class="anchor" aria-hidden="true" href="#exapf"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>ExaPF</h1>
<p dir="auto"><a href="https://exanauts.github.io/ExaPF.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a> <a href="https://github.com/exanauts/ExaPF.jl/actions?query=workflow"><img src="https://github.com/exanauts/ExaPF.jl/workflows/Run%20tests/badge.svg?branch=main" alt="" style="max-width: 100%;"></a> <a href="https://codecov.io/github/exanauts/ExaPF.jl?branch=main" rel="nofollow"><img src="https://camo.githubusercontent.com/f72eba4760b5e9144ca24aa3ec81ee84f17726408d6ac4cf4302ddfd6de6165a/68747470733a2f2f636f6465636f762e696f2f67682f6578616e617574732f45786150462e6a6c2f6272616e63682f6d61696e2f6772617068732f62616467652e7376673f6272616e63683d6d61696e" alt="" data-canonical-src="https://codecov.io/gh/exanauts/ExaPF.jl/branch/main/graphs/badge.svg?branch=main" style="max-width: 100%;"></a> <a href="https://doi.org/10.5281/zenodo.6536402" rel="nofollow"><img src="https://camo.githubusercontent.com/a1120e05030659ee856399560a602352dd950e5c0a08928a9dcdb5939e044b2b/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f444f492f31302e353238312f7a656e6f646f2e363533363430322e737667" alt="" data-canonical-src="https://zenodo.org/badge/DOI/10.5281/zenodo.6536402.svg" style="max-width: 100%;"></a></p>
<p dir="auto">ExaPF is a HPC package implementing a vectorized modeler
for power systems. It targets primarily GPU architectures, and provides a portable abstraction to model power systems on upcoming HPC architectures.</p>
<p dir="auto">Its main features are:</p>
<ul dir="auto">
<li><strong>Portable approach:</strong> All <a href="https://exanauts.github.io/ExaPF.jl/dev/lib/formulations/#Constraints" rel="nofollow">expressions</a> (<code>PowerFlowBalance</code>, <code>CostFunction</code>, <code>PowerGenerationBounds</code>, ...) are evaluated fully on the GPU, without data transfers to the host.</li>
<li><strong>Differentiable kernels:</strong> All the expressions are differentiable with <a href="https://github.com/JuliaDiff/ForwardDiff.jl">ForwardDiff.jl</a>. ExaPF uses matrix coloring to generate efficiently the Jacobian and the Hessian in sparse format.</li>
<li><strong>Power flow solver:</strong> ExaPF implements a power flow solver working fully on the GPU, based on a Newton-Raphson algorithm.</li>
<li><strong>Iterative linear algebra:</strong> ExaPF uses <a href="https://github.com/JuliaSmoothOptimizers/Krylov.jl">Krylov.jl</a> to solve sparse linear systems entirely on the GPU, together with an overlapping Schwarz preconditioner.</li>
</ul>
<p dir="auto">ExaPF leverages <a href="https://github.com/JuliaGPU/KernelAbstractions.jl">KernelAbstractions.jl</a>
to generate portable kernels working on different backends.
Right now, only CUDA is fully supported, but in the medium term we have good hope to support
both <a href="https://github.com/JuliaGPU/AMDGPU.jl">AMD ROCm</a> and <a href="https://github.com/JuliaGPU/oneAPI.jl">Intel oneAPI</a>.</p>
<h2 dir="auto"><a id="user-content-quick-start" class="anchor" aria-hidden="true" href="#quick-start"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Quick-start</h2>
<h3 dir="auto"><a id="user-content-how-to-install-exapf" class="anchor" aria-hidden="true" href="#how-to-install-exapf"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>How to install ExaPF?</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="pkg&gt; add ExaPF"><pre>pkg<span class="pl-k">&gt;</span> add ExaPF</pre></div>
<h3 dir="auto"><a id="user-content-test" class="anchor" aria-hidden="true" href="#test"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Test</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="pkg&gt; test ExaPF"><pre>pkg<span class="pl-k">&gt;</span> test ExaPF</pre></div>
<h3 dir="auto"><a id="user-content-how-to-solve-the-power-flow-of-a-given-matpower-instance" class="anchor" aria-hidden="true" href="#how-to-solve-the-power-flow-of-a-given-matpower-instance"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>How to solve the power flow of a given MATPOWER instance?</h3>
<p dir="auto">ExaPF solves the power flow equations of a power network with a Newton-Raphson algorithm:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# Input file
case = &quot;case57.m&quot;
# Instantiate a PolarForm object on the CPU.
# (Replace CPU() by CUDADevice() to deport computation on a CUDA GPU)
polar = ExaPF.PolarForm(case, CPU())
# Initial variables
stack = ExaPF.NetworkStack(polar)
# Solve power flow
conv = run_pf(polar, stack; verbose=1)"><pre><span class="pl-c"><span class="pl-c">#</span> Input file</span>
case <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>case57.m<span class="pl-pds">"</span></span>
<span class="pl-c"><span class="pl-c">#</span> Instantiate a PolarForm object on the CPU.</span>
<span class="pl-c"><span class="pl-c">#</span> (Replace CPU() by CUDADevice() to deport computation on a CUDA GPU)</span>
polar <span class="pl-k">=</span> ExaPF<span class="pl-k">.</span><span class="pl-c1">PolarForm</span>(case, <span class="pl-c1">CPU</span>())
<span class="pl-c"><span class="pl-c">#</span> Initial variables</span>
stack <span class="pl-k">=</span> ExaPF<span class="pl-k">.</span><span class="pl-c1">NetworkStack</span>(polar)
<span class="pl-c"><span class="pl-c">#</span> Solve power flow</span>
conv <span class="pl-k">=</span> <span class="pl-c1">run_pf</span>(polar, stack; verbose<span class="pl-k">=</span><span class="pl-c1">1</span>)</pre></div>
<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="#it 0: 6.18195e-01
#it 1: 8.19603e-03
#it 2: 7.24135e-06
#it 3: 4.68355e-12
Power flow has converged: true
  * #iterations: 3
  * Time Jacobian (s) ........: 0.0004
  * Time linear solver (s) ...: 0.0010
  * Time total (s) ...........: 0.0014"><pre><span class="pl-c"><span class="pl-c">#</span>it 0: 6.18195e-01</span>
<span class="pl-c"><span class="pl-c">#</span>it 1: 8.19603e-03</span>
<span class="pl-c"><span class="pl-c">#</span>it 2: 7.24135e-06</span>
<span class="pl-c"><span class="pl-c">#</span>it 3: 4.68355e-12</span>
Power flow has converged: <span class="pl-c1">true</span>
  <span class="pl-k">*</span> <span class="pl-c"><span class="pl-c">#</span>iterations: 3</span>
  <span class="pl-k">*</span> Time Jacobian (s) ........: 0.0004
  <span class="pl-k">*</span> Time linear solver (s) ...: 0.0010
  <span class="pl-k">*</span> Time total (s) ...........: 0.0014</pre></div>
<p dir="auto">For more information on how to solve power flow on the GPU,
please refer to the <a href="https://exanauts.github.io/ExaPF.jl/dev/quickstart/" rel="nofollow">quickstart guide</a>.</p>
<h2 dir="auto"><a id="user-content-extensions" class="anchor" aria-hidden="true" href="#extensions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Extensions</h2>
<ul dir="auto">
<li><a href="https://github.com/exanauts/Argos.jl/">Argos.jl</a> uses ExaPF as a modeler to accelerate the resolution of OPF problems on CUDA GPU.</li>
</ul>
<h2 dir="auto"><a id="user-content-development" class="anchor" aria-hidden="true" href="#development"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Development</h2>
<p dir="auto">We welcome any contribution to ExaPF! Bug fixes or feature requests
can be reported with the <a href="https://github.com/exanauts/ExaPF.jl/issues">issue tracker</a>,
and new contributions can be made by opening a pull request on the <code>develop</code>
branch. For more information about development guidelines, please
refer to <a href="https://github.com/exanauts/ExaPF.jl/blob/main/CONTRIBUTING.md">CONTRIBUTING.md</a></p>
<h2 dir="auto"><a id="user-content-funding" class="anchor" aria-hidden="true" href="#funding"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Funding</h2>
<p dir="auto">This research was supported by the Exascale Computing Project (17-SC-20-SC), a joint project of the U.S. Department of Energy’s Office of Science and National Nuclear Security Administration, responsible for delivering a capable exascale ecosystem, including software, applications, and hardware technology, to support the nation’s exascale computing imperative.</p>
</article></div>