<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-partialwavefunctions" class="anchor" aria-hidden="true" href="#partialwavefunctions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>PartialWaveFunctions</h1>
<p dir="auto"><a href="https://travis-ci.com/mmikhasenko/PartialWaveFunctions.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/6cef4b1abaa288d43df66a0e31170dcc78d22f102c18a5fa4383a30e425018fe/68747470733a2f2f7472617669732d63692e636f6d2f6d6d696b686173656e6b6f2f5061727469616c5761766546756e6374696f6e732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/mmikhasenko/PartialWaveFunctions.jl.svg?branch=master" style="max-width: 100%;"></a>
<a href="https://ci.appveyor.com/project/mmikhasenko/PartialWaveFunctions-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/7810f6661240d4b417a7435af470a6904a5e6a62615bf8be3f46122ea049d9f6/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f6769746875622f6d6d696b686173656e6b6f2f5061727469616c5761766546756e6374696f6e732e6a6c3f7376673d74727565" alt="Build Status" data-canonical-src="https://ci.appveyor.com/api/projects/status/github/mmikhasenko/PartialWaveFunctions.jl?svg=true" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/mmikhasenko/PartialWaveFunctions.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/56366c82f96917405573d544a7fc1a9ed7c4c3c3ebff3eecb1446d792f56ea8a/68747470733a2f2f636f6465636f762e696f2f67682f6d6d696b686173656e6b6f2f5061727469616c5761766546756e6374696f6e732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/mmikhasenko/PartialWaveFunctions.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">Julia native implementation of the special functions used in the Partial Wave Analysis for High Energy Physics. Currently, Wigner D-functions and Clebsch-Gordan(CG) coefficients are available.
The implementation of the CG coefficient is by factor 4 faster than the C++ code from the GSL package (see details in <a href="test/timing_different_packages.jl">test/timing</a>).</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="] add PartialWaveFunctions"><pre>] add PartialWaveFunctions</pre></div>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using PartialWaveFunctions

# convenient call for integer indices
let j=3, (m1,m2) = (1,-1), cosθ=0.3
   wignerd(j,m1,m2,cosθ)
end # return 0.293

clebschgordan(1,0,1,0,1,0) # &lt;1, 0; 1, 0 | 1, 0&gt; = 0.0 : ρ⁰ → π⁰ π⁰
CG(1,0,1,0,1,0) # a shortcut"><pre><span class="pl-k">using</span> PartialWaveFunctions

<span class="pl-c"><span class="pl-c">#</span> convenient call for integer indices</span>
<span class="pl-k">let</span> j<span class="pl-k">=</span><span class="pl-c1">3</span>, (m1,m2) <span class="pl-k">=</span> (<span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>), cosθ<span class="pl-k">=</span><span class="pl-c1">0.3</span>
   <span class="pl-c1">wignerd</span>(j,m1,m2,cosθ)
<span class="pl-k">end</span> <span class="pl-c"><span class="pl-c">#</span> return 0.293</span>

<span class="pl-c1">clebschgordan</span>(<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>) <span class="pl-c"><span class="pl-c">#</span> &lt;1, 0; 1, 0 | 1, 0&gt; = 0.0 : ρ⁰ → π⁰ π⁰</span>
<span class="pl-c1">CG</span>(<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>) <span class="pl-c"><span class="pl-c">#</span> a shortcut</span></pre></div>
<p dir="auto">General implementation includes the half-integer indices:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="let two_j=3, (two_m1,two_m2) = (1,-1), cosθ=0.3
   wignerd_doublearg(two_j,two_m1,two_m2, cosθ)
end # return -0.562

clebschgordan_doublearg(2,0,1,1,1,1) # &lt;1, 0; 1/2, 1/2 | 1/2, 1/2&gt; = -0.577
CG_doublearg(2,0,1,1,1,1) # a shortcut"><pre><span class="pl-k">let</span> two_j<span class="pl-k">=</span><span class="pl-c1">3</span>, (two_m1,two_m2) <span class="pl-k">=</span> (<span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>), cosθ<span class="pl-k">=</span><span class="pl-c1">0.3</span>
   <span class="pl-c1">wignerd_doublearg</span>(two_j,two_m1,two_m2, cosθ)
<span class="pl-k">end</span> <span class="pl-c"><span class="pl-c">#</span> return -0.562</span>

<span class="pl-c1">clebschgordan_doublearg</span>(<span class="pl-c1">2</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-c1">1</span>) <span class="pl-c"><span class="pl-c">#</span> &lt;1, 0; 1/2, 1/2 | 1/2, 1/2&gt; = -0.577</span>
<span class="pl-c1">CG_doublearg</span>(<span class="pl-c1">2</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-c1">1</span>) <span class="pl-c"><span class="pl-c">#</span> a shortcut</span></pre></div>
<h2 dir="auto"><a id="user-content-related-packages" class="anchor" aria-hidden="true" href="#related-packages"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Related packages:</h2>
<ul dir="auto">
<li>python calls via <code>SymPy.jl</code>. Ideal for symbolic calculations. Works pretty with jupyter notebooks due to the latex output. See details in the <a href="https://github.com/JuliaPy/SymPy.jl/blob/master/test/test-physics.jl">test/physics</a>.</li>
<li><a href="https://github.com/jishnub/WignerD.jl">WignerD.jl</a> interfaces <code>Fortran</code> for the <code>WignerD</code>.</li>
<li><a href="https://github.com/Jutho/WignerSymbols.jl">WignerSymbols.jl</a> <code>Julia</code> package specialized on Symbols. Particularly it contains the Clebsch-Gordan coefficients.</li>
<li><a href="https://github.com/JuliaMath/GSL.jl">GSL.jl</a> interfaces <code>C++</code>. It can calculate Sperical Harmionics, Legendre polynomials. <code>WignerD</code> is not <a href="https://github.com/JuliaMath/GSL.jl/issues/66" data-hovercard-type="issue" data-hovercard-url="/JuliaMath/GSL.jl/issues/66/hovercard">wrapped-up</a>.</li>
</ul>
<h2 dir="auto"><a id="user-content-references" class="anchor" aria-hidden="true" href="#references"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>References</h2>
<ul dir="auto">
<li>The Wigner functions are expressed via the Jacobi polynomials Pₙ⁽ᵃᵇ⁾(z) using Eq. (3.74) of
L. Biedenharn, J. Louck, and P. Carruthers, Angular Momentum in Quantum Physics: Theory and Application</li>
<li>The Jacobi polynomials Pₙ⁽ᵃᵇ⁾(z) are codded using a series expression in powers of (1-z), see e.g. <a href="https://en.wikipedia.org/wiki/Jacobi_polynomials" rel="nofollow">wikipedia page</a>.</li>
<li>Clebsch-Gordan coefficients are computed from explicit expression via a finite series, see e.g. <a href="https://en.wikipedia.org/wiki/Table_of_Clebsch%E2%80%93Gordan_coefficients" rel="nofollow">wikipedia page</a></li>
</ul>
</article></div>