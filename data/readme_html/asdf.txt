<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-asdf" class="anchor" aria-hidden="true" href="#asdf"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><a href="https://github.com/eschnett/ASDF.jl">ASDF</a></h1>
<p>A Julia library for the <a href="https://asdf-standard.readthedocs.io/en/latest/index.html" rel="nofollow">Advanced Scientific Data Format (ASDF)</a>.</p>
<p><a href="https://travis-ci.org/eschnett/ASDF.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/acf63f6a0e90e1fdc81da0fc18c881b9c301b10417307f5760c64d0e2e5ac7c9/68747470733a2f2f7472617669732d63692e6f72672f657363686e6574742f415344462e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status (Travis)" data-canonical-src="https://travis-ci.org/eschnett/ASDF.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/eschnett/asdf-jl/branch/master" rel="nofollow"><img src="https://camo.githubusercontent.com/817ea354109d459c0aa117a35d40c057687440d918a932907a5fa649c2bdda7b/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f34766f653933676577646939693070712f6272616e63682f6d61737465723f7376673d74727565" alt="Build Status (Appveyor)" data-canonical-src="https://ci.appveyor.com/api/projects/status/4voe93gewdi9i0pq/branch/master?svg=true" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/eschnett/ASDF.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/c92de198077c53a2d3721660eb8703b468089e1de1974b8139c0f051b7e2755f/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f657363686e6574742f415344462e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status (Coveralls)" data-canonical-src="https://coveralls.io/repos/github/eschnett/ASDF.jl/badge.svg?branch=master" style="max-width:100%;"></a>
<a href="https://zenodo.org/badge/latestdoi/144600920" rel="nofollow"><img src="https://camo.githubusercontent.com/cbe28924f9b63ef41efb65574da1ec2758e6eff69232262275332857a26f6888/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f3134343630303932302e737667" alt="DOI" data-canonical-src="https://zenodo.org/badge/144600920.svg" style="max-width:100%;"></a></p>
<h2><a id="user-content-overview" class="anchor" aria-hidden="true" href="#overview"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Overview</h2>
<p>The Advanced Scientific Data Format (ASDF) is a file format for scientific data. This package provides a Julia implementation for reading and writing ASDF files, based on the <a href="https://github.com/spacetelescope/asdf"><em>asdf</em></a> Python package and the <a href="https://github.com/JuliaPy/PyCall.jl"><em>PyCall</em></a> Julia package.</p>
<p>The ASDF file format is based on the human-readable YAML standard, extended with efficient binary blocks to store array data. Basic arithmetic types (Bool, Int, Float, Complex) and strings are supported out of the box. Other types (structures) need to be declared to be supported.</p>
<p>ASDF supports arbitrary array strides, both C (Python) and Fortran (Julia) memory layouts, as well as compression. The YAML metadata can contain arbitrary information corresponding to scalars, arrays, or dictionaries.</p>
<p>The ASDF file format targets a similar audience as the HDF5 format.</p>
<h2><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Examples</h2>
<h3><a id="user-content-writing-to-a-file" class="anchor" aria-hidden="true" href="#writing-to-a-file"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Writing to a file</h3>
<p>Here we create a few simple data items and write them into an ASDF file:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using ASDF
julia&gt; # Define some data
julia&gt; s = &quot;Hello, World!&quot;
julia&gt; dict = Dict(&quot;a&quot; =&gt; 1, &quot;b&quot; =&gt; 2.0, &quot;c&quot; =&gt; &quot;cee&quot;)
julia&gt; arr = Float32[i+j for i in 1:10, j in 1:10]
julia&gt; # Create the ASDF tree
julia&gt; tree = Dict{String, Any}(
           &quot;comment&quot; =&gt; s,
           &quot;table&quot; =&gt; dict,
           &quot;data&quot; =&gt; arr)
julia&gt; # Write the file
julia&gt; ASDF.write_to(ASDF.File(tree), &quot;example.asdf&quot;)
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> ASDF
julia<span class="pl-k">&gt;</span> <span class="pl-c"><span class="pl-c">#</span> Define some data</span>
julia<span class="pl-k">&gt;</span> s <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>Hello, World!<span class="pl-pds">"</span></span>
julia<span class="pl-k">&gt;</span> dict <span class="pl-k">=</span> <span class="pl-c1">Dict</span>(<span class="pl-s"><span class="pl-pds">"</span>a<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1</span>, <span class="pl-s"><span class="pl-pds">"</span>b<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">2.0</span>, <span class="pl-s"><span class="pl-pds">"</span>c<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>cee<span class="pl-pds">"</span></span>)
julia<span class="pl-k">&gt;</span> arr <span class="pl-k">=</span> Float32[i<span class="pl-k">+</span>j <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>, j <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>]
julia<span class="pl-k">&gt;</span> <span class="pl-c"><span class="pl-c">#</span> Create the ASDF tree</span>
julia<span class="pl-k">&gt;</span> tree <span class="pl-k">=</span> <span class="pl-c1">Dict</span><span class="pl-c1">{String, Any}</span>(
           <span class="pl-s"><span class="pl-pds">"</span>comment<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> s,
           <span class="pl-s"><span class="pl-pds">"</span>table<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> dict,
           <span class="pl-s"><span class="pl-pds">"</span>data<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> arr)
julia<span class="pl-k">&gt;</span> <span class="pl-c"><span class="pl-c">#</span> Write the file</span>
julia<span class="pl-k">&gt;</span> ASDF<span class="pl-k">.</span><span class="pl-c1">write_to</span>(ASDF<span class="pl-k">.</span><span class="pl-c1">File</span>(tree), <span class="pl-s"><span class="pl-pds">"</span>example.asdf<span class="pl-pds">"</span></span>)</pre></div>
<p>This creates a file <code>example.asdf</code>. The beginning of the file is human-readable and is a properly formatted YAML document. Note that the triple dashes <code>---</code> indicate the beginning and the triple dots <code>...</code> indicate the end of a YAML document:</p>
<div class="highlight highlight-source-yaml position-relative" data-snippet-clipboard-copy-content="#ASDF 1.0.0
#ASDF_STANDARD 1.2.0
%YAML 1.1
%TAG ! tag:stsci.edu:asdf/
--- !core/asdf-1.1.0
asdf_library: !core/software-1.0.0 {author: Space Telescope Science Institute, homepage: 'http://github.com/spacetelescope/asdf',
  name: asdf, version: 2.1.0}
history:
  extensions:
  - !core/extension_metadata-1.0.0
    extension_class: asdf.extension.BuiltinExtension
    software: {name: asdf, version: 2.1.0}
comment: Hello, World!
data: !core/ndarray-1.0.0
  source: 0
  datatype: float32
  byteorder: little
  shape: [10, 10]
  strides: [4, 40]
table: {a: 1, b: 2.0, c: cee}
...
"><pre><span class="pl-c"><span class="pl-c">#</span>ASDF 1.0.0</span>
<span class="pl-c"><span class="pl-c">#</span>ASDF_STANDARD 1.2.0</span>
<span class="pl-s">%YAML 1.1</span>
<span class="pl-s">%TAG ! tag:stsci.edu:asdf/</span>
--- <span class="pl-s">!core/asdf-1.1.0</span>
<span class="pl-ent">asdf_library</span>: <span class="pl-s">!core/software-1.0.0 {author: Space Telescope Science Institute, homepage: 'http://github.com/spacetelescope/asdf',</span>
  <span class="pl-ent">name</span>: <span class="pl-s">asdf, version: 2.1.0}</span>
<span class="pl-ent">history</span>:
  <span class="pl-ent">extensions</span>:
  - <span class="pl-k">!core/extension_metadata-1.0.0</span>
    <span class="pl-ent">extension_class</span>: <span class="pl-s">asdf.extension.BuiltinExtension</span>
    <span class="pl-ent">software</span>: <span class="pl-s">{name: asdf, version: 2.1.0}</span>
<span class="pl-ent">comment</span>: <span class="pl-s">Hello, World!</span>
<span class="pl-ent">data</span>: <span class="pl-s">!core/ndarray-1.0.0</span>
  <span class="pl-ent">source</span>: <span class="pl-c1">0</span>
  <span class="pl-ent">datatype</span>: <span class="pl-s">float32</span>
  <span class="pl-ent">byteorder</span>: <span class="pl-s">little</span>
  <span class="pl-ent">shape</span>: <span class="pl-s">[10, 10]</span>
  <span class="pl-ent">strides</span>: <span class="pl-s">[4, 40]</span>
<span class="pl-ent">table</span>: <span class="pl-s">{a: 1, b: 2.0, c: cee}</span>
...</pre></div>
<p>The file contains some metadata, including version numbers of the ASDF standard and the software used to create the file. This is followed by the data items <code>comment</code>, <code>data</code>, and <code>table</code> that we created. The actual array data is stored in binary after the triple dots. (It is also possible to store arrays in a human-readable form, but this becomes inefficient for large arrays.)</p>
<p>The <code>examples</code> directoy of this Julia packages contains several example ASDF files taken from the ASDF standard.</p>
<h3><a id="user-content-reading-from-file" class="anchor" aria-hidden="true" href="#reading-from-file"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Reading from file</h3>
<p>Reading this file yields the data back:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using ASDF
julia&gt; # Read the file that was written earlier
julia&gt; tree = ASDF.tree(ASDF.open(&quot;example.asdf&quot;))
julia&gt; # Look at all items in the ASDF tree:
julia&gt; keys(tree)
Set([&quot;history&quot;, &quot;data&quot;, &quot;table&quot;, &quot;asdf_library&quot;, &quot;comment&quot;])
julia&gt; # Extract the comment
julia&gt; tree[&quot;comment&quot;]
&quot;Hello, World!&quot;
julia&gt; # Extract the lookup table
julia&gt; tree[&quot;table&quot;]
Dict{Any,Any} with 3 entries:
    &quot;c&quot; =&gt; &quot;cee&quot;
    &quot;b&quot; =&gt; 2.0
    &quot;a&quot; =&gt; 1
julia&gt; # Extract the array
julia&gt; typeof(tree[&quot;data&quot;])
ASDF.NDArray{Float32,2,PyCall.PyArray{Float32,2}}
julia&gt; collect(tree[&quot;data&quot;])
10×10 Array{Float32,2}:
  2.0   3.0   4.0   5.0   6.0   7.0   8.0   9.0  10.0  11.0
  3.0   4.0   5.0   6.0   7.0   8.0   9.0  10.0  11.0  12.0
  4.0   5.0   6.0   7.0   8.0   9.0  10.0  11.0  12.0  13.0
  5.0   6.0   7.0   8.0   9.0  10.0  11.0  12.0  13.0  14.0
  6.0   7.0   8.0   9.0  10.0  11.0  12.0  13.0  14.0  15.0
  7.0   8.0   9.0  10.0  11.0  12.0  13.0  14.0  15.0  16.0
  8.0   9.0  10.0  11.0  12.0  13.0  14.0  15.0  16.0  17.0
  9.0  10.0  11.0  12.0  13.0  14.0  15.0  16.0  17.0  18.0
 10.0  11.0  12.0  13.0  14.0  15.0  16.0  17.0  18.0  19.0
 11.0  12.0  13.0  14.0  15.0  16.0  17.0  18.0  19.0  20.0
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> ASDF
julia<span class="pl-k">&gt;</span> <span class="pl-c"><span class="pl-c">#</span> Read the file that was written earlier</span>
julia<span class="pl-k">&gt;</span> tree <span class="pl-k">=</span> ASDF<span class="pl-k">.</span><span class="pl-c1">tree</span>(ASDF<span class="pl-k">.</span><span class="pl-c1">open</span>(<span class="pl-s"><span class="pl-pds">"</span>example.asdf<span class="pl-pds">"</span></span>))
julia<span class="pl-k">&gt;</span> <span class="pl-c"><span class="pl-c">#</span> Look at all items in the ASDF tree:</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">keys</span>(tree)
<span class="pl-c1">Set</span>([<span class="pl-s"><span class="pl-pds">"</span>history<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>data<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>table<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>asdf_library<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>comment<span class="pl-pds">"</span></span>])
julia<span class="pl-k">&gt;</span> <span class="pl-c"><span class="pl-c">#</span> Extract the comment</span>
julia<span class="pl-k">&gt;</span> tree[<span class="pl-s"><span class="pl-pds">"</span>comment<span class="pl-pds">"</span></span>]
<span class="pl-s"><span class="pl-pds">"</span>Hello, World!<span class="pl-pds">"</span></span>
julia<span class="pl-k">&gt;</span> <span class="pl-c"><span class="pl-c">#</span> Extract the lookup table</span>
julia<span class="pl-k">&gt;</span> tree[<span class="pl-s"><span class="pl-pds">"</span>table<span class="pl-pds">"</span></span>]
Dict{Any,Any} with <span class="pl-c1">3</span> entries<span class="pl-k">:</span>
    <span class="pl-s"><span class="pl-pds">"</span>c<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>cee<span class="pl-pds">"</span></span>
    <span class="pl-s"><span class="pl-pds">"</span>b<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">2.0</span>
    <span class="pl-s"><span class="pl-pds">"</span>a<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c"><span class="pl-c">#</span> Extract the array</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">typeof</span>(tree[<span class="pl-s"><span class="pl-pds">"</span>data<span class="pl-pds">"</span></span>])
ASDF<span class="pl-k">.</span>NDArray{Float32,<span class="pl-c1">2</span>,PyCall<span class="pl-k">.</span>PyArray{Float32,<span class="pl-c1">2</span>}}
julia<span class="pl-k">&gt;</span> <span class="pl-c1">collect</span>(tree[<span class="pl-s"><span class="pl-pds">"</span>data<span class="pl-pds">"</span></span>])
<span class="pl-c1">10</span><span class="pl-k">×</span><span class="pl-c1">10</span> Array{Float32,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
  <span class="pl-c1">2.0</span>   <span class="pl-c1">3.0</span>   <span class="pl-c1">4.0</span>   <span class="pl-c1">5.0</span>   <span class="pl-c1">6.0</span>   <span class="pl-c1">7.0</span>   <span class="pl-c1">8.0</span>   <span class="pl-c1">9.0</span>  <span class="pl-c1">10.0</span>  <span class="pl-c1">11.0</span>
  <span class="pl-c1">3.0</span>   <span class="pl-c1">4.0</span>   <span class="pl-c1">5.0</span>   <span class="pl-c1">6.0</span>   <span class="pl-c1">7.0</span>   <span class="pl-c1">8.0</span>   <span class="pl-c1">9.0</span>  <span class="pl-c1">10.0</span>  <span class="pl-c1">11.0</span>  <span class="pl-c1">12.0</span>
  <span class="pl-c1">4.0</span>   <span class="pl-c1">5.0</span>   <span class="pl-c1">6.0</span>   <span class="pl-c1">7.0</span>   <span class="pl-c1">8.0</span>   <span class="pl-c1">9.0</span>  <span class="pl-c1">10.0</span>  <span class="pl-c1">11.0</span>  <span class="pl-c1">12.0</span>  <span class="pl-c1">13.0</span>
  <span class="pl-c1">5.0</span>   <span class="pl-c1">6.0</span>   <span class="pl-c1">7.0</span>   <span class="pl-c1">8.0</span>   <span class="pl-c1">9.0</span>  <span class="pl-c1">10.0</span>  <span class="pl-c1">11.0</span>  <span class="pl-c1">12.0</span>  <span class="pl-c1">13.0</span>  <span class="pl-c1">14.0</span>
  <span class="pl-c1">6.0</span>   <span class="pl-c1">7.0</span>   <span class="pl-c1">8.0</span>   <span class="pl-c1">9.0</span>  <span class="pl-c1">10.0</span>  <span class="pl-c1">11.0</span>  <span class="pl-c1">12.0</span>  <span class="pl-c1">13.0</span>  <span class="pl-c1">14.0</span>  <span class="pl-c1">15.0</span>
  <span class="pl-c1">7.0</span>   <span class="pl-c1">8.0</span>   <span class="pl-c1">9.0</span>  <span class="pl-c1">10.0</span>  <span class="pl-c1">11.0</span>  <span class="pl-c1">12.0</span>  <span class="pl-c1">13.0</span>  <span class="pl-c1">14.0</span>  <span class="pl-c1">15.0</span>  <span class="pl-c1">16.0</span>
  <span class="pl-c1">8.0</span>   <span class="pl-c1">9.0</span>  <span class="pl-c1">10.0</span>  <span class="pl-c1">11.0</span>  <span class="pl-c1">12.0</span>  <span class="pl-c1">13.0</span>  <span class="pl-c1">14.0</span>  <span class="pl-c1">15.0</span>  <span class="pl-c1">16.0</span>  <span class="pl-c1">17.0</span>
  <span class="pl-c1">9.0</span>  <span class="pl-c1">10.0</span>  <span class="pl-c1">11.0</span>  <span class="pl-c1">12.0</span>  <span class="pl-c1">13.0</span>  <span class="pl-c1">14.0</span>  <span class="pl-c1">15.0</span>  <span class="pl-c1">16.0</span>  <span class="pl-c1">17.0</span>  <span class="pl-c1">18.0</span>
 <span class="pl-c1">10.0</span>  <span class="pl-c1">11.0</span>  <span class="pl-c1">12.0</span>  <span class="pl-c1">13.0</span>  <span class="pl-c1">14.0</span>  <span class="pl-c1">15.0</span>  <span class="pl-c1">16.0</span>  <span class="pl-c1">17.0</span>  <span class="pl-c1">18.0</span>  <span class="pl-c1">19.0</span>
 <span class="pl-c1">11.0</span>  <span class="pl-c1">12.0</span>  <span class="pl-c1">13.0</span>  <span class="pl-c1">14.0</span>  <span class="pl-c1">15.0</span>  <span class="pl-c1">16.0</span>  <span class="pl-c1">17.0</span>  <span class="pl-c1">18.0</span>  <span class="pl-c1">19.0</span>  <span class="pl-c1">20.0</span></pre></div>
<p>The ASDF package ensures that arrays are not copied when they are written to or read from a file. When writing, ASDF creates a numpy array (via the PyCall package) that shares the same data as the Julia array. When reading, ASDF creates an object of type <code>NDArray</code> (which is a subtype of <code>AbstractArray</code>) that efficiently refers to a <em>numpy</em> array (again via the PyCall package). An <code>NDArray</code> can be converted to regular Julia <code>Array</code> by copying it via calling <code>collect</code>.</p>
</article></div>