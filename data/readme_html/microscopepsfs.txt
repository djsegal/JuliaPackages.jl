<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-microscopepsfs" class="anchor" aria-hidden="true" href="#microscopepsfs"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>MicroscopePSFs</h1>
<p dir="auto"><a href="https://JuliaSMLM.github.io/MicroscopePSFs.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://JuliaSMLM.github.io/MicroscopePSFs.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/JuliaSMLM/MicroscopePSFs.jl/actions/workflows/CI.yml?query=branch%3Amain"><img src="https://github.com/JuliaSMLM/MicroscopePSFs.jl/actions/workflows/CI.yml/badge.svg?branch=main" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/JuliaSMLM/MicroscopePSFs.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/64930bc56fd793f1c902cebc5c038aa6f8c0ebfdbd2d5cdf86710713c18dab6d/68747470733a2f2f636f6465636f762e696f2f67682f4a756c6961534d4c4d2f4d6963726f73636f7065505346732e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/JuliaSMLM/MicroscopePSFs.jl/branch/main/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto"><em>MicroscopePSFs</em> provides a Microscope Point Spread Function (PSF) calculator.</p>
<p dir="auto">Current implementaions provide widefield PSFs assuming an incoherent point source.</p>
<h2 dir="auto"><a id="user-content-features" class="anchor" aria-hidden="true" href="#features"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Features</h2>
<ul dir="auto">
<li>2D Gaussian PSF</li>
<li>2D Airy PSF</li>
<li>2D/3D Scalar PSF</li>
<li>Scalar PSF allows arbitrary Pupil Function modification</li>
<li>Phase and Magnitude Aberrations via Zernike expansion</li>
<li>Any PSF can be converted to an interpolated PSF for faster generation at new positions</li>
</ul>
<h2 dir="auto"><a id="user-content-design" class="anchor" aria-hidden="true" href="#design"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Design</h2>
<p dir="auto">The high-level interface is designed to facilitate generation of synthetic data as would be seen by an Array Detector (e.g. Camera).  The PSF is considered a probability distribution that is normalized across 2D sections.  Calculating the PSF at a location follows the convention from  <a href="https://github.com/JuliaStats/Distributions.jl">Distributions.jl</a> where a distribution is created, and the PDF is calculated at a location.</p>
<h3 dir="auto"><a id="user-content-unit-convention" class="anchor" aria-hidden="true" href="#unit-convention"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Unit Convention</h3>
<p dir="auto">Pixel and source locations are in pixels for <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="23e043a7c0e48f68afd2270e03375956">$x,y$</math-renderer> and in physical unit (typically micron) for <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="23e043a7c0e48f68afd2270e03375956">$z$</math-renderer>.  This was chosen as it is the most natural units for simulating and interpreting data because the camera is referenced in pixels and stage movements in the <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="23e043a7c0e48f68afd2270e03375956">$z$</math-renderer> dimention are in micron.</p>
<h2 dir="auto">
<a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Examples</h2>
<h3 dir="auto">
<a id="user-content-airy-psf" class="anchor" aria-hidden="true" href="#airy-psf"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Airy PSF</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using MicroscopePSFs
PSF=MicroscopePSFs

# Create an Airy PSF
na=1.2
位=.6 
pixelsize=.1
p=PSF.Airy2D(na,位,pixelsize)

# calculate the PSF at a point
camera_pixel=(0,0)
source_position=(0,0)
PSF.pdf(p,camera_pixel,source_position)

# calculate the PSF in a region
sz=16
camera_pixels=[(x,y) for y=1:sz, x=1:sz]
source_position=(sz/2,sz/2)
im=PSF.pdf(p,camera_pixels,source_position)"><pre><span class="pl-k">using</span> MicroscopePSFs
PSF<span class="pl-k">=</span>MicroscopePSFs

<span class="pl-c"><span class="pl-c">#</span> Create an Airy PSF</span>
na<span class="pl-k">=</span><span class="pl-c1">1.2</span>
位<span class="pl-k">=</span>.<span class="pl-c1">6</span> 
pixelsize<span class="pl-k">=</span>.<span class="pl-c1">1</span>
p<span class="pl-k">=</span>PSF<span class="pl-k">.</span><span class="pl-c1">Airy2D</span>(na,位,pixelsize)

<span class="pl-c"><span class="pl-c">#</span> calculate the PSF at a point</span>
camera_pixel<span class="pl-k">=</span>(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>)
source_position<span class="pl-k">=</span>(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>)
PSF<span class="pl-k">.</span><span class="pl-c1">pdf</span>(p,camera_pixel,source_position)

<span class="pl-c"><span class="pl-c">#</span> calculate the PSF in a region</span>
sz<span class="pl-k">=</span><span class="pl-c1">16</span>
camera_pixels<span class="pl-k">=</span>[(x,y) <span class="pl-k">for</span> y<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">:</span>sz, x<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">:</span>sz]
source_position<span class="pl-k">=</span>(sz<span class="pl-k">/</span><span class="pl-c1">2</span>,sz<span class="pl-k">/</span><span class="pl-c1">2</span>)
im<span class="pl-k">=</span>PSF<span class="pl-k">.</span><span class="pl-c1">pdf</span>(p,camera_pixels,source_position)</pre></div>
<h3 dir="auto">
<a id="user-content-3d-scalar-psf-with-astigmatism" class="anchor" aria-hidden="true" href="#3d-scalar-psf-with-astigmatism"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>3D Scalar PSF with Astigmatism</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using MicroscopePSFs
PSF=MicroscopePSFs

# Zernike Magnitude and Phase Coefficients 
z_mag=[1.0]
z_phase=zeros(10)
z_phase[6]=1 # astigmatism
z=PSF.ZernikeCoefficients(z_mag,z_phase)

# Create a scalar PSF
na=1.2
n=1.3
位=.6 
pixelsize=.1

p=PSF.Scalar3D(na,位,n,pixelsize;z=z)

# calculate the PSF in a region
sz=32
camera_pixels=[(x,y,z) for y=-sz/2:(sz/2-1), x=-sz/2:(sz/2-1), z=-1:.5:1] # Note z in microns.  
source_position=(0.0,0.0,0)
im=PSF.pdf(p,camera_pixels,source_position)"><pre><span class="pl-k">using</span> MicroscopePSFs
PSF<span class="pl-k">=</span>MicroscopePSFs

<span class="pl-c"><span class="pl-c">#</span> Zernike Magnitude and Phase Coefficients </span>
z_mag<span class="pl-k">=</span>[<span class="pl-c1">1.0</span>]
z_phase<span class="pl-k">=</span><span class="pl-c1">zeros</span>(<span class="pl-c1">10</span>)
z_phase[<span class="pl-c1">6</span>]<span class="pl-k">=</span><span class="pl-c1">1</span> <span class="pl-c"><span class="pl-c">#</span> astigmatism</span>
z<span class="pl-k">=</span>PSF<span class="pl-k">.</span><span class="pl-c1">ZernikeCoefficients</span>(z_mag,z_phase)

<span class="pl-c"><span class="pl-c">#</span> Create a scalar PSF</span>
na<span class="pl-k">=</span><span class="pl-c1">1.2</span>
n<span class="pl-k">=</span><span class="pl-c1">1.3</span>
位<span class="pl-k">=</span>.<span class="pl-c1">6</span> 
pixelsize<span class="pl-k">=</span>.<span class="pl-c1">1</span>

p<span class="pl-k">=</span>PSF<span class="pl-k">.</span><span class="pl-c1">Scalar3D</span>(na,位,n,pixelsize;z<span class="pl-k">=</span>z)

<span class="pl-c"><span class="pl-c">#</span> calculate the PSF in a region</span>
sz<span class="pl-k">=</span><span class="pl-c1">32</span>
camera_pixels<span class="pl-k">=</span>[(x,y,z) <span class="pl-k">for</span> y<span class="pl-k">=</span><span class="pl-k">-</span>sz<span class="pl-k">/</span><span class="pl-c1">2</span><span class="pl-k">:</span>(sz<span class="pl-k">/</span><span class="pl-c1">2</span><span class="pl-k">-</span><span class="pl-c1">1</span>), x<span class="pl-k">=</span><span class="pl-k">-</span>sz<span class="pl-k">/</span><span class="pl-c1">2</span><span class="pl-k">:</span>(sz<span class="pl-k">/</span><span class="pl-c1">2</span><span class="pl-k">-</span><span class="pl-c1">1</span>), z<span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">:</span>.<span class="pl-c1">5</span><span class="pl-k">:</span><span class="pl-c1">1</span>] <span class="pl-c"><span class="pl-c">#</span> Note z in microns.  </span>
source_position<span class="pl-k">=</span>(<span class="pl-c1">0.0</span>,<span class="pl-c1">0.0</span>,<span class="pl-c1">0</span>)
im<span class="pl-k">=</span>PSF<span class="pl-k">.</span><span class="pl-c1">pdf</span>(p,camera_pixels,source_position)</pre></div>
<h2 dir="auto">
<a id="user-content-future-development" class="anchor" aria-hidden="true" href="#future-development"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Future Development</h2>
<p dir="auto"><em>MicroscopePSFs</em> should be considered under development and the interface may change as we build the JuliaSMLM ecosystem.  Comments and Feature requests are welcome via an issue.</p>
<h3 dir="auto">
<a id="user-content-future-features" class="anchor" aria-hidden="true" href="#future-features"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Future Features</h3>
<ul dir="auto">
<li>GPU calculations</li>
<li>Vector PSFs</li>
<li>Super-critical angle PSFs</li>
<li>Integration across finite pixels sizes using sub-sampling.</li>
</ul>
</article></div>