<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-reel" class="anchor" aria-hidden="true" href="#reel"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Reel</h1>
<p dir="auto"><a href="https://travis-ci.org/shashi/Reel.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/bbc9e81190f7662b6bcc1166acf5747031503c842bae0d42ad709e0c7654a367/68747470733a2f2f7472617669732d63692e6f72672f7368617368692f5265656c2e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/shashi/Reel.jl.svg?branch=master" style="max-width: 100%;"></a></p>
<p dir="auto"><em>Film computations</em></p>
<p align="center" dir="auto">
    <a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/2fb02ae84641a8c265e743f51096794b442b7159344197995906efac2ef6bf91/687474703a2f2f7368617368692e6769746875622e696f2f2e6173736574732f5265656c2f636f6e7761792e676966"><img src="https://camo.githubusercontent.com/2fb02ae84641a8c265e743f51096794b442b7159344197995906efac2ef6bf91/687474703a2f2f7368617368692e6769746875622e696f2f2e6173736574732f5265656c2f636f6e7761792e676966" data-animated-image="" data-canonical-src="http://shashi.github.io/.assets/Reel/conway.gif" style="max-width: 100%;"></a>
</p>
<h2 dir="auto"><a id="user-content-quickstart" class="anchor" aria-hidden="true" href="#quickstart"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Quickstart</h2>
<h3 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Pkg.add(&quot;Reel&quot;)"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>Reel<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">This package now relies on <a href="https://github.com/JuliaIO/FFMPEG.jl">FFMPEG.jl</a>. For versions lower than 1.2 you will need <code>ffmpeg</code> and <code>imagemagick</code> installed to use Reel. This package supersedes <a href="https://github.com/arnim/ComposeVideo.jl">ComposeVideo.jl</a></p>
<h3 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h3>
<p dir="auto">Reel exports the all-important function <code>roll</code> which you can use to roll the camera on various arguments:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Reel
using Plots

function render(t, dt)
    # t is the time into the sequence
    # dt is the time to advance for the next frame

    # any expression that results in an object which can be
    # rendered as png or jpg
    plot([x -&gt; sin(x+t*π), x -&gt; cos(x+t*π)], 0, 6)
end

film = roll(render, fps=30, duration=2)

write(&quot;output.gif&quot;, film) # Write to a gif file

# Or
write(&quot;file.webm&quot;, film) # Write to a webm video

# Or
write(&quot;file.mp4&quot;, film)  # An mp4 formatted video"><pre><span class="pl-k">using</span> Reel
<span class="pl-k">using</span> Plots

<span class="pl-k">function</span> <span class="pl-en">render</span>(t, dt)
    <span class="pl-c"><span class="pl-c">#</span> t is the time into the sequence</span>
    <span class="pl-c"><span class="pl-c">#</span> dt is the time to advance for the next frame</span>

    <span class="pl-c"><span class="pl-c">#</span> any expression that results in an object which can be</span>
    <span class="pl-c"><span class="pl-c">#</span> rendered as png or jpg</span>
    <span class="pl-c1">plot</span>([x <span class="pl-k">-&gt;</span> <span class="pl-c1">sin</span>(x<span class="pl-k">+</span>t<span class="pl-k">*</span>π), x <span class="pl-k">-&gt;</span> <span class="pl-c1">cos</span>(x<span class="pl-k">+</span>t<span class="pl-k">*</span>π)], <span class="pl-c1">0</span>, <span class="pl-c1">6</span>)
<span class="pl-k">end</span>

film <span class="pl-k">=</span> <span class="pl-c1">roll</span>(render, fps<span class="pl-k">=</span><span class="pl-c1">30</span>, duration<span class="pl-k">=</span><span class="pl-c1">2</span>)

<span class="pl-c1">write</span>(<span class="pl-s"><span class="pl-pds">"</span>output.gif<span class="pl-pds">"</span></span>, film) <span class="pl-c"><span class="pl-c">#</span> Write to a gif file</span>

<span class="pl-c"><span class="pl-c">#</span> Or</span>
<span class="pl-c1">write</span>(<span class="pl-s"><span class="pl-pds">"</span>file.webm<span class="pl-pds">"</span></span>, film) <span class="pl-c"><span class="pl-c">#</span> Write to a webm video</span>

<span class="pl-c"><span class="pl-c">#</span> Or</span>
<span class="pl-c1">write</span>(<span class="pl-s"><span class="pl-pds">"</span>file.mp4<span class="pl-pds">"</span></span>, film)  <span class="pl-c"><span class="pl-c">#</span> An mp4 formatted video</span></pre></div>
<p align="center" dir="auto">
    <a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/5db16fc69033a2d146b043b55f5f6cc656e1b7b22fd3058247b09713b9eb38b9/687474703a2f2f7368617368692e6769746875622e696f2f2e6173736574732f5265656c2f73696e636f732e676966"><img src="https://camo.githubusercontent.com/5db16fc69033a2d146b043b55f5f6cc656e1b7b22fd3058247b09713b9eb38b9/687474703a2f2f7368617368692e6769746875622e696f2f2e6173736574732f5265656c2f73696e636f732e676966" data-animated-image="" data-canonical-src="http://shashi.github.io/.assets/Reel/sincos.gif" style="max-width: 100%;"></a>
</p>
<p dir="auto">The same thing can be concisely written with Julia's do syntax:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="film = roll(fps=30, duration=2) do t, dt
    plot([x -&gt; sin(x+t*π), x -&gt; cos(x+t*π)], 0, 6)
end

write(&quot;output.gif&quot;, film)"><pre>film <span class="pl-k">=</span> <span class="pl-c1">roll</span>(fps<span class="pl-k">=</span><span class="pl-c1">30</span>, duration<span class="pl-k">=</span><span class="pl-c1">2</span>) <span class="pl-k">do</span> t, dt
    <span class="pl-c1">plot</span>([x <span class="pl-k">-&gt;</span> <span class="pl-c1">sin</span>(x<span class="pl-k">+</span>t<span class="pl-k">*</span>π), x <span class="pl-k">-&gt;</span> <span class="pl-c1">cos</span>(x<span class="pl-k">+</span>t<span class="pl-k">*</span>π)], <span class="pl-c1">0</span>, <span class="pl-c1">6</span>)
<span class="pl-k">end</span>

<span class="pl-c1">write</span>(<span class="pl-s"><span class="pl-pds">"</span>output.gif<span class="pl-pds">"</span></span>, film)</pre></div>
<p dir="auto">Note that the fps you specify to <code>roll</code> will be enforced no matter how long the computation actually takes: you set the speed at which you want to watch it.</p>
<p dir="auto">Reel can also render an abstract array of objects:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Compose
import Cairo, Fontconfig

Compose.set_default_graphic_size(3inch, 3inch) # Square

# draw a regular n-gon
ngon(n) = compose(context(units=UnitBox(-1, -1, 2, 2)), fill(&quot;lightblue&quot;),
                polygon([(cos(x), sin(x)) for x in π/2:2π/n:3.5π]))

roll(map(ngon, vcat(3:10, 9:-1:3)), fps=5)"><pre><span class="pl-k">using</span> Compose
<span class="pl-k">import</span> Cairo, Fontconfig

Compose<span class="pl-k">.</span><span class="pl-c1">set_default_graphic_size</span>(<span class="pl-c1">3</span>inch, <span class="pl-c1">3</span>inch) <span class="pl-c"><span class="pl-c">#</span> Square</span>

<span class="pl-c"><span class="pl-c">#</span> draw a regular n-gon</span>
<span class="pl-en">ngon</span>(n) <span class="pl-k">=</span> <span class="pl-c1">compose</span>(<span class="pl-c1">context</span>(units<span class="pl-k">=</span><span class="pl-c1">UnitBox</span>(<span class="pl-k">-</span><span class="pl-c1">1</span>, <span class="pl-k">-</span><span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">2</span>)), <span class="pl-c1">fill</span>(<span class="pl-s"><span class="pl-pds">"</span>lightblue<span class="pl-pds">"</span></span>),
                <span class="pl-c1">polygon</span>([(<span class="pl-c1">cos</span>(x), <span class="pl-c1">sin</span>(x)) <span class="pl-k">for</span> x <span class="pl-k">in</span> π<span class="pl-k">/</span><span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">2</span>π<span class="pl-k">/</span>n<span class="pl-k">:</span><span class="pl-c1">3.5</span>π]))

<span class="pl-c1">roll</span>(<span class="pl-c1">map</span>(ngon, <span class="pl-c1">vcat</span>(<span class="pl-c1">3</span><span class="pl-k">:</span><span class="pl-c1">10</span>, <span class="pl-c1">9</span><span class="pl-k">:</span><span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">3</span>)), fps<span class="pl-k">=</span><span class="pl-c1">5</span>)</pre></div>
<p align="center" dir="auto">
    <a target="_blank" rel="noopener noreferrer" href="ngons.gif"><img src="ngons.gif" data-animated-image="" style="max-width: 100%;"></a>
</p>
<p dir="auto">Reel exports <code>Frames</code>, a type for a collection of frames.</p>
<p dir="auto"><code>Frames</code> constructor takes a MIME type of the frames, and the fps at which the animation should be rendered. e.g.</p>
<p dir="auto">You can push a new frames to a <code>Frames</code> object using <code>push!</code>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# A Glider gun from Conway's game of Life

using Reel
frames = Frames(MIME(&quot;image/png&quot;), fps=2)

g = glider_gun # initial board state
for i=1:31
    push!(frames, draw(g))
    g = decidefate(g)
end

frames
"><pre><span class="pl-c"><span class="pl-c">#</span> A Glider gun from Conway's game of Life</span>

<span class="pl-k">using</span> Reel
frames <span class="pl-k">=</span> <span class="pl-c1">Frames</span>(<span class="pl-c1">MIME</span>(<span class="pl-s"><span class="pl-pds">"</span>image/png<span class="pl-pds">"</span></span>), fps<span class="pl-k">=</span><span class="pl-c1">2</span>)

g <span class="pl-k">=</span> glider_gun <span class="pl-c"><span class="pl-c">#</span> initial board state</span>
<span class="pl-k">for</span> i<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">31</span>
    <span class="pl-c1">push!</span>(frames, <span class="pl-c1">draw</span>(g))
    g <span class="pl-k">=</span> <span class="pl-c1">decidefate</span>(g)
<span class="pl-k">end</span>

frames
</pre></div>
<p align="center" dir="auto">
    <a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/2fb02ae84641a8c265e743f51096794b442b7159344197995906efac2ef6bf91/687474703a2f2f7368617368692e6769746875622e696f2f2e6173736574732f5265656c2f636f6e7761792e676966"><img src="https://camo.githubusercontent.com/2fb02ae84641a8c265e743f51096794b442b7159344197995906efac2ef6bf91/687474703a2f2f7368617368692e6769746875622e696f2f2e6173736574732f5265656c2f636f6e7761792e676966" data-animated-image="" data-canonical-src="http://shashi.github.io/.assets/Reel/conway.gif" style="max-width: 100%;"></a>
</p>
<p dir="auto">You can render a <code>Frames</code> object as usual:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="write(&quot;output.webm&quot;, frames)"><pre><span class="pl-c1">write</span>(<span class="pl-s"><span class="pl-pds">"</span>output.webm<span class="pl-pds">"</span></span>, frames)</pre></div>
<h2 dir="auto"><a id="user-content-in-ijulia" class="anchor" aria-hidden="true" href="#in-ijulia"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>In IJulia</h2>
<p dir="auto">A call to <code>roll</code> returns a <code>Frames</code> object. A method <code>writemime(::IO, ::MIME{symbol("text/html"),::Frames)</code> orchestrates the rendering of a <code>Frames</code> object in IJulia. Any cell which results in a <code>Frames</code> results in the animation being rendered. By default, a webm video is generated. You can change this behavior:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Reel.set_output_type(&quot;gif&quot;) # or &quot;mp4&quot;"><pre>Reel<span class="pl-k">.</span><span class="pl-c1">set_output_type</span>(<span class="pl-s"><span class="pl-pds">"</span>gif<span class="pl-pds">"</span></span>) <span class="pl-c"><span class="pl-c">#</span> or "mp4"</span></pre></div>
<h2 dir="auto"><a id="user-content-they-see-me-rollin-they-hatin" class="anchor" aria-hidden="true" href="#they-see-me-rollin-they-hatin"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>They see me rollin', they hatin'</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# particles in a box.

using Color, Compose

box(x) = let i = floor(x)
    i%2==0 ? x-i : 1+i-x
end

colors = distinguishable_colors(10, lchoices=[82.])

dots(points) = [(context(p[1], p[2], .03, .03), fill(colors[i%10+1]), circle())
    for (i, p) in enumerate(points)]

velocities = [(rand(), rand()) for i in 1:40]

roll(fps=30, duration=10.0) do t, dt

    compose(context(),
            dots([map(v -&gt; box(v*t + 0.5), (vx, vy)) for (vx, vy) in velocities])...)
end
"><pre><span class="pl-c"><span class="pl-c">#</span> particles in a box.</span>

<span class="pl-k">using</span> Color, Compose

<span class="pl-en">box</span>(x) <span class="pl-k">=</span> <span class="pl-k">let</span> i <span class="pl-k">=</span> <span class="pl-c1">floor</span>(x)
    i<span class="pl-k">%</span><span class="pl-c1">2</span><span class="pl-k">==</span><span class="pl-c1">0</span> <span class="pl-k">?</span> x<span class="pl-k">-</span>i <span class="pl-k">:</span> <span class="pl-c1">1</span><span class="pl-k">+</span>i<span class="pl-k">-</span>x
<span class="pl-k">end</span>

colors <span class="pl-k">=</span> <span class="pl-c1">distinguishable_colors</span>(<span class="pl-c1">10</span>, lchoices<span class="pl-k">=</span>[<span class="pl-c1">82.</span>])

<span class="pl-en">dots</span>(points) <span class="pl-k">=</span> [(<span class="pl-c1">context</span>(p[<span class="pl-c1">1</span>], p[<span class="pl-c1">2</span>], .<span class="pl-c1">03</span>, .<span class="pl-c1">03</span>), <span class="pl-c1">fill</span>(colors[i<span class="pl-k">%</span><span class="pl-c1">10</span><span class="pl-k">+</span><span class="pl-c1">1</span>]), <span class="pl-c1">circle</span>())
    <span class="pl-k">for</span> (i, p) <span class="pl-k">in</span> <span class="pl-c1">enumerate</span>(points)]

velocities <span class="pl-k">=</span> [(<span class="pl-c1">rand</span>(), <span class="pl-c1">rand</span>()) <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">40</span>]

<span class="pl-c1">roll</span>(fps<span class="pl-k">=</span><span class="pl-c1">30</span>, duration<span class="pl-k">=</span><span class="pl-c1">10.0</span>) <span class="pl-k">do</span> t, dt

    <span class="pl-c1">compose</span>(<span class="pl-c1">context</span>(),
            <span class="pl-c1">dots</span>([<span class="pl-c1">map</span>(v <span class="pl-k">-&gt;</span> <span class="pl-c1">box</span>(v<span class="pl-k">*</span>t <span class="pl-k">+</span> <span class="pl-c1">0.5</span>), (vx, vy)) <span class="pl-k">for</span> (vx, vy) <span class="pl-k">in</span> velocities])<span class="pl-k">...</span>)
<span class="pl-k">end</span>
</pre></div>
<p align="center" dir="auto">
    <a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/1afdd140858bd6de6d4b89a830f5722da94913c9e4e430e7b3df40f5d1f592ab/687474703a2f2f7368617368692e6769746875622e696f2f2e6173736574732f5265656c2f62616c6c732e676966"><img src="https://camo.githubusercontent.com/1afdd140858bd6de6d4b89a830f5722da94913c9e4e430e7b3df40f5d1f592ab/687474703a2f2f7368617368692e6769746875622e696f2f2e6173736574732f5265656c2f62616c6c732e676966" data-animated-image="" data-canonical-src="http://shashi.github.io/.assets/Reel/balls.gif" style="max-width: 100%;"></a>
</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# Solution of Helmholtz equation with Dirichlet BC using ApproxFun

using ApproxFun

B=dirichlet(d)
Δ=lap(d)

plots = [ApproxFun.contour(pdesolve([B,Δ+k*I],ones(4),150))
            for k=vcat([1:1.0:100], [99:-1.0:1])]

roll(plots, fps=24)

# Warning: this gif is 8 mb!"><pre><span class="pl-c"><span class="pl-c">#</span> Solution of Helmholtz equation with Dirichlet BC using ApproxFun</span>

<span class="pl-k">using</span> ApproxFun

B<span class="pl-k">=</span><span class="pl-c1">dirichlet</span>(d)
Δ<span class="pl-k">=</span><span class="pl-c1">lap</span>(d)

plots <span class="pl-k">=</span> [ApproxFun<span class="pl-k">.</span><span class="pl-c1">contour</span>(<span class="pl-c1">pdesolve</span>([B,Δ<span class="pl-k">+</span>k<span class="pl-k">*</span>I],<span class="pl-c1">ones</span>(<span class="pl-c1">4</span>),<span class="pl-c1">150</span>))
            <span class="pl-k">for</span> k<span class="pl-k">=</span><span class="pl-c1">vcat</span>([<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">1.0</span><span class="pl-k">:</span><span class="pl-c1">100</span>], [<span class="pl-c1">99</span><span class="pl-k">:</span><span class="pl-k">-</span><span class="pl-c1">1.0</span><span class="pl-k">:</span><span class="pl-c1">1</span>])]

<span class="pl-c1">roll</span>(plots, fps<span class="pl-k">=</span><span class="pl-c1">24</span>)

<span class="pl-c"><span class="pl-c">#</span> Warning: this gif is 8 mb!</span></pre></div>
<p align="center" dir="auto">
    <a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/441ff8e8f7fc4f2845ebdd464d70b0ca6c916c4525384c7f31471e2c98ff12d3/687474703a2f2f7368617368692e6769746875622e696f2f2e6173736574732f5265656c2f68656c6d686f6c747a2e676966"><img src="https://camo.githubusercontent.com/441ff8e8f7fc4f2845ebdd464d70b0ca6c916c4525384c7f31471e2c98ff12d3/687474703a2f2f7368617368692e6769746875622e696f2f2e6173736574732f5265656c2f68656c6d686f6c747a2e676966" data-animated-image="" data-canonical-src="http://shashi.github.io/.assets/Reel/helmholtz.gif" style="max-width: 100%;"></a>
</p>
<hr>
<p align="center" dir="auto">
    <em>Fin.</em>
</p>
</article></div>