<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-advumpsjl" class="anchor" aria-hidden="true" href="#advumpsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>ADVUMPS.jl</h1>
<p dir="auto"><a href="https://travis-ci.com/XingyuZhang2018/ADVUMPS.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/c6283e99911910dbbc71e3e1647f480a9da1e8acd4a86aa444925acb19398c56/68747470733a2f2f7472617669732d63692e636f6d2f58696e6779755a68616e67323031382f414456554d50532e6a6c2e7376673f6272616e63683d646576" alt="Build Status" data-canonical-src="https://travis-ci.com/XingyuZhang2018/ADVUMPS.jl.svg?branch=dev" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/XingyuZhang2018/ADVUMPS.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/89847418b34ad48d3a425fb0ffcfedfd729c5492fb4d5f42cf91cc72c44600b4/68747470733a2f2f636f6465636f762e696f2f67682f58696e6779755a68616e67323031382f414456554d50532e6a6c2f6272616e63682f6465762f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/XingyuZhang2018/ADVUMPS.jl/branch/dev/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">This is a julia package to realise Automatic Differential(AD) for Variational Uniform Matrix product states(VUMPS).</p>
<p dir="auto">In this package we implemented the algorithms described in <a href="https://arxiv.org/abs/1903.09650" rel="nofollow">Differentiable Programming Tensor Networks</a>, but in another contraction method namely VUMPS.
demonstrating two applications:</p>
<ul dir="auto">
<li>Gradient based optimization of iPEPS</li>
<li>Direct calculation of energy densities in iPEPS via derivatives of the <em>free energy</em></li>
</ul>
<p dir="auto">The key point to implement AD for VUMPS is to get adjoint of eigsolve, which have been solved in <a href="https://journals.aps.org/prb/abstract/10.1103/PhysRevB.101.245139" rel="nofollow">Automatic differentiation of dominant eigensolver and its applications in quantum physics</a>.</p>
<p dir="auto">This package used <a href="https://github.com/under-Peter/TensorNetworkAD.jl">TensorNetworkAD.jl</a> for reference.</p>
<h2 dir="auto"><a id="user-content-install" class="anchor" aria-hidden="true" href="#install"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>install</h2>
<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="&gt; git clone https://github.com/XingyuZhang2018/ADVUMPS.jl"><pre><span class="pl-k">&gt;</span> git clone https://github.com/XingyuZhang2018/ADVUMPS.jl</pre></div>
<p dir="auto">move to the file and run <code>julia REPL</code>, press <code>]</code> into <code>Pkg REPL</code></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="(@v1.7) pkg&gt; activate .
Activating environment at `..\ADVUMPS\Project.toml`

(ADVUMPS) pkg&gt; instantiate"><pre>(<span class="pl-c1">@v1</span>.<span class="pl-c1">7</span>) pkg<span class="pl-k">&gt;</span> activate .
Activating environment at <span class="pl-s"><span class="pl-pds">`</span>..<span class="pl-cce">\A</span>DVUMPS<span class="pl-cce">\P</span>roject.toml<span class="pl-pds">`</span></span>

(ADVUMPS) pkg<span class="pl-k">&gt;</span> instantiate</pre></div>
<p dir="auto">To get back to the Julia REPL, press <code>backspace</code> or <code>ctrl+C</code>. Then Precompile <code>ADVUMPS</code></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using ADVUMPS
[ Info: Precompiling ADVUMPS [1846a12a-bf3c-41d7-8528-153c1dad55cd]"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> ADVUMPS
[ Info<span class="pl-k">:</span> Precompiling ADVUMPS [<span class="pl-c1">1846</span>a12a<span class="pl-k">-</span>bf3c<span class="pl-k">-</span><span class="pl-c1">41</span>d7<span class="pl-k">-</span><span class="pl-c1">8528</span><span class="pl-k">-</span><span class="pl-c1">153</span>c1dad55cd]</pre></div>
<h2 dir="auto"><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example</h2>
<p dir="auto">If you want to learn deeply into this package, I highly recommend to run each single test in <code>/test/runtests</code> in sequence.</p>
<h3 dir="auto"><a id="user-content-free-energy-of-the-2d-classical-ising-model" class="anchor" aria-hidden="true" href="#free-energy-of-the-2d-classical-ising-model"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Free Energy of the 2D Classical Ising Model</h3>
<p dir="auto">We start by constructing the tensor for the tensor network representation of the 2d classical Ising Model.
This tensor can be constructed using the <code>model_tensor</code>-function that takes a <code>model</code>-parameter - in our case <code>Ising()</code> - and an inverse temperature <code>β</code> (e.g. at <code>β=0.5</code>).</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; a = model_tensor(Ising(), 0.5)
2×2×2×2 Array{Float64,4}:
[:, :, 1, 1] =
 2.53434  0.5    
 0.5      0.18394

[:, :, 2, 1] =
 0.5      0.18394
 0.18394  0.5    

[:, :, 1, 2] =
 0.5      0.18394
 0.18394  0.5    

[:, :, 2, 2] =
 0.18394  0.5    
 0.5      2.53434"><pre>julia<span class="pl-k">&gt;</span> a <span class="pl-k">=</span> <span class="pl-c1">model_tensor</span>(<span class="pl-c1">Ising</span>(), <span class="pl-c1">0.5</span>)
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">2</span> Array{Float64,<span class="pl-c1">4</span>}<span class="pl-k">:</span>
[:, :, <span class="pl-c1">1</span>, <span class="pl-c1">1</span>] <span class="pl-k">=</span>
 <span class="pl-c1">2.53434</span>  <span class="pl-c1">0.5</span>    
 <span class="pl-c1">0.5</span>      <span class="pl-c1">0.18394</span>

[:, :, <span class="pl-c1">2</span>, <span class="pl-c1">1</span>] <span class="pl-k">=</span>
 <span class="pl-c1">0.5</span>      <span class="pl-c1">0.18394</span>
 <span class="pl-c1">0.18394</span>  <span class="pl-c1">0.5</span>    

[:, :, <span class="pl-c1">1</span>, <span class="pl-c1">2</span>] <span class="pl-k">=</span>
 <span class="pl-c1">0.5</span>      <span class="pl-c1">0.18394</span>
 <span class="pl-c1">0.18394</span>  <span class="pl-c1">0.5</span>    

[:, :, <span class="pl-c1">2</span>, <span class="pl-c1">2</span>] <span class="pl-k">=</span>
 <span class="pl-c1">0.18394</span>  <span class="pl-c1">0.5</span>    
 <span class="pl-c1">0.5</span>      <span class="pl-c1">2.53434</span></pre></div>
<p dir="auto">Then get VUMPS environment using the <code>vumps_env</code>-function that takes a <code>model</code>-parameter (in our case <code>Ising()</code>), an inverse temperature <code>β</code> (e.g. at <code>β=0.5</code>) and environment tenosr non-physical index dimension <code>D</code> (e.g. <code>D=2</code>)</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; env = vumps_env(Ising(),0.5,2; verbose=true);
random initial vumps environment-&gt; vumps done@step: 16, error=3.344781147740731e-11

julia&gt; typeof(env)
SquareVUMPSRuntime{Float64, Array{Float64, 4}, Array{Float64, 3}, Matrix{Float64}} (alias for VUMPSRuntime{SquareLattice, Float64, 4, Array{Float64, 4}, Array{Float64, 3}, Array{Float64, 2}})"><pre>julia<span class="pl-k">&gt;</span> env <span class="pl-k">=</span> <span class="pl-c1">vumps_env</span>(<span class="pl-c1">Ising</span>(),<span class="pl-c1">0.5</span>,<span class="pl-c1">2</span>; verbose<span class="pl-k">=</span><span class="pl-c1">true</span>);
random initial vumps environment<span class="pl-k">-&gt;</span> vumps done<span class="pl-c1">@step</span><span class="pl-k">:</span> <span class="pl-c1">16</span>, error<span class="pl-k">=</span><span class="pl-c1">3.344781147740731e-11</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">typeof</span>(env)
SquareVUMPSRuntime{Float64, Array{Float64, <span class="pl-c1">4</span>}, Array{Float64, <span class="pl-c1">3</span>}, Matrix{Float64}} (alias <span class="pl-k">for</span> VUMPSRuntime{SquareLattice, Float64, <span class="pl-c1">4</span>, Array{Float64, <span class="pl-c1">4</span>}, Array{Float64, <span class="pl-c1">3</span>}, Array{Float64, <span class="pl-c1">2</span>}})</pre></div>
<p dir="auto">Using the <code>Z</code> function, we can calculate the partition function of the model per site:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; Z(env)
2.7893001925286596"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">Z</span>(env)
<span class="pl-c1">2.7893001925286596</span></pre></div>
<p dir="auto">Given the partition function, we get the free energy as the first derivative with respect to <code>β</code> times <code>-1</code>.
With Zygote, this is straightforward to calculate:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="
julia&gt; e = β -&gt; -log(Z(vumps_env(Ising(),β,2;verbose=true)))
#1 (generic function with 1 method)

julia&gt; using Zygote

julia&gt; Zygote.gradient(e,0.5)[1]
random initial vumps environment-&gt; vumps done@step: 14, error=7.015494617183392e-11
-1.7456736441068634"><pre>julia<span class="pl-k">&gt;</span> e <span class="pl-k">=</span> β <span class="pl-k">-&gt;</span> <span class="pl-k">-</span><span class="pl-c1">log</span>(<span class="pl-c1">Z</span>(<span class="pl-c1">vumps_env</span>(<span class="pl-c1">Ising</span>(),β,<span class="pl-c1">2</span>;verbose<span class="pl-k">=</span><span class="pl-c1">true</span>)))
<span class="pl-c"><span class="pl-c">#</span>1 (generic function with 1 method)</span>

julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Zygote

julia<span class="pl-k">&gt;</span> Zygote<span class="pl-k">.</span><span class="pl-c1">gradient</span>(e,<span class="pl-c1">0.5</span>)[<span class="pl-c1">1</span>]
random initial vumps environment<span class="pl-k">-&gt;</span> vumps done<span class="pl-c1">@step</span><span class="pl-k">:</span> <span class="pl-c1">14</span>, error<span class="pl-k">=</span><span class="pl-c1">7.015494617183392e-11</span>
<span class="pl-k">-</span><span class="pl-c1">1.7456736441068634</span></pre></div>
<p dir="auto">more result is ploted by <code>/plot/2Dising.jl</code></p>
<div align="center" dir="auto"><a target="_blank" rel="noopener noreferrer" href="./plot/2Disingmag.svg"><img src="./plot/2Disingmag.svg" width="300px" alt="2Disingmag" style="max-width: 100%;"></a><a target="_blank" rel="noopener noreferrer" href="./plot/2Disingdmag.svg"><img src="./plot/2Disingdmag.svg" width="300px" alt="2Disingmag" style="max-width: 100%;"></a><a target="_blank" rel="noopener noreferrer" href="./plot/2Disingene.svg"><img src="./plot/2Disingene.svg" width="300px" alt="2Disingmag" style="max-width: 100%;"></a></div>
<h3 dir="auto"><a id="user-content-finding-the-ground-state-of-infinite-2d-heisenberg-model" class="anchor" aria-hidden="true" href="#finding-the-ground-state-of-infinite-2d-heisenberg-model"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Finding the Ground State of infinite 2D Heisenberg model</h3>
<p dir="auto">The other algorithm variationally minimizes the energy of a Heisenberg model on a two-dimensional infinite lattice using a form of gradient descent.</p>
<p dir="auto">First, we need the hamiltonian as a tensor network operator</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; h = hamiltonian(Heisenberg())
2×2×2×2 Array{Float64,4}:
[:, :, 1, 1] =
 -0.5  0.0
  0.0  0.5

[:, :, 2, 1] =
  0.0  0.0
 -1.0  0.0

[:, :, 1, 2] =
 0.0  -1.0
 0.0   0.0

[:, :, 2, 2] =
 0.5   0.0
 0.0  -0.5"><pre class="notranslate"><code>julia&gt; h = hamiltonian(Heisenberg())
2×2×2×2 Array{Float64,4}:
[:, :, 1, 1] =
 -0.5  0.0
  0.0  0.5

[:, :, 2, 1] =
  0.0  0.0
 -1.0  0.0

[:, :, 1, 2] =
 0.0  -1.0
 0.0   0.0

[:, :, 2, 2] =
 0.5   0.0
 0.0  -0.5
</code></pre></div>
<p dir="auto">where we get the <code>Heisenberg</code>-hamiltonian with default parameters <code>Jx = Jy = Jz = 1.0</code>.
Next we initialize an ipeps-tensor and calculate the energy of that tensor and the hamiltonian:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; ipeps, key = init_ipeps(Heisenberg(); D=2, χ=4, tol=1e-10, maxiter=20);
random initial iPEPS

julia&gt; energy(h, Heisenberg(), ipeps; χ=4, tol=1e-6, maxiter=20, verbose=true)
random initial vumps environment-&gt; vumps done@step: 2, error=7.229086826298654e-7
-0.5002176649083763"><pre>julia<span class="pl-k">&gt;</span> ipeps, key <span class="pl-k">=</span> <span class="pl-c1">init_ipeps</span>(<span class="pl-c1">Heisenberg</span>(); D<span class="pl-k">=</span><span class="pl-c1">2</span>, χ<span class="pl-k">=</span><span class="pl-c1">4</span>, tol<span class="pl-k">=</span><span class="pl-c1">1e-10</span>, maxiter<span class="pl-k">=</span><span class="pl-c1">20</span>);
random initial iPEPS

julia<span class="pl-k">&gt;</span> <span class="pl-c1">energy</span>(h, <span class="pl-c1">Heisenberg</span>(), ipeps; χ<span class="pl-k">=</span><span class="pl-c1">4</span>, tol<span class="pl-k">=</span><span class="pl-c1">1e-6</span>, maxiter<span class="pl-k">=</span><span class="pl-c1">20</span>, verbose<span class="pl-k">=</span><span class="pl-c1">true</span>)
random initial vumps environment<span class="pl-k">-&gt;</span> vumps done<span class="pl-c1">@step</span><span class="pl-k">:</span> <span class="pl-c1">2</span>, error<span class="pl-k">=</span><span class="pl-c1">7.229086826298654e-7</span>
<span class="pl-k">-</span><span class="pl-c1">0.5002176649083763</span></pre></div>
<p dir="auto">where the initial energy is random.</p>
<p dir="auto">To minimise it, we combine <code>Optim</code> and <code>Zygote</code> under the hood to provide the <code>optimiseipeps</code> function. The <code>key</code> is used to save <code>.log</code> file and finial <code>ipeps</code> <code>.jld2</code> file.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using Optim

julia&gt; res = optimiseipeps(ipeps, key; f_tol=1e-6);
0.0   0   -0.5002176912673604   0.008382963041473053
2.56   1   -0.5833740684415737   0.036353323796568957
4.06   2   -0.6032224271322908   0.11180248756665447
6.14   3   -0.6412611745937832   0.08263739617395853
7.04   4   -0.6507187692219533   0.021762124786359978
8.05   5   -0.657878638331537   0.02118473585803891
8.98   6   -0.6593281299354107   0.01682222598631693
9.84   7   -0.6598795451002519   0.0029678925459859914
10.9   8   -0.6600140519479119   0.002229621321593708
11.44   9   -0.6600503541103068   0.001724388896082868
12.22   10   -0.6600780541170598   0.0034572055646887173
13.33   11   -0.6601597903538863   0.0010594850274929899
14.11   12   -0.6601713118969584   0.00037764468229989703
15.17   13   -0.66019933476685   0.001559732147205589
15.96   14   -0.6602144819385728   0.0005130015753926326
16.77   15   -0.6602187163533778   0.0005579122480867849
17.56   16   -0.66022143422884   0.0003642683231177844
18.6   17   -0.6602303218605757   0.00011867378702528263
19.4   18   -0.6602307629374299   4.215107085494706e-5
20.44   19   -0.6602310645788612   5.4946148767987396e-5"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Optim

julia<span class="pl-k">&gt;</span> res <span class="pl-k">=</span> <span class="pl-c1">optimiseipeps</span>(ipeps, key; f_tol<span class="pl-k">=</span><span class="pl-c1">1e-6</span>);
<span class="pl-c1">0.0</span>   <span class="pl-c1">0</span>   <span class="pl-k">-</span><span class="pl-c1">0.5002176912673604</span>   <span class="pl-c1">0.008382963041473053</span>
<span class="pl-c1">2.56</span>   <span class="pl-c1">1</span>   <span class="pl-k">-</span><span class="pl-c1">0.5833740684415737</span>   <span class="pl-c1">0.036353323796568957</span>
<span class="pl-c1">4.06</span>   <span class="pl-c1">2</span>   <span class="pl-k">-</span><span class="pl-c1">0.6032224271322908</span>   <span class="pl-c1">0.11180248756665447</span>
<span class="pl-c1">6.14</span>   <span class="pl-c1">3</span>   <span class="pl-k">-</span><span class="pl-c1">0.6412611745937832</span>   <span class="pl-c1">0.08263739617395853</span>
<span class="pl-c1">7.04</span>   <span class="pl-c1">4</span>   <span class="pl-k">-</span><span class="pl-c1">0.6507187692219533</span>   <span class="pl-c1">0.021762124786359978</span>
<span class="pl-c1">8.05</span>   <span class="pl-c1">5</span>   <span class="pl-k">-</span><span class="pl-c1">0.657878638331537</span>   <span class="pl-c1">0.02118473585803891</span>
<span class="pl-c1">8.98</span>   <span class="pl-c1">6</span>   <span class="pl-k">-</span><span class="pl-c1">0.6593281299354107</span>   <span class="pl-c1">0.01682222598631693</span>
<span class="pl-c1">9.84</span>   <span class="pl-c1">7</span>   <span class="pl-k">-</span><span class="pl-c1">0.6598795451002519</span>   <span class="pl-c1">0.0029678925459859914</span>
<span class="pl-c1">10.9</span>   <span class="pl-c1">8</span>   <span class="pl-k">-</span><span class="pl-c1">0.6600140519479119</span>   <span class="pl-c1">0.002229621321593708</span>
<span class="pl-c1">11.44</span>   <span class="pl-c1">9</span>   <span class="pl-k">-</span><span class="pl-c1">0.6600503541103068</span>   <span class="pl-c1">0.001724388896082868</span>
<span class="pl-c1">12.22</span>   <span class="pl-c1">10</span>   <span class="pl-k">-</span><span class="pl-c1">0.6600780541170598</span>   <span class="pl-c1">0.0034572055646887173</span>
<span class="pl-c1">13.33</span>   <span class="pl-c1">11</span>   <span class="pl-k">-</span><span class="pl-c1">0.6601597903538863</span>   <span class="pl-c1">0.0010594850274929899</span>
<span class="pl-c1">14.11</span>   <span class="pl-c1">12</span>   <span class="pl-k">-</span><span class="pl-c1">0.6601713118969584</span>   <span class="pl-c1">0.00037764468229989703</span>
<span class="pl-c1">15.17</span>   <span class="pl-c1">13</span>   <span class="pl-k">-</span><span class="pl-c1">0.66019933476685</span>   <span class="pl-c1">0.001559732147205589</span>
<span class="pl-c1">15.96</span>   <span class="pl-c1">14</span>   <span class="pl-k">-</span><span class="pl-c1">0.6602144819385728</span>   <span class="pl-c1">0.0005130015753926326</span>
<span class="pl-c1">16.77</span>   <span class="pl-c1">15</span>   <span class="pl-k">-</span><span class="pl-c1">0.6602187163533778</span>   <span class="pl-c1">0.0005579122480867849</span>
<span class="pl-c1">17.56</span>   <span class="pl-c1">16</span>   <span class="pl-k">-</span><span class="pl-c1">0.66022143422884</span>   <span class="pl-c1">0.0003642683231177844</span>
<span class="pl-c1">18.6</span>   <span class="pl-c1">17</span>   <span class="pl-k">-</span><span class="pl-c1">0.6602303218605757</span>   <span class="pl-c1">0.00011867378702528263</span>
<span class="pl-c1">19.4</span>   <span class="pl-c1">18</span>   <span class="pl-k">-</span><span class="pl-c1">0.6602307629374299</span>   <span class="pl-c1">4.215107085494706e-5</span>
<span class="pl-c1">20.44</span>   <span class="pl-c1">19</span>   <span class="pl-k">-</span><span class="pl-c1">0.6602310645788612</span>   <span class="pl-c1">5.4946148767987396e-5</span></pre></div>
<p dir="auto">where our final value for the energy <code>e = -0.6602</code> agrees with the value found in the paper.</p>
<h2 dir="auto"><a id="user-content-for-more" class="anchor" aria-hidden="true" href="#for-more"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>For more</h2>
<p dir="auto">More Extension of VUMPS is available in package <a href="https://github.com/XingyuZhang2018/VUMPS.jl">VUMPS.jl</a>, including:</p>
<ul dir="auto">
<li>Complex number forward and backward propagation</li>
<li><code>NixNj</code> Big Unit Cell</li>
<li>U1-symmmetry and Z2-symmmetry</li>
</ul>
</article></div>