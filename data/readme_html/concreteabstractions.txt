<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-concreteabstractions" class="anchor" aria-hidden="true" href="#concreteabstractions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>ConcreteAbstractions</h1>
<p><a href="https://travis-ci.org/tbreloff/ConcreteAbstractions.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/c8e107443228548696e866bb313e2dbc21cdd5bc/68747470733a2f2f7472617669732d63692e6f72672f746272656c6f66662f436f6e63726574654162737472616374696f6e732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/tbreloff/ConcreteAbstractions.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p>Simulate OOP inheritance while using a (superior) Julia abstract type.  Fields and parameters of the "base type" are automatically inserted into the type definition of a "child type".  The "base type" is really an abstract type, but we store the internals of the type definition for later injection into the child definition.</p>
<p>This package exports two macros: <code>@base</code> and <code>@extend</code>.  The purpose and usage is hopefully well understood from the example below.</p>
<p>Install with:</p>
<div class="highlight highlight-source-julia"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">clone</span>(<span class="pl-s"><span class="pl-pds">"</span>https://github.com/tbreloff/ConcreteAbstractions.jl<span class="pl-pds">"</span></span>)
<span class="pl-k">using</span> ConcreteAbstractions</pre></div>
<p>The abstract definition:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">@base</span> type AbstractFoo{T}
    a
    b<span class="pl-k">::</span><span class="pl-c1">Int</span>
    c<span class="pl-k">::</span><span class="pl-c1">T</span>
    d<span class="pl-k">::</span><span class="pl-c1">Vector{T}</span>
<span class="pl-k">end</span></pre></div>
<p>is really more like:</p>
<div class="highlight highlight-source-julia"><pre>abstract AbstractFoo
ConcreteAbstractions<span class="pl-k">.</span>_base_types[<span class="pl-c1">:AbstractFoo</span>] <span class="pl-k">=</span> ([<span class="pl-c1">:T</span>], :(<span class="pl-k">begin</span>; a; b<span class="pl-k">::</span><span class="pl-c1">Int</span>; c<span class="pl-k">::</span><span class="pl-c1">T</span>; d<span class="pl-k">::</span><span class="pl-c1">Vector{T}</span>; <span class="pl-k">end</span>))</pre></div>
<p>and the child definition:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">@extend</span> type Foo <span class="pl-k">&lt;:</span> <span class="pl-c1">AbstractFoo</span>
    e<span class="pl-k">::</span><span class="pl-c1">T</span>
<span class="pl-k">end</span></pre></div>
<p>is really more like:</p>
<div class="highlight highlight-source-julia"><pre>type Foo{T} <span class="pl-k">&lt;:</span> <span class="pl-c1">AbstractFoo</span>
    a
    b<span class="pl-k">::</span><span class="pl-c1">Int</span>
    c<span class="pl-k">::</span><span class="pl-c1">T</span>
    d<span class="pl-k">::</span><span class="pl-c1">Vector{T}</span>
    e<span class="pl-k">::</span><span class="pl-c1">T</span>
<span class="pl-k">end</span></pre></div>
</article></div>