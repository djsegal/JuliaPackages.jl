<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-promisesjl-javascript-inspired-async" class="anchor" aria-hidden="true" href="#promisesjl-javascript-inspired-async"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Promises.jl: <em>JavaScript-inspired async</em></h1>
<blockquote>
<h4 dir="auto"><a id="user-content-summary" class="anchor" aria-hidden="true" href="#summary"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Summary:</h4>
<p dir="auto">A <strong><code>Promise{T}</code></strong> is a container for a value <strong>that will arrive in the future</strong>.</p>
<p dir="auto">You can <strong>await</strong> Promises, and you can <strong>chain</strong> processing steps with <code>.then</code> and <code>.catch</code>, each producing a new <code>Promise</code>.</p>
</blockquote>
<p dir="auto">Let's look at an example, using Promises.jl to download data in the background:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="download_result = @async_promise begin

	# This will download the data, 
	#  write the result to a file, 
	#  and return the filename.
	Downloads.download(&quot;https://api.github.com/users/$(username)&quot;)
end

#=&gt;  Promise{Any}( &lt;pending&gt; )"><pre>download_result <span class="pl-k">=</span> <span class="pl-c1">@async_promise</span> <span class="pl-k">begin</span>

	<span class="pl-c"><span class="pl-c">#</span> This will download the data, </span>
	<span class="pl-c"><span class="pl-c">#</span>  write the result to a file, </span>
	<span class="pl-c"><span class="pl-c">#</span>  and return the filename.</span>
	Downloads<span class="pl-k">.</span><span class="pl-c1">download</span>(<span class="pl-s"><span class="pl-pds">"</span>https://api.github.com/users/<span class="pl-v">$(username)</span><span class="pl-pds">"</span></span>)
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#=</span>&gt;  Promise{Any}( &lt;pending&gt; )</span></pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="username = &quot;JuliaLang&quot;"><pre class="notranslate"><code>username = "JuliaLang"
</code></pre></div>
<p dir="auto">The result is a <em>pending promise</em>: it might still running in the background!</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="download_result

#=&gt;  Promise{Any}( &lt;pending&gt; )"><pre>download_result

<span class="pl-c"><span class="pl-c">#=</span>&gt;  Promise{Any}( &lt;pending&gt; )</span></pre></div>
<p dir="auto">You can use <code>@await</code> to wait for it to finish, and get its value:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@await download_result

#=&gt;  &quot;/var/folders/v_/fhpj9jn151d4p9c2fdw2gv780000gn/T/jl_LqoUCC&quot;"><pre><span class="pl-c1">@await</span> download_result

<span class="pl-c"><span class="pl-c">#=</span>&gt;  "/var/folders/v_/fhpj9jn151d4p9c2fdw2gv780000gn/T/jl_LqoUCC"</span></pre></div>
<br>
<h2 dir="auto"><a id="user-content-chaining-with-then" class="anchor" aria-hidden="true" href="#chaining-with-then"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Chaining with <code>then</code></h2>
<p dir="auto">One cool feature of promises is <strong>chaining</strong>! Every promise has a <code>then</code> function, which can be used to add a new transformation to the chain, returning a new <code>Promise</code>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="download_result.then(
	filename -&gt; read(filename, String)
).then(
	str -&gt; JSON.parse(str)
)

#=&gt;  
Promise{Dict{String, Any}}( &lt;resolved&gt;: Dict{String, Any} with 32 entries:
  &quot;followers&quot;         =&gt; 0
  &quot;created_at&quot;        =&gt; &quot;2011-04-21T06:33:51Z&quot;
  &quot;repos_url&quot;         =&gt; &quot;https://api.github.com/users/JuliaLang/repos&quot;
  &quot;login&quot;             =&gt; &quot;JuliaLang&quot;
  &quot;gists_url&quot;         =&gt; &quot;https://api.github.com/users/JuliaLang/gists{/gist_id}&quot;
  &quot;public_repos&quot;      =&gt; 36
  &quot;following&quot;         =&gt; 0
  &quot;site_admin&quot;        =&gt; false
  &quot;name&quot;              =&gt; &quot;The Julia Programming Language&quot;
  &quot;location&quot;          =&gt; nothing
  &quot;blog&quot;              =&gt; &quot;https://julialang.org&quot;
  &quot;subscriptions_url&quot; =&gt; &quot;https://api.github.com/users/JuliaLang/subscriptions&quot;
  &quot;id&quot;                =&gt; 743164
  ⋮                   =&gt; ⋮ )"><pre>download_result<span class="pl-k">.</span><span class="pl-c1">then</span>(
	filename <span class="pl-k">-&gt;</span> <span class="pl-c1">read</span>(filename, String)
)<span class="pl-k">.</span><span class="pl-c1">then</span>(
	str <span class="pl-k">-&gt;</span> JSON<span class="pl-k">.</span><span class="pl-c1">parse</span>(str)
)

<span class="pl-c"><span class="pl-c">#=</span>&gt;  </span>
<span class="pl-c">Promise{Dict{String, Any}}( &lt;resolved&gt;: Dict{String, Any} with 32 entries:</span>
<span class="pl-c">  "followers"         =&gt; 0</span>
<span class="pl-c">  "created_at"        =&gt; "2011-04-21T06:33:51Z"</span>
<span class="pl-c">  "repos_url"         =&gt; "https://api.github.com/users/JuliaLang/repos"</span>
<span class="pl-c">  "login"             =&gt; "JuliaLang"</span>
<span class="pl-c">  "gists_url"         =&gt; "https://api.github.com/users/JuliaLang/gists{/gist_id}"</span>
<span class="pl-c">  "public_repos"      =&gt; 36</span>
<span class="pl-c">  "following"         =&gt; 0</span>
<span class="pl-c">  "site_admin"        =&gt; false</span>
<span class="pl-c">  "name"              =&gt; "The Julia Programming Language"</span>
<span class="pl-c">  "location"          =&gt; nothing</span>
<span class="pl-c">  "blog"              =&gt; "https://julialang.org"</span>
<span class="pl-c">  "subscriptions_url" =&gt; "https://api.github.com/users/JuliaLang/subscriptions"</span>
<span class="pl-c">  "id"                =&gt; 743164</span>
<span class="pl-c">  ⋮                   =&gt; ⋮ )</span></pre></div>
<p dir="auto">Since the original Promise <code>download_result</code> was asynchronous, this newly created <code>Promise</code> is also asynchronous! By chaining the operations <code>read</code> and <code>JSON.parse</code>, you are "queing" them to run in the background.</p>
<br>
<h2 dir="auto"><a id="user-content-error-handling-rejected-promises" class="anchor" aria-hidden="true" href="#error-handling-rejected-promises"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Error handling: rejected Promises</h2>
<p dir="auto">A Promise can finish in two ways: it can <strong>✓ resolve</strong> or it can <strong>✗ reject</strong>. In both cases, the <code>Promise{T}</code> will store a value, either the <em>resolved value</em> (of type <code>T</code>) or the <em>rejected value</em> (often an error message).</p>
<p dir="auto">When an error happens inside a Promise handler, it will reject:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="bad_result = download_result.then(d -&gt; sqrt(-1))

#=&gt;  
Promise{Any}( &lt;rejected&gt;: 
DomainError with -1.0:
sqrt will only return a complex result if called with a complex argument. Try sqrt(Complex(x)).
Stacktrace:
 [1] throw_complex_domainerror(f::Symbol, x::Float64)
   @ Base.Math ./math.jl:33
 [2] sqrt
   @ ./math.jl:567 [inlined]
 [3] sqrt(x::Int64)
   @ Base.Math ./math.jl:1221
 [4] (::Main.var&quot;#5#6&quot;{typeof(sqrt)})(d::String)
   @ Main ~/Documents/Promises.jl/src/notebook.jl#==#34364f4d-e257-4c22-84ee-d8786a2c377c:1
 [5] promise_then(p::Promise{Any}, f::Main.var&quot;#5#6&quot;{typeof(sqrt)})
   @ Main.workspace#3 ~/Documents/Promises.jl/src/notebook.jl#==#49a8beb7-6a97-4c46-872e-e89822108f39:63
 [6] #18
   @ ~/Documents/Promises.jl/src/notebook.jl#==#49a8beb7-6a97-4c46-872e-e89822108f39:175 [inlined]
 )"><pre>bad_result <span class="pl-k">=</span> download_result<span class="pl-k">.</span><span class="pl-c1">then</span>(d <span class="pl-k">-&gt;</span> <span class="pl-c1">sqrt</span>(<span class="pl-k">-</span><span class="pl-c1">1</span>))

<span class="pl-c"><span class="pl-c">#=</span>&gt;  </span>
<span class="pl-c">Promise{Any}( &lt;rejected&gt;: </span>
<span class="pl-c">DomainError with -1.0:</span>
<span class="pl-c">sqrt will only return a complex result if called with a complex argument. Try sqrt(Complex(x)).</span>
<span class="pl-c">Stacktrace:</span>
<span class="pl-c"> [1] throw_complex_domainerror(f::Symbol, x::Float64)</span>
<span class="pl-c">   @ Base.Math ./math.jl:33</span>
<span class="pl-c"> [2] sqrt</span>
<span class="pl-c">   @ ./math.jl:567 [inlined]</span>
<span class="pl-c"> [3] sqrt(x::Int64)</span>
<span class="pl-c">   @ Base.Math ./math.jl:1221</span>
<span class="pl-c"> [4] (::Main.var"#5#6"{typeof(sqrt)})(d::String)</span>
<span class="pl-c">   @ Main ~/Documents/Promises.jl/src/notebook.jl<span class="pl-c"><span class="pl-c">#=</span><span class="pl-c">=#</span></span>34364f4d-e257-4c22-84ee-d8786a2c377c:1</span>
<span class="pl-c"> [5] promise_then(p::Promise{Any}, f::Main.var"#5#6"{typeof(sqrt)})</span>
<span class="pl-c">   @ Main.workspace#3 ~/Documents/Promises.jl/src/notebook.jl<span class="pl-c"><span class="pl-c">#=</span><span class="pl-c">=#</span></span>49a8beb7-6a97-4c46-872e-e89822108f39:63</span>
<span class="pl-c"> [6] #18</span>
<span class="pl-c">   @ ~/Documents/Promises.jl/src/notebook.jl<span class="pl-c"><span class="pl-c">#=</span><span class="pl-c">=#</span></span>49a8beb7-6a97-4c46-872e-e89822108f39:175 [inlined]</span>
<span class="pl-c"> )</span></pre></div>
<p dir="auto">If you <code>@await</code> a Promise that has rejected, the rejected value will be rethrown as an error:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@await bad_result

#=&gt;  
DomainError with -1.0:
sqrt will only return a complex result if called with a complex argument. Try sqrt(Complex(x)).
Stacktrace:
 [1] throw_complex_domainerror(f::Symbol, x::Float64)
   @ Base.Math ./math.jl:33
 [2] sqrt
   @ ./math.jl:567 [inlined]
 [3] sqrt(x::Int64)
   @ Base.Math ./math.jl:1221
 [4] (::var&quot;#5#6&quot;{typeof(sqrt)})(d::String)
   @ Main ~/Documents/Promises.jl/src/notebook.jl#==#34364f4d-e257-4c22-84ee-d8786a2c377c:1
 [5] promise_then(p::Main.workspace#3.Promise{Any}, f::var&quot;#5#6&quot;{typeof(sqrt)})
   @ Main.workspace#3 ~/Documents/Promises.jl/src/notebook.jl#==#49a8beb7-6a97-4c46-872e-e89822108f39:63
 [6] #18
   @ ~/Documents/Promises.jl/src/notebook.jl#==#49a8beb7-6a97-4c46-872e-e89822108f39:175 [inlined]
Stacktrace:
 [1] fetch(p::Main.workspace#3.Promise{Any})
   @ Main.workspace#3 ~/Documents/Promises.jl/src/notebook.jl#==#49a8beb7-6a97-4c46-872e-e89822108f39:112"><pre><span class="pl-c1">@await</span> bad_result

<span class="pl-c"><span class="pl-c">#=</span>&gt;  </span>
<span class="pl-c">DomainError with -1.0:</span>
<span class="pl-c">sqrt will only return a complex result if called with a complex argument. Try sqrt(Complex(x)).</span>
<span class="pl-c">Stacktrace:</span>
<span class="pl-c"> [1] throw_complex_domainerror(f::Symbol, x::Float64)</span>
<span class="pl-c">   @ Base.Math ./math.jl:33</span>
<span class="pl-c"> [2] sqrt</span>
<span class="pl-c">   @ ./math.jl:567 [inlined]</span>
<span class="pl-c"> [3] sqrt(x::Int64)</span>
<span class="pl-c">   @ Base.Math ./math.jl:1221</span>
<span class="pl-c"> [4] (::var"#5#6"{typeof(sqrt)})(d::String)</span>
<span class="pl-c">   @ Main ~/Documents/Promises.jl/src/notebook.jl<span class="pl-c"><span class="pl-c">#=</span><span class="pl-c">=#</span></span>34364f4d-e257-4c22-84ee-d8786a2c377c:1</span>
<span class="pl-c"> [5] promise_then(p::Main.workspace#3.Promise{Any}, f::var"#5#6"{typeof(sqrt)})</span>
<span class="pl-c">   @ Main.workspace#3 ~/Documents/Promises.jl/src/notebook.jl<span class="pl-c"><span class="pl-c">#=</span><span class="pl-c">=#</span></span>49a8beb7-6a97-4c46-872e-e89822108f39:63</span>
<span class="pl-c"> [6] #18</span>
<span class="pl-c">   @ ~/Documents/Promises.jl/src/notebook.jl<span class="pl-c"><span class="pl-c">#=</span><span class="pl-c">=#</span></span>49a8beb7-6a97-4c46-872e-e89822108f39:175 [inlined]</span>
<span class="pl-c">Stacktrace:</span>
<span class="pl-c"> [1] fetch(p::Main.workspace#3.Promise{Any})</span>
<span class="pl-c">   @ Main.workspace#3 ~/Documents/Promises.jl/src/notebook.jl<span class="pl-c"><span class="pl-c">#=</span><span class="pl-c">=#</span></span>49a8beb7-6a97-4c46-872e-e89822108f39:112</span></pre></div>
<br>
<h2 dir="auto"><a id="user-content-the-promise-constructor" class="anchor" aria-hidden="true" href="#the-promise-constructor"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>The <code>Promise</code> constructor</h2>
<p dir="auto">Remember that a promise can finish in two ways: it can <strong>✓ resolve</strong> or it can <strong>✗ reject</strong>. When creating a Promise by hand, this corresponds to the two functions passed in by the constructor, <code>resolve</code> and <code>reject</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Promise{T=Any}(resolve, reject) -&gt; begin

	if condition
		# Resolve the promise:
		resolve(&quot;Success!&quot;)
	else
		# Reject the promise
		reject(&quot;Something went wrong...&quot;)
	end
end)"><pre><span class="pl-c1">Promise</span><span class="pl-c1">{T=Any}</span>(resolve, reject) <span class="pl-k">-&gt;</span> <span class="pl-k">begin</span>

	<span class="pl-k">if</span> condition
		<span class="pl-c"><span class="pl-c">#</span> Resolve the promise:</span>
		<span class="pl-c1">resolve</span>(<span class="pl-s"><span class="pl-pds">"</span>Success!<span class="pl-pds">"</span></span>)
	<span class="pl-k">else</span>
		<span class="pl-c"><span class="pl-c">#</span> Reject the promise</span>
		<span class="pl-c1">reject</span>(<span class="pl-s"><span class="pl-pds">"</span>Something went wrong...<span class="pl-pds">"</span></span>)
	<span class="pl-k">end</span>
<span class="pl-k">end</span>)</pre></div>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="yay_result = Promise((resolve, reject) -&gt; resolve(&quot;🌟 yay!&quot;))

#=&gt;  Promise{Any}( &lt;resolved&gt;: &quot;🌟 yay!&quot; )"><pre>yay_result <span class="pl-k">=</span> <span class="pl-c1">Promise</span>((resolve, reject) <span class="pl-k">-&gt;</span> <span class="pl-c1">resolve</span>(<span class="pl-s"><span class="pl-pds">"</span>🌟 yay!<span class="pl-pds">"</span></span>))

<span class="pl-c"><span class="pl-c">#=</span>&gt;  Promise{Any}( &lt;resolved&gt;: "🌟 yay!" )</span></pre></div>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="oopsie_result = Promise((res, rej) -&gt; rej(&quot;oops!&quot;))

#=&gt;  Promise{Any}( &lt;rejected&gt;: &quot;oops!&quot; )"><pre>oopsie_result <span class="pl-k">=</span> <span class="pl-c1">Promise</span>((res, rej) <span class="pl-k">-&gt;</span> <span class="pl-c1">rej</span>(<span class="pl-s"><span class="pl-pds">"</span>oops!<span class="pl-pds">"</span></span>))

<span class="pl-c"><span class="pl-c">#=</span>&gt;  Promise{Any}( &lt;rejected&gt;: "oops!" )</span></pre></div>
<p dir="auto">(A shorthand function is available to create promises that immediately reject or resolve, like we did above: <code>Promises.resolve(value)</code> and <code>Promises.reject(value)</code>.)</p>
<br>
<h3 dir="auto"><a id="user-content-chaining-errors-with-catch" class="anchor" aria-hidden="true" href="#chaining-errors-with-catch"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Chaining errors with <code>.catch</code></h3>
<p dir="auto">There are two special things about rejected values in chains:</p>
<ol dir="auto">
<li>The <code>.then</code> function of a rejected Promise will <em>immediately reject</em>, passing the value along.</li>
</ol>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Promise((res, rej) -&gt; rej(&quot;oops!&quot;)).then(x -&gt; x + 10).then(x -&gt; x / 100)

#=&gt;  Promise{Any}( &lt;rejected&gt;: &quot;oops!&quot; )"><pre><span class="pl-c1">Promise</span>((res, rej) <span class="pl-k">-&gt;</span> <span class="pl-c1">rej</span>(<span class="pl-s"><span class="pl-pds">"</span>oops!<span class="pl-pds">"</span></span>))<span class="pl-k">.</span><span class="pl-c1">then</span>(x <span class="pl-k">-&gt;</span> x <span class="pl-k">+</span> <span class="pl-c1">10</span>)<span class="pl-k">.</span><span class="pl-c1">then</span>(x <span class="pl-k">-&gt;</span> x <span class="pl-k">/</span> <span class="pl-c1">100</span>)

<span class="pl-c"><span class="pl-c">#=</span>&gt;  Promise{Any}( &lt;rejected&gt;: "oops!" )</span></pre></div>
<ol start="2" dir="auto">
<li>The <code>.catch</code> is the opposite of <code>.then</code>: it is used to handle rejected values.</li>
</ol>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Promise((res, rej) -&gt; rej(&quot;oops!&quot;)).then(x -&gt; x + 10).catch(x -&gt; 123)

#=&gt;  Promise{Any}( &lt;resolved&gt;: 123 )"><pre><span class="pl-c1">Promise</span>((res, rej) <span class="pl-k">-&gt;</span> <span class="pl-c1">rej</span>(<span class="pl-s"><span class="pl-pds">"</span>oops!<span class="pl-pds">"</span></span>))<span class="pl-k">.</span><span class="pl-c1">then</span>(x <span class="pl-k">-&gt;</span> x <span class="pl-k">+</span> <span class="pl-c1">10</span>)<span class="pl-k">.</span><span class="pl-c1">catch</span>(x <span class="pl-k">-&gt;</span> <span class="pl-c1">123</span>)

<span class="pl-c"><span class="pl-c">#=</span>&gt;  Promise{Any}( &lt;resolved&gt;: 123 )</span></pre></div>
<p dir="auto">Here is a little table:</p>
<table>
<thead>
<tr>
<th align="right"></th>
<th align="right"><code>.then</code></th>
<th align="right"><code>.catch</code></th>
</tr>
</thead>
<tbody>
<tr>
<td align="right">On a <strong>resolved</strong> Promise:</td>
<td align="right">Runs</td>
<td align="right"><em>Skipped</em></td>
</tr>
<tr>
<td align="right">On a <strong>rejected</strong> Promise:</td>
<td align="right"><em>Skipped</em></td>
<td align="right">Runs</td>
</tr>
</tbody>
</table>
<br>
<h3 dir="auto"><a id="user-content-promiset-is-a-parametric-type" class="anchor" aria-hidden="true" href="#promiset-is-a-parametric-type"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>Promise{T}</code> is a parametric type</h3>
<p dir="auto">Like in TypeScript, the <code>Promise{T}</code> can specify its <strong>resolve type</strong>. For example, <code>Promise{String}</code> is guaranteed to resolve to a <code>String</code>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Promise{String}((res,rej) -&gt; res(&quot;asdf&quot;))

#=&gt;  Promise{String}( &lt;resolved&gt;: &quot;asdf&quot; )"><pre><span class="pl-c1">Promise</span><span class="pl-c1">{String}</span>((res,rej) <span class="pl-k">-&gt;</span> <span class="pl-c1">res</span>(<span class="pl-s"><span class="pl-pds">"</span>asdf<span class="pl-pds">"</span></span>))

<span class="pl-c"><span class="pl-c">#=</span>&gt;  Promise{String}( &lt;resolved&gt;: "asdf" )</span></pre></div>
<p dir="auto">This information is available to the Julia compiler, which means that it can do smart stuff!</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Core.Compiler.return_type(fetch, (Promise{String},))

#=&gt;  String"><pre>Core<span class="pl-k">.</span>Compiler<span class="pl-k">.</span><span class="pl-c1">return_type</span>(fetch, (Promise{String},))

<span class="pl-c"><span class="pl-c">#=</span>&gt;  String</span></pre></div>
<p dir="auto">Trying to resolve to another type will reject the Promise:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Promise{String}((res,rej) -&gt; res(12341234))

#=&gt;  
Promise{String}( &lt;rejected&gt;: 
ArgumentError: Can only resolve with values of type String.
Stacktrace:
 [1] (::Main.workspace#3.var&quot;#resolve#20&quot;{String, Promise{String}})(val::Int64)
   @ Main.workspace#3 ~/Documents/Promises.jl/src/notebook.jl#==#49a8beb7-6a97-4c46-872e-e89822108f39:21
 [2] (::Main.var&quot;#25#26&quot;)(res::Main.workspace#3.var&quot;#resolve#20&quot;{String, Promise{String}}, rej::Function)
   @ Main ~/Documents/Promises.jl/src/notebook.jl#==#9d9179de-19b1-4f40-b816-454a8c071c3d:1
 [3] Promise{String}(f::Main.var&quot;#25#26&quot;)
   @ Main.workspace#3 ~/Documents/Promises.jl/src/notebook.jl#==#49a8beb7-6a97-4c46-872e-e89822108f39:38
 )"><pre><span class="pl-c1">Promise</span><span class="pl-c1">{String}</span>((res,rej) <span class="pl-k">-&gt;</span> <span class="pl-c1">res</span>(<span class="pl-c1">12341234</span>))

<span class="pl-c"><span class="pl-c">#=</span>&gt;  </span>
<span class="pl-c">Promise{String}( &lt;rejected&gt;: </span>
<span class="pl-c">ArgumentError: Can only resolve with values of type String.</span>
<span class="pl-c">Stacktrace:</span>
<span class="pl-c"> [1] (::Main.workspace#3.var"#resolve#20"{String, Promise{String}})(val::Int64)</span>
<span class="pl-c">   @ Main.workspace#3 ~/Documents/Promises.jl/src/notebook.jl<span class="pl-c"><span class="pl-c">#=</span><span class="pl-c">=#</span></span>49a8beb7-6a97-4c46-872e-e89822108f39:21</span>
<span class="pl-c"> [2] (::Main.var"#25#26")(res::Main.workspace#3.var"#resolve#20"{String, Promise{String}}, rej::Function)</span>
<span class="pl-c">   @ Main ~/Documents/Promises.jl/src/notebook.jl<span class="pl-c"><span class="pl-c">#=</span><span class="pl-c">=#</span></span>9d9179de-19b1-4f40-b816-454a8c071c3d:1</span>
<span class="pl-c"> [3] Promise{String}(f::Main.var"#25#26")</span>
<span class="pl-c">   @ Main.workspace#3 ~/Documents/Promises.jl/src/notebook.jl<span class="pl-c"><span class="pl-c">#=</span><span class="pl-c">=#</span></span>49a8beb7-6a97-4c46-872e-e89822108f39:38</span>
<span class="pl-c"> )</span></pre></div>
<h4 dir="auto"><a id="user-content-automatic-types" class="anchor" aria-hidden="true" href="#automatic-types"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Automatic types</h4>
<p dir="auto">Julia is smart, and it can automatically determine the type of chained Promises using static analysis!</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="typeof(
	Promise{String}((res,rej) -&gt; res(&quot;asdf&quot;)).then(first)
)

#=&gt;  Promise{Char}"><pre><span class="pl-c1">typeof</span>(
	<span class="pl-c1">Promise</span><span class="pl-c1">{String}</span>((res,rej) <span class="pl-k">-&gt;</span> <span class="pl-c1">res</span>(<span class="pl-s"><span class="pl-pds">"</span>asdf<span class="pl-pds">"</span></span>))<span class="pl-k">.</span><span class="pl-c1">then</span>(first)
)

<span class="pl-c"><span class="pl-c">#=</span>&gt;  Promise{Char}</span></pre></div>
<br>
</article></div>