<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-namedtupletoolsjl" class="anchor" aria-hidden="true" href="#namedtupletoolsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>NamedTupleTools.jl</h1>
<h3><a id="user-content-some-namedtuple-utilities" class="anchor" aria-hidden="true" href="#some-namedtuple-utilities"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Some NamedTuple utilities</h3>
<h4><a id="user-content-copyright--2015-2020-by-jeffrey-sarnoff-this-work-is-released-under-the-mit-license" class="anchor" aria-hidden="true" href="#copyright--2015-2020-by-jeffrey-sarnoff-this-work-is-released-under-the-mit-license"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Copyright © 2015-2020 by Jeffrey Sarnoff. This work is released under The MIT License.</h4>
<hr>
<p><a href="https://travis-ci.org/JeffreySarnoff/NamedTupleTools.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/2f570257e29fd5c21937eb1f7f233cc443f4c17e2bf7a4a920cbd98beb0657be/68747470733a2f2f7472617669732d63692e6f72672f4a6566667265795361726e6f66662f4e616d65645475706c65546f6f6c732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JeffreySarnoff/NamedTupleTools.jl.svg?branch=master" style="max-width:100%;"></a>   <a href="https://codecov.io/gh/JeffreySarnoff/NamedTupleTools.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/327148c6c872aa431367e418a4c506d9798c8d0326b7f5e29561d43f8bbce6e7/68747470733a2f2f636f6465636f762e696f2f67682f4a6566667265795361726e6f66662f4e616d65645475706c65546f6f6c732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/JeffreySarnoff/NamedTupleTools.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a>   <a href="http://jeffreysarnoff.github.io/NamedTupleTools.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Docs" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a></p>
<hr>
<h2><a id="user-content-overview" class="anchor" aria-hidden="true" href="#overview"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Overview</h2>
<p><code>NamedTuples</code> are built from fieldnames, given as <code>Symbols</code> and field values, as they may be given.
These utilities make some uses of <code>NamedTuples</code> more straightforward.  This package benefits greatly
from others (see <a href="#Credits">Credits</a>).</p>
<h2><a id="user-content-operations" class="anchor" aria-hidden="true" href="#operations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Operations</h2>
<h3><a id="user-content-construction" class="anchor" aria-hidden="true" href="#construction"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Construction</h3>
<ul>
<li><a href="https://github.com/JeffreySarnoff/NamedTupleTools.jl#construction-from-names-and-values">given <code>names</code> and <code>values</code></a></li>
<li><a href="https://github.com/JeffreySarnoff/NamedTupleTools.jl#dict-construction-reconstruction">given a <code>Dict{Symbol, Any}</code></a></li>
<li><a href="https://github.com/JeffreySarnoff/NamedTupleTools.jl#struct-construction-conversion">given a <code>struct</code></a></li>
<li><a href="https://github.com/JeffreySarnoff/NamedTupleTools.jl#vector-of-pairs-peter-deffebach">given a <code>Vector</code> of <code>Pairs</code></a></li>
<li>inversive <a href="https://github.com/JeffreySarnoff/NamedTupleTools.jl/blob/master/README.md#reconstruction"><em>Reconstruction</em></a></li>
</ul>
<h3><a id="user-content-reconstruction" class="anchor" aria-hidden="true" href="#reconstruction"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Reconstruction</h3>
<ul>
<li><a href="https://github.com/JeffreySarnoff/NamedTupleTools.jl#construction-from-names-and-values">obtaining <code>names</code> and <code>values</code></a></li>
<li><a href="https://github.com/JeffreySarnoff/NamedTupleTools.jl#dict-construction-reconstruction">obtaining a <code>Dict{Symbol, Any}</code></a></li>
<li><a href="https://github.com/JeffreySarnoff/NamedTupleTools.jl#struct-construction-conversion">obtaining a <code>struct</code></a></li>
<li><a href="https://github.com/JeffreySarnoff/NamedTupleTools.jl/blob/master/README.md#convert-to-vector-of-pairs">obtaining a <code>Vector{Pair}</code></a></li>
<li>inversive <a href="https://github.com/JeffreySarnoff/NamedTupleTools.jl/blob/master/README.md#construction"><em>Construction</em></a></li>
</ul>
<h3><a id="user-content-selection" class="anchor" aria-hidden="true" href="#selection"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Selection</h3>
<ul>
<li><a href="https://github.com/JeffreySarnoff/NamedTupleTools.jl#select-chad-scherrer">select one or more named constituents</a></li>
<li>complements <a href="https://github.com/JeffreySarnoff/NamedTupleTools.jl/blob/master/README.md#deletion"><em>Deletion</em></a></li>
</ul>
<h3><a id="user-content-deletion" class="anchor" aria-hidden="true" href="#deletion"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Deletion</h3>
<ul>
<li><a href="https://github.com/JeffreySarnoff/NamedTupleTools.jl#delete">delete one or more named constituents</a></li>
<li>complements <a href="https://github.com/JeffreySarnoff/NamedTupleTools.jl/blob/master/README.md#selection"><em>Selection</em></a></li>
</ul>
<h3><a id="user-content-merging" class="anchor" aria-hidden="true" href="#merging"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Merging</h3>
<ul>
<li><a href="https://github.com/JeffreySarnoff/NamedTupleTools.jl/blob/master/README.md#merge">merge one or more NamedTuples</a></li>
<li>undoes <a href="https://github.com/JeffreySarnoff/NamedTupleTools.jl/blob/master/README.md#splitting"><em>Splitting</em></a></li>
</ul>
<h3><a id="user-content-recursive-merging" class="anchor" aria-hidden="true" href="#recursive-merging"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Recursive Merging</h3>
<ul>
<li><a href="https://github.com/JeffreySarnoff/NamedTupleTools.jl/blob/master/README.md#recursive_merge">merge through one or more NamedTuples</a></li>
</ul>
<h3><a id="user-content-splitting" class="anchor" aria-hidden="true" href="#splitting"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Splitting</h3>
<ul>
<li><a href="https://github.com/JeffreySarnoff/NamedTupleTools.jl#split-seth-axen">split a NamedTuple into one or more NamedTuples formed of its consituents</a></li>
<li>undoes <a href="https://github.com/JeffreySarnoff/NamedTupleTools.jl/blob/master/README.md#merging"><em>Merging</em></a></li>
</ul>
<hr>
<h2><a id="user-content-functions" class="anchor" aria-hidden="true" href="#functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Functions</h2>
<h3><a id="user-content-construction-from-names-and-values" class="anchor" aria-hidden="true" href="#construction-from-names-and-values"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Construction from names and values</h3>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using NamedTupleTools
julia&gt; namesofvalues  = (:instrument, :madeby)
julia&gt; matchingvalues = (&quot;violin&quot;, &quot;Stradivarius&quot;)

julia&gt; nt = namedtuple(namesofvalues, matchingvalues)
(instrument = &quot;violin&quot;, madeby = &quot;Stradivarius&quot;)
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> NamedTupleTools
julia<span class="pl-k">&gt;</span> namesofvalues  <span class="pl-k">=</span> (<span class="pl-c1">:instrument</span>, <span class="pl-c1">:madeby</span>)
julia<span class="pl-k">&gt;</span> matchingvalues <span class="pl-k">=</span> (<span class="pl-s"><span class="pl-pds">"</span>violin<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Stradivarius<span class="pl-pds">"</span></span>)

julia<span class="pl-k">&gt;</span> nt <span class="pl-k">=</span> <span class="pl-c1">namedtuple</span>(namesofvalues, matchingvalues)
(instrument <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>violin<span class="pl-pds">"</span></span>, madeby <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>Stradivarius<span class="pl-pds">"</span></span>)</pre></div>
<ul>
<li>The names may be given as <code>Symbols</code> or <code>Strings</code></li>
<li>The names, values may be <code>Tuples</code> or <code>Vectors</code></li>
</ul>
<h3><a id="user-content-selecting-aspects-of-elements" class="anchor" aria-hidden="true" href="#selecting-aspects-of-elements"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Selecting Aspects of Elements</h3>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using NamedTupleTools

julia&gt; nt = NamedTuple{(:a, :b)}(1.0, &quot;two&quot;)
(a = 1.0, b = &quot;two&quot;)

julia&gt; typeof(nt) == NamedTuple{(:a, :b),Tuple{Float64,String}}
true

julia&gt; propertynames(nt) == (:a, :b)
true

julia&gt; fieldnames(nt) == (:a, :b)             # synonym for the moment
true

julia&gt; fieldtypes(nt) == (Float64, String)
true

julia&gt; valtype(nt) == Tuple{Float64, String}
true

julia&gt; fieldvalues(nt) == (1.0, &quot;two&quot;)
true
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> NamedTupleTools

julia<span class="pl-k">&gt;</span> nt <span class="pl-k">=</span> <span class="pl-c1">NamedTuple</span><span class="pl-c1">{(:a, :b)}</span>(<span class="pl-c1">1.0</span>, <span class="pl-s"><span class="pl-pds">"</span>two<span class="pl-pds">"</span></span>)
(a <span class="pl-k">=</span> <span class="pl-c1">1.0</span>, b <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>two<span class="pl-pds">"</span></span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">typeof</span>(nt) <span class="pl-k">==</span> NamedTuple{(<span class="pl-c1">:a</span>, <span class="pl-c1">:b</span>),Tuple{Float64,String}}
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">propertynames</span>(nt) <span class="pl-k">==</span> (<span class="pl-c1">:a</span>, <span class="pl-c1">:b</span>)
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">fieldnames</span>(nt) <span class="pl-k">==</span> (<span class="pl-c1">:a</span>, <span class="pl-c1">:b</span>)             <span class="pl-c"><span class="pl-c">#</span> synonym for the moment</span>
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">fieldtypes</span>(nt) <span class="pl-k">==</span> (Float64, String)
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">valtype</span>(nt) <span class="pl-k">==</span> Tuple{Float64, String}
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">fieldvalues</span>(nt) <span class="pl-k">==</span> (<span class="pl-c1">1.0</span>, <span class="pl-s"><span class="pl-pds">"</span>two<span class="pl-pds">"</span></span>)
<span class="pl-c1">true</span></pre></div>
<h3><a id="user-content-use-namedtuple-prototypes" class="anchor" aria-hidden="true" href="#use-namedtuple-prototypes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Use NamedTuple prototypes</h3>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using NamedTupleTools

julia&gt; namedtuple(:a, :b, :c)(1, 2.0, &quot;three&quot;)
(a = 1, b = 2.0, c = &quot;three&quot;)

#=
    namedtuple(  name1, name2, ..  )
    namedtuple( (name1, name2, ..) )
       where the `names` are all `Symbols` or all `Strings`

Generate a NamedTuple prototype by specifying or obtaining the fieldnames.
The prototype is applied to fieldvalues, giving a completed NamedTuple.
=#
julia&gt; nt = (a = 1, b = &quot;two&quot;)
(a = 1, b = &quot;two&quot;)

julia&gt; nt_prototype = prototype(nt)
NamedTuple{(:a, :b),T} where T&lt;:Tuple

julia&gt; nt_prototype = namedtuple(:a, :b)
NamedTuple{(:a, :b),T} where T&lt;:Tuple

julia&gt; nt = nt_prototype(1, 2)
(a = 1, b = 2)

julia&gt; nt = nt_prototype(&quot;A&quot;, 3)
(a = &quot;A&quot;, b = 3)

julia&gt; isprototype(nt_prototype)
true

julia&gt; isprototype(nt)
false
"><pre><span class="pl-k">using</span> NamedTupleTools

julia<span class="pl-k">&gt;</span> <span class="pl-c1">namedtuple</span>(<span class="pl-c1">:a</span>, <span class="pl-c1">:b</span>, <span class="pl-c1">:c</span>)(<span class="pl-c1">1</span>, <span class="pl-c1">2.0</span>, <span class="pl-s"><span class="pl-pds">"</span>three<span class="pl-pds">"</span></span>)
(a <span class="pl-k">=</span> <span class="pl-c1">1</span>, b <span class="pl-k">=</span> <span class="pl-c1">2.0</span>, c <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>three<span class="pl-pds">"</span></span>)

<span class="pl-c"><span class="pl-c">#=</span></span>
<span class="pl-c">    namedtuple(  name1, name2, ..  )</span>
<span class="pl-c">    namedtuple( (name1, name2, ..) )</span>
<span class="pl-c">       where the `names` are all `Symbols` or all `Strings`</span>
<span class="pl-c"></span>
<span class="pl-c">Generate a NamedTuple prototype by specifying or obtaining the fieldnames.</span>
<span class="pl-c">The prototype is applied to fieldvalues, giving a completed NamedTuple.</span>
<span class="pl-c"><span class="pl-c">=#</span></span>
julia<span class="pl-k">&gt;</span> nt <span class="pl-k">=</span> (a <span class="pl-k">=</span> <span class="pl-c1">1</span>, b <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>two<span class="pl-pds">"</span></span>)
(a <span class="pl-k">=</span> <span class="pl-c1">1</span>, b <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>two<span class="pl-pds">"</span></span>)

julia<span class="pl-k">&gt;</span> nt_prototype <span class="pl-k">=</span> <span class="pl-c1">prototype</span>(nt)
NamedTuple{(<span class="pl-c1">:a</span>, <span class="pl-c1">:b</span>),T} <span class="pl-k">where</span> T<span class="pl-k">&lt;:</span><span class="pl-c1">Tuple</span>

julia<span class="pl-k">&gt;</span> nt_prototype <span class="pl-k">=</span> <span class="pl-c1">namedtuple</span>(<span class="pl-c1">:a</span>, <span class="pl-c1">:b</span>)
NamedTuple{(<span class="pl-c1">:a</span>, <span class="pl-c1">:b</span>),T} <span class="pl-k">where</span> T<span class="pl-k">&lt;:</span><span class="pl-c1">Tuple</span>

julia<span class="pl-k">&gt;</span> nt <span class="pl-k">=</span> <span class="pl-c1">nt_prototype</span>(<span class="pl-c1">1</span>, <span class="pl-c1">2</span>)
(a <span class="pl-k">=</span> <span class="pl-c1">1</span>, b <span class="pl-k">=</span> <span class="pl-c1">2</span>)

julia<span class="pl-k">&gt;</span> nt <span class="pl-k">=</span> <span class="pl-c1">nt_prototype</span>(<span class="pl-s"><span class="pl-pds">"</span>A<span class="pl-pds">"</span></span>, <span class="pl-c1">3</span>)
(a <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>A<span class="pl-pds">"</span></span>, b <span class="pl-k">=</span> <span class="pl-c1">3</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">isprototype</span>(nt_prototype)
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">isprototype</span>(nt)
<span class="pl-c1">false</span></pre></div>
<h3><a id="user-content-select" class="anchor" aria-hidden="true" href="#select"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Select</h3>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using NamedTupleTools

julia&gt; nt = (a = 1, b = 2, y = 25, z = 26)
(a = 1, b = 2, y = 25, z = 26)

julia&gt; ay = select(nt, (:a, :y))
(a = 1, y = 25)
"><pre><span class="pl-k">using</span> NamedTupleTools

julia<span class="pl-k">&gt;</span> nt <span class="pl-k">=</span> (a <span class="pl-k">=</span> <span class="pl-c1">1</span>, b <span class="pl-k">=</span> <span class="pl-c1">2</span>, y <span class="pl-k">=</span> <span class="pl-c1">25</span>, z <span class="pl-k">=</span> <span class="pl-c1">26</span>)
(a <span class="pl-k">=</span> <span class="pl-c1">1</span>, b <span class="pl-k">=</span> <span class="pl-c1">2</span>, y <span class="pl-k">=</span> <span class="pl-c1">25</span>, z <span class="pl-k">=</span> <span class="pl-c1">26</span>)

julia<span class="pl-k">&gt;</span> ay <span class="pl-k">=</span> <span class="pl-c1">select</span>(nt, (<span class="pl-c1">:a</span>, <span class="pl-c1">:y</span>))
(a <span class="pl-k">=</span> <span class="pl-c1">1</span>, y <span class="pl-k">=</span> <span class="pl-c1">25</span>)</pre></div>
<h3><a id="user-content-delete" class="anchor" aria-hidden="true" href="#delete"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Delete</h3>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using NamedTupleTools

julia&gt; ntproto = namedtuple( :a, :b, :c );
NamedTuple{(:a, :b, :c),T} where T&lt;:Tuple

julia&gt; delete(ntproto, :b) === namedtuple(:a, :c)
true

julia&gt; fieldnames(delete(ntproto, :b))
NamedTuple{(:a, :c),T} where T&lt;:Tuple

julia&gt; fieldnames(delete(ntproto, (:a, :c)), fieldnames(delete(ntproto, :a, :c)
(:b,), (:b,)

julia&gt; nt = ntproto(1, 2, 3)
(a = 1, b = 2, c = 3)

julia&gt; delete(nt, :a)
(b = 2, c = 3)

julia&gt; delete(nt, :a, :c)
(b = 2,)
"><pre><span class="pl-k">using</span> NamedTupleTools

julia<span class="pl-k">&gt;</span> ntproto <span class="pl-k">=</span> <span class="pl-c1">namedtuple</span>( <span class="pl-c1">:a</span>, <span class="pl-c1">:b</span>, <span class="pl-c1">:c</span> );
NamedTuple{(<span class="pl-c1">:a</span>, <span class="pl-c1">:b</span>, <span class="pl-c1">:c</span>),T} <span class="pl-k">where</span> T<span class="pl-k">&lt;:</span><span class="pl-c1">Tuple</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">delete</span>(ntproto, <span class="pl-c1">:b</span>) <span class="pl-k">===</span> <span class="pl-c1">namedtuple</span>(<span class="pl-c1">:a</span>, <span class="pl-c1">:c</span>)
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">fieldnames</span>(<span class="pl-c1">delete</span>(ntproto, <span class="pl-c1">:b</span>))
NamedTuple{(<span class="pl-c1">:a</span>, <span class="pl-c1">:c</span>),T} <span class="pl-k">where</span> T<span class="pl-k">&lt;:</span><span class="pl-c1">Tuple</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">fieldnames</span>(<span class="pl-c1">delete</span>(ntproto, (<span class="pl-c1">:a</span>, <span class="pl-c1">:c</span>)), <span class="pl-c1">fieldnames</span>(<span class="pl-c1">delete</span>(ntproto, <span class="pl-c1">:a</span>, <span class="pl-c1">:c</span>)
(<span class="pl-c1">:b</span>,), (<span class="pl-c1">:b</span>,)

julia<span class="pl-k">&gt;</span> nt <span class="pl-k">=</span> <span class="pl-c1">ntproto</span>(<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>)
(a <span class="pl-k">=</span> <span class="pl-c1">1</span>, b <span class="pl-k">=</span> <span class="pl-c1">2</span>, c <span class="pl-k">=</span> <span class="pl-c1">3</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">delete</span>(nt, <span class="pl-c1">:a</span>)
(b <span class="pl-k">=</span> <span class="pl-c1">2</span>, c <span class="pl-k">=</span> <span class="pl-c1">3</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">delete</span>(nt, <span class="pl-c1">:a</span>, <span class="pl-c1">:c</span>)
(b <span class="pl-k">=</span> <span class="pl-c1">2</span>,)</pre></div>
<h3><a id="user-content-merge" class="anchor" aria-hidden="true" href="#merge"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Merge</h3>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="# merge from 2..7 NamedTuples

julia&gt; ntproto1 = namedtuple(:a, :b);
julia&gt; ntproto2 = namedtuple(:b, :c);

julia&gt; merge(ntproto1, ntproto2)
NamedTuple{(:a, :b, :c),T} where T&lt;:Tuple
"><pre><span class="pl-c"><span class="pl-c">#</span> merge from 2..7 NamedTuples</span>

julia<span class="pl-k">&gt;</span> ntproto1 <span class="pl-k">=</span> <span class="pl-c1">namedtuple</span>(<span class="pl-c1">:a</span>, <span class="pl-c1">:b</span>);
julia<span class="pl-k">&gt;</span> ntproto2 <span class="pl-k">=</span> <span class="pl-c1">namedtuple</span>(<span class="pl-c1">:b</span>, <span class="pl-c1">:c</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">merge</span>(ntproto1, ntproto2)
NamedTuple{(<span class="pl-c1">:a</span>, <span class="pl-c1">:b</span>, <span class="pl-c1">:c</span>),T} <span class="pl-k">where</span> T<span class="pl-k">&lt;:</span><span class="pl-c1">Tuple</span></pre></div>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; nt1 = (a = 3, b = 5);
julia&gt; nt2 = (c = 8,);

julia&gt; merge(nt1, nt2)
(a = 3, b = 5, c = 8)

julia&gt; nt1 = (a = 3, b = 5);
julia&gt; nt2 = (b = 6, c = 8);

julia&gt; merge(nt1, nt2)
(a = 3, b = 6, c = 8)
"><pre>julia<span class="pl-k">&gt;</span> nt1 <span class="pl-k">=</span> (a <span class="pl-k">=</span> <span class="pl-c1">3</span>, b <span class="pl-k">=</span> <span class="pl-c1">5</span>);
julia<span class="pl-k">&gt;</span> nt2 <span class="pl-k">=</span> (c <span class="pl-k">=</span> <span class="pl-c1">8</span>,);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">merge</span>(nt1, nt2)
(a <span class="pl-k">=</span> <span class="pl-c1">3</span>, b <span class="pl-k">=</span> <span class="pl-c1">5</span>, c <span class="pl-k">=</span> <span class="pl-c1">8</span>)

julia<span class="pl-k">&gt;</span> nt1 <span class="pl-k">=</span> (a <span class="pl-k">=</span> <span class="pl-c1">3</span>, b <span class="pl-k">=</span> <span class="pl-c1">5</span>);
julia<span class="pl-k">&gt;</span> nt2 <span class="pl-k">=</span> (b <span class="pl-k">=</span> <span class="pl-c1">6</span>, c <span class="pl-k">=</span> <span class="pl-c1">8</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">merge</span>(nt1, nt2)
(a <span class="pl-k">=</span> <span class="pl-c1">3</span>, b <span class="pl-k">=</span> <span class="pl-c1">6</span>, c <span class="pl-k">=</span> <span class="pl-c1">8</span>)</pre></div>
<h4><a id="user-content-recursive_merge" class="anchor" aria-hidden="true" href="#recursive_merge"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>recursive_merge</h4>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="#=
Recursively merge namedtuples. Where more than one of the namedtuple args share the same fieldname (same key),
    the leftmost argument's key's value will be propogated. Where each namedtuple has distinct fieldnames (keys),
    all of named fields will be gathered with their respective values. The named fields will appear in the same
    order they are encountered (leftmost arg, second leftmost arg, .., second rightmost arg, rightmost arg).

If there are no nested namedtuples, `merge(nt1, nts..., recursive=true)` is the same as `merge(nt1, nts...)`.
=#

a = (food = (fruits = (orange = &quot;mango&quot;, white = &quot;pear&quot;),
             liquids = (water = &quot;still&quot;, wine = &quot;burgandy&quot;)))

b = (food = (fruits = (yellow = &quot;banana&quot;, orange = &quot;papaya&quot;),
             liquids = (water = &quot;sparkling&quot;, wine = &quot;champagne&quot;), 
             bread = &quot;multigrain&quot;))

merge(b,a)  == (fruits  = (orange = &quot;mango&quot;, white = &quot;pear&quot;), 
                liquids = (water = &quot;still&quot;, wine = &quot;burgandy&quot;),
                bread   = &quot;multigrain&quot;)

merge_recursive(b,a) == 
               (fruits  = (yellow = &quot;banana&quot;, orange = &quot;mango&quot;, white = &quot;pear&quot;), 
                liquids = (water = &quot;still&quot;, wine = &quot;burgandy&quot;),
                bread   = &quot;multigrain&quot;)

merge(a,b)  == (fruits  = (yellow = &quot;banana&quot;, orange = &quot;papaya&quot;),
                liquids = (water = &quot;sparkling&quot;, wine = &quot;champagne&quot;),
                bread   = &quot;multigrain&quot;)

merge_recursive(a,b) == 
               (fruits  = (orange = &quot;papaya&quot;, white = &quot;pear&quot;, yellow = &quot;banana&quot;),
                liquids = (water = &quot;sparkling&quot;, wine = &quot;champagne&quot;),
                bread   = &quot;multigrain&quot;)
"><pre><span class="pl-c"><span class="pl-c">#=</span></span>
<span class="pl-c">Recursively merge namedtuples. Where more than one of the namedtuple args share the same fieldname (same key),</span>
<span class="pl-c">    the leftmost argument's key's value will be propogated. Where each namedtuple has distinct fieldnames (keys),</span>
<span class="pl-c">    all of named fields will be gathered with their respective values. The named fields will appear in the same</span>
<span class="pl-c">    order they are encountered (leftmost arg, second leftmost arg, .., second rightmost arg, rightmost arg).</span>
<span class="pl-c"></span>
<span class="pl-c">If there are no nested namedtuples, `merge(nt1, nts..., recursive=true)` is the same as `merge(nt1, nts...)`.</span>
<span class="pl-c"><span class="pl-c">=#</span></span>

a <span class="pl-k">=</span> (food <span class="pl-k">=</span> (fruits <span class="pl-k">=</span> (orange <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>mango<span class="pl-pds">"</span></span>, white <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>pear<span class="pl-pds">"</span></span>),
             liquids <span class="pl-k">=</span> (water <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>still<span class="pl-pds">"</span></span>, wine <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>burgandy<span class="pl-pds">"</span></span>)))

b <span class="pl-k">=</span> (food <span class="pl-k">=</span> (fruits <span class="pl-k">=</span> (yellow <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>banana<span class="pl-pds">"</span></span>, orange <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>papaya<span class="pl-pds">"</span></span>),
             liquids <span class="pl-k">=</span> (water <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>sparkling<span class="pl-pds">"</span></span>, wine <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>champagne<span class="pl-pds">"</span></span>), 
             bread <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>multigrain<span class="pl-pds">"</span></span>))

<span class="pl-c1">merge</span>(b,a)  <span class="pl-k">==</span> (fruits  <span class="pl-k">=</span> (orange <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>mango<span class="pl-pds">"</span></span>, white <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>pear<span class="pl-pds">"</span></span>), 
                liquids <span class="pl-k">=</span> (water <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>still<span class="pl-pds">"</span></span>, wine <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>burgandy<span class="pl-pds">"</span></span>),
                bread   <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>multigrain<span class="pl-pds">"</span></span>)

<span class="pl-c1">merge_recursive</span>(b,a) <span class="pl-k">==</span> 
               (fruits  <span class="pl-k">=</span> (yellow <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>banana<span class="pl-pds">"</span></span>, orange <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>mango<span class="pl-pds">"</span></span>, white <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>pear<span class="pl-pds">"</span></span>), 
                liquids <span class="pl-k">=</span> (water <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>still<span class="pl-pds">"</span></span>, wine <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>burgandy<span class="pl-pds">"</span></span>),
                bread   <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>multigrain<span class="pl-pds">"</span></span>)

<span class="pl-c1">merge</span>(a,b)  <span class="pl-k">==</span> (fruits  <span class="pl-k">=</span> (yellow <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>banana<span class="pl-pds">"</span></span>, orange <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>papaya<span class="pl-pds">"</span></span>),
                liquids <span class="pl-k">=</span> (water <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>sparkling<span class="pl-pds">"</span></span>, wine <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>champagne<span class="pl-pds">"</span></span>),
                bread   <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>multigrain<span class="pl-pds">"</span></span>)

<span class="pl-c1">merge_recursive</span>(a,b) <span class="pl-k">==</span> 
               (fruits  <span class="pl-k">=</span> (orange <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>papaya<span class="pl-pds">"</span></span>, white <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>pear<span class="pl-pds">"</span></span>, yellow <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>banana<span class="pl-pds">"</span></span>),
                liquids <span class="pl-k">=</span> (water <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>sparkling<span class="pl-pds">"</span></span>, wine <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>champagne<span class="pl-pds">"</span></span>),
                bread   <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>multigrain<span class="pl-pds">"</span></span>)</pre></div>
<h3><a id="user-content-split" class="anchor" aria-hidden="true" href="#split"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Split</h3>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using NamedTupleTools

julia&gt; nt = (a = 1, b = 2, c = 3, d = 4);

julia&gt; split(nt, :a)
((a = 1,), (b = 2, c = 3, d = 4))

julia&gt; split(nt, (:a, :b))
((a = 1, b = 2), (c = 3, d = 4))

julia&gt; merge(split(nt, (:a, :b))...) == nt
true
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> NamedTupleTools

julia<span class="pl-k">&gt;</span> nt <span class="pl-k">=</span> (a <span class="pl-k">=</span> <span class="pl-c1">1</span>, b <span class="pl-k">=</span> <span class="pl-c1">2</span>, c <span class="pl-k">=</span> <span class="pl-c1">3</span>, d <span class="pl-k">=</span> <span class="pl-c1">4</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">split</span>(nt, <span class="pl-c1">:a</span>)
((a <span class="pl-k">=</span> <span class="pl-c1">1</span>,), (b <span class="pl-k">=</span> <span class="pl-c1">2</span>, c <span class="pl-k">=</span> <span class="pl-c1">3</span>, d <span class="pl-k">=</span> <span class="pl-c1">4</span>))

julia<span class="pl-k">&gt;</span> <span class="pl-c1">split</span>(nt, (<span class="pl-c1">:a</span>, <span class="pl-c1">:b</span>))
((a <span class="pl-k">=</span> <span class="pl-c1">1</span>, b <span class="pl-k">=</span> <span class="pl-c1">2</span>), (c <span class="pl-k">=</span> <span class="pl-c1">3</span>, d <span class="pl-k">=</span> <span class="pl-c1">4</span>))

julia<span class="pl-k">&gt;</span> <span class="pl-c1">merge</span>(<span class="pl-c1">split</span>(nt, (<span class="pl-c1">:a</span>, <span class="pl-c1">:b</span>))<span class="pl-k">...</span>) <span class="pl-k">==</span> nt
<span class="pl-c1">true</span></pre></div>
<h3><a id="user-content-struct-construction-conversion" class="anchor" aria-hidden="true" href="#struct-construction-conversion"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Struct construction, conversion</h3>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="using NamedTupleTools

julia&gt; struct MyStruct
           tally::Int
           team::String
       end

julia&gt; mystruct = MyStruct(5, &quot;hometeam&quot;)
MyStruct(5, &quot;hometeam&quot;)

julia&gt; mynamedtuple = ntfromstruct(mystruct)
(tally = 5, team = &quot;hometeam&quot;)

julia&gt; ntstruct = structfromnt(MyStruct, mynamedtuple)
MyStruct(5, &quot;hometeam&quot;)

julia&gt; mystruct == ntstruct
true
"><pre><code>using NamedTupleTools

julia&gt; struct MyStruct
           tally::Int
           team::String
       end

julia&gt; mystruct = MyStruct(5, "hometeam")
MyStruct(5, "hometeam")

julia&gt; mynamedtuple = ntfromstruct(mystruct)
(tally = 5, team = "hometeam")

julia&gt; ntstruct = structfromnt(MyStruct, mynamedtuple)
MyStruct(5, "hometeam")

julia&gt; mystruct == ntstruct
true
</code></pre></div>
<h3><a id="user-content-abstractdict-construction-reconstruction" class="anchor" aria-hidden="true" href="#abstractdict-construction-reconstruction"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>AbstractDict construction, reconstruction</h3>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; nt = (a = 1, b = 2)
(a = 1, b = 2)

julia&gt; convert(Dict, nt)
Dict{Symbol,Int64} with 2 entries:
  :a =&gt; 1
  :b =&gt; 2
  
julia&gt; adict = Dict(:a =&gt; 1, :b =&gt; &quot;two&quot;)
Dict{Symbol,Any} with 2 entries:
  :a =&gt; 1
  :b =&gt; &quot;two&quot;

julia&gt; nt = namedtuple(adict)
(a = 1, b = &quot;two&quot;)

julia&gt; convert(Dict, nt)
Dict{Symbol,Union{Int64, String}} with 2 entries:
  :a =&gt; 1
  :b =&gt; &quot;two&quot;

julia&gt; nt = namedtuple(adict)
(a = 1, b = 2//11, c = &quot;three&quot;)

julia&gt; convert(Dict, nt)
Dict{Symbol,Union{Rational{Int64}, Int64, String}} with 3 entries:
  :a =&gt; 1
  :b =&gt; 2//11
  :c =&gt; &quot;three&quot;

julia&gt; using OrderedCollections: OrderedDict, LittleDict

julia&gt; ldict = OrderedDict(:a =&gt; 1, :b =&gt; &quot;two&quot;)
OrderedDict{Symbol,Any} with 2 entries:
  :a =&gt; 1
  :b =&gt; &quot;two&quot;

julia&gt; nt = namedtuple(ldict)
(a = 1, b = &quot;two&quot;)

julia&gt; convert(LittleDict, nt)
LittleDict{Symbol,Union{Int64, String},Array{Symbol,1},Array{Union{Int64, String},1}} with 2 entries:
  :a =&gt; 1
  :b =&gt; &quot;two&quot;
"><pre>julia<span class="pl-k">&gt;</span> nt <span class="pl-k">=</span> (a <span class="pl-k">=</span> <span class="pl-c1">1</span>, b <span class="pl-k">=</span> <span class="pl-c1">2</span>)
(a <span class="pl-k">=</span> <span class="pl-c1">1</span>, b <span class="pl-k">=</span> <span class="pl-c1">2</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">convert</span>(Dict, nt)
Dict{Symbol,Int64} with <span class="pl-c1">2</span> entries<span class="pl-k">:</span>
  <span class="pl-c1">:a</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1</span>
  <span class="pl-c1">:b</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">2</span>
  
julia<span class="pl-k">&gt;</span> adict <span class="pl-k">=</span> <span class="pl-c1">Dict</span>(<span class="pl-c1">:a</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1</span>, <span class="pl-c1">:b</span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>two<span class="pl-pds">"</span></span>)
Dict{Symbol,Any} with <span class="pl-c1">2</span> entries<span class="pl-k">:</span>
  <span class="pl-c1">:a</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1</span>
  <span class="pl-c1">:b</span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>two<span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> nt <span class="pl-k">=</span> <span class="pl-c1">namedtuple</span>(adict)
(a <span class="pl-k">=</span> <span class="pl-c1">1</span>, b <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>two<span class="pl-pds">"</span></span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">convert</span>(Dict, nt)
Dict{Symbol,Union{Int64, String}} with <span class="pl-c1">2</span> entries<span class="pl-k">:</span>
  <span class="pl-c1">:a</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1</span>
  <span class="pl-c1">:b</span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>two<span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> nt <span class="pl-k">=</span> <span class="pl-c1">namedtuple</span>(adict)
(a <span class="pl-k">=</span> <span class="pl-c1">1</span>, b <span class="pl-k">=</span> <span class="pl-c1">2</span><span class="pl-k">//</span><span class="pl-c1">11</span>, c <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>three<span class="pl-pds">"</span></span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">convert</span>(Dict, nt)
Dict{Symbol,Union{Rational{Int64}, Int64, String}} with <span class="pl-c1">3</span> entries<span class="pl-k">:</span>
  <span class="pl-c1">:a</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1</span>
  <span class="pl-c1">:b</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">2</span><span class="pl-k">//</span><span class="pl-c1">11</span>
  <span class="pl-c1">:c</span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>three<span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> OrderedCollections<span class="pl-k">:</span> OrderedDict, LittleDict

julia<span class="pl-k">&gt;</span> ldict <span class="pl-k">=</span> <span class="pl-c1">OrderedDict</span>(<span class="pl-c1">:a</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1</span>, <span class="pl-c1">:b</span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>two<span class="pl-pds">"</span></span>)
OrderedDict{Symbol,Any} with <span class="pl-c1">2</span> entries<span class="pl-k">:</span>
  <span class="pl-c1">:a</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1</span>
  <span class="pl-c1">:b</span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>two<span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> nt <span class="pl-k">=</span> <span class="pl-c1">namedtuple</span>(ldict)
(a <span class="pl-k">=</span> <span class="pl-c1">1</span>, b <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>two<span class="pl-pds">"</span></span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">convert</span>(LittleDict, nt)
LittleDict{Symbol,Union{Int64, String},Array{Symbol,<span class="pl-c1">1</span>},Array{Union{Int64, String},<span class="pl-c1">1</span>}} with <span class="pl-c1">2</span> entries<span class="pl-k">:</span>
  <span class="pl-c1">:a</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1</span>
  <span class="pl-c1">:b</span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>two<span class="pl-pds">"</span></span></pre></div>
<h3><a id="user-content-vector-of-pairs" class="anchor" aria-hidden="true" href="#vector-of-pairs"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Vector of Pairs</h3>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; vec = [:a =&gt; 1, :b =&gt; 2]
2-element Array{Pair{Symbol,Int64},1}:
 :a =&gt; 1
 :b =&gt; 2

julia&gt; nt = namedtuple(vec)
(a = 1, b = 2)
"><pre>julia<span class="pl-k">&gt;</span> vec <span class="pl-k">=</span> [<span class="pl-c1">:a</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1</span>, <span class="pl-c1">:b</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">2</span>]
<span class="pl-c1">2</span><span class="pl-k">-</span>element Array{Pair{Symbol,Int64},<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">:a</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1</span>
 <span class="pl-c1">:b</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">2</span>

julia<span class="pl-k">&gt;</span> nt <span class="pl-k">=</span> <span class="pl-c1">namedtuple</span>(vec)
(a <span class="pl-k">=</span> <span class="pl-c1">1</span>, b <span class="pl-k">=</span> <span class="pl-c1">2</span>)</pre></div>
<h3><a id="user-content-convert-to-vector-of-pairs" class="anchor" aria-hidden="true" href="#convert-to-vector-of-pairs"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>convert to Vector Of Pairs</h3>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; nt = (a=1, b=2);
julia&gt; convert(Vector{Pair}, nt)
2-element Array{Pair{Symbol,Int64},1}:
 :a =&gt; 1
 :b =&gt; 2
 
nt = (a = 1, b = &quot;two&quot;, c = 3.0);
vec = convert(Vector{Pair}, nt)
3-element Array{Pair{Symbol,B} where B,1}:
 :a =&gt; 1
 :b =&gt; &quot;two&quot;
 :c =&gt; 3.0
"><pre>julia<span class="pl-k">&gt;</span> nt <span class="pl-k">=</span> (a<span class="pl-k">=</span><span class="pl-c1">1</span>, b<span class="pl-k">=</span><span class="pl-c1">2</span>);
julia<span class="pl-k">&gt;</span> <span class="pl-c1">convert</span>(Vector{Pair}, nt)
<span class="pl-c1">2</span><span class="pl-k">-</span>element Array{Pair{Symbol,Int64},<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">:a</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1</span>
 <span class="pl-c1">:b</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">2</span>
 
nt <span class="pl-k">=</span> (a <span class="pl-k">=</span> <span class="pl-c1">1</span>, b <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>two<span class="pl-pds">"</span></span>, c <span class="pl-k">=</span> <span class="pl-c1">3.0</span>);
vec <span class="pl-k">=</span> <span class="pl-c1">convert</span>(Vector{Pair}, nt)
<span class="pl-c1">3</span><span class="pl-k">-</span>element Array{Pair{Symbol,B} <span class="pl-k">where</span> B,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">:a</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1</span>
 <span class="pl-c1">:b</span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>two<span class="pl-pds">"</span></span>
 <span class="pl-c1">:c</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">3.0</span></pre></div>
<h3><a id="user-content-variables-mixed-with-standard-syntax" class="anchor" aria-hidden="true" href="#variables-mixed-with-standard-syntax"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Variables mixed with standard syntax</h3>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; a, b, c, d, f = 1, 1.0, 1//1, &quot;one&quot;, (g=1,)
(1, 1.0, 1//1, &quot;one&quot;, (g = 1,))

julia&gt; nt = @namedtuple(a, b, c, d, e = a + b, f...)
(a = 1, b = 1.0, c = 1//1, d = &quot;one&quot;, e = 2.0, g = 1)
"><pre>julia<span class="pl-k">&gt;</span> a, b, c, d, f <span class="pl-k">=</span> <span class="pl-c1">1</span>, <span class="pl-c1">1.0</span>, <span class="pl-c1">1</span><span class="pl-k">//</span><span class="pl-c1">1</span>, <span class="pl-s"><span class="pl-pds">"</span>one<span class="pl-pds">"</span></span>, (g<span class="pl-k">=</span><span class="pl-c1">1</span>,)
(<span class="pl-c1">1</span>, <span class="pl-c1">1.0</span>, <span class="pl-c1">1</span><span class="pl-k">//</span><span class="pl-c1">1</span>, <span class="pl-s"><span class="pl-pds">"</span>one<span class="pl-pds">"</span></span>, (g <span class="pl-k">=</span> <span class="pl-c1">1</span>,))

julia<span class="pl-k">&gt;</span> nt <span class="pl-k">=</span> <span class="pl-c1">@namedtuple</span>(a, b, c, d, e <span class="pl-k">=</span> a <span class="pl-k">+</span> b, f<span class="pl-k">...</span>)
(a <span class="pl-k">=</span> <span class="pl-c1">1</span>, b <span class="pl-k">=</span> <span class="pl-c1">1.0</span>, c <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">//</span><span class="pl-c1">1</span>, d <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>one<span class="pl-pds">"</span></span>, e <span class="pl-k">=</span> <span class="pl-c1">2.0</span>, g <span class="pl-k">=</span> <span class="pl-c1">1</span>)</pre></div>
<h2><a id="user-content-credits" class="anchor" aria-hidden="true" href="#credits"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Credits</h2>
<ul>
<li>
<p>Construction from names and values</p>
<ul>
<li><em>submitted by Kristoffer Carlsson</em></li>
</ul>
</li>
<li>
<p>Use NamedTuple prototypes</p>
<ul>
<li><em>improved by Chad Scherrer</em></li>
</ul>
</li>
<li>
<p>Select</p>
<ul>
<li><em>submitted by Chad Scherrer</em></li>
</ul>
</li>
<li>
<p>Split</p>
<ul>
<li><em>submitted by Seth Axen</em></li>
</ul>
</li>
<li>
<p>AbstractDict construction, reconstruction</p>
<ul>
<li><em>improved by Kevin Squire</em></li>
</ul>
</li>
<li>
<p>Vector of Pairs</p>
<ul>
<li><em>submitted by Peter Deffebach</em></li>
</ul>
</li>
<li>
<p>Variables mixed with standard syntax</p>
<ul>
<li><em>submitted by Sebastian Pfitzner, Takafumi Arakaki</em></li>
</ul>
</li>
<li>
<p>Delete, Select: inferencing, coverage</p>
<ul>
<li><em>improved by Gustavo Goretkin</em></li>
</ul>
</li>
<li>
<p>Merge: support recursive merging</p>
<ul>
<li><em>submitted by @wytbella</em></li>
</ul>
</li>
</ul>
</article></div>