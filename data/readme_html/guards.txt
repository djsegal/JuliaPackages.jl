<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-guards" class="anchor" aria-hidden="true" href="#guards"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Guards</h1>
<p>Let actors guard your mutable variables!</p>
<p><a href="https://JuliaActors.github.io/Guards.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://JuliaActors.github.io/Guards.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a>
<a href="https://github.com/JuliaActors/Guards.jl/actions"><img src="https://github.com/JuliaActors/Guards.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/JuliaActors/Guards.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/9821f37504bb03d06ebaa7f968cc1aacea631c43cbb110d479be10a4f37b3a0a/68747470733a2f2f636f6465636f762e696f2f67682f4a756c69614163746f72732f4775617264732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/JuliaActors/Guards.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p>With <code>Guards</code> you can wrap mutable variables into a <code>:guard</code> actor. That way they can be safely accessed from parallel threads and distributed worker processes via message passing.</p>
<h2><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using Guards

julia&gt; gd = guard([1,2,3])  # start a guards actor around an array
Guards.Guard{Array{Int64,1}}(Link{Channel{Any}}(Channel{Any}(sz_max:32,sz_curr:0), 1, :guard))

julia&gt; call(gd)             # get a deep copy of it
3-element Array{Int64,1}:
 1
 2
 3

julia&gt; push!(call(gd), 4)   # pushing to it ...
4-element Array{Int64,1}:
 1
 2
 3
 4

julia&gt; call(gd)             # the guarded variable has not changed
3-element Array{Int64,1}:
 1
 2
 3

julia&gt; call(gd, push!, 4);  # if you call it with push!,

julia&gt; @grd gd              # ... it got changed (here using the @grd macro)
4-element Array{Int64,1}:
 1
 2
 3
 4

julia&gt; @grd pop!(gd)        # pop! with the macro
4

julia&gt; update!(gd, [5,6,7,8])
4-element Array{Int64,1}:
 5
 6
 7
 8

julia&gt; @grd gd
4-element Array{Int64,1}:
 5
 6
 7
 8
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Guards

julia<span class="pl-k">&gt;</span> gd <span class="pl-k">=</span> <span class="pl-c1">guard</span>([<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>])  <span class="pl-c"><span class="pl-c">#</span> start a guards actor around an array</span>
Guards<span class="pl-k">.</span><span class="pl-c1">Guard</span><span class="pl-c1">{Array{Int64,1}}</span>(<span class="pl-c1">Link</span><span class="pl-c1">{Channel{Any}}</span>(<span class="pl-c1">Channel</span><span class="pl-c1">{Any}</span>(sz_max<span class="pl-k">:</span><span class="pl-c1">32</span>,sz_curr<span class="pl-k">:</span><span class="pl-c1">0</span>), <span class="pl-c1">1</span>, <span class="pl-c1">:guard</span>))

julia<span class="pl-k">&gt;</span> <span class="pl-c1">call</span>(gd)             <span class="pl-c"><span class="pl-c">#</span> get a deep copy of it</span>
<span class="pl-c1">3</span><span class="pl-k">-</span>element Array{Int64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">1</span>
 <span class="pl-c1">2</span>
 <span class="pl-c1">3</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">push!</span>(<span class="pl-c1">call</span>(gd), <span class="pl-c1">4</span>)   <span class="pl-c"><span class="pl-c">#</span> pushing to it ...</span>
<span class="pl-c1">4</span><span class="pl-k">-</span>element Array{Int64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">1</span>
 <span class="pl-c1">2</span>
 <span class="pl-c1">3</span>
 <span class="pl-c1">4</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">call</span>(gd)             <span class="pl-c"><span class="pl-c">#</span> the guarded variable has not changed</span>
<span class="pl-c1">3</span><span class="pl-k">-</span>element Array{Int64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">1</span>
 <span class="pl-c1">2</span>
 <span class="pl-c1">3</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">call</span>(gd, push!, <span class="pl-c1">4</span>);  <span class="pl-c"><span class="pl-c">#</span> if you call it with push!,</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@grd</span> gd              <span class="pl-c"><span class="pl-c">#</span> ... it got changed (here using the @grd macro)</span>
<span class="pl-c1">4</span><span class="pl-k">-</span>element Array{Int64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">1</span>
 <span class="pl-c1">2</span>
 <span class="pl-c1">3</span>
 <span class="pl-c1">4</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@grd</span> <span class="pl-c1">pop!</span>(gd)        <span class="pl-c"><span class="pl-c">#</span> pop! with the macro</span>
<span class="pl-c1">4</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">update!</span>(gd, [<span class="pl-c1">5</span>,<span class="pl-c1">6</span>,<span class="pl-c1">7</span>,<span class="pl-c1">8</span>])
<span class="pl-c1">4</span><span class="pl-k">-</span>element Array{Int64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">5</span>
 <span class="pl-c1">6</span>
 <span class="pl-c1">7</span>
 <span class="pl-c1">8</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@grd</span> gd
<span class="pl-c1">4</span><span class="pl-k">-</span>element Array{Int64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">5</span>
 <span class="pl-c1">6</span>
 <span class="pl-c1">7</span>
 <span class="pl-c1">8</span></pre></div>
<p><code>Guards</code> is part of <a href="https://github.com/JuliaActors"><code>JuliaActors</code></a>.</p>
<h2><a id="user-content-authors" class="anchor" aria-hidden="true" href="#authors"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Author(s)</h2>
<ul>
<li>Paul Bayer</li>
</ul>
<p><strong>License:</strong> MIT</p>
</article></div>