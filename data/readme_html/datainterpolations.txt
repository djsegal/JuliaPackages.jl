<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-datainterpolationsjl" class="anchor" aria-hidden="true" href="#datainterpolationsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>DataInterpolations.jl</h1>
<p dir="auto"><a href="https://github.com/PumasAI/DataInterpolations.jl/actions/workflows/CI.yml"><img src="https://github.com/PumasAI/DataInterpolations.jl/actions/workflows/CI.yml/badge.svg" alt="CI" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/PumasAI/DataInterpolations.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/7e1571244b9312fbfd89038d4ee875c16097f57dcf9b84dd56f2a85a844dc74d/68747470733a2f2f636f6465636f762e696f2f67682f50756d617341492f44617461496e746572706f6c6174696f6e732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/PumasAI/DataInterpolations.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">DataInterpolations.jl is a library for performing interpolations of one-dimensional data. By
"data interpolations" we mean techniques for interpolating possibly noisy data, and thus
some methods are mixtures of regressions with interpolations (i.e. do not hit the data
points exactly, smoothing out the lines). This library can be used to fill in intermediate
data points in applications like timeseries data.</p>
<h2 dir="auto"><a id="user-content-tutorial--demonstration" class="anchor" aria-hidden="true" href="#tutorial--demonstration"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Tutorial / Demonstration</h2>
<p dir="auto">A tutorial is included and can be found at <a href="https://htmlpreview.github.io/?https://github.com/PumasAI/DataInterpolations.jl/blob/v2.0.0/example/DataInterpolations.html" rel="nofollow">this page</a>. To run the tutorial yourself
locally, use the following Weave commands:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Weave, DataInterpolations
weave(joinpath(dirname(pathof(DataInterpolations)), &quot;../example&quot;, &quot;DataInterpolations.jmd&quot;), out_path=:doc)"><pre><span class="pl-k">using</span> Weave, DataInterpolations
<span class="pl-c1">weave</span>(<span class="pl-c1">joinpath</span>(<span class="pl-c1">dirname</span>(<span class="pl-c1">pathof</span>(DataInterpolations)), <span class="pl-s"><span class="pl-pds">"</span>../example<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>DataInterpolations.jmd<span class="pl-pds">"</span></span>), out_path<span class="pl-k">=</span><span class="pl-c1">:doc</span>)</pre></div>
<h2 dir="auto"><a id="user-content-api" class="anchor" aria-hidden="true" href="#api"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>API</h2>
<p dir="auto">All interpolation objects act as functions. Thus for example, using an interpolation looks like:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="u = rand(5)
t = 0:4
interp = LinearInterpolation(u,t)
interp(3.5) # Gives the linear interpolation value at t=3.5"><pre>u <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">5</span>)
t <span class="pl-k">=</span> <span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">4</span>
interp <span class="pl-k">=</span> <span class="pl-c1">LinearInterpolation</span>(u,t)
<span class="pl-c1">interp</span>(<span class="pl-c1">3.5</span>) <span class="pl-c"><span class="pl-c">#</span> Gives the linear interpolation value at t=3.5</span></pre></div>
<p dir="auto">We can efficiently interpolate onto a vector of new <code>t</code> values:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="t′ = 0.5:1.0:3.5
interp(t′)"><pre>t′ <span class="pl-k">=</span> <span class="pl-c1">0.5</span><span class="pl-k">:</span><span class="pl-c1">1.0</span><span class="pl-k">:</span><span class="pl-c1">3.5</span>
<span class="pl-c1">interp</span>(t′)</pre></div>
<p dir="auto">In-place interpolation also works:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="u′ = similar(u, length(t′))
interp(u′, t′)"><pre>u′ <span class="pl-k">=</span> <span class="pl-c1">similar</span>(u, <span class="pl-c1">length</span>(t′))
<span class="pl-c1">interp</span>(u′, t′)</pre></div>
<p dir="auto">Indexing retrieves the underlying values:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="interp[4] # Gives the 4th value of u"><pre>interp[<span class="pl-c1">4</span>] <span class="pl-c"><span class="pl-c">#</span> Gives the 4th value of u</span></pre></div>
<h2 dir="auto"><a id="user-content-available-interpolations" class="anchor" aria-hidden="true" href="#available-interpolations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Available Interpolations</h2>
<p dir="auto">In all cases, <code>u</code> an <code>AbstractVector</code> of values and <code>t</code> is an <code>AbstractVector</code> of timepoints
corresponding to <code>(u,t)</code> pairs.</p>
<ul dir="auto">
<li>
<p dir="auto"><code>ConstantInterpolation(u,t)</code> - A piecewise constant interpolation.</p>
</li>
<li>
<p dir="auto"><code>LinearInterpolation(u,t)</code> - A linear interpolation.</p>
</li>
<li>
<p dir="auto"><code>QuadraticInterpolation(u,t)</code> - A quadratic interpolation.</p>
</li>
<li>
<p dir="auto"><code>LagrangeInterpolation(u,t,n)</code> - A Lagrange interpolation of order <code>n</code>.</p>
</li>
<li>
<p dir="auto"><code>QuadraticSpline(u,t)</code> - A quadratic spline interpolation.</p>
</li>
<li>
<p dir="auto"><code>CubicSpline(u,t)</code> - A cubic spline interpolation.</p>
</li>
<li>
<p dir="auto"><code>AkimaInterpolation(u, t)</code> - Akima spline interpolation provides a smoothing effect and is computationally efficient.</p>
</li>
<li>
<p dir="auto"><code>BSplineInterpolation(u,t,d,pVec,knotVec)</code> - An interpolation B-spline. This is a B-spline which hits each of the data points. The argument choices are:</p>
<ul dir="auto">
<li><code>d</code> - degree of B-spline</li>
<li><code>pVec</code> - Symbol to Parameters Vector, <code>pVec = :Uniform</code> for uniform spaced parameters and <code>pVec = :ArcLen</code> for parameters generated by chord length method.</li>
<li><code>knotVec</code> - Symbol to Knot Vector, <code>knotVec = :Uniform</code> for uniform knot vector, <code>knotVec = :Average</code> for average spaced knot vector.</li>
</ul>
</li>
<li>
<p dir="auto"><code>BSplineApprox(u,t,d,h,pVec,knotVec)</code> - A regression B-spline which smooths the fitting curve. The argument choices are the same as the <code>BSplineInterpolation</code>, with the additional parameter <code>h&lt;length(t)</code> which is the number of control points to use, with smaller <code>h</code> indicating more smoothing.</p>
</li>
</ul>
<h2 dir="auto"><a id="user-content-extension-methods" class="anchor" aria-hidden="true" href="#extension-methods"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Extension Methods</h2>
<p dir="auto">The follow methods require extra dependencies and will be loaded as package extensions.</p>
<ul dir="auto">
<li><code>Curvefit(u,t,m,p,alg)</code> - An interpolation which is done by fitting a user-given functional form <code>m(t,p)</code> where <code>p</code> is the vector of parameters. The user's input <code>p</code> is a an initial value for a least-square fitting, <code>alg</code> is the algorithm choice to use for optimize the cost function (sum of squared deviations) via <code>Optim.jl</code> and optimal <code>p</code>s are used in the interpolation. Requires <code>using RegularizationTools</code></li>
</ul>
<h2 dir="auto"><a id="user-content-plotting" class="anchor" aria-hidden="true" href="#plotting"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Plotting</h2>
<p dir="auto">DataInterpolations.jl is tied into the Plots.jl ecosystem, by way of RecipesBase.<br>
Any interpolation can be plotted using the <code>plot</code> command (or any other), since they have type recipes associated with them.</p>
<p dir="auto">For convenience, and to allow keyword arguments to propagate properly, DataInterpolations.jl also defines several series types, corresponding to different interpolations.</p>
<p dir="auto">The series types defined are:</p>
<ul dir="auto">
<li><code>:linear_interp</code></li>
<li><code>:quadratic_interp</code></li>
<li><code>:lagrange_interp</code></li>
<li><code>:quadratic_spline</code></li>
<li><code>:cubic_spline</code></li>
</ul>
<p dir="auto">By and large, these accept the same keywords as their function counterparts.</p>
</article></div>