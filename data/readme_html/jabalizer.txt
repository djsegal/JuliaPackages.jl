<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-jabalizer" class="anchor" aria-hidden="true" href="#jabalizer"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Jabalizer</h1>
<p dir="auto"><a href="https://github.com/madhavkrishnan/Jabalizer.jl/actions"><img src="https://github.com/QSI-BAQS/Jabalizer.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://ci.appveyor.com/project/madhavkrishnan/Jabalizer-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/5513fb3d5571cb3e56e5e263fc08b0f184db2f9f4a3f23b30a6a2a5112068774/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f6769746875622f5153492d424151532f4a6162616c697a65722e6a6c3f7376673d74727565" alt="Build Status" data-canonical-src="https://ci.appveyor.com/api/projects/status/github/QSI-BAQS/Jabalizer.jl?svg=true" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/QSI-BAQS/Jabalizer.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/ba021808e777ade1169c07124cee33092d715363ee822facf049b727c70207ec/68747470733a2f2f636f6465636f762e696f2f67682f5153492d424151532f4a6162616c697a65722e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/QSI-BAQS/Jabalizer.jl/branch/main/graph/badge.svg" style="max-width: 100%;"></a>
<a href="https://coveralls.io/github/QSI-BAQS/Jabalizer.jl?branch=main" rel="nofollow"><img src="https://camo.githubusercontent.com/75994bce95c5d2dc66747cfde1176116f0ac4f5fd96431ee62437d063f93f429/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f5153492d424151532f4a6162616c697a65722e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage" data-canonical-src="https://coveralls.io/repos/github/QSI-BAQS/Jabalizer.jl/badge.svg?branch=master" style="max-width: 100%;"></a></p>
<h1 dir="auto"><a id="user-content-developers" class="anchor" aria-hidden="true" href="#developers"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Developers</h1>
<ul dir="auto">
<li>Madhav Krishnan Vijayan (<a href="mailto:mkv.215@gmail.com">mkv.215@gmail.com</a>)</li>
<li>Simon Devitt</li>
<li>Peter Rohde (<a href="mailto:dr.rohde@gmail.com">dr.rohde@gmail.com</a>, <a href="https://www.peterrohde.org" rel="nofollow">www.peterrohde.org</a>)</li>
<li>Alexandru Paler</li>
<li>Casey Myers</li>
<li>Jason Gavriel</li>
<li>Michał Stęchły(<a href="mailto:michal.stechly@zapatacomputing.com">michal.stechly@zapatacomputing.com</a>)</li>
<li>Scott Jones (<a href="mailto:scott@gandalfsoftware.com">scott@gandalfsoftware.com</a>)</li>
<li>Athena Caesura</li>
</ul>
<h1 dir="auto"><a id="user-content-about" class="anchor" aria-hidden="true" href="#about"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>About</h1>
<p dir="auto">Jabalizer is a quantum graph state compiler for quantum circuits written in Julia. It has the functionality to manipulate stabilizer states and graph states and provides generic functions able to operate within both pictures and dynamically convert between them, allowing arbitrary Clifford circuits to be simulated and converted into graph state language, and vice-versa.</p>
<p dir="auto">Jabalizer also provides functionality to convert Clifford + T gate circuits to an aglorithm specific graph state using the <code>icm</code> module. The computation can now be implemented by passing this graph state and a measurement procedure to a quantum backend.</p>
<p dir="auto">You can learn more about the Julia language at <a href="https://www.julialang.org" rel="nofollow">www.julialang.org</a>.</p>
<h1 dir="auto"><a id="user-content-technical-manuscript" class="anchor" aria-hidden="true" href="#technical-manuscript"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Technical Manuscript</h1>
<p dir="auto">A techical paper on Jabalizer can be found here <a href="https://arxiv.org/abs/2209.07345" rel="nofollow">https://arxiv.org/abs/2209.07345</a></p>
<h1 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h1>
<p dir="auto">Jabalizer can be installed like any Julia package.</p>
<p dir="auto">type <code>]</code> in the Julia REPL to enter the pkg mode and enter</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="pkg&gt; add Jabalizer"><pre class="notranslate"><code>pkg&gt; add Jabalizer
</code></pre></div>
<p dir="auto">The module can be tested using</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="pkg&gt; test Jabalizer"><pre class="notranslate"><code>pkg&gt; test Jabalizer
</code></pre></div>
<h1 dir="auto"><a id="user-content-stabilizer-circuits" class="anchor" aria-hidden="true" href="#stabilizer-circuits"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Stabilizer circuits</h1>
<p dir="auto">While simulating arbitrary quantum circuits is classically inefficient with exponential resource overhead, via the <a href="https://arxiv.org/abs/quant-ph/9807006" rel="nofollow">Gottesman-Knill theorem</a> it is known that circuits comprising only Clifford operations (ones that commute with the Pauli group) can be efficiently simulated using the stabilizer formalism. In the stabilizer formalism an <em>n</em>-qubit state is defined as the simultaneous positive eigenstate of <em>n</em> 'stabilizers', each of which is an <em>n</em>-fold tensor product of Pauli operators (<em>I</em>,<em>X</em>,<em>Y</em>,<em>Z</em>) and a sign (+/-). That is, for each stabilizer <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="1a21190d4338501e7ef614dc8073792c">$S_i$</math-renderer> (for <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="1a21190d4338501e7ef614dc8073792c">$i\in 1\dots n$</math-renderer>) the state,</p>
<p dir="auto"><math-renderer class="js-display-math" style="display: block" data-static-url="https://github.githubassets.com/static" data-run-id="1a21190d4338501e7ef614dc8073792c">$$ |\psi\rangle $$</math-renderer></p>
<p dir="auto">satisfies</p>
<p dir="auto"><math-renderer class="js-display-math" style="display: block" data-static-url="https://github.githubassets.com/static" data-run-id="1a21190d4338501e7ef614dc8073792c">$$ S_i|\psi\rangle = |\psi\rangle. $$</math-renderer></p>
<p dir="auto">As an example, the Bell state</p>
<p dir="auto"><math-renderer class="js-display-math" style="display: block" data-static-url="https://github.githubassets.com/static" data-run-id="1a21190d4338501e7ef614dc8073792c">$$ \frac{1}{\sqrt{2}}(|00\rangle + |11\rangle) $$</math-renderer></p>
<p dir="auto">can equivalently be represented by the two stabilizers</p>
<p dir="auto"><math-renderer class="js-display-math" style="display: block" data-static-url="https://github.githubassets.com/static" data-run-id="1a21190d4338501e7ef614dc8073792c">$$ S_1 = XX, $$</math-renderer></p>
<p dir="auto"><math-renderer class="js-display-math" style="display: block" data-static-url="https://github.githubassets.com/static" data-run-id="1a21190d4338501e7ef614dc8073792c">$$ S_2 = ZZ. $$</math-renderer></p>
<p dir="auto">The orthogonal Bell state</p>
<p dir="auto"><math-renderer class="js-display-math" style="display: block" data-static-url="https://github.githubassets.com/static" data-run-id="1a21190d4338501e7ef614dc8073792c">$$ \frac{1}{\sqrt{2}}(|01\rangle + |10\rangle) $$</math-renderer></p>
<p dir="auto">differs only slightly with stabilizers,</p>
<p dir="auto"><math-renderer class="js-display-math" style="display: block" data-static-url="https://github.githubassets.com/static" data-run-id="1a21190d4338501e7ef614dc8073792c">$$ S_1 = XX, $$</math-renderer></p>
<p dir="auto"><math-renderer class="js-display-math" style="display: block" data-static-url="https://github.githubassets.com/static" data-run-id="1a21190d4338501e7ef614dc8073792c">$$ S_2 = -ZZ. $$</math-renderer></p>
<p dir="auto">Similarly, the three-qubit GHZ state</p>
<p dir="auto"><math-renderer class="js-display-math" style="display: block" data-static-url="https://github.githubassets.com/static" data-run-id="1a21190d4338501e7ef614dc8073792c">$$ \frac{1}{\sqrt{2}}(|000\rangle + |111\rangle) $$</math-renderer></p>
<p dir="auto">can be represented by the three stabilizers,</p>
<p dir="auto"><math-renderer class="js-display-math" style="display: block" data-static-url="https://github.githubassets.com/static" data-run-id="1a21190d4338501e7ef614dc8073792c">$$ S_1 = XXX, $$</math-renderer></p>
<p dir="auto"><math-renderer class="js-display-math" style="display: block" data-static-url="https://github.githubassets.com/static" data-run-id="1a21190d4338501e7ef614dc8073792c">$$ S_2 = ZZI, $$</math-renderer></p>
<p dir="auto"><math-renderer class="js-display-math" style="display: block" data-static-url="https://github.githubassets.com/static" data-run-id="1a21190d4338501e7ef614dc8073792c">$$ S_3 = IZZ. $$</math-renderer></p>
<p dir="auto">Evolving stabilizer states can be performed in the Heisenberg picture by conjugating the stabilizers with the unitary operations acting upon the state since for the evolution,</p>
<p dir="auto"><math-renderer class="js-display-math" style="display: block" data-static-url="https://github.githubassets.com/static" data-run-id="1a21190d4338501e7ef614dc8073792c">$$ |\psi'\rangle = U |\psi\rangle, $$</math-renderer></p>
<p dir="auto">we can equivalently write,</p>
<p dir="auto"><math-renderer class="js-display-math" style="display: block" data-static-url="https://github.githubassets.com/static" data-run-id="1a21190d4338501e7ef614dc8073792c">$$ |\psi'\rangle = U S_i |\psi\rangle = U S_i U^\dagger U |\psi\rangle = U S_i U^\dagger |\psi'\rangle = S_i' |\psi'\rangle, $$</math-renderer></p>
<p dir="auto">where,</p>
<p dir="auto"><math-renderer class="js-display-math" style="display: block" data-static-url="https://github.githubassets.com/static" data-run-id="1a21190d4338501e7ef614dc8073792c">$$ S_i' = U S_i U^\dagger, $$</math-renderer></p>
<p dir="auto">stabilizes the evolved state</p>
<p dir="auto"><math-renderer class="js-display-math" style="display: block" data-static-url="https://github.githubassets.com/static" data-run-id="1a21190d4338501e7ef614dc8073792c">$$|\psi'\rangle = U |\psi\rangle. $$</math-renderer></p>
<p dir="auto">Thus the rule for evolving states in the stabilizer formalism is to simply update each of the <em>n</em> stabilizers via</p>
<p dir="auto"><math-renderer class="js-display-math" style="display: block" data-static-url="https://github.githubassets.com/static" data-run-id="1a21190d4338501e7ef614dc8073792c">$$ S_i' = U S_i U^\dagger. $$</math-renderer></p>
<p dir="auto">The efficiency of classically simulating stabilizer circuits was subsequently improved upon by <a href="https://arxiv.org/abs/quant-ph/0406196" rel="nofollow">Aaronson &amp; Gottesman</a> using the so-called CHP approach which tracks both stabilizers and anti-stabilizers, improving the performance of measurements within this model. Jabalizer employs the highly-optimised <a href="https://github.com/quantumlib/Stim">STIM simulator</a> as its CHP backend.</p>
<h1 dir="auto">
<a id="user-content-graph-states" class="anchor" aria-hidden="true" href="#graph-states"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Graph states</h1>
<p dir="auto">A graph state is defined as a set of <em>n</em> qubits represented as vertices in a graph, where qubits are initialised into the</p>
<p dir="auto"><math-renderer class="js-display-math" style="display: block" data-static-url="https://github.githubassets.com/static" data-run-id="1a21190d4338501e7ef614dc8073792c">$$ |+\rangle = \frac{1}{\sqrt{2}}(|0\rangle + |1\rangle) $$</math-renderer></p>
<p dir="auto">state and edges between them represent the application of controlled-phase (CZ) gates. This leads to the general stabilizer representation for graph states,</p>
<p dir="auto"><math-renderer class="js-display-math" style="display: block" data-static-url="https://github.githubassets.com/static" data-run-id="1a21190d4338501e7ef614dc8073792c">$$ S_i = X_i \prod_{j\in n_i} Z_j, $$</math-renderer></p>
<p dir="auto">for each qubit <em>i</em>, where $$ n_i $$ denotes the graph neighbourhood of vertex <em>i</em>.</p>
<p dir="auto">For example, the set of stabilizers associated with the graph,</p>
<p align="center" dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://user-images.githubusercontent.com/4382522/123741542-96930b80-d8ed-11eb-9b9a-1caf37f5fcf0.jpeg"><img src="https://user-images.githubusercontent.com/4382522/123741542-96930b80-d8ed-11eb-9b9a-1caf37f5fcf0.jpeg" width="50%" style="max-width: 100%;"></a></p>

<p dir="auto">is given by,</p>
<p dir="auto"><math-renderer class="js-display-math" style="display: block" data-static-url="https://github.githubassets.com/static" data-run-id="1a21190d4338501e7ef614dc8073792c">$$ S_1 = XZII, $$</math-renderer></p>
<p dir="auto"><math-renderer class="js-display-math" style="display: block" data-static-url="https://github.githubassets.com/static" data-run-id="1a21190d4338501e7ef614dc8073792c">$$ S_2 = ZXZZ, $$</math-renderer></p>
<p dir="auto"><math-renderer class="js-display-math" style="display: block" data-static-url="https://github.githubassets.com/static" data-run-id="1a21190d4338501e7ef614dc8073792c">$$ S_3 = IZXZ, $$</math-renderer></p>
<p dir="auto"><math-renderer class="js-display-math" style="display: block" data-static-url="https://github.githubassets.com/static" data-run-id="1a21190d4338501e7ef614dc8073792c">$$ S_4 = IZZX. $$</math-renderer></p>
<p dir="auto">Viewing this as a matrix note that the <em>X</em> operators appear along the main diagonal, which the locations of the <em>Z</em> operators define the adjacency matrix for the graph.</p>
<p dir="auto">All stabilizer states can be converted to graph states via local operations, achieved via a tailored Gaussian elimination procedure on the stabilizer tableau. Jabalizer allows an arbitrary stabilizer state to be converted to a locally equivalent graph state and provide the associated adjacency matrix for the respective graph.</p>
<h1 dir="auto">
<a id="user-content-example-code" class="anchor" aria-hidden="true" href="#example-code"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example code</h1>
<p dir="auto">Here's some simple Jabalizer code that executes the gate sequence used to generate a GHZ state, display the associated set of stabilizers, and then convert it to its locally equivalent graph state, which is then manipulated via several Pauli measurements and finally converted back to stabilizer form.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Jabalizer

# Prepare a 6-qubit GHZ state
n = 6
state = zero_state(n)
Jabalizer.H(1)(state)
Jabalizer.CNOT(1,2)(state)
Jabalizer.CNOT(1,3)(state)
Jabalizer.CNOT(1,4)(state)
Jabalizer.CNOT(1,5)(state)
Jabalizer.CNOT(1,6)(state)

# Display the stabilizer tableau
Jabalizer.update_tableau(state)
tab = Jabalizer.to_tableau(state)
display(tab)

# Convert to graph state
graphState = GraphState(state)

# Display graph adjacency matrix
display(graphState.A)

# Plot graph
Jabalizer.gplot(Jabalizer.Graph(graphState.A))

# Convert back to stabilizer state
stabState = StabilizerState(graphState)"><pre><span class="pl-k">using</span> Jabalizer

<span class="pl-c"><span class="pl-c">#</span> Prepare a 6-qubit GHZ state</span>
n <span class="pl-k">=</span> <span class="pl-c1">6</span>
state <span class="pl-k">=</span> <span class="pl-c1">zero_state</span>(n)
Jabalizer<span class="pl-k">.</span><span class="pl-c1">H</span>(<span class="pl-c1">1</span>)(state)
Jabalizer<span class="pl-k">.</span><span class="pl-c1">CNOT</span>(<span class="pl-c1">1</span>,<span class="pl-c1">2</span>)(state)
Jabalizer<span class="pl-k">.</span><span class="pl-c1">CNOT</span>(<span class="pl-c1">1</span>,<span class="pl-c1">3</span>)(state)
Jabalizer<span class="pl-k">.</span><span class="pl-c1">CNOT</span>(<span class="pl-c1">1</span>,<span class="pl-c1">4</span>)(state)
Jabalizer<span class="pl-k">.</span><span class="pl-c1">CNOT</span>(<span class="pl-c1">1</span>,<span class="pl-c1">5</span>)(state)
Jabalizer<span class="pl-k">.</span><span class="pl-c1">CNOT</span>(<span class="pl-c1">1</span>,<span class="pl-c1">6</span>)(state)

<span class="pl-c"><span class="pl-c">#</span> Display the stabilizer tableau</span>
Jabalizer<span class="pl-k">.</span><span class="pl-c1">update_tableau</span>(state)
tab <span class="pl-k">=</span> Jabalizer<span class="pl-k">.</span><span class="pl-c1">to_tableau</span>(state)
<span class="pl-c1">display</span>(tab)

<span class="pl-c"><span class="pl-c">#</span> Convert to graph state</span>
graphState <span class="pl-k">=</span> <span class="pl-c1">GraphState</span>(state)

<span class="pl-c"><span class="pl-c">#</span> Display graph adjacency matrix</span>
<span class="pl-c1">display</span>(graphState<span class="pl-k">.</span>A)

<span class="pl-c"><span class="pl-c">#</span> Plot graph</span>
Jabalizer<span class="pl-k">.</span><span class="pl-c1">gplot</span>(Jabalizer<span class="pl-k">.</span><span class="pl-c1">Graph</span>(graphState<span class="pl-k">.</span>A))

<span class="pl-c"><span class="pl-c">#</span> Convert back to stabilizer state</span>
stabState <span class="pl-k">=</span> <span class="pl-c1">StabilizerState</span>(graphState)</pre></div>
<p dir="auto">Produces the output:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="
6×13 Matrix{Int64}:
 1  1  1  1  1  1  0  0  0  0  0  0  0
 0  0  0  0  0  0  1  1  0  0  0  0  0
 0  0  0  0  0  0  1  0  1  0  0  0  0
 0  0  0  0  0  0  1  0  0  1  0  0  0
 0  0  0  0  0  0  1  0  0  0  1  0  0
 0  0  0  0  0  0  1  0  0  0  0  1  0

6×6 Matrix{Int64}:
 0  1  1  1  1  1
 1  0  0  0  0  0
 1  0  0  0  0  0
 1  0  0  0  0  0
 1  0  0  0  0  0"><pre><span class="pl-c1">6</span><span class="pl-k">×</span><span class="pl-c1">13</span> Matrix{Int64}<span class="pl-k">:</span>
 <span class="pl-c1">1</span>  <span class="pl-c1">1</span>  <span class="pl-c1">1</span>  <span class="pl-c1">1</span>  <span class="pl-c1">1</span>  <span class="pl-c1">1</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>
 <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">1</span>  <span class="pl-c1">1</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>
 <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">1</span>  <span class="pl-c1">0</span>  <span class="pl-c1">1</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>
 <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">1</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">1</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>
 <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">1</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">1</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>
 <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">1</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">1</span>  <span class="pl-c1">0</span>

<span class="pl-c1">6</span><span class="pl-k">×</span><span class="pl-c1">6</span> Matrix{Int64}<span class="pl-k">:</span>
 <span class="pl-c1">0</span>  <span class="pl-c1">1</span>  <span class="pl-c1">1</span>  <span class="pl-c1">1</span>  <span class="pl-c1">1</span>  <span class="pl-c1">1</span>
 <span class="pl-c1">1</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>
 <span class="pl-c1">1</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>
 <span class="pl-c1">1</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>
 <span class="pl-c1">1</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span></pre></div>
<p align="center" dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://user-images.githubusercontent.com/4382522/123879677-b45f7f80-d984-11eb-8590-67a3714eec71.png"><img src="https://user-images.githubusercontent.com/4382522/123879677-b45f7f80-d984-11eb-8590-67a3714eec71.png" width="50%" style="max-width: 100%;"></a></p>
<h1 dir="auto">
<a id="user-content-acknowledgements" class="anchor" aria-hidden="true" href="#acknowledgements"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Acknowledgements</h1>
<p dir="auto">We especially thank <a href="https://algassert.com" rel="nofollow">Craig Gidney</a> and co-developers for developing the <a href="https://github.com/quantumlib/Stim">STIM package</a> which provides the CHP backend upon which Jabalizer is based, and especially for implementing some modifications that provided the functionality necessary for this integration. The technical whitepaper for STIM is available <a href="https://arxiv.org/abs/2103.02202" rel="nofollow">here</a>.</p>
</article></div>