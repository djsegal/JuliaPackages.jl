<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-genomicannotationsjl" class="anchor" aria-hidden="true" href="#genomicannotationsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>GenomicAnnotations.jl</h1>
<p><a href="https://kdyrhage.github.io/GenomicAnnotations.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/3e353c26ddfe819150acbc732248f4f2a37f5175/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a></p>
<h2><a id="user-content-description" class="anchor" aria-hidden="true" href="#description"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Description</h2>
<p>GenomicAnnotations is a package for reading, modifying, and writing genomic annotations in the GenBank format.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Installation</h2>
<p>GenomicAnnotations depends on <a href="https://github.com/BioJulia/BioSequences.jl">BioSequences</a>, which is registered in <a href="https://github.com/BioJulia/BioJuliaRegistry">BioJuliaRegistry</a>. To install it you must first add the registry to Julia's package manager:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span>]
pkg<span class="pl-k">&gt;</span> registry add https<span class="pl-k">:</span><span class="pl-k">//</span>github<span class="pl-k">.</span>com<span class="pl-k">/</span>BioJulia<span class="pl-k">/</span>BioJuliaRegistry<span class="pl-k">.</span>git
pkg<span class="pl-k">&gt;</span> add GenomicAnnotations</pre></div>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Usage</h2>
<p>GenBank files are read with <code>readgbk(input)</code>, which returns a vector of <code>Chromosome</code>s. <code>input</code> can be an <code>IOStream</code> or a file path. GZipped data can be read by setting the keyword <code>gunzip</code> to true, which is done automatically if a filename ending in ".gz" is passed as <code>input</code>. If we're only interested in the first chromosome in <code>example.gbk</code> we only need to store the first element.</p>
<div class="highlight highlight-source-julia"><pre>chr <span class="pl-k">=</span> <span class="pl-c1">readgbk</span>(<span class="pl-s"><span class="pl-pds">"</span>test/example.gbk<span class="pl-pds">"</span></span>)[<span class="pl-c1">1</span>]</pre></div>
<p><code>Chromosome</code>s have five fields, <code>name</code>, <code>header</code>, <code>genes</code>, <code>genedata</code>, and <code>sequence</code>. The <code>name</code> is read from the <code>header</code>, which is stored as a string. The annotation data is stored in <code>genedata</code>, but generally you should use <code>genes</code> to access that data. For example, it can be used to iterate over annotations, and to modify them.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">for</span> gene <span class="pl-k">in</span> chr<span class="pl-k">.</span>genes
    gene<span class="pl-k">.</span>locus_tag <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span><span class="pl-v">$(chr<span class="pl-k">.</span>name)</span>_<span class="pl-v">$(gene<span class="pl-k">.</span>locus_tag)</span><span class="pl-pds">"</span></span>
<span class="pl-k">end</span>

chr<span class="pl-k">.</span>genes[<span class="pl-c1">2</span>]<span class="pl-k">.</span>locus_tag <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>test123<span class="pl-pds">"</span></span></pre></div>
<p>Accessing properties that haven't been stored will return missing. For this reason, it often makes more sense to use <code>get()</code> than to access the property directly.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span> chr.genes[2].pseudo returns missing, so this will throw an error</span>
<span class="pl-k">if</span> chr<span class="pl-k">.</span>genes[<span class="pl-c1">2</span>]<span class="pl-k">.</span>pseudo
    <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>Gene 2 is a pseudogene<span class="pl-pds">"</span></span>)
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> ... but this works:</span>
<span class="pl-k">if</span> <span class="pl-c1">get</span>(chr<span class="pl-k">.</span>genes[<span class="pl-c1">2</span>], <span class="pl-c1">:pseudo</span>, <span class="pl-c1">false</span>)
    <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>Gene 2 is a pseudogene<span class="pl-pds">"</span></span>)
<span class="pl-k">end</span></pre></div>
<p>The macro <code>@genes</code> can be used to filter through the annotations. The macro takes a <code>Chromosome</code> or a <code>Vector{Chromosome}</code>, followed by any number of expressions that will be evaluated for each gene. The keyword <code>gene</code> is used to refer to the individual <code>Gene</code>s. <code>@genes</code> can also be used to modify annotations. Gene attributes can be referred to using <code>Symbol</code>s.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">@genes</span>(chr, <span class="pl-c1">feature</span>(gene) <span class="pl-k">==</span> <span class="pl-s"><span class="pl-pds">"</span>CDS<span class="pl-pds">"</span></span>)  <span class="pl-c"><span class="pl-c">#</span> Returns all coding regions</span>
<span class="pl-c1">@genes</span>(chr, <span class="pl-c1">length</span>(gene) <span class="pl-k">&gt;</span> <span class="pl-c1">300</span>) <span class="pl-c"><span class="pl-c">#</span> Returns all features longer than 300 nt</span>
<span class="pl-c1">@genes</span>(chr, <span class="pl-c1">iscomplement</span>(gene)) <span class="pl-c"><span class="pl-c">#</span> Returns all features on the complement strand</span>
<span class="pl-c1">@genes</span>(chr, <span class="pl-c1">ismissing</span>(<span class="pl-c1">:product</span>)) <span class="pl-c"><span class="pl-c">#</span> Returns all features for which the attribute "product" has not been set</span>

<span class="pl-c"><span class="pl-c">#</span> Some short-hand forms are available to make life easier:</span>
<span class="pl-c"><span class="pl-c">#</span>     `CDS` expands to `feature(gene) == "CDS"`, and</span>
<span class="pl-c"><span class="pl-c">#</span>     `get(s::Symbol, default)` expands to `get(gene, s, default)`</span>
<span class="pl-c"><span class="pl-c">#</span> The following two are thus equivalent:</span>
<span class="pl-c1">@genes</span>(chr, <span class="pl-c1">feature</span>(gene) <span class="pl-k">==</span> <span class="pl-s"><span class="pl-pds">"</span>CDS<span class="pl-pds">"</span></span>, <span class="pl-c1">occursin</span>(<span class="pl-s"><span class="pl-pds">"</span>glycoprotein<span class="pl-pds">"</span></span>, <span class="pl-c1">get</span>(gene, <span class="pl-c1">:product</span>, <span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>)))
<span class="pl-c1">@genes</span>(chr,                   CDS,  <span class="pl-c1">occursin</span>(<span class="pl-s"><span class="pl-pds">"</span>glycoprotein<span class="pl-pds">"</span></span>, <span class="pl-c1">get</span>(      <span class="pl-c1">:product</span>, <span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>)))

<span class="pl-c"><span class="pl-c">#</span> All arguments have to evaluate to `true` for a gene to be included, so the following expressions are equivalent:</span>
<span class="pl-c1">@genes</span>(chr, <span class="pl-c1">feature</span>(gene) <span class="pl-k">==</span> <span class="pl-s"><span class="pl-pds">"</span>CDS<span class="pl-pds">"</span></span>, <span class="pl-c1">length</span>(gene) <span class="pl-k">&gt;</span> <span class="pl-c1">300</span>)
<span class="pl-c1">@genes</span>(chr, (<span class="pl-c1">feature</span>(gene) <span class="pl-k">==</span> <span class="pl-s"><span class="pl-pds">"</span>CDS<span class="pl-pds">"</span></span>) <span class="pl-k">&amp;&amp;</span> (<span class="pl-c1">length</span>(gene) <span class="pl-k">&gt;</span> <span class="pl-c1">300</span>))

<span class="pl-c"><span class="pl-c">#</span> `@genes` returns a `Vector{Gene}`. Attributes can be accessed with dot-syntax, and can be assigned to:</span>
<span class="pl-c1">@genes</span>(chr, <span class="pl-c1">:locus_tag</span> <span class="pl-k">==</span> <span class="pl-s"><span class="pl-pds">"</span>tag03<span class="pl-pds">"</span></span>)[<span class="pl-c1">1</span>]<span class="pl-k">.</span>pseudo <span class="pl-k">=</span> <span class="pl-c1">true</span>
<span class="pl-c1">@genes</span>(chr, CDS, <span class="pl-c1">ismissing</span>(<span class="pl-c1">:gene</span>))<span class="pl-k">.</span>gene <span class="pl-k">.=</span> <span class="pl-s"><span class="pl-pds">"</span>unknown<span class="pl-pds">"</span></span></pre></div>
<p>Gene sequences can be accessed with <code>sequence(gene)</code>. For example, the following code will write the translated sequences of all protein-coding genes to a file:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> BioSequences
<span class="pl-k">using</span> FASTX
<span class="pl-c1">open</span>(FASTA<span class="pl-k">.</span>Writer, <span class="pl-s"><span class="pl-pds">"</span>proteins.fasta<span class="pl-pds">"</span></span>) <span class="pl-k">do</span> w
    <span class="pl-k">for</span> gene <span class="pl-k">in</span> <span class="pl-c1">@genes</span>(chr, CDS)
        aaseq <span class="pl-k">=</span> <span class="pl-c1">sequence</span>(gene; translate <span class="pl-k">=</span> <span class="pl-c1">true</span>)
        <span class="pl-c1">write</span>(w, FASTA<span class="pl-k">.</span><span class="pl-c1">record</span>(gene<span class="pl-k">.</span>locus_tag, <span class="pl-c1">get</span>(<span class="pl-c1">:product</span>, <span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>), aaseq))
    <span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>
<p>Genes can be added using <code>addgene!</code>, and <code>sort!</code> can be used to make sure that the resulting annotations are in the correct order for printing. <code>delete!</code> is used to remove genes.</p>
<div class="highlight highlight-source-julia"><pre>newgene <span class="pl-k">=</span> <span class="pl-c1">addgene!</span>(chr, <span class="pl-s"><span class="pl-pds">"</span>regulatory<span class="pl-pds">"</span></span>, <span class="pl-c1">670</span><span class="pl-k">:</span><span class="pl-c1">677</span>)
newgene<span class="pl-k">.</span>locus_tag <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>reg02<span class="pl-pds">"</span></span>
<span class="pl-c1">sort!</span>(chr<span class="pl-k">.</span>genes)

<span class="pl-c"><span class="pl-c">#</span> Genes can be deleted. This works for all genes where `:pseudo` is `true`, and ignores genes where it is `false` or `missing`</span>
<span class="pl-c1">delete!</span>(<span class="pl-c1">@genes</span>(chr, <span class="pl-c1">:pseudo</span>))
<span class="pl-c"><span class="pl-c">#</span> Delete all genes 60 nt or shorter</span>
<span class="pl-c1">delete!</span>(<span class="pl-c1">@genes</span>(chr, <span class="pl-c1">length</span>(gene) <span class="pl-k">&lt;=</span> <span class="pl-c1">60</span>))</pre></div>
<p>Individual genes, and <code>Vector{Gene}</code>s are printed in GBK format. To include the GBK header and the nucleotide sequence, <code>printgbk(io, chr)</code> can be used to write them to a file.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">println</span>(chr<span class="pl-k">.</span>genes[<span class="pl-c1">1</span>])
<span class="pl-c1">println</span>(<span class="pl-c1">@genes</span>(chr, CDS))

<span class="pl-c1">open</span>(<span class="pl-s"><span class="pl-pds">"</span>updated.gbk<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>w<span class="pl-pds">"</span></span>) <span class="pl-k">do</span> f
    <span class="pl-c1">printgbk</span>(f, chr)
<span class="pl-k">end</span></pre></div>
</article></div>