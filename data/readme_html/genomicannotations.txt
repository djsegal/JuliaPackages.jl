<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-genomicannotationsjl" class="anchor" aria-hidden="true" href="#genomicannotationsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>GenomicAnnotations.jl</h1>
<p dir="auto"><a href="https://BioJulia.github.io/GenomicAnnotations.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-description" class="anchor" aria-hidden="true" href="#description"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Description</h2>
<p dir="auto">GenomicAnnotations is a package for reading, modifying, and writing genomic annotations in the GenBank and GFF3 file formats.</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt;]
pkg&gt; add GenomicAnnotations"><pre>julia<span class="pl-k">&gt;</span>]
pkg<span class="pl-k">&gt;</span> add GenomicAnnotations</pre></div>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<p dir="auto">GenBank and GFF3 files are read with <code>readgbk(input)</code> and <code>readgff(input)</code>, which return vectors of <code>Record</code>s. <code>input</code> can be an <code>IOStream</code> or a file path. GZipped data  is unzipped automatically if a filename ending in ".gz" is passed as <code>input</code>. If we're only interested in the first chromosome in <code>example.gbk</code> we only need to store the first element.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="chr = readgbk(&quot;test/example.gbk&quot;)[1]"><pre>chr <span class="pl-k">=</span> <span class="pl-c1">readgbk</span>(<span class="pl-s"><span class="pl-pds">"</span>test/example.gbk<span class="pl-pds">"</span></span>)[<span class="pl-c1">1</span>]</pre></div>
<p dir="auto"><code>Record</code>s have five fields, <code>name</code>, <code>header</code>, <code>genes</code>, <code>genedata</code>, and <code>sequence</code>. The <code>name</code> is read from the <code>header</code>, which is stored as a string. The annotation data is stored in <code>genedata</code>, but generally you should use <code>genes</code> to access that data. For example, it can be used to iterate over annotations, and to modify them.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="for gene in chr.genes
    gene.locus_tag = &quot;$(chr.name)_$(gene.locus_tag)&quot;
end

chr.genes[2].locus_tag = &quot;test123&quot;"><pre><span class="pl-k">for</span> gene <span class="pl-k">in</span> chr<span class="pl-k">.</span>genes
    gene<span class="pl-k">.</span>locus_tag <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span><span class="pl-v">$(chr<span class="pl-k">.</span>name)</span>_<span class="pl-v">$(gene<span class="pl-k">.</span>locus_tag)</span><span class="pl-pds">"</span></span>
<span class="pl-k">end</span>

chr<span class="pl-k">.</span>genes[<span class="pl-c1">2</span>]<span class="pl-k">.</span>locus_tag <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>test123<span class="pl-pds">"</span></span></pre></div>
<p dir="auto">Accessing properties that haven't been stored will return missing. For this reason, it often makes more sense to use <code>get()</code> than to access the property directly.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# chr.genes[2].pseudo returns missing, so this will throw an error
if chr.genes[2].pseudo
    println(&quot;Gene 2 is a pseudogene&quot;)
end

# ... but this works:
if get(chr.genes[2], :pseudo, false)
    println(&quot;Gene 2 is a pseudogene&quot;)
end"><pre><span class="pl-c"><span class="pl-c">#</span> chr.genes[2].pseudo returns missing, so this will throw an error</span>
<span class="pl-k">if</span> chr<span class="pl-k">.</span>genes[<span class="pl-c1">2</span>]<span class="pl-k">.</span>pseudo
    <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>Gene 2 is a pseudogene<span class="pl-pds">"</span></span>)
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> ... but this works:</span>
<span class="pl-k">if</span> <span class="pl-c1">get</span>(chr<span class="pl-k">.</span>genes[<span class="pl-c1">2</span>], <span class="pl-c1">:pseudo</span>, <span class="pl-c1">false</span>)
    <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>Gene 2 is a pseudogene<span class="pl-pds">"</span></span>)
<span class="pl-k">end</span></pre></div>
<p dir="auto">The macro <code>@genes</code> can be used to filter through the annotations. The macro takes a <code>Record</code> or a <code>Vector{Record}</code>, followed by any number of expressions that will be evaluated for each gene. The keyword <code>gene</code> is used to refer to the individual <code>Gene</code>s. <code>@genes</code> can also be used to modify annotations. Gene attributes can be referred to using <code>Symbol</code>s.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@genes(chr, feature(gene) == &quot;CDS&quot;)  # Returns all coding regions
@genes(chr, length(gene) &gt; 300) # Returns all features longer than 300 nt
@genes(chr, iscomplement(gene)) # Returns all features on the complement strand
@genes(chr, ismissing(:product)) # Returns all features for which the attribute &quot;product&quot; has not been set

# Some short-hand forms are available to make life easier:
#     `CDS` expands to `feature(gene) == &quot;CDS&quot;`, and
#     `get(s::Symbol, default)` expands to `get(gene, s, default)`
# The following two are thus equivalent:
@genes(chr, feature(gene) == &quot;CDS&quot;, occursin(&quot;glycoprotein&quot;, get(gene, :product, &quot;&quot;)))
@genes(chr,                   CDS,  occursin(&quot;glycoprotein&quot;, get(      :product, &quot;&quot;)))

# All arguments have to evaluate to `true` for a gene to be included, so the following expressions are equivalent:
@genes(chr, feature(gene) == &quot;CDS&quot;, length(gene) &gt; 300)
@genes(chr, (feature(gene) == &quot;CDS&quot;) &amp;&amp; (length(gene) &gt; 300))

# `@genes` returns a `Vector{Gene}`. Attributes can be accessed with dot-syntax, and can be assigned to:
@genes(chr, :locus_tag == &quot;tag03&quot;)[1].pseudo = true
@genes(chr, CDS, ismissing(:gene)).gene .= &quot;unknown&quot;"><pre><span class="pl-c1">@genes</span>(chr, <span class="pl-c1">feature</span>(gene) <span class="pl-k">==</span> <span class="pl-s"><span class="pl-pds">"</span>CDS<span class="pl-pds">"</span></span>)  <span class="pl-c"><span class="pl-c">#</span> Returns all coding regions</span>
<span class="pl-c1">@genes</span>(chr, <span class="pl-c1">length</span>(gene) <span class="pl-k">&gt;</span> <span class="pl-c1">300</span>) <span class="pl-c"><span class="pl-c">#</span> Returns all features longer than 300 nt</span>
<span class="pl-c1">@genes</span>(chr, <span class="pl-c1">iscomplement</span>(gene)) <span class="pl-c"><span class="pl-c">#</span> Returns all features on the complement strand</span>
<span class="pl-c1">@genes</span>(chr, <span class="pl-c1">ismissing</span>(<span class="pl-c1">:product</span>)) <span class="pl-c"><span class="pl-c">#</span> Returns all features for which the attribute "product" has not been set</span>

<span class="pl-c"><span class="pl-c">#</span> Some short-hand forms are available to make life easier:</span>
<span class="pl-c"><span class="pl-c">#</span>     `CDS` expands to `feature(gene) == "CDS"`, and</span>
<span class="pl-c"><span class="pl-c">#</span>     `get(s::Symbol, default)` expands to `get(gene, s, default)`</span>
<span class="pl-c"><span class="pl-c">#</span> The following two are thus equivalent:</span>
<span class="pl-c1">@genes</span>(chr, <span class="pl-c1">feature</span>(gene) <span class="pl-k">==</span> <span class="pl-s"><span class="pl-pds">"</span>CDS<span class="pl-pds">"</span></span>, <span class="pl-c1">occursin</span>(<span class="pl-s"><span class="pl-pds">"</span>glycoprotein<span class="pl-pds">"</span></span>, <span class="pl-c1">get</span>(gene, <span class="pl-c1">:product</span>, <span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>)))
<span class="pl-c1">@genes</span>(chr,                   CDS,  <span class="pl-c1">occursin</span>(<span class="pl-s"><span class="pl-pds">"</span>glycoprotein<span class="pl-pds">"</span></span>, <span class="pl-c1">get</span>(      <span class="pl-c1">:product</span>, <span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>)))

<span class="pl-c"><span class="pl-c">#</span> All arguments have to evaluate to `true` for a gene to be included, so the following expressions are equivalent:</span>
<span class="pl-c1">@genes</span>(chr, <span class="pl-c1">feature</span>(gene) <span class="pl-k">==</span> <span class="pl-s"><span class="pl-pds">"</span>CDS<span class="pl-pds">"</span></span>, <span class="pl-c1">length</span>(gene) <span class="pl-k">&gt;</span> <span class="pl-c1">300</span>)
<span class="pl-c1">@genes</span>(chr, (<span class="pl-c1">feature</span>(gene) <span class="pl-k">==</span> <span class="pl-s"><span class="pl-pds">"</span>CDS<span class="pl-pds">"</span></span>) <span class="pl-k">&amp;&amp;</span> (<span class="pl-c1">length</span>(gene) <span class="pl-k">&gt;</span> <span class="pl-c1">300</span>))

<span class="pl-c"><span class="pl-c">#</span> `@genes` returns a `Vector{Gene}`. Attributes can be accessed with dot-syntax, and can be assigned to:</span>
<span class="pl-c1">@genes</span>(chr, <span class="pl-c1">:locus_tag</span> <span class="pl-k">==</span> <span class="pl-s"><span class="pl-pds">"</span>tag03<span class="pl-pds">"</span></span>)[<span class="pl-c1">1</span>]<span class="pl-k">.</span>pseudo <span class="pl-k">=</span> <span class="pl-c1">true</span>
<span class="pl-c1">@genes</span>(chr, CDS, <span class="pl-c1">ismissing</span>(<span class="pl-c1">:gene</span>))<span class="pl-k">.</span>gene <span class="pl-k">.=</span> <span class="pl-s"><span class="pl-pds">"</span>unknown<span class="pl-pds">"</span></span></pre></div>
<p dir="auto">Gene sequences can be accessed with <code>sequence(gene)</code>. For example, the following code will write the translated sequences of all protein-coding genes to a file:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using BioSequences
using FASTX
open(FASTA.Writer, &quot;proteins.fasta&quot;) do w
    for gene in @genes(chr, CDS)
        aaseq = GenomicAnnotations.sequence(gene; translate = true)
        write(w, FASTA.Record(gene.locus_tag, get(:product, &quot;&quot;), aaseq))
    end
end"><pre><span class="pl-k">using</span> BioSequences
<span class="pl-k">using</span> FASTX
<span class="pl-c1">open</span>(FASTA<span class="pl-k">.</span>Writer, <span class="pl-s"><span class="pl-pds">"</span>proteins.fasta<span class="pl-pds">"</span></span>) <span class="pl-k">do</span> w
    <span class="pl-k">for</span> gene <span class="pl-k">in</span> <span class="pl-c1">@genes</span>(chr, CDS)
        aaseq <span class="pl-k">=</span> GenomicAnnotations<span class="pl-k">.</span><span class="pl-c1">sequence</span>(gene; translate <span class="pl-k">=</span> <span class="pl-c1">true</span>)
        <span class="pl-c1">write</span>(w, FASTA<span class="pl-k">.</span><span class="pl-c1">Record</span>(gene<span class="pl-k">.</span>locus_tag, <span class="pl-c1">get</span>(<span class="pl-c1">:product</span>, <span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>), aaseq))
    <span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>
<p dir="auto">Genes can be added using <code>addgene!</code>, and <code>sort!</code> can be used to make sure that the resulting annotations are in the correct order for printing. <code>delete!</code> is used to remove genes.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="newgene = addgene!(chr, &quot;regulatory&quot;, 670:677)
newgene.locus_tag = &quot;reg02&quot;
sort!(chr.genes)

# Genes can be deleted. This works for all genes where `:pseudo` is `true`, and ignores genes where it is `false` or `missing`
delete!(@genes(chr, :pseudo))
# Delete all genes 60 nt or shorter
delete!(@genes(chr, length(gene) &lt;= 60))"><pre>newgene <span class="pl-k">=</span> <span class="pl-c1">addgene!</span>(chr, <span class="pl-s"><span class="pl-pds">"</span>regulatory<span class="pl-pds">"</span></span>, <span class="pl-c1">670</span><span class="pl-k">:</span><span class="pl-c1">677</span>)
newgene<span class="pl-k">.</span>locus_tag <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>reg02<span class="pl-pds">"</span></span>
<span class="pl-c1">sort!</span>(chr<span class="pl-k">.</span>genes)

<span class="pl-c"><span class="pl-c">#</span> Genes can be deleted. This works for all genes where `:pseudo` is `true`, and ignores genes where it is `false` or `missing`</span>
<span class="pl-c1">delete!</span>(<span class="pl-c1">@genes</span>(chr, <span class="pl-c1">:pseudo</span>))
<span class="pl-c"><span class="pl-c">#</span> Delete all genes 60 nt or shorter</span>
<span class="pl-c1">delete!</span>(<span class="pl-c1">@genes</span>(chr, <span class="pl-c1">length</span>(gene) <span class="pl-k">&lt;=</span> <span class="pl-c1">60</span>))</pre></div>
<p dir="auto">Individual genes, and <code>Vector{Gene}</code>s are printed in GBK format. To include the GBK header and the nucleotide sequence, <code>printgbk(io, chr)</code> can be used to write them to a file. <code>printgff(io, chr)</code> prints the annotations as GFF3, in which case the GenBank header is lost.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="println(chr.genes[1])
println(@genes(chr, CDS))

open(GenBank.Writer, &quot;updated.gbk&quot;) do w
    write(w, chr)
end"><pre><span class="pl-c1">println</span>(chr<span class="pl-k">.</span>genes[<span class="pl-c1">1</span>])
<span class="pl-c1">println</span>(<span class="pl-c1">@genes</span>(chr, CDS))

<span class="pl-c1">open</span>(GenBank<span class="pl-k">.</span>Writer, <span class="pl-s"><span class="pl-pds">"</span>updated.gbk<span class="pl-pds">"</span></span>) <span class="pl-k">do</span> w
    <span class="pl-c1">write</span>(w, chr)
<span class="pl-k">end</span></pre></div>
</article></div>