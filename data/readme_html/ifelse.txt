<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-ifelsejl" class="anchor" aria-hidden="true" href="#ifelsejl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>IfElse.jl</h1>
<p><a href="https://github.com/SciML/IfElse.jl/actions?query=workflow%3ACI"><img src="https://github.com/SciML/IfElse.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width:100%;"></a></p>
<p>Sometimes, it's good to have a function form of a conditional. Julia's Base
defines <code>ifelse</code> for this, but... psyche, it's not defined in Base but in Core!
While this rarely matters, if you're trying to define a new dispatch for <code>Core.ifelse</code>
you will find an interesting error message:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; Base.ifelse(x::Array,y,z) = 2x
ERROR: cannot add methods to a builtin function
Stacktrace:
 [1] top-level scope at none:1
"><pre>julia<span class="pl-k">&gt;</span> Base<span class="pl-k">.</span><span class="pl-en">ifelse</span>(x<span class="pl-k">::</span><span class="pl-c1">Array</span>,y,z) <span class="pl-k">=</span> <span class="pl-c1">2</span>x
ERROR<span class="pl-k">:</span> cannot add methods to a builtin <span class="pl-k">function</span>
Stacktrace<span class="pl-k">:</span>
 [<span class="pl-c1">1</span>] top<span class="pl-k">-</span>level scope at none<span class="pl-k">:</span><span class="pl-c1">1</span></pre></div>
<p>Thus no new methods can be added to this function in its current form, blocking
symbolic libraries like <a href="https://github.com/SciML/ModelingToolkit.jl">ModelingToolkit.jl</a>
or vectorization libraries like <a href="https://github.com/chriselrod/LoopVectorization.jl">LoopVectorization.jl</a>
from extending the operations of this function onto their own types.</p>
<p>To get around this issue, we need a separate version of ifelse that is extendable.
This is difficult to do in the standard case without any inference issues, though
it is being worked on <a href="https://github.com/JuliaLang/julia/pull/37343">in this PR</a>.
In the meantime, to allow for development of <code>ifelse</code> dispatches from a common
platform, IfElse.jl has been created to hold this common definition.</p>
<p>Thus IfElse.jl does one thing: it defines <code>IfElse.ifelse</code> to call <code>Core.ifelse</code>
on its fallbacks, but be free to extend. This way, all of the libraries that
want to extend an <code>ifelse</code> function can do so on a common form. If and when
#37343 is fixed, this function will be deprecated for an extendable <code>Base.ifelse</code>,
but for now it will allow for the thriving package ecosystem to continue its
development in this area.</p>
</article></div>