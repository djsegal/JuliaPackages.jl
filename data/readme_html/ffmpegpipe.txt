<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-ffmpegpipejl---save-videos-from-julia" class="anchor" aria-hidden="true" href="#ffmpegpipejl---save-videos-from-julia"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>FFmpegPipe.jl - Save videos from Julia</h1>
<p><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/ea6e0ff99602c3563e3dd684abf60b30edceaeef/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6966656379636c652d6578706572696d656e74616c2d6f72616e67652e737667"><img src="https://camo.githubusercontent.com/ea6e0ff99602c3563e3dd684abf60b30edceaeef/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6966656379636c652d6578706572696d656e74616c2d6f72616e67652e737667" alt="Lifecycle" data-canonical-src="https://img.shields.io/badge/lifecycle-experimental-orange.svg" style="max-width:100%;"></a>
<a href="https://travis-ci.org/yakir12/FFmpegPipe.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/95551d1ee06034ff6fbecf7a53ff330c18a3e470/68747470733a2f2f7472617669732d63692e6f72672f79616b697231322f46466d706567506970652e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/yakir12/FFmpegPipe.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/yakir12/ffmpegpipe-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/dd4b576d47f0c3fd16f20c1cd739a6eb1d7892db/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f373067736e397138663277376b6f36383f7376673d74727565" alt="Build status" data-canonical-src="https://ci.appveyor.com/api/projects/status/70gsn9q8f2w7ko68?svg=true" style="max-width:100%;"></a>
<a href="http://codecov.io/github/yakir12/FFmpegPipe.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/b4434f1ae015f3591dcf0777a73a19303203918c/687474703a2f2f636f6465636f762e696f2f6769746875622f79616b697231322f46466d706567506970652e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/yakir12/FFmpegPipe.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
<p>FFmpegPipe lets you read/write video files (mp4, wmv, avi, mov...) from Julia by piping images from/to an <a href="https://ffmpeg.org/" rel="nofollow">FFmpeg</a> process.</p>
<p>This is neither as efficient nor as versatile as calling lower-level routines from libav/ffmpeg directly, like <a href="https://github.com/kmsquire/VideoIO.jl">VideoIO.jl</a> does, but that package does not yet support video output.</p>
<p>Anything that Julia can <code>show</code> as a <code>MIME("image/png")</code> can be sent as a video frame,
in particular <code>Plot</code> objects from <a href="https://github.com/JuliaPlots/Plots.jl">Plots.jl</a>
and <code>Array{T,2} where T&lt;:Colorant</code> from <a href="https://github.com/JuliaImages/Images.jl">Images.jl</a>
have been tested to work.
(Yes, it is unnecessary to compress/decompress a PNG image only to pass it form
one process to another, but at least it is lossless.)</p>
<h2><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Examples</h2>
<p>We can create a movie by generating lots of plots and writing each one to
the movie as a frame.</p>
<p>Plots.jl and FFmpeg must already be installed, or this will not work.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> FFmpegPipe
<span class="pl-k">using</span> Plots
s <span class="pl-k">=</span> <span class="pl-c1">openvideo</span>(<span class="pl-s"><span class="pl-pds">"</span>sinecurve.mp4<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>w<span class="pl-pds">"</span></span>, r<span class="pl-k">=</span><span class="pl-c1">24</span>)
<span class="pl-c1">pyplot</span>()
<span class="pl-k">for</span> a <span class="pl-k">in</span> <span class="pl-c1">linspace</span>(<span class="pl-c1">0</span>, pi, <span class="pl-c1">3</span><span class="pl-k">*</span><span class="pl-c1">24</span>)
    x <span class="pl-k">=</span> a<span class="pl-k">+</span><span class="pl-c1">linspace</span>(<span class="pl-c1">0</span>, pi, <span class="pl-c1">1000</span>)
    plt <span class="pl-k">=</span> <span class="pl-c1">plot</span>(x, <span class="pl-c1">sin</span>.(x))
    <span class="pl-c1">writeframe</span>(s, plt)
<span class="pl-k">end</span>
<span class="pl-c1">close</span>(s)</pre></div>
<p>We can apply an effect by reading frames from one move and writing modified
frames to another movie. However, all information except the images themselves
(sound, subtitles, framerate, metadata...)
will need to be transfered to the new movie in some other way.</p>
<div class="highlight highlight-source-julia"><pre>s1 <span class="pl-k">=</span> <span class="pl-c1">openvideo</span>(<span class="pl-s"><span class="pl-pds">"</span>sinecurve.mp4<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>r<span class="pl-pds">"</span></span>)
s2 <span class="pl-k">=</span> <span class="pl-c1">openvideo</span>(<span class="pl-s"><span class="pl-pds">"</span>upsidecurve.mp4<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>w<span class="pl-pds">"</span></span>, r<span class="pl-k">=</span><span class="pl-c1">24</span>)
<span class="pl-k">while</span> <span class="pl-k">!</span><span class="pl-c1">eof</span>(s1)
    img <span class="pl-k">=</span> <span class="pl-c1">readframe</span>(s1)
    <span class="pl-c1">writeframe</span>(s2, img[<span class="pl-c1">end</span><span class="pl-k">:</span><span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">1</span>,:])
<span class="pl-k">end</span>
<span class="pl-c1">close</span>(s2)
<span class="pl-c1">close</span>(s1)</pre></div>
<h1><a id="user-content-note" class="anchor" aria-hidden="true" href="#note"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Note</h1>
<p>This is just a simple wrapper.
The author of this package is not affiliated with the authors of FFmpeg in any way.</p>
<p>FFmpeg is a trademark of Fabrice Bellard, originator of the FFmpeg project.</p>
</article></div>