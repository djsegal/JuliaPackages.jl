<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-sphjl" class="anchor" aria-hidden="true" href="#sphjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>SPH.jl</h1>
<p>Build status:</p>
<ul>
<li>julia v0.7 <a href="https://travis-ci.org/rkat/SPH.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/56c7d28614f2c9ba5802b9fdf95bc8bb3d449837/68747470733a2f2f7472617669732d63692e6f72672f726b61742f5350482e6a6c2e7376673f6272616e63683d302e37" alt="Build Status" data-canonical-src="https://travis-ci.org/rkat/SPH.jl.svg?branch=0.7" style="max-width:100%;"></a></li>
<li>julia v1.0 <a href="https://travis-ci.org/rkat/SPH.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/4d8365770860e98f0fa44c05cd107a045f5068da/68747470733a2f2f7472617669732d63692e6f72672f726b61742f5350482e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/rkat/SPH.jl.svg?branch=master" style="max-width:100%;"></a></li>
</ul>
<p>Julia sphere file reader/writer. Shamelessly stolen from the excellent
<a href="https://github.com/dancasimiro/WAV.jl">WAV.jl package</a> by <a href="https://github.com/dancasimiro">Dan Casimiro</a>.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<pre><code>julia&gt; Pkg.add("SPH")
</code></pre>
<h2><a id="user-content-getting-started" class="anchor" aria-hidden="true" href="#getting-started"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Getting Started</h2>
<p>SPH provides <code>sphread</code>, <code>sphwrite</code>, and <code>sph2wav</code> commands to read,
write, and convert SPH files. Here is an example to get you started.
It generates some data, writes it to a file and then reads the data back.
<code>sph2wav</code> is then used to convert the SPH file to a WAV file.
<code>sphreadheader</code> is also provided for reading an SPH header.</p>
<pre lang="jlcon"><code>julia&gt; using SPH
julia&gt; header = Dict{String, Any}(
  "channel_count" =&gt; 1,
  "sample_coding" =&gt; "pcm",
  "sample_rate" =&gt; 8000,
  "sample_count" =&gt; 8000,
  "sample_byte_format" =&gt; "0123",
  "sample_n_bytes" =&gt; 4
)
julia&gt; samples = sin.(2 * pi * [0:7999;] * 440.0 / 8000) * 0.01
julia&gt; sphwrite(header, samples, "example.sph")
julia&gt; header, x = sphread("example.sph")
julia&gt; sph2wav("example.sph", "example.wav")
julia&gt; h = sphreadheader("example.sph")
</code></pre>
<h2><a id="user-content-note" class="anchor" aria-hidden="true" href="#note"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Note</h2>
<p><code>sphread</code> and <code>sphwrite</code> currently do not obey the <code>sample_byte_format</code> in the SPH header.
If this is an issue for you, let me know and I can add this functionality.</p>
<h2><a id="user-content-sphreadheader" class="anchor" aria-hidden="true" href="#sphreadheader"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>sphreadheader</h2>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">function</span> <span class="pl-en">sphreadheader</span>(io<span class="pl-k">::</span><span class="pl-c1">IO</span>)
<span class="pl-k">function</span> <span class="pl-en">sphread</span>(filename<span class="pl-k">::</span><span class="pl-c1">AbstractString</span>)</pre></div>
<p>Return a <code>Dict{String, Any}</code> corresponding to the <a href="http://isip.piconepress.com/projects/speech/software/tutorials/production/fundamentals/v1.0/section_02/text/nist_sphere.text" rel="nofollow">Sphere header</a> with Julian typing. e.g.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">Dict</span><span class="pl-c1">{String, Any}</span>(
    <span class="pl-s"><span class="pl-pds">"</span>channel_count<span class="pl-pds">"</span></span>      <span class="pl-k">=&gt;</span> <span class="pl-c1">1</span>,
    <span class="pl-s"><span class="pl-pds">"</span>sample_coding<span class="pl-pds">"</span></span>      <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>pcm<span class="pl-pds">"</span></span>,
    <span class="pl-s"><span class="pl-pds">"</span>sample_byte_format<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>01<span class="pl-pds">"</span></span>,
    <span class="pl-s"><span class="pl-pds">"</span>sample_rate<span class="pl-pds">"</span></span>        <span class="pl-k">=&gt;</span> <span class="pl-c1">8000</span>,
    <span class="pl-s"><span class="pl-pds">"</span>sample_n_bytes<span class="pl-pds">"</span></span>     <span class="pl-k">=&gt;</span> <span class="pl-c1">4</span>,
    <span class="pl-s"><span class="pl-pds">"</span>sample_count<span class="pl-pds">"</span></span>       <span class="pl-k">=&gt;</span> <span class="pl-c1">8000</span>
)</pre></div>
<h2><a id="user-content-sphread" class="anchor" aria-hidden="true" href="#sphread"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>sphread</h2>
<p>This function reads the samples from a <a href="http://isip.piconepress.com/projects/speech/software/tutorials/production/fundamentals/v1.0/section_02/text/nist_sphere.text" rel="nofollow">NIST Sphere file</a>. The samples are converted to floating
point values in the range from <code>-1.0</code> to <code>1.0</code> by default.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">function</span> <span class="pl-en">sphread</span>(io<span class="pl-k">::</span><span class="pl-c1">IO</span>; subrange<span class="pl-k">=</span>Any, format<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>double<span class="pl-pds">"</span></span>)
<span class="pl-k">function</span> <span class="pl-en">sphread</span>(filename<span class="pl-k">::</span><span class="pl-c1">AbstractString</span>; subrange<span class="pl-k">=</span>Any, format<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>double<span class="pl-pds">"</span></span>)</pre></div>
<p>The available options, and the default values, are:</p>
<ul>
<li><code>format</code> (default = <code>double</code>): changes the format of the returned samples. The string
<code>double</code> returns double precision floating point values in the range -1.0 to 1.0. The string
<code>native</code> returns the values as encoded in the file. The string <code>size</code> returns the number
of samples in the file, rather than the actual samples.</li>
<li><code>subrange</code> (default = <code>Any</code>): controls which samples are returned. The default, <code>Any</code>
returns all of the samples. Passing a number (<code>Real</code>), <code>N</code>, will return the first <code>N</code>
samples of each channel. Passing a range (<code>Range1{Real}</code>), <code>R</code>, will return the samples
in that range of each channel.</li>
</ul>
<p>The returned values are:</p>
<ul>
<li><code>header</code>: The SPH header; same as returned by <code>sphreadheader</code></li>
<li><code>samples</code>: The acoustic samples; A matrix is returned for files that contain multiple channels.</li>
</ul>
<h2><a id="user-content-sphwrite" class="anchor" aria-hidden="true" href="#sphwrite"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>sphwrite</h2>
<p>Writes samples to an SPH file.
Each column of the data represents a different
channel. Stereo files should contain two columns.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">function</span> <span class="pl-en">sphwrite</span>(header, samples, io<span class="pl-k">::</span><span class="pl-c1">IO</span>)
<span class="pl-k">function</span> <span class="pl-en">sphwrite</span>(header, samples, filename<span class="pl-k">::</span><span class="pl-c1">AbstractString</span>)</pre></div>
</article></div>