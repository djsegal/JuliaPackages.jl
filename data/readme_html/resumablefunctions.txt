<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-resumablefunctions" class="anchor" aria-hidden="true" href="#resumablefunctions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>ResumableFunctions</h1>
<p><a href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/" rel="nofollow">C#</a> has a convenient way to create iterators using the <code>yield return</code> statement. The package <code>ResumableFunctions</code> provides the same functionality for the <a href="https://julialang.org" rel="nofollow">Julia language</a> by introducing the <code>@resumable</code> and the <code>@yield</code> macros. These macros can be used to replace the <code>Task</code> switching functions <code>produce</code> and <code>consume</code> which were deprecated in Julia v0.6. <code>Channels</code> are the preferred way for inter-task communication in julia v0.6+, but their performance is subpar for iterator applications. See <a href="#Benchmarks">the benchmarks section below</a>.</p>
<h2><a id="user-content-build-status--coverage" class="anchor" aria-hidden="true" href="#build-status--coverage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Build Status &amp; Coverage</h2>
<p><a href="https://github.com/benlauwens/ResumableFunctions.jl/actions?query=workflow%3ACI+branch%3Amaster"><img src="https://github.com/benlauwens/ResumableFunctions.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width:100%;"></a>
<a href="http://codecov.io/github/benlauwens/ResumableFunctions.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/ad0e739f9c02fec35998642d421935ae8c12d180cb7b061737ea4aef36775155/687474703a2f2f636f6465636f762e696f2f6769746875622f62656e6c617577656e732f526573756d61626c6546756e6374696f6e732e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/benlauwens/ResumableFunctions.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p><code>ResumableFunctions</code> is a <a href="http://pkg.julialang.org" rel="nofollow">registered package</a> and can be installed by running:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Pkg
Pkg.add(&quot;ResumableFunctions&quot;)
"><pre><span class="pl-k">using</span> Pkg
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>ResumableFunctions<span class="pl-pds">"</span></span>)</pre></div>
<h2><a id="user-content-documentation" class="anchor" aria-hidden="true" href="#documentation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Documentation</h2>
<p><a href="https://benlauwens.github.io/ResumableFunctions.jl/v0.6.0-docs" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://benlauwens.github.io/ResumableFunctions.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/56f8252ba8e9d3f0b810769543f77823d2fe031ce560d4c2d69fb1fcad800383/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6c61746573742d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-latest-blue.svg" style="max-width:100%;"></a></p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using ResumableFunctions

@resumable function fibonacci(n::Int) :: Int
  a = 0
  b = 1
  for i in 1:n
    @yield a
    a, b = b, a+b
  end
end

for fib in fibonacci(10)
  println(fib)
end
"><pre><span class="pl-k">using</span> ResumableFunctions

<span class="pl-c1">@resumable</span> <span class="pl-k">function</span> <span class="pl-en">fibonacci</span>(n<span class="pl-k">::</span><span class="pl-c1">Int</span>) <span class="pl-k">::</span> <span class="pl-c1">Int</span>
  a <span class="pl-k">=</span> <span class="pl-c1">0</span>
  b <span class="pl-k">=</span> <span class="pl-c1">1</span>
  <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span>n
    <span class="pl-c1">@yield</span> a
    a, b <span class="pl-k">=</span> b, a<span class="pl-k">+</span>b
  <span class="pl-k">end</span>
<span class="pl-k">end</span>

<span class="pl-k">for</span> fib <span class="pl-k">in</span> <span class="pl-c1">fibonacci</span>(<span class="pl-c1">10</span>)
  <span class="pl-c1">println</span>(fib)
<span class="pl-k">end</span></pre></div>
<h2><a id="user-content-benchmarks" class="anchor" aria-hidden="true" href="#benchmarks"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Benchmarks</h2>
<p>The following block is the result of running <code>julia --project=. benchmark/benchmarks.jl</code> on a Macbook Pro with following processor: <code>Intel Core i9 2,4 GHz 8-Core</code>. Julia version 1.5.3 was used.</p>
<p>Fibonacci with <code>Int</code> values:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="Direct: 
  27.184 ns (0 allocations: 0 bytes)
ResumableFunctions: 
  27.503 ns (0 allocations: 0 bytes)
Channels csize=0: 
  2.438 ms (101 allocations: 3.08 KiB)
Channels csize=1: 
  2.546 ms (23 allocations: 1.88 KiB)
Channels csize=20: 
  138.681 μs (26 allocations: 2.36 KiB)
Channels csize=100: 
  35.071 μs (28 allocations: 3.95 KiB)
Task scheduling
  17.726 μs (86 allocations: 3.31 KiB)
Closure: 
  1.948 μs (82 allocations: 1.28 KiB)
Closure optimised: 
  25.910 ns (0 allocations: 0 bytes)
Closure statemachine: 
  28.048 ns (0 allocations: 0 bytes)
Iteration protocol: 
  41.143 ns (0 allocations: 0 bytes)
"><pre><code>Direct: 
  27.184 ns (0 allocations: 0 bytes)
ResumableFunctions: 
  27.503 ns (0 allocations: 0 bytes)
Channels csize=0: 
  2.438 ms (101 allocations: 3.08 KiB)
Channels csize=1: 
  2.546 ms (23 allocations: 1.88 KiB)
Channels csize=20: 
  138.681 μs (26 allocations: 2.36 KiB)
Channels csize=100: 
  35.071 μs (28 allocations: 3.95 KiB)
Task scheduling
  17.726 μs (86 allocations: 3.31 KiB)
Closure: 
  1.948 μs (82 allocations: 1.28 KiB)
Closure optimised: 
  25.910 ns (0 allocations: 0 bytes)
Closure statemachine: 
  28.048 ns (0 allocations: 0 bytes)
Iteration protocol: 
  41.143 ns (0 allocations: 0 bytes)
</code></pre></div>
<p>Fibonacci with <code>BigInt</code> values:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="Direct: 
  5.747 μs (188 allocations: 4.39 KiB)
ResumableFunctions: 
  5.984 μs (191 allocations: 4.50 KiB)
Channels csize=0: 
  2.508 ms (306 allocations: 7.75 KiB)
Channels csize=1: 
  2.629 ms (306 allocations: 7.77 KiB)
Channels csize=20: 
  150.274 μs (309 allocations: 8.25 KiB)
Channels csize=100: 
  44.592 μs (311 allocations: 9.84 KiB)
Task scheduling
  24.802 μs (198 allocations: 6.61 KiB)
Closure: 
  7.064 μs (192 allocations: 4.47 KiB)
Closure optimised: 
  5.809 μs (190 allocations: 4.44 KiB)
Closure statemachine: 
  5.826 μs (190 allocations: 4.44 KiB)
Iteration protocol: 
  5.822 μs (190 allocations: 4.44 KiB)
"><pre><code>Direct: 
  5.747 μs (188 allocations: 4.39 KiB)
ResumableFunctions: 
  5.984 μs (191 allocations: 4.50 KiB)
Channels csize=0: 
  2.508 ms (306 allocations: 7.75 KiB)
Channels csize=1: 
  2.629 ms (306 allocations: 7.77 KiB)
Channels csize=20: 
  150.274 μs (309 allocations: 8.25 KiB)
Channels csize=100: 
  44.592 μs (311 allocations: 9.84 KiB)
Task scheduling
  24.802 μs (198 allocations: 6.61 KiB)
Closure: 
  7.064 μs (192 allocations: 4.47 KiB)
Closure optimised: 
  5.809 μs (190 allocations: 4.44 KiB)
Closure statemachine: 
  5.826 μs (190 allocations: 4.44 KiB)
Iteration protocol: 
  5.822 μs (190 allocations: 4.44 KiB)
</code></pre></div>
<h2><a id="user-content-licence--references" class="anchor" aria-hidden="true" href="#licence--references"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Licence &amp; References</h2>
<p><a href="LICENSE.md"><img src="https://camo.githubusercontent.com/bbf49a2eb96e6f718803f2493bd7aa3baae61abb09b7f8fc185a94e08c504dc6/687474703a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d627269676874677265656e2e7376673f7374796c653d666c6174" alt="License" data-canonical-src="http://img.shields.io/badge/license-MIT-brightgreen.svg?style=flat" style="max-width:100%;"></a>
<a href="http://joss.theoj.org/papers/889b2faed426b978ee705689c8f8440b" rel="nofollow"><img src="https://camo.githubusercontent.com/9f1156bb532db22e8764922e0a6a8e5716033880d41eb23275c3e8777bf76001/687474703a2f2f6a6f73732e7468656f6a2e6f72672f7061706572732f38383962326661656434323662393738656537303536383963386638343430622f7374617475732e737667" alt="status" data-canonical-src="http://joss.theoj.org/papers/889b2faed426b978ee705689c8f8440b/status.svg" style="max-width:100%;"></a>
<a href="https://zenodo.org/badge/latestdoi/100050892" rel="nofollow"><img src="https://camo.githubusercontent.com/d1ad499bc09e528622688251d12e00e84a95b66f80dee9403746153fa509e060/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f3130303035303839322e737667" alt="DOI" data-canonical-src="https://zenodo.org/badge/100050892.svg" style="max-width:100%;"></a></p>
<h2><a id="user-content-authors" class="anchor" aria-hidden="true" href="#authors"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Authors</h2>
<ul>
<li>Ben Lauwens, <a href="http://www.rma.ac.be" rel="nofollow">Royal Military Academy</a>, Brussels, Belgium.</li>
</ul>
<h2><a id="user-content-contributing" class="anchor" aria-hidden="true" href="#contributing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Contributing</h2>
<ul>
<li>To discuss problems or feature requests, file an issue. For bugs, please include as much information as possible, including operating system, julia version, and version of <a href="https://github.com/MikeInnes/MacroTools.jl.git">MacroTools</a>.</li>
<li>To contribute, make a pull request. Contributions should include tests for any new features/bug fixes.</li>
</ul>
<h2><a id="user-content-release-notes" class="anchor" aria-hidden="true" href="#release-notes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Release notes</h2>
<ul>
<li>
<p>2021: v0.6.0</p>
<ul>
<li>introduction of <code>@nosave</code> to keep a variable out of the saved structure.</li>
<li>optimized <code>for</code> loop.</li>
</ul>
</li>
<li>
<p>2020: v0.5.2 is Julia v1.6 compatible.</p>
</li>
<li>
<p>2019: v0.5.1</p>
<ul>
<li>inference problem solved: force iterator next value to be of type <code>Union</code> of <code>Tuple</code> and <code>Nothing</code>.</li>
</ul>
</li>
<li>
<p>2019: v0.5.0 is Julia v1.2 compatible.</p>
</li>
<li>
<p>2018: v0.4.2 prepare for Julia v1.1</p>
<ul>
<li>better inference caused a problem;).</li>
<li>iterator with a specified <code>rtype</code> is fixed.</li>
</ul>
</li>
<li>
<p>2018: v0.4.0 is Julia v1.0 compatible.</p>
</li>
<li>
<p>2018: v0.3.1 uses the new iteration protocol.</p>
<ul>
<li>the new iteration protocol is used for a <code>@resumable function</code> based iterator.</li>
<li>the <code>for</code> loop transformation implements also the new iteration protocol.</li>
</ul>
</li>
<li>
<p>2018: v0.3 is Julia v0.7 compatible.</p>
<ul>
<li>introduction of <code>let</code> block to allow variables not te be persisted between <code>@resumable function</code> calls (EXPERIMENTAL).</li>
<li>the <code>eltype</code> of a <code>@resumable function</code> based iterator is its return type if specified, otherwise <code>Any</code>.</li>
</ul>
</li>
<li>
<p>2018: v0.2 the iterator now behaves as a Python generator: only values that are explicitely yielded are generated; the return value is ignored and a warning is generated.</p>
</li>
<li>
<p>2017: v0.1 initial release that is Julia v0.6 compatible:</p>
<ul>
<li>Introduction of the <code>@resumable</code> and the <code>@yield</code> macros.</li>
<li>A <code>@resumable function</code> generates a type that implements the <a href="https://docs.julialang.org/en/stable/manual/interfaces/#man-interface-iteration-1" rel="nofollow">iterator</a> interface.</li>
<li>Parametric <code>@resumable functions</code> are supported.</li>
</ul>
</li>
</ul>
<h2><a id="user-content-caveats" class="anchor" aria-hidden="true" href="#caveats"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Caveats</h2>
<ul>
<li>In a <code>try</code> block only top level <code>@yield</code> statements are allowed.</li>
<li>In a <code>finally</code> block a <code>@yield</code> statement is not allowed.</li>
<li>An anonymous function can not contain a <code>@yield</code> statement.</li>
</ul>
</article></div>