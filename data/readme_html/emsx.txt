<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-emsxjl" class="anchor" aria-hidden="true" href="#emsxjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>EMSx.jl</h1>
<table>
<thead>
<tr>
<th align="center"><strong>Build Status</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><a href="https://travis-ci.org/adrien-le-franc/EMSx.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/027798ca2715ac00fceb7659034c75ee06af95192e2f2c7dc169f5fc1467cc6b/68747470733a2f2f7472617669732d63692e6f72672f61647269656e2d6c652d6672616e632f454d53782e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/adrien-le-franc/EMSx.jl.svg?branch=master" style="max-width: 100%;"></a></td>
</tr>
<tr>
<td align="center"><a href="https://codecov.io/gh/adrien-le-franc/EMSx.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/ef4766db2f88ac8cdc7cf847e101756cc9e9ec0fb41ad490b6fa41e2bd4b0132/68747470733a2f2f636f6465636f762e696f2f67682f61647269656e2d6c652d6672616e632f454d53782e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov branch" data-canonical-src="https://codecov.io/gh/adrien-le-franc/EMSx.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></td>
</tr>
</tbody>
</table>
<p dir="auto"><code>EMSx.jl</code> is a Julia package for simulating the control of an electric microgrid with an Energy Management System. It originated from a joint project between <a href="https://cermics-lab.enpc.fr/" rel="nofollow">CERMICS</a>, <a href="https://www.efficacity.com/" rel="nofollow">Efficacity</a> and <a href="https://www.se.com/fr/fr/" rel="nofollow">Schneider Electric</a>. This package is designed for benchmarking EMS techniques, as documented in <a href="https://hal.archives-ouvertes.fr/hal-02425913/document" rel="nofollow">this paper</a>.</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">If not installed, download <a href="https://julialang.org/downloads/" rel="nofollow">Julia 1.3.0</a> or higher versions.
Then, add the <code>EMSx.jl</code> package using Julia's <a href="https://julialang.github.io/Pkg.jl/v1/managing-packages/" rel="nofollow">package manager</a>. Note that <code>EMSx.jl</code> is not a registered package.</p>
<h2 dir="auto"><a id="user-content-data" class="anchor" aria-hidden="true" href="#data"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Data</h2>
<p dir="auto">The microgrid control simulation relies on <a href="https://zenodo.org/record/5510400#.YUizGls69hE" rel="nofollow">data</a> provided by Schneider Electric.
Besides data per site and metadata to run the benchmark, we also provide a file <code>pv.csv</code> reporting the historical photovoltaic production and forecasts employed for all sites, with values scaled in [0,1].</p>
<h3 dir="auto"><a id="user-content-download" class="anchor" aria-hidden="true" href="#download"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Download</h3>
<p dir="auto">The simplest way to get the data is to download them from <a href="https://zenodo.org/record/5510400#.YUizGls69hE" rel="nofollow">Zenodo</a>.
If you prefer command lines,
<code>EMSx.jl</code> provides functions for downloading the dataset: call <code>EMSx.download_sites_data(path_to_data_folder)</code> to download the data for all sites, and call
<code>EMSx.download_pv(path_to_data_folder)</code> to download the file <code>pv.csv</code>. Note that you can specify site ids, e.g. <code>EMSx.download_sites_data(path_to_data_folder, 1:5)</code> to download sites with ids from 1 to 5.</p>
<p dir="auto">Alternatively, you can download data from Schneider's <a href="https://shop.exchange.se.com/apps/52535/microgrid-energy-management-benchmark" rel="nofollow">platform</a> as follows:</p>
<ol dir="auto">
<li>make an account and login to Schneider's <a href="https://data.exchange.se.com" rel="nofollow">platform</a></li>
<li>generate an API key from your <a href="https://data.exchange.se.com/account/api-keys/" rel="nofollow">account</a></li>
<li>set an environment variable with your API key: <code>SCHNEIDER_API_KEY = XXX</code></li>
<li>just call <code>EMSx.download_sites_data(path_to_data_folder)</code> to download the data for all sites</li>
</ol>
<p dir="auto">Note that the data is compressed to .gz file and that downloading the total amount of data requires about 6GB of disk space.</p>
<h3 dir="auto"><a id="user-content-data-partitioning" class="anchor" aria-hidden="true" href="#data-partitioning"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Data partitioning</h3>
<p dir="auto">If you wish to use the data to run the benchmark, you need to perform the train/test data partitioning by running <code>EMSx.initialize_data(path_to_data_folder)</code>. By default, pre-partitioning data files are deleted to save disk space. You can choose to keep them with the keyword <code>delete_files=false</code>.</p>
<h3 dir="auto"><a id="user-content-note" class="anchor" aria-hidden="true" href="#note"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Note</h3>
<p dir="auto">Due to the large volume of data, downloading and data partitioning can be time consuming. We provide <a href="#parallelization">parallelization options</a> for these steps. Aslo, we report that downloading data from Zenodo can be significantly faster (about 12 minutes with a WIFI connexion of 80 Mbps)</p>
<h2 dir="auto"><a id="user-content-using-emsxjl" class="anchor" aria-hidden="true" href="#using-emsxjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Using EMSx.jl</h2>
<p dir="auto"><code>EMSx.jl</code> is a package for simulating the control of an electric microgrid on testing periods of one week. We have a pool of 70 microgrids with data. Each microgrid is composed with</p>
<ul dir="auto">
<li>a photovoltaic (PV) generating unit,</li>
<li>a battery,</li>
<li>a delivery point to exchange power with the grid,</li>
<li>electric devices, resulting in a aggregated local load.</li>
</ul>
<p dir="auto">Energy exchanges with the grid induce costs. The aim of a controller is to manage the microgrid at least operating cost. During simulation, a controller has access to online data, gathered in instances of the <code>Information</code> type:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="struct Information
	t::Int64 # time step in [1, 672]
	soc::Float64 # battery's state of charge in [0, 1]
	pv::Array{Float64,1} # 24h history of PV data, 15 min samples 
	forecast_pv::Array{Float64,1} # 24h forecasts of PV data, 15 min samples
	load::Array{Float64,1} # 24h history of load data, 15 min samples
	forecast_load::Array{Float64,1} # 24h forecasts of lad data, 15 min samples
	price::Price
	battery::Battery
	site_id::String
end"><pre><span class="pl-k">struct</span> Information
	t<span class="pl-k">::</span><span class="pl-c1">Int64</span> <span class="pl-c"><span class="pl-c">#</span> time step in [1, 672]</span>
	soc<span class="pl-k">::</span><span class="pl-c1">Float64</span> <span class="pl-c"><span class="pl-c">#</span> battery's state of charge in [0, 1]</span>
	pv<span class="pl-k">::</span><span class="pl-c1">Array{Float64,1}</span> <span class="pl-c"><span class="pl-c">#</span> 24h history of PV data, 15 min samples </span>
	forecast_pv<span class="pl-k">::</span><span class="pl-c1">Array{Float64,1}</span> <span class="pl-c"><span class="pl-c">#</span> 24h forecasts of PV data, 15 min samples</span>
	load<span class="pl-k">::</span><span class="pl-c1">Array{Float64,1}</span> <span class="pl-c"><span class="pl-c">#</span> 24h history of load data, 15 min samples</span>
	forecast_load<span class="pl-k">::</span><span class="pl-c1">Array{Float64,1}</span> <span class="pl-c"><span class="pl-c">#</span> 24h forecasts of lad data, 15 min samples</span>
	price<span class="pl-k">::</span><span class="pl-c1">Price</span>
	battery<span class="pl-k">::</span><span class="pl-c1">Battery</span>
	site_id<span class="pl-k">::</span><span class="pl-c1">String</span>
<span class="pl-k">end</span></pre></div>
<p dir="auto">We provide an example of usage for a <code>DummyController</code> which does not use the battery.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using EMSx

mutable struct DummyController &lt;: EMSx.AbstractController end

EMSx.compute_control(controller::DummyController, 
	information::EMSx.Information) = 0.

const controller = DummyController()

EMSx.simulate_sites(controller,
	&quot;home/xxx/path_to_save_folder&quot;,
	&quot;home/xxx/path_to_price&quot;,
	&quot;home/xxx/path_to_metadata&quot;,
	&quot;home/xxx/path_to_simulation_data&quot;)"><pre><span class="pl-k">using</span> EMSx

<span class="pl-k">mutable struct</span> DummyController <span class="pl-k">&lt;:</span> <span class="pl-c1">EMSx.AbstractController</span> <span class="pl-k">end</span>

EMSx<span class="pl-k">.</span><span class="pl-c1">compute_control</span>(controller<span class="pl-k">::</span><span class="pl-c1">DummyController</span>, 
	information<span class="pl-k">::</span><span class="pl-c1">EMSx.Information</span>) <span class="pl-k">=</span> <span class="pl-c1">0.</span>

<span class="pl-k">const</span> controller <span class="pl-k">=</span> <span class="pl-c1">DummyController</span>()

EMSx<span class="pl-k">.</span><span class="pl-c1">simulate_sites</span>(controller,
	<span class="pl-s"><span class="pl-pds">"</span>home/xxx/path_to_save_folder<span class="pl-pds">"</span></span>,
	<span class="pl-s"><span class="pl-pds">"</span>home/xxx/path_to_price<span class="pl-pds">"</span></span>,
	<span class="pl-s"><span class="pl-pds">"</span>home/xxx/path_to_metadata<span class="pl-pds">"</span></span>,
	<span class="pl-s"><span class="pl-pds">"</span>home/xxx/path_to_simulation_data<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">The behavior of <code>DummyController</code> is specified by the corresponding method of the <code>compute_control</code> function. For more complex controllers, you might also want to implement a specific method for the
<code>initialize_site_controller</code> function. We refer to <a href="https://github.com/adrien-le-franc/EMSx.jl/tree/master/examples">examples</a> for more complex usages.</p>
<h2 dir="auto"><a id="user-content-performance" class="anchor" aria-hidden="true" href="#performance"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Performance</h2>
<p dir="auto">The performance of a controller on the EMSx benchmark is measured relatively to the performance of</p>
<ul dir="auto">
<li>a dummy controller, which does not use the battery</li>
<li>an anticipative controller, which has full knowledge of the future energy net demand</li>
</ul>
<p dir="auto">Such baseline controllers allow us to compute performance metrics based on the <code>score.jld2</code> file saved after running a simulation:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; performance_metrics = EMSx.evaluate_model(&quot;/home/xxx/model/score.jld2&quot;)
3×4 DataFrame
│ Row │ site   │ cost    │ gain    │ score    │
│     │ String │ Float64 │ Float64 │ Float64  │
├─────┼────────┼─────────┼─────────┼──────────┤
│ 1   │ 1      │ 4351.99 │ 109.015 │ 0.739589 │
│ 2   │ 3      │ 536.232 │ 18.0276 │ 0.705637 │
│ 3   │ 4      │ 9025.46 │ 136.477 │ 0.681385 │"><pre>julia<span class="pl-k">&gt;</span> performance_metrics <span class="pl-k">=</span> EMSx<span class="pl-k">.</span><span class="pl-c1">evaluate_model</span>(<span class="pl-s"><span class="pl-pds">"</span>/home/xxx/model/score.jld2<span class="pl-pds">"</span></span>)
<span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">4</span> DataFrame
│ Row │ site   │ cost    │ gain    │ score    │
│     │ String │ Float64 │ Float64 │ Float64  │
├─────┼────────┼─────────┼─────────┼──────────┤
│ <span class="pl-c1">1</span>   │ <span class="pl-c1">1</span>      │ <span class="pl-c1">4351.99</span> │ <span class="pl-c1">109.015</span> │ <span class="pl-c1">0.739589</span> │
│ <span class="pl-c1">2</span>   │ <span class="pl-c1">3</span>      │ <span class="pl-c1">536.232</span> │ <span class="pl-c1">18.0276</span> │ <span class="pl-c1">0.705637</span> │
│ <span class="pl-c1">3</span>   │ <span class="pl-c1">4</span>      │ <span class="pl-c1">9025.46</span> │ <span class="pl-c1">136.477</span> │ <span class="pl-c1">0.681385</span> │</pre></div>
<p dir="auto">Here, for each site, each metrics is averaged over the pool of simulation periods: <code>cost</code> refers to the raw operating cost, <code>gain</code> refers to the gain of the model against a dummy controller, <code>score</code> refers to the gain of the model standardized by the gain of an anticipative controller (e.g. in the code snippet above, the model achieves 68% of the anticipative gain on site 4). We refer to <a href="https://hal.archives-ouvertes.fr/hal-02425913/document" rel="nofollow">this paper</a> for more details on our performance metrics.</p>
<h2 dir="auto"><a id="user-content-parallelization" class="anchor" aria-hidden="true" href="#parallelization"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Parallelization</h2>
<p dir="auto"><code>EMSx.jl</code> provides functions for distributed processing. Before calling a parallelized operation, initialize workers with <code>EMSx.init_parallel(n_workers)</code>. The following functions make use of parallelization:</p>
<ul dir="auto">
<li><a href="src/database_interface/download_data.jl"><code>EMSx.download_sites_data_parallel</code></a></li>
<li><a href="src/database_interface/split_data.jl"><code>EMSx.initialize_data_parallel</code></a></li>
<li><a href="src/simulate.jl"><code>EMSx.simulate_sites_parallel</code></a></li>
</ul>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="docs/logos.png"><img src="docs/logos.png" width="500" style="max-width: 100%;"></a></p>
</article></div>