<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-alignedbinaryformat" class="anchor" aria-hidden="true" href="#alignedbinaryformat"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>AlignedBinaryFormat</h1>
<p><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/534ba8d7d0182948e7626ab01b60299cf3e86543/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f6d2d77656c6c732f416c69676e656442696e617279466f726d61742e6a6c3f6c6f676f3d747261766973267374796c653d666f722d7468652d6261646765"><img src="https://camo.githubusercontent.com/534ba8d7d0182948e7626ab01b60299cf3e86543/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f6d2d77656c6c732f416c69676e656442696e617279466f726d61742e6a6c3f6c6f676f3d747261766973267374796c653d666f722d7468652d6261646765" alt="Travis (.org)" data-canonical-src="https://img.shields.io/travis/m-wells/AlignedBinaryFormat.jl?logo=travis&amp;style=for-the-badge" style="max-width:100%;"></a>
<a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/086e761280011f71a596ae4866a4091426a0afda/68747470733a2f2f696d672e736869656c64732e696f2f636f766572616c6c732f6769746875622f6d2d77656c6c732f416c69676e656442696e617279466f726d61742e6a6c3f6c6f676f3d636f766572616c6c73267374796c653d666f722d7468652d6261646765"><img src="https://camo.githubusercontent.com/086e761280011f71a596ae4866a4091426a0afda/68747470733a2f2f696d672e736869656c64732e696f2f636f766572616c6c732f6769746875622f6d2d77656c6c732f416c69676e656442696e617279466f726d61742e6a6c3f6c6f676f3d636f766572616c6c73267374796c653d666f722d7468652d6261646765" alt="Coveralls github" data-canonical-src="https://img.shields.io/coveralls/github/m-wells/AlignedBinaryFormat.jl?logo=coveralls&amp;style=for-the-badge" style="max-width:100%;"></a>
<a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/2eb7e24cc6c3318c60979bb8280518b1feb41122/68747470733a2f2f696d672e736869656c64732e696f2f636f6465636f762f632f6769746875622f6d2d77656c6c732f416c69676e656442696e617279466f726d61742e6a6c3f6c6f676f3d636f6465636f76267374796c653d666f722d7468652d6261646765"><img src="https://camo.githubusercontent.com/2eb7e24cc6c3318c60979bb8280518b1feb41122/68747470733a2f2f696d672e736869656c64732e696f2f636f6465636f762f632f6769746875622f6d2d77656c6c732f416c69676e656442696e617279466f726d61742e6a6c3f6c6f676f3d636f6465636f76267374796c653d666f722d7468652d6261646765" alt="Codecov" data-canonical-src="https://img.shields.io/codecov/c/github/m-wells/AlignedBinaryFormat.jl?logo=codecov&amp;style=for-the-badge" style="max-width:100%;"></a></p>
<p>This package provides a simple (yet powerful) interface to handle <a href="https://docs.julialang.org/en/v1/stdlib/Mmap/#Memory-mapped-I/O-1" rel="nofollow">memory mapped</a> data.
The "data" must be in the form of <code>Array</code>s and <code>BitArray</code>s) (although I may later support a <code>Table</code> interface).
The <code>eltype</code> of the <code>Array</code> must be a <a href="https://docs.julialang.org/en/v1/manual/types/#Primitive-Types-1" rel="nofollow">Julia primitive type</a>.
When accessing the data we avoid the use of <code>reinterpret</code> by <strong>aligning</strong> the arrays on disk.</p>
<p>For convenience <code>String</code>s <code>DataType</code>s, and arbitrary <code>serialization</code> can be saved to labels but these are <strong>not</strong> memory mapped.
If you need a memory mapped string considering using a <code>Vector{Char}</code> which can be memory mapped.</p>
<h2><a id="user-content-usage-example" class="anchor" aria-hidden="true" href="#usage-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Usage Example</h2>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> AlignedBinaryFormat
temp <span class="pl-k">=</span> <span class="pl-c1">tempname</span>();</pre></div>
<p>To write out data we do the following.</p>
<div class="highlight highlight-source-julia"><pre>abf <span class="pl-k">=</span> <span class="pl-c1">abfopen</span>(temp, <span class="pl-s"><span class="pl-pds">"</span>w<span class="pl-pds">"</span></span>)                   <span class="pl-c"><span class="pl-c">#</span> "w" is used to write only, memory mapping requires w+</span>
<span class="pl-c1">write</span>(abf, <span class="pl-s"><span class="pl-pds">"</span>my x array<span class="pl-pds">"</span></span>, <span class="pl-c1">rand</span>(Float16,<span class="pl-c1">4</span>))
abf[<span class="pl-s"><span class="pl-pds">"</span>whY array<span class="pl-pds">"</span></span>] <span class="pl-k">=</span> <span class="pl-c1">rand</span>(Char,<span class="pl-c1">2</span>,<span class="pl-c1">2</span>,<span class="pl-c1">2</span>)        <span class="pl-c"><span class="pl-c">#</span> alias of write(abf,"ζ!/b",rand(2,3))</span>
<span class="pl-c1">close</span>(abf)</pre></div>
<p>We could also have used do block syntax</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">abfopen</span>(temp, <span class="pl-s"><span class="pl-pds">"</span>r+<span class="pl-pds">"</span></span>) <span class="pl-k">do</span> abf
    abf[<span class="pl-s"><span class="pl-pds">"</span>ζ!/b<span class="pl-pds">"</span></span>] <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">2</span>,<span class="pl-c1">3</span>)
    <span class="pl-c1">write</span>(abf, <span class="pl-s"><span class="pl-pds">"</span>bitmat<span class="pl-pds">"</span></span>, <span class="pl-c1">rand</span>(<span class="pl-c1">3</span>,<span class="pl-c1">2</span>) <span class="pl-k">.&lt;</span> <span class="pl-c1">0.5</span>)
    <span class="pl-c1">write</span>(abf, <span class="pl-s"><span class="pl-pds">"</span>log<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"""</span></span>
<span class="pl-s">        this is what I did</span>
<span class="pl-s">        and how!</span>
<span class="pl-s">        <span class="pl-pds">"""</span></span>)
<span class="pl-k">end</span></pre></div>
<p>To perform serialization we need to wrap our type with <code>Serialized</code>.
If we are only saving a <code>DataType</code> we do not need to wrap it in <code>Serialized</code>.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">struct</span> Foo
    x<span class="pl-k">::</span><span class="pl-c1">Vector{Float64}</span>
    y<span class="pl-k">::</span><span class="pl-c1">Int</span>
<span class="pl-k">end</span>

<span class="pl-k">struct</span> Bar
    x<span class="pl-k">::</span><span class="pl-c1">String</span>
<span class="pl-k">end</span>

<span class="pl-c1">abfopen</span>(temp, <span class="pl-s"><span class="pl-pds">"</span>r+<span class="pl-pds">"</span></span>) <span class="pl-k">do</span> abf
    <span class="pl-c1">write</span>(abf, <span class="pl-s"><span class="pl-pds">"</span>type<span class="pl-pds">"</span></span>, Bar)
    <span class="pl-c1">write</span>(abf, <span class="pl-s"><span class="pl-pds">"</span>foo<span class="pl-pds">"</span></span>, <span class="pl-c1">AbfSerializer</span>(<span class="pl-c1">Foo</span>(<span class="pl-c1">rand</span>(<span class="pl-c1">3</span>), <span class="pl-k">-</span><span class="pl-c1">1</span>)))
<span class="pl-k">end</span>

abf <span class="pl-k">=</span> <span class="pl-c1">abfopen</span>(temp, <span class="pl-s"><span class="pl-pds">"</span>r<span class="pl-pds">"</span></span>)</pre></div>
<pre><code>AlignedBinaryFormat.AbfFile([read] &lt;file /tmp/jl_cMROHo&gt;)
┌────────────┬──────────────────┬───────────┬────────┬────────────┐
│   label    │       type       │   shape   │ bytes  │   status   │
├────────────┼──────────────────┼───────────┼────────┼────────────┤
│ bitmat     │ BitArray{2}      │ (3, 2)    │ &lt;8B&gt;   │ unloaded   │
│ foo        │ Foo              │ (-1,)     │ &lt;121B&gt; │ unloaded   │
│ log        │ String           │ (28,)     │ &lt;112B&gt; │ unloaded   │
│ my x array │ Array{Float16,1} │ (4,)      │ &lt;8B&gt;   │ unloaded   │
│ type       │ DataType         │ (-1,)     │ &lt;23B&gt;  │ unloaded   │
│ whY array  │ Array{Char,3}    │ (2, 2, 2) │ &lt;32B&gt;  │ unloaded   │
│ ζ!/b       │ Array{Float64,2} │ (2, 3)    │ &lt;48B&gt;  │ unloaded   │
└────────────┴──────────────────┴───────────┴────────┴────────────┘
</code></pre>
<p>The two methods for accessing the data are <code>read</code> and <code>getindex</code>, which is simply an alias of <code>read</code> and allows for the dictionary-like syntax.
When data is first accessed a reference to the item is cached in a dictionary contained within the <code>AbfFile</code> instance.
This permits the same reference to be returned without remapping the same data multiple times due to repeated <code>read</code> calls.
Strings are not memory mapped and are copied directly into the cache dictionary.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">@show</span> <span class="pl-c1">count</span>(abf[<span class="pl-s"><span class="pl-pds">"</span>bitmat<span class="pl-pds">"</span></span>])
<span class="pl-c1">read</span>(abf, <span class="pl-s"><span class="pl-pds">"</span>my x array<span class="pl-pds">"</span></span>)        <span class="pl-c"><span class="pl-c">#</span> just calling read(abf, label) loads the array</span>
<span class="pl-c1">println</span>(<span class="pl-c1">read</span>(abf, <span class="pl-s"><span class="pl-pds">"</span>log<span class="pl-pds">"</span></span>))
<span class="pl-c1">show</span>(abf)</pre></div>
<pre><code>count(abf["bitmat"]) = 3
this is what I did
and how!

AlignedBinaryFormat.AbfFile([read] &lt;file /tmp/jl_cMROHo&gt;)
┌────────────┬──────────────────┬───────────┬────────┬────────────┐
│   label    │       type       │   shape   │ bytes  │   status   │
├────────────┼──────────────────┼───────────┼────────┼────────────┤
│ bitmat     │ BitArray{2}      │ (3, 2)    │ &lt;8B&gt;   │ loaded     │
│ foo        │ Foo              │ (-1,)     │ &lt;121B&gt; │ unloaded   │
│ log        │ String           │ (28,)     │ &lt;112B&gt; │ loaded     │
│ my x array │ Array{Float16,1} │ (4,)      │ &lt;8B&gt;   │ loaded     │
│ type       │ DataType         │ (-1,)     │ &lt;23B&gt;  │ unloaded   │
│ whY array  │ Array{Char,3}    │ (2, 2, 2) │ &lt;32B&gt;  │ unloaded   │
│ ζ!/b       │ Array{Float64,2} │ (2, 3)    │ &lt;48B&gt;  │ unloaded   │
└────────────┴──────────────────┴───────────┴────────┴────────────┘
</code></pre>
<p>In the example above, <code>bitmat</code> and <code>my x array</code> are memory mapped and <code>log</code> is cached.
Doing <code>abf["bitmat"]</code> or <code>read(abf, "bitmat")</code> will return the same reference to <code>bitmat</code>.</p>
<div class="highlight highlight-source-julia"><pre>bitmat1 <span class="pl-k">=</span> abf[<span class="pl-s"><span class="pl-pds">"</span>bitmat<span class="pl-pds">"</span></span>]
bitmat2 <span class="pl-k">=</span> <span class="pl-c1">read</span>(abf, <span class="pl-s"><span class="pl-pds">"</span>bitmat<span class="pl-pds">"</span></span>)
<span class="pl-c1">@show</span> bitmat1 <span class="pl-k">===</span> bitmat2;</pre></div>
<pre><code>bitmat1 === bitmat2 = true
</code></pre>
<h2><a id="user-content-close-does-not-unlink-references-you-may-have-made" class="anchor" aria-hidden="true" href="#close-does-not-unlink-references-you-may-have-made"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Close does not unlink references you may have made</h2>
<p>Memory mapping persists after the file has been closed and is only unlinked once the reference is garbage collected.
It is recommended to use the <strong>do-block</strong> syntax to avoid unintended access.</p>
<div class="highlight highlight-source-julia"><pre>abf <span class="pl-k">=</span> <span class="pl-c1">abfopen</span>(temp, <span class="pl-s"><span class="pl-pds">"</span>w+<span class="pl-pds">"</span></span>)
<span class="pl-c1">write</span>(abf, <span class="pl-s"><span class="pl-pds">"</span>x<span class="pl-pds">"</span></span>, <span class="pl-c1">rand</span>(<span class="pl-c1">10</span>))
x <span class="pl-k">=</span> <span class="pl-c1">read</span>(abf, <span class="pl-s"><span class="pl-pds">"</span>x<span class="pl-pds">"</span></span>)
<span class="pl-c1">print</span>(<span class="pl-s"><span class="pl-pds">"</span>x = <span class="pl-pds">"</span></span>)
<span class="pl-c1">show</span>(stdout, <span class="pl-c1">MIME</span>(<span class="pl-s"><span class="pl-pds">"</span>text/plain<span class="pl-pds">"</span></span>), x)
<span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span><span class="pl-cce">\n</span><span class="pl-pds">"</span></span>)
<span class="pl-c1">show</span>(abf)
<span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span><span class="pl-cce">\n</span><span class="pl-pds">"</span></span>)
<span class="pl-c1">close</span>(abf)
<span class="pl-c1">show</span>(abf)
<span class="pl-c1">print</span>(<span class="pl-s"><span class="pl-pds">"</span><span class="pl-cce">\n</span>x = <span class="pl-pds">"</span></span>)
<span class="pl-c1">show</span>(stdout, <span class="pl-c1">MIME</span>(<span class="pl-s"><span class="pl-pds">"</span>text/plain<span class="pl-pds">"</span></span>), x)
<span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span><span class="pl-cce">\n</span><span class="pl-pds">"</span></span>)</pre></div>
<pre><code>x = 10-element Array{Float64,1}:
 0.6737894194841203 
 0.28704212997665324
 0.8980864989824102 
 0.5948813070093115 
 0.03298590842249727
 0.9587674078053836 
 0.4213390775874484 
 0.8851345495595084 
 0.35869029635893646
 0.4629117484636671 

AlignedBinaryFormat.AbfFile([read/write] &lt;file /tmp/jl_cMROHo&gt;)
┌───────┬──────────────────┬───────┬───────┬────────┐
│ label │       type       │ shape │ bytes │ status │
├───────┼──────────────────┼───────┼───────┼────────┤
│ x     │ Array{Float64,1} │ (10,) │ &lt;80B&gt; │ loaded │
└───────┴──────────────────┴───────┴───────┴────────┘


AlignedBinaryFormat.AbfFile([closed] &lt;file /tmp/jl_cMROHo&gt;)
┌───────┬──────┬───────┬───────┬────────┐
│ label │ type │ shape │ bytes │ status │
├───────┼──────┼───────┼───────┼────────┤
└───────┴──────┴───────┴───────┴────────┘

x = 10-element Array{Float64,1}:
 0.6737894194841203 
 0.28704212997665324
 0.8980864989824102 
 0.5948813070093115 
 0.03298590842249727
 0.9587674078053836 
 0.4213390775874484 
 0.8851345495595084 
 0.35869029635893646
 0.4629117484636671 
</code></pre>
<h1><a id="user-content-file-permissions-and-modifying-data-on-disk" class="anchor" aria-hidden="true" href="#file-permissions-and-modifying-data-on-disk"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>File permissions and modifying data on-disk</h1>
<table>
<thead>
<tr>
<th>mode</th>
<th align="center">read data</th>
<th align="center">modify data</th>
<th align="center">add data</th>
<th>description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>r</code></td>
<td align="center">yes</td>
<td align="center">no</td>
<td align="center">no</td>
<td>read only mode</td>
</tr>
<tr>
<td><code>r+</code></td>
<td align="center">yes</td>
<td align="center">yes</td>
<td align="center">yes</td>
<td>read/write existing file</td>
</tr>
<tr>
<td><code>w</code></td>
<td align="center">no</td>
<td align="center">no</td>
<td align="center">yes</td>
<td>overwrites existing file, write only</td>
</tr>
<tr>
<td><code>w+</code></td>
<td align="center">yes</td>
<td align="center">yes</td>
<td align="center">yes</td>
<td>overwrites existing file, read/write</td>
</tr>
<tr>
<td><code>a</code></td>
<td align="center">no</td>
<td align="center">no</td>
<td align="center">yes</td>
<td>modify existing file, create if it doesn't exist, write only</td>
</tr>
<tr>
<td><code>a+</code></td>
<td align="center">yes</td>
<td align="center">yes</td>
<td align="center">yes</td>
<td>modify existing file, create if it doesn't exist, read/write</td>
</tr>
</tbody>
</table>
<p>Read permission is required to memory map so <code>w</code> can only write data to the file but can not read it back in to memory-map.
Memory-mapped arrays opened using <code>r</code> can only be read.
If the file is opened with <code>r+/w+</code> arrays can be modified in place.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>file opened with <span class="pl-cce">\"</span>w<span class="pl-cce">\"</span><span class="pl-pds">"</span></span>)
<span class="pl-c1">abfopen</span>(temp, <span class="pl-s"><span class="pl-pds">"</span>w<span class="pl-pds">"</span></span>) <span class="pl-k">do</span> abf
    <span class="pl-c1">write</span>(abf, <span class="pl-s"><span class="pl-pds">"</span>x<span class="pl-pds">"</span></span>, <span class="pl-c1">rand</span>(<span class="pl-c1">3</span>,<span class="pl-c1">2</span>))
    <span class="pl-k">try</span>
        x <span class="pl-k">=</span> <span class="pl-c1">read</span>(abf, <span class="pl-s"><span class="pl-pds">"</span>x<span class="pl-pds">"</span></span>)
    <span class="pl-k">catch</span> e
        <span class="pl-c1">show</span>(e)
        <span class="pl-c1">println</span>()
    <span class="pl-k">end</span>
<span class="pl-k">end</span>
<span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span><span class="pl-cce">\n</span>file opened with <span class="pl-cce">\"</span>w+<span class="pl-cce">\"</span><span class="pl-pds">"</span></span>)
<span class="pl-c1">abfopen</span>(temp, <span class="pl-s"><span class="pl-pds">"</span>w+<span class="pl-pds">"</span></span>) <span class="pl-k">do</span> abf
    <span class="pl-c1">write</span>(abf, <span class="pl-s"><span class="pl-pds">"</span>x<span class="pl-pds">"</span></span>, <span class="pl-c1">rand</span>(<span class="pl-c1">3</span>,<span class="pl-c1">2</span>))
    x <span class="pl-k">=</span> <span class="pl-c1">read</span>(abf, <span class="pl-s"><span class="pl-pds">"</span>x<span class="pl-pds">"</span></span>)
    <span class="pl-c1">@show</span> x[<span class="pl-c1">1</span>]
    x[<span class="pl-c1">1</span>] <span class="pl-k">=</span> <span class="pl-k">-</span><span class="pl-c1">1</span>
    <span class="pl-c1">@show</span> x[<span class="pl-c1">1</span>]
<span class="pl-k">end</span>
<span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span><span class="pl-cce">\n</span>file opened with <span class="pl-cce">\"</span>r+<span class="pl-cce">\"</span><span class="pl-pds">"</span></span>)
<span class="pl-c1">abfopen</span>(temp, <span class="pl-s"><span class="pl-pds">"</span>r+<span class="pl-pds">"</span></span>) <span class="pl-k">do</span> abf
    abf[<span class="pl-s"><span class="pl-pds">"</span>x<span class="pl-pds">"</span></span>][<span class="pl-c1">1</span>] <span class="pl-k">=</span> <span class="pl-c1">3</span>
    <span class="pl-c1">@show</span> abf[<span class="pl-s"><span class="pl-pds">"</span>x<span class="pl-pds">"</span></span>][<span class="pl-c1">1</span>]
    <span class="pl-c1">write</span>(abf, <span class="pl-s"><span class="pl-pds">"</span>y<span class="pl-pds">"</span></span>, <span class="pl-c1">rand</span>(<span class="pl-c1">2</span>))
    <span class="pl-c1">@show</span> abf[<span class="pl-s"><span class="pl-pds">"</span>y<span class="pl-pds">"</span></span>]
<span class="pl-k">end</span>
<span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span><span class="pl-cce">\n</span>file opened with <span class="pl-cce">\"</span>r<span class="pl-cce">\"</span><span class="pl-pds">"</span></span>)
<span class="pl-c1">abfopen</span>(temp, <span class="pl-s"><span class="pl-pds">"</span>r<span class="pl-pds">"</span></span>) <span class="pl-k">do</span> abf
    x <span class="pl-k">=</span> <span class="pl-c1">read</span>(abf, <span class="pl-s"><span class="pl-pds">"</span>x<span class="pl-pds">"</span></span>)
    <span class="pl-c1">@show</span> x[<span class="pl-c1">1</span>]
    <span class="pl-c1">@show</span> abf[<span class="pl-s"><span class="pl-pds">"</span>y<span class="pl-pds">"</span></span>]
    <span class="pl-k">try</span>
        x[<span class="pl-c1">1</span>] <span class="pl-k">=</span> <span class="pl-c1">3</span>
    <span class="pl-k">catch</span> e
        <span class="pl-c1">show</span>(e)
        <span class="pl-c1">println</span>()
    <span class="pl-k">end</span>
<span class="pl-k">end</span>;
<span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span><span class="pl-cce">\n</span>file opened with <span class="pl-cce">\"</span>a<span class="pl-cce">\"</span><span class="pl-pds">"</span></span>)
<span class="pl-c1">abfopen</span>(temp, <span class="pl-s"><span class="pl-pds">"</span>a<span class="pl-pds">"</span></span>) <span class="pl-k">do</span> abf
    <span class="pl-k">try</span>
        x <span class="pl-k">=</span> <span class="pl-c1">read</span>(abf, <span class="pl-s"><span class="pl-pds">"</span>x<span class="pl-pds">"</span></span>)
    <span class="pl-k">catch</span> e
        <span class="pl-c1">show</span>(e)
        <span class="pl-c1">println</span>()
    <span class="pl-k">end</span>
    <span class="pl-c1">write</span>(abf, <span class="pl-s"><span class="pl-pds">"</span>z<span class="pl-pds">"</span></span>, <span class="pl-c1">rand</span>(<span class="pl-c1">3</span>))
<span class="pl-k">end</span>;
<span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span><span class="pl-cce">\n</span>file opened with <span class="pl-cce">\"</span>a+<span class="pl-cce">\"</span><span class="pl-pds">"</span></span>)
<span class="pl-c1">abfopen</span>(temp, <span class="pl-s"><span class="pl-pds">"</span>a+<span class="pl-pds">"</span></span>) <span class="pl-k">do</span> abf
    <span class="pl-c1">@show</span> <span class="pl-c1">read</span>(abf, <span class="pl-s"><span class="pl-pds">"</span>x<span class="pl-pds">"</span></span>)[<span class="pl-c1">1</span>]
    <span class="pl-c1">@show</span> <span class="pl-c1">read</span>(abf, <span class="pl-s"><span class="pl-pds">"</span>z<span class="pl-pds">"</span></span>)[<span class="pl-c1">1</span>]
<span class="pl-k">end</span>;</pre></div>
<pre><code>file opened with "w"
AlignedBinaryFormat.AbfReadError(IOStream(&lt;file /tmp/jl_cMROHo&gt;))

file opened with "w+"
x[1] = 0.3923187061956266
x[1] = -1.0

file opened with "r+"
(abf["x"])[1] = 3.0
abf["y"] = [0.3650633407781294, 0.06535729174631832]

file opened with "r"
x[1] = 3.0
abf["y"] = [0.3650633407781294, 0.06535729174631832]
ReadOnlyMemoryError()

file opened with "a"
AlignedBinaryFormat.AbfReadError(IOStream(&lt;file /tmp/jl_cMROHo&gt;))

file opened with "a+"
(read(abf, "x"))[1] = 3.0
(read(abf, "z"))[1] = 0.9387386553608443
</code></pre>
<h2><a id="user-content-why-not-use-jldhdf5" class="anchor" aria-hidden="true" href="#why-not-use-jldhdf5"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Why not use <code>JLD/HDF5</code>?</h2>
<ol>
<li>They do not support memory mapping of <strong>any</strong> Julia <code>isbits</code> primitive type (see <a href="https://github.com/JuliaIO/HDF5.jl/blob/master/doc/hdf5.md#supported-data-types">here for supported data types</a>).</li>
<li>When memory mapping they often return an array as a <code>ReinterpretArray</code> forcing the use of <code>AbstractArray</code> in <code>Type</code> and <code>Function</code> definitions.</li>
</ol>
<div class="highlight highlight-source-julia"><pre>x <span class="pl-k">=</span> <span class="pl-c1">rand</span>(Float16,<span class="pl-c1">3</span>,<span class="pl-c1">2</span>);
y <span class="pl-k">=</span> x <span class="pl-k">.&lt;</span> <span class="pl-c1">0.5</span>;
z <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">29</span>);
<span class="pl-c1">@show</span> <span class="pl-c1">typeof</span>(x);
<span class="pl-c1">@show</span> <span class="pl-c1">typeof</span>(y);
<span class="pl-c1">@show</span> <span class="pl-c1">typeof</span>(z);</pre></div>
<pre><code>typeof(x) = Array{Float16,2}
typeof(y) = BitArray{2}
typeof(z) = Array{Float64,1}
</code></pre>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> JLD, HDF5
<span class="pl-c1">jldopen</span>(temp, <span class="pl-s"><span class="pl-pds">"</span>w<span class="pl-pds">"</span></span>; mmaparrays<span class="pl-k">=</span><span class="pl-c1">true</span>) <span class="pl-k">do</span> j
    <span class="pl-c1">write</span>(j,<span class="pl-s"><span class="pl-pds">"</span>x<span class="pl-pds">"</span></span>,x)
    <span class="pl-c1">write</span>(j,<span class="pl-s"><span class="pl-pds">"</span>y<span class="pl-pds">"</span></span>,y)
    <span class="pl-c1">write</span>(j,<span class="pl-s"><span class="pl-pds">"</span>z<span class="pl-pds">"</span></span>,z)
<span class="pl-k">end</span>
<span class="pl-c1">jldopen</span>(temp, <span class="pl-s"><span class="pl-pds">"</span>r<span class="pl-pds">"</span></span>; mmaparrays<span class="pl-k">=</span><span class="pl-c1">true</span>) <span class="pl-k">do</span> j
    <span class="pl-c1">@show</span> <span class="pl-c1">ismmappable</span>(j[<span class="pl-s"><span class="pl-pds">"</span>x<span class="pl-pds">"</span></span>])
    <span class="pl-c1">@show</span> <span class="pl-c1">typeof</span>(<span class="pl-c1">read</span>(j,<span class="pl-s"><span class="pl-pds">"</span>x<span class="pl-pds">"</span></span>))
    <span class="pl-c1">@show</span> <span class="pl-c1">typeof</span>(<span class="pl-c1">read</span>(j,<span class="pl-s"><span class="pl-pds">"</span>y<span class="pl-pds">"</span></span>))
    <span class="pl-c1">@show</span> <span class="pl-c1">typeof</span>(<span class="pl-c1">read</span>(j,<span class="pl-s"><span class="pl-pds">"</span>z<span class="pl-pds">"</span></span>))
<span class="pl-k">end</span>
<span class="pl-c1">rm</span>(temp)</pre></div>
<pre><code>ismmappable(j["x"]) = false
typeof(read(j, "x")) = Array{Float16,2}
typeof(read(j, "y")) = BitArray{2}
typeof(read(j, "z")) = Base.ReinterpretArray{Float64,1,UInt8,Array{UInt8,1}}
</code></pre>
<p>As you can see <code>x::Matrix{Float16}</code> isn't able to be memory mapped and <code>z::Vector{Float64}</code> gets read back as <code>ReinterpretArray</code></p>
<h2><a id="user-content-why-not-use-jld2" class="anchor" aria-hidden="true" href="#why-not-use-jld2"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Why not use <code>JLD2</code></h2>
<p><code>JLD2</code> doesn't actually support memory mapping.
See my comment <a href="https://github.com/JuliaIO/JLD2.jl/pull/176#issue-369260445">here</a>.</p>
<hr>
<h1><a id="user-content-file-layout" class="anchor" aria-hidden="true" href="#file-layout"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>File Layout</h1>
<p>As an example lets examine what the structure of the following file would look like.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">abfopen</span>(temp, <span class="pl-s"><span class="pl-pds">"</span>w+<span class="pl-pds">"</span></span>) <span class="pl-k">do</span> abf
    abf[<span class="pl-s"><span class="pl-pds">"</span>myX<span class="pl-pds">"</span></span>] <span class="pl-k">=</span> <span class="pl-c1">rand</span>(Float16,<span class="pl-c1">10</span>,<span class="pl-c1">3</span>)
    abf[<span class="pl-s"><span class="pl-pds">"</span>whybitarr<span class="pl-pds">"</span></span>] <span class="pl-k">=</span> x <span class="pl-k">.&lt;</span> <span class="pl-c1">0.5</span>
    abf[<span class="pl-s"><span class="pl-pds">"</span>log<span class="pl-pds">"</span></span>] <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>some log information about this file<span class="pl-pds">"</span></span>
    abf[<span class="pl-s"><span class="pl-pds">"</span>somez<span class="pl-pds">"</span></span>] <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">29</span>)
    <span class="pl-c1">show</span>(abf)
<span class="pl-k">end</span>;</pre></div>
<pre><code>AlignedBinaryFormat.AbfFile([read/write] &lt;file /tmp/jl_cMROHo&gt;)
┌───────────┬──────────────────┬─────────┬────────┬────────────┐
│   label   │       type       │  shape  │ bytes  │   status   │
├───────────┼──────────────────┼─────────┼────────┼────────────┤
│ log       │ String           │ (36,)   │ &lt;144B&gt; │ unloaded   │
│ myX       │ Array{Float16,2} │ (10, 3) │ &lt;60B&gt;  │ unloaded   │
│ somez     │ Array{Float64,1} │ (29,)   │ &lt;232B&gt; │ unloaded   │
│ whybitarr │ BitArray{2}      │ (3, 2)  │ &lt;8B&gt;   │ unloaded   │
└───────────┴──────────────────┴─────────┴────────┴────────────┘
</code></pre>
<p>The file will have the following layout for each of the stored <code>Arrays</code></p>
<ul>
<li>a <code>UInt8</code> indicating endian-ness of the numeric data contained within
<ul>
<li><code>UInt8(0)</code> indicates that the following data is little-endian</li>
<li><code>UInt8(255)</code> indicates that the following data is big-endian</li>
<li>this depends on the host machine generating the file</li>
<li>currently conversion between little- and big-endian is not supported</li>
</ul>
</li>
<li>an <code>Int</code> indicating the length of the key <code>length(keyname)</code></li>
<li>the <code>String</code> which is the <code>key</code> of the array</li>
<li>an <code>Int</code> indicating the length of <code>string(T&lt;:Union{Array,BitArray})</code></li>
<li>the <code>String</code> representation of the "container", i.e.,  <code>"Array"</code>, <code>"BitArray"</code> or <code>"String"</code>
<ul>
<li>there is no arbitrary code evaluation, types are determined via an <code>ImmutableDict{String,DataType}</code></li>
</ul>
</li>
<li>for <code>"Array"</code>s an <code>Int</code> and <code>string(T)</code></li>
<li>an <code>Int</code> indication the number of dimensions <code>N</code></li>
<li><code>N</code> <code>Int</code>s that give the shape of the array</li>
<li>the buffer is then <strong>aligned</strong> to <code>T</code></li>
<li>the data</li>
</ul>
<p>Note: the labels are displayed sorted by label but are written to the file sequentially.</p>
<pre><code>&lt;BOF&gt; # beginning of file
0x00                            # UInt8(0) - Little Endian
3                               # length of "myX"
myX                             # label of first item
5                               # length of "Array"
Array
7                               # length of "Float16"
Float16
2                               # number of dimensions
10                              # length of dimension 1
3                               # length of dimension 2
... (alignment spacing)
&lt;the data&gt;
0x00                            # UInt8(0) - Little Endian
9                               # length of "whybitarr"
whybitarr                       # label of second item
8                               # length of "BitArray"
BitArray
2                               # number of dimensions
10                              # length of dimension 1
3                               # length of dimension 2
... (alignment spacing)
&lt;the data&gt;
0x00                            # UInt8(0) - Little Endian
3                               # length of "log"
log                             # label of third item
6                               # length of "String"
String
36                              # length of "some log information ..."
some log information ...
0x00                            # UInt8(0) - Little Endian
5                               # length of "somez"
somez                           # label of fourth item
5                               # length of "Array"
Array
7                               # length of "Float64"
Float64
1                               # number of dimensions
29                              # length of dimension 1
... (alignment spacing)
&lt;the data&gt;
&lt;EOF&gt; # end of file
</code></pre>
<h1><a id="user-content-acknowledgements" class="anchor" aria-hidden="true" href="#acknowledgements"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Acknowledgements</h1>
<p>Early inspiration was drawn from <a href="https://gist.github.com/dataPulverizer/3dc0af456a427aeb704a437e31299242">this gist</a>.</p>
<div class="highlight highlight-source-julia"><pre></pre></div>
</article></div>