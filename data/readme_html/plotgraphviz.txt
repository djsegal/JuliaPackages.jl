<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-plotgraphvizjl" class="anchor" aria-hidden="true" href="#plotgraphvizjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>PlotGraphviz.jl</h1>
<ul dir="auto">
<li>
<p dir="auto"><code>PlotGraphviz.jl</code> tries to unleash the power of <strong>Graphviz</strong> in your IJulia environment. It is using <a href="https://github.com/tkf/ShowGraphviz.jl"><code>ShowGraphviz.jl</code></a>, which derive various show methods from text/vnd.graphviz (<a href="https://graphviz.org" rel="nofollow">https://graphviz.org</a>). To parse dot files it uses <a href="https://github.com/andrewcooke/ParserCombinator.jl/blob/master/src/dot/DOT.jl"><code>ParserCombinator.jl</code></a>.</p>
</li>
<li>
<p dir="auto"><code>PlotGraphviz.jl</code> presents a simple interface for (nearly) all features of Graphviz.</p>
</li>
<li>
<p dir="auto"><code>PlotGraphviz.jl</code> accepts graphs from <a href="https://github.com/JuliaGraphs/SimpleWeightedGraphs.jl"><code>SimpleWeightedGraphs.jl</code></a></p>
</li>
</ul>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">Installation is straightforward: enter Pkg mode by hitting ], and then</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="(@v1.7) pkg&gt; add PlotGraphviz"><pre>(<span class="pl-c1">@v1</span>.<span class="pl-c1">7</span>) pkg<span class="pl-k">&gt;</span> add PlotGraphviz</pre></div>
<h2 dir="auto"><a id="user-content-how-to-use-it" class="anchor" aria-hidden="true" href="#how-to-use-it"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>How to use it</h2>
<p dir="auto">Generate some graphs by importing <code>Graphs.jl</code> or <code>SimpleWeightedGraphs.jl</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Graphs, SimpleWeightedGraphs"><pre><span class="pl-k">using</span> Graphs, SimpleWeightedGraphs</pre></div>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using PlotGraphviz"><pre><span class="pl-k">using</span> PlotGraphviz</pre></div>
<p dir="auto">and use <code>SimpleWeightedGraphs.jl</code> to generate a simple graph:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="g = SimpleWeightedGraph(3)  # or use `SimpleWeightedDiGraph` for directed graphs
SimpleWeightedGraphs.add_edge!(g, 1, 2, 0.5)
SimpleWeightedGraphs.add_edge!(g, 2, 3, 0.8)
SimpleWeightedGraphs.add_edge!(g, 1, 3, 2.0);"><pre>g <span class="pl-k">=</span> <span class="pl-c1">SimpleWeightedGraph</span>(<span class="pl-c1">3</span>)  <span class="pl-c"><span class="pl-c">#</span> or use `SimpleWeightedDiGraph` for directed graphs</span>
SimpleWeightedGraphs<span class="pl-k">.</span><span class="pl-c1">add_edge!</span>(g, <span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">0.5</span>)
SimpleWeightedGraphs<span class="pl-k">.</span><span class="pl-c1">add_edge!</span>(g, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">0.8</span>)
SimpleWeightedGraphs<span class="pl-k">.</span><span class="pl-c1">add_edge!</span>(g, <span class="pl-c1">1</span>, <span class="pl-c1">3</span>, <span class="pl-c1">2.0</span>);</pre></div>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="plot_graphviz(g)"><pre><span class="pl-c1">plot_graphviz</span>(g)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="docs/README_files/README_8_0.svg"><img src="docs/README_files/README_8_0.svg" alt="svg" style="max-width: 100%;"></a></p>
<p dir="auto">You can use generators from <code>Graphs.jl</code>, i.e.:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="grid = Graphs.grid([10,5])"><pre>grid <span class="pl-k">=</span> Graphs<span class="pl-k">.</span><span class="pl-c1">grid</span>([<span class="pl-c1">10</span>,<span class="pl-c1">5</span>])</pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="{50, 85} undirected simple Int64 graph"><pre class="notranslate"><code>{50, 85} undirected simple Int64 graph
</code></pre></div>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="plot_graphviz(SimpleWeightedGraph(grid))"><pre><span class="pl-c1">plot_graphviz</span>(<span class="pl-c1">SimpleWeightedGraph</span>(grid))</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="docs/README_files/README_11_0.svg"><img src="docs/README_files/README_11_0.svg" alt="svg" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-importing-and-modifying-graphs" class="anchor" aria-hidden="true" href="#importing-and-modifying-graphs"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Importing and modifying graphs</h2>
<p dir="auto">First, let us take a standard example, and use the function <code>read_dot_file</code> (more with <code>?</code> function) to import the graph from a dot-file.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="mk, attrs = read_dot_file(&quot;./test/data/directed/clust4.gv&quot;);"><pre>mk, attrs <span class="pl-k">=</span> <span class="pl-c1">read_dot_file</span>(<span class="pl-s"><span class="pl-pds">"</span>./test/data/directed/clust4.gv<span class="pl-pds">"</span></span>);</pre></div>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="plot_graphviz(mk, attrs)"><pre><span class="pl-c1">plot_graphviz</span>(mk, attrs)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="docs/README_files/README_15_0.svg"><img src="docs/README_files/README_15_0.svg" alt="svg" style="max-width: 100%;"></a></p>
<p dir="auto">The value <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="a74d675e83cd99be83c3875c0d39c66d">$attrs$</math-renderer> is a struct, that stores the GraphvizAttributes of the imported graph (as it is defined in "*.dot" file itself)</p>
<p dir="auto">There are mainly 3 different graph options available in Graphviz (see website for more):</p>
<ul dir="auto">
<li>graph_options: attributes/properties, which belongs to the complete graph (i.e. rankdir, label, ...)</li>
<li>node_options: attributes/properties to modify all nodes at once</li>
<li>edge_options: attributes/properties to modify all edges at once</li>
</ul>
<p dir="auto">As an example we would like to modify the shape of all nodes. Therefore we use the <code>set!</code> function. As we would like to modify the nodes, we have to use the node_options of our struct:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="set!(attrs.node_options, Property(&quot;shape&quot;,&quot;box&quot;));
plot_graphviz(mk, attrs)"><pre><span class="pl-c1">set!</span>(attrs<span class="pl-k">.</span>node_options, <span class="pl-c1">Property</span>(<span class="pl-s"><span class="pl-pds">"</span>shape<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>box<span class="pl-pds">"</span></span>));
<span class="pl-c1">plot_graphviz</span>(mk, attrs)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="docs/README_files/README_19_0.svg"><img src="docs/README_files/README_19_0.svg" alt="svg" style="max-width: 100%;"></a></p>
<p dir="auto">Next we change the orientation of our graph by modifying its graph_options and additionally we change the edge color (using edge_options):</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="set!(attrs.graph_options, Property(&quot;rankdir&quot;,&quot;LR&quot;));
set!(attrs.edge_options, Property(&quot;color&quot;,&quot;blue&quot;));
plot_graphviz(mk, attrs; scale = 5)"><pre><span class="pl-c1">set!</span>(attrs<span class="pl-k">.</span>graph_options, <span class="pl-c1">Property</span>(<span class="pl-s"><span class="pl-pds">"</span>rankdir<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>LR<span class="pl-pds">"</span></span>));
<span class="pl-c1">set!</span>(attrs<span class="pl-k">.</span>edge_options, <span class="pl-c1">Property</span>(<span class="pl-s"><span class="pl-pds">"</span>color<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>blue<span class="pl-pds">"</span></span>));
<span class="pl-c1">plot_graphviz</span>(mk, attrs; scale <span class="pl-k">=</span> <span class="pl-c1">5</span>)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="docs/README_files/README_21_0.svg"><img src="docs/README_files/README_21_0.svg" alt="svg" style="max-width: 100%;"></a></p>
<p dir="auto">To modify a single node, we need to access the node by its <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="a74d675e83cd99be83c3875c0d39c66d">$name (String)$</math-renderer> or its <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="a74d675e83cd99be83c3875c0d39c66d">$id (Int)$</math-renderer>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="set!(attrs.nodes, &quot;a0&quot;, Property(&quot;shape&quot;,&quot;triangle&quot;))
set!(attrs.nodes, &quot;a0&quot;, Property(&quot;filled&quot;,&quot;true&quot;))
set!(attrs.nodes, &quot;a0&quot;, Property(&quot;color&quot;,&quot;yellow&quot;))
plot_graphviz(mk, attrs; scale = 5)"><pre><span class="pl-c1">set!</span>(attrs<span class="pl-k">.</span>nodes, <span class="pl-s"><span class="pl-pds">"</span>a0<span class="pl-pds">"</span></span>, <span class="pl-c1">Property</span>(<span class="pl-s"><span class="pl-pds">"</span>shape<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>triangle<span class="pl-pds">"</span></span>))
<span class="pl-c1">set!</span>(attrs<span class="pl-k">.</span>nodes, <span class="pl-s"><span class="pl-pds">"</span>a0<span class="pl-pds">"</span></span>, <span class="pl-c1">Property</span>(<span class="pl-s"><span class="pl-pds">"</span>filled<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>true<span class="pl-pds">"</span></span>))
<span class="pl-c1">set!</span>(attrs<span class="pl-k">.</span>nodes, <span class="pl-s"><span class="pl-pds">"</span>a0<span class="pl-pds">"</span></span>, <span class="pl-c1">Property</span>(<span class="pl-s"><span class="pl-pds">"</span>color<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>yellow<span class="pl-pds">"</span></span>))
<span class="pl-c1">plot_graphviz</span>(mk, attrs; scale <span class="pl-k">=</span> <span class="pl-c1">5</span>)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="docs/README_files/README_23_0.svg"><img src="docs/README_files/README_23_0.svg" alt="svg" style="max-width: 100%;"></a></p>
<p dir="auto">To access a single edge, we have to know its unique <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="a74d675e83cd99be83c3875c0d39c66d">$id (Int)$</math-renderer>. We can use <code>get_id</code> to return the id from a node with a given name.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="id_a0 = get_id(attrs.nodes,&quot;start&quot;);
id_a1 = get_id(attrs.nodes,&quot;a0&quot;);

set!(attrs.edges,id_a0, id_a1, Property(&quot;color&quot;,&quot;red&quot;))
set!(attrs.edges,id_a0, id_a1, Property(&quot;xlabel&quot;,&quot;2.0&quot;))
set!(attrs.edges,id_a0, id_a1, Property(&quot;fontsize&quot;,&quot;8.0&quot;))
plot_graphviz(mk, attrs; scale = 5)"><pre>id_a0 <span class="pl-k">=</span> <span class="pl-c1">get_id</span>(attrs<span class="pl-k">.</span>nodes,<span class="pl-s"><span class="pl-pds">"</span>start<span class="pl-pds">"</span></span>);
id_a1 <span class="pl-k">=</span> <span class="pl-c1">get_id</span>(attrs<span class="pl-k">.</span>nodes,<span class="pl-s"><span class="pl-pds">"</span>a0<span class="pl-pds">"</span></span>);

<span class="pl-c1">set!</span>(attrs<span class="pl-k">.</span>edges,id_a0, id_a1, <span class="pl-c1">Property</span>(<span class="pl-s"><span class="pl-pds">"</span>color<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>red<span class="pl-pds">"</span></span>))
<span class="pl-c1">set!</span>(attrs<span class="pl-k">.</span>edges,id_a0, id_a1, <span class="pl-c1">Property</span>(<span class="pl-s"><span class="pl-pds">"</span>xlabel<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>2.0<span class="pl-pds">"</span></span>))
<span class="pl-c1">set!</span>(attrs<span class="pl-k">.</span>edges,id_a0, id_a1, <span class="pl-c1">Property</span>(<span class="pl-s"><span class="pl-pds">"</span>fontsize<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>8.0<span class="pl-pds">"</span></span>))
<span class="pl-c1">plot_graphviz</span>(mk, attrs; scale <span class="pl-k">=</span> <span class="pl-c1">5</span>)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="docs/README_files/README_25_0.svg"><img src="docs/README_files/README_25_0.svg" alt="svg" style="max-width: 100%;"></a></p>
<p dir="auto">The imported graph <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="a74d675e83cd99be83c3875c0d39c66d">$mk, attrs$</math-renderer> consists of two subgraphs (of type cluster - see Graphviz). To get access to their attributes we need to change the cluster itself.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="set!(attrs.subgraphs[1].graph_options, Property(&quot;color&quot;,&quot;Turquoise&quot;));
set!(attrs.subgraphs[1].graph_options, Property(&quot;label&quot;,&quot;process #NEW 1&quot;));
plot_graphviz(mk, attrs; scale = 5)"><pre><span class="pl-c1">set!</span>(attrs<span class="pl-k">.</span>subgraphs[<span class="pl-c1">1</span>]<span class="pl-k">.</span>graph_options, <span class="pl-c1">Property</span>(<span class="pl-s"><span class="pl-pds">"</span>color<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>Turquoise<span class="pl-pds">"</span></span>));
<span class="pl-c1">set!</span>(attrs<span class="pl-k">.</span>subgraphs[<span class="pl-c1">1</span>]<span class="pl-k">.</span>graph_options, <span class="pl-c1">Property</span>(<span class="pl-s"><span class="pl-pds">"</span>label<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>process #NEW 1<span class="pl-pds">"</span></span>));
<span class="pl-c1">plot_graphviz</span>(mk, attrs; scale <span class="pl-k">=</span> <span class="pl-c1">5</span>)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="docs/README_files/README_27_0.svg"><img src="docs/README_files/README_27_0.svg" alt="svg" style="max-width: 100%;"></a></p>
<p dir="auto">But it is not possible to access a node or edge inside a cluster. Therefore we can use a built-in trick to manipulate the node directly:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="set!(attrs.subgraphs[2].nodes, &quot;b0&quot;, Property(&quot;color&quot;,&quot;green&quot;)); ## does not work inside a cluster!
set!(attrs.nodes, &quot;b0&quot;, Property(&quot;color&quot;,&quot;green&quot;)); ## but this works!
plot_graphviz(mk, attrs; scale = 5)"><pre><span class="pl-c1">set!</span>(attrs<span class="pl-k">.</span>subgraphs[<span class="pl-c1">2</span>]<span class="pl-k">.</span>nodes, <span class="pl-s"><span class="pl-pds">"</span>b0<span class="pl-pds">"</span></span>, <span class="pl-c1">Property</span>(<span class="pl-s"><span class="pl-pds">"</span>color<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>green<span class="pl-pds">"</span></span>)); <span class="pl-c"><span class="pl-c">#</span># does not work inside a cluster!</span>
<span class="pl-c1">set!</span>(attrs<span class="pl-k">.</span>nodes, <span class="pl-s"><span class="pl-pds">"</span>b0<span class="pl-pds">"</span></span>, <span class="pl-c1">Property</span>(<span class="pl-s"><span class="pl-pds">"</span>color<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>green<span class="pl-pds">"</span></span>)); <span class="pl-c"><span class="pl-c">#</span># but this works!</span>
<span class="pl-c1">plot_graphviz</span>(mk, attrs; scale <span class="pl-k">=</span> <span class="pl-c1">5</span>)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="docs/README_files/README_29_0.svg"><img src="docs/README_files/README_29_0.svg" alt="svg" style="max-width: 100%;"></a></p>
<p dir="auto">To write and store the graph use the <code>write_dot_file</code> function:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="write_dot_file(mk,&quot;./test.dot&quot;; attributes=attrs);"><pre><span class="pl-c1">write_dot_file</span>(mk,<span class="pl-s"><span class="pl-pds">"</span>./test.dot<span class="pl-pds">"</span></span>; attributes<span class="pl-k">=</span>attrs);</pre></div>
<h2 dir="auto">
<a id="user-content-default-attributes" class="anchor" aria-hidden="true" href="#default-attributes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Default Attributes:</h2>
<p dir="auto">Back to our graph <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="a74d675e83cd99be83c3875c0d39c66d">$g$</math-renderer>. How to get the Graphviz attributes of this graph? Well, there are two ways:</p>
<ol dir="auto">
<li>call an empty constuctor: attrs = GraphivzAttributes()</li>
<li>call the contructor with our graph <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="a74d675e83cd99be83c3875c0d39c66d">$g$</math-renderer>: attrs = GraphivzAttributes(g::AbstractSimpleWeightedGraph)</li>
</ol>
<p dir="auto">The second call generates the default plotting parameter, which ist used to represent the graph using <code>plot_graphviz()</code>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="attrs = GraphvizAttributes(g)"><pre>attrs <span class="pl-k">=</span> <span class="pl-c1">GraphvizAttributes</span>(g)</pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="GraphvizAttributes(Property[Property{String}(&quot;weights&quot;, &quot;false&quot;), Property{String}(&quot;largenet&quot;, &quot;200&quot;)], Property[Property{String}(&quot;center&quot;, &quot;\&quot;1,1\&quot;&quot;), Property{String}(&quot;overlap&quot;, &quot;scale&quot;), Property{String}(&quot;concentrate&quot;, &quot;true&quot;), Property{String}(&quot;layout&quot;, &quot;neato&quot;), Property{String}(&quot;size&quot;, &quot;3.0&quot;)], Property[Property{String}(&quot;color&quot;, &quot;Turquoise&quot;), Property{String}(&quot;fontsize&quot;, &quot;7.0&quot;), Property{String}(&quot;width&quot;, &quot;0.25&quot;), Property{String}(&quot;height&quot;, &quot;0.25&quot;), Property{String}(&quot;fixedsize&quot;, &quot;true&quot;), Property{String}(&quot;shape&quot;, &quot;circle&quot;)], Property[Property{String}(&quot;arrowsize&quot;, &quot;0.5&quot;), Property{String}(&quot;arrowtype&quot;, &quot;normal&quot;), Property{String}(&quot;fontsize&quot;, &quot;1.0&quot;)], PlotGraphviz.gvSubGraph[], gvNode[gvNode(1, &quot;1&quot;, Property[]), gvNode(2, &quot;2&quot;, Property[]), gvNode(3, &quot;3&quot;, Property[])], gvEdge[gvEdge(1, 2, Property[Property{Float64}(&quot;xlabel&quot;, 0.5)]), gvEdge(1, 3, Property[Property{Float64}(&quot;xlabel&quot;, 2.0)]), gvEdge(2, 1, Property[Property{Float64}(&quot;xlabel&quot;, 0.5)]), gvEdge(2, 3, Property[Property{Float64}(&quot;xlabel&quot;, 0.8)]), gvEdge(3, 1, Property[Property{Float64}(&quot;xlabel&quot;, 2.0)]), gvEdge(3, 2, Property[Property{Float64}(&quot;xlabel&quot;, 0.8)])])"><pre class="notranslate"><code>GraphvizAttributes(Property[Property{String}("weights", "false"), Property{String}("largenet", "200")], Property[Property{String}("center", "\"1,1\""), Property{String}("overlap", "scale"), Property{String}("concentrate", "true"), Property{String}("layout", "neato"), Property{String}("size", "3.0")], Property[Property{String}("color", "Turquoise"), Property{String}("fontsize", "7.0"), Property{String}("width", "0.25"), Property{String}("height", "0.25"), Property{String}("fixedsize", "true"), Property{String}("shape", "circle")], Property[Property{String}("arrowsize", "0.5"), Property{String}("arrowtype", "normal"), Property{String}("fontsize", "1.0")], PlotGraphviz.gvSubGraph[], gvNode[gvNode(1, "1", Property[]), gvNode(2, "2", Property[]), gvNode(3, "3", Property[])], gvEdge[gvEdge(1, 2, Property[Property{Float64}("xlabel", 0.5)]), gvEdge(1, 3, Property[Property{Float64}("xlabel", 2.0)]), gvEdge(2, 1, Property[Property{Float64}("xlabel", 0.5)]), gvEdge(2, 3, Property[Property{Float64}("xlabel", 0.8)]), gvEdge(3, 1, Property[Property{Float64}("xlabel", 2.0)]), gvEdge(3, 2, Property[Property{Float64}("xlabel", 0.8)])])
</code></pre></div>
<h2 dir="auto">
<a id="user-content-color-and-path" class="anchor" aria-hidden="true" href="#color-and-path"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Color and Path:</h2>
<p dir="auto">There a two special functions available.</p>
<h3 dir="auto">
<a id="user-content-color-the-graph" class="anchor" aria-hidden="true" href="#color-the-graph"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Color the graph:</h3>
<p dir="auto">One typical problem in graph theory is to identify connected components and to color them:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="g2,attrs2 = read_dot_file(&quot;./test/data/example.dot&quot;);"><pre>g2,attrs2 <span class="pl-k">=</span> <span class="pl-c1">read_dot_file</span>(<span class="pl-s"><span class="pl-pds">"</span>./test/data/example.dot<span class="pl-pds">"</span></span>);</pre></div>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="plot_graphviz(g2; edge_label=true, scale=6)"><pre><span class="pl-c1">plot_graphviz</span>(g2; edge_label<span class="pl-k">=</span><span class="pl-c1">true</span>, scale<span class="pl-k">=</span><span class="pl-c1">6</span>)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="docs/README_files/README_40_0.svg"><img src="docs/README_files/README_40_0.svg" alt="svg" style="max-width: 100%;"></a></p>
<p dir="auto">Use <code>Graphs.jl</code> algorithm to identify connected components:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="L = Graphs.connected_components(g2)"><pre>L <span class="pl-k">=</span> Graphs<span class="pl-k">.</span><span class="pl-c1">connected_components</span>(g2)</pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="8-element Vector{Vector{Int64}}:
 [1, 19]
 [2, 7, 13, 16]
 [3, 4, 9, 11]
 [5, 6, 10, 17, 18]
 [8, 20]
 [12]
 [14]
 [15]"><pre class="notranslate"><code>8-element Vector{Vector{Int64}}:
 [1, 19]
 [2, 7, 13, 16]
 [3, 4, 9, 11]
 [5, 6, 10, 17, 18]
 [8, 20]
 [12]
 [14]
 [15]
</code></pre></div>
<p dir="auto">Transform it to a vector for which each number represents the color of node:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="color_vec = zeros(Int, 1, nv(g2))
color = 1
for components in L
    for idx in components
        color_vec[idx] = color
    end
    color = color + 1
end"><pre>color_vec <span class="pl-k">=</span> <span class="pl-c1">zeros</span>(Int, <span class="pl-c1">1</span>, <span class="pl-c1">nv</span>(g2))
color <span class="pl-k">=</span> <span class="pl-c1">1</span>
<span class="pl-k">for</span> components <span class="pl-k">in</span> L
    <span class="pl-k">for</span> idx <span class="pl-k">in</span> components
        color_vec[idx] <span class="pl-k">=</span> color
    <span class="pl-k">end</span>
    color <span class="pl-k">=</span> color <span class="pl-k">+</span> <span class="pl-c1">1</span>
<span class="pl-k">end</span></pre></div>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="plot_graphviz(g2, attrs2; colors = color_vec, scale = 7)"><pre><span class="pl-c1">plot_graphviz</span>(g2, attrs2; colors <span class="pl-k">=</span> color_vec, scale <span class="pl-k">=</span> <span class="pl-c1">7</span>)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="docs/README_files/README_45_0.svg"><img src="docs/README_files/README_45_0.svg" alt="svg" style="max-width: 100%;"></a></p>
<h3 dir="auto">
<a id="user-content-shortest-path" class="anchor" aria-hidden="true" href="#shortest-path"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Shortest path:</h3>
<p dir="auto">Import a small layered dag:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="lydag, attrs = read_dot_file(&quot;./test/data/small_layered_dag.dot&quot;);"><pre>lydag, attrs <span class="pl-k">=</span> <span class="pl-c1">read_dot_file</span>(<span class="pl-s"><span class="pl-pds">"</span>./test/data/small_layered_dag.dot<span class="pl-pds">"</span></span>);</pre></div>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="plot_graphviz(lydag; landscape = true, scale = 7)"><pre><span class="pl-c1">plot_graphviz</span>(lydag; landscape <span class="pl-k">=</span> <span class="pl-c1">true</span>, scale <span class="pl-k">=</span> <span class="pl-c1">7</span>)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="docs/README_files/README_49_0.svg"><img src="docs/README_files/README_49_0.svg" alt="svg" style="max-width: 100%;"></a></p>
<p dir="auto">To get the shortest path, we use Graphs.jl:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="path = Graphs.dijkstra_shortest_paths(lydag, 3);"><pre>path <span class="pl-k">=</span> Graphs<span class="pl-k">.</span><span class="pl-c1">dijkstra_shortest_paths</span>(lydag, <span class="pl-c1">3</span>);</pre></div>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# convert precedessor list in path:
spath(ds, source, sink) = source == sink ? source : [spath(ds, ds.parents[source], sink) source];"><pre><span class="pl-c"><span class="pl-c">#</span> convert precedessor list in path:</span>
<span class="pl-en">spath</span>(ds, source, sink) <span class="pl-k">=</span> source <span class="pl-k">==</span> sink <span class="pl-k">?</span> source <span class="pl-k">:</span> [<span class="pl-c1">spath</span>(ds, ds<span class="pl-k">.</span>parents[source], sink) source];</pre></div>
<p dir="auto">And evaluate shortest path between <strong>super-sink</strong> and <strong>super-source</strong>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="L= spath(path, 25, 3)"><pre>L<span class="pl-k">=</span> <span class="pl-c1">spath</span>(path, <span class="pl-c1">25</span>, <span class="pl-c1">3</span>)</pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="1×12 Matrix{Int64}:
 3  34  26  31  22  16  28  12  11  27  20  25"><pre class="notranslate"><code>1×12 Matrix{Int64}:
 3  34  26  31  22  16  28  12  11  27  20  25
</code></pre></div>
<p dir="auto">And that represents the shortest path in our graph, and we can visualize this by using the <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="a74d675e83cd99be83c3875c0d39c66d">$path$</math-renderer> option:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="plot_graphviz(lydag; landscape = true, scale = 7, path = L)"><pre><span class="pl-c1">plot_graphviz</span>(lydag; landscape <span class="pl-k">=</span> <span class="pl-c1">true</span>, scale <span class="pl-k">=</span> <span class="pl-c1">7</span>, path <span class="pl-k">=</span> L)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="docs/README_files/README_56_0.svg"><img src="docs/README_files/README_56_0.svg" alt="svg" style="max-width: 100%;"></a></p>
<h2 dir="auto">
<a id="user-content-comments" class="anchor" aria-hidden="true" href="#comments"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Comments</h2>
<p dir="auto">Open issues:</p>
<ul dir="auto">
<li>Not all test graphs are imported correcty.</li>
<li>Performance issues have to be solved.</li>
<li>Design Patterns and Best Practices to be implemented.</li>
<li>
<strong>Tests</strong> are missing!</li>
</ul>
</article></div>