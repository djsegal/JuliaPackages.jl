<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-constraintprogrammingextensionsjl" class="anchor" aria-hidden="true" href="#constraintprogrammingextensionsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>ConstraintProgrammingExtensions.jl</h1>
<p dir="auto"><a href="https://juliaconstraints.github.io/ConstraintProgrammingExtensions.jl/dev/" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="http://www.repostatus.org/#active" rel="nofollow"><img src="https://camo.githubusercontent.com/ed51270ad41e2b842f9423b165977ac42f8498581be7c17c78818d1a45b834d5/687474703a2f2f7777772e7265706f7374617475732e6f72672f6261646765732f6c61746573742f6163746976652e737667" alt="Project Status: Active – The project has reached a stable, usable state and is being actively developed." data-canonical-src="http://www.repostatus.org/badges/latest/active.svg" style="max-width: 100%;"></a>
<a href="http://opensource.org/licenses/MIT" rel="nofollow"><img src="https://camo.githubusercontent.com/c9414bd5708e8b65ba4384fe4d1f6779a11df3fcec79d3a818cff8a99478f7cd/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d627269676874677265656e2e7376673f7374796c653d666c6174" alt="The MIT License" data-canonical-src="https://img.shields.io/badge/license-MIT-brightgreen.svg?style=flat" style="max-width: 100%;"></a>
<a href="https://juliahub.com/ui/Packages/ConstraintProgrammingExtensions/3CBBH" rel="nofollow"><img src="https://camo.githubusercontent.com/b8f70b5abdc221e49e4f78b75d99aefef72b59abc0517b52b437c2989efd9660/68747470733a2f2f6a756c69616875622e636f6d2f646f63732f436f6e73747261696e7450726f6772616d6d696e67457874656e73696f6e732f76657273696f6e2e737667" alt="version" data-canonical-src="https://juliahub.com/docs/ConstraintProgrammingExtensions/version.svg" style="max-width: 100%;"></a>
<a href="https://zenodo.org/badge/latestdoi/240344723" rel="nofollow"><img src="https://camo.githubusercontent.com/ed1d9611d24ad77cc2cef07931ed0191008f04edd929b47d4a33ee94f96e59ab/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f3234303334343732332e737667" alt="DOI" data-canonical-src="https://zenodo.org/badge/240344723.svg" style="max-width: 100%;"></a></p>
<p dir="auto"><a href="https://github.com/dourouc05/ConstraintProgrammingExtensions.jl/actions/workflows/GitHubCI.yml/"><img src="https://github.com/dourouc05/ConstraintProgrammingExtensions.jl/actions/workflows/GitHubCI.yml/badge.svg" alt="Continuous integration" style="max-width: 100%;"></a>
<a href="https://coveralls.io/r/dourouc05/ConstraintProgrammingExtensions.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/fa99182a96603e2d926e3054a7e491137925139d620a244fd94376f59f9679bc/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f646f75726f756330352f436f6e73747261696e7450726f6772616d6d696e67457874656e73696f6e732e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/dourouc05/ConstraintProgrammingExtensions.jl/badge.svg?branch=master" style="max-width: 100%;"></a>
<a href="http://codecov.io/github/dourouc05/ConstraintProgrammingExtensions.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/ebdee31bc090532d9b5764b1c7eb21fb849fd85f33b5d6af12612d8c89fe4116/687474703a2f2f636f6465636f762e696f2f6769746875622f646f75726f756330352f436f6e73747261696e7450726f6772616d6d696e67457874656e73696f6e732e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/dourouc05/ConstraintProgrammingExtensions.jl/coverage.svg?branch=master" style="max-width: 100%;"></a></p>
<p dir="auto">This package provides extensions to
<a href="https://github.com/jump-dev/MathOptInterface.jl">MathOptInterface</a>
in order to support constraint programming. This allows to use the same user
model with several solvers.</p>
<p dir="auto">On top of providing a uniform interface, this package also implements a
quantity of bridges, i.e. reformulations of constraints, to bridge the gap
when a solver does not support a specific constraint. In particular, the set
of bridges should make it possible to transform any CP model into a MIP model.</p>
<p dir="auto">Currently, the following solvers are using this interface:</p>
<ul dir="auto">
<li><a href="https://github.com/dourouc05/Chuffed.jl">Chuffed.jl</a>, wrapper for the open-source <a href="https://github.com/chuffed/chuffed">Chuffed</a> solver</li>
<li><a href="https://github.com/Wikunia/ConstraintSolver.jl">ConstraintSolver.jl</a>, a native Julia open-source solver</li>
<li><a href="https://github.com/dourouc05/CPLEXCP.jl">CPLEXCP.jl</a>, wrapper for the commercial <a href="https://www.ibm.com/analytics/cplex-cp-optimizer" rel="nofollow">CPLEX CP Optimizer</a> solver</li>
</ul>
<h2 dir="auto"><a id="user-content-an-example" class="anchor" aria-hidden="true" href="#an-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>An example</h2>
<p dir="auto">For instance, you can use this package <a href="https://github.com/dourouc05/ConstraintProgrammingExtensions.jl/blob/master/src/Test/test_integration.jl#L9-L32">to formulate a colouring problem on a map</a>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using MathOptInterface
using ConstraintProgrammingExtensions
using … # Import your solver.

const MOI = MathOptInterface
const CP = ConstraintProgrammingExtensions

model = … # Depending on the solver you want to use.

# Create the variables: six countriers; the value is the colour number for each country
belgium, _ = MOI.add_constrained_variable(model, MOI.Integer())
denmark, _ = MOI.add_constrained_variable(model, MOI.Integer())
france, _ = MOI.add_constrained_variable(model, MOI.Integer())
germany, _ = MOI.add_constrained_variable(model, MOI.Integer())
luxembourg, _ = MOI.add_constrained_variable(model, MOI.Integer())
netherlands, _ = MOI.add_constrained_variable(model, MOI.Integer())

# Constrain the colours to be in {0, 1, 2, 3}
MOI.add_constraint(model, belgium, MOI.Interval(0, 3))
MOI.add_constraint(model, denmark, MOI.Interval(0, 3))
MOI.add_constraint(model, france, MOI.Interval(0, 3))
MOI.add_constraint(model, germany, MOI.Interval(0, 3))
MOI.add_constraint(model, luxembourg, MOI.Interval(0, 3))
MOI.add_constraint(model, netherlands, MOI.Interval(0, 3))

# Two adjacent countries must have different colours.
countries(c1, c2) = MOI.ScalarAffineFunction(MOI.ScalarAffineTerm.([1, -1], [c1, c2]), 0)
MOI.add_constraint(model, countries(belgium, france), CP.DifferentFrom(0))
MOI.add_constraint(model, countries(belgium, germany), CP.DifferentFrom(0))
MOI.add_constraint(model, countries(belgium, netherlands), CP.DifferentFrom(0))
MOI.add_constraint(model, countries(belgium, luxembourg), CP.DifferentFrom(0))
MOI.add_constraint(model, countries(denmark, germany), CP.DifferentFrom(0))
MOI.add_constraint(model, countries(france, germany), CP.DifferentFrom(0))
MOI.add_constraint(model, countries(france, luxembourg), CP.DifferentFrom(0))
MOI.add_constraint(model, countries(germany, luxembourg), CP.DifferentFrom(0))
MOI.add_constraint(model, countries(germany, netherlands), CP.DifferentFrom(0))

# Solve the model.
MOI.optimize!(model)

# Check if the solution is optimum.
@assert MOI.get(model, MOI.TerminationStatus()) == MOI.OPTIMAL

# Get the solution
@show MOI.get(model, MOI.VariablePrimal(), belgium)
@show MOI.get(model, MOI.VariablePrimal(), denmark)
@show MOI.get(model, MOI.VariablePrimal(), france)
@show MOI.get(model, MOI.VariablePrimal(), germany)
@show MOI.get(model, MOI.VariablePrimal(), luxembourg)
@show MOI.get(model, MOI.VariablePrimal(), netherlands)"><pre><span class="pl-k">using</span> MathOptInterface
<span class="pl-k">using</span> ConstraintProgrammingExtensions
<span class="pl-k">using</span> … <span class="pl-c"><span class="pl-c">#</span> Import your solver.</span>

<span class="pl-k">const</span> MOI <span class="pl-k">=</span> MathOptInterface
<span class="pl-k">const</span> CP <span class="pl-k">=</span> ConstraintProgrammingExtensions

model <span class="pl-k">=</span> … <span class="pl-c"><span class="pl-c">#</span> Depending on the solver you want to use.</span>

<span class="pl-c"><span class="pl-c">#</span> Create the variables: six countriers; the value is the colour number for each country</span>
belgium, _ <span class="pl-k">=</span> MOI<span class="pl-k">.</span><span class="pl-c1">add_constrained_variable</span>(model, MOI<span class="pl-k">.</span><span class="pl-c1">Integer</span>())
denmark, _ <span class="pl-k">=</span> MOI<span class="pl-k">.</span><span class="pl-c1">add_constrained_variable</span>(model, MOI<span class="pl-k">.</span><span class="pl-c1">Integer</span>())
france, _ <span class="pl-k">=</span> MOI<span class="pl-k">.</span><span class="pl-c1">add_constrained_variable</span>(model, MOI<span class="pl-k">.</span><span class="pl-c1">Integer</span>())
germany, _ <span class="pl-k">=</span> MOI<span class="pl-k">.</span><span class="pl-c1">add_constrained_variable</span>(model, MOI<span class="pl-k">.</span><span class="pl-c1">Integer</span>())
luxembourg, _ <span class="pl-k">=</span> MOI<span class="pl-k">.</span><span class="pl-c1">add_constrained_variable</span>(model, MOI<span class="pl-k">.</span><span class="pl-c1">Integer</span>())
netherlands, _ <span class="pl-k">=</span> MOI<span class="pl-k">.</span><span class="pl-c1">add_constrained_variable</span>(model, MOI<span class="pl-k">.</span><span class="pl-c1">Integer</span>())

<span class="pl-c"><span class="pl-c">#</span> Constrain the colours to be in {0, 1, 2, 3}</span>
MOI<span class="pl-k">.</span><span class="pl-c1">add_constraint</span>(model, belgium, MOI<span class="pl-k">.</span><span class="pl-c1">Interval</span>(<span class="pl-c1">0</span>, <span class="pl-c1">3</span>))
MOI<span class="pl-k">.</span><span class="pl-c1">add_constraint</span>(model, denmark, MOI<span class="pl-k">.</span><span class="pl-c1">Interval</span>(<span class="pl-c1">0</span>, <span class="pl-c1">3</span>))
MOI<span class="pl-k">.</span><span class="pl-c1">add_constraint</span>(model, france, MOI<span class="pl-k">.</span><span class="pl-c1">Interval</span>(<span class="pl-c1">0</span>, <span class="pl-c1">3</span>))
MOI<span class="pl-k">.</span><span class="pl-c1">add_constraint</span>(model, germany, MOI<span class="pl-k">.</span><span class="pl-c1">Interval</span>(<span class="pl-c1">0</span>, <span class="pl-c1">3</span>))
MOI<span class="pl-k">.</span><span class="pl-c1">add_constraint</span>(model, luxembourg, MOI<span class="pl-k">.</span><span class="pl-c1">Interval</span>(<span class="pl-c1">0</span>, <span class="pl-c1">3</span>))
MOI<span class="pl-k">.</span><span class="pl-c1">add_constraint</span>(model, netherlands, MOI<span class="pl-k">.</span><span class="pl-c1">Interval</span>(<span class="pl-c1">0</span>, <span class="pl-c1">3</span>))

<span class="pl-c"><span class="pl-c">#</span> Two adjacent countries must have different colours.</span>
<span class="pl-en">countries</span>(c1, c2) <span class="pl-k">=</span> MOI<span class="pl-k">.</span><span class="pl-c1">ScalarAffineFunction</span>(MOI<span class="pl-k">.</span><span class="pl-c1">ScalarAffineTerm</span>.([<span class="pl-c1">1</span>, <span class="pl-k">-</span><span class="pl-c1">1</span>], [c1, c2]), <span class="pl-c1">0</span>)
MOI<span class="pl-k">.</span><span class="pl-c1">add_constraint</span>(model, <span class="pl-c1">countries</span>(belgium, france), CP<span class="pl-k">.</span><span class="pl-c1">DifferentFrom</span>(<span class="pl-c1">0</span>))
MOI<span class="pl-k">.</span><span class="pl-c1">add_constraint</span>(model, <span class="pl-c1">countries</span>(belgium, germany), CP<span class="pl-k">.</span><span class="pl-c1">DifferentFrom</span>(<span class="pl-c1">0</span>))
MOI<span class="pl-k">.</span><span class="pl-c1">add_constraint</span>(model, <span class="pl-c1">countries</span>(belgium, netherlands), CP<span class="pl-k">.</span><span class="pl-c1">DifferentFrom</span>(<span class="pl-c1">0</span>))
MOI<span class="pl-k">.</span><span class="pl-c1">add_constraint</span>(model, <span class="pl-c1">countries</span>(belgium, luxembourg), CP<span class="pl-k">.</span><span class="pl-c1">DifferentFrom</span>(<span class="pl-c1">0</span>))
MOI<span class="pl-k">.</span><span class="pl-c1">add_constraint</span>(model, <span class="pl-c1">countries</span>(denmark, germany), CP<span class="pl-k">.</span><span class="pl-c1">DifferentFrom</span>(<span class="pl-c1">0</span>))
MOI<span class="pl-k">.</span><span class="pl-c1">add_constraint</span>(model, <span class="pl-c1">countries</span>(france, germany), CP<span class="pl-k">.</span><span class="pl-c1">DifferentFrom</span>(<span class="pl-c1">0</span>))
MOI<span class="pl-k">.</span><span class="pl-c1">add_constraint</span>(model, <span class="pl-c1">countries</span>(france, luxembourg), CP<span class="pl-k">.</span><span class="pl-c1">DifferentFrom</span>(<span class="pl-c1">0</span>))
MOI<span class="pl-k">.</span><span class="pl-c1">add_constraint</span>(model, <span class="pl-c1">countries</span>(germany, luxembourg), CP<span class="pl-k">.</span><span class="pl-c1">DifferentFrom</span>(<span class="pl-c1">0</span>))
MOI<span class="pl-k">.</span><span class="pl-c1">add_constraint</span>(model, <span class="pl-c1">countries</span>(germany, netherlands), CP<span class="pl-k">.</span><span class="pl-c1">DifferentFrom</span>(<span class="pl-c1">0</span>))

<span class="pl-c"><span class="pl-c">#</span> Solve the model.</span>
MOI<span class="pl-k">.</span><span class="pl-c1">optimize!</span>(model)

<span class="pl-c"><span class="pl-c">#</span> Check if the solution is optimum.</span>
<span class="pl-c1">@assert</span> MOI<span class="pl-k">.</span><span class="pl-c1">get</span>(model, MOI<span class="pl-k">.</span><span class="pl-c1">TerminationStatus</span>()) <span class="pl-k">==</span> MOI<span class="pl-k">.</span>OPTIMAL

<span class="pl-c"><span class="pl-c">#</span> Get the solution</span>
<span class="pl-c1">@show</span> MOI<span class="pl-k">.</span><span class="pl-c1">get</span>(model, MOI<span class="pl-k">.</span><span class="pl-c1">VariablePrimal</span>(), belgium)
<span class="pl-c1">@show</span> MOI<span class="pl-k">.</span><span class="pl-c1">get</span>(model, MOI<span class="pl-k">.</span><span class="pl-c1">VariablePrimal</span>(), denmark)
<span class="pl-c1">@show</span> MOI<span class="pl-k">.</span><span class="pl-c1">get</span>(model, MOI<span class="pl-k">.</span><span class="pl-c1">VariablePrimal</span>(), france)
<span class="pl-c1">@show</span> MOI<span class="pl-k">.</span><span class="pl-c1">get</span>(model, MOI<span class="pl-k">.</span><span class="pl-c1">VariablePrimal</span>(), germany)
<span class="pl-c1">@show</span> MOI<span class="pl-k">.</span><span class="pl-c1">get</span>(model, MOI<span class="pl-k">.</span><span class="pl-c1">VariablePrimal</span>(), luxembourg)
<span class="pl-c1">@show</span> MOI<span class="pl-k">.</span><span class="pl-c1">get</span>(model, MOI<span class="pl-k">.</span><span class="pl-c1">VariablePrimal</span>(), netherlands)</pre></div>
</article></div>