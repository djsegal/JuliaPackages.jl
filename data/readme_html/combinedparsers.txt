<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-combinedparsers-in-pure-julia" class="anchor" aria-hidden="true" href="#combinedparsers-in-pure-julia"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>CombinedParsers in pure Julia</h1>

<p><a href="https://gkappler.github.io/CombinedParsers.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a>
<a href="https://travis-ci.com/github/gkappler/CombinedParsers.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/acbaf23cddbe5b8c89a7c0304d48a6b036d7b0847176f27a2bd51b71164d7d83/68747470733a2f2f7472617669732d63692e6f72672f676b6170706c65722f436f6d62696e6564506172736572732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/gkappler/CombinedParsers.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/gkappler/CombinedParsers.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/8ee057ce2801d1a54d591fcc4f5b6e0b9d6ba78dac216e13260213941a9d7435/68747470733a2f2f636f6465636f762e696f2f67682f676b6170706c65722f436f6d62696e6564506172736572732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/gkappler/CombinedParsers.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a>
A package for combining parsers and transforming strings into julia types.</p>
<p>Compose parsers parsimoneously within a functional <a href="https://en.wikipedia.org/wiki/Parser_combinator" rel="nofollow">parser combinator paradigm</a>,
utilize Julia's type inference for transformations,
log conveniently for debugging, and let Julia compile your parser for performance.</p>
<h2><a id="user-content-package-features" class="anchor" aria-hidden="true" href="#package-features"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Package Features</h2>
<ul>
<li>Speed
<ul>
<li><a href="https://gkappler.github.io/CombinedParsers.jl/dev/man/pcre-compliance" rel="nofollow">write parsers faster than <code>Base.PCRE</code></a>, optimized by the Julia compiler for parametric parser and state types.</li>
<li><code>@generated function</code>s, trie-based scanning (<a href="https://gkappler.github.io/CombinedParsers.jl/dev/man/example-either-trie" rel="nofollow">example</a>), compile with your custom parsing algorithm (<a href="https://gkappler.github.io/CombinedParsers.jl/dev/man/example-palindromes" rel="nofollow">example</a>)</li>
<li>(planned: memoization, lazy transformations)</li>
</ul>
</li>
<li>Simplicity
<ul>
<li>Clear <code>@syntax</code> integrates <code>map</code> transformations with Julia <code>result_type</code> inference.</li>
<li>Define without redundancy: parser, memory representation, and instance construction.
When solely the parser is defined, Julia infers <code>result_type</code>(parser) and defines memory layout,
and constructors are compiled for the parsing state from <code>Transformation</code>s.</li>
<li><a href="https://github.com/JuliaCollections/AbstractTrees.jl">AbstractTrees.jl</a> interface provides clearly layed out printing in the REPL. <code>with_log</code> provides colored logging of the parsing <code>with_name</code>s.</li>
</ul>
</li>
<li>Interoperability
<ul>
<li><a href="https://github.com/queryverse/TextParse.jl">TextParse.jl</a>: existing <code>TextParse.AbstractToken</code> implementations can be used with CombinedParsers. <code>CombinedParser</code> provide <code>TextParse.tryparsenext</code> and can be used e.g. in CSV.jl.</li>
<li>Pure Julia regular expression parsers are provided with the <code>@re_str</code> macro, a plug-in replacement for <code>Base.@r_str</code>.
Tested on the <a href="https://gkappler.github.io/CombinedParsers.jl/dev/man/pcre-compliance" rel="nofollow">PCRE pattern test set</a>.</li>
</ul>
</li>
<li>Generality
<ul>
<li>All valid parsings can be <code>Base.iterate</code>d lazily.</li>
<li>Higher-order parsers depending on the parsing state allow for not context-free parsers (<code>after</code>).</li>
<li>can process UTF8 strings or any sequence type supporting <code>getindex</code>, <code>nextind</code>, <code>prevind</code> methods.</li>
</ul>
</li>
</ul>
<h2><a id="user-content-getting-started" class="anchor" aria-hidden="true" href="#getting-started"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Getting started</h2>
<p>The Overview provides a tutorial explaining how to get started using CombinedParsers.
The <a href="https://gkappler.github.io/CombinedParsers.jl/dev/man/user" rel="nofollow">User guide</a> provides a summary of CombinedParsers types and constructors.
Some examples of packages using CombinedParsers can be found on the Examples page.
See the [Index](@ref main-index) for the complete list of documented functions and types.</p>
<blockquote>
<p><code>CombinedParsers.jl</code> is a registered package (currently release-candiate).<br>
Install with</p>
</blockquote>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="] add CombinedParsers
"><pre>] add CombinedParsers</pre></div>
<p>You can get an 8-min idea of the package in comparison to <code>Regex</code> in <a href="https://www.youtube.com/watch?v=YBMJSKwwCT0" rel="nofollow">my JuliaCon2020 talk<img src="https://camo.githubusercontent.com/50eb22ad1ac9cf0fb62e8a1fd0ceddea3f9f6e1b9599e1cf2e52834a2d79c327/68747470733a2f2f696d672e796f75747562652e636f6d2f76692f59424d4a534b77774354302f302e6a7067" alt="JuliaCon2020 talk" data-canonical-src="https://img.youtube.com/vi/YBMJSKwwCT0/0.jpg" style="max-width:100%;"></a>.</p>
<h3><a id="user-content-example-rational-numbers-arithmetics" class="anchor" aria-hidden="true" href="#example-rational-numbers-arithmetics"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example: rational numbers arithmetics</h3>
<p>Parsing is reading and transforming a sequence of characters.
<code>CombinedParsers</code> provides constructors to combine parsers and transform (sub-)parsings arbitrarily with julia syntax.
Combinator constructors are discussed in the <a href="https://gkappler.github.io/CombinedParsers.jl/dev/man/user" rel="nofollow">user guide</a>.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using CombinedParsers
using TextParse
"><pre><span class="pl-k">using</span> CombinedParsers
<span class="pl-k">using</span> TextParse</pre></div>
<p>This example reads and evaluates arithmetical terms for rational numbers.
The following defines an evaluating parser for rational number terms as sequences of subterms interleaved with operators.
Sub-terms are <code>Either</code> fast <code>TextParse.Numeric(Int)</code> integer numbers, converted to <code>Rational{Int}</code>,
or a subterm is written as parentheses around a nested term:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="@syntax subterm = Either{Rational{Int}}(Any[TextParse.Numeric(Int)]);
@syntax for parenthesis in subterm
    mult         = evaluate |&gt; join(subterm, CharIn(&quot;*/&quot;), infix=:prefix )
    @syntax term = evaluate |&gt; join(mult,    CharIn(&quot;+-&quot;), infix=:prefix )
    Sequence(2,'(',term,')')
end;
"><pre><span class="pl-c1">@syntax</span> subterm <span class="pl-k">=</span> <span class="pl-c1">Either</span><span class="pl-c1">{Rational{Int}}</span>(Any[TextParse<span class="pl-k">.</span><span class="pl-c1">Numeric</span>(Int)]);
<span class="pl-c1">@syntax</span> <span class="pl-k">for</span> parenthesis <span class="pl-k">in</span> subterm
    mult         <span class="pl-k">=</span> evaluate <span class="pl-k">|&gt;</span> <span class="pl-c1">join</span>(subterm, <span class="pl-c1">CharIn</span>(<span class="pl-s"><span class="pl-pds">"</span>*/<span class="pl-pds">"</span></span>), infix<span class="pl-k">=</span><span class="pl-c1">:prefix</span> )
    <span class="pl-c1">@syntax</span> term <span class="pl-k">=</span> evaluate <span class="pl-k">|&gt;</span> <span class="pl-c1">join</span>(mult,    <span class="pl-c1">CharIn</span>(<span class="pl-s"><span class="pl-pds">"</span>+-<span class="pl-pds">"</span></span>), infix<span class="pl-k">=</span><span class="pl-c1">:prefix</span> )
    <span class="pl-c1">Sequence</span>(<span class="pl-c1">2</span>,<span class="pl-s"><span class="pl-pds">'</span>(<span class="pl-pds">'</span></span>,term,<span class="pl-s"><span class="pl-pds">'</span>)<span class="pl-pds">'</span></span>)
<span class="pl-k">end</span>;</pre></div>
<p>For parsing, <code>@syntax</code> registers a <code>@term_string</code> macro for parsing and transforming.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; term&quot;(1+2)/5&quot;
3//5

# The defined `CombinedParser` `term` can be used as a function for colorful logging of the parsing process.
julia&gt; term(&quot;1/((1+2)*4+3*(5*2))&quot;,log = [:parenthesis])
   match parenthesis: 1/((1+2)*4+3*(
                         ^___^
   match parenthesis: *4+3*(5*2))
                           ^___^
   match parenthesis: 1/((1+2)*4+3*(5*2))
                        ^_______________^
1//42

"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-s"><span class="pl-pds"><span class="pl-c1">term</span>"</span>(1+2)/5<span class="pl-pds">"</span></span>
<span class="pl-c1">3</span><span class="pl-k">//</span><span class="pl-c1">5</span>

<span class="pl-c"><span class="pl-c">#</span> The defined `CombinedParser` `term` can be used as a function for colorful logging of the parsing process.</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">term</span>(<span class="pl-s"><span class="pl-pds">"</span>1/((1+2)*4+3*(5*2))<span class="pl-pds">"</span></span>,log <span class="pl-k">=</span> [<span class="pl-c1">:parenthesis</span>])
   match parenthesis<span class="pl-k">:</span> <span class="pl-c1">1</span><span class="pl-k">/</span>((<span class="pl-c1">1</span><span class="pl-k">+</span><span class="pl-c1">2</span>)<span class="pl-k">*</span><span class="pl-c1">4</span><span class="pl-k">+</span><span class="pl-c1">3</span><span class="pl-k">*</span>(
                         <span class="pl-k">^</span>___<span class="pl-k">^</span>
   match parenthesis<span class="pl-k">:</span> <span class="pl-k">*</span><span class="pl-c1">4</span><span class="pl-k">+</span><span class="pl-c1">3</span><span class="pl-k">*</span>(<span class="pl-c1">5</span><span class="pl-k">*</span><span class="pl-c1">2</span>))
                           <span class="pl-k">^</span>___<span class="pl-k">^</span>
   match parenthesis<span class="pl-k">:</span> <span class="pl-c1">1</span><span class="pl-k">/</span>((<span class="pl-c1">1</span><span class="pl-k">+</span><span class="pl-c1">2</span>)<span class="pl-k">*</span><span class="pl-c1">4</span><span class="pl-k">+</span><span class="pl-c1">3</span><span class="pl-k">*</span>(<span class="pl-c1">5</span><span class="pl-k">*</span><span class="pl-c1">2</span>))
                        <span class="pl-k">^</span>_______________<span class="pl-k">^</span>
<span class="pl-c1">1</span><span class="pl-k">//</span><span class="pl-c1">42</span>
</pre></div>
<p><a href="https://en.wikipedia.org/wiki/Phrases_from_The_Hitchhiker%27s_Guide_to_the_Galaxy#Answer_to_the_Ultimate_Question_of_Life,_the_Universe,_and_Everything_(42)" rel="nofollow">Is every rational answer ultimately the inverse of a universal question in life?</a></p>
<p>This <code>CombinedParser</code> definition in 5,5 lines is sufficient for doing arithmetics:
<code>Base.join</code>(x,infix; infix=:prefix) is shorthand for <code>x ``*`` ``Repeat``( infix * x  )</code>,
and <code>f |&gt; parser</code> is shorthand for <code>map``(f,parser)</code>.</p>
<p>Note: The <code>evaluate</code> function definition is detailed in <a href="https://gkappler.github.io/CombinedParsers.jl/dev/man/example-arithmetic" rel="nofollow">the full example</a>.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; evaluate( (0, [ ('+',1), ('-',2) ]) )
-1//1

julia&gt; evaluate( (1, [ ('*',4), ('/',3) ]) )
4//3
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">evaluate</span>( (<span class="pl-c1">0</span>, [ (<span class="pl-s"><span class="pl-pds">'</span>+<span class="pl-pds">'</span></span>,<span class="pl-c1">1</span>), (<span class="pl-s"><span class="pl-pds">'</span>-<span class="pl-pds">'</span></span>,<span class="pl-c1">2</span>) ]) )
<span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">//</span><span class="pl-c1">1</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">evaluate</span>( (<span class="pl-c1">1</span>, [ (<span class="pl-s"><span class="pl-pds">'</span>*<span class="pl-pds">'</span></span>,<span class="pl-c1">4</span>), (<span class="pl-s"><span class="pl-pds">'</span>/<span class="pl-pds">'</span></span>,<span class="pl-c1">3</span>) ]) )
<span class="pl-c1">4</span><span class="pl-k">//</span><span class="pl-c1">3</span></pre></div>
<h2><a id="user-content-optimization-strategy" class="anchor" aria-hidden="true" href="#optimization-strategy"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Optimization Strategy</h2>
<p>CombinedParsers.jl is tested against the C PCRE2 library testset.
This strategy also allows for efficient benchmarking of code optimizations on many patterns, and runtime comparison with C PCRE2.
C PCRE2 optimized is among the fastest regex libraries (<a href="https://github.com/mariomka/regex-benchmark/tree/optimized">second behind Rust</a>, running <a href="https://github.com/mariomka">mariomka</a>'s benchmark will position CombinedParser among its competition.
Explorations for optimization are in git branches.</p>
<blockquote>
<p>All benchmarks are wrong, but some are useful - <a href="https://github.com/szilard">Szilard</a>, <a href="https://github.com/szilard/benchm-ml">benchm-ml</a></p>
</blockquote>
<p>The package is still young, and optimization is ongoing.
If you are interested in and able to dive deeper into the Julia memory layout and compiler, I would gladly collaborate on further optimizations:</p>
<ul>
<li>String layout: Parsing requires repeated Char comparisons. In UTF8, frequent characters are encoded shorter (8 bit), rare have longer codes.
For this reason, in Julia <code>String</code> indices are not consecutive and transversal requires using infamous <code>nextind</code> and <code>prevind</code>.
Profiling:
<ul>
<li><code>nextind</code> and <code>prevind</code> comsume considerable time.  Could be cached/memoized?</li>
<li><code>CombinedParsers</code> currently operates on the result of <code>getindex(::String,index)::Char</code> (technically on <code>iterate(::String,index)::Tuple{Char,Int}</code>).  Could matching use the raw byte representation directly?</li>
</ul>
</li>
<li>Macros: make all iteration <code>@generated</code> functions using expressions generated by a dispatched <code>iterate_expression</code> that can be used in a macro <code>@iterate</code> to generate an unrolled/unnested iteration code.
(Profiling hints that function calls do hardly contribute to runtime.)</li>
</ul>
<h2><a id="user-content-useful-design" class="anchor" aria-hidden="true" href="#useful-design"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Useful Design</h2>
<ul>
<li><a href="https://github.com/gkappler/WikitextParser.jl">WikitextParser.jl</a> is a <code>CombinedParser</code> for parsing <a href="https://en.wikipedia.org/wiki/Help:Wikitext" rel="nofollow">wikitext syntax</a>,
quite comprehensibly and representing Wikipedia articles within Julia.</li>
<li>OrgmodeParser.jl is a <code>CombinedParser</code> for parsing main <a href="https://orgmode.org/" rel="nofollow">org mode</a> syntax,
representing org files within Julia.</li>
<li><a href="https://github.com/gkappler/CombinedParserTools.jl">CombinedParserTools.jl</a> is currently more or less my own workspace to provide a set of re-useable parsers, used in <code>WikitextParser</code>.</li>
<li><a href="https://github.com/gkappler/Tries.jl">Tries.jl</a> is the abstract implementation of the fast prefix-tree matching in <code>CombinedParsers</code> (see <a href="https://gkappler.github.io/CombinedParsers.jl/dev/man/example-either-trie/" rel="nofollow">docs</a>)
If you want to work with any of these open source packages, I will gladly provide professional support.
If you are writing your own recursive <code>CombinedParser</code> and seek inspiration, you might find these comprehensive examples interesting.
(currently α release, so beware, dragons!)</li>
</ul>
<p>The <code>CombinedParsers</code> design</p>
<ul>
<li>is fast due to Julia parametric types, and compiler optimizations with generated functions,</li>
<li>its strictly typed parsing defines the domain data types,</li>
<li>is composable and optimizable with Julia method dispatch,</li>
<li>provides flexible public API for parsing, matching, iteration</li>
</ul>
<p>Making Julia parametric types central for the parser design equally allows automation of the data pipeline after parsing!</p>
<ul>
<li>fast db-indexing of text streams (e.g. logging): If you need support indexing logging streams into a (SQL-)Database, the (currently) proprietary TypeGraphs.jl provides <code>CombinedParsers</code> plug and play: Table schemas are infered from your parser.</li>
<li>fast HTTP-serving of parsed data: If you need support with a parsing server-client infrastructure, the (currently) proprietary GraphQLAlchemy.jl provides <code>CombinedParsers</code> plug and play: GraphQL schemas and resolver are infered from your parser.</li>
<li>fast out-of core data science/AI on your parsed data: If you need support with storing parsed data in optimized memory-mapped JuliaDB, TypeDB.jl provides <code>CombinedParsers</code> plug and play.</li>
<li>fast scientific measurements in a data graph: FilingForest IA.jl provides <code>CombinedParsers</code> plug and play: even for recursively nested data.
All (currently) proprietary packages are default-over-configuration for fast integration, and are in active development.</li>
</ul>
<h2><a id="user-content-acknowledgements" class="anchor" aria-hidden="true" href="#acknowledgements"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Acknowledgements</h2>
<p>This package is enabled only due to the Julia's compiler and superior type system.
Thankfully: a really concise language for powerful computing!</p>
<p>I am thankful for contributions and inspiration from many great packages:</p>
<h3><a id="user-content-textparsejl" class="anchor" aria-hidden="true" href="#textparsejl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><a href="https://github.com/queryverse/TextParse.jl">TextParse.jl</a></h3>
<blockquote>
<p>A bunch of fast text parsing tools, used in CSV.jl</p>
</blockquote>
<p><code>CombinedParsers</code> composes with fast
<a href="https://github.com/queryverse/TextParse.jl">TextParse.jl</a> both ways
because <code>CombinedParser &lt;: TextParse.AbstractToken</code>
and by providing a method for <code>TextParse.tryparsenext</code>,
(leveraging the supreme Julia compiler, type and package architecture).</p>
<ul>
<li>If you seek support with a dates parser example, please contact me.</li>
<li>If you seek support with a CSV example, please contact me (e.g. address text field parsing).</li>
</ul>
<h3><a id="user-content-inspirations" class="anchor" aria-hidden="true" href="#inspirations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Inspirations</h3>
<ul>
<li>The work was strongly inspired by the great Scala <a href="https://github.com/lihaoyi/fastparse">fastparse</a> package, and also the <a href="https://package.elm-lang.org/packages/elm/parser/latest/" rel="nofollow">elm parser</a>.</li>
<li><a href="https://github.com/JuliaData/Parsers.jl">Parsers.jl</a>, a collection of parsers for date and primitive types, inspired the <code>parse</code> methods.</li>
<li><a href="https://github.com/BioJulia/Automa.jl">Automa.jl</a>, a Julia package for text validation, parsing, and tokenizing based on state machine compiler.  The package compiles deterministic finite automata.  (Currently there is no inter-operation possible, because in <code>Automa</code> processing of parsed tokens is done with actions and UTF8 support is lacking).</li>
<li><a href="https://github.com/andrewcooke/ParserCombinator.jl">ParserCombinator.jl</a> was a great inspiration.
Yet I decided for a new design with a focus on transformations and type inference with parametric types, instead of basing this work off <code>ParserCombinator</code>, written before 2016 (and fixed for Julia 1.0 in 2018).
<code>CombinedParsers</code> integrates into the Julia 1.0 Iteration API, small <code>Union{Nothing,T} where T</code> types instead of using Nullables, compiler optimizations and generated functions.
I want to provide benchmarks comparisons with <code>ParserCombinator.jl</code>.</li>
</ul>
<h2><a id="user-content-next-steps" class="anchor" aria-hidden="true" href="#next-steps"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Next Steps</h2>
<ul class="contains-task-list">
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> Syntax freeze -- your comments are appreciated!</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> decide for a error tracing strategy, backtracking. If you want to collaborate on stepping &amp; debugging, please reach out to me.</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> Performance optimizations</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> streaming</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> test coverage underestimated (PCRE tests are not included in travis)</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> <a href="https://github.com/invenia/BlueStyle"><img src="https://camo.githubusercontent.com/c18fbaa52d94d16b90b19701fc90d289b8a5bb920c74c79bab200b14e75420a4/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c75652d3434393564312e737667" alt="Code Style: Blue" data-canonical-src="https://img.shields.io/badge/code%20style-blue-4495d1.svg" style="max-width:100%;"></a></li>
</ul>
<h1><a id="user-content-contributing-and-questions" class="anchor" aria-hidden="true" href="#contributing-and-questions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Contributing and Questions</h1>
<p>Contributions and feedback are very welcome,
especially regarding brief syntax and constructor dispatch.
Please open an issue if you encounter any problems or would just like to ask a question,
or contact me at <a href="mailto:mail@g-kappler.de">mail@g-kappler.de</a>.</p>
</article></div>