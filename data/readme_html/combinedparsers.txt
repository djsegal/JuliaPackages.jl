<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-combinedparsers-in-pure-julia" class="anchor" aria-hidden="true" href="#combinedparsers-in-pure-julia"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>CombinedParsers in pure Julia</h1>

<p dir="auto"><a href="https://gkappler.github.io/CombinedParsers.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://travis-ci.com/github/gkappler/CombinedParsers.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/acbaf23cddbe5b8c89a7c0304d48a6b036d7b0847176f27a2bd51b71164d7d83/68747470733a2f2f7472617669732d63692e6f72672f676b6170706c65722f436f6d62696e6564506172736572732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/gkappler/CombinedParsers.jl.svg?branch=master" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/gkappler/CombinedParsers.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/8ee057ce2801d1a54d591fcc4f5b6e0b9d6ba78dac216e13260213941a9d7435/68747470733a2f2f636f6465636f762e696f2f67682f676b6170706c65722f436f6d62696e6564506172736572732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/gkappler/CombinedParsers.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a>
A package for combining parsers and transforming strings into julia types.</p>
<p dir="auto">Compose parsers parsimoneously within a functional <a href="https://en.wikipedia.org/wiki/Parser_combinator" rel="nofollow">parser combinator paradigm</a>,
utilize Julia's type inference for transformations,
log conveniently for debugging, and let Julia compile your parser for performance.</p>
<p dir="auto">The <code>CombinedParsers</code> design</p>
<ul dir="auto">
<li>is fast due to Julia parametric types, and compiler optimizations with generated functions,</li>
<li>parsing result transformations infer the domain data types,</li>
<li>is composable and optimizable with Julia method dispatch,</li>
<li>provides flexible public API for parsing, matching, iteration</li>
<li>can be defined with PCRE and EBNF syntax.</li>
</ul>
<h2 dir="auto"><a id="user-content-getting-started" class="anchor" aria-hidden="true" href="#getting-started"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Getting started</h2>
<p dir="auto"><code>CombinedParsers.jl</code> is a registered package.
Install with</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="] add CombinedParsers"><pre>] add CombinedParsers</pre></div>
<h3 dir="auto"><a id="user-content-example-rational-numbers-arithmetics" class="anchor" aria-hidden="true" href="#example-rational-numbers-arithmetics"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example: rational numbers arithmetics</h3>
<p dir="auto">This example demonstrates reading of arithmetical terms for rational numbers.
Reflecting operator precedence, <code>term</code> are <code>subterm</code>s, interleaved by */,
and <code>subterm</code>s are <a href="@ref"><code>Either</code></a> integer numbers</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@syntax subterm = Either{Rational{Int}}([NumericParser(Int)]; convert=true)"><pre><span class="pl-c1">@syntax</span> subterm <span class="pl-k">=</span> <span class="pl-c1">Either</span><span class="pl-c1">{Rational{Int}}</span>([<span class="pl-c1">NumericParser</span>(Int)]; convert<span class="pl-k">=</span><span class="pl-c1">true</span>)</pre></div>
<p dir="auto">or a <code>subterm</code> can also be an additive <code>term</code> in <code>parentheses</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@syntax for parentheses in subterm
    mult = evaluate |&gt; join(subterm, CharIn(&quot;*/&quot;), infix=:prefix )
    @syntax term = evaluate |&gt; join(mult,    CharIn(&quot;+-&quot;), infix=:prefix )
    Sequence(2,'(',term,')')
end"><pre><span class="pl-c1">@syntax</span> <span class="pl-k">for</span> parentheses <span class="pl-k">in</span> subterm
    mult <span class="pl-k">=</span> evaluate <span class="pl-k">|&gt;</span> <span class="pl-c1">join</span>(subterm, <span class="pl-c1">CharIn</span>(<span class="pl-s"><span class="pl-pds">"</span>*/<span class="pl-pds">"</span></span>), infix<span class="pl-k">=</span><span class="pl-c1">:prefix</span> )
    <span class="pl-c1">@syntax</span> term <span class="pl-k">=</span> evaluate <span class="pl-k">|&gt;</span> <span class="pl-c1">join</span>(mult,    <span class="pl-c1">CharIn</span>(<span class="pl-s"><span class="pl-pds">"</span>+-<span class="pl-pds">"</span></span>), infix<span class="pl-k">=</span><span class="pl-c1">:prefix</span> )
    <span class="pl-c1">Sequence</span>(<span class="pl-c1">2</span>,<span class="pl-s"><span class="pl-pds">'</span>(<span class="pl-pds">'</span></span>,term,<span class="pl-s"><span class="pl-pds">'</span>)<span class="pl-pds">'</span></span>)
<span class="pl-k">end</span></pre></div>
<p dir="auto">This <code>CombinedParser</code> definition in 5,5 lines registers a <code>@term_string</code> macro for parsing and evaluating rational arithmetics:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; term&quot;4*10+2&quot;
42//1"><pre lang="jldoctest" class="notranslate"><code>julia&gt; term"4*10+2"
42//1
</code></pre></div>
<p dir="auto"><a href="https://en.wikipedia.org/wiki/Phrases_from_The_Hitchhiker%27s_Guide_to_the_Galaxy#Answer_to_the_Ultimate_Question_of_Life,_the_Universe,_and_Everything_(42)" rel="nofollow">Is every rational answer ultimately the inverse of a universal question in life?</a></p>
<p dir="auto">Details in <a href="https://gkappler.github.io/CombinedParsers.jl/dev/man/example-arithmetic" rel="nofollow">the full documentation example</a>.</p>
<h2 dir="auto"><a id="user-content-acknowledgements" class="anchor" aria-hidden="true" href="#acknowledgements"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Acknowledgements</h2>
<p dir="auto">This package leverages Julia's compiler and superior type system to parsing.</p>
<p dir="auto">I am thankful for contributions and inspiration from many great packages:</p>
<h3 dir="auto"><a id="user-content-textparsejl" class="anchor" aria-hidden="true" href="#textparsejl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><a href="https://github.com/queryverse/TextParse.jl">TextParse.jl</a></h3>
<blockquote>
<p dir="auto">A bunch of fast text parsing tools, used in CSV.jl</p>
</blockquote>
<p dir="auto"><code>CombinedParsers</code> composes with fast
<a href="https://github.com/queryverse/TextParse.jl">TextParse.jl</a> both ways
because <code>CombinedParser &lt;: TextParse.AbstractToken</code>
and by providing a method for <code>TextParse.tryparsenext</code>,
(leveraging the supreme Julia compiler, type and package architecture).</p>
<ul dir="auto">
<li>If you seek support with a CSV example, please contact me (e.g. address text field parsing).</li>
</ul>
<h3 dir="auto"><a id="user-content-inspirations" class="anchor" aria-hidden="true" href="#inspirations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Inspirations</h3>
<ul dir="auto">
<li>The work was strongly inspired by the great Scala <a href="https://github.com/lihaoyi/fastparse">fastparse</a> package, and also the <a href="https://package.elm-lang.org/packages/elm/parser/latest/" rel="nofollow">elm parser</a>.</li>
<li><a href="https://github.com/JuliaData/Parsers.jl">Parsers.jl</a>, a collection of parsers for date and primitive types, inspired the <code>parse</code> methods.</li>
<li><a href="https://github.com/BioJulia/Automa.jl">Automa.jl</a>, a Julia package for text validation, parsing, and tokenizing based on state machine compiler.  The package compiles deterministic finite automata.  (Currently there is no inter-operation possible, because in <code>Automa</code> processing of parsed tokens is done with actions).</li>
<li><a href="https://github.com/andrewcooke/ParserCombinator.jl">ParserCombinator.jl</a> was a great inspiration.
Yet I decided for a new design with a focus on transformations and type inference with parametric types, instead of basing this work off <code>ParserCombinator</code>, written before 2016 (and fixed for Julia 1.0 in 2018).
<code>CombinedParsers</code> integrates into the Julia 1.0 Iteration API, small <code>Union{Nothing,T} where T</code> types instead of using Nullables, compiler optimizations and generated functions.
I want to provide benchmarks comparisons with <code>ParserCombinator.jl</code>.</li>
</ul>
<h2 dir="auto"><a id="user-content-next-steps" class="anchor" aria-hidden="true" href="#next-steps"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Next Steps</h2>
<ul class="contains-task-list">
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> Syntax freeze -- your comments are appreciated!</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> decide for a error tracing strategy, backtracking. If you want to collaborate on stepping &amp; debugging, please reach out to me.</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> Performance optimizations</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> streaming</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> test coverage underestimated (PCRE tests are not included in travis)</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> <a href="https://github.com/invenia/BlueStyle"><img src="https://camo.githubusercontent.com/c18fbaa52d94d16b90b19701fc90d289b8a5bb920c74c79bab200b14e75420a4/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c75652d3434393564312e737667" alt="Code Style: Blue" data-canonical-src="https://img.shields.io/badge/code%20style-blue-4495d1.svg" style="max-width: 100%;"></a></li>
</ul>
<h1 dir="auto"><a id="user-content-contributing-and-questions" class="anchor" aria-hidden="true" href="#contributing-and-questions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Contributing and Questions</h1>
<p dir="auto">Contributions and feedback are very welcome,
especially regarding brief syntax and constructor dispatch.
Please open an issue if you encounter any problems or would just like to ask a question,
or contact me at <a href="mailto:mail@g-kappler.de">mail@g-kappler.de</a>.</p>
</article></div>