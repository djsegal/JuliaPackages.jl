<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-dcisolver---dynamic-control-of-infeasibility-solver" class="anchor" aria-hidden="true" href="#dcisolver---dynamic-control-of-infeasibility-solver"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>DCISolver - Dynamic Control of Infeasibility Solver</h1>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/JuliaSmoothOptimizers/DCISolver.jl/workflows/CI/badge.svg?branch=master"><img src="https://github.com/JuliaSmoothOptimizers/DCISolver.jl/workflows/CI/badge.svg?branch=master" alt="CI" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/JuliaSmoothOptimizers/DCISolver.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/1f68705bad507fb23b9a410fcd1eef2858fb1179a061717077d415bc5d2591bb/68747470733a2f2f636f6465636f762e696f2f67682f4a756c6961536d6f6f74684f7074696d697a6572732f444349536f6c7665722e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/JuliaSmoothOptimizers/DCISolver.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a>
<a href="https://github.com/JuliaSmoothOptimizers/DCISolver.jl/releases"><img src="https://camo.githubusercontent.com/fa0c7c4af38aac0af679d8436cfa6d2253cf76488ee45559dfdddbfb8ad38463/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f762f72656c656173652f4a756c6961536d6f6f74684f7074696d697a6572732f444349536f6c7665722e6a6c2e7376673f7374796c653d666c61742d737175617265" alt="GitHub" data-canonical-src="https://img.shields.io/github/v/release/JuliaSmoothOptimizers/DCISolver.jl.svg?style=flat-square" style="max-width:100%;"></a>
<a href="https://JuliaSmoothOptimizers.github.io/DCISolver.jl/latest" rel="nofollow"><img src="https://camo.githubusercontent.com/488b4d0ade5e1683e5e6fd4e9e5e032f66bb645872789d758251744fe48a896d/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6c61746573742d3366353162352e737667" alt="docs-latest" data-canonical-src="https://img.shields.io/badge/docs-latest-3f51b5.svg" style="max-width:100%;"></a>
<a href="https://JuliaSmoothOptimizers.github.io/DCISolver.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/30097dda6debc8df22e6ecba9fa16a03f962387dbf66b7c28a4f8d99ef654896/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d3366353162352e737667" alt="docs-dev" data-canonical-src="https://img.shields.io/badge/docs-dev-3f51b5.svg" style="max-width:100%;"></a>
<a href="https://doi.org/10.5281/zenodo.4742979" rel="nofollow"><img src="https://camo.githubusercontent.com/6d81898bbdeb6363adb86e4e746978a1357e7feba8a6139dbc5c1493084d4b0b/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f444f492f31302e353238312f7a656e6f646f2e343734323937392e737667" alt="DOI" data-canonical-src="https://zenodo.org/badge/DOI/10.5281/zenodo.4742979.svg" style="max-width:100%;"></a></p>
<p>DCI is a solver for equality-constrained nonlinear problems, i.e.,
optimization problems of the form</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="min f(x)     s.t.     c(x) = 0.
"><pre><code>min f(x)     s.t.     c(x) = 0.
</code></pre></div>
<p>It uses other JuliaSmoothOptimizers packages for development.
In particular, <a href="https://github.com/JuliaSmoothOptimizers/NLPModels.jl">NLPModels.jl</a> is used for defining the problem, and <a href="https://github.com/JuliaSmoothOptimizers/SolverCore.jl">SolverCore</a> for the output.
It uses <a href="https://github.com/JuliaSmoothOptimizers/LDLFactorizations.jl">LDLFactorizations.jl</a> by default to compute the factorization in the tangent step. Follow <a href="https://github.com/JuliaSmoothOptimizers/HSL.jl">HSL.jl</a>'s <code>MA57</code> installation for an alternative.
The feasibility steps are factorization-free and use iterative methods from <a href="https://github.com/JuliaSmoothOptimizers/Krylov.jl">Krylov.jl</a></p>
<h2><a id="user-content-references" class="anchor" aria-hidden="true" href="#references"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>References</h2>
<blockquote>
<p>Bielschowsky, R. H., &amp; Gomes, F. A.
Dynamic control of infeasibility in equality constrained optimization.
SIAM Journal on Optimization, 19(3), 1299-1325 (2008).
<a href="https://doi.org/10.1007/s10589-020-00201-2" rel="nofollow">10.1007/s10589-020-00201-2</a></p>
</blockquote>
<h2><a id="user-content-how-to-cite" class="anchor" aria-hidden="true" href="#how-to-cite"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>How to Cite</h2>
<p>If you use DCISolver.jl in your work, please cite using the format given in <a href="https://github.com/JuliaSmoothOptimizers/DCISolver.jl/blob/master/CITATION.bib">CITATION.bib</a>.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<ol>
<li><a href="https://github.com/JuliaSmoothOptimizers/LDLFactorizations.jl">LDLFactorizations.jl</a> is used by default. Follow <a href="https://github.com/JuliaSmoothOptimizers/HSL.jl">HSL.jl</a>'s <code>MA57</code> installation for an alternative.</li>
<li><code>pkg&gt; add DCISolver</code></li>
</ol>
<h2><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using DCISolver, NLPModels

# Rosenbrock
nlp = ADNLPModel(x -&gt; 100 * (x[2] - x[1]^2)^2 + (x[1] - 1)^2, [-1.2; 1.0])
stats = dci(nlp, nlp.meta.x0)

# Constrained
nlp = ADNLPModel(x -&gt; 100 * (x[2] - x[1]^2)^2 + (x[1] - 1)^2, [-1.2; 1.0],
                 x-&gt;[x[1] * x[2] - 1], [0.0], [0.0])
stats = dci(nlp, nlp.meta.x0)
"><pre><span class="pl-k">using</span> DCISolver, NLPModels

<span class="pl-c"><span class="pl-c">#</span> Rosenbrock</span>
nlp <span class="pl-k">=</span> <span class="pl-c1">ADNLPModel</span>(x <span class="pl-k">-&gt;</span> <span class="pl-c1">100</span> <span class="pl-k">*</span> (x[<span class="pl-c1">2</span>] <span class="pl-k">-</span> x[<span class="pl-c1">1</span>]<span class="pl-k">^</span><span class="pl-c1">2</span>)<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">+</span> (x[<span class="pl-c1">1</span>] <span class="pl-k">-</span> <span class="pl-c1">1</span>)<span class="pl-k">^</span><span class="pl-c1">2</span>, [<span class="pl-k">-</span><span class="pl-c1">1.2</span>; <span class="pl-c1">1.0</span>])
stats <span class="pl-k">=</span> <span class="pl-c1">dci</span>(nlp, nlp<span class="pl-k">.</span>meta<span class="pl-k">.</span>x0)

<span class="pl-c"><span class="pl-c">#</span> Constrained</span>
nlp <span class="pl-k">=</span> <span class="pl-c1">ADNLPModel</span>(x <span class="pl-k">-&gt;</span> <span class="pl-c1">100</span> <span class="pl-k">*</span> (x[<span class="pl-c1">2</span>] <span class="pl-k">-</span> x[<span class="pl-c1">1</span>]<span class="pl-k">^</span><span class="pl-c1">2</span>)<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">+</span> (x[<span class="pl-c1">1</span>] <span class="pl-k">-</span> <span class="pl-c1">1</span>)<span class="pl-k">^</span><span class="pl-c1">2</span>, [<span class="pl-k">-</span><span class="pl-c1">1.2</span>; <span class="pl-c1">1.0</span>],
                 x<span class="pl-k">-&gt;</span>[x[<span class="pl-c1">1</span>] <span class="pl-k">*</span> x[<span class="pl-c1">2</span>] <span class="pl-k">-</span> <span class="pl-c1">1</span>], [<span class="pl-c1">0.0</span>], [<span class="pl-c1">0.0</span>])
stats <span class="pl-k">=</span> <span class="pl-c1">dci</span>(nlp, nlp<span class="pl-k">.</span>meta<span class="pl-k">.</span>x0)</pre></div>
</article></div>