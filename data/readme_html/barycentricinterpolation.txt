<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-barycentricinterpolation" class="anchor" aria-hidden="true" href="#barycentricinterpolation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>BarycentricInterpolation</h1>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/ae2f538d678a8e76c5493d870c59fbf928b14906e41227a07af5bbf3566b5068/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6966656379636c652d6d61747572696e672d626c75652e737667"><img src="https://camo.githubusercontent.com/ae2f538d678a8e76c5493d870c59fbf928b14906e41227a07af5bbf3566b5068/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6966656379636c652d6d61747572696e672d626c75652e737667" alt="Lifecycle" data-canonical-src="https://img.shields.io/badge/lifecycle-maturing-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/dawbarton/BarycentricInterpolation.jl/actions"><img src="https://github.com/dawbarton/BarycentricInterpolation.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/dawbarton/BarycentricInterpolation.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/780fcfae755512a58513591d41d7051cba1e8e1cb10a99652715416705b2fd7d/68747470733a2f2f636f6465636f762e696f2f67682f646177626172746f6e2f4261727963656e74726963496e746572706f6c6174696f6e2e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/dawbarton/BarycentricInterpolation.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a>
<a href="https://github.com/invenia/BlueStyle"><img src="https://camo.githubusercontent.com/c18fbaa52d94d16b90b19701fc90d289b8a5bb920c74c79bab200b14e75420a4/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c75652d3434393564312e737667" alt="Code Style: Blue" data-canonical-src="https://img.shields.io/badge/code%20style-blue-4495d1.svg" style="max-width: 100%;"></a>
<a href="https://github.com/SciML/ColPrac"><img src="https://camo.githubusercontent.com/a6c1efcb19a957860ecb25966a730260b03d6e05380d0c27992ee7f9e3b1feb3/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f436f6c507261632d436f6e7472696275746f72277325323047756964652d626c756576696f6c6574" alt="ColPrac: Contributor's Guide on Collaborative Practices for Community Packages" data-canonical-src="https://img.shields.io/badge/ColPrac-Contributor's%20Guide-blueviolet" style="max-width: 100%;"></a></p>
<p dir="auto">This Julia package implements the Barycentric formula for polynomial
interpolation on equispaced points and Chebyshev points of the first and second
kind. The formulae used are taken from the paper of Berrut and Trefethen, SIAM
Review, 2004.</p>
<p dir="auto">This is not a general purpose interpolation package but is intended to be used
as a base for other numerical methods, such as numerical collocation. For a
general use interpolation package see
<a href="https://github.com/JuliaMath/Interpolations.jl">Interpolations.jl</a></p>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<p dir="auto">There are various types of polynomials defined based on the locations of their
nodes (zeros).</p>
<ul dir="auto">
<li>Equispaced (<code>Equispaced{N}()</code>) — a common choice when data is equispaced but
suffers from Runge phenomenon for high degree polynomials. When used as part
of a collocation scheme with Gauss-Legendre collocation points, they provide
the benefit of super-convergence. By default the nodes are equispaced over
[-1, +1].</li>
<li>Chebyshev type 1 (<code>Chebyshev1{N}()</code>) — nodes distributed according to
cos(π(2j + 1)/(2N + 2)) where N is the degree of the polynomial, for j in
[0, N].</li>
<li>Chebyshev type 2 (<code>Chebyshev2{N}()</code>) — nodes distributed according to
cos(πj/N) where N is the degree of the polynomial, for j in [0, N].</li>
<li>Legendre (<code>Legendre{N}()</code>) — nodes distributed according to the zeros of the
corresponding Legendre polynomial where N is the degree of the polynomial.</li>
<li>Arbitrary nodes (<code>ArbitraryPolynomial(nodes)</code>) — nodes distributed as
specified.</li>
</ul>
<p dir="auto">By default, each of the polynomials are defined over the range [-1, +1].
This can be modified by specifying a start and stop for the range, e.g.,
<code>Equispaced{10}(0, 1)</code> will generate a 10th order polynomial with equispaced
nodes over the range [0, 1].</p>
<p dir="auto">Polynomials with nodes asymptotically clustered towards the end points (such
as Chebyshev) are optimal for avoiding the Runge phenomenon (see Trefethen,
Spectral Methods in MATLAB, SIAM 2000).</p>
<p dir="auto">Once a polynomial has been defined it can be used with the <code>nodes(poly)</code> and
<code>weights(poly)</code> functions to return the locations of the nodes and the values
of the Barycentric weights respectively. To interpolate a set of <code>y</code> values
(defined at the nodes) use <code>interpolate(poly, y, x_new)</code>; <code>x_new</code> can be
either a scalar or a vector. If <code>x_new</code> is omitted, the <code>interpolate</code> function
returns a function <code>y(x)</code> which can be used to evaluate the interpolant at any
point.</p>
<p dir="auto">To obtain the interpolant as a linear combination of the <code>y</code> values, use
<code>interpolation_matrix(poly, x)</code>; this returns a matrix which can be multiplied
by a vector of <code>y</code> values to calculate the interpolated value.</p>
<p dir="auto">Finally, the derivative of the polynomial at the nodes can be obtained using
<code>differentiation_matrix(poly)</code>. Similar to <code>interpolation_matrix</code>, this returns
a matrix which can be multiplied by a vector of <code>y</code> values to calculate the
derivative of <code>y</code>.</p>
<h2 dir="auto"><a id="user-content-simple-example" class="anchor" aria-hidden="true" href="#simple-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Simple example</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using BarycentricInterpolation

p = Chebyshev2{20}()           # create a Chebyshev type 2 polynomial of order 20
x = nodes(p)                   # get the nodes
y = sinpi.(x)                  # generate y values at the nodes
x_new = rand()*2 -1            # a random number in [-1, +1]
println(interpolate(p, y, x_new) ≈ sinpi(x_new))       # hopefully true!
D = differentiation_matrix(p)  # get the differentiation matrix
println(interpolate(p, D*y, x_new) ≈ pi*cospi(x_new))  # hopefully true!"><pre><span class="pl-k">using</span> BarycentricInterpolation

p <span class="pl-k">=</span> <span class="pl-c1">Chebyshev2</span><span class="pl-c1">{20}</span>()           <span class="pl-c"><span class="pl-c">#</span> create a Chebyshev type 2 polynomial of order 20</span>
x <span class="pl-k">=</span> <span class="pl-c1">nodes</span>(p)                   <span class="pl-c"><span class="pl-c">#</span> get the nodes</span>
y <span class="pl-k">=</span> <span class="pl-c1">sinpi</span>.(x)                  <span class="pl-c"><span class="pl-c">#</span> generate y values at the nodes</span>
x_new <span class="pl-k">=</span> <span class="pl-c1">rand</span>()<span class="pl-k">*</span><span class="pl-c1">2</span> <span class="pl-k">-</span><span class="pl-c1">1</span>            <span class="pl-c"><span class="pl-c">#</span> a random number in [-1, +1]</span>
<span class="pl-c1">println</span>(<span class="pl-c1">interpolate</span>(p, y, x_new) <span class="pl-k">≈</span> <span class="pl-c1">sinpi</span>(x_new))       <span class="pl-c"><span class="pl-c">#</span> hopefully true!</span>
D <span class="pl-k">=</span> <span class="pl-c1">differentiation_matrix</span>(p)  <span class="pl-c"><span class="pl-c">#</span> get the differentiation matrix</span>
<span class="pl-c1">println</span>(<span class="pl-c1">interpolate</span>(p, D<span class="pl-k">*</span>y, x_new) <span class="pl-k">≈</span> <span class="pl-c1">pi</span><span class="pl-k">*</span><span class="pl-c1">cospi</span>(x_new))  <span class="pl-c"><span class="pl-c">#</span> hopefully true!</span></pre></div>
<h2 dir="auto"><a id="user-content-more-complicated-example" class="anchor" aria-hidden="true" href="#more-complicated-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>More complicated example</h2>
<p dir="auto">For an example with Barycentric.jl applied to the simulation of a PDE (in
combination with DifferentialEquations.jl) see
<a href="https://cityinthesky.co.uk/posts/2018/barycentricinterpolation.jl/" rel="nofollow">https://cityinthesky.co.uk/posts/2018/barycentricinterpolation.jl/</a>.</p>
<h2 dir="auto"><a id="user-content-license" class="anchor" aria-hidden="true" href="#license"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>License</h2>
<p dir="auto">Written by David A.W. Barton (<a href="mailto:david.barton@bristol.ac.uk">david.barton@bristol.ac.uk</a>) 2016-2021 and released
under the MIT license <a href="https://opensource.org/licenses/MIT" rel="nofollow">https://opensource.org/licenses/MIT</a>.</p>
</article></div>