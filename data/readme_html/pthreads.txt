<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-pthreadsjl" class="anchor" aria-hidden="true" href="#pthreadsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>pthreads.jl</h1>
<p dir="auto"><em>POSIX Threads support in Julia</em></p>
<p dir="auto">This package is a proof-of-concept showing how to create and manage POSIX Threads from
Julia. It is only supported on Julia 1.9 and above.</p>
<h2 dir="auto"><a id="user-content-quick-start" class="anchor" aria-hidden="true" href="#quick-start"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Quick start</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using pthreads

julia&gt; thread = pthread() do
           println(&quot;Hello, world!&quot;)
           return 42
       end;
Hello, world!

julia&gt; # wait for the thread in order to access its return value
       wait(thread)
42"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> pthreads

julia<span class="pl-k">&gt;</span> thread <span class="pl-k">=</span> <span class="pl-c1">pthread</span>() <span class="pl-k">do</span>
           <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>Hello, world!<span class="pl-pds">"</span></span>)
           <span class="pl-k">return</span> <span class="pl-c1">42</span>
       <span class="pl-k">end</span>;
Hello, world!

julia<span class="pl-k">&gt;</span> <span class="pl-c"><span class="pl-c">#</span> wait for the thread in order to access its return value</span>
       <span class="pl-c1">wait</span>(thread)
<span class="pl-c1">42</span></pre></div>
<p dir="auto">If you don't care about the results, you can detach the thread:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using pthreads

julia&gt; thread = pthread() do
           println(&quot;Off we go!&quot;)
           return
       end;
Off we go!

julia&gt; detach(thread)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> pthreads

julia<span class="pl-k">&gt;</span> thread <span class="pl-k">=</span> <span class="pl-c1">pthread</span>() <span class="pl-k">do</span>
           <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>Off we go!<span class="pl-pds">"</span></span>)
           <span class="pl-k">return</span>
       <span class="pl-k">end</span>;
Off we go!

julia<span class="pl-k">&gt;</span> <span class="pl-c1">detach</span>(thread)</pre></div>
<p dir="auto">It's also possible to cancel running threads:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; thread = pthread() do
           println(&quot;This will take a while...&quot;)
           sleep(999)
       end;
This will take a while...

julia&gt; cancel(thread)

julia&gt; # wait for the thread in order to detect any exception
       wait(thread)
ERROR: InterruptException"><pre>julia<span class="pl-k">&gt;</span> thread <span class="pl-k">=</span> <span class="pl-c1">pthread</span>() <span class="pl-k">do</span>
           <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>This will take a while...<span class="pl-pds">"</span></span>)
           <span class="pl-c1">sleep</span>(<span class="pl-c1">999</span>)
       <span class="pl-k">end</span>;
This will take a <span class="pl-k">while</span><span class="pl-k">...</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">cancel</span>(thread)

julia<span class="pl-k">&gt;</span> <span class="pl-c"><span class="pl-c">#</span> wait for the thread in order to detect any exception</span>
       <span class="pl-c1">wait</span>(thread)
ERROR<span class="pl-k">:</span> InterruptException</pre></div>
<p dir="auto">Note that the ability to run foreign threads is a relatively recent addition to Julia,
and there may be bugs. Specifically, it is very likely that thread removal (either by
cancelling threads, or by threads just finishing) can lead to corrupt state in the Julia
scheduler, so it's recommended to be conservative with such operations.</p>
</article></div>