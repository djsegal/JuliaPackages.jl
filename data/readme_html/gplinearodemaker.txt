<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-gplinearodemakerjl" class="anchor" aria-hidden="true" href="#gplinearodemakerjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>GPLinearODEMaker.jl</h1>
<p>GPLinearODEMaker (GLOM) is a package for finding the likelihood (and derivatives thereof) of multivariate Gaussian processes (GP) that are composed of a linear combination of a univariate GP and its derivatives.</p>
<p><a target="_blank" rel="noopener noreferrer" href="https://render.githubusercontent.com/render/math?math=q_0(t)%20%3D%20m_0(t)%20%2B%20a_%7B00%7DX(t)%20%2B%20a_%7B01%7D%5Cdot%7BX%7D(t)%20%2B%20a_%7B02%7D%5Cddot%7BX%7D(t)"><img src="https://render.githubusercontent.com/render/math?math=q_0(t)%20%3D%20m_0(t)%20%2B%20a_%7B00%7DX(t)%20%2B%20a_%7B01%7D%5Cdot%7BX%7D(t)%20%2B%20a_%7B02%7D%5Cddot%7BX%7D(t)" alt="q_0(t) = m_0(t) + a_{00}X(t) + a_{01}\dot{X}(t) + a_{02}\ddot{X}(t)" style="max-width:100%;"></a></p>
<p><a target="_blank" rel="noopener noreferrer" href="https://render.githubusercontent.com/render/math?math=q_1(t)%20%3D%20m_1(t)%20%2B%20a_%7B10%7DX(t)%20%2B%20a_%7B11%7D%5Cdot%7BX%7D(t)%20%2B%20a_%7B12%7D%5Cddot%7BX%7D(t)"><img src="https://render.githubusercontent.com/render/math?math=q_1(t)%20%3D%20m_1(t)%20%2B%20a_%7B10%7DX(t)%20%2B%20a_%7B11%7D%5Cdot%7BX%7D(t)%20%2B%20a_%7B12%7D%5Cddot%7BX%7D(t)" alt="q_1(t) = m_1(t) + a_{10}X(t) + a_{11}\dot{X}(t) + a_{12}\ddot{X}(t)" style="max-width:100%;"></a></p>
<p><a target="_blank" rel="noopener noreferrer" href="https://render.githubusercontent.com/render/math?math=%5Cvdots"><img src="https://render.githubusercontent.com/render/math?math=%5Cvdots" alt="\vdots" style="max-width:100%;"></a></p>
<p><a target="_blank" rel="noopener noreferrer" href="https://render.githubusercontent.com/render/math?math=q_l(t)%20%3D%20m_l(t)%20%2B%20a_%7Bl0%7DX(t)%20%2B%20a_%7Bl1%7D%5Cdot%7BX%7D(t)%20%2B%20a_%7Bl2%7D%5Cddot%7BX%7D(t)"><img src="https://render.githubusercontent.com/render/math?math=q_l(t)%20%3D%20m_l(t)%20%2B%20a_%7Bl0%7DX(t)%20%2B%20a_%7Bl1%7D%5Cdot%7BX%7D(t)%20%2B%20a_%7Bl2%7D%5Cddot%7BX%7D(t)" alt="q_l(t) = m_l(t) + a_{l0}X(t) + a_{l1}\dot{X}(t) + a_{l2}\ddot{X}(t)" style="max-width:100%;"></a></p>
<p>where each X(t) is the building block GP and the qs are the time series of the outputs.</p>
<p>Here's an example using sine and cosines as the outputs to be modelled. The f, g!, and h! functions at the end give the likelihood, gradient, and Hessian, respectively.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">import</span> GPLinearODEMaker
GLOM <span class="pl-k">=</span> GPLinearODEMaker

kernel, n_kern_hyper <span class="pl-k">=</span> <span class="pl-c1">include</span>(<span class="pl-s"><span class="pl-pds">"</span>../src/kernels/se_kernel.jl<span class="pl-pds">"</span></span>)

n <span class="pl-k">=</span> <span class="pl-c1">100</span>
xs <span class="pl-k">=</span> <span class="pl-c1">20</span> <span class="pl-k">.*</span> <span class="pl-c1">sort</span>(<span class="pl-c1">rand</span>(n))
noise1 <span class="pl-k">=</span> <span class="pl-c1">0.1</span> <span class="pl-k">.*</span> <span class="pl-c1">ones</span>(n)
noise2 <span class="pl-k">=</span> <span class="pl-c1">0.2</span> <span class="pl-k">.*</span> <span class="pl-c1">ones</span>(n)
y1 <span class="pl-k">=</span> <span class="pl-c1">sin</span>.(xs) <span class="pl-k">.+</span> (noise1 <span class="pl-k">.*</span> <span class="pl-c1">randn</span>(n))
y2 <span class="pl-k">=</span> <span class="pl-c1">cos</span>.(xs) <span class="pl-k">.+</span> (noise2 <span class="pl-k">.*</span> <span class="pl-c1">randn</span>(n))

ys <span class="pl-k">=</span> <span class="pl-c1">collect</span>(Iterators<span class="pl-k">.</span><span class="pl-c1">flatten</span>(<span class="pl-c1">zip</span>(y1, y2)))
noise <span class="pl-k">=</span> <span class="pl-c1">collect</span>(Iterators<span class="pl-k">.</span><span class="pl-c1">flatten</span>(<span class="pl-c1">zip</span>(noise1, noise2)))

prob_def <span class="pl-k">=</span> GLOM<span class="pl-k">.</span><span class="pl-c1">GLO</span>(kernel, n_kern_hyper, <span class="pl-c1">2</span>, <span class="pl-c1">2</span>, xs, ys; noise <span class="pl-k">=</span> noise, a0<span class="pl-k">=</span>[[<span class="pl-c1">1.</span> <span class="pl-c1">0.1</span>];[<span class="pl-c1">0.1</span> <span class="pl-c1">1</span>]])
total_hyperparameters <span class="pl-k">=</span> <span class="pl-c1">append!</span>(<span class="pl-c1">collect</span>(Iterators<span class="pl-k">.</span><span class="pl-c1">flatten</span>(prob_def<span class="pl-k">.</span>a0)), [<span class="pl-c1">10</span>])
workspace <span class="pl-k">=</span> GLOM<span class="pl-k">.</span><span class="pl-c1">nlogL_matrix_workspace</span>(prob_def, total_hyperparameters)

<span class="pl-k">function</span> <span class="pl-en">f</span>(non_zero_hyper<span class="pl-k">::</span><span class="pl-c1">Vector{T}</span> <span class="pl-k">where</span> T<span class="pl-k">&lt;:</span><span class="pl-c1">Real</span>) <span class="pl-k">=</span> GLOM<span class="pl-k">.</span><span class="pl-c1">nlogL_GLOM!</span>(workspace, prob_def, non_zero_hyper)  <span class="pl-c"><span class="pl-c">#</span> feel free to add priors here to optimize on the posterior!</span>
<span class="pl-k">function</span> <span class="pl-en">g!</span>(G<span class="pl-k">::</span><span class="pl-c1">Vector{T}</span>, non_zero_hyper<span class="pl-k">::</span><span class="pl-c1">Vector{T}</span>) <span class="pl-k">where</span> T<span class="pl-k">&lt;:</span><span class="pl-c1">Real</span>
    G[:] <span class="pl-k">=</span> GLOM.<span class="pl-c1">∇nlogL_GLOM!</span>(workspace, prob_def, non_zero_hyper)  <span class="pl-c"><span class="pl-c">#</span> feel free to add priors here to optimize on the posterior!</span>
<span class="pl-k">end</span>
<span class="pl-k">function</span> <span class="pl-en">h!</span>(H<span class="pl-k">::</span><span class="pl-c1">Matrix{T}</span>, non_zero_hyper<span class="pl-k">::</span><span class="pl-c1">Vector{T}</span>) <span class="pl-k">where</span> T<span class="pl-k">&lt;:</span><span class="pl-c1">Real</span>
    H[:, :] <span class="pl-k">=</span> GLOM.<span class="pl-c1">∇∇nlogL_GLOM!</span>(workspace, prob_def, non_zero_hyper)  <span class="pl-c"><span class="pl-c">#</span> feel free to add priors here to optimize on the posterior!</span>
<span class="pl-k">end</span></pre></div>
<p>You can use f, g!, and h! to optimize the GP hyperparameters with external packages like <a href="https://github.com/JuliaNLSolvers/Optim.jl">Optim.jl</a> or <a href="https://github.com/FluxML/Flux.jl">Flux.jl</a></p>
<div class="highlight highlight-source-julia"><pre>initial_x <span class="pl-k">=</span> GLOM<span class="pl-k">.</span><span class="pl-c1">remove_zeros</span>(total_hyperparameters)

<span class="pl-k">using</span> Optim

<span class="pl-c"><span class="pl-c">#</span> @time result = optimize(f, initial_x, NelderMead())  # slow or wrong</span>
<span class="pl-c"><span class="pl-c">#</span> @time result = optimize(f, g!, initial_x, LBFGS())  # faster and usually right</span>
<span class="pl-c1">@time</span> result <span class="pl-k">=</span> <span class="pl-c1">optimize</span>(f, g!, h!, initial_x, <span class="pl-c1">NewtonTrustRegion</span>())  <span class="pl-c"><span class="pl-c">#</span> fastest and usually right</span></pre></div>
<h1><a id="user-content-documentation" class="anchor" aria-hidden="true" href="#documentation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Documentation</h1>
<p>For more details and options, see the documentation (WIP)</p>
<h1><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h1>
<p>The package will be a registered package (by 4/24/2020), and can be installed with <code>Pkg.add</code>.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Pkg; Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>GPLinearODEMaker<span class="pl-pds">"</span></span>)</pre></div>
<p>or through the <code>pkg</code> REPL mode by typing</p>
<pre><code>] add GPLinearODEMaker
</code></pre>
<h1><a id="user-content-citation" class="anchor" aria-hidden="true" href="#citation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Citation</h1>
<p>If you use <code>GPLinearODEMaker.jl</code> in your work, please cite the BibTeX entry given in CITATION.bib</p>
<p>The formula images in this README created with <a href="https://alexanderrodin.com/github-latex-markdown/" rel="nofollow">this website</a></p>
</article></div>