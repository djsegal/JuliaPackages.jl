<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-orm-package-that-you-can-use-with-funsql" class="anchor" aria-hidden="true" href="#orm-package-that-you-can-use-with-funsql"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>ORM package that you can use with FunSQL</h1>
<p dir="auto"><a href="https://asjir.github.io/FunnyORM.jl/dev/" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev Documentation" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/asjir/FunnyORM/actions?query=workflow%3ACI+branch%3Amain"><img src="https://github.com/asjir/FunnyORM/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/asjir/FunnyORM" rel="nofollow"><img src="https://camo.githubusercontent.com/8da0e10ccb886e580c6f95996773752bf86fa6c88373b51ee00e4558c88a3d3c/68747470733a2f2f636f6465636f762e696f2f67682f61736a69722f46756e6e794f524d2f6272616e63682f6d61696e2f67726170682f62616467652e737667" alt="Code Coverage Status" data-canonical-src="https://codecov.io/gh/asjir/FunnyORM/branch/main/graph/badge.svg" style="max-width: 100%;"></a>
<a href="https://raw.githubusercontent.com/asjir/FunnyORM/main/LICENSE.md" rel="nofollow"><img src="https://camo.githubusercontent.com/83d3746e5881c1867665223424263d8e604df233d0a11aae0813e0414d433943/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d626c75652e737667" alt="MIT License" data-canonical-src="https://img.shields.io/badge/license-MIT-blue.svg" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-motivating-example" class="anchor" aria-hidden="true" href="#motivating-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Motivating example</h2>
<p dir="auto">FunSQL.jl allows you to build better queries than, say SQLAlchemy, but it doesn't provide an Object-Relational Mapping.
This package does, so that you're able to write:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; let f(x) = x |&gt; Join(:new =&gt; x |&gt; Group(Get.gender_concept_id) |&gt; Select(Agg.max(Get.year_of_birth), Get.gender_concept_id), Fun.and(Get.gender_concept_id .== Get.new.gender_concept_id, Get.year_of_birth .== Get.new.max)) 
       db[Person, f]  
       end"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">let</span> <span class="pl-en">f</span>(x) <span class="pl-k">=</span> x <span class="pl-k">|&gt;</span> <span class="pl-c1">Join</span>(<span class="pl-c1">:new</span> <span class="pl-k">=&gt;</span> x <span class="pl-k">|&gt;</span> <span class="pl-c1">Group</span>(Get<span class="pl-k">.</span>gender_concept_id) <span class="pl-k">|&gt;</span> <span class="pl-c1">Select</span>(Agg<span class="pl-k">.</span><span class="pl-c1">max</span>(Get<span class="pl-k">.</span>year_of_birth), Get<span class="pl-k">.</span>gender_concept_id), Fun<span class="pl-k">.</span><span class="pl-c1">and</span>(Get<span class="pl-k">.</span>gender_concept_id <span class="pl-k">.==</span> Get<span class="pl-k">.</span>new<span class="pl-k">.</span>gender_concept_id, Get<span class="pl-k">.</span>year_of_birth <span class="pl-k">.==</span> Get<span class="pl-k">.</span>new<span class="pl-k">.</span>max)) 
       db[Person, f]  
       <span class="pl-k">end</span></pre></div>
<p dir="auto">Which for each gender will pick the youngest people by yaer, and return <code>Person</code> struct for each.</p>
<p dir="auto">These structs are generated to be included in your code, so <code>JET.jl</code> can do type-checking and <code>VSCode</code> can show the definition with fields when you hover over them.</p>
<h2 dir="auto"><a id="user-content-status" class="anchor" aria-hidden="true" href="#status"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Status</h2>
<ul dir="auto">
<li>Only supports Integer ids.</li>
<li>Only supports SQLite.</li>
</ul>
<h2 dir="auto"><a id="user-content-walkthroough" class="anchor" aria-hidden="true" href="#walkthroough"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Walkthroough.</h2>
<p dir="auto">We start with the example DB that FunSQL provides:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using FunnyORM, SQLite
download(&quot;https://github.com/MechanicalRabbit/ohdsi-synpuf-demo/releases/download/20210412/synpuf-10p.sqlite&quot;, &quot;db.sqlite&quot;)
db = FunnyORM.DB{SQLite.DB}(&quot;db.sqlite&quot;)
"><pre><span class="pl-k">using</span> FunnyORM, SQLite
<span class="pl-c1">download</span>(<span class="pl-s"><span class="pl-pds">"</span>https://github.com/MechanicalRabbit/ohdsi-synpuf-demo/releases/download/20210412/synpuf-10p.sqlite<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>db.sqlite<span class="pl-pds">"</span></span>)
db <span class="pl-k">=</span> FunnyORM<span class="pl-k">.</span><span class="pl-c1">DB</span><span class="pl-c1">{SQLite.DB}</span>(<span class="pl-s"><span class="pl-pds">"</span>db.sqlite<span class="pl-pds">"</span></span>)
</pre></div>
<p dir="auto">First we need the object-relational mapping. It's easiest to generate it by specifying the db, object name, and table name.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="FunnyORM.generate_file(db, :Person, tablename=:person)
include(&quot;models/person.jl&quot;)
Person"><pre>FunnyORM<span class="pl-k">.</span><span class="pl-c1">generate_file</span>(db, <span class="pl-c1">:Person</span>, tablename<span class="pl-k">=</span><span class="pl-c1">:person</span>)
<span class="pl-c1">include</span>(<span class="pl-s"><span class="pl-pds">"</span>models/person.jl<span class="pl-pds">"</span></span>)
Person</pre></div>
<p dir="auto">After you run this, you VSCode should show you what Person is, and what fields it has, when you hover over it.</p>
<details><summary>About defaults</summary>
<p dir="auto">If a field can be <code>Missing</code>, the generated class will contain default <code>missing</code> for it. For the rest no default is set, so you may wish to edit the generated file.</p>
<p dir="auto">It will try to link to tablename, which by default is lowercase, pluralised model name.</p>
</details>
Now we can query the db.
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using DataFrames
db[Person[month_of_birth=[2, 4], person_source_value=&quot;%F%&quot;, year_of_birth=1900:1930]]"><pre><span class="pl-k">using</span> DataFrames
db[Person[month_of_birth<span class="pl-k">=</span>[<span class="pl-c1">2</span>, <span class="pl-c1">4</span>], person_source_value<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>%F%<span class="pl-pds">"</span></span>, year_of_birth<span class="pl-k">=</span><span class="pl-c1">1900</span><span class="pl-k">:</span><span class="pl-c1">1930</span>]]</pre></div>
<p dir="auto">AbstractVector maps to IN, AbstractRange and Pair to BETWEEN and AbstractString to LIKE if it contains _ or $.
Otherwise it's =.</p>
<p dir="auto">Also a named tuple in arguments is treated as an or, so in this case the following are equivalent:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Person[month_of_birth=[2, 4]]
Person[(month_of_birth=2, month_of_birth=4)]"><pre>Person[month_of_birth<span class="pl-k">=</span>[<span class="pl-c1">2</span>, <span class="pl-c1">4</span>]]
Person[(month_of_birth<span class="pl-k">=</span><span class="pl-c1">2</span>, month_of_birth<span class="pl-k">=</span><span class="pl-c1">4</span>)]</pre></div>
<p dir="auto">Under the hood it's converted to SQL queries.
You can add a second argument and it will pass your query into it.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using FunSQL: Order, Get
db[Person[month_of_birth=[2, 4]], Order(Get.year_of_birth)]"><pre><span class="pl-k">using</span> FunSQL<span class="pl-k">:</span> Order, Get
db[Person[month_of_birth<span class="pl-k">=</span>[<span class="pl-c1">2</span>, <span class="pl-c1">4</span>]], <span class="pl-c1">Order</span>(Get<span class="pl-k">.</span>year_of_birth)]</pre></div>
<p dir="auto">In the examples above we create a vector of objects and convert to DataFrame for printing.
To skip creation of objects you can replace <code>,</code> with <code>|&gt;</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using FunSQL: Order, Get
db[Person[month_of_birth=[2, 4]] |&gt; Order(Get.year_of_birth)] |&gt; DataFrame"><pre><span class="pl-k">using</span> FunSQL<span class="pl-k">:</span> Order, Get
db[Person[month_of_birth<span class="pl-k">=</span>[<span class="pl-c1">2</span>, <span class="pl-c1">4</span>]] <span class="pl-k">|&gt;</span> <span class="pl-c1">Order</span>(Get<span class="pl-k">.</span>year_of_birth)] <span class="pl-k">|&gt;</span> DataFrame</pre></div>
<p dir="auto">And be able to get any fields aggregations with sql etc.</p>
<p dir="auto">You can also query by relations, though <code>contraint ... foreign key...</code> is not supported yet - the column names simply need to match.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="FunnyORM.generate_file(db, :Visit, tablename=:visit_occurrence)
include(&quot;models/visit_occurrence.jl&quot;)

db[Person[Visit[visit_end_date=&quot;&quot; =&gt; &quot;2008-04-13&quot;]]]"><pre>FunnyORM<span class="pl-k">.</span><span class="pl-c1">generate_file</span>(db, <span class="pl-c1">:Visit</span>, tablename<span class="pl-k">=</span><span class="pl-c1">:visit_occurrence</span>)
<span class="pl-c1">include</span>(<span class="pl-s"><span class="pl-pds">"</span>models/visit_occurrence.jl<span class="pl-pds">"</span></span>)

db[Person[Visit[visit_end_date<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>2008-04-13<span class="pl-pds">"</span></span>]]]</pre></div>
<p dir="auto">This will give you people who had visits that ended before 13th Apr 2008.</p>
<p dir="auto">For many-to-many relationship you need to have an object for e.g. <code>PersonVisit</code> in this case and do <code>Person[PersonVisit[Visit[...]]]</code>.</p>
<p dir="auto">Additionally, if you use JET then it will pick up some errors, like field name being wrong here:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="db[Person[month_of_birth=[2, 4]]][1].year_if_birth"><pre>db[Person[month_of_birth<span class="pl-k">=</span>[<span class="pl-c1">2</span>, <span class="pl-c1">4</span>]]][<span class="pl-c1">1</span>]<span class="pl-k">.</span>year_if_birth</pre></div>
<h2 dir="auto"><a id="user-content-mutating" class="anchor" aria-hidden="true" href="#mutating"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Mutating:</h2>
<h3 dir="auto"><a id="user-content-creating-new-objects" class="anchor" aria-hidden="true" href="#creating-new-objects"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Creating new objects:</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# single insert - returns new Person
Person(db)(gender_concept_id=8532, month_of_birth=11)
# bulk insert - returns Vector{Person}
Person(db)([(gender_concept_id=8532, month_of_birth=11), (gender_concept_id=1111,)])"><pre><span class="pl-c"><span class="pl-c">#</span> single insert - returns new Person</span>
<span class="pl-c1">Person</span>(db)(gender_concept_id<span class="pl-k">=</span><span class="pl-c1">8532</span>, month_of_birth<span class="pl-k">=</span><span class="pl-c1">11</span>)
<span class="pl-c"><span class="pl-c">#</span> bulk insert - returns Vector{Person}</span>
<span class="pl-c1">Person</span>(db)([(gender_concept_id<span class="pl-k">=</span><span class="pl-c1">8532</span>, month_of_birth<span class="pl-k">=</span><span class="pl-c1">11</span>), (gender_concept_id<span class="pl-k">=</span><span class="pl-c1">1111</span>,)])</pre></div>
<h3 dir="auto"><a id="user-content-updating-objects" class="anchor" aria-hidden="true" href="#updating-objects"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Updating objects</h3>
<p dir="auto">Here you can use a macro:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# grab the latest insert
example = db[Person[year_of_birth=1940]] |&gt; first
@update db[example] day_of_birth = 10 month_of_birth = 3
example.day_of_birth == 10  # true

# Warning! It only updates the reference you call it with, i.e:
old = example
@update db[example] day_of_birth = 15
example.day_of_birth == 15, example.day_of_birth == 10  # both true"><pre><span class="pl-c"><span class="pl-c">#</span> grab the latest insert</span>
example <span class="pl-k">=</span> db[Person[year_of_birth<span class="pl-k">=</span><span class="pl-c1">1940</span>]] <span class="pl-k">|&gt;</span> first
<span class="pl-c1">@update</span> db[example] day_of_birth <span class="pl-k">=</span> <span class="pl-c1">10</span> month_of_birth <span class="pl-k">=</span> <span class="pl-c1">3</span>
example<span class="pl-k">.</span>day_of_birth <span class="pl-k">==</span> <span class="pl-c1">10</span>  <span class="pl-c"><span class="pl-c">#</span> true</span>

<span class="pl-c"><span class="pl-c">#</span> Warning! It only updates the reference you call it with, i.e:</span>
old <span class="pl-k">=</span> example
<span class="pl-c1">@update</span> db[example] day_of_birth <span class="pl-k">=</span> <span class="pl-c1">15</span>
example<span class="pl-k">.</span>day_of_birth <span class="pl-k">==</span> <span class="pl-c1">15</span>, example<span class="pl-k">.</span>day_of_birth <span class="pl-k">==</span> <span class="pl-c1">10</span>  <span class="pl-c"><span class="pl-c">#</span> both true</span></pre></div>
<p dir="auto">Or using <code>db[model](kwargs)</code> syntax:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="updated = db[example](year_of_birth=1941)
example.year_of_birth == 1940, updated.year_of_birth == 1941  # both true"><pre>updated <span class="pl-k">=</span> db[example](year_of_birth<span class="pl-k">=</span><span class="pl-c1">1941</span>)
example<span class="pl-k">.</span>year_of_birth <span class="pl-k">==</span> <span class="pl-c1">1940</span>, updated<span class="pl-k">.</span>year_of_birth <span class="pl-k">==</span> <span class="pl-c1">1941</span>  <span class="pl-c"><span class="pl-c">#</span> both true</span></pre></div>
<h1 dir="auto"><a id="user-content-still-todo" class="anchor" aria-hidden="true" href="#still-todo"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>still TODO:</h1>
<ul dir="auto">
<li>db.sqlmap for relationships</li>
<li>maybe? db.sqlmap for Person -&gt; Person,person,Persons,persons, i.e. multiple gentablenames</li>
<li>UUIDs, e.g. with PSQL</li>
<li>get_sqls for dbs other than sqlite</li>
<li>dates</li>
</ul>
</article></div>