<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-checkpointing" class="anchor" aria-hidden="true" href="#checkpointing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Checkpointing</h1>
<p dir="auto"><a href="https://github.com/Argonne-National-Laboratory/Checkpointing.jl/actions?query=workflow/actions?query=workflow"><img src="https://github.com/Argonne-National-Laboratory/Checkpointing.jl/workflows/Run%20tests/badge.svg?branch=main" alt="" style="max-width: 100%;"></a> <a href="https://Argonne-National-Laboratory.github.io/Checkpointing.jl/" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a> <a href="https://zenodo.org/badge/latestdoi/417181074" rel="nofollow"><img src="https://camo.githubusercontent.com/c755ffe97fe5e130b29636cc4f864ab46c71d947b298549e32c9b97aa5bad99b/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f3431373138313037342e737667" alt="DOI" data-canonical-src="https://zenodo.org/badge/417181074.svg" style="max-width: 100%;"></a></p>
<p dir="auto">This package provides checkpointing schemes for adjoint computations using automatic differentiation (AD) of time stepping loops. Currently, we support the macro <code>@checkpoint_struct</code>, which differentiates and checkpoints a struct used in the loop. Each loop iteration is differentiated using <a href="https://github.com/EnzymeAD/Enzyme.jl">Enzyme.jl</a>. We rely on <a href="https://github.com/JuliaDiff/ChainRulesCore.jl">ChainRulesCore.jl</a> to integrate with AD tools applied to the code outside of the loop.</p>
<p dir="auto">The schemes are agnostic to the AD tool being used and can be easily interfaced with any Julia AD tool. Currently, the package provides the following checkpointing schemes:</p>
<ol dir="auto">
<li>Revolve/Binomial checkpointing [1]</li>
<li>Periodic checkpointing</li>
<li>Online r=2 checkpointing for while loops with a priori unknown number of iterations [2]</li>
</ol>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="add Checkpointing"><pre>add Checkpointing</pre></div>
<h2 dir="auto"><a id="user-content-usage-example-1d-heat-equation" class="anchor" aria-hidden="true" href="#usage-example-1d-heat-equation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage: Example 1D heat equation</h2>
<p dir="auto">We present an example code where Zygote is used to differentiate the implementation of the explicit 1D heat equation. The macro <code>@checkpointing_struct</code> covers the transformation of <code>for</code> loops with <code>1:tsteps</code> ranges where <code>tsteps=500</code> is the number of timesteps. As a checkpointing scheme, we use Revolve and use a maximum of only 4 snapshots. This implies that instead of requiring to save all 500 temperature fields for the gradient computation, we now only need 4. As a trade-off, recomputation is used to recompute intermediate temperature fields.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# Explicit 1D heat equation
using Checkpointing
using Plots
using Zygote

mutable struct Heat
    Tnext::Vector{Float64}
    Tlast::Vector{Float64}
    n::Int
    λ::Float64
    tsteps::Int
end

function advance(heat)
    next = heat.Tnext
    last = heat.Tlast
    λ = heat.λ
    n = heat.n
    for i in 2:(n-1)
        next[i] = last[i] + λ*(last[i-1]-2*last[i]+last[i+1])
    end
    return nothing
end


function sumheat(heat::Heat, chkpt::Scheme)
    @checkpoint_struct revolve heat for i in 1:tsteps
        heat.Tlast .= heat.Tnext
        advance(heat)
    end
    return reduce(+, heat.Tnext)
end

n = 100
Δx=0.1
Δt=0.001
# Select μ such that λ ≤ 0.5 for stability with μ = (λ*Δt)/Δx^2
λ = 0.5
# time steps
tsteps = 500

# Create object from struct
heat = Heat(zeros(n), zeros(n), n, λ, tsteps)

# Boundary conditions
heat.Tnext[1]   = 20.0
heat.Tnext[end] = 0

# Set up AD
# Number of available snapshots
snaps = 4
verbose = 0
revolve = Revolve{Heat}(tsteps, snaps; verbose=verbose)

# Compute gradient
g = Zygote.gradient(sumheat, heat, revolve)

# Plot function values
plot(heat.Tnext)
# Plot gradient with respect to sum(T).
plot(g[1].Tnext[2:end-1])"><pre><span class="pl-c"><span class="pl-c">#</span> Explicit 1D heat equation</span>
<span class="pl-k">using</span> Checkpointing
<span class="pl-k">using</span> Plots
<span class="pl-k">using</span> Zygote

<span class="pl-k">mutable struct</span> Heat
    Tnext<span class="pl-k">::</span><span class="pl-c1">Vector{Float64}</span>
    Tlast<span class="pl-k">::</span><span class="pl-c1">Vector{Float64}</span>
    n<span class="pl-k">::</span><span class="pl-c1">Int</span>
    λ<span class="pl-k">::</span><span class="pl-c1">Float64</span>
    tsteps<span class="pl-k">::</span><span class="pl-c1">Int</span>
<span class="pl-k">end</span>

<span class="pl-k">function</span> <span class="pl-en">advance</span>(heat)
    next <span class="pl-k">=</span> heat<span class="pl-k">.</span>Tnext
    last <span class="pl-k">=</span> heat<span class="pl-k">.</span>Tlast
    λ <span class="pl-k">=</span> heat<span class="pl-k">.</span>λ
    n <span class="pl-k">=</span> heat<span class="pl-k">.</span>n
    <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">2</span><span class="pl-k">:</span>(n<span class="pl-k">-</span><span class="pl-c1">1</span>)
        next[i] <span class="pl-k">=</span> last[i] <span class="pl-k">+</span> λ<span class="pl-k">*</span>(last[i<span class="pl-k">-</span><span class="pl-c1">1</span>]<span class="pl-k">-</span><span class="pl-c1">2</span><span class="pl-k">*</span>last[i]<span class="pl-k">+</span>last[i<span class="pl-k">+</span><span class="pl-c1">1</span>])
    <span class="pl-k">end</span>
    <span class="pl-k">return</span> <span class="pl-c1">nothing</span>
<span class="pl-k">end</span>


<span class="pl-k">function</span> <span class="pl-en">sumheat</span>(heat<span class="pl-k">::</span><span class="pl-c1">Heat</span>, chkpt<span class="pl-k">::</span><span class="pl-c1">Scheme</span>)
    <span class="pl-c1">@checkpoint_struct</span> revolve heat <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span>tsteps
        heat<span class="pl-k">.</span>Tlast <span class="pl-k">.=</span> heat<span class="pl-k">.</span>Tnext
        <span class="pl-c1">advance</span>(heat)
    <span class="pl-k">end</span>
    <span class="pl-k">return</span> <span class="pl-c1">reduce</span>(<span class="pl-k">+</span>, heat<span class="pl-k">.</span>Tnext)
<span class="pl-k">end</span>

n <span class="pl-k">=</span> <span class="pl-c1">100</span>
Δx<span class="pl-k">=</span><span class="pl-c1">0.1</span>
Δt<span class="pl-k">=</span><span class="pl-c1">0.001</span>
<span class="pl-c"><span class="pl-c">#</span> Select μ such that λ ≤ 0.5 for stability with μ = (λ*Δt)/Δx^2</span>
λ <span class="pl-k">=</span> <span class="pl-c1">0.5</span>
<span class="pl-c"><span class="pl-c">#</span> time steps</span>
tsteps <span class="pl-k">=</span> <span class="pl-c1">500</span>

<span class="pl-c"><span class="pl-c">#</span> Create object from struct</span>
heat <span class="pl-k">=</span> <span class="pl-c1">Heat</span>(<span class="pl-c1">zeros</span>(n), <span class="pl-c1">zeros</span>(n), n, λ, tsteps)

<span class="pl-c"><span class="pl-c">#</span> Boundary conditions</span>
heat<span class="pl-k">.</span>Tnext[<span class="pl-c1">1</span>]   <span class="pl-k">=</span> <span class="pl-c1">20.0</span>
heat<span class="pl-k">.</span>Tnext[<span class="pl-c1">end</span>] <span class="pl-k">=</span> <span class="pl-c1">0</span>

<span class="pl-c"><span class="pl-c">#</span> Set up AD</span>
<span class="pl-c"><span class="pl-c">#</span> Number of available snapshots</span>
snaps <span class="pl-k">=</span> <span class="pl-c1">4</span>
verbose <span class="pl-k">=</span> <span class="pl-c1">0</span>
revolve <span class="pl-k">=</span> <span class="pl-c1">Revolve</span><span class="pl-c1">{Heat}</span>(tsteps, snaps; verbose<span class="pl-k">=</span>verbose)

<span class="pl-c"><span class="pl-c">#</span> Compute gradient</span>
g <span class="pl-k">=</span> Zygote<span class="pl-k">.</span><span class="pl-c1">gradient</span>(sumheat, heat, revolve)

<span class="pl-c"><span class="pl-c">#</span> Plot function values</span>
<span class="pl-c1">plot</span>(heat<span class="pl-k">.</span>Tnext)
<span class="pl-c"><span class="pl-c">#</span> Plot gradient with respect to sum(T).</span>
<span class="pl-c1">plot</span>(g[<span class="pl-c1">1</span>]<span class="pl-k">.</span>Tnext[<span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">end</span><span class="pl-k">-</span><span class="pl-c1">1</span>])</pre></div>
<h2 dir="auto"><a id="user-content-future" class="anchor" aria-hidden="true" href="#future"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Future</h2>
<p dir="auto">The following features are planned for development:</p>
<ul dir="auto">
<li>Online checkpointing schemes for adaptive timestepping</li>
<li>Composition of checkpointing schemes</li>
<li>Multi-level checkpointing schemes</li>
</ul>
<p dir="auto">[1] Andreas Griewank and Andrea Walther, Algorithm 799: Revolve: An Implementation of Checkpointing for the Reverse or Adjoint Mode of Computational Differentiation. ACM Trans. Math. Softw. 26, 1 (March 2000), 19–45. DOI: <a href="https://doi.org/10.1145/347837.347846" rel="nofollow">10.1145/347837.347846</a></p>
<p dir="auto">[2] Philipp Stumm and Andrea Walther, New Algorithms for Optimal Online Checkpointing, 2010, DOI: <a href="https://doi.org/10.1137/080742439" rel="nofollow">10.1137/080742439</a></p>
<h2 dir="auto"><a id="user-content-funding" class="anchor" aria-hidden="true" href="#funding"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Funding</h2>
<p dir="auto">This work is supported by the NSF Cyberinfrastructure for Sustained Scientific Innovation (CSSI) program project <a href="https://dj4earth.github.io/" rel="nofollow">DJ4Earth</a></p>
</article></div>