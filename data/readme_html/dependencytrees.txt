<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-dependencytreesjl" class="anchor" aria-hidden="true" href="#dependencytreesjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>DependencyTrees.jl</h1>
<p><a href="https://dellison.github.io/DependencyTrees.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/f7b92a177c912c1cc007fc9b40f17ff3ee3bb414/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a> <a href="https://dellison.github.io/DependencyTrees.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/3e353c26ddfe819150acbc732248f4f2a37f5175/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a></p>
<p><a href="https://travis-ci.org/dellison/DependencyTrees.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/57c32185fabd1ddf76871c1fce6a9e82f573410f/68747470733a2f2f7472617669732d63692e6f72672f64656c6c69736f6e2f446570656e64656e637954726565732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/dellison/DependencyTrees.jl.svg?branch=master" style="max-width:100%;"></a> <a href="https://codecov.io/gh/dellison/DependencyTrees.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/5550c042274819e70cb838f649101999f3606eed/68747470733a2f2f636f6465636f762e696f2f67682f64656c6c69736f6e2f446570656e64656e637954726565732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="CodeCov" data-canonical-src="https://codecov.io/gh/dellison/DependencyTrees.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p>DependencyTrees.jl is a Julia package for working with natural language sentence annotated with dependency structure. It provides implementations of dependency parse trees (<code>DependencyTree</code>), a treebank reader, and implementations of several transition systems with oracles.</p>
<p>Install it with Julia's built-in package manager:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> ]add DependencyTrees</pre></div>
<h2><a id="user-content-features" class="anchor" aria-hidden="true" href="#features"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Features</h2>
<h3><a id="user-content-trees-and-treebanks" class="anchor" aria-hidden="true" href="#trees-and-treebanks"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Trees and Treebanks</h3>
<pre lang="julia-repl"><code>julia&gt; using DependencyTrees

julia&gt; treebank = Treebank("path/to/trees.conll")
julia&gt; for tree in treebank
           # ...
	   end
</code></pre>
<h3><a id="user-content-transition-based-parsing" class="anchor" aria-hidden="true" href="#transition-based-parsing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Transition-based parsing</h3>
<pre lang="julia-repl"><code>julia&gt; using DependencyTrees

julia&gt; treebank = Treebank("path/to/trees.conll")
julia&gt; oracle = DynamicOracle(ArcHybrid())
julia&gt; for tree in treebank
           for state in oracle(tree)
		       cfg, possible_arcs, gold_arcs = state.cfg, state.A, state.G
			   # ...
		   end
	   end
</code></pre>
<p>Transition systems:</p>
<ul>
<li><code>ArcStandard</code> (static oracle)</li>
<li><code>ArcEager</code><sup>[1],[2]</sup> (static and dynamic oracles)</li>
<li><code>ArcHybrid</code><sup>[3],[4]</sup> (static and dynamic oracles)</li>
<li><code>ArcSwift</code><sup>[5]</sup> (static oracle)</li>
<li><code>ListBasedNonProjective</code><sup>[2]</sup> (static oracle)</li>
</ul>
<h2><a id="user-content-contributing--help" class="anchor" aria-hidden="true" href="#contributing--help"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Contributing &amp; Help</h2>
<p><a href="https://github.com/dellison/DependencyTrees.jl/issues/new">Open an issue</a>! Bug reports, feature requests, etc. are all welcome.</p>
<h2><a id="user-content-references" class="anchor" aria-hidden="true" href="#references"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>References</h2>
<p>[1]: Nivre 2003: An efficient algorithm for projective dependency parsing. <a href="http://stp.lingfil.uu.se/~nivre/docs/iwpt03.pdf" rel="nofollow">http://stp.lingfil.uu.se/~nivre/docs/iwpt03.pdf</a></p>
<p>[2]: Nivre 2008: Algorithms for Deterministic Incremental Dependency Parsing. <a href="https://www.aclweb.org/anthology/J/J08/J08-4003.pdf" rel="nofollow">https://www.aclweb.org/anthology/J/J08/J08-4003.pdf</a></p>
<p>[3]: Kuhlmann et all 2011: Dynamic programming algorithms for transition-based dependency parsers. <a href="https://www.aclweb.org/anthology/P/P11/P11-1068.pdf" rel="nofollow">https://www.aclweb.org/anthology/P/P11/P11-1068.pdf</a></p>
<p>[4]: Goldberg &amp; Nivre 2013: Training deterministic parsers with non-deterministic oracles. <a href="https://aclweb.org/anthology/Q/Q13/Q13-1033.pdf" rel="nofollow">https://aclweb.org/anthology/Q/Q13/Q13-1033.pdf</a></p>
<p>[5]: Qi &amp; Manning 2016: Arc-swift: a novel transition system for dependency parsing. <a href="https://nlp.stanford.edu/pubs/qi2017arcswift.pdf" rel="nofollow">https://nlp.stanford.edu/pubs/qi2017arcswift.pdf</a></p>
</article></div>