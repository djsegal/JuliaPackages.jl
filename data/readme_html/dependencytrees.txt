<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-dependencytreesjl" class="anchor" aria-hidden="true" href="#dependencytreesjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>DependencyTrees.jl</h1>
<p><a href="https://dellison.github.io/DependencyTrees.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a> <a href="https://dellison.github.io/DependencyTrees.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a> <a href="https://travis-ci.org/dellison/DependencyTrees.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/9b685b0f2ad348959899191107403bf945826e9022e0269d01c031311f25ea88/68747470733a2f2f7472617669732d63692e6f72672f64656c6c69736f6e2f446570656e64656e637954726565732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/dellison/DependencyTrees.jl.svg?branch=master" style="max-width:100%;"></a> <a href="https://codecov.io/gh/dellison/DependencyTrees.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/45f63ada8cd4ef6aa25a3be48dfd2e2a594a6ed874d7ef841d6cb18d3cf97ee5/68747470733a2f2f636f6465636f762e696f2f67682f64656c6c69736f6e2f446570656e64656e637954726565732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="CodeCov" data-canonical-src="https://codecov.io/gh/dellison/DependencyTrees.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p>DependencyTrees.jl is a Julia package for working with dependency structures in natural language sentences. It provides a representation of dependency parse trees (<code>DependencyTree</code>), a treebank reader, and transition-based parsing algorithms.</p>
<p><a href="https://dellison.github.io/DependencyTrees.jl/stable/" rel="nofollow">Read the docs!</a></p>
<h2><a id="user-content-features" class="anchor" aria-hidden="true" href="#features"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Features</h2>
<h3><a id="user-content-trees-and-treebanks" class="anchor" aria-hidden="true" href="#trees-and-treebanks"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Trees and Treebanks</h3>
<p>The <code>DependencyTree</code> type represents a dependency parse of a natural language sentence.</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt; using DependencyTrees

julia&gt; treebank = Treebank(&quot;test/data/english.conllu&quot;)

julia&gt; for tree in treebank
           # ...
       end

julia&gt; tree = first(treebank)
┌──────────────────── ROOT
│                 ┌─► Pierre
│     ┌─►┌──┌──┌──└── Vinken
│     │  │  │  └────► ,
│     │  │  │     ┌─► 61
│     │  │  │  ┌─►└── years
│     │  │  └─►└───── old
│     │  └──────────► ,
└─►┌──└───────────┌── will
   │  ┌─────┌──┌──└─► join
   │  │     │  │  ┌─► the
   │  │     │  └─►└── board
   │  │  ┌──└───────► as
   │  │  │     ┌────► a
   │  │  │     │  ┌─► nonexecutive
   │  │  └────►└──└── director
   │  └──────────►┌── Nov.
   │              └─► 29
   └────────────────► .
"><pre lang="julia-repl"><code>julia&gt; using DependencyTrees

julia&gt; treebank = Treebank("test/data/english.conllu")

julia&gt; for tree in treebank
           # ...
       end

julia&gt; tree = first(treebank)
┌──────────────────── ROOT
│                 ┌─► Pierre
│     ┌─►┌──┌──┌──└── Vinken
│     │  │  │  └────► ,
│     │  │  │     ┌─► 61
│     │  │  │  ┌─►└── years
│     │  │  └─►└───── old
│     │  └──────────► ,
└─►┌──└───────────┌── will
   │  ┌─────┌──┌──└─► join
   │  │     │  │  ┌─► the
   │  │     │  └─►└── board
   │  │  ┌──└───────► as
   │  │  │     ┌────► a
   │  │  │     │  ┌─► nonexecutive
   │  │  └────►└──└── director
   │  └──────────►┌── Nov.
   │              └─► 29
   └────────────────► .
</code></pre></div>
<h3><a id="user-content-transition-based-parsing" class="anchor" aria-hidden="true" href="#transition-based-parsing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Transition-based parsing</h3>
<p>A number of transition systems and oracles are implemented in the <code>TransitionParsing</code> submodule.</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt; using DependencyTrees
julia&gt; using DependencyTrees.TransitionParsing
julia&gt; treebank = Treebank(&quot;test/data/english.conll&quot;)
julia&gt; oracle = Oracle(ArcHybrid(), dymanic_oracle)
julia&gt; for tree in treebank, (config, gold ts) in oracle(tree)
           # ...
       end
"><pre lang="julia-repl"><code>julia&gt; using DependencyTrees
julia&gt; using DependencyTrees.TransitionParsing
julia&gt; treebank = Treebank("test/data/english.conll")
julia&gt; oracle = Oracle(ArcHybrid(), dymanic_oracle)
julia&gt; for tree in treebank, (config, gold ts) in oracle(tree)
           # ...
       end
</code></pre></div>
<p>Transition systems:</p>
<ul>
<li><code>ArcStandard</code> (static oracle)</li>
<li><code>ArcEager</code><sup>[1],[2]</sup> (static and dynamic oracles)</li>
<li><code>ArcHybrid</code><sup>[3],[4]</sup> (static and dynamic oracles)</li>
<li><code>ArcSwift</code><sup>[5]</sup> (static oracle)</li>
<li><code>ListBasedNonProjective</code><sup>[2]</sup> (static oracle)</li>
</ul>
<p>See the <a href="https://dellison.github.io/DependencyTrees.jl/stable/transition_parsing" rel="nofollow">documentation</a> for details.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="]add DependencyTrees
"><pre><code>]add DependencyTrees
</code></pre></div>
<h2><a id="user-content-contributing--help" class="anchor" aria-hidden="true" href="#contributing--help"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Contributing &amp; Help</h2>
<p><a href="https://github.com/dellison/DependencyTrees.jl/issues/new">Open an issue</a>! Bug reports, feature requests, etc. are all welcome.</p>
<h2><a id="user-content-references" class="anchor" aria-hidden="true" href="#references"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>References</h2>
<p>[1]: Nivre 2003: An efficient algorithm for projective dependency parsing. <a href="http://stp.lingfil.uu.se/~nivre/docs/iwpt03.pdf" rel="nofollow">http://stp.lingfil.uu.se/~nivre/docs/iwpt03.pdf</a></p>
<p>[2]: Nivre 2008: Algorithms for Deterministic Incremental Dependency Parsing. <a href="https://www.aclweb.org/anthology/J/J08/J08-4003.pdf" rel="nofollow">https://www.aclweb.org/anthology/J/J08/J08-4003.pdf</a></p>
<p>[3]: Kuhlmann et all 2011: Dynamic programming algorithms for transition-based dependency parsers. <a href="https://www.aclweb.org/anthology/P/P11/P11-1068.pdf" rel="nofollow">https://www.aclweb.org/anthology/P/P11/P11-1068.pdf</a></p>
<p>[4]: Goldberg &amp; Nivre 2013: Training deterministic parsers with non-deterministic oracles. <a href="https://aclweb.org/anthology/Q/Q13/Q13-1033.pdf" rel="nofollow">https://aclweb.org/anthology/Q/Q13/Q13-1033.pdf</a></p>
<p>[5]: Qi &amp; Manning 2016: Arc-swift: a novel transition system for dependency parsing. <a href="https://nlp.stanford.edu/pubs/qi2017arcswift.pdf" rel="nofollow">https://nlp.stanford.edu/pubs/qi2017arcswift.pdf</a></p>
</article></div>