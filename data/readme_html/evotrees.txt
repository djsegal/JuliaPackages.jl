<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-evotrees" class="anchor" aria-hidden="true" href="#evotrees"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>EvoTrees</h1>
<p><a href="https://travis-ci.org/Evovest/EvoTrees.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/813e715aff547ce7c8db96ec7a8fc0445a85706b9aa65ec077a0e1d2a45d3074/68747470733a2f2f7472617669732d63692e6f72672f45766f766573742f45766f54726565732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/Evovest/EvoTrees.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p>A Julia implementation of boosted trees with CPU and GPU support.
Efficient histogram based algorithms with support for multiple loss functions (notably multi-target objectives such as max likelihood methods).</p>
<p><a href="https://github.com/Evovest/EvoTrees">R binding available</a></p>
<p>Currently supports:</p>
<ul>
<li>linear</li>
<li>logistic</li>
<li>Poisson (cpu only)</li>
<li>L1 (mae regression) (cpu only)</li>
<li>Quantile (cpu only)</li>
<li>multiclassification (softmax) (cpu only)</li>
<li>Gaussian (max likelihood)</li>
</ul>
<p>Input features is expected to be <code>Matrix{Float64/Float32}</code>. Tables/DataFrames format can be handled through <a href="https://github.com/alan-turing-institute/MLJ.jl">MLJ</a> (see <a href="#mlj-integration">below</a>).</p>
<h2><a id="user-content-gpu" class="anchor" aria-hidden="true" href="#gpu"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>GPU</h2>
<p>GPU support is currently available for linear, logistic and Gaussian objective functions. Set parameter <code>device = "gpu"</code>.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>Latest:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt; Pkg.add(&quot;https://github.com/Evovest/EvoTrees.jl&quot;)
"><pre lang="julia-repl"><code>julia&gt; Pkg.add("https://github.com/Evovest/EvoTrees.jl")
</code></pre></div>
<p>Official Repo:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt; Pkg.add(&quot;EvoTrees&quot;)
"><pre lang="julia-repl"><code>julia&gt; Pkg.add("EvoTrees")
</code></pre></div>
<h2><a id="user-content-performance" class="anchor" aria-hidden="true" href="#performance"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Performance</h2>
<p>Data consists of randomly generated float32. Training is performed on 200 iterations. Code to reproduce is <a href="https://github.com/Evovest/EvoTrees.jl/blob/master/experiments/benchmarks_v2.jl">here</a>.</p>
<p>EvoTrees: v0.8.0
XGBoost: v1.1.1</p>
<p>CPU: 16 threads on AMD Threadripper 3970X
GPU: NVIDIA RTX 2080</p>
<h3><a id="user-content-training" class="anchor" aria-hidden="true" href="#training"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Training:</h3>
<table>
<thead>
<tr>
<th>Dimensions   / Algo</th>
<th align="center">XGBoost Hist</th>
<th align="center">EvoTrees</th>
<th align="center">EvoTrees GPU</th>
</tr>
</thead>
<tbody>
<tr>
<td>100K x 100</td>
<td align="center">1.10s</td>
<td align="center">1.82s</td>
<td align="center">3.14s</td>
</tr>
<tr>
<td>500K x 100</td>
<td align="center">4.83s</td>
<td align="center">6.22s</td>
<td align="center">5.34s</td>
</tr>
<tr>
<td>1M x 100</td>
<td align="center">9.84s</td>
<td align="center">11.4s</td>
<td align="center">7.96s</td>
</tr>
<tr>
<td>5M x 100</td>
<td align="center">45.5s</td>
<td align="center">69.0s</td>
<td align="center">31.7s</td>
</tr>
</tbody>
</table>
<h3><a id="user-content-inference" class="anchor" aria-hidden="true" href="#inference"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Inference:</h3>
<table>
<thead>
<tr>
<th>Dimensions   / Algo</th>
<th align="center">XGBoost Hist</th>
<th align="center">EvoTrees</th>
<th align="center">EvoTrees GPU</th>
</tr>
</thead>
<tbody>
<tr>
<td>100K x 100</td>
<td align="center">0.164s</td>
<td align="center">0.026s</td>
<td align="center">0.013s</td>
</tr>
<tr>
<td>500K x 100</td>
<td align="center">0.796s</td>
<td align="center">0.175s</td>
<td align="center">0.055s</td>
</tr>
<tr>
<td>1M x 100</td>
<td align="center">1.59s</td>
<td align="center">0.396s</td>
<td align="center">0.108s</td>
</tr>
<tr>
<td>5M x 100</td>
<td align="center">7.96s</td>
<td align="center">2.15s</td>
<td align="center">0.543s</td>
</tr>
</tbody>
</table>
<h2><a id="user-content-parameters" class="anchor" aria-hidden="true" href="#parameters"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Parameters</h2>
<ul>
<li><strong>loss</strong>: {:linear, :logistic, :poisson, :L1, :quantile, :softmax, :gaussian}</li>
<li><strong>device</strong>: {"cpu", "gpu"}</li>
<li><strong>nrounds</strong>: integer, default=10</li>
<li><strong>λ</strong>: L2 regularization, float, default=0.0</li>
<li><strong>γ</strong>: min gain for split, default=0.0</li>
<li><strong>η</strong>: learning rate, default=0.1</li>
<li><strong>max_depth</strong>: integer, default=5</li>
<li><strong>min_weight</strong>: float &gt;= 0 default=1.0,</li>
<li><strong>rowsample</strong>: float [0,1] default=1.0</li>
<li><strong>colsample</strong>: float [0,1] default=1.0</li>
<li><strong>nbins</strong>: Int, number of bins into which features will be quantilized default=64</li>
<li><strong>α</strong>: float [0,1], set the quantile or bias in L1 default=0.5</li>
<li><strong>metric</strong>: {:mse, :rmse, :mae, :logloss, :quantile, :gini, :gaussian, :none},  default=:none</li>
</ul>
<h2><a id="user-content-mlj-integration" class="anchor" aria-hidden="true" href="#mlj-integration"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>MLJ Integration</h2>
<p>See <a href="https://github.com/alan-turing-institute/MLJ.jl">official project page</a> for more info.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using StatsBase: sample
using EvoTrees
using EvoTrees: sigmoid, logit
using MLJBase

features = rand(10_000) .* 5 .- 2
X = reshape(features, (size(features)[1], 1))
Y = sin.(features) .* 0.5 .+ 0.5
Y = logit(Y) + randn(size(Y))
Y = sigmoid(Y)
y = Y
X = MLJBase.table(X)

# @load EvoTreeRegressor
# linear regression
tree_model = EvoTreeRegressor(loss=:linear, max_depth=5, η=0.05, nrounds=10)

# set machine
mach = machine(tree_model, X, y)

# partition data
train, test = partition(eachindex(y), 0.7, shuffle=true); # 70:30 split

# fit data
fit!(mach, rows=train, verbosity=1)

# continue training
mach.model.nrounds += 10
fit!(mach, rows=train, verbosity=1)

# predict on train data
pred_train = predict(mach, selectrows(X, train))
mean(abs.(pred_train - selectrows(Y, train)))

# predict on test data
pred_test = predict(mach, selectrows(X, test))
mean(abs.(pred_test - selectrows(Y, test)))
"><pre><span class="pl-k">using</span> StatsBase<span class="pl-k">:</span> sample
<span class="pl-k">using</span> EvoTrees
<span class="pl-k">using</span> EvoTrees<span class="pl-k">:</span> sigmoid, logit
<span class="pl-k">using</span> MLJBase

features <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">10_000</span>) <span class="pl-k">.*</span> <span class="pl-c1">5</span> <span class="pl-k">.-</span> <span class="pl-c1">2</span>
X <span class="pl-k">=</span> <span class="pl-c1">reshape</span>(features, (<span class="pl-c1">size</span>(features)[<span class="pl-c1">1</span>], <span class="pl-c1">1</span>))
Y <span class="pl-k">=</span> <span class="pl-c1">sin</span>.(features) <span class="pl-k">.*</span> <span class="pl-c1">0.5</span> <span class="pl-k">.+</span> <span class="pl-c1">0.5</span>
Y <span class="pl-k">=</span> <span class="pl-c1">logit</span>(Y) <span class="pl-k">+</span> <span class="pl-c1">randn</span>(<span class="pl-c1">size</span>(Y))
Y <span class="pl-k">=</span> <span class="pl-c1">sigmoid</span>(Y)
y <span class="pl-k">=</span> Y
X <span class="pl-k">=</span> MLJBase<span class="pl-k">.</span><span class="pl-c1">table</span>(X)

<span class="pl-c"><span class="pl-c">#</span> @load EvoTreeRegressor</span>
<span class="pl-c"><span class="pl-c">#</span> linear regression</span>
tree_model <span class="pl-k">=</span> <span class="pl-c1">EvoTreeRegressor</span>(loss<span class="pl-k">=</span><span class="pl-c1">:linear</span>, max_depth<span class="pl-k">=</span><span class="pl-c1">5</span>, η<span class="pl-k">=</span><span class="pl-c1">0.05</span>, nrounds<span class="pl-k">=</span><span class="pl-c1">10</span>)

<span class="pl-c"><span class="pl-c">#</span> set machine</span>
mach <span class="pl-k">=</span> <span class="pl-c1">machine</span>(tree_model, X, y)

<span class="pl-c"><span class="pl-c">#</span> partition data</span>
train, test <span class="pl-k">=</span> <span class="pl-c1">partition</span>(<span class="pl-c1">eachindex</span>(y), <span class="pl-c1">0.7</span>, shuffle<span class="pl-k">=</span><span class="pl-c1">true</span>); <span class="pl-c"><span class="pl-c">#</span> 70:30 split</span>

<span class="pl-c"><span class="pl-c">#</span> fit data</span>
<span class="pl-c1">fit!</span>(mach, rows<span class="pl-k">=</span>train, verbosity<span class="pl-k">=</span><span class="pl-c1">1</span>)

<span class="pl-c"><span class="pl-c">#</span> continue training</span>
mach<span class="pl-k">.</span>model<span class="pl-k">.</span>nrounds <span class="pl-k">+=</span> <span class="pl-c1">10</span>
<span class="pl-c1">fit!</span>(mach, rows<span class="pl-k">=</span>train, verbosity<span class="pl-k">=</span><span class="pl-c1">1</span>)

<span class="pl-c"><span class="pl-c">#</span> predict on train data</span>
pred_train <span class="pl-k">=</span> <span class="pl-c1">predict</span>(mach, <span class="pl-c1">selectrows</span>(X, train))
<span class="pl-c1">mean</span>(<span class="pl-c1">abs</span>.(pred_train <span class="pl-k">-</span> <span class="pl-c1">selectrows</span>(Y, train)))

<span class="pl-c"><span class="pl-c">#</span> predict on test data</span>
pred_test <span class="pl-k">=</span> <span class="pl-c1">predict</span>(mach, <span class="pl-c1">selectrows</span>(X, test))
<span class="pl-c1">mean</span>(<span class="pl-c1">abs</span>.(pred_test <span class="pl-k">-</span> <span class="pl-c1">selectrows</span>(Y, test)))</pre></div>
<h2><a id="user-content-getting-started-using-internal-api" class="anchor" aria-hidden="true" href="#getting-started-using-internal-api"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Getting started using internal API</h2>
<p>Minimal example to fit a noisy sinus wave.</p>
<p><a target="_blank" rel="noopener noreferrer" href="figures/regression_sinus.png"><img src="figures/regression_sinus.png" alt="" style="max-width:100%;"></a></p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using EvoTrees
using EvoTrees: sigmoid, logit

# prepare a dataset
features = rand(10000) .* 20 .- 10
X = reshape(features, (size(features)[1], 1))
Y = sin.(features) .* 0.5 .+ 0.5
Y = logit(Y) + randn(size(Y))
Y = sigmoid(Y)
𝑖 = collect(1:size(X, 1))

# train-eval split
𝑖_sample = sample(𝑖, size(𝑖, 1), replace = false)
train_size = 0.8
𝑖_train = 𝑖_sample[1:floor(Int, train_size * size(𝑖, 1))]
𝑖_eval = 𝑖_sample[floor(Int, train_size * size(𝑖, 1))+1:end]

X_train, X_eval = X[𝑖_train, :], X[𝑖_eval, :]
Y_train, Y_eval = Y[𝑖_train], Y[𝑖_eval]

params1 = EvoTreeRegressor(
    loss=:linear, metric=:mse,
    nrounds=100, nbins = 100,
    λ = 0.5, γ=0.1, η=0.1,
    max_depth = 6, min_weight = 1.0,
    rowsample=0.5, colsample=1.0)
model = fit_evotree(params1, X_train, Y_train, X_eval = X_eval, Y_eval = Y_eval, print_every_n = 25)
pred_eval_linear = predict(model, X_eval)

# logistic / cross-entropy
params1 = EvoTreeRegressor(
    loss=:logistic, metric = :logloss,
    nrounds=100, nbins = 100,
    λ = 0.5, γ=0.1, η=0.1,
    max_depth = 6, min_weight = 1.0,
    rowsample=0.5, colsample=1.0)
model = fit_evotree(params1, X_train, Y_train, X_eval = X_eval, Y_eval = Y_eval, print_every_n = 25)
pred_eval_logistic = predict(model, X_eval)

# Poisson
params1 = EvoTreeCount(
    loss=:poisson, metric = :poisson,
    nrounds=100, nbins = 100,
    λ = 0.5, γ=0.1, η=0.1,
    max_depth = 6, min_weight = 1.0,
    rowsample=0.5, colsample=1.0)
model = fit_evotree(params1, X_train, Y_train, X_eval = X_eval, Y_eval = Y_eval, print_every_n = 25)
@time pred_eval_poisson = predict(model, X_eval)

# L1
params1 = EvoTreeRegressor(
    loss=:L1, α=0.5, metric = :mae,
    nrounds=100, nbins=100,
    λ = 0.5, γ=0.0, η=0.1,
    max_depth = 6, min_weight = 1.0,
    rowsample=0.5, colsample=1.0)
model = fit_evotree(params1, X_train, Y_train, X_eval = X_eval, Y_eval = Y_eval, print_every_n = 25)
pred_eval_L1 = predict(model, X_eval)
"><pre><span class="pl-k">using</span> EvoTrees
<span class="pl-k">using</span> EvoTrees<span class="pl-k">:</span> sigmoid, logit

<span class="pl-c"><span class="pl-c">#</span> prepare a dataset</span>
features <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">10000</span>) <span class="pl-k">.*</span> <span class="pl-c1">20</span> <span class="pl-k">.-</span> <span class="pl-c1">10</span>
X <span class="pl-k">=</span> <span class="pl-c1">reshape</span>(features, (<span class="pl-c1">size</span>(features)[<span class="pl-c1">1</span>], <span class="pl-c1">1</span>))
Y <span class="pl-k">=</span> <span class="pl-c1">sin</span>.(features) <span class="pl-k">.*</span> <span class="pl-c1">0.5</span> <span class="pl-k">.+</span> <span class="pl-c1">0.5</span>
Y <span class="pl-k">=</span> <span class="pl-c1">logit</span>(Y) <span class="pl-k">+</span> <span class="pl-c1">randn</span>(<span class="pl-c1">size</span>(Y))
Y <span class="pl-k">=</span> <span class="pl-c1">sigmoid</span>(Y)
𝑖 <span class="pl-k">=</span> <span class="pl-c1">collect</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">size</span>(X, <span class="pl-c1">1</span>))

<span class="pl-c"><span class="pl-c">#</span> train-eval split</span>
𝑖_sample <span class="pl-k">=</span> <span class="pl-c1">sample</span>(𝑖, <span class="pl-c1">size</span>(𝑖, <span class="pl-c1">1</span>), replace <span class="pl-k">=</span> <span class="pl-c1">false</span>)
train_size <span class="pl-k">=</span> <span class="pl-c1">0.8</span>
𝑖_train <span class="pl-k">=</span> 𝑖_sample[<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">floor</span>(Int, train_size <span class="pl-k">*</span> <span class="pl-c1">size</span>(𝑖, <span class="pl-c1">1</span>))]
𝑖_eval <span class="pl-k">=</span> 𝑖_sample[<span class="pl-c1">floor</span>(Int, train_size <span class="pl-k">*</span> <span class="pl-c1">size</span>(𝑖, <span class="pl-c1">1</span>))<span class="pl-k">+</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">end</span>]

X_train, X_eval <span class="pl-k">=</span> X[𝑖_train, :], X[𝑖_eval, :]
Y_train, Y_eval <span class="pl-k">=</span> Y[𝑖_train], Y[𝑖_eval]

params1 <span class="pl-k">=</span> <span class="pl-c1">EvoTreeRegressor</span>(
    loss<span class="pl-k">=</span><span class="pl-c1">:linear</span>, metric<span class="pl-k">=</span><span class="pl-c1">:mse</span>,
    nrounds<span class="pl-k">=</span><span class="pl-c1">100</span>, nbins <span class="pl-k">=</span> <span class="pl-c1">100</span>,
    λ <span class="pl-k">=</span> <span class="pl-c1">0.5</span>, γ<span class="pl-k">=</span><span class="pl-c1">0.1</span>, η<span class="pl-k">=</span><span class="pl-c1">0.1</span>,
    max_depth <span class="pl-k">=</span> <span class="pl-c1">6</span>, min_weight <span class="pl-k">=</span> <span class="pl-c1">1.0</span>,
    rowsample<span class="pl-k">=</span><span class="pl-c1">0.5</span>, colsample<span class="pl-k">=</span><span class="pl-c1">1.0</span>)
model <span class="pl-k">=</span> <span class="pl-c1">fit_evotree</span>(params1, X_train, Y_train, X_eval <span class="pl-k">=</span> X_eval, Y_eval <span class="pl-k">=</span> Y_eval, print_every_n <span class="pl-k">=</span> <span class="pl-c1">25</span>)
pred_eval_linear <span class="pl-k">=</span> <span class="pl-c1">predict</span>(model, X_eval)

<span class="pl-c"><span class="pl-c">#</span> logistic / cross-entropy</span>
params1 <span class="pl-k">=</span> <span class="pl-c1">EvoTreeRegressor</span>(
    loss<span class="pl-k">=</span><span class="pl-c1">:logistic</span>, metric <span class="pl-k">=</span> <span class="pl-c1">:logloss</span>,
    nrounds<span class="pl-k">=</span><span class="pl-c1">100</span>, nbins <span class="pl-k">=</span> <span class="pl-c1">100</span>,
    λ <span class="pl-k">=</span> <span class="pl-c1">0.5</span>, γ<span class="pl-k">=</span><span class="pl-c1">0.1</span>, η<span class="pl-k">=</span><span class="pl-c1">0.1</span>,
    max_depth <span class="pl-k">=</span> <span class="pl-c1">6</span>, min_weight <span class="pl-k">=</span> <span class="pl-c1">1.0</span>,
    rowsample<span class="pl-k">=</span><span class="pl-c1">0.5</span>, colsample<span class="pl-k">=</span><span class="pl-c1">1.0</span>)
model <span class="pl-k">=</span> <span class="pl-c1">fit_evotree</span>(params1, X_train, Y_train, X_eval <span class="pl-k">=</span> X_eval, Y_eval <span class="pl-k">=</span> Y_eval, print_every_n <span class="pl-k">=</span> <span class="pl-c1">25</span>)
pred_eval_logistic <span class="pl-k">=</span> <span class="pl-c1">predict</span>(model, X_eval)

<span class="pl-c"><span class="pl-c">#</span> Poisson</span>
params1 <span class="pl-k">=</span> <span class="pl-c1">EvoTreeCount</span>(
    loss<span class="pl-k">=</span><span class="pl-c1">:poisson</span>, metric <span class="pl-k">=</span> <span class="pl-c1">:poisson</span>,
    nrounds<span class="pl-k">=</span><span class="pl-c1">100</span>, nbins <span class="pl-k">=</span> <span class="pl-c1">100</span>,
    λ <span class="pl-k">=</span> <span class="pl-c1">0.5</span>, γ<span class="pl-k">=</span><span class="pl-c1">0.1</span>, η<span class="pl-k">=</span><span class="pl-c1">0.1</span>,
    max_depth <span class="pl-k">=</span> <span class="pl-c1">6</span>, min_weight <span class="pl-k">=</span> <span class="pl-c1">1.0</span>,
    rowsample<span class="pl-k">=</span><span class="pl-c1">0.5</span>, colsample<span class="pl-k">=</span><span class="pl-c1">1.0</span>)
model <span class="pl-k">=</span> <span class="pl-c1">fit_evotree</span>(params1, X_train, Y_train, X_eval <span class="pl-k">=</span> X_eval, Y_eval <span class="pl-k">=</span> Y_eval, print_every_n <span class="pl-k">=</span> <span class="pl-c1">25</span>)
<span class="pl-c1">@time</span> pred_eval_poisson <span class="pl-k">=</span> <span class="pl-c1">predict</span>(model, X_eval)

<span class="pl-c"><span class="pl-c">#</span> L1</span>
params1 <span class="pl-k">=</span> <span class="pl-c1">EvoTreeRegressor</span>(
    loss<span class="pl-k">=</span><span class="pl-c1">:L1</span>, α<span class="pl-k">=</span><span class="pl-c1">0.5</span>, metric <span class="pl-k">=</span> <span class="pl-c1">:mae</span>,
    nrounds<span class="pl-k">=</span><span class="pl-c1">100</span>, nbins<span class="pl-k">=</span><span class="pl-c1">100</span>,
    λ <span class="pl-k">=</span> <span class="pl-c1">0.5</span>, γ<span class="pl-k">=</span><span class="pl-c1">0.0</span>, η<span class="pl-k">=</span><span class="pl-c1">0.1</span>,
    max_depth <span class="pl-k">=</span> <span class="pl-c1">6</span>, min_weight <span class="pl-k">=</span> <span class="pl-c1">1.0</span>,
    rowsample<span class="pl-k">=</span><span class="pl-c1">0.5</span>, colsample<span class="pl-k">=</span><span class="pl-c1">1.0</span>)
model <span class="pl-k">=</span> <span class="pl-c1">fit_evotree</span>(params1, X_train, Y_train, X_eval <span class="pl-k">=</span> X_eval, Y_eval <span class="pl-k">=</span> Y_eval, print_every_n <span class="pl-k">=</span> <span class="pl-c1">25</span>)
pred_eval_L1 <span class="pl-k">=</span> <span class="pl-c1">predict</span>(model, X_eval)</pre></div>
<h2><a id="user-content-quantile-regression" class="anchor" aria-hidden="true" href="#quantile-regression"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Quantile Regression</h2>
<p><a target="_blank" rel="noopener noreferrer" href="figures/quantiles_sinus.png"><img src="figures/quantiles_sinus.png" alt="" style="max-width:100%;"></a></p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="# q50
params1 = EvoTreeRegressor(
    loss=:quantile, α=0.5, metric = :quantile,
    nrounds=200, nbins = 100,
    λ = 0.1, γ=0.0, η=0.05,
    max_depth = 6, min_weight = 1.0,
    rowsample=0.5, colsample=1.0)
model = fit_evotree(params1, X_train, Y_train, X_eval = X_eval, Y_eval = Y_eval, print_every_n = 25)
pred_train_q50 = predict(model, X_train)

# q20
params1 = EvoTreeRegressor(
    loss=:quantile, α=0.2, metric = :quantile,
    nrounds=200, nbins = 100,
    λ = 0.1, γ=0.0, η=0.05,
    max_depth = 6, min_weight = 1.0,
    rowsample=0.5, colsample=1.0)
model = fit_evotree(params1, X_train, Y_train, X_eval = X_eval, Y_eval = Y_eval, print_every_n = 25)
pred_train_q20 = predict(model, X_train)

# q80
params1 = EvoTreeRegressor(
    loss=:quantile, α=0.8,
    nrounds=200, nbins = 100,
    λ = 0.1, γ=0.0, η=0.05,
    max_depth = 6, min_weight = 1.0,
    rowsample=0.5, colsample=1.0)
model = fit_evotree(params1, X_train, Y_train, X_eval = X_eval, Y_eval = Y_eval, print_every_n = 25)
pred_train_q80 = predict(model, X_train)
"><pre><span class="pl-c"><span class="pl-c">#</span> q50</span>
params1 <span class="pl-k">=</span> <span class="pl-c1">EvoTreeRegressor</span>(
    loss<span class="pl-k">=</span><span class="pl-c1">:quantile</span>, α<span class="pl-k">=</span><span class="pl-c1">0.5</span>, metric <span class="pl-k">=</span> <span class="pl-c1">:quantile</span>,
    nrounds<span class="pl-k">=</span><span class="pl-c1">200</span>, nbins <span class="pl-k">=</span> <span class="pl-c1">100</span>,
    λ <span class="pl-k">=</span> <span class="pl-c1">0.1</span>, γ<span class="pl-k">=</span><span class="pl-c1">0.0</span>, η<span class="pl-k">=</span><span class="pl-c1">0.05</span>,
    max_depth <span class="pl-k">=</span> <span class="pl-c1">6</span>, min_weight <span class="pl-k">=</span> <span class="pl-c1">1.0</span>,
    rowsample<span class="pl-k">=</span><span class="pl-c1">0.5</span>, colsample<span class="pl-k">=</span><span class="pl-c1">1.0</span>)
model <span class="pl-k">=</span> <span class="pl-c1">fit_evotree</span>(params1, X_train, Y_train, X_eval <span class="pl-k">=</span> X_eval, Y_eval <span class="pl-k">=</span> Y_eval, print_every_n <span class="pl-k">=</span> <span class="pl-c1">25</span>)
pred_train_q50 <span class="pl-k">=</span> <span class="pl-c1">predict</span>(model, X_train)

<span class="pl-c"><span class="pl-c">#</span> q20</span>
params1 <span class="pl-k">=</span> <span class="pl-c1">EvoTreeRegressor</span>(
    loss<span class="pl-k">=</span><span class="pl-c1">:quantile</span>, α<span class="pl-k">=</span><span class="pl-c1">0.2</span>, metric <span class="pl-k">=</span> <span class="pl-c1">:quantile</span>,
    nrounds<span class="pl-k">=</span><span class="pl-c1">200</span>, nbins <span class="pl-k">=</span> <span class="pl-c1">100</span>,
    λ <span class="pl-k">=</span> <span class="pl-c1">0.1</span>, γ<span class="pl-k">=</span><span class="pl-c1">0.0</span>, η<span class="pl-k">=</span><span class="pl-c1">0.05</span>,
    max_depth <span class="pl-k">=</span> <span class="pl-c1">6</span>, min_weight <span class="pl-k">=</span> <span class="pl-c1">1.0</span>,
    rowsample<span class="pl-k">=</span><span class="pl-c1">0.5</span>, colsample<span class="pl-k">=</span><span class="pl-c1">1.0</span>)
model <span class="pl-k">=</span> <span class="pl-c1">fit_evotree</span>(params1, X_train, Y_train, X_eval <span class="pl-k">=</span> X_eval, Y_eval <span class="pl-k">=</span> Y_eval, print_every_n <span class="pl-k">=</span> <span class="pl-c1">25</span>)
pred_train_q20 <span class="pl-k">=</span> <span class="pl-c1">predict</span>(model, X_train)

<span class="pl-c"><span class="pl-c">#</span> q80</span>
params1 <span class="pl-k">=</span> <span class="pl-c1">EvoTreeRegressor</span>(
    loss<span class="pl-k">=</span><span class="pl-c1">:quantile</span>, α<span class="pl-k">=</span><span class="pl-c1">0.8</span>,
    nrounds<span class="pl-k">=</span><span class="pl-c1">200</span>, nbins <span class="pl-k">=</span> <span class="pl-c1">100</span>,
    λ <span class="pl-k">=</span> <span class="pl-c1">0.1</span>, γ<span class="pl-k">=</span><span class="pl-c1">0.0</span>, η<span class="pl-k">=</span><span class="pl-c1">0.05</span>,
    max_depth <span class="pl-k">=</span> <span class="pl-c1">6</span>, min_weight <span class="pl-k">=</span> <span class="pl-c1">1.0</span>,
    rowsample<span class="pl-k">=</span><span class="pl-c1">0.5</span>, colsample<span class="pl-k">=</span><span class="pl-c1">1.0</span>)
model <span class="pl-k">=</span> <span class="pl-c1">fit_evotree</span>(params1, X_train, Y_train, X_eval <span class="pl-k">=</span> X_eval, Y_eval <span class="pl-k">=</span> Y_eval, print_every_n <span class="pl-k">=</span> <span class="pl-c1">25</span>)
pred_train_q80 <span class="pl-k">=</span> <span class="pl-c1">predict</span>(model, X_train)</pre></div>
<h2><a id="user-content-gaussian-max-likelihood" class="anchor" aria-hidden="true" href="#gaussian-max-likelihood"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Gaussian Max Likelihood</h2>
<p><a target="_blank" rel="noopener noreferrer" href="figures/gaussian_sinus.png"><img src="figures/gaussian_sinus.png" alt="" style="max-width:100%;"></a></p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="params1 = EvoTreeGaussian(
    loss=:gaussian, metric=:gaussian,
    nrounds=100, nbins=100,
    λ = 0.0, γ=0.0, η=0.1,
    max_depth = 6, min_weight = 1.0,
    rowsample=0.5, colsample=1.0, seed=123)
"><pre>params1 <span class="pl-k">=</span> <span class="pl-c1">EvoTreeGaussian</span>(
    loss<span class="pl-k">=</span><span class="pl-c1">:gaussian</span>, metric<span class="pl-k">=</span><span class="pl-c1">:gaussian</span>,
    nrounds<span class="pl-k">=</span><span class="pl-c1">100</span>, nbins<span class="pl-k">=</span><span class="pl-c1">100</span>,
    λ <span class="pl-k">=</span> <span class="pl-c1">0.0</span>, γ<span class="pl-k">=</span><span class="pl-c1">0.0</span>, η<span class="pl-k">=</span><span class="pl-c1">0.1</span>,
    max_depth <span class="pl-k">=</span> <span class="pl-c1">6</span>, min_weight <span class="pl-k">=</span> <span class="pl-c1">1.0</span>,
    rowsample<span class="pl-k">=</span><span class="pl-c1">0.5</span>, colsample<span class="pl-k">=</span><span class="pl-c1">1.0</span>, seed<span class="pl-k">=</span><span class="pl-c1">123</span>)</pre></div>
<h2><a id="user-content-feature-importance" class="anchor" aria-hidden="true" href="#feature-importance"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Feature importance</h2>
<p>Returns the normalized gain by feature.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="features_gain = importance(model, var_names)
"><pre>features_gain <span class="pl-k">=</span> <span class="pl-c1">importance</span>(model, var_names)</pre></div>
<h2><a id="user-content-plot" class="anchor" aria-hidden="true" href="#plot"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Plot</h2>
<p>Plot a given tree of the model:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="plot(model, 2)
"><pre><span class="pl-c1">plot</span>(model, <span class="pl-c1">2</span>)</pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="figures/plot_tree.png"><img src="figures/plot_tree.png" alt="" style="max-width:100%;"></a></p>
<p>Note that 1st tree is used to set the bias so the first real tree is #2.</p>
<h2><a id="user-content-saveload" class="anchor" aria-hidden="true" href="#saveload"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Save/Load</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="EvoTrees.save(model, &quot;data/model.bson&quot;)
model = EvoTrees.load(&quot;data/model.bson&quot;);
"><pre>EvoTrees<span class="pl-k">.</span><span class="pl-c1">save</span>(model, <span class="pl-s"><span class="pl-pds">"</span>data/model.bson<span class="pl-pds">"</span></span>)
model <span class="pl-k">=</span> EvoTrees<span class="pl-k">.</span><span class="pl-c1">load</span>(<span class="pl-s"><span class="pl-pds">"</span>data/model.bson<span class="pl-pds">"</span></span>);</pre></div>
</article></div>