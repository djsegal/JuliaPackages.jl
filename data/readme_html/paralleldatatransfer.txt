<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-paralleldatatransferjl" class="anchor" aria-hidden="true" href="#paralleldatatransferjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>ParallelDataTransfer.jl</h1>
<p dir="auto"><a href="https://travis-ci.org/ChrisRackauckas/ParallelDataTransfer.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/eccfd0f8828cddc4bf52294639828076d994270dbab4c2e9981b3bf8529489e6/68747470733a2f2f7472617669732d63692e6f72672f43687269735261636b6175636b61732f506172616c6c656c446174615472616e736665722e6a6c2e7376673f6272616e63683d6d6173746572" alt="Travis" data-canonical-src="https://travis-ci.org/ChrisRackauckas/ParallelDataTransfer.jl.svg?branch=master" style="max-width: 100%;"></a>
<a href="https://ci.appveyor.com/project/ChrisRackauckas/paralleldatatransfer-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/bc62170e859d6bcd0511f906a70d8ca62f33d86f51468f8d427f9c4229eb6482/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f633874716a68787839363739676c36753f7376673d74727565" alt="AppVeyor" data-canonical-src="https://ci.appveyor.com/api/projects/status/c8tqjhxx9679gl6u?svg=true" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/ChrisRackauckas/ParallelDataTransfer.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/0307931a8a93bf3c5176198472b30f8a294f0e87fc3456acc417466b18b83a6f/68747470733a2f2f636f6465636f762e696f2f67682f43687269735261636b6175636b61732f506172616c6c656c446174615472616e736665722e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/ChrisRackauckas/ParallelDataTransfer.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a>
<a href="https://coveralls.io/github/ChrisRackauckas/ParallelDataTransfer.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/2c672ae96a04d7a56dfa0b960527a24c4a99674c04be9bb7af9eaef77077bb47/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f43687269735261636b6175636b61732f506172616c6c656c446174615472616e736665722e6a6c2f62616467652e737667" alt="coveralls" data-canonical-src="https://coveralls.io/repos/github/ChrisRackauckas/ParallelDataTransfer.jl/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">A bunch of helper functions for transferring data between worker processes. The functions are robust with safety measures built into the commands, and the package is thoroughly tested to ensure correctness (with an unsafe API coming soon). As such, this commands thus allow for rapid development and prototyping of parallel algorithms. The underlying infrustructure is Julia's native multiprocess parallelism, meaning that no dependencies are required for use other than Base Julia.</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">To install the package, simply use:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Pkg.add(&quot;ParallelDataTransfer&quot;)
addprocs(n) # Adds n processes
@everywhere using ParallelDataTransfer"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>ParallelDataTransfer<span class="pl-pds">"</span></span>)
<span class="pl-c1">addprocs</span>(n) <span class="pl-c"><span class="pl-c">#</span> Adds n processes</span>
<span class="pl-c1">@everywhere</span> <span class="pl-k">using</span> ParallelDataTransfer</pre></div>
<p dir="auto">For the most up to date version, checkout master by using:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Pkg.checkout(&quot;ParallelDataTransfer&quot;)"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">checkout</span>(<span class="pl-s"><span class="pl-pds">"</span>ParallelDataTransfer<span class="pl-pds">"</span></span>)</pre></div>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<p dir="auto">For examples of usage, please see the tests.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# Creates an integer x and Matrix y on processes 1 and 2
sendto([1, 2], x=100, y=rand(2, 3))

# Create a variable here, then send it everywhere else
z = randn(10, 10); sendto(workers(), z=z)

# Create the variable x with a value 3 directly on process 4
@defineat 4 x=3

# Broadcast a value 3 to x on all workers (not working on Julia 0.7)
@broadcast x=3

# Note that @broadcast will broadcast the expression, so
@broadcast name=val
# Requires val to be defined on the remote process
# To pass an object to all worker processes, use
@passobj 1 workers() name

# Get an object from named x from Main module on process 2. Name it y
y = @getfrom 2 x
# Or
y = getfrom(2,:x)

# Get an object from named x from Foo module on process 2. Name it y
y = @getfrom 2 x Foo
# Or
y = getfrom(2,:x,Foo)

# Get an object from named foo.x from Foo module on process 2. Name it y
y = @getfrom 2 foo.x Foo
# Using the function will not work!

# pass variable named x from process 2 to all other processes
@passobj 2  filter(x-&gt;x!=2, procs())  x
# Or
passobj(2, filter(x-&gt;x!=2, procs()), :x)

# pass variables t, u, v from process 3 to process 1
passobj(3, 1, [:t, :u, :v])

# Pass a variable from the `Foo` module on process 1 to Main on workers
@passobj 1 workers() Foo.foo
#Or
passobj(1, workers(), [:foo]; from_mod=Foo)

# Include a file on a path not available on a remote worker
include_remote(path, 2)"><pre><span class="pl-c"><span class="pl-c">#</span> Creates an integer x and Matrix y on processes 1 and 2</span>
<span class="pl-c1">sendto</span>([<span class="pl-c1">1</span>, <span class="pl-c1">2</span>], x<span class="pl-k">=</span><span class="pl-c1">100</span>, y<span class="pl-k">=</span><span class="pl-c1">rand</span>(<span class="pl-c1">2</span>, <span class="pl-c1">3</span>))

<span class="pl-c"><span class="pl-c">#</span> Create a variable here, then send it everywhere else</span>
z <span class="pl-k">=</span> <span class="pl-c1">randn</span>(<span class="pl-c1">10</span>, <span class="pl-c1">10</span>); <span class="pl-c1">sendto</span>(<span class="pl-c1">workers</span>(), z<span class="pl-k">=</span>z)

<span class="pl-c"><span class="pl-c">#</span> Create the variable x with a value 3 directly on process 4</span>
<span class="pl-c1">@defineat</span> <span class="pl-c1">4</span> x<span class="pl-k">=</span><span class="pl-c1">3</span>

<span class="pl-c"><span class="pl-c">#</span> Broadcast a value 3 to x on all workers (not working on Julia 0.7)</span>
<span class="pl-c1">@broadcast</span> x<span class="pl-k">=</span><span class="pl-c1">3</span>

<span class="pl-c"><span class="pl-c">#</span> Note that @broadcast will broadcast the expression, so</span>
<span class="pl-c1">@broadcast</span> name<span class="pl-k">=</span>val
<span class="pl-c"><span class="pl-c">#</span> Requires val to be defined on the remote process</span>
<span class="pl-c"><span class="pl-c">#</span> To pass an object to all worker processes, use</span>
<span class="pl-c1">@passobj</span> <span class="pl-c1">1</span> <span class="pl-c1">workers</span>() name

<span class="pl-c"><span class="pl-c">#</span> Get an object from named x from Main module on process 2. Name it y</span>
y <span class="pl-k">=</span> <span class="pl-c1">@getfrom</span> <span class="pl-c1">2</span> x
<span class="pl-c"><span class="pl-c">#</span> Or</span>
y <span class="pl-k">=</span> <span class="pl-c1">getfrom</span>(<span class="pl-c1">2</span>,<span class="pl-c1">:x</span>)

<span class="pl-c"><span class="pl-c">#</span> Get an object from named x from Foo module on process 2. Name it y</span>
y <span class="pl-k">=</span> <span class="pl-c1">@getfrom</span> <span class="pl-c1">2</span> x Foo
<span class="pl-c"><span class="pl-c">#</span> Or</span>
y <span class="pl-k">=</span> <span class="pl-c1">getfrom</span>(<span class="pl-c1">2</span>,<span class="pl-c1">:x</span>,Foo)

<span class="pl-c"><span class="pl-c">#</span> Get an object from named foo.x from Foo module on process 2. Name it y</span>
y <span class="pl-k">=</span> <span class="pl-c1">@getfrom</span> <span class="pl-c1">2</span> foo<span class="pl-k">.</span>x Foo
<span class="pl-c"><span class="pl-c">#</span> Using the function will not work!</span>

<span class="pl-c"><span class="pl-c">#</span> pass variable named x from process 2 to all other processes</span>
<span class="pl-c1">@passobj</span> <span class="pl-c1">2</span>  <span class="pl-c1">filter</span>(x<span class="pl-k">-&gt;</span>x<span class="pl-k">!=</span><span class="pl-c1">2</span>, <span class="pl-c1">procs</span>())  x
<span class="pl-c"><span class="pl-c">#</span> Or</span>
<span class="pl-c1">passobj</span>(<span class="pl-c1">2</span>, <span class="pl-c1">filter</span>(x<span class="pl-k">-&gt;</span>x<span class="pl-k">!=</span><span class="pl-c1">2</span>, <span class="pl-c1">procs</span>()), <span class="pl-c1">:x</span>)

<span class="pl-c"><span class="pl-c">#</span> pass variables t, u, v from process 3 to process 1</span>
<span class="pl-c1">passobj</span>(<span class="pl-c1">3</span>, <span class="pl-c1">1</span>, [<span class="pl-c1">:t</span>, <span class="pl-c1">:u</span>, <span class="pl-c1">:v</span>])

<span class="pl-c"><span class="pl-c">#</span> Pass a variable from the `Foo` module on process 1 to Main on workers</span>
<span class="pl-c1">@passobj</span> <span class="pl-c1">1</span> <span class="pl-c1">workers</span>() Foo<span class="pl-k">.</span>foo
<span class="pl-c"><span class="pl-c">#</span>Or</span>
<span class="pl-c1">passobj</span>(<span class="pl-c1">1</span>, <span class="pl-c1">workers</span>(), [<span class="pl-c1">:foo</span>]; from_mod<span class="pl-k">=</span>Foo)

<span class="pl-c"><span class="pl-c">#</span> Include a file on a path not available on a remote worker</span>
<span class="pl-c1">include_remote</span>(path, <span class="pl-c1">2</span>)</pre></div>
<h2 dir="auto"><a id="user-content-performance-note" class="anchor" aria-hidden="true" href="#performance-note"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Performance Note</h2>
<p dir="auto">Note that this form of passing variables will define the variables in the global
namespace of the process. Thus, for performance reasons, it's recommended that
these variables are acted on inside of a function (just like in the REPL). An
example for doing this is:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# Send things to process 2
@defineat 2 a=5
@defineat 2 function usea(a)
  # Do your stuff here
  ans=a
end
# Use the function a on process 2
@defineat 2 ans=usea(a) # this safely uses the usea and a from process 2
# Get the answer from process 2
@getfrom 2 ans"><pre><span class="pl-c"><span class="pl-c">#</span> Send things to process 2</span>
<span class="pl-c1">@defineat</span> <span class="pl-c1">2</span> a<span class="pl-k">=</span><span class="pl-c1">5</span>
<span class="pl-c1">@defineat</span> <span class="pl-c1">2</span> <span class="pl-k">function</span> <span class="pl-en">usea</span>(a)
  <span class="pl-c"><span class="pl-c">#</span> Do your stuff here</span>
  ans<span class="pl-k">=</span>a
<span class="pl-k">end</span>
<span class="pl-c"><span class="pl-c">#</span> Use the function a on process 2</span>
<span class="pl-c1">@defineat</span> <span class="pl-c1">2</span> ans<span class="pl-k">=</span><span class="pl-c1">usea</span>(a) <span class="pl-c"><span class="pl-c">#</span> this safely uses the usea and a from process 2</span>
<span class="pl-c"><span class="pl-c">#</span> Get the answer from process 2</span>
<span class="pl-c1">@getfrom</span> <span class="pl-c1">2</span> ans</pre></div>
<p dir="auto">In the "master" process this will define <code>ans</code> as a global. Once again, you should
not work directly with the global since that will degrade the performance. So,
since you are working in a function, you should assert the type of the variable
so that way it's strictly typed. For example:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="function test()
  @defineat 2 a=5
  a = (@getfrom 2 a)::Int64 # This will make a stictly typed if test is type-stable

  # Continue in your code using b
  a
end"><pre><span class="pl-k">function</span> <span class="pl-en">test</span>()
  <span class="pl-c1">@defineat</span> <span class="pl-c1">2</span> a<span class="pl-k">=</span><span class="pl-c1">5</span>
  a <span class="pl-k">=</span> (<span class="pl-c1">@getfrom</span> <span class="pl-c1">2</span> a)<span class="pl-k">::</span><span class="pl-c1">Int64</span> <span class="pl-c"><span class="pl-c">#</span> This will make a stictly typed if test is type-stable</span>

  <span class="pl-c"><span class="pl-c">#</span> Continue in your code using b</span>
  a
<span class="pl-k">end</span></pre></div>
<p dir="auto">Declaring the type of <code>a</code> will work as well. If you put these two design principles
together (use the passed variables in a function, and type the returns), then your
code will be parallel and type-stable.</p>
<p dir="auto">I am interested in suggestions for making this usage more "automatic". If you have
design ideas / implementations to recommend, feel free to open issues and submit PRs.</p>
<h2 dir="auto"><a id="user-content-credit" class="anchor" aria-hidden="true" href="#credit"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Credit</h2>
<p dir="auto">This library is developed and maintained by Chris Rackauckas. However, kudos go to @spencerlyon2 and @conjectures for developing some <a href="http://stackoverflow.com/questions/27677399/julia-how-to-copy-data-to-another-processor-in-julia" rel="nofollow">of the original solutions</a> which were modified and expanded upon for this library. Special thanks to @TotalVerb and @oxinabox for help via Gitter.</p>
</article></div>