<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-stablerngs" class="anchor" aria-hidden="true" href="#stablerngs"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>StableRNGs</h1>
<p dir="auto"><a href="https://travis-ci.org/JuliaRandom/StableRNGs.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/78ee8b77751189afde78924d39f4a12f70568ed79959bfb8021c476f3340b6cd/68747470733a2f2f7472617669732d63692e6f72672f4a756c696152616e646f6d2f537461626c65524e47732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaRandom/StableRNGs.jl.svg?branch=master" style="max-width: 100%;"></a></p>
<p dir="auto">This package intends to provide a simple RNG with <em>stable</em> streams, suitable
for tests in packages which need reproducible streams of random numbers
across Julia versions. Indeed, the Julia RNGs provided by default are
<a href="https://docs.julialang.org/en/v1.4/stdlib/Random/#Reproducibility-1" rel="nofollow">documented</a>
to have non-stable streams (which for example enables some performance
improvements).</p>
<p dir="auto">The <code>StableRNG</code> type provided by this package strives
for stability, but if bugs which require breaking this promise are found,
a new major version will be released with the fix.</p>
<p dir="auto"><code>StableRNG</code> is currently an alias for <code>LehmerRNG</code>, and implements a well understood
linear congruential generator (LCG); an LCG is not state of the art,
but is fast and is believed to have reasonably good statistical properties [1],
suitable at least for tests of a wide range of packages.
The choice of this particular RNG is based on its simplicity, which limits
the chances for bugs.
Note that only <code>StableRNG</code> is exported from the package, and should be the only
type used in client code; <code>LehmerRNG</code> might be renamed, or might be made a distinct
type from <code>StableRNG</code> in any upcoming <em>minor</em> (i.e. non-breaking) release.</p>
<p dir="auto">Currently, this RNG requires explicit seeding (in the constructor
or via <code>Random.seed!</code>), i.e. no random seed will be chosen for the user
as is the case in e.g. <code>MersenneTwister()</code>.</p>
<p dir="auto">The stable (guaranteed) API is</p>
<ul dir="auto">
<li>construction: <code>rng = StableRNG(seed::Integer)</code> (in particular the alias
<code>LehmerRNG</code> is currently <em>not</em> part of the API)</li>
<li>seeding: <code>Random.seed!(rng::StableRNG, seed::Integer)</code>
(with <code>0 &lt;= seed &lt;= typemax(UInt64)</code>)</li>
<li><code>rand(rng, X)</code> where <code>X</code> is any of the standard bit <code>Integer</code> types
(<code>Bool</code>, <code>Int8</code>, <code>Int16</code>, <code>Int32</code>, <code>Int64</code>, <code>Int128</code>,
<code>UInt8</code>, <code>UInt16</code>, <code>UInt32</code>, <code>UInt64</code>, <code>UInt128</code>)</li>
<li><code>rand(rng, X)</code>, <code>randn(rng, X)</code>, <code>randexp(rng, X)</code> where <code>X</code> is a standard
bit <code>AbstractFloat</code> types (<code>Float16</code>, <code>Float32</code>, <code>Float64</code>)</li>
<li>array versions for these types, including
the mutating methods <code>rand!</code>, <code>randn!</code> and <code>randexp!</code></li>
<li><code>rand(rng, ::AbstractArray)</code> (e.g. <code>rand(rng, 1:9)</code>); the streams are the same
on 32-bits and 64-bits architectures</li>
<li><code>shuffle(rng, ::AbstractArray)</code> and <code>shuffle!(rng, ::AbstractArray)</code></li>
</ul>
<p dir="auto">Note that the generated streams of numbers for scalars and arrays are the same,
i.e. <code>rand(rng, X, n)</code> is equal to <code>[rand(rng, X) for _=1:n]</code> for a given <code>rng</code>
state.</p>
<p dir="auto">Please open an issue for missing needed APIs.</p>
<p dir="auto">[1] <code>LehmerRNG</code> is implemented after the specific constants published by
Melissa E. O'Neill in this
<a href="https://gist.github.com/imneme/aeae7628565f15fb3fef54be8533e39c">C++ implementation</a>,
and passes the Big Crush test (thanks to Kristoffer Carlsson for running it).
See also for example this
<a href="https://lemire.me/blog/2019/03/19/the-fastest-conventional-random-number-generator-that-can-pass-big-crush/" rel="nofollow">blog post</a>.</p>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<p dir="auto">In your tests, simply initialize an RNG with a given seed, and use
it instead of the default provided one, e.g.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="rng = StableRNG(123)
A = randn(rng, 10, 10) # instead of randn(10, 10)
@test inv(inv(A)) ≈ A"><pre>rng <span class="pl-k">=</span> <span class="pl-c1">StableRNG</span>(<span class="pl-c1">123</span>)
A <span class="pl-k">=</span> <span class="pl-c1">randn</span>(rng, <span class="pl-c1">10</span>, <span class="pl-c1">10</span>) <span class="pl-c"><span class="pl-c">#</span> instead of randn(10, 10)</span>
<span class="pl-c1">@test</span> <span class="pl-c1">inv</span>(<span class="pl-c1">inv</span>(A)) <span class="pl-k">≈</span> A</pre></div>
</article></div>