<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-loggingextras" class="anchor" aria-hidden="true" href="#loggingextras"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>LoggingExtras</h1>
<p dir="auto"><a href="https://travis-ci.org/oxinabox/LoggingExtras.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/de470f38c45bc94ebb9e4c8b12bc3f9c121351b51f2ea9eeda38b9b1484842ca/68747470733a2f2f7472617669732d63692e6f72672f6f78696e61626f782f4c6f6767696e674578747261732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/oxinabox/LoggingExtras.jl.svg?branch=master" style="max-width: 100%;"></a></p>
<p dir="auto"><a href="http://codecov.io/github/oxinabox/LoggingExtras.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/e5a7da1a719a893dc852d4af801aa820284767bd26e390362fb6c9ae772ef351/687474703a2f2f636f6465636f762e696f2f6769746875622f6f78696e61626f782f4c6f6767696e674578747261732e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/oxinabox/LoggingExtras.jl/coverage.svg?branch=master" style="max-width: 100%;"></a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="diag.svg"><img src="diag.svg" alt="Diagram showing how loggers connect" style="max-width: 100%;"></a></p>
<h1 dir="auto"><a id="user-content-discussion-compositional-loggers" class="anchor" aria-hidden="true" href="#discussion-compositional-loggers"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Discussion: Compositional Loggers</h1>
<p dir="auto">LoggingExtras is designs around allowing you to build arbitrarily complicated
systems for "log plumbing". That is to say basically routing logged information to different places.
It is built around the idea of simple parts which are composed together,
to allow for powerful and flexible definition of your logging system.
Without you having to define any custom loggers by subtyping <code>AbstractLogger</code>.
When we talk about composability we mean to say that the composition of any set of Loggers is itself a Logger.
LoggingExtras is a composable logging system.</p>
<p dir="auto">Loggers can be broken down into 4 types:</p>
<ul dir="auto">
<li><em>Sinks</em>: Sinks are the final end point of a log messages journey. They write it to file, or display it on the console, or set off a red flashing light in the laboratory. A Sink should never decide what to accept, only what to do with it.</li>
<li><em>Filters</em>: Filters wrap around other loggers and decide whether or not to pass on a message. They can further be broken down by when that decision occurs (See <code>ActiveFilteredLogger</code> vs <code>EarlyFilteredLogger</code>).</li>
<li><em>Transformers</em>: Transformers modify the content of log messages, before passing them on. This includes the metadata like severity level. Unlike Filters they can't block a log message, but they could drop its level down to say <code>Debug</code> so that normally noone would see it.</li>
<li><em>Demux</em>: There is only one possible Demux Logger. and it is central to log routing. It acts as a hub that receives 1 log message, and then sends copies of it to all its child loggers. Like in the diagram above, it can be composed with Filters to control what goes where.</li>
</ul>
<p dir="auto">This is a basically full taxonomy of all compositional loggers.
This package implements the full set. So you shouldn't need to build your own routing components, just configure the ones included in this package.</p>
<p dir="auto">It is worth understanding the idea of logging purity.
The loggers defined in this package are all pure.
The Filters, only filter, the Sinks only sink, the transformers only Transform.</p>
<p dir="auto">We can contrast this to the the <code>ConsoleLogger</code> (the standard logger in the REPL).
The <code>ConsoleLogger</code> is an impure sink.
As well as displaying logs to the user (as a Sink);
it uses the log content, in the form of the <code>max_log</code> kwarg to decide if a log should be displayed (Active Filtering);
and it has a min_enabled_level setting, that controls if it will accept a message at all
(Early Filtering, in particular see <code>MinLevelLogger</code>).
If it was to be defined in a compositional way,
we would write something along the lines of:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="ConsoleLogger(stream, min_level) =
    MinLevelLogger(
        ActiveFilteredLogger(max_log_filter,
            PureSinkConsoleLogger(stream)
        ),
        min_level
    )"><pre><span class="pl-en">ConsoleLogger</span>(stream, min_level) <span class="pl-k">=</span>
    <span class="pl-c1">MinLevelLogger</span>(
        <span class="pl-c1">ActiveFilteredLogger</span>(max_log_filter,
            <span class="pl-c1">PureSinkConsoleLogger</span>(stream)
        ),
        min_level
    )</pre></div>
<h1 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h1>
<p dir="auto">Load the package with <code>using LoggingExtras</code>.
For convenience, this also re-exports the <code>Logging</code> standard library.</p>
<h3 dir="auto"><a id="user-content-basics-of-working-with-loggers" class="anchor" aria-hidden="true" href="#basics-of-working-with-loggers"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Basics of working with loggers</h3>
<p dir="auto">For full details, see the <a href="https://docs.julialang.org/en/v1/stdlib/Logging/index.html" rel="nofollow">Julia documentation on Logging</a></p>
<p dir="auto">To use a <code>logger</code> in a given scope do</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="with_logger(logger) do
    #things
end"><pre><span class="pl-c1">with_logger</span>(logger) <span class="pl-k">do</span>
    <span class="pl-c"><span class="pl-c">#</span>things</span>
<span class="pl-k">end</span></pre></div>
<p dir="auto">To make a logger the global logger, use</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="global_logger(logger)"><pre><span class="pl-c1">global_logger</span>(logger)</pre></div>
<p dir="auto">To get the current logger (which can vary per task) use</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="logger = current_logger()"><pre>logger <span class="pl-k">=</span> <span class="pl-c1">current_logger</span>()</pre></div>
<p dir="auto">To get the current global logger (which does not vary per task), use</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="logger = global_logger()"><pre>logger <span class="pl-k">=</span> <span class="pl-c1">global_logger</span>()</pre></div>
<h1 dir="auto"><a id="user-content-loggers-introduced-by-this-package" class="anchor" aria-hidden="true" href="#loggers-introduced-by-this-package"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Loggers introduced by this package:</h1>
<p dir="auto">This package introduces 8 new loggers.
The <code>TeeLogger</code>, the <code>TransformerLogger</code>, 3 types of filtered logger, the <code>FileLogger</code>,
the <code>DatetimeRotatingFileLogger</code> and the <code>FormatLogger</code>.
All of them, except <code>FormatLogger</code>, just wrap existing loggers.</p>
<ul dir="auto">
<li>The <code>TeeLogger</code> sends the logs to multiple different loggers.</li>
<li>The 3 filter loggers are used to control if a message is written or not
<ul dir="auto">
<li>The <code>MinLevelLogger</code> only allows messages to pass that are above a given level of severity</li>
<li>The <code>EarlyFilteredLogger</code> lets you write filter rules based on the <code>level</code>, <code>module</code>, <code>group</code> and <code>id</code> of the log message</li>
<li>The <code>ActiveFilteredLogger</code> lets you filter based on the full content</li>
</ul>
</li>
<li>The <code>TransformerLogger</code> applies a function to modify log messages before passing them on.</li>
<li>The <code>FileLogger</code> is a simple logger sink that writes to file.</li>
<li>The <code>DatetimeRotatingFileLogger</code> is a logger sink that writes to file, rotating logs based upon a user-provided <code>DateFormat</code>.</li>
<li>The <code>FormatLogger</code> is a logger sink that simply formats the message and writes to the logger stream.</li>
<li>The <code>LevelOverrideLogger</code> for overriding the log level of other loggers</li>
</ul>
<p dir="auto">By combining <code>TeeLogger</code> with filter loggers you can arbitrarily route log messages, wherever you want.</p>
<h2 dir="auto"><a id="user-content-teelogger-demux" class="anchor" aria-hidden="true" href="#teelogger-demux"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>TeeLogger</code> (<em>Demux</em>)</h2>
<p dir="auto">The <code>TeeLogger</code> sends the log messages to multiple places.
It takes a list of loggers.
You often want to pass the <code>current_logger()</code> or <code>global_logger()</code>
as one of those inputs so it keeps going to that one as well.</p>
<p dir="auto">It is up to those loggers to determine if they will accept it.
Which they do using their methods for <code>shouldlog</code> and <code>min_enabled_level</code>.
Or you can do, by wrapping them in a filtered logger  as discussed below.</p>
<h2 dir="auto"><a id="user-content-activefilteredlogger-filter" class="anchor" aria-hidden="true" href="#activefilteredlogger-filter"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>ActiveFilteredLogger</code> (<em>Filter</em>)</h2>
<p dir="auto">The <code>ActiveFilteredLogger</code> exists to give more control over which messages should be logged.
It warps any logger, and before sending messages to the logger to log,
checks them against a filter function.
The filter function takes the full set of parameters of the message.
(See it's docstring with <code>?ActiveFilteredLogger</code> for more details.)</p>
<h3 dir="auto"><a id="user-content-demo" class="anchor" aria-hidden="true" href="#demo"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Demo</h3>
<p dir="auto">We want to filter to only log strings staring with <code>"Yo Dawg!"</code>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; function yodawg_filter(log_args)
    startswith(log_args.message, &quot;Yo Dawg!&quot;)
end
 yodawg_filter (generic function with 1 method)

julia&gt; filtered_logger = ActiveFilteredLogger(yodawg_filter, global_logger());

julia&gt; with_logger(filtered_logger) do
    @info &quot;Boring message&quot;
    @warn &quot;Yo Dawg! it is bad&quot;
    @info &quot;Another boring message&quot;
    @info &quot;Yo Dawg! it is all good&quot;
end
┌ Warning: Yo Dawg! it is bad
└ @ Main REPL[28]:3
[ Info: Yo Dawg! it is all good"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">function</span> <span class="pl-en">yodawg_filter</span>(log_args)
    <span class="pl-c1">startswith</span>(log_args<span class="pl-k">.</span>message, <span class="pl-s"><span class="pl-pds">"</span>Yo Dawg!<span class="pl-pds">"</span></span>)
<span class="pl-k">end</span>
 yodawg_filter (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> filtered_logger <span class="pl-k">=</span> <span class="pl-c1">ActiveFilteredLogger</span>(yodawg_filter, <span class="pl-c1">global_logger</span>());

julia<span class="pl-k">&gt;</span> <span class="pl-c1">with_logger</span>(filtered_logger) <span class="pl-k">do</span>
    <span class="pl-c1">@info</span> <span class="pl-s"><span class="pl-pds">"</span>Boring message<span class="pl-pds">"</span></span>
    <span class="pl-c1">@warn</span> <span class="pl-s"><span class="pl-pds">"</span>Yo Dawg! it is bad<span class="pl-pds">"</span></span>
    <span class="pl-c1">@info</span> <span class="pl-s"><span class="pl-pds">"</span>Another boring message<span class="pl-pds">"</span></span>
    <span class="pl-c1">@info</span> <span class="pl-s"><span class="pl-pds">"</span>Yo Dawg! it is all good<span class="pl-pds">"</span></span>
<span class="pl-k">end</span>
┌ Warning<span class="pl-k">:</span> Yo Dawg! it is bad
└ @ Main REPL[<span class="pl-c1">28</span>]<span class="pl-k">:</span><span class="pl-c1">3</span>
[ Info<span class="pl-k">:</span> Yo Dawg! it is all good</pre></div>
<h3 dir="auto"><a id="user-content-respecting-maxlog-convention" class="anchor" aria-hidden="true" href="#respecting-maxlog-convention"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Respecting <code>maxlog</code> convention</h3>
<p dir="auto">An <code>ActiveFilterLogger</code> can be used to wrap another logger to obey <code>maxlog</code> directives, for example,
similar to the <code>make_throttled_logger</code> example below,</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="function make_maxlog_logger(logger)
    counts = Dict{Any,Int}()
    return ActiveFilteredLogger(logger) do log
        maxlog = get(log.kwargs, :maxlog, nothing)
        maxlog === nothing &amp;&amp; return true # no limit
        c = get(counts, log.id, 0)
        if c &lt; maxlog
            # log this message and update the count
            counts[log.id] = c + 1
            return true
        else
            return false
        end
    end
end"><pre><span class="pl-k">function</span> <span class="pl-en">make_maxlog_logger</span>(logger)
    counts <span class="pl-k">=</span> <span class="pl-c1">Dict</span><span class="pl-c1">{Any,Int}</span>()
    <span class="pl-k">return</span> <span class="pl-c1">ActiveFilteredLogger</span>(logger) <span class="pl-k">do</span> log
        maxlog <span class="pl-k">=</span> <span class="pl-c1">get</span>(log<span class="pl-k">.</span>kwargs, <span class="pl-c1">:maxlog</span>, <span class="pl-c1">nothing</span>)
        maxlog <span class="pl-k">===</span> <span class="pl-c1">nothing</span> <span class="pl-k">&amp;&amp;</span> <span class="pl-k">return</span> <span class="pl-c1">true</span> <span class="pl-c"><span class="pl-c">#</span> no limit</span>
        c <span class="pl-k">=</span> <span class="pl-c1">get</span>(counts, log<span class="pl-k">.</span>id, <span class="pl-c1">0</span>)
        <span class="pl-k">if</span> c <span class="pl-k">&lt;</span> maxlog
            <span class="pl-c"><span class="pl-c">#</span> log this message and update the count</span>
            counts[log<span class="pl-k">.</span>id] <span class="pl-k">=</span> c <span class="pl-k">+</span> <span class="pl-c1">1</span>
            <span class="pl-k">return</span> <span class="pl-c1">true</span>
        <span class="pl-k">else</span>
            <span class="pl-k">return</span> <span class="pl-c1">false</span>
        <span class="pl-k">end</span>
    <span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>
<p dir="auto">wraps another logger to filter logs that have already fired <code>maxlog</code> many times.
See <a href="https://docs.julialang.org/en/v1/stdlib/Logging/#Logging.@logmsg" rel="nofollow">https://docs.julialang.org/en/v1/stdlib/Logging/#Logging.@logmsg</a> for more on <code>maxlog</code>.</p>
<h2 dir="auto"><a id="user-content-earlyfilteredlogger-filter" class="anchor" aria-hidden="true" href="#earlyfilteredlogger-filter"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>EarlyFilteredLogger</code> (<em>Filter</em>)</h2>
<p dir="auto">The <code>EarlyFilteredLogger</code> is similar to the <code>ActiveFilteredLogger</code>,
but it runs earlier in the logging pipeline.
In particular it runs before the message is computed.
It can be useful to filter things early if creating the log message is expensive.
E.g. if it includes summary statistics of the error.
The filter function for early filter logging only has access to the
<code>level</code>, <code>_module</code>, <code>id</code> and <code>group</code> fields of the log message.
The most notable use of it is to filter based on modules,
see the HTTP example below.</p>
<p dir="auto">Another example is using them to stop messages every being repeated within a given time period.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Dates, LoggingExtras

julia&gt; function make_throttled_logger(period)
    history = Dict{Symbol, DateTime}()
    # We are going to use a closure
    EarlyFilteredLogger(global_logger()) do log
        if !haskey(history, log.id) || (period &lt; now() - history[log.id])
            # then we will log it, and update record of when we did
            history[log.id] = now()
            return true
        else
            return false
        end
    end
end
make_throttled_logger (generic function with 1 method)

julia&gt; throttled_logger = make_throttled_logger(Second(3));

julia&gt; with_logger(throttled_logger) do
    for ii in 1:10
        sleep(1)
        @info &quot;It happened&quot; ii
    end
end
┌ Info: It happened
└   ii = 1
┌ Info: It happened
└   ii = 4
┌ Info: It happened
└   ii = 7
┌ Info: It happened
└   ii = 10"><pre><span class="pl-k">using</span> Dates, LoggingExtras

julia<span class="pl-k">&gt;</span> <span class="pl-k">function</span> <span class="pl-en">make_throttled_logger</span>(period)
    history <span class="pl-k">=</span> <span class="pl-c1">Dict</span><span class="pl-c1">{Symbol, DateTime}</span>()
    <span class="pl-c"><span class="pl-c">#</span> We are going to use a closure</span>
    <span class="pl-c1">EarlyFilteredLogger</span>(<span class="pl-c1">global_logger</span>()) <span class="pl-k">do</span> log
        <span class="pl-k">if</span> <span class="pl-k">!</span><span class="pl-c1">haskey</span>(history, log<span class="pl-k">.</span>id) <span class="pl-k">||</span> (period <span class="pl-k">&lt;</span> <span class="pl-c1">now</span>() <span class="pl-k">-</span> history[log<span class="pl-k">.</span>id])
            <span class="pl-c"><span class="pl-c">#</span> then we will log it, and update record of when we did</span>
            history[log<span class="pl-k">.</span>id] <span class="pl-k">=</span> <span class="pl-c1">now</span>()
            <span class="pl-k">return</span> <span class="pl-c1">true</span>
        <span class="pl-k">else</span>
            <span class="pl-k">return</span> <span class="pl-c1">false</span>
        <span class="pl-k">end</span>
    <span class="pl-k">end</span>
<span class="pl-k">end</span>
make_throttled_logger (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> throttled_logger <span class="pl-k">=</span> <span class="pl-c1">make_throttled_logger</span>(<span class="pl-c1">Second</span>(<span class="pl-c1">3</span>));

julia<span class="pl-k">&gt;</span> <span class="pl-c1">with_logger</span>(throttled_logger) <span class="pl-k">do</span>
    <span class="pl-k">for</span> ii <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>
        <span class="pl-c1">sleep</span>(<span class="pl-c1">1</span>)
        <span class="pl-c1">@info</span> <span class="pl-s"><span class="pl-pds">"</span>It happened<span class="pl-pds">"</span></span> ii
    <span class="pl-k">end</span>
<span class="pl-k">end</span>
┌ Info<span class="pl-k">:</span> It happened
└   ii <span class="pl-k">=</span> <span class="pl-c1">1</span>
┌ Info<span class="pl-k">:</span> It happened
└   ii <span class="pl-k">=</span> <span class="pl-c1">4</span>
┌ Info<span class="pl-k">:</span> It happened
└   ii <span class="pl-k">=</span> <span class="pl-c1">7</span>
┌ Info<span class="pl-k">:</span> It happened
└   ii <span class="pl-k">=</span> <span class="pl-c1">10</span></pre></div>
<h2 dir="auto"><a id="user-content-minlevellogger-filter" class="anchor" aria-hidden="true" href="#minlevellogger-filter"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>MinLevelLogger</code> (<em>Filter</em>)</h2>
<p dir="auto">This is basically a special case of the early filtered logger,
that just checks if the level of the message is above the level specified when it was created.</p>
<h3 dir="auto"><a id="user-content-demo-filter-out-all-the-log-messages-that-are-less-severe-than-error" class="anchor" aria-hidden="true" href="#demo-filter-out-all-the-log-messages-that-are-less-severe-than-error"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Demo: filter out all the log messages that are less severe than <code>Error</code></h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using LoggingExtras

julia&gt; error_only_logger = MinLevelLogger(current_logger(), Logging.Error);

julia&gt; with_logger(error_only_logger) do
           @info(&quot;You won't see this&quot;)
           @warn(&quot;won't see this either&quot;)
           @error(&quot;You will only see this&quot;)
       end
┌ Error: You will only see this
└ @ Main REPL[18]:4"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> LoggingExtras

julia<span class="pl-k">&gt;</span> error_only_logger <span class="pl-k">=</span> <span class="pl-c1">MinLevelLogger</span>(<span class="pl-c1">current_logger</span>(), Logging<span class="pl-k">.</span>Error);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">with_logger</span>(error_only_logger) <span class="pl-k">do</span>
           <span class="pl-c1">@info</span>(<span class="pl-s"><span class="pl-pds">"</span>You won't see this<span class="pl-pds">"</span></span>)
           <span class="pl-c1">@warn</span>(<span class="pl-s"><span class="pl-pds">"</span>won't see this either<span class="pl-pds">"</span></span>)
           <span class="pl-c1">@error</span>(<span class="pl-s"><span class="pl-pds">"</span>You will only see this<span class="pl-pds">"</span></span>)
       <span class="pl-k">end</span>
┌ Error<span class="pl-k">:</span> You will only see this
└ @ Main REPL[<span class="pl-c1">18</span>]<span class="pl-k">:</span><span class="pl-c1">4</span></pre></div>
<h2 dir="auto"><a id="user-content-transformerlogger-transformer" class="anchor" aria-hidden="true" href="#transformerlogger-transformer"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>TransformerLogger</code> (<em>Transformer</em>)</h2>
<p dir="auto">The transformer logger allows for the modification of log messages.
This modification includes such things as its log level, and content,
and all the other arguments passed to <code>handle_message</code>.</p>
<p dir="auto">When constructing a <code>TransformerLogger</code> you pass in a transformation function,
and a logger to be wrapped.
The  transformation function takes a named tuple containing all the log message fields,
and should return a new modified named tuple.</p>
<p dir="auto">A simple example of its use is truncating messages.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using LoggingExtras

julia&gt; truncating_logger  = TransformerLogger(global_logger()) do log
    if length(log.message) &gt; 128
        short_message = log.message[1:min(end, 125)] * &quot;...&quot;
        return merge(log, (;message=short_message))
    else
        return log
    end
end;

julia&gt; with_logger(truncating_logger) do
    @info &quot;the truncating logger only truncates long messages&quot;
    @info &quot;Like this one that is this is a long and rambling message, it just keeps going and going and going,  and it seems like it will never end.&quot;
    @info &quot;Not like this one, that is is short&quot;
end
[ Info: the truncating logger only truncates long messages
[ Info: Like this one that is this is a long and rambling message, it just keeps going and going and going,  and it seems like it wil...
[ Info: Not like this one, that is is short"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> LoggingExtras

julia<span class="pl-k">&gt;</span> truncating_logger  <span class="pl-k">=</span> <span class="pl-c1">TransformerLogger</span>(<span class="pl-c1">global_logger</span>()) <span class="pl-k">do</span> log
    <span class="pl-k">if</span> <span class="pl-c1">length</span>(log<span class="pl-k">.</span>message) <span class="pl-k">&gt;</span> <span class="pl-c1">128</span>
        short_message <span class="pl-k">=</span> log<span class="pl-k">.</span>message[<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">min</span>(<span class="pl-k">end</span>, <span class="pl-c1">125</span>)] <span class="pl-k">*</span> <span class="pl-s"><span class="pl-pds">"</span>...<span class="pl-pds">"</span></span>
        <span class="pl-k">return</span> <span class="pl-c1">merge</span>(log, (;message<span class="pl-k">=</span>short_message))
    <span class="pl-k">else</span>
        <span class="pl-k">return</span> log
    <span class="pl-k">end</span>
<span class="pl-k">end</span>;

julia<span class="pl-k">&gt;</span> <span class="pl-c1">with_logger</span>(truncating_logger) <span class="pl-k">do</span>
    <span class="pl-c1">@info</span> <span class="pl-s"><span class="pl-pds">"</span>the truncating logger only truncates long messages<span class="pl-pds">"</span></span>
    <span class="pl-c1">@info</span> <span class="pl-s"><span class="pl-pds">"</span>Like this one that is this is a long and rambling message, it just keeps going and going and going,  and it seems like it will never end.<span class="pl-pds">"</span></span>
    <span class="pl-c1">@info</span> <span class="pl-s"><span class="pl-pds">"</span>Not like this one, that is is short<span class="pl-pds">"</span></span>
<span class="pl-k">end</span>
[ Info<span class="pl-k">:</span> the truncating logger only truncates long messages
[ Info<span class="pl-k">:</span> Like this one that is this is a long and rambling message, it just keeps going and going and going,  and it seems like it wil<span class="pl-k">...</span>
[ Info<span class="pl-k">:</span> Not like this one, that is is short</pre></div>
<p dir="auto">It can also be used to do things such as change the log level of messages from a particular module (see the example below).
Or to set common properties for all log messages within the <code>with_logger</code> block,
for example to set them all to the same <code>group</code>.</p>
<h2 dir="auto"><a id="user-content-filelogger-sink" class="anchor" aria-hidden="true" href="#filelogger-sink"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>FileLogger</code> (<em>Sink</em>)</h2>
<p dir="auto">The <code>FileLogger</code> does logging to file.
It is just a convenience wrapper around the base julia <code>SimpleLogger</code>,
to make it easier to pass in a filename, rather than a stream.
It is really simple.</p>
<ul dir="auto">
<li>It takes a filename,</li>
<li>a kwarg to check if should <code>always_flush</code> (default: <code>true</code>).</li>
<li>a kwarg to <code>append</code> rather than overwrite (default <code>false</code>. i.e. overwrite by default)
The resulting file format is similar to that which is shown in the REPL.
(Not identical, but similar)</li>
</ul>
<p dir="auto"><strong>NOTE</strong>: To print to the file in a specific format, e.g. to create a JSON log, use
<code>FormatLogger</code> instead.</p>
<h3 dir="auto"><a id="user-content-demo-teelogger-and-filelogger" class="anchor" aria-hidden="true" href="#demo-teelogger-and-filelogger"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Demo: <code>TeeLogger</code> and <code>FileLogger</code></h3>
<p dir="auto">We are going to log info and above to one file,
and warnings and above to another.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using LoggingExtras;

julia&gt; demux_logger = TeeLogger(
    MinLevelLogger(FileLogger(&quot;info.log&quot;), Logging.Info),
    MinLevelLogger(FileLogger(&quot;warn.log&quot;), Logging.Warn),
);


julia&gt; with_logger(demux_logger) do
    @warn(&quot;It is bad&quot;)
    @info(&quot;normal stuff&quot;)
    @error(&quot;THE WORSE THING&quot;)
    @debug(&quot;it is chill&quot;)
end

shell&gt;  cat warn.log
┌ Warning: It is bad
└ @ Main REPL[34]:2
┌ Error: THE WORSE THING
└ @ Main REPL[34]:4

shell&gt;  cat info.log
┌ Warning: It is bad
└ @ Main REPL[34]:2
┌ Info: normal stuff
└ @ Main REPL[34]:3
┌ Error: THE WORSE THING
└ @ Main REPL[34]:4"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> LoggingExtras;

julia<span class="pl-k">&gt;</span> demux_logger <span class="pl-k">=</span> <span class="pl-c1">TeeLogger</span>(
    <span class="pl-c1">MinLevelLogger</span>(<span class="pl-c1">FileLogger</span>(<span class="pl-s"><span class="pl-pds">"</span>info.log<span class="pl-pds">"</span></span>), Logging<span class="pl-k">.</span>Info),
    <span class="pl-c1">MinLevelLogger</span>(<span class="pl-c1">FileLogger</span>(<span class="pl-s"><span class="pl-pds">"</span>warn.log<span class="pl-pds">"</span></span>), Logging<span class="pl-k">.</span>Warn),
);


julia<span class="pl-k">&gt;</span> <span class="pl-c1">with_logger</span>(demux_logger) <span class="pl-k">do</span>
    <span class="pl-c1">@warn</span>(<span class="pl-s"><span class="pl-pds">"</span>It is bad<span class="pl-pds">"</span></span>)
    <span class="pl-c1">@info</span>(<span class="pl-s"><span class="pl-pds">"</span>normal stuff<span class="pl-pds">"</span></span>)
    <span class="pl-c1">@error</span>(<span class="pl-s"><span class="pl-pds">"</span>THE WORSE THING<span class="pl-pds">"</span></span>)
    <span class="pl-c1">@debug</span>(<span class="pl-s"><span class="pl-pds">"</span>it is chill<span class="pl-pds">"</span></span>)
<span class="pl-k">end</span>

shell<span class="pl-k">&gt;</span>  cat warn<span class="pl-k">.</span>log
┌ Warning<span class="pl-k">:</span> It is bad
└ @ Main REPL[<span class="pl-c1">34</span>]<span class="pl-k">:</span><span class="pl-c1">2</span>
┌ Error<span class="pl-k">:</span> THE WORSE THING
└ @ Main REPL[<span class="pl-c1">34</span>]<span class="pl-k">:</span><span class="pl-c1">4</span>

shell<span class="pl-k">&gt;</span>  cat info<span class="pl-k">.</span>log
┌ Warning<span class="pl-k">:</span> It is bad
└ @ Main REPL[<span class="pl-c1">34</span>]<span class="pl-k">:</span><span class="pl-c1">2</span>
┌ Info<span class="pl-k">:</span> normal stuff
└ @ Main REPL[<span class="pl-c1">34</span>]<span class="pl-k">:</span><span class="pl-c1">3</span>
┌ Error<span class="pl-k">:</span> THE WORSE THING
└ @ Main REPL[<span class="pl-c1">34</span>]<span class="pl-k">:</span><span class="pl-c1">4</span></pre></div>
<h2 dir="auto"><a id="user-content-datetimerotatingfilelogger-sink" class="anchor" aria-hidden="true" href="#datetimerotatingfilelogger-sink"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>DatetimeRotatingFileLogger</code> (<em>Sink</em>)</h2>
<p dir="auto">Use this sink to rotate your logs based upon a given <code>DateFormat</code>, automatically closing one file and opening another
when the <code>DateFormat</code> would change the filename.  Note that if you wish to have static portions of your filename, you must
escape them so they are not interpreted by the <code>DateFormat</code> code.  Example:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using LoggingExtras

julia&gt; rotating_logger = DatetimeRotatingFileLogger(pwd(), raw&quot;\a\c\c\e\s\s-YYYY-mm-dd-HH-MM.\l\o\g&quot;);

julia&gt; with_logger(rotating_logger) do
       @info(&quot;This goes in one file&quot;)
       sleep(61) # Sleep until next minute
       @info(&quot;This goes in another file&quot;)
       end

julia&gt; filter(f -&gt; endswith(f, &quot;.log&quot;), readdir(pwd()))
2-element Array{String,1}:
 &quot;access-2020-07-13-13-24.log&quot;
 &quot;access-2020-07-13-13-25.log&quot;"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> LoggingExtras

julia<span class="pl-k">&gt;</span> rotating_logger <span class="pl-k">=</span> <span class="pl-c1">DatetimeRotatingFileLogger</span>(<span class="pl-c1">pwd</span>(), <span class="pl-s"><span class="pl-c1">raw</span><span class="pl-pds">"</span>\a\c\c\e\s\s-YYYY-mm-dd-HH-MM.\l\o\g<span class="pl-pds">"</span></span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">with_logger</span>(rotating_logger) <span class="pl-k">do</span>
       <span class="pl-c1">@info</span>(<span class="pl-s"><span class="pl-pds">"</span>This goes in one file<span class="pl-pds">"</span></span>)
       <span class="pl-c1">sleep</span>(<span class="pl-c1">61</span>) <span class="pl-c"><span class="pl-c">#</span> Sleep until next minute</span>
       <span class="pl-c1">@info</span>(<span class="pl-s"><span class="pl-pds">"</span>This goes in another file<span class="pl-pds">"</span></span>)
       <span class="pl-k">end</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">filter</span>(f <span class="pl-k">-&gt;</span> <span class="pl-c1">endswith</span>(f, <span class="pl-s"><span class="pl-pds">"</span>.log<span class="pl-pds">"</span></span>), <span class="pl-c1">readdir</span>(<span class="pl-c1">pwd</span>()))
<span class="pl-c1">2</span><span class="pl-k">-</span>element Array{String,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-s"><span class="pl-pds">"</span>access-2020-07-13-13-24.log<span class="pl-pds">"</span></span>
 <span class="pl-s"><span class="pl-pds">"</span>access-2020-07-13-13-25.log<span class="pl-pds">"</span></span></pre></div>
<p dir="auto">The user implicitly controls when the files will be rolled over based on the <code>DateFormat</code> given.
To post-process the newly rotated file pass <code>rotation_callback::Function</code> as a keyword argument.
See the docstring with (<code>?DatetimeRotatingFileLogger</code> in the REPL) for more details.</p>
<p dir="auto">To control the logging output it is possible to pass a formatter function as the first argument
in the constructor. See <code>FormatLogger</code> for the requirements on the formatter function.</p>
<h2 dir="auto"><a id="user-content-formatlogger-sink" class="anchor" aria-hidden="true" href="#formatlogger-sink"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>FormatLogger</code> (<em>Sink</em>)</h2>
<p dir="auto">The <code>FormatLogger</code> is a sink that formats the message and prints to a wrapped IO.
Formatting is done by providing a function <code>f(io::IO, log_args::NamedTuple)</code>.</p>
<p dir="auto"><code>FormatLogger</code> can take as its second argument either a writeable <code>IO</code> or a filepath. The <code>append::Bool</code> keyword
argument determines whether the file is opened in append mode (<code>"a"</code>) or truncate mode (<code>"w"</code>).</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using LoggingExtras

julia&gt; logger = FormatLogger() do io, args
           println(io, args._module, &quot; | &quot;, &quot;[&quot;, args.level, &quot;] &quot;, args.message)
       end;

julia&gt; logger = FormatLogger(&quot;out.log&quot;; append=true) do io, args
            println(io, args._module, &quot; | &quot;, &quot;[&quot;, args.level, &quot;] &quot;, args.message)
        end;

julia&gt; with_logger(logger) do
           @info &quot;This is an informational message.&quot;
           @warn &quot;This is a warning, should take a look.&quot;
       end
Main | [Info] This is an informational message.
Main | [Warn] This is a warning, should take a look."><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> LoggingExtras

julia<span class="pl-k">&gt;</span> logger <span class="pl-k">=</span> <span class="pl-c1">FormatLogger</span>() <span class="pl-k">do</span> io, args
           <span class="pl-c1">println</span>(io, args<span class="pl-k">.</span>_module, <span class="pl-s"><span class="pl-pds">"</span> | <span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>[<span class="pl-pds">"</span></span>, args<span class="pl-k">.</span>level, <span class="pl-s"><span class="pl-pds">"</span>] <span class="pl-pds">"</span></span>, args<span class="pl-k">.</span>message)
       <span class="pl-k">end</span>;

julia<span class="pl-k">&gt;</span> logger <span class="pl-k">=</span> <span class="pl-c1">FormatLogger</span>(<span class="pl-s"><span class="pl-pds">"</span>out.log<span class="pl-pds">"</span></span>; append<span class="pl-k">=</span><span class="pl-c1">true</span>) <span class="pl-k">do</span> io, args
            <span class="pl-c1">println</span>(io, args<span class="pl-k">.</span>_module, <span class="pl-s"><span class="pl-pds">"</span> | <span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>[<span class="pl-pds">"</span></span>, args<span class="pl-k">.</span>level, <span class="pl-s"><span class="pl-pds">"</span>] <span class="pl-pds">"</span></span>, args<span class="pl-k">.</span>message)
        <span class="pl-k">end</span>;

julia<span class="pl-k">&gt;</span> <span class="pl-c1">with_logger</span>(logger) <span class="pl-k">do</span>
           <span class="pl-c1">@info</span> <span class="pl-s"><span class="pl-pds">"</span>This is an informational message.<span class="pl-pds">"</span></span>
           <span class="pl-c1">@warn</span> <span class="pl-s"><span class="pl-pds">"</span>This is a warning, should take a look.<span class="pl-pds">"</span></span>
       <span class="pl-k">end</span>
Main <span class="pl-k">|</span> [Info] This is an informational message.
Main <span class="pl-k">|</span> [Warn] This is a warning, should take a look.</pre></div>
<h2 dir="auto"><a id="user-content-leveloverridelogger-filter" class="anchor" aria-hidden="true" href="#leveloverridelogger-filter"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>LevelOverrideLogger</code> (<em>Filter</em>)</h2>
<p dir="auto">Allows overriding the minimum log level set by the logger it wraps.
Useful when debug logging
and used in conjuction with <code>Logging.with_logger</code> or <code>LoggingExtras.withlevel</code> to
temporarily modify the current logger with a custom level.
More generally useful if you want to use the current/global logger as a <em>sink</em> but don't know if it is going to have a problematically high min log level set (as julia's default logger sets min level to <code>Info</code>).</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using LoggingExtras

julia&gt; logger = LevelOverrideLogger(Debug, global_logger())

julia&gt; with_logger(logger) do
           @debug &quot;This message will log since we're overriding the global Info default log level&quot;
       end
┌ Debug: This message will log since we're overriding the global Info default log level
└ @ Main REPL[33]:2"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> LoggingExtras

julia<span class="pl-k">&gt;</span> logger <span class="pl-k">=</span> <span class="pl-c1">LevelOverrideLogger</span>(Debug, <span class="pl-c1">global_logger</span>())

julia<span class="pl-k">&gt;</span> <span class="pl-c1">with_logger</span>(logger) <span class="pl-k">do</span>
           <span class="pl-c1">@debug</span> <span class="pl-s"><span class="pl-pds">"</span>This message will log since we're overriding the global Info default log level<span class="pl-pds">"</span></span>
       <span class="pl-k">end</span>
┌ Debug<span class="pl-k">:</span> This message will log since we<span class="pl-k">'</span>re overriding the <span class="pl-k">global</span> Info default log level
└ @ Main REPL[<span class="pl-c1">33</span>]<span class="pl-k">:</span><span class="pl-c1">2</span></pre></div>
<p dir="auto">This is roughly complementary to the <code>MinLevelFilterLogger</code>.
The <code>MinLevelFilterLogger</code> lets you effectively <em>raise</em> the level of any logger it wraps to meet the level you specify.
The <code>LevelOverrideLogger</code> lets you <em>lower</em> (or <em>raise</em>) the level of the wrapped logger as it bypasses checks on it entirely.</p>
<h1 dir="auto"><a id="user-content-utilities" class="anchor" aria-hidden="true" href="#utilities"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Utilities</h1>
<h2 dir="auto"><a id="user-content-verbosity-macros" class="anchor" aria-hidden="true" href="#verbosity-macros"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Verbosity macros</h2>
<p dir="auto">Sometimes when logging, it is desirable to be able to specify a verbosity level along with
the log level, and to be able to filter on verbosity levels. For example, you may want multiple levels
of verbosity for <code>Debug</code> log statements. LoggingExtras.jl exports verbosity macros that act like their
non-verbose counterparts, but allow specifying a verbosity level as well:</p>
<ul dir="auto">
<li><code>@debugv N msg</code></li>
<li><code>@infov N msg</code></li>
<li><code>@warnv N msg</code></li>
<li><code>@errorv N msg</code></li>
</ul>
<p dir="auto">For verbosity filtering, the <code>LoggingExtras.withlevel(f, Info; verbosity=0)</code> utlility is provided
for temporarily (i.e. while <code>f()</code> is executed) allowing log messages with <code>level</code> and <code>verbosity</code>.
This is very handy for allowing finer grained control in debug logging for long-running or complex user API function
calls. For example:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using LoggingExtras

function complex_user_call(; verbose=0)
    LoggingExtras.withlevel(Debug; verbosity=verbose)
        # execute complex function body
        @debugv 1 &quot;a level 1 verbosity debug message&quot;
        @debugv 2 &quot;a more verbose level 2 debug message&quot;
    end
end"><pre><span class="pl-k">using</span> LoggingExtras

<span class="pl-k">function</span> <span class="pl-en">complex_user_call</span>(; verbose<span class="pl-k">=</span><span class="pl-c1">0</span>)
    LoggingExtras<span class="pl-k">.</span><span class="pl-c1">withlevel</span>(Debug; verbosity<span class="pl-k">=</span>verbose)
        <span class="pl-c"><span class="pl-c">#</span> execute complex function body</span>
        <span class="pl-c1">@debugv</span> <span class="pl-c1">1</span> <span class="pl-s"><span class="pl-pds">"</span>a level 1 verbosity debug message<span class="pl-pds">"</span></span>
        <span class="pl-c1">@debugv</span> <span class="pl-c1">2</span> <span class="pl-s"><span class="pl-pds">"</span>a more verbose level 2 debug message<span class="pl-pds">"</span></span>
    <span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>
<p dir="auto">This allows easy control by the user to specify verbosity (by passing <code>verbose=2</code> or any &gt; 0 value),
and convenience for the function developer by being able to sprinkle <code>@debugv N msg</code> calls as desired,
even in highly nested functions.</p>
<h1 dir="auto"><a id="user-content-more-examples" class="anchor" aria-hidden="true" href="#more-examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>More Examples</h1>
<h2 dir="auto"><a id="user-content-filter-out-any-overly-long-messages" class="anchor" aria-hidden="true" href="#filter-out-any-overly-long-messages"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Filter out any overly long messages</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using LoggingExtras

function sensible_message_filter(log)
    length(log.message) &lt; 1028
end

global_logger(ActiveFilteredLogger(sensible_message_filter, global_logger()))"><pre><span class="pl-k">using</span> LoggingExtras

<span class="pl-k">function</span> <span class="pl-en">sensible_message_filter</span>(log)
    <span class="pl-c1">length</span>(log<span class="pl-k">.</span>message) <span class="pl-k">&lt;</span> <span class="pl-c1">1028</span>
<span class="pl-k">end</span>

<span class="pl-c1">global_logger</span>(<span class="pl-c1">ActiveFilteredLogger</span>(sensible_message_filter, <span class="pl-c1">global_logger</span>()))</pre></div>
<h2 dir="auto"><a id="user-content-filterout-any-messages-from-http" class="anchor" aria-hidden="true" href="#filterout-any-messages-from-http"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Filterout any messages from HTTP</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using LoggingExtras
using HTTP

function not_HTTP_message_filter(log)
    # HTTP.jl utilizes internal modules so call parentmodule(...)
    log._module !== HTTP &amp;&amp; parentmodule(log._module) !== HTTP
end

global_logger(EarlyFilteredLogger(not_HTTP_message_filter, global_logger()))"><pre><span class="pl-k">using</span> LoggingExtras
<span class="pl-k">using</span> HTTP

<span class="pl-k">function</span> <span class="pl-en">not_HTTP_message_filter</span>(log)
    <span class="pl-c"><span class="pl-c">#</span> HTTP.jl utilizes internal modules so call parentmodule(...)</span>
    log<span class="pl-k">.</span>_module <span class="pl-k">!==</span> HTTP <span class="pl-k">&amp;&amp;</span> <span class="pl-c1">parentmodule</span>(log<span class="pl-k">.</span>_module) <span class="pl-k">!==</span> HTTP
<span class="pl-k">end</span>

<span class="pl-c1">global_logger</span>(<span class="pl-c1">EarlyFilteredLogger</span>(not_HTTP_message_filter, <span class="pl-c1">global_logger</span>()))</pre></div>
<h2 dir="auto"><a id="user-content-raising-http-debug-level-errors-to-be-info-level" class="anchor" aria-hidden="true" href="#raising-http-debug-level-errors-to-be-info-level"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Raising HTTP debug level errors to be Info level</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using LoggingExtras
using HTTP

transformer_logger(global_logger()) do log
    # HTTP.jl utilizes internal modules so call parentmodule(...)
    if (log._module === HTTP || parentmodule(log._module) === HTTP) &amp;&amp; log.level === Logging.Debug
        # Merge can be used to construct a new NamedTuple
        # which effectively is the overwriting of fields of a NamedTuple
        return merge(log, (; level=Logging.Info))
    else
        return log
    end
end

global_logger(transformer_logger)"><pre><span class="pl-k">using</span> LoggingExtras
<span class="pl-k">using</span> HTTP

<span class="pl-c1">transformer_logger</span>(<span class="pl-c1">global_logger</span>()) <span class="pl-k">do</span> log
    <span class="pl-c"><span class="pl-c">#</span> HTTP.jl utilizes internal modules so call parentmodule(...)</span>
    <span class="pl-k">if</span> (log<span class="pl-k">.</span>_module <span class="pl-k">===</span> HTTP <span class="pl-k">||</span> <span class="pl-c1">parentmodule</span>(log<span class="pl-k">.</span>_module) <span class="pl-k">===</span> HTTP) <span class="pl-k">&amp;&amp;</span> log<span class="pl-k">.</span>level <span class="pl-k">===</span> Logging<span class="pl-k">.</span>Debug
        <span class="pl-c"><span class="pl-c">#</span> Merge can be used to construct a new NamedTuple</span>
        <span class="pl-c"><span class="pl-c">#</span> which effectively is the overwriting of fields of a NamedTuple</span>
        <span class="pl-k">return</span> <span class="pl-c1">merge</span>(log, (; level<span class="pl-k">=</span>Logging<span class="pl-k">.</span>Info))
    <span class="pl-k">else</span>
        <span class="pl-k">return</span> log
    <span class="pl-k">end</span>
<span class="pl-k">end</span>

<span class="pl-c1">global_logger</span>(transformer_logger)</pre></div>
<h2 dir="auto"><a id="user-content-add-timestamp-to-all-logging" class="anchor" aria-hidden="true" href="#add-timestamp-to-all-logging"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Add timestamp to all logging</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using LoggingExtras, Dates

const date_format = &quot;yyyy-mm-dd HH:MM:SS&quot;

timestamp_logger(logger) = TransformerLogger(logger) do log
  merge(log, (; message = &quot;$(Dates.format(now(), date_format)) $(log.message)&quot;))
end

ConsoleLogger(stdout, Logging.Debug) |&gt; timestamp_logger |&gt; global_logger"><pre><span class="pl-k">using</span> LoggingExtras, Dates

<span class="pl-k">const</span> date_format <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>yyyy-mm-dd HH:MM:SS<span class="pl-pds">"</span></span>

<span class="pl-en">timestamp_logger</span>(logger) <span class="pl-k">=</span> <span class="pl-c1">TransformerLogger</span>(logger) <span class="pl-k">do</span> log
  <span class="pl-c1">merge</span>(log, (; message <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span><span class="pl-v">$(Dates<span class="pl-k">.</span><span class="pl-c1">format</span>(<span class="pl-c1">now</span>(), date_format))</span> <span class="pl-v">$(log<span class="pl-k">.</span>message)</span><span class="pl-pds">"</span></span>))
<span class="pl-k">end</span>

<span class="pl-c1">ConsoleLogger</span>(<span class="pl-c1">stdout</span>, Logging<span class="pl-k">.</span>Debug) <span class="pl-k">|&gt;</span> timestamp_logger <span class="pl-k">|&gt;</span> global_logger</pre></div>
<p dir="auto">This will produce output similar to:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="[ Info: 2019-09-20 17:43:54 /es/update 200
┌ Debug: 2019-09-20 18:03:25 Recompiling stale cache file /.julia/compiled/v1.2/TranslationsController.ji for TranslationsController [top-level]
└ @ Base loading.jl:1240
┌ Error: 2019-09-20 17:43:54 ErrorException(&quot;SearchLight validation error(s) for Translations.Translation&quot;)
└ @ TranslationsController ~/Dropbox/Projects/LiteCMS/app/resources/translations/TranslationsController.jl:69"><pre>[ Info<span class="pl-k">:</span> <span class="pl-c1">2019</span><span class="pl-k">-</span><span class="pl-c1">09</span><span class="pl-k">-</span><span class="pl-c1">20</span> <span class="pl-c1">17</span><span class="pl-k">:</span><span class="pl-c1">43</span><span class="pl-k">:</span><span class="pl-c1">54</span> <span class="pl-k">/</span>es<span class="pl-k">/</span>update <span class="pl-c1">200</span>
┌ Debug<span class="pl-k">:</span> <span class="pl-c1">2019</span><span class="pl-k">-</span><span class="pl-c1">09</span><span class="pl-k">-</span><span class="pl-c1">20</span> <span class="pl-c1">18</span><span class="pl-k">:</span><span class="pl-c1">03</span><span class="pl-k">:</span><span class="pl-c1">25</span> Recompiling stale cache file <span class="pl-k">/</span><span class="pl-k">.</span>julia<span class="pl-k">/</span>compiled<span class="pl-k">/</span>v1.<span class="pl-c1">2</span><span class="pl-k">/</span>TranslationsController<span class="pl-k">.</span>ji <span class="pl-k">for</span> TranslationsController [top<span class="pl-k">-</span>level]
└ @ Base loading<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">1240</span>
┌ Error<span class="pl-k">:</span> <span class="pl-c1">2019</span><span class="pl-k">-</span><span class="pl-c1">09</span><span class="pl-k">-</span><span class="pl-c1">20</span> <span class="pl-c1">17</span><span class="pl-k">:</span><span class="pl-c1">43</span><span class="pl-k">:</span><span class="pl-c1">54</span> <span class="pl-c1">ErrorException</span>(<span class="pl-s"><span class="pl-pds">"</span>SearchLight validation error(s) for Translations.Translation<span class="pl-pds">"</span></span>)
└ @ TranslationsController <span class="pl-k">~</span><span class="pl-k">/</span>Dropbox<span class="pl-k">/</span>Projects<span class="pl-k">/</span>LiteCMS<span class="pl-k">/</span>app<span class="pl-k">/</span>resources<span class="pl-k">/</span>translations<span class="pl-k">/</span>TranslationsController<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">69</span></pre></div>
</article></div>