<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-s-julia---s-expression-to-julia-convertor" class="anchor" aria-hidden="true" href="#s-julia---s-expression-to-julia-convertor"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>S-Julia - s-expression to julia convertor.</h1>
<span>
<a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/7ccee36cc9a19d22fd61830bb000ac59cdb70b2f/68747470733a2f2f7472617669732d63692e6f72672f7673686573682f53657870722e6a6c2e7376673f6272616e63683d6d6173746572"><img src="https://camo.githubusercontent.com/7ccee36cc9a19d22fd61830bb000ac59cdb70b2f/68747470733a2f2f7472617669732d63692e6f72672f7673686573682f53657870722e6a6c2e7376673f6272616e63683d6d6173746572" data-canonical-src="https://travis-ci.org/vshesh/Sexpr.jl.svg?branch=master" style="max-width:100%;"></a>
<a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/98a2c1a819bd1579cf2720976a8560ead5085c51/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f7673686573682f53657870722e6a6c2f62616467652e7376673f6272616e63683d6d6173746572"><img src="https://camo.githubusercontent.com/98a2c1a819bd1579cf2720976a8560ead5085c51/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f7673686573682f53657870722e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" data-canonical-src="https://coveralls.io/repos/github/vshesh/Sexpr.jl/badge.svg?branch=master" style="max-width:100%;"></a>
</span>
<h2><a id="user-content-quickstart" class="anchor" aria-hidden="true" href="#quickstart"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Quickstart</h2>
<pre lang="{.bash}"><code>&gt; Pkg.clone("https://github.com/vshesh/Sexpr.jl.git")

$ julia -e 'import Sexpr; Sexpr.main()' --
usage: Sexpr.jl [-i] [-c] [-l LINES] [-o OUTPUT] [-e EXTENSION] [-h]
               [files...]
A program to port clojure-like s-expression syntax to and from
julia. By default, this program takes clojure syntax and outputs
the julia version. Use -i to flip direction.

positional arguments:
  files                 If given one file and no output directory,
                        will dump to stdout. If given a directory or
                        multiple files, eg "sjulia file1 dir file2",
                        an output directory must be specified with
                        -o/--output where the files will go.
optional arguments:
  -i, --invert          take julia code and print out s-expression
                        code instead
  -c, --cat             cat all the input from STDIN rather than read
                        from file. Ignores all positional args to the
                        program.
  -l, --lines LINES     how many blank lines should exist between top
                        level forms, default 1 (type: Int64, default:
                        1)
  -o, --output OUTPUT   where to write out files if there are multiple
                        positional arguments to the file. If this is
                        empty, and there are &gt;1 argument, the program
                        will throw an error.
  -e, --extension EXTENSION
                        add an extension that qualifies as a lisp file
                        (can use multiple times). Defaults: clj, cljs,
                        cl, lisp, wisp, hy.
  -h, --help            show this help message and exit
</code></pre>
<pre lang="{.bash}"><code>$ julia -e 'import Sexpr; Sexpr.main()' -- -o test/output/ test/programs/
# will transpile all .clj files in test/programs and dump them into test/output.
</code></pre>
<h2><a id="user-content-overview" class="anchor" aria-hidden="true" href="#overview"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Overview</h2>
<p>This project aims to make s-expression syntax interoperable with julia's
own Expr objects.</p>
<p>If you've seen LispSyntax.jl, it's a similar idea, but IMHO
this project does a bit more, such as allow you to transpile file-&gt;file rather than just read in a program, and also transpile back, so you can convert your julia files (minus a few special forms that aren't supported yet) into clojure syntax. This makes it possible to go from julia to python (again, not that anyone needed another route b/c pycall) via Hylang, or to JS via WispJS. The benefit here is that the awkward macro syntax in both of those languages is avoided (Hy necessitates wrapping everything in HyModel objects yourself, which is ridiculous, and WispJS's module system is broken, because it is Javascript, so resolving variable names is not working properly).</p>
<p>The final goal is to use interoperability to do a <code>macroexpand</code> operation on the input clj syntax. So you would be able to give a folder of clj files, and a temp folder with jl files would be created, then each file would be read in and macroexpanded, converted back to clj syntax, and written out to a third folder. Unfortunately, it's necessary to write the jl files out as an intermediary step, because they need to be able to find each other to resolve imports.
Alternatively, you could write the clj files as jl files with the macro <code>@clj_str</code>, but that makes your whole file a string, which breaks most syntax highlighters, which can be annoying.</p>
<p>I know that you're probably thinking "why?" and it was mostly a project for me to learn Julia and muck around with its internals. I learned quite a bit, so mission accomplished! CLJS has self-hosting now, which means that they will hopefully have a js-only package soon. However, dealing with google closure compiler and leiningen's java/jvm dependencies are a larger problem to be solved, and until then, I still consider it unwieldy, so there's still some practical use to
be had here.</p>
<p>Effectively, this is just the <strong>reader</strong> portion of implementing a lisp - Julia does everything else using its inbuilt mechanisms.</p>
<h2><a id="user-content-syntax-overview" class="anchor" aria-hidden="true" href="#syntax-overview"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Syntax Overview</h2>
<h3><a id="user-content-atoms" class="anchor" aria-hidden="true" href="#atoms"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Atoms</h3>
<ul>
<li><code>nil</code> translates to julia's <code>nothing</code>. They work exactly the same.</li>
<li><code>true</code> -&gt; <code>true</code> and <code>false</code> -&gt; <code>false</code>. No surprises at all there.</li>
<li><code>number</code> constants compile to either <code>Int64</code> or <code>Float64</code> types.
<ul>
<li>rational constants also supported, so <code>3/5</code> -&gt; <code>3//5</code> in Julia.</li>
</ul>
</li>
<li><code>character</code> any atom starting with a <code>\</code> is a character.
<ul>
<li><code>\newline</code>, <code>\space</code>, <code>\tab</code>, <code>\formfeed</code>, <code>\backspace</code>, <code>\return</code> for escapes</li>
<li>unicode/octal support still needs to be handled.</li>
<li>non-strict, giving a longer literal silently just gives you the
first character right now. This is probably not the best long-term strategy.
Eg, <code>\xyz</code> -&gt; <code>\x</code></li>
</ul>
</li>
<li><code>string</code> is any sequence of characters inside double quotes.
<ul>
<li>multiline strings are allowed, but padding is not subtracted (yet).</li>
</ul>
</li>
<li><code>keyword</code> basically a symbol that starts with a <code>:</code>. In julia, these are confusingly called symbols, and symbols are called variables.
<ul>
<li>keywords cannot have a / or . in them anywhere.</li>
<li>in clojure keywords with two colons are resolved in the current namespace,
that behavior is not the same here. Everything just compiles to a normal
symbol in julia, so no namespacing. There are probably issues here, I just
don't know what they are.</li>
</ul>
</li>
<li><code>symbol</code> which is any identifier for a variable.
<ul>
<li>any <code>/</code> or <code>.</code> character is converted to a <code>.</code> in julia. Eg, <code>module/function</code>
becomes <code>module.function</code> as an identifier. This should be relatively
consistent with clojure semantics.</li>
<li>clojure is more lenient about symbol characters than julia. In order to get
around this limitation, the default is to output unicode characters
where regular ones won't suffice. so <code>*+?!-_':&gt;&lt;</code> are all allowed inside a
symbol.
<ul>
<li>TODO make the option to use escaped ascii-only names available. (ugly,
but avoids having to use unicode, which is a pain depending on how your
unicode extension is defined).</li>
<li><code>::</code> in a symbol identifier compiles to a type. eg, <code>x::Int</code> compiles to <code>(:: x Int)</code></li>
<li><code>::T1::T2</code> compiles to a union like <code>x::T1::T2</code> -&gt; <code>(:: x T1 T2)</code></li>
</ul>
</li>
</ul>
</li>
</ul>
<h3><a id="user-content-collections" class="anchor" aria-hidden="true" href="#collections"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Collections</h3>
<ul>
<li><code>'(a b c)</code> a list - if not quoted, it's evaluated and transpiled.
<ul>
<li>quoted lists evaluate to tuples, as of now.</li>
</ul>
</li>
<li><code>[a b c]</code> a vector - transpiles to a julia array.</li>
<li><code>{a b c d}</code> a map - transpiles to a julia <code>Dict(a =&gt; b, c=&gt; d)</code> form.</li>
<li>TODO <code>#{a b c}</code> a set, which can map to <code>Set()</code> in julia.</li>
</ul>
<h3><a id="user-content-julia-special-forms" class="anchor" aria-hidden="true" href="#julia-special-forms"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Julia Special Forms</h3>
<ul>
<li>Short Circuit
<ul>
<li><code>and</code>/<code>&amp;&amp;</code> (what you expect this to be) - needs to be a special form because
of short circuiting. Julia defines the <code>and</code> and <code>or</code> forms this way on purpose.</li>
<li><code>or</code>/<code>||</code> (again, what you expect), see above.</li>
</ul>
</li>
<li><code>x[i]</code> family (getting/setting/slicing arrays)
<ul>
<li><code>(aget x 1)</code> -&gt; <code>Expr(:ref, :x, 1)</code> -&gt; <code>x[1]</code>.</li>
<li><code>(aget x 1 2 4 5)</code> -&gt; <code>Expr(:ref, :x, 1, 2, 4, 5)</code> -&gt; <code>x[1, 2, 4, 5]</code></li>
<li><code>(aget x (: 1 3))</code> -&gt; <code>x[1:3]</code></li>
<li><code>(aget x (: 6))</code> -&gt; <code>x[6:end]</code> (preferred)</li>
<li><code>(aget x (: 6 :end))</code> -&gt; <code>x[6:end]</code> (not preferred)</li>
</ul>
</li>
<li>Typing
<ul>
<li><code>(:: x Int)</code> -&gt; <code>x::Int</code> The <code>::</code> form defines types.
<ul>
<li><code>(:: x Int In64)</code> -&gt; <code>x::Union{Int, Int64}</code> there's auto-union if many types are defined.</li>
<li>only useful for function and type defintions.</li>
</ul>
</li>
<li><code>(curly Array Int64)</code> -&gt; <code>Array{Int64}</code> will allow parameterized types.</li>
<li><code>(.b a x y)</code> -&gt; <code>a.b(x,y)</code> is the dot call form.</li>
<li><code>(. a b c d)</code> -&gt; <code>a.b.c.d</code> is the dot access form.
<ul>
<li>note that <code>((. a b) x y)</code> is equivalent to <code>(.b a x y)</code>.</li>
</ul>
</li>
</ul>
</li>
<li>Modules and Import
<ul>
<li><code>(module M ... end)</code> creates a module.
This is visually annoying since you indent your whole file by two spaces
just for this call to module, however I haven't figured out any better way
to do this - the other option is to make <code>#module M</code> a special hash dispatch
that wraps the whole file but... meh, I don't consider this a high enough
priority.</li>
<li><code>(import|using X y z a b)</code> contrary to my expectations, this will give you
<code>import X.y.a.b</code>. There will be a separate import statement for each
function/file you want to use.
<ul>
<li>TODO make this cartesian productable, so <code>(import X [y z a])</code> will expand
to <code>import X.y; import X.z; import X.a</code> instead. This should shorten the
writing. Ideally should make this a system macro (in a system.clj file
that I define) and call it <code>import*</code> or something.</li>
</ul>
</li>
<li><code>(export a b c)</code> -&gt; <code>export a, b, c</code>.
It makes sense from julia's point of view, since modules
are flat things, and you only ever have one level of definitions to export.</li>
</ul>
</li>
</ul>
<h3><a id="user-content-special-forms" class="anchor" aria-hidden="true" href="#special-forms"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Special Forms</h3>
<ul>
<li>
<p><code>()</code>/<code>'()</code> or empty list.</p>
<ul>
<li>For now, this compiles to an empty tuple. In some lisps this is equivalent
to nil (eg Common Lisp) but in Clojure it's not, so I'm following that
convention.</li>
</ul>
</li>
<li>
<p><code>(do exprs...)</code> does each expression and returns the results of the last one.</p>
</li>
<li>
<p><code>(if test true-case false-case?)</code> standard if, evaluates form #2 and branches.</p>
</li>
<li>
<p><code>(let [var1 value1 var2 value2...] exprs...)</code> binds pairs of variables to their values, then evaluates exprs in an implicit <code>do</code>.</p>
</li>
<li>
<p><code>(fn name? [params...] exprs...)</code> defines a function.</p>
<ul>
<li>a function with no name and only one expr in the body will be converted to
a <code>-&gt;</code> form. Eg: <code>(fn [x] x)</code> -&gt; <code>(x) -&gt; x</code>.</li>
</ul>
</li>
<li>
<p><code>(defn name docstring? [params...] exprs...)</code> named defined function.</p>
<ul>
<li>docstrings are ignored right now.</li>
</ul>
</li>
<li>
<p><code>(def var expr)</code> defines a variable.</p>
</li>
<li>
<p><code>throw</code> is a function already in julia, so there's no special form dedicated to it.</p>
</li>
<li>
<p><code>include</code> is a function already in julia, so there's no dedicated special
form for it.</p>
</li>
<li>
<p>TODOS</p>
<ul>
<li>loop/recur (this doesn't have a julia equivalent),</li>
<li>try/catch/finally</li>
<li>for vars in expr do... (useful for lazy iterators)</li>
<li>destructuring and rest param like <code>(fn [&amp; rest])</code></li>
<li><code>defmulti</code> and related (does this even mean anything given julia's
multiple-dispatch?)</li>
<li><code>deftype</code> -&gt; <code>type</code> in Julia.</li>
</ul>
</li>
</ul>
<h3><a id="user-content-macro-forms" class="anchor" aria-hidden="true" href="#macro-forms"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Macro Forms</h3>
<ul>
<li><code>(@m x y z)</code> how to call a macro - prepend it's name with <code>@</code>. There is
unfortunately no way around this, since julia requires this distinction and
for me to resolve what things are macros without it
would involve writing an entire compiler.
To keep it simple, I'm leaving this requirement in place.
<ul>
<li>TODO Since <code>@x</code> means deref in clojure, I might choose to use a different
symbol to denote macrocall in the future. maybe <code>μ</code> or something.
Another idea is abusing # dispatch so `#macro (html [:div "helloworld"])``
calls the next form as a macro rather than a regular function.
The hash dispatch one seems worse, though.</li>
</ul>
</li>
<li><code>defmacro</code> defines a macro, as expected.
<ul>
<li>The way that macros work right now is that the macro definition is passed
a <em>clojure</em> s-expression to work with. This is not the same as being passed
a julia equivalent.</li>
<li>the macro output should again be a clojure expression, which has to be
translated by the reader into a julia expression. This means that whatever
program you write has to include the reader module of this project in order
to produce the desired output.</li>
<li>Every macro will end in a call to <code>Sexpr.rehydrate()</code> which will translate the
expression back to julia's native AST.</li>
</ul>
</li>
<li><code>quote</code> or <code>'</code> gives a literal list of the following expression.
<ul>
<li>The quote form doesn't properly escape symbols yet. Eg, <code>'x</code> is equal to <code>:x</code>
in Julia, but in order to stop the gensym pass from running you actually have
to  do <code>esc(:x)</code> to get the equivalent. I'm unclear as of yet how the
translation should work to get the desired results, so
right now <code>quote</code> and <code>syntax-quote</code> do the same thing, which needs to be
changed.</li>
<li>you <em>can</em> get around this yourself by putting esc calls in the right places,
it will compile down to a function call in the code.</li>
</ul>
</li>
<li><code>syntax-quote</code> or backtick character. the <code>:()</code> quoting form in julia is
actually a syntax quote. It also has an auto-gensym (which can be a pain to get
around if you want to return the original name without obfuscation).</li>
<li><code>unquote</code> or <code>~</code> is <code>$</code> in julia inside expressions. It should evaluate the
variable that's given to the macro and use the evaluated value.</li>
<li><code>unquote-splice</code> or <code>~@</code> unquotes, and also expands the form by one layer
into the form that's being returned. Ie, <code>(f ~@x)</code> is the same as
<code>:(f($x...))</code> in julia.</li>
</ul>
</article></div>