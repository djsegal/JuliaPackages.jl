<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-observationdims" class="anchor" aria-hidden="true" href="#observationdims"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>ObservationDims</h1>
<p><a href="https://travis-ci.com/invenia/ObservationDims.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/47f6d6dcaafeb4e1f111ef57ef6d510459c4bd2e/68747470733a2f2f7472617669732d63692e636f6d2f696e76656e69612f4f62736572766174696f6e44696d732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/invenia/ObservationDims.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/invenia/ObservationDims-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/5ef455c10e3bb0a39cf72d012b4e3de40a7e7ec4/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f6769746875622f696e76656e69612f4f62736572766174696f6e44696d732e6a6c3f7376673d74727565" alt="Build Status" data-canonical-src="https://ci.appveyor.com/api/projects/status/github/invenia/ObservationDims.jl?svg=true" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/invenia/ObservationDims.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/8358661f9c7a46ffe0812f5338baa3ce3f710947/68747470733a2f2f636f6465636f762e696f2f67682f696e76656e69612f4f62736572766174696f6e44696d732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/invenia/ObservationDims.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p><a href="https://github.com/invenia/BlueStyle"><img src="https://camo.githubusercontent.com/7c36c1138b8ef31248513294318b739ddad4edbb/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c75652d3434393564312e737667" alt="Code Style: Blue" data-canonical-src="https://img.shields.io/badge/code%20style-blue-4495d1.svg" style="max-width:100%;"></a></p>
<h1><a id="user-content-what-are-observationdims" class="anchor" aria-hidden="true" href="#what-are-observationdims"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>What are ObservationDims?</h1>
<p>This package defines useful traits and methods for organising data into the format required by some API.</p>
<h2><a id="user-content-organising-data" class="anchor" aria-hidden="true" href="#organising-data"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Organising data</h2>
<p>Imagine we have some matrix of data that we want to pass to a model.
The model may require that observations correspond to matrix rows, or perhaps that they correspond to matrix columns.
Another model might treat the matrix itself as a single observation.</p>
<p>We want to make sure each model parses the data in the correct format.
For this, we can use <code>organise_obs</code> to reorganise the data (when necessary) into the required <code>ObsArrangement</code>.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> ObservationDims

<span class="pl-c"><span class="pl-c">#</span> treat whole matrix as one observation</span>
<span class="pl-c1">organise_obs</span>(<span class="pl-c1">SingleObs</span>(), data)

<span class="pl-c"><span class="pl-c">#</span> rearrange matrix such that observations are columns and rows are features</span>
<span class="pl-c1">organise_obs</span>(<span class="pl-c1">MatrixColsOfObs</span>(), data)</pre></div>
<p>By default, observations are assumed to belong to the first dimension (i.e. rows).
This can be over-written using the <code>obsdim</code> keyword argument:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span> rearrange into a vector of observations where observations are along the 2nd dimension (cols)</span>
<span class="pl-c1">organise_obs</span>(<span class="pl-c1">IteratorOfObs</span>(), data; obsdim<span class="pl-k">=</span><span class="pl-c1">2</span>)</pre></div>
<h3><a id="user-content-n-dimensional-data" class="anchor" aria-hidden="true" href="#n-dimensional-data"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>N-Dimensional data</h3>
<p>The <code>MatrixRowsOfObs</code> and <code>MatrixColsOfObs</code> are special cases of the more general <code>ArraySlicesOfObs{D}</code> where <code>D</code> is the desired observation-dimension.
(<code>D=1</code> for <code>MatrixRowsOfObs</code> and <code>D=2</code> for <code>MatrixColsOfObs</code>).</p>
<p>For example, if we have a 4-dimensional <code>Array</code> with the observations along the 1st dimension but we require them along the 4th dimension we can permute the 1st and 4th dimensions, e.g. <code>(1, 2, 3, 4) -&gt; (4, 2, 3, 1)</code>, as follows:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">organise_obs</span>(<span class="pl-c1">ArraySlicesOfObs</span><span class="pl-c1">{4}</span>(), data; obsdim<span class="pl-k">=</span><span class="pl-c1">1</span>)</pre></div>
<h3><a id="user-content-nameddimsarrays-and-axisarrays" class="anchor" aria-hidden="true" href="#nameddimsarrays-and-axisarrays"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>NamedDimsArrays and AxisArrays</h3>
<p>When used with <code>NamedDimsArray</code>s and <code>AxisArray</code>s, the <code>obsdim</code> can also be a symbol.</p>
<p>For <code>NamedDimsArray</code>s, the default <code>obsdim</code> is selected from <code>(:obs, :observations, :samples)</code> in order of preference.
For example, <code>:obs</code> will always be selected if present, else <code>:observations</code> will selected if present, else <code>:samples</code> will be selected.
If none of these are present you will be required to explicitly provide the <code>obsdim</code> yourself.
This does not apply to <code>AxisArray</code>s, which like <code>AbstractArray</code> in general, default to <code>obsdim=1</code>.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span> no fields are named :obs, :observations, or :samples</span>
<span class="pl-c1">organise_obs</span>(<span class="pl-c1">MatrixRowsOfObs</span>(), named_dims; obsdim<span class="pl-k">=</span><span class="pl-c1">:time</span>)</pre></div>
<h3><a id="user-content-tables" class="anchor" aria-hidden="true" href="#tables"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Tables</h3>
<p><a href="https://github.com/JuliaData/Tables.jl">Tables.jl</a> tables, such as <a href="https://github.com/JuliaData/DataFrames.jl/">DataFrames</a>, are supported as an input.
The observations for a table are always the rows, i.e. <code>obsdim=1</code> (warning will be given if you specify otherwise).
The table will be converted into a matrix or iterator of vectors as appropriate.</p>
<h2><a id="user-content-method-traits" class="anchor" aria-hidden="true" href="#method-traits"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Method Traits</h2>
<p>The key purpose of this package is to make all of this easier by specifying the <code>ObsArrangement</code> as a trait of the model.
We do this using <code>obs_arrangement</code> to declare the expected <code>ObsArrangement</code>:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span> model1 takes data with rows as observations</span>
<span class="pl-en">obs_arrangement</span>(<span class="pl-k">::</span><span class="pl-c1">typeof</span>(model1)) <span class="pl-k">=</span> MatrixRowsOfObs

<span class="pl-c"><span class="pl-c">#</span> model2 takes data as an iterator of observations</span>
<span class="pl-en">obs_arrangement</span>(<span class="pl-k">::</span><span class="pl-c1">typeof</span>(model2)) <span class="pl-k">=</span> IteratorOfObs</pre></div>
<p>Now <code>organise_obs</code> can take the model as an argument which will then dispatch on the trait and organise the data accordingly:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span> rearranges data to use rows as observations</span>
model1_data <span class="pl-k">=</span> <span class="pl-c1">organise_obs</span>(model1, data)

<span class="pl-c"><span class="pl-c">#</span> rearranges data as an iterator of observations</span>
model2_data <span class="pl-k">=</span> <span class="pl-c1">organise_obs</span>(model2, data)</pre></div>
</article></div>