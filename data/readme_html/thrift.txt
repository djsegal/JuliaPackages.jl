<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-thriftjl" class="anchor" aria-hidden="true" href="#thriftjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Thrift.jl</h1>
<p><a href="https://travis-ci.org/tanmaykm/Thrift.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/1121e52bec38330a38f8406c7cffc64ae873869e/68747470733a2f2f7472617669732d63692e6f72672f74616e6d61796b6d2f5468726966742e6a6c2e706e67" alt="Build Status" data-canonical-src="https://travis-ci.org/tanmaykm/Thrift.jl.png" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/tanmaykm/thrift-jl/branch/master" rel="nofollow"><img src="https://camo.githubusercontent.com/f923d763eaf779a07edde4a6f103756532804091/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f35366c376c62776b35667762746e6f6f2f6272616e63682f6d61737465723f7376673d74727565" alt="Build status" data-canonical-src="https://ci.appveyor.com/api/projects/status/56l7lbwk5fwbtnoo/branch/master?svg=true" style="max-width:100%;"></a></p>
<p><a href="http://thrift.apache.org/" rel="nofollow"><strong>Apache Thrift</strong></a> is a lightweight, language-independent software stack with an associated code generation mechanism for RPC.</p>
<p><strong>Thrift.jl</strong> is an implementation of Thrift for Julia, including a plugin for the Thrift IDL compiler.</p>
<h2><a id="user-content-getting-started" class="anchor" aria-hidden="true" href="#getting-started"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Getting Started</h2>
<h3><a id="user-content-setting-up-thrift-for-julia" class="anchor" aria-hidden="true" href="#setting-up-thrift-for-julia"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Setting up Thrift for Julia</h3>
<p>Install the Julia Thrift package: <code>Pkg.add("Thrift")</code>.</p>
<p>On Linux and OSX a Julia Thrift compiler will be installed under the <code>deps</code> folder. You may add it to your <code>PATH</code> environment for convenience. On Windows, no pre-built Julia Thrift compiler is installed. Note that the Thrift compiler is only needed to generate Julia code from IDLs. If generated code is already available, Thrift.jl can be used with it even if a compiler is not available.</p>
<p>To build the Julia Thrift compiler (if needed):</p>
<ul>
<li>Patch the Thrift IDL compiler with the Julia code generator plugin. Any one of the following two methods can be followed:
<ul>
<li>Download Thrift sources from <a href="http://thrift.apache.org/download/" rel="nofollow">Apache</a>. Place Julia plugin <a href="https://github.com/tanmaykm/Thrift.jl/tree/master/compiler"><code>t_jl_generator.cc</code></a> into <code>compiler/cpp/src/generate</code> folder. Update makefiles to include the new source and rebuild.</li>
<li>Clone Thrift sources from a fork <a href="https://github.com/tanmaykm/thrift">here</a>.</li>
</ul>
</li>
<li>Build and install the Thrift compiler. Some instructions <a href="http://thrift.apache.org/tutorial/" rel="nofollow">here</a>.</li>
</ul>
<h3><a id="user-content-generating-hello-julia" class="anchor" aria-hidden="true" href="#generating-hello-julia"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Generating "Hello Julia"</h3>
<p>A sample Hello Julia IDL and implementation is bundled along with the Thrift.jl package. It can be found under <code>test/hello</code> folder of the package.</p>
<p>It contains a Thrift IDL named <code>hello.thrift</code>, which contains a service <code>SayHello</code> with a <code>hello</code> method that returns a hello message for the supplied name in a randomly chosen language.</p>
<ol>
<li>
<p>Generate Julia sources from the IDL.</p>
<p>Run command: <code>thrift --gen jl hello.thrift</code>.
This should result in a <code>gen-jl</code> folder with sources generated from the IDL placed in a folder <code>hello</code> (named after the IDL file name).</p>
</li>
<li>
<p>Examine the generated files. Below is a brief explanation of the contents of the generated files.</p>
<ul>
<li><code>hello_types.jl</code>: contains Julia types for Thrift structs, exceptions and enums declared explicitly in the IDL along with other implicit types generated by the code generator.</li>
<li><code>hello_constants.jl</code>: contains any constants declared in the IDL</li>
<li><code>SayHello.jl</code>: code generated for the <code>SayHello</code> service.</li>
<li><code>hello.jl</code>: contains a module named <code>hello</code> (named after the IDL file name), that includes the above mentioned generated files. It also includes a file named <code>hello_impl.jl</code> that is not generated, but must be created by the user.</li>
</ul>
</li>
</ol>
<h3><a id="user-content-implementing-hello-julia" class="anchor" aria-hidden="true" href="#implementing-hello-julia"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Implementing "Hello Julia"</h3>
<ul>
<li>
<p>An implementation of the service methods are already provided as <code>hello_impl.jl</code> in the <code>test/hello</code> folder. It has an implementation of <code>hello</code> service method, that appends a randomly chosen greeting from the constant array <code>GREETINGS</code> to the supplied name.</p>
</li>
<li>
<p>Place the <code>hello_impl.jl</code> file in the <code>gen-jl/hello</code> folder.</p>
</li>
<li>
<p>The client and server implementations for this are already provided as <code>clnt.jl</code> and <code>srvr.jl</code>. Start the server with <code>julia srvr.jl</code>. Run the client with the command <code>julia clnt.jl</code>.</p>
</li>
</ul>
<h3><a id="user-content-setting-and-getting-fields" class="anchor" aria-hidden="true" href="#setting-and-getting-fields"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Setting and Getting Fields</h3>
<p>Types used as Thrift structures are regular Julia types and the Julia syntax to set and get fields can be used on them. But with fields that are set as optional, it is quite likely that some of them may not have been present in the instance that was read. Similarly, fields that need to be sent need to be explicitly marked as being set. The following methods are exported to assist doing this:</p>
<ul>
<li><code>get_field(obj, fld::Symbol)</code> : Gets <code>obj.fld</code> if it has been set. Throws an error otherwise.</li>
<li><code>set_field!(obj, fld::Symbol, val)</code> : Sets <code>obj.fld = val</code> and marks the field as being set. The value would be written on the wire when <code>obj</code> is serialized. Fields can also be set the regular way, but then they must be marked as being set using the <code>fillset</code> method.</li>
<li><code>has_field(obj, fld::Symbol)</code> : Checks whether field <code>fld</code> has been set in <code>obj</code>.</li>
<li><code>clear(obj, fld::Symbol)</code> : Marks field <code>fld</code> of <code>obj</code> as unset.</li>
<li><code>clear(obj)</code> : Marks all fields of <code>obj</code> as unset.</li>
</ul>
<p>The thriftbuild method makes it easier to set large types with many fields:
<code>thriftbuild{T}(::Type{T}, nvpairs::Dict{Symbol}()=Dict{Symbol,Any}())</code></p>
<h3><a id="user-content-other-methods" class="anchor" aria-hidden="true" href="#other-methods"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Other Methods</h3>
<ul>
<li><code>copy!(to, from)</code> : shallow copy of objects</li>
<li><code>isfilled(obj, fld::Symbol)</code> : same as <code>has_field</code></li>
<li><code>isfilled(obj)</code> : whether all mandatory fields are set</li>
<li><code>fillset(obj, fld::Symbol)</code> : mark field fld of object obj as set</li>
<li><code>fillunset(obj)</code> : mark all fields of this object as not set</li>
<li><code>fillunset(obj, fld::Symbol)</code> : mark field fld of object obj as not set</li>
<li><code>enumstr(enumname, enumvalue::Int32)</code>: returns a string with the enum field name matching the value</li>
</ul>
<h3><a id="user-content-on-the-generated-code-structure" class="anchor" aria-hidden="true" href="#on-the-generated-code-structure"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>On the Generated Code Structure</h3>
<p>The generated code largely follows the scheme used in other languages, e.g. Python and C++. Each Thrift program (IDL file) is placed into a separate folder. The program (IDL file) name must be different from any of the service names defined in the program. Generated files may get clobbered if that is violated, because of filename clashes.</p>
<p>A Julia module is also generated  bundle all sources together. Using the module is optional, though convenient in most cases. The example in <code>test/calculator</code> illustrates how to include multiple thrift generated services in a single Julia module, without using the autogenerated modules.</p>
<p>The generated service <code>Processor</code> now assumes that the implemented methods are present in the current module. Thus the generated code is not a complete module and requires the user to supply a service implementation to be complete. An alternative would be to make the generated code a complete module, and have the user supply an implementation module.</p>
<p>Service extensions are supported. The thrift processor on the server side passes on any methods it can not handle to the processor it extends from. Extensions of service clients are supported through Julia type extension.</p>
<p>The code generator can be tweaked in the future towards any preferred way of usage that may appear with further usage.</p>
<h3><a id="user-content-thrift-metadata" class="anchor" aria-hidden="true" href="#thrift-metadata"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Thrift Metadata</h3>
<p>Thrift serialization can be customized for a type by defining a <code>meta</code> method on it. The <code>meta</code> method provides an instance of <code>ThriftMeta</code> that allows specification of optional fields, field numbers, and default values for fields for a type. The Thrift code generator generates appropriate <code>meta</code> methods wherever required. The below information will however help in understanding and tweaking the generated code if required.</p>
<p>Defining a specialized <code>meta</code> is done simply as below:</p>
<pre><code>import Thrift.meta

meta(t::Type{MyType}) = meta(t,                          # the type which this is for
        Symbol[:intval],                                 # optional fields
        Int[8, 10],                                      # field numbers
        Dict{Symbol,Any}(:strval =&gt; "default value"))    # default values
</code></pre>
<p>Without any specialized <code>meta</code> method:</p>
<ul>
<li>All fields are marked as required.</li>
<li>Field numbers are assigned serially starting from -1, and decremented in the order of their declaration.</li>
<li>No default values are assigned.</li>
</ul>
<p>When the default behavior is fine, just passing empty values would do. E.g., if just field numbers need to be specified, the following would do:</p>
<pre><code>meta(t::Type{MyType}) = meta(t, [], [8,10], Dict())
</code></pre>
<h2><a id="user-content-implementation-status" class="anchor" aria-hidden="true" href="#implementation-status"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Implementation Status</h2>
<p>Following is the status of protocols, transports and servers supported in the current implementation:</p>
<table>
<thead>
<tr>
<th>Protocol</th>
<th>Implemented as</th>
<th> </th>
</tr>
</thead>
<tbody>
<tr>
<td>Binary</td>
<td>TBinaryProtocol</td>
<td></td>
</tr>
<tr>
<td>Compact</td>
<td>TCompactProtocol</td>
<td></td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>Transport</th>
<th>Implemented as</th>
<th> </th>
</tr>
</thead>
<tbody>
<tr>
<td>Socket</td>
<td>TSocket and TServerSocket</td>
<td></td>
</tr>
<tr>
<td>Framed</td>
<td>TFramedTransport</td>
<td></td>
</tr>
<tr>
<td>SASL</td>
<td>TSASLClientTransport</td>
<td>Only client side implementation as of now</td>
</tr>
<tr>
<td>Memory</td>
<td>TMemoryTransport</td>
<td>Can't be used with servers as of now</td>
</tr>
<tr>
<td>File</td>
<td>TFileTransport</td>
<td>Can't be used with servers as of now</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>Server</th>
<th>Implemented as</th>
<th> </th>
</tr>
</thead>
<tbody>
<tr>
<td>Blocking. Single Task.</td>
<td>TSimpleServer</td>
<td>Single process, blocking</td>
</tr>
<tr>
<td>Non Blocking Tasks.</td>
<td>TTaskServer</td>
<td>Single process. Asynchronous task spawned for each connection.</td>
</tr>
<tr>
<td>Non Blocking Multi Process.</td>
<td>TProcessPoolServer</td>
<td>Multi process, non blocking.</td>
</tr>
</tbody>
</table>
</article></div>