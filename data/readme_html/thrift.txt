<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-thriftjl" class="anchor" aria-hidden="true" href="#thriftjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Thrift.jl</h1>
<p dir="auto"><a href="https://github.com/tanmaykm/Thrift.jl/actions?query=workflow%3ACI+branch%3Amaster"><img src="https://github.com/tanmaykm/Thrift.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a></p>
<p dir="auto"><a href="https://codecov.io/gh/tanmaykm/Thrift.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/70eaa49fa2a2ad23cb793aa216a8987083662f73575616612834ca338aad1c64/68747470733a2f2f636f6465636f762e696f2f67682f74616e6d61796b6d2f5468726966742e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e7376673f746f6b656e3d6558386c697a61733343" alt="codecov" data-canonical-src="https://codecov.io/gh/tanmaykm/Thrift.jl/branch/master/graph/badge.svg?token=eX8lizas3C" style="max-width: 100%;"></a></p>
<p dir="auto"><a href="http://thrift.apache.org/" rel="nofollow"><strong>Apache Thrift</strong></a> is a lightweight, language-independent software stack with an associated code generation mechanism for RPC.</p>
<p dir="auto"><strong>Thrift.jl</strong> is an implementation of Thrift for Julia, including a plugin for the Thrift IDL compiler.</p>
<h2 dir="auto"><a id="user-content-getting-started" class="anchor" aria-hidden="true" href="#getting-started"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Getting Started</h2>
<h3 dir="auto"><a id="user-content-setting-up-thrift-for-julia" class="anchor" aria-hidden="true" href="#setting-up-thrift-for-julia"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Setting up Thrift for Julia</h3>
<p dir="auto">Install the Julia Thrift package: <code>Pkg.add("Thrift")</code>.</p>
<h3 dir="auto"><a id="user-content-generating-hello-julia" class="anchor" aria-hidden="true" href="#generating-hello-julia"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Generating "Hello Julia"</h3>
<p dir="auto">A sample Hello Julia IDL and implementation is bundled along with the Thrift.jl package. It can be found under <code>test/hello</code> folder of the package.</p>
<p dir="auto">It contains a Thrift IDL named <code>hello.thrift</code>, which contains a service <code>SayHello</code> with a <code>hello</code> method that returns a hello message for the supplied name in a randomly chosen language.</p>
<ol dir="auto">
<li>
<p dir="auto">Generate Julia sources from the IDL.</p>
<p dir="auto">Run <code>Thrift.generate("hello.thrift")</code> in the Julia REPL.
This should result in a <code>gen-jl</code> folder with sources generated from the IDL placed in a folder <code>hello</code> (named after the IDL file name).</p>
</li>
<li>
<p dir="auto">Examine the generated files. Below is a brief explanation of the contents of the generated files.</p>
<ul dir="auto">
<li><code>hello_types.jl</code>: contains Julia types for Thrift structs, exceptions and enums declared explicitly in the IDL along with other implicit types generated by the code generator.</li>
<li><code>hello_constants.jl</code>: contains any constants declared in the IDL</li>
<li><code>SayHello.jl</code>: code generated for the <code>SayHello</code> service.</li>
<li><code>hello.jl</code>: contains a module named <code>hello</code> (named after the IDL file name), that includes the above mentioned generated files. It also includes a file named <code>hello_impl.jl</code> that is not generated, but must be created by the user.</li>
</ul>
</li>
</ol>
<h3 dir="auto"><a id="user-content-implementing-hello-julia" class="anchor" aria-hidden="true" href="#implementing-hello-julia"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Implementing "Hello Julia"</h3>
<p dir="auto">An implementation of the service methods are already provided as <code>hello_impl.jl</code> in the <code>test/hello</code> folder. It has an implementation of <code>hello</code> service method, that appends a randomly chosen greeting from the constant array <code>GREETINGS</code> to the supplied name.</p>
<ul dir="auto">
<li>Place the <code>hello_impl.jl</code> file in the <code>gen-jl/hello</code> folder.</li>
<li>The client and server implementations for this are already provided as <code>clnt.jl</code> and <code>srvr.jl</code>. Start the server with <code>julia srvr.jl</code>. Run the client with the command <code>julia clnt.jl</code>.</li>
</ul>
<h3 dir="auto"><a id="user-content-setting-and-getting-fields" class="anchor" aria-hidden="true" href="#setting-and-getting-fields"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Setting and Getting Fields</h3>
<p dir="auto">Types used as Thrift structures are regular Julia types and the Julia syntax to set and get struct properties can be used on them.
With fields that are set as optional, it is possible that some of them may not have been present in the instance that was read. The <code>hasproperty</code> method can be used to check before accessing such fields, otherwise an exception may be thrown on accessing a non-existent property.</p>
<ul dir="auto">
<li><code>getproperty(obj, prop::Symbol)</code> : Same as <code>obj.prop</code>. Gets the value if it has been set. Throws an error otherwise.</li>
<li><code>setproperty!(obj, prop::Symbol, val)</code> : Same as <code>obj.prop = val</code>. The value would be written on the wire when <code>obj</code> is serialized.</li>
<li><code>hasproperty(obj, prop::Symbol)</code> : Checks whether property <code>prop</code> has been set in <code>obj</code>.</li>
<li><code>clear(obj)</code> : Marks all fields of <code>obj</code> as unset.</li>
</ul>
<p dir="auto">The default constructor of Thrift structures make it easy to set large types with many properties during construction: <code>T(; nvpairs...)</code>. For example:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; obj = MyThriftType(; prop1=1, prop2=&quot;hello&quot;);"><pre>julia<span class="pl-k">&gt;</span> obj <span class="pl-k">=</span> <span class="pl-c1">MyThriftType</span>(; prop1<span class="pl-k">=</span><span class="pl-c1">1</span>, prop2<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>hello<span class="pl-pds">"</span></span>);</pre></div>
<h3 dir="auto"><a id="user-content-other-methods" class="anchor" aria-hidden="true" href="#other-methods"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Other Methods</h3>
<ul dir="auto">
<li><code>copy!(to, from)</code> : shallow copy of objects</li>
<li><code>isfilled(obj)</code> : whether all mandatory fields are set</li>
<li><code>enumstr(enumname, enumvalue::Int32)</code>: returns a string with the enum field name matching the value</li>
<li><code>generate(specfile)</code>: generate Julia code for given Thrift IDL specification</li>
</ul>
<h3 dir="auto"><a id="user-content-on-the-generated-code-structure" class="anchor" aria-hidden="true" href="#on-the-generated-code-structure"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>On the Generated Code Structure</h3>
<p dir="auto">The generated code largely follows the scheme used in other languages, e.g. Python and C++. Each Thrift program (IDL file) is placed into a separate folder. The program (IDL file) name must be different from any of the service names defined in the program. Generated files may get clobbered if that is violated, because of filename clashes.</p>
<p dir="auto">A Julia module is also generated  bundle all sources together. Using the module is optional, though convenient in most cases. The example in <code>test/calculator</code> illustrates how to include multiple thrift generated services in a single Julia module, without using the autogenerated modules.</p>
<p dir="auto">The generated service <code>Processor</code> now assumes that the implemented methods are present in the current module. Thus the generated code is not a complete module and requires the user to supply a service implementation to be complete. An alternative would be to make the generated code a complete module, and have the user supply an implementation module.</p>
<p dir="auto">Service extensions are supported. The thrift processor on the server side passes on any methods it can not handle to the processor it extends from. Extensions of service clients are supported through Julia type extension.</p>
<p dir="auto">The code generator can be tweaked in the future towards any preferred way of usage that may appear with further usage.</p>
<h2 dir="auto"><a id="user-content-implementation-status" class="anchor" aria-hidden="true" href="#implementation-status"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Implementation Status</h2>
<p dir="auto">Following is the status of protocols, transports and servers supported in the current implementation:</p>
<table>
<thead>
<tr>
<th>Protocol</th>
<th>Implemented as</th>
<th> </th>
</tr>
</thead>
<tbody>
<tr>
<td>Binary</td>
<td>TBinaryProtocol</td>
<td></td>
</tr>
<tr>
<td>Compact</td>
<td>TCompactProtocol</td>
<td></td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>Transport</th>
<th>Implemented as</th>
<th> </th>
</tr>
</thead>
<tbody>
<tr>
<td>Socket</td>
<td>TSocket and TServerSocket</td>
<td></td>
</tr>
<tr>
<td>Framed</td>
<td>TFramedTransport</td>
<td></td>
</tr>
<tr>
<td>SASL</td>
<td>TSASLClientTransport</td>
<td>Only client side implementation as of now</td>
</tr>
<tr>
<td>Memory</td>
<td>TMemoryTransport</td>
<td>Can't be used with servers as of now</td>
</tr>
<tr>
<td>File</td>
<td>TFileTransport</td>
<td>Can't be used with servers as of now</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>Server</th>
<th>Implemented as</th>
<th> </th>
</tr>
</thead>
<tbody>
<tr>
<td>Blocking. Single Task.</td>
<td>TSimpleServer</td>
<td>Single process, blocking</td>
</tr>
<tr>
<td>Non Blocking Tasks.</td>
<td>TTaskServer</td>
<td>Single process. Asynchronous task spawned for each connection.</td>
</tr>
<tr>
<td>Non Blocking Multi Process.</td>
<td>TProcessPoolServer</td>
<td>Multi process, non blocking.</td>
</tr>
</tbody>
</table>
</article></div>