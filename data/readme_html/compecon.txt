<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p><a href="https://travis-ci.org/QuantEcon/CompEcon.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/09b502c35b9ecae5235d9778373bbe7a2e89cec2/68747470733a2f2f7472617669732d63692e6f72672f5175616e7445636f6e2f436f6d7045636f6e2e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/QuantEcon/CompEcon.jl.svg?branch=master" style="max-width:100%;"></a> <a href="http://codecov.io/github/QuantEcon/CompEcon.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/f3f1582b1750100dc587e6b468bbae6308ccbec3/687474703a2f2f636f6465636f762e696f2f6769746875622f5175616e7445636f6e2f436f6d7045636f6e2e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/QuantEcon/CompEcon.jl/coverage.svg?branch=master" style="max-width:100%;"></a> <a href="https://coveralls.io/github/QuantEcon/CompEcon.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/a7b4902283b442630578f6319d7ad970145e6d03/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f5175616e7445636f6e2f436f6d7045636f6e2e6a6c2f62616467652e7376673f6272616e63683d6d617374657226736572766963653d676974687562" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/QuantEcon/CompEcon.jl/badge.svg?branch=master&amp;service=github" style="max-width:100%;"></a></p>
<p>This package is a Julia implementation of the routines originally contained in the <a href="http://www4.ncsu.edu/~pfackler/compecon/toolbox.html" rel="nofollow">CompEcon Matlab toolbox</a> by Paul Fackler and Mario Miranda. The original Matlab code was written to accompany the publication</p>
<blockquote>
<p>Miranda, Mario J., and Paul L. Fackler. Applied computational economics and finance. MIT press, 2004.</p>
</blockquote>
<p>This work is derivative of their work and has been licensed with their permission.</p>
<h1><a id="user-content-compecon" class="anchor" aria-hidden="true" href="#compecon"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>CompEcon</h1>
<p>This package is a wrapper around <a href="https://github.com/QuantEcon/BasisMatrices.jl">BasisMatrices.jl</a> and provides an API similar to the original <a href="http://www4.ncsu.edu/~pfackler/compecon/toolbox.html" rel="nofollow">CompEcon matlab library</a> by Miranda and Fackler. For best use of the underlying routines, we recommend using the BasisMatrices.jl API.</p>
<p>The Matlab style API here is as close to the original library as possible (differences are based mostly on syntax). To see what this means, consider the following Matlab example (taken from <code>demapp01.m</code>):</p>
<div class="highlight highlight-source-matlab"><pre><span class="pl-c"><span class="pl-c">%</span> function to approximate</span>
f = @(x) exp(-x)

<span class="pl-c"><span class="pl-c">%</span> Set the endpoints of approximation interval:</span>
a =  -<span class="pl-c1">1</span>;                            <span class="pl-c"><span class="pl-c">%</span> left endpoint</span>
b =   <span class="pl-c1">1</span>;                            <span class="pl-c"><span class="pl-c">%</span> right endpoint</span>

<span class="pl-c"><span class="pl-c">%</span> Choose an approximation scheme. In this case, let us use an order 10</span>
<span class="pl-c"><span class="pl-c">%</span> Chebychev approximation scheme:</span>
n = <span class="pl-c1">10</span>;                             <span class="pl-c"><span class="pl-c">%</span> order of approximation</span>
basis = fundefn(<span class="pl-s"><span class="pl-pds">'</span>cheb<span class="pl-pds">'</span></span>,n,a,b);      <span class="pl-c"><span class="pl-c">%</span> define basis</span>

<span class="pl-c"><span class="pl-c">%</span> Compute the basis coefficients c.  There are various way to do this:</span>
<span class="pl-c"><span class="pl-c">%</span> One may use funfitf:</span>
c = funfitf(basis,@f);

<span class="pl-c"><span class="pl-c">%</span> ... or one may compute the standard approximation nodes x and corresponding</span>
<span class="pl-c"><span class="pl-c">%</span> function values y and use funfitxy:</span>
x = funnode(basis);
y = f(x);
c = funfitxy(basis,x,y);

<span class="pl-c"><span class="pl-c">%</span> ... or one compute the standard approximation nodes x, corresponding</span>
<span class="pl-c"><span class="pl-c">%</span> function values y, and the interpolation matrix phi, and solve the</span>
<span class="pl-c"><span class="pl-c">%</span> interpolation equation directly using the backslash operator:</span>
x = funnode(basis);
y = f(x);
phi = funbase(basis);
c = phi\y;

<span class="pl-c"><span class="pl-c">%</span> Having computed the basis coefficients, one may now evaluate the</span>
<span class="pl-c"><span class="pl-c">%</span> approximant at any point x using funeval:</span>
x = <span class="pl-c1">0</span>;
y = funeval(c,basis,x);</pre></div>
<p>The corresponding Julia code is</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> CompEcon
<span class="pl-c"><span class="pl-c">#</span> function to approximate</span>
<span class="pl-en">f</span>(x) <span class="pl-k">=</span> <span class="pl-c1">exp</span>(<span class="pl-k">-</span>x)

<span class="pl-c"><span class="pl-c">#</span> Set the endpoints of approximation interval:</span>
a <span class="pl-k">=</span>  <span class="pl-k">-</span><span class="pl-c1">1</span>                            <span class="pl-c"><span class="pl-c">#</span> left endpoint</span>
b <span class="pl-k">=</span>   <span class="pl-c1">1</span>                            <span class="pl-c"><span class="pl-c">#</span> right endpoint</span>

<span class="pl-c"><span class="pl-c">#</span> Choose an approximation scheme. In this case, let us use an order 10</span>
<span class="pl-c"><span class="pl-c">#</span> Chebychev approximation scheme:</span>
n <span class="pl-k">=</span> <span class="pl-c1">10</span>                             <span class="pl-c"><span class="pl-c">#</span> order of approximation</span>
basis <span class="pl-k">=</span> <span class="pl-c1">fundefn</span>(<span class="pl-c1">:cheb</span>, n, a, b)      <span class="pl-c"><span class="pl-c">#</span> define basis</span>

<span class="pl-c"><span class="pl-c">#</span> Compute the basis coefficients c.  There are various way to do this:</span>
<span class="pl-c"><span class="pl-c">#</span> One may use funfitf:</span>
c <span class="pl-k">=</span> <span class="pl-c1">funfitf</span>(basis, f)

<span class="pl-c"><span class="pl-c">#</span> ... or one may compute the standard approximation nodes x and corresponding</span>
<span class="pl-c"><span class="pl-c">#</span> function values y and use funfitxy:</span>
x <span class="pl-k">=</span> <span class="pl-c1">funnode</span>(basis)[<span class="pl-c1">1</span>]
y <span class="pl-k">=</span> <span class="pl-c1">f</span>(x)
c <span class="pl-k">=</span> <span class="pl-c1">funfitxy</span>(basis, x, y)[<span class="pl-c1">1</span>]

<span class="pl-c"><span class="pl-c">#</span> ... or one compute the standard approximation nodes x, corresponding</span>
<span class="pl-c"><span class="pl-c">#</span> function values y, and the interpolation matrix phi, and solve the</span>
<span class="pl-c"><span class="pl-c">#</span> interpolation equation directly using the backslash operator:</span>
x <span class="pl-k">=</span> <span class="pl-c1">funnode</span>(basis)[<span class="pl-c1">1</span>]
y <span class="pl-k">=</span> <span class="pl-c1">f</span>(x)
phi <span class="pl-k">=</span> <span class="pl-c1">funbase</span>(basis)
c <span class="pl-k">=</span> phi<span class="pl-k">\</span>y

<span class="pl-c"><span class="pl-c">#</span> Having computed the basis coefficients, one may now evaluate the</span>
<span class="pl-c"><span class="pl-c">#</span> approximant at any point x using funeval:</span>
x <span class="pl-k">=</span> [<span class="pl-c1">0.0</span>]
y <span class="pl-k">=</span> <span class="pl-c1">funeval</span>(c, basis, x)[<span class="pl-c1">1</span>]</pre></div>
<p>The main differences are:</p>
<ul>
<li>The Julia code uses symbols instead of strings to specify basis functions and refer to objects in the basis structure. The Matlab uses string (we see this above with use of <code>'cheb'</code> in Matlab and <code>:cheb</code> in Julia)</li>
<li>The Matlab code relies heavily on the use of <code>varargout</code> to only return some objects. The Julia code always returns all objects the Matlab ones might ever return, so we need to be careful about keeping only some of the return arguments. (notice in the calls to <code>funnode</code>  and <code>funeval</code> we just keep the first output in Julia).</li>
</ul>
</article></div>