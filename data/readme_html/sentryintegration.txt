<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-sentry-integration" class="anchor" aria-hidden="true" href="#sentry-integration"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Sentry Integration</h1>
<p dir="auto">This package allows a production environment to take advantage of
<a href="https://sentry.io/" rel="nofollow">Sentry</a>, a error monitoring, release tracking and
transaction tracing platform.</p>
<p dir="auto">This package has been used internally by Synchronous as a
Sentry API equivalent to the Python/Javascript APIs. It is far from fully
featured, however it includes the basics, such as:</p>
<ul dir="auto">
<li>exception reporting,</li>
<li>tags,</li>
<li>transaction/span traces</li>
</ul>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<p dir="auto">On start of your app, you need to initialise Sentry. If the environment variable
<code>SENTRY_DSN</code> is set, this is used by default:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="SentryIntegration.init()"><pre>SentryIntegration<span class="pl-k">.</span><span class="pl-c1">init</span>()</pre></div>
<p dir="auto">otherwise you should pass in the DSN as a variable</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="SentryIntegration.init(&quot;https://0000000000000000000000000000000000000000.ingest.sentry.io/0000000&quot;)"><pre>SentryIntegration<span class="pl-k">.</span><span class="pl-c1">init</span>(<span class="pl-s"><span class="pl-pds">"</span>https://0000000000000000000000000000000000000000.ingest.sentry.io/0000000<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">OPTIONAL: you can also assign tags that are relevant to your environment. For example:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="SentryIntegration.set_tag(&quot;customer&quot;, customer)
SentryIntegration.set_tag(&quot;release&quot;, string(VERSION))
SentryIntegration.set_tag(&quot;environment&quot;, get(ENV, &quot;RUN_ENV&quot;, &quot;unset&quot;))"><pre>SentryIntegration<span class="pl-k">.</span><span class="pl-c1">set_tag</span>(<span class="pl-s"><span class="pl-pds">"</span>customer<span class="pl-pds">"</span></span>, customer)
SentryIntegration<span class="pl-k">.</span><span class="pl-c1">set_tag</span>(<span class="pl-s"><span class="pl-pds">"</span>release<span class="pl-pds">"</span></span>, <span class="pl-c1">string</span>(<span class="pl-c1">VERSION</span>))
SentryIntegration<span class="pl-k">.</span><span class="pl-c1">set_tag</span>(<span class="pl-s"><span class="pl-pds">"</span>environment<span class="pl-pds">"</span></span>, <span class="pl-c1">get</span>(<span class="pl-c1">ENV</span>, <span class="pl-s"><span class="pl-pds">"</span>RUN_ENV<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>unset<span class="pl-pds">"</span></span>))</pre></div>
<p dir="auto">Messages are sent out via <code>capture_exception</code> and <code>capture_message</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# At a high level in your app/tasks (to catch as many unhandled exceptions as
# possible)
try
    core_loop()
catch exc
    capture_exception(exc)
    # Maybe rethrow here
end"><pre><span class="pl-c"><span class="pl-c">#</span> At a high level in your app/tasks (to catch as many unhandled exceptions as</span>
<span class="pl-c"><span class="pl-c">#</span> possible)</span>
<span class="pl-k">try</span>
    <span class="pl-c1">core_loop</span>()
<span class="pl-k">catch</span> exc
    <span class="pl-c1">capture_exception</span>(exc)
    <span class="pl-c"><span class="pl-c">#</span> Maybe rethrow here</span>
<span class="pl-k">end</span></pre></div>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# Plain info
capture_message(&quot;Boring info message&quot;)"><pre><span class="pl-c"><span class="pl-c">#</span> Plain info</span>
<span class="pl-c1">capture_message</span>(<span class="pl-s"><span class="pl-pds">"</span>Boring info message<span class="pl-pds">"</span></span>)</pre></div>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# A warning to sentry
capture_message(&quot;An external REST request was received for an API ($api_name) that is unknown&quot;,
                Warn)"><pre><span class="pl-c"><span class="pl-c">#</span> A warning to sentry</span>
<span class="pl-c1">capture_message</span>(<span class="pl-s"><span class="pl-pds">"</span>An external REST request was received for an API (<span class="pl-v">$api_name</span>) that is unknown<span class="pl-pds">"</span></span>,
                Warn)</pre></div>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# A error to sentry
capture_message(&quot;Should not have got here!&quot;, Error)"><pre><span class="pl-c"><span class="pl-c">#</span> A error to sentry</span>
<span class="pl-c1">capture_message</span>(<span class="pl-s"><span class="pl-pds">"</span>Should not have got here!<span class="pl-pds">"</span></span>, Error)</pre></div>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# A warning to sentry, including an attachment.
capture_message(&quot;Noticed an 'errors' field in the GQL REST return:&quot;,
                Warn,
                attachments=[(;command, response)])"><pre><span class="pl-c"><span class="pl-c">#</span> A warning to sentry, including an attachment.</span>
<span class="pl-c1">capture_message</span>(<span class="pl-s"><span class="pl-pds">"</span>Noticed an 'errors' field in the GQL REST return:<span class="pl-pds">"</span></span>,
                Warn,
                attachments<span class="pl-k">=</span>[(;command, response)])</pre></div>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# A message with different tags and attachments
spec_desc = &quot;Specification for structure&quot;
script_desc = &quot;Something more specific&quot;
msg = &quot;Spec failed: $spec_desc ::: $script_desc&quot;
json_data = &quot;{ ... }&quot;
query_string = &quot;DROP TABLES ;&quot;
capture_message(msg, Warn ;
                attachments=[json_data, query_string],
                tags = (; spec_desc,
                          script_desc,
                          graph=g_tag))"><pre><span class="pl-c"><span class="pl-c">#</span> A message with different tags and attachments</span>
spec_desc <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>Specification for structure<span class="pl-pds">"</span></span>
script_desc <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>Something more specific<span class="pl-pds">"</span></span>
msg <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>Spec failed: <span class="pl-v">$spec_desc</span> ::: <span class="pl-v">$script_desc</span><span class="pl-pds">"</span></span>
json_data <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>{ ... }<span class="pl-pds">"</span></span>
query_string <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>DROP TABLES ;<span class="pl-pds">"</span></span>
<span class="pl-c1">capture_message</span>(msg, Warn ;
                attachments<span class="pl-k">=</span>[json_data, query_string],
                tags <span class="pl-k">=</span> (; spec_desc,
                          script_desc,
                          graph<span class="pl-k">=</span>g_tag))</pre></div>
<h2 dir="auto"><a id="user-content-transactionspan-tracing" class="anchor" aria-hidden="true" href="#transactionspan-tracing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Transaction/span tracing</h2>
<p dir="auto">This is a more recent feature of Sentry to trace the execution of a query across
multiple services, e.g. frontend -&gt; authentication layer -&gt; backend server -&gt;
backend database. You can create these with a context-manager style</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="return_value_from_inner = SentryIntegration.start_transaction(;
                            name=&quot;Name of overall transaction&quot;,
                            op=&quot;span name, e.g. 'handle web request'&quot;,
                            tags=[:url =&gt; some_url]) do t
    # Inner function whose logical operation is captured by the name &quot;op&quot; and
    # whose time is to be recorded. This is a &quot;span&quot; in Sentry.
    some_func()
    SentryIntegration.start_transaction(; op=&quot;database query&quot;) do t
        # This is a nested span in the transaction.
    end
end"><pre>return_value_from_inner <span class="pl-k">=</span> SentryIntegration<span class="pl-k">.</span><span class="pl-c1">start_transaction</span>(;
                            name<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Name of overall transaction<span class="pl-pds">"</span></span>,
                            op<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>span name, e.g. 'handle web request'<span class="pl-pds">"</span></span>,
                            tags<span class="pl-k">=</span>[<span class="pl-c1">:url</span> <span class="pl-k">=&gt;</span> some_url]) <span class="pl-k">do</span> t
    <span class="pl-c"><span class="pl-c">#</span> Inner function whose logical operation is captured by the name "op" and</span>
    <span class="pl-c"><span class="pl-c">#</span> whose time is to be recorded. This is a "span" in Sentry.</span>
    <span class="pl-c1">some_func</span>()
    SentryIntegration<span class="pl-k">.</span><span class="pl-c1">start_transaction</span>(; op<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>database query<span class="pl-pds">"</span></span>) <span class="pl-k">do</span> t
        <span class="pl-c"><span class="pl-c">#</span> This is a nested span in the transaction.</span>
    <span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>
<p dir="auto">It is possible to assign or reuse a <code>trace_id</code> and <code>parent_span_id</code> if these
have been passed from a service (e.g. a frontend) to track transactions across
multiple services.</p>
<p dir="auto">It is also possible to call <code>start_transaction</code> as a regular function call (i.e.
without the context-manager style) to be able to preserve the <code>Transaction</code> and
pass it to spawned tasks. In this case, it is necessary to call
<code>finish_transaction</code> on the transaction manually:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="t_persist = start_transaction(; name = &quot;MyApp&quot;,
                                op = &quot;lifetime&quot;,
                                trace_id=passed_in_trace_id)

@async seperate_task(client, details, t_persist)
# ...
# Inside of seperate_task:
function separate_task(client, details, t)
    # This makes the task automatically nest future transactions underneath the
    # passed in transaction, as if this were a context manager.
    SentryIntegration.set_task_transaction(t)

    start_transaction(...) do t2
        #...
    end

    SentryIntegration.finish_transaction(t)
end"><pre>t_persist <span class="pl-k">=</span> <span class="pl-c1">start_transaction</span>(; name <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>MyApp<span class="pl-pds">"</span></span>,
                                op <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>lifetime<span class="pl-pds">"</span></span>,
                                trace_id<span class="pl-k">=</span>passed_in_trace_id)

<span class="pl-c1">@async</span> <span class="pl-c1">seperate_task</span>(client, details, t_persist)
<span class="pl-c"><span class="pl-c">#</span> ...</span>
<span class="pl-c"><span class="pl-c">#</span> Inside of seperate_task:</span>
<span class="pl-k">function</span> <span class="pl-en">separate_task</span>(client, details, t)
    <span class="pl-c"><span class="pl-c">#</span> This makes the task automatically nest future transactions underneath the</span>
    <span class="pl-c"><span class="pl-c">#</span> passed in transaction, as if this were a context manager.</span>
    SentryIntegration<span class="pl-k">.</span><span class="pl-c1">set_task_transaction</span>(t)

    <span class="pl-c1">start_transaction</span>(<span class="pl-k">...</span>) <span class="pl-k">do</span> t2
        <span class="pl-c"><span class="pl-c">#</span>...</span>
    <span class="pl-k">end</span>

    SentryIntegration<span class="pl-k">.</span><span class="pl-c1">finish_transaction</span>(t)
<span class="pl-k">end</span></pre></div>
</article></div>