<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-resamplingjl" class="anchor" aria-hidden="true" href="#resamplingjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Resampling.jl</h1>
<h1><a id="user-content-notice" class="anchor" aria-hidden="true" href="#notice"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>NOTICE</h1>
<p><strong>This package is unmaintained. Its reliability is not guaranteed.</strong></p>
<h1><a id="user-content-introduction" class="anchor" aria-hidden="true" href="#introduction"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Introduction</h1>
<p>Tools for resampling data to assess model fits</p>
<h1><a id="user-content-api" class="anchor" aria-hidden="true" href="#api"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>API</h1>
<p>Depending on the level of granularity, you can use several functions for
resampling data:</p>
<ul>
<li><code>splitrandom(df::DataFrame, proportion::Real)</code>: Use this to split <code>df</code> into two randomly chosen pieces. If <code>proportion == 0.75</code>, the first piece will contain ~75% of the data and the second piece will ~25% of the data.</li>
<li><code>resample(df::DataFrame, n::Integer)</code>: Use this to generate a new data set of size <code>n</code> that is resampled with replacement from the rows of <code>df</code>.</li>
<li><code>jackknife(df::DataFrame, statistic::Function)</code>: Use this to run the jackknife. The Jackknife moves through the data, removing one row at a time and then applying the function <code>statistic</code> to the remaining data. The results of all calls to <code>statistic</code> are stored in a vector that is returned to the caller.</li>
<li><code>bootstrap(df::DataFrame, statistic::Function, n::Integer, proportion::Real)</code>: Use this to run the nonparametric bootstrap. The bootstrap resamples the data <code>n</code> times with each resampled data set containing <code>proportion</code> of the data. The function <code>statistic</code> is called on each resampled data set. The results of all calls to <code>statistic</code> are stored in a vector that is returned to the caller.</li>
<li><code>crossvalidate(df::DataFrame, train::Function, test::Function, n::Integer, proportion::Real)</code>: Use this function to fit a model using the <code>train</code> function on <code>n</code> resampled data sets and then test the fitted model using the <code>test</code> function on those same data sets. Each time, the training data set will contain <code>proportion</code> of <code>df</code> and <code>1 - proportion</code> will be held out as a test data set.</li>
<li><code>kfold_crossvalidate(df::DataFrame, train::Function, test::Function, k::Integer)</code>: Use this function to fit a model using the <code>train</code> function on <code>k</code> data sets and then test the fitted model using the <code>test</code> function on those same data sets. Each time, the training data set will contain the majority of the data with one of <code>k</code> folds removed.</li>
</ul>
<h1><a id="user-content-usage-examples" class="anchor" aria-hidden="true" href="#usage-examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Usage Examples</h1>
<p>Using <code>splitrandom</code>:</p>
<pre><code>using DataFrames, Resampling

df = DataFrame()
df["A"] = 1:100

df1, df2 = splitrandom(df, 0.75)
</code></pre>
<p>Using <code>resample</code>:</p>
<pre><code>using DataFrames, Resampling

df = DataFrame()
df["A"] = 1:100

new_df = resample(df, 100)
</code></pre>
<p>Using <code>jackknife</code>:</p>
<pre><code>using DataFrames, Resampling

df = DataFrame()
df["A"] = 1:100

resampled_means = jackknife(df, df -&gt; mean(df["A"]))
se_hat = std(resampled_means)
</code></pre>
<p>Using <code>bootstrap</code>:</p>
<pre><code>using DataFrames, Resampling

df = DataFrame()
df["A"] = 1:100

resampled_means = bootstrap(df, df -&gt; mean(df["A"]), 1_000, 0.90)
se_hat = std(resampled_means)
</code></pre>
<p>Using <code>crossvalidate</code>:</p>
<pre><code>using DataFrames, Resampling

df = DataFrame()
df["A"] = 1:100

function train(df)
    mean(df["A"])
end

function test(df, m)
    sqrt(mean((df["A"] - m).^2))
end

n_reps = 100
training_results, test_results = crossvalidate(df, train, test, n_reps, 0.75)
</code></pre>
<p>Using <code>kfold_crossvalidate</code>:</p>
<pre><code>using DataFrames, Resampling

df = DataFrame()
df["A"] = 1:100

function train(df)
    mean(df["A"])
end

function test(df, m)
    sqrt(mean((df["A"] - m).^2))
end

k = 10
training_results, test_results = kfold_crossvalidate(df, train, test, k)
</code></pre>
</article></div>