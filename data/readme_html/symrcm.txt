<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p dir="auto"><a href="http://www.repostatus.org/#active" rel="nofollow"><img src="https://camo.githubusercontent.com/ed51270ad41e2b842f9423b165977ac42f8498581be7c17c78818d1a45b834d5/687474703a2f2f7777772e7265706f7374617475732e6f72672f6261646765732f6c61746573742f6163746976652e737667" alt="Project Status: Active â€“ The project has reached a stable, usable state and is being actively developed." data-canonical-src="http://www.repostatus.org/badges/latest/active.svg" style="max-width: 100%;"></a>
<a href="https://travis-ci.org/PetrKryslUCSD/SymRCM.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/c6c8ad3744568062314fe60e37fc573abe49614606fa8a689f6b1764ac2b139d/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f506574724b7279736c554353442f53796d52434d2e6a6c2f6d61737465722e7376673f6c6162656c3d4c696e75782b4d61634f53582b57696e646f7773" alt="Build Status" data-canonical-src="https://img.shields.io/travis/PetrKryslUCSD/SymRCM.jl/master.svg?label=Linux+MacOSX+Windows" style="max-width: 100%;"></a>
<a href="https://coveralls.io/github/PetrKryslUCSD/SymRCM.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/ca34b48ed8f2f5726951b3183ab86cd095597bfca1b194206c27baa785da3c55/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f506574724b7279736c554353442f53796d52434d2e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/PetrKryslUCSD/SymRCM.jl/badge.svg?branch=master" style="max-width: 100%;"></a></p>
<h1 dir="auto"><a id="user-content-symrcm-reverse-cuthill-mckee-node-renumbering-algorithm-for-sparse-matrices" class="anchor" aria-hidden="true" href="#symrcm-reverse-cuthill-mckee-node-renumbering-algorithm-for-sparse-matrices"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>SymRCM: Reverse Cuthill-McKee node-renumbering algorithm for sparse matrices.</h1>
<p dir="auto"><code>SymRCM</code> is a tiny package for computing the Reverse Cuthill-McKee node permutation from a sparse matrix. The goal is to minimize the "profile" of the matrix, usually aimed at reducing the cost of LDLT or Choleski factorizations.</p>
<h2 dir="auto"><a id="user-content-get-symrcm" class="anchor" aria-hidden="true" href="#get-symrcm"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Get SymRCM</h2>
<p dir="auto">This package is  registered, and hence one can do just</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="] add SymRCM"><pre>] add SymRCM</pre></div>
<p dir="auto">Only version 1.x and the nightly builds of Julia are supported.</p>
<h2 dir="auto"><a id="user-content-testing" class="anchor" aria-hidden="true" href="#testing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Testing</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="] test SymRCM"><pre>] test SymRCM</pre></div>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<p dir="auto">For a sparse matrix <code>A</code> the basic usage is:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="p = symrcm(A)"><pre>p <span class="pl-k">=</span> <span class="pl-c1">symrcm</span>(A)</pre></div>
<p dir="auto">To solve the system of linear algebraic equations <code>x = A * b</code> with renumbering one can do</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using SparseArrays
using LinearAlgebra
n = 7;
A = sprand(n, n, 1/n)
A = A + A' + 1.0 * I
A = sparse(A)
b = rand(n)
using SymRCM
p = symrcm(A)
ip = similar(p) # inverse permutation
ip[p] = 1:length(p)
xp = A[p, p] \ b[p] # solution to the renumbered system of equations
x = xp[ip] # solution to the original system of equations
A \ b # this is the direct solution which should be identical to the above"><pre><span class="pl-k">using</span> SparseArrays
<span class="pl-k">using</span> LinearAlgebra
n <span class="pl-k">=</span> <span class="pl-c1">7</span>;
A <span class="pl-k">=</span> <span class="pl-c1">sprand</span>(n, n, <span class="pl-c1">1</span><span class="pl-k">/</span>n)
A <span class="pl-k">=</span> A <span class="pl-k">+</span> A<span class="pl-k">'</span> <span class="pl-k">+</span> <span class="pl-c1">1.0</span> <span class="pl-k">*</span> I
A <span class="pl-k">=</span> <span class="pl-c1">sparse</span>(A)
b <span class="pl-k">=</span> <span class="pl-c1">rand</span>(n)
<span class="pl-k">using</span> SymRCM
p <span class="pl-k">=</span> <span class="pl-c1">symrcm</span>(A)
ip <span class="pl-k">=</span> <span class="pl-c1">similar</span>(p) <span class="pl-c"><span class="pl-c">#</span> inverse permutation</span>
ip[p] <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">length</span>(p)
xp <span class="pl-k">=</span> A[p, p] <span class="pl-k">\</span> b[p] <span class="pl-c"><span class="pl-c">#</span> solution to the renumbered system of equations</span>
x <span class="pl-k">=</span> xp[ip] <span class="pl-c"><span class="pl-c">#</span> solution to the original system of equations</span>
A <span class="pl-k">\</span> b <span class="pl-c"><span class="pl-c">#</span> this is the direct solution which should be identical to the above</span></pre></div>
<p dir="auto">Lower-level functions may also be useful. The adjacency graph and the node degrees may be calculated as</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="ag = adjgraph(A; sortbydeg = true)
nd = nodedegrees(ag)"><pre>ag <span class="pl-k">=</span> <span class="pl-c1">adjgraph</span>(A; sortbydeg <span class="pl-k">=</span> <span class="pl-c1">true</span>)
nd <span class="pl-k">=</span> <span class="pl-c1">nodedegrees</span>(ag)</pre></div>
<p dir="auto">which can be used to compute the renumbering as</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="numbering1 = symrcm(ag, nd) # using the lower-level functions
numbering2 = symrcm(A) # direct use of the sparse matrix"><pre>numbering1 <span class="pl-k">=</span> <span class="pl-c1">symrcm</span>(ag, nd) <span class="pl-c"><span class="pl-c">#</span> using the lower-level functions</span>
numbering2 <span class="pl-k">=</span> <span class="pl-c1">symrcm</span>(A) <span class="pl-c"><span class="pl-c">#</span> direct use of the sparse matrix</span></pre></div>
<p dir="auto">and these two will be identical.</p>
<p dir="auto">For significantly populated matrices the sorting of the neighbor lists
may be a significant expense. In that case the sorting may be turned off.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="p = symrcm(A; sortbydeg = false) # note the keyword argument"><pre>p <span class="pl-k">=</span> <span class="pl-c1">symrcm</span>(A; sortbydeg <span class="pl-k">=</span> <span class="pl-c1">false</span>) <span class="pl-c"><span class="pl-c">#</span> note the keyword argument</span></pre></div>
<p dir="auto">Very often the resulting permutation is as good  as if the lists were sorted.</p>
<h2 dir="auto"><a id="user-content-performance" class="anchor" aria-hidden="true" href="#performance"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Performance</h2>
<p dir="auto">Relative numbers may be of interest:</p>
<p dir="auto">Present package code</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using SymRCM                    
using SparseArrays                                     
let   
    S = sprand(10000000, 10000000, 0.0000001);    
    S = S + transpose(S);                                                       
    @time p = symrcm(S; sortbydeg = true);  
    I, J, V = findnz(S[p, p])
    @show bw = maximum(I .- J) + 1            
    @time p = symrcm(S; sortbydeg = false);   
    I, J, V = findnz(S[p, p])
    @show bw = maximum(I .- J) + 1     
    true   
end;  "><pre><span class="pl-k">using</span> SymRCM                    
<span class="pl-k">using</span> SparseArrays                                     
<span class="pl-k">let</span>   
    S <span class="pl-k">=</span> <span class="pl-c1">sprand</span>(<span class="pl-c1">10000000</span>, <span class="pl-c1">10000000</span>, <span class="pl-c1">0.0000001</span>);    
    S <span class="pl-k">=</span> S <span class="pl-k">+</span> <span class="pl-c1">transpose</span>(S);                                                       
    <span class="pl-c1">@time</span> p <span class="pl-k">=</span> <span class="pl-c1">symrcm</span>(S; sortbydeg <span class="pl-k">=</span> <span class="pl-c1">true</span>);  
    I, J, V <span class="pl-k">=</span> <span class="pl-c1">findnz</span>(S[p, p])
    <span class="pl-c1">@show</span> bw <span class="pl-k">=</span> <span class="pl-c1">maximum</span>(I <span class="pl-k">.-</span> J) <span class="pl-k">+</span> <span class="pl-c1">1</span>            
    <span class="pl-c1">@time</span> p <span class="pl-k">=</span> <span class="pl-c1">symrcm</span>(S; sortbydeg <span class="pl-k">=</span> <span class="pl-c1">false</span>);   
    I, J, V <span class="pl-k">=</span> <span class="pl-c1">findnz</span>(S[p, p])
    <span class="pl-c1">@show</span> bw <span class="pl-k">=</span> <span class="pl-c1">maximum</span>(I <span class="pl-k">.-</span> J) <span class="pl-k">+</span> <span class="pl-c1">1</span>     
    <span class="pl-c1">true</span>   
<span class="pl-k">end</span>;  </pre></div>
<p dir="auto">produces</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="  9.271877 seconds (10.07 M allocations: 1.474 GiB, 6.42% gc time)          
bw = maximum(I .- J) + 1 = 1535838              
  7.189242 seconds (10.00 M allocations: 1.471 GiB, 3.04% gc time)    
bw = maximum(I .- J) + 1 = 1535722   "><pre>  <span class="pl-c1">9.271877</span> seconds (<span class="pl-c1">10.07</span> M allocations<span class="pl-k">:</span> <span class="pl-c1">1.474</span> GiB, <span class="pl-c1">6.42</span><span class="pl-k">%</span> gc time)          
bw <span class="pl-k">=</span> <span class="pl-c1">maximum</span>(I <span class="pl-k">.-</span> J) <span class="pl-k">+</span> <span class="pl-c1">1</span> <span class="pl-k">=</span> <span class="pl-c1">1535838</span>              
  <span class="pl-c1">7.189242</span> seconds (<span class="pl-c1">10.00</span> M allocations<span class="pl-k">:</span> <span class="pl-c1">1.471</span> GiB, <span class="pl-c1">3.04</span><span class="pl-k">%</span> gc time)    
bw <span class="pl-k">=</span> <span class="pl-c1">maximum</span>(I <span class="pl-k">.-</span> J) <span class="pl-k">+</span> <span class="pl-c1">1</span> <span class="pl-k">=</span> <span class="pl-c1">1535722</span>   </pre></div>
<p dir="auto">Matlab 2020a:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="&gt;&gt; S = sprand(10000000, 10000000, 0.0000001);     
S = S + S';
tic; p = symrcm(S); toc  
[i,j] = find(S(p,p));
bw = max(i-j) + 1
Elapsed time is 9.258979 seconds.
bw =
     1535477"><pre class="notranslate"><code>&gt;&gt; S = sprand(10000000, 10000000, 0.0000001);     
S = S + S';
tic; p = symrcm(S); toc  
[i,j] = find(S(p,p));
bw = max(i-j) + 1
Elapsed time is 9.258979 seconds.
bw =
     1535477
</code></pre></div>
</article></div>