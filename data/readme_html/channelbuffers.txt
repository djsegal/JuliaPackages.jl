<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-channelbuffers" class="anchor" aria-hidden="true" href="#channelbuffers"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>ChannelBuffers</h1>
<p dir="auto"><a href="https://github.com/KlausC/ChannelBuffers.jl/actions?query=workflow%3ACI"><img src="https://github.com/KlausC/ChannelBuffers.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a>     <a href="https://codecov.io/gh/KlausC/ChannelBuffers.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/bc577576bf2c485ea8baa7dc308793b0d0ea1d5ee8193d6dfa187b58dc80b6df/68747470733a2f2f636f6465636f762e696f2f67682f4b6c617573432f4368616e6e656c427566666572732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage Status" data-canonical-src="https://codecov.io/gh/KlausC/ChannelBuffers.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-introduction" class="anchor" aria-hidden="true" href="#introduction"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Introduction</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="    run( `ls` → gzip() → &quot;ls.gz&quot;)"><pre>    <span class="pl-c1">run</span>( <span class="pl-s"><span class="pl-pds">`</span>ls<span class="pl-pds">`</span></span> → <span class="pl-c1">gzip</span>() → <span class="pl-s"><span class="pl-pds">"</span>ls.gz<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">The <code>ChannelBuffers</code> package integrates the concept of commandline pipelines into <code>Julia</code>. It is not only possible to execute external commands in parallel, but to mix them with internal <code>Task</code>s and <code>Threads</code>.</p>
<p dir="auto">If the user provides functions <code>f</code>, <code>g</code>, <code>h</code>, of the form
<code>f(input::IO, output::IO, args...)</code>, which read from in input stream and write their
results to an output stream, they can execute the functions in parallel tasks.</p>
<p dir="auto"><strong>Note:</strong></p>
<p dir="auto">Input/Output redirection is denoted by <code>→</code> (<code>\rightarrow</code>), which indicates the direction of data flow.
Besides that we support <code>|</code> to denote task pipelines. The symbols <code>&lt;</code> and <code>&gt;</code> known from commandline shells cannot be used,
because they bear the semantics of comparison operators in <code>Julia</code>.</p>
<h2 dir="auto"><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Examples</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="
    tl = run(&quot;afile&quot; → closure(f, fargs...) → closure(g, gargs...) → &quot;bfile&quot;)
    wait(tl)
    "><pre>    tl <span class="pl-k">=</span> <span class="pl-c1">run</span>(<span class="pl-s"><span class="pl-pds">"</span>afile<span class="pl-pds">"</span></span> → <span class="pl-c1">closure</span>(f, fargs<span class="pl-k">...</span>) → <span class="pl-c1">closure</span>(g, gargs<span class="pl-k">...</span>) → <span class="pl-s"><span class="pl-pds">"</span>bfile<span class="pl-pds">"</span></span>)
    <span class="pl-c1">wait</span>(tl)
    </pre></div>
<p dir="auto">Some standard closures are predefined, which make that possible:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="    tl = run( curl(&quot;https::/myurltodownloadfrom.tgz&quot;) | gunzip() | tarx(&quot;targetdir&quot;) )"><pre>    tl <span class="pl-k">=</span> <span class="pl-c1">run</span>( <span class="pl-c1">curl</span>(<span class="pl-s"><span class="pl-pds">"</span>https::/myurltodownloadfrom.tgz<span class="pl-pds">"</span></span>) <span class="pl-k">|</span> <span class="pl-c1">gunzip</span>() <span class="pl-k">|</span> <span class="pl-c1">tarx</span>(<span class="pl-s"><span class="pl-pds">"</span>targetdir<span class="pl-pds">"</span></span>) )</pre></div>
<p dir="auto">or</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="    a = my_object
    run( serializer(a) → &quot;file&quot;) |&gt; wait

    b = open(&quot;file&quot;) do cin
        run(cin → deserializer()) |&gt; fetch
    end"><pre>    a <span class="pl-k">=</span> my_object
    <span class="pl-c1">run</span>( <span class="pl-c1">serializer</span>(a) → <span class="pl-s"><span class="pl-pds">"</span>file<span class="pl-pds">"</span></span>) <span class="pl-k">|&gt;</span> wait

    b <span class="pl-k">=</span> <span class="pl-c1">open</span>(<span class="pl-s"><span class="pl-pds">"</span>file<span class="pl-pds">"</span></span>) <span class="pl-k">do</span> cin
        <span class="pl-c1">run</span>(cin → <span class="pl-c1">deserializer</span>()) <span class="pl-k">|&gt;</span> fetch
    <span class="pl-k">end</span></pre></div>
<p dir="auto">It is possible to open a pipe chain for read or write like for process pipes.
And the can be run:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="    tl = open(&quot;xxx.tar&quot; → tarxO())
    readln(tl)
    close(tl)

    # or equivalently
    open(&quot;xxx.tar&quot; → tarxO()) do tl
        readln(tl)
    end

    open(gzip() → &quot;data.gz&quot;, &quot;w&quot;) do tl
        write(tl, data)
    end

    run(tarc(dir) → &quot;dir.tar&quot;)"><pre>    tl <span class="pl-k">=</span> <span class="pl-c1">open</span>(<span class="pl-s"><span class="pl-pds">"</span>xxx.tar<span class="pl-pds">"</span></span> → <span class="pl-c1">tarxO</span>())
    <span class="pl-c1">readln</span>(tl)
    <span class="pl-c1">close</span>(tl)

    <span class="pl-c"><span class="pl-c">#</span> or equivalently</span>
    <span class="pl-c1">open</span>(<span class="pl-s"><span class="pl-pds">"</span>xxx.tar<span class="pl-pds">"</span></span> → <span class="pl-c1">tarxO</span>()) <span class="pl-k">do</span> tl
        <span class="pl-c1">readln</span>(tl)
    <span class="pl-k">end</span>

    <span class="pl-c1">open</span>(<span class="pl-c1">gzip</span>() → <span class="pl-s"><span class="pl-pds">"</span>data.gz<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>w<span class="pl-pds">"</span></span>) <span class="pl-k">do</span> tl
        <span class="pl-c1">write</span>(tl, data)
    <span class="pl-k">end</span>

    <span class="pl-c1">run</span>(<span class="pl-c1">tarc</span>(dir) → <span class="pl-s"><span class="pl-pds">"</span>dir.tar<span class="pl-pds">"</span></span>)</pre></div>
<h2 dir="auto"><a id="user-content-predefined-closures" class="anchor" aria-hidden="true" href="#predefined-closures"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Predefined closures</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="    tarc(dir) # take files in input directory and create tar to output stream
    tarx(dir) # read input stream and extract files to empty target directory
    tarxO() # read input stream and concatenate all file contents to output stream
    gzip() # read input stream and write compressed data to output stream
    gunzip() # reverse of gzip
    transcoder(::Codec) # generalization for other kinds of TranscoderStreams
    curl(URL) # download file from URL and write to output stream
    serializer(obj) # write serialized form of input object to output stream
    deserializer() # read input stream and reconstruct serialized object"><pre>    <span class="pl-c1">tarc</span>(dir) <span class="pl-c"><span class="pl-c">#</span> take files in input directory and create tar to output stream</span>
    <span class="pl-c1">tarx</span>(dir) <span class="pl-c"><span class="pl-c">#</span> read input stream and extract files to empty target directory</span>
    <span class="pl-c1">tarxO</span>() <span class="pl-c"><span class="pl-c">#</span> read input stream and concatenate all file contents to output stream</span>
    <span class="pl-c1">gzip</span>() <span class="pl-c"><span class="pl-c">#</span> read input stream and write compressed data to output stream</span>
    <span class="pl-c1">gunzip</span>() <span class="pl-c"><span class="pl-c">#</span> reverse of gzip</span>
    <span class="pl-c1">transcoder</span>(<span class="pl-k">::</span><span class="pl-c1">Codec</span>) <span class="pl-c"><span class="pl-c">#</span> generalization for other kinds of TranscoderStreams</span>
    <span class="pl-c1">curl</span>(URL) <span class="pl-c"><span class="pl-c">#</span> download file from URL and write to output stream</span>
    <span class="pl-c1">serializer</span>(obj) <span class="pl-c"><span class="pl-c">#</span> write serialized form of input object to output stream</span>
    <span class="pl-c1">deserializer</span>() <span class="pl-c"><span class="pl-c">#</span> read input stream and reconstruct serialized object</span></pre></div>
<h2 dir="auto"><a id="user-content-api" class="anchor" aria-hidden="true" href="#api"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>API</h2>
<p dir="auto">To create a user defined task, a function with the signature <code>f(cin::IO, cout::IO, args...)</code> is required.
It can be transformed into a <code>BClosure</code> object</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="        fc = closure(f, args...) # ::BClosure"><pre>        fc <span class="pl-k">=</span> <span class="pl-c1">closure</span>(f, args<span class="pl-k">...</span>) <span class="pl-c"><span class="pl-c">#</span> ::BClosure</span></pre></div>
<p dir="auto">which can be run alone or combined with other closures and input/output specifiers.
The following <code>Base</code> functions are redefined.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="        Base: |, run, pipeline, wait, fetch"><pre>        Base<span class="pl-k">:</span> <span class="pl-k">|</span>, run, pipeline, wait, fetch</pre></div>
<p dir="auto">which are used as in</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="    tl = run(fc::BClosure) # ::TaskChain

    pl = in → fc → gc → hc → out
    pl = pipeline(fc, gc, hc, stdin=in stdout=out) # ::BClosureList

    tl = run(pl::BClosureList) # ::TaskChain"><pre>    tl <span class="pl-k">=</span> <span class="pl-c1">run</span>(fc<span class="pl-k">::</span><span class="pl-c1">BClosure</span>) <span class="pl-c"><span class="pl-c">#</span> ::TaskChain</span>

    pl <span class="pl-k">=</span> <span class="pl-k">in</span> → fc → gc → hc → out
    pl <span class="pl-k">=</span> <span class="pl-c1">pipeline</span>(fc, gc, hc, <span class="pl-c1">stdin</span><span class="pl-k">=</span>in <span class="pl-c1">stdout</span><span class="pl-k">=</span>out) <span class="pl-c"><span class="pl-c">#</span> ::BClosureList</span>

    tl <span class="pl-k">=</span> <span class="pl-c1">run</span>(pl<span class="pl-k">::</span><span class="pl-c1">BClosureList</span>) <span class="pl-c"><span class="pl-c">#</span> ::TaskChain</span></pre></div>
<p dir="auto">The assignments to <code>pl</code> are equivalent.</p>
<p dir="auto">The pipelined tasks are considered finished, when the statically last task in the list terminates.
The calling task can wait for this event with</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="    wait(tl::TaskChain) # ::Nothing"><pre>    <span class="pl-c1">wait</span>(tl<span class="pl-k">::</span><span class="pl-c1">TaskChain</span>) <span class="pl-c"><span class="pl-c">#</span> ::Nothing</span></pre></div>
<p dir="auto">If the last task in the pipeline calculates a value, if can be waited for and obtained by</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="    fetch(tl::TaskChain) # ::Any"><pre>    <span class="pl-c1">fetch</span>(tl<span class="pl-k">::</span><span class="pl-c1">TaskChain</span>) <span class="pl-c"><span class="pl-c">#</span> ::Any</span></pre></div>
<p dir="auto">Both <code>wait</code> and <code>fetch</code> throw <code>TaskFailedException</code> if the last task in the list failed.</p>
<h2 dir="auto"><a id="user-content-implementation" class="anchor" aria-hidden="true" href="#implementation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Implementation</h2>
<p dir="auto">The internal pipes are implemented by <code>ChannelIO &lt;: IO</code> which uses <code>Channel</code> objects to transport data between tasks.
The tasks are spawned on different threads, if multithreading is available (<code>JULIA_NUM_THREADS &gt; 1</code>).
Communication endpoints of the pipeline can be arbitrary <code>IO</code> objects or <code>AbstractString</code>s denoting file names.
The files given as strings are appropriately opened and closed.</p>
<p dir="auto">Element type of <code>TaskChain</code> is <code>BTask</code>, a tagging wrapper around <code>Task</code>. It delegates the most important
methods, like <code>wait</code>, <code>fetch</code>, <code>istask...</code>.</p>
<p dir="auto">The full functionality of <code>Base.pipeline</code> is extended with the integration of <code>Base.Cmd</code> and <code>BClosure</code>.</p>
</article></div>