<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-catindices" class="anchor" aria-hidden="true" href="#catindices"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>CatIndices</h1>
<p dir="auto"><a href="https://travis-ci.org/JuliaArrays/CatIndices.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/e92990683b6e8721e4d94d811b5d5c772fdbdc853ccb984c6d3e77187bf2aee8/68747470733a2f2f7472617669732d63692e6f72672f4a756c69614172726179732f436174496e64696365732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaArrays/CatIndices.jl.svg?branch=master" style="max-width: 100%;"></a>
<a href="http://codecov.io/github/JuliaArrays/CatIndices.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/616dad35884c3bd16bfc54b13361fb874506a0115b8d3018da6261e19377b6f4/687474703a2f2f636f6465636f762e696f2f6769746875622f4a756c69614172726179732f436174496e64696365732e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/JuliaArrays/CatIndices.jl/coverage.svg?branch=master" style="max-width: 100%;"></a>
<a href="https://juliaci.github.io/NanosoldierReports/pkgeval_badges/report.html" rel="nofollow"><img src="https://camo.githubusercontent.com/c9a1d9beadcb7382958360fe27ecbec6f8b3af6e4df553319a86da618755f4a5/68747470733a2f2f6a756c696163692e6769746875622e696f2f4e616e6f736f6c646965725265706f7274732f706b676576616c5f6261646765732f432f436174496e64696365732e737667" alt="PkgEval" data-canonical-src="https://juliaci.github.io/NanosoldierReports/pkgeval_badges/C/CatIndices.svg" style="max-width: 100%;"></a></p>
<p dir="auto">A Julia package for concatenating, growing, and shrinking arrays in
ways that allow control over the resulting axes.</p>
<h1 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h1>
<h2 dir="auto"><a id="user-content-bidirectionalvector" class="anchor" aria-hidden="true" href="#bidirectionalvector"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>BidirectionalVector</h2>
<p dir="auto">These vectors can grow or shrink from either end, and the axes
update correspondingly. In this demo, pay careful attention to the
axes at each step:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using CatIndices

julia&gt; v = BidirectionalVector(rand(3))
CatIndices.BidirectionalVector{Float64} with indices CatIndices.URange(1,3):
 0.32572
 0.250426
 0.834728

julia&gt; append!(v, rand(2))
CatIndices.BidirectionalVector{Float64} with indices CatIndices.URange(1,5):
 0.32572
 0.250426
 0.834728
 0.388788
 0.282573

julia&gt; prepend!(v, rand(3))
CatIndices.BidirectionalVector{Float64} with indices CatIndices.URange(-2,5):
 0.992902
 0.849368
 0.189849
 0.32572
 0.250426
 0.834728
 0.388788
 0.282573

julia&gt; pop!(v)
0.28257294456774673

julia&gt; axes(v)
(CatIndices.URange(-2,4),)

julia&gt; popfirst!(v)
0.9929020233076613

julia&gt; axes(v)
(CatIndices.URange(-1,4),)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> CatIndices

julia<span class="pl-k">&gt;</span> v <span class="pl-k">=</span> <span class="pl-c1">BidirectionalVector</span>(<span class="pl-c1">rand</span>(<span class="pl-c1">3</span>))
CatIndices<span class="pl-k">.</span>BidirectionalVector{Float64} with indices CatIndices<span class="pl-k">.</span><span class="pl-c1">URange</span>(<span class="pl-c1">1</span>,<span class="pl-c1">3</span>)<span class="pl-k">:</span>
 <span class="pl-c1">0.32572</span>
 <span class="pl-c1">0.250426</span>
 <span class="pl-c1">0.834728</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">append!</span>(v, <span class="pl-c1">rand</span>(<span class="pl-c1">2</span>))
CatIndices<span class="pl-k">.</span>BidirectionalVector{Float64} with indices CatIndices<span class="pl-k">.</span><span class="pl-c1">URange</span>(<span class="pl-c1">1</span>,<span class="pl-c1">5</span>)<span class="pl-k">:</span>
 <span class="pl-c1">0.32572</span>
 <span class="pl-c1">0.250426</span>
 <span class="pl-c1">0.834728</span>
 <span class="pl-c1">0.388788</span>
 <span class="pl-c1">0.282573</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">prepend!</span>(v, <span class="pl-c1">rand</span>(<span class="pl-c1">3</span>))
CatIndices<span class="pl-k">.</span>BidirectionalVector{Float64} with indices CatIndices<span class="pl-k">.</span><span class="pl-c1">URange</span>(<span class="pl-k">-</span><span class="pl-c1">2</span>,<span class="pl-c1">5</span>)<span class="pl-k">:</span>
 <span class="pl-c1">0.992902</span>
 <span class="pl-c1">0.849368</span>
 <span class="pl-c1">0.189849</span>
 <span class="pl-c1">0.32572</span>
 <span class="pl-c1">0.250426</span>
 <span class="pl-c1">0.834728</span>
 <span class="pl-c1">0.388788</span>
 <span class="pl-c1">0.282573</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">pop!</span>(v)
<span class="pl-c1">0.28257294456774673</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">axes</span>(v)
(CatIndices<span class="pl-k">.</span><span class="pl-c1">URange</span>(<span class="pl-k">-</span><span class="pl-c1">2</span>,<span class="pl-c1">4</span>),)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">popfirst!</span>(v)
<span class="pl-c1">0.9929020233076613</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">axes</span>(v)
(CatIndices<span class="pl-k">.</span><span class="pl-c1">URange</span>(<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">4</span>),)</pre></div>
<p dir="auto"><code>deleteat!</code> and <code>insert!</code> are not supported, since it is unclear
whether it should shrink/grow from the beginning or end.  To eliminate
many items at the beginning or end of the vector, this package exports
<code>deletehead!(v, n)</code> and <code>deletetail!(v, n)</code>.</p>
<h1 dir="auto"><a id="user-content-concatenation" class="anchor" aria-hidden="true" href="#concatenation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Concatenation</h1>
<p dir="auto">This is still mostly a TODO. For one-dimensional arrays (<code>AbstractVector</code>s),
<code>PinIndices</code> provides a convenient interface for specifying which indices "win":</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; v = vcat(1:3, PinIndices(4:5), 6:10)
10-element OffsetArray(::Array{Int64,1}, -2:7) with eltype Int64 with indices -2:7:
  1
  2
  3
  4
  5
  6
  7
  8
  9
 10

julia&gt; v[1]
4"><pre>julia<span class="pl-k">&gt;</span> v <span class="pl-k">=</span> <span class="pl-c1">vcat</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">3</span>, <span class="pl-c1">PinIndices</span>(<span class="pl-c1">4</span><span class="pl-k">:</span><span class="pl-c1">5</span>), <span class="pl-c1">6</span><span class="pl-k">:</span><span class="pl-c1">10</span>)
<span class="pl-c1">10</span><span class="pl-k">-</span>element <span class="pl-c1">OffsetArray</span>(<span class="pl-k">::</span><span class="pl-c1">Array{Int64,1}</span>, <span class="pl-k">-</span><span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">7</span>) with eltype Int64 with indices <span class="pl-k">-</span><span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">7</span><span class="pl-k">:</span>
  <span class="pl-c1">1</span>
  <span class="pl-c1">2</span>
  <span class="pl-c1">3</span>
  <span class="pl-c1">4</span>
  <span class="pl-c1">5</span>
  <span class="pl-c1">6</span>
  <span class="pl-c1">7</span>
  <span class="pl-c1">8</span>
  <span class="pl-c1">9</span>
 <span class="pl-c1">10</span>

julia<span class="pl-k">&gt;</span> v[<span class="pl-c1">1</span>]
<span class="pl-c1">4</span></pre></div>
<p dir="auto">The array wrapped in <code>PinIndices</code> keeps its own indexes, and everything else adjusts to compensate.</p>
</article></div>