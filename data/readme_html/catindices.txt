<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-catindices" class="anchor" aria-hidden="true" href="#catindices"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>CatIndices</h1>
<p><a href="https://travis-ci.org/JuliaArrays/CatIndices.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/a46c2326ef9fb00750b0d0099aac57b53b479dea/68747470733a2f2f7472617669732d63692e6f72672f4a756c69614172726179732f436174496e64696365732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaArrays/CatIndices.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="http://codecov.io/github/JuliaArrays/CatIndices.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/86af6a7da297d4a98778b22726405b23d185ec4f/687474703a2f2f636f6465636f762e696f2f6769746875622f4a756c69614172726179732f436174496e64696365732e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/JuliaArrays/CatIndices.jl/coverage.svg?branch=master" style="max-width:100%;"></a>
<a href="https://juliaci.github.io/NanosoldierReports/pkgeval_badges/report.html" rel="nofollow"><img src="https://camo.githubusercontent.com/4ef1d7bb0afa943ed5b735ac509450706d68a670/68747470733a2f2f6a756c696163692e6769746875622e696f2f4e616e6f736f6c646965725265706f7274732f706b676576616c5f6261646765732f432f436174496e64696365732e737667" alt="PkgEval" data-canonical-src="https://juliaci.github.io/NanosoldierReports/pkgeval_badges/C/CatIndices.svg" style="max-width:100%;"></a></p>
<p>A Julia package for concatenating, growing, and shrinking arrays in
ways that allow control over the resulting axes.</p>
<h1><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Usage</h1>
<h2><a id="user-content-bidirectionalvector" class="anchor" aria-hidden="true" href="#bidirectionalvector"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>BidirectionalVector</h2>
<p>These vectors can grow or shrink from either end, and the axes
update correspondingly. In this demo, pay careful attention to the
axes at each step:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> CatIndices

julia<span class="pl-k">&gt;</span> v <span class="pl-k">=</span> <span class="pl-c1">BidirectionalVector</span>(<span class="pl-c1">rand</span>(<span class="pl-c1">3</span>))
CatIndices<span class="pl-k">.</span>BidirectionalVector{Float64} with indices CatIndices<span class="pl-k">.</span><span class="pl-c1">URange</span>(<span class="pl-c1">1</span>,<span class="pl-c1">3</span>)<span class="pl-k">:</span>
 <span class="pl-c1">0.32572</span>
 <span class="pl-c1">0.250426</span>
 <span class="pl-c1">0.834728</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">append!</span>(v, <span class="pl-c1">rand</span>(<span class="pl-c1">2</span>))
CatIndices<span class="pl-k">.</span>BidirectionalVector{Float64} with indices CatIndices<span class="pl-k">.</span><span class="pl-c1">URange</span>(<span class="pl-c1">1</span>,<span class="pl-c1">5</span>)<span class="pl-k">:</span>
 <span class="pl-c1">0.32572</span>
 <span class="pl-c1">0.250426</span>
 <span class="pl-c1">0.834728</span>
 <span class="pl-c1">0.388788</span>
 <span class="pl-c1">0.282573</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">prepend!</span>(v, <span class="pl-c1">rand</span>(<span class="pl-c1">3</span>))
CatIndices<span class="pl-k">.</span>BidirectionalVector{Float64} with indices CatIndices<span class="pl-k">.</span><span class="pl-c1">URange</span>(<span class="pl-k">-</span><span class="pl-c1">2</span>,<span class="pl-c1">5</span>)<span class="pl-k">:</span>
 <span class="pl-c1">0.992902</span>
 <span class="pl-c1">0.849368</span>
 <span class="pl-c1">0.189849</span>
 <span class="pl-c1">0.32572</span>
 <span class="pl-c1">0.250426</span>
 <span class="pl-c1">0.834728</span>
 <span class="pl-c1">0.388788</span>
 <span class="pl-c1">0.282573</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">pop!</span>(v)
<span class="pl-c1">0.28257294456774673</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">axes</span>(v)
(CatIndices<span class="pl-k">.</span><span class="pl-c1">URange</span>(<span class="pl-k">-</span><span class="pl-c1">2</span>,<span class="pl-c1">4</span>),)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">popfirst!</span>(v)
<span class="pl-c1">0.9929020233076613</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">axes</span>(v)
(CatIndices<span class="pl-k">.</span><span class="pl-c1">URange</span>(<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">4</span>),)</pre></div>
<p><code>deleteat!</code> and <code>insert!</code> are not supported, since it is unclear
whether it should shrink/grow from the beginning or end.  To eliminate
many items at the beginning or end of the vector, this package exports
<code>deletehead!(v, n)</code> and <code>deletetail!(v, n)</code>.</p>
<h1><a id="user-content-concatenation" class="anchor" aria-hidden="true" href="#concatenation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Concatenation</h1>
<p>This is still mostly a TODO. For one-dimensional arrays (<code>AbstractVector</code>s),
<code>PinIndices</code> provides a convenient interface for specifying which indices "win":</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> v <span class="pl-k">=</span> <span class="pl-c1">vcat</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">3</span>, <span class="pl-c1">PinIndices</span>(<span class="pl-c1">4</span><span class="pl-k">:</span><span class="pl-c1">5</span>), <span class="pl-c1">6</span><span class="pl-k">:</span><span class="pl-c1">10</span>)
<span class="pl-c1">10</span><span class="pl-k">-</span>element <span class="pl-c1">OffsetArray</span>(<span class="pl-k">::</span><span class="pl-c1">Array{Int64,1}</span>, <span class="pl-k">-</span><span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">7</span>) with eltype Int64 with indices <span class="pl-k">-</span><span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">7</span><span class="pl-k">:</span>
  <span class="pl-c1">1</span>
  <span class="pl-c1">2</span>
  <span class="pl-c1">3</span>
  <span class="pl-c1">4</span>
  <span class="pl-c1">5</span>
  <span class="pl-c1">6</span>
  <span class="pl-c1">7</span>
  <span class="pl-c1">8</span>
  <span class="pl-c1">9</span>
 <span class="pl-c1">10</span>

julia<span class="pl-k">&gt;</span> v[<span class="pl-c1">1</span>]
<span class="pl-c1">4</span></pre></div>
<p>The array wrapped in <code>PinIndices</code> keeps its own indexes, and everything else adjusts to compensate.</p>
</article></div>