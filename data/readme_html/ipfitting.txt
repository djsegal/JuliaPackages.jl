<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-ipfitting" class="anchor" aria-hidden="true" href="#ipfitting"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>IPFitting</h1>

<h2 dir="auto"><a id="user-content-basic-usage" class="anchor" aria-hidden="true" href="#basic-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Basic Usage</h2>
<h3 dir="auto"><a id="user-content-step-1-import-dataobservations" class="anchor" aria-hidden="true" href="#step-1-import-dataobservations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Step 1: Import data/observations</h3>
<p dir="auto">To import a database stored as an <code>xyz</code> file, use</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="data = IPFitting.Data.read_xyz(fname)"><pre>data <span class="pl-k">=</span> IPFitting<span class="pl-k">.</span>Data<span class="pl-k">.</span><span class="pl-c1">read_xyz</span>(fname)</pre></div>
<p dir="auto">See <code>?read_xyz</code> for further options. This will return a <code>Vector{Dat}</code> where
each <code>Dat</code> is a container storing the atomistic configurion (<code>JuLIP.Atoms</code>),
the <code>configtype</code> as well as the "DFT observations".</p>
<h3 dir="auto"><a id="user-content-step-2-generate-a-basis" class="anchor" aria-hidden="true" href="#step-2-generate-a-basis"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Step 2: Generate a basis</h3>
<p dir="auto">A basis is defined by</p>
<ul dir="auto">
<li>choice of bond-length or bond-angle PIPs.</li>
<li>space transform</li>
<li>choice of cut-off</li>
<li>body-order</li>
<li>polynomial degree</li>
</ul>
<p dir="auto">For example, using bond-angle PIPs with Morse coordinates and a cosine cut-off
to model Si, we first define a descriptor</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="r0 = rnn(:Si)
rcut = 2.5 * r0
desc = BondAngleDesc(&quot;exp(- (r/$r0 - 1.0))&quot;, CosCut(rcut-1, rcut))"><pre>r0 <span class="pl-k">=</span> <span class="pl-c1">rnn</span>(<span class="pl-c1">:Si</span>)
rcut <span class="pl-k">=</span> <span class="pl-c1">2.5</span> <span class="pl-k">*</span> r0
desc <span class="pl-k">=</span> <span class="pl-c1">BondAngleDesc</span>(<span class="pl-s"><span class="pl-pds">"</span>exp(- (r/<span class="pl-v">$r0</span> - 1.0))<span class="pl-pds">"</span></span>, <span class="pl-c1">CosCut</span>(rcut<span class="pl-k">-</span><span class="pl-c1">1</span>, rcut))</pre></div>
<p dir="auto">We can then generate basis functions using <code>nbpolys</code>, e.g.,</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="#            body-order, descriptor, degree
B4 = nbpolys(4,          desc,       8)"><pre><span class="pl-c"><span class="pl-c">#</span>            body-order, descriptor, degree</span>
B4 <span class="pl-k">=</span> <span class="pl-c1">nbpolys</span>(<span class="pl-c1">4</span>,          desc,       <span class="pl-c1">8</span>)</pre></div>
<p dir="auto">In practise, one would normally specify different cut-offs and space transforms
for different body-orders. Suppose these give descriptors <code>D2, D3, D4</code>, then
a 4-body basis can be constructed via</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="B = [ nbpolys(2, D2, 14); nbpolys(3, D3, 11); nbpolys(4, D4, 8) ]"><pre>B <span class="pl-k">=</span> [ <span class="pl-c1">nbpolys</span>(<span class="pl-c1">2</span>, D2, <span class="pl-c1">14</span>); <span class="pl-c1">nbpolys</span>(<span class="pl-c1">3</span>, D3, <span class="pl-c1">11</span>); <span class="pl-c1">nbpolys</span>(<span class="pl-c1">4</span>, D4, <span class="pl-c1">8</span>) ]</pre></div>
<p dir="auto">For more details and more complex basis sets, see below.</p>
<h3 dir="auto"><a id="user-content-step-3-precompute-a-lsq-system" class="anchor" aria-hidden="true" href="#step-3-precompute-a-lsq-system"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Step 3: Precompute a Lsq system</h3>
<p dir="auto">Once the dft dataset and the basis functions have been specified, the
least-squares system matrix can be assembled. This can be very time-consuming
for high body-orders, large basis sets and large data sets. Therefore this
matrix is stored in a block format that allows us to later re-use it in a variety
of different ways. This is done via</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="db = LsqDB(fname, configs, basis)"><pre>db <span class="pl-k">=</span> <span class="pl-c1">LsqDB</span>(fname, configs, basis)</pre></div>
<ul dir="auto">
<li>The db is stored in two files: <code>fname_info.jld2</code> and <code>fname_kron.h5</code>. In
particular, <code>fname</code> is the path + name of the db, but without ending. E.g,
<code>"~/scratch/nbodyips/W5Bdeg12env"</code>.</li>
<li><code>configs</code> is a <code>Vector{Dat}</code></li>
<li><code>basis</code> is a <code>Vector{&lt;: AbstractCalculator}</code></li>
<li>The command <code>db = LsqDB(fname, configs, basis)</code> evaluates the basis functions,
e.g.,  <code>energy(basis[i], configs[j].at)</code> for all <code>i, j</code>, and stores these values
which make up the lsq matrix.</li>
</ul>
<p dir="auto">To reload a pre-computed lsq system, use <code>LsqDB(fname)</code>. To compute a lsq
system without storing it on disk, use <code>LsqDB("", configs, basis)</code>, i.e.,
pass an empty string as the filename.</p>
<h3 dir="auto"><a id="user-content-step-4-lsq-fit-analyse-the-fitting-errors" class="anchor" aria-hidden="true" href="#step-4-lsq-fit-analyse-the-fitting-errors"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Step 4: Lsq fit, Analyse the fitting errors</h3>
<p dir="auto">The main function to call is
<code>lsqfit(db; kwargs...) -&gt; IP, fitinfo</code>
The system is solved via (variants of) the QR factorisation. See <code>?lsqfit</code>
for details.</p>
<h3 dir="auto"><a id="user-content-step-5-usage" class="anchor" aria-hidden="true" href="#step-5-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Step 5: Usage</h3>
<p dir="auto">The output <code>IP</code> of <code>lsqfit</code> is a <code>JuLIP.AbstractCalculator</code> which supports
<code>energy, forces, virial, site_energies</code>. (todo: write more here, in
particular mention <code>fast</code>)</p>
<h3 dir="auto"><a id="user-content-more-comments" class="anchor" aria-hidden="true" href="#more-comments"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>More comments</h3>
<p dir="auto">there are two functions <code>filter_basis</code> and <code>filter_configs</code> that can be
used to choose a subset of the data and a subset of the basis. For example,
to take only 2B:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="Ib2 = filter_basis(db, b -&gt; (bodyorder(b) &lt; 2))"><pre class="notranslate"><code>Ib2 = filter_basis(db, b -&gt; (bodyorder(b) &lt; 2))
</code></pre></div>
<p dir="auto">See inline documentation for more details.</p>
<h2 dir="auto"><a id="user-content-analysis" class="anchor" aria-hidden="true" href="#analysis"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Analysis</h2>
<h3 dir="auto"><a id="user-content-add-fit-information-to-a-list-of-configurations" class="anchor" aria-hidden="true" href="#add-fit-information-to-a-list-of-configurations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Add fit information to a list of configurations</h3>
<p dir="auto">Suppose <code>configs::Vector{Dat}</code> is a list of configurations, then we can
add fitting error information by calling</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="add_fits!(myIP, configs, fitkey=&quot;myIP&quot;)"><pre class="notranslate"><code>add_fits!(myIP, configs, fitkey="myIP")
</code></pre></div>
<p dir="auto">This will evaluate all observations stored in configs with the new IP and store
them in <code>configs[n].info[fitkey]["okey"]</code>. These observation values can then
be used to compute RMSE, produce scatter plots, etc.</p>
<p dir="auto">This calculation can take a while. If <code>myIP</code> has just been fitted using <code>lsqfit</code>
then there is a quicker way to generate the fitting errors, but this is not
yet implemented. TODO: implement this!</p>
<h2 dir="auto"><a id="user-content-hooks" class="anchor" aria-hidden="true" href="#hooks"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Hooks</h2>
</article></div>