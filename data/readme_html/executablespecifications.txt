<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-executablespecifications" class="anchor" aria-hidden="true" href="#executablespecifications"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>ExecutableSpecifications</h1>
<p><a href="https://travis-ci.org/erikedin/ExecutableSpecifications.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/7ba7a3b44a9817ae7cd5dd8918389607092317ef/68747470733a2f2f7472617669732d63692e6f72672f6572696b6564696e2f45786563757461626c6553706563696669636174696f6e732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/erikedin/ExecutableSpecifications.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="http://codecov.io/github/erikedin/ExecutableSpecifications.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/bbf37296312cc5dacd6382e3c713857fbf129847/687474703a2f2f636f6465636f762e696f2f6769746875622f6572696b6564696e2f45786563757461626c6553706563696669636174696f6e732e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/erikedin/ExecutableSpecifications.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
<p>BDD is an acronym for <em>Behaviour Driven Development</em>. It is a process for creating and verifying
requirements, written in such a way that they can be executed as code. This package aims to be a
tool for executing such requirements, and creating reports.</p>
<p>This package is in the early stages of development, and has only minimal functionality.</p>
<h1><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h1>
<p>Specifications are written in the Gherkin format, such as</p>
<div class="highlight highlight-text-gherkin-feature"><pre><span class="pl-k">Feature</span>:<span class="pl-s"> Making coffee</span>

    <span class="pl-k">Scenario</span>:<span class="pl-s"> Making a cup of coffee</span>
        <span class="pl-k">Given </span>that there is a cup in the coffee machine
         <span class="pl-k">When </span>the <span class="pl-s">"Coffee"</span> button is pressed
         <span class="pl-k">Then </span>the cup is filled with coffee</pre></div>
<p>For each <code>Given</code>, <code>When</code>, and <code>Then</code> line, a corresponding method is written, which is executed when
that line is reached.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> ExecutableSpecifications
<span class="pl-k">using</span> CoffeeMachine

<span class="pl-en">hascoffee</span>(cup<span class="pl-k">::</span><span class="pl-c1">Cup</span>) <span class="pl-k">=</span> cup[<span class="pl-c1">:coffee</span>] <span class="pl-k">&gt;</span> <span class="pl-c1">0.0</span>

<span class="pl-c1">@given</span> <span class="pl-s"><span class="pl-pds">"</span>that there is a cup in the coffee machine<span class="pl-pds">"</span></span> <span class="pl-k">begin</span>
    cup <span class="pl-k">=</span> <span class="pl-c1">Cup</span>()
    machine <span class="pl-k">=</span> <span class="pl-c1">Machine</span>()

    <span class="pl-c1">cupisinthemachine</span>(machine, cup)

    context[<span class="pl-c1">:cup</span>] <span class="pl-k">=</span> cup
    context[<span class="pl-c1">:machine</span>] <span class="pl-k">=</span> machine
<span class="pl-k">end</span>

<span class="pl-c1">@when</span> <span class="pl-s"><span class="pl-pds">"</span>the <span class="pl-cce">\"</span>Coffee<span class="pl-cce">\"</span> button is pressed<span class="pl-pds">"</span></span> <span class="pl-k">begin</span>
    machine <span class="pl-k">=</span> context[<span class="pl-c1">:machine</span>]
    <span class="pl-c1">coffeewaspressed</span>(machine)
<span class="pl-k">end</span>

<span class="pl-c1">@then</span> <span class="pl-s"><span class="pl-pds">"</span>the cup is filled with coffee<span class="pl-pds">"</span></span> <span class="pl-k">begin</span>
    cup <span class="pl-k">=</span> context[<span class="pl-c1">:cup</span>]
    <span class="pl-c1">@expect</span> <span class="pl-c1">hascoffee</span>(cup)
<span class="pl-k">end</span></pre></div>
<p>Feature files have extension <code>.feature</code>, and are stored in the <code>features</code> directory (see
"Current state" for current limitations), and step definitions (the executable code) have the
extension <code>.jl</code> and are stored in <code>features/steps</code>.</p>
<h1><a id="user-content-example-project" class="anchor" aria-hidden="true" href="#example-project"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example project</h1>
<p>The project <a href="https://github.com/erikedin/CoffeeMachine.jl">CoffeeMachine.jl</a> is an example of how to
use ExecutableSpecifications.jl.</p>
<h1><a id="user-content-running" class="anchor" aria-hidden="true" href="#running"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Running</h1>
<p>Run the command line tool <code>runspec.jl</code> from the directory containing the <code>features</code> directory, or
from the Julia REPL with</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> ExecutableSpecifications
julia<span class="pl-k">&gt;</span> <span class="pl-c1">runspec</span>()</pre></div>
<p>See "Current state" for limitations.</p>
<h1><a id="user-content-julia-07-and-06" class="anchor" aria-hidden="true" href="#julia-07-and-06"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Julia 0.7 and 0.6</h1>
<p>The master branch for this package is now for Julia 0.7. All development will be for 0.7 going
forward.</p>
<p>If you require this package for Julia 0.6, there is a branch <code>julia-release-0.6</code>. This is behind
in features, and will only be updated on demand.</p>
<h1><a id="user-content-current-state" class="anchor" aria-hidden="true" href="#current-state"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Current state</h1>
<p>The package has minimal functionality, but is under active development.</p>
<p>These are some current limitations, that will be lifted as development progresses:</p>
<ul>
<li>
<p>Reads feature and step definition files from a single hardcoded directory.</p>
<p>Today only the directory <code>features</code> is searched for feature files. Step files are only read from
<code>features/steps/*.jl</code>. Going forward, all feature files and all step files will be read of
course.</p>
</li>
<li>
<p>Presenting the results of scenarios is very rudimentary.</p>
</li>
<li>
<p>No setup or teardown functions.</p>
</li>
<li>
<p>No variables in step definition strings</p>
<p>One would like to be able to define a variable in a step definition like
<code>@given "some value {foo}" begin</code>. Without this, scenario outlines may become difficult to use,
since you have to define a separate step definition for each value used in the outline.</p>
</li>
</ul>
<h1><a id="user-content-license" class="anchor" aria-hidden="true" href="#license"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>License</h1>
<p>ExecutableSpecifications.jl is licensed under the Apache License version 2.0.</p>
</article></div>