<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-ispurelyimmutablejl" class="anchor" aria-hidden="true" href="#ispurelyimmutablejl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>IsPurelyImmutable.jl</h1>
<p><a href="https://travis-ci.com/RelationalAI-oss/IsPurelyImmutable.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/bf9a94a3b1459ebe18be98e32109b3a1c538a7b07392e37de5679c2b33fa2a8e/68747470733a2f2f7472617669732d63692e636f6d2f52656c6174696f6e616c41492d6f73732f4973507572656c79496d6d757461626c652e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/RelationalAI-oss/IsPurelyImmutable.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p>This package simply provides a small trait function, <code>is_purely_immutable(x)</code>, which checks
if a value is deeply, purely (i.e. recursively), logically immutable.</p>
<p>A purely immutable value can never change, and thus is safe to use in purely functional
datastructures.</p>
<p>This is needed as a separate concept from <code>Base.isimmutable()</code>, since that refers only to
whether a value is an instance of an immutable struct in julia, but this is neither
necessary nor sufficient to determine whether a value can logically change from its current
value.</p>
<p>As shown here, one shouldnt use <code>isimmutable</code> to detect whether a value can change:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; struct S x end

julia&gt; s = S([]); s1 = deepcopy(s)
S(Any[])

julia&gt; isimmutable(s1), s1.x == s.x
(true, true)

julia&gt; push!(s.x, 10)
1-element Array{Any,1}:
 10

julia&gt; s1.x == s.x
false
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">struct</span> S x <span class="pl-k">end</span>

julia<span class="pl-k">&gt;</span> s <span class="pl-k">=</span> <span class="pl-c1">S</span>([]); s1 <span class="pl-k">=</span> <span class="pl-c1">deepcopy</span>(s)
<span class="pl-c1">S</span>(Any[])

julia<span class="pl-k">&gt;</span> <span class="pl-c1">isimmutable</span>(s1), s1<span class="pl-k">.</span>x <span class="pl-k">==</span> s<span class="pl-k">.</span>x
(<span class="pl-c1">true</span>, <span class="pl-c1">true</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">push!</span>(s<span class="pl-k">.</span>x, <span class="pl-c1">10</span>)
<span class="pl-c1">1</span><span class="pl-k">-</span>element Array{Any,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">10</span>

julia<span class="pl-k">&gt;</span> s1<span class="pl-k">.</span>x <span class="pl-k">==</span> s<span class="pl-k">.</span>x
<span class="pl-c1">false</span></pre></div>
<p>Instead, you can use <code>is_purely_immutable</code> to accurately check whether a value can ever change:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; struct S x end

julia&gt; is_purely_immutable(S([]))  # false, since S.x can be mutated (as above)
false

julia&gt; is_purely_immutable(S(1))  # true, since S(1) is recursively immutable
true
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">struct</span> S x <span class="pl-k">end</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">is_purely_immutable</span>(<span class="pl-c1">S</span>([]))  <span class="pl-c"><span class="pl-c">#</span> false, since S.x can be mutated (as above)</span>
<span class="pl-c1">false</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">is_purely_immutable</span>(<span class="pl-c1">S</span>(<span class="pl-c1">1</span>))  <span class="pl-c"><span class="pl-c">#</span> true, since S(1) is recursively immutable</span>
<span class="pl-c1">true</span></pre></div>
<p>There are also some values implemented as <code>mutable struct</code>s, but which can never be modified,
such as Strings (for more: <a href="https://github.com/JuliaLang/julia/issues/30210">https://github.com/JuliaLang/julia/issues/30210</a>), and
<code>is_purely_immutable</code> handles them correctly:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; is_purely_immutable(&quot;strings are logically immutable&quot;)
true
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">is_purely_immutable</span>(<span class="pl-s"><span class="pl-pds">"</span>strings are logically immutable<span class="pl-pds">"</span></span>)
<span class="pl-c1">true</span></pre></div>
<h2><a id="user-content-extending-for-custom-types" class="anchor" aria-hidden="true" href="#extending-for-custom-types"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Extending for custom types</h2>
<p>If you have a type whose values aren't handled correctly by the default implementations
(e.g. an immutable struct that is actually somehow mutable (such as FixedSizeArrays), or a
mutable struct whose accessors are all disabled), you should extend this function with a
method for your type. For example:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="IsPurelyImmutable.is_purely_immutable(::MyType) = true
"><pre>IsPurelyImmutable<span class="pl-k">.</span><span class="pl-en">is_purely_immutable</span>(<span class="pl-k">::</span><span class="pl-c1">MyType</span>) <span class="pl-k">=</span> <span class="pl-c1">true</span></pre></div>
<h2><a id="user-content-docstring" class="anchor" aria-hidden="true" href="#docstring"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Docstring</h2>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="is_purely_immutable(val) :: Bool
"><pre><code>is_purely_immutable(val) :: Bool
</code></pre></div>
<p>A trait function that returns true if a value is purely immutable, meaning its value can
never change in any way from the value it currently holds, and thus is safe to use in purely
functional datastructures. This requires a value to be immutable itself, and <em>recursively</em>
purely immutable for all of its fields.</p>
<p>Users should override this function to set the trait for their own types.</p>
<p>NOTE: All methods of this function must be "pure functions", meaning they cannot depend on
any outside state, and must always return the same result for a given value.</p>
<p>The default method returns true if:</p>
<ul>
<li>The value is an unmodifiable literal (Int, String, etc), or</li>
<li>The value's type is a julia <code>immutable</code> type, that recursively only contains other
<code>immutable</code> types, or</li>
<li>The value is an empty mutable type (has no fields).</li>
</ul>
<p>Note that (like
<a href="https://docs.julialang.org/en/v1/base/base/#Base.isimmutable" rel="nofollow"><code>Base.isimmutable</code></a>)
this function works on <em>values</em>, not types. This
may be counter-intuitive, but immutability is indeed a per-instance property: e.g. an
immutable type with an abstract field may be constructed with a mutable or immutable value;
or a user defined type may be able to "freze" and become immutable at runtime (e.g.
Mutable-Until-Shared types); and finally because (like <code>isimmutable</code>) it is only meaningful
for concrete types. See the Julia Docs section on <a href="https://docs.julialang.org/en/v1/manual/types/#Mutable-Composite-Types-1" rel="nofollow">Mutable Composite
Types</a> for more on
the meaning of <code>immutable</code> in Julia.</p>
</article></div>