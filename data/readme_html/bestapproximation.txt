<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 align="center" dir="auto"><a id="user-content-----bestapproximationjl" class="anchor" aria-hidden="true" href="#----bestapproximationjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>
    BestApproximation.jl
</h1>

<p dir="auto"><a href="https://jakewilliami.github.io/BestApproximation.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/jakewilliami/BestApproximation.jl/actions?query=workflow%3ACI"><img src="https://github.com/invenia/PkgTemplates.jl/workflows/CI/badge.svg" alt="CI" style="max-width: 100%;"></a>
<a href="https://github.com/invenia/BlueStyle"><img src="https://camo.githubusercontent.com/c18fbaa52d94d16b90b19701fc90d289b8a5bb920c74c79bab200b14e75420a4/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c75652d3434393564312e737667" alt="Code Style: Blue" data-canonical-src="https://img.shields.io/badge/code%20style-blue-4495d1.svg" style="max-width: 100%;"></a>
<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/7fbf197c8358c4828cfaf8739134a64c1e152bdb985c69dfb7e01461d517de73/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f7374617475732d6d61747572696e672d677265656e"><img src="https://camo.githubusercontent.com/7fbf197c8358c4828cfaf8739134a64c1e152bdb985c69dfb7e01461d517de73/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f7374617475732d6d61747572696e672d677265656e" alt="Project Status" data-canonical-src="https://img.shields.io/badge/status-maturing-green" style="max-width: 100%;"></a></p>
<p dir="auto">Given a potentially very large number, it is sometimes nice to approximate this.  To find the "best", or "nicest" approximation, usually we restrict the base of an exponent, so that your given number <code>n</code> is approximately <code>b^x</code>.  The idea is that <code>b^x</code> is nicer looking than your input.</p>
<p dir="auto">This is a very small package exporting a function to find <code>b</code> and <code>x</code>, given a range <code>b</code> can be in.</p>
<h2 dir="auto"><a id="user-content-quick-start" class="anchor" aria-hidden="true" href="#quick-start"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Quick Start</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using BestApproximation

julia&gt; best_approx(123, 20)  # The second parameter is the maximum number for the base (i.e., it returns 11^2, with 11 &lt; 20).  You can also specify the range of the exponent, but this variant is much slower.
(11, 2)

julia&gt; ^(best_approx(123, 20)...)  # Notice how 11^2 approximates to 121---only 2 numbers off the given number.
121"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> BestApproximation

julia<span class="pl-k">&gt;</span> <span class="pl-c1">best_approx</span>(<span class="pl-c1">123</span>, <span class="pl-c1">20</span>)  <span class="pl-c"><span class="pl-c">#</span> The second parameter is the maximum number for the base (i.e., it returns 11^2, with 11 &lt; 20).  You can also specify the range of the exponent, but this variant is much slower.</span>
(<span class="pl-c1">11</span>, <span class="pl-c1">2</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-k">^</span>(<span class="pl-c1">best_approx</span>(<span class="pl-c1">123</span>, <span class="pl-c1">20</span>)<span class="pl-k">...</span>)  <span class="pl-c"><span class="pl-c">#</span> Notice how 11^2 approximates to 121---only 2 numbers off the given number.</span>
<span class="pl-c1">121</span></pre></div>
</article></div>