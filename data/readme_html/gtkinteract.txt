<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-gtkinteract" class="anchor" aria-hidden="true" href="#gtkinteract"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>GtkInteract</h1>
<p dir="auto"><a href="https://travis-ci.org/jverzani/GtkInteract.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/2ceba1f62f404e597db96f7034f7dfa7f9dfa6efa3580ca7fefb4b39b0730863/68747470733a2f2f7472617669732d63692e6f72672f6a7665727a616e692f47746b496e7465726163742e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/jverzani/GtkInteract.jl.svg?branch=master" style="max-width: 100%;"></a></p>
<blockquote>
<p dir="auto">This currently requires the <code>master</code> branch of both <code>Reactive</code> and <code>Interact</code>.</p>
</blockquote>
<p dir="auto">The <a href="https://github.com/JuliaLang/Interact.jl"><code>Interact</code></a> package
brings interactive widgets to <code>IJulia</code> notebooks. In particular, the
<code>@manipulate</code> macro makes it trivial to define simple interactive
graphics.  <code>Interact</code> can animate graphics using <code>Gadfly</code>, <code>PyPlot</code>,
or <code>Winston</code>. For more fluid graphical animations, the
<a href="https://github.com/shashi/Patchwork.jl"><code>Patchwork</code></a> package can be
used to efficiently manipulate SVG graphics, including those created
through <code>Gadfly</code>,</p>
<p dir="auto">The <code>GtkInteract</code> package modifies <code>Interact</code>'s <code>@manipulate</code> macro to
allow interactive widgets from the command-line REPL using the <code>Gtk</code>
package for the widget toolkit. This package then allows for similarly
easy interactive graphics from the command line. It is limited to
those packages that can write to a cairo backend. These include <code>Immerse</code> (which
means <code>Gadfly</code> graphics can be used) and <code>Winston</code>. (The <code>Plots</code> package may not work, as the <code>immerse</code> backend is deprecated.)
Plotting packages could also write output to graphic files which can be shown.</p>
<p dir="auto">The basic syntax is the same as for <code>Interact</code>. For example,</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="using GtkInteract, Immerse
@manipulate for ϕ = 0:π/16:4π, f = Dict(:sin=&gt;sin, :cos=&gt;cos)
    plot(θ -&gt; f(θ + ϕ), 0, 25)
end"><pre class="notranslate"><code>using GtkInteract, Immerse
@manipulate for ϕ = 0:π/16:4π, f = Dict(:sin=&gt;sin, :cos=&gt;cos)
    plot(θ -&gt; f(θ + ϕ), 0, 25)
end
</code></pre></div>
<p dir="auto">This produces a layout along the lines of:</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/ce0a3fa50ee6666a6bb0d47aa17a733b1f97aa41cba1a477022bfee3317a3a5b/687474703a2f2f692e696d6775722e636f6d2f314d69796e58662e706e67"><img src="https://camo.githubusercontent.com/ce0a3fa50ee6666a6bb0d47aa17a733b1f97aa41cba1a477022bfee3317a3a5b/687474703a2f2f692e696d6775722e636f6d2f314d69796e58662e706e67" alt="Imgur" data-canonical-src="http://i.imgur.com/1MiynXf.png" style="max-width: 100%;"></a></p>
<p dir="auto">[But wait! This example doesn't currently work under v0.5 of <code>Julia</code> as the function values in the toggle buttons cause issues. This should be fixed soon. But until then you can work around this if you want by using a new type, for example</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="type MyType f end
(f::MyType)(args...;kwargs...) = f.f(args...; kwargs...)"><pre class="notranslate"><code>type MyType f end
(f::MyType)(args...;kwargs...) = f.f(args...; kwargs...)
</code></pre></div>
<p dir="auto">and then in the above use</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="f = Dict(:sin=&gt;MyType(sin), :cos=&gt;MyType(cos))"><pre class="notranslate"><code>f = Dict(:sin=&gt;MyType(sin), :cos=&gt;MyType(cos))
</code></pre></div>
<p dir="auto">]</p>
<p dir="auto">Using <code>Immerse</code> directly is also possible:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="using GtkInteract, Immerse
@manipulate for ϕ = 0:π/16:4π, f = Dict(:sin=&gt;sin, :cos=&gt;cos)
    xs = linspace(0, 25)
    ys = map(θ -&gt; f(θ + ϕ), xs)
    Immerse.plot(x=xs, y=ys)
end"><pre class="notranslate"><code>using GtkInteract, Immerse
@manipulate for ϕ = 0:π/16:4π, f = Dict(:sin=&gt;sin, :cos=&gt;cos)
    xs = linspace(0, 25)
    ys = map(θ -&gt; f(θ + ϕ), xs)
    Immerse.plot(x=xs, y=ys)
end
</code></pre></div>
<p dir="auto">When used directly, the figure includes the toolbar features provided by <code>Immerse</code>.</p>
<h2 dir="auto"><a id="user-content-text-output" class="anchor" aria-hidden="true" href="#text-output"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Text output</h2>
<p dir="auto">Text output can also be displayed (though not as nicely as in <code>IJulia</code> due to a lack of HTML support):</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="using GtkInteract, SymPy
x = symbols(&quot;x&quot;)
@manipulate for n=1:5
   a = diff(sin(x^2), x, n)
   SymPy.jprint(a)
end"><pre class="notranslate"><code>using GtkInteract, SymPy
x = symbols("x")
@manipulate for n=1:5
   a = diff(sin(x^2), x, n)
   SymPy.jprint(a)
end
</code></pre></div>
<p dir="auto">The basic idea is that an output widget is chosen based on the return
value of the evaluation of the block within the <code>@manipulate</code>
macro. Returning a value of <code>nothing</code> will suppress any output widget
being chosen. In this case, the body should have side effects, such as
explicitly creating a graph. Some of the provided <code>examples</code>
illustrate why this might be of interest.</p>
<h2 dir="auto"><a id="user-content-basic-widgets" class="anchor" aria-hidden="true" href="#basic-widgets"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Basic widgets</h2>
<p dir="auto">The basic widgets can also be used by hand to create simple GUIs:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="using GtkInteract

w = mainwindow(title=&quot;Simple test&quot;)
n = slider(1:10, label=&quot;n&quot;)
m = slider(11:20, label=&quot;m&quot;)
cg = cairographic()

append!(w, [n, m, cg])		# layout widgets"><pre class="notranslate"><code>using GtkInteract

w = mainwindow(title="Simple test")
n = slider(1:10, label="n")
m = slider(11:20, label="m")
cg = cairographic()

append!(w, [n, m, cg])		# layout widgets
</code></pre></div>
<p dir="auto">More complicated layouts are possible using a few layouts similar to those in the <code>Escher</code> package:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="window(vbox(hbox(n, m),
            grow(cg)),
       title=&quot;Some title&quot;)"><pre class="notranslate"><code>window(vbox(hbox(n, m),
            grow(cg)),
       title="Some title")
</code></pre></div>
<p dir="auto">We can use <code>Reactive.map</code>to propagate changes in the controls to update the graphic window:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="map(n,m) do n,m
  push!(cg, plot(sin, n*pi, m*pi))
end"><pre class="notranslate"><code>map(n,m) do n,m
  push!(cg, plot(sin, n*pi, m*pi))
end
</code></pre></div>
<p dir="auto">This basic usage follows this pattern: we map over the input widgets
and within the function passed to map (through the <code>do</code> notation
above), we <code>push!</code> some combination of the values onto one or more
output widgets, such as <code>cg</code> above. The <code>@manipulate</code> macro basically
figures out an output widget from the last value found in the code
block and pushes that value onto the output widget.</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">Until this package lands in <code>Julia</code>'s METADATA it should be installed via "cloning":</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="Pkg.clone(&quot;https://github.com/jverzani/GtkInteract.jl&quot;)"><pre class="notranslate"><code>Pkg.clone("https://github.com/jverzani/GtkInteract.jl")
</code></pre></div>
<p dir="auto">This package requires <a href="https://github.com/JuliaLang/Gtk.jl">Gtk</a> (for
GTK+ 3, not GTK+ 2). See that page for installation notes.</p>
<h2 dir="auto"><a id="user-content-using-with-pyplot" class="anchor" aria-hidden="true" href="#using-with-pyplot"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Using with PyPlot</h2>
<p dir="auto">[This is currently broken on a mac, segfaulting with the interactivity!]</p>
<p dir="auto">There is experimental support for plotting with PyPlot. Using <code>PyPlot</code>
requires an extra wrapper function, called <code>GtkInteract.withfig</code>. (The <code>withfig</code>
function is defined in  <code>PyPlot</code> and modified here, hence the module qualification.)</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="using GtkInteract, PyPlot

f = figure()
@manipulate for n in 1:10, m in 1:10
    GtkInteract.withfig(f) do
      ts = linspace(0, 2*n*m*pi, 2500)
      xs = [sin(m*t) for t in ts]
      ys = [cos(n*t) for t in ts]
      PyPlot.plot(xs, ys)
    end
end"><pre class="notranslate"><code>using GtkInteract, PyPlot

f = figure()
@manipulate for n in 1:10, m in 1:10
    GtkInteract.withfig(f) do
      ts = linspace(0, 2*n*m*pi, 2500)
      xs = [sin(m*t) for t in ts]
      ys = [cos(n*t) for t in ts]
      PyPlot.plot(xs, ys)
    end
end
</code></pre></div>
<p dir="auto">It can be a bit slower, as this does not draw onto a canvas, but
rather creates an image file and displays that on each update.  In the
background <code>pygui(false)</code> is called. Not doing so leads to a crash on
some machines.</p>
<p dir="auto">(To copy-and-paste code that works with <code>Interact</code> simply requires some local definition such as <code>withfig=GtkInteract.withfig</code>.)</p>
<h2 dir="auto"><a id="user-content-resource-management-signal-protection-and-cleanup" class="anchor" aria-hidden="true" href="#resource-management-signal-protection-and-cleanup"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Resource management: Signal protection and cleanup</h2>
<p dir="auto">A <code>MainWindow</code> has a field, <code>refs</code>, to which you can <code>push!</code> any
Reactive signals that you want to preserve for the lifetime of the
window. Upon destroying the window, these signals are <code>close</code>d.
Timers like <code>fps</code> are particularly important to "register" with
<code>refs</code>: otherwise, you may keep using CPU resources even after you
close the window, until the next garbage-collection event.</p>
<p dir="auto">Example:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using GtkInteract, Reactive
frametimer = fps(10)
w = mainwindow()
push!(w.refs, frametimer)"><pre><span class="pl-k">using</span> GtkInteract, Reactive
frametimer <span class="pl-k">=</span> <span class="pl-c1">fps</span>(<span class="pl-c1">10</span>)
w <span class="pl-k">=</span> <span class="pl-c1">mainwindow</span>()
<span class="pl-c1">push!</span>(w<span class="pl-k">.</span>refs, frametimer)</pre></div>
<p dir="auto">Now if you <code>display</code> <code>w</code>, and then close the window, <code>frametimer</code> will
no longer be active.</p>
<h2 dir="auto"><a id="user-content-widget-summary" class="anchor" aria-hidden="true" href="#widget-summary"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Widget summary</h2>
<p dir="auto">In addition to the widgets in <code>Interact</code>, the following new widgets are provided:</p>
<ul dir="auto">
<li><code>buttongroup</code>, <code>selectlist</code> (just a renamed <code>Interact.select</code>)</li>
<li><code>cairographic</code>, <code>immersefigure</code>, <code>textarea</code>, <code>label</code>, <code>progress</code></li>
<li><code>icon</code>, <code>separator</code>, <code>tooltip</code></li>
<li><code>size</code>, <code>width</code>, <code>height</code>, <code>vskip</code>, <code>hskip</code></li>
<li><code>grow</code>, <code>shrink</code>, <code>flex</code></li>
<li><code>align</code>, <code>halign</code>, <code>valign</code></li>
<li><code>padding</code></li>
<li><code>vbox</code>, <code>hbox</code>, <code>tabs</code>, <code>formlayout</code></li>
<li><code>toolbar</code>, <code>menu</code></li>
<li><code>window</code>, <code>mainwindow</code></li>
<li><code>messagebox</code>, <code>confirmbox</code>, <code>inputbox</code>, <code>openfile</code>, <code>savefile</code>, <code>selectdir</code></li>
</ul>
</article></div>