<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-rimu" class="anchor" aria-hidden="true" href="#rimu"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Rimu</h1>
<p><a href="https://joachimbrand.github.io/Rimu.jl/" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://joachimbrand.github.io/Rimu.jl/dev/" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a></p>
<p><em>Random Integrators for many-body quantum systems</em></p>
<p>The grand aim is to develop a toolbox for many-body quantum systems that can be
represented by a Hamiltonian in second quantisation language. Currently there
are tools to find the ground state with FCIQMC or with a Lanczos algorithm
(using KrylovKit for small Hilbert spaces). Later, we may add tools to solve the
time-dependent Schr√∂dinger equation and Master equations for open system
time evolution.</p>
<p><strong>Concept:</strong> Joachim Brand and Elke Pahl.</p>
<p><strong>Contributors:</strong> Joachim Brand, Elke Pahl, Mingrui Yang, Matija Cufar.</p>
<p>Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).</p>
<h3><a id="user-content-install-rimu" class="anchor" aria-hidden="true" href="#install-rimu"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Install <code>Rimu</code></h3>
<p><code>Rimu</code> can be installed with the package manager directly from the github
repository. Either hit the <code>]</code> key at the Julia REPL to get into <code>Pkg</code> mode and
type</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="pkg&gt; add https://github.com/joachimbrand/Rimu.jl#master
"><pre lang="julia-repl"><code>pkg&gt; add https://github.com/joachimbrand/Rimu.jl#master
</code></pre></div>
<p>where <code>master</code> can be exchanged with the name of the desired git branch.
Alternatively, use</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt; using Pkg; Pkg.add(PackageSpec(url=&quot;https://github.com/joachimbrand/Rimu.jl&quot;, rev=&quot;master&quot;))
"><pre lang="julia-repl"><code>julia&gt; using Pkg; Pkg.add(PackageSpec(url="https://github.com/joachimbrand/Rimu.jl", rev="master"))
</code></pre></div>
<h3><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h3>
<p>The package is now installed and can be imported with</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt; using Rimu
"><pre lang="julia-repl"><code>julia&gt; using Rimu
</code></pre></div>
<p>Rimu offers a number of tools for representing Hamiltonians (see
<a href="@ref"><code>Hamiltonians</code></a>) and state vectors / wave functions (see <a href="@ref"><code>DictVectors</code></a>)
as well as algorithms to find the ground state, e.g. <a href="@ref"><code>lomc!</code></a>.</p>
<h3><a id="user-content-references" class="anchor" aria-hidden="true" href="#references"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>References:</h3>
<p>The code implements the FCIQMC algorithm described in</p>
<ul>
<li>"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space", G. H. Booth, A. J. W. Thom, A. Alavi, <a href="https://doi.org/10.1063/1.3193710" rel="nofollow"><em>J. Chem. Phys.</em> <strong>131</strong>, 054106 (2009)</a>.</li>
</ul>
<p>Scientific papers using the <code>Rimu</code> code:</p>
<ul>
<li>"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo", J. Brand, M. Yang, E. Pahl, <a href="http://arxiv.org/abs/2103.07800" rel="nofollow">arXiv:2103.07800</a> (2021).</li>
<li>"Improved walker population control for full configuration interaction quantum Monte Carlo", M. Yang, E. Pahl, J. Brand, <a href="https://doi.org/10.1063/5.0023088" rel="nofollow"><em>J. Chem. Phys.</em> <strong>153</strong>, 170143 (2020)</a>; DOI: 10.1063/5.0023088; <a href="https://arxiv.org/abs/2008.01927" rel="nofollow">arXiv:2008.01927</a>.</li>
</ul>
<p><strong>References:</strong>
The code implements the FCIQMC algorithm described in</p>
<ul>
<li>"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space", G. H. Booth, A. J. W. Thom, A. Alavi, <a href="https://doi.org/10.1063/1.3193710" rel="nofollow"><em>J. Chem. Phys.</em> <strong>131</strong>, 054106 (2009)</a>.</li>
</ul>
<p>Scientific papers using the <code>Rimu</code> code:</p>
<ul>
<li>"Improved walker population control for full configuration interaction quantum Monte Carlo", M. Yang, E. Pahl, J. Brand, <a href="https://doi.org/10.1063/5.0023088" rel="nofollow"><em>J. Chem. Phys.</em> <strong>153</strong>, 170143 (2020)</a>; DOI: 10.1063/5.0023088; <a href="https://arxiv.org/abs/2008.01927" rel="nofollow">arXiv:2008.01927</a>.</li>
</ul>
<p>For more information, consult the <a href="https://joachimbrand.github.io/Rimu.jl/dev/" rel="nofollow">documentation</a>.</p>
</article></div>