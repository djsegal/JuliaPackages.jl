<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-effects" class="anchor" aria-hidden="true" href="#effects"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Effects</h1>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="] add IRTools#master
] add https://github.com/MikeInnes/Effects.jl
"><pre>] add IRTools<span class="pl-c"><span class="pl-c">#</span>master</span>
] add https<span class="pl-k">:</span><span class="pl-k">//</span>github<span class="pl-k">.</span>com<span class="pl-k">/</span>MikeInnes<span class="pl-k">/</span>Effects<span class="pl-k">.</span>jl</pre></div>
<p>An implementation of effect handlers in Julia (aka algebraic effects, free monads etc). Effects can be used for a lot of things (continuations, exceptions, coroutines, backtracking ...). This package aims to provide a way to define effects generally, as well as important examples.</p>
<p>[Caveat Emptor: Julia's compiler is not designed to handle this kind of code and reserves the right to complain / be slow. Also, while everything theoretically composes nicely, this is not thoroughly tested.]</p>
<h2><a id="user-content-the-list-monad" class="anchor" aria-hidden="true" href="#the-list-monad"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>The List Monad</h2>
<p>The list monad allows you to write functions as if they return a single result, while actually returning all possible results.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; list() do
         choose(1:3)
       end
3-element Array{Int64,1}:
 1
 2
 3

julia&gt; list() do
         (choose(1:3), choose(1:3))
       end
9-element Array{Tuple{Int64,Int64},1}:
 (1, 1)
 (1, 2)
 (1, 3)
 (2, 1)
 (2, 2)
 ...
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">list</span>() <span class="pl-k">do</span>
         <span class="pl-c1">choose</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">3</span>)
       <span class="pl-k">end</span>
<span class="pl-c1">3</span><span class="pl-k">-</span>element Array{Int64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">1</span>
 <span class="pl-c1">2</span>
 <span class="pl-c1">3</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">list</span>() <span class="pl-k">do</span>
         (<span class="pl-c1">choose</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">3</span>), <span class="pl-c1">choose</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">3</span>))
       <span class="pl-k">end</span>
<span class="pl-c1">9</span><span class="pl-k">-</span>element Array{Tuple{Int64,Int64},<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 (<span class="pl-c1">1</span>, <span class="pl-c1">1</span>)
 (<span class="pl-c1">1</span>, <span class="pl-c1">2</span>)
 (<span class="pl-c1">1</span>, <span class="pl-c1">3</span>)
 (<span class="pl-c1">2</span>, <span class="pl-c1">1</span>)
 (<span class="pl-c1">2</span>, <span class="pl-c1">2</span>)
 <span class="pl-k">...</span></pre></div>
<p>You can think of <code>choose(xs)</code> as being like <code>rand(xs)</code> as <code>backtrack()</code> like <code>error()</code>. A program written like this will either one of a set of valid results, or error out. <code>list()</code> gives you the whole set in one go.</p>
<p>Find some Pythagorean triples:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; list() do
         N = 20
         i = choose(1:N)
         j = choose(i:N)
         k = choose(j:N)
         i^2 + j^2 == k^2 || backtrack()
         (i, j, k)
       end
6-element Array{Any,1}:
 (3, 4, 5)   
 (5, 12, 13)
 ...
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">list</span>() <span class="pl-k">do</span>
         N <span class="pl-k">=</span> <span class="pl-c1">20</span>
         i <span class="pl-k">=</span> <span class="pl-c1">choose</span>(<span class="pl-c1">1</span><span class="pl-k">:</span>N)
         j <span class="pl-k">=</span> <span class="pl-c1">choose</span>(i<span class="pl-k">:</span>N)
         k <span class="pl-k">=</span> <span class="pl-c1">choose</span>(j<span class="pl-k">:</span>N)
         i<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">+</span> j<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">==</span> k<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">||</span> <span class="pl-c1">backtrack</span>()
         (i, j, k)
       <span class="pl-k">end</span>
<span class="pl-c1">6</span><span class="pl-k">-</span>element Array{Any,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 (<span class="pl-c1">3</span>, <span class="pl-c1">4</span>, <span class="pl-c1">5</span>)   
 (<span class="pl-c1">5</span>, <span class="pl-c1">12</span>, <span class="pl-c1">13</span>)
 <span class="pl-k">...</span></pre></div>
<p>This works with control flow etc. For example, we can solve the <a href="https://en.wikipedia.org/wiki/Eight_queens_puzzle" rel="nofollow">N-queens problem</a> as follows:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; function nqueens(n)
         ps = @Persistent []
         for i = 1:n
           next = choose(1:n)
           next in ps &amp;&amp; backtrack() # same row
           any(abs(next-p) == (i-i′) for (i′, p) in enumerate(ps)) &amp;&amp; backtrack() # same diagonal
           ps = push(ps, next)
         end
         return ps
       end

julia&gt; list(() -&gt; nqueens(8))
92-element Array{Any,1}:
 [1, 5, 8, 6, 3, 7, 2, 4]
 [1, 6, 8, 3, 7, 4, 2, 5]
 [1, 7, 4, 6, 8, 2, 5, 3]
 ...
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">function</span> <span class="pl-en">nqueens</span>(n)
         ps <span class="pl-k">=</span> <span class="pl-c1">@Persistent</span> []
         <span class="pl-k">for</span> i <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span>n
           next <span class="pl-k">=</span> <span class="pl-c1">choose</span>(<span class="pl-c1">1</span><span class="pl-k">:</span>n)
           next <span class="pl-k">in</span> ps <span class="pl-k">&amp;&amp;</span> <span class="pl-c1">backtrack</span>() <span class="pl-c"><span class="pl-c">#</span> same row</span>
           <span class="pl-c1">any</span>(<span class="pl-c1">abs</span>(next<span class="pl-k">-</span>p) <span class="pl-k">==</span> (i<span class="pl-k">-</span>i′) <span class="pl-k">for</span> (i′, p) <span class="pl-k">in</span> <span class="pl-c1">enumerate</span>(ps)) <span class="pl-k">&amp;&amp;</span> <span class="pl-c1">backtrack</span>() <span class="pl-c"><span class="pl-c">#</span> same diagonal</span>
           ps <span class="pl-k">=</span> <span class="pl-c1">push</span>(ps, next)
         <span class="pl-k">end</span>
         <span class="pl-k">return</span> ps
       <span class="pl-k">end</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">list</span>(() <span class="pl-k">-&gt;</span> <span class="pl-c1">nqueens</span>(<span class="pl-c1">8</span>))
<span class="pl-c1">92</span><span class="pl-k">-</span>element Array{Any,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 [<span class="pl-c1">1</span>, <span class="pl-c1">5</span>, <span class="pl-c1">8</span>, <span class="pl-c1">6</span>, <span class="pl-c1">3</span>, <span class="pl-c1">7</span>, <span class="pl-c1">2</span>, <span class="pl-c1">4</span>]
 [<span class="pl-c1">1</span>, <span class="pl-c1">6</span>, <span class="pl-c1">8</span>, <span class="pl-c1">3</span>, <span class="pl-c1">7</span>, <span class="pl-c1">4</span>, <span class="pl-c1">2</span>, <span class="pl-c1">5</span>]
 [<span class="pl-c1">1</span>, <span class="pl-c1">7</span>, <span class="pl-c1">4</span>, <span class="pl-c1">6</span>, <span class="pl-c1">8</span>, <span class="pl-c1">2</span>, <span class="pl-c1">5</span>, <span class="pl-c1">3</span>]
 <span class="pl-k">...</span></pre></div>
<h2><a id="user-content-define-a-handler" class="anchor" aria-hidden="true" href="#define-a-handler"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Define a handler</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using Effects

julia&gt; struct Flip end

julia&gt; flip() = effect(Flip())

julia&gt; function binary(f)
         @effect begin
           f()
           (e::Flip, k) -&gt; max(k(true), k(false))
         end
       end

julia&gt; binary() do
         x = flip() ? 10 : 15
         y = flip() ? 5  : 10
         x-y
       end
10
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Effects

julia<span class="pl-k">&gt;</span> <span class="pl-k">struct</span> Flip <span class="pl-k">end</span>

julia<span class="pl-k">&gt;</span> <span class="pl-en">flip</span>() <span class="pl-k">=</span> <span class="pl-c1">effect</span>(<span class="pl-c1">Flip</span>())

julia<span class="pl-k">&gt;</span> <span class="pl-k">function</span> <span class="pl-en">binary</span>(f)
         <span class="pl-c1">@effect</span> <span class="pl-k">begin</span>
           <span class="pl-c1">f</span>()
           (e<span class="pl-k">::</span><span class="pl-c1">Flip</span>, k) <span class="pl-k">-&gt;</span> <span class="pl-c1">max</span>(<span class="pl-c1">k</span>(<span class="pl-c1">true</span>), <span class="pl-c1">k</span>(<span class="pl-c1">false</span>))
         <span class="pl-k">end</span>
       <span class="pl-k">end</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">binary</span>() <span class="pl-k">do</span>
         x <span class="pl-k">=</span> <span class="pl-c1">flip</span>() <span class="pl-k">?</span> <span class="pl-c1">10</span> <span class="pl-k">:</span> <span class="pl-c1">15</span>
         y <span class="pl-k">=</span> <span class="pl-c1">flip</span>() <span class="pl-k">?</span> <span class="pl-c1">5</span>  <span class="pl-k">:</span> <span class="pl-c1">10</span>
         x<span class="pl-k">-</span>y
       <span class="pl-k">end</span>
<span class="pl-c1">10</span></pre></div>
<p>See also the <a href="src/list.jl">List implementation</a>.</p>
</article></div>