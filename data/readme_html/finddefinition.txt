<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-finddefinition" class="anchor" aria-hidden="true" href="#finddefinition"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>FindDefinition</h1>
<p><em>Locate methods defined through macros</em></p>
<p>Methods defined through macros unhelpfully report their file and line numbers as those inside the macro definition. For example, this</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="# contents of foo.jl:
module Foo
  macro foo()
      :(bar() = x)  # line 3
  end

  @foo() # line 6
end

# somewhere else:
bar()
"><pre><span class="pl-c"><span class="pl-c">#</span> contents of foo.jl:</span>
<span class="pl-k">module</span> Foo
  <span class="pl-k">macro</span> <span class="pl-en">foo</span>()
      :(<span class="pl-en">bar</span>() <span class="pl-k">=</span> x)  <span class="pl-c"><span class="pl-c">#</span> line 3</span>
  <span class="pl-k">end</span>

  <span class="pl-c1">@foo</span>() <span class="pl-c"><span class="pl-c">#</span> line 6</span>
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> somewhere else:</span>
<span class="pl-c1">bar</span>()</pre></div>
<p>gives an <code>UndefVarError</code> with the stack trace pointing to line 3, rather than 6.</p>
<p>This module provides functions <code>finddef(method)</code> and <code>finddefs(f::Function)</code> returning <code>LineNumberNode</code>s for the macro call sites:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using FindDefinition

julia&gt; finddef(first(methods(Foo.bar)))
:(#= [...]/foo.jl:6 =#)

julia&gt; finddefs(Foo.bar)
1-element Array{LineNumberNode,1}:
 :(#= [...]/foo.jl:6 =#)
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> FindDefinition

julia<span class="pl-k">&gt;</span> <span class="pl-c1">finddef</span>(<span class="pl-c1">first</span>(<span class="pl-c1">methods</span>(Foo<span class="pl-k">.</span>bar)))
:(<span class="pl-c"><span class="pl-c">#=</span> [...]/foo.jl:6 <span class="pl-c">=#</span></span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">finddefs</span>(Foo<span class="pl-k">.</span>bar)
<span class="pl-c1">1</span><span class="pl-k">-</span>element Array{LineNumberNode,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 :(<span class="pl-c"><span class="pl-c">#=</span> [...]/foo.jl:6 <span class="pl-c">=#</span></span>)</pre></div>
<p><strong>Warning</strong>: The current implementation uses <code>eval</code> inside loaded modules to match method signatures. This is probably harmless, but does produce new <code>gensym</code>ed symbols inside your loaded modules.</p>
</article></div>