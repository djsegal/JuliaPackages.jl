<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-stopping" class="anchor" aria-hidden="true" href="#stopping"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Stopping</h1>
<p><a href="https://travis-ci.org/vepiteski/Stopping.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/b039372a415edc3f7f3d063aab139bd9ec11aa50f3264d9a57f345f2bb7bf16a/68747470733a2f2f7472617669732d63692e6f72672f766570697465736b692f53746f7070696e672e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/vepiteski/Stopping.jl.svg?branch=master" style="max-width:100%;"></a>
<a target="_blank" rel="noopener noreferrer" href="https://github.com/vepiteski/Stopping.jl/workflows/CI/badge.svg?branch=master"><img src="https://github.com/vepiteski/Stopping.jl/workflows/CI/badge.svg?branch=master" alt="CI" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/vepiteski/Stopping.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/3a0d60a34f850cc93e11ea33a547a29a6e19a3c324c7a7820a85cbb77acc51f5/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f766570697465736b692f53746f7070696e672e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/vepiteski/Stopping.jl/badge.svg?branch=master" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/vepiteski/Stopping.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/59da432ec99623236c384447b9f8364aad511367cefa97bda7231a84c851567d/68747470733a2f2f636f6465636f762e696f2f67682f766570697465736b692f53746f7070696e672e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/vepiteski/Stopping.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a>
<a href="https://vepiteski.github.io/Stopping.jl/dev/" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a></p>
<h2><a id="user-content-purpose" class="anchor" aria-hidden="true" href="#purpose"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Purpose</h2>
<p>Tools to ease the uniformization of stopping criteria in iterative solvers.</p>
<p>When a solver is called on an optimization model, four outcomes may happen:</p>
<ol>
<li>the approximate solution is obtained, the problem is considered solved</li>
<li>the problem is declared unsolvable (unboundedness, infeasibility ...)</li>
<li>the maximum available resources are not sufficient to compute the solution</li>
<li>some algorithm dependent failure happens</li>
</ol>
<p>This tool eases the first three items above. It defines a type</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="mutable struct GenericStopping &lt;: AbstractStopping
    problem              :: Any                  # an arbitrary instance of a problem
    meta                 :: AbstractStoppingMeta # contains the used parameters and stopping status
    current_state        :: AbstractState        # Current information on the problem
    main_stp             :: Union{AbstractStopping, Nothing} # Stopping of the main problem, or nothing
    listofstates         :: Union{ListStates, Nothing} # History of states
    user_specific_struct :: Dict                  # User-specific structure
"><pre><code>mutable struct GenericStopping &lt;: AbstractStopping
    problem              :: Any                  # an arbitrary instance of a problem
    meta                 :: AbstractStoppingMeta # contains the used parameters and stopping status
    current_state        :: AbstractState        # Current information on the problem
    main_stp             :: Union{AbstractStopping, Nothing} # Stopping of the main problem, or nothing
    listofstates         :: Union{ListStates, Nothing} # History of states
    user_specific_struct :: Dict                  # User-specific structure
</code></pre></div>
<p>The <a href="https://github.com/vepiteski/Stopping.jl/blob/master/src/Stopping/StoppingMetamod.jl">StoppingMeta</a> provides default tolerances, maximum resources, ...  as well as (boolean) information on the result.</p>
<h3><a id="user-content-your-stopping-your-way" class="anchor" aria-hidden="true" href="#your-stopping-your-way"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Your Stopping your way</h3>
<p>The GenericStopping (with GenericState) provides a complete structure to handle stopping criteria.
Then, depending on the problem structure, you can specialize a new Stopping by
redefining a State and some functions specific to your problem.</p>
<p>We provide some specialization of the GenericStopping for optimization:</p>
<ul>
<li><a href="https://github.com/vepiteski/Stopping.jl/blob/master/src/Stopping/NLPStoppingmod.jl">NLPStopping</a> with <a href="https://github.com/vepiteski/Stopping.jl/blob/master/src/State/NLPAtXmod.jl">NLPAtX</a> as a specialized State for non-linear programming (based on <a href="https://github.com/JuliaSmoothOptimizers/NLPModels.jl">NLPModels</a>), or with <a href="https://github.com/vepiteski/Stopping.jl/blob/master/src/State/OneDAtXmod.jl">OneDAtX</a> as a specialized State for 1d optimization;</li>
<li><a href="https://github.com/vepiteski/Stopping.jl/blob/master/src/Stopping/LinearAlgebraStopping.jl">LAStopping</a> with <a href="https://github.com/vepiteski/Stopping.jl/blob/master/src/State/GenericStatemod.jl">GenericState</a>: for linear algebra problems.</li>
</ul>
<h2><a id="user-content-functions" class="anchor" aria-hidden="true" href="#functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Functions</h2>
<p>The tool provides two main functions:</p>
<ul>
<li><code>start!(stp :: AbstractStopping)</code> initializes the time and the tolerance at the starting point and check wether the initial guess is optimal.</li>
<li><code>stop!(stp :: AbstractStopping)</code> checks optimality of the current guess as well as failure of the system (unboundedness for instance) and maximum resources (number of evaluations of functions, elapsed time ...)</li>
</ul>
<p>Stopping uses the informations furnished by the State to evaluate its functions. Communication between the two can be done through the following functions:</p>
<ul>
<li><code>update_and_start!(stp :: AbstractStopping; kwargs...)</code> updates the states with informations furnished as kwargs and then call start!.</li>
<li><code>update_and_stop!(stp :: AbstractStopping; kwargs...)</code> updates the states with informations furnished as kwargs and then call stop!.</li>
<li><code>fill_in!(stp :: AbstractStopping, x :: Iterate)</code> a function that fill in all the State with all the informations required to correctly evaluate the stopping functions. This can reveal useful, for instance, if the user do not trust the informations furnished by the algorithm in the State.</li>
<li><code>reinit!(stp :: AbstractStopping)</code> reinitialize the entries of
the Stopping to reuse for another call.</li>
</ul>
<p>Consult the <a href="https://github.com/vepiteski/Stopping.jl/blob/master/test/examples/runhowto.jl">HowTo tutorial</a> to learn more about the possibilities offered by Stopping.</p>
<p>You can also access other examples of algorithms in the <a href="https://github.com/vepiteski/Stopping.jl/blob/master/test/examples/">test/examples</a> folder, which for instance illustrate the strenght of Stopping with subproblems:</p>
<ul>
<li>Consult the <a href="https://github.com/vepiteski/Stopping.jl/blob/master/test/examples/run-optimsolver.jl">OptimSolver tutorial</a> for more on how to use Stopping with nested algorithms.</li>
<li>Check the <a href="https://github.com/vepiteski/Stopping.jl/blob/master/test/examples/benchmark.jl">Benchmark tutorial</a> to see how Stopping can combined with <a href="https://juliasmoothoptimizers.github.io/SolverBenchmark.jl/" rel="nofollow">SolverBenchmark.jl</a>.</li>
<li>Stopping can be adapted to closed solvers via a buffer function as in <a href="https://github.com/vepiteski/Stopping.jl/blob/master/test/examples/buffer.jl">Buffer tutorial</a> for an instance with <a href="https://github.com/JuliaOpt/Ipopt.jl">Ipopt</a> via <a href="https://github.com/JuliaSmoothOptimizers/NLPModelsIpopt.jl">NLPModelsIpopt</a>.</li>
<li>Consult the <a href="https://github.com/vepiteski/Stopping.jl/blob/master/test/examples/gradient-lbfgs.jl">WarmStart</a> to use Stopping in a warm-start context using internal user-defined structure and the list of states.</li>
</ul>
<h2><a id="user-content-how-to-install" class="anchor" aria-hidden="true" href="#how-to-install"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>How to install</h2>
<p>Install and test the Stopping package with the Julia package manager:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="pkg&gt; add Stopping
pkg&gt; test Stopping
"><pre>pkg<span class="pl-k">&gt;</span> add Stopping
pkg<span class="pl-k">&gt;</span> test Stopping</pre></div>
<p>You can access the most up-to-date version of the Stopping package using:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="pkg&gt; add https://github.com/vepiteski/Stopping.jl
pkg&gt; test Stopping
pkg&gt; status Stopping
"><pre>pkg<span class="pl-k">&gt;</span> add https<span class="pl-k">:</span><span class="pl-k">//</span>github<span class="pl-k">.</span>com<span class="pl-k">/</span>vepiteski<span class="pl-k">/</span>Stopping<span class="pl-k">.</span>jl
pkg<span class="pl-k">&gt;</span> test Stopping
pkg<span class="pl-k">&gt;</span> status Stopping</pre></div>
<h2><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example</h2>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="using NLPModels, Stopping #import the packages
nlp = ADNLPModel(x -&gt; sum(x),  ones(2)) #initialize an NLPModel with automatic differentiation
"><pre><code>using NLPModels, Stopping #import the packages
nlp = ADNLPModel(x -&gt; sum(x),  ones(2)) #initialize an NLPModel with automatic differentiation
</code></pre></div>
<p>We now initialize the <code>NLPStopping</code>.</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="nlp_at_x = NLPAtX(ones(5)) #First create a State.
"><pre><code>nlp_at_x = NLPAtX(ones(5)) #First create a State.
</code></pre></div>
<p>We use <a href="https://github.com/vepiteski/Stopping.jl/blob/master/src/Stopping/nlp_admissible_functions.jl">unconstrained_check</a> as an optimality function</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="stop_nlp = NLPStopping(nlp, nlp_at_x, optimality_check = unconstrained_check)
"><pre><code>stop_nlp = NLPStopping(nlp, nlp_at_x, optimality_check = unconstrained_check)
</code></pre></div>
<p>The following algorithm shows the most basic features of Stopping. It does many checks for you. In this innocent-looking algorithm, the call to <code>update_and_start!</code> and <code>update_and_stop!</code> will verifies unboundedness of <code>x</code>, the time spent in the algorithm, the number of iterations (= number of call to <code>stop!</code>), and the domain of <code>x</code> (in case some of its components become <code>NaN</code> for instance).</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="function rand_solver(stp :: AbstractStopping, x0 :: AbstractVector)

    x = x0
    #First, call start! to check optimality and set an initial configuration
    OK = update_and_start!(stp, x = x)

    while !OK
        #Run some computations and update the iterate
        d = rand(length(x))
        x += d

        #Update the State and call the Stopping with stop!
        OK = update_and_stop!(stp, x = x, d = d)
    end

    return stp
end
"><pre><span class="pl-k">function</span> <span class="pl-en">rand_solver</span>(stp <span class="pl-k">::</span> <span class="pl-c1">AbstractStopping</span>, x0 <span class="pl-k">::</span> <span class="pl-c1">AbstractVector</span>)

    x <span class="pl-k">=</span> x0
    <span class="pl-c"><span class="pl-c">#</span>First, call start! to check optimality and set an initial configuration</span>
    OK <span class="pl-k">=</span> <span class="pl-c1">update_and_start!</span>(stp, x <span class="pl-k">=</span> x)

    <span class="pl-k">while</span> <span class="pl-k">!</span>OK
        <span class="pl-c"><span class="pl-c">#</span>Run some computations and update the iterate</span>
        d <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">length</span>(x))
        x <span class="pl-k">+=</span> d

        <span class="pl-c"><span class="pl-c">#</span>Update the State and call the Stopping with stop!</span>
        OK <span class="pl-k">=</span> <span class="pl-c1">update_and_stop!</span>(stp, x <span class="pl-k">=</span> x, d <span class="pl-k">=</span> d)
    <span class="pl-k">end</span>

    <span class="pl-k">return</span> stp
<span class="pl-k">end</span></pre></div>
<p>Finally, we can call the algorithm with our Stopping:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="stop_nlp = rand_solver(stop_nlp, )
"><pre><code>stop_nlp = rand_solver(stop_nlp, )
</code></pre></div>
<p>and consult it to know what happened</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="status(stop_nlp, list = true)
printstyled(&quot;Final solution is $(stop_nlp.current_state.x)&quot;, color = :green)
"><pre><code>status(stop_nlp, list = true)
printstyled("Final solution is $(stop_nlp.current_state.x)", color = :green)
</code></pre></div>
<p>We reached optimality, and thanks to the Stopping structure this simple looking
algorithm verified at each step of the algorithm:</p>
<ul>
<li>time limit has been respected;</li>
<li>evaluations of the problem are not excessive;</li>
<li>the problem is not unbounded (w.r.t. x and f(x));</li>
<li>there is no NaN in x, f(x), g(x), H(x);</li>
<li>the maximum number of iteration (call to stop!) is limited.</li>
</ul>
<h2><a id="user-content-long-term-goals" class="anchor" aria-hidden="true" href="#long-term-goals"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Long-Term Goals</h2>
<p>Stopping is aimed as a tool for improving the reusability and robustness in the implementation of iterative algorithms. We warmly welcome any feedback or comment leading to potential improvements.</p>
<p>Future work will address more sophisticated problems such as mixed-integer optimization problems, optimization with uncertainty. The list of suggested optimality functions will be enriched with state of the art conditions.</p>
</article></div>