<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p dir="auto"><strong>Note</strong>: This type does not define interval arithmetic.</p>
<h1 dir="auto"><a id="user-content-closedintervals" class="anchor" aria-hidden="true" href="#closedintervals"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>ClosedIntervals</h1>
<p dir="auto"><a href="https://travis-ci.com/scheinerman/ClosedIntervals.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/02ced9e50ab4c04959d32797ec73b4e76f304daf7c9d9fd00026c55c4e735e59/68747470733a2f2f7472617669732d63692e636f6d2f73636865696e65726d616e2f436c6f736564496e74657276616c732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/scheinerman/ClosedIntervals.jl.svg?branch=master" style="max-width: 100%;"></a></p>
<p dir="auto"><a href="http://codecov.io/github/scheinerman/ClosedIntervals.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/72feaa4cfa57229920a366f5635e728d5d8a1c605c5d1c073b949e1fb51fac67/687474703a2f2f636f6465636f762e696f2f6769746875622f73636865696e65726d616e2f436c6f736564496e74657276616c732e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/scheinerman/ClosedIntervals.jl/coverage.svg?branch=master" style="max-width: 100%;"></a></p>
<p dir="auto">The <code>ClosedIntervals</code> module defines a data type <code>ClosedInterval</code> that
represents a set of the form <code>[a,b] = {x: a &lt;= x &lt;= b}</code>. Typically, a
<code>ClosedInterval</code> is created by specifying its end points:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using ClosedIntervals

julia&gt; ClosedInterval(3,7)
[3,7]

julia&gt; ClosedInterval(8,2)
[2,8]

julia&gt; a = (6,0)
(6,0)

julia&gt; 5 .. 2  # dot-dot notation works to create a ClosedInterval
[2,5]

julia&gt; 5 ± 2   # a ± b creates the interval from a-b to a+b
[3,7]

julia&gt; ClosedInterval(a)
[0,6]

julia&gt; ClosedInterval(1, 2.3)  # type promotion of end point
[1.0,2.3]"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> ClosedIntervals

julia<span class="pl-k">&gt;</span> <span class="pl-c1">ClosedInterval</span>(<span class="pl-c1">3</span>,<span class="pl-c1">7</span>)
[<span class="pl-c1">3</span>,<span class="pl-c1">7</span>]

julia<span class="pl-k">&gt;</span> <span class="pl-c1">ClosedInterval</span>(<span class="pl-c1">8</span>,<span class="pl-c1">2</span>)
[<span class="pl-c1">2</span>,<span class="pl-c1">8</span>]

julia<span class="pl-k">&gt;</span> a <span class="pl-k">=</span> (<span class="pl-c1">6</span>,<span class="pl-c1">0</span>)
(<span class="pl-c1">6</span>,<span class="pl-c1">0</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">5</span> <span class="pl-k">..</span> <span class="pl-c1">2</span>  <span class="pl-c"><span class="pl-c">#</span> dot-dot notation works to create a ClosedInterval</span>
[<span class="pl-c1">2</span>,<span class="pl-c1">5</span>]

julia<span class="pl-k">&gt;</span> <span class="pl-c1">5</span> ± <span class="pl-c1">2</span>   <span class="pl-c"><span class="pl-c">#</span> a ± b creates the interval from a-b to a+b</span>
[<span class="pl-c1">3</span>,<span class="pl-c1">7</span>]

julia<span class="pl-k">&gt;</span> <span class="pl-c1">ClosedInterval</span>(a)
[<span class="pl-c1">0</span>,<span class="pl-c1">6</span>]

julia<span class="pl-k">&gt;</span> <span class="pl-c1">ClosedInterval</span>(<span class="pl-c1">1</span>, <span class="pl-c1">2.3</span>)  <span class="pl-c"><span class="pl-c">#</span> type promotion of end point</span>
[<span class="pl-c1">1.0</span>,<span class="pl-c1">2.3</span>]</pre></div>
<p dir="auto">This example illustrates a few points.</p>
<ul dir="auto">
<li>First, interval is printed in standard mathematical notation using
square brackets.</li>
<li>Second, the end points can be specified in either order.</li>
<li>Third, the interval can be constructed from a tuple.</li>
<li>Finally, the type of the two end points need not be the same.
Julia's promotion mechanism selects an appropriate
common type for the two end points.</li>
</ul>
<p dir="auto">The two end points of the interval may be the same, in which case
it is enough to name only one of the end points:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; ClosedInterval(5)
[5,5]"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">ClosedInterval</span>(<span class="pl-c1">5</span>)
[<span class="pl-c1">5</span>,<span class="pl-c1">5</span>]</pre></div>
<p dir="auto">If no arguments are provided to <code>ClosedInterval</code> the result is the
unit interval [0,1] with <code>Float64</code> end points. Or, if we supply a
type <code>T</code>, then the result is again [0,1], but with type <code>T</code> end
points.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; ClosedInterval()
[0.0,1.0]

julia&gt; ClosedInterval(Int)
[0,1]

julia&gt; typeof(ans)
ClosedInterval{Int64} (constructor with 1 method)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">ClosedInterval</span>()
[<span class="pl-c1">0.0</span>,<span class="pl-c1">1.0</span>]

julia<span class="pl-k">&gt;</span> <span class="pl-c1">ClosedInterval</span>(Int)
[<span class="pl-c1">0</span>,<span class="pl-c1">1</span>]

julia<span class="pl-k">&gt;</span> <span class="pl-c1">typeof</span>(ans)
ClosedInterval{Int64} (constructor with <span class="pl-c1">1</span> method)</pre></div>
<p dir="auto">We also provide an empty interval constructed with <code>EmptyInterval</code>,
like this:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; X = EmptyInterval()
[]

julia&gt; typeof(X)
ClosedInterval{Float64} (constructor with 1 method)

julia&gt; Y = EmptyInterval(Int)
[]

julia&gt; typeof(Y)
ClosedInterval{Int64} (constructor with 1 method)"><pre>julia<span class="pl-k">&gt;</span> X <span class="pl-k">=</span> <span class="pl-c1">EmptyInterval</span>()
[]

julia<span class="pl-k">&gt;</span> <span class="pl-c1">typeof</span>(X)
ClosedInterval{Float64} (constructor with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> Y <span class="pl-k">=</span> <span class="pl-c1">EmptyInterval</span>(Int)
[]

julia<span class="pl-k">&gt;</span> <span class="pl-c1">typeof</span>(Y)
ClosedInterval{Int64} (constructor with <span class="pl-c1">1</span> method)</pre></div>
<p dir="auto">Notice that empty intervals are printed as a pair of square brackets
with nothing between.</p>
<h2 dir="auto"><a id="user-content-properties" class="anchor" aria-hidden="true" href="#properties"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Properties</h2>
<p dir="auto">The functions <code>left</code> and <code>right</code> are used to retrieve the left and
right end points of an interval. Use <code>length</code> to get the length of the
interval (difference of the end points).</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; A = ClosedInterval(6,2)
[2,6]

julia&gt; left(A)
2

julia&gt; right(A)
6

julia&gt; length(A)
4"><pre>julia<span class="pl-k">&gt;</span> A <span class="pl-k">=</span> <span class="pl-c1">ClosedInterval</span>(<span class="pl-c1">6</span>,<span class="pl-c1">2</span>)
[<span class="pl-c1">2</span>,<span class="pl-c1">6</span>]

julia<span class="pl-k">&gt;</span> <span class="pl-c1">left</span>(A)
<span class="pl-c1">2</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">right</span>(A)
<span class="pl-c1">6</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">length</span>(A)
<span class="pl-c1">4</span></pre></div>
<p dir="auto">Empty intervals have <code>length</code> equal to zero.
The <code>left</code> and <code>right</code> functions applied to empty
intervals throw an error.
Use <code>isempty</code> to test if an interval is empty.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; isempty(A)
false

julia&gt; isempty(X)
true"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">isempty</span>(A)
<span class="pl-c1">false</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">isempty</span>(X)
<span class="pl-c1">true</span></pre></div>
<p dir="auto">To test if a given value lies inside an interval, use <code>in</code>:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; A = ClosedInterval(3,10)
[3,10]

julia&gt; in(5,A)
true

julia&gt; in(1,A)
false

julia&gt; X = EmptyInterval(Int)
[]

julia&gt; in(0,A)
false"><pre class="notranslate"><code>julia&gt; A = ClosedInterval(3,10)
[3,10]

julia&gt; in(5,A)
true

julia&gt; in(1,A)
false

julia&gt; X = EmptyInterval(Int)
[]

julia&gt; in(0,A)
false
</code></pre></div>
<p dir="auto">Notice that testing for membership in an empty interval
always return <code>false</code>.</p>
<h2 dir="auto"><a id="user-content-operations" class="anchor" aria-hidden="true" href="#operations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Operations</h2>
<p dir="auto">Two operations are defined for intervals.</p>
<ul dir="auto">
<li>The intersection <code>*</code> is the largest interval contained
in both. If the intervals are disjoint, this returns an
empty interval. Also available as <code>∧</code>.</li>
<li>The sum <code>+</code> is the smallest interval containing both
(i.e., the join of the intervals).
If the  intervals overlap, then this is the same as their
union. Note that the empty interval serves as an identity
element for this operation. Also available as <code>∨</code>.</li>
</ul>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; A = ClosedInterval(1,5)
[1,5]

julia&gt; B = ClosedInterval(3,7)
[3,7]

julia&gt; A*B
[3,5]

julia&gt; A+B
[1,7]

julia&gt; C = ClosedInterval(1,3)
[1,3]

julia&gt; D = ClosedInterval(5,6)
[5,6]

julia&gt; C*D
[]

julia&gt; C+D
[1,6]"><pre>julia<span class="pl-k">&gt;</span> A <span class="pl-k">=</span> <span class="pl-c1">ClosedInterval</span>(<span class="pl-c1">1</span>,<span class="pl-c1">5</span>)
[<span class="pl-c1">1</span>,<span class="pl-c1">5</span>]

julia<span class="pl-k">&gt;</span> B <span class="pl-k">=</span> <span class="pl-c1">ClosedInterval</span>(<span class="pl-c1">3</span>,<span class="pl-c1">7</span>)
[<span class="pl-c1">3</span>,<span class="pl-c1">7</span>]

julia<span class="pl-k">&gt;</span> A<span class="pl-k">*</span>B
[<span class="pl-c1">3</span>,<span class="pl-c1">5</span>]

julia<span class="pl-k">&gt;</span> A<span class="pl-k">+</span>B
[<span class="pl-c1">1</span>,<span class="pl-c1">7</span>]

julia<span class="pl-k">&gt;</span> C <span class="pl-k">=</span> <span class="pl-c1">ClosedInterval</span>(<span class="pl-c1">1</span>,<span class="pl-c1">3</span>)
[<span class="pl-c1">1</span>,<span class="pl-c1">3</span>]

julia<span class="pl-k">&gt;</span> D <span class="pl-k">=</span> <span class="pl-c1">ClosedInterval</span>(<span class="pl-c1">5</span>,<span class="pl-c1">6</span>)
[<span class="pl-c1">5</span>,<span class="pl-c1">6</span>]

julia<span class="pl-k">&gt;</span> C<span class="pl-k">*</span>D
[]

julia<span class="pl-k">&gt;</span> C<span class="pl-k">+</span>D
[<span class="pl-c1">1</span>,<span class="pl-c1">6</span>]</pre></div>
<h2 dir="auto"><a id="user-content-infinite-intervals" class="anchor" aria-hidden="true" href="#infinite-intervals"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Infinite Intervals</h2>
<p dir="auto">When intervals have end points that are floating points numbers,
it is possible to work with infinite intervals.
Everything works as one might expect.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; A = ClosedInterval(0., Inf)
[0.0,Inf]

julia&gt; B = ClosedInterval(1., -Inf)
[-Inf,1.0]

julia&gt; A*B
[0.0,1.0]

julia&gt; A+B
[-Inf,Inf]

julia&gt; length(A)
Inf

julia&gt; in(2.,A)
true

julia&gt; in(2.,B)
false"><pre>julia<span class="pl-k">&gt;</span> A <span class="pl-k">=</span> <span class="pl-c1">ClosedInterval</span>(<span class="pl-c1">0.</span>, <span class="pl-c1">Inf</span>)
[<span class="pl-c1">0.0</span>,<span class="pl-c1">Inf</span>]

julia<span class="pl-k">&gt;</span> B <span class="pl-k">=</span> <span class="pl-c1">ClosedInterval</span>(<span class="pl-c1">1.</span>, <span class="pl-k">-</span><span class="pl-c1">Inf</span>)
[<span class="pl-k">-</span><span class="pl-c1">Inf</span>,<span class="pl-c1">1.0</span>]

julia<span class="pl-k">&gt;</span> A<span class="pl-k">*</span>B
[<span class="pl-c1">0.0</span>,<span class="pl-c1">1.0</span>]

julia<span class="pl-k">&gt;</span> A<span class="pl-k">+</span>B
[<span class="pl-k">-</span><span class="pl-c1">Inf</span>,<span class="pl-c1">Inf</span>]

julia<span class="pl-k">&gt;</span> <span class="pl-c1">length</span>(A)
<span class="pl-c1">Inf</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">in</span>(<span class="pl-c1">2.</span>,A)
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">in</span>(<span class="pl-c1">2.</span>,B)
<span class="pl-c1">false</span></pre></div>
<h2 dir="auto"><a id="user-content-comparison" class="anchor" aria-hidden="true" href="#comparison"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Comparison</h2>
<h3 dir="auto"><a id="user-content-equality" class="anchor" aria-hidden="true" href="#equality"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Equality</h3>
<p dir="auto">The usual comparison operators may be applied to pairs of
intervals. As usual, equality may be checked with <code>==</code> (or
<code>isequal</code>).</p>
<h3 dir="auto"><a id="user-content-subset" class="anchor" aria-hidden="true" href="#subset"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Subset</h3>
<p dir="auto">Use <code>issubset(J,K)</code> to  test if <code>J</code> is contained in <code>K</code>. The following
comparison operations work as expected:</p>
<ul dir="auto">
<li><code>J ⊆ K</code> -- subset, same as <code>issubset(J,K)</code></li>
<li><code>J ⊊ K</code> -- proper subset</li>
<li><code>J ⊇ K</code> -- superset</li>
<li><code>J ⊋ K</code> -- proper superset</li>
</ul>
<h3 dir="auto"><a id="user-content-lexicographic-total-order" class="anchor" aria-hidden="true" href="#lexicographic-total-order"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Lexicographic total order</h3>
<p dir="auto">We also define <code>isless</code> for intervals as follows. An empty interval is
defined to be less than all nonempty intervals. Otherwise, we sort
intervals lexicographically. That is, interval <code>[a,b]</code> is less than
<code>[c,d]</code> provided either (a) <code>a&lt;c</code> or (b) <code>(a==c) &amp;&amp; (b&lt;d)</code>.</p>
<p dir="auto">Intervals of mixed type may be compared. For example:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; A = ClosedInterval(1,2)
[1,2]

julia&gt; B = ClosedInterval(1.,2.)
[1.0,2.0]

julia&gt; A==B
true

julia&gt; A = ClosedInterval(-Inf,3.)
[-Inf,3.0]

julia&gt; B = ClosedInterval(3,5)
[3,5]

julia&gt; A &lt; B
true"><pre>julia<span class="pl-k">&gt;</span> A <span class="pl-k">=</span> <span class="pl-c1">ClosedInterval</span>(<span class="pl-c1">1</span>,<span class="pl-c1">2</span>)
[<span class="pl-c1">1</span>,<span class="pl-c1">2</span>]

julia<span class="pl-k">&gt;</span> B <span class="pl-k">=</span> <span class="pl-c1">ClosedInterval</span>(<span class="pl-c1">1.</span>,<span class="pl-c1">2.</span>)
[<span class="pl-c1">1.0</span>,<span class="pl-c1">2.0</span>]

julia<span class="pl-k">&gt;</span> A<span class="pl-k">==</span>B
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> A <span class="pl-k">=</span> <span class="pl-c1">ClosedInterval</span>(<span class="pl-k">-</span><span class="pl-c1">Inf</span>,<span class="pl-c1">3.</span>)
[<span class="pl-k">-</span><span class="pl-c1">Inf</span>,<span class="pl-c1">3.0</span>]

julia<span class="pl-k">&gt;</span> B <span class="pl-k">=</span> <span class="pl-c1">ClosedInterval</span>(<span class="pl-c1">3</span>,<span class="pl-c1">5</span>)
[<span class="pl-c1">3</span>,<span class="pl-c1">5</span>]

julia<span class="pl-k">&gt;</span> A <span class="pl-k">&lt;</span> B
<span class="pl-c1">true</span></pre></div>
<h3 dir="auto"><a id="user-content-completely-to-the-left-of-partial-order" class="anchor" aria-hidden="true" href="#completely-to-the-left-of-partial-order"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Completely-to-the-left-of partial order</h3>
<p dir="auto">We use <code>&lt;&lt;</code> to test if one interval is completely to the left of another.
That is <code>[a,b]&lt;&lt;[c,d]</code> exactly when <code>b&lt;c</code>. In this case, comparing an
empty interval to any other yields <code>false</code>. Likewise, we use <code>&gt;&gt;</code>
to test if one interval is to the right of another.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; A = ClosedInterval(1,5);

julia&gt; B = ClosedInterval(3,8);

julia&gt; C = ClosedInterval(7,9);

julia&gt; A&lt;&lt;B
false

julia&gt; A&lt;&lt;C
true

julia&gt; B&lt;&lt;C
false

julia&gt; C&gt;&gt;A
true
"><pre>julia<span class="pl-k">&gt;</span> A <span class="pl-k">=</span> <span class="pl-c1">ClosedInterval</span>(<span class="pl-c1">1</span>,<span class="pl-c1">5</span>);

julia<span class="pl-k">&gt;</span> B <span class="pl-k">=</span> <span class="pl-c1">ClosedInterval</span>(<span class="pl-c1">3</span>,<span class="pl-c1">8</span>);

julia<span class="pl-k">&gt;</span> C <span class="pl-k">=</span> <span class="pl-c1">ClosedInterval</span>(<span class="pl-c1">7</span>,<span class="pl-c1">9</span>);

julia<span class="pl-k">&gt;</span> A<span class="pl-k">&lt;&lt;</span>B
<span class="pl-c1">false</span>

julia<span class="pl-k">&gt;</span> A<span class="pl-k">&lt;&lt;</span>C
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> B<span class="pl-k">&lt;&lt;</span>C
<span class="pl-c1">false</span>

julia<span class="pl-k">&gt;</span> C<span class="pl-k">&gt;&gt;</span>A
<span class="pl-c1">true</span>
</pre></div>
<h2 dir="auto"><a id="user-content-non-numeric-end-points" class="anchor" aria-hidden="true" href="#non-numeric-end-points"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Non-numeric end points</h2>
<p dir="auto">Normally, the end points of a <code>ClosedInterval</code> are real numbers
(subtypes of <code>Real</code>).
However, we do permit the end point types to be any Julia objects
that can be compared with <code>&lt;</code>. For example:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; J = ClosedInterval(&quot;charlie&quot;, &quot;bravo&quot;)
[bravo,charlie]

julia&gt; K = ClosedInterval(&quot;oscar&quot;, &quot;yankee&quot;)
[oscar,yankee]

julia&gt; J+K
[bravo,yankee]

julia&gt; in(&quot;romeo&quot;, K)
true"><pre>julia<span class="pl-k">&gt;</span> J <span class="pl-k">=</span> <span class="pl-c1">ClosedInterval</span>(<span class="pl-s"><span class="pl-pds">"</span>charlie<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>bravo<span class="pl-pds">"</span></span>)
[bravo,charlie]

julia<span class="pl-k">&gt;</span> K <span class="pl-k">=</span> <span class="pl-c1">ClosedInterval</span>(<span class="pl-s"><span class="pl-pds">"</span>oscar<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>yankee<span class="pl-pds">"</span></span>)
[oscar,yankee]

julia<span class="pl-k">&gt;</span> J<span class="pl-k">+</span>K
[bravo,yankee]

julia<span class="pl-k">&gt;</span> <span class="pl-c1">in</span>(<span class="pl-s"><span class="pl-pds">"</span>romeo<span class="pl-pds">"</span></span>, K)
<span class="pl-c1">true</span></pre></div>
<p dir="auto">However, some operations will fail if they rely on numeric
operations. For example:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; length(J)
ERROR: MethodError: `-` has no method matching -(::String, ::String)

julia&gt; J*K
ERROR: MethodError: no method matching zero(::Type{String})"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">length</span>(J)
ERROR<span class="pl-k">:</span> MethodError<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">`</span>-<span class="pl-pds">`</span></span> has no method matching <span class="pl-k">-</span>(<span class="pl-k">::</span><span class="pl-c1">String</span>, <span class="pl-k">::</span><span class="pl-c1">String</span>)

julia<span class="pl-k">&gt;</span> J<span class="pl-k">*</span>K
ERROR<span class="pl-k">:</span> MethodError<span class="pl-k">:</span> no method matching <span class="pl-c1">zero</span>(<span class="pl-k">::</span><span class="pl-c1">Type{String}</span>)</pre></div>
<hr>
<h2 dir="auto"><a id="user-content-closedintervals-vs-intervalsets" class="anchor" aria-hidden="true" href="#closedintervals-vs-intervalsets"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>ClosedIntervals</code> vs <code>IntervalSets</code></h2>
<p dir="auto">The <a href="https://github.com/JuliaMath/IntervalSets.jl">IntervalSets</a> module also defines a <code>ClosedInterval</code> type that
has some notable differences in how intervals are handled.</p>
<h3 dir="auto"><a id="user-content-construction" class="anchor" aria-hidden="true" href="#construction"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Construction</h3>
<p dir="auto">In <code>ClosedIntervals</code>, the end points may be specified in either order,
while in <code>IntervalSets</code> if the left end point is
greater than the right, an empty interval results.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using ClosedIntervals

julia&gt; ClosedInterval(1,2) == ClosedInterval(2,1)
true"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> ClosedIntervals

julia<span class="pl-k">&gt;</span> <span class="pl-c1">ClosedInterval</span>(<span class="pl-c1">1</span>,<span class="pl-c1">2</span>) <span class="pl-k">==</span> <span class="pl-c1">ClosedInterval</span>(<span class="pl-c1">2</span>,<span class="pl-c1">1</span>)
<span class="pl-c1">true</span></pre></div>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using IntervalSets

julia&gt; ClosedInterval(1,2) == ClosedInterval(2,1)
false"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> IntervalSets

julia<span class="pl-k">&gt;</span> <span class="pl-c1">ClosedInterval</span>(<span class="pl-c1">1</span>,<span class="pl-c1">2</span>) <span class="pl-k">==</span> <span class="pl-c1">ClosedInterval</span>(<span class="pl-c1">2</span>,<span class="pl-c1">1</span>)
<span class="pl-c1">false</span></pre></div>
<h3 dir="auto"><a id="user-content-unionjoin" class="anchor" aria-hidden="true" href="#unionjoin"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Union/Join</h3>
<p dir="auto">In the <code>ClosedIntervals</code> module, the join <code>J ∨ K</code> or <code>J + K</code> of two intervals is
the smallest interval containing both. In particular, we permit the join of
disjoint intervals. The intervals may be disjoint.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; ClosedInterval(1,2) ∨ ClosedInterval(3,4)
[1,4]"><pre class="notranslate"><code>julia&gt; ClosedInterval(1,2) ∨ ClosedInterval(3,4)
[1,4]
</code></pre></div>
<p dir="auto">The <code>IntervalSets</code> module provides for the union of intervals.
If the two intervals are disjoint, their set-theoretic union is not an
interval and results in an error.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; ClosedInterval(1,2) ∪ ClosedInterval(3,4)
ERROR: ArgumentError: Cannot construct union of disjoint sets."><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">ClosedInterval</span>(<span class="pl-c1">1</span>,<span class="pl-c1">2</span>) <span class="pl-k">∪</span> <span class="pl-c1">ClosedInterval</span>(<span class="pl-c1">3</span>,<span class="pl-c1">4</span>)
ERROR<span class="pl-k">:</span> ArgumentError<span class="pl-k">:</span> Cannot construct union of disjoint sets.</pre></div>
<p dir="auto">Note that the intersection (<code>IntervalSets</code>) and meet (<code>ClosedIntervals</code>) of
two intervals are the same.</p>
<h3 dir="auto"><a id="user-content-lengthwidth" class="anchor" aria-hidden="true" href="#lengthwidth"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Length/Width</h3>
<p dir="auto">The two modules have different implementations of the <code>length</code> function.</p>
<ul dir="auto">
<li>In the <code>ClosedIntervals</code> module, <code>length</code> is simply the difference between
the right and left end point values.</li>
<li>In <code>IntervalSets</code>, one can only apply <code>length</code> to intervals with integer
end points, in which case the <code>length</code> is the number of integers in the set.
Instead, use <code>width</code> to determine the distance between the end points.</li>
</ul>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using ClosedIntervals

julia&gt; length(ClosedInterval(1,4))
3

julia&gt; length(ClosedInterval(1.0,4.0))
3.0"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> ClosedIntervals

julia<span class="pl-k">&gt;</span> <span class="pl-c1">length</span>(<span class="pl-c1">ClosedInterval</span>(<span class="pl-c1">1</span>,<span class="pl-c1">4</span>))
<span class="pl-c1">3</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">length</span>(<span class="pl-c1">ClosedInterval</span>(<span class="pl-c1">1.0</span>,<span class="pl-c1">4.0</span>))
<span class="pl-c1">3.0</span></pre></div>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using IntervalSets

julia&gt; length(ClosedInterval(1,4))
4

julia&gt; length(ClosedInterval(1.0,4.0))
ERROR: MethodError: no method matching length(::ClosedInterval{Float64})

julia&gt; width(ClosedInterval(1.0,4.0))
3.0"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> IntervalSets

julia<span class="pl-k">&gt;</span> <span class="pl-c1">length</span>(<span class="pl-c1">ClosedInterval</span>(<span class="pl-c1">1</span>,<span class="pl-c1">4</span>))
<span class="pl-c1">4</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">length</span>(<span class="pl-c1">ClosedInterval</span>(<span class="pl-c1">1.0</span>,<span class="pl-c1">4.0</span>))
ERROR<span class="pl-k">:</span> MethodError<span class="pl-k">:</span> no method matching <span class="pl-c1">length</span>(<span class="pl-k">::</span><span class="pl-c1">ClosedInterval{Float64}</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">width</span>(<span class="pl-c1">ClosedInterval</span>(<span class="pl-c1">1.0</span>,<span class="pl-c1">4.0</span>))
<span class="pl-c1">3.0</span></pre></div>
</article></div>