<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-mkljl" class="anchor" aria-hidden="true" href="#mkljl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>MKL.jl</h1>
<h2><a id="user-content-intel-mkl-linear-algebra-in-julia" class="anchor" aria-hidden="true" href="#intel-mkl-linear-algebra-in-julia"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Intel MKL linear algebra in Julia.</h2>
<p><em>MKL.jl</em> is a package that makes Julia's linear algebra use Intel MKL BLAS and LAPACK instead of OpenBLAS. The build step of the package will automatically download Intel MKL and rebuild Julia's system image against Intel MKL for Julia versions prior to v1.7. On Julia v1.7 and later, we ship Julia with <a href="https://github.com/staticfloat/libblastrampoline">libblastrampoline</a>, which can enable picking a BLAS at runtime.</p>
<h2><a id="user-content-to-install" class="anchor" aria-hidden="true" href="#to-install"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>To Install:</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt;] add MKL
"><pre>julia<span class="pl-k">&gt;</span>] add MKL</pre></div>
<p>On Julia 1.7 and later, nothing further is necessary. On older releases of Julia, a new system image build happens right after installation. If it doesn't (happens when MKL_jll.jl has been installed before), run the following command to build a new system image and restart Julia.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt;] build MKL
"><pre>julia<span class="pl-k">&gt;</span>] build MKL</pre></div>
<h2><a id="user-content-to-check-installation" class="anchor" aria-hidden="true" href="#to-check-installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>To Check Installation:</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using LinearAlgebra

julia&gt; BLAS.vendor()  # Prior to Julia v1.7
:mkl

julia&gt; BLAS.get_config()  # Julia v1.7 and later
LinearAlgebra.BLAS.LBTConfig(LinearAlgebra.BLAS.LBTLibraryInfo[LinearAlgebra.BLAS.LBTLibraryInfo(&quot;/Users/viral/.julia/artifacts/073ff95e2c63501547247d6e1321bf4ee2a78933/lib/libmkl_rt.1.dylib&quot;, Ptr{Nothing} @0x00007fb6a5ef4820, &quot;&quot;, UInt8[0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff  …  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01], :ilp64, :plain)], [:f2c_capable], [&quot;LAPACKE_c_nancheck&quot;, &quot;LAPACKE_cbbcsd&quot;, &quot;LAPACKE_cbbcsd_work&quot;, &quot;LAPACKE_cbdsqr&quot;, &quot;LAPACKE_cbdsqr_work&quot;, &quot;LAPACKE_cgb_nancheck&quot;, &quot;LAPACKE_cgb_trans&quot;, &quot;LAPACKE_cgbbrd&quot;, &quot;LAPACKE_cgbbrd_work&quot;, &quot;LAPACKE_cgbcon&quot;  …  &quot;zunmlq_&quot;, &quot;zunmql_&quot;, &quot;zunmqr_&quot;, &quot;zunmr2_&quot;, &quot;zunmr3_&quot;, &quot;zunmrq_&quot;, &quot;zunmrz_&quot;, &quot;zunmtr_&quot;, &quot;zupgtr_&quot;, &quot;zupmtr_&quot;])
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> LinearAlgebra

julia<span class="pl-k">&gt;</span> BLAS<span class="pl-k">.</span><span class="pl-c1">vendor</span>()  <span class="pl-c"><span class="pl-c">#</span> Prior to Julia v1.7</span>
<span class="pl-c1">:mkl</span>

julia<span class="pl-k">&gt;</span> BLAS<span class="pl-k">.</span><span class="pl-c1">get_config</span>()  <span class="pl-c"><span class="pl-c">#</span> Julia v1.7 and later</span>
LinearAlgebra<span class="pl-k">.</span>BLAS<span class="pl-k">.</span><span class="pl-c1">LBTConfig</span>(LinearAlgebra<span class="pl-k">.</span>BLAS<span class="pl-k">.</span>LBTLibraryInfo[LinearAlgebra<span class="pl-k">.</span>BLAS<span class="pl-k">.</span><span class="pl-c1">LBTLibraryInfo</span>(<span class="pl-s"><span class="pl-pds">"</span>/Users/viral/.julia/artifacts/073ff95e2c63501547247d6e1321bf4ee2a78933/lib/libmkl_rt.1.dylib<span class="pl-pds">"</span></span>, Ptr{Nothing} @<span class="pl-c1">0x00007fb6a5ef4820</span>, <span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>, UInt8[<span class="pl-c1">0xff</span>, <span class="pl-c1">0xff</span>, <span class="pl-c1">0xff</span>, <span class="pl-c1">0xff</span>, <span class="pl-c1">0xff</span>, <span class="pl-c1">0xff</span>, <span class="pl-c1">0xff</span>, <span class="pl-c1">0xff</span>, <span class="pl-c1">0xff</span>, <span class="pl-c1">0xff</span>  …  <span class="pl-c1">0xff</span>, <span class="pl-c1">0xff</span>, <span class="pl-c1">0xff</span>, <span class="pl-c1">0xff</span>, <span class="pl-c1">0xff</span>, <span class="pl-c1">0xff</span>, <span class="pl-c1">0xff</span>, <span class="pl-c1">0xff</span>, <span class="pl-c1">0xff</span>, <span class="pl-c1">0x01</span>], <span class="pl-c1">:ilp64</span>, <span class="pl-c1">:plain</span>)], [<span class="pl-c1">:f2c_capable</span>], [<span class="pl-s"><span class="pl-pds">"</span>LAPACKE_c_nancheck<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>LAPACKE_cbbcsd<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>LAPACKE_cbbcsd_work<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>LAPACKE_cbdsqr<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>LAPACKE_cbdsqr_work<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>LAPACKE_cgb_nancheck<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>LAPACKE_cgb_trans<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>LAPACKE_cgbbrd<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>LAPACKE_cgbbrd_work<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>LAPACKE_cgbcon<span class="pl-pds">"</span></span>  …  <span class="pl-s"><span class="pl-pds">"</span>zunmlq_<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>zunmql_<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>zunmqr_<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>zunmr2_<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>zunmr3_<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>zunmrq_<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>zunmrz_<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>zunmtr_<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>zupgtr_<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>zupmtr_<span class="pl-pds">"</span></span>])</pre></div>
<h2><a id="user-content-using-the-64-bit-vs-32-bit-version-of-mkl" class="anchor" aria-hidden="true" href="#using-the-64-bit-vs-32-bit-version-of-mkl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Using the 64-bit vs 32-bit version of MKL</h2>
<p>By default, when building <em>MKL.jl</em> the 32-bit version of MKL is installed. This is due to frequently encountered compatibility issues with the MKL version linked to <em>numpy</em>, that by default is shipped with the 32-bit version of MKL. To use the 64-bit version of MKL set the environment variable <code>ENV["USE_BLAS64"] = true</code> before building <em>MKL.jl</em>.</p>
<p>On Julia v1.7, we use ILP64 by default on 64-bit systems, and LP64 on 32-bit systems.</p>
</article></div>