<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><table>
<thead>
<tr>
<th align="center"><strong>Documentation</strong></th>
<th align="center"><strong>Build Status</strong></th>
<th align="center"><strong>Licence</strong></th>
<th align="center"><strong>Version Status</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><a href="https://LudwigBoess.github.io/SPHKernels.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a> <a href="https://LudwigBoess.github.io/SPHKernels.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a></td>
<td align="center"><a href="https://github.com/LudwigBoess/SPHKernels.jl/actions/workflows/jlpkgbutler-ci-master-workflow.yml"><img src="https://github.com/LudwigBoess/SPHKernels.jl/actions/workflows/jlpkgbutler-ci-master-workflow.yml/badge.svg" alt="Run CI on master" style="max-width:100%;"></a> <a href="https://codecov.io/gh/LudwigBoess/SPHKernels.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/84ae0fcb8d977a0ffebb7d1a6e7a6ac1d2369f03682149b4f528b80438d95b24/68747470733a2f2f636f6465636f762e696f2f67682f4c7564776967426f6573732f5350484b65726e656c732e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="https://codecov.io/gh/LudwigBoess/SPHKernels.jl/coverage.svg?branch=master" style="max-width:100%;"></a></td>
<td align="center"><a href="LICENSE.md"><img src="https://camo.githubusercontent.com/34c33e2f7f61f9b82750baf175f4aa3260f774ead54e160dd013b7d818992096/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d6f72616e67652e737667" alt="The MIT License" data-canonical-src="https://img.shields.io/badge/license-MIT-orange.svg" style="max-width:100%;"></a></td>
<td align="center"><a target="_blank" rel="noopener noreferrer" href="https://github.com/LudwigBoess/SPHKernels.jl/workflows/TagBot/badge.svg"><img src="https://github.com/LudwigBoess/SPHKernels.jl/workflows/TagBot/badge.svg" alt="TagBot" style="max-width:100%;"></a> <a target="_blank" rel="noopener noreferrer" href="https://github.com/LudwigBoess/SPHKernels.jl/workflows/CompatHelper/badge.svg"><img src="https://github.com/LudwigBoess/SPHKernels.jl/workflows/CompatHelper/badge.svg" alt="CompatHelper" style="max-width:100%;"></a></td>
</tr>
</tbody>
</table>
<h1><a id="user-content-sphkernelsjl" class="anchor" aria-hidden="true" href="#sphkernelsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>SPHKernels.jl</h1>
<p>This package supplies a number of kernels frequently used in Smoothed-Particle Hydrodynamics (SPH), as well as functions to evaluate their values and derivatives in 2D and 3D.</p>
<p>These kernels include the B-splines (<code>Cubic</code> and <code>Quintic</code>) suggested in <a href="https://ui.adsabs.harvard.edu/abs/1985A%26A...149..135M/abstract" rel="nofollow">Monaghan &amp; Lattanzio (1985)</a> and the Wendland functions (<code>WendlandC2</code>, <code>WendlandC4</code> and <code>WendlandC6</code>) as suggested in <a href="https://academic.oup.com/mnras/article/425/2/1068/1187211" rel="nofollow">Dehnen &amp; Aly (2012)</a>.</p>
<p>In this implementation we follow the convention of Dehnen&amp;Aly in using the 'compact kernel support' as a means to define the maximum extent of the kernel. They denote this <code>H</code> in their paper, for convenience (aka for not having to type caps) we use <code>h</code> in the code.</p>
<h2><a id="user-content-evaluating-kernels" class="anchor" aria-hidden="true" href="#evaluating-kernels"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Evaluating Kernels</h2>
<p>To evaluate a 3D kernel you need to use the function</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="kernel_value_3D(k::SPHKernel, u::Real, h_inv::Real)
"><pre><span class="pl-c1">kernel_value_3D</span>(k<span class="pl-k">::</span><span class="pl-c1">SPHKernel</span>, u<span class="pl-k">::</span><span class="pl-c1">Real</span>, h_inv<span class="pl-k">::</span><span class="pl-c1">Real</span>)</pre></div>
<p>where <code>SPHKernel</code> is the supertype for an implemented SPH kernel, <code>u = \frac{x}{h}</code> is the distance to the kernel origin in measures of the compact kernel support and <code>h_inv</code> is the inverse of the compact kernel support.</p>
<p>The same goes for a 1D kernel</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="kernel_value_1D(k::SPHKernel, u::Real, h_inv::Real)
"><pre><span class="pl-c1">kernel_value_1D</span>(k<span class="pl-k">::</span><span class="pl-c1">SPHKernel</span>, u<span class="pl-k">::</span><span class="pl-c1">Real</span>, h_inv<span class="pl-k">::</span><span class="pl-c1">Real</span>)</pre></div>
<p>and a 2D kernel</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="kernel_value_2D(k::SPHKernel, u::Real, h_inv::Real)
"><pre><span class="pl-c1">kernel_value_2D</span>(k<span class="pl-k">::</span><span class="pl-c1">SPHKernel</span>, u<span class="pl-k">::</span><span class="pl-c1">Real</span>, h_inv<span class="pl-k">::</span><span class="pl-c1">Real</span>)</pre></div>
<p>If you want your code to look a little more fancy you can also use the alternative functions <code>ùí≤‚ÇÅ</code>, where the respective subscript refers to the dimension:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="ùí≤‚ÇÅ( kernel::SPHKernel, u::Real, h_inv::Real ) = kernel_value_1D(kernel, u, h_inv)
ùí≤‚ÇÇ( kernel::SPHKernel, u::Real, h_inv::Real ) = kernel_value_2D(kernel, u, h_inv)
ùí≤‚ÇÉ( kernel::SPHKernel, u::Real, h_inv::Real ) = kernel_value_3D(kernel, u, h_inv)
"><pre><span class="pl-en">ùí≤‚ÇÅ</span>( kernel<span class="pl-k">::</span><span class="pl-c1">SPHKernel</span>, u<span class="pl-k">::</span><span class="pl-c1">Real</span>, h_inv<span class="pl-k">::</span><span class="pl-c1">Real</span> ) <span class="pl-k">=</span> <span class="pl-c1">kernel_value_1D</span>(kernel, u, h_inv)
<span class="pl-en">ùí≤‚ÇÇ</span>( kernel<span class="pl-k">::</span><span class="pl-c1">SPHKernel</span>, u<span class="pl-k">::</span><span class="pl-c1">Real</span>, h_inv<span class="pl-k">::</span><span class="pl-c1">Real</span> ) <span class="pl-k">=</span> <span class="pl-c1">kernel_value_2D</span>(kernel, u, h_inv)
<span class="pl-en">ùí≤‚ÇÉ</span>( kernel<span class="pl-k">::</span><span class="pl-c1">SPHKernel</span>, u<span class="pl-k">::</span><span class="pl-c1">Real</span>, h_inv<span class="pl-k">::</span><span class="pl-c1">Real</span> ) <span class="pl-k">=</span> <span class="pl-c1">kernel_value_3D</span>(kernel, u, h_inv)</pre></div>
<p>Please see the docs for more details!</p>
</article></div>