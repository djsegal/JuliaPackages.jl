<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/KM3NeT/Neurthino.jl/raw/master/docs/src/assets/neurthino.png"><img src="https://github.com/KM3NeT/Neurthino.jl/raw/master/docs/src/assets/neurthino.png" alt="" style="max-width: 100%;"></a></p>
<p dir="auto"><a href="https://KM3NeT.github.io/Neurthino.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://KM3NeT.github.io/Neurthino.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/KM3NeT/Neurthino.jl/actions"><img src="https://github.com/KM3NeT/Neurthino.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/KM3NeT/Neurthino.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/247b3e146860c96d6bd854b537e9e4e0ca2b7913e4e47b170d796483ca300b5a/68747470733a2f2f636f6465636f762e696f2f67682f4b4d334e65542f4e6575727468696e6f2e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/KM3NeT/Neurthino.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a>
<a href="https://zenodo.org/badge/latestdoi/278061614" rel="nofollow"><img src="https://camo.githubusercontent.com/e6d0ba7246717be70742d280669dd56cd4923897d9424b1a3235323bb624b94c/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f3237383036313631342e737667" alt="DOI" data-canonical-src="https://zenodo.org/badge/278061614.svg" style="max-width: 100%;"></a></p>
<h1 dir="auto"><a id="user-content-neurthinojl" class="anchor" aria-hidden="true" href="#neurthinojl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Neurthino.jl</h1>
<p dir="auto"><strong>Neurthino.jl</strong> is a package for calculating neutrino oscillation probabilities.
The main focus of the package lies on atmospheric neutrino flux and the neutrino
propagation through earth.</p>
<h2 dir="auto"><a id="user-content-basic-usage" class="anchor" aria-hidden="true" href="#basic-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Basic Usage</h2>
<p dir="auto">First of all the basic vacuum properties have to be defined by creating a
<code>OscillationParameters</code> struct with fixed number of neutrino flavours of the
considered model:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using Neurthino

julia&gt; osc = OscillationParameters(3);"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Neurthino

julia<span class="pl-k">&gt;</span> osc <span class="pl-k">=</span> <span class="pl-c1">OscillationParameters</span>(<span class="pl-c1">3</span>);</pre></div>
<p dir="auto">The values of the mixing angles (<code>setθ!</code>), mass squared differences (<code>setΔm²</code>)
and CP phases (<code>setδ!</code>) are initialised to 0 and have to be set individually:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; setθ!(osc, 1=&gt;2, 0.59);

julia&gt; setθ!(osc, 1=&gt;3, 0.15);

julia&gt; setθ!(osc, 2=&gt;3, 0.84);

julia&gt; setδ!(osc, 1=&gt;3, 3.86);"><pre class="notranslate"><code>julia&gt; setθ!(osc, 1=&gt;2, 0.59);

julia&gt; setθ!(osc, 1=&gt;3, 0.15);

julia&gt; setθ!(osc, 2=&gt;3, 0.84);

julia&gt; setδ!(osc, 1=&gt;3, 3.86);
</code></pre></div>
<p dir="auto">The mass squared differences are defined as <a target="_blank" rel="noopener noreferrer nofollow" href="https://render.githubusercontent.com/render/math?math=\Delta_{ij}=m_i^2-m_j^2"><img src="https://render.githubusercontent.com/render/math?math=\Delta_{ij}=m_i^2-m_j^2" style="max-width: 100%;"></a> and
within the package the convention <a target="_blank" rel="noopener noreferrer nofollow" href="https://render.githubusercontent.com/render/math?math=\forall%20i%3Cj:m_i%3Cm_j"><img src="https://render.githubusercontent.com/render/math?math=\forall%20i%3Cj:m_i%3Cm_j" style="max-width: 100%;"></a> is kept.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; setΔm²!(osc, 2=&gt;3, -2.523e-3);

julia&gt; setΔm²!(osc, 1=&gt;2, -7.39e-5);"><pre class="notranslate"><code>julia&gt; setΔm²!(osc, 2=&gt;3, -2.523e-3);

julia&gt; setΔm²!(osc, 1=&gt;2, -7.39e-5);
</code></pre></div>
<p dir="auto">These oscillation parameters can now be used to calculate the oscillation
probabilities between the flavour states:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; p = Pνν(osc, 1, 10000)
4-dimensional AxisArray{Float64,4,...} with axes:
    :Energy, [1.0]
    :Baseline, [10000.0]
    :InitFlav, NeutrinoFlavour[Electron, Muon, Tau]
    :FinalFlav, NeutrinoFlavour[Electron, Muon, Tau]
And data, a 1×1×3×3 Array{Float64,4}:
[:, :, 1, 1] =
 0.40280077905806266

[:, :, 2, 1] =
 0.24823028034134093

[:, :, 3, 1] =
 0.348968940600596

[:, :, 1, 2] =
 0.10025499082597984

[:, :, 2, 2] =
 0.49250415138072934

[:, :, 3, 2] =
 0.4072408577932906

[:, :, 1, 3] =
 0.49694423011595723

[:, :, 2, 3] =
 0.2592655682779296

[:, :, 3, 3] =
 0.24379020160611306"><pre class="notranslate"><code>julia&gt; p = Pνν(osc, 1, 10000)
4-dimensional AxisArray{Float64,4,...} with axes:
    :Energy, [1.0]
    :Baseline, [10000.0]
    :InitFlav, NeutrinoFlavour[Electron, Muon, Tau]
    :FinalFlav, NeutrinoFlavour[Electron, Muon, Tau]
And data, a 1×1×3×3 Array{Float64,4}:
[:, :, 1, 1] =
 0.40280077905806266

[:, :, 2, 1] =
 0.24823028034134093

[:, :, 3, 1] =
 0.348968940600596

[:, :, 1, 2] =
 0.10025499082597984

[:, :, 2, 2] =
 0.49250415138072934

[:, :, 3, 2] =
 0.4072408577932906

[:, :, 1, 3] =
 0.49694423011595723

[:, :, 2, 3] =
 0.2592655682779296

[:, :, 3, 3] =
 0.24379020160611306
</code></pre></div>
<p dir="auto">The output is an <code>AxisArray</code> which provides intuitive indexing, e.g.
for P(νμ→ντ) at the given energy and baseline:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; p[Energy=1, Baseline=1, InitFlav=Muon, FinalFlav=Tau]
0.2592655682779296"><pre class="notranslate"><code>julia&gt; p[Energy=1, Baseline=1, InitFlav=Muon, FinalFlav=Tau]
0.2592655682779296
</code></pre></div>
<p dir="auto">The probabilities are calculated based on the transition matrix
(the so-called PMNS-Matrix) between flavour and mass eigenstates,
as well as the Hamiltonian in the mass eigenbasis. In order to calculating these
just once, the <code>Pνν</code> function can be utilised in the following way:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; U = PMNSMatrix(osc)
3×3 Array{Complex{Float64},2}:
   0.82161+0.0im         0.550114+0.0im        -0.112505+0.0983582im
 -0.301737+0.0608595im   0.601232+0.0407488im   0.736282+0.0im
  0.476688+0.0545516im  -0.576975+0.0365253im   0.659968+0.0im

julia&gt; H = Hamiltonian(osc)
3-element Array{Complex{Float64},1}:
 -0.0008902666666666667 + 0.0im
 -0.0008163666666666667 + 0.0im
  0.0017066333333333333 + 0.0im

julia&gt; Pνν(U, H, 1, 10000)
4-dimensional AxisArray{Float64,4,...} with axes:
    :Energy, [1.0]
    :Baseline, [10000.0]
    :InitFlav, NeutrinoFlavour[Electron, Muon, Tau]
    :FinalFlav, NeutrinoFlavour[Electron, Muon, Tau]
And data, a 1×1×3×3 Array{Float64,4}:
[:, :, 1, 1] =
 0.40280077905806266

[:, :, 2, 1] =
 0.24823028034134093

[:, :, 3, 1] =
 0.348968940600596

[:, :, 1, 2] =
 0.10025499082597984

[:, :, 2, 2] =
 0.49250415138072934

[:, :, 3, 2] =
 0.4072408577932906

[:, :, 1, 3] =
 0.49694423011595723

[:, :, 2, 3] =
 0.2592655682779296

[:, :, 3, 3] =
 0.24379020160611306"><pre class="notranslate"><code>julia&gt; U = PMNSMatrix(osc)
3×3 Array{Complex{Float64},2}:
   0.82161+0.0im         0.550114+0.0im        -0.112505+0.0983582im
 -0.301737+0.0608595im   0.601232+0.0407488im   0.736282+0.0im
  0.476688+0.0545516im  -0.576975+0.0365253im   0.659968+0.0im

julia&gt; H = Hamiltonian(osc)
3-element Array{Complex{Float64},1}:
 -0.0008902666666666667 + 0.0im
 -0.0008163666666666667 + 0.0im
  0.0017066333333333333 + 0.0im

julia&gt; Pνν(U, H, 1, 10000)
4-dimensional AxisArray{Float64,4,...} with axes:
    :Energy, [1.0]
    :Baseline, [10000.0]
    :InitFlav, NeutrinoFlavour[Electron, Muon, Tau]
    :FinalFlav, NeutrinoFlavour[Electron, Muon, Tau]
And data, a 1×1×3×3 Array{Float64,4}:
[:, :, 1, 1] =
 0.40280077905806266

[:, :, 2, 1] =
 0.24823028034134093

[:, :, 3, 1] =
 0.348968940600596

[:, :, 1, 2] =
 0.10025499082597984

[:, :, 2, 2] =
 0.49250415138072934

[:, :, 3, 2] =
 0.4072408577932906

[:, :, 1, 3] =
 0.49694423011595723

[:, :, 2, 3] =
 0.2592655682779296

[:, :, 3, 3] =
 0.24379020160611306
</code></pre></div>
<h2 dir="auto"><a id="user-content-oscillations-in-vacuum" class="anchor" aria-hidden="true" href="#oscillations-in-vacuum"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Oscillations in Vacuum</h2>
<p dir="auto">For <strong>homogeneous matter with a fixed density</strong>, a modified PMNS-Matrix
and Hamiltonian can be determined and passed into <code>Pνν</code>, just like for
oscillations in vacuum. In order to determine the modified PMNS-Matrix and
Hamiltonian the neutrino energy and the matter density are required:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; U_mat, H_mat = MatterOscillationMatrices(U, H, 1, 13);

julia&gt; H_mat
3-element Array{Complex{Float64},1}:
 -0.0008404901318507502 - 2.5459232191294903e-20im
   9.078126149399635e-5 - 1.75151351027943e-20im
  0.0017419062876598283 - 1.8741859435908039e-19im

julia&gt; U_mat
3×3 Array{Complex{Float64},2}:
  0.0358018-0.000158113im  0.970863+0.0im       -0.178275+0.156083im
 -0.662778+0.00661213im    0.157174+0.116074im   0.722845+0.0im
  0.74793+0.0im            0.0917808+0.104043im  0.649115-0.00104331im"><pre class="notranslate"><code>julia&gt; U_mat, H_mat = MatterOscillationMatrices(U, H, 1, 13);

julia&gt; H_mat
3-element Array{Complex{Float64},1}:
 -0.0008404901318507502 - 2.5459232191294903e-20im
   9.078126149399635e-5 - 1.75151351027943e-20im
  0.0017419062876598283 - 1.8741859435908039e-19im

julia&gt; U_mat
3×3 Array{Complex{Float64},2}:
  0.0358018-0.000158113im  0.970863+0.0im       -0.178275+0.156083im
 -0.662778+0.00661213im    0.157174+0.116074im   0.722845+0.0im
  0.74793+0.0im            0.0917808+0.104043im  0.649115-0.00104331im
</code></pre></div>
<p dir="auto">The oscillation probabilities using the <code>Pνν</code> function, as described above:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; Pνν(U_mat, H_mat, 1, 10000)
4-dimensional AxisArray{Float64,4,...} with axes:
    :Energy, [1]
    :Baseline, [10000]
    :InitFlav, NeutrinoFlavour[Electron, Muon, Tau]
    :FinalFlav, NeutrinoFlavour[Electron, Muon, Tau]
And data, a 1×1×3×3 Array{Float64,4}:
[:, :, 1, 1] =
 0.8340722296308641

[:, :, 2, 1] =
 0.08290502782120308

[:, :, 3, 1] =
 0.08302274254793415

[:, :, 1, 2] =
 0.10825570726818898

[:, :, 2, 2] =
 0.052976635020068

[:, :, 3, 2] =
 0.8387676577117485

[:, :, 1, 3] =
 0.05767206310094823

[:, :, 2, 3] =
 0.8641183371587345

[:, :, 3, 3] =
 0.07820959974032213
"><pre class="notranslate"><code>julia&gt; Pνν(U_mat, H_mat, 1, 10000)
4-dimensional AxisArray{Float64,4,...} with axes:
    :Energy, [1]
    :Baseline, [10000]
    :InitFlav, NeutrinoFlavour[Electron, Muon, Tau]
    :FinalFlav, NeutrinoFlavour[Electron, Muon, Tau]
And data, a 1×1×3×3 Array{Float64,4}:
[:, :, 1, 1] =
 0.8340722296308641

[:, :, 2, 1] =
 0.08290502782120308

[:, :, 3, 1] =
 0.08302274254793415

[:, :, 1, 2] =
 0.10825570726818898

[:, :, 2, 2] =
 0.052976635020068

[:, :, 3, 2] =
 0.8387676577117485

[:, :, 1, 3] =
 0.05767206310094823

[:, :, 2, 3] =
 0.8641183371587345

[:, :, 3, 3] =
 0.07820959974032213

</code></pre></div>
<p dir="auto">The second option is suitable for scenarios with more <strong>complex paths</strong> with
sections of different densities. An example is shown in the next chapter, where
we propagate neutrinos through the earth.</p>
<h2 dir="auto"><a id="user-content-neutrino-propagation-through-the-earth" class="anchor" aria-hidden="true" href="#neutrino-propagation-through-the-earth"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Neutrino Propagation through the Earth</h2>
<p dir="auto">The <code>Neurthino.jl</code> package also includes features for the neutrino oscillation probabilities
through the Earth, i.e. it contains functions for generating a neutrino path based on the
PREM model. In the following example a neutrino oscillogram with a resolution of 200x200 bins
is determined. The zenith angles for up going neutrinos (cos(θ)ϵ[-1,0]) and
subsequently the neutrino paths are generated first:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; zenith = acos.(range(-1,stop=0,length=200));

julia&gt; paths = Neurthino.prempath(zenith, 2.5, samples=100, discrete_densities=0:0.1:14);"><pre class="notranslate"><code>julia&gt; zenith = acos.(range(-1,stop=0,length=200));

julia&gt; paths = Neurthino.prempath(zenith, 2.5, samples=100, discrete_densities=0:0.1:14);
</code></pre></div>
<p dir="auto">The detector is assumed to be 2.5km under the earth's surface (a typical KM3NeT
detector block in the Mediterranean), which is a realistic scenario for
Water-Cherenkov-Detectors in sea or ice. Each path consists of 100 sections of
equal lengths while the matter density is taken from the PREM model.
If a vector of densities is passed as <code>discrete_densities</code>, the values are
clipped to the closest value.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; energies = 10 .^ range(0, stop=2, length=200);

julia&gt; prob = Pνν(U, H, energies, paths);"><pre class="notranslate"><code>julia&gt; energies = 10 .^ range(0, stop=2, length=200);

julia&gt; prob = Pνν(U, H, energies, paths);
</code></pre></div>
<p dir="auto">The returned array <code>prob</code> is again of type <code>AxisArray</code> with an axis <code>Path</code> for the path index (instead of the <code>Baseline</code> axis).
P(νe→νe) is determined by <code>prob[InitFlav=Electron, FinalFlav=Electron]</code>, which can be visualised by a <code>heatmap</code>:<br>
<a target="_blank" rel="noopener noreferrer" href="https://github.com/KM3NeT/Neurthino.jl/raw/master/docs/src/assets/earth_prob_elel.png"><img src="https://github.com/KM3NeT/Neurthino.jl/raw/master/docs/src/assets/earth_prob_elel.png" alt="" style="max-width: 100%;"></a> <br>
and for P(νμ→νμ) or <code>prob[InitFlav=Muon, FinalFlav=Muon]</code>:<br>
<a target="_blank" rel="noopener noreferrer" href="https://github.com/KM3NeT/Neurthino.jl/raw/master/docs/src/assets/earth_prob_mumu.png"><img src="https://github.com/KM3NeT/Neurthino.jl/raw/master/docs/src/assets/earth_prob_mumu.png" alt="" style="max-width: 100%;"></a></p>






</article></div>