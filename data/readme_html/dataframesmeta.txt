<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-dataframesmetajl" class="anchor" aria-hidden="true" href="#dataframesmetajl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>DataFramesMeta.jl</h1>
<p><a href="http://pkg.julialang.org/?pkg=DataFramesMeta?pkg=DataFramesMeta&amp;ver=0.6" rel="nofollow"><img src="https://camo.githubusercontent.com/f257820fe65f7cba5a2438fc92307cfdf3dab8f4/687474703a2f2f706b672e6a756c69616c616e672e6f72672f6261646765732f446174614672616d65734d6574615f302e362e737667" alt="DataFramesMeta" data-canonical-src="http://pkg.julialang.org/badges/DataFramesMeta_0.6.svg" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/JuliaStats/DataFramesMeta.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/f6ef5e22428e63b20d0d2ed140d5589606101a74/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f4a756c696153746174732f446174614672616d65734d6574612e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coveralls" data-canonical-src="https://coveralls.io/repos/github/JuliaStats/DataFramesMeta.jl/badge.svg?branch=master" style="max-width:100%;"></a>
<a href="https://travis-ci.org/JuliaStats/DataFramesMeta.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/d58b1d92ec06bc965d543fc5bdaaffcbc30fc3c1/68747470733a2f2f7472617669732d63692e6f72672f4a756c696153746174732f446174614672616d65734d6574612e6a6c2e7376673f6272616e63683d6d6173746572" alt="Travis" data-canonical-src="https://travis-ci.org/JuliaStats/DataFramesMeta.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/tshort/dataframesmeta-jl/branch/master" rel="nofollow"><img src="https://camo.githubusercontent.com/d9e388045a714fe3f28327577abeadb2f707af3d/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f6769746875622f6a756c696173746174732f646174616672616d65736d6574612e6a6c3f6272616e63683d6d6173746572267376673d74727565" alt="AppVeyor" data-canonical-src="https://ci.appveyor.com/api/projects/status/github/juliastats/dataframesmeta.jl?branch=master&amp;svg=true" style="max-width:100%;"></a></p>
<p>Metaprogramming tools for DataFrames.jl objects.
These macros improve performance and provide more convenient syntax.</p>
<h1><a id="user-content-features" class="anchor" aria-hidden="true" href="#features"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Features</h1>
<h2><a id="user-content-with" class="anchor" aria-hidden="true" href="#with"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><code>@with</code></h2>
<p><code>@with</code> allows DataFrame columns to be referenced as symbols like
<code>:colX</code> in expressions. If an expression is wrapped in <code>^(expr)</code>,
<code>expr</code> gets passed through untouched. If an expression is wrapped in
<code>cols(expr)</code>, the column is referenced by the variable <code>expr</code> rather than
a symbol. Here are some examples:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> DataFrames
<span class="pl-k">using</span> DataFramesMeta

df <span class="pl-k">=</span> <span class="pl-c1">DataFrame</span>(x <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">3</span>, y <span class="pl-k">=</span> [<span class="pl-c1">2</span>, <span class="pl-c1">1</span>, <span class="pl-c1">2</span>])
x <span class="pl-k">=</span> [<span class="pl-c1">2</span>, <span class="pl-c1">1</span>, <span class="pl-c1">0</span>]

<span class="pl-c1">@with</span>(df, <span class="pl-c1">:y</span> <span class="pl-k">.+</span> <span class="pl-c1">1</span>)
<span class="pl-c1">@with</span>(df, <span class="pl-c1">:x</span> <span class="pl-k">+</span> x)  <span class="pl-c"><span class="pl-c">#</span> the two x's are different</span>

x <span class="pl-k">=</span> <span class="pl-c1">@with</span> df <span class="pl-k">begin</span>
    res <span class="pl-k">=</span> <span class="pl-c1">0.0</span>
    <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">length</span>(<span class="pl-c1">:x</span>)
        res <span class="pl-k">+=</span> <span class="pl-c1">:x</span>[i] <span class="pl-k">*</span> <span class="pl-c1">:y</span>[i]
    <span class="pl-k">end</span>
    res
<span class="pl-k">end</span>

<span class="pl-c1">@with</span>(df, df[<span class="pl-c1">:x</span> <span class="pl-k">.&gt;</span> <span class="pl-c1">1</span>, <span class="pl-k">^</span>(<span class="pl-c1">:y</span>)]) <span class="pl-c"><span class="pl-c">#</span> The ^ means leave the :y alone</span>

colref <span class="pl-k">=</span> <span class="pl-c1">:x</span>
<span class="pl-c1">@with</span>(df, <span class="pl-c1">:y</span> <span class="pl-k">+</span> <span class="pl-c1">cols</span>(colref)) <span class="pl-c"><span class="pl-c">#</span> Equivalent to df[:y] + df[colref]</span></pre></div>
<p><code>@with</code> is the fundamental macro used by the other metaprogramming
utilities.</p>
<p><code>@with</code> creates a function, so scope within <code>@with</code> is a local scope.
Variables in the parent can be read. Writing to variables in the parent scope
differs depending on the type of scope of the parent. If the parent scope is a
global scope, then a variable cannot be assigned without using the <code>global</code> keyword.
If the parent scope is a local scope (inside a function or let block for example),
the <code>global</code> keyword is not needed to assign to that parent scope.</p>
<h2><a id="user-content-where" class="anchor" aria-hidden="true" href="#where"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><code>@where</code></h2>
<p>Select row subsets.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">@where</span>(df, <span class="pl-c1">:x</span> <span class="pl-k">.&gt;</span> <span class="pl-c1">1</span>)
<span class="pl-c1">@where</span>(df, <span class="pl-c1">:x</span> <span class="pl-k">.&gt;</span> x)
<span class="pl-c1">@where</span>(df, <span class="pl-c1">:x</span> <span class="pl-k">.&gt;</span> x, <span class="pl-c1">:y</span> <span class="pl-k">.==</span> <span class="pl-c1">3</span>)  <span class="pl-c"><span class="pl-c">#</span> the two expressions are "and-ed"</span></pre></div>
<h2><a id="user-content-select" class="anchor" aria-hidden="true" href="#select"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><code>@select</code></h2>
<p>Column selections and transformations.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">@select</span>(df, <span class="pl-c1">:x</span>, <span class="pl-c1">:y</span>)
<span class="pl-c1">@select</span>(df, x2 <span class="pl-k">=</span> <span class="pl-c1">2</span> <span class="pl-k">*</span> <span class="pl-c1">:x</span>, <span class="pl-c1">:y</span>)</pre></div>
<h2><a id="user-content-transform" class="anchor" aria-hidden="true" href="#transform"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><code>@transform</code></h2>
<p>Add additional columns based on keyword arguments.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">@transform</span>(df, newCol <span class="pl-k">=</span> <span class="pl-c1">cos</span>.(<span class="pl-c1">:x</span>), anotherCol <span class="pl-k">=</span> <span class="pl-c1">:x</span><span class="pl-k">.^</span><span class="pl-c1">2</span> <span class="pl-k">+</span> <span class="pl-c1">3</span><span class="pl-k">*</span><span class="pl-c1">:x</span> <span class="pl-k">.+</span> <span class="pl-c1">4</span>)</pre></div>
<h2><a id="user-content-byrow" class="anchor" aria-hidden="true" href="#byrow"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><code>@byrow!</code></h2>
<p>Act on a DataFrame row-by-row. Includes support for control flow and <code>begin end</code> blocks. Since the "environment" induced by <code>@byrow! df</code> is implicitly a single row of <code>df</code>, one uses regular operators and comparisons instead of their elementwise counterparts as in <code>@with</code>.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">@byrow!</span> df <span class="pl-k">if</span> <span class="pl-c1">:A</span> <span class="pl-k">&gt;</span> <span class="pl-c1">:B</span>; <span class="pl-c1">:A</span> <span class="pl-k">=</span> <span class="pl-c1">:B</span> <span class="pl-k">*</span> <span class="pl-c1">:C</span> <span class="pl-k">end</span></pre></div>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">let</span> x <span class="pl-k">=</span> <span class="pl-c1">0.0</span>
    <span class="pl-c1">@byrow!</span> df <span class="pl-k">begin</span>
        <span class="pl-k">if</span> <span class="pl-c1">:A</span> <span class="pl-k">&lt;</span> <span class="pl-c1">:B</span>
            x <span class="pl-k">+=</span> <span class="pl-c1">:B</span> <span class="pl-k">*</span> <span class="pl-c1">:C</span>
        <span class="pl-k">end</span>
    <span class="pl-k">end</span>
    x
<span class="pl-k">end</span></pre></div>
<p>Note that the let block is required here to create a scope to allow assignment
of <code>x</code> within <code>@byrow!</code>.</p>
<p><code>byrow!</code> also supports special syntax for allocating new columns to make
<code>byrow!</code> more useful for data transformations. The syntax <code>@newcol x::Array{Int}</code> allocates a new column <code>:x</code> with an <code>Array</code> container with eltype
<code>Int</code>. Note that the returned <code>AbstractDataFrame</code> includes these new columns, but
the original <code>df</code> is not affected. Here is an example where two new columns are
added:</p>
<div class="highlight highlight-source-julia"><pre>df <span class="pl-k">=</span> <span class="pl-c1">DataFrame</span>(A <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">3</span>, B <span class="pl-k">=</span> [<span class="pl-c1">2</span>, <span class="pl-c1">1</span>, <span class="pl-c1">2</span>])
df2 <span class="pl-k">=</span> <span class="pl-c1">@byrow!</span> df <span class="pl-k">begin</span>
    <span class="pl-c1">@newcol</span> colX<span class="pl-k">::</span><span class="pl-c1">Array{Float64}</span>
    <span class="pl-c1">@newcol</span> colY<span class="pl-k">::</span><span class="pl-c1">Array{Union{Int,Missing}}</span>
    <span class="pl-c1">:colX</span> <span class="pl-k">=</span> <span class="pl-c1">:B</span> <span class="pl-k">==</span> <span class="pl-c1">2</span> ? pi <span class="pl-k">*</span> <span class="pl-c1">:A</span> : <span class="pl-c1">:B</span>
    <span class="pl-k">if</span> <span class="pl-c1">:A</span> <span class="pl-k">&gt;</span> <span class="pl-c1">1</span>
        <span class="pl-c1">:colY</span> <span class="pl-k">=</span> <span class="pl-c1">:A</span> <span class="pl-k">*</span> <span class="pl-c1">:B</span>
    <span class="pl-k">else</span>
        <span class="pl-c1">:colY</span> <span class="pl-k">=</span> Missing
    <span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>
<h2><a id="user-content-linq-style-queries-and-transforms" class="anchor" aria-hidden="true" href="#linq-style-queries-and-transforms"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>LINQ-Style Queries and Transforms</h2>
<p>A number of functions for operations on DataFrames have been defined.
Here is a table of equivalents for Hadley's
<a href="https://github.com/hadley/dplyr">dplyr</a> and common
<a href="http://en.wikipedia.org/wiki/Language_Integrated_Query" rel="nofollow">LINQ</a>
functions.</p>
<pre><code>Julia             dplyr            LINQ
---------------------------------------------
@where            filter           Where
@transform        mutate           Select (?)
@by                                GroupBy
groupby           group_by
@based_on         summarise/do
@orderby          arrange          OrderBy
@select           select           Select
</code></pre>
<h2><a id="user-content-linq-macro" class="anchor" aria-hidden="true" href="#linq-macro"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>LINQ macro</h2>
<p>There is also a <code>@linq</code> macro that supports chaining and all of the
functionality defined in other macros. Here is an example of <code>@linq</code>:</p>
<div class="highlight highlight-source-julia"><pre>x_thread <span class="pl-k">=</span> <span class="pl-c1">@linq</span> df <span class="pl-k">|&gt;</span>
    <span class="pl-c1">transform</span>(y <span class="pl-k">=</span> <span class="pl-c1">10</span> <span class="pl-k">*</span> <span class="pl-c1">:x</span>) <span class="pl-k">|&gt;</span>
    <span class="pl-c1">where</span>(<span class="pl-c1">:a</span> <span class="pl-k">.&gt;</span> <span class="pl-c1">2</span>) <span class="pl-k">|&gt;</span>
    <span class="pl-c1">by</span>(<span class="pl-c1">:b</span>, meanX <span class="pl-k">=</span> <span class="pl-c1">mean</span>(<span class="pl-c1">:x</span>), meanY <span class="pl-k">=</span> <span class="pl-c1">mean</span>(<span class="pl-c1">:y</span>)) <span class="pl-k">|&gt;</span>
    <span class="pl-c1">orderby</span>(<span class="pl-c1">:meanX</span>) <span class="pl-k">|&gt;</span>
    <span class="pl-c1">select</span>(<span class="pl-c1">:meanX</span>, <span class="pl-c1">:meanY</span>, var <span class="pl-k">=</span> <span class="pl-c1">:b</span>)</pre></div>
<p>Relative to the use of individual macros, chaining looks cleaner and
more obvious with less noise from <code>@</code> symbols. This approach also
avoids filling up the limited macro name space. The main downside is
that more magic happens under the hood.</p>
<p>This method is extensible. Here is a comparison of the macro and
<code>@linq</code> versions of <code>with</code>.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">macro</span> <span class="pl-en">with</span>(d, body)
    <span class="pl-c1">esc</span>(<span class="pl-c1">with_helper</span>(d, body))
<span class="pl-k">end</span>

<span class="pl-k">function</span> <span class="pl-en">linq</span>(<span class="pl-k">::</span><span class="pl-c1">SymbolParameter{:with}</span>, d, body)
    <span class="pl-c1">with_helper</span>(d, body)
<span class="pl-k">end</span></pre></div>
<p>The <code>linq</code> method above registers the expression-replacement method
defined for all <code>with()</code> calls. It should return an expression like a
macro.</p>
<p>Again, this is experimental. Based on feedback, we may decide to only
use <code>@linq</code> or only support the set of linq-like macros.</p>
<p>Alternatively you can use Lazy.jl <code>@&gt;</code> macro like this:</p>
<div class="highlight highlight-source-julia"><pre>x_thread <span class="pl-k">=</span> @<span class="pl-k">&gt;</span> <span class="pl-k">begin</span>
    df
    <span class="pl-c1">@transform</span>(y <span class="pl-k">=</span> <span class="pl-c1">10</span> <span class="pl-k">*</span> <span class="pl-c1">:x</span>)
    <span class="pl-c1">@where</span>(<span class="pl-c1">:a</span> <span class="pl-k">.&gt;</span> <span class="pl-c1">2</span>)
    <span class="pl-c1">@by</span>(<span class="pl-c1">:b</span>, meanX <span class="pl-k">=</span> <span class="pl-c1">mean</span>(<span class="pl-c1">:x</span>), meanY <span class="pl-k">=</span> <span class="pl-c1">mean</span>(<span class="pl-c1">:y</span>))
    <span class="pl-c1">@orderby</span>(<span class="pl-c1">:meanX</span>)
    <span class="pl-c1">@select</span>(<span class="pl-c1">:meanX</span>, <span class="pl-c1">:meanY</span>, var <span class="pl-k">=</span> <span class="pl-c1">:b</span>)
<span class="pl-k">end</span></pre></div>
<h2><a id="user-content-operations-on-groupeddataframes" class="anchor" aria-hidden="true" href="#operations-on-groupeddataframes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Operations on GroupedDataFrames</h2>
<p>The following operations are now included:</p>
<ul>
<li>
<p><code>where(g, d -&gt; mean(d[:a]) &gt; 0)</code> and <code>@where(g, mean(:a) &gt; 0)</code> --
Filter groups based on the given criteria. Returns a
GroupedDataFrame.</p>
</li>
<li>
<p><code>orderby(g, d -&gt; mean(d[:a]))</code> and <code>@orderby(g, mean(:a))</code> -- Sort
groups based on the given criteria. Returns a GroupedDataFrame.</p>
</li>
<li>
<p><code>DataFrame(g)</code> -- Convert groups back to a DataFrame with the same
group orderings.</p>
</li>
<li>
<p><code>@based_on(g, z = mean(:a))</code> -- Summarize results within groups.
Returns a DataFrame.</p>
</li>
<li>
<p><code>transform(g, d -&gt; y = d[:a] - mean(d[:a]))</code> and
<code>@transform(g, y = :a - mean(:a))</code> -- Transform a DataFrame based
on operations within a group. Returns a DataFrame.</p>
</li>
</ul>
<p>You can also index on GroupedDataFrames. <code>g[1]</code> is the first group,
returned as a SubDataFrame. <code>g[[1,4,5]]</code> or
<code>g[[true, false, true, false, false]]</code> return subsets of groups as a
GroupedDataFrame. You can also iterate over GroupedDataFrames.</p>
<p>The most general split-apply-combine approach is based on <code>map</code>.
<code>map(fun, g)</code> returns a GroupApplied object with keys and vals. This
can be used with <code>combine</code>.</p>
<h1><a id="user-content-performance" class="anchor" aria-hidden="true" href="#performance"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Performance</h1>
<p><code>@with</code> works by parsing the expression body for all columns indicated
by symbols (e.g. <code>:colA</code>). Then, a function is created that wraps the
body and passes the columns as function arguments. This function is
then called. Operations are efficient because:</p>
<ul>
<li>A pseudo-anonymous function is defined, so types are stable.</li>
<li>Columns are passed as references, eliminating DataFrame indexing.</li>
</ul>
<p>All of the other macros are based on <code>@with</code>.</p>
<h1><a id="user-content-package-maintenance" class="anchor" aria-hidden="true" href="#package-maintenance"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Package Maintenance</h1>
<p>Any of the
<a href="https://github.com/orgs/JuliaStats/teams/collaborators">JuliaStats collaborators</a>
have write access and can accept pull requests.</p>
<p>Pull requests are welcome. Pull requests should include updated tests. If
functionality is changed, docstrings should be added or updated. Generally,
follow the guidelines in
<a href="https://github.com/JuliaStats/DataFrames.jl/blob/master/CONTRIBUTING.md">DataFrames</a>.</p>
</article></div>