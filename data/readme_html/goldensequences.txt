<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-goldensequencesjl" class="anchor" aria-hidden="true" href="#goldensequencesjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>GoldenSequences.jl</h1>
<p>Generalized golden sequences, a form of low discrepancy sequence or quasi random numbers
See <a href="http://extremelearning.com.au/unreasonable-effectiveness-of-quasirandom-sequences/" rel="nofollow">Martin Roberts: The Unreasonable Effectiveness
of Quasirandom Sequences</a> for background.</p>
<p>The <code>d</code>-dimensional sequence follows</p>
<pre><code>x[i] = x[i-1] .+ z .% true, x[0] = x0
</code></pre>
<p>where</p>
<pre><code>z = [ϕ[k]^(-i) for i in 1:d]
</code></pre>
<p>and <code>ϕ[k]</code> solves <code>ϕ[k]^(d+1) = ϕ[k] + 1</code> (with <code>ϕ[1]</code> the golden mean.)</p>
<h1><a id="user-content-golden-sequence" class="anchor" aria-hidden="true" href="#golden-sequence"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Golden sequence</h1>
<pre><code>julia&gt; GoldenSequence(0.0)[1]
0.6180339887498949
</code></pre>
<p>Shifted golden sequence starting in 0.5</p>
<pre><code>julia&gt;  GoldenSequence(0.5)[0]
0.5

julia&gt;  GoldenSequence(0.5)[1]
0.1180339887498949
</code></pre>
<p><code>GoldenSequence</code> returns an infinite iterator:</p>
<pre><code>julia&gt; collect(take(GoldenSequence(0.0), 10))
10-element Array{Float64,1}:
 0.0                
 0.6180339887498949
 0.2360679774997898
 0.8541019662496847
 0.4721359549995796
 0.09016994374947451
 0.7082039324993694
 0.3262379212492643
 0.9442719099991592
 0.5623058987490541
</code></pre>
<p>Random colors: Low discrepancy series are good choice for (quasi-) random colors</p>
<pre><code>using Colors
n = 20
c = map(x-&gt;RGB(x...), (take(GoldenSequence(3), n))) # perfect for random colors
</code></pre>
<p><a target="_blank" rel="noopener noreferrer" href="https://raw.githubusercontent.com/mschauer/GoldenSequences.jl/master/randomcolors.png"><img src="https://raw.githubusercontent.com/mschauer/GoldenSequences.jl/master/randomcolors.png" alt="Colors" style="max-width:100%;"></a></p>
<h1><a id="user-content-2d-golden-sequence" class="anchor" aria-hidden="true" href="#2d-golden-sequence"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>2D golden sequence</h1>
<pre><code>julia&gt;  GoldenSequence(2)[1]
(0.7548776662466927, 0.5698402909980532)
</code></pre>
<p>As low discrepancy series these number are well distributed (left), better than random numbers (right):</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> Makie
n <span class="pl-k">=</span> <span class="pl-c1">155</span>
x <span class="pl-k">=</span> <span class="pl-c1">collect</span>(Iterators<span class="pl-k">.</span><span class="pl-c1">take</span>(<span class="pl-c1">GoldenSequence</span>(<span class="pl-c1">2</span>), n))
p1 <span class="pl-k">=</span> <span class="pl-c1">scatter</span>(x, markersize<span class="pl-k">=</span><span class="pl-c1">0.02</span>)
y <span class="pl-k">=</span> [(<span class="pl-c1">rand</span>(),<span class="pl-c1">rand</span>()) <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span>n]
p2 <span class="pl-k">=</span> <span class="pl-c1">scatter</span>(y, markersize<span class="pl-k">=</span><span class="pl-c1">0.02</span>, color<span class="pl-k">=</span><span class="pl-c1">:red</span>)
<span class="pl-c1">vbox</span>(p1, p2)</pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="https://raw.githubusercontent.com/mschauer/GoldenSequences.jl/master/quasivsrandom.png"><img src="https://raw.githubusercontent.com/mschauer/GoldenSequences.jl/master/quasivsrandom.png" alt="Quasi-random vs. random" style="max-width:100%;"></a></p>
<h1><a id="user-content-interface" class="anchor" aria-hidden="true" href="#interface"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Interface</h1>
<pre><code>GoldenSequence(n::Int) # Float64 n-dimensional golden sequence
GoldenSequence(x0::Number) # 1-d golden sequence shifted by `x0`
GoldenSequence(x0) # length(x)-d golden sequence shifted/starting in 'x0'
</code></pre>
<h1><a id="user-content-a-flower" class="anchor" aria-hidden="true" href="#a-flower"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>A flower</h1>
<p>Flower petals grow in spots not covering older petals, the new spot is at an angle given by the golden sequence.</p>
<pre><code>using Colors
using Makie
n = 20
c = map(x-&gt;RGB(x...), (take(GoldenSequence(3), n))) # perfect for random colors
x = collect(take(GoldenSequence(0.0), n))
petals = [(i*cos(2pi*x), i*sin(2pi*x)) for (i,x) in  enumerate(x)]
scatter(reverse(petals), color=c, markersize=10*(n:-1:1))
</code></pre>
<p><a target="_blank" rel="noopener noreferrer" href="https://raw.githubusercontent.com/mschauer/GoldenSequences.jl/master/flower.png"><img src="https://raw.githubusercontent.com/mschauer/GoldenSequences.jl/master/flower.png" alt="Flower petals" style="max-width:100%;"></a></p>
</article></div>