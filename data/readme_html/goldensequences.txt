<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-goldensequencesjl" class="anchor" aria-hidden="true" href="#goldensequencesjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>GoldenSequences.jl</h1>
<p>Generalized golden sequences, a form of low discrepancy sequence or quasi random numbers
See <a href="http://extremelearning.com.au/unreasonable-effectiveness-of-quasirandom-sequences/" rel="nofollow">Martin Roberts: The Unreasonable Effectiveness
of Quasirandom Sequences</a> for background.</p>
<p>The <code>d</code>-dimensional sequence follows</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="x[i] = (x[i-1] .+ z) .% true, x[0] = x0
"><pre><code>x[i] = (x[i-1] .+ z) .% true, x[0] = x0
</code></pre></div>
<p>where</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="z = [ϕ[k]^(-i) for i in 1:d]
"><pre><code>z = [ϕ[k]^(-i) for i in 1:d]
</code></pre></div>
<p>and <code>ϕ[k]</code> solves <code>ϕ[k]^(d+1) = ϕ[k] + 1</code> (with <code>ϕ[1]</code> the golden mean.)</p>
<h1><a id="user-content-golden-sequence" class="anchor" aria-hidden="true" href="#golden-sequence"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Golden sequence</h1>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt; GoldenSequence(0.0)[1]
0.6180339887498949
"><pre><code>julia&gt; GoldenSequence(0.0)[1]
0.6180339887498949
</code></pre></div>
<p>Shifted golden sequence starting in 0.5</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt;  GoldenSequence(0.5)[0]
0.5

julia&gt;  GoldenSequence(0.5)[1]
0.1180339887498949
"><pre><code>julia&gt;  GoldenSequence(0.5)[0]
0.5

julia&gt;  GoldenSequence(0.5)[1]
0.1180339887498949
</code></pre></div>
<p><code>GoldenSequence</code> returns an infinite iterator:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt; collect(take(GoldenSequence(0.0), 10))
10-element Array{Float64,1}:
 0.0                
 0.6180339887498949
 0.2360679774997898
 0.8541019662496847
 0.4721359549995796
 0.09016994374947451
 0.7082039324993694
 0.3262379212492643
 0.9442719099991592
 0.5623058987490541
"><pre><code>julia&gt; collect(take(GoldenSequence(0.0), 10))
10-element Array{Float64,1}:
 0.0                
 0.6180339887498949
 0.2360679774997898
 0.8541019662496847
 0.4721359549995796
 0.09016994374947451
 0.7082039324993694
 0.3262379212492643
 0.9442719099991592
 0.5623058987490541
</code></pre></div>
<p>Random colors: Low discrepancy series are good choice for (quasi-) random colors</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="using Colors
n = 20
c = map(x-&gt;RGB(x...), (take(GoldenSequence(3), n))) # perfect for random colors
"><pre><code>using Colors
n = 20
c = map(x-&gt;RGB(x...), (take(GoldenSequence(3), n))) # perfect for random colors
</code></pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="https://raw.githubusercontent.com/mschauer/GoldenSequences.jl/master/randomcolors.png"><img src="https://raw.githubusercontent.com/mschauer/GoldenSequences.jl/master/randomcolors.png" alt="Colors" style="max-width:100%;"></a></p>
<h1><a id="user-content-2d-golden-sequence" class="anchor" aria-hidden="true" href="#2d-golden-sequence"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>2D golden sequence</h1>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt;  GoldenSequence(2)[1]
(0.7548776662466927, 0.5698402909980532)
"><pre><code>julia&gt;  GoldenSequence(2)[1]
(0.7548776662466927, 0.5698402909980532)
</code></pre></div>
<p>As low discrepancy series these number are well distributed (left), better than random numbers (right):</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Makie
n = 155
x = collect(Iterators.take(GoldenSequence(2), n))
p1 = scatter(x, markersize=0.02)
y = [(rand(),rand()) for i in 1:n]
p2 = scatter(y, markersize=0.02, color=:red)
vbox(p1, p2)
"><pre><span class="pl-k">using</span> Makie
n <span class="pl-k">=</span> <span class="pl-c1">155</span>
x <span class="pl-k">=</span> <span class="pl-c1">collect</span>(Iterators<span class="pl-k">.</span><span class="pl-c1">take</span>(<span class="pl-c1">GoldenSequence</span>(<span class="pl-c1">2</span>), n))
p1 <span class="pl-k">=</span> <span class="pl-c1">scatter</span>(x, markersize<span class="pl-k">=</span><span class="pl-c1">0.02</span>)
y <span class="pl-k">=</span> [(<span class="pl-c1">rand</span>(),<span class="pl-c1">rand</span>()) <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span>n]
p2 <span class="pl-k">=</span> <span class="pl-c1">scatter</span>(y, markersize<span class="pl-k">=</span><span class="pl-c1">0.02</span>, color<span class="pl-k">=</span><span class="pl-c1">:red</span>)
<span class="pl-c1">vbox</span>(p1, p2)</pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="https://raw.githubusercontent.com/mschauer/GoldenSequences.jl/master/quasivsrandom.png"><img src="https://raw.githubusercontent.com/mschauer/GoldenSequences.jl/master/quasivsrandom.png" alt="Quasi-random vs. random" style="max-width:100%;"></a></p>
<h1><a id="user-content-cartesian-golden-sequence" class="anchor" aria-hidden="true" href="#cartesian-golden-sequence"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Cartesian Golden Sequence</h1>
<p>With a bit of effort, one can use Golden Sequences to generate spacefilling quasirandom sequences of cartesian indices.
For example <code>GoldenCartesianSequence((m[1], m[2]))</code> will create a 2D Cartesian sequence corresponding to (approximate) samples of the Golden sequence in <code>1:m[1]</code> x <code>1:m[2]</code>.</p>
<p>For that, <code>GoldenCartesianSequence((m[1], ..., m[d]))</code> will create full period linear congruential generators (LCG) <code>x[i+1] = (x[i] + c[k]) % m[k]</code> approximating <code>phi[d]^[-k]</code> by <code>c[k]/m[k]</code> such that <code>c[k]</code> and <code>m[k]</code> are coprime.</p>
<p>If <code>m[1], ..., m[d]</code> are coprime themselves, these <code>LCG</code> will have together period <code>prod(m)</code> and the sequence will be space filling, that is <code>sort(collect(take(GoldenCartesianSequence(m), prod(m)))) == CartesianIndices(m)[:]</code>.</p>
<p>This means that if <code>m[k]</code> is the denominator of a good rational approximation <code>c[k]//m[k] ≈ ϕ[d]^(-k)</code>, then the indices will be well distributed even for large <code>i</code>.</p>
<p>For example if <code>m = (2819, 3508)</code>:</p>
<p><a target="_blank" rel="noopener noreferrer" href="https://raw.githubusercontent.com/mschauer/GoldenSequences.jl/master/cartesian2.png"><img src="https://raw.githubusercontent.com/mschauer/GoldenSequences.jl/master/cartesian2.png" alt="Quasi-random cartesian indices" style="max-width:100%;"></a></p>
<p>The image shows the fraction of the first 0.00005 (red) and the first 0.002 indices (black) in the <code>GoldenCartesianSequence((2819, 3508))</code>.</p>
<p>In short, good <code>m</code> are coprime denominators of fractions given by the function <code>rationalize</code></p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="d = 2
m = @. denominator(rationalize(GoldenSequences.phis[d]^(-(1:d)), tol=0.0000001))
"><pre>d <span class="pl-k">=</span> <span class="pl-c1">2</span>
m <span class="pl-k">=</span> <span class="pl-c1">@.</span> <span class="pl-c1">denominator</span>(<span class="pl-c1">rationalize</span>(GoldenSequences<span class="pl-k">.</span>phis[d]<span class="pl-k">^</span>(<span class="pl-k">-</span>(<span class="pl-c1">1</span><span class="pl-k">:</span>d)), tol<span class="pl-k">=</span><span class="pl-c1">0.0000001</span>))</pre></div>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt; m
2-element Array{Int64,1}:
 2819
 3508

julia&gt; gcd(m[1], m[2])
1
"><pre><code>julia&gt; m
2-element Array{Int64,1}:
 2819
 3508

julia&gt; gcd(m[1], m[2])
1
</code></pre></div>
<p>There are some connections here to Knuth's multiplicative hashing method</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="hash(i) = mod(i*2654435769, 2^32)
"><pre><span class="pl-en">hash</span>(i) <span class="pl-k">=</span> <span class="pl-c1">mod</span>(i<span class="pl-k">*</span><span class="pl-c1">2654435769</span>, <span class="pl-c1">2</span><span class="pl-k">^</span><span class="pl-c1">32</span>)</pre></div>
<p>where <code>2654435769</code> is approximately <code>2^32*ϕ</code>.</p>
<h1><a id="user-content-interface" class="anchor" aria-hidden="true" href="#interface"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Interface</h1>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="GoldenSequence(n::Int) # Float64 n-dimensional golden sequence
GoldenSequence(x0::Number) # 1-d golden sequence shifted by `x0`
GoldenSequence(x0) # length(x)-d golden sequence shifted/starting in 'x0'
"><pre><code>GoldenSequence(n::Int) # Float64 n-dimensional golden sequence
GoldenSequence(x0::Number) # 1-d golden sequence shifted by `x0`
GoldenSequence(x0) # length(x)-d golden sequence shifted/starting in 'x0'
</code></pre></div>
<h1><a id="user-content-a-flower" class="anchor" aria-hidden="true" href="#a-flower"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>A flower</h1>
<p>Flower petals grow in spots not covering older petals, the new spot is at an angle given by the golden sequence.</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="using Colors
using Makie
n = 20
c = map(x-&gt;RGB(x...), (take(GoldenSequence(3), n))) # perfect for random colors
x = collect(take(GoldenSequence(0.0), n))
petals = [(i*cos(2pi*x), i*sin(2pi*x)) for (i,x) in  enumerate(x)]
scatter(reverse(petals), color=c, markersize=10*(n:-1:1))
"><pre><code>using Colors
using Makie
n = 20
c = map(x-&gt;RGB(x...), (take(GoldenSequence(3), n))) # perfect for random colors
x = collect(take(GoldenSequence(0.0), n))
petals = [(i*cos(2pi*x), i*sin(2pi*x)) for (i,x) in  enumerate(x)]
scatter(reverse(petals), color=c, markersize=10*(n:-1:1))
</code></pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="https://raw.githubusercontent.com/mschauer/GoldenSequences.jl/master/flower.png"><img src="https://raw.githubusercontent.com/mschauer/GoldenSequences.jl/master/flower.png" alt="Flower petals" style="max-width:100%;"></a></p>
</article></div>