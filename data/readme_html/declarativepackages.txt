<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><p><a href="http://pkg.julialang.org/?pkg=DeclarativePackages&amp;ver=0.4" rel="nofollow"><img src="https://camo.githubusercontent.com/a59b91dc63608bcae25abfb51b41f0a47df2c7a6/687474703a2f2f706b672e6a756c69616c616e672e6f72672f6261646765732f4465636c617261746976655061636b616765735f302e342e737667" alt="Build Status" data-canonical-src="http://pkg.julialang.org/badges/DeclarativePackages_0.4.svg" style="max-width:100%;"></a>
<a href="http://pkg.julialang.org/?pkg=DeclarativePackages&amp;ver=0.5" rel="nofollow"><img src="https://camo.githubusercontent.com/d313c1470e83f976a70ae617d7e07757b1b2bd2f/687474703a2f2f706b672e6a756c69616c616e672e6f72672f6261646765732f4465636c617261746976655061636b616765735f302e352e737667" alt="Build Status" data-canonical-src="http://pkg.julialang.org/badges/DeclarativePackages_0.5.svg" style="max-width:100%;"></a></p>
<p><strong>DeclarativePackages.jl</strong>, or <code>jdp</code> for short, allows to declaratively specify which Julia packages a project should use, with exact version or commit details.</p>
<p><code>jdp</code> will install the specified packages (if necessary) and start Julia with exactly these packages available.</p>
<p><code>jdp</code> is heavily inspired by the <a href="http://nixos.org/nix/" rel="nofollow">nix package manager</a>.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Installation</h2>
<p>You need to have <code>git</code> installed. Install the package and link <code>jdp</code> into a directory on your <code>PATH</code>, for example in <code>~/local/bin</code>:</p>
<div class="highlight highlight-source-julia"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>DeclarativePackages<span class="pl-pds">"</span></span>) 
<span class="pl-c1">symlink</span>(Pkg<span class="pl-k">.</span><span class="pl-c1">dir</span>(<span class="pl-s"><span class="pl-pds">"</span>DeclarativePackages<span class="pl-pds">"</span></span>)<span class="pl-k">*</span><span class="pl-s"><span class="pl-pds">"</span>/bin/jdp<span class="pl-pds">"</span></span>,  <span class="pl-s"><span class="pl-pds">"</span><span class="pl-v">$(<span class="pl-c1">homedir</span>())</span>/local/bin/jdp<span class="pl-pds">"</span></span>)</pre></div>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Usage</h2>
<p>Simply create a <code>DECLARE</code> file in your project's directory and invoke <code>jdp</code> in that directory instead of <code>julia</code>.</p>
<p>Example for a <code>DECLARE</code> file:</p>
<div class="highlight highlight-source-yaml"><pre><span class="pl-c"><span class="pl-c">#</span> Julia packages:  Packagename [ version or commit hash]</span>
<span class="pl-s">JSON</span>
<span class="pl-s">HDF5 0.4.6</span>
<span class="pl-s">Images 86a43d8368</span>

<span class="pl-c"><span class="pl-c">#</span> Any Git URL:  URL [ version or commit hash ]</span>
<span class="pl-s">https://github.com/JuliaLang/BinDeps.jl.git</span>
<span class="pl-s">https://github.com/timholy/HDF5.jl.git 0.4.6</span>
<span class="pl-s">https://github.com/jakebolewski/LibGit2.jl.git dcbf6f2419f92edeae4014f0a293c66a3c053671</span></pre></div>
<p>You can change both the name of the <code>DECLARE</code> file as well as the <code>julia</code> binary called via environment variables. All arguments after <code>jdp</code> will be passed on to Julia:</p>
<div class="highlight highlight-source-shell"><pre>DECLARE=mydeclarations.txt DECLARE_JULIA=/usr/bin/juliafromgit jdp -e <span class="pl-s"><span class="pl-pds">"</span>println(123)<span class="pl-pds">"</span></span></pre></div>
<p>To launch IJulia make sure that <code>IJulia</code> is listed in your <code>DECLARE</code> file and start Julia like this:</p>
<div class="highlight highlight-source-shell"><pre>jdp -e <span class="pl-s"><span class="pl-pds">"</span>using IJulia; notebook()<span class="pl-pds">"</span></span></pre></div>
<p>If you would like to initially create a <code>DECLARE</code> file based on your currently installed packages, run:</p>
<div class="highlight highlight-source-shell"><pre>julia -e <span class="pl-s"><span class="pl-pds">"</span>using DeclarativePackages; exportDECLARE()<span class="pl-pds">"</span></span></pre></div>
<p>Finally, <code>git add DECLARE</code> and track the set of installed packages along with your code!</p>
<h3><a id="user-content-how-to-update-packages" class="anchor" aria-hidden="true" href="#how-to-update-packages"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>How to update packages</h3>
<p>You will see that your <code>DECLARE</code> files get auto-updated if not all packages details are fully specified. There is also an entry for <code>METADATA</code>, the repo where Julia gets the information about available packages from, fixed at a commit.</p>
<p>There are several ways to update a package by editing <code>DECLARE</code>:</p>
<ul>
<li>You can change the version number or commit hash.</li>
<li>You can remove the package and, in the case that another package requires it, have <code>jdp</code> update it to the version <code>Pkg.add()</code> would pick.</li>
<li>As long as <code>DECLARE</code> contains a line fixing <code>METADATA</code> to a specific commit, packages can only be updated using the versions listed therein.</li>
<li>You can use <code>METADATA</code> corresponding to a different commit hash (simply change it), or delete the line containing <code>METADATA</code> to pull in the newest <code>METADATA</code>.</li>
</ul>
<p>If you want to only control a few packages and update the rest automatically, you can keep a second declaration file, e.g. <code>DECLARE.minimal</code>, containing only the minumum you want to specify:</p>
<pre><code>HDF5 0.4.0
Images
</code></pre>
<p>Running <code>cp DECLARE.minimal DECLARE; jdp</code> will then update the rest of the required dependencies to the newest versions. And as you have <code>DECLARE</code> in your <code>git</code> repo, you can always go back.</p>
<h3><a id="user-content-parameters" class="anchor" aria-hidden="true" href="#parameters"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Parameters</h3>
<p><code>jdp</code> can be influenced using the following environment variables:</p>
<ul>
<li><code>DECLARE_JULIA</code> - path of the Julia executable</li>
<li><code>DECLARE</code> - path of the DECLARE file to be used</li>
<li><code>DECLARE_VERBOSITY</code> - control dignostic output. 0==quiet, 1==default, 2==debug, 3==chatty</li>
<li><code>DECLARE_INCLUDETEST</code> - include all dependencies in the packages' <code>test/REQUIRE</code> files</li>
</ul>
<h2><a id="user-content-uninstall" class="anchor" aria-hidden="true" href="#uninstall"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Uninstall</h2>
<p>Remove the symlink to <code>jdp</code> you created during installation, run <code>Pkg.rm("DeclarativePackages")</code> and delete all packages installed by <code>jdp</code>:</p>
<pre><code>chmod -R +w $HOME/.julia/declarative &amp;&amp; rm -rf $HOME/.julia/declarative
</code></pre>
<h2><a id="user-content-how-does-it-work" class="anchor" aria-hidden="true" href="#how-does-it-work"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>How does it work?</h2>
<p>Normally, Julia has a global, mutable state of installed packages in <code>$HOME/.julia/v0.x</code>.</p>
<p><code>jdp</code>, in contrast, installs the packages for each unique <code>DECLARE</code> file in a distinct location, marks the installation read-only, and calls Julia with a modified <code>JULIA_PKGDIR</code>. Like this, Julia sees only the packages specified in <code>DECLARE</code>. And different projects and even different branches within a project can easily specify which package versions (or commits) to use.</p>
<p>The packages are actually installed in <code>$HOME/.julia/declarative/HASH/v0.x</code>, where <code>HASH</code> is the md5 hash over the contents of the <code>DECLARE</code> file.</p>
<p>In addition to <code>JULIA_PKGDIR</code> Julia's <code>LOAD_PATH</code> is set to include the <code>src</code>, <code>modules</code> and <code>submodules</code> subdirectories of where <code>jdp</code> was invoked. The first is handy when working on a module while the second or third are a great places to put any git submodules.</p>
<p>Hard links are used for packages at the same commit, resuling in very little disc space used in <code>$HOME/.julia/declarative</code>. You can delete that directory without ill-effect at any time, <code>jdp</code> will re-install packages as needed on the next invokation.</p>
<h2><a id="user-content-open-issues" class="anchor" aria-hidden="true" href="#open-issues"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Open issues</h2>
<ul>
<li><code>jdp</code> was tested on Linux and OSX - help adapting it to Windows would be much appreciated!</li>
</ul>
</article></div>