<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-shapemodels" class="anchor" aria-hidden="true" href="#shapemodels"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>ShapeModels</h1>
<p><a href="https://travis-ci.org/rened/ShapeModels.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/68b9c1b0e702b9aae0a1f33d4a018ad2fa8cc451/68747470733a2f2f7472617669732d63692e6f72672f72656e65642f53686170654d6f64656c732e6a6c2e706e67" alt="Build Status" data-canonical-src="https://travis-ci.org/rened/ShapeModels.jl.png" style="max-width:100%;"></a>
<a href="http://pkg.julialang.org/?pkg=ShapeModels&amp;ver=0.4" rel="nofollow"><img src="https://camo.githubusercontent.com/da65965b46b5212d9b14fd324565a43262ec73bb/687474703a2f2f706b672e6a756c69616c616e672e6f72672f6261646765732f53686170654d6f64656c735f302e342e737667" alt="Build Status" data-canonical-src="http://pkg.julialang.org/badges/ShapeModels_0.4.svg" style="max-width:100%;"></a>
<a href="http://pkg.julialang.org/?pkg=ShapeModels&amp;ver=0.5" rel="nofollow"><img src="https://camo.githubusercontent.com/1b982d71afc3c801c6ce1beb25c29e120812b11a/687474703a2f2f706b672e6a756c69616c616e672e6f72672f6261646765732f53686170654d6f64656c735f302e352e737667" alt="Build Status" data-canonical-src="http://pkg.julialang.org/badges/ShapeModels_0.5.svg" style="max-width:100%;"></a></p>
<p>This package is meant to assemble methods for handling 2D and 3D statistical shape models, which are often used in medical computer vision.</p>
<p>Currently, PCA based shape models are implemented, as introduced by Cootes et al<sup>1</sup>.</p>
<p>Given a set of <em>shapes</em> of the form <code>ndim x nlandmarks x nshapes</code>, a PCA shape model is constructed using:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> ShapeModels
landmarks <span class="pl-k">=</span> ShapeModels<span class="pl-k">.</span><span class="pl-c1">examplelandmarks</span>(<span class="pl-c1">:hands2d</span>)

model <span class="pl-k">=</span> <span class="pl-c1">PCAShapeModel</span>(landmarks)

shapes <span class="pl-k">=</span> <span class="pl-c1">modeshapes</span>(model, <span class="pl-c1">1</span>)  <span class="pl-c"><span class="pl-c">#</span> examples for first eigenmode</span>
[<span class="pl-c1">plotshape</span>(shapes[:,:,i], <span class="pl-s"><span class="pl-pds">"</span>b.<span class="pl-pds">"</span></span>) <span class="pl-k">for</span> i <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>]
<span class="pl-c1">plotshape</span>(<span class="pl-c1">meanshape</span>(model), <span class="pl-s"><span class="pl-pds">"</span>r.<span class="pl-pds">"</span></span>)</pre></div>
<p>Example computed with outlines of metacarpal bones:</p>
<p><a target="_blank" rel="noopener noreferrer" href="example.png"><img src="example.png" alt="" style="max-width:100%;"></a></p>
<h2><a id="user-content-functions" class="anchor" aria-hidden="true" href="#functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Functions</h2>
<ul>
<li><code>model = PCAShapeModel(shapes)</code> compute a shape model</li>
<li><code>nmodes(model)</code> get number of modes of the model, including rotation, scaling and translation</li>
<li><code>modesstd(model)</code> get standard deviations of modes</li>
<li><code>shape(model, coeffs)</code> compute a shape given a vector <code>coeffs</code> of <code>length(nmodes(a))</code></li>
<li><code>meanshape(model)</code> get the shape which represents the mean of all shapes</li>
<li><code>modeshapes(model, mode)</code> get 10 shapes from -3std to 3std of mode number <code>mode</code></li>
</ul>
<p>Helper functions for plotting. They require the <code>PyPlot</code> package to be installed.</p>
<ul>
<li><code>axisij()</code> set the origin to top-left</li>
<li><code>plotshape(shape)</code> plot a single shape</li>
<li><code>plotshapes(shapes)</code> plot several shaped in individual subfigures</li>
</ul>
<p><sup>1</sup> T.F. Cootes, D. Cooper, C.J. Taylor and J. Graham, "Active Shape Models - Their Training and Application." Computer Vision and Image Understanding. Vol. 61, No. 1, Jan. 1995, pp. 38-59.</p>
</article></div>