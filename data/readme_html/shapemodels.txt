<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-shapemodels" class="anchor" aria-hidden="true" href="#shapemodels"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>ShapeModels</h1>
<p dir="auto"><a href="https://travis-ci.org/rened/ShapeModels.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/082192843cb8fea68f77d072c6969301b1f4608e137738e694c55d88a222294b/68747470733a2f2f7472617669732d63692e6f72672f72656e65642f53686170654d6f64656c732e6a6c2e706e67" alt="Build Status" data-canonical-src="https://travis-ci.org/rened/ShapeModels.jl.png" style="max-width: 100%;"></a>
<a href="http://pkg.julialang.org/?pkg=ShapeModels&amp;ver=0.4" rel="nofollow"><img src="https://camo.githubusercontent.com/7d1345ddfab91d43586981bb1b57c427b17acbb32af0cfb3a47bb5736baa3649/687474703a2f2f706b672e6a756c69616c616e672e6f72672f6261646765732f53686170654d6f64656c735f302e342e737667" alt="Build Status" data-canonical-src="http://pkg.julialang.org/badges/ShapeModels_0.4.svg" style="max-width: 100%;"></a>
<a href="http://pkg.julialang.org/?pkg=ShapeModels&amp;ver=0.5" rel="nofollow"><img src="https://camo.githubusercontent.com/88016b864785a87e3fc04dd8ab41f4cd1379a42a1c71cccea78ab24b50cb80c4/687474703a2f2f706b672e6a756c69616c616e672e6f72672f6261646765732f53686170654d6f64656c735f302e352e737667" alt="Build Status" data-canonical-src="http://pkg.julialang.org/badges/ShapeModels_0.5.svg" style="max-width: 100%;"></a></p>
<p dir="auto">This package is meant to assemble methods for handling 2D and 3D statistical shape models, which are often used in medical computer vision.</p>
<p dir="auto">Currently, PCA based shape models are implemented, as introduced by Cootes et al<sup>1</sup>.</p>
<p dir="auto">Given a set of <em>shapes</em> of the form <code>ndim x nlandmarks x nshapes</code>, a PCA shape model is constructed using:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using ShapeModels
landmarks = ShapeModels.examplelandmarks(:hands2d)

model = PCAShapeModel(landmarks)

shapes = modeshapes(model, 1)  # examples for first eigenmode
[plotshape(shapes[:,:,i], &quot;b.&quot;) for i = 1:10]
plotshape(meanshape(model), &quot;r.&quot;)"><pre><span class="pl-k">using</span> ShapeModels
landmarks <span class="pl-k">=</span> ShapeModels<span class="pl-k">.</span><span class="pl-c1">examplelandmarks</span>(<span class="pl-c1">:hands2d</span>)

model <span class="pl-k">=</span> <span class="pl-c1">PCAShapeModel</span>(landmarks)

shapes <span class="pl-k">=</span> <span class="pl-c1">modeshapes</span>(model, <span class="pl-c1">1</span>)  <span class="pl-c"><span class="pl-c">#</span> examples for first eigenmode</span>
[<span class="pl-c1">plotshape</span>(shapes[:,:,i], <span class="pl-s"><span class="pl-pds">"</span>b.<span class="pl-pds">"</span></span>) <span class="pl-k">for</span> i <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>]
<span class="pl-c1">plotshape</span>(<span class="pl-c1">meanshape</span>(model), <span class="pl-s"><span class="pl-pds">"</span>r.<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">Example computed with outlines of metacarpal bones:</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="example.png"><img src="example.png" alt="" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-functions" class="anchor" aria-hidden="true" href="#functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Functions</h2>
<ul dir="auto">
<li><code>model = PCAShapeModel(shapes)</code> compute a shape model</li>
<li><code>nmodes(model)</code> get number of modes of the model, including rotation, scaling and translation</li>
<li><code>modesstd(model)</code> get standard deviations of modes</li>
<li><code>shape(model, coeffs)</code> compute a shape given a vector <code>coeffs</code> of <code>length(nmodes(a))</code></li>
<li><code>meanshape(model)</code> get the shape which represents the mean of all shapes</li>
<li><code>modeshapes(model, mode)</code> get 10 shapes from -3std to 3std of mode number <code>mode</code></li>
</ul>
<p dir="auto">Helper functions for plotting. They require the <code>PyPlot</code> package to be installed.</p>
<ul dir="auto">
<li><code>axisij()</code> set the origin to top-left</li>
<li><code>plotshape(shape)</code> plot a single shape</li>
<li><code>plotshapes(shapes)</code> plot several shaped in individual subfigures</li>
</ul>
<p dir="auto"><sup>1</sup> T.F. Cootes, D. Cooper, C.J. Taylor and J. Graham, "Active Shape Models - Their Training and Application." Computer Vision and Image Understanding. Vol. 61, No. 1, Jan. 1995, pp. 38-59.</p>
</article></div>