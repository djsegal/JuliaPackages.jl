<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-reactive-extensions-library-for-julia" class="anchor" aria-hidden="true" href="#reactive-extensions-library-for-julia"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Reactive extensions library for Julia</h1>
<table>
<thead>
<tr>
<th align="center"><strong>Documentation</strong></th>
<th align="center"><strong>Build Status</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><a href="https://biaslab.github.io/Rocket.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a> <a href="https://biaslab.github.io/Rocket.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a></td>
<td align="center"><a href="https://travis-ci.com/biaslab/Rocket.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/f21e89ad6347d89858369455d01d5f8e4c365f7c06b7abff8b296db6f671a5d4/68747470733a2f2f7472617669732d63692e636f6d2f626961736c61622f526f636b65742e6a6c2e7376673f6272616e63683d6d6173746572" alt="" data-canonical-src="https://travis-ci.com/biaslab/Rocket.jl.svg?branch=master" style="max-width:100%;"></a> <a href="https://codecov.io/gh/biaslab/Rocket.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/938df793978f86fc9c85a4d2b844a16ce35e17e82dd48ec9af154699647f97de/68747470733a2f2f636f6465636f762e696f2f67682f626961736c61622f526f636b65742e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="" data-canonical-src="https://codecov.io/gh/biaslab/Rocket.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></td>
</tr>
</tbody>
</table>
<p>Rocket.jl is a Julia package for reactive programming using Observables, to make it easier to work with asynchronous data.</p>
<p>In order to achieve best performance and convenient API Rocket.jl combines <a href="https://en.wikipedia.org/wiki/Observer_pattern" rel="nofollow">Observer pattern</a>, <a href="https://en.wikipedia.org/wiki/Actor_model" rel="nofollow">Actor model</a> and <a href="https://en.wikipedia.org/wiki/Functional_programming" rel="nofollow">Functional programming</a>.</p>
<p>Inspired by <a href="https://github.com/ReactiveX/rxjs">RxJS</a> and <a href="https://github.com/ReactiveX">ReactiveX</a> communities.</p>
<p>Rocket.jl has been designed with a focus on performance and modularity.</p>
<p>The essential concepts in Rocket.jl are:</p>
<ul>
<li><strong>Observable</strong>: represents a collection of future messages (data or/and events).</li>
<li><strong>Actor</strong>: is an object that knows how to react on incoming messages delivered by the <strong>Observable</strong>.</li>
<li><strong>Subscription</strong>: represents a teardown logic which might be useful for cancelling the execution of an <strong>Observable</strong>.</li>
<li><strong>Operators</strong>: are objects that enable a functional programming style to dealing with collections with operations like <code>map</code>, <code>filter</code>, <code>reduce</code>, etc.</li>
<li><strong>Subject</strong>: the way of multicasting a message to multiple Observers.</li>
</ul>
<h2><a id="user-content-quick-start" class="anchor" aria-hidden="true" href="#quick-start"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Quick start</h2>
<p>For a quick start and basic introduction take a look at the <a href="https://github.com/biaslab/Rocket.jl/tree/master/demo">demo folder</a> and <a href="https://github.com/biaslab/Rocket.jl/blob/master/demo/00_quick_start.ipynb">Quick Start notebook</a>.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Rocket, Compose, IJulia ; set_default_graphic_size(35cm, 2cm)
"><pre><span class="pl-k">using</span> Rocket, Compose, IJulia ; <span class="pl-c1">set_default_graphic_size</span>(<span class="pl-c1">35</span>cm, <span class="pl-c1">2</span>cm)</pre></div>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="function draw_ball(t)
    IJulia.clear_output(true)
    x = -exp(-0.01t) + 1                     # x coordinate
    y = -abs(exp(-0.04t)*(cos(0.1t))) + 0.83 # y coordinate
    display(compose(context(), circle(x, y, 0.01)))
end
"><pre><span class="pl-k">function</span> <span class="pl-en">draw_ball</span>(t)
    IJulia<span class="pl-k">.</span><span class="pl-c1">clear_output</span>(<span class="pl-c1">true</span>)
    x <span class="pl-k">=</span> <span class="pl-k">-</span><span class="pl-c1">exp</span>(<span class="pl-k">-</span><span class="pl-c1">0.01</span>t) <span class="pl-k">+</span> <span class="pl-c1">1</span>                     <span class="pl-c"><span class="pl-c">#</span> x coordinate</span>
    y <span class="pl-k">=</span> <span class="pl-k">-</span><span class="pl-c1">abs</span>(<span class="pl-c1">exp</span>(<span class="pl-k">-</span><span class="pl-c1">0.04</span>t)<span class="pl-k">*</span>(<span class="pl-c1">cos</span>(<span class="pl-c1">0.1</span>t))) <span class="pl-k">+</span> <span class="pl-c1">0.83</span> <span class="pl-c"><span class="pl-c">#</span> y coordinate</span>
    <span class="pl-c1">display</span>(<span class="pl-c1">compose</span>(<span class="pl-c1">context</span>(), <span class="pl-c1">circle</span>(x, y, <span class="pl-c1">0.01</span>)))
<span class="pl-k">end</span></pre></div>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="source = interval(20) |&gt; take(200) # Take only first 200 emissions

subscription = subscribe!(source, draw_ball)
"><pre>source <span class="pl-k">=</span> <span class="pl-c1">interval</span>(<span class="pl-c1">20</span>) <span class="pl-k">|&gt;</span> <span class="pl-c1">take</span>(<span class="pl-c1">200</span>) <span class="pl-c"><span class="pl-c">#</span> Take only first 200 emissions</span>

subscription <span class="pl-k">=</span> <span class="pl-c1">subscribe!</span>(source, draw_ball)</pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="demo/pics/bouncing-ball.gif"><img src="demo/pics/bouncing-ball.gif" alt="Alt Text" style="max-width:100%;"></a></p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="unsubscribe!(subscription) # It is possible to unsubscribe before the stream ends    
IJulia.clear_output(false);
"><pre><span class="pl-c1">unsubscribe!</span>(subscription) <span class="pl-c"><span class="pl-c">#</span> It is possible to unsubscribe before the stream ends    </span>
IJulia<span class="pl-k">.</span><span class="pl-c1">clear_output</span>(<span class="pl-c1">false</span>);</pre></div>
<h2><a id="user-content-documentation" class="anchor" aria-hidden="true" href="#documentation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Documentation</h2>
<p>Full documentation is available at <a href="https://biaslab.github.io/Rocket.jl/stable" rel="nofollow">BIASlab website</a>.</p>
<p>It is also possible to build a documentation locally. Just execute</p>
<div class="highlight highlight-source-shell position-relative" data-snippet-clipboard-copy-content="$ julia make.jl
"><pre>$ julia make.jl</pre></div>
<p>in the <code>docs/</code> directory to build a local version of the documentation.</p>
<h2><a id="user-content-first-example" class="anchor" aria-hidden="true" href="#first-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>First example</h2>
<p>Normally you use an arrays for processing some data.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="for value in array_of_values
    doSomethingWithMyData(value)
end
"><pre><span class="pl-k">for</span> value <span class="pl-k">in</span> array_of_values
    <span class="pl-c1">doSomethingWithMyData</span>(value)
<span class="pl-k">end</span></pre></div>
<p>In Rocket.jl you will use an observable.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="subscription = subscribe!(source_of_values, lambda(
    on_next     = (data)  -&gt; doSomethingWithMyData(data),
    on_error    = (error) -&gt; doSomethingWithAnError(error),
    on_complete = ()      -&gt; println(&quot;Completed!&quot;)
))
"><pre>subscription <span class="pl-k">=</span> <span class="pl-c1">subscribe!</span>(source_of_values, <span class="pl-c1">lambda</span>(
    on_next     <span class="pl-k">=</span> (data)  <span class="pl-k">-&gt;</span> <span class="pl-c1">doSomethingWithMyData</span>(data),
    on_error    <span class="pl-k">=</span> (error) <span class="pl-k">-&gt;</span> <span class="pl-c1">doSomethingWithAnError</span>(error),
    on_complete <span class="pl-k">=</span> ()      <span class="pl-k">-&gt;</span> <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>Completed!<span class="pl-pds">"</span></span>)
))</pre></div>
<p>At some point of time you may decide to stop listening for new messages.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="unsubscribe!(subscription)
"><pre><span class="pl-c1">unsubscribe!</span>(subscription)</pre></div>
<h2><a id="user-content-actors" class="anchor" aria-hidden="true" href="#actors"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Actors</h2>
<p>To process messages from an observable you have to define an Actor that know how to react on incoming messages.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="struct MyActor &lt;: Rocket.Actor{Int} end

Rocket.on_next!(actor::MyActor, data::Int) = doSomethingWithMyData(data)
Rocket.on_error!(actor::MyActor, error)    = doSomethingWithAnError(error)
Rocket.on_complete!(actor::MyActor)        = println(&quot;Completed!&quot;)
"><pre><span class="pl-k">struct</span> MyActor <span class="pl-k">&lt;:</span> <span class="pl-c1">Rocket.Actor{Int}</span> <span class="pl-k">end</span>

Rocket<span class="pl-k">.</span><span class="pl-en">on_next!</span>(actor<span class="pl-k">::</span><span class="pl-c1">MyActor</span>, data<span class="pl-k">::</span><span class="pl-c1">Int</span>) <span class="pl-k">=</span> <span class="pl-c1">doSomethingWithMyData</span>(data)
Rocket<span class="pl-k">.</span><span class="pl-en">on_error!</span>(actor<span class="pl-k">::</span><span class="pl-c1">MyActor</span>, error)    <span class="pl-k">=</span> <span class="pl-c1">doSomethingWithAnError</span>(error)
Rocket<span class="pl-k">.</span><span class="pl-en">on_complete!</span>(actor<span class="pl-k">::</span><span class="pl-c1">MyActor</span>)        <span class="pl-k">=</span> <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>Completed!<span class="pl-pds">"</span></span>)</pre></div>
<p>Actor can also have its own local state</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="struct StoreActor{D} &lt;: Rocket.Actor{D}
    values :: Vector{D}

    StoreActor{D}() where D = new(Vector{D}())
end

Rocket.on_next!(actor::StoreActor{D}, data::D) where D = push!(actor.values, data)
Rocket.on_error!(actor::StoreActor, error)             = doSomethingWithAnError(error)
Rocket.on_complete!(actor::StoreActor)                 = println(&quot;Completed: $(actor.values)&quot;)
"><pre><span class="pl-k">struct</span> StoreActor{D} <span class="pl-k">&lt;:</span> <span class="pl-c1">Rocket.Actor{D}</span>
    values <span class="pl-k">::</span> <span class="pl-c1">Vector{D}</span>

    <span class="pl-en">StoreActor</span><span class="pl-c1">{D}</span>() <span class="pl-k">where</span> D <span class="pl-k">=</span> <span class="pl-c1">new</span>(<span class="pl-c1">Vector</span><span class="pl-c1">{D}</span>())
<span class="pl-k">end</span>

Rocket<span class="pl-k">.</span><span class="pl-en">on_next!</span>(actor<span class="pl-k">::</span><span class="pl-c1">StoreActor{D}</span>, data<span class="pl-k">::</span><span class="pl-c1">D</span>) <span class="pl-k">where</span> D <span class="pl-k">=</span> <span class="pl-c1">push!</span>(actor<span class="pl-k">.</span>values, data)
Rocket<span class="pl-k">.</span><span class="pl-en">on_error!</span>(actor<span class="pl-k">::</span><span class="pl-c1">StoreActor</span>, error)             <span class="pl-k">=</span> <span class="pl-c1">doSomethingWithAnError</span>(error)
Rocket<span class="pl-k">.</span><span class="pl-en">on_complete!</span>(actor<span class="pl-k">::</span><span class="pl-c1">StoreActor</span>)                 <span class="pl-k">=</span> <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>Completed: <span class="pl-v">$(actor<span class="pl-k">.</span>values)</span><span class="pl-pds">"</span></span>)</pre></div>
<p>For debugging purposes you can use a general <code>LambdaActor</code> actor or just pass a function object as an actor in <code>subscribe!</code> function.</p>
<h2><a id="user-content-operators" class="anchor" aria-hidden="true" href="#operators"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Operators</h2>
<p>What makes Rocket.jl powerful is its ability to help you process, transform and modify the messages flow through your observables using <strong>Operators</strong>.</p>
<p>List of all available operators can be found in the documentation (<a href="https://biaslab.github.io/Rocket.jl/stable/operators/all/" rel="nofollow">link</a>).</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="squared_int_values = source_of_int_values |&gt; map(Int, (d) -&gt; d ^ 2)
subscribe!(squared_int_values, lambda(
    on_next = (data) -&gt; println(data)
))
"><pre>squared_int_values <span class="pl-k">=</span> source_of_int_values <span class="pl-k">|&gt;</span> <span class="pl-c1">map</span>(Int, (d) <span class="pl-k">-&gt;</span> d <span class="pl-k">^</span> <span class="pl-c1">2</span>)
<span class="pl-c1">subscribe!</span>(squared_int_values, <span class="pl-c1">lambda</span>(
    on_next <span class="pl-k">=</span> (data) <span class="pl-k">-&gt;</span> <span class="pl-c1">println</span>(data)
))</pre></div>
<h2><a id="user-content-rocketjl-is-fast" class="anchor" aria-hidden="true" href="#rocketjl-is-fast"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Rocket.jl is fast</h2>
<p>Rocket.jl has been designed with a focus on efficiency, scalability and maximum performance. Below is a benchmark comparison between Rocket.jl, <a href="https://github.com/TsurHerman/Signals.jl">Signals.jl</a>, <a href="https://github.com/JuliaGizmos/Reactive.jl">Reactive.jl</a> and <a href="https://github.com/JuliaGizmos/Observables.jl">Observables.jl</a>.</p>
<p>We test map and filter operators latency in application to a finite stream of integers. Code is available in <a href="https://github.com/biaslab/Rocket.jl/tree/master/demo">demo folder</a>:</p>
<p><a target="_blank" rel="noopener noreferrer" href="demo/pics/reactive-rocket.svg?raw=true&amp;sanitize=true"><img src="demo/pics/reactive-rocket.svg?raw=true&amp;sanitize=true" alt="Rocket.jl vs Reactive.jl" title="Rocket.jl vs Reactive.jl" style="max-width:100%;"></a></p>
<p><a target="_blank" rel="noopener noreferrer" href="demo/pics/signals-rocket.svg?raw=true&amp;sanitize=true"><img src="demo/pics/signals-rocket.svg?raw=true&amp;sanitize=true" alt="Rocket.jl vs Signals.jl" title="Rocket.jl vs Signals.jl" style="max-width:100%;"></a></p>
<p><a target="_blank" rel="noopener noreferrer" href="demo/pics/observables-rocket.svg?raw=true&amp;sanitize=true"><img src="demo/pics/observables-rocket.svg?raw=true&amp;sanitize=true" alt="Rocket.jl vs Observables.jl" title="Rocket.jl vs Observables.jl" style="max-width:100%;"></a></p>
</article></div>