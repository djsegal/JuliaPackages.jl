<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-sacplotjl" class="anchor" aria-hidden="true" href="#sacplotjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>SACPlot.jl</h1>
<h2><a id="user-content-what-is-sacplotjl" class="anchor" aria-hidden="true" href="#what-is-sacplotjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>What is SACPlot.jl?</h2>
<p>A <a href="http://julialang.org" rel="nofollow">Julia</a> package for plotting seismic data in the
<a href="http://ds.iris.edu/files/sac-manual/manual/file_format.html" rel="nofollow">SAC</a> format,
designed to work with the <a href="https://github.com/anowacki/SAC.jl">SAC.jl</a>
module.</p>
<p>SACPlot.jl is compatitble with Julia v0.7+.</p>
<h2><a id="user-content-how-to-install" class="anchor" aria-hidden="true" href="#how-to-install"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>How to install</h2>
<p>First install the unregistered package SAC.jl:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; import Pkg

julia&gt; Pkg.add(&quot;https://github.com/anowacki/SAC.jl&quot;)
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">import</span> Pkg

julia<span class="pl-k">&gt;</span> Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>https://github.com/anowacki/SAC.jl<span class="pl-pds">"</span></span>)</pre></div>
<p>Then you can install the package itself:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; Pkg.add(&quot;https://github.com/anowacki/SACPlot.jl&quot;)
"><pre>julia<span class="pl-k">&gt;</span> Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>https://github.com/anowacki/SACPlot.jl<span class="pl-pds">"</span></span>)</pre></div>
<p>You then need only do</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using SACPlot
"><pre><span class="pl-k">using</span> SACPlot</pre></div>
<p>and if that works, you're ready to go.</p>
<p>(Older versions of SACPlot compatible with Julia v0.6 can be installed like so:
<code>Pkg.clone("https://github.com/anowacki/SAC.jl"); Pkg.clone("https://github.com/anowacki/SACPlot.jl")</code>.)</p>
<h2><a id="user-content-how-to-use" class="anchor" aria-hidden="true" href="#how-to-use"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>How to use</h2>
<h3><a id="user-content-sacjl" class="anchor" aria-hidden="true" href="#sacjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>SAC.jl</h3>
<p>SACPlot.jl relies on the SAC.jl and <a href="https://github.com/JuliaPlots/Plots.jl">Plots.jl</a> packages, so make sure to install
these first (and their respective dependencies).</p>
<h3><a id="user-content-simple-plots" class="anchor" aria-hidden="true" href="#simple-plots"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Simple plots</h3>
<p>As an example, let's plot the sample data that comes with SAC.jl:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using SAC, SACPlot

julia&gt; t = SAC.sample();

julia&gt; plot1(t)
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> SAC, SACPlot

julia<span class="pl-k">&gt;</span> t <span class="pl-k">=</span> SAC<span class="pl-k">.</span><span class="pl-c1">sample</span>();

julia<span class="pl-k">&gt;</span> <span class="pl-c1">plot1</span>(t)</pre></div>
<p>Assuming your Plots.jl installation works, and you are in the REPL or another
interactive environment, you should see a plot:</p>
<p><a target="_blank" rel="noopener noreferrer" href="docs/sample_plot.png"><img src="docs/sample_plot.png" alt="Plot of sample trace" style="max-width:100%;"></a></p>
<h3><a id="user-content-plotting-multiple-traces" class="anchor" aria-hidden="true" href="#plotting-multiple-traces"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Plotting multiple traces</h3>
<p>Simply pass an array of traces in to <code>plot1</code> (also called <code>p1</code>).  The following
example creates a set of traces showing the effect of changing the limit of a
lowpass filter, ranging from 0.33 Hz to 10 Hz.  We put the corner
frequency in header variable <code>user0</code>, and pass the name of this variable as a
symbol to the <code>plot1</code> method (<code>label=:user0</code>), which then shows this on the
right of each plot.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using SAC, SACPlot

julia&gt; A = [SAC.sample() for i in 1:5]  |&gt; rtrend! |&gt; taper!
5-element Array{SAC.SACtr,1}:
 SAC.SACtr(delta=0.01, b=9.459999, npts=1000, kstnm=CDV, gcarc=3.357463, az=88.14708, baz=271.8529)
 SAC.SACtr(delta=0.01, b=9.459999, npts=1000, kstnm=CDV, gcarc=3.357463, az=88.14708, baz=271.8529)
 SAC.SACtr(delta=0.01, b=9.459999, npts=1000, kstnm=CDV, gcarc=3.357463, az=88.14708, baz=271.8529)
 SAC.SACtr(delta=0.01, b=9.459999, npts=1000, kstnm=CDV, gcarc=3.357463, az=88.14708, baz=271.8529)
 SAC.SACtr(delta=0.01, b=9.459999, npts=1000, kstnm=CDV, gcarc=3.357463, az=88.14708, baz=271.8529)

julia&gt; freqs = [1/3, 1, 3, 6, 10];

julia&gt; A[:user0] = freqs;

julia&gt; lowpass!.(A, freqs);

julia&gt; p1(A)
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> SAC, SACPlot

julia<span class="pl-k">&gt;</span> A <span class="pl-k">=</span> [SAC<span class="pl-k">.</span><span class="pl-c1">sample</span>() <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">5</span>]  <span class="pl-k">|&gt;</span> rtrend! <span class="pl-k">|&gt;</span> taper!
<span class="pl-c1">5</span><span class="pl-k">-</span>element Array{SAC<span class="pl-k">.</span>SACtr,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 SAC<span class="pl-k">.</span><span class="pl-c1">SACtr</span>(delta<span class="pl-k">=</span><span class="pl-c1">0.01</span>, b<span class="pl-k">=</span><span class="pl-c1">9.459999</span>, npts<span class="pl-k">=</span><span class="pl-c1">1000</span>, kstnm<span class="pl-k">=</span>CDV, gcarc<span class="pl-k">=</span><span class="pl-c1">3.357463</span>, az<span class="pl-k">=</span><span class="pl-c1">88.14708</span>, baz<span class="pl-k">=</span><span class="pl-c1">271.8529</span>)
 SAC<span class="pl-k">.</span><span class="pl-c1">SACtr</span>(delta<span class="pl-k">=</span><span class="pl-c1">0.01</span>, b<span class="pl-k">=</span><span class="pl-c1">9.459999</span>, npts<span class="pl-k">=</span><span class="pl-c1">1000</span>, kstnm<span class="pl-k">=</span>CDV, gcarc<span class="pl-k">=</span><span class="pl-c1">3.357463</span>, az<span class="pl-k">=</span><span class="pl-c1">88.14708</span>, baz<span class="pl-k">=</span><span class="pl-c1">271.8529</span>)
 SAC<span class="pl-k">.</span><span class="pl-c1">SACtr</span>(delta<span class="pl-k">=</span><span class="pl-c1">0.01</span>, b<span class="pl-k">=</span><span class="pl-c1">9.459999</span>, npts<span class="pl-k">=</span><span class="pl-c1">1000</span>, kstnm<span class="pl-k">=</span>CDV, gcarc<span class="pl-k">=</span><span class="pl-c1">3.357463</span>, az<span class="pl-k">=</span><span class="pl-c1">88.14708</span>, baz<span class="pl-k">=</span><span class="pl-c1">271.8529</span>)
 SAC<span class="pl-k">.</span><span class="pl-c1">SACtr</span>(delta<span class="pl-k">=</span><span class="pl-c1">0.01</span>, b<span class="pl-k">=</span><span class="pl-c1">9.459999</span>, npts<span class="pl-k">=</span><span class="pl-c1">1000</span>, kstnm<span class="pl-k">=</span>CDV, gcarc<span class="pl-k">=</span><span class="pl-c1">3.357463</span>, az<span class="pl-k">=</span><span class="pl-c1">88.14708</span>, baz<span class="pl-k">=</span><span class="pl-c1">271.8529</span>)
 SAC<span class="pl-k">.</span><span class="pl-c1">SACtr</span>(delta<span class="pl-k">=</span><span class="pl-c1">0.01</span>, b<span class="pl-k">=</span><span class="pl-c1">9.459999</span>, npts<span class="pl-k">=</span><span class="pl-c1">1000</span>, kstnm<span class="pl-k">=</span>CDV, gcarc<span class="pl-k">=</span><span class="pl-c1">3.357463</span>, az<span class="pl-k">=</span><span class="pl-c1">88.14708</span>, baz<span class="pl-k">=</span><span class="pl-c1">271.8529</span>)

julia<span class="pl-k">&gt;</span> freqs <span class="pl-k">=</span> [<span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-c1">3</span>, <span class="pl-c1">1</span>, <span class="pl-c1">3</span>, <span class="pl-c1">6</span>, <span class="pl-c1">10</span>];

julia<span class="pl-k">&gt;</span> A[<span class="pl-c1">:user0</span>] <span class="pl-k">=</span> freqs;

julia<span class="pl-k">&gt;</span> <span class="pl-c1">lowpass!</span>.(A, freqs);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">p1</span>(A)</pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="docs/multiple_traces.png"><img src="docs/multiple_traces.png" alt="Plot of multiple traces" style="max-width:100%;"></a></p>
<h3><a id="user-content-record-sections" class="anchor" aria-hidden="true" href="#record-sections"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Record sections</h3>
<p>Record sections are plotted with <code>plotrs</code>:</p>
<p>Note that the y-axis variable is set using the keyword argument <code>y=&lt;value&gt;</code>,
and defaults to <code>:gcarc</code>, the epicentral distance, as is usual for record
sections.</p>
<p>Aligning traces on a certain arrival, say, is as simple as passing a second
argument to <code>prs</code>.  It can be a header <code>Symbol</code> (e.g., <code>:a</code>) or an array of
numbers (e.g., <code>prs(A, :a)</code> or <code>prs(A, rand(length(A)))</code>).  Let's plot some
data for the UK network from an event beneath Fiji, which has picks for the
PKIKP phase in header <code>:a</code>:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; B = SAC.sample(:array); # Load sample data

julia&gt; B = cut(B, :a, -30, :a, 30); # Cut traces

julia&gt; import Pkg; Pkg.add(&quot;Plots&quot;); # This allows us to call Plots directly below

julia&gt; import Plots; Plots.default(size=(600,1000), margin=4Plots.mm) # Change the default figure size and margin

julia&gt; plotrs(B, :a, qdp=false, label=:kstnm, xlabel=&quot;Time rel. PKIKP / s&quot;, ylabel=&quot;Distance / °&quot;)
"><pre>julia<span class="pl-k">&gt;</span> B <span class="pl-k">=</span> SAC<span class="pl-k">.</span><span class="pl-c1">sample</span>(<span class="pl-c1">:array</span>); <span class="pl-c"><span class="pl-c">#</span> Load sample data</span>

julia<span class="pl-k">&gt;</span> B <span class="pl-k">=</span> <span class="pl-c1">cut</span>(B, <span class="pl-c1">:a</span>, <span class="pl-k">-</span><span class="pl-c1">30</span>, <span class="pl-c1">:a</span>, <span class="pl-c1">30</span>); <span class="pl-c"><span class="pl-c">#</span> Cut traces</span>

julia<span class="pl-k">&gt;</span> <span class="pl-k">import</span> Pkg; Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>Plots<span class="pl-pds">"</span></span>); <span class="pl-c"><span class="pl-c">#</span> This allows us to call Plots directly below</span>

julia<span class="pl-k">&gt;</span> <span class="pl-k">import</span> Plots; Plots<span class="pl-k">.</span><span class="pl-c1">default</span>(size<span class="pl-k">=</span>(<span class="pl-c1">600</span>,<span class="pl-c1">1000</span>), margin<span class="pl-k">=</span><span class="pl-c1">4</span>Plots<span class="pl-k">.</span>mm) <span class="pl-c"><span class="pl-c">#</span> Change the default figure size and margin</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">plotrs</span>(B, <span class="pl-c1">:a</span>, qdp<span class="pl-k">=</span><span class="pl-c1">false</span>, label<span class="pl-k">=</span><span class="pl-c1">:kstnm</span>, xlabel<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Time rel. PKIKP / s<span class="pl-pds">"</span></span>, ylabel<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Distance / °<span class="pl-pds">"</span></span>)</pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="docs/record_section.png"><img src="docs/record_section.png" alt="Record section of UK network" style="max-width:100%;"></a></p>
<p>In this case we used the <code>label</code> keyword argument to label the traces by the
station name (header <code>:kstnm</code>) and add labels to the axes.  We also turned off
‘quick-and-dirty-plotting’ with the <code>qdp=false</code> option.</p>
<p><code>plotrs</code> can show traces against any header value or array passed in.  Here we
plot the earlier example traces against frequency:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; plotrs(A, y=:user0, xlabel=&quot;Time / s&quot;, ylabel=&quot;Lowpass frequency / Hz&quot;)
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">plotrs</span>(A, y<span class="pl-k">=</span><span class="pl-c1">:user0</span>, xlabel<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Time / s<span class="pl-pds">"</span></span>, ylabel<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Lowpass frequency / Hz<span class="pl-pds">"</span></span>)</pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="docs/frequency_section.png"><img src="docs/frequency_section.png" alt="Record section plot of traces against frequency" style="max-width:100%;"></a></p>
<h2><a id="user-content-getting-help" class="anchor" aria-hidden="true" href="#getting-help"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Getting help</h2>
<p>Functions are documented, so at the REPL type <code>?</code> to get a <code>help?&gt;</code> prompt,
and type the name of the function:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="help?&gt; plot1
search: plot1 plot2 plotsp plotpm SACPlot PyPlot prevfloat parsefloat PartialQuickSort

  plot1(s::Array{SACtr}; xlim=[NaN, NaN], ylim=[NaN, NaN], label=:default, title=&quot;&quot;)

  Create a plot of the SAC trace(s) s.

  Define limits in time with xlim

  Define dependent variable axis limits with ylim, which can be a 2-array of values, or
  &quot;all&quot; to set all axes to have the same automatic limits.

  Define the text labels with an array of sumbols, which correspond to the names of SAC
  headers.
"><pre>help?<span class="pl-k">&gt;</span> plot1
search<span class="pl-k">:</span> plot1 plot2 plotsp plotpm SACPlot PyPlot prevfloat parsefloat PartialQuickSort

  <span class="pl-c1">plot1</span>(s<span class="pl-k">::</span><span class="pl-c1">Array{SACtr}</span>; xlim<span class="pl-k">=</span>[<span class="pl-c1">NaN</span>, <span class="pl-c1">NaN</span>], ylim<span class="pl-k">=</span>[<span class="pl-c1">NaN</span>, <span class="pl-c1">NaN</span>], label<span class="pl-k">=</span><span class="pl-c1">:default</span>, title<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>)

  Create a plot of the SAC <span class="pl-c1">trace</span>(s) s.

  Define limits <span class="pl-k">in</span> time with xlim

  Define dependent variable axis limits with ylim, which can be a <span class="pl-c1">2</span><span class="pl-k">-</span>array of values, or
  <span class="pl-s"><span class="pl-pds">"</span>all<span class="pl-pds">"</span></span> to set all axes to have the same automatic limits.

  Define the text labels with an array of sumbols, which correspond to the names of SAC
  headers.</pre></div>
</article></div>