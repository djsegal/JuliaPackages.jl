<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-package-ppinterpolation" class="anchor" aria-hidden="true" href="#package-ppinterpolation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Package PPInterpolation</h1>
<table>
<thead>
<tr>
<th align="center">Status</th>
<th align="center">Coverage</th>
</tr>
</thead>
<tbody>
<tr>
<td align="center">[<a target="_blank" rel="noopener noreferrer" href="https://github.com/jherekhealy/PPInterpolation.jl/actions/workflows/julia-runtests.yml/badge.svg"><img src="https://github.com/jherekhealy/PPInterpolation.jl/actions/workflows/julia-runtests.yml/badge.svg" alt="Build Status" style="max-width: 100%;"></a></td>
<td align="center"><a href="http://codecov.io/github/jherekhealy/PPInterpolation.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/fb74445a32aed34d5ef578ef88d131658fd244c318497888b09420179d1eb0d2/687474703a2f2f636f6465636f762e696f2f6769746875622f6a686572656b6865616c792f5050496e746572706f6c6174696f6e2e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/jherekhealy/PPInterpolation.jl/coverage.svg?branch=master" style="max-width: 100%;"></a></td>
</tr>
</tbody>
</table>
<p dir="auto">Piecewise polynomial interpolation in Julia following a straightforward implementation. This is mostly oriented towards various cubic spline interpolation:</p>
<ul dir="auto">
<li>C2 cubic spline, eventually filtering out the first derivatives to ensure monotonicity.</li>
<li>C1 Hermite spline with known first derivatives</li>
<li>C1 Hermite spline with Bessel (parabolic) estimate of derivatives</li>
<li>C1 Hermite spline using limiters such as VanLeer, VanAlbada, Huynh rational function, Fritsch-Butland (1980) harmonic mean, Fritch-Butland (1984) Brodlie formula.</li>
</ul>
<p dir="auto">with the following boundary conditions:</p>
<ul dir="auto">
<li>first derivative at end point</li>
<li>second derivative at end point</li>
<li>not-a-knot</li>
<li>first difference estimate at end point</li>
</ul>
<p dir="auto">Also supported are C3 Hermite quintic spline with  given first derivatives at all knots, plus second derivatives at end-points.
Cubic and quintic Lavery splines are available in the package <a href="https://github.com/jherekhealy/LaverySpline.jl">Lavery.jl</a>.</p>
<h2 dir="auto"><a id="user-content-why-another-julia-interpolation-package" class="anchor" aria-hidden="true" href="#why-another-julia-interpolation-package"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Why another Julia interpolation package?</h2>
<p dir="auto">At the time this package was created (and still today), there are surprisingly few interpolation packages for Julia which support cubic splines. And the existing ones do not provide any control over the boundary conditions. The existing packages are not focused on cubic splines but tend to be more general.</p>
<ul dir="auto">
<li><a href="https://github.com/JuliaMath/Interpolations.jl">Interpolations.jl</a> does not support C2 cubic splines with knots specified by a vector  (gridded in their terminology).</li>
<li><a href="https://github.com/PumasAI/DataInterpolations.jl">DataInterpolations.jl</a> does not support specifying endpoints conditions.</li>
<li><a href="https://github.com/kbarbary/Dierckx.jl">Dierckx.jl</a> is somewhat slow and supports only the standard C2 spline. It offers other features however, such as 2D splines.</li>
</ul>
<p dir="auto">This package support various boundary conditions (natural, not-a-knot, specific first or second derivatives), and not only C2 cubic splines but also C1 splines, monotonocity preserving splines. The flexible API allows to evaluate faster if we know the vector to evaluate is sorted.</p>
<p dir="auto">Below is an example of performance using <code>x = sort(rand(500))</code> and <code>y=rand(500)</code> interpolating an array <code>z = collect(range(x[1],stop=x[end],length=500))</code></p>
<table>
<thead>
<tr>
<th align="left">Package</th>
<th align="right">Construction</th>
<th align="right">Evaluation</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left">Dierckx  Spline1D(x,y)</td>
<td align="right">48.692 μs (8 allocations: 97.11 KiB)</td>
<td align="right">21.405 μs (2 allocations: 4.09 KiB)</td>
</tr>
<tr>
<td align="left">DataInterpolation CubicSpline(y,x)</td>
<td align="right">26.123 μs (524 allocations: 73.11 KiB)</td>
<td align="right">21.591 μs (3 allocations: 4.14 KiB)</td>
</tr>
<tr>
<td align="left">Interpolations interpolate(x,y,SteffenMonotonicInterpolation())</td>
<td align="right">6.641 μs (5 allocations: 16.30 KiB)</td>
<td align="right">21.427 μs (3 allocations: 4.16 KiB)</td>
</tr>
<tr>
<td align="left">PPInterpolation C2()</td>
<td align="right">21.610 μs (26 allocations: 89.41 KiB)</td>
<td align="right">15.503 μs (1 allocation: 48 bytes)</td>
</tr>
<tr>
<td align="left">PPInterpolation C2() evaluateSorted</td>
<td align="right"></td>
<td align="right">4.670 μs (0 allocations: 0 bytes)</td>
</tr>
<tr>
<td align="left">PPInterpolation VanAlbada()</td>
<td align="right">7.144 μs (13 allocations: 48.64 KiB)</td>
<td align="right">15.879 μs (1 allocation: 48 bytes)</td>
</tr>
<tr>
<td align="left">PPInterpolation QuadraticLagrangePP(x,y)</td>
<td align="right">54.487 ns (1 allocation: 32 bytes)</td>
<td align="right">15.711 μs (1 allocation: 48 bytes)</td>
</tr>
<tr>
<td align="left">PPInterpolation QuadraticLagrangePP(x,y) evaluateSorted</td>
<td align="right"></td>
<td align="right">2.942 μs (0 allocations: 0 bytes)</td>
</tr>
</tbody>
</table>
<h2 dir="auto"><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Examples</h2>
<p dir="auto">Interpolate f(x) at non-equistant knots with a cubic spline keeping continuity of class C2 (first and second derivatives continuous):</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using PPInterpolation

x = [3.0, 5.0, 6.0, 8.0, 9.0, 11.0, 12.0, 14.0, 15.0]
f = [10.0, 10.0, 10.0, 10.0, 10.5, 15.0, 50.0, 60.0, 85.0]
spline = makeCubicPP(x, f, PPInterpolation.SECOND_DERIVATIVE, 0.0, PPInterpolation.SECOND_DERIVATIVE, 0.0, C2())
spline(4.0)"><pre><span class="pl-k">using</span> PPInterpolation

x <span class="pl-k">=</span> [<span class="pl-c1">3.0</span>, <span class="pl-c1">5.0</span>, <span class="pl-c1">6.0</span>, <span class="pl-c1">8.0</span>, <span class="pl-c1">9.0</span>, <span class="pl-c1">11.0</span>, <span class="pl-c1">12.0</span>, <span class="pl-c1">14.0</span>, <span class="pl-c1">15.0</span>]
f <span class="pl-k">=</span> [<span class="pl-c1">10.0</span>, <span class="pl-c1">10.0</span>, <span class="pl-c1">10.0</span>, <span class="pl-c1">10.0</span>, <span class="pl-c1">10.5</span>, <span class="pl-c1">15.0</span>, <span class="pl-c1">50.0</span>, <span class="pl-c1">60.0</span>, <span class="pl-c1">85.0</span>]
spline <span class="pl-k">=</span> <span class="pl-c1">makeCubicPP</span>(x, f, PPInterpolation<span class="pl-k">.</span>SECOND_DERIVATIVE, <span class="pl-c1">0.0</span>, PPInterpolation<span class="pl-k">.</span>SECOND_DERIVATIVE, <span class="pl-c1">0.0</span>, <span class="pl-c1">C2</span>())
<span class="pl-c1">spline</span>(<span class="pl-c1">4.0</span>)</pre></div>
<p dir="auto">Various monotonicity preserving scheme are available by changing the last parameter <code>C2()</code> to</p>
<ul dir="auto">
<li><code>C2Hyman89()</code> : the first derivatives are adjusted to preserve monotonicity according to Dougherty and Hyman "Nonnegativity-, Monotonicity-, or Convexity-Preserving Cubic and Quintic Hermite Interpolation" (1989).</li>
<li><code>C2MP()</code> : adjust first derivatives according to the simplest monotonicity preserving scheme. See Huyn "Accurate Monotone Cubic Interpolation" (1991).</li>
<li><code>C2MP2()</code> : adjust first derivatives according to the extended monotonicity preserving scheme. See Huyn "Accurate Monotone Cubic Interpolation" (1991).</li>
<li><code>HuynRational()</code> : the first derivatives are estimated through a rational function which guarantees monotonicity. See Huyn "Accurate Monotone Cubic Interpolation" (1991).</li>
<li><code>VanAlbada()</code> : Van Albada type of approximation for the first derivatives. See Huyn "Accurate Monotone Cubic Interpolation" (1991).</li>
<li><code>VanLeer()</code> : Van Leer type of approximation for the first derivatives. See Huyn "Accurate Monotone Cubic Interpolation" (1991).</li>
<li><code>FritschButland()</code>  : the first derivatives are estimated through a weighted harmonic mean which guarantees monotonicity.</li>
<li><code>Brodlie()</code> : similar to FritchButland but takes into account the non-uniformity of the knots better, see Fritsch and Butland "A method for constructing local monotone piecewise cubic interpolants"  (1984).</li>
</ul>
<p dir="auto">Quadratic Lagrange interpolation has fast evaluation API with mutable variable:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using PPInterpolation

x = [3.0, 5.0, 6.0, 8.0, 9.0, 11.0, 12.0, 14.0, 15.0]
f = [10.0, 10.0, 10.0, 10.0, 10.5, 15.0, 50.0, 60.0, 85.0]
spline = QuadraticLagrangePP(x, f)
spline(4.0)
y = Array{Float64}(undef, 100) #the output
z = collect(range(3.0,stop=15.0,length=100)) #this is sorted input
evaluateSorted!(spline,y,z)"><pre><span class="pl-k">using</span> PPInterpolation

x <span class="pl-k">=</span> [<span class="pl-c1">3.0</span>, <span class="pl-c1">5.0</span>, <span class="pl-c1">6.0</span>, <span class="pl-c1">8.0</span>, <span class="pl-c1">9.0</span>, <span class="pl-c1">11.0</span>, <span class="pl-c1">12.0</span>, <span class="pl-c1">14.0</span>, <span class="pl-c1">15.0</span>]
f <span class="pl-k">=</span> [<span class="pl-c1">10.0</span>, <span class="pl-c1">10.0</span>, <span class="pl-c1">10.0</span>, <span class="pl-c1">10.0</span>, <span class="pl-c1">10.5</span>, <span class="pl-c1">15.0</span>, <span class="pl-c1">50.0</span>, <span class="pl-c1">60.0</span>, <span class="pl-c1">85.0</span>]
spline <span class="pl-k">=</span> <span class="pl-c1">QuadraticLagrangePP</span>(x, f)
<span class="pl-c1">spline</span>(<span class="pl-c1">4.0</span>)
y <span class="pl-k">=</span> <span class="pl-c1">Array</span><span class="pl-c1">{Float64}</span>(undef, <span class="pl-c1">100</span>) <span class="pl-c"><span class="pl-c">#</span>the output</span>
z <span class="pl-k">=</span> <span class="pl-c1">collect</span>(<span class="pl-c1">range</span>(<span class="pl-c1">3.0</span>,stop<span class="pl-k">=</span><span class="pl-c1">15.0</span>,length<span class="pl-k">=</span><span class="pl-c1">100</span>)) <span class="pl-c"><span class="pl-c">#</span>this is sorted input</span>
<span class="pl-c1">evaluateSorted!</span>(spline,y,z)</pre></div>
</article></div>