<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-adiacomputjl" class="anchor" aria-hidden="true" href="#adiacomputjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>AdiaComput.jl</h1>
<p><a href="https://en.wikipedia.org/wiki/Adiabatic_quantum_computation" rel="nofollow">Quantum Adiabatic Computing</a> simulator</p>
<p><a href="https://travis-ci.org/Roger-luo/AdiaComput.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/8d839f8ec9c591993cc2603a1b7acbddcc2e9fbe/68747470733a2f2f7472617669732d63692e6f72672f526f6765722d6c756f2f41646961436f6d7075742e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/Roger-luo/AdiaComput.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p>AdiaComput.jl is a package for simulating quantum adiabatic computing implemented in Julia. The design of AdiaComput.jl is aimed to implementing an efficient, pluggable simulator which allows users create their own adiabatic computing routine. Current AdiaComput.jl only supports CPU computing in the simulation. GPU branch of the simulator is old and needs to be further developed.</p>
<h1><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Installation</h1>
<h2><a id="user-content-dependencies" class="anchor" aria-hidden="true" href="#dependencies"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Dependencies</h2>
<ul>
<li><a href="https://github.com/Roger-luo/QuComputStates.jl">QuComputStates.jl</a></li>
<li><a href="https://github.com/JuliaQuantum/QuDynamics.jl">QuDynamics.jl</a></li>
<li><a href="https://github.com/JuliaOpt/JuMP.jl">JuMP.jl</a></li>
<li><a href="https://github.com/Roger-luo/QuSAT.jl">QuSAT.jl</a></li>
<li><a href="https://github.com/JuliaQuantum/QuBase.jl">QuBase.jl</a></li>
<li><a href="https://github.com/JuliaOpt/Ipopt.jl.git">Ipopt.jl</a></li>
</ul>
<p>Use the following commands in Julia to install dependencies.</p>
<div class="highlight highlight-source-julia"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">clone</span>(<span class="pl-s"><span class="pl-pds">"</span>https://github.com/Roger-luo/QuComputStates.jl<span class="pl-pds">"</span></span>)
Pkg<span class="pl-k">.</span><span class="pl-c1">clone</span>(<span class="pl-s"><span class="pl-pds">"</span>https://github.com/JuliaQuantum/QuDynamics.jl<span class="pl-pds">"</span></span>)
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>JuMP<span class="pl-pds">"</span></span>)
Pkg<span class="pl-k">.</span><span class="pl-c1">clone</span>(<span class="pl-s"><span class="pl-pds">"</span>https://github.com/Roger-luo/QuSAT.jl<span class="pl-pds">"</span></span>)
Pkg<span class="pl-k">.</span><span class="pl-c1">clone</span>(<span class="pl-s"><span class="pl-pds">"</span>https://github.com/JuliaQuantum/QuBase.jl<span class="pl-pds">"</span></span>)
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>Ipopt<span class="pl-pds">"</span></span>)</pre></div>
<p>The package has not been submitted into METADATA.jl, therefore, if you want to use this package, you need to use <code>Pkg.clone</code></p>
<div class="highlight highlight-source-julia"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">clone</span>(<span class="pl-s"><span class="pl-pds">"</span>https://github.com/Roger-luo/AdiaComput.jl<span class="pl-pds">"</span></span>)</pre></div>
<h1><a id="user-content-user-guide" class="anchor" aria-hidden="true" href="#user-guide"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>User Guide</h1>
<p>For adiabatic computing, you need to generate your own problem Hamiltonian, denoted as <code>HP</code> in following codes.</p>
<p>For example, we could use the build-in <code>QuSAT.jl</code> interface to generate a 4-qubit Hamiltonian for <a href="https://en.wikipedia.org/wiki/Exact_cover" rel="nofollow">exact cover problem</a>.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> QuDynamics
<span class="pl-k">using</span> AdiaComput
<span class="pl-k">using</span> QuSAT
<span class="pl-k">using</span> QuBase
<span class="pl-k">using</span> QuComputStates

ins,ans <span class="pl-k">=</span> <span class="pl-c1">generate</span>(<span class="pl-c1">4</span>)
pH <span class="pl-k">=</span> <span class="pl-c1">QuArray</span>(<span class="pl-c1">pHamiltonian</span>(ins,<span class="pl-c1">4</span>),(<span class="pl-c1">comput_basis</span>(<span class="pl-c1">4</span>),<span class="pl-c1">comput_basis</span>(<span class="pl-c1">4</span>)))</pre></div>
<p>Then you will need to create an AQC obeject, there are few key words that you could tweak at the beginning.</p>
<ul>
<li><code>maxtime</code> max evolution time.</li>
<li><code>method</code> method for Shrodinger equation solver. All the method in <code>QuDynamics.jl</code> is allowed.
<ul>
<li>ODE solvers <code>QuODE45</code>,<code>QuODE23s</code>,<code>QuODE78</code></li>
<li>Expm solvers <code>QuExpokit</code>,<code>QuExpmV</code></li>
</ul>
</li>
</ul>
<div class="highlight highlight-source-julia"><pre>aqc <span class="pl-k">=</span> <span class="pl-c1">AQC</span>(pH,<span class="pl-c1">4</span>;maxtime<span class="pl-k">=</span><span class="pl-c1">100</span>)</pre></div>
<p>use <code>|&gt;</code> operator to insert routines into your simulated quantum adiabatic computer. In this example, we simply simulate the normal routine of an adiabatic computing.</p>
<div class="highlight highlight-source-julia"><pre>(<span class="pl-c1">0.0</span><span class="pl-k">:</span><span class="pl-c1">1e-2</span><span class="pl-k">:</span><span class="pl-c1">100</span>,<span class="pl-c1">QuODE45</span>())<span class="pl-k">|&gt;</span>aqc
<span class="pl-k">for</span> (t,psi) <span class="pl-k">in</span> aqc <span class="pl-k">end</span></pre></div>
<p>The tuple on the left of <code>|&gt;</code> consist of two parts</p>
<ul>
<li>time list for your propagator (evolution)</li>
<li>your propagator/evolution routine</li>
</ul>
<p>The AQC's states is stored in <code>aqc.state</code>, you could check the success probability of your evolution.</p>
<pre><code>p = norm(aqc.state[ans[1]+1])^2
</code></pre>
<h1><a id="user-content-custom-routines" class="anchor" aria-hidden="true" href="#custom-routines"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Custom routines</h1>
<p>To custome the routines, a subtype of <code>QuDynamics.QuPropagatorMethod</code> will need to be defined. And you will need to define your own <code>propagate</code> function, which returns an <code>QuArray</code> as next state.</p>
</article></div>