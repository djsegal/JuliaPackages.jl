<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-moberg" class="anchor" aria-hidden="true" href="#moberg"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Moberg</h1>
<p dir="auto">A library for connecting to various input/output libraries
with a common interface. The C api is:</p>
<div class="highlight highlight-source-c notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="struct moberg_t;
struct moberg_digital_in_t;


const struct moberg_t *moberg_init();

struct moberg_digital_in_t *moberg_open_digital_in(
  const struct moberg_t *handle,
  int channel);
  "><pre><span class="pl-k">struct</span> <span class="pl-c1">moberg_t</span>;
<span class="pl-k">struct</span> <span class="pl-c1">moberg_digital_in_t</span>;


<span class="pl-k">const</span> <span class="pl-k">struct</span> <span class="pl-c1">moberg_t</span> *<span class="pl-en">moberg_init</span>();

<span class="pl-k">struct</span> <span class="pl-c1">moberg_digital_in_t</span> *<span class="pl-en">moberg_open_digital_in</span>(
  <span class="pl-k">const</span> <span class="pl-k">struct</span> <span class="pl-c1">moberg_t</span> *handle,
  <span class="pl-k">int</span> channel);
  </pre></div>
<p dir="auto">Config files are formatted as</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="comedi {
    config {
        /* Parsed by parse_config in libmoberg_comedi.so */
        device = /dev/comedi0 ;
        modprobe = [ comedi 8255 comedi_fc mite ni_tio ni_tiocmd ni_pcimio ] ;
        config = [ ni_pcimio ] ;
    }
    /* Moberg mapping[indices] = {driver specific}[indices]
      {driver specific} is parsed by parse_map in libmoberg_comedi.so */
    map digital_in[0:7] = subdevice[4][0:7] ;
}
serial2002 {
    config {
        /* Parsed by parse_config in libmoberg_serial2002.so */
        device = /dev/ttyS0 ;
        baud = 115200 ;
    }
    /* Moberg mapping[indices] = {driver specific}[indices]
      {driver specific} is parsed by parse_map in libmoberg_serial2002.so */
    map digital_in[30:37] = digital_in[0:7] ;
}"><pre class="notranslate"><code>comedi {
    config {
        /* Parsed by parse_config in libmoberg_comedi.so */
        device = /dev/comedi0 ;
        modprobe = [ comedi 8255 comedi_fc mite ni_tio ni_tiocmd ni_pcimio ] ;
        config = [ ni_pcimio ] ;
    }
    /* Moberg mapping[indices] = {driver specific}[indices]
      {driver specific} is parsed by parse_map in libmoberg_comedi.so */
    map digital_in[0:7] = subdevice[4][0:7] ;
}
serial2002 {
    config {
        /* Parsed by parse_config in libmoberg_serial2002.so */
        device = /dev/ttyS0 ;
        baud = 115200 ;
    }
    /* Moberg mapping[indices] = {driver specific}[indices]
      {driver specific} is parsed by parse_map in libmoberg_serial2002.so */
    map digital_in[30:37] = digital_in[0:7] ;
}
</code></pre></div>
</article></div>