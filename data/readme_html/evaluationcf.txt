<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-evaluationcfjl" class="anchor" aria-hidden="true" href="#evaluationcfjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>EvaluationCF.jl</h1>
<p dir="auto"><em>Package for evaluation of predictive algorithms. It contains metrics, data partitioning and more.</em></p>
<p dir="auto"><a href="https://github.com/JuliaRecsys/EvaluationCF.jl/actions"><img src="https://github.com/JuliaRecsys/EvaluationCF.jl/actions/workflows/CI.yml/badge.svg?branch=master" alt="" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/JuliaRecsys/EvaluationCF.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/591a33906e3b7d3457642f36d6c88c43c0d7dee79400bcba089963e8a50b0f2e/68747470733a2f2f696d672e736869656c64732e696f2f636f6465636f762f632f6769746875622f4a756c69615265637379732f4576616c756174696f6e43462e6a6c" alt="" data-canonical-src="https://img.shields.io/codecov/c/github/JuliaRecsys/EvaluationCF.jl" style="max-width: 100%;"></a></p>
<p dir="auto"><strong>Installation</strong>: at the Julia REPL, <code>Pkg.add("EvaluationCF")</code></p>
<p dir="auto"><strong>Reporting Issues and Contributing</strong>: See <a href="CONTRIBUTING.md">CONTRIBUTING.md</a></p>
<h2 dir="auto"><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example</h2>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; using Persa, DatasetsCF, ModelBasedCF, EvaluationCF

julia&gt; dataset = DatasetsCF.MovieLens()
Collaborative Filtering Dataset
- # users: 943
- # items: 1682
- # ratings: 100000
- Ratings Preference: [1, 2, 3, 4, 5]

julia&gt; k = 10

julia&gt; folds = EvaluationCF.KFolds(dataset; k = k)

julia&gt; mae = 0; rmse = 0; coverage = 0;

julia&gt; for (ds_train, ds_test) in folds
           model = ModelBasedCF.RandomModel(ds_train)
           mae += EvaluationCF.mae(model, ds_test)
           rmse += EvaluationCF.rmse(model, ds_test)
           coverage += EvaluationCF.coverage(model, ds_test)
       end

julia&gt; print(&quot;&quot;&quot; Experiment:
            MAE: $(mae / k)
            RMSE: $(rmse / k)
            Coverage: $(coverage / k)
        &quot;&quot;&quot;)
 Experiment:
    MAE: 1.5095299999999998
    RMSE: 1.884630523993449
    Coverage: 1.0"><pre class="notranslate"><code>julia&gt; using Persa, DatasetsCF, ModelBasedCF, EvaluationCF

julia&gt; dataset = DatasetsCF.MovieLens()
Collaborative Filtering Dataset
- # users: 943
- # items: 1682
- # ratings: 100000
- Ratings Preference: [1, 2, 3, 4, 5]

julia&gt; k = 10

julia&gt; folds = EvaluationCF.KFolds(dataset; k = k)

julia&gt; mae = 0; rmse = 0; coverage = 0;

julia&gt; for (ds_train, ds_test) in folds
           model = ModelBasedCF.RandomModel(ds_train)
           mae += EvaluationCF.mae(model, ds_test)
           rmse += EvaluationCF.rmse(model, ds_test)
           coverage += EvaluationCF.coverage(model, ds_test)
       end

julia&gt; print(""" Experiment:
            MAE: $(mae / k)
            RMSE: $(rmse / k)
            Coverage: $(coverage / k)
        """)
 Experiment:
    MAE: 1.5095299999999998
    RMSE: 1.884630523993449
    Coverage: 1.0
</code></pre></div>
</article></div>