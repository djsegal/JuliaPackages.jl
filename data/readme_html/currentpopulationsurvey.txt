<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-currentpopulationsurvey" class="anchor" aria-hidden="true" href="#currentpopulationsurvey"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>CurrentPopulationSurvey</h1>
<p><a href="https://travis-ci.com/mthelm85/CurrentPopulationSurvey.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/df9030621481afb545a01139d19762afb40b0c3a1b6d499ccfd6c5d8752454ba/68747470733a2f2f7472617669732d63692e636f6d2f6d7468656c6d38352f43757272656e74506f70756c6174696f6e5375727665792e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/mthelm85/CurrentPopulationSurvey.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/mthelm85/CurrentPopulationSurvey-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/f4f844ba2c8e41822060bd2669bde1adaecfea5aefc8d0981613d27551a2a05d/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f6769746875622f6d7468656c6d38352f43757272656e74506f70756c6174696f6e5375727665792e6a6c3f7376673d74727565" alt="Build Status" data-canonical-src="https://ci.appveyor.com/api/projects/status/github/mthelm85/CurrentPopulationSurvey.jl?svg=true" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/mthelm85/CurrentPopulationSurvey.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/b5678d65dddc5e49d23b48f72529f97b92af6b0272bede5c87644ac0fb239ca7/68747470733a2f2f636f6465636f762e696f2f67682f6d7468656c6d38352f43757272656e74506f70756c6174696f6e5375727665792e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/mthelm85/CurrentPopulationSurvey.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<h1><a id="user-content-about" class="anchor" aria-hidden="true" href="#about"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>About</h1>
<p>CurrentPopulationSurvey.jl allows users to easily download &amp; parse U.S. Census Bureau CPS microdata files for the 2007 - present time period (earlier years are coming in future releases).</p>
<h1><a id="user-content-resources" class="anchor" aria-hidden="true" href="#resources"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Resources</h1>
<ul>
<li>About the CPS: <a href="https://www.census.gov/programs-surveys/cps/about.html" rel="nofollow">https://www.census.gov/programs-surveys/cps/about.html</a></li>
<li>Files and data dictionaries: <a href="https://www.census.gov/data/datasets/time-series/demo/cps/cps-basic.html" rel="nofollow">https://www.census.gov/data/datasets/time-series/demo/cps/cps-basic.html</a></li>
</ul>
<h1><a id="user-content-recommendations" class="anchor" aria-hidden="true" href="#recommendations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Recommendations</h1>
<p>I recommend that you familiarize yourself with the variables in the data dictionaries before calling <code>cpsdata</code> so that you can decide on a subset of the total available variables for parsing. One year's worth of data is roughly 5GB - 7GB so narrowing this down (by selecting only the variables that you need) will improve efficiency when working with the data.</p>
<p>This package supports the Tables.jl interface so you can easily convert to a tabular structure of your preference (e.g. <code>DataFrame</code>). If you are going to be working with many years of data, I recommend that you make use of <a href="https://juliadb.org/" rel="nofollow">JuliaDB</a> and save the data as an <code>IndexedTable</code> if you intend to use it on an ongoing basis. The reason for this is that I find it's fast and also because JuliaDB makes it very easy to work with data that is too large to fit into memory.</p>
<h1><a id="user-content-useage" class="anchor" aria-hidden="true" href="#useage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Useage</h1>
<p>This package exports a single function <code>cpsdata</code>:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="cpsdata(year::Int, month::Int[, vars::Vector{String}])
"><pre><span class="pl-c1">cpsdata</span>(year<span class="pl-k">::</span><span class="pl-c1">Int</span>, month<span class="pl-k">::</span><span class="pl-c1">Int</span>[, vars<span class="pl-k">::</span><span class="pl-c1">Vector{String}</span>])</pre></div>
<p>Download/parse CPS microdata files for a given year &amp; month, optionally retaining only the variables specified.
There are hundreds of variables so specifying only those that you need will significantly increase
efficiency when working with the data.</p>
<h3><a id="user-content-arguments" class="anchor" aria-hidden="true" href="#arguments"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Arguments</h3>
<ul>
<li><code>year::Int</code>: the year for which you want to obtain CPS data.</li>
<li><code>month::Int</code>: the month for which you want to obtain CPS data.</li>
<li><code>vars::Vector{String}</code>: an optional argument specifying the variables in the microdata file that you
would like to keep.</li>
</ul>
<h3><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Examples</h3>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="data1901 = cpsdata(2019, 1, [&quot;HRINTSTA&quot;, &quot;PWORWGT&quot;])
"><pre>data1901 <span class="pl-k">=</span> <span class="pl-c1">cpsdata</span>(<span class="pl-c1">2019</span>, <span class="pl-c1">1</span>, [<span class="pl-s"><span class="pl-pds">"</span>HRINTSTA<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>PWORWGT<span class="pl-pds">"</span></span>])</pre></div>
<p>If you want to work with the data as a DataFrame:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using DataFrames

data1901 = DataFrame(cpsdata(2019, 1, [&quot;HRINTSTA&quot;, &quot;PWORWGT&quot;]))
"><pre><span class="pl-k">using</span> DataFrames

data1901 <span class="pl-k">=</span> <span class="pl-c1">DataFrame</span>(<span class="pl-c1">cpsdata</span>(<span class="pl-c1">2019</span>, <span class="pl-c1">1</span>, [<span class="pl-s"><span class="pl-pds">"</span>HRINTSTA<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>PWORWGT<span class="pl-pds">"</span></span>]))</pre></div>
</article></div>