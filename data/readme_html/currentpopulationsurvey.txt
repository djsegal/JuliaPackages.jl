<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-currentpopulationsurvey" class="anchor" aria-hidden="true" href="#currentpopulationsurvey"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>CurrentPopulationSurvey</h1>
<p><a href="https://travis-ci.com/mthelm85/CurrentPopulationSurvey.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/baff9e9439021fa8d4043981eb352c47212b0538/68747470733a2f2f7472617669732d63692e636f6d2f6d7468656c6d38352f43757272656e74506f70756c6174696f6e5375727665792e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/mthelm85/CurrentPopulationSurvey.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/mthelm85/CurrentPopulationSurvey-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/5186b267593c209f9cf9fb5e2e05a4483a704f5d/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f6769746875622f6d7468656c6d38352f43757272656e74506f70756c6174696f6e5375727665792e6a6c3f7376673d74727565" alt="Build Status" data-canonical-src="https://ci.appveyor.com/api/projects/status/github/mthelm85/CurrentPopulationSurvey.jl?svg=true" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/mthelm85/CurrentPopulationSurvey.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/02ce59357793012cfbc3be672ba7cf7aec629bb4/68747470733a2f2f636f6465636f762e696f2f67682f6d7468656c6d38352f43757272656e74506f70756c6174696f6e5375727665792e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/mthelm85/CurrentPopulationSurvey.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<h1><a id="user-content-about" class="anchor" aria-hidden="true" href="#about"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>About</h1>
<p>CurrentPopulationSurvey.jl allows users to easily download &amp; parse U.S. Census Bureau CPS microdata files for the 2010 - present time period (earlier years are coming in future releases). Please see this <a href="#2012-data">special note about 2012</a>.</p>
<h1><a id="user-content-resources" class="anchor" aria-hidden="true" href="#resources"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Resources</h1>
<ul>
<li>About the CPS: <a href="https://www.census.gov/programs-surveys/cps/about.html" rel="nofollow">https://www.census.gov/programs-surveys/cps/about.html</a></li>
<li>Files and data dictionaries: <a href="https://thedataweb.rm.census.gov/ftp/cps_ftp.html" rel="nofollow">https://thedataweb.rm.census.gov/ftp/cps_ftp.html</a></li>
</ul>
<h1><a id="user-content-recommendations" class="anchor" aria-hidden="true" href="#recommendations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Recommendations</h1>
<p>For the 2010 - present time period there are six different data dictionaries. I recommend that you familiarize yourself with the variables in the data dictionaries before calling <code>cpsdata</code> so that you can decide on a subset of the total available variables for parsing. One year's worth of data is roughly 5GB - 7GB so narrowing this down (by selecting only the variables that you need) will improve efficiency when working with the data.</p>
<p>You have the option to parse the data and return a <code>DataFrame</code> or to save the parsed data as an <code>IndexedTable</code>. I recommend that you save the data as an <code>IndexedTable</code> if you intend to use it on an ongoing basis. <code>IndexedTables</code> provide the backend to <a href="https://juliadb.org/" rel="nofollow">JuliaDB</a> which is how I prefer to work with this data. The reason for this is that I find it's fast and also because JuliaDB makes it very easy to work with data that is too large to fit into memory. That being said, an <code>IndexedTable</code> can be fed directly into the <a href="https://www.queryverse.org/" rel="nofollow">Queryverse</a> as well. What's particularly nice about this option is that you can then very easily save the data in a variety of different formats.</p>
<h1><a id="user-content-useage" class="anchor" aria-hidden="true" href="#useage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Useage</h1>
<p>This package exports a single function <code>cpsdata</code> with two methods:</p>
<h2><a id="user-content-method-1-with-vars-argument" class="anchor" aria-hidden="true" href="#method-1-with-vars-argument"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Method 1 (with <code>vars</code> argument):</h2>
<pre><code>cpsdata(year::Int, vars::Vector{String}; indexedtable::Bool=false, dir::String=pwd())
</code></pre>
<p>Download/parse CPS microdata files for a given year retaining only the variables specified.
There are hundreds of variables so specifying only those that you need will significantly increase
efficiency when working with the data.</p>
<h3><a id="user-content-arguments" class="anchor" aria-hidden="true" href="#arguments"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Arguments</h3>
<ul>
<li><code>year::Int</code>: the year for which you want to obtain CPS data. CPS data files are monthly
so each year consists of 12 files.</li>
<li><code>vars::Vector{String}</code>: a vector specifying the variables in the microdata files that you
would like to keep.</li>
<li><code>indexedtable::Bool=false</code>: specify whether or not you would like to save the parsed data
as an <code>IndexedTable</code>. This allows you to parse the data just once and then save it to disk for
ongoing use. If false, will return a <code>DataFrame</code>.</li>
<li><code>dir::String=pwd()</code>: specify an <em>absolute</em> directory path to where you would like to store
the <code>IndexedTable</code>. The file name will be generated automatically so you should not include
it in the path.</li>
</ul>
<h3><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Examples</h3>
<p>If you just want to return a DataFrame:</p>
<pre><code>df19 = cpsdata(2019, ["HRINTSTA", "PWORWGT"])
</code></pre>
<p>If you want to write the parsed data to an <code>IndexedTable</code>:</p>
<pre><code>cpsdata(2019, ["HRINTSTA", "PWORWGT"]; indexedtable=true, dir="C:/Users/user/Julia/cps-test/data")
</code></pre>
<h2><a id="user-content-method-2-without-vars-argument" class="anchor" aria-hidden="true" href="#method-2-without-vars-argument"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Method 2 (without <code>vars</code> argument):</h2>
<pre><code>cpsdata(year::Int; indexedtable::Bool=false, dir::String=pwd())
</code></pre>
<p>Download/parse CPS microdata files for a given year and retain <em>all</em> variables.</p>
<h3><a id="user-content-arguments-1" class="anchor" aria-hidden="true" href="#arguments-1"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Arguments</h3>
<ul>
<li><code>year::Int</code>: the year for which you want to obtain CPS data. CPS data files are monthly
so each year consists of 12 files.</li>
<li><code>indexedtable::Bool=false</code>: specify whether or not you would like to save the parsed data
as an <code>IndexedTable</code>. This allows you to parse the data just once and then save it to disk for
ongoing use. If false, will return a <code>DataFrame</code>.</li>
<li><code>dir::String=pwd()</code>: specify an <em>absolute</em> directory path to where you would like to store
the <code>IndexedTable</code>. The file name will be generated automatically so you should not include
it in the path.</li>
</ul>
<h3><a id="user-content-examples-1" class="anchor" aria-hidden="true" href="#examples-1"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Examples</h3>
<p>If you just want to return a DataFrame:</p>
<pre><code>df19 = cpsdata(2019)
</code></pre>
<p>If you want to write the parsed data to an <code>IndexedTable</code>:</p>
<pre><code>cpsdata(2019; indexedtable = true, dir = "C:/Users/user/Julia/cps-test/data")
</code></pre>
<h2><a id="user-content-2012-data" class="anchor" aria-hidden="true" href="#2012-data"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>2012 Data</h2>
<p>There are two different data dictionaries for 2012. One covers the January - April period and the other covers the May - December period. Therefore, you must call <code>cpsdata</code> twice for 2012 (assuming you want all twelve months' worth of data). Call <code>201201</code> as the year when calling <code>cpsdata</code> to get the January - April period and <code>201205</code> to get the May - December period.</p>
</article></div>