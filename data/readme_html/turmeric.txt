<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-turmericjl--tasty-roots" class="anchor" aria-hidden="true" href="#turmericjl--tasty-roots"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Turmeric.jl – tasty roots</h1>
<p><a href="https://travis-ci.org/gwater/Turmeric.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/1381992ed554549af5b0949d465a5833f9da5dada7fbd351038f7d9254822df5/68747470733a2f2f7472617669732d63692e6f72672f6777617465722f5475726d657269632e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/gwater/Turmeric.jl.svg?branch=master" style="max-width:100%;"></a> <a href="http://codecov.io/github/gwater/Turmeric.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/f1d14ac08085718f4a8ad12c405101ebbb0f755f1a6417c31d17ca09429c31bf/687474703a2f2f636f6465636f762e696f2f6769746875622f6777617465722f5475726d657269632e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/gwater/Turmeric.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
<p>This package provides guaranteed methods for finding <strong>roots</strong> of functions, i.e. solutions to the equation <code>f(x) == 0</code> for a function <code>f</code> using the multi-threading features first introduced in Julia 1.3.
To do so, it uses methods from interval analysis, using interval arithmetic from the <a href="https://github.com/JuliaIntervals/IntervalArithmetic.jl"><code>IntervalArithmetic.jl</code></a> package and ambiguity detection from <a href="https://github.com/gwater/NumberIntervals.jl"><code>NumberIntervals.jl</code></a>.</p>
<blockquote>
<p>NOTE: Multi-threading is currently only tested on Linux. In order to benefit from multi-threading you need to supply the environment variable <code>JULIA_NUM_THREADS=X</code> (where <code>X</code> is replaced by the number of threads). For more details check the Julia language manual.</p>
</blockquote>
<h2><a id="user-content-basic-usage-examples" class="anchor" aria-hidden="true" href="#basic-usage-examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Basic usage examples</h2>
<p>The basic function is <code>roots</code>. A standard Julia function and an interval is provided and the <code>roots</code> function return a list of intervals containing <em>all</em> roots of the function located in the starting interval.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using NumberIntervals, Turmeric

julia&gt; f(x) = sin(x) - 0.1*x^2 + 1
f (generic function with 1 method)

julia&gt; roots(f, NumberInterval(-10, 10))[1]
4-element LazyArrays.ApplyArray{NumberInterval{Float64},1,typeof(vcat),Tuple{Array{NumberInterval{Float64},1}}}:
  x ∈ [3.07363, 3.25133]
 x ∈ [-1.14528, -1.01158]
 x ∈ [-4.43535, -4.41877]
 x ∈ [-3.10817, -3.10529]
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> NumberIntervals, Turmeric

julia<span class="pl-k">&gt;</span> <span class="pl-en">f</span>(x) <span class="pl-k">=</span> <span class="pl-c1">sin</span>(x) <span class="pl-k">-</span> <span class="pl-c1">0.1</span><span class="pl-k">*</span>x<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">+</span> <span class="pl-c1">1</span>
f (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">roots</span>(f, <span class="pl-c1">NumberInterval</span>(<span class="pl-k">-</span><span class="pl-c1">10</span>, <span class="pl-c1">10</span>))[<span class="pl-c1">1</span>]
<span class="pl-c1">4</span><span class="pl-k">-</span>element LazyArrays<span class="pl-k">.</span>ApplyArray{NumberInterval{Float64},<span class="pl-c1">1</span>,<span class="pl-c1">typeof</span>(vcat),Tuple{Array{NumberInterval{Float64},<span class="pl-c1">1</span>}}}<span class="pl-k">:</span>
  x <span class="pl-k">∈</span> [<span class="pl-c1">3.07363</span>, <span class="pl-c1">3.25133</span>]
 x <span class="pl-k">∈</span> [<span class="pl-k">-</span><span class="pl-c1">1.14528</span>, <span class="pl-k">-</span><span class="pl-c1">1.01158</span>]
 x <span class="pl-k">∈</span> [<span class="pl-k">-</span><span class="pl-c1">4.43535</span>, <span class="pl-k">-</span><span class="pl-c1">4.41877</span>]
 x <span class="pl-k">∈</span> [<span class="pl-k">-</span><span class="pl-c1">3.10817</span>, <span class="pl-k">-</span><span class="pl-c1">3.10529</span>]</pre></div>
<p>The <code>roots()</code> function returns a tuple of two lists: The first lists contains all intervals which are proven to contain exactly one root of <code>f</code> and the second list contains other intervals which could not be excluded from the solution set.</p>
<p>The multi-threaded implementation was written by Josua Grawitter based on the
serial implementation in <a href="https://github.com/JuliaIntervals/IntervalRootFinding.jl">IntervalRootFinding.jl</a>.</p>
</article></div>