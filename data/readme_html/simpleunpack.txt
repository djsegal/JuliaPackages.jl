<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-simpleunpack" class="anchor" aria-hidden="true" href="#simpleunpack"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>SimpleUnPack</h1>
<p dir="auto"><a href="https://github.com/devmotion/SimpleUnPack.jl/actions/workflows/CI.yml?query=branch%3Amain"><img src="https://github.com/devmotion/SimpleUnPack.jl/actions/workflows/CI.yml/badge.svg?branch=main" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/devmotion/SimpleUnPack.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/b4ae534f597de1861148382af44fb75103f183d4f554c004cb3ce1e69cbacc98/68747470733a2f2f636f6465636f762e696f2f67682f6465766d6f74696f6e2f53696d706c65556e5061636b2e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/devmotion/SimpleUnPack.jl/branch/main/graph/badge.svg" style="max-width: 100%;"></a>
<a href="https://github.com/invenia/BlueStyle"><img src="https://camo.githubusercontent.com/c18fbaa52d94d16b90b19701fc90d289b8a5bb920c74c79bab200b14e75420a4/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c75652d3434393564312e737667" alt="Code Style: Blue" data-canonical-src="https://img.shields.io/badge/code%20style-blue-4495d1.svg" style="max-width: 100%;"></a></p>
<p dir="auto">This package provides four macros, namely</p>
<ul dir="auto">
<li><code>@unpack</code> for destructuring properties,</li>
<li><code>@pack!</code> for setting properties,</li>
<li><code>@unpack_fields</code> for destructuring fields,</li>
<li><code>@pack_fields!</code> for setting fields.</li>
</ul>
<p dir="auto"><code>@unpack</code>/<code>@pack!</code> are based on <code>getproperty</code>/<code>setproperty</code> whereas <code>@unpack_fields</code>/<code>@pack_fields!</code> are based on <code>getfield</code>/<code>setfield!</code>.</p>
<p dir="auto">In Julia &gt;= 1.7.0-DEV.364, <code>@unpack</code> is expanded to the destructuring syntax that was introduced in <a href="https://github.com/JuliaLang/julia/pull/39285" data-hovercard-type="pull_request" data-hovercard-url="/JuliaLang/julia/pull/39285/hovercard">Julia#39285</a>.</p>
<h2 dir="auto"><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Examples</h2>
<p dir="auto">An example with <code>NamedTuple</code> in global scope:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using SimpleUnPack

julia&gt; f(x) = (; b=x, a=x/2);

julia&gt; @unpack a, b = f(42)
(b = 42, a = 21.0)

julia&gt; a
21.0

julia&gt; b
42

julia&gt; @unpack_fields a, b = f(10)
(b = 10, a = 5.0)

julia&gt; a
5.0

julia&gt; b
10"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> SimpleUnPack

julia<span class="pl-k">&gt;</span> <span class="pl-en">f</span>(x) <span class="pl-k">=</span> (; b<span class="pl-k">=</span>x, a<span class="pl-k">=</span>x<span class="pl-k">/</span><span class="pl-c1">2</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@unpack</span> a, b <span class="pl-k">=</span> <span class="pl-c1">f</span>(<span class="pl-c1">42</span>)
(b <span class="pl-k">=</span> <span class="pl-c1">42</span>, a <span class="pl-k">=</span> <span class="pl-c1">21.0</span>)

julia<span class="pl-k">&gt;</span> a
<span class="pl-c1">21.0</span>

julia<span class="pl-k">&gt;</span> b
<span class="pl-c1">42</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@unpack_fields</span> a, b <span class="pl-k">=</span> <span class="pl-c1">f</span>(<span class="pl-c1">10</span>)
(b <span class="pl-k">=</span> <span class="pl-c1">10</span>, a <span class="pl-k">=</span> <span class="pl-c1">5.0</span>)

julia<span class="pl-k">&gt;</span> a
<span class="pl-c1">5.0</span>

julia<span class="pl-k">&gt;</span> b
<span class="pl-c1">10</span></pre></div>
<p dir="auto">An example with a custom struct in a function:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using SimpleUnPack

julia&gt; mutable struct MyStruct{X,Y}
           x::X
           y::Y
       end

julia&gt; Base.propertynames(::MyStruct) = (:x, :y)

julia&gt; function Base.getproperty(m::MyStruct, p::Symbol)
           if p === :y
               return 42
           else
               return getfield(m, p)
           end
       end

julia&gt; function Base.setproperty!(m::MyStruct, p::Symbol, v)
           if p === :y
               setfield!(m, p, 2 * v)
           else
               setfield!(m, p, v)
           end
       end

julia&gt; function g(m::MyStruct)
           @unpack x, y = m
           return (; x, y)
       end;

julia&gt; g(MyStruct(1.0, -5))
(x = 1.0, y = 42)

julia&gt; function g!(m::MyStruct, x, y)
          @pack! m = x, y
          return m
       end;

julia&gt; g!(MyStruct(2.1, 5), 1.2, 2)
MyStruct{Float64, Int64}(1.2, 4)

julia&gt; function h(m::MyStruct)
           @unpack_fields x, y = m
           return (; x, y)
       end

julia&gt; h(MyStruct(1.0, -5))
(x = 1.0, y = -5)

julia&gt; function h!(m::MyStruct, x, y)
          @pack_fields! m = x, y
          return m
       end;

julia&gt; h!(MyStruct(2.1, 5), 1.2, 2)
MyStruct{Float64, Int64}(1.2, 2)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> SimpleUnPack

julia<span class="pl-k">&gt;</span> <span class="pl-k">mutable struct</span> MyStruct{X,Y}
           x<span class="pl-k">::</span><span class="pl-c1">X</span>
           y<span class="pl-k">::</span><span class="pl-c1">Y</span>
       <span class="pl-k">end</span>

julia<span class="pl-k">&gt;</span> Base<span class="pl-k">.</span><span class="pl-en">propertynames</span>(<span class="pl-k">::</span><span class="pl-c1">MyStruct</span>) <span class="pl-k">=</span> (<span class="pl-c1">:x</span>, <span class="pl-c1">:y</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-k">function</span> Base<span class="pl-k">.</span><span class="pl-en">getproperty</span>(m<span class="pl-k">::</span><span class="pl-c1">MyStruct</span>, p<span class="pl-k">::</span><span class="pl-c1">Symbol</span>)
           <span class="pl-k">if</span> p <span class="pl-k">===</span> <span class="pl-c1">:y</span>
               <span class="pl-k">return</span> <span class="pl-c1">42</span>
           <span class="pl-k">else</span>
               <span class="pl-k">return</span> <span class="pl-c1">getfield</span>(m, p)
           <span class="pl-k">end</span>
       <span class="pl-k">end</span>

julia<span class="pl-k">&gt;</span> <span class="pl-k">function</span> Base<span class="pl-k">.</span><span class="pl-en">setproperty!</span>(m<span class="pl-k">::</span><span class="pl-c1">MyStruct</span>, p<span class="pl-k">::</span><span class="pl-c1">Symbol</span>, v)
           <span class="pl-k">if</span> p <span class="pl-k">===</span> <span class="pl-c1">:y</span>
               <span class="pl-c1">setfield!</span>(m, p, <span class="pl-c1">2</span> <span class="pl-k">*</span> v)
           <span class="pl-k">else</span>
               <span class="pl-c1">setfield!</span>(m, p, v)
           <span class="pl-k">end</span>
       <span class="pl-k">end</span>

julia<span class="pl-k">&gt;</span> <span class="pl-k">function</span> <span class="pl-en">g</span>(m<span class="pl-k">::</span><span class="pl-c1">MyStruct</span>)
           <span class="pl-c1">@unpack</span> x, y <span class="pl-k">=</span> m
           <span class="pl-k">return</span> (; x, y)
       <span class="pl-k">end</span>;

julia<span class="pl-k">&gt;</span> <span class="pl-c1">g</span>(<span class="pl-c1">MyStruct</span>(<span class="pl-c1">1.0</span>, <span class="pl-k">-</span><span class="pl-c1">5</span>))
(x <span class="pl-k">=</span> <span class="pl-c1">1.0</span>, y <span class="pl-k">=</span> <span class="pl-c1">42</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-k">function</span> <span class="pl-en">g!</span>(m<span class="pl-k">::</span><span class="pl-c1">MyStruct</span>, x, y)
          <span class="pl-c1">@pack!</span> m <span class="pl-k">=</span> x, y
          <span class="pl-k">return</span> m
       <span class="pl-k">end</span>;

julia<span class="pl-k">&gt;</span> <span class="pl-c1">g!</span>(<span class="pl-c1">MyStruct</span>(<span class="pl-c1">2.1</span>, <span class="pl-c1">5</span>), <span class="pl-c1">1.2</span>, <span class="pl-c1">2</span>)
<span class="pl-c1">MyStruct</span><span class="pl-c1">{Float64, Int64}</span>(<span class="pl-c1">1.2</span>, <span class="pl-c1">4</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-k">function</span> <span class="pl-en">h</span>(m<span class="pl-k">::</span><span class="pl-c1">MyStruct</span>)
           <span class="pl-c1">@unpack_fields</span> x, y <span class="pl-k">=</span> m
           <span class="pl-k">return</span> (; x, y)
       <span class="pl-k">end</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">h</span>(<span class="pl-c1">MyStruct</span>(<span class="pl-c1">1.0</span>, <span class="pl-k">-</span><span class="pl-c1">5</span>))
(x <span class="pl-k">=</span> <span class="pl-c1">1.0</span>, y <span class="pl-k">=</span> <span class="pl-k">-</span><span class="pl-c1">5</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-k">function</span> <span class="pl-en">h!</span>(m<span class="pl-k">::</span><span class="pl-c1">MyStruct</span>, x, y)
          <span class="pl-c1">@pack_fields!</span> m <span class="pl-k">=</span> x, y
          <span class="pl-k">return</span> m
       <span class="pl-k">end</span>;

julia<span class="pl-k">&gt;</span> <span class="pl-c1">h!</span>(<span class="pl-c1">MyStruct</span>(<span class="pl-c1">2.1</span>, <span class="pl-c1">5</span>), <span class="pl-c1">1.2</span>, <span class="pl-c1">2</span>)
<span class="pl-c1">MyStruct</span><span class="pl-c1">{Float64, Int64}</span>(<span class="pl-c1">1.2</span>, <span class="pl-c1">2</span>)</pre></div>
<h2 dir="auto"><a id="user-content-comparison-with-unpackjl" class="anchor" aria-hidden="true" href="#comparison-with-unpackjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Comparison with UnPack.jl</h2>
<p dir="auto">The syntax of <code>@unpack</code> and <code>@pack!</code> is based on <code>UnPack.@unpack</code> and <code>UnPack.@pack!</code> in <a href="https://github.com/mauro3/UnPack.jl">UnPack.jl</a>.</p>
<p dir="auto"><code>UnPack.@unpack</code>/<code>UnPack.@pack!</code> are more flexible since they are based on <code>UnPack.unpack</code>/<code>UnPack.pack!</code> instad of <code>getproperty</code>/<code>setproperty!</code>.
While <code>UnPack.unpack</code>/<code>UnPack.pack!</code> fall back to <code>getproperty</code>/<code>setproperty!</code>, they also support <code>AbstractDict</code>s with keys of type <code>Symbol</code> and <code>AbstractString</code> and can be specialized for other types.
Since <code>UnPack.unpack</code> and <code>UnPack.pack!</code> dispatch on <code>Val(property)</code> instances, this increased flexibility comes at the cost of increased number of specializations and increased compilation times.</p>
<p dir="auto">In contrast to SimpleUnPack, currently UnPack does not support destructuring/updating based on <code>getfield</code>/<code>setfield!</code> only (<a href="https://github.com/mauro3/UnPack.jl/issues/23" data-hovercard-type="issue" data-hovercard-url="/mauro3/UnPack.jl/issues/23/hovercard">UnPack#23</a>).</p>
</article></div>