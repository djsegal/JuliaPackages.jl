<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-objectoriented" class="anchor" aria-hidden="true" href="#objectoriented"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>ObjectOriented</h1>
<p dir="auto"><a href="https://Suzhou-Tongyuan.github.io/ObjectOriented.jl/stable/" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://Suzhou-Tongyuan.github.io/ObjectOriented.jl/dev/" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/Suzhou-Tongyuan/ObjectOriented.jl/actions/workflows/CI.yml?query=branch%3Amain"><img src="https://github.com/Suzhou-Tongyuan/ObjectOriented.jl/actions/workflows/CI.yml/badge.svg?branch=main" alt="Build Status" style="max-width: 100%;"></a></p>
<p dir="auto"><a href="https://github.com/thautwarm/ObjectOriented.jl">ObjectOriented.jl</a> is a mechanical OOP programming library for Julia. The design is mainly based on CPython OOP but adapted for Julia.</p>
<p dir="auto">The supported features:</p>
<ul dir="auto">
<li>multiple inheritances</li>
<li>using dot operators to access members</li>
<li>default field values</li>
<li>overloaded constructors and methods</li>
<li>Python-style properties (getters and setters)</li>
<li>generics for the OOP system</li>
<li>interfaces</li>
</ul>
<p dir="auto">Check out our <a href="https://Suzhou-Tongyuan.github.io/ObjectOriented.jl/dev/" rel="nofollow">documentation</a>.</p>
<p dir="auto">We recommend you to read <a href="https://suzhou-tongyuan.github.io/ObjectOriented.jl/dev/how-to-translate-oop-into-julia" rel="nofollow">How to Translate OOP into Idiomatic Julia</a> before using this package. If you understand your complaints about Julia's lack of OOP come from your refutation of the Julia coding style, feel free to use this.</p>
<p dir="auto">For people who want to use this package in a more Julian way, you can avoid defining methods (and Python-style properties) with <code>@oodef</code>.</p>
<h2 dir="auto"><a id="user-content-preview" class="anchor" aria-hidden="true" href="#preview"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Preview</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@oodef mutable struct MyClass &lt;: MySuperClass
    a::Int
    b::Int

    function new(a::Integer, b::Integer)
        self = @mk
        self.a = a
        self.b = b
        return self
    end

    function compute_a_plus_b(self)
        self.a + self.b
    end
end

julia&gt; inst = MyClass(1, 2)
julia&gt; inst.compute_a_plus_b()
3"><pre><span class="pl-c1">@oodef</span> <span class="pl-k">mutable struct</span> MyClass <span class="pl-k">&lt;:</span> <span class="pl-c1">MySuperClass</span>
    a<span class="pl-k">::</span><span class="pl-c1">Int</span>
    b<span class="pl-k">::</span><span class="pl-c1">Int</span>

    <span class="pl-k">function</span> <span class="pl-en">new</span>(a<span class="pl-k">::</span><span class="pl-c1">Integer</span>, b<span class="pl-k">::</span><span class="pl-c1">Integer</span>)
        self <span class="pl-k">=</span> <span class="pl-c1">@mk</span>
        self<span class="pl-k">.</span>a <span class="pl-k">=</span> a
        self<span class="pl-k">.</span>b <span class="pl-k">=</span> b
        <span class="pl-k">return</span> self
    <span class="pl-k">end</span>

    <span class="pl-k">function</span> <span class="pl-en">compute_a_plus_b</span>(self)
        self<span class="pl-k">.</span>a <span class="pl-k">+</span> self<span class="pl-k">.</span>b
    <span class="pl-k">end</span>
<span class="pl-k">end</span>

julia<span class="pl-k">&gt;</span> inst <span class="pl-k">=</span> <span class="pl-c1">MyClass</span>(<span class="pl-c1">1</span>, <span class="pl-c1">2</span>)
julia<span class="pl-k">&gt;</span> inst<span class="pl-k">.</span><span class="pl-c1">compute_a_plus_b</span>()
<span class="pl-c1">3</span></pre></div>
<p dir="auto">A more concise rewrite using <code>@mk</code> is:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@oodef mutable struct MyClass &lt;: MySuperClass
    a::Int
    b::Int

    function new(a::Integer, b::Integer)
        @mk begin
            a = a
            b = b
        end
    end

    function compute_a_plus_b(self)
        self.a + self.b
    end
end

julia&gt; inst = MyClass(1, 2)
julia&gt; inst.compute_a_plus_b()
3"><pre><span class="pl-c1">@oodef</span> <span class="pl-k">mutable struct</span> MyClass <span class="pl-k">&lt;:</span> <span class="pl-c1">MySuperClass</span>
    a<span class="pl-k">::</span><span class="pl-c1">Int</span>
    b<span class="pl-k">::</span><span class="pl-c1">Int</span>

    <span class="pl-k">function</span> <span class="pl-en">new</span>(a<span class="pl-k">::</span><span class="pl-c1">Integer</span>, b<span class="pl-k">::</span><span class="pl-c1">Integer</span>)
        <span class="pl-c1">@mk</span> <span class="pl-k">begin</span>
            a <span class="pl-k">=</span> a
            b <span class="pl-k">=</span> b
        <span class="pl-k">end</span>
    <span class="pl-k">end</span>

    <span class="pl-k">function</span> <span class="pl-en">compute_a_plus_b</span>(self)
        self<span class="pl-k">.</span>a <span class="pl-k">+</span> self<span class="pl-k">.</span>b
    <span class="pl-k">end</span>
<span class="pl-k">end</span>

julia<span class="pl-k">&gt;</span> inst <span class="pl-k">=</span> <span class="pl-c1">MyClass</span>(<span class="pl-c1">1</span>, <span class="pl-c1">2</span>)
julia<span class="pl-k">&gt;</span> inst<span class="pl-k">.</span><span class="pl-c1">compute_a_plus_b</span>()
<span class="pl-c1">3</span></pre></div>
<h2 dir="auto"><a id="user-content-hints-for-professional-julia-programmers" class="anchor" aria-hidden="true" href="#hints-for-professional-julia-programmers"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Hints For Professional Julia Programmers</h2>
<p dir="auto">As the dot method (<code>self.method()</code>) is purely a syntactic sugar thing, using the idiomatic Julia code like <code>method(self)</code> is usually better. Using the idiomatic Julia methods, method ambiguity can be avoided, which is of course better than OOP in this case.</p>
<p dir="auto">You can avoid defining dot methods as shown below:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@oodef struct MyType
    field1::Int
    field2::Int
    function new(a, b)
        @mk begin
            field1=a
            field2=b
        end
    end

    #= not Julian:
    function some_func(self)
       return self.field1 + self.field2
    end
    =#
end

# Julian way:
function some_func(self :: @like(MyType)) # @like(...) accepts subtypes
    self.field1 + self.field2
end

@oodef struct MyDerivedType &lt;: MyType
    c::Int
    function new(a, b, c)
        @mk begin
            MyType(a, b)
            c = c
        end
    end
end

some_func(MyType(1, 2)) # 3
some_func(MyDerivedType(1, 2, 3)) # 3"><pre><span class="pl-c1">@oodef</span> <span class="pl-k">struct</span> MyType
    field1<span class="pl-k">::</span><span class="pl-c1">Int</span>
    field2<span class="pl-k">::</span><span class="pl-c1">Int</span>
    <span class="pl-k">function</span> <span class="pl-en">new</span>(a, b)
        <span class="pl-c1">@mk</span> <span class="pl-k">begin</span>
            field1<span class="pl-k">=</span>a
            field2<span class="pl-k">=</span>b
        <span class="pl-k">end</span>
    <span class="pl-k">end</span>

    <span class="pl-c"><span class="pl-c">#=</span> not Julian:</span>
<span class="pl-c">    function some_func(self)</span>
<span class="pl-c">       return self.field1 + self.field2</span>
<span class="pl-c">    end</span>
<span class="pl-c">    <span class="pl-c">=#</span></span>
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> Julian way:</span>
<span class="pl-k">function</span> <span class="pl-en">some_func</span>(self <span class="pl-k">::</span> <span class="pl-c1">@like</span>(MyType)) <span class="pl-c"><span class="pl-c">#</span> @like(...) accepts subtypes</span>
    self<span class="pl-k">.</span>field1 <span class="pl-k">+</span> self<span class="pl-k">.</span>field2
<span class="pl-k">end</span>

<span class="pl-c1">@oodef</span> <span class="pl-k">struct</span> MyDerivedType <span class="pl-k">&lt;:</span> <span class="pl-c1">MyType</span>
    c<span class="pl-k">::</span><span class="pl-c1">Int</span>
    <span class="pl-k">function</span> <span class="pl-en">new</span>(a, b, c)
        <span class="pl-c1">@mk</span> <span class="pl-k">begin</span>
            <span class="pl-c1">MyType</span>(a, b)
            c <span class="pl-k">=</span> c
        <span class="pl-k">end</span>
    <span class="pl-k">end</span>
<span class="pl-k">end</span>

<span class="pl-c1">some_func</span>(<span class="pl-c1">MyType</span>(<span class="pl-c1">1</span>, <span class="pl-c1">2</span>)) <span class="pl-c"><span class="pl-c">#</span> 3</span>
<span class="pl-c1">some_func</span>(<span class="pl-c1">MyDerivedType</span>(<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>)) <span class="pl-c"><span class="pl-c">#</span> 3</span></pre></div>
<h2 dir="auto"><a id="user-content-troubleshooting" class="anchor" aria-hidden="true" href="#troubleshooting"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Troubleshooting</h2>
<ol dir="auto">
<li>
<p dir="auto"><a href="https://github.com/julia-vscode/julia-vscode/issues/2441" data-hovercard-type="issue" data-hovercard-url="/julia-vscode/julia-vscode/issues/2441/hovercard">The integrated debugger implemented in Julia-VSCode cannot handle <code>@generated</code> functions</a>, which causes a bug when entering <code>@mk</code> expressions. A workaround can be made as follows:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@oodef mutable struct YourClass
     x::Int
     y::Int
     function new(x, y)
         # you can debug here
         self = @mk begin
             # you can debug here
             x = x
             # you can debug here
             y = y
             # do not reach here!
             # please jump over the end of '@mk' expression!
         end
         # you can debug here
         return self
     end
end"><pre><span class="pl-c1">@oodef</span> <span class="pl-k">mutable struct</span> YourClass
     x<span class="pl-k">::</span><span class="pl-c1">Int</span>
     y<span class="pl-k">::</span><span class="pl-c1">Int</span>
     <span class="pl-k">function</span> <span class="pl-en">new</span>(x, y)
         <span class="pl-c"><span class="pl-c">#</span> you can debug here</span>
         self <span class="pl-k">=</span> <span class="pl-c1">@mk</span> <span class="pl-k">begin</span>
             <span class="pl-c"><span class="pl-c">#</span> you can debug here</span>
             x <span class="pl-k">=</span> x
             <span class="pl-c"><span class="pl-c">#</span> you can debug here</span>
             y <span class="pl-k">=</span> y
             <span class="pl-c"><span class="pl-c">#</span> do not reach here!</span>
             <span class="pl-c"><span class="pl-c">#</span> please jump over the end of '@mk' expression!</span>
         <span class="pl-k">end</span>
         <span class="pl-c"><span class="pl-c">#</span> you can debug here</span>
         <span class="pl-k">return</span> self
     <span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>
</li>
</ol>
</article></div>