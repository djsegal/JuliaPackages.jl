<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-autooptimize" class="anchor" aria-hidden="true" href="#autooptimize"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>AutoOptimize</h1>
<p><a href="https://github.com/SciML/AutoOptimize.jl/actions?query=workflow%3ACI"><img src="https://github.com/SciML/AutoOptimize.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width:100%;"></a></p>
<h4><a id="user-content-note-this-repo-is-still-experimental" class="anchor" aria-hidden="true" href="#note-this-repo-is-still-experimental"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Note: This repo is still experimental!</h4>
<p>Do you want your calculation to go faster but are also too lazy to
optimize your code? Well I have a solution for you! Introducing the
AutoOptimize system. With a simple <code>]add AutoOptimize</code>, we'll send
it straight to your home and SHIPPING IS FREE! In seconds your
calculations will be taking seconds. So what do you have to lose?
Here, come on in and I'll show you how to use it.</p>
<h2><a id="user-content-making-code-fast-the-lazy-way" class="anchor" aria-hidden="true" href="#making-code-fast-the-lazy-way"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Making Code Fast, the Lazy Way</h2>
<p>Define an ODEProblem, <code>prob</code>. Alright, I'll wait for you to catch
up. Now call:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="_prob = auto_optimize(prob)
"><pre>_prob <span class="pl-k">=</span> <span class="pl-c1">auto_optimize</span>(prob)</pre></div>
<p>Now <code>_prob</code> is better, so go use that one.</p>
<h2><a id="user-content-example-faster-pdes" class="anchor" aria-hidden="true" href="#example-faster-pdes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example: Faster PDEs</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using AutoOptimize, OrdinaryDiffEq, LinearAlgebra, SparseArrays

# Define the constants for the PDE
const α₂ = 1.0
const α₃ = 1.0
const β₁ = 1.0
const β₂ = 1.0
const β₃ = 1.0
const r₁ = 1.0
const r₂ = 1.0
const _DD = 100.0
const γ₁ = 0.1
const γ₂ = 0.1
const γ₃ = 0.1
const N = 32
const X = reshape([i for i in 1:N for j in 1:N],N,N)
const Y = reshape([j for i in 1:N for j in 1:N],N,N)
const α₁ = 1.0.*(X.&gt;=4*N/5)

const Mx = Tridiagonal([1.0 for i in 1:N-1],[-2.0 for i in 1:N],[1.0 for i in 1:N-1])
const My = copy(Mx)
Mx[2,1] = 2.0
Mx[end-1,end] = 2.0
My[1,2] = 2.0
My[end,end-1] = 2.0

# Define the discretized PDE as an ODE function
function f(u,p,t)
    A = @view  u[:,:,1]
    B = @view  u[:,:,2]
    C = @view  u[:,:,3]
    MyA = My*A
    AMx = A*Mx
    DA = @. _DD*(MyA + AMx)
    dA = @. DA + α₁ - β₁*A - r₁*A*B + r₂*C
    dB = @. α₂ - β₂*B - r₁*A*B + r₂*C
    dC = @. α₃ - β₃*C + r₁*A*B - r₂*C
    cat(dA,dB,dC,dims=3)
end

u0 = zeros(N,N,3)
MyA = zeros(N,N);
AMx = zeros(N,N);
DA = zeros(N,N);
prob = ODEProblem(f,u0,(0.0,10.0))
"><pre><span class="pl-k">using</span> AutoOptimize, OrdinaryDiffEq, LinearAlgebra, SparseArrays

<span class="pl-c"><span class="pl-c">#</span> Define the constants for the PDE</span>
<span class="pl-k">const</span> α₂ <span class="pl-k">=</span> <span class="pl-c1">1.0</span>
<span class="pl-k">const</span> α₃ <span class="pl-k">=</span> <span class="pl-c1">1.0</span>
<span class="pl-k">const</span> β₁ <span class="pl-k">=</span> <span class="pl-c1">1.0</span>
<span class="pl-k">const</span> β₂ <span class="pl-k">=</span> <span class="pl-c1">1.0</span>
<span class="pl-k">const</span> β₃ <span class="pl-k">=</span> <span class="pl-c1">1.0</span>
<span class="pl-k">const</span> r₁ <span class="pl-k">=</span> <span class="pl-c1">1.0</span>
<span class="pl-k">const</span> r₂ <span class="pl-k">=</span> <span class="pl-c1">1.0</span>
<span class="pl-k">const</span> _DD <span class="pl-k">=</span> <span class="pl-c1">100.0</span>
<span class="pl-k">const</span> γ₁ <span class="pl-k">=</span> <span class="pl-c1">0.1</span>
<span class="pl-k">const</span> γ₂ <span class="pl-k">=</span> <span class="pl-c1">0.1</span>
<span class="pl-k">const</span> γ₃ <span class="pl-k">=</span> <span class="pl-c1">0.1</span>
<span class="pl-k">const</span> N <span class="pl-k">=</span> <span class="pl-c1">32</span>
<span class="pl-k">const</span> X <span class="pl-k">=</span> <span class="pl-c1">reshape</span>([i <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span>N <span class="pl-k">for</span> j <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span>N],N,N)
<span class="pl-k">const</span> Y <span class="pl-k">=</span> <span class="pl-c1">reshape</span>([j <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span>N <span class="pl-k">for</span> j <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span>N],N,N)
<span class="pl-k">const</span> α₁ <span class="pl-k">=</span> <span class="pl-c1">1.0</span><span class="pl-k">.*</span>(X<span class="pl-k">.&gt;=</span><span class="pl-c1">4</span><span class="pl-k">*</span>N<span class="pl-k">/</span><span class="pl-c1">5</span>)

<span class="pl-k">const</span> Mx <span class="pl-k">=</span> <span class="pl-c1">Tridiagonal</span>([<span class="pl-c1">1.0</span> <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span>N<span class="pl-k">-</span><span class="pl-c1">1</span>],[<span class="pl-k">-</span><span class="pl-c1">2.0</span> <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span>N],[<span class="pl-c1">1.0</span> <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span>N<span class="pl-k">-</span><span class="pl-c1">1</span>])
<span class="pl-k">const</span> My <span class="pl-k">=</span> <span class="pl-c1">copy</span>(Mx)
Mx[<span class="pl-c1">2</span>,<span class="pl-c1">1</span>] <span class="pl-k">=</span> <span class="pl-c1">2.0</span>
Mx[<span class="pl-c1">end</span><span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">end</span>] <span class="pl-k">=</span> <span class="pl-c1">2.0</span>
My[<span class="pl-c1">1</span>,<span class="pl-c1">2</span>] <span class="pl-k">=</span> <span class="pl-c1">2.0</span>
My[<span class="pl-c1">end</span>,<span class="pl-c1">end</span><span class="pl-k">-</span><span class="pl-c1">1</span>] <span class="pl-k">=</span> <span class="pl-c1">2.0</span>

<span class="pl-c"><span class="pl-c">#</span> Define the discretized PDE as an ODE function</span>
<span class="pl-k">function</span> <span class="pl-en">f</span>(u,p,t)
    A <span class="pl-k">=</span> <span class="pl-c1">@view</span>  u[:,:,<span class="pl-c1">1</span>]
    B <span class="pl-k">=</span> <span class="pl-c1">@view</span>  u[:,:,<span class="pl-c1">2</span>]
    C <span class="pl-k">=</span> <span class="pl-c1">@view</span>  u[:,:,<span class="pl-c1">3</span>]
    MyA <span class="pl-k">=</span> My<span class="pl-k">*</span>A
    AMx <span class="pl-k">=</span> A<span class="pl-k">*</span>Mx
    DA <span class="pl-k">=</span> <span class="pl-c1">@.</span> _DD<span class="pl-k">*</span>(MyA <span class="pl-k">+</span> AMx)
    dA <span class="pl-k">=</span> <span class="pl-c1">@.</span> DA <span class="pl-k">+</span> α₁ <span class="pl-k">-</span> β₁<span class="pl-k">*</span>A <span class="pl-k">-</span> r₁<span class="pl-k">*</span>A<span class="pl-k">*</span>B <span class="pl-k">+</span> r₂<span class="pl-k">*</span>C
    dB <span class="pl-k">=</span> <span class="pl-c1">@.</span> α₂ <span class="pl-k">-</span> β₂<span class="pl-k">*</span>B <span class="pl-k">-</span> r₁<span class="pl-k">*</span>A<span class="pl-k">*</span>B <span class="pl-k">+</span> r₂<span class="pl-k">*</span>C
    dC <span class="pl-k">=</span> <span class="pl-c1">@.</span> α₃ <span class="pl-k">-</span> β₃<span class="pl-k">*</span>C <span class="pl-k">+</span> r₁<span class="pl-k">*</span>A<span class="pl-k">*</span>B <span class="pl-k">-</span> r₂<span class="pl-k">*</span>C
    <span class="pl-c1">cat</span>(dA,dB,dC,dims<span class="pl-k">=</span><span class="pl-c1">3</span>)
<span class="pl-k">end</span>

u0 <span class="pl-k">=</span> <span class="pl-c1">zeros</span>(N,N,<span class="pl-c1">3</span>)
MyA <span class="pl-k">=</span> <span class="pl-c1">zeros</span>(N,N);
AMx <span class="pl-k">=</span> <span class="pl-c1">zeros</span>(N,N);
DA <span class="pl-k">=</span> <span class="pl-c1">zeros</span>(N,N);
prob <span class="pl-k">=</span> <span class="pl-c1">ODEProblem</span>(f,u0,(<span class="pl-c1">0.0</span>,<span class="pl-c1">10.0</span>))</pre></div>
<p>But then you're like "but diz code is beautiful!" and I'm just proper
chuffed: how do I make my benchmarks look good if you don't want to
write good code?</p>
<p>Well, I guess this calls for Doctor Auto Optimize!</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="_prob,_alg = auto_optimize(prob)
"><pre>_prob,_alg <span class="pl-k">=</span> <span class="pl-c1">auto_optimize</span>(prob)</pre></div>
<p>After this churns away for a bit, you go boom:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="@btime solve(_prob, TRBDF2()) # 168.558 ms (4925 allocations: 101.41 MiB)
"><pre><span class="pl-c1">@btime</span> <span class="pl-c1">solve</span>(_prob, <span class="pl-c1">TRBDF2</span>()) <span class="pl-c"><span class="pl-c">#</span> 168.558 ms (4925 allocations: 101.41 MiB)</span></pre></div>
<p>and there you go, now you're solving 4 PDEs a second. What was it like
before the optimization?</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="@btime solve(prob, TRBDF2(autodiff=false)) # 249.993 s (18560715 allocations: 1281.93 GiB)
"><pre><span class="pl-c1">@btime</span> <span class="pl-c1">solve</span>(prob, <span class="pl-c1">TRBDF2</span>(autodiff<span class="pl-k">=</span><span class="pl-c1">false</span>)) <span class="pl-c"><span class="pl-c">#</span> 249.993 s (18560715 allocations: 1281.93 GiB)</span></pre></div>
<p>That's a lean 1483x temporal speedup!</p>
</article></div>