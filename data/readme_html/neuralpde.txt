<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-neuralpde" class="anchor" aria-hidden="true" href="#neuralpde"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>NeuralPDE</h1>
<p><a href="https://gitter.im/JuliaDiffEq/Lobby?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge&amp;utm_content=badge" rel="nofollow"><img src="https://camo.githubusercontent.com/833b89353967086ef3bf7e1d470c469fd93cc80696ae173ffc5fbcf401d2f5af/68747470733a2f2f6261646765732e6769747465722e696d2f4a756c69614469666645712f4c6f6262792e737667" alt="Join the chat at https://gitter.im/JuliaDiffEq/Lobby" data-canonical-src="https://badges.gitter.im/JuliaDiffEq/Lobby.svg" style="max-width:100%;"></a>
<a href="https://github.com/SciML/NeuralPDE.jl/actions?query=workflow%3ACI"><img src="https://github.com/SciML/NeuralPDE.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width:100%;"></a>
<a href="https://buildkite.com/julialang/neuralpde-dot-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/e58d1d01627e69ded230ff734583ed7662bd4b8ebea4c377bfac4bd4672048fd/68747470733a2f2f62616467652e6275696c646b6974652e636f6d2f66613331323536663462386134663935666535616239306333626634656635363035356132616665363735343335633138322e737667" alt="Build status" data-canonical-src="https://badge.buildkite.com/fa31256f4b8a4f95fe5ab90c3bf4ef56055a2afe675435c182.svg" style="max-width:100%;"></a>
<a href="http://codecov.io/github/SciML/NeuralPDE.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/dde75346c759656841b3459d83073acf90fa94b937c8a3269f1cc9e4b4936bba/687474703a2f2f636f6465636f762e696f2f6769746875622f5363694d4c2f4e657572616c5044452e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/SciML/NeuralPDE.jl/coverage.svg?branch=master" style="max-width:100%;"></a>
<a href="http://neuralpde.sciml.ai/stable/" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="http://neuralpde.sciml.ai/dev/" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a></p>
<p>NeuralPDE.jl is a solver package which consists of neural network solvers for
partial differential equations using scientific machine learning (SciML)
techniques such as physics-informed neural networks (PINNs) and deep
BSDE solvers. This package utilizes deep neural networks and
neural stochastic differential equations to solve high-dimensional PDEs
at a greatly reduced cost and greatly increased generality compared with classical methods.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>Assuming that you already have Julia correctly installed, it suffices to install NeuralPDE.jl in the standard way, that is, by typing <code>] add NeuralPDE</code>. Note:
to exit the Pkg REPL-mode, just press <kbd>Backspace</kbd> or <kbd>Ctrl</kbd> + <kbd>C</kbd>.</p>
<h2><a id="user-content-tutorials-and-documentation" class="anchor" aria-hidden="true" href="#tutorials-and-documentation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Tutorials and Documentation</h2>
<p>For information on using the package,
<a href="https://neuralpde.sciml.ai/stable/" rel="nofollow">see the stable documentation</a>. Use the
<a href="https://neuralpde.sciml.ai/dev/" rel="nofollow">in-development documentation</a> for the version of
the documentation, which contains the unreleased features.</p>
<h2><a id="user-content-features" class="anchor" aria-hidden="true" href="#features"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Features</h2>
<ul>
<li>Physics-Informed Neural Networks for automated PDE solving</li>
<li>Forward-Backwards Stochastic Differential Equation (FBSDE) methods for parabolic PDEs</li>
<li>Deep-learning-based solvers for optimal stopping time and Kolmogorov backwards equations</li>
</ul>
<h2><a id="user-content-example-solving-2d-poisson-equation-via-physics-informed-neural-networks" class="anchor" aria-hidden="true" href="#example-solving-2d-poisson-equation-via-physics-informed-neural-networks"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example: Solving 2D Poisson Equation via Physics-Informed Neural Networks</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using NeuralPDE, Flux, ModelingToolkit, GalacticOptim, DiffEqFlux
using Quadrature, Cubature

@parameters x y
@variables u(..)
Dxx = Differential(x)^2
Dyy = Differential(y)^2

# 2D PDE
eq  = Dxx(u(x,y)) + Dyy(u(x,y)) ~ -sin(pi*x)*sin(pi*y)

# Boundary conditions
bcs = [u(0,y) ~ 0.f0, u(1,y) ~ -sin(pi*1)*sin(pi*y),
       u(x,0) ~ 0.f0, u(x,1) ~ -sin(pi*x)*sin(pi*1)]
# Space and time domains
domains = [x ∈ IntervalDomain(0.0,1.0),
           y ∈ IntervalDomain(0.0,1.0)]
# Discretization
dx = 0.1

# Neural network
dim = 2 # number of dimensions
chain = FastChain(FastDense(dim,16,Flux.σ),FastDense(16,16,Flux.σ),FastDense(16,1))

discretization = PhysicsInformedNN(chain, QuadratureTraining())

pde_system = PDESystem(eq,bcs,domains,[x,y],[u])
prob = discretize(pde_system,discretization)

cb = function (p,l)
    println(&quot;Current loss is: $l&quot;)
    return false
end

res = GalacticOptim.solve(prob, ADAM(0.1); cb = cb, maxiters=4000)
prob = remake(prob,u0=res.minimizer)
res = GalacticOptim.solve(prob, ADAM(0.01); cb = cb, maxiters=2000)
phi = discretization.phi
"><pre><span class="pl-k">using</span> NeuralPDE, Flux, ModelingToolkit, GalacticOptim, DiffEqFlux
<span class="pl-k">using</span> Quadrature, Cubature

<span class="pl-c1">@parameters</span> x y
<span class="pl-c1">@variables</span> <span class="pl-c1">u</span>(<span class="pl-k">..</span>)
Dxx <span class="pl-k">=</span> <span class="pl-c1">Differential</span>(x)<span class="pl-k">^</span><span class="pl-c1">2</span>
Dyy <span class="pl-k">=</span> <span class="pl-c1">Differential</span>(y)<span class="pl-k">^</span><span class="pl-c1">2</span>

<span class="pl-c"><span class="pl-c">#</span> 2D PDE</span>
eq  <span class="pl-k">=</span> <span class="pl-c1">Dxx</span>(<span class="pl-c1">u</span>(x,y)) <span class="pl-k">+</span> <span class="pl-c1">Dyy</span>(<span class="pl-c1">u</span>(x,y)) <span class="pl-k">~</span> <span class="pl-k">-</span><span class="pl-c1">sin</span>(<span class="pl-c1">pi</span><span class="pl-k">*</span>x)<span class="pl-k">*</span><span class="pl-c1">sin</span>(<span class="pl-c1">pi</span><span class="pl-k">*</span>y)

<span class="pl-c"><span class="pl-c">#</span> Boundary conditions</span>
bcs <span class="pl-k">=</span> [<span class="pl-c1">u</span>(<span class="pl-c1">0</span>,y) <span class="pl-k">~</span> <span class="pl-c1">0.f0</span>, <span class="pl-c1">u</span>(<span class="pl-c1">1</span>,y) <span class="pl-k">~</span> <span class="pl-k">-</span><span class="pl-c1">sin</span>(<span class="pl-c1">pi</span><span class="pl-k">*</span><span class="pl-c1">1</span>)<span class="pl-k">*</span><span class="pl-c1">sin</span>(<span class="pl-c1">pi</span><span class="pl-k">*</span>y),
       <span class="pl-c1">u</span>(x,<span class="pl-c1">0</span>) <span class="pl-k">~</span> <span class="pl-c1">0.f0</span>, <span class="pl-c1">u</span>(x,<span class="pl-c1">1</span>) <span class="pl-k">~</span> <span class="pl-k">-</span><span class="pl-c1">sin</span>(<span class="pl-c1">pi</span><span class="pl-k">*</span>x)<span class="pl-k">*</span><span class="pl-c1">sin</span>(<span class="pl-c1">pi</span><span class="pl-k">*</span><span class="pl-c1">1</span>)]
<span class="pl-c"><span class="pl-c">#</span> Space and time domains</span>
domains <span class="pl-k">=</span> [x <span class="pl-k">∈</span> <span class="pl-c1">IntervalDomain</span>(<span class="pl-c1">0.0</span>,<span class="pl-c1">1.0</span>),
           y <span class="pl-k">∈</span> <span class="pl-c1">IntervalDomain</span>(<span class="pl-c1">0.0</span>,<span class="pl-c1">1.0</span>)]
<span class="pl-c"><span class="pl-c">#</span> Discretization</span>
dx <span class="pl-k">=</span> <span class="pl-c1">0.1</span>

<span class="pl-c"><span class="pl-c">#</span> Neural network</span>
dim <span class="pl-k">=</span> <span class="pl-c1">2</span> <span class="pl-c"><span class="pl-c">#</span> number of dimensions</span>
chain <span class="pl-k">=</span> <span class="pl-c1">FastChain</span>(<span class="pl-c1">FastDense</span>(dim,<span class="pl-c1">16</span>,Flux<span class="pl-k">.</span>σ),<span class="pl-c1">FastDense</span>(<span class="pl-c1">16</span>,<span class="pl-c1">16</span>,Flux<span class="pl-k">.</span>σ),<span class="pl-c1">FastDense</span>(<span class="pl-c1">16</span>,<span class="pl-c1">1</span>))

discretization <span class="pl-k">=</span> <span class="pl-c1">PhysicsInformedNN</span>(chain, <span class="pl-c1">QuadratureTraining</span>())

pde_system <span class="pl-k">=</span> <span class="pl-c1">PDESystem</span>(eq,bcs,domains,[x,y],[u])
prob <span class="pl-k">=</span> <span class="pl-c1">discretize</span>(pde_system,discretization)

cb <span class="pl-k">=</span> <span class="pl-k">function</span> (p,l)
    <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>Current loss is: <span class="pl-v">$l</span><span class="pl-pds">"</span></span>)
    <span class="pl-k">return</span> <span class="pl-c1">false</span>
<span class="pl-k">end</span>

res <span class="pl-k">=</span> GalacticOptim<span class="pl-k">.</span><span class="pl-c1">solve</span>(prob, <span class="pl-c1">ADAM</span>(<span class="pl-c1">0.1</span>); cb <span class="pl-k">=</span> cb, maxiters<span class="pl-k">=</span><span class="pl-c1">4000</span>)
prob <span class="pl-k">=</span> <span class="pl-c1">remake</span>(prob,u0<span class="pl-k">=</span>res<span class="pl-k">.</span>minimizer)
res <span class="pl-k">=</span> GalacticOptim<span class="pl-k">.</span><span class="pl-c1">solve</span>(prob, <span class="pl-c1">ADAM</span>(<span class="pl-c1">0.01</span>); cb <span class="pl-k">=</span> cb, maxiters<span class="pl-k">=</span><span class="pl-c1">2000</span>)
phi <span class="pl-k">=</span> discretization<span class="pl-k">.</span>phi</pre></div>
<p>And some analysis:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="xs,ys = [domain.domain.lower:dx/10:domain.domain.upper for domain in domains]
analytic_sol_func(x,y) = (sin(pi*x)*sin(pi*y))/(2pi^2)

u_predict = reshape([first(phi([x,y],res.minimizer)) for x in xs for y in ys],(length(xs),length(ys)))
u_real = reshape([analytic_sol_func(x,y) for x in xs for y in ys], (length(xs),length(ys)))
diff_u = abs.(u_predict .- u_real)

using Plots
p1 = plot(xs, ys, u_real, linetype=:contourf,title = &quot;analytic&quot;);
p2 = plot(xs, ys, u_predict, linetype=:contourf,title = &quot;predict&quot;);
p3 = plot(xs, ys, diff_u,linetype=:contourf,title = &quot;error&quot;);
plot(p1,p2,p3)
"><pre>xs,ys <span class="pl-k">=</span> [domain<span class="pl-k">.</span>domain<span class="pl-k">.</span>lower<span class="pl-k">:</span>dx<span class="pl-k">/</span><span class="pl-c1">10</span><span class="pl-k">:</span>domain<span class="pl-k">.</span>domain<span class="pl-k">.</span>upper <span class="pl-k">for</span> domain <span class="pl-k">in</span> domains]
<span class="pl-en">analytic_sol_func</span>(x,y) <span class="pl-k">=</span> (<span class="pl-c1">sin</span>(<span class="pl-c1">pi</span><span class="pl-k">*</span>x)<span class="pl-k">*</span><span class="pl-c1">sin</span>(<span class="pl-c1">pi</span><span class="pl-k">*</span>y))<span class="pl-k">/</span>(<span class="pl-c1">2</span>pi<span class="pl-k">^</span><span class="pl-c1">2</span>)

u_predict <span class="pl-k">=</span> <span class="pl-c1">reshape</span>([<span class="pl-c1">first</span>(<span class="pl-c1">phi</span>([x,y],res<span class="pl-k">.</span>minimizer)) <span class="pl-k">for</span> x <span class="pl-k">in</span> xs <span class="pl-k">for</span> y <span class="pl-k">in</span> ys],(<span class="pl-c1">length</span>(xs),<span class="pl-c1">length</span>(ys)))
u_real <span class="pl-k">=</span> <span class="pl-c1">reshape</span>([<span class="pl-c1">analytic_sol_func</span>(x,y) <span class="pl-k">for</span> x <span class="pl-k">in</span> xs <span class="pl-k">for</span> y <span class="pl-k">in</span> ys], (<span class="pl-c1">length</span>(xs),<span class="pl-c1">length</span>(ys)))
diff_u <span class="pl-k">=</span> <span class="pl-c1">abs</span>.(u_predict <span class="pl-k">.-</span> u_real)

<span class="pl-k">using</span> Plots
p1 <span class="pl-k">=</span> <span class="pl-c1">plot</span>(xs, ys, u_real, linetype<span class="pl-k">=</span><span class="pl-c1">:contourf</span>,title <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>analytic<span class="pl-pds">"</span></span>);
p2 <span class="pl-k">=</span> <span class="pl-c1">plot</span>(xs, ys, u_predict, linetype<span class="pl-k">=</span><span class="pl-c1">:contourf</span>,title <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>predict<span class="pl-pds">"</span></span>);
p3 <span class="pl-k">=</span> <span class="pl-c1">plot</span>(xs, ys, diff_u,linetype<span class="pl-k">=</span><span class="pl-c1">:contourf</span>,title <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>error<span class="pl-pds">"</span></span>);
<span class="pl-c1">plot</span>(p1,p2,p3)</pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="https://user-images.githubusercontent.com/12683885/90962648-2db35980-e4ba-11ea-8e58-f4f07c77bcb9.png"><img src="https://user-images.githubusercontent.com/12683885/90962648-2db35980-e4ba-11ea-8e58-f4f07c77bcb9.png" alt="image" style="max-width:100%;"></a></p>
<h2><a id="user-content-example-solving-a-100-dimensional-hamilton-jacobi-bellman-equation" class="anchor" aria-hidden="true" href="#example-solving-a-100-dimensional-hamilton-jacobi-bellman-equation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example: Solving a 100-Dimensional Hamilton-Jacobi-Bellman Equation</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using NeuralPDE
using Flux
using DifferentialEquations
using LinearAlgebra
d = 100 # number of dimensions
X0 = fill(0.0f0, d) # initial value of stochastic control process
tspan = (0.0f0, 1.0f0)
λ = 1.0f0

g(X) = log(0.5f0 + 0.5f0 * sum(X.^2))
f(X,u,σᵀ∇u,p,t) = -λ * sum(σᵀ∇u.^2)
μ_f(X,p,t) = zero(X)  # Vector d x 1 λ
σ_f(X,p,t) = Diagonal(sqrt(2.0f0) * ones(Float32, d)) # Matrix d x d
prob = TerminalPDEProblem(g, f, μ_f, σ_f, X0, tspan)
hls = 10 + d # hidden layer size
opt = Flux.ADAM(0.01)  # optimizer
# sub-neural network approximating solutions at the desired point
u0 = Flux.Chain(Dense(d, hls, relu),
                Dense(hls, hls, relu),
                Dense(hls, 1))
# sub-neural network approximating the spatial gradients at time point
σᵀ∇u = Flux.Chain(Dense(d + 1, hls, relu),
                  Dense(hls, hls, relu),
                  Dense(hls, hls, relu),
                  Dense(hls, d))
pdealg = NNPDENS(u0, σᵀ∇u, opt=opt)
@time ans = solve(prob, pdealg, verbose=true, maxiters=100, trajectories=100,
                            alg=EM(), dt=1.2, pabstol=1f-2)
"><pre><span class="pl-k">using</span> NeuralPDE
<span class="pl-k">using</span> Flux
<span class="pl-k">using</span> DifferentialEquations
<span class="pl-k">using</span> LinearAlgebra
d <span class="pl-k">=</span> <span class="pl-c1">100</span> <span class="pl-c"><span class="pl-c">#</span> number of dimensions</span>
X0 <span class="pl-k">=</span> <span class="pl-c1">fill</span>(<span class="pl-c1">0.0f0</span>, d) <span class="pl-c"><span class="pl-c">#</span> initial value of stochastic control process</span>
tspan <span class="pl-k">=</span> (<span class="pl-c1">0.0f0</span>, <span class="pl-c1">1.0f0</span>)
λ <span class="pl-k">=</span> <span class="pl-c1">1.0f0</span>

<span class="pl-en">g</span>(X) <span class="pl-k">=</span> <span class="pl-c1">log</span>(<span class="pl-c1">0.5f0</span> <span class="pl-k">+</span> <span class="pl-c1">0.5f0</span> <span class="pl-k">*</span> <span class="pl-c1">sum</span>(X<span class="pl-k">.^</span><span class="pl-c1">2</span>))
<span class="pl-en">f</span>(X,u,σᵀ∇u,p,t) <span class="pl-k">=</span> <span class="pl-k">-</span>λ <span class="pl-k">*</span> <span class="pl-c1">sum</span>(σᵀ∇u<span class="pl-k">.^</span><span class="pl-c1">2</span>)
<span class="pl-en">μ_f</span>(X,p,t) <span class="pl-k">=</span> <span class="pl-c1">zero</span>(X)  <span class="pl-c"><span class="pl-c">#</span> Vector d x 1 λ</span>
<span class="pl-en">σ_f</span>(X,p,t) <span class="pl-k">=</span> <span class="pl-c1">Diagonal</span>(<span class="pl-c1">sqrt</span>(<span class="pl-c1">2.0f0</span>) <span class="pl-k">*</span> <span class="pl-c1">ones</span>(Float32, d)) <span class="pl-c"><span class="pl-c">#</span> Matrix d x d</span>
prob <span class="pl-k">=</span> <span class="pl-c1">TerminalPDEProblem</span>(g, f, μ_f, σ_f, X0, tspan)
hls <span class="pl-k">=</span> <span class="pl-c1">10</span> <span class="pl-k">+</span> d <span class="pl-c"><span class="pl-c">#</span> hidden layer size</span>
opt <span class="pl-k">=</span> Flux<span class="pl-k">.</span><span class="pl-c1">ADAM</span>(<span class="pl-c1">0.01</span>)  <span class="pl-c"><span class="pl-c">#</span> optimizer</span>
<span class="pl-c"><span class="pl-c">#</span> sub-neural network approximating solutions at the desired point</span>
u0 <span class="pl-k">=</span> Flux<span class="pl-k">.</span><span class="pl-c1">Chain</span>(<span class="pl-c1">Dense</span>(d, hls, relu),
                <span class="pl-c1">Dense</span>(hls, hls, relu),
                <span class="pl-c1">Dense</span>(hls, <span class="pl-c1">1</span>))
<span class="pl-c"><span class="pl-c">#</span> sub-neural network approximating the spatial gradients at time point</span>
σᵀ∇u <span class="pl-k">=</span> Flux<span class="pl-k">.</span><span class="pl-c1">Chain</span>(<span class="pl-c1">Dense</span>(d <span class="pl-k">+</span> <span class="pl-c1">1</span>, hls, relu),
                  <span class="pl-c1">Dense</span>(hls, hls, relu),
                  <span class="pl-c1">Dense</span>(hls, hls, relu),
                  <span class="pl-c1">Dense</span>(hls, d))
pdealg <span class="pl-k">=</span> <span class="pl-c1">NNPDENS</span>(u0, σᵀ∇u, opt<span class="pl-k">=</span>opt)
<span class="pl-c1">@time</span> ans <span class="pl-k">=</span> <span class="pl-c1">solve</span>(prob, pdealg, verbose<span class="pl-k">=</span><span class="pl-c1">true</span>, maxiters<span class="pl-k">=</span><span class="pl-c1">100</span>, trajectories<span class="pl-k">=</span><span class="pl-c1">100</span>,
                            alg<span class="pl-k">=</span><span class="pl-c1">EM</span>(), dt<span class="pl-k">=</span><span class="pl-c1">1.2</span>, pabstol<span class="pl-k">=</span><span class="pl-c1">1f-2</span>)</pre></div>
</article></div>