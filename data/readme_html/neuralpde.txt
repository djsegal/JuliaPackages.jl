<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-neuralpde" class="anchor" aria-hidden="true" href="#neuralpde"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>NeuralPDE</h1>
<p dir="auto"><a href="https://julialang.zulipchat.com/#narrow/stream/279055-sciml-bridged" rel="nofollow"><img src="https://camo.githubusercontent.com/667867fc71b8b3c9ed350ce154a04d38adca002ecfa38edf519284e0365ee553/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f6c6162656c3d5a756c6970266d6573736167653d6368617426636f6c6f723d393535386232266c6162656c436f6c6f723d333839383236" alt="Join the chat at https://julialang.zulipchat.com #sciml-bridged" data-canonical-src="https://img.shields.io/static/v1?label=Zulip&amp;message=chat&amp;color=9558b2&amp;labelColor=389826" style="max-width: 100%;"></a>
<a href="https://docs.sciml.ai/NeuralPDE/stable/" rel="nofollow"><img src="https://camo.githubusercontent.com/88037a523f970520933771e764f5abff55de9382efc91cd89dd43ef0bb49a85f/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d5363694d4c2d626c75652e737667" alt="Global Docs" data-canonical-src="https://img.shields.io/badge/docs-SciML-blue.svg" style="max-width: 100%;"></a></p>
<p dir="auto"><a href="https://codecov.io/gh/SciML/NeuralPDE.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/fbc77dcb1d47e83af2155ef84618355d1ee9e0cb9afa52a59096d5dd4a61cf76/68747470733a2f2f636f6465636f762e696f2f67682f5363694d4c2f4e657572616c5044452e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/SciML/NeuralPDE.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a>
<a href="https://github.com/SciML/NeuralPDE.jl/actions?query=workflow%3ACI"><img src="https://github.com/SciML/NeuralPDE.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://buildkite.com/julialang/neuralpde-dot-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/a48a8ddee3549c8e857c193196989ae3717cd3f2b8cc2f7210c897631fc2d86a/68747470733a2f2f62616467652e6275696c646b6974652e636f6d2f66613331323536663462386134663935666535616239306333626634656635363035356132616665363735343335633138322e7376673f6272616e63683d6d6173746572" alt="Build status" data-canonical-src="https://badge.buildkite.com/fa31256f4b8a4f95fe5ab90c3bf4ef56055a2afe675435c182.svg?branch=master" style="max-width: 100%;"></a></p>
<p dir="auto"><a href="https://github.com/SciML/ColPrac"><img src="https://camo.githubusercontent.com/2496bdc13cbc9c458dfa19a108b1f333353f62917355a4cdee582bbdf8be43cf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f436f6c507261632d436f6e7472696275746f722532377325323047756964652d626c756576696f6c6574" alt="ColPrac: Contributor's Guide on Collaborative Practices for Community Packages" data-canonical-src="https://img.shields.io/badge/ColPrac-Contributor%27s%20Guide-blueviolet" style="max-width: 100%;"></a>
<a href="https://github.com/SciML/SciMLStyle"><img src="https://camo.githubusercontent.com/3e16f03bad047817fbc07f49307817ed7919ef79c339dc75ad4ce813012c3e0b/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f6c6162656c3d636f64652532307374796c65266d6573736167653d5363694d4c26636f6c6f723d393535386232266c6162656c436f6c6f723d333839383236" alt="SciML Code Style" data-canonical-src="https://img.shields.io/static/v1?label=code%20style&amp;message=SciML&amp;color=9558b2&amp;labelColor=389826" style="max-width: 100%;"></a></p>
<p dir="auto">NeuralPDE.jl is a solver package which consists of neural network solvers for
partial differential equations using physics-informed neural networks (PINNs). This package utilizes
neural stochastic differential equations to solve PDEs at a greatly increased generality
compared with classical methods.</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">Assuming that you already have Julia correctly installed, it suffices to install NeuralPDE.jl in the standard way, that is, by typing <code>] add NeuralPDE</code>. Note:
to exit the Pkg REPL-mode, just press <kbd>Backspace</kbd> or <kbd>Ctrl</kbd> + <kbd>C</kbd>.</p>
<h2 dir="auto"><a id="user-content-tutorials-and-documentation" class="anchor" aria-hidden="true" href="#tutorials-and-documentation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Tutorials and Documentation</h2>
<p dir="auto">For information on using the package,
<a href="https://docs.sciml.ai/NeuralPDE/stable/" rel="nofollow">see the stable documentation</a>. Use the
<a href="https://docs.sciml.ai/NeuralPDE/dev/" rel="nofollow">in-development documentation</a> for the version of
the documentation, which contains the unreleased features.</p>
<h2 dir="auto"><a id="user-content-features" class="anchor" aria-hidden="true" href="#features"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Features</h2>
<ul dir="auto">
<li>Physics-Informed Neural Networks for ODE, SDE, RODE, and PDE solving</li>
<li>Ability to define extra loss functions to mix xDE solving with data fitting (scientific machine learning)</li>
<li>Automated construction of Physics-Informed loss functions from a high level symbolic interface</li>
<li>Sophisticated techniques like quadrature training strategies, adaptive loss functions, and neural adapters
to accelerate training</li>
<li>Integrated logging suite for handling connections to TensorBoard</li>
<li>Handling of (partial) integro-differential equations and various stochastic equations</li>
<li>Specialized forms for solving <code>ODEProblem</code>s with neural networks</li>
<li>Compatability with <a href="https://docs.sciml.ai/Flux.jl/stable/" rel="nofollow">Flux.jl</a> and <a href="https://docs.sciml.ai/Lux/stable/" rel="nofollow">Lux.jl</a>
for all of the GPU-powered machine learning layers available from those libraries.</li>
<li>Compatability with <a href="https://docs.sciml.ai/NeuralOperators/stable/" rel="nofollow">NeuralOperators.jl</a> for
mixing DeepONets and other neural operators (Fourier Neural Operators, Graph Neural Operators,
etc.) with physics-informed loss functions</li>
</ul>
<h2 dir="auto"><a id="user-content-example-solving-2d-poisson-equation-via-physics-informed-neural-networks" class="anchor" aria-hidden="true" href="#example-solving-2d-poisson-equation-via-physics-informed-neural-networks"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example: Solving 2D Poisson Equation via Physics-Informed Neural Networks</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using NeuralPDE, Lux, ModelingToolkit, Optimization, OptimizationOptimisers
import ModelingToolkit: Interval, infimum, supremum

@parameters x y
@variables u(..)
Dxx = Differential(x)^2
Dyy = Differential(y)^2

# 2D PDE
eq = Dxx(u(x, y)) + Dyy(u(x, y)) ~ -sin(pi * x) * sin(pi * y)

# Boundary conditions
bcs = [u(0, y) ~ 0.0, u(1, y) ~ 0,
    u(x, 0) ~ 0.0, u(x, 1) ~ 0]
# Space and time domains
domains = [x ∈ Interval(0.0, 1.0),
    y ∈ Interval(0.0, 1.0)]
# Discretization
dx = 0.1

# Neural network
dim = 2 # number of dimensions
chain = Lux.Chain(Dense(dim, 16, Lux.σ), Dense(16, 16, Lux.σ), Dense(16, 1))

discretization = PhysicsInformedNN(chain, QuadratureTraining())

@named pde_system = PDESystem(eq, bcs, domains, [x, y], [u(x, y)])
prob = discretize(pde_system, discretization)

callback = function (p, l)
    println(&quot;Current loss is: $l&quot;)
    return false
end

res = Optimization.solve(prob, ADAM(0.1); callback = callback, maxiters = 4000)
prob = remake(prob, u0 = res.minimizer)
res = Optimization.solve(prob, ADAM(0.01); callback = callback, maxiters = 2000)
phi = discretization.phi"><pre><span class="pl-k">using</span> NeuralPDE, Lux, ModelingToolkit, Optimization, OptimizationOptimisers
<span class="pl-k">import</span> ModelingToolkit<span class="pl-k">:</span> Interval, infimum, supremum

<span class="pl-c1">@parameters</span> x y
<span class="pl-c1">@variables</span> <span class="pl-c1">u</span>(<span class="pl-k">..</span>)
Dxx <span class="pl-k">=</span> <span class="pl-c1">Differential</span>(x)<span class="pl-k">^</span><span class="pl-c1">2</span>
Dyy <span class="pl-k">=</span> <span class="pl-c1">Differential</span>(y)<span class="pl-k">^</span><span class="pl-c1">2</span>

<span class="pl-c"><span class="pl-c">#</span> 2D PDE</span>
eq <span class="pl-k">=</span> <span class="pl-c1">Dxx</span>(<span class="pl-c1">u</span>(x, y)) <span class="pl-k">+</span> <span class="pl-c1">Dyy</span>(<span class="pl-c1">u</span>(x, y)) <span class="pl-k">~</span> <span class="pl-k">-</span><span class="pl-c1">sin</span>(<span class="pl-c1">pi</span> <span class="pl-k">*</span> x) <span class="pl-k">*</span> <span class="pl-c1">sin</span>(<span class="pl-c1">pi</span> <span class="pl-k">*</span> y)

<span class="pl-c"><span class="pl-c">#</span> Boundary conditions</span>
bcs <span class="pl-k">=</span> [<span class="pl-c1">u</span>(<span class="pl-c1">0</span>, y) <span class="pl-k">~</span> <span class="pl-c1">0.0</span>, <span class="pl-c1">u</span>(<span class="pl-c1">1</span>, y) <span class="pl-k">~</span> <span class="pl-c1">0</span>,
    <span class="pl-c1">u</span>(x, <span class="pl-c1">0</span>) <span class="pl-k">~</span> <span class="pl-c1">0.0</span>, <span class="pl-c1">u</span>(x, <span class="pl-c1">1</span>) <span class="pl-k">~</span> <span class="pl-c1">0</span>]
<span class="pl-c"><span class="pl-c">#</span> Space and time domains</span>
domains <span class="pl-k">=</span> [x <span class="pl-k">∈</span> <span class="pl-c1">Interval</span>(<span class="pl-c1">0.0</span>, <span class="pl-c1">1.0</span>),
    y <span class="pl-k">∈</span> <span class="pl-c1">Interval</span>(<span class="pl-c1">0.0</span>, <span class="pl-c1">1.0</span>)]
<span class="pl-c"><span class="pl-c">#</span> Discretization</span>
dx <span class="pl-k">=</span> <span class="pl-c1">0.1</span>

<span class="pl-c"><span class="pl-c">#</span> Neural network</span>
dim <span class="pl-k">=</span> <span class="pl-c1">2</span> <span class="pl-c"><span class="pl-c">#</span> number of dimensions</span>
chain <span class="pl-k">=</span> Lux<span class="pl-k">.</span><span class="pl-c1">Chain</span>(<span class="pl-c1">Dense</span>(dim, <span class="pl-c1">16</span>, Lux<span class="pl-k">.</span>σ), <span class="pl-c1">Dense</span>(<span class="pl-c1">16</span>, <span class="pl-c1">16</span>, Lux<span class="pl-k">.</span>σ), <span class="pl-c1">Dense</span>(<span class="pl-c1">16</span>, <span class="pl-c1">1</span>))

discretization <span class="pl-k">=</span> <span class="pl-c1">PhysicsInformedNN</span>(chain, <span class="pl-c1">QuadratureTraining</span>())

<span class="pl-c1">@named</span> pde_system <span class="pl-k">=</span> <span class="pl-c1">PDESystem</span>(eq, bcs, domains, [x, y], [<span class="pl-c1">u</span>(x, y)])
prob <span class="pl-k">=</span> <span class="pl-c1">discretize</span>(pde_system, discretization)

callback <span class="pl-k">=</span> <span class="pl-k">function</span> (p, l)
    <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>Current loss is: <span class="pl-v">$l</span><span class="pl-pds">"</span></span>)
    <span class="pl-k">return</span> <span class="pl-c1">false</span>
<span class="pl-k">end</span>

res <span class="pl-k">=</span> Optimization<span class="pl-k">.</span><span class="pl-c1">solve</span>(prob, <span class="pl-c1">ADAM</span>(<span class="pl-c1">0.1</span>); callback <span class="pl-k">=</span> callback, maxiters <span class="pl-k">=</span> <span class="pl-c1">4000</span>)
prob <span class="pl-k">=</span> <span class="pl-c1">remake</span>(prob, u0 <span class="pl-k">=</span> res<span class="pl-k">.</span>minimizer)
res <span class="pl-k">=</span> Optimization<span class="pl-k">.</span><span class="pl-c1">solve</span>(prob, <span class="pl-c1">ADAM</span>(<span class="pl-c1">0.01</span>); callback <span class="pl-k">=</span> callback, maxiters <span class="pl-k">=</span> <span class="pl-c1">2000</span>)
phi <span class="pl-k">=</span> discretization<span class="pl-k">.</span>phi</pre></div>
<p dir="auto">And some analysis:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="xs, ys = [infimum(d.domain):(dx / 10):supremum(d.domain) for d in domains]
analytic_sol_func(x, y) = (sin(pi * x) * sin(pi * y)) / (2pi^2)

u_predict = reshape([first(phi([x, y], res.minimizer)) for x in xs for y in ys],
                    (length(xs), length(ys)))
u_real = reshape([analytic_sol_func(x, y) for x in xs for y in ys],
                 (length(xs), length(ys)))
diff_u = abs.(u_predict .- u_real)

using Plots
p1 = plot(xs, ys, u_real, linetype = :contourf, title = &quot;analytic&quot;);
p2 = plot(xs, ys, u_predict, linetype = :contourf, title = &quot;predict&quot;);
p3 = plot(xs, ys, diff_u, linetype = :contourf, title = &quot;error&quot;);
plot(p1, p2, p3)"><pre>xs, ys <span class="pl-k">=</span> [<span class="pl-c1">infimum</span>(d<span class="pl-k">.</span>domain)<span class="pl-k">:</span>(dx <span class="pl-k">/</span> <span class="pl-c1">10</span>)<span class="pl-k">:</span><span class="pl-c1">supremum</span>(d<span class="pl-k">.</span>domain) <span class="pl-k">for</span> d <span class="pl-k">in</span> domains]
<span class="pl-en">analytic_sol_func</span>(x, y) <span class="pl-k">=</span> (<span class="pl-c1">sin</span>(<span class="pl-c1">pi</span> <span class="pl-k">*</span> x) <span class="pl-k">*</span> <span class="pl-c1">sin</span>(<span class="pl-c1">pi</span> <span class="pl-k">*</span> y)) <span class="pl-k">/</span> (<span class="pl-c1">2pi</span><span class="pl-k">^</span><span class="pl-c1">2</span>)

u_predict <span class="pl-k">=</span> <span class="pl-c1">reshape</span>([<span class="pl-c1">first</span>(<span class="pl-c1">phi</span>([x, y], res<span class="pl-k">.</span>minimizer)) <span class="pl-k">for</span> x <span class="pl-k">in</span> xs <span class="pl-k">for</span> y <span class="pl-k">in</span> ys],
                    (<span class="pl-c1">length</span>(xs), <span class="pl-c1">length</span>(ys)))
u_real <span class="pl-k">=</span> <span class="pl-c1">reshape</span>([<span class="pl-c1">analytic_sol_func</span>(x, y) <span class="pl-k">for</span> x <span class="pl-k">in</span> xs <span class="pl-k">for</span> y <span class="pl-k">in</span> ys],
                 (<span class="pl-c1">length</span>(xs), <span class="pl-c1">length</span>(ys)))
diff_u <span class="pl-k">=</span> <span class="pl-c1">abs</span>.(u_predict <span class="pl-k">.-</span> u_real)

<span class="pl-k">using</span> Plots
p1 <span class="pl-k">=</span> <span class="pl-c1">plot</span>(xs, ys, u_real, linetype <span class="pl-k">=</span> <span class="pl-c1">:contourf</span>, title <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>analytic<span class="pl-pds">"</span></span>);
p2 <span class="pl-k">=</span> <span class="pl-c1">plot</span>(xs, ys, u_predict, linetype <span class="pl-k">=</span> <span class="pl-c1">:contourf</span>, title <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>predict<span class="pl-pds">"</span></span>);
p3 <span class="pl-k">=</span> <span class="pl-c1">plot</span>(xs, ys, diff_u, linetype <span class="pl-k">=</span> <span class="pl-c1">:contourf</span>, title <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>error<span class="pl-pds">"</span></span>);
<span class="pl-c1">plot</span>(p1, p2, p3)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://user-images.githubusercontent.com/12683885/90962648-2db35980-e4ba-11ea-8e58-f4f07c77bcb9.png"><img src="https://user-images.githubusercontent.com/12683885/90962648-2db35980-e4ba-11ea-8e58-f4f07c77bcb9.png" alt="image" style="max-width: 100%;"></a></p>
<h3 dir="auto"><a id="user-content-citation" class="anchor" aria-hidden="true" href="#citation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Citation</h3>
<p dir="auto">If you use NeuralPDE.jl in your research, please cite <a href="https://arxiv.org/abs/2107.09443" rel="nofollow">this paper</a>:</p>
<div class="highlight highlight-text-bibtex notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@article{zubov2021neuralpde,
  title={NeuralPDE: Automating Physics-Informed Neural Networks (PINNs) with Error Approximations},
  author={Zubov, Kirill and McCarthy, Zoe and Ma, Yingbo and Calisto, Francesco and Pagliarino, Valerio and Azeglio, Simone and Bottero, Luca and Luj{\'a}n, Emmanuel and Sulzer, Valentin and Bharambe, Ashutosh and others},
  journal={arXiv preprint arXiv:2107.09443},
  year={2021}
}"><pre><span class="pl-k">@article</span>{<span class="pl-en">zubov2021neuralpde</span>,
  <span class="pl-s">title</span>=<span class="pl-s"><span class="pl-pds">{</span>NeuralPDE: Automating Physics-Informed Neural Networks (PINNs) with Error Approximations<span class="pl-pds">}</span></span>,
  <span class="pl-s">author</span>=<span class="pl-s"><span class="pl-pds">{</span>Zubov, Kirill and McCarthy, Zoe and Ma, Yingbo and Calisto, Francesco and Pagliarino, Valerio and Azeglio, Simone and Bottero, Luca and Luj{\'a}n, Emmanuel and Sulzer, Valentin and Bharambe, Ashutosh and others<span class="pl-pds">}</span></span>,
  <span class="pl-s">journal</span>=<span class="pl-s"><span class="pl-pds">{</span>arXiv preprint arXiv:2107.09443<span class="pl-pds">}</span></span>,
  <span class="pl-s">year</span>=<span class="pl-s"><span class="pl-pds">{</span>2021<span class="pl-pds">}</span></span>
}</pre></div>
</article></div>