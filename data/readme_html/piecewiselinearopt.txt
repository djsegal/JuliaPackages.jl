<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-piecewiselinearopt" class="anchor" aria-hidden="true" href="#piecewiselinearopt"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>PiecewiseLinearOpt</h1>
<p dir="auto">A package for modeling optimization problems containing piecewise linear functions. Current support is for (the graphs of) continuous univariate functions.</p>
<p dir="auto">This package is an accompaniment to a paper entitled <a href="https://arxiv.org/abs/1708.00050" rel="nofollow"><em>Nonconvex piecewise linear functions: Advanced formulations and simple modeling tools</em></a>, by Joey Huchette and Juan Pablo Vielma.</p>
<p dir="auto"><a href="https://travis-ci.org/joehuchette/PiecewiseLinearOpt.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/4d7a7cf0393e5bbba1e8235869aee09c2f4997728288fd0a9cce4a2a6b8e5455/68747470733a2f2f7472617669732d63692e6f72672f6a6f6568756368657474652f5069656365776973654c696e6561724f70742e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/joehuchette/PiecewiseLinearOpt.jl.svg?branch=master" style="max-width: 100%;"></a></p>
<p dir="auto"><a href="https://coveralls.io/github/joehuchette/PiecewiseLinearOpt.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/0cc0ea701ff5b2ec596f62723eac2ba464ea3c5d827e35dffa8e0efea049c800/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6a6f6568756368657474652f5069656365776973654c696e6561724f70742e6a6c2f62616467652e7376673f6272616e63683d6d617374657226736572766963653d676974687562" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/joehuchette/PiecewiseLinearOpt.jl/badge.svg?branch=master&amp;service=github" style="max-width: 100%;"></a></p>
<p dir="auto"><a href="http://codecov.io/github/joehuchette/PiecewiseLinearOpt.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/606e75a201ca0065e47f0e2161c881218b65057d1d28389dae0e7e187bb0f019/687474703a2f2f636f6465636f762e696f2f6769746875622f6a6f6568756368657474652f5069656365776973654c696e6561724f70742e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/joehuchette/PiecewiseLinearOpt.jl/coverage.svg?branch=master" style="max-width: 100%;"></a></p>
<p dir="auto">This package offers helper functions for the <a href="https://github.com/JuliaOpt/JuMP.jl">JuMP algebraic modeling language</a>.</p>
<p dir="auto">Consider a piecewise linear function. The function is described in terms of the breakpoints between pieces, and the function value at those breakpoints.</p>
<p dir="auto">Consider a JuMP model</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using JuMP, PiecewiseLinearOpt
m = Model()
@variable(m, x)"><pre><span class="pl-k">using</span> JuMP, PiecewiseLinearOpt
m <span class="pl-k">=</span> <span class="pl-c1">Model</span>()
<span class="pl-c1">@variable</span>(m, x)</pre></div>
<p dir="auto">To model the graph of a piecewise linear function <code>f(x)</code>, take <code>d</code> as some set of breakpoints along the real line, and <code>fd = [f(x) for x in d]</code> as the corresponding function values. You can model this function in JuMP using the following function:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="z = piecewiselinear(m, x, d, fd)
@objective(m, Min, z) # minimize f(x)"><pre>z <span class="pl-k">=</span> <span class="pl-c1">piecewiselinear</span>(m, x, d, fd)
<span class="pl-c1">@objective</span>(m, Min, z) <span class="pl-c"><span class="pl-c">#</span> minimize f(x)</span></pre></div>
<p dir="auto">For another example, think of a piecewise linear approximation for for the function <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="4d45a131681a4c60662bc2dbad53a836">$f(x,y) = exp(x+y)$</math-renderer>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using JuMP, PiecewiseLinearOpt
m = Model()
@variable(m, x)
@variable(m, y)

z = piecewiselinear(m, x, y, 0:0.1:1, 0:0.1:1, (u,v) -&gt; exp(u+v))
@objective(m, Min, z)"><pre><span class="pl-k">using</span> JuMP, PiecewiseLinearOpt
m <span class="pl-k">=</span> <span class="pl-c1">Model</span>()
<span class="pl-c1">@variable</span>(m, x)
<span class="pl-c1">@variable</span>(m, y)

z <span class="pl-k">=</span> <span class="pl-c1">piecewiselinear</span>(m, x, y, <span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">0.1</span><span class="pl-k">:</span><span class="pl-c1">1</span>, <span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">0.1</span><span class="pl-k">:</span><span class="pl-c1">1</span>, (u,v) <span class="pl-k">-&gt;</span> <span class="pl-c1">exp</span>(u<span class="pl-k">+</span>v))
<span class="pl-c1">@objective</span>(m, Min, z)</pre></div>
<p dir="auto">Current support is limited to modeling the graph of a continuous piecewise linear function, either univariate or bivariate, with the goal of adding support for the epigraphs of lower semicontinuous piecewise linear functions.</p>
<p dir="auto">Supported univariate formulations:</p>
<ul dir="auto">
<li>Convex combination (<code>:CC</code>)</li>
<li>Multiple choice (<code>:MC</code>)</li>
<li>Native SOS2 branching (<code>:SOS2</code>)</li>
<li>Incremental (<code>:Incremental</code>)</li>
<li>Logarithmic (<code>:Logarithmic</code>; default)</li>
<li>Disaggregated Logarithmic (<code>:DisaggLogarithmic</code>)</li>
<li>Binary zig-zag (<code>:ZigZag</code>)</li>
<li>General integer zig-zag (<code>:ZigZagInteger</code>)</li>
</ul>
<p dir="auto">Supported bivariate formulations for entire constraint:</p>
<ul dir="auto">
<li>Convex combination (<code>:CC</code>)</li>
<li>Multiple choice (<code>:MC</code>)</li>
<li>Dissaggregated Logarithmic (<code>:DisaggLogarithmic</code>)</li>
</ul>
<p dir="auto">Also, you can use any univariate formulation for bivariate functions as well. They will be used to impose two axis-aligned SOS2 constraints, along with the "6-stencil" formulation for the triangle selection portion of the constraint. See the associated paper for more details. In particular, the following are also acceptable bivariate formulation choices:</p>
<ul dir="auto">
<li>Native SOS2 branching (<code>:SOS2</code>)</li>
<li>Incremental (<code>:Incremental</code>)</li>
<li>Logarithmic (<code>:Logarithmic</code>)</li>
<li>Binary zig-zag (<code>:ZigZag</code>)</li>
<li>General integer zig-zag (<code>:ZigZagInteger</code>)</li>
</ul>
</article></div>