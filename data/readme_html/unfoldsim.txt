<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-unfoldsim" class="anchor" aria-hidden="true" href="#unfoldsim"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>UnfoldSim</h1>
<p dir="auto"><a href="https://unfoldtoolbox.github.io/UnfoldSim.jl/dev/" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/unfoldtoolbox/UnfoldSim.jl/actions/workflows/CI.yml?query=branch%3Amain"><img src="https://github.com/unfoldtoolbox/UnfoldSim.jl/actions/workflows/CI.yml/badge.svg?branch=main" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/unfoldtoolbox/UnfoldSim.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/f8343f81c2249e8d968291758aa28576728e09f41d0034dd5ba67bb3699dc149/68747470733a2f2f636f6465636f762e696f2f67682f762f556e666f6c6453696d2e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/v/UnfoldSim.jl/branch/main/graph/badge.svg" style="max-width: 100%;"></a>
<a href="https://zenodo.org/badge/latestdoi/413455526" rel="nofollow"><img src="https://camo.githubusercontent.com/427f675a0f487967d1f8fe71b4c3b3aef892c892e4b570a8f857a6edf34c6f12/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f3431333435353532362e737667" alt="DOI" data-canonical-src="https://zenodo.org/badge/413455526.svg" style="max-width: 100%;"></a></p>
<p dir="auto">A package to simulate single timeseries model-based ERPs, fMRI activity, pupil dilation etc.
If you have one channel, it is a timeseries of (overlapping) event-related activity and some noise - you might have fun here!</p>
<p dir="auto">Many Tutorials, Guides, How-Tos and References available in the documentation!</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://user-images.githubusercontent.com/10183650/213565922-90feec23-3b51-4602-b50c-31561dbfc261.png"><img src="https://user-images.githubusercontent.com/10183650/213565922-90feec23-3b51-4602-b50c-31561dbfc261.png" alt="grafik" style="max-width: 100%;"></a></p>
<h1 dir="auto"><a id="user-content-quickstart" class="anchor" aria-hidden="true" href="#quickstart"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Quickstart</h1>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="data,evts = UnfoldSim.predef_eeg(;n_trials=20,noiselevel=0.8)"><pre>data,evts <span class="pl-k">=</span> UnfoldSim<span class="pl-k">.</span><span class="pl-c1">predef_eeg</span>(;n_trials<span class="pl-k">=</span><span class="pl-c1">20</span>,noiselevel<span class="pl-k">=</span><span class="pl-c1">0.8</span>)</pre></div>
<p dir="auto">Produces continuous "EEG" with PinkNoise and some Overlap between 20 events</p>
<h1 dir="auto"><a id="user-content-slightly-longer" class="anchor" aria-hidden="true" href="#slightly-longer"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Slightly longer</h1>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# start by defining the design / event-table
design = SingleSubjectDesign(;conditions=Dict(:condA=&gt;[&quot;levelA&quot;,&quot;levelB&quot;])) |&gt; d-&gt;RepeatDesign(d,10);
# next define a ground-truth signal + relation to events/design with Wilkinson Formulas
signal = LinearModelComponent(;
        basis=[0,0,0,0.5,1,1,0.5,0,0],
        formula = @formula(0~1+condA),
        β = [1,0.5]
        );
# finally, define some Onset Distribution and Noise, and simulate!
data,events = simulate(Random.MersenneTwister(1),design, signal,  UniformOnset(;offset=5,width=4), PinkNoise());        "><pre><span class="pl-c"><span class="pl-c">#</span> start by defining the design / event-table</span>
design <span class="pl-k">=</span> <span class="pl-c1">SingleSubjectDesign</span>(;conditions<span class="pl-k">=</span><span class="pl-c1">Dict</span>(<span class="pl-c1">:condA</span><span class="pl-k">=&gt;</span>[<span class="pl-s"><span class="pl-pds">"</span>levelA<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>levelB<span class="pl-pds">"</span></span>])) <span class="pl-k">|&gt;</span> d<span class="pl-k">-&gt;</span><span class="pl-c1">RepeatDesign</span>(d,<span class="pl-c1">10</span>);
<span class="pl-c"><span class="pl-c">#</span> next define a ground-truth signal + relation to events/design with Wilkinson Formulas</span>
signal <span class="pl-k">=</span> <span class="pl-c1">LinearModelComponent</span>(;
        basis<span class="pl-k">=</span>[<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0.5</span>,<span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-c1">0.5</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>],
        formula <span class="pl-k">=</span> <span class="pl-c1">@formula</span>(<span class="pl-c1">0</span><span class="pl-k">~</span><span class="pl-c1">1</span><span class="pl-k">+</span>condA),
        β <span class="pl-k">=</span> [<span class="pl-c1">1</span>,<span class="pl-c1">0.5</span>]
        );
<span class="pl-c"><span class="pl-c">#</span> finally, define some Onset Distribution and Noise, and simulate!</span>
data,events <span class="pl-k">=</span> <span class="pl-c1">simulate</span>(Random<span class="pl-k">.</span><span class="pl-c1">MersenneTwister</span>(<span class="pl-c1">1</span>),design, signal,  <span class="pl-c1">UniformOnset</span>(;offset<span class="pl-k">=</span><span class="pl-c1">5</span>,width<span class="pl-k">=</span><span class="pl-c1">4</span>), <span class="pl-c1">PinkNoise</span>());        </pre></div>
<p dir="auto">All components (design, components, onsets, noise) can be easily modified and you can simply plugin your own!</p>
</article></div>