<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-sparseirjl---intermediate-representation-of-propagators" class="anchor" aria-hidden="true" href="#sparseirjl---intermediate-representation-of-propagators"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>SparseIR.jl - intermediate representation of propagators</h1>
<p dir="auto"><a href="https://spm-lab.github.io/SparseIR.jl/stable/" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://spm-lab.github.io/SparseIR.jl/dev/" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/SpM-lab/SparseIR.jl/actions?query=workflows/CI"><img src="https://github.com/SpM-lab/SparseIR.jl/workflows/CI/badge.svg" alt="" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/SpM-lab/SparseIR.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/60a01fac8e6713d83ee470b51e21461e99987ad7cf1b8949b44debe02da372be/68747470733a2f2f636f6465636f762e696f2f67682f53704d2d6c61622f53706172736549522e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e7376673f746f6b656e3d74644d76547275596134" alt="" data-canonical-src="https://codecov.io/gh/SpM-lab/SparseIR.jl/branch/main/graph/badge.svg?token=tdMvTruYa4" style="max-width: 100%;"></a></p>
<p dir="auto">This library provides routines for constructing and working with the
intermediate representation of correlation functions. It provides:</p>
<ul dir="auto">
<li>on-the-fly computation of basis functions for arbitrary cutoff Λ</li>
<li>basis functions and singular values accurate to full precision</li>
<li>routines for sparse sampling</li>
</ul>
<blockquote>
<p dir="auto"><span class="color-fg-accent"><svg class="octicon octicon-info mr-2" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="M0 8a8 8 0 1 1 16 0A8 8 0 0 1 0 8Zm8-6.5a6.5 6.5 0 1 0 0 13 6.5 6.5 0 0 0 0-13ZM6.5 7.75A.75.75 0 0 1 7.25 7h1a.75.75 0 0 1 .75.75v2.75h.25a.75.75 0 0 1 0 1.5h-2a.75.75 0 0 1 0-1.5h.25v-2h-.25a.75.75 0 0 1-.75-.75ZM8 6a1 1 0 1 1 0-2 1 1 0 0 1 0 2Z"></path></svg>Note</span>
Refer also to the accompanying paper:<br>
<strong><a href="https://doi.org/10.1016/j.softx.2022.101266" rel="nofollow">sparse-ir: Optimal compression and sparse sampling of many-body propagators</a></strong></p>
</blockquote>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">SparseIR can be installed with the Julia package manager. Simply run the following from the command line:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia -e 'import Pkg; Pkg.add(&quot;SparseIR&quot;)'"><pre class="notranslate"><code>julia -e 'import Pkg; Pkg.add("SparseIR")'
</code></pre></div>
<p dir="auto">We support Julia version 1.6 and above, and recommend Julia 1.8 or above for optimal performance. We
depend on a quad-precision library and an SVD library for the accurate computation of the singular
value decomposition, a quadrature library for expansion coefficients and a Bessel functions
package for the Fourier transformed basis. All of these are automatically installed.
(A formal list of dependencies can be found in <code>Project.toml</code>.)</p>
<p dir="auto">To manually install the current development version, you can use the following:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia -e 'import Pkg; Pkg.develop(url=&quot;https://github.com/SpM-lab/SparseIR.jl&quot;)'"><pre class="notranslate"><code>julia -e 'import Pkg; Pkg.develop(url="https://github.com/SpM-lab/SparseIR.jl")'
</code></pre></div>
<blockquote>
<p dir="auto"><span class="color-fg-attention"><svg class="octicon octicon-alert mr-2" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="M6.457 1.047c.659-1.234 2.427-1.234 3.086 0l6.082 11.378A1.75 1.75 0 0 1 14.082 15H1.918a1.75 1.75 0 0 1-1.543-2.575Zm1.763.707a.25.25 0 0 0-.44 0L1.698 13.132a.25.25 0 0 0 .22.368h12.164a.25.25 0 0 0 .22-.368Zm.53 3.996v2.5a.75.75 0 0 1-1.5 0v-2.5a.75.75 0 0 1 1.5 0ZM9 11a1 1 0 1 1-2 0 1 1 0 0 1 2 0Z"></path></svg>Warning</span>
This is recommended only for developers - you won't get automatic updates!</p>
</blockquote>
<h2 dir="auto"><a id="user-content-documentation-and-tutorial" class="anchor" aria-hidden="true" href="#documentation-and-tutorial"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Documentation and tutorial</h2>
<p dir="auto">Check out our <a href="https://spm-lab.github.io/sparse-ir-tutorial" rel="nofollow">comprehensive tutorial</a>, where self-contained
notebooks for several many-body methods - GF(2), GW, Eliashberg equations,
Lichtenstein formula, FLEX, ... - are presented.</p>
<p dir="auto">Refer to the <a href="https://spm-lab.github.io/SparseIR.jl/stable/" rel="nofollow">API documentation</a> for more details on how to work
with the Julia library.</p>
<p dir="auto">There is also a <a href="https://github.com/SpM-lab/sparse-ir">Python library</a> and (currently somewhat restricted)
<a href="https://github.com/SpM-lab/sparse-ir-fortran">Fortran library</a> available for the IR basis and sparse sampling.</p>
<h2 dir="auto"><a id="user-content-example-usage" class="anchor" aria-hidden="true" href="#example-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example usage</h2>
<p dir="auto">As a simple example, let us perform self-consistent second-order perturbation theory
for the single impurity Anderson model at finite temperature.
Its Hamiltonian is given by
<math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="5f85f3335da3bc993117242009a965fb">$$H = -\mu(c^\dagger_\uparrow c_\uparrow + c^\dagger_\downarrow c_\downarrow) + U c^\dagger_\uparrow c^\dagger_\downarrow c_\downarrow c_\uparrow + \sum_{p\sigma} \big(V_{p\sigma} f^\dagger_{p\sigma} c_\sigma + V^\star_{p\sigma} c^\dagger_\sigma f_{p\sigma}\big) + \sum_{p\sigma} \epsilon_p f^\dagger_{p\sigma} f_{p\sigma},$$</math-renderer>
where <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="5f85f3335da3bc993117242009a965fb">$U$</math-renderer> is the electron interaction strength, <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="5f85f3335da3bc993117242009a965fb">$\mu$</math-renderer> is the chemical potential, <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="5f85f3335da3bc993117242009a965fb">$c_\sigma$</math-renderer> annihilates an electron on the impurity,
<math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="5f85f3335da3bc993117242009a965fb">$f_{p\sigma}$</math-renderer> annihilates an electron in the bath, <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="5f85f3335da3bc993117242009a965fb">$\dagger$</math-renderer> denotes the Hermitian conjugate, <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="5f85f3335da3bc993117242009a965fb">$p\in\mathbb R$</math-renderer> is bath momentum, and <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="5f85f3335da3bc993117242009a965fb">$\sigma\in{\uparrow, \downarrow}$</math-renderer> is spin. The hybridization strength <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="5f85f3335da3bc993117242009a965fb">$V_{p\sigma}$</math-renderer> and
bath energies <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="5f85f3335da3bc993117242009a965fb">$\epsilon_p$</math-renderer> are chosen such that the non-interacting density of states is semi-elliptic
with a half-bandwidth of one, <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="5f85f3335da3bc993117242009a965fb">$\rho_0(\omega) = \frac2\pi\sqrt{1-\omega^2}$</math-renderer>, <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="5f85f3335da3bc993117242009a965fb">$U=1.2$</math-renderer>, <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="5f85f3335da3bc993117242009a965fb">$\beta=10$</math-renderer>, and the system is half-filled, <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="5f85f3335da3bc993117242009a965fb">$\mu = U/2$</math-renderer>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using SparseIR

function main(β = 10, ωmax = 8, ε = 1e-6)
    # Construct the IR basis and sparse sampling for fermionic propagators
    basis = FiniteTempBasis{Fermionic}(β, ωmax, ε)
    sτ = TauSampling(basis)
    siω = MatsubaraSampling(basis; positive_only=true)
    
    # Solve the single impurity Anderson model coupled to a bath with a
    # semicircular density of states with unit half bandwidth.
    U = 1.2
    ρ₀(ω) = 2/π * √(1 - clamp(ω, -1, +1)^2)
    
    # Compute the IR basis coefficients for the non-interacting propagator
    ρ₀l = overlap.(basis.v, ρ₀)
    G₀l = -basis.s .* ρ₀l
    
    # Self-consistency loop: alternate between second-order expression for the
    # self-energy and the Dyson equation until convergence.
    Gl = copy(G₀l)
    Gl_prev = zero(Gl)
    G₀iω = evaluate(siω, G₀l)
    while !isapprox(Gl, Gl_prev, atol=ε)
        Gl_prev = copy(Gl)
        Gτ = evaluate(sτ, Gl)
        Στ = @. U^2 * Gτ^3
        Σl = fit(sτ, Στ)
        Σiω = evaluate(siω, Σl)
        Giω = @. (G₀iω^-1 - Σiω)^-1
        Gl = fit(siω, Giω)
    end
end"><pre><span class="pl-k">using</span> SparseIR

<span class="pl-k">function</span> <span class="pl-en">main</span>(β <span class="pl-k">=</span> <span class="pl-c1">10</span>, ωmax <span class="pl-k">=</span> <span class="pl-c1">8</span>, ε <span class="pl-k">=</span> <span class="pl-c1">1e-6</span>)
    <span class="pl-c"><span class="pl-c">#</span> Construct the IR basis and sparse sampling for fermionic propagators</span>
    basis <span class="pl-k">=</span> <span class="pl-c1">FiniteTempBasis</span><span class="pl-c1">{Fermionic}</span>(β, ωmax, ε)
    sτ <span class="pl-k">=</span> <span class="pl-c1">TauSampling</span>(basis)
    siω <span class="pl-k">=</span> <span class="pl-c1">MatsubaraSampling</span>(basis; positive_only<span class="pl-k">=</span><span class="pl-c1">true</span>)
    
    <span class="pl-c"><span class="pl-c">#</span> Solve the single impurity Anderson model coupled to a bath with a</span>
    <span class="pl-c"><span class="pl-c">#</span> semicircular density of states with unit half bandwidth.</span>
    U <span class="pl-k">=</span> <span class="pl-c1">1.2</span>
    <span class="pl-en">ρ₀</span>(ω) <span class="pl-k">=</span> <span class="pl-c1">2</span><span class="pl-k">/</span>π <span class="pl-k">*</span> <span class="pl-k">√</span>(<span class="pl-c1">1</span> <span class="pl-k">-</span> <span class="pl-c1">clamp</span>(ω, <span class="pl-k">-</span><span class="pl-c1">1</span>, <span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">^</span><span class="pl-c1">2</span>)
    
    <span class="pl-c"><span class="pl-c">#</span> Compute the IR basis coefficients for the non-interacting propagator</span>
    ρ₀l <span class="pl-k">=</span> <span class="pl-c1">overlap</span>.(basis<span class="pl-k">.</span>v, ρ₀)
    G₀l <span class="pl-k">=</span> <span class="pl-k">-</span>basis<span class="pl-k">.</span>s <span class="pl-k">.*</span> ρ₀l
    
    <span class="pl-c"><span class="pl-c">#</span> Self-consistency loop: alternate between second-order expression for the</span>
    <span class="pl-c"><span class="pl-c">#</span> self-energy and the Dyson equation until convergence.</span>
    Gl <span class="pl-k">=</span> <span class="pl-c1">copy</span>(G₀l)
    Gl_prev <span class="pl-k">=</span> <span class="pl-c1">zero</span>(Gl)
    G₀iω <span class="pl-k">=</span> <span class="pl-c1">evaluate</span>(siω, G₀l)
    <span class="pl-k">while</span> <span class="pl-k">!</span><span class="pl-c1">isapprox</span>(Gl, Gl_prev, atol<span class="pl-k">=</span>ε)
        Gl_prev <span class="pl-k">=</span> <span class="pl-c1">copy</span>(Gl)
        Gτ <span class="pl-k">=</span> <span class="pl-c1">evaluate</span>(sτ, Gl)
        Στ <span class="pl-k">=</span> <span class="pl-c1">@.</span> U<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">*</span> Gτ<span class="pl-k">^</span><span class="pl-c1">3</span>
        Σl <span class="pl-k">=</span> <span class="pl-c1">fit</span>(sτ, Στ)
        Σiω <span class="pl-k">=</span> <span class="pl-c1">evaluate</span>(siω, Σl)
        Giω <span class="pl-k">=</span> <span class="pl-c1">@.</span> (G₀iω<span class="pl-k">^-</span><span class="pl-c1">1</span> <span class="pl-k">-</span> Σiω)<span class="pl-k">^-</span><span class="pl-c1">1</span>
        Gl <span class="pl-k">=</span> <span class="pl-c1">fit</span>(siω, Giω)
    <span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>
<themed-picture data-catalyst-inline="true"><picture>
  <source media="(prefers-color-scheme: dark)" srcset="https://raw.githubusercontent.com/SpM-lab/SparseIR.jl/main/assets/dark.png">
  <img alt="Plot of the so-computed self-energy" src="https://raw.githubusercontent.com/SpM-lab/SparseIR.jl/main/assets/light.png">
</picture></themed-picture>
<p dir="auto">You may want to start with reading up on the <a href="https://arxiv.org/abs/2106.12685" rel="nofollow">intermediate representation</a>.
It is tied to the analytic continuation of bosonic/fermionic spectral
functions from (real) frequencies to imaginary time, a transformation mediated
by a kernel <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="5f85f3335da3bc993117242009a965fb">$K$</math-renderer>. The kernel depends on a cutoff, which you should choose to
be <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="5f85f3335da3bc993117242009a965fb">$\Lambda \geq \beta \omega_{\mathrm{max}}$</math-renderer>, where <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="5f85f3335da3bc993117242009a965fb">$\beta$</math-renderer> is the inverse
temperature and <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="5f85f3335da3bc993117242009a965fb">$\omega_{\mathrm{max}}$</math-renderer> is the bandwidth.</p>
<p dir="auto">One can now perform a <a href="https://w.wiki/3poQ" rel="nofollow">singular value expansion</a> of this kernel, which
generates two sets of orthonormal basis functions, one set <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="5f85f3335da3bc993117242009a965fb">$v_\ell(\omega)$</math-renderer> for
real frequency side <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="5f85f3335da3bc993117242009a965fb">$\omega$</math-renderer>, and one set <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="5f85f3335da3bc993117242009a965fb">$u_\ell(\tau)$</math-renderer> for the same object in
imaginary (Euclidean) time <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="5f85f3335da3bc993117242009a965fb">$\tau$</math-renderer>, together with a "coupling" strength
<math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="5f85f3335da3bc993117242009a965fb">$s_\ell$</math-renderer> between the two sides.</p>
<p dir="auto">By this construction, the imaginary time basis can be shown to be <em>optimal</em> in
terms of compactness.</p>
<h2 dir="auto">
<a id="user-content-license-and-citation" class="anchor" aria-hidden="true" href="#license-and-citation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>License and citation</h2>
<p dir="auto">This software is released under the MIT License. See <code>LICENSE</code> for details.</p>
<p dir="auto">If you find the intermediate representation, sparse sampling, or this software
useful in your research, please consider citing the following papers:</p>
<ul dir="auto">
<li>Hiroshi Shinaoka et al., <a href="https://doi.org/10.1103/PhysRevB.96.035147" rel="nofollow">Phys. Rev. B 96, 035147</a>  (2017)</li>
<li>Jia Li et al., <a href="https://doi.org/10.1103/PhysRevB.101.035144" rel="nofollow">Phys. Rev. B 101, 035144</a> (2020)</li>
<li>Markus Wallerberger et al., <a href="https://doi.org/10.1016/j.softx.2022.101266" rel="nofollow">SoftwareX 21, 101266</a> (2023)</li>
</ul>
<p dir="auto">If you are discussing sparse sampling in your research specifically, please
also consider citing an independently discovered, closely related approach, the
MINIMAX isometry method (Merzuk Kaltak and Georg Kresse,
<a href="https://doi.org/10.1103/PhysRevB.101.205145" rel="nofollow">Phys. Rev. B 101, 205145</a>, 2020).</p>
</article></div>