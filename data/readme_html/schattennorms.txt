<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-schattennormsjl" class="anchor" aria-hidden="true" href="#schattennormsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>SchattenNorms.jl</h1>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/BBN-Q/SchattenNorms.jl/workflows/CI/badge.svg"><img src="https://github.com/BBN-Q/SchattenNorms.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width:100%;"></a></p>
<p><a href="https://codecov.io/gh/BBN-Q/SchattenNorms.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/7d28816416cb843688c8674f6328fd471cbc5bafd7187c96dde535334bcbca16/68747470733a2f2f636f6465636f762e696f2f67682f42424e2d512f536368617474656e4e6f726d732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e7376673f746f6b656e3d457a613331637a726630" alt="codecov" data-canonical-src="https://codecov.io/gh/BBN-Q/SchattenNorms.jl/branch/master/graph/badge.svg?token=Eza31czrf0" style="max-width:100%;"></a></p>
<p>Simple implementation of Schatten norms. This package includes the
complete bounded versions of the induced norms for linear
transformations of matrices (i.e., <em>superoperators</em>), implemented as
described in</p>
<p><em>Semidefinite programs for completely bounded norms</em>, John Watrous, <a href="http://theoryofcomputing.org/articles/v005a011/" rel="nofollow">Theory of Computing, Volume 5 (2009), pp. 217–238</a>. (<a href="http://arxiv.org/abs/0901.4709" rel="nofollow">preprint</a>)</p>
<p><em>Simpler semidefinite programs for completely bounded norms</em>, John Watrous, <a href="http://cjtcs.cs.uchicago.edu/articles/2013/8/contents.html" rel="nofollow">Chicago Journal of Theoretical Computer Science Volume 8 (2013), p. 1-19</a>. (<a href="http://arxiv.org/abs/1207.5726" rel="nofollow">preprint</a>)</p>
<p>This package only supports the completely bounded norms for p=1 and
p=∞ (which are dual). It is not clear if there is an efficient way to
compute the completely bounded norms for other p.</p>
<h2><a id="user-content-norms-implemented" class="anchor" aria-hidden="true" href="#norms-implemented"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Norms implemented</h2>
<p>Taking σᵢ(M) to be the <em>i</em>th singular value of a matrix <em>M</em>, we have</p>
<table>
<thead>
<tr>
<th>Function name</th>
<th>Mathematical meaning</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>snorm(M, r)</code></td>
<td>‖X‖ᵣ = ∑ᵢ (σᵢ(M))ʳ</td>
</tr>
<tr>
<td><code>cbnorm(M, r)</code></td>
<td>supᵢ {‖M⊗1ᵢ(X)‖ᵣ  :  ‖X‖ᵣ=1}</td>
</tr>
</tbody>
</table>
<p>Some useful aliases and relatd calls are</p>
<table>
<thead>
<tr>
<th>Alias function</th>
<th>Equivalent call</th>
<th>Common name</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>trnorm(M)</code></td>
<td><code>snorm(M,1)</code></td>
<td>trace norm</td>
</tr>
<tr>
<td><code>nucnorm(M)</code></td>
<td><code>snorm(M,1)</code></td>
<td>nuclear norm</td>
</tr>
<tr>
<td><code>fnorm(M)</code></td>
<td><code>snorm(M,2), snorm(M)</code></td>
<td>Frobenius norm (default for <code>snorm</code>)</td>
</tr>
<tr>
<td><code>specnorm(M)</code></td>
<td><code>snorm(M,Inf)</code></td>
<td>spectral norm.</td>
</tr>
<tr>
<td><code>cbnorm(M)</code></td>
<td><code>cbnorm(M,Inf)</code></td>
<td>completely bounded norm usually refers to p=∞, so this is the default</td>
</tr>
<tr>
<td><code>dnorm(M)</code></td>
<td><code>cbnorm(M,1)</code></td>
<td>diamond norm</td>
</tr>
</tbody>
</table>
<p>For the special case where <code>M</code> is the difference between CPTP maps, or
the difference between superoperators corresponding to unitary maps,
use <code>ddist</code> described below.</p>
<h2><a id="user-content-utility-functions" class="anchor" aria-hidden="true" href="#utility-functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Utility functions</h2>
<table>
<thead>
<tr>
<th>Function name</th>
<th>Common name</th>
<th>Mathematical meaning</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>worstfidelity(u, v)</code></td>
<td>Worst case output state (Jozsa) fidelity</td>
<td>min {❘⟨ψ ❘ v⁺ u ❘ψ⟩❘² : ❘⟨ψ❘ψ⟩❘² = 1}</td>
</tr>
<tr>
<td><code>ddistu(U,V)</code></td>
<td>Diamond norm distance between unitary maps</td>
<td><code>dnorm(liou(U)-liou(V))</code></td>
</tr>
<tr>
<td><code>ddist(E,F)</code></td>
<td>Diamond norm distance between CPTP maps</td>
<td><code>dnorm(E-F)</code></td>
</tr>
</tbody>
</table>
<p>Despite the mathematical equivalences between <code>ddist</code>/<code>ddistu</code> and <code>dnorm</code>,
<code>ddist</code>/<code>ddistu</code> are much faster and more accurate.</p>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; snorm([1 0; 0 -1])
1.4142135623730951

julia&gt; snorm([1 0; 0 -1],1.0)
2.0

julia&gt; snorm([1 0; 0 -1],Inf)
1.0

julia&gt; U,_,_ = svd(randn(2,2)); V,_,_ = svd(randn(2,2)); # unitary invariance

julia&gt; isapprox(snorm([1 0; 0 -1]),snorm(U*[1 0; 0 -1]*V))
true

julia&gt; isapprox(snorm([1 0; 0 -1],1.0),snorm(U*[1 0; 0 -1]*V,1.0))
true

julia&gt; isapprox(snorm([1 0; 0 -1],Inf),snorm(U*[1 0; 0 -1]*V,Inf))
true

julia&gt; R = randn(3,3); snorm(R,1) &gt;= snorm(R,2) &gt;= snorm(R,Inf)
true

julia&gt; p = sort(abs(randn(3))+1.0); snorm(R,p[1]) &gt;= snorm(R,p[2]) &gt;= snorm(R,p[3])
true

julia&gt; snorm(R,1.0) == snorm(R,1) == trnorm(R) == nucnorm(R)
true
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">snorm</span>([<span class="pl-c1">1</span> <span class="pl-c1">0</span>; <span class="pl-c1">0</span> <span class="pl-k">-</span><span class="pl-c1">1</span>])
<span class="pl-c1">1.4142135623730951</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">snorm</span>([<span class="pl-c1">1</span> <span class="pl-c1">0</span>; <span class="pl-c1">0</span> <span class="pl-k">-</span><span class="pl-c1">1</span>],<span class="pl-c1">1.0</span>)
<span class="pl-c1">2.0</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">snorm</span>([<span class="pl-c1">1</span> <span class="pl-c1">0</span>; <span class="pl-c1">0</span> <span class="pl-k">-</span><span class="pl-c1">1</span>],<span class="pl-c1">Inf</span>)
<span class="pl-c1">1.0</span>

julia<span class="pl-k">&gt;</span> U,_,_ <span class="pl-k">=</span> <span class="pl-c1">svd</span>(<span class="pl-c1">randn</span>(<span class="pl-c1">2</span>,<span class="pl-c1">2</span>)); V,_,_ <span class="pl-k">=</span> <span class="pl-c1">svd</span>(<span class="pl-c1">randn</span>(<span class="pl-c1">2</span>,<span class="pl-c1">2</span>)); <span class="pl-c"><span class="pl-c">#</span> unitary invariance</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">isapprox</span>(<span class="pl-c1">snorm</span>([<span class="pl-c1">1</span> <span class="pl-c1">0</span>; <span class="pl-c1">0</span> <span class="pl-k">-</span><span class="pl-c1">1</span>]),<span class="pl-c1">snorm</span>(U<span class="pl-k">*</span>[<span class="pl-c1">1</span> <span class="pl-c1">0</span>; <span class="pl-c1">0</span> <span class="pl-k">-</span><span class="pl-c1">1</span>]<span class="pl-k">*</span>V))
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">isapprox</span>(<span class="pl-c1">snorm</span>([<span class="pl-c1">1</span> <span class="pl-c1">0</span>; <span class="pl-c1">0</span> <span class="pl-k">-</span><span class="pl-c1">1</span>],<span class="pl-c1">1.0</span>),<span class="pl-c1">snorm</span>(U<span class="pl-k">*</span>[<span class="pl-c1">1</span> <span class="pl-c1">0</span>; <span class="pl-c1">0</span> <span class="pl-k">-</span><span class="pl-c1">1</span>]<span class="pl-k">*</span>V,<span class="pl-c1">1.0</span>))
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">isapprox</span>(<span class="pl-c1">snorm</span>([<span class="pl-c1">1</span> <span class="pl-c1">0</span>; <span class="pl-c1">0</span> <span class="pl-k">-</span><span class="pl-c1">1</span>],<span class="pl-c1">Inf</span>),<span class="pl-c1">snorm</span>(U<span class="pl-k">*</span>[<span class="pl-c1">1</span> <span class="pl-c1">0</span>; <span class="pl-c1">0</span> <span class="pl-k">-</span><span class="pl-c1">1</span>]<span class="pl-k">*</span>V,<span class="pl-c1">Inf</span>))
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> R <span class="pl-k">=</span> <span class="pl-c1">randn</span>(<span class="pl-c1">3</span>,<span class="pl-c1">3</span>); <span class="pl-c1">snorm</span>(R,<span class="pl-c1">1</span>) <span class="pl-k">&gt;=</span> <span class="pl-c1">snorm</span>(R,<span class="pl-c1">2</span>) <span class="pl-k">&gt;=</span> <span class="pl-c1">snorm</span>(R,<span class="pl-c1">Inf</span>)
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> p <span class="pl-k">=</span> <span class="pl-c1">sort</span>(<span class="pl-c1">abs</span>(<span class="pl-c1">randn</span>(<span class="pl-c1">3</span>))<span class="pl-k">+</span><span class="pl-c1">1.0</span>); <span class="pl-c1">snorm</span>(R,p[<span class="pl-c1">1</span>]) <span class="pl-k">&gt;=</span> <span class="pl-c1">snorm</span>(R,p[<span class="pl-c1">2</span>]) <span class="pl-k">&gt;=</span> <span class="pl-c1">snorm</span>(R,p[<span class="pl-c1">3</span>])
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">snorm</span>(R,<span class="pl-c1">1.0</span>) <span class="pl-k">==</span> <span class="pl-c1">snorm</span>(R,<span class="pl-c1">1</span>) <span class="pl-k">==</span> <span class="pl-c1">trnorm</span>(R) <span class="pl-k">==</span> <span class="pl-c1">nucnorm</span>(R)
<span class="pl-c1">true</span></pre></div>
<h2><a id="user-content-dependencies" class="anchor" aria-hidden="true" href="#dependencies"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Dependencies</h2>
<p>SCS.jl and Convex.jl, for the completely bounded norms.</p>
<h2><a id="user-content-todo" class="anchor" aria-hidden="true" href="#todo"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>TODO</h2>
<ul class="contains-task-list">
<li class="task-list-item">
<p><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> The implementation of the completely bounded 1 and ∞ norms is
somewhat tailored to transformations between isomorphic spaces. It
should be easy to make it more general.</p>
</li>
<li class="task-list-item">
<p><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> The distance between two quantum channels (i.e., trace preserving,
completely positive linear maps of operators) is "easier" to compute
than the completely bounded 1 norm (the diamond norm). Adding a
function just for that would be nice.</p>
</li>
<li class="task-list-item">
<p><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> The diamond norm distance between two unitary maps is also much easier to compute -- see, e.g., <a href="https://cs.uwaterloo.ca/~watrous/CS766/LectureNotes/20.pdf" rel="nofollow">Lecture 20 for John Watrous's 2011 Quantum Information course</a> -- so a customized function would be nice.</p>
</li>
</ul>
<h2><a id="user-content-license" class="anchor" aria-hidden="true" href="#license"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>License</h2>
<p>Apache Lincense 2.0 (<a href="https://tldrlegal.com/license/apache-license-2.0-(apache-2.0)" rel="nofollow">summary</a>)</p>
<h2><a id="user-content-copyright" class="anchor" aria-hidden="true" href="#copyright"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Copyright</h2>
<p>Raytheon BBN Technologies 2015</p>
<h2><a id="user-content-authors" class="anchor" aria-hidden="true" href="#authors"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Authors</h2>
<p>Marcus P da Silva (@marcusps)</p>
</article></div>