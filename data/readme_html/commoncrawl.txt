<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-commoncrawljl" class="anchor" aria-hidden="true" href="#commoncrawljl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>CommonCrawl.jl</h1>
<p><a href="https://travis-ci.org/tanmaykm/CommonCrawl.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/f237a75b120a03bb55cd1441d06808169f36d8fc/68747470733a2f2f7472617669732d63692e6f72672f74616e6d61796b6d2f436f6d6d6f6e437261776c2e6a6c2e706e67" alt="Build Status" data-canonical-src="https://travis-ci.org/tanmaykm/CommonCrawl.jl.png" style="max-width:100%;"></a></p>
<p>Interface to the <a href="http://aws.amazon.com/datasets/41740" rel="nofollow">common crawl dataset on Amazon S3</a></p>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<p>An instance of the corpus is obtained as:</p>
<pre><code>cc = CrawlCorpus(cache_location::String, debug::Bool=false)
</code></pre>
<p>Since the crawl corpus files are large, they are cached locally by default at <code>cache_location</code>. The first time a file is accessed, it is downloaded in full into the cache location. Subsequent calls to read are served locally.</p>
<p>All cached files, or a particular cached archive file can be deleted:</p>
<pre><code>clear_cache(cc::CrawlCorpus)
clear_cache(cc::CrawlCorpus, archive::URI)
</code></pre>
<p>Segments and archive files in a segment can be listed as:</p>
<pre><code>segment_names = segments(cc::CrawlCorpus)
archive_uris = archives(cc::CrawlCorpus, segment::String)
</code></pre>
<p>Archive files across all segments can be accessed easily as:</p>
<pre><code>archive_uris = archives(cc::CrawlCorpus, count::Int=0)
</code></pre>
<p>Passing count as <code>0</code> lists all available archive files (which can be large).</p>
<p>A particular archive file can be opened as:</p>
<pre><code>open(cc::CrawlCorpus, archive::URI)
</code></pre>
<p>And crawl entries can be read from an opened archive as:</p>
<pre><code>entry = read_entry(cc::CrawlCorpus, f::IO, mime_part::String="", metadata_only::Bool=false)
entries = read_entries(cc::CrawlCorpus, f::IO, mime_part::String="", num_entries::Int=0, metadata_only::Bool=false)
</code></pre>
<p>Method <code>read_entry</code> returns an <code>ArchiveEntry</code> instance corresponding to the next entry in the file with mime type beginning with <code>mime_part</code>. Method <code>read_entries</code> returns an array of <code>ArchiveEntry</code> objects. If <code>num_entries</code> is <code>0</code>, all matching entries in the archive file are returned. If <code>metadata_only</code> is true, only the file metadata (url and mime type) is populated in the entries.</p>
</article></div>