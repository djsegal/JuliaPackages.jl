<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p dir="auto"><a href="https://tshort.github.io/FunctionalModels.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://tshort.github.io/FunctionalModels.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/tshort/FunctionalModels.jl/actions"><img src="https://github.com/tshort/FunctionalModels.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a></p>
<h1 dir="auto"><a id="user-content-functionalmodelsjl-formerly-simsjl" class="anchor" aria-hidden="true" href="#functionalmodelsjl-formerly-simsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>FunctionalModels.jl (formerly Sims.jl)</h1>
<p dir="auto">A <a href="http://julialang.org" rel="nofollow">Julia</a> package for equation-based modeling
and simulations. For more information, see the documentation:</p>
<ul dir="auto">
<li><strong><a href="https://tshort.github.io/FunctionalModels.jl/stable" rel="nofollow">Documentation for the released version</a></strong>.</li>
<li><strong><a href="https://tshort.github.io/FunctionalModels.jl/latest" rel="nofollow">Documentation for the development version</a></strong>.</li>
</ul>
<hr>
<p dir="auto">NOTE: This is a work in progress to convert the package to use <a href="https://mtk.sciml.ai/" rel="nofollow">ModelingToolkit</a>.</p>
<p dir="auto">Some of the components and/or examples do not work, yet. This especially includes models requiring events and discrete systems.</p>
<hr>
<p dir="auto">FunctionalModels builds on top of <a href="https://mtk.sciml.ai/" rel="nofollow">ModelingToolkit</a>. The following
are exported:</p>
<ul dir="auto">
<li><code>t</code>: independent variable</li>
<li><code>D</code> and <code>der</code>: aliases for <code>Differential(t)</code></li>
<li><code>system</code>: flattens a set of hierarchical equations and returns a simplified <code>ODESystem</code></li>
<li><code>Unknown</code>: helper function to create variables</li>
<li><code>default_value</code>: return the default (starting) value of a variable</li>
<li><code>compatible_values</code>: return the base value from a variable to use when creating other variables</li>
<li><code>RefBranch</code> and <code>Branch</code>: marks nodes and flow variables</li>
</ul>
<p dir="auto">Equations are standard ModelingToolkit equations. The main difference in FunctionalModels is
that variables should be created with <code>Unknown(val; name)</code> or one of the helpers like <code>Voltage()</code>.
Variables created this way include metadata to ensure that variable names don't clash.
Multiple subcomponents can all have a <code>v(t)</code> variable for example.
Once the model is flattened, the variable names will be normalized.</p>
<p dir="auto">FunctionalModels uses a functional style as opposed to the more object-oriented
approach of ModelingToolkit, Modia, and Modelica. Because <code>system</code>
return an <code>ODESystem</code>, models can be built up of FunctionalModels components and
standard ModelingToolkit components.</p>
<h2 dir="auto"><a id="user-content-background" class="anchor" aria-hidden="true" href="#background"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Background</h2>
<p dir="auto">This package is for non-causal modeling in Julia. The idea behind
non-causal modeling is that the user develops models based on
components which are described by a set of equations. A tool can then
transform the equations and solve the differential algebraic
equations. Non-causal models tend to match their physical counterparts
in terms of their specification and implementation.</p>
<p dir="auto">Causal modeling is where all signals have an input and an output, and
the flow of information is clear. Simulink is the highest-profile
example. The problem with causal modeling is that it is difficult to
build up models from components.</p>
<p dir="auto">The highest profile noncausal modeling tools are in the
<a href="https://www.modelica.org/" rel="nofollow">Modelica</a> family. The MathWorks company also has
FunctionalModelscape that uses Matlab notation. Modelica is an object-oriented,
open language with multiple implementations. It is a large, complex,
powerful language with an extensive standard library of components.</p>
<p dir="auto">This implementation follows the work of
<a href="http://web.ict.kth.se/~dbro/" rel="nofollow">David Broman</a>
(<a href="http://www.bromans.com/david/publ/thesis-2010-david-broman.pdf" rel="nofollow">thesis</a>
and <a href="http://www.bromans.com/software/mkl/mkl-source-1.0.0.zip" rel="nofollow">code</a>)
and <a href="http://db.inf.uni-tuebingen.de/team/giorgidze" rel="nofollow">George Giorgidze</a>
(<a href="https://github.com/giorgidze/Hydra">Hydra code</a> and
<a href="http://db.inf.uni-tuebingen.de/files/giorgidze/phd_thesis.pdf" rel="nofollow">thesis</a>)
and <a href="http://www.cs.nott.ac.uk/~nhn/" rel="nofollow">Henrik Nilsson</a> and their
functional hybrid modeling. FunctionalModels is most similar to
<a href="https://github.com/david-broman/modelyze">Modelyze</a> by David Broman
(<a href="http://www.eecs.berkeley.edu/Pubs/TechRpts/2012/EECS-2012-173.pdf" rel="nofollow">report</a>).</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">FunctionalModels is an installable package. To install FunctionalModels, use the following:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Pkg.add(&quot;FunctionalModels&quot;)"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>FunctionalModels<span class="pl-pds">"</span></span>)</pre></div>
<h2 dir="auto"><a id="user-content-model-libraries" class="anchor" aria-hidden="true" href="#model-libraries"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Model Libraries</h2>
<p dir="auto">FunctionalModels.jl has one main module named <code>FunctionalModels</code> and the following submodules:</p>
<ul dir="auto">
<li>
<p dir="auto"><code>FunctionalModels.Lib</code> -- the standard library</p>
</li>
<li>
<p dir="auto"><code>FunctionalModels.Examples</code> -- example models, including:</p>
<ul dir="auto">
<li><code>FunctionalModels.Examples.Basics</code></li>
<li><code>FunctionalModels.Examples.Lib</code></li>
<li><code>FunctionalModels.Examples.Neural</code></li>
</ul>
</li>
</ul>
<h2 dir="auto"><a id="user-content-basic-example" class="anchor" aria-hidden="true" href="#basic-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Basic example</h2>
<p dir="auto">FunctionalModels uses ModelingToolkit to build up models. All equations use the
ModelingToolkit variables and syntax.
In a simulation, the unknowns are to be solved based on a set of
equations. Equations are built from device models.</p>
<p dir="auto">A device model is a function that returns a vector of equations or
other devices that also return lists of equations.</p>
<h2 dir="auto"><a id="user-content-electrical-example" class="anchor" aria-hidden="true" href="#electrical-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Electrical example</h2>
<p dir="auto">This example shows definitions of several electrical components. Each
is again a function that returns a list of equations.</p>
<p dir="auto">Arguments to each function are model parameters. These normally include
nodes specifying connectivity followed by parameters specifying model
characteristics.</p>
<p dir="auto">Models can contain models or other functions that return equations.
The function <code>Branch</code> is a special function that returns an equation
specifying relationships between nodes and flows. It also acts as an
indicator to mark nodes. In the flattening/elaboration process,
equations are created to sum flows (in this case electrical currents)
to zero at all nodes. <code>RefBranch</code> is another special function for
marking nodes and flow variables.</p>
<p dir="auto">Nodes passed as parameters are unknown variables. For these
electrical examples, a node is simply an unknown voltage.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="
function Resistor(n1, n2; R::Real) 
    i = Current()
    v = Voltage()
    [
        Branch(n1, n2, v, i)
        R * i ~ v
    ]
end

function Capacitor(n1, n2; C::Real) 
    i = Current()
    v = Voltage()
    [
        Branch(n1, n2, v, i)
        D(v) ~ i / C
    ]
end"><pre><span class="pl-k">function</span> <span class="pl-en">Resistor</span>(n1, n2; R<span class="pl-k">::</span><span class="pl-c1">Real</span>) 
    i <span class="pl-k">=</span> <span class="pl-c1">Current</span>()
    v <span class="pl-k">=</span> <span class="pl-c1">Voltage</span>()
    [
        <span class="pl-c1">Branch</span>(n1, n2, v, i)
        R <span class="pl-k">*</span> i <span class="pl-k">~</span> v
    ]
<span class="pl-k">end</span>

<span class="pl-k">function</span> <span class="pl-en">Capacitor</span>(n1, n2; C<span class="pl-k">::</span><span class="pl-c1">Real</span>) 
    i <span class="pl-k">=</span> <span class="pl-c1">Current</span>()
    v <span class="pl-k">=</span> <span class="pl-c1">Voltage</span>()
    [
        <span class="pl-c1">Branch</span>(n1, n2, v, i)
        <span class="pl-c1">D</span>(v) <span class="pl-k">~</span> i <span class="pl-k">/</span> C
    ]
<span class="pl-k">end</span></pre></div>
<p dir="auto">What follows is a top-level circuit definition. In this case,
there are no input parameters. The ground reference "g" is
assigned zero volts.</p>
<p dir="auto">All of the equations returned in the list of equations are other
models with various parameters.</p>
<p dir="auto">In this example, the model components are named (<code>:vs</code>, <code>:r1</code>, ...).
Unnamed components can also be used, but then variables used
in components have anonymized naming (<code>c1₊i(t)</code> vs. <code>var"##i#1057"(t)</code>).</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="function Circuit()
    @named n1 = Voltage()
    @named n2 = Voltage()
    g = 0.0  # A ground has zero volts; it's not an unknown.
    [
        :vs =&gt; SineVoltage(n1, g, V = 10.0, f = 60.0)
        :r1 =&gt; Resistor(n1, n2, R = 10.0)
        :r2 =&gt; Resistor(n2, g, R = 5.0)
        :c1 =&gt; Capacitor(n2, g, C = 5.0e-3)
    ]
end

ckt = Circuit()"><pre><span class="pl-k">function</span> <span class="pl-en">Circuit</span>()
    <span class="pl-c1">@named</span> n1 <span class="pl-k">=</span> <span class="pl-c1">Voltage</span>()
    <span class="pl-c1">@named</span> n2 <span class="pl-k">=</span> <span class="pl-c1">Voltage</span>()
    g <span class="pl-k">=</span> <span class="pl-c1">0.0</span>  <span class="pl-c"><span class="pl-c">#</span> A ground has zero volts; it's not an unknown.</span>
    [
        <span class="pl-c1">:vs</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">SineVoltage</span>(n1, g, V <span class="pl-k">=</span> <span class="pl-c1">10.0</span>, f <span class="pl-k">=</span> <span class="pl-c1">60.0</span>)
        <span class="pl-c1">:r1</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">Resistor</span>(n1, n2, R <span class="pl-k">=</span> <span class="pl-c1">10.0</span>)
        <span class="pl-c1">:r2</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">Resistor</span>(n2, g, R <span class="pl-k">=</span> <span class="pl-c1">5.0</span>)
        <span class="pl-c1">:c1</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">Capacitor</span>(n2, g, C <span class="pl-k">=</span> <span class="pl-c1">5.0e-3</span>)
    ]
<span class="pl-k">end</span>

ckt <span class="pl-k">=</span> <span class="pl-c1">Circuit</span>()</pre></div>
</article></div>