<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-femmaterialsjl" class="anchor" aria-hidden="true" href="#femmaterialsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>FEMMaterials.jl</h1>
<p dir="auto"><a href="https://gitter.im/JuliaFEM/JuliaFEM.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/5dbac0213da25c445bd11f168587c11a200ba153ef3014e8408e462e410169b3/68747470733a2f2f6261646765732e6769747465722e696d2f4a6f696e253230436861742e737667" alt="" data-canonical-src="https://badges.gitter.im/Join%20Chat.svg" style="max-width: 100%;"></a>
<a href="https://travis-ci.org/JuliaFEM/FEMMaterials.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/acde6e027ca6ef8ccd142c7730437f41fb7b7b334766e55bc31900edb213fcfc/68747470733a2f2f7472617669732d63692e6f72672f4a756c696146454d2f46454d4d6174657269616c732e6a6c2e7376673f6272616e63683d6d6173746572" alt="" data-canonical-src="https://travis-ci.org/JuliaFEM/FEMMaterials.jl.svg?branch=master" style="max-width: 100%;"></a>
<a href="https://coveralls.io/github/JuliaFEM/FEMMaterials.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/11f1863c29458fb28f0d80cd7064f521a3c97b848e62d84d6e1de07093a010d7/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f4a756c696146454d2f46454d4d6174657269616c732e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="" data-canonical-src="https://coveralls.io/repos/github/JuliaFEM/FEMMaterials.jl/badge.svg?branch=master" style="max-width: 100%;"></a>
<a href="https://juliafem.github.io/FEMMaterials.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://juliafem.github.io/FEMMaterials.jl/latest" rel="nofollow"><img src="https://camo.githubusercontent.com/56f8252ba8e9d3f0b810769543f77823d2fe031ce560d4c2d69fb1fcad800383/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6c61746573742d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-latest-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/JuliaFEM/FEMMaterials.jl/issues"><img src="https://camo.githubusercontent.com/d5d466f452cc53b1375b72667aaac6cf624126edb68fbd116ab182e1d1183053/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732f4a756c696146454d2f46454d4d6174657269616c732e6a6c2e737667" alt="" data-canonical-src="https://img.shields.io/github/issues/JuliaFEM/FEMMaterials.jl.svg" style="max-width: 100%;"></a></p>
<p dir="auto">Computational material model bindings to JuliaFEM. The JuliaFEM compability of the materials is to be tested in this package.
Here is one usage example. Note this README file is generated edit <a href="%5Breadme-header%5D"><code>readme_header.txt</code></a> instead</p>
<h1 dir="auto"><a id="user-content-3d-beam-with-ideal-plastic-material-model-from-materialsjl" class="anchor" aria-hidden="true" href="#3d-beam-with-ideal-plastic-material-model-from-materialsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>3D Beam with ideal plastic material model from Materials.jl</h1>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using JuliaFEM, FEMMaterials, Materials, FEMBase, LinearAlgebra, Plots
import FEMMaterials: Continuum3D, MecaMatSo
pkg_dir = dirname(dirname(pathof(FEMMaterials)))"><pre><span class="pl-k">using</span> JuliaFEM, FEMMaterials, Materials, FEMBase, LinearAlgebra, Plots
<span class="pl-k">import</span> FEMMaterials<span class="pl-k">:</span> Continuum3D, MecaMatSo
pkg_dir <span class="pl-k">=</span> <span class="pl-c1">dirname</span>(<span class="pl-c1">dirname</span>(<span class="pl-c1">pathof</span>(FEMMaterials)))</pre></div>
<h2 dir="auto"><a id="user-content-lets-read-the-discretized-geometry-and-create-boundary-conditions" class="anchor" aria-hidden="true" href="#lets-read-the-discretized-geometry-and-create-boundary-conditions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Let's read the discretized geometry and create boundary conditions</h2>
<p dir="auto">File <code>plactic_beam.inp</code> is created with 3rd party meshing tool.
File contains surface sets <code>BC1</code>, <code>BC2</code> and <code>PRESSURE</code> as well
element set <code>Body1</code></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="mesh = abaqus_read_mesh(joinpath(pkg_dir,&quot;examples&quot;,&quot;data_3dbeam&quot;,&quot;plastic_beam.inp&quot;))
beam_elements = create_elements(mesh, &quot;Body1&quot;)
bc_elements_1 = create_nodal_elements(mesh, &quot;BC1&quot;)
bc_elements_2 = create_nodal_elements(mesh, &quot;BC2&quot;)
trac_elements = create_surface_elements(mesh, &quot;PRESSURE&quot;)

for j in 1:3
    update!(bc_elements_1, &quot;displacement $j&quot;, 0.0)
end
update!(bc_elements_2, &quot;displacement 1&quot;, 0.0)
update!(bc_elements_2, &quot;displacement 2&quot;, 0.0)
update!(trac_elements, &quot;surface pressure&quot;, 0.0 =&gt; 0.00)
update!(trac_elements, &quot;surface pressure&quot;, 1.0 =&gt; 2.70)
trac = Problem(Continuum3D, &quot;traction&quot;, 3)
bc = Problem(Dirichlet, &quot;fix displacement&quot;, 3, &quot;displacement&quot;)
add_elements!(trac, trac_elements)
add_elements!(bc, bc_elements_1)
add_elements!(bc, bc_elements_2)"><pre>mesh <span class="pl-k">=</span> <span class="pl-c1">abaqus_read_mesh</span>(<span class="pl-c1">joinpath</span>(pkg_dir,<span class="pl-s"><span class="pl-pds">"</span>examples<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>data_3dbeam<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>plastic_beam.inp<span class="pl-pds">"</span></span>))
beam_elements <span class="pl-k">=</span> <span class="pl-c1">create_elements</span>(mesh, <span class="pl-s"><span class="pl-pds">"</span>Body1<span class="pl-pds">"</span></span>)
bc_elements_1 <span class="pl-k">=</span> <span class="pl-c1">create_nodal_elements</span>(mesh, <span class="pl-s"><span class="pl-pds">"</span>BC1<span class="pl-pds">"</span></span>)
bc_elements_2 <span class="pl-k">=</span> <span class="pl-c1">create_nodal_elements</span>(mesh, <span class="pl-s"><span class="pl-pds">"</span>BC2<span class="pl-pds">"</span></span>)
trac_elements <span class="pl-k">=</span> <span class="pl-c1">create_surface_elements</span>(mesh, <span class="pl-s"><span class="pl-pds">"</span>PRESSURE<span class="pl-pds">"</span></span>)

<span class="pl-k">for</span> j <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">3</span>
    <span class="pl-c1">update!</span>(bc_elements_1, <span class="pl-s"><span class="pl-pds">"</span>displacement <span class="pl-v">$j</span><span class="pl-pds">"</span></span>, <span class="pl-c1">0.0</span>)
<span class="pl-k">end</span>
<span class="pl-c1">update!</span>(bc_elements_2, <span class="pl-s"><span class="pl-pds">"</span>displacement 1<span class="pl-pds">"</span></span>, <span class="pl-c1">0.0</span>)
<span class="pl-c1">update!</span>(bc_elements_2, <span class="pl-s"><span class="pl-pds">"</span>displacement 2<span class="pl-pds">"</span></span>, <span class="pl-c1">0.0</span>)
<span class="pl-c1">update!</span>(trac_elements, <span class="pl-s"><span class="pl-pds">"</span>surface pressure<span class="pl-pds">"</span></span>, <span class="pl-c1">0.0</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">0.00</span>)
<span class="pl-c1">update!</span>(trac_elements, <span class="pl-s"><span class="pl-pds">"</span>surface pressure<span class="pl-pds">"</span></span>, <span class="pl-c1">1.0</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">2.70</span>)
trac <span class="pl-k">=</span> <span class="pl-c1">Problem</span>(Continuum3D, <span class="pl-s"><span class="pl-pds">"</span>traction<span class="pl-pds">"</span></span>, <span class="pl-c1">3</span>)
bc <span class="pl-k">=</span> <span class="pl-c1">Problem</span>(Dirichlet, <span class="pl-s"><span class="pl-pds">"</span>fix displacement<span class="pl-pds">"</span></span>, <span class="pl-c1">3</span>, <span class="pl-s"><span class="pl-pds">"</span>displacement<span class="pl-pds">"</span></span>)
<span class="pl-c1">add_elements!</span>(trac, trac_elements)
<span class="pl-c1">add_elements!</span>(bc, bc_elements_1)
<span class="pl-c1">add_elements!</span>(bc, bc_elements_2)</pre></div>
<h2 dir="auto"><a id="user-content-next-we-set-the-material-properties-for-each-element-set" class="anchor" aria-hidden="true" href="#next-we-set-the-material-properties-for-each-element-set"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Next, we set the material properties for each element set</h2>
<p dir="auto">In this example we only have the one element set <code>Body1</code> in variable <code>beam_elements</code></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="update!(beam_elements, &quot;youngs_modulus&quot;, 200.0e3)
update!(beam_elements, &quot;poissons_ratio&quot;, 0.3)
update!(beam_elements, &quot;yield_stress&quot;, 100.0)

beam = Problem(Continuum3D, &quot;plastic beam&quot;, 3)
beam.properties.material_model = :IdealPlastic
add_elements!(beam, beam_elements)"><pre><span class="pl-c1">update!</span>(beam_elements, <span class="pl-s"><span class="pl-pds">"</span>youngs_modulus<span class="pl-pds">"</span></span>, <span class="pl-c1">200.0e3</span>)
<span class="pl-c1">update!</span>(beam_elements, <span class="pl-s"><span class="pl-pds">"</span>poissons_ratio<span class="pl-pds">"</span></span>, <span class="pl-c1">0.3</span>)
<span class="pl-c1">update!</span>(beam_elements, <span class="pl-s"><span class="pl-pds">"</span>yield_stress<span class="pl-pds">"</span></span>, <span class="pl-c1">100.0</span>)

beam <span class="pl-k">=</span> <span class="pl-c1">Problem</span>(Continuum3D, <span class="pl-s"><span class="pl-pds">"</span>plastic beam<span class="pl-pds">"</span></span>, <span class="pl-c1">3</span>)
beam<span class="pl-k">.</span>properties<span class="pl-k">.</span>material_model <span class="pl-k">=</span> <span class="pl-c1">:IdealPlastic</span>
<span class="pl-c1">add_elements!</span>(beam, beam_elements)</pre></div>
<h2 dir="auto"><a id="user-content-and-next-we-setup-the-analysis" class="anchor" aria-hidden="true" href="#and-next-we-setup-the-analysis"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>And next, we setup the analysis</h2>
<p dir="auto"><code>t0</code>, <code>t1</code>, and <code>dt</code> are the start time, end time, and time step respectively.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="analysis = Analysis(MecaMatSo, &quot;solve problem&quot;)
analysis.properties.max_iterations = 50
analysis.properties.t0 = 0.0
analysis.properties.t1 = 1.0
analysis.properties.dt = 0.05"><pre>analysis <span class="pl-k">=</span> <span class="pl-c1">Analysis</span>(MecaMatSo, <span class="pl-s"><span class="pl-pds">"</span>solve problem<span class="pl-pds">"</span></span>)
analysis<span class="pl-k">.</span>properties<span class="pl-k">.</span>max_iterations <span class="pl-k">=</span> <span class="pl-c1">50</span>
analysis<span class="pl-k">.</span>properties<span class="pl-k">.</span>t0 <span class="pl-k">=</span> <span class="pl-c1">0.0</span>
analysis<span class="pl-k">.</span>properties<span class="pl-k">.</span>t1 <span class="pl-k">=</span> <span class="pl-c1">1.0</span>
analysis<span class="pl-k">.</span>properties<span class="pl-k">.</span>dt <span class="pl-k">=</span> <span class="pl-c1">0.05</span></pre></div>
<h2 dir="auto"><a id="user-content-writing-the-results-needs-to-be-setup-as-well" class="anchor" aria-hidden="true" href="#writing-the-results-needs-to-be-setup-as-well"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Writing the results needs to be setup as well</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="xdmf = Xdmf(&quot;3dbeam_results_output&quot;; overwrite=true)
add_results_writer!(analysis, xdmf)"><pre>xdmf <span class="pl-k">=</span> <span class="pl-c1">Xdmf</span>(<span class="pl-s"><span class="pl-pds">"</span>3dbeam_results_output<span class="pl-pds">"</span></span>; overwrite<span class="pl-k">=</span><span class="pl-c1">true</span>)
<span class="pl-c1">add_results_writer!</span>(analysis, xdmf)</pre></div>
<h2 dir="auto"><a id="user-content-finally-adding-the-problems-together-and-running-the-analysis" class="anchor" aria-hidden="true" href="#finally-adding-the-problems-together-and-running-the-analysis"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Finally, adding the problems together and running the analysis</h2>
<p dir="auto">All earlier defined problems are added together. Also result file need to be
closed to flush everything from the writing buffer to the file.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="add_problems!(analysis, beam, trac, bc)
run!(analysis)
close(xdmf)"><pre><span class="pl-c1">add_problems!</span>(analysis, beam, trac, bc)
<span class="pl-c1">run!</span>(analysis)
<span class="pl-c1">close</span>(xdmf)</pre></div>
<h2 dir="auto"><a id="user-content-the-first-post-processing-step-is-to-calculate-maximum-von-mises-stresses" class="anchor" aria-hidden="true" href="#the-first-post-processing-step-is-to-calculate-maximum-von-mises-stresses"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>The first post-processing step is to calculate maximum von Mises stresses</h2>
<p dir="auto"><code>vmis</code> contains all integration points stresses and <code>vmis_</code> just the maximum.
Let's plot the maximum von Mises stress as a function of time</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="tim = 0.0:0.05:1.0
vmis_ = []
for t in tim
    vmis = []
    for element in beam_elements
        for ip in get_integration_points(element)
            s11, s22, s33, s12, s23, s31 = ip(&quot;stress&quot;, t)
            push!(vmis, sqrt(1/2*((s11-s22)^2 + (s22-s33)^2 + (s33-s11)^2 + 6*(s12^2+s23^2+s31^2))))
        end
    end
    push!(vmis_, maximum(vmis))
end
plot(tim,vmis_)"><pre>tim <span class="pl-k">=</span> <span class="pl-c1">0.0</span><span class="pl-k">:</span><span class="pl-c1">0.05</span><span class="pl-k">:</span><span class="pl-c1">1.0</span>
vmis_ <span class="pl-k">=</span> []
<span class="pl-k">for</span> t <span class="pl-k">in</span> tim
    vmis <span class="pl-k">=</span> []
    <span class="pl-k">for</span> element <span class="pl-k">in</span> beam_elements
        <span class="pl-k">for</span> ip <span class="pl-k">in</span> <span class="pl-c1">get_integration_points</span>(element)
            s11, s22, s33, s12, s23, s31 <span class="pl-k">=</span> <span class="pl-c1">ip</span>(<span class="pl-s"><span class="pl-pds">"</span>stress<span class="pl-pds">"</span></span>, t)
            <span class="pl-c1">push!</span>(vmis, <span class="pl-c1">sqrt</span>(<span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-c1">2</span><span class="pl-k">*</span>((s11<span class="pl-k">-</span>s22)<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">+</span> (s22<span class="pl-k">-</span>s33)<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">+</span> (s33<span class="pl-k">-</span>s11)<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">+</span> <span class="pl-c1">6</span><span class="pl-k">*</span>(s12<span class="pl-k">^</span><span class="pl-c1">2</span><span class="pl-k">+</span>s23<span class="pl-k">^</span><span class="pl-c1">2</span><span class="pl-k">+</span>s31<span class="pl-k">^</span><span class="pl-c1">2</span>))))
        <span class="pl-k">end</span>
    <span class="pl-k">end</span>
    <span class="pl-c1">push!</span>(vmis_, <span class="pl-c1">maximum</span>(vmis))
<span class="pl-k">end</span>
<span class="pl-c1">plot</span>(tim,vmis_)</pre></div>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="png(&quot;max_vonmises_stress_as_a_function_of_time&quot;)"><pre><span class="pl-c1">png</span>(<span class="pl-s"><span class="pl-pds">"</span>max_vonmises_stress_as_a_function_of_time<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">![max_vonmises_stress_as_a_function_of_time][vonmises]
[vonmises]: <a href="https://raw.githubusercontent.com/JuliaFEM/FEMMaterials.jl/master/notebooks/max_vonmises_stress_as_a_function_of_time.png" rel="nofollow">https://raw.githubusercontent.com/JuliaFEM/FEMMaterials.jl/master/notebooks/max_vonmises_stress_as_a_function_of_time.png</a></p>
<h2 dir="auto"><a id="user-content-the-second-post-processing-step-is-to-collect-displacements" class="anchor" aria-hidden="true" href="#the-second-post-processing-step-is-to-collect-displacements"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>The second post-processing step is to collect displacements</h2>
<p dir="auto">Here as an example node number 96 second degree of freedom displacement is
extracted.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="u2_96 = []
for t in tim
    push!(u2_96, beam(&quot;displacement&quot;, t)[96][2])
end
plot(tim,u2_96)"><pre>u2_96 <span class="pl-k">=</span> []
<span class="pl-k">for</span> t <span class="pl-k">in</span> tim
    <span class="pl-c1">push!</span>(u2_96, <span class="pl-c1">beam</span>(<span class="pl-s"><span class="pl-pds">"</span>displacement<span class="pl-pds">"</span></span>, t)[<span class="pl-c1">96</span>][<span class="pl-c1">2</span>])
<span class="pl-k">end</span>
<span class="pl-c1">plot</span>(tim,u2_96)</pre></div>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="png(&quot;node_96_displacement_as_a_function_of_time&quot;)"><pre><span class="pl-c1">png</span>(<span class="pl-s"><span class="pl-pds">"</span>node_96_displacement_as_a_function_of_time<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">![node_96_displacement_as_a_function_of_time][displacement]
[displacement]: <a href="https://raw.githubusercontent.com/JuliaFEM/FEMMaterials.jl/master/notebooks/node_96_displacement_as_a_function_of_time.png" rel="nofollow">https://raw.githubusercontent.com/JuliaFEM/FEMMaterials.jl/master/notebooks/node_96_displacement_as_a_function_of_time.png</a></p>
<p dir="auto">Page generated at 2019-10-07T16:54:37.559.</p>
<p dir="auto"><em>This page was generated using <a href="https://github.com/fredrikekre/Literate.jl">Literate.jl</a>.</em></p>
</article></div>