<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h2><a id="user-content-pcap-" class="anchor" aria-hidden="true" href="#pcap-"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Pcap <a href="https://travis-ci.org/furface/Pcap.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/d154040e98e8e513c5c27dc2e05422cdd9dde2ec/68747470733a2f2f7472617669732d63692e6f72672f7a7a6e6f702f506361702e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/zznop/Pcap.jl.svg?branch=master" style="max-width:100%;"></a></h2>
<p>Pcap contains libpcap bindings for Julia as well as logic to parse and extract useful data from packet captures</p>
<h3><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Example</h3>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">function</span> <span class="pl-en">display_eth_hdr</span>(ethhdr<span class="pl-k">::</span><span class="pl-c1">EthHdr</span>)
    <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>Ethernet Header<span class="pl-pds">"</span></span>)
    <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>  |- Src Mac  : <span class="pl-v">$(ethhdr<span class="pl-k">.</span>src_mac)</span><span class="pl-pds">"</span></span>)
    <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>  |- Dest Mac : <span class="pl-v">$(ethhdr<span class="pl-k">.</span>dest_mac)</span><span class="pl-pds">"</span></span>)
    <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>  |- Type     : <span class="pl-v">$(ethhdr<span class="pl-k">.</span>ptype)</span><span class="pl-pds">"</span></span>)
<span class="pl-k">end</span> <span class="pl-c"><span class="pl-c">#</span> function display_ip_hdr</span>

<span class="pl-k">function</span> <span class="pl-en">display_ip_hdr</span>(iphdr<span class="pl-k">::</span><span class="pl-c1">IpHdr</span>)
    <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>IP Header<span class="pl-pds">"</span></span>)
    <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>  |- Version         : <span class="pl-v">$(iphdr<span class="pl-k">.</span>version)</span><span class="pl-pds">"</span></span>)
    <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>  |- Length          : <span class="pl-v">$(iphdr<span class="pl-k">.</span>length)</span><span class="pl-pds">"</span></span>)
    <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>  |- Type of Service : <span class="pl-v">$(iphdr<span class="pl-k">.</span>services)</span><span class="pl-pds">"</span></span>)
    <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>  |- Total Length    : <span class="pl-v">$(iphdr<span class="pl-k">.</span>totlen)</span><span class="pl-pds">"</span></span>)
    <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>  |- ID              : <span class="pl-v">$(iphdr<span class="pl-k">.</span>id)</span><span class="pl-pds">"</span></span>)
    <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>  |- TTL             : <span class="pl-v">$(iphdr<span class="pl-k">.</span>ttl)</span><span class="pl-pds">"</span></span>)
    <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>  |- Protocol        : <span class="pl-v">$(iphdr<span class="pl-k">.</span>protocol)</span><span class="pl-pds">"</span></span>)
    <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>  |- Src Ip          : <span class="pl-v">$(iphdr<span class="pl-k">.</span>src_ip)</span><span class="pl-pds">"</span></span>)
    <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>  |- Dest Ip         : <span class="pl-v">$(iphdr<span class="pl-k">.</span>dest_ip)</span><span class="pl-pds">"</span></span>)
    <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>  |- Checksum        : 0x<span class="pl-v">$(<span class="pl-c1">hex</span>(iphdr<span class="pl-k">.</span>checksum,<span class="pl-c1">4</span>))</span><span class="pl-pds">"</span></span>)
<span class="pl-k">end</span> <span class="pl-c"><span class="pl-c">#</span> function display_ip_hdr</span>

<span class="pl-k">function</span> <span class="pl-en">display_udp_hdr</span>(udphdr<span class="pl-k">::</span><span class="pl-c1">UdpHdr</span>)
    <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>UDP Header<span class="pl-pds">"</span></span>)
    <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>  |- Src Port  : <span class="pl-v">$(udphdr<span class="pl-k">.</span>src_port)</span><span class="pl-pds">"</span></span>)
    <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>  |- Dest Port : <span class="pl-v">$(udphdr<span class="pl-k">.</span>dest_port)</span><span class="pl-pds">"</span></span>)
    <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>  |- Length    : <span class="pl-v">$(udphdr<span class="pl-k">.</span>length)</span><span class="pl-pds">"</span></span>)
    <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>  |- Checksum  : 0x<span class="pl-v">$(<span class="pl-c1">hex</span>(udphdr<span class="pl-k">.</span>checksum, <span class="pl-c1">4</span>))</span><span class="pl-pds">"</span></span>)
    <span class="pl-c1">print</span>(<span class="pl-s"><span class="pl-pds">"</span>  |- Data : <span class="pl-pds">"</span></span>)

    n <span class="pl-k">=</span> <span class="pl-c1">0</span>
    <span class="pl-k">for</span> byte <span class="pl-k">=</span> udphdr<span class="pl-k">.</span>data
        <span class="pl-k">if</span> n <span class="pl-k">%</span> <span class="pl-c1">16</span> <span class="pl-k">==</span> <span class="pl-c1">0</span> <span class="pl-k">&amp;&amp;</span> n <span class="pl-k">!=</span> <span class="pl-c1">0</span>
            <span class="pl-c1">print</span>(<span class="pl-s"><span class="pl-pds">"</span><span class="pl-cce">\n</span>            <span class="pl-pds">"</span></span>)
        <span class="pl-k">end</span>
        <span class="pl-c1">print</span>(<span class="pl-s"><span class="pl-pds">"</span><span class="pl-v">$(<span class="pl-c1">hex</span>(byte, <span class="pl-c1">2</span>))</span> <span class="pl-pds">"</span></span>)
        n <span class="pl-k">=</span> n <span class="pl-k">+</span> <span class="pl-c1">1</span>
    <span class="pl-k">end</span>
<span class="pl-k">end</span> <span class="pl-c"><span class="pl-c">#</span> function display_udp_hdr</span>

cap     <span class="pl-k">=</span> <span class="pl-c1">PcapOffline</span>(<span class="pl-s"><span class="pl-pds">"</span>data/dns-query-response.pcap<span class="pl-pds">"</span></span>)
rec     <span class="pl-k">=</span> <span class="pl-c1">pcap_get_record</span>(cap)
layers  <span class="pl-k">=</span> <span class="pl-c1">decode_pkt</span>(rec<span class="pl-k">.</span>payload)

<span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>---------- UDP Packet ----------<span class="pl-cce">\n</span><span class="pl-pds">"</span></span>)
<span class="pl-c1">display_eth_hdr</span>(layers<span class="pl-k">.</span>datalink)
<span class="pl-c1">display_ip_hdr</span>(layers<span class="pl-k">.</span>network)
<span class="pl-k">if</span> (layers<span class="pl-k">.</span>network<span class="pl-k">.</span>protocol <span class="pl-k">==</span> <span class="pl-c1">17</span>)
    <span class="pl-c1">display_udp_hdr</span>(layers<span class="pl-k">.</span>protocol)
<span class="pl-k">end</span>
<span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span><span class="pl-cce">\n\n</span>--------------------------------<span class="pl-cce">\n</span><span class="pl-pds">"</span></span>)</pre></div>
<h3><a id="user-content-output" class="anchor" aria-hidden="true" href="#output"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Output</h3>
<pre><code>---------- UDP Packet ----------

Ethernet Header
  |- Src Mac  : 74:de:2b:08:78:09
  |- Dest Mac : 00:24:fe:b1:8f:dc
  |- Type     : 2048
IP Header
  |- Version         : 4
  |- Length          : 20
  |- Type of Service : 0
  |- Total Length    : 63
  |- ID              : 20831
  |- TTL             : 64
  |- Protocol        : 17
  |- Src Ip          : 192.168.0.51
  |- Dest Ip         : 192.168.0.1
  |- Checksum        : 0x67ca
UDP Header
  |- Src Port  : 34904
  |- Dest Port : 53
  |- Length    : 43
  |- Checksum  : 0xa24a
  |- Data : 56 6d 01 00 00 01 00 00 00 00 00 00 0d 66 65 64
            6f 72 61 70 72 6f 6a 65 63 74 03 6f 72 67 00 00
            01 00 01

--------------------------------
</code></pre>
</article></div>