<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p><a href="https://gitter.im/JuliaFEM/JuliaFEM.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/da2edb525cde1455a622c58c0effc3a90b9a181c/68747470733a2f2f6261646765732e6769747465722e696d2f4a6f696e253230436861742e737667" alt="" data-canonical-src="https://badges.gitter.im/Join%20Chat.svg" style="max-width:100%;"></a>
<a href="https://travis-ci.org/JuliaFEM/FEMBasis.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/d7cafda80cab53012c9a810ad7fc99d55089a9a4/68747470733a2f2f7472617669732d63692e6f72672f4a756c696146454d2f46454d42617369732e6a6c2e7376673f6272616e63683d6d6173746572" alt="" data-canonical-src="https://travis-ci.org/JuliaFEM/FEMBasis.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/JuliaFEM/FEMBasis.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/ca39e90b6ecd9c236c240f0ca1c76f09eb135dba/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f4a756c696146454d2f46454d42617369732e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="" data-canonical-src="https://coveralls.io/repos/github/JuliaFEM/FEMBasis.jl/badge.svg?branch=master" style="max-width:100%;"></a>
<a href="https://juliafem.github.io/FEMBasis.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/f7b92a177c912c1cc007fc9b40f17ff3ee3bb414/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://juliafem.github.io/FEMBasis.jl/latest" rel="nofollow"><img src="https://camo.githubusercontent.com/57bae07ecd50a99519ad0516d91f4ec8f0f48e12/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6c61746573742d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-latest-blue.svg" style="max-width:100%;"></a>
<a href="https://github.com/JuliaFEM/FEMBasis.jl/issues"><img src="https://camo.githubusercontent.com/2466ecf6caf31c3468db4d59b6833e6b2962fdab/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732f4a756c696146454d2f46454d42617369732e6a6c2e737667" alt="" data-canonical-src="https://img.shields.io/github/issues/JuliaFEM/FEMBasis.jl.svg" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/JuliaFEM/fembasis-jl/branch/master" rel="nofollow"><img src="https://camo.githubusercontent.com/f97b94eda62846108710edc09051ca980685f994/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f6c34366d3632336c68616571656335662f6272616e63682f6d61737465723f7376673d74727565" alt="" data-canonical-src="https://ci.appveyor.com/api/projects/status/l46m623lhaeqec5f/branch/master?svg=true" style="max-width:100%;"></a></p>
<p><code>FEMBasis.jl</code> contains interpolation routines for standard finite element
function spaces.  Given ansatz and coordinates of domain, interpolation
functions are calculated  symbolically in a very general way to get efficient
code. As a concrete example, to generate basis functions for a standard 10-node
tetrahedron one can write</p>
<div class="highlight highlight-source-julia"><pre>code <span class="pl-k">=</span> FEMBasis<span class="pl-k">.</span><span class="pl-c1">create_basis</span>(
    <span class="pl-c1">:Tet10</span>,
    <span class="pl-s"><span class="pl-pds">"</span>10 node quadratic tetrahedral element<span class="pl-pds">"</span></span>,
    [
     (<span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>), <span class="pl-c"><span class="pl-c">#</span> N1</span>
     (<span class="pl-c1">1.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>), <span class="pl-c"><span class="pl-c">#</span> N2</span>
     (<span class="pl-c1">0.0</span>, <span class="pl-c1">1.0</span>, <span class="pl-c1">0.0</span>), <span class="pl-c"><span class="pl-c">#</span> N3</span>
     (<span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">1.0</span>), <span class="pl-c"><span class="pl-c">#</span> N4</span>
     (<span class="pl-c1">0.5</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>), <span class="pl-c"><span class="pl-c">#</span> N5</span>
     (<span class="pl-c1">0.5</span>, <span class="pl-c1">0.5</span>, <span class="pl-c1">0.0</span>), <span class="pl-c"><span class="pl-c">#</span> N6</span>
     (<span class="pl-c1">0.0</span>, <span class="pl-c1">0.5</span>, <span class="pl-c1">0.0</span>), <span class="pl-c"><span class="pl-c">#</span> N7</span>
     (<span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">0.5</span>), <span class="pl-c"><span class="pl-c">#</span> N8</span>
     (<span class="pl-c1">0.5</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">0.5</span>), <span class="pl-c"><span class="pl-c">#</span> N9</span>
     (<span class="pl-c1">0.0</span>, <span class="pl-c1">0.5</span>, <span class="pl-c1">0.5</span>), <span class="pl-c"><span class="pl-c">#</span> N10</span>
    ],
    :(<span class="pl-c1">1</span> <span class="pl-k">+</span> u <span class="pl-k">+</span> v <span class="pl-k">+</span> w <span class="pl-k">+</span> u<span class="pl-k">*</span>v <span class="pl-k">+</span> v<span class="pl-k">*</span>w <span class="pl-k">+</span> w<span class="pl-k">*</span>u <span class="pl-k">+</span> u<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">+</span> v<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">+</span> w<span class="pl-k">^</span><span class="pl-c1">2</span>),
   )</pre></div>
<p>The resulting code is</p>
<div class="highlight highlight-source-julia"><pre>    <span class="pl-k">struct</span> Tet10 <span class="pl-k">&lt;:</span> <span class="pl-c1">FEMBasis.AbstractBasis{3}</span>
    <span class="pl-k">end</span>
    Base<span class="pl-k">.</span><span class="pl-c1">@pure</span> <span class="pl-k">function</span> Base<span class="pl-k">.</span><span class="pl-en">size</span>(<span class="pl-k">::</span><span class="pl-c1">Type{Tet10}</span>)
            <span class="pl-k">return</span> (<span class="pl-c1">3</span>, <span class="pl-c1">10</span>)
        <span class="pl-k">end</span>
    <span class="pl-k">function</span> Base<span class="pl-k">.</span><span class="pl-en">size</span>(<span class="pl-k">::</span><span class="pl-c1">Type{Tet10}</span>, j<span class="pl-k">::</span><span class="pl-c1">Int</span>)
        j <span class="pl-k">==</span> <span class="pl-c1">1</span> <span class="pl-k">&amp;&amp;</span> <span class="pl-k">return</span> <span class="pl-c1">3</span>
        j <span class="pl-k">==</span> <span class="pl-c1">2</span> <span class="pl-k">&amp;&amp;</span> <span class="pl-k">return</span> <span class="pl-c1">10</span>
    <span class="pl-k">end</span>
    Base<span class="pl-k">.</span><span class="pl-c1">@pure</span> <span class="pl-k">function</span> Base<span class="pl-k">.</span><span class="pl-en">length</span>(<span class="pl-k">::</span><span class="pl-c1">Type{Tet10}</span>)
            <span class="pl-k">return</span> <span class="pl-c1">10</span>
        <span class="pl-k">end</span>
    <span class="pl-k">function</span> FEMBasis<span class="pl-k">.</span><span class="pl-en">get_reference_element_coordinates</span>(<span class="pl-k">::</span><span class="pl-c1">Type{Tet10}</span>)
        <span class="pl-k">return</span> Tensors<span class="pl-k">.</span>Tensor{<span class="pl-c1">1</span>,<span class="pl-c1">3</span>,Float64,<span class="pl-c1">3</span>}[[<span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>], [<span class="pl-c1">1.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>], [<span class="pl-c1">0.0</span>, <span class="pl-c1">1.0</span>, <span class="pl-c1">0.0</span>], [<span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">1.0</span>], [<span class="pl-c1">0.5</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>], [<span class="pl-c1">0.5</span>, <span class="pl-c1">0.5</span>, <span class="pl-c1">0.0</span>], [<span class="pl-c1">0.0</span>, <span class="pl-c1">0.5</span>, <span class="pl-c1">0.0</span>], [<span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">0.5</span>], [<span class="pl-c1">0.5</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">0.5</span>], [<span class="pl-c1">0.0</span>, <span class="pl-c1">0.5</span>, <span class="pl-c1">0.5</span>]]
    <span class="pl-k">end</span>
    <span class="pl-k">function</span> FEMBasis<span class="pl-k">.</span><span class="pl-en">eval_basis!</span>(<span class="pl-k">::</span><span class="pl-c1">Type{Tet10}</span>, N<span class="pl-k">::</span><span class="pl-c1">Vector{&lt;:Number}</span>, xi<span class="pl-k">::</span><span class="pl-c1">Vec</span>)
        assert <span class="pl-c1">length</span>(N) <span class="pl-k">==</span> <span class="pl-c1">10</span>
        (u, v, w) <span class="pl-k">=</span> xi
        <span class="pl-k">begin</span>
            N[<span class="pl-c1">1</span>] <span class="pl-k">=</span> <span class="pl-c1">1.0</span> <span class="pl-k">+</span> <span class="pl-k">-</span><span class="pl-c1">3.0</span>u <span class="pl-k">+</span> <span class="pl-k">-</span><span class="pl-c1">3.0</span>v <span class="pl-k">+</span> <span class="pl-k">-</span><span class="pl-c1">3.0</span>w <span class="pl-k">+</span> <span class="pl-c1">4.0</span> <span class="pl-k">*</span> (u <span class="pl-k">*</span> v) <span class="pl-k">+</span> <span class="pl-c1">4.0</span> <span class="pl-k">*</span> (v <span class="pl-k">*</span> w) <span class="pl-k">+</span> <span class="pl-c1">4.0</span> <span class="pl-k">*</span> (w <span class="pl-k">*</span> u) <span class="pl-k">+</span> <span class="pl-c1">2.0</span> <span class="pl-k">*</span> u <span class="pl-k">^</span> <span class="pl-c1">2</span> <span class="pl-k">+</span> <span class="pl-c1">2.0</span> <span class="pl-k">*</span> v <span class="pl-k">^</span> <span class="pl-c1">2</span> <span class="pl-k">+</span> <span class="pl-c1">2.0</span> <span class="pl-k">*</span> w <span class="pl-k">^</span> <span class="pl-c1">2</span>
            N[<span class="pl-c1">2</span>] <span class="pl-k">=</span> <span class="pl-k">-</span>u <span class="pl-k">+</span> <span class="pl-c1">2.0</span> <span class="pl-k">*</span> u <span class="pl-k">^</span> <span class="pl-c1">2</span>
            N[<span class="pl-c1">3</span>] <span class="pl-k">=</span> <span class="pl-k">-</span>v <span class="pl-k">+</span> <span class="pl-c1">2.0</span> <span class="pl-k">*</span> v <span class="pl-k">^</span> <span class="pl-c1">2</span>
            N[<span class="pl-c1">4</span>] <span class="pl-k">=</span> <span class="pl-k">-</span>w <span class="pl-k">+</span> <span class="pl-c1">2.0</span> <span class="pl-k">*</span> w <span class="pl-k">^</span> <span class="pl-c1">2</span>
            N[<span class="pl-c1">5</span>] <span class="pl-k">=</span> <span class="pl-c1">4.0</span>u <span class="pl-k">+</span> <span class="pl-k">-</span><span class="pl-c1">4.0</span> <span class="pl-k">*</span> (u <span class="pl-k">*</span> v) <span class="pl-k">+</span> <span class="pl-k">-</span><span class="pl-c1">4.0</span> <span class="pl-k">*</span> (w <span class="pl-k">*</span> u) <span class="pl-k">+</span> <span class="pl-k">-</span><span class="pl-c1">4.0</span> <span class="pl-k">*</span> u <span class="pl-k">^</span> <span class="pl-c1">2</span>
            N[<span class="pl-c1">6</span>] <span class="pl-k">=</span> <span class="pl-k">+</span>(<span class="pl-c1">4.0</span> <span class="pl-k">*</span> (u <span class="pl-k">*</span> v))
            N[<span class="pl-c1">7</span>] <span class="pl-k">=</span> <span class="pl-c1">4.0</span>v <span class="pl-k">+</span> <span class="pl-k">-</span><span class="pl-c1">4.0</span> <span class="pl-k">*</span> (u <span class="pl-k">*</span> v) <span class="pl-k">+</span> <span class="pl-k">-</span><span class="pl-c1">4.0</span> <span class="pl-k">*</span> (v <span class="pl-k">*</span> w) <span class="pl-k">+</span> <span class="pl-k">-</span><span class="pl-c1">4.0</span> <span class="pl-k">*</span> v <span class="pl-k">^</span> <span class="pl-c1">2</span>
            N[<span class="pl-c1">8</span>] <span class="pl-k">=</span> <span class="pl-c1">4.0</span>w <span class="pl-k">+</span> <span class="pl-k">-</span><span class="pl-c1">4.0</span> <span class="pl-k">*</span> (v <span class="pl-k">*</span> w) <span class="pl-k">+</span> <span class="pl-k">-</span><span class="pl-c1">4.0</span> <span class="pl-k">*</span> (w <span class="pl-k">*</span> u) <span class="pl-k">+</span> <span class="pl-k">-</span><span class="pl-c1">4.0</span> <span class="pl-k">*</span> w <span class="pl-k">^</span> <span class="pl-c1">2</span>
            N[<span class="pl-c1">9</span>] <span class="pl-k">=</span> <span class="pl-k">+</span>(<span class="pl-c1">4.0</span> <span class="pl-k">*</span> (w <span class="pl-k">*</span> u))
            N[<span class="pl-c1">10</span>] <span class="pl-k">=</span> <span class="pl-k">+</span>(<span class="pl-c1">4.0</span> <span class="pl-k">*</span> (v <span class="pl-k">*</span> w))
        <span class="pl-k">end</span>
        <span class="pl-k">return</span> N
    <span class="pl-k">end</span>
    <span class="pl-k">function</span> FEMBasis<span class="pl-k">.</span><span class="pl-en">eval_dbasis!</span>(<span class="pl-k">::</span><span class="pl-c1">Type{Tet10}</span>, dN<span class="pl-k">::</span><span class="pl-c1">Vector{&lt;:Vec{3}}</span>, xi<span class="pl-k">::</span><span class="pl-c1">Vec</span>)
        <span class="pl-c1">@assert</span> <span class="pl-c1">length</span>(dN) <span class="pl-k">==</span> <span class="pl-c1">10</span>
        (u, v, w) <span class="pl-k">=</span> xi
        <span class="pl-k">begin</span>
            dN[<span class="pl-c1">1</span>] <span class="pl-k">=</span> <span class="pl-c1">Vec</span>(<span class="pl-k">-</span><span class="pl-c1">3.0</span> <span class="pl-k">+</span> <span class="pl-c1">4.0</span>v <span class="pl-k">+</span> <span class="pl-c1">4.0</span>w <span class="pl-k">+</span> <span class="pl-c1">2.0</span> <span class="pl-k">*</span> (<span class="pl-c1">2</span>u), <span class="pl-k">-</span><span class="pl-c1">3.0</span> <span class="pl-k">+</span> <span class="pl-c1">4.0</span>u <span class="pl-k">+</span> <span class="pl-c1">4.0</span>w <span class="pl-k">+</span> <span class="pl-c1">2.0</span> <span class="pl-k">*</span> (<span class="pl-c1">2</span>v), <span class="pl-k">-</span><span class="pl-c1">3.0</span> <span class="pl-k">+</span> <span class="pl-c1">4.0</span>v <span class="pl-k">+</span> <span class="pl-c1">4.0</span>u <span class="pl-k">+</span> <span class="pl-c1">2.0</span> <span class="pl-k">*</span> (<span class="pl-c1">2</span>w))
            dN[<span class="pl-c1">2</span>] <span class="pl-k">=</span> <span class="pl-c1">Vec</span>(<span class="pl-k">-</span><span class="pl-c1">1</span> <span class="pl-k">+</span> <span class="pl-c1">2.0</span> <span class="pl-k">*</span> (<span class="pl-c1">2</span>u), <span class="pl-c1">0</span>, <span class="pl-c1">0</span>)
            dN[<span class="pl-c1">3</span>] <span class="pl-k">=</span> <span class="pl-c1">Vec</span>(<span class="pl-c1">0</span>, <span class="pl-k">-</span><span class="pl-c1">1</span> <span class="pl-k">+</span> <span class="pl-c1">2.0</span> <span class="pl-k">*</span> (<span class="pl-c1">2</span>v), <span class="pl-c1">0</span>)
            dN[<span class="pl-c1">4</span>] <span class="pl-k">=</span> <span class="pl-c1">Vec</span>(<span class="pl-c1">0</span>, <span class="pl-c1">0</span>, <span class="pl-k">-</span><span class="pl-c1">1</span> <span class="pl-k">+</span> <span class="pl-c1">2.0</span> <span class="pl-k">*</span> (<span class="pl-c1">2</span>w))
            dN[<span class="pl-c1">5</span>] <span class="pl-k">=</span> <span class="pl-c1">Vec</span>(<span class="pl-c1">4.0</span> <span class="pl-k">+</span> <span class="pl-k">-</span><span class="pl-c1">4.0</span>v <span class="pl-k">+</span> <span class="pl-k">-</span><span class="pl-c1">4.0</span>w <span class="pl-k">+</span> <span class="pl-k">-</span><span class="pl-c1">4.0</span> <span class="pl-k">*</span> (<span class="pl-c1">2</span>u), <span class="pl-k">-</span><span class="pl-c1">4.0</span>u, <span class="pl-k">-</span><span class="pl-c1">4.0</span>u)
            dN[<span class="pl-c1">6</span>] <span class="pl-k">=</span> <span class="pl-c1">Vec</span>(<span class="pl-c1">4.0</span>v, <span class="pl-c1">4.0</span>u, <span class="pl-c1">0</span>)
            dN[<span class="pl-c1">7</span>] <span class="pl-k">=</span> <span class="pl-c1">Vec</span>(<span class="pl-k">-</span><span class="pl-c1">4.0</span>v, <span class="pl-c1">4.0</span> <span class="pl-k">+</span> <span class="pl-k">-</span><span class="pl-c1">4.0</span>u <span class="pl-k">+</span> <span class="pl-k">-</span><span class="pl-c1">4.0</span>w <span class="pl-k">+</span> <span class="pl-k">-</span><span class="pl-c1">4.0</span> <span class="pl-k">*</span> (<span class="pl-c1">2</span>v), <span class="pl-k">-</span><span class="pl-c1">4.0</span>v)
            dN[<span class="pl-c1">8</span>] <span class="pl-k">=</span> <span class="pl-c1">Vec</span>(<span class="pl-k">-</span><span class="pl-c1">4.0</span>w, <span class="pl-k">-</span><span class="pl-c1">4.0</span>w, <span class="pl-c1">4.0</span> <span class="pl-k">+</span> <span class="pl-k">-</span><span class="pl-c1">4.0</span>v <span class="pl-k">+</span> <span class="pl-k">-</span><span class="pl-c1">4.0</span>u <span class="pl-k">+</span> <span class="pl-k">-</span><span class="pl-c1">4.0</span> <span class="pl-k">*</span> (<span class="pl-c1">2</span>w))
            dN[<span class="pl-c1">9</span>] <span class="pl-k">=</span> <span class="pl-c1">Vec</span>(<span class="pl-c1">4.0</span>w, <span class="pl-c1">0</span>, <span class="pl-c1">4.0</span>u)
            dN[<span class="pl-c1">10</span>] <span class="pl-k">=</span> <span class="pl-c1">Vec</span>(<span class="pl-c1">0</span>, <span class="pl-c1">4.0</span>w, <span class="pl-c1">4.0</span>v)
        <span class="pl-k">end</span>
        <span class="pl-k">return</span> dN
    <span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>
<p>Also more unusual elements can be defined. For example, pyramid element cannot be
descibed with ansatz, but it's still possible to implement by defining shape functions,
<code>Calculus.jl</code> is taking care of defining partial derivatives of function:</p>
<div class="highlight highlight-source-julia"><pre>code <span class="pl-k">=</span> FEMBasis<span class="pl-k">.</span><span class="pl-c1">create_basis</span>(
    <span class="pl-c1">:Pyr5</span>,
    <span class="pl-s"><span class="pl-pds">"</span>5 node linear pyramid element<span class="pl-pds">"</span></span>,
    [
     (<span class="pl-k">-</span><span class="pl-c1">1.0</span>, <span class="pl-k">-</span><span class="pl-c1">1.0</span>, <span class="pl-k">-</span><span class="pl-c1">1.0</span>), <span class="pl-c"><span class="pl-c">#</span> N1</span>
     ( <span class="pl-c1">1.0</span>, <span class="pl-k">-</span><span class="pl-c1">1.0</span>, <span class="pl-k">-</span><span class="pl-c1">1.0</span>), <span class="pl-c"><span class="pl-c">#</span> N2</span>
     ( <span class="pl-c1">1.0</span>,  <span class="pl-c1">1.0</span>, <span class="pl-k">-</span><span class="pl-c1">1.0</span>), <span class="pl-c"><span class="pl-c">#</span> N3</span>
     (<span class="pl-k">-</span><span class="pl-c1">1.0</span>,  <span class="pl-c1">1.0</span>, <span class="pl-k">-</span><span class="pl-c1">1.0</span>), <span class="pl-c"><span class="pl-c">#</span> N4</span>
     ( <span class="pl-c1">0.0</span>,  <span class="pl-c1">0.0</span>,  <span class="pl-c1">1.0</span>), <span class="pl-c"><span class="pl-c">#</span> N5</span>
    ],
    [
     :(<span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-c1">8</span> <span class="pl-k">*</span> (<span class="pl-c1">1</span><span class="pl-k">-</span>u) <span class="pl-k">*</span> (<span class="pl-c1">1</span><span class="pl-k">-</span>v) <span class="pl-k">*</span> (<span class="pl-c1">1</span><span class="pl-k">-</span>w)),
     :(<span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-c1">8</span> <span class="pl-k">*</span> (<span class="pl-c1">1</span><span class="pl-k">+</span>u) <span class="pl-k">*</span> (<span class="pl-c1">1</span><span class="pl-k">-</span>v) <span class="pl-k">*</span> (<span class="pl-c1">1</span><span class="pl-k">-</span>w)),
     :(<span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-c1">8</span> <span class="pl-k">*</span> (<span class="pl-c1">1</span><span class="pl-k">+</span>u) <span class="pl-k">*</span> (<span class="pl-c1">1</span><span class="pl-k">+</span>v) <span class="pl-k">*</span> (<span class="pl-c1">1</span><span class="pl-k">-</span>w)),
     :(<span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-c1">8</span> <span class="pl-k">*</span> (<span class="pl-c1">1</span><span class="pl-k">-</span>u) <span class="pl-k">*</span> (<span class="pl-c1">1</span><span class="pl-k">+</span>v) <span class="pl-k">*</span> (<span class="pl-c1">1</span><span class="pl-k">-</span>w)),
     :(<span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-c1">2</span> <span class="pl-k">*</span> (<span class="pl-c1">1</span><span class="pl-k">+</span>w)),
    ],
   )
<span class="pl-c1">eval</span>(code)</pre></div>
<p>Basis function can have internal variables if needed, e.g. variable dof basis like
hierarchical basis functions or NURBS.</p>
<p>It's also possible to do some very common FEM calculations, like calculate Jacobian
or gradient of some variable with respect to some coordinates. For example, to
calculate displacement gradient du/dX in unit square [0,1]^2, one could write:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> Tensors
B <span class="pl-k">=</span> <span class="pl-c1">Quad4</span>()
X <span class="pl-k">=</span> <span class="pl-c1">Vec</span>.([(<span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>), (<span class="pl-c1">1.0</span>, <span class="pl-c1">0.0</span>), (<span class="pl-c1">1.0</span>, <span class="pl-c1">1.0</span>), (<span class="pl-c1">0.0</span>, <span class="pl-c1">1.0</span>)])
u <span class="pl-k">=</span> <span class="pl-c1">Vec</span>.([(<span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>), (<span class="pl-c1">1.0</span>, <span class="pl-k">-</span><span class="pl-c1">1.0</span>), (<span class="pl-c1">2.0</span>, <span class="pl-c1">3.0</span>), (<span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>)])
<span class="pl-c1">grad</span>(B, u, X, <span class="pl-c1">Vec</span>(<span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>))</pre></div>
<p>Result is</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">2</span> Tensors<span class="pl-k">.</span>Tensor{<span class="pl-c1">2</span>,<span class="pl-c1">2</span>,Float64,<span class="pl-c1">4</span>}<span class="pl-k">:</span>
 <span class="pl-c1">1.5</span>  <span class="pl-c1">0.5</span>
 <span class="pl-c1">1.0</span>  <span class="pl-c1">2.0</span></pre></div>
</article></div>