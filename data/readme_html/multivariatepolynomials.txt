<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-multivariate-polynomials" class="anchor" aria-hidden="true" href="#multivariate-polynomials"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Multivariate Polynomials</h1>
<table>
<thead>
<tr>
<th align="center"><strong>Documentation</strong></th>
<th align="center"><strong>Build Status</strong></th>
<th align="center"><strong>Social</strong></th>
<th align="center"><strong>References to cite</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><a href="https://JuliaAlgebra.github.io/MultivariatePolynomials.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a></td>
<td align="center"><a href="https://github.com/JuliaAlgebra/MultivariatePolynomials.jl/actions?query=workflow%3ACI"><img src="https://github.com/JuliaAlgebra/MultivariatePolynomials.jl/workflows/CI/badge.svg?branch=master" alt="Build Status" style="max-width: 100%;"></a></td>
<td align="center"><a href="https://gitter.im/JuliaAlgebra/Lobby?utm_source=share-link&amp;utm_medium=link&amp;utm_campaign=share-link" rel="nofollow"><img src="https://camo.githubusercontent.com/9a91237a295f1f822ba1da91944912c47fac1175965a26834ccaf984bf1e6dc6/68747470733a2f2f6261646765732e6769747465722e696d2f4a756c6961416c67656272612f4c6f6262792e737667" alt="Gitter" data-canonical-src="https://badges.gitter.im/JuliaAlgebra/Lobby.svg" style="max-width: 100%;"></a></td>
<td align="center"><a href="https://zenodo.org/badge/latestdoi/72210778" rel="nofollow"><img src="https://camo.githubusercontent.com/685fd61b51108a2c832d8e08a54f0bda8e965c8da72f9aacb6a705bb92b7a013/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f37323231303737382e737667" alt="DOI" data-canonical-src="https://zenodo.org/badge/72210778.svg" style="max-width: 100%;"></a></td>
</tr>
<tr>
<td align="center"><a href="https://juliaalgebra.github.io/MultivariatePolynomials.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/56f8252ba8e9d3f0b810769543f77823d2fe031ce560d4c2d69fb1fcad800383/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6c61746573742d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-latest-blue.svg" style="max-width: 100%;"></a></td>
<td align="center"><a href="http://codecov.io/github/JuliaAlgebra/MultivariatePolynomials.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/2929f10122450c8abf10aef7cd24ccee2d6f1e2d2f51248292194da6444598ad/687474703a2f2f636f6465636f762e696f2f6769746875622f4a756c6961416c67656272612f4d756c746976617269617465506f6c796e6f6d69616c732e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="Codecov branch" data-canonical-src="http://codecov.io/github/JuliaAlgebra/MultivariatePolynomials.jl/coverage.svg?branch=master" style="max-width: 100%;"></a></td>
<td align="center"><a href="https://discourse.julialang.org/c/domain/opt" rel="nofollow"><img src="https://camo.githubusercontent.com/f8462892b313c50a43156c23b37fd7e732af7b406ad01b816528b3d2dc776d48/68747470733a2f2f75706c6f61642e77696b696d656469612e6f72672f77696b6970656469612f636f6d6d6f6e732f7468756d622f612f61662f446973636f757273655f6c6f676f2e706e672f37393970782d446973636f757273655f6c6f676f2e706e67" width="64" data-canonical-src="https://upload.wikimedia.org/wikipedia/commons/thumb/a/af/Discourse_logo.png/799px-Discourse_logo.png" style="max-width: 100%;"></a></td>
<td align="center"></td>
</tr>
</tbody>
</table>
<p dir="auto"><strong>WARNING</strong> MultivariatePolynomials v0.5 has a few breaking changes including the change in the order of monomials. This means that the leading term will now appear last in the order of monomials instead of first.</p>
<p dir="auto">This package provides an interface for manipulating multivariate polynomials.
Implementing algorithms on polynomials using this interface will allow the algorithm to work for all polynomials implementing the interface.</p>
<p dir="auto">The interface contains functions for accessing the coefficients, monomials, terms of the polynomial, defines arithmetic operations on them, rational functions, division with remainder, calculus/differentiation and evaluation/substitution.</p>
<h2 dir="auto"><a id="user-content-documentation" class="anchor" aria-hidden="true" href="#documentation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Documentation</h2>
<ul dir="auto">
<li><a href="https://JuliaAlgebra.github.io/MultivariatePolynomials.jl/stable" rel="nofollow"><strong>STABLE</strong></a> — <strong>most recently tagged version of the documentation.</strong></li>
<li><a href="https://juliaalgebra.github.io/MultivariatePolynomials.jl/dev" rel="nofollow"><strong>LATEST</strong></a> — <em>in-development version of the documentation.</em></li>
</ul>
<h2 dir="auto"><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Examples</h2>
<p dir="auto">Below is a simple usage example</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using TypedPolynomials
@polyvar x y # assigns x (resp. y) to a variable of name x (resp. y)
p = 2x + 3.0x*y^2 + y
@test differentiate(p, x) # compute the derivative of p with respect to x
@test differentiate.(p, (x, y)) # compute the gradient of p
@test p((x, y)=&gt;(y, x)) # replace any x by y and y by x
@test subs(p, y=&gt;x^2) # replace any occurence of y by x^2
@test p(x=&gt;1, y=&gt;2) # evaluate p at [1, 2]"><pre><span class="pl-k">using</span> TypedPolynomials
<span class="pl-c1">@polyvar</span> x y <span class="pl-c"><span class="pl-c">#</span> assigns x (resp. y) to a variable of name x (resp. y)</span>
p <span class="pl-k">=</span> <span class="pl-c1">2</span>x <span class="pl-k">+</span> <span class="pl-c1">3.0</span>x<span class="pl-k">*</span>y<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">+</span> y
<span class="pl-c1">@test</span> <span class="pl-c1">differentiate</span>(p, x) <span class="pl-c"><span class="pl-c">#</span> compute the derivative of p with respect to x</span>
<span class="pl-c1">@test</span> <span class="pl-c1">differentiate</span>.(p, (x, y)) <span class="pl-c"><span class="pl-c">#</span> compute the gradient of p</span>
<span class="pl-c1">@test</span> <span class="pl-c1">p</span>((x, y)<span class="pl-k">=&gt;</span>(y, x)) <span class="pl-c"><span class="pl-c">#</span> replace any x by y and y by x</span>
<span class="pl-c1">@test</span> <span class="pl-c1">subs</span>(p, y<span class="pl-k">=&gt;</span>x<span class="pl-k">^</span><span class="pl-c1">2</span>) <span class="pl-c"><span class="pl-c">#</span> replace any occurence of y by x^2</span>
<span class="pl-c1">@test</span> <span class="pl-c1">p</span>(x<span class="pl-k">=&gt;</span><span class="pl-c1">1</span>, y<span class="pl-k">=&gt;</span><span class="pl-c1">2</span>) <span class="pl-c"><span class="pl-c">#</span> evaluate p at [1, 2]</span></pre></div>
<p dir="auto">Below is an example with <code>@polyvar x[1:3]</code></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using TypedPolynomials
A = rand(3, 3)
@polyvar x[1:3] # assign x to a tuple of variables x1, x2, x3
p = sum(x .* x) # x_1^2 + x_2^2 + x_3^2
subs(p, x[1]=&gt;2, x[3]=&gt;3) # x_2^2 + 13
p(x=&gt;A*vec(x)) # corresponds to dot(A*x, A*x), need vec to convert the tuple to a vector"><pre><span class="pl-k">using</span> TypedPolynomials
A <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">3</span>, <span class="pl-c1">3</span>)
<span class="pl-c1">@polyvar</span> x[<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">3</span>] <span class="pl-c"><span class="pl-c">#</span> assign x to a tuple of variables x1, x2, x3</span>
p <span class="pl-k">=</span> <span class="pl-c1">sum</span>(x <span class="pl-k">.*</span> x) <span class="pl-c"><span class="pl-c">#</span> x_1^2 + x_2^2 + x_3^2</span>
<span class="pl-c1">subs</span>(p, x[<span class="pl-c1">1</span>]<span class="pl-k">=&gt;</span><span class="pl-c1">2</span>, x[<span class="pl-c1">3</span>]<span class="pl-k">=&gt;</span><span class="pl-c1">3</span>) <span class="pl-c"><span class="pl-c">#</span> x_2^2 + 13</span>
<span class="pl-c1">p</span>(x<span class="pl-k">=&gt;</span>A<span class="pl-k">*</span><span class="pl-c1">vec</span>(x)) <span class="pl-c"><span class="pl-c">#</span> corresponds to dot(A*x, A*x), need vec to convert the tuple to a vector</span></pre></div>
<h2 dir="auto"><a id="user-content-ecosystem" class="anchor" aria-hidden="true" href="#ecosystem"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Ecosystem</h2>
<p dir="auto">The following packages provides multivariate polynomials that implement the interface:</p>
<ul dir="auto">
<li><a href="https://github.com/rdeits/TypedPolynomials.jl">TypedPolynomials</a> : Commutative polynomials of arbitrary coefficient types</li>
<li><a href="https://github.com/JuliaAlgebra/DynamicPolynomials.jl">DynamicPolynomials</a> : Commutative and non-commutative polynomials of arbitrary coefficient types</li>
</ul>
<p dir="auto">The following packages extend/use the interface:</p>
<ul dir="auto">
<li><a href="https://github.com/JuliaAlgebra/SemialgebraicSets.jl">SemialgebraicSets</a> : Sets defined by inequalities and equalities between polynomials and algorithms for solving polynomial systems of equations.</li>
<li><a href="https://github.com/JuliaAlgebra/FixedPolynomials.jl">FixedPolynomials</a> : Fast evaluation of multivariate polynomials</li>
<li><a href="https://github.com/saschatimme/HomotopyContinuation.jl">HomotopyContinuation</a> : Solving systems of polynomials via homotopy continuation.</li>
<li><a href="https://github.com/JuliaAlgebra/MultivariateBases.jl/">MultivariateBases</a> : Standardized API for multivariate polynomial bases.</li>
<li><a href="https://github.com/JuliaAlgebra/MultivariateMoments.jl">MultivariateMoments</a> : Moments of multivariate measures and their scalar product with polynomials.</li>
<li><a href="https://github.com/JuliaOpt/PolyJuMP.jl">PolyJuMP</a> : A <a href="https://github.com/JuliaOpt/JuMP.jl">JuMP</a> extension for Polynomial Optimization.</li>
<li><a href="https://github.com/JuliaOpt/SumOfSquares.jl">SumOfSquares</a> : Certifying the nonnegativity of polynomials, minimizing/maximizing polynomials and optimization over sum of squares polynomials using Sum of Squares Programming.</li>
</ul>
<h3 dir="auto"><a id="user-content-see-also" class="anchor" aria-hidden="true" href="#see-also"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>See also</h3>
<ul dir="auto">
<li><a href="https://github.com/wbhart/Nemo.jl">Nemo</a> for generic polynomial rings, matrix spaces, fraction fields, residue rings, power series</li>
<li><a href="https://github.com/Keno/Polynomials.jl">Polynomials</a> for univariate polynomials</li>
<li><a href="https://github.com/giordano/PolynomialRoots.jl">PolynomialRoots</a> for a fast complex polynomial root finder</li>
</ul>
</article></div>