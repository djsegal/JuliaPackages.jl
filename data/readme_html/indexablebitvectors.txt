<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-indexablebitvectors" class="anchor" aria-hidden="true" href="#indexablebitvectors"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>IndexableBitVectors</h1>
<p dir="auto"><a href="https://travis-ci.org/BioJulia/IndexableBitVectors.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/cb35e2f9d7a73214a6130f883d5c3b0e24a4fcf185e552641a54f58f987c37f9/68747470733a2f2f7472617669732d63692e6f72672f42696f4a756c69612f496e64657861626c65426974566563746f72732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/BioJulia/IndexableBitVectors.jl.svg?branch=master" style="max-width: 100%;"></a>
<a href="http://pkg.julialang.org/?pkg=IndexableBitVectors&amp;ver=0.4" rel="nofollow"><img src="https://camo.githubusercontent.com/a0dc942e59826486bb45612e9537dc4641bca7255db9c3643f7347e8bf027549/687474703a2f2f706b672e6a756c69616c616e672e6f72672f6261646765732f496e64657861626c65426974566563746f72735f302e342e737667" alt="IndexableBitVectors.jl" data-canonical-src="http://pkg.julialang.org/badges/IndexableBitVectors_0.4.svg" style="max-width: 100%;"></a></p>
<p dir="auto">This package exports following operations over bit vectors with extremely fast
speed while keeping extra memory usage small:</p>
<ul dir="auto">
<li><code>getindex(bv::IndexableBitVectors, i::Integer)</code>: <code>i</code>-th element of <code>bv</code></li>
<li><code>rank(b::Bool, bv::AbstractIndexableBitVector, i::Integer)</code>: the number of occurrences of bit <code>b</code> in <code>bv[1:i]</code></li>
<li><code>select(b::Bool, bv::AbstractIndexableBitVector, i::Integer)</code>: the index of <code>i</code>-th occurrence of <code>b</code> in <code>bv</code>.</li>
</ul>
<p dir="auto">And other shortcuts:</p>
<ul dir="auto">
<li><code>rank0(bv, i)</code> = <code>rank(false, bv, i)</code></li>
<li><code>rank1(bv, i)</code> = <code>rank(true,  bv, i)</code></li>
<li><code>select0(bv, i)</code> = <code>select(0, bv, i)</code></li>
<li><code>select1(bv, i)</code> = <code>select(1, bv, i)</code></li>
</ul>
<p dir="auto">The following two types are exported:</p>
<ul dir="auto">
<li><code>SucVector</code>: rank values are precomputed in blocks.</li>
<li><code>RRR</code>: compressible indexable bit vector.</li>
</ul>
<p dir="auto">In general, queries on <code>SucVector</code> is faster than those on <code>RRR</code>, but <code>RRR</code> is compressible.</p>
<p dir="auto">Conversions from bit vectors are defined for these types. So you just pass a bit vector to them:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; using IndexableBitVectors

julia&gt; SucVector(bitrand(10))
10-element IndexableBitVectors.SucVector:
 false
 false
 false
 false
  true
  true
 false
 false
 false
  true

julia&gt; RRR(bitrand(10))
10-element IndexableBitVectors.RRR:
 false
 false
 false
 false
  true
 false
 false
 false
  true
 false
"><pre class="notranslate"><code>julia&gt; using IndexableBitVectors

julia&gt; SucVector(bitrand(10))
10-element IndexableBitVectors.SucVector:
 false
 false
 false
 false
  true
  true
 false
 false
 false
  true

julia&gt; RRR(bitrand(10))
10-element IndexableBitVectors.RRR:
 false
 false
 false
 false
  true
 false
 false
 false
  true
 false

</code></pre></div>
<h2 dir="auto"><a id="user-content-benchmarks" class="anchor" aria-hidden="true" href="#benchmarks"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Benchmarks:</h2>
<p dir="auto">The script and result of benchmarks can be found in the <a href="./benchmarks">benchmarks</a>
directory. Plots are in a Jupyter notebook: <a href="./benchmarks/plot.ipynb">benchmarks/plot.ipynb</a>.</p>
</article></div>