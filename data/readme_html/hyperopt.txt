<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-hyperopt" class="anchor" aria-hidden="true" href="#hyperopt"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Hyperopt</h1>
<p><a href="https://github.com/baggepinnen/Hyperopt.jl/actions"><img src="https://github.com/baggepinnen/Hyperopt.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width:100%;"></a>
<a href="http://codecov.io/github/baggepinnen/Hyperopt.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/89774dcb9b396ed733b45d8f93ffcea1fdd379c3b5e3a1b539dac802fa7322ec/687474703a2f2f636f6465636f762e696f2f6769746875622f626167676570696e6e656e2f48797065726f70742e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/baggepinnen/Hyperopt.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
<p>A package to perform hyperparameter optimization. Currently supports random search, <a href="https://en.wikipedia.org/wiki/Latin_hypercube_sampling" rel="nofollow">latin hypercube sampling</a> and <a href="https://arxiv.org/abs/1807.02811" rel="nofollow">Bayesian optimization</a>.</p>
<h1><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h1>
<p>This package was designed to facilitate the addition of optimization logic to already existing code. I usually write some code and try a few hyper parameters by hand before I realize I have to take a more structured approach to finding good hyper parameters. I therefore designed this package such that the optimization logic is wrapped around existing code, and the user only has to specify which variables to optimize and candidate values (ranges) for these variables.</p>
<h2><a id="user-content-high-level-example" class="anchor" aria-hidden="true" href="#high-level-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>High-level example</h2>
<p>In order to add hyper-parameter optimization to the existing pseudo code</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="a = manually_selected_value
b = other_value
cost = train_model(a,b)
"><pre>a <span class="pl-k">=</span> manually_selected_value
b <span class="pl-k">=</span> other_value
cost <span class="pl-k">=</span> <span class="pl-c1">train_model</span>(a,b)</pre></div>
<p>we wrap it in <code>@hyperopt</code> like this</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="ho = @hyperopt for i = number_of_samples,
                   a = candidate_values,
                   b = other_candidate_values,
cost = train_model(a,b)
end
"><pre>ho <span class="pl-k">=</span> <span class="pl-c1">@hyperopt</span> <span class="pl-k">for</span> i <span class="pl-k">=</span> number_of_samples,
                   a <span class="pl-k">=</span> candidate_values,
                   b <span class="pl-k">=</span> other_candidate_values,
cost <span class="pl-k">=</span> <span class="pl-c1">train_model</span>(a,b)
<span class="pl-k">end</span></pre></div>
<h2><a id="user-content-details" class="anchor" aria-hidden="true" href="#details"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Details</h2>
<ol>
<li>The macro <code>@hyperopt</code> takes a for-loop with an initial argument determining the number of samples to draw (<code>i</code> below).</li>
<li>The sample strategy can be specified by specifying the special keyword <code>sampler = Sampler(opts...)</code>. Available options are <code>RandomSampler()</code>, <code>LHSampler()</code>, <code>CLHSampler(dims=[Continuous(), Categorical(2), Continuous(), ...])</code>, <code>Hyperband(R=50, η=3, inner=RandomSampler())</code> and <code>GPSampler(Min)/GPSampler(Max)</code>.</li>
<li>The subsequent arguments to the for-loop specifies names and candidate values for different hyper parameters (<code>a = LinRange(1,2,1000), b = [true, false], c = exp10.(LinRange(-1,3,1000))</code> below).</li>
<li>A useful strategy to achieve log-uniform sampling is logarithmically spaced vector, e.g. <code>c = exp10.(LinRange(-1,3,1000))</code>.</li>
<li>In the example below, the parameters <code>i,a,b,c</code> can be used within the expression sent to the macro and they will hold a new value sampled from the corresponding candidate vector each iteration.</li>
</ol>
<p>The resulting object <code>ho::Hyperoptimizer</code> holds all the sampled parameters and function values and has <code>minimum/minimizer</code> and <code>maximum/maximizer</code> properties (e.g., <code>ho.minimizer</code>). It can also be plotted using <code>plot(ho)</code> (uses <code>Plots.jl</code>). The exact syntax to use for various samplers is shown in the <a href="https://github.com/baggepinnen/Hyperopt.jl/blob/master/test/runtests.jl">testfile</a>, which should be fairly readable.</p>
<h2><a id="user-content-full-example" class="anchor" aria-hidden="true" href="#full-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Full example</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Hyperopt

f(x,a,b=true;c=10) = sum(@. x + (a-3)^2 + (b ? 10 : 20) + (c-100)^2) # Function to minimize

# Main macro. The first argument to the for loop is always interpreted as the number of iterations
ho = @hyperopt for i=50,
            sampler = RandomSampler(), # This is default if none provided
            a = LinRange(1,5,1000),
            b = [true, false],
            c = exp10.(LinRange(-1,3,1000))
   print(i, &quot;\t&quot;, a, &quot;\t&quot;, b, &quot;\t&quot;, c, &quot;   \t&quot;)
   x = 100
   @show f(x,a,b,c=c)
end
1   3.910910910910911   false   0.15282140360258697     f(x, a, b, c=c) = 10090.288832348499
2   3.930930930930931   true    6.1629662551329405      f(x, a, b, c=c) = 8916.255534433481
3   2.7617617617617616  true    146.94918006248173      f(x, a, b, c=c) = 2314.282265997491
4   3.6666666666666665  false   0.3165924111983522      f(x, a, b, c=c) = 10057.226192959602
5   4.783783783783784   true    34.55719936762139       f(x, a, b, c=c) = 4395.942039196544
6   2.5895895895895897  true    4.985373463873895       f(x, a, b, c=c) = 9137.947692504491
7   1.6206206206206206  false   301.6334347259197       f(x, a, b, c=c) = 40777.94468684398
8   1.012012012012012   true    33.00034791125285       f(x, a, b, c=c) = 4602.905476253546
9   3.3583583583583585  true    193.7703337477989       f(x, a, b, c=c) = 8903.003911886599
10  4.903903903903904   true    144.26439512181574      f(x, a, b, c=c) = 2072.9615255755252
11  2.2332332332332334  false   119.97177354358843      f(x, a, b, c=c) = 519.4596697509966
12  2.369369369369369   false   117.77987011971193      f(x, a, b, c=c) = 436.52147646611473
13  3.2182182182182184  false   105.44427935261685      f(x, a, b, c=c) = 149.68779686009242
⋮

Hyperopt.Hyperoptimizer
  iterations: Int64 50
  params: Tuple{Symbol,Symbol,Symbol}
  candidates: Array{AbstractArray{T,1} where T}((3,))
  history: Array{Any}((50,))
  results: Array{Any}((50,))
  sampler: Hyperopt.RandomSampler


julia&gt; best_params, min_f = ho.minimizer, ho.minimum
(Real[1.62062, true, 100.694], 112.38413353985818)

julia&gt; printmin(ho)
a = 1.62062
b = true
c = 100.694
"><pre><span class="pl-k">using</span> Hyperopt

<span class="pl-en">f</span>(x,a,b<span class="pl-k">=</span><span class="pl-c1">true</span>;c<span class="pl-k">=</span><span class="pl-c1">10</span>) <span class="pl-k">=</span> <span class="pl-c1">sum</span>(<span class="pl-c1">@.</span> x <span class="pl-k">+</span> (a<span class="pl-k">-</span><span class="pl-c1">3</span>)<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">+</span> (b <span class="pl-k">?</span> <span class="pl-c1">10</span> <span class="pl-k">:</span> <span class="pl-c1">20</span>) <span class="pl-k">+</span> (c<span class="pl-k">-</span><span class="pl-c1">100</span>)<span class="pl-k">^</span><span class="pl-c1">2</span>) <span class="pl-c"><span class="pl-c">#</span> Function to minimize</span>

<span class="pl-c"><span class="pl-c">#</span> Main macro. The first argument to the for loop is always interpreted as the number of iterations</span>
ho <span class="pl-k">=</span> <span class="pl-c1">@hyperopt</span> <span class="pl-k">for</span> i<span class="pl-k">=</span><span class="pl-c1">50</span>,
            sampler <span class="pl-k">=</span> <span class="pl-c1">RandomSampler</span>(), <span class="pl-c"><span class="pl-c">#</span> This is default if none provided</span>
            a <span class="pl-k">=</span> <span class="pl-c1">LinRange</span>(<span class="pl-c1">1</span>,<span class="pl-c1">5</span>,<span class="pl-c1">1000</span>),
            b <span class="pl-k">=</span> [<span class="pl-c1">true</span>, <span class="pl-c1">false</span>],
            c <span class="pl-k">=</span> <span class="pl-c1">exp10</span>.(<span class="pl-c1">LinRange</span>(<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">3</span>,<span class="pl-c1">1000</span>))
   <span class="pl-c1">print</span>(i, <span class="pl-s"><span class="pl-pds">"</span><span class="pl-cce">\t</span><span class="pl-pds">"</span></span>, a, <span class="pl-s"><span class="pl-pds">"</span><span class="pl-cce">\t</span><span class="pl-pds">"</span></span>, b, <span class="pl-s"><span class="pl-pds">"</span><span class="pl-cce">\t</span><span class="pl-pds">"</span></span>, c, <span class="pl-s"><span class="pl-pds">"</span>   <span class="pl-cce">\t</span><span class="pl-pds">"</span></span>)
   x <span class="pl-k">=</span> <span class="pl-c1">100</span>
   <span class="pl-c1">@show</span> <span class="pl-c1">f</span>(x,a,b,c<span class="pl-k">=</span>c)
<span class="pl-k">end</span>
<span class="pl-c1">1</span>   <span class="pl-c1">3.910910910910911</span>   <span class="pl-c1">false</span>   <span class="pl-c1">0.15282140360258697</span>     <span class="pl-en">f</span>(x, a, b, c<span class="pl-k">=</span>c) <span class="pl-k">=</span> <span class="pl-c1">10090.288832348499</span>
<span class="pl-c1">2</span>   <span class="pl-c1">3.930930930930931</span>   <span class="pl-c1">true</span>    <span class="pl-c1">6.1629662551329405</span>      <span class="pl-en">f</span>(x, a, b, c<span class="pl-k">=</span>c) <span class="pl-k">=</span> <span class="pl-c1">8916.255534433481</span>
<span class="pl-c1">3</span>   <span class="pl-c1">2.7617617617617616</span>  <span class="pl-c1">true</span>    <span class="pl-c1">146.94918006248173</span>      <span class="pl-en">f</span>(x, a, b, c<span class="pl-k">=</span>c) <span class="pl-k">=</span> <span class="pl-c1">2314.282265997491</span>
<span class="pl-c1">4</span>   <span class="pl-c1">3.6666666666666665</span>  <span class="pl-c1">false</span>   <span class="pl-c1">0.3165924111983522</span>      <span class="pl-en">f</span>(x, a, b, c<span class="pl-k">=</span>c) <span class="pl-k">=</span> <span class="pl-c1">10057.226192959602</span>
<span class="pl-c1">5</span>   <span class="pl-c1">4.783783783783784</span>   <span class="pl-c1">true</span>    <span class="pl-c1">34.55719936762139</span>       <span class="pl-en">f</span>(x, a, b, c<span class="pl-k">=</span>c) <span class="pl-k">=</span> <span class="pl-c1">4395.942039196544</span>
<span class="pl-c1">6</span>   <span class="pl-c1">2.5895895895895897</span>  <span class="pl-c1">true</span>    <span class="pl-c1">4.985373463873895</span>       <span class="pl-en">f</span>(x, a, b, c<span class="pl-k">=</span>c) <span class="pl-k">=</span> <span class="pl-c1">9137.947692504491</span>
<span class="pl-c1">7</span>   <span class="pl-c1">1.6206206206206206</span>  <span class="pl-c1">false</span>   <span class="pl-c1">301.6334347259197</span>       <span class="pl-en">f</span>(x, a, b, c<span class="pl-k">=</span>c) <span class="pl-k">=</span> <span class="pl-c1">40777.94468684398</span>
<span class="pl-c1">8</span>   <span class="pl-c1">1.012012012012012</span>   <span class="pl-c1">true</span>    <span class="pl-c1">33.00034791125285</span>       <span class="pl-en">f</span>(x, a, b, c<span class="pl-k">=</span>c) <span class="pl-k">=</span> <span class="pl-c1">4602.905476253546</span>
<span class="pl-c1">9</span>   <span class="pl-c1">3.3583583583583585</span>  <span class="pl-c1">true</span>    <span class="pl-c1">193.7703337477989</span>       <span class="pl-en">f</span>(x, a, b, c<span class="pl-k">=</span>c) <span class="pl-k">=</span> <span class="pl-c1">8903.003911886599</span>
<span class="pl-c1">10</span>  <span class="pl-c1">4.903903903903904</span>   <span class="pl-c1">true</span>    <span class="pl-c1">144.26439512181574</span>      <span class="pl-en">f</span>(x, a, b, c<span class="pl-k">=</span>c) <span class="pl-k">=</span> <span class="pl-c1">2072.9615255755252</span>
<span class="pl-c1">11</span>  <span class="pl-c1">2.2332332332332334</span>  <span class="pl-c1">false</span>   <span class="pl-c1">119.97177354358843</span>      <span class="pl-en">f</span>(x, a, b, c<span class="pl-k">=</span>c) <span class="pl-k">=</span> <span class="pl-c1">519.4596697509966</span>
<span class="pl-c1">12</span>  <span class="pl-c1">2.369369369369369</span>   <span class="pl-c1">false</span>   <span class="pl-c1">117.77987011971193</span>      <span class="pl-en">f</span>(x, a, b, c<span class="pl-k">=</span>c) <span class="pl-k">=</span> <span class="pl-c1">436.52147646611473</span>
<span class="pl-c1">13</span>  <span class="pl-c1">3.2182182182182184</span>  <span class="pl-c1">false</span>   <span class="pl-c1">105.44427935261685</span>      <span class="pl-en">f</span>(x, a, b, c<span class="pl-k">=</span>c) <span class="pl-k">=</span> <span class="pl-c1">149.68779686009242</span>
⋮

Hyperopt<span class="pl-k">.</span>Hyperoptimizer
  iterations<span class="pl-k">:</span> Int64 <span class="pl-c1">50</span>
  params<span class="pl-k">:</span> Tuple{Symbol,Symbol,Symbol}
  candidates<span class="pl-k">:</span> <span class="pl-c1">Array</span><span class="pl-c1">{AbstractArray{T,1} where T}</span>((<span class="pl-c1">3</span>,))
  history<span class="pl-k">:</span> <span class="pl-c1">Array</span><span class="pl-c1">{Any}</span>((<span class="pl-c1">50</span>,))
  results<span class="pl-k">:</span> <span class="pl-c1">Array</span><span class="pl-c1">{Any}</span>((<span class="pl-c1">50</span>,))
  sampler<span class="pl-k">:</span> Hyperopt<span class="pl-k">.</span>RandomSampler


julia<span class="pl-k">&gt;</span> best_params, min_f <span class="pl-k">=</span> ho<span class="pl-k">.</span>minimizer, ho<span class="pl-k">.</span>minimum
(Real[<span class="pl-c1">1.62062</span>, <span class="pl-c1">true</span>, <span class="pl-c1">100.694</span>], <span class="pl-c1">112.38413353985818</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">printmin</span>(ho)
a <span class="pl-k">=</span> <span class="pl-c1">1.62062</span>
b <span class="pl-k">=</span> <span class="pl-c1">true</span>
c <span class="pl-k">=</span> <span class="pl-c1">100.694</span></pre></div>
<p>We can also visualize the result by plotting the hyperoptimizer</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="plot(ho)
"><pre><code>plot(ho)
</code></pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="figs/ho.svg"><img src="figs/ho.svg" alt="window" style="max-width:100%;"></a></p>
<p>This may allow us to determine which parameters are most important for the performance etc.</p>
<p>The type <code>Hyperoptimizer</code> is iterable, it iterates for the specified number of iterations, each iteration providing a sample of the parameter vector, e.g.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="ho = Hyperoptimizer(10, a = LinRange(1,2,50), b = [true, false], c = randn(100))
for (i,a,b,c) in ho
    println(i, &quot;\t&quot;, a, &quot;\t&quot;, b, &quot;\t&quot;, c)
end

1   1.2244897959183674  false   0.8179751164732062
2   1.7142857142857142  true    0.6536272580487854
3   1.4285714285714286  true    -0.2737451706680355
4   1.6734693877551021  false   -0.12313108128547606
5   1.9795918367346939  false   -0.4350837079334295
6   1.0612244897959184  true    -0.2025613848798039
7   1.469387755102041   false   0.7464858339748051
8   1.8571428571428572  true    -0.9269021128132274
9   1.163265306122449   true    2.6554272337516966
10  1.4081632653061225  true    1.112896676939024
"><pre>ho <span class="pl-k">=</span> <span class="pl-c1">Hyperoptimizer</span>(<span class="pl-c1">10</span>, a <span class="pl-k">=</span> <span class="pl-c1">LinRange</span>(<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">50</span>), b <span class="pl-k">=</span> [<span class="pl-c1">true</span>, <span class="pl-c1">false</span>], c <span class="pl-k">=</span> <span class="pl-c1">randn</span>(<span class="pl-c1">100</span>))
<span class="pl-k">for</span> (i,a,b,c) <span class="pl-k">in</span> ho
    <span class="pl-c1">println</span>(i, <span class="pl-s"><span class="pl-pds">"</span><span class="pl-cce">\t</span><span class="pl-pds">"</span></span>, a, <span class="pl-s"><span class="pl-pds">"</span><span class="pl-cce">\t</span><span class="pl-pds">"</span></span>, b, <span class="pl-s"><span class="pl-pds">"</span><span class="pl-cce">\t</span><span class="pl-pds">"</span></span>, c)
<span class="pl-k">end</span>

<span class="pl-c1">1</span>   <span class="pl-c1">1.2244897959183674</span>  <span class="pl-c1">false</span>   <span class="pl-c1">0.8179751164732062</span>
<span class="pl-c1">2</span>   <span class="pl-c1">1.7142857142857142</span>  <span class="pl-c1">true</span>    <span class="pl-c1">0.6536272580487854</span>
<span class="pl-c1">3</span>   <span class="pl-c1">1.4285714285714286</span>  <span class="pl-c1">true</span>    <span class="pl-k">-</span><span class="pl-c1">0.2737451706680355</span>
<span class="pl-c1">4</span>   <span class="pl-c1">1.6734693877551021</span>  <span class="pl-c1">false</span>   <span class="pl-k">-</span><span class="pl-c1">0.12313108128547606</span>
<span class="pl-c1">5</span>   <span class="pl-c1">1.9795918367346939</span>  <span class="pl-c1">false</span>   <span class="pl-k">-</span><span class="pl-c1">0.4350837079334295</span>
<span class="pl-c1">6</span>   <span class="pl-c1">1.0612244897959184</span>  <span class="pl-c1">true</span>    <span class="pl-k">-</span><span class="pl-c1">0.2025613848798039</span>
<span class="pl-c1">7</span>   <span class="pl-c1">1.469387755102041</span>   <span class="pl-c1">false</span>   <span class="pl-c1">0.7464858339748051</span>
<span class="pl-c1">8</span>   <span class="pl-c1">1.8571428571428572</span>  <span class="pl-c1">true</span>    <span class="pl-k">-</span><span class="pl-c1">0.9269021128132274</span>
<span class="pl-c1">9</span>   <span class="pl-c1">1.163265306122449</span>   <span class="pl-c1">true</span>    <span class="pl-c1">2.6554272337516966</span>
<span class="pl-c1">10</span>  <span class="pl-c1">1.4081632653061225</span>  <span class="pl-c1">true</span>    <span class="pl-c1">1.112896676939024</span></pre></div>
<p>If used in this way, the hyperoptimizer <strong>can not</strong> keep track of the function values like it did when <code>@hyperopt</code> was used. To manually store the same data, consider a pattern like</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="ho = Hyperoptimizer(10, a = LinRange(1,2), b = [true, false], c = randn(100))
for (i,a,b,c) in ho
    res = computations(a,b,c)
    push!(ho.history, [a,b,c])
end
"><pre>ho <span class="pl-k">=</span> <span class="pl-c1">Hyperoptimizer</span>(<span class="pl-c1">10</span>, a <span class="pl-k">=</span> <span class="pl-c1">LinRange</span>(<span class="pl-c1">1</span>,<span class="pl-c1">2</span>), b <span class="pl-k">=</span> [<span class="pl-c1">true</span>, <span class="pl-c1">false</span>], c <span class="pl-k">=</span> <span class="pl-c1">randn</span>(<span class="pl-c1">100</span>))
<span class="pl-k">for</span> (i,a,b,c) <span class="pl-k">in</span> ho
    res <span class="pl-k">=</span> <span class="pl-c1">computations</span>(a,b,c)
    <span class="pl-c1">push!</span>(ho<span class="pl-k">.</span>history, [a,b,c])
<span class="pl-k">end</span></pre></div>
<h1><a id="user-content-categorical-variables" class="anchor" aria-hidden="true" href="#categorical-variables"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Categorical variables</h1>
<p><code>RandomSampler</code> and <code>CLHSampler</code> support categorical variables which do not have a natural floating point representation, such as functions:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="@hyperopt for i=20, fun = [tanh, σ, relu]
    train_network(fun)
end
# or
@hyperopt for i=20, sampler=CLHSampler(dims=[Categorical(3), Continuous()]),
                    fun   = [tanh, σ, relu],
                    param = LinRange(0,1,20)
    train_network(fun, param)
end
"><pre><span class="pl-c1">@hyperopt</span> <span class="pl-k">for</span> i<span class="pl-k">=</span><span class="pl-c1">20</span>, fun <span class="pl-k">=</span> [tanh, σ, relu]
    <span class="pl-c1">train_network</span>(fun)
<span class="pl-k">end</span>
<span class="pl-c"><span class="pl-c">#</span> or</span>
<span class="pl-c1">@hyperopt</span> <span class="pl-k">for</span> i<span class="pl-k">=</span><span class="pl-c1">20</span>, sampler<span class="pl-k">=</span><span class="pl-c1">CLHSampler</span>(dims<span class="pl-k">=</span>[<span class="pl-c1">Categorical</span>(<span class="pl-c1">3</span>), <span class="pl-c1">Continuous</span>()]),
                    fun   <span class="pl-k">=</span> [tanh, σ, relu],
                    param <span class="pl-k">=</span> <span class="pl-c1">LinRange</span>(<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">20</span>)
    <span class="pl-c1">train_network</span>(fun, param)
<span class="pl-k">end</span></pre></div>
<h1><a id="user-content-which-sampler-to-use" class="anchor" aria-hidden="true" href="#which-sampler-to-use"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Which sampler to use?</h1>
<p><code>RandomSampler</code> is a good baseline and the default if none is chosen. <code>GPSampler</code> fits a Gaussian process to the data and tries to use this model to figure out where the best point to sample next is (using expected improvement). This is somewhat expensive and pays off when the function to optimize is expensive. <code>Hyperband(R=50, η=3, inner=RandomSampler())</code> runs the expression with varying amount of resources, allocating more resources to promising hyperparameters. See below for more info on <code>Hyperband</code>.</p>
<p>If number of iterations is small, <code>LHSampler</code> work better than random search. Caveat: <code>LHSampler</code> needs all candidate vectors to be of equal length, i.e.,</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="hob = @hyperopt for i=100, sampler = LHSampler(),
                            a = LinRange(1,5,100),
                            b = repeat([true, false],50),
                            c = exp10.(LinRange(-1,3,100))
    f(a,b,c=c)
end
"><pre>hob <span class="pl-k">=</span> <span class="pl-c1">@hyperopt</span> <span class="pl-k">for</span> i<span class="pl-k">=</span><span class="pl-c1">100</span>, sampler <span class="pl-k">=</span> <span class="pl-c1">LHSampler</span>(),
                            a <span class="pl-k">=</span> <span class="pl-c1">LinRange</span>(<span class="pl-c1">1</span>,<span class="pl-c1">5</span>,<span class="pl-c1">100</span>),
                            b <span class="pl-k">=</span> <span class="pl-c1">repeat</span>([<span class="pl-c1">true</span>, <span class="pl-c1">false</span>],<span class="pl-c1">50</span>),
                            c <span class="pl-k">=</span> <span class="pl-c1">exp10</span>.(<span class="pl-c1">LinRange</span>(<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">3</span>,<span class="pl-c1">100</span>))
    <span class="pl-c1">f</span>(a,b,c<span class="pl-k">=</span>c)
<span class="pl-k">end</span></pre></div>
<p>where all candidate vectors are of length 100. The candidates for <code>b</code> thus had to be repeated 50 times.</p>
<p>The categorical <code>CLHSampler</code> circumvents this</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="hob = @hyperopt for i=100,
                    sampler=CLHSampler(dims=[Continuous(), Categorical(2), Continuous()]),
                    a = LinRange(1,5,100),
                    b = [true, false],
                    c = exp10.(LinRange(-1,3,100))
    f(a,b,c=c)
end
"><pre>hob <span class="pl-k">=</span> <span class="pl-c1">@hyperopt</span> <span class="pl-k">for</span> i<span class="pl-k">=</span><span class="pl-c1">100</span>,
                    sampler<span class="pl-k">=</span><span class="pl-c1">CLHSampler</span>(dims<span class="pl-k">=</span>[<span class="pl-c1">Continuous</span>(), <span class="pl-c1">Categorical</span>(<span class="pl-c1">2</span>), <span class="pl-c1">Continuous</span>()]),
                    a <span class="pl-k">=</span> <span class="pl-c1">LinRange</span>(<span class="pl-c1">1</span>,<span class="pl-c1">5</span>,<span class="pl-c1">100</span>),
                    b <span class="pl-k">=</span> [<span class="pl-c1">true</span>, <span class="pl-c1">false</span>],
                    c <span class="pl-k">=</span> <span class="pl-c1">exp10</span>.(<span class="pl-c1">LinRange</span>(<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">3</span>,<span class="pl-c1">100</span>))
    <span class="pl-c1">f</span>(a,b,c<span class="pl-k">=</span>c)
<span class="pl-k">end</span></pre></div>
<h2><a id="user-content-hyperband" class="anchor" aria-hidden="true" href="#hyperband"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Hyperband</h2>
<p><code>Hyperband(R=50, η=3, inner=RandomSampler())</code> Implements <a href="https://arxiv.org/abs/1603.06560" rel="nofollow">Hyperband: A Novel Bandit-Based Approach to Hyperparameter Optimization</a>. The maximum amount of resources is given by <code>R</code> and the parameter <code>η</code> roughly determines the proportion of trials discarded between each round of successive halving. When using <code>Hyperband</code> the expression inside the <code>@hyperopt</code> macro takes the following form</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="ho = @hyperopt for i=18, sampler=Hyperband(R=50, η=3, inner=RandomSampler()), a = LinRange(1,5,1800), c = exp10.(LinRange(-1,3,1800))
    if state === nothing # Query if state is initialized
        res = optimize(resources=i, a, b) # if state is uninitialized, start a new optimization using the selected hyper parameters
    else
        res = optimize(resources=i, state=state) # If state has a value, continue the optimization from the state
    end
    minimum(res), get_state(res) # return the minimum value and a state from which to continue the optimization
end
"><pre>ho <span class="pl-k">=</span> <span class="pl-c1">@hyperopt</span> <span class="pl-k">for</span> i<span class="pl-k">=</span><span class="pl-c1">18</span>, sampler<span class="pl-k">=</span><span class="pl-c1">Hyperband</span>(R<span class="pl-k">=</span><span class="pl-c1">50</span>, η<span class="pl-k">=</span><span class="pl-c1">3</span>, inner<span class="pl-k">=</span><span class="pl-c1">RandomSampler</span>()), a <span class="pl-k">=</span> <span class="pl-c1">LinRange</span>(<span class="pl-c1">1</span>,<span class="pl-c1">5</span>,<span class="pl-c1">1800</span>), c <span class="pl-k">=</span> <span class="pl-c1">exp10</span>.(<span class="pl-c1">LinRange</span>(<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">3</span>,<span class="pl-c1">1800</span>))
    <span class="pl-k">if</span> state <span class="pl-k">===</span> <span class="pl-c1">nothing</span> <span class="pl-c"><span class="pl-c">#</span> Query if state is initialized</span>
        res <span class="pl-k">=</span> <span class="pl-c1">optimize</span>(resources<span class="pl-k">=</span>i, a, b) <span class="pl-c"><span class="pl-c">#</span> if state is uninitialized, start a new optimization using the selected hyper parameters</span>
    <span class="pl-k">else</span>
        res <span class="pl-k">=</span> <span class="pl-c1">optimize</span>(resources<span class="pl-k">=</span>i, state<span class="pl-k">=</span>state) <span class="pl-c"><span class="pl-c">#</span> If state has a value, continue the optimization from the state</span>
    <span class="pl-k">end</span>
    <span class="pl-c1">minimum</span>(res), <span class="pl-c1">get_state</span>(res) <span class="pl-c"><span class="pl-c">#</span> return the minimum value and a state from which to continue the optimization</span>
<span class="pl-k">end</span></pre></div>
<p>a (simple) working example using <code>Hyperband</code> and Optim is</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Optim
f(a;c=10) = sum(@. 100 + (a-3)^2 + (c-100)^2)
hohb = @hyperopt for i=18, sampler=Hyperband(R=50, η=3, inner=RandomSampler()), a = LinRange(1,5,1800), c = exp10.(LinRange(-1,3,1800))
    if !(state === nothing)
        a,c = state
    end
    res = Optim.optimize(x-&gt;f(x[1],c=x[2]), [a,c], SimulatedAnnealing(), Optim.Options(f_calls_limit=i))
    Optim.minimum(res), Optim.minimizer(res)
end
plot(hohb)
"><pre><span class="pl-k">using</span> Optim
<span class="pl-en">f</span>(a;c<span class="pl-k">=</span><span class="pl-c1">10</span>) <span class="pl-k">=</span> <span class="pl-c1">sum</span>(<span class="pl-c1">@.</span> <span class="pl-c1">100</span> <span class="pl-k">+</span> (a<span class="pl-k">-</span><span class="pl-c1">3</span>)<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">+</span> (c<span class="pl-k">-</span><span class="pl-c1">100</span>)<span class="pl-k">^</span><span class="pl-c1">2</span>)
hohb <span class="pl-k">=</span> <span class="pl-c1">@hyperopt</span> <span class="pl-k">for</span> i<span class="pl-k">=</span><span class="pl-c1">18</span>, sampler<span class="pl-k">=</span><span class="pl-c1">Hyperband</span>(R<span class="pl-k">=</span><span class="pl-c1">50</span>, η<span class="pl-k">=</span><span class="pl-c1">3</span>, inner<span class="pl-k">=</span><span class="pl-c1">RandomSampler</span>()), a <span class="pl-k">=</span> <span class="pl-c1">LinRange</span>(<span class="pl-c1">1</span>,<span class="pl-c1">5</span>,<span class="pl-c1">1800</span>), c <span class="pl-k">=</span> <span class="pl-c1">exp10</span>.(<span class="pl-c1">LinRange</span>(<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">3</span>,<span class="pl-c1">1800</span>))
    <span class="pl-k">if</span> <span class="pl-k">!</span>(state <span class="pl-k">===</span> <span class="pl-c1">nothing</span>)
        a,c <span class="pl-k">=</span> state
    <span class="pl-k">end</span>
    res <span class="pl-k">=</span> Optim<span class="pl-k">.</span><span class="pl-c1">optimize</span>(x<span class="pl-k">-&gt;</span><span class="pl-c1">f</span>(x[<span class="pl-c1">1</span>],c<span class="pl-k">=</span>x[<span class="pl-c1">2</span>]), [a,c], <span class="pl-c1">SimulatedAnnealing</span>(), Optim<span class="pl-k">.</span><span class="pl-c1">Options</span>(f_calls_limit<span class="pl-k">=</span>i))
    Optim<span class="pl-k">.</span><span class="pl-c1">minimum</span>(res), Optim<span class="pl-k">.</span><span class="pl-c1">minimizer</span>(res)
<span class="pl-k">end</span>
<span class="pl-c1">plot</span>(hohb)</pre></div>
<p>and a more complicated example that also explores different Optim optimizers as the inner optimizer is</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="hohb = @hyperopt for i=18, sampler=Hyperband(R=50, η=3, inner=RandomSampler()),
    algorithm = [SimulatedAnnealing(), ParticleSwarm(), NelderMead(), BFGS(), NewtonTrustRegion()],
    a = LinRange(1,5,1800),
    c = exp10.(LinRange(-1,3,1800))
    if !(state === nothing)
        x0,algorithm = state
    else
        x0 = [a,c]
    end
    println(i, &quot; algorithm: &quot;, typeof(algorithm).name.name)
    res = Optim.optimize(x-&gt;f(x[1],c=x[2]), x0, algorithm, Optim.Options(time_limit=i+1, show_trace=false))
    Optim.minimum(res), (Optim.minimizer(res), algorithm)
end
"><pre>hohb <span class="pl-k">=</span> <span class="pl-c1">@hyperopt</span> <span class="pl-k">for</span> i<span class="pl-k">=</span><span class="pl-c1">18</span>, sampler<span class="pl-k">=</span><span class="pl-c1">Hyperband</span>(R<span class="pl-k">=</span><span class="pl-c1">50</span>, η<span class="pl-k">=</span><span class="pl-c1">3</span>, inner<span class="pl-k">=</span><span class="pl-c1">RandomSampler</span>()),
    algorithm <span class="pl-k">=</span> [<span class="pl-c1">SimulatedAnnealing</span>(), <span class="pl-c1">ParticleSwarm</span>(), <span class="pl-c1">NelderMead</span>(), <span class="pl-c1">BFGS</span>(), <span class="pl-c1">NewtonTrustRegion</span>()],
    a <span class="pl-k">=</span> <span class="pl-c1">LinRange</span>(<span class="pl-c1">1</span>,<span class="pl-c1">5</span>,<span class="pl-c1">1800</span>),
    c <span class="pl-k">=</span> <span class="pl-c1">exp10</span>.(<span class="pl-c1">LinRange</span>(<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">3</span>,<span class="pl-c1">1800</span>))
    <span class="pl-k">if</span> <span class="pl-k">!</span>(state <span class="pl-k">===</span> <span class="pl-c1">nothing</span>)
        x0,algorithm <span class="pl-k">=</span> state
    <span class="pl-k">else</span>
        x0 <span class="pl-k">=</span> [a,c]
    <span class="pl-k">end</span>
    <span class="pl-c1">println</span>(i, <span class="pl-s"><span class="pl-pds">"</span> algorithm: <span class="pl-pds">"</span></span>, <span class="pl-c1">typeof</span>(algorithm)<span class="pl-k">.</span>name<span class="pl-k">.</span>name)
    res <span class="pl-k">=</span> Optim<span class="pl-k">.</span><span class="pl-c1">optimize</span>(x<span class="pl-k">-&gt;</span><span class="pl-c1">f</span>(x[<span class="pl-c1">1</span>],c<span class="pl-k">=</span>x[<span class="pl-c1">2</span>]), x0, algorithm, Optim<span class="pl-k">.</span><span class="pl-c1">Options</span>(time_limit<span class="pl-k">=</span>i<span class="pl-k">+</span><span class="pl-c1">1</span>, show_trace<span class="pl-k">=</span><span class="pl-c1">false</span>))
    Optim<span class="pl-k">.</span><span class="pl-c1">minimum</span>(res), (Optim<span class="pl-k">.</span><span class="pl-c1">minimizer</span>(res), algorithm)
<span class="pl-k">end</span></pre></div>
<h1><a id="user-content-parallel-execution" class="anchor" aria-hidden="true" href="#parallel-execution"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Parallel execution</h1>
<ul>
<li>The macro <code>@phyperopt</code> works in the same way as <code>@hyperopt</code> but distributes all computation on available workers. The usual caveats apply, code must be loaded on all workers etc.</li>
<li>The macro <code>@thyperopt</code> uses <code>ThreadPools.tmap</code> to evaluate the objective on all available threads. Beware of high memory consumption if your objective allocates a lot of memory.</li>
</ul>
</article></div>