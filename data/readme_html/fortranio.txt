<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-fortaniojl" class="anchor" aria-hidden="true" href="#fortaniojl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>FortanIO.jl</h1>
<p>Fortran binary (unformatted) file input/output for Julia.</p>
<h2><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Example</h2>
<p>Assume we have some fortran code like the following that saves out data to <code>data.bin</code>.</p>
<div class="highlight highlight-source-fortran"><pre>    <span class="pl-k">integer</span><span class="pl-k">*</span><span class="pl-c1">8</span> <span class="pl-k">::</span> x(<span class="pl-c1">100</span>)
    <span class="pl-k">real</span><span class="pl-k">*</span><span class="pl-c1">8</span> <span class="pl-k">::</span> y(<span class="pl-c1">100</span>)
    
    ! ... code that calculates something <span class="pl-k">in</span> x and y ...

    <span class="pl-k">open</span>(unit<span class="pl-k">=</span><span class="pl-c1">9</span>, file<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>data.bin<span class="pl-pds">"</span></span>, form<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>unformatted<span class="pl-pds">"</span></span>)
    <span class="pl-k">write</span>(<span class="pl-c1">9</span>) x
    <span class="pl-k">write</span>(<span class="pl-c1">9</span>) y
    <span class="pl-k">close</span>(<span class="pl-c1">9</span>)</pre></div>
<p>This can be read into julia as follows:</p>
<div class="highlight highlight-source-julia"><pre>    <span class="pl-c1">load</span>(<span class="pl-s"><span class="pl-pds">"</span>FortranIO<span class="pl-pds">"</span></span>)
    f <span class="pl-k">=</span> <span class="pl-c1">open</span>(<span class="pl-s"><span class="pl-pds">"</span>data.bin<span class="pl-pds">"</span></span>)
    x <span class="pl-k">=</span> FortranIO<span class="pl-k">.</span><span class="pl-c1">read_record_array</span>(f, Int64)
    y <span class="pl-k">=</span> FortranIO<span class="pl-k">.</span><span class="pl-c1">read_record_array</span>(f, Float64)
    <span class="pl-c1">close</span>(f)</pre></div>
<p>An array of the appropriate size is returned by <code>FortranIO.read_record_array</code>.</p>
<p>If, instead of two separate calls to <code>write</code> in the fortran code above, a single call had been used:</p>
<div class="highlight highlight-source-fortran"><pre>    <span class="pl-k">write</span>(<span class="pl-c1">9</span>) x, y</pre></div>
<p>Then, the values can be loaded in julia using</p>
<div class="highlight highlight-source-julia"><pre>    FortranIO<span class="pl-k">.</span><span class="pl-c1">read_record</span>(f, <span class="pl-c1">Array</span>(Int64,<span class="pl-c1">100</span>), <span class="pl-c1">Array</span>(Float64,<span class="pl-c1">100</span>))</pre></div>
<p>Values can also be written:</p>
<div class="highlight highlight-source-julia"><pre>    f <span class="pl-k">=</span> <span class="pl-c1">open</span>(<span class="pl-s"><span class="pl-pds">"</span>file.bin<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>w<span class="pl-pds">"</span></span>)
    <span class="pl-c"><span class="pl-c">#</span> Write a record containing one Int64</span>
    FortranIO<span class="pl-k">.</span><span class="pl-c1">write_record</span>(f, <span class="pl-c1">10</span>)
    <span class="pl-c"><span class="pl-c">#</span> Write a second record containing several values of different types</span>
    FortranIO<span class="pl-k">.</span><span class="pl-c1">write_record</span>(f, [<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>], <span class="pl-c1">int32</span>(<span class="pl-c1">4</span>), <span class="pl-c1">5.0</span>)
    <span class="pl-c1">close</span>(f)</pre></div>
<h2><a id="user-content-todo" class="anchor" aria-hidden="true" href="#todo"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>TODO</h2>
<p>Handle strings</p>
</article></div>