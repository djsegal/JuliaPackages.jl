<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-fortaniojl" class="anchor" aria-hidden="true" href="#fortaniojl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>FortanIO.jl</h1>
<p>Fortran binary (unformatted) file input/output for Julia.</p>
<h2><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example</h2>
<p>Assume we have some fortran code like the following that saves out data to <code>data.bin</code>.</p>
<div class="highlight highlight-source-fortran position-relative" data-snippet-clipboard-copy-content="    integer*8 :: x(100)
    real*8 :: y(100)
    
    ! ... code that calculates something in x and y ...

    open(unit=9, file=&quot;data.bin&quot;, form=&quot;unformatted&quot;)
    write(9) x
    write(9) y
    close(9)
"><pre>    <span class="pl-k">integer</span><span class="pl-k">*</span><span class="pl-c1">8</span> <span class="pl-k">::</span> x(<span class="pl-c1">100</span>)
    <span class="pl-k">real</span><span class="pl-k">*</span><span class="pl-c1">8</span> <span class="pl-k">::</span> y(<span class="pl-c1">100</span>)
    
    ! ... code that calculates something <span class="pl-k">in</span> x and y ...

    <span class="pl-k">open</span>(unit<span class="pl-k">=</span><span class="pl-c1">9</span>, file<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>data.bin<span class="pl-pds">"</span></span>, form<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>unformatted<span class="pl-pds">"</span></span>)
    <span class="pl-k">write</span>(<span class="pl-c1">9</span>) x
    <span class="pl-k">write</span>(<span class="pl-c1">9</span>) y
    <span class="pl-k">close</span>(<span class="pl-c1">9</span>)</pre></div>
<p>This can be read into julia as follows:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="    load(&quot;FortranIO&quot;)
    f = open(&quot;data.bin&quot;)
    x = FortranIO.read_record_array(f, Int64)
    y = FortranIO.read_record_array(f, Float64)
    close(f)
"><pre>    <span class="pl-c1">load</span>(<span class="pl-s"><span class="pl-pds">"</span>FortranIO<span class="pl-pds">"</span></span>)
    f <span class="pl-k">=</span> <span class="pl-c1">open</span>(<span class="pl-s"><span class="pl-pds">"</span>data.bin<span class="pl-pds">"</span></span>)
    x <span class="pl-k">=</span> FortranIO<span class="pl-k">.</span><span class="pl-c1">read_record_array</span>(f, Int64)
    y <span class="pl-k">=</span> FortranIO<span class="pl-k">.</span><span class="pl-c1">read_record_array</span>(f, Float64)
    <span class="pl-c1">close</span>(f)</pre></div>
<p>An array of the appropriate size is returned by <code>FortranIO.read_record_array</code>.</p>
<p>If, instead of two separate calls to <code>write</code> in the fortran code above, a single call had been used:</p>
<div class="highlight highlight-source-fortran position-relative" data-snippet-clipboard-copy-content="    write(9) x, y
"><pre>    <span class="pl-k">write</span>(<span class="pl-c1">9</span>) x, y</pre></div>
<p>Then, the values can be loaded in julia using</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="    FortranIO.read_record(f, Array(Int64,100), Array(Float64,100))
"><pre>    FortranIO<span class="pl-k">.</span><span class="pl-c1">read_record</span>(f, <span class="pl-c1">Array</span>(Int64,<span class="pl-c1">100</span>), <span class="pl-c1">Array</span>(Float64,<span class="pl-c1">100</span>))</pre></div>
<p>Values can also be written:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="    f = open(&quot;file.bin&quot;, &quot;w&quot;)
    # Write a record containing one Int64
    FortranIO.write_record(f, 10)
    # Write a second record containing several values of different types
    FortranIO.write_record(f, [1,2,3], int32(4), 5.0)
    close(f)
"><pre>    f <span class="pl-k">=</span> <span class="pl-c1">open</span>(<span class="pl-s"><span class="pl-pds">"</span>file.bin<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>w<span class="pl-pds">"</span></span>)
    <span class="pl-c"><span class="pl-c">#</span> Write a record containing one Int64</span>
    FortranIO<span class="pl-k">.</span><span class="pl-c1">write_record</span>(f, <span class="pl-c1">10</span>)
    <span class="pl-c"><span class="pl-c">#</span> Write a second record containing several values of different types</span>
    FortranIO<span class="pl-k">.</span><span class="pl-c1">write_record</span>(f, [<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>], <span class="pl-c1">int32</span>(<span class="pl-c1">4</span>), <span class="pl-c1">5.0</span>)
    <span class="pl-c1">close</span>(f)</pre></div>
<h2><a id="user-content-todo" class="anchor" aria-hidden="true" href="#todo"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>TODO</h2>
<p>Handle strings</p>
</article></div>