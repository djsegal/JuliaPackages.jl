<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-dynamicterminaljl" class="anchor" aria-hidden="true" href="#dynamicterminaljl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>DynamicTerminal.jl</h1>
<p dir="auto">Very minimal functionality for overwriting
multiple lines of the terminal in julia.</p>
<p dir="auto">This is basically a result of tearing down the insides of the TerminalMenues
module in the standard REPL library since this was the best example i could
find of dynamically updating the terminal over multiple lines, that did not
rely on external dependencies (such as ncurses).</p>
<p dir="auto">Examle of usage can be found in examples (comming soon) and my solution of
<a href="https://github.com/MarcusTL12/JuliaKalender/blob/master/AdventOfCode2019/13/main.jl">adventofcode 2019 day 13 part 2</a></p>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<p dir="auto">The general gist of how to use this package boils down to the <code>showandreset</code>
function.</p>
<p dir="auto">Here is a quick example:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="
# This whole package is built around using a single IOBuffer (or some other
# similar structure)
buff = IOBuffer()

println(buff, &quot;Some\n&quot;, &quot;stuff&quot;) # Print some stuff to the buffer

# This now empties the buffer, writes the contents to the stdout and counts how
# many lines was just printed and prints a set of special character to the
# buffer. This way the buffer &quot;knows&quot; how many lines to move the cursor up
# to be at the start of the block it just printed.
showandreset(buff)

# Print some other stuff to the console
println(
    buff,
    &quot;&quot;&quot;
    Some
    other
    stuff
    &quot;&quot;&quot;
)

sleep(1) # To add some suspense

# Empties and prints to stdout as before, which now includes the special
# characters from before, moving the cursor up to the top and overwrites
# the previously printed messages.
showandreset(buff)
"><pre><span class="pl-c"><span class="pl-c">#</span> This whole package is built around using a single IOBuffer (or some other</span>
<span class="pl-c"><span class="pl-c">#</span> similar structure)</span>
buff <span class="pl-k">=</span> <span class="pl-c1">IOBuffer</span>()

<span class="pl-c1">println</span>(buff, <span class="pl-s"><span class="pl-pds">"</span>Some<span class="pl-cce">\n</span><span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>stuff<span class="pl-pds">"</span></span>) <span class="pl-c"><span class="pl-c">#</span> Print some stuff to the buffer</span>

<span class="pl-c"><span class="pl-c">#</span> This now empties the buffer, writes the contents to the stdout and counts how</span>
<span class="pl-c"><span class="pl-c">#</span> many lines was just printed and prints a set of special character to the</span>
<span class="pl-c"><span class="pl-c">#</span> buffer. This way the buffer "knows" how many lines to move the cursor up</span>
<span class="pl-c"><span class="pl-c">#</span> to be at the start of the block it just printed.</span>
<span class="pl-c1">showandreset</span>(buff)

<span class="pl-c"><span class="pl-c">#</span> Print some other stuff to the console</span>
<span class="pl-c1">println</span>(
    buff,
    <span class="pl-s"><span class="pl-pds">"""</span></span>
<span class="pl-s">    Some</span>
<span class="pl-s">    other</span>
<span class="pl-s">    stuff</span>
<span class="pl-s">    <span class="pl-pds">"""</span></span>
)

<span class="pl-c1">sleep</span>(<span class="pl-c1">1</span>) <span class="pl-c"><span class="pl-c">#</span> To add some suspense</span>

<span class="pl-c"><span class="pl-c">#</span> Empties and prints to stdout as before, which now includes the special</span>
<span class="pl-c"><span class="pl-c">#</span> characters from before, moving the cursor up to the top and overwrites</span>
<span class="pl-c"><span class="pl-c">#</span> the previously printed messages.</span>
<span class="pl-c1">showandreset</span>(buff)
</pre></div>
</article></div>