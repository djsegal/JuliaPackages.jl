<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-relocatablefoldersjl" class="anchor" aria-hidden="true" href="#relocatablefoldersjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>RelocatableFolders.jl</h1>
<p dir="auto">An alternative to the <code>@__DIR__</code> macro. Packages that wish to reference paths
in their project directory run into issues with relocatability when used in
conjunction with <code>PackageCompiler</code>. The <code>@path</code> macro provided by this package
overcomes this limitation. See <a href="https://julialang.github.io/PackageCompiler.jl/stable/apps.html#relocatability" rel="nofollow">here</a> and <a href="https://github.com/JuliaLang/julia/issues/38696" data-hovercard-type="issue" data-hovercard-url="/JuliaLang/julia/issues/38696/hovercard">here</a> for
further details.</p>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<p dir="auto">The package provides one export, the <code>@path</code> macro. It can be used to replace
<code>@__DIR__</code> in the following way:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="module MyPackage

using RelocatableFolders

# const ASSETS = joinpath(@__DIR__, &quot;../assets&quot;)
const ASSETS = @path joinpath(@__DIR__, &quot;../assets&quot;)

end"><pre><span class="pl-k">module</span> MyPackage

<span class="pl-k">using</span> RelocatableFolders

<span class="pl-c"><span class="pl-c">#</span> const ASSETS = joinpath(@__DIR__, "../assets")</span>
<span class="pl-k">const</span> ASSETS <span class="pl-k">=</span> <span class="pl-c1">@path</span> <span class="pl-c1">joinpath</span>(<span class="pl-c1">@__DIR__</span>, <span class="pl-s"><span class="pl-pds">"</span>../assets<span class="pl-pds">"</span></span>)

<span class="pl-k">end</span></pre></div>
<p dir="auto">At <em>runtime</em> the path stored in <code>ASSETS</code> will get resolved to either the
original path, if it still exists, or to an automatically generated
scratchspace containing the same folder and file structure as the original.</p>
<h2 dir="auto"><a id="user-content-limitations" class="anchor" aria-hidden="true" href="#limitations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Limitations</h2>
<p dir="auto">This macro should only be used for reasonably small file or folder sizes. If
there are very large files then it is better to make use of Julia's <code>Artifact</code>
system instead.</p>
<p dir="auto">Building new paths from, for example, <code>ASSETS</code> in the above example will return
a <code>String</code> containing the resolved path rather than a <code>Path</code> object. Doing this
at the module-level will result in hardcoded paths that will run into
relocatability issues as discussed above. Always create a new <code>@path</code> for
each resource you wish to reference rather than building them in parts, e.g.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="module MyPackage

using RelocatableFolders

const ASSETS = @path joinpath(@__DIR__, &quot;../assets&quot;)
const SUBDIR = @path joinpath(ASSETS, &quot;subdir&quot;)
const FILE = @path joinpath(ASSETS, &quot;file.txt&quot;)

end"><pre><span class="pl-k">module</span> MyPackage

<span class="pl-k">using</span> RelocatableFolders

<span class="pl-k">const</span> ASSETS <span class="pl-k">=</span> <span class="pl-c1">@path</span> <span class="pl-c1">joinpath</span>(<span class="pl-c1">@__DIR__</span>, <span class="pl-s"><span class="pl-pds">"</span>../assets<span class="pl-pds">"</span></span>)
<span class="pl-k">const</span> SUBDIR <span class="pl-k">=</span> <span class="pl-c1">@path</span> <span class="pl-c1">joinpath</span>(ASSETS, <span class="pl-s"><span class="pl-pds">"</span>subdir<span class="pl-pds">"</span></span>)
<span class="pl-k">const</span> FILE <span class="pl-k">=</span> <span class="pl-c1">@path</span> <span class="pl-c1">joinpath</span>(ASSETS, <span class="pl-s"><span class="pl-pds">"</span>file.txt<span class="pl-pds">"</span></span>)

<span class="pl-k">end</span></pre></div>
<h2 dir="auto"><a id="user-content-internals" class="anchor" aria-hidden="true" href="#internals"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Internals</h2>
<p dir="auto">At compile-time the <code>@path</code> macro will read in all the files contained in the
referenced path and store them and their paths. The returned object is a
<code>Path &lt;: AbstractString</code>. Whenever a <code>Path</code> is passed to a function
expecting an <code>AbstractString</code> (such as <code>readdir</code>) it will be converted to a
<code>String</code> by looking up the stored path and returning that. When no path exists
(the source tree no longer exists) then the contents of the files that were
read at compile-time are written to a <code>Scratch</code> scratchspace and that path is
returned instead.</p>
<h2 dir="auto"><a id="user-content-alternatives" class="anchor" aria-hidden="true" href="#alternatives"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Alternatives</h2>
<p dir="auto">The alternative approach is to use the <code>Artifacts</code> system to distribute the
required files, which is a reasonably heavyweight solution for a simple
collection of source-controlled files. It is recommended that users look to use
artifacts when that file sizes are reasonably large and only use this package
when the distributed files are small.</p>
</article></div>