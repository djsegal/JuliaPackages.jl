<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-simplepartitions" class="anchor" aria-hidden="true" href="#simplepartitions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>SimplePartitions</h1>
<p>Module for set partitions. We define a
<code>Partition</code> to be a wrapper around the <code>DisjointUnion</code> type defined
in the <code>DataStructures</code> module, but with a bit more functionality.</p>
<p><strong>New</strong>: We also include <code>IntegerPartition</code> too! (See below.)</p>
<h2><a id="user-content-partition-constructor" class="anchor" aria-hidden="true" href="#partition-constructor"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Partition Constructor</h2>
<p>A new <code>Partition</code> is created by specifying the ground set. That is, if <code>A</code>
is a <code>Set{T}</code> (for some type <code>T</code>) or an <code>IntSet</code>, then <code>Partition(A)</code> creates
a new <code>Partition</code> whose ground set is <code>A</code> and the parts are singletons.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> ShowSet
WARNING<span class="pl-k">:</span> Method definition <span class="pl-c1">show</span>(Base<span class="pl-k">.</span>IO, Base<span class="pl-k">.</span>Set) <span class="pl-k">...</span>
WARNING<span class="pl-k">:</span> Method definition <span class="pl-c1">show</span>(Base<span class="pl-k">.</span>IO, Base<span class="pl-k">.</span>IntSet) <span class="pl-k">...</span>

julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> SimplePartitions

julia<span class="pl-k">&gt;</span> A <span class="pl-k">=</span> <span class="pl-c1">Set</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>)
{<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>,<span class="pl-c1">4</span>,<span class="pl-c1">5</span>,<span class="pl-c1">6</span>,<span class="pl-c1">7</span>,<span class="pl-c1">8</span>,<span class="pl-c1">9</span>,<span class="pl-c1">10</span>}

julia<span class="pl-k">&gt;</span> P <span class="pl-k">=</span> <span class="pl-c1">Partition</span>(A)
{{<span class="pl-c1">9</span>},{<span class="pl-c1">6</span>},{<span class="pl-c1">5</span>},{<span class="pl-c1">8</span>},{<span class="pl-c1">1</span>},{<span class="pl-c1">3</span>},{<span class="pl-c1">2</span>},{<span class="pl-c1">10</span>},{<span class="pl-c1">7</span>},{<span class="pl-c1">4</span>}}</pre></div>
<p>The parameter to <code>Partition</code> may also be a list (one-dimensional array) or
a positive integer <code>n</code>, in which case a partition of the set {1,2,...,n} is
created.</p>
<h3><a id="user-content-construct-from-a-set-of-sets" class="anchor" aria-hidden="true" href="#construct-from-a-set-of-sets"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Construct from a set of sets</h3>
<p>If <code>S</code> is a set of sets then <code>PartitionBuilder(S)</code> creates
a new partition whose parts are the sets in <code>S</code>. The
sets in <code>S</code> must be nonempty and pairwise disjoint.</p>
<h3><a id="user-content-construct-from-a-permutation" class="anchor" aria-hidden="true" href="#construct-from-a-permutation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Construct from a <code>Permutation</code></h3>
<p>If <code>p</code> is a <code>Permutation</code>, then <code>Partition(p)</code> creates a new
partition whose parts are the cycles of <code>p</code>.</p>
<h3><a id="user-content-construct-from-a-dict" class="anchor" aria-hidden="true" href="#construct-from-a-dict"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Construct from a <code>Dict</code></h3>
<p>If <code>d</code> is a dictionary, the <code>Partition(d)</code> creates a new
partition whose elements are the keys of <code>d</code> in which
two elements <code>a</code> and <code>b</code> are in the same part if and only
if <code>d[a] == d[b]</code>.</p>
<h2><a id="user-content-functions" class="anchor" aria-hidden="true" href="#functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Functions</h2>
<ul>
<li><code>num_elements(P)</code>: returns the number of elements in the ground
set of <code>P</code>.</li>
<li><code>num_parts(P)</code>: returns the number of parts in <code>P</code>.</li>
<li><code>parts(P)</code>: returns the set of the parts in this partition.</li>
<li><code>collect(P)</code> returns a one-dimensional array containing the parts.</li>
<li><code>ground_set(P)</code>: returns (a copy of) the ground set of <code>P</code>.</li>
<li><code>in(a,P)</code>: test if <code>a</code> (element) is in the ground set of <code>P</code>.</li>
<li><code>in(A,P)</code>: test if <code>A</code> (set) is a part of <code>P</code>.</li>
<li><code>merge_parts!(P,a,b)</code>: Modify <code>P</code> by merging the parts of <code>P</code> that
contain the elements <code>a</code> and <code>b</code>. This may also be called with a
list for the second argument: <code>merge_parts!(P,[a,b,...])</code>.</li>
<li><code>in_same_part(P,a,b)</code>: returns <code>true</code> if <code>a</code> and <code>b</code> are in the same
part of <code>P</code>.</li>
<li><code>find_part(P,a)</code>: returns the set of elements in <code>P</code>
that are in the same part as <code>a</code>.</li>
</ul>
<h2><a id="user-content-operations" class="anchor" aria-hidden="true" href="#operations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Operations</h2>
<ul>
<li><code>join(P,Q)</code> returns the join of partitions <code>P</code> and <code>Q</code>. This can also
be invoked as <code>P+Q</code> or as <code>P∨Q</code>.</li>
<li><code>meet(P,Q)</code> returns the meet of the partitions. This can also be
invoked as <code>P*Q</code> or as <code>P∧Q</code>.</li>
<li><code>P+x</code> where <code>P</code> is a partition and <code>x</code> is a new element creates a
new partition in which <code>x</code> is added as a singleton.</li>
<li><code>P+A</code> where <code>P</code> is a partition and <code>A</code> is a set of elements
(that are disjoint from the elements already in <code>P</code>) creates a new
partition by adding <code>A</code> as a part.</li>
</ul>
<h2><a id="user-content-relations" class="anchor" aria-hidden="true" href="#relations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Relations</h2>
<ul>
<li><code>P==Q</code> determines if <code>P</code> and <code>Q</code> are equal partitions.</li>
<li><code>P&lt;=Q</code> determines if <code>P</code> is a refinement of <code>Q</code>. That is, we return <code>true</code>
if each part of <code>P</code> is a subset of a part of <code>Q</code>. Note that <code>P</code> and <code>Q</code> must
have the same ground set or else an error is thrown. The variants
<code>P&lt;Q</code>, <code>P&gt;=Q</code>, and <code>P&gt;Q</code> are available with the expected meanings. Calling
<code>refines(P,Q)</code> is the same as <code>P&lt;=Q</code>.</li>
</ul>
<h2><a id="user-content-generating-all-partitions-of-a-set" class="anchor" aria-hidden="true" href="#generating-all-partitions-of-a-set"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Generating all partitions of a set</h2>
<ul>
<li><code>all_partitions(A::Set)</code> creates a <code>Set</code> containing all possible
partitions of <code>A</code>.</li>
<li><code>all_partitions(n::Int)</code> creates a <code>Set</code> containing all possible
partitions of the set <code>{1,2,...,n}</code>.</li>
</ul>
<p>Both of these take an optional second argument <code>k</code> to specify that
only partitions with exactly <code>k</code> parts should be returned.</p>
<h2><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Examples</h2>
<p>Note: Sets are nicely displayed here because we invoked
<code>using ShowSet</code>.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> A <span class="pl-k">=</span> <span class="pl-c1">Set</span>([<span class="pl-s"><span class="pl-pds">"</span>alpha<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>bravo<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>charlie<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>delta<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>echo<span class="pl-pds">"</span></span>])
{alpha,bravo,charlie,delta,echo}

julia<span class="pl-k">&gt;</span> P <span class="pl-k">=</span> <span class="pl-c1">Partition</span>(A)
{{delta},{echo},{charlie},{bravo},{alpha}}

julia<span class="pl-k">&gt;</span> <span class="pl-c1">merge_parts!</span>(P,<span class="pl-s"><span class="pl-pds">"</span>alpha<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>bravo<span class="pl-pds">"</span></span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">merge_parts!</span>(P,<span class="pl-s"><span class="pl-pds">"</span>echo<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>bravo<span class="pl-pds">"</span></span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">merge_parts!</span>(P,<span class="pl-s"><span class="pl-pds">"</span>charlie<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>delta<span class="pl-pds">"</span></span>)

julia<span class="pl-k">&gt;</span> P
{{charlie,delta},{alpha,bravo,echo}}

julia<span class="pl-k">&gt;</span> Q <span class="pl-k">=</span> <span class="pl-c1">Partition</span>(A);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">merge_parts!</span>(Q,<span class="pl-s"><span class="pl-pds">"</span>alpha<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>echo<span class="pl-pds">"</span></span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">merge_parts!</span>(Q,<span class="pl-s"><span class="pl-pds">"</span>delta<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>alpha<span class="pl-pds">"</span></span>)

julia<span class="pl-k">&gt;</span> Q
{{charlie},{bravo},{alpha,delta,echo}}

julia<span class="pl-k">&gt;</span> P<span class="pl-k">+</span>Q
{{alpha,bravo,charlie,delta,echo}}

julia<span class="pl-k">&gt;</span> P<span class="pl-k">*</span>Q
{{delta},{charlie},{bravo},{alpha,echo}}</pre></div>
<hr>
<h2><a id="user-content-integer-partitions" class="anchor" aria-hidden="true" href="#integer-partitions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Integer Partitions</h2>
<p>The type <code>IntegerPartition</code> represents a partition of an integer.
These can be constructed either from a one-dimensional array of
integers or as individual arguments:</p>
<ul>
<li><code>IntegerPartition([a,b,c,...])</code> or</li>
<li><code>IntegerPartition(a,b,c,...)</code></li>
</ul>
<h3><a id="user-content-operationsfunctions" class="anchor" aria-hidden="true" href="#operationsfunctions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Operations/Functions</h3>
<ul>
<li><code>parts(P)</code> returns a list containing the parts.</li>
<li><code>sum(P)</code> returns the sum of the parts.</li>
<li><code>num_parts(P)</code> returns the number of parts.</li>
<li><code>Ferrers(P)</code> prints a Ferrer's diagram of <code>P</code>.</li>
<li><code>conj(P)</code> or <code>P'</code> returns the Ferrer's conjugate of <code>P</code></li>
<li><code>P+Q</code> returns the concatenation of <code>P</code> and <code>Q</code>:</li>
</ul>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> P <span class="pl-k">=</span> <span class="pl-c1">IntegerPartition</span>(<span class="pl-c1">2</span>,<span class="pl-c1">2</span>,<span class="pl-c1">4</span>)
(<span class="pl-c1">4</span><span class="pl-k">+</span><span class="pl-c1">2</span><span class="pl-k">+</span><span class="pl-c1">2</span>)

julia<span class="pl-k">&gt;</span> Q <span class="pl-k">=</span> <span class="pl-c1">IntegerPartition</span>(<span class="pl-c1">5</span>,<span class="pl-c1">2</span>,<span class="pl-c1">1</span>)
(<span class="pl-c1">5</span><span class="pl-k">+</span><span class="pl-c1">2</span><span class="pl-k">+</span><span class="pl-c1">1</span>)

julia<span class="pl-k">&gt;</span> P<span class="pl-k">+</span>Q
(<span class="pl-c1">5</span><span class="pl-k">+</span><span class="pl-c1">4</span><span class="pl-k">+</span><span class="pl-c1">2</span><span class="pl-k">+</span><span class="pl-c1">2</span><span class="pl-k">+</span><span class="pl-c1">2</span><span class="pl-k">+</span><span class="pl-c1">1</span>)</pre></div>
<hr>
<h3><a id="user-content-to-do-list" class="anchor" aria-hidden="true" href="#to-do-list"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>To do list</h3>
<ul>
<li>Create <code>RandomPartition(n)</code> [and <code>RandomPartition(Set)</code>].</li>
</ul>
</article></div>