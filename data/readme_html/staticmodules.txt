<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-staticmodulesjl" class="anchor" aria-hidden="true" href="#staticmodulesjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>StaticModules.jl</h1>
<p dir="auto"><a href="https://github.com/MasonProtter/StaticModules.jl/actions/workflows/ci.yml"><img src="https://github.com/MasonProtter/StaticModules.jl/actions/workflows/ci.yml/badge.svg" alt="CI" style="max-width: 100%;"></a></p>
<p dir="auto">StaticModules.jl is available on the general registry, to install it do <code>using Pkg; pkg"add StaticModules"</code> or equivalent.</p>
<p dir="auto">a <code>StaticModule</code> is basically a little, statically sized and typed namespace you can use for
enclosing julia code and variables without runtime overhead and
useable in either the global or local scopes. <code>StaticModule</code>s are
<em>not</em> a replacement <code>module</code>s, but may be complementary.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using StaticModules

julia&gt; @staticmodule Foo begin
           x = 1
           f(y) = x^2 + 2y
       end
StaticModule Foo containing
  f = f
  x = 1

julia&gt; propertynames(Foo)
(:f, :x)

julia&gt; x
ERROR: UndefVarError: x not defined

julia&gt; Foo.x
1"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> StaticModules

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@staticmodule</span> Foo <span class="pl-k">begin</span>
           x <span class="pl-k">=</span> <span class="pl-c1">1</span>
           <span class="pl-en">f</span>(y) <span class="pl-k">=</span> x<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">+</span> <span class="pl-c1">2</span>y
       <span class="pl-k">end</span>
StaticModule Foo containing
  f <span class="pl-k">=</span> f
  x <span class="pl-k">=</span> <span class="pl-c1">1</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">propertynames</span>(Foo)
(<span class="pl-c1">:f</span>, <span class="pl-c1">:x</span>)

julia<span class="pl-k">&gt;</span> x
ERROR<span class="pl-k">:</span> UndefVarError<span class="pl-k">:</span> x not defined

julia<span class="pl-k">&gt;</span> Foo<span class="pl-k">.</span>x
<span class="pl-c1">1</span></pre></div>
<p dir="auto">StaticModules.jl also exports a macro <code>@const_staticmodule</code> for use in the global scope so that the name of the module is bound as a <code>const</code> rather than a regular variable.</p>
<p dir="auto">Note, since <code>StaticModule</code>s are backed by a <code>NamedTuple</code>, the same compiler performance caveats about dealing with large <code>Tuple</code>s apply to <code>StaticModule</code>s. Be careful about defining hundreds of names in a <code>StaticModule</code>.</p>
<h3 dir="auto"><a id="user-content-running-code-in-a-staticmodule" class="anchor" aria-hidden="true" href="#running-code-in-a-staticmodule"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Running code in a StaticModule</h3>
<p dir="auto">We can run expressions 'inside' a <code>StaticModule</code>'s namespace with the <code>@with</code> macro</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; @with Foo begin
           f(1) == 3x
       end
true"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">@with</span> Foo <span class="pl-k">begin</span>
           <span class="pl-c1">f</span>(<span class="pl-c1">1</span>) <span class="pl-k">==</span> <span class="pl-c1">3</span>x
       <span class="pl-k">end</span>
<span class="pl-c1">true</span></pre></div>
<p dir="auto">In fact, the <code>@with</code> macro will let us use the properties of any object that supports <code>propertynames</code> and <code>getproperty</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; @with (;f = x -&gt; x + 1, x = 2) begin
           f(1) == x
       end
true

julia&gt; struct Bar
           a
           b
       end

julia&gt; @with Bar(1, 2) begin
           a^2, b^2
       end
(1, 4)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">@with</span> (;f <span class="pl-k">=</span> x <span class="pl-k">-&gt;</span> x <span class="pl-k">+</span> <span class="pl-c1">1</span>, x <span class="pl-k">=</span> <span class="pl-c1">2</span>) <span class="pl-k">begin</span>
           <span class="pl-c1">f</span>(<span class="pl-c1">1</span>) <span class="pl-k">==</span> x
       <span class="pl-k">end</span>
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> <span class="pl-k">struct</span> Bar
           a
           b
       <span class="pl-k">end</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@with</span> <span class="pl-c1">Bar</span>(<span class="pl-c1">1</span>, <span class="pl-c1">2</span>) <span class="pl-k">begin</span>
           a<span class="pl-k">^</span><span class="pl-c1">2</span>, b<span class="pl-k">^</span><span class="pl-c1">2</span>
       <span class="pl-k">end</span>
(<span class="pl-c1">1</span>, <span class="pl-c1">4</span>)</pre></div>
<p dir="auto">and of course, it doesn't allocate or get in the way of constant propagation:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; @const_staticmodule X begin
           @staticmodule X begin
               X = 1
           end
       end
StaticModule X containing
  X = StaticModule X

julia&gt; @btime @with X begin
           @with X begin
               X^2 + 1
           end
       end
  0.030 ns (0 allocations: 0 bytes)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">@const_staticmodule</span> X <span class="pl-k">begin</span>
           <span class="pl-c1">@staticmodule</span> X <span class="pl-k">begin</span>
               X <span class="pl-k">=</span> <span class="pl-c1">1</span>
           <span class="pl-k">end</span>
       <span class="pl-k">end</span>
StaticModule X containing
  X <span class="pl-k">=</span> StaticModule X

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">@with</span> X <span class="pl-k">begin</span>
           <span class="pl-c1">@with</span> X <span class="pl-k">begin</span>
               X<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">+</span> <span class="pl-c1">1</span>
           <span class="pl-k">end</span>
       <span class="pl-k">end</span>
  <span class="pl-c1">0.030</span> ns (<span class="pl-c1">0</span> allocations<span class="pl-k">:</span> <span class="pl-c1">0</span> bytes)</pre></div>
<p dir="auto">If you supply a <code>Tuple</code> of objects supporting <code>getproperty</code>, then <code>@with</code> will use names from all of them, with priority being taken by earlier objects in the list if names collide:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; @with ((;a=1, b=&quot;hi&quot;), (;b=2, c=3)) begin
           a, b, c
       end
(1, &quot;hi&quot;, 3)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">@with</span> ((;a<span class="pl-k">=</span><span class="pl-c1">1</span>, b<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>hi<span class="pl-pds">"</span></span>), (;b<span class="pl-k">=</span><span class="pl-c1">2</span>, c<span class="pl-k">=</span><span class="pl-c1">3</span>)) <span class="pl-k">begin</span>
           a, b, c
       <span class="pl-k">end</span>
(<span class="pl-c1">1</span>, <span class="pl-s"><span class="pl-pds">"</span>hi<span class="pl-pds">"</span></span>, <span class="pl-c1">3</span>)</pre></div>
<p dir="auto">Using two many objects in <code>@with</code> may stress the compiler.</p>
<h3 dir="auto"><a id="user-content-replacements-for-using" class="anchor" aria-hidden="true" href="#replacements-for-using"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Replacements for <code>using</code></h3>
<p dir="auto">Sometimes you might want to <code>using</code> a module into a <code>StaticModule</code>, but this will not work the way it works in standard modules. You can 'fake' this behaviour using the <code>@unpack</code> macro from <a href="https://github.com/mauro3/Parameters.jl">Parameters.jl</a> and <code>import</code>ing packages into the parent module:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using Parameters

julia&gt; import StaticArrays

julia&gt; @staticmodule Foo begin
           @unpack SA, SVector = StaticArrays
           a = SVector((1,2,3))' * SA[4,5,6]
       end
StaticModule Foo containing
        a = 32
  SVector = SArray{Tuple{S},T,1,S} where T where S
       SA = SA
    ##272 = StaticArrays"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Parameters

julia<span class="pl-k">&gt;</span> <span class="pl-k">import</span> StaticArrays

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@staticmodule</span> Foo <span class="pl-k">begin</span>
           <span class="pl-c1">@unpack</span> SA, SVector <span class="pl-k">=</span> StaticArrays
           a <span class="pl-k">=</span> <span class="pl-c1">SVector</span>((<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>))<span class="pl-k">'</span> <span class="pl-k">*</span> SA[<span class="pl-c1">4</span>,<span class="pl-c1">5</span>,<span class="pl-c1">6</span>]
       <span class="pl-k">end</span>
StaticModule Foo containing
        a <span class="pl-k">=</span> <span class="pl-c1">32</span>
  SVector <span class="pl-k">=</span> SArray{Tuple{S},T,<span class="pl-c1">1</span>,S} <span class="pl-k">where</span> T <span class="pl-k">where</span> S
       SA <span class="pl-k">=</span> SA
    <span class="pl-c"><span class="pl-c">#</span>#272 = StaticArrays</span></pre></div>
</article></div>