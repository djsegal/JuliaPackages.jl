<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-finitehorizonpomdpsjl" class="anchor" aria-hidden="true" href="#finitehorizonpomdpsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>FiniteHorizonPOMDPs.jl</h1>
<p><a href="https://Omastto1.github.io/FiniteHorizonPOMDPs.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://Omastto1.github.io/FiniteHorizonPOMDPs.jl/latest" rel="nofollow"><img src="https://camo.githubusercontent.com/56f8252ba8e9d3f0b810769543f77823d2fe031ce560d4c2d69fb1fcad800383/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6c61746573742d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-latest-blue.svg" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/Omastto1/FiniteHorizonPOMDPs.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/00630e23e53c29d5ced2fd50b26a35f1557ebfd2e467d491b1e5fecd0775abf8/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f4f6d617374746f312f46696e697465486f72697a6f6e504f4d4450732e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/Omastto1/FiniteHorizonPOMDPs.jl/badge.svg?branch=master" style="max-width:100%;"></a></p>
<p><a href="https://github.com/JuliaPOMDP/POMDPs.jl">POMDPs.jl</a>-compatible interface for defining MDPs and POMDPs with finite horizons</p>
<p>This package aims to provide a standard interface for defining problems with finite horizons.</p>
<p>The goals are to</p>
<ol>
<li>Provide a way for value-iteration-based algorithms to start at the final-stage and work backwards</li>
<li>Be compatible with generic POMDPs.jl solvers and simulators (i.e. solvers should not have to check anything more than <code>isterminal</code>)</li>
<li>Provide a wrapper so that an infinite horizon POMDP can be easily made into a finite horizon one</li>
<li>Be compatible with other interface extensions like constrained POMDPs and mixed observability problems</li>
</ol>
<p>Notably, in accordance with goal (4), this package does <strong>not</strong> define something like <code>AbstractFiniteHorizonPOMDP</code>.</p>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<p>Package offers interface for finite horizon POMDPs.
Solver currently supports only MDPs.
User can either implement:</p>
<ul>
<li>finite horizon MDP using both POMDPs.jl and FiniteHorizonPOMDPs.jl interface functions or</li>
<li>infinite horizon MDP and transform it to finite horizon one using <code>fixhorizon</code> utility</li>
</ul>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="using FiniteHorizonPOMDPs
import POMDPModels

gw = SimpleGridWorld()    # initialize Infinite Horizon model
fhgw = fixhorizon(gw, 2)  # use fixhorizon utility to transform it to Finite Horizon
"><pre><code>using FiniteHorizonPOMDPs
import POMDPModels

gw = SimpleGridWorld()    # initialize Infinite Horizon model
fhgw = fixhorizon(gw, 2)  # use fixhorizon utility to transform it to Finite Horizon
</code></pre></div>
<h2><a id="user-content-interface" class="anchor" aria-hidden="true" href="#interface"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Interface</h2>
<ul>
<li>
<p><code>HorizonLength(::Type{&lt;:Union{MDP,POMDP})</code></p>
<ul>
<li>Checks whether MDP is Finite or Infinite Horizon and return corresponding struct (FiniteHorizon or InfiniteHorizon).</li>
</ul>
</li>
<li>
<p><code>horizon(m::Union{MDP,POMDP})::Int</code></p>
<ul>
<li>Returns the number of <em>steps</em> that will be taken in the (PO)MDP, given it is Finite Horizon.</li>
</ul>
</li>
<li>
<p><code>stage(m::Union{MDP,POMDP}, ss)::Int</code></p>
<ul>
<li>Returns the number of input variable's stage.</li>
</ul>
</li>
<li>
<p><code>stage_states(m::Union{MDP,POMDP}, stage::Int)</code></p>
<ul>
<li>Creates (PO)MDP's states for given stage.</li>
</ul>
</li>
<li>
<p><code>stage_stateindex(m::Union{MDP,POMDP}, state)</code></p>
<ul>
<li>Computes the index of the given state in the corresponding stage.</li>
</ul>
</li>
<li>
<p><code>ordered_stage_states(w::FHWrapper, stage::Int)</code></p>
<ul>
<li>Returns an <code>AbstractVector</code> of states from given stage ordered according to <code>stage_stateindex(mdp, s)</code>.</li>
</ul>
</li>
<li>
<p><code>stage_observations(m::Union{MDP,POMDP}, stage::Int)</code></p>
<ul>
<li>Creates (PO)MDP's observations for given stage.</li>
</ul>
</li>
<li>
<p><code>stage_obsindex(m::Union{MDP,POMDP}, o::stage::Int)</code></p>
<ul>
<li>Computes the index of the given observation in the corresponding stage.</li>
</ul>
</li>
<li>
<p><code>ordered_stage_observations(w::FHWrapper, stage::Int)</code></p>
<ul>
<li>Returns an <code>AbstractVector</code> of observations from given stage ordered according to <code>stage_obsindex(w,o)</code>.</li>
</ul>
</li>
</ul>
</article></div>