<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-finitehorizonpomdpsjl" class="anchor" aria-hidden="true" href="#finitehorizonpomdpsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>FiniteHorizonPOMDPs.jl</h1>
<p dir="auto"><a href="https://Omastto1.github.io/FiniteHorizonPOMDPs.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://Omastto1.github.io/FiniteHorizonPOMDPs.jl/latest" rel="nofollow"><img src="https://camo.githubusercontent.com/56f8252ba8e9d3f0b810769543f77823d2fe031ce560d4c2d69fb1fcad800383/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6c61746573742d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-latest-blue.svg" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/JuliaPOMDP/FiniteHorizonPOMDPs.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/b3c192334e6f44d939c808494b989175ed95272ac76bfbc62d00e5b3d516aec5/68747470733a2f2f636f6465636f762e696f2f67682f4a756c6961504f4d44502f46696e697465486f72697a6f6e504f4d4450732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e7376673f746f6b656e3d30396830445331756269" alt="codecov" data-canonical-src="https://codecov.io/gh/JuliaPOMDP/FiniteHorizonPOMDPs.jl/branch/master/graph/badge.svg?token=09h0DS1ubi" style="max-width: 100%;"></a></p>
<p dir="auto"><a href="https://github.com/JuliaPOMDP/POMDPs.jl">POMDPs.jl</a>-compatible interface for defining MDPs and POMDPs with finite horizons</p>
<p dir="auto">This package aims to provide a standard interface for defining problems with finite horizons.</p>
<p dir="auto">The goals are to</p>
<ol dir="auto">
<li>Provide a way for value-iteration-based algorithms to start at the final-stage and work backwards</li>
<li>Be compatible with generic POMDPs.jl solvers and simulators (i.e. solvers should not have to check anything more than <code>isterminal</code>)</li>
<li>Provide a wrapper so that an infinite horizon POMDP can be easily made into a finite horizon one</li>
<li>Be compatible with other interface extensions like constrained POMDPs and mixed observability problems</li>
</ol>
<p dir="auto">Notably, in accordance with goal (4), this package does <strong>not</strong> define something like <code>AbstractFiniteHorizonPOMDP</code>.</p>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<p dir="auto">Package offers interface for finite horizon POMDPs.
Solver currently supports only MDPs.
User can either implement:</p>
<ul dir="auto">
<li>finite horizon MDP using both POMDPs.jl and FiniteHorizonPOMDPs.jl interface functions or</li>
<li>infinite horizon MDP and transform it to finite horizon one using <code>fixhorizon</code> utility</li>
</ul>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using FiniteHorizonPOMDPs
using POMDPModels

gw = SimpleGridWorld()    # initialize Infinite Horizon model
fhgw = fixhorizon(gw, 2)  # use fixhorizon utility to transform it to Finite Horizon"><pre><span class="pl-k">using</span> FiniteHorizonPOMDPs
<span class="pl-k">using</span> POMDPModels

gw <span class="pl-k">=</span> <span class="pl-c1">SimpleGridWorld</span>()    <span class="pl-c"><span class="pl-c">#</span> initialize Infinite Horizon model</span>
fhgw <span class="pl-k">=</span> <span class="pl-c1">fixhorizon</span>(gw, <span class="pl-c1">2</span>)  <span class="pl-c"><span class="pl-c">#</span> use fixhorizon utility to transform it to Finite Horizon</span></pre></div>
<h2 dir="auto"><a id="user-content-interface" class="anchor" aria-hidden="true" href="#interface"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Interface</h2>
<ul dir="auto">
<li>
<p dir="auto"><code>HorizonLength(::Type{&lt;:Union{MDP,POMDP})</code></p>
<ul dir="auto">
<li>Checks whether MDP is Finite or Infinite Horizon and return corresponding struct (FiniteHorizon or InfiniteHorizon).</li>
</ul>
</li>
<li>
<p dir="auto"><code>horizon(m::Union{MDP,POMDP})::Int</code></p>
<ul dir="auto">
<li>Returns the number of <em>steps</em> that will be taken in the (PO)MDP, given it is Finite Horizon.</li>
</ul>
</li>
<li>
<p dir="auto"><code>stage(m::Union{MDP,POMDP}, ss)::Int</code></p>
<ul dir="auto">
<li>Returns the number of input variable's stage.</li>
</ul>
</li>
<li>
<p dir="auto"><code>stage_states(m::Union{MDP,POMDP}, stage::Int)</code></p>
<ul dir="auto">
<li>Creates (PO)MDP's states for given stage.</li>
</ul>
</li>
<li>
<p dir="auto"><code>stage_stateindex(m::Union{MDP,POMDP}, state)</code></p>
<ul dir="auto">
<li>Computes the index of the given state in the corresponding stage.</li>
</ul>
</li>
<li>
<p dir="auto"><code>ordered_stage_states(w::FHWrapper, stage::Int)</code></p>
<ul dir="auto">
<li>Returns an <code>AbstractVector</code> of states from given stage ordered according to <code>stage_stateindex(mdp, s)</code>.</li>
</ul>
</li>
<li>
<p dir="auto"><code>stage_observations(m::Union{MDP,POMDP}, stage::Int)</code></p>
<ul dir="auto">
<li>Creates (PO)MDP's observations for given stage.</li>
</ul>
</li>
<li>
<p dir="auto"><code>stage_obsindex(m::Union{MDP,POMDP}, o::stage::Int)</code></p>
<ul dir="auto">
<li>Computes the index of the given observation in the corresponding stage.</li>
</ul>
</li>
<li>
<p dir="auto"><code>ordered_stage_observations(w::FHWrapper, stage::Int)</code></p>
<ul dir="auto">
<li>Returns an <code>AbstractVector</code> of observations from given stage ordered according to <code>stage_obsindex(w,o)</code>.</li>
</ul>
</li>
</ul>
</article></div>