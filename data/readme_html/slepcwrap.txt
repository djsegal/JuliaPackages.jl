<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p dir="auto"><a href="https://bmxam.github.io/SlepcWrap.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/32a535a58c99ab0db9628a55aae1e2986db282419fc1d0a15b1cdac215651fcc/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d7265642e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-red.svg" style="max-width: 100%;"></a>
<a href="https://bmxam.github.io/SlepcWrap.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a></p>
<h1 dir="auto"><a id="user-content-slepcwrapjl" class="anchor" aria-hidden="true" href="#slepcwrapjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>SlepcWrap.jl</h1>
<p dir="auto">SlepcWrap.jl is a parallel Julia wrapper for the (awesome) <a href="https://slepc.upv.es/" rel="nofollow">SLEPc</a> library. As described on their main page, "SLEPc is a software library for the solution of large scale sparse eigenvalue problems on parallel computers. It is an extension of PETSc and can be used for linear eigenvalue problems in either standard or generalized form, with real or complex arithmetic.".</p>
<p dir="auto">Note that as SLEPc is an extension of PETSc, SlepcWrap.jl is an extension of <a href="https://github.com/bmxam/PetscWrap.jl">PetscWrap.jl</a>.</p>
<p dir="auto">The project is far from covering all SLEPc methods, but adding a new wrapper is very quick and easy.</p>
<h2 dir="auto"><a id="user-content-how-to-install-it" class="anchor" aria-hidden="true" href="#how-to-install-it"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>How to install it</h2>
<p dir="auto">You must have installed the SLEPc library (and necessarily the PETSc library as wall) on your computer and set the two following environment variables : <code>SLEPC_DIR</code> and <code>PETSC_ARCH</code>.</p>
<p dir="auto">At run time, PetscWrap.jl looks for the <code>libslepc.so</code> using these environment variables and "load" the library.</p>
<p dir="auto">To install the package, use the Julia package manager:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="pkg&gt; add SlepcWrap"><pre>pkg<span class="pl-k">&gt;</span> add SlepcWrap</pre></div>
<h2 dir="auto"><a id="user-content-contribute" class="anchor" aria-hidden="true" href="#contribute"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Contribute</h2>
<p dir="auto">Any contribution(s) and/or remark(s) are welcome! If you need a function that is not wrapped yet but you don't think you are capable of contributing, post an issue with a minimum working example.</p>
<h2 dir="auto"><a id="user-content-slepc-compat" class="anchor" aria-hidden="true" href="#slepc-compat"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>SLEPc compat.</h2>
<p dir="auto">This version of PetscWrap.jl has been tested with slepc-3.13.1. Complex numbers are supported.</p>
<h2 dir="auto"><a id="user-content-how-to-use-it" class="anchor" aria-hidden="true" href="#how-to-use-it"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>How to use it</h2>
<p dir="auto">SLEPc methods wrappers share the same name as their C equivalent : for instance <code>EPSCreate</code> or <code>EPSGetEigenvalue</code>. Furthermore, an optional "higher level" API, referred to as "fancy", is exposed : for instance <code>create_eps</code> or <code>get_eig</code>). Note that this second way of manipulating SLEPc will evolve according the package's author needs while the first one will try to follow SLEPc official API.</p>
<p dir="auto">You will find examples of use by building the documentation: <code>julia SlepcWrap.jl/docs/make.jl</code>. Here is one of the examples:</p>
<h3 dir="auto"><a id="user-content-helmholtz-equation" class="anchor" aria-hidden="true" href="#helmholtz-equation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Helmholtz equation</h3>
<p dir="auto">In this example, we use the SLEPc to find the eigenvalues of the following Helmholtz equation:
<code>u'' + \omega^2 u = 0</code> associated to Dirichlet boundary conditions on the domain <code>[0,1]</code>. Hence
the theoritical eigenvalues are <code>\omega = k \pi</code> with <code>k \in \mathbb{Z}^*</code>; and the associated
eigenvectors are <code>u(x) = \sin(k\pix)</code>.
A centered finite difference scheme is used for the spatial discretization.</p>
<p dir="auto">The equation is written in matrix form <code>Au = \alpha Bu</code> where <code>\alpha = \omega^2</code>.</p>
<p dir="auto">To run this example, simplfy excute <code>mpirun -n your_favourite_integer julia helmholtz_FD.jl</code></p>
<p dir="auto">In this example, PETSc/SLEPc legacy method names are used. For more fancy names, check the next example.</p>
<p dir="auto">Note that the way we achieve things in the document can be highly improved and the purpose of this example
is only demonstrate some method calls to give an overview.</p>
<p dir="auto">Start by importing both <code>PetscWrap</code>, for the distributed matrices, and <code>SlepcWrap</code> for the eigenvalues.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using PetscWrap
using SlepcWrap"><pre><span class="pl-k">using</span> PetscWrap
<span class="pl-k">using</span> SlepcWrap</pre></div>
<p dir="auto">Number of mesh points and mesh step</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="n = 21
Δx = 1. / (n - 1)"><pre>n <span class="pl-k">=</span> <span class="pl-c1">21</span>
Δx <span class="pl-k">=</span> <span class="pl-c1">1.</span> <span class="pl-k">/</span> (n <span class="pl-k">-</span> <span class="pl-c1">1</span>)</pre></div>
<p dir="auto">Initialize SLEPc. Either without arguments, calling <code>SlepcInitialize()</code> or using "command-line" arguments.
To do so, either provide the arguments as one string, for instance
<code>SlepcInitialize("-eps_max_it 100 -eps_tol 1e-5")</code> or provide each argument in
separate strings : <code>PetscInitialize(["-eps_max_it", "100", "-eps_tol", "1e-5")</code>.
Here we ask for the five closest eigenvalues to <code>0</code>, using a non-zero pivot for the LU factorization and a
"shift-inverse" process.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="SlepcInitialize(&quot;-eps_target 0 -eps_nev 5 -st_pc_factor_shift_type NONZERO -st_type sinvert&quot;)"><pre><span class="pl-c1">SlepcInitialize</span>(<span class="pl-s"><span class="pl-pds">"</span>-eps_target 0 -eps_nev 5 -st_pc_factor_shift_type NONZERO -st_type sinvert<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">Create the problem matrices, set sizes and apply "command-line" options. Note that we should
set the number of preallocated non-zeros to increase performance.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="A = MatCreate()
B = MatCreate()
MatSetSizes(A, PETSC_DECIDE, PETSC_DECIDE, n, n)
MatSetSizes(B, PETSC_DECIDE, PETSC_DECIDE, n, n)
MatSetFromOptions(A)
MatSetFromOptions(B)
MatSetUp(A)
MatSetUp(B)"><pre>A <span class="pl-k">=</span> <span class="pl-c1">MatCreate</span>()
B <span class="pl-k">=</span> <span class="pl-c1">MatCreate</span>()
<span class="pl-c1">MatSetSizes</span>(A, PETSC_DECIDE, PETSC_DECIDE, n, n)
<span class="pl-c1">MatSetSizes</span>(B, PETSC_DECIDE, PETSC_DECIDE, n, n)
<span class="pl-c1">MatSetFromOptions</span>(A)
<span class="pl-c1">MatSetFromOptions</span>(B)
<span class="pl-c1">MatSetUp</span>(A)
<span class="pl-c1">MatSetUp</span>(B)</pre></div>
<p dir="auto">Get rows handled by the local processor</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="A_rstart, A_rend = MatGetOwnershipRange(A)
B_rstart, B_rend = MatGetOwnershipRange(B)"><pre>A_rstart, A_rend <span class="pl-k">=</span> <span class="pl-c1">MatGetOwnershipRange</span>(A)
B_rstart, B_rend <span class="pl-k">=</span> <span class="pl-c1">MatGetOwnershipRange</span>(B)</pre></div>
<p dir="auto">Fill matrix A  with second order derivative central scheme</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="for i in A_rstart:A_rend-1
    if (i == 0)
        MatSetValues(A, [0], [0, 1], [-2., 1] / Δx^2, INSERT_VALUES)
    elseif (i == n-1)
        MatSetValues(A, [n-1], [n-2, n-1], [1., -2.] / Δx^2, INSERT_VALUES)
    else
        MatSetValues(A, [i], i-1:i+1, [1., -2., 1.] / Δx^2, INSERT_VALUES)
    end
end"><pre><span class="pl-k">for</span> i <span class="pl-k">in</span> A_rstart<span class="pl-k">:</span>A_rend<span class="pl-k">-</span><span class="pl-c1">1</span>
    <span class="pl-k">if</span> (i <span class="pl-k">==</span> <span class="pl-c1">0</span>)
        <span class="pl-c1">MatSetValues</span>(A, [<span class="pl-c1">0</span>], [<span class="pl-c1">0</span>, <span class="pl-c1">1</span>], [<span class="pl-k">-</span><span class="pl-c1">2.</span>, <span class="pl-c1">1</span>] <span class="pl-k">/</span> Δx<span class="pl-k">^</span><span class="pl-c1">2</span>, INSERT_VALUES)
    <span class="pl-k">elseif</span> (i <span class="pl-k">==</span> n<span class="pl-k">-</span><span class="pl-c1">1</span>)
        <span class="pl-c1">MatSetValues</span>(A, [n<span class="pl-k">-</span><span class="pl-c1">1</span>], [n<span class="pl-k">-</span><span class="pl-c1">2</span>, n<span class="pl-k">-</span><span class="pl-c1">1</span>], [<span class="pl-c1">1.</span>, <span class="pl-k">-</span><span class="pl-c1">2.</span>] <span class="pl-k">/</span> Δx<span class="pl-k">^</span><span class="pl-c1">2</span>, INSERT_VALUES)
    <span class="pl-k">else</span>
        <span class="pl-c1">MatSetValues</span>(A, [i], i<span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">:</span>i<span class="pl-k">+</span><span class="pl-c1">1</span>, [<span class="pl-c1">1.</span>, <span class="pl-k">-</span><span class="pl-c1">2.</span>, <span class="pl-c1">1.</span>] <span class="pl-k">/</span> Δx<span class="pl-k">^</span><span class="pl-c1">2</span>, INSERT_VALUES)
    <span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>
<p dir="auto">Fill matrix B with identity matrix</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="for i in B_rstart:B_rend-1
    MatSetValue(B, i, i, -1., INSERT_VALUES)
end"><pre><span class="pl-k">for</span> i <span class="pl-k">in</span> B_rstart<span class="pl-k">:</span>B_rend<span class="pl-k">-</span><span class="pl-c1">1</span>
    <span class="pl-c1">MatSetValue</span>(B, i, i, <span class="pl-k">-</span><span class="pl-c1">1.</span>, INSERT_VALUES)
<span class="pl-k">end</span></pre></div>
<p dir="auto">Set boundary conditions : u(0) = 0 and u(1) = 0. Only the processor
handling the corresponding rows are playing a role here.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="(A_rstart == 0) &amp;&amp; MatSetValues(A, [0], [0,1], [1., 0.], INSERT_VALUES)
(B_rstart == 0) &amp;&amp; MatSetValue(B, 0, 0, 0., INSERT_VALUES)

(A_rend == n) &amp;&amp; MatSetValues(A, [n-1], [n-2,n-1], [0., 1.], INSERT_VALUES)
(B_rend == n) &amp;&amp; MatSetValue(B, n-1, n-1, 0., INSERT_VALUES)"><pre>(A_rstart <span class="pl-k">==</span> <span class="pl-c1">0</span>) <span class="pl-k">&amp;&amp;</span> <span class="pl-c1">MatSetValues</span>(A, [<span class="pl-c1">0</span>], [<span class="pl-c1">0</span>,<span class="pl-c1">1</span>], [<span class="pl-c1">1.</span>, <span class="pl-c1">0.</span>], INSERT_VALUES)
(B_rstart <span class="pl-k">==</span> <span class="pl-c1">0</span>) <span class="pl-k">&amp;&amp;</span> <span class="pl-c1">MatSetValue</span>(B, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0.</span>, INSERT_VALUES)

(A_rend <span class="pl-k">==</span> n) <span class="pl-k">&amp;&amp;</span> <span class="pl-c1">MatSetValues</span>(A, [n<span class="pl-k">-</span><span class="pl-c1">1</span>], [n<span class="pl-k">-</span><span class="pl-c1">2</span>,n<span class="pl-k">-</span><span class="pl-c1">1</span>], [<span class="pl-c1">0.</span>, <span class="pl-c1">1.</span>], INSERT_VALUES)
(B_rend <span class="pl-k">==</span> n) <span class="pl-k">&amp;&amp;</span> <span class="pl-c1">MatSetValue</span>(B, n<span class="pl-k">-</span><span class="pl-c1">1</span>, n<span class="pl-k">-</span><span class="pl-c1">1</span>, <span class="pl-c1">0.</span>, INSERT_VALUES)</pre></div>
<p dir="auto">Assemble the matrices</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="MatAssemblyBegin(A, MAT_FINAL_ASSEMBLY)
MatAssemblyBegin(B, MAT_FINAL_ASSEMBLY)
MatAssemblyEnd(A, MAT_FINAL_ASSEMBLY)
MatAssemblyEnd(B, MAT_FINAL_ASSEMBLY)"><pre><span class="pl-c1">MatAssemblyBegin</span>(A, MAT_FINAL_ASSEMBLY)
<span class="pl-c1">MatAssemblyBegin</span>(B, MAT_FINAL_ASSEMBLY)
<span class="pl-c1">MatAssemblyEnd</span>(A, MAT_FINAL_ASSEMBLY)
<span class="pl-c1">MatAssemblyEnd</span>(B, MAT_FINAL_ASSEMBLY)</pre></div>
<p dir="auto">Now we set up the eigenvalue solver</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="eps = EPSCreate()
EPSSetOperators(eps, A, B)
EPSSetFromOptions(eps)
EPSSetUp(eps)"><pre>eps <span class="pl-k">=</span> <span class="pl-c1">EPSCreate</span>()
<span class="pl-c1">EPSSetOperators</span>(eps, A, B)
<span class="pl-c1">EPSSetFromOptions</span>(eps)
<span class="pl-c1">EPSSetUp</span>(eps)</pre></div>
<p dir="auto">Then we solve</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="EPSSolve(eps)"><pre><span class="pl-c1">EPSSolve</span>(eps)</pre></div>
<p dir="auto">And finally we can inspect the solution. Let's first get the number of converged eigenvalues:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="nconv = EPSGetConverged(eps)"><pre>nconv <span class="pl-k">=</span> <span class="pl-c1">EPSGetConverged</span>(eps)</pre></div>
<p dir="auto">Then we can get/display these eigenvalues (more precisely their square root, i.e <code>\simeq \omega</code>)</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="for ieig in 0:nconv - 1
    vpr, vpi = EPSGetEigenvalue(eps, ieig)
    @show √(vpr), √(vpi)
end"><pre><span class="pl-k">for</span> ieig <span class="pl-k">in</span> <span class="pl-c1">0</span><span class="pl-k">:</span>nconv <span class="pl-k">-</span> <span class="pl-c1">1</span>
    vpr, vpi <span class="pl-k">=</span> <span class="pl-c1">EPSGetEigenvalue</span>(eps, ieig)
    <span class="pl-c1">@show</span> <span class="pl-k">√</span>(vpr), <span class="pl-k">√</span>(vpi)
<span class="pl-k">end</span></pre></div>
<p dir="auto">We can also play with eigen vectors. First, create two Petsc vectors to allocate memory</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="vecr, veci = MatCreateVecs(A)"><pre>vecr, veci <span class="pl-k">=</span> <span class="pl-c1">MatCreateVecs</span>(A)</pre></div>
<p dir="auto">Then loop over the eigen pairs and retrieve eigenvectors</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="for ieig in 0:nconv-1
    vpr, vpi, vecpr, vecpi = EPSGetEigenpair(eps, ieig, vecr, veci)

    # At this point, you can call VecGetArray to obtain a Julia array (see PetscWrap examples).
    # If you are on one processor, you can even plot the solution to check that you have a sinus
    # solution. On multiple processors, this would require to &quot;gather&quot; the solution on one processor only.
end"><pre><span class="pl-k">for</span> ieig <span class="pl-k">in</span> <span class="pl-c1">0</span><span class="pl-k">:</span>nconv<span class="pl-k">-</span><span class="pl-c1">1</span>
    vpr, vpi, vecpr, vecpi <span class="pl-k">=</span> <span class="pl-c1">EPSGetEigenpair</span>(eps, ieig, vecr, veci)

    <span class="pl-c"><span class="pl-c">#</span> At this point, you can call VecGetArray to obtain a Julia array (see PetscWrap examples).</span>
    <span class="pl-c"><span class="pl-c">#</span> If you are on one processor, you can even plot the solution to check that you have a sinus</span>
    <span class="pl-c"><span class="pl-c">#</span> solution. On multiple processors, this would require to "gather" the solution on one processor only.</span>
<span class="pl-k">end</span></pre></div>
<p dir="auto">Finally, let's free the memory</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="MatDestroy(A)
MatDestroy(B)
EPSDestroy(eps)"><pre><span class="pl-c1">MatDestroy</span>(A)
<span class="pl-c1">MatDestroy</span>(B)
<span class="pl-c1">EPSDestroy</span>(eps)</pre></div>
<p dir="auto">And call finalize when you're done</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="SlepcFinalize()
"><pre><span class="pl-c1">SlepcFinalize</span>()
</pre></div>
</article></div>