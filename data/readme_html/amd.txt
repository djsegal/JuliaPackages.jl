<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-amd" class="anchor" aria-hidden="true" href="#amd"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>AMD</h1>
<p><a href="https://travis-ci.org/JuliaSmoothOptimizers/AMD.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/9895d9c3f91ff42d49589860e8caca2f0cc0cb5c/68747470733a2f2f7472617669732d63692e6f72672f4a756c6961536d6f6f74684f7074696d697a6572732f414d442e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaSmoothOptimizers/AMD.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/JuliaSmoothOptimizers/amd-jl/branch/master" rel="nofollow"><img src="https://camo.githubusercontent.com/c9261a67e4587514d7f41c1c9053978fc29050c3/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f367772723772776c3771706f78336e792f6272616e63682f6d61737465723f7376673d74727565" alt="Build status" data-canonical-src="https://ci.appveyor.com/api/projects/status/6wrr7rwl7qpox3ny/branch/master?svg=true" style="max-width:100%;"></a>
<a href="https://cirrus-ci.com/github/JuliaSmoothOptimizers/AMD.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/f33c51665e81c6610871c9196ab0cc5568bbb5f0/68747470733a2f2f6170692e6369727275732d63692e636f6d2f6769746875622f4a756c6961536d6f6f74684f7074696d697a6572732f414d442e6a6c2e737667" alt="Build Status" data-canonical-src="https://api.cirrus-ci.com/github/JuliaSmoothOptimizers/AMD.jl.svg" style="max-width:100%;"></a>
<a href="https://codecov.io/github/JuliaSmoothOptimizers/AMD.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/13def6446fc1ac0fe7f118451cb6ac1242d8fb38/68747470733a2f2f636f6465636f762e696f2f6769746875622f4a756c6961536d6f6f74684f7074696d697a6572732f414d442e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="https://codecov.io/github/JuliaSmoothOptimizers/AMD.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
<p>Given a square sparse matrix, compute an approximate minimum degree ordering.
This package is an interface to the AMD library (Amestoy, Davis and Duff) and COLAMD library (Liromore, Davis, Gilberg an Ng).</p>
<h3><a id="user-content-installing" class="anchor" aria-hidden="true" href="#installing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installing</h3>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> ]
pkg<span class="pl-k">&gt;</span> add AMD
pkg<span class="pl-k">&gt;</span> test AMD</pre></div>
<h3><a id="user-content-algorithms" class="anchor" aria-hidden="true" href="#algorithms"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Algorithms</h3>
<p><strong>amd</strong>: an approximate minimum degree ordering algorithm for the sparse factorization of square matrices.</p>
<p><strong>symamd</strong>: an approximate minimum degree ordering algorithm for the sparse factorization of symmetric matrices.</p>
<p><strong>colamd</strong>: an approximate minimum degree column ordering algorithm for the sparse factorization of arbitrary, square or rectangular, matrices.</p>
<h3><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Examples</h3>
<p>In the simplest case:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> AMD
A <span class="pl-k">=</span> <span class="pl-c1">sprand</span>(<span class="pl-c1">10</span>, <span class="pl-c1">10</span>, <span class="pl-c1">.5</span>)
p_amd <span class="pl-k">=</span> <span class="pl-c1">amd</span>(A)
p_symamd <span class="pl-k">=</span> <span class="pl-c1">symamd</span>(A)
p_colamd <span class="pl-k">=</span> <span class="pl-c1">colamd</span>(A)</pre></div>
<p>If statistics on the permutation are of interest and/or for changing the
default control parameters:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> meta <span class="pl-k">=</span> <span class="pl-c1">Amd</span><span class="pl-c1">{Clong}</span>();  <span class="pl-c"><span class="pl-c">#</span> because A's index type is Int64 on my platform</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c"><span class="pl-c">#</span> optionally change meta.control: ?Amd</span>
julia<span class="pl-k">&gt;</span> p <span class="pl-k">=</span> <span class="pl-c1">amd</span>(A, meta)
julia<span class="pl-k">&gt;</span> <span class="pl-c1">print</span>(meta)
Control<span class="pl-k">:</span>
  dense row parameter<span class="pl-k">:</span> <span class="pl-c1">10.0</span>
  aggressive absorption<span class="pl-k">:</span> <span class="pl-c1">1.0</span>
Info<span class="pl-k">:</span>
  status<span class="pl-k">:</span> ok
  matrix size<span class="pl-k">:</span> <span class="pl-c1">10.0</span>
  number of nonzeros<span class="pl-k">:</span> <span class="pl-c1">54.0</span>
  pattern symmetry<span class="pl-k">:</span> <span class="pl-c1">0.5</span>
  number of nonzeros on diagonal<span class="pl-k">:</span> <span class="pl-c1">6.0</span>
  number of nonzeros <span class="pl-k">in</span> A <span class="pl-k">+</span> A<span class="pl-k">'</span>: <span class="pl-c1">72.0</span>
  number of dense columns<span class="pl-k">:</span> <span class="pl-c1">0.0</span>
  memory used<span class="pl-k">:</span> <span class="pl-c1">1408.0</span>
  number of garbage collections<span class="pl-k">:</span> <span class="pl-c1">0.0</span>
  approx number of nonzers <span class="pl-k">in</span> factor<span class="pl-k">:</span> <span class="pl-c1">38.0</span>
  number of float divides<span class="pl-k">:</span> <span class="pl-c1">38.0</span>
  number of float <span class="pl-k">*</span> or <span class="pl-k">-</span> <span class="pl-k">for</span> LDL<span class="pl-k">:</span> <span class="pl-c1">114.0</span>
  number of float <span class="pl-k">*</span> or <span class="pl-k">-</span> <span class="pl-k">for</span> LU<span class="pl-k">:</span> <span class="pl-c1">190.0</span>
  max nonzeros <span class="pl-k">in</span> any column of factor<span class="pl-k">:</span> <span class="pl-c1">8.0</span></pre></div>
<p>The <strong>amd</strong> algorithm computes a fill-reducing permutation based on the sparsity pattern of A + Aᵀ. The input pattern can be anything: diagonal entries will be ignored and the rest will be used to implicitly work on the pattern of A + Aᵀ. Thus if A is symmetric, it is sufficient to supply the strict lower or upper triangle only.</p>
<h3><a id="user-content-references" class="anchor" aria-hidden="true" href="#references"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>References</h3>
<ol>
<li>P. R. Amestoy, T. A. Davis and I. S. Duff. An Approximate Minimum Degree
Ordering Algorithm. <em>SIAM Journal on Matrix Analysis and Applications</em>, 17(4),
pp. 886–905, 1996.
DOI <a href="https://doi.org/10.1137/S0895479894278952" rel="nofollow">10.1137/S0895479894278952</a></li>
<li>P. R. Amestoy, T. A. Davis, and I. S. Duff. Algorithm 837: An approximate
minimum degree ordering algorithm. <em>ACM Transactions on Mathematical
Software</em>, 30(3), pp. 381–388, 2004.
DOI <a href="https://doi.org/10.1145/1024074.1024081" rel="nofollow">10.1145/1024074.1024081</a></li>
<li>T. A. Davis, J. R. Gilbert, S. Larimore, E. Ng. Algorithm 836: COLAMD,
an approximate column minimum degree ordering algorithm, <em>ACM
Transactions on Mathematical Software</em>, 30(3), pp. 377–380, 2004.
DOI <a href="https://doi.org/10.1145/1024074.1024080" rel="nofollow">10.1145/1024074.1024080</a></li>
</ol>
</article></div>