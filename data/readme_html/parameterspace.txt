<div id="readme" class="md" data-path="Readme.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-parameterspacejl" class="anchor" aria-hidden="true" href="#parameterspacejl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>ParameterSpace.jl</h1>
<p>General tuning tools for julia. Dive into the parameter space of functions or external programs.</p>
<p><a href="https://codecov.io/gh/JuliaAstroSim/ParameterSpace.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/31f514d831a43e1350fe6d503f2dc7a9de68c8b903922e7c89b13a3e47aba792/68747470733a2f2f636f6465636f762e696f2f67682f4a756c6961417374726f53696d2f506172616d6574657253706163652e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/JuliaAstroSim/ParameterSpace.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<h2><a id="user-content-install" class="anchor" aria-hidden="true" href="#install"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Install</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="]add ParameterSpace
using ParameterSpace
"><pre>]add ParameterSpace
<span class="pl-k">using</span> ParameterSpace</pre></div>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<p>Examples could be found in folder <code>examples</code></p>
<h3><a id="user-content-tuning-a-function" class="anchor" aria-hidden="true" href="#tuning-a-function"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Tuning a function</h3>
<p>Let's take a simple function for example:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="@inline g(x::Real, y::Real) = x * y
"><pre><span class="pl-c1">@inline</span> <span class="pl-en">g</span>(x<span class="pl-k">::</span><span class="pl-c1">Real</span>, y<span class="pl-k">::</span><span class="pl-c1">Real</span>) <span class="pl-k">=</span> x <span class="pl-k">*</span> y</pre></div>
<p>First construct the parameter space:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="params = [Parameter(&quot;x&quot;, 1, 0:2),
          Parameter(&quot;y&quot;, 2, 0:2)]
"><pre>params <span class="pl-k">=</span> [<span class="pl-c1">Parameter</span>(<span class="pl-s"><span class="pl-pds">"</span>x<span class="pl-pds">"</span></span>, <span class="pl-c1">1</span>, <span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">2</span>),
          <span class="pl-c1">Parameter</span>(<span class="pl-s"><span class="pl-pds">"</span>y<span class="pl-pds">"</span></span>, <span class="pl-c1">2</span>, <span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">2</span>)]</pre></div>
<p>which means there would be $3 \times 3 = 9$ combination of parameters in total, and <code>ParameterSpace</code> would help you run tests over all of them by calling the target function iterately:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="tuning = analyse_function(g, params)
"><pre>tuning <span class="pl-k">=</span> <span class="pl-c1">analyse_function</span>(g, params)</pre></div>
<p>The returns are stored by <code>DataFrames</code> to give you enough freedom in data processing</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; tuning = analyse_function(g, params)
9×3 DataFrame
 Row │ x    y    result 
     │ Any  Any  Any    
─────┼──────────────────
   1 │ 0    0    0
   2 │ 1    0    0
   3 │ 2    0    0
   4 │ 0    1    0
   5 │ 1    1    1
   6 │ 2    1    2
   7 │ 0    2    0
   8 │ 1    2    2
   9 │ 2    2    4
"><pre>julia<span class="pl-k">&gt;</span> tuning <span class="pl-k">=</span> <span class="pl-c1">analyse_function</span>(g, params)
<span class="pl-c1">9</span><span class="pl-k">×</span><span class="pl-c1">3</span> DataFrame
 Row │ x    y    result 
     │ Any  Any  Any    
─────┼──────────────────
   <span class="pl-c1">1</span> │ <span class="pl-c1">0</span>    <span class="pl-c1">0</span>    <span class="pl-c1">0</span>
   <span class="pl-c1">2</span> │ <span class="pl-c1">1</span>    <span class="pl-c1">0</span>    <span class="pl-c1">0</span>
   <span class="pl-c1">3</span> │ <span class="pl-c1">2</span>    <span class="pl-c1">0</span>    <span class="pl-c1">0</span>
   <span class="pl-c1">4</span> │ <span class="pl-c1">0</span>    <span class="pl-c1">1</span>    <span class="pl-c1">0</span>
   <span class="pl-c1">5</span> │ <span class="pl-c1">1</span>    <span class="pl-c1">1</span>    <span class="pl-c1">1</span>
   <span class="pl-c1">6</span> │ <span class="pl-c1">2</span>    <span class="pl-c1">1</span>    <span class="pl-c1">2</span>
   <span class="pl-c1">7</span> │ <span class="pl-c1">0</span>    <span class="pl-c1">2</span>    <span class="pl-c1">0</span>
   <span class="pl-c1">8</span> │ <span class="pl-c1">1</span>    <span class="pl-c1">2</span>    <span class="pl-c1">2</span>
   <span class="pl-c1">9</span> │ <span class="pl-c1">2</span>    <span class="pl-c1">2</span>    <span class="pl-c1">4</span></pre></div>
<p>If only tuning the second parameter <code>y</code> of function <code>g</code>, the other parameters should be set in order:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="params = [Parameter(&quot;y&quot;, 2, 0:0.1:0.5)]
"><pre>params <span class="pl-k">=</span> [<span class="pl-c1">Parameter</span>(<span class="pl-s"><span class="pl-pds">"</span>y<span class="pl-pds">"</span></span>, <span class="pl-c1">2</span>, <span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">0.1</span><span class="pl-k">:</span><span class="pl-c1">0.5</span>)]</pre></div>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt;     result = analyse_function(g, params, 1.0)
6×2 DataFrame
 Row │ y    result 
     │ Any  Any    
─────┼─────────────
   1 │ 0.0  0.0
   2 │ 0.1  0.1
   3 │ 0.2  0.2
   4 │ 0.3  0.3
   5 │ 0.4  0.4
   6 │ 0.5  0.5
"><pre>julia<span class="pl-k">&gt;</span>     result <span class="pl-k">=</span> <span class="pl-c1">analyse_function</span>(g, params, <span class="pl-c1">1.0</span>)
<span class="pl-c1">6</span><span class="pl-k">×</span><span class="pl-c1">2</span> DataFrame
 Row │ y    result 
     │ Any  Any    
─────┼─────────────
   <span class="pl-c1">1</span> │ <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>
   <span class="pl-c1">2</span> │ <span class="pl-c1">0.1</span>  <span class="pl-c1">0.1</span>
   <span class="pl-c1">3</span> │ <span class="pl-c1">0.2</span>  <span class="pl-c1">0.2</span>
   <span class="pl-c1">4</span> │ <span class="pl-c1">0.3</span>  <span class="pl-c1">0.3</span>
   <span class="pl-c1">5</span> │ <span class="pl-c1">0.4</span>  <span class="pl-c1">0.4</span>
   <span class="pl-c1">6</span> │ <span class="pl-c1">0.5</span>  <span class="pl-c1">0.5</span></pre></div>
<h3><a id="user-content-tuning-a-program" class="anchor" aria-hidden="true" href="#tuning-a-program"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Tuning a program</h3>
<p>It is assumed that all of the parameters are passed through parameter file. First you need to tell <code>ParameterSpace</code> how to run your program, by define a <code>Cmd</code>:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="command = `julia E:/ParameterSpace.jl/examples/simple_program/print.jl`
"><pre>command <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">`</span>julia E:/ParameterSpace.jl/examples/simple_program/print.jl<span class="pl-pds">`</span></span></pre></div>
<p>It may cause issues if you do not run the program from an absolute path.</p>
<p>Then write down the content of parameter file in formatted string:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="content = &quot;x = %d, y = %d&quot;
"><pre>content <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>x = %d, y = %d<span class="pl-pds">"</span></span></pre></div>
<p>Construct parameter space and use the tuning tool:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="params = [Parameter(&quot;x&quot;, 1, 0:2),
          Parameter(&quot;y&quot;, 2, 0:2)]

analyse_program(command, content, &quot;param.txt&quot;, params)
"><pre>params <span class="pl-k">=</span> [<span class="pl-c1">Parameter</span>(<span class="pl-s"><span class="pl-pds">"</span>x<span class="pl-pds">"</span></span>, <span class="pl-c1">1</span>, <span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">2</span>),
          <span class="pl-c1">Parameter</span>(<span class="pl-s"><span class="pl-pds">"</span>y<span class="pl-pds">"</span></span>, <span class="pl-c1">2</span>, <span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">2</span>)]

<span class="pl-c1">analyse_program</span>(command, content, <span class="pl-s"><span class="pl-pds">"</span>param.txt<span class="pl-pds">"</span></span>, params)</pre></div>
<p>where <code>"param.txt"</code> defines the name of parameter file.</p>
<p>Each set of parameters would be handled in a seperate sub-folder</p>
<p>There is no general way to pass data from a program to Julia, however it's easy and convenient to analyse the output files automatically if you could provide an anlysis function. The procedure has no difference from tuning a function, and the parameters of analysis function could be set with keyword <code>args::Union{Tuple,Array}</code>:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="function analyse(args...)
    ...
    return ...
end

analyse_program(command, content, &quot;param.txt&quot;, params, analyse, args = [])
"><pre><span class="pl-k">function</span> <span class="pl-en">analyse</span>(args<span class="pl-k">...</span>)
    <span class="pl-k">...</span>
    <span class="pl-k">return</span> <span class="pl-k">...</span>
<span class="pl-k">end</span>

<span class="pl-c1">analyse_program</span>(command, content, <span class="pl-s"><span class="pl-pds">"</span>param.txt<span class="pl-pds">"</span></span>, params, analyse, args <span class="pl-k">=</span> [])</pre></div>
<p>more details in <code>examples/simple_program/</code></p>
</article></div>