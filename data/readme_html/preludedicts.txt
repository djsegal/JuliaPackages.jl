<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-preludedicts-fundamental-apis-for-dictionaries-and-sets" class="anchor" aria-hidden="true" href="#preludedicts-fundamental-apis-for-dictionaries-and-sets"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>PreludeDicts: fundamental APIs for dictionaries and sets</h1>
<p dir="auto"><a href="https://juliapreludes.github.io/PreludeDicts.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/JuliaPreludes/PreludeDicts.jl/actions/workflows/ci.yml"><img src="https://github.com/JuliaPreludes/PreludeDicts.jl/actions/workflows/ci.yml/badge.svg" alt="CI" style="max-width: 100%;"></a>
<a href="https://github.com/JuliaTesting/Aqua.jl"><img src="https://raw.githubusercontent.com/JuliaTesting/Aqua.jl/master/badge.svg" alt="Aqua QA" style="max-width: 100%;"></a></p>
<p dir="auto">The primary function of PreludeDicts.jl is <code>modify!</code> which is a very flexible API (e.g., all
<code>Base</code> APIs can be implemented based on <code>modify!</code> efficiently) and also extensible (e.g.,
<a href="https://github.com/JuliaConcurrent/ConcurrentCollections.jl">lock-free dictionaries</a> can
support this API).</p>
<p dir="auto">PreludeDicts.jl also has functions <code>tryset!</code>, <code>trysetwith!</code>, <code>tryget</code> and <code>tryinsert!</code> using
efficient and debuggable error handling API
<a href="https://github.com/JuliaPreludes/Try.jl">Try.jl</a>.</p>
<p dir="auto">See the <a href="https://juliapreludes.github.io/PreludeDicts.jl/dev/" rel="nofollow">Documentation</a> for API
reference.</p>
<h2 dir="auto"><a id="user-content-tutorial" class="anchor" aria-hidden="true" href="#tutorial"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Tutorial</h2>
<h3 dir="auto"><a id="user-content-modify" class="anchor" aria-hidden="true" href="#modify"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>modify!</code></h3>
<p dir="auto"><code>modify!(f, dict. key)</code> provides a very powerful API for accessing and manipulating the
value associated with a key.  It takes a single-argument function <code>f</code> that takes</p>
<ul dir="auto">
<li><code>nothing</code> if <code>key</code> does not exist</li>
<li>a key-value pair if <code>key</code> has a value</li>
</ul>
<p dir="auto">as an argument and then can return</p>
<ul dir="auto">
<li><code>nothing</code> to delete the value</li>
<li><code>Some(value)</code> to insert the <code>value</code></li>
</ul>
<p dir="auto">The function <code>f</code> can also return, as an optimization:</p>
<ul dir="auto">
<li><code>Delete(data)</code> to delete the value but also propagating <code>data</code> to the caller</li>
<li><code>Keep(data)</code> to not change the value but propagating <code>data</code> to the caller</li>
</ul>
<p dir="auto">For example, <code>modify!</code> can be used to insert or set a value</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using PreludeDicts

julia&gt; dict = Dict(:a =&gt; 0);

julia&gt; modify!(Returns(Some(111)), dict, :a)
Some(111)

julia&gt; dict[:a]
111"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> PreludeDicts

julia<span class="pl-k">&gt;</span> dict <span class="pl-k">=</span> <span class="pl-c1">Dict</span>(<span class="pl-c1">:a</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">0</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">modify!</span>(<span class="pl-c1">Returns</span>(<span class="pl-c1">Some</span>(<span class="pl-c1">111</span>)), dict, <span class="pl-c1">:a</span>)
<span class="pl-c1">Some</span>(<span class="pl-c1">111</span>)

julia<span class="pl-k">&gt;</span> dict[<span class="pl-c1">:a</span>]
<span class="pl-c1">111</span></pre></div>
<p dir="auto">or delete a value</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; dict = Dict(:a =&gt; 0);

julia&gt; modify!(Returns(nothing), dict, :a)

julia&gt; haskey(dict, :a)
false"><pre>julia<span class="pl-k">&gt;</span> dict <span class="pl-k">=</span> <span class="pl-c1">Dict</span>(<span class="pl-c1">:a</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">0</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">modify!</span>(<span class="pl-c1">Returns</span>(<span class="pl-c1">nothing</span>), dict, <span class="pl-c1">:a</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">haskey</span>(dict, <span class="pl-c1">:a</span>)
<span class="pl-c1">false</span></pre></div>
<p dir="auto">or access the value</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; dict = Dict(:a =&gt; 111);

julia&gt; getvalue(x) = x === nothing ? nothing : Some(last(x));

julia&gt; modify!(getvalue, dict, :a)
Some(111)

julia&gt; modify!(getvalue, dict, :b) === nothing
true"><pre>julia<span class="pl-k">&gt;</span> dict <span class="pl-k">=</span> <span class="pl-c1">Dict</span>(<span class="pl-c1">:a</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">111</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-en">getvalue</span>(x) <span class="pl-k">=</span> x <span class="pl-k">===</span> <span class="pl-c1">nothing</span> <span class="pl-k">?</span> <span class="pl-c1">nothing</span> <span class="pl-k">:</span> <span class="pl-c1">Some</span>(<span class="pl-c1">last</span>(x));

julia<span class="pl-k">&gt;</span> <span class="pl-c1">modify!</span>(getvalue, dict, <span class="pl-c1">:a</span>)
<span class="pl-c1">Some</span>(<span class="pl-c1">111</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">modify!</span>(getvalue, dict, <span class="pl-c1">:b</span>) <span class="pl-k">===</span> <span class="pl-c1">nothing</span>
<span class="pl-c1">true</span></pre></div>
<p dir="auto"><code>modify!</code> is powerful because above operations can be dynamically controlled using the
function <code>f</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; inc!(dict, key) = modify!(dict, key) do slot
           if slot === nothing
               Some(1)
           else
               Some(last(slot) + 1)
           end
       end;

julia&gt; dict = Dict(:a =&gt; 111);

julia&gt; inc!(dict, :a)
Some(112)

julia&gt; inc!(dict, :b)
Some(1)

julia&gt; dict == Dict(:a =&gt; 112, :b =&gt; 1)
true"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-en">inc!</span>(dict, key) <span class="pl-k">=</span> <span class="pl-c1">modify!</span>(dict, key) <span class="pl-k">do</span> slot
           <span class="pl-k">if</span> slot <span class="pl-k">===</span> <span class="pl-c1">nothing</span>
               <span class="pl-c1">Some</span>(<span class="pl-c1">1</span>)
           <span class="pl-k">else</span>
               <span class="pl-c1">Some</span>(<span class="pl-c1">last</span>(slot) <span class="pl-k">+</span> <span class="pl-c1">1</span>)
           <span class="pl-k">end</span>
       <span class="pl-k">end</span>;

julia<span class="pl-k">&gt;</span> dict <span class="pl-k">=</span> <span class="pl-c1">Dict</span>(<span class="pl-c1">:a</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">111</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">inc!</span>(dict, <span class="pl-c1">:a</span>)
<span class="pl-c1">Some</span>(<span class="pl-c1">112</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">inc!</span>(dict, <span class="pl-c1">:b</span>)
<span class="pl-c1">Some</span>(<span class="pl-c1">1</span>)

julia<span class="pl-k">&gt;</span> dict <span class="pl-k">==</span> <span class="pl-c1">Dict</span>(<span class="pl-c1">:a</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">112</span>, <span class="pl-c1">:b</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1</span>)
<span class="pl-c1">true</span></pre></div>
<p dir="auto">If <code>modify!</code> is directly implemented (which is the case for <code>Dict</code> for some Julia versions),
it is more efficient than, e.g., <code>dict[key] = get(dict, key, 0) + 1</code> which requires two hash
function calls and probings.</p>
<h4 dir="auto"><a id="user-content-keep-and-delete" class="anchor" aria-hidden="true" href="#keep-and-delete"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>Keep</code> and <code>Delete</code></h4>
<p dir="auto">Note that <code>modify!(getvalue, dict, :a)</code> above is not maximally efficient since it re-inserts
the existing value.  As a (rather micro) optimization, <code>Keep</code> can be used instead</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; dict = Dict(:a =&gt; 111);

julia&gt; getvalue2(x) = x === nothing ? nothing : Keep(last(x));

julia&gt; y = modify!(getvalue2, dict, :a)
Keep(111)

julia&gt; y[]  # get the wrapped data
111

julia&gt; modify!(getvalue2, dict, :b) === nothing
true"><pre>julia<span class="pl-k">&gt;</span> dict <span class="pl-k">=</span> <span class="pl-c1">Dict</span>(<span class="pl-c1">:a</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">111</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-en">getvalue2</span>(x) <span class="pl-k">=</span> x <span class="pl-k">===</span> <span class="pl-c1">nothing</span> <span class="pl-k">?</span> <span class="pl-c1">nothing</span> <span class="pl-k">:</span> <span class="pl-c1">Keep</span>(<span class="pl-c1">last</span>(x));

julia<span class="pl-k">&gt;</span> y <span class="pl-k">=</span> <span class="pl-c1">modify!</span>(getvalue2, dict, <span class="pl-c1">:a</span>)
<span class="pl-c1">Keep</span>(<span class="pl-c1">111</span>)

julia<span class="pl-k">&gt;</span> y[]  <span class="pl-c"><span class="pl-c">#</span> get the wrapped data</span>
<span class="pl-c1">111</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">modify!</span>(getvalue2, dict, <span class="pl-c1">:b</span>) <span class="pl-k">===</span> <span class="pl-c1">nothing</span>
<span class="pl-c1">true</span></pre></div>
<p dir="auto">To help implementing functions like <code>pop!</code> efficiently, <code>modify</code> also supports <code>Delete</code> that
signals the deletion like <code>nothing</code> but can have a data payload.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; y = modify!(Delete, dict, :a)
Delete(:a =&gt; 111)

julia&gt; y[]  # get the wrapped data
:a =&gt; 111

julia&gt; haskey(dict, :a)
false"><pre>julia<span class="pl-k">&gt;</span> y <span class="pl-k">=</span> <span class="pl-c1">modify!</span>(Delete, dict, <span class="pl-c1">:a</span>)
<span class="pl-c1">Delete</span>(<span class="pl-c1">:a</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">111</span>)

julia<span class="pl-k">&gt;</span> y[]  <span class="pl-c"><span class="pl-c">#</span> get the wrapped data</span>
<span class="pl-c1">:a</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">111</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">haskey</span>(dict, <span class="pl-c1">:a</span>)
<span class="pl-c1">false</span></pre></div>
<h3 dir="auto"><a id="user-content-trysetwith" class="anchor" aria-hidden="true" href="#trysetwith"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>trysetwith!</code></h3>
<p dir="auto"><code>trysetwith!(f, dict, key)</code> is like <code>get!(f, dict, key)</code> but the returned value esncode
if the value returned by <code>f</code> is inserted or not.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; dict = Dict(:a =&gt; 111);

julia&gt; trysetwith!(Returns(222), dict, :a)
Try.Err: :a =&gt; 111

julia&gt; trysetwith!(Returns(222), dict, :b)
Try.Ok: :b =&gt; 222

julia&gt; dict == Dict(:a =&gt; 111, :b =&gt; 222)
true"><pre>julia<span class="pl-k">&gt;</span> dict <span class="pl-k">=</span> <span class="pl-c1">Dict</span>(<span class="pl-c1">:a</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">111</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">trysetwith!</span>(<span class="pl-c1">Returns</span>(<span class="pl-c1">222</span>), dict, <span class="pl-c1">:a</span>)
Try<span class="pl-k">.</span>Err<span class="pl-k">:</span> <span class="pl-c1">:a</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">111</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">trysetwith!</span>(<span class="pl-c1">Returns</span>(<span class="pl-c1">222</span>), dict, <span class="pl-c1">:b</span>)
Try<span class="pl-k">.</span>Ok<span class="pl-k">:</span> <span class="pl-c1">:b</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">222</span>

julia<span class="pl-k">&gt;</span> dict <span class="pl-k">==</span> <span class="pl-c1">Dict</span>(<span class="pl-c1">:a</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">111</span>, <span class="pl-c1">:b</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">222</span>)
<span class="pl-c1">true</span></pre></div>
<h3 dir="auto"><a id="user-content-tryset" class="anchor" aria-hidden="true" href="#tryset"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>tryset!</code></h3>
<p dir="auto"><code>tryset!(dict, key, value)</code> is like <code>get!(dict, key, value)</code> but the returned value encodes
if the <code>value</code> is inserted or not.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; dict = Dict(:a =&gt; 111);

julia&gt; tryset!(dict, :a, 222)
Try.Err: :a =&gt; 111

julia&gt; tryset!(dict, :b, 222)
Try.Ok: :b =&gt; 222

julia&gt; dict == Dict(:a =&gt; 111, :b =&gt; 222)
true"><pre>julia<span class="pl-k">&gt;</span> dict <span class="pl-k">=</span> <span class="pl-c1">Dict</span>(<span class="pl-c1">:a</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">111</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">tryset!</span>(dict, <span class="pl-c1">:a</span>, <span class="pl-c1">222</span>)
Try<span class="pl-k">.</span>Err<span class="pl-k">:</span> <span class="pl-c1">:a</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">111</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">tryset!</span>(dict, <span class="pl-c1">:b</span>, <span class="pl-c1">222</span>)
Try<span class="pl-k">.</span>Ok<span class="pl-k">:</span> <span class="pl-c1">:b</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">222</span>

julia<span class="pl-k">&gt;</span> dict <span class="pl-k">==</span> <span class="pl-c1">Dict</span>(<span class="pl-c1">:a</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">111</span>, <span class="pl-c1">:b</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">222</span>)
<span class="pl-c1">true</span></pre></div>
<h3 dir="auto"><a id="user-content-tryget" class="anchor" aria-hidden="true" href="#tryget"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>tryget</code></h3>
<p dir="auto"><code>tryget(dict, key)</code> is similar to <code>dict[key]</code> but the returned value encodes if the <code>key</code>
exists or not, instead of throwing.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; dict = Dict(:a =&gt; 111);

julia&gt; tryget(dict, :a)
Try.Ok: 111

julia&gt; tryget(dict, :b)
Try.Err: TypedKeyError: key :b not found"><pre>julia<span class="pl-k">&gt;</span> dict <span class="pl-k">=</span> <span class="pl-c1">Dict</span>(<span class="pl-c1">:a</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">111</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">tryget</span>(dict, <span class="pl-c1">:a</span>)
Try<span class="pl-k">.</span>Ok<span class="pl-k">:</span> <span class="pl-c1">111</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">tryget</span>(dict, <span class="pl-c1">:b</span>)
Try<span class="pl-k">.</span>Err<span class="pl-k">:</span> TypedKeyError<span class="pl-k">:</span> key <span class="pl-c1">:b</span> not found</pre></div>
<h3 dir="auto"><a id="user-content-tryinsert" class="anchor" aria-hidden="true" href="#tryinsert"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>tryinsert!</code></h3>
<p dir="auto"><code>tryinsert!(set, x)</code> is like <code>push!(set, x)</code> but the the returned value encodes if the item
<code>x</code> is inserted or not.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; set = Set([111]);

julia&gt; tryinsert!(set, 111)
Try.Err: 111

julia&gt; tryinsert!(set, 222)
Try.Ok: 222

julia&gt; set == Set([111, 222])
true"><pre>julia<span class="pl-k">&gt;</span> set <span class="pl-k">=</span> <span class="pl-c1">Set</span>([<span class="pl-c1">111</span>]);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">tryinsert!</span>(set, <span class="pl-c1">111</span>)
Try<span class="pl-k">.</span>Err<span class="pl-k">:</span> <span class="pl-c1">111</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">tryinsert!</span>(set, <span class="pl-c1">222</span>)
Try<span class="pl-k">.</span>Ok<span class="pl-k">:</span> <span class="pl-c1">222</span>

julia<span class="pl-k">&gt;</span> set <span class="pl-k">==</span> <span class="pl-c1">Set</span>([<span class="pl-c1">111</span>, <span class="pl-c1">222</span>])
<span class="pl-c1">true</span></pre></div>
<h2 dir="auto"><a id="user-content-discussion" class="anchor" aria-hidden="true" href="#discussion"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Discussion</h2>
<h3 dir="auto"><a id="user-content-benchmarks" class="anchor" aria-hidden="true" href="#benchmarks"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Benchmarks</h3>
<p dir="auto"><code>modify!</code>-based implementations show 40% to 50% performance improvements in some benchmarks:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using PreludeDictsBenchmarks

julia&gt; suite = PreludeDictsBenchmarks.setup();

julia&gt; results = run(suite)
2-element BenchmarkTools.BenchmarkGroup:
  tags: []
  &quot;TrySet&quot; =&gt; 2-element BenchmarkTools.BenchmarkGroup:
          tags: []
          &quot;impl=:tryset!&quot; =&gt; Trial(27.639 μs)
          &quot;impl=:tryset_generic!&quot; =&gt; Trial(39.650 μs)
  &quot;Increments&quot; =&gt; 2-element BenchmarkTools.BenchmarkGroup:
          tags: []
          &quot;impl=:modify!&quot; =&gt; Trial(1.001 ms)
          &quot;impl=:modify_generic!&quot; =&gt; Trial(1.587 ms)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> PreludeDictsBenchmarks

julia<span class="pl-k">&gt;</span> suite <span class="pl-k">=</span> PreludeDictsBenchmarks<span class="pl-k">.</span><span class="pl-c1">setup</span>();

julia<span class="pl-k">&gt;</span> results <span class="pl-k">=</span> <span class="pl-c1">run</span>(suite)
<span class="pl-c1">2</span><span class="pl-k">-</span>element BenchmarkTools<span class="pl-k">.</span>BenchmarkGroup<span class="pl-k">:</span>
  tags<span class="pl-k">:</span> []
  <span class="pl-s"><span class="pl-pds">"</span>TrySet<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">2</span><span class="pl-k">-</span>element BenchmarkTools<span class="pl-k">.</span>BenchmarkGroup<span class="pl-k">:</span>
          tags<span class="pl-k">:</span> []
          <span class="pl-s"><span class="pl-pds">"</span>impl=:tryset!<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">Trial</span>(<span class="pl-c1">27.639</span> μs)
          <span class="pl-s"><span class="pl-pds">"</span>impl=:tryset_generic!<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">Trial</span>(<span class="pl-c1">39.650</span> μs)
  <span class="pl-s"><span class="pl-pds">"</span>Increments<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">2</span><span class="pl-k">-</span>element BenchmarkTools<span class="pl-k">.</span>BenchmarkGroup<span class="pl-k">:</span>
          tags<span class="pl-k">:</span> []
          <span class="pl-s"><span class="pl-pds">"</span>impl=:modify!<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">Trial</span>(<span class="pl-c1">1.001</span> ms)
          <span class="pl-s"><span class="pl-pds">"</span>impl=:modify_generic!<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">Trial</span>(<span class="pl-c1">1.587</span> ms)</pre></div>
<p dir="auto">where the implementations (<code>impl</code>) with <code>_generic!</code> suffix uses the generic implementation
that is not written in terms of the direct implementation of <code>modify!</code> that touches the
dictionary internals.</p>
<p dir="auto">See <a href="benchmark/PreludeDictsBenchmarks"><code>benchmark/PreludeDictsBenchmarks</code></a> for benchmark
code.</p>
<h3 dir="auto"><a id="user-content-deriving-abstractdict-api-using-modify" class="anchor" aria-hidden="true" href="#deriving-abstractdict-api-using-modify"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Deriving <code>AbstractDict</code> API using <code>modify!</code></h3>
<p dir="auto">Various efficient <code>AbstractDict</code> API implementations can be derived from <code>modify!</code>, showing
that this is a powerful API basis:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; function getindex′(dict, key)
           y = modify!(Keep, dict, key)
           y === nothing &amp;&amp; throw(KeyError(key))
           return last(y[])
       end;

julia&gt; getindex′(Dict(:a =&gt; 111), :a)
111

julia&gt; setindex′!(dict, value, key) = modify!(Returns(Some(value)), dict, key);

julia&gt; dict = Dict();

julia&gt; setindex′!(dict, 111, :a);

julia&gt; dict[:a]
111

julia&gt; function pop′!(dict, key)
           pair = modify!(Delete, dict, key)[]
           pair === nothing &amp;&amp; throw(KeyError(key))
           return last(pair)
       end;

julia&gt; pop′!(dict, :a)
111

julia&gt; dict == Dict()
true

julia&gt; function get′!(f, dict, key)
           y = modify!(dict, key) do pair
               if pair === nothing
                   Some(f())
               else
                   Keep(last(pair))
               end
           end
           return y isa Keep ? y[] : something(y)
       end;

julia&gt; get′!(() -&gt; 222, dict, :a)
222

julia&gt; dict[:a]
222

julia&gt; get′!(() -&gt; 333, dict, :a)
222

julia&gt; dict[:a]
222"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">function</span> <span class="pl-en">getindex′</span>(dict, key)
           y <span class="pl-k">=</span> <span class="pl-c1">modify!</span>(Keep, dict, key)
           y <span class="pl-k">===</span> <span class="pl-c1">nothing</span> <span class="pl-k">&amp;&amp;</span> <span class="pl-c1">throw</span>(<span class="pl-c1">KeyError</span>(key))
           <span class="pl-k">return</span> <span class="pl-c1">last</span>(y[])
       <span class="pl-k">end</span>;

julia<span class="pl-k">&gt;</span> <span class="pl-c1">getindex′</span>(<span class="pl-c1">Dict</span>(<span class="pl-c1">:a</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">111</span>), <span class="pl-c1">:a</span>)
<span class="pl-c1">111</span>

julia<span class="pl-k">&gt;</span> <span class="pl-en">setindex′!</span>(dict, value, key) <span class="pl-k">=</span> <span class="pl-c1">modify!</span>(<span class="pl-c1">Returns</span>(<span class="pl-c1">Some</span>(value)), dict, key);

julia<span class="pl-k">&gt;</span> dict <span class="pl-k">=</span> <span class="pl-c1">Dict</span>();

julia<span class="pl-k">&gt;</span> <span class="pl-c1">setindex′!</span>(dict, <span class="pl-c1">111</span>, <span class="pl-c1">:a</span>);

julia<span class="pl-k">&gt;</span> dict[<span class="pl-c1">:a</span>]
<span class="pl-c1">111</span>

julia<span class="pl-k">&gt;</span> <span class="pl-k">function</span> <span class="pl-en">pop′!</span>(dict, key)
           pair <span class="pl-k">=</span> <span class="pl-c1">modify!</span>(Delete, dict, key)[]
           pair <span class="pl-k">===</span> <span class="pl-c1">nothing</span> <span class="pl-k">&amp;&amp;</span> <span class="pl-c1">throw</span>(<span class="pl-c1">KeyError</span>(key))
           <span class="pl-k">return</span> <span class="pl-c1">last</span>(pair)
       <span class="pl-k">end</span>;

julia<span class="pl-k">&gt;</span> <span class="pl-c1">pop′!</span>(dict, <span class="pl-c1">:a</span>)
<span class="pl-c1">111</span>

julia<span class="pl-k">&gt;</span> dict <span class="pl-k">==</span> <span class="pl-c1">Dict</span>()
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> <span class="pl-k">function</span> <span class="pl-en">get′!</span>(f, dict, key)
           y <span class="pl-k">=</span> <span class="pl-c1">modify!</span>(dict, key) <span class="pl-k">do</span> pair
               <span class="pl-k">if</span> pair <span class="pl-k">===</span> <span class="pl-c1">nothing</span>
                   <span class="pl-c1">Some</span>(<span class="pl-c1">f</span>())
               <span class="pl-k">else</span>
                   <span class="pl-c1">Keep</span>(<span class="pl-c1">last</span>(pair))
               <span class="pl-k">end</span>
           <span class="pl-k">end</span>
           <span class="pl-k">return</span> y <span class="pl-k">isa</span> Keep <span class="pl-k">?</span> y[] <span class="pl-k">:</span> <span class="pl-c1">something</span>(y)
       <span class="pl-k">end</span>;

julia<span class="pl-k">&gt;</span> <span class="pl-c1">get′!</span>(() <span class="pl-k">-&gt;</span> <span class="pl-c1">222</span>, dict, <span class="pl-c1">:a</span>)
<span class="pl-c1">222</span>

julia<span class="pl-k">&gt;</span> dict[<span class="pl-c1">:a</span>]
<span class="pl-c1">222</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">get′!</span>(() <span class="pl-k">-&gt;</span> <span class="pl-c1">333</span>, dict, <span class="pl-c1">:a</span>)
<span class="pl-c1">222</span>

julia<span class="pl-k">&gt;</span> dict[<span class="pl-c1">:a</span>]
<span class="pl-c1">222</span></pre></div>
<h3 dir="auto"><a id="user-content-comparison-to-token-based-api" class="anchor" aria-hidden="true" href="#comparison-to-token-based-api"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Comparison to token-based API</h3>
<p dir="auto">Other dictionary interfaces have been explored.
<a href="https://github.com/andyferris/Dictionaries.jl">Dictionaries.jl</a> has a token-based API to
avoid repeatedly calling hash function and probings.  Other languages have similar
mechanism. For example, Rust's <code>HashMap</code> has the <a href="https://doc.rust-lang.org/std/collections/hash_map/enum.Entry.html" rel="nofollow"><code>Entry</code>
API</a> that achieves the
same effect.  However, since Julia has coroutine (<code>Task</code>), the token system is "isomorphic"
to <code>modify!</code> in the sense that one can be implemented in terms of another (see below).</p>
<p dir="auto">More importantly, <code>modify!</code> gives more freedom to <em>the dictionary implementer</em> in how the
function <code>f</code> passed by the user is called.  For example, in lock-free dictionaries, it may
be possible that <code>f</code> is called multiple times if multiple tasks try to update the same slot
concurrently.  Indeed,
<a href="https://github.com/JuliaConcurrent/ConcurrentCollections.jl">ConcurrentCollections</a> uses a
similar API to manipulate <code>ConcurrentDict</code>.  (TODO: Use PreludeDicts.jl in
ConcurrentCollections.jl.)</p>
<h4 dir="auto"><a id="user-content-token-api-in-terms-of-modify-using-a-coroutine" class="anchor" aria-hidden="true" href="#token-api-in-terms-of-modify-using-a-coroutine"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Token API in terms of <code>modify!</code> using a coroutine</h4>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="struct Token  # not specializing for fields for simplicity
    task::Task
    key::Any
    state::Union{Nothing,Pair}
end

function gettoken(dict, key)
    parent = current_task()
    task = @task begin
        y = modify!(dict, key) do state
            yieldto(parent, state)
        end
        yieldto(parent, y)
    end
    return Token(task, key, yieldto(task))
end

function Base.getindex(token::Token)
    state = token.state
    state === nothing &amp;&amp; throw(KeyError(token.key))
    return last(state)
end

Base.setindex!(token::Token, value) = yieldto(token.task, Some(value))

dict = Dict()

tk = gettoken(dict, :a)
tk[] = 111

tk = gettoken(dict, :a)
tk[]
# output
111"><pre><span class="pl-k">struct</span> Token  <span class="pl-c"><span class="pl-c">#</span> not specializing for fields for simplicity</span>
    task<span class="pl-k">::</span><span class="pl-c1">Task</span>
    key<span class="pl-k">::</span><span class="pl-c1">Any</span>
    state<span class="pl-k">::</span><span class="pl-c1">Union{Nothing,Pair}</span>
<span class="pl-k">end</span>

<span class="pl-k">function</span> <span class="pl-en">gettoken</span>(dict, key)
    parent <span class="pl-k">=</span> <span class="pl-c1">current_task</span>()
    task <span class="pl-k">=</span> <span class="pl-c1">@task</span> <span class="pl-k">begin</span>
        y <span class="pl-k">=</span> <span class="pl-c1">modify!</span>(dict, key) <span class="pl-k">do</span> state
            <span class="pl-c1">yieldto</span>(parent, state)
        <span class="pl-k">end</span>
        <span class="pl-c1">yieldto</span>(parent, y)
    <span class="pl-k">end</span>
    <span class="pl-k">return</span> <span class="pl-c1">Token</span>(task, key, <span class="pl-c1">yieldto</span>(task))
<span class="pl-k">end</span>

<span class="pl-k">function</span> Base<span class="pl-k">.</span><span class="pl-en">getindex</span>(token<span class="pl-k">::</span><span class="pl-c1">Token</span>)
    state <span class="pl-k">=</span> token<span class="pl-k">.</span>state
    state <span class="pl-k">===</span> <span class="pl-c1">nothing</span> <span class="pl-k">&amp;&amp;</span> <span class="pl-c1">throw</span>(<span class="pl-c1">KeyError</span>(token<span class="pl-k">.</span>key))
    <span class="pl-k">return</span> <span class="pl-c1">last</span>(state)
<span class="pl-k">end</span>

Base<span class="pl-k">.</span><span class="pl-en">setindex!</span>(token<span class="pl-k">::</span><span class="pl-c1">Token</span>, value) <span class="pl-k">=</span> <span class="pl-c1">yieldto</span>(token<span class="pl-k">.</span>task, <span class="pl-c1">Some</span>(value))

dict <span class="pl-k">=</span> <span class="pl-c1">Dict</span>()

tk <span class="pl-k">=</span> <span class="pl-c1">gettoken</span>(dict, <span class="pl-c1">:a</span>)
tk[] <span class="pl-k">=</span> <span class="pl-c1">111</span>

tk <span class="pl-k">=</span> <span class="pl-c1">gettoken</span>(dict, <span class="pl-c1">:a</span>)
tk[]
<span class="pl-c"><span class="pl-c">#</span> output</span>
<span class="pl-c1">111</span></pre></div>
</article></div>