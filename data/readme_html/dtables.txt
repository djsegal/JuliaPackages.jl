<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-dtables" class="anchor" aria-hidden="true" href="#dtables"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>DTables</h1>
<p dir="auto">Distributed table structures and data manipulation operations built on top of <a href="https://github.com/JuliaParallel/Dagger.jl">Dagger.jl</a></p>
<p dir="auto"><a href="https://juliaparallel.github.io/DTables.jl/dev/" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/juliaparallel/DTables.jl/actions/workflows/CI.yml?query=branch%3Amain"><img src="https://github.com/juliaparallel/DTables.jl/actions/workflows/CI.yml/badge.svg?branch=main" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/juliaparallel/DTables.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/691e01b8dbfb55e89b2c4f5a9944fbc4ee7e82ac8155f58e98c9dde8131f2d2b/68747470733a2f2f636f6465636f762e696f2f67682f6a756c6961706172616c6c656c2f445461626c65732e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/juliaparallel/DTables.jl/branch/main/graph/badge.svg" style="max-width: 100%;"></a>
<a href="https://github.com/invenia/BlueStyle"><img src="https://camo.githubusercontent.com/c18fbaa52d94d16b90b19701fc90d289b8a5bb920c74c79bab200b14e75420a4/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c75652d3434393564312e737667" alt="Code Style: Blue" data-canonical-src="https://img.shields.io/badge/code%20style-blue-4495d1.svg" style="max-width: 100%;"></a></p>
<h1 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h1>
<p dir="auto">The package registered in the general repository, so you can add it by typing:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; ]add DTables"><pre>julia<span class="pl-k">&gt;</span> ]add DTables</pre></div>
<h1 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h1>
<p dir="auto">Below you can find a quick example on how to get started with DTables.</p>
<p dir="auto">There's a lot more you can do though, so please refer to the documentation!</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# launch a Julia session with threads/workers

julia&gt; using DTables

julia&gt; dt = DTable((a=rand(100), b=rand(100)), 10)
DTable with 10 partitions
Tabletype: NamedTuple

julia&gt; m = map(r -&gt; (x=sum(r), id=Threads.threadid(),), dt)
DTable with 10 partitions
Tabletype: NamedTuple

julia&gt; xsum = reduce((x, y) -&gt; x + y, m, init=0, cols=[:x])
EagerThunk (running)

julia&gt; threads_used = reduce((acc, el) -&gt; union(acc, el), m, init=Set(), cols=[:id])
EagerThunk (running)

julia&gt; fetch(xsum)
(x = 95.71209812014976,)

julia&gt; fetch(threads_used)
(id = Set(Any[5, 4, 6, 13, 2, 10, 9, 12, 8, 3]),)"><pre><span class="pl-c"><span class="pl-c">#</span> launch a Julia session with threads/workers</span>

julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> DTables

julia<span class="pl-k">&gt;</span> dt <span class="pl-k">=</span> <span class="pl-c1">DTable</span>((a<span class="pl-k">=</span><span class="pl-c1">rand</span>(<span class="pl-c1">100</span>), b<span class="pl-k">=</span><span class="pl-c1">rand</span>(<span class="pl-c1">100</span>)), <span class="pl-c1">10</span>)
DTable with <span class="pl-c1">10</span> partitions
Tabletype<span class="pl-k">:</span> NamedTuple

julia<span class="pl-k">&gt;</span> m <span class="pl-k">=</span> <span class="pl-c1">map</span>(r <span class="pl-k">-&gt;</span> (x<span class="pl-k">=</span><span class="pl-c1">sum</span>(r), id<span class="pl-k">=</span>Threads<span class="pl-k">.</span><span class="pl-c1">threadid</span>(),), dt)
DTable with <span class="pl-c1">10</span> partitions
Tabletype<span class="pl-k">:</span> NamedTuple

julia<span class="pl-k">&gt;</span> xsum <span class="pl-k">=</span> <span class="pl-c1">reduce</span>((x, y) <span class="pl-k">-&gt;</span> x <span class="pl-k">+</span> y, m, init<span class="pl-k">=</span><span class="pl-c1">0</span>, cols<span class="pl-k">=</span>[<span class="pl-c1">:x</span>])
EagerThunk (running)

julia<span class="pl-k">&gt;</span> threads_used <span class="pl-k">=</span> <span class="pl-c1">reduce</span>((acc, el) <span class="pl-k">-&gt;</span> <span class="pl-c1">union</span>(acc, el), m, init<span class="pl-k">=</span><span class="pl-c1">Set</span>(), cols<span class="pl-k">=</span>[<span class="pl-c1">:id</span>])
EagerThunk (running)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">fetch</span>(xsum)
(x <span class="pl-k">=</span> <span class="pl-c1">95.71209812014976</span>,)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">fetch</span>(threads_used)
(id <span class="pl-k">=</span> <span class="pl-c1">Set</span>(Any[<span class="pl-c1">5</span>, <span class="pl-c1">4</span>, <span class="pl-c1">6</span>, <span class="pl-c1">13</span>, <span class="pl-c1">2</span>, <span class="pl-c1">10</span>, <span class="pl-c1">9</span>, <span class="pl-c1">12</span>, <span class="pl-c1">8</span>, <span class="pl-c1">3</span>]),)</pre></div>
</article></div>