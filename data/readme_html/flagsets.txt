<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-flagsetsjl" class="anchor" aria-hidden="true" href="#flagsetsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>FlagSets.jl</h1>
<p><code>FlagSet.jl</code> provides an <code>Enum</code>-like type for bit flag option values. The main motivations
are:</p>
<ol>
<li>Flags have implicit numbering with incrementing powers of 2.</li>
<li>Binary OR (<code>|</code>), AND (<code>&amp;</code>) and XOR(<code>‚äª</code>) operations are supported among members.</li>
<li>Set operations like <code>union</code>, <code>intersect</code>, <code>setdiff</code>, <code>in</code> and <code>issubset</code> are also
supported.</li>
<li>Values are pretty-printed, showing the FlagSet type and each flag set.</li>
</ol>
<p>This implementation is based on <a href="https://github.com/jmert/BitFlags.jl">BitFlags</a>, with
some minor differences:</p>
<ol>
<li>Each flag set is treated as a set of flags, represented by <code>Symbol</code>s, which is
associated to an <code>Integer</code> (whose bits 1 corresponds to the flags in the set).</li>
<li>The empty flag set (corresponding to 0) is always valid.</li>
<li>The <code>@flagset</code> macro doesn't create a constant for each flag.</li>
</ol>
<h2><a id="user-content-basic-usage" class="anchor" aria-hidden="true" href="#basic-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Basic usage</h2>
<p>To create a new <code>FlagSet</code> type, use the <code>@flagset</code> macro, provide a name, an
optional integer type, and a list of the flag names (and optional values).
A new definition can be given in inline form:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="@flagset FlagSetName[::BaseType] value1[=x] value2[=y]
"><pre><span class="pl-c1">@flagset</span> FlagSetName[<span class="pl-k">::</span><span class="pl-c1">BaseType</span>] value1[<span class="pl-k">=</span>x] value2[<span class="pl-k">=</span>y]</pre></div>
<p>or as a block definition:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="@flagset FlagSetName[::BaseType] begin
    value1[=x]
    value2[=y]
end
"><pre><span class="pl-c1">@flagset</span> FlagSetName[<span class="pl-k">::</span><span class="pl-c1">BaseType</span>] <span class="pl-k">begin</span>
    value1[<span class="pl-k">=</span>x]
    value2[<span class="pl-k">=</span>y]
<span class="pl-k">end</span></pre></div>
<p>Automatic numbering starts at 1. In the following example, we build an 8-bit <code>FlagSet</code>
with no value for bit 3 (value of 4).</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; @flagset FontFlags::UInt8 bold italic large=8
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">@flagset</span> FontFlags<span class="pl-k">::</span><span class="pl-c1">UInt8</span> bold italic large<span class="pl-k">=</span><span class="pl-c1">8</span></pre></div>
<p>Instances can be created from integers or flag names and composed with bitwise operations</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; FontFlags(1)
FontFlags(:bold) = 0x01

julia&gt; FontFlags(:bold, :italic)
FontFlags(:bold, :italic) = 0x03

julia&gt; FontFlags(3) | FontFlags(8)
FontFlags(:bold, :italic, :large) = 0x0b
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">FontFlags</span>(<span class="pl-c1">1</span>)
<span class="pl-en">FontFlags</span>(<span class="pl-c1">:bold</span>) <span class="pl-k">=</span> <span class="pl-c1">0x01</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">FontFlags</span>(<span class="pl-c1">:bold</span>, <span class="pl-c1">:italic</span>)
<span class="pl-en">FontFlags</span>(<span class="pl-c1">:bold</span>, <span class="pl-c1">:italic</span>) <span class="pl-k">=</span> <span class="pl-c1">0x03</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">FontFlags</span>(<span class="pl-c1">3</span>) <span class="pl-k">|</span> <span class="pl-c1">FontFlags</span>(<span class="pl-c1">8</span>)
<span class="pl-en">FontFlags</span>(<span class="pl-c1">:bold</span>, <span class="pl-c1">:italic</span>, <span class="pl-c1">:large</span>) <span class="pl-k">=</span> <span class="pl-c1">0x0b</span></pre></div>
<p>Flag sets support iteration and other set operations</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; for flag in FontFlags(3); println(flag) end
bold
italic

julia&gt; :bold in FontFlags(3)
true
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">for</span> flag <span class="pl-k">in</span> <span class="pl-c1">FontFlags</span>(<span class="pl-c1">3</span>); <span class="pl-c1">println</span>(flag) <span class="pl-k">end</span>
bold
italic

julia<span class="pl-k">&gt;</span> <span class="pl-c1">:bold</span> <span class="pl-k">in</span> <span class="pl-c1">FontFlags</span>(<span class="pl-c1">3</span>)
<span class="pl-c1">true</span></pre></div>
<p>Conversion to and from integers is permitted, but only when the integer contains valid
bits for the flag set type.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; Int(FontFlags(:bold))
1

julia&gt; Integer(FontFlags(:italic))    # Abstract Integer uses native UInt8 type
0x02

julia&gt; FontFlags(9)
FontFlags(:bold, :large) = 0x09

julia&gt; FontFlags(4)
ERROR: ArgumentError: invalid value for FlagSet FontFlags: 4
Stacktrace:
...
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">Int</span>(<span class="pl-c1">FontFlags</span>(<span class="pl-c1">:bold</span>))
<span class="pl-c1">1</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">Integer</span>(<span class="pl-c1">FontFlags</span>(<span class="pl-c1">:italic</span>))    <span class="pl-c"><span class="pl-c">#</span> Abstract Integer uses native UInt8 type</span>
<span class="pl-c1">0x02</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">FontFlags</span>(<span class="pl-c1">9</span>)
<span class="pl-en">FontFlags</span>(<span class="pl-c1">:bold</span>, <span class="pl-c1">:large</span>) <span class="pl-k">=</span> <span class="pl-c1">0x09</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">FontFlags</span>(<span class="pl-c1">4</span>)
ERROR<span class="pl-k">:</span> ArgumentError<span class="pl-k">:</span> invalid value <span class="pl-k">for</span> FlagSet FontFlags<span class="pl-k">:</span> <span class="pl-c1">4</span>
Stacktrace<span class="pl-k">:</span>
<span class="pl-k">...</span></pre></div>
<p>The empty and the full set can be created with <code>typemin</code> and <code>typemax</code> (which is
consistent with these function definitions).</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; typemin(FontFlags)
FontFlags() = 0x00

julia&gt; typemax(FontFlags)
FontFlags(:bold, :italic, :large) = 0x0b
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">typemin</span>(FontFlags)
<span class="pl-en">FontFlags</span>() <span class="pl-k">=</span> <span class="pl-c1">0x00</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">typemax</span>(FontFlags)
<span class="pl-en">FontFlags</span>(<span class="pl-c1">:bold</span>, <span class="pl-c1">:italic</span>, <span class="pl-c1">:large</span>) <span class="pl-k">=</span> <span class="pl-c1">0x0b</span></pre></div>
<h2><a id="user-content-printing" class="anchor" aria-hidden="true" href="#printing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Printing</h2>
<p>Printing a <code>FlagSet</code> subtype shows usefull information about it:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; FontFlags
FlagSet FontFlags:
 bold = 0x01
 italic = 0x02
 large = 0x08
"><pre>julia<span class="pl-k">&gt;</span> FontFlags
FlagSet FontFlags<span class="pl-k">:</span>
 bold <span class="pl-k">=</span> <span class="pl-c1">0x01</span>
 italic <span class="pl-k">=</span> <span class="pl-c1">0x02</span>
 large <span class="pl-k">=</span> <span class="pl-c1">0x08</span></pre></div>
<p>In a compact context (such as in multi-dimensional arrays), the pretty-printing
takes on a shorter form:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; [FontFlags() FontFlags(:bold, :large)]
1√ó2 Array{FontFlags,2}:
 FontFlags(0x00)  FontFlags(0x09)

julia&gt; show(IOContext(stdout, :compact =&gt; true), FontFlags(:bold, :large))
FontFlags(0x09)

julia&gt; print(IOContext(stdout, :compact =&gt; true), FontFlags(:bold, :large))
FontFlags(9)
"><pre>julia<span class="pl-k">&gt;</span> [<span class="pl-c1">FontFlags</span>() <span class="pl-c1">FontFlags</span>(<span class="pl-c1">:bold</span>, <span class="pl-c1">:large</span>)]
<span class="pl-c1">1</span><span class="pl-k">√ó</span><span class="pl-c1">2</span> Array{FontFlags,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">FontFlags</span>(<span class="pl-c1">0x00</span>)  <span class="pl-c1">FontFlags</span>(<span class="pl-c1">0x09</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">show</span>(<span class="pl-c1">IOContext</span>(<span class="pl-c1">stdout</span>, <span class="pl-c1">:compact</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">true</span>), <span class="pl-c1">FontFlags</span>(<span class="pl-c1">:bold</span>, <span class="pl-c1">:large</span>))
<span class="pl-c1">FontFlags</span>(<span class="pl-c1">0x09</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">print</span>(<span class="pl-c1">IOContext</span>(<span class="pl-c1">stdout</span>, <span class="pl-c1">:compact</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">true</span>), <span class="pl-c1">FontFlags</span>(<span class="pl-c1">:bold</span>, <span class="pl-c1">:large</span>))
<span class="pl-c1">FontFlags</span>(<span class="pl-c1">9</span>)</pre></div>
<h2><a id="user-content-inputoutput" class="anchor" aria-hidden="true" href="#inputoutput"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Input/Output</h2>
<p><code>FlagSet</code>s support writing to and reading from streams as integers:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; io = IOBuffer();

julia&gt; write(io, UInt8(9));

julia&gt; seekstart(io);

julia&gt; read(io, FontFlags)
FontFlags(:bold, :large) = 0x09
"><pre>julia<span class="pl-k">&gt;</span> io <span class="pl-k">=</span> <span class="pl-c1">IOBuffer</span>();

julia<span class="pl-k">&gt;</span> <span class="pl-c1">write</span>(io, <span class="pl-c1">UInt8</span>(<span class="pl-c1">9</span>));

julia<span class="pl-k">&gt;</span> <span class="pl-c1">seekstart</span>(io);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">read</span>(io, FontFlags)
<span class="pl-en">FontFlags</span>(<span class="pl-c1">:bold</span>, <span class="pl-c1">:large</span>) <span class="pl-k">=</span> <span class="pl-c1">0x09</span></pre></div>
</article></div>