<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-pdmatsextras" class="anchor" aria-hidden="true" href="#pdmatsextras"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>PDMatsExtras</h1>

<p><a href="https://github.com/invenia/PDMatsExtras.jl/actions?query=workflow%3ACI"><img src="https://github.com/invenia/PDMatsExtras.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width:100%;"></a>
<a href="https://github.com/invenia/BlueStyle"><img src="https://camo.githubusercontent.com/c18fbaa52d94d16b90b19701fc90d289b8a5bb920c74c79bab200b14e75420a4/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c75652d3434393564312e737667" alt="Code Style: Blue" data-canonical-src="https://img.shields.io/badge/code%20style-blue-4495d1.svg" style="max-width:100%;"></a>
<a href="https://github.com/SciML/ColPrac"><img src="https://camo.githubusercontent.com/a6c1efcb19a957860ecb25966a730260b03d6e05380d0c27992ee7f9e3b1feb3/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f436f6c507261632d436f6e7472696275746f72277325323047756964652d626c756576696f6c6574" alt="ColPrac: Contributor's Guide on Collaborative Practices for Community Packages" data-canonical-src="https://img.shields.io/badge/ColPrac-Contributor's%20Guide-blueviolet" style="max-width:100%;"></a></p>
<p>This is a package for extra Positive (Semi-) Definated Matrix types.
It is an extension to <a href="https://github.com/JuliaStats/PDMats.jl">PDMats.jl</a>.</p>
<p>It probably wouldn't exist, except Distributions.jl is currently very tied to the idea that the type of a covariance matrix should subtype <code>AbstractPDMat</code>.
There is <a href="https://github.com/JuliaStats/Distributions.jl/issues/1219">an issue open to change that</a>.
When that is resolve the matrix defined here may well move elsewhere, or cease to be required.</p>
<h2><a id="user-content-the-matrixes" class="anchor" aria-hidden="true" href="#the-matrixes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>The Matrixes</h2>
<h3><a id="user-content-psdmat" class="anchor" aria-hidden="true" href="#psdmat"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>PSDMat</h3>
<p>A Positive Semi-Definite Matrix.
It still subtypes <code>AbstractPDMat</code>.
It's not quite as nice to work with as a truely positive definite matrix, since the math doesn't work out so well.
But this is able to represent all covariences -- which must be positive <em>semi</em>-definate.
You might not like the consequences,</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using LinearAlgebra, PDMatsExtras

julia&gt; X = Float64[
               10   -9   2   4
               -9    8  -1  -4
                2   -1   1   1
                4   -4   1   6
           ];

julia&gt; isposdef(X)
false

julia&gt; PSDMat(X)
4×4 PSDMat{Float64, Matrix{Float64}}:
 10.0  -9.0   2.0   4.0
 -9.0   8.0  -1.0  -4.0
  2.0  -1.0   1.0   1.0
  4.0  -4.0   1.0   6.0


julia&gt; # can also construct from a pivoted cholesky, even one of a rank deficient matrix (like this one)

julia&gt; PSDMat(cholesky(X, Val(true); check=false))
4×4 PSDMat{Float64, Matrix{Float64}}:
 10.0  -9.0       2.0   4.0
 -9.0   9.26923  -1.0  -4.0
  2.0  -1.0       1.0   1.0
  4.0  -4.0       1.0   6.0
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> LinearAlgebra, PDMatsExtras

julia<span class="pl-k">&gt;</span> X <span class="pl-k">=</span> Float64[
               <span class="pl-c1">10</span>   <span class="pl-k">-</span><span class="pl-c1">9</span>   <span class="pl-c1">2</span>   <span class="pl-c1">4</span>
               <span class="pl-k">-</span><span class="pl-c1">9</span>    <span class="pl-c1">8</span>  <span class="pl-k">-</span><span class="pl-c1">1</span>  <span class="pl-k">-</span><span class="pl-c1">4</span>
                <span class="pl-c1">2</span>   <span class="pl-k">-</span><span class="pl-c1">1</span>   <span class="pl-c1">1</span>   <span class="pl-c1">1</span>
                <span class="pl-c1">4</span>   <span class="pl-k">-</span><span class="pl-c1">4</span>   <span class="pl-c1">1</span>   <span class="pl-c1">6</span>
           ];

julia<span class="pl-k">&gt;</span> <span class="pl-c1">isposdef</span>(X)
<span class="pl-c1">false</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">PSDMat</span>(X)
<span class="pl-c1">4</span><span class="pl-k">×</span><span class="pl-c1">4</span> PSDMat{Float64, Matrix{Float64}}<span class="pl-k">:</span>
 <span class="pl-c1">10.0</span>  <span class="pl-k">-</span><span class="pl-c1">9.0</span>   <span class="pl-c1">2.0</span>   <span class="pl-c1">4.0</span>
 <span class="pl-k">-</span><span class="pl-c1">9.0</span>   <span class="pl-c1">8.0</span>  <span class="pl-k">-</span><span class="pl-c1">1.0</span>  <span class="pl-k">-</span><span class="pl-c1">4.0</span>
  <span class="pl-c1">2.0</span>  <span class="pl-k">-</span><span class="pl-c1">1.0</span>   <span class="pl-c1">1.0</span>   <span class="pl-c1">1.0</span>
  <span class="pl-c1">4.0</span>  <span class="pl-k">-</span><span class="pl-c1">4.0</span>   <span class="pl-c1">1.0</span>   <span class="pl-c1">6.0</span>


julia<span class="pl-k">&gt;</span> <span class="pl-c"><span class="pl-c">#</span> can also construct from a pivoted cholesky, even one of a rank deficient matrix (like this one)</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">PSDMat</span>(<span class="pl-c1">cholesky</span>(X, <span class="pl-c1">Val</span>(<span class="pl-c1">true</span>); check<span class="pl-k">=</span><span class="pl-c1">false</span>))
<span class="pl-c1">4</span><span class="pl-k">×</span><span class="pl-c1">4</span> PSDMat{Float64, Matrix{Float64}}<span class="pl-k">:</span>
 <span class="pl-c1">10.0</span>  <span class="pl-k">-</span><span class="pl-c1">9.0</span>       <span class="pl-c1">2.0</span>   <span class="pl-c1">4.0</span>
 <span class="pl-k">-</span><span class="pl-c1">9.0</span>   <span class="pl-c1">9.26923</span>  <span class="pl-k">-</span><span class="pl-c1">1.0</span>  <span class="pl-k">-</span><span class="pl-c1">4.0</span>
  <span class="pl-c1">2.0</span>  <span class="pl-k">-</span><span class="pl-c1">1.0</span>       <span class="pl-c1">1.0</span>   <span class="pl-c1">1.0</span>
  <span class="pl-c1">4.0</span>  <span class="pl-k">-</span><span class="pl-c1">4.0</span>       <span class="pl-c1">1.0</span>   <span class="pl-c1">6.0</span></pre></div>
<h2><a id="user-content-woodburypdmat" class="anchor" aria-hidden="true" href="#woodburypdmat"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>WoodburyPDMat</h2>
<p>It is a positive definite Woodbury matrix.
This is a special case of the Symmetric Woodbury Matrix (see <a href="https://github.com/timholy/WoodburyMatrices.jl/">WoodburyMatrices.jl's</a> <code>SymWoodbury</code> type) which is given by <code>A*D*A' + S</code> for <code>S</code> and <code>D</code> being diagonal,
which has the additional requirement that the diagonal matrices are also non-negative.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using LinearAlgebra, PDMatsExtras

julia&gt; A = Float64[
         2.0  2.0  -8.0   5.0  -1.0   2.0   6.0
         2.0  7.0  -1.0  -5.0  -4.0   8.0   7.0
        -2.0  9.0  -9.0  -5.0   9.0  -5.0  -3.0
         3.0  4.0  -6.0  -4.0   3.0  -3.0  -3.0
       ];

julia&gt; D = Diagonal(Float64[1, 2, 3, 2, 2, 1, 5]);

julia&gt; S = Diagonal(Float64[4, 2, 3, 6]);

julia&gt; W = WoodburyPDMat(A, D, S)
4×4 WoodburyPDMat{Float64,Array{Float64,2},Diagonal{Float64,Array{Float64,1}},Diagonal{Float64,Array{Float64,1}}}:
 444.0  240.0   80.0   24.0
 240.0  498.0  -18.0  -33.0
  80.0  -18.0  694.0  382.0
  24.0  -33.0  382.0  259.0

julia&gt; A*D*A' + S
4×4 Array{Float64,2}:
 444.0  240.0   80.0   24.0
 240.0  498.0  -18.0  -33.0
  80.0  -18.0  694.0  382.0
  24.0  -33.0  382.0  259.0
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> LinearAlgebra, PDMatsExtras

julia<span class="pl-k">&gt;</span> A <span class="pl-k">=</span> Float64[
         <span class="pl-c1">2.0</span>  <span class="pl-c1">2.0</span>  <span class="pl-k">-</span><span class="pl-c1">8.0</span>   <span class="pl-c1">5.0</span>  <span class="pl-k">-</span><span class="pl-c1">1.0</span>   <span class="pl-c1">2.0</span>   <span class="pl-c1">6.0</span>
         <span class="pl-c1">2.0</span>  <span class="pl-c1">7.0</span>  <span class="pl-k">-</span><span class="pl-c1">1.0</span>  <span class="pl-k">-</span><span class="pl-c1">5.0</span>  <span class="pl-k">-</span><span class="pl-c1">4.0</span>   <span class="pl-c1">8.0</span>   <span class="pl-c1">7.0</span>
        <span class="pl-k">-</span><span class="pl-c1">2.0</span>  <span class="pl-c1">9.0</span>  <span class="pl-k">-</span><span class="pl-c1">9.0</span>  <span class="pl-k">-</span><span class="pl-c1">5.0</span>   <span class="pl-c1">9.0</span>  <span class="pl-k">-</span><span class="pl-c1">5.0</span>  <span class="pl-k">-</span><span class="pl-c1">3.0</span>
         <span class="pl-c1">3.0</span>  <span class="pl-c1">4.0</span>  <span class="pl-k">-</span><span class="pl-c1">6.0</span>  <span class="pl-k">-</span><span class="pl-c1">4.0</span>   <span class="pl-c1">3.0</span>  <span class="pl-k">-</span><span class="pl-c1">3.0</span>  <span class="pl-k">-</span><span class="pl-c1">3.0</span>
       ];

julia<span class="pl-k">&gt;</span> D <span class="pl-k">=</span> <span class="pl-c1">Diagonal</span>(Float64[<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">2</span>, <span class="pl-c1">2</span>, <span class="pl-c1">1</span>, <span class="pl-c1">5</span>]);

julia<span class="pl-k">&gt;</span> S <span class="pl-k">=</span> <span class="pl-c1">Diagonal</span>(Float64[<span class="pl-c1">4</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">6</span>]);

julia<span class="pl-k">&gt;</span> W <span class="pl-k">=</span> <span class="pl-c1">WoodburyPDMat</span>(A, D, S)
<span class="pl-c1">4</span><span class="pl-k">×</span><span class="pl-c1">4</span> WoodburyPDMat{Float64,Array{Float64,<span class="pl-c1">2</span>},Diagonal{Float64,Array{Float64,<span class="pl-c1">1</span>}},Diagonal{Float64,Array{Float64,<span class="pl-c1">1</span>}}}<span class="pl-k">:</span>
 <span class="pl-c1">444.0</span>  <span class="pl-c1">240.0</span>   <span class="pl-c1">80.0</span>   <span class="pl-c1">24.0</span>
 <span class="pl-c1">240.0</span>  <span class="pl-c1">498.0</span>  <span class="pl-k">-</span><span class="pl-c1">18.0</span>  <span class="pl-k">-</span><span class="pl-c1">33.0</span>
  <span class="pl-c1">80.0</span>  <span class="pl-k">-</span><span class="pl-c1">18.0</span>  <span class="pl-c1">694.0</span>  <span class="pl-c1">382.0</span>
  <span class="pl-c1">24.0</span>  <span class="pl-k">-</span><span class="pl-c1">33.0</span>  <span class="pl-c1">382.0</span>  <span class="pl-c1">259.0</span>

julia<span class="pl-k">&gt;</span> A<span class="pl-k">*</span>D<span class="pl-k">*</span>A<span class="pl-k">'</span> <span class="pl-k">+</span> S
<span class="pl-c1">4</span><span class="pl-k">×</span><span class="pl-c1">4</span> Array{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">444.0</span>  <span class="pl-c1">240.0</span>   <span class="pl-c1">80.0</span>   <span class="pl-c1">24.0</span>
 <span class="pl-c1">240.0</span>  <span class="pl-c1">498.0</span>  <span class="pl-k">-</span><span class="pl-c1">18.0</span>  <span class="pl-k">-</span><span class="pl-c1">33.0</span>
  <span class="pl-c1">80.0</span>  <span class="pl-k">-</span><span class="pl-c1">18.0</span>  <span class="pl-c1">694.0</span>  <span class="pl-c1">382.0</span>
  <span class="pl-c1">24.0</span>  <span class="pl-k">-</span><span class="pl-c1">33.0</span>  <span class="pl-c1">382.0</span>  <span class="pl-c1">259.0</span></pre></div>
</article></div>