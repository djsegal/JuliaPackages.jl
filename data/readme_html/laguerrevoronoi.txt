<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-laguerrevoronoi" class="anchor" aria-hidden="true" href="#laguerrevoronoi"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>LaguerreVoronoi</h1>
<p dir="auto">Compute Laguerre-Voronoi diagrams in Julia</p>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="S = 10 * rand(10, 2) # centers of 10 balls
R = rand(1 : 5, 10) # radii of 10 balls
tri_list, V = LaguerreVoronoi.power_triangulation(S, R)
voronoi_dict = LaguerreVoronoi.compute_voronoi_cells(S, V, tri_list)"><pre>S <span class="pl-k">=</span> <span class="pl-c1">10</span> <span class="pl-k">*</span> <span class="pl-c1">rand</span>(<span class="pl-c1">10</span>, <span class="pl-c1">2</span>) <span class="pl-c"><span class="pl-c">#</span> centers of 10 balls</span>
R <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">1</span> <span class="pl-k">:</span> <span class="pl-c1">5</span>, <span class="pl-c1">10</span>) <span class="pl-c"><span class="pl-c">#</span> radii of 10 balls</span>
tri_list, V <span class="pl-k">=</span> LaguerreVoronoi<span class="pl-k">.</span><span class="pl-c1">power_triangulation</span>(S, R)
voronoi_dict <span class="pl-k">=</span> LaguerreVoronoi<span class="pl-k">.</span><span class="pl-c1">compute_voronoi_cells</span>(S, V, tri_list)</pre></div>
<h2 dir="auto"><a id="user-content-output" class="anchor" aria-hidden="true" href="#output"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Output</h2>
<ul dir="auto">
<li><code>V: Array{Array{Float64, 1}, 1}</code>
<ul dir="auto">
<li>containing the vertices of the power triangulation</li>
</ul>
</li>
<li><code>tri_list: Array{Any, 1}</code>
<ul dir="auto">
<li>containing the triplets for each triangulation</li>
</ul>
</li>
<li><code>voronoi_dict: Dict{Int64,Array{Any,1}}</code>
<ul dir="auto">
<li>Each entry of the dictionary is an array containing the cell borders. Each cell of that array is a tuple <code>((i, j), (v, d), s, t)</code> representing a segment <code>v + d * k</code>, with <code>s &lt;= k &lt;= t</code>. The tuple <code>(i, j)</code> refers to the indices of the vertices in <code>V</code> that form that segment. <code>nothing</code> is used to indicate a point in the infinite or an infinite scalar, for rays.</li>
</ul>
</li>
</ul>
</article></div>