<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p><a href="https://www.repostatus.org/#active" rel="nofollow"><img src="https://camo.githubusercontent.com/8e81866efd56bc430b1925915d1793e1219b094e/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f7265706f5f7374617475732d6163746976652d627269676874677265656e3f7374796c653d666c61742d737175617265" alt="Project Status: Active – The project has reached a stable, usable state and is being actively developed." data-canonical-src="https://img.shields.io/badge/repo_status-active-brightgreen?style=flat-square" style="max-width:100%;"></a>
<a href="https://travis-ci.com/milankl/Sonums.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/0078dabb03361a541b128b7d11440f8c76f0ce65/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f636f6d2f6d696c616e6b6c2f536f6e756d732e6a6c3f6c6162656c3d4c696e75782532302532362532306f7378266c6f676f3d747261766973267374796c653d666c61742d737175617265" alt="Travis" data-canonical-src="https://img.shields.io/travis/com/milankl/Sonums.jl?label=Linux%20%26%20osx&amp;logo=travis&amp;style=flat-square" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/milankl/softsonum-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/afa67e323038ac2b675ff1febd2b13f419b46c2f/68747470733a2f2f696d672e736869656c64732e696f2f6170707665796f722f63692f6d696c616e6b6c2f736f6674736f6e756d2d6a6c3f6c6162656c3d57696e646f7773266c6f676f3d6170707665796f72266c6f676f436f6c6f723d7768697465267374796c653d666c61742d737175617265" alt="AppVeyor" data-canonical-src="https://img.shields.io/appveyor/ci/milankl/softsonum-jl?label=Windows&amp;logo=appveyor&amp;logoColor=white&amp;style=flat-square" style="max-width:100%;"></a>
<a href="https://cirrus-ci.com/github/milankl/Sonums.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/0f5c653b284781e4330ad92cc5671d7aedad4a96/68747470733a2f2f696d672e736869656c64732e696f2f6369727275732f6769746875622f6d696c616e6b6c2f536f6e756d732e6a6c3f6c6162656c3d46726565425344266c6f676f3d6369727275732d6369266c6f676f436f6c6f723d7768697465267374796c653d666c61742d737175617265" alt="Cirrus CI" data-canonical-src="https://img.shields.io/cirrus/github/milankl/Sonums.jl?label=FreeBSD&amp;logo=cirrus-ci&amp;logoColor=white&amp;style=flat-square" style="max-width:100%;"></a>
<a href="https://zenodo.org/badge/latestdoi/191624340" rel="nofollow"><img src="https://camo.githubusercontent.com/e9bcdb2d119873990d3a23f6fdc5f16fe3f21276/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f3139313632343334302e737667" alt="DOI" data-canonical-src="https://zenodo.org/badge/191624340.svg" style="max-width:100%;"></a></p>
<h1><a id="user-content-sonumsjl" class="anchor" aria-hidden="true" href="#sonumsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Sonums.jl</h1>
<p>A software emulator for Sonums - the Self-Organizing NUMbers. A number format that learns from data. Sonum8 is the 8bit version, Sonum16 for 16bit computations. This number format shares many similarities with the <a href="http://johngustafson.net/pdfs/BeatingFloatingPoint.pdf" rel="nofollow">type II unums</a> developed by <a href="http://johngustafson.net/" rel="nofollow">John Gustafson</a>.</p>
<h1><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h1>
<p>Load the emulator with <code>using Sonums</code>, then train the 8 or 16bit Sonums with your data (a maximum entropy approach is used)</p>
<div class="highlight highlight-source-julia"><pre>data <span class="pl-k">=</span> <span class="pl-c1">randn</span>(<span class="pl-c1">10_000_000</span>)
<span class="pl-c1">trainSonum8</span>(data)
<span class="pl-c1">trainSonum16</span>(data)</pre></div>
<p>Alternatively, you can also use a 127-element vector (8bit) or 32767-element vector (16bit) to set the representable Sonums directly. To imitate Posit8 for example you may do</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> SoftPosit
posit8 <span class="pl-k">=</span> <span class="pl-c1">Float64</span>.(<span class="pl-c1">Posit8</span>.(<span class="pl-c1">UInt8</span>.(<span class="pl-c1">collect</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">127</span>))))  <span class="pl-c"><span class="pl-c">#</span> creates a list of Posit8 numbers in (0,Inf)</span>
<span class="pl-c1">setSonum8</span>(posit8)
<span class="pl-c1">setUnderflow8</span>(<span class="pl-c1">false</span>)  <span class="pl-c"><span class="pl-c">#</span> Posits don't underflow but Sonums do by default</span></pre></div>
<p>Once either Sonum8 or Sonum16 is set up, you have to fill the lookup tables for all arithmetic operations</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">fillSonumTables8</span>()    <span class="pl-c"><span class="pl-c">#</span>  8bit: this is quick</span>
<span class="pl-c1">fillSonumTables16</span>()   <span class="pl-c"><span class="pl-c">#</span> 16bit: this may take a few minutes</span></pre></div>
<p>And now we can do things like</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> a <span class="pl-k">=</span> <span class="pl-c1">Sonum16</span>(<span class="pl-c1">1.2</span>);
julia<span class="pl-k">&gt;</span> b <span class="pl-k">=</span> <span class="pl-c1">Sonum16</span>(<span class="pl-c1">0.5</span>);
julia<span class="pl-k">&gt;</span> a<span class="pl-k">-</span>b
<span class="pl-c1">Sonum16</span>(<span class="pl-c1">0x420a</span>)
julia<span class="pl-k">&gt;</span> <span class="pl-c1">Float64</span>(a<span class="pl-k">-</span>b)
<span class="pl-c1">0.7000189572298372</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">Float64</span>(<span class="pl-c1">sqrt</span>(a))
<span class="pl-c1">1.0954481925887807</span></pre></div>
<h1><a id="user-content-theory" class="anchor" aria-hidden="true" href="#theory"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Theory</h1>
<p>The Sonum circle follows closely the idea of the <a href="http://johngustafson.net/pdfs/BeatingFloatingPoint.pdf" rel="nofollow">posit circle</a> developed by <a href="http://johngustafson.net/" rel="nofollow">John Gustafson</a>. Instead of imposing a symmetry with respect to the multiplicative inverse, as proposed for the type II unums, Sonums only have a additive symmetry around 0. The 4bit Sonum circle is therefore</p>
<p><a target="_blank" rel="noopener noreferrer" href="figs/sonum4.svg"><img src="figs/sonum4.svg" width="300" style="max-width:100%;"></a></p>
<p>with values s₁ to s₇ to be defined. The bitpattern <code>0000</code> is reserved for 0, and <code>1000</code> for NaR (not a real). Negative numbers directly follow as the <a href="https://en.wikipedia.org/wiki/Two%27s_complement" rel="nofollow">two's complement</a> for any s₁ to s₇.</p>
<h1><a id="user-content-benchmarking" class="anchor" aria-hidden="true" href="#benchmarking"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Benchmarking</h1>
<p>Unfortunately the table lookup matrices require 5GB (1GB per table, 2GB for division) of RAM for 16bit (&lt;1Mb for 8bit). However, arithmetic operations are reasonably fast. In order to avoid caching in the benchmarking, we perform operations over arrays</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> BenchmarkTools

julia<span class="pl-k">&gt;</span> N <span class="pl-k">=</span> <span class="pl-c1">100000</span>;

julia<span class="pl-k">&gt;</span> a <span class="pl-k">=</span> <span class="pl-c1">Sonum16</span>.(<span class="pl-c1">randn</span>(N));

julia<span class="pl-k">&gt;</span> b <span class="pl-k">=</span> <span class="pl-c1">Sonum16</span>.(<span class="pl-c1">randn</span>(N));

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-k">+</span>(<span class="pl-k">$</span>a,<span class="pl-k">$</span>b);
  <span class="pl-c1">2.358</span> ms (<span class="pl-c1">2</span> allocations<span class="pl-k">:</span> <span class="pl-c1">195.39</span> KiB)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-k">-</span>(<span class="pl-k">$</span>a,<span class="pl-k">$</span>b);
  <span class="pl-c1">2.348</span> ms (<span class="pl-c1">2</span> allocations<span class="pl-k">:</span> <span class="pl-c1">195.39</span> KiB)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-k">.*</span>(<span class="pl-k">$</span>a,<span class="pl-k">$</span>b);
  <span class="pl-c1">1.829</span> ms (<span class="pl-c1">2</span> allocations<span class="pl-k">:</span> <span class="pl-c1">195.39</span> KiB)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-k">./</span>(<span class="pl-k">$</span>a,<span class="pl-k">$</span>b);
  <span class="pl-c1">1.753</span> ms (<span class="pl-c1">2</span> allocations<span class="pl-k">:</span> <span class="pl-c1">195.39</span> KiB)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">sqrt</span>.(<span class="pl-k">$</span>a);
  <span class="pl-c1">433.788</span> μs (<span class="pl-c1">2</span> allocations<span class="pl-k">:</span> <span class="pl-c1">195.39</span> KiB)</pre></div>
<p>So that <code>+,-</code> require ca. 2.35ms/N = <strong>23.5ns</strong>, <code>*,/</code> ca 1.8ms/N = <strong>18ns</strong> and <code>sqrt</code> ca. <strong>4.3ns</strong></p>
<h1><a id="user-content-testing" class="anchor" aria-hidden="true" href="#testing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Testing</h1>
<p>Sonums are tested against the SoftPosit library: Once set up with Posits, Sonums yield bitwise-reproducible results for +,-,*,/. See <a href="https://github.com/milankl/Sonums.jl/blob/51ceeec168508aa6b35937f89d714d9f2b2e78f6/test/runtests.jl#L46">here</a></p>
<h1><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h1>
<p>In the package manager do</p>
<div class="highlight highlight-source-julia"><pre>(v1<span class="pl-c1">.1</span>) pkg<span class="pl-k">&gt;</span> add https<span class="pl-k">:</span><span class="pl-k">//</span>www<span class="pl-k">.</span>github<span class="pl-k">.</span>com<span class="pl-k">/</span>milankl<span class="pl-k">/</span>Sonums<span class="pl-k">.</span>jl</pre></div>
</article></div>