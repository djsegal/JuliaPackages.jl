<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-bayesiantoolsjl" class="anchor" aria-hidden="true" href="#bayesiantoolsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>BayesianTools.jl</h1>
<p><a href="https://travis-ci.org/gragusa/BayesianTools.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/7d3eb05c89d223119a0eb4c60d81b111c4e91dd34e75b1fe4b020e0b4f81ed76/68747470733a2f2f7472617669732d63692e6f72672f677261677573612f426179657369616e546f6f6c732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/gragusa/BayesianTools.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/gragusa/BayesianTools.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/c34ea94d404aa2f7f5cf30f60e9ebbcfd82b0245e98f566a60b3803bbb82b7ad/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f677261677573612f426179657369616e546f6f6c732e6a6c2f62616467652e7376673f6272616e63683d6d617374657226736572766963653d676974687562" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/gragusa/BayesianTools.jl/badge.svg?branch=master&amp;service=github" style="max-width:100%;"></a>
<a href="http://codecov.io/github/gragusa/BayesianTools.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/2e76adaab958ea1aa1a7a1b1204209576b508592e7f75a4724fb402c21921e3c/687474703a2f2f636f6465636f762e696f2f6769746875622f677261677573612f426179657369616e546f6f6c732e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/gragusa/BayesianTools.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
<p><code>BayesianTools.jl</code> is a Julia package with methods useful for Monte Carlo Markov Chain simulations. The package has two submodules:</p>
<ul>
<li><code>ProductDistributions</code>: defines a <code>ProductDistribution</code> type and related methods useful for defining and evaluating independent priors</li>
<li><code>Link</code>: usuful to rescale MC proposals to live in the suppport of the prior densities</li>
</ul>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>The package is now registiret</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="(v1.x) pkg&gt; add BayesianTools
"><pre>(v1<span class="pl-k">.</span>x) pkg<span class="pl-k">&gt;</span> add BayesianTools</pre></div>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<h3><a id="user-content-productdistributions" class="anchor" aria-hidden="true" href="#productdistributions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>ProductDistributions</h3>
<p>The following code shows how a product distribution resulting from multiplying a normal and a Beta can be obtained</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using BayesianTools.ProductDistributions
p = ProductDistribution(Normal(0,1), Beta(1.,1.))
n = length(p) ## 2 -&gt; Number of distributions in the product
"><pre><span class="pl-k">using</span> BayesianTools<span class="pl-k">.</span>ProductDistributions
p <span class="pl-k">=</span> <span class="pl-c1">ProductDistribution</span>(<span class="pl-c1">Normal</span>(<span class="pl-c1">0</span>,<span class="pl-c1">1</span>), <span class="pl-c1">Beta</span>(<span class="pl-c1">1.</span>,<span class="pl-c1">1.</span>))
n <span class="pl-k">=</span> <span class="pl-c1">length</span>(p) <span class="pl-c"><span class="pl-c">#</span># 2 -&gt; Number of distributions in the product</span></pre></div>
<p>To check whether an <code>Array{Float64}</code> is in the support of <code>p</code></p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="insupport(p, [.1,2.]) ## false
insupport(p, [.1,1.]) ## true
"><pre><span class="pl-c1">insupport</span>(p, [<span class="pl-c1">.1</span>,<span class="pl-c1">2.</span>]) <span class="pl-c"><span class="pl-c">#</span># false</span>
<span class="pl-c1">insupport</span>(p, [<span class="pl-c1">.1</span>,<span class="pl-c1">1.</span>]) <span class="pl-c"><span class="pl-c">#</span># true</span></pre></div>
<p>The <code>logpdf</code> and the <code>pdf</code> at a point <code>x::Array{Float64}(n)</code> are</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="logpdf(p, [.1,.5]) # = logpdf(Normal(0,1), .1) + logpdf(Beta(1.,1.), .5)
pdf(p, [.1,.5]) # = pdf(Normal(0,1), .1) * pdf(Beta(1.,1.), .5)
"><pre><span class="pl-c1">logpdf</span>(p, [<span class="pl-c1">.1</span>,<span class="pl-c1">.5</span>]) <span class="pl-c"><span class="pl-c">#</span> = logpdf(Normal(0,1), .1) + logpdf(Beta(1.,1.), .5)</span>
<span class="pl-c1">pdf</span>(p, [<span class="pl-c1">.1</span>,<span class="pl-c1">.5</span>]) <span class="pl-c"><span class="pl-c">#</span> = pdf(Normal(0,1), .1) * pdf(Beta(1.,1.), .5)</span></pre></div>
<p>It is also possible to draw a sample from <code>p</code></p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="rand!(p, Array{Float64}(2,100))
"><pre><span class="pl-c1">rand!</span>(p, <span class="pl-c1">Array</span><span class="pl-c1">{Float64}</span>(<span class="pl-c1">2</span>,<span class="pl-c1">100</span>))</pre></div>
<h3><a id="user-content-links" class="anchor" aria-hidden="true" href="#links"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Links</h3>
<p><code>invlink</code> and <code>link</code> are useful to transform and back-transform the parameters of a model according to the support of a distribution. <code>logjacobian</code> provides the log absolute Jacobian of the inverse transformation applied by <code>invlink</code>.</p>
<p>The typical use case of the methods in the <code>Links</code> is best understood by an example. Suppose interest lies on sampling from a Gamma(2,1) distribution</p>
<p><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/b8ac35e561a6833d0b2afe2191f0014c15025e8cdbd72a61ed82ec0b1420005f/68747470733a2f2f6c617465782e636f6465636f67732e636f6d2f6769662e6c617465783f25354370692532387825323925323025334425323078652535452537422d782537442532432535437175616425323078253543676571736c616e7425323030"><img src="https://camo.githubusercontent.com/b8ac35e561a6833d0b2afe2191f0014c15025e8cdbd72a61ed82ec0b1420005f/68747470733a2f2f6c617465782e636f6465636f67732e636f6d2f6769662e6c617465783f25354370692532387825323925323025334425323078652535452537422d782537442532432535437175616425323078253543676571736c616e7425323030" alt="Gamma(2,1)" data-canonical-src="https://latex.codecogs.com/gif.latex?%5Cpi%28x%29%20%3D%20xe%5E%7B-x%7D%2C%5Cquad%20x%5Cgeqslant%200" style="max-width:100%;"></a></p>
<p>Being this a simple simple distribution there are many straightforward ways to simulate from it. However, we will consider employing a random walk Metropolis-Hastings (MH) sampler with standard Gaussian proposal.</p>
<p>The support of this distribution is x &gt; 0 and there are four options regarding the proposal distribution:</p>
<ol>
<li>
<p>Use a <code>Normal(0,1)</code> and proceed as you normally would if the support of the density was (-Inf, +Inf).</p>
</li>
<li>
<p>Use a truncated normal distribution</p>
</li>
<li>
<p>Sample from a Normal(0,1) until the draw is positive</p>
</li>
<li>
<p>Re-parametrise the distribution in terms of <a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/99ca5b00300f4b9f906187727eba48674fe35756324d23d5e36aee6bc4f0d073/68747470733a2f2f6c617465782e636f6465636f67732e636f6d2f6769662e6c617465783f253543696e6c696e652532307925323025334425323025354365787025323879253239"><img src="https://camo.githubusercontent.com/99ca5b00300f4b9f906187727eba48674fe35756324d23d5e36aee6bc4f0d073/68747470733a2f2f6c617465782e636f6465636f67732e636f6d2f6769662e6c617465783f253543696e6c696e652532307925323025334425323025354365787025323879253239" alt="" data-canonical-src="https://latex.codecogs.com/gif.latex?%5Cinline%20y%20%3D%20%5Cexp%28y%29" style="max-width:100%;"></a>,  that is, draw samples from</p>
</li>
</ol>
<p><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/6d8673a2b865ef938350a1211b1241593deee9bdad4bb71a0d99a67376c7f953/68747470733a2f2f6c617465782e636f6465636f67732e636f6d2f6769662e6c617465783f25354374696c64652537422535437069253744253238792532392532302533442532302535436c6f6725323879253239652535452537422d2535436c6f6725323879253239253744"><img src="https://camo.githubusercontent.com/6d8673a2b865ef938350a1211b1241593deee9bdad4bb71a0d99a67376c7f953/68747470733a2f2f6c617465782e636f6465636f67732e636f6d2f6769662e6c617465783f25354374696c64652537422535437069253744253238792532392532302533442532302535436c6f6725323879253239652535452537422d2535436c6f6725323879253239253744" alt="Re-parametrise" data-canonical-src="https://latex.codecogs.com/gif.latex?%5Ctilde%7B%5Cpi%7D%28y%29%20%3D%20%5Clog%28y%29e%5E%7B-%5Clog%28y%29%7D" style="max-width:100%;"></a></p>
<p>The first strategy will work just fine as long as the density evaluates to 0 for values outside its support. This is the case for the <code>pdf</code> of a <code>Gamma</code> in the <code>Distributions</code> package.</p>
<p>The second and the third strategy is going to work <em>as long as the acceptance ratio</em> includes the normalising constant (see <a href="https://darrenjw.wordpress.com/2012/06/04/metropolis-hastings-mcmc-when-the-proposal-and-target-have-differing-support/" rel="nofollow">Darren Wilkinson's post</a>).</p>
<p>The last strategy also needs an adjustment to the acceptance ratio to incorporate the Jacobian of the transformation.</p>
<p>The code below use <code>invlink</code>, <code>link</code>, and <code>logjacobian</code> to carry out the r.v. transformation and the Jacobian adjustment.</p>
<p>Notice that the <code>Improper</code> distribution is a subtype of <code>ContinuousUnivariateDistribution</code>. <code>Links</code> defines methods for <code>Improper</code> that allow the transformations to go through automatically. (<code>Improper</code> can also be used as component of the <code>ProductDistribution</code> which is useful if an improper prior was elicited for some components of parameter.)</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using BayesianTools.Links
function mcmc_wrong(iters)
   chain = Array{Float64}(iters)
   gamma = Gamma(2, 1)
   d = Improper(0, +Inf)
   lx  = 1.0
   for i in 1:iters
      xs = link(d, lx) + randn()
      lxs = invlink(d, xs)
      a = logpdf(gamma, lxs)-logpdf(gamma, lx)       
      (rand() &lt; exp(a)) &amp;&amp; (lx = lxs)
      chain[i] = lx
   end
   return chain
end
function mcmc_right(iters)
   chain = Array{Float64}(iters)
   gamma = Gamma(2, 1)
   d = Improper(0, +Inf)
   lx  = 1.0
   for i in 1:iters
      xs = link(d, lx) + randn()
      lxs = invlink(d, xs)
      a = logpdf(gamma, lxs)-logpdf(gamma, lx)
      ## Log absolute jacobian adjustment
      a = a - logjacobian(d, lxs) + logjacobian(d, lx)
      (rand() &lt; exp(a)) &amp;&amp; (lx = lxs)
      chain[i] = lx
   end
   return chain
end
"><pre><span class="pl-k">using</span> BayesianTools<span class="pl-k">.</span>Links
<span class="pl-k">function</span> <span class="pl-en">mcmc_wrong</span>(iters)
   chain <span class="pl-k">=</span> <span class="pl-c1">Array</span><span class="pl-c1">{Float64}</span>(iters)
   gamma <span class="pl-k">=</span> <span class="pl-c1">Gamma</span>(<span class="pl-c1">2</span>, <span class="pl-c1">1</span>)
   d <span class="pl-k">=</span> <span class="pl-c1">Improper</span>(<span class="pl-c1">0</span>, <span class="pl-k">+</span><span class="pl-c1">Inf</span>)
   lx  <span class="pl-k">=</span> <span class="pl-c1">1.0</span>
   <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span>iters
      xs <span class="pl-k">=</span> <span class="pl-c1">link</span>(d, lx) <span class="pl-k">+</span> <span class="pl-c1">randn</span>()
      lxs <span class="pl-k">=</span> <span class="pl-c1">invlink</span>(d, xs)
      a <span class="pl-k">=</span> <span class="pl-c1">logpdf</span>(gamma, lxs)<span class="pl-k">-</span><span class="pl-c1">logpdf</span>(gamma, lx)       
      (<span class="pl-c1">rand</span>() <span class="pl-k">&lt;</span> <span class="pl-c1">exp</span>(a)) <span class="pl-k">&amp;&amp;</span> (lx <span class="pl-k">=</span> lxs)
      chain[i] <span class="pl-k">=</span> lx
   <span class="pl-k">end</span>
   <span class="pl-k">return</span> chain
<span class="pl-k">end</span>
<span class="pl-k">function</span> <span class="pl-en">mcmc_right</span>(iters)
   chain <span class="pl-k">=</span> <span class="pl-c1">Array</span><span class="pl-c1">{Float64}</span>(iters)
   gamma <span class="pl-k">=</span> <span class="pl-c1">Gamma</span>(<span class="pl-c1">2</span>, <span class="pl-c1">1</span>)
   d <span class="pl-k">=</span> <span class="pl-c1">Improper</span>(<span class="pl-c1">0</span>, <span class="pl-k">+</span><span class="pl-c1">Inf</span>)
   lx  <span class="pl-k">=</span> <span class="pl-c1">1.0</span>
   <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span>iters
      xs <span class="pl-k">=</span> <span class="pl-c1">link</span>(d, lx) <span class="pl-k">+</span> <span class="pl-c1">randn</span>()
      lxs <span class="pl-k">=</span> <span class="pl-c1">invlink</span>(d, xs)
      a <span class="pl-k">=</span> <span class="pl-c1">logpdf</span>(gamma, lxs)<span class="pl-k">-</span><span class="pl-c1">logpdf</span>(gamma, lx)
      <span class="pl-c"><span class="pl-c">#</span># Log absolute jacobian adjustment</span>
      a <span class="pl-k">=</span> a <span class="pl-k">-</span> <span class="pl-c1">logjacobian</span>(d, lxs) <span class="pl-k">+</span> <span class="pl-c1">logjacobian</span>(d, lx)
      (<span class="pl-c1">rand</span>() <span class="pl-k">&lt;</span> <span class="pl-c1">exp</span>(a)) <span class="pl-k">&amp;&amp;</span> (lx <span class="pl-k">=</span> lxs)
      chain[i] <span class="pl-k">=</span> lx
   <span class="pl-k">end</span>
   <span class="pl-k">return</span> chain
<span class="pl-k">end</span></pre></div>
<p>The results is</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="mc0 = mcmc_wrong(1_000_000)
mc1 = mcmc_right(1_000_000)
using Plots
Plots.histogram([mc0, mc1], normalize=true, bins = 100, fill=:slategray, layout = (1,2), lab = &quot;draws&quot;)
title!(&quot;Incorrect sampler&quot;, subplot = 1)
title!(&quot;Correct sampler&quot;, subplot = 2)
plot!(x-&gt;pdf(Gamma(2,1),x), w = 2.6, color = :darkred, subplot = 1, lab = &quot;Gamma(2,1) density&quot;)
plot!(x-&gt;pdf(Gamma(2,1),x), w = 2.6, color = :darkred, subplot = 2, lab = &quot;Gamma(2,1) density&quot;))
png(&quot;sampler&quot;)
"><pre>mc0 <span class="pl-k">=</span> <span class="pl-c1">mcmc_wrong</span>(<span class="pl-c1">1_000_000</span>)
mc1 <span class="pl-k">=</span> <span class="pl-c1">mcmc_right</span>(<span class="pl-c1">1_000_000</span>)
<span class="pl-k">using</span> Plots
Plots<span class="pl-k">.</span><span class="pl-c1">histogram</span>([mc0, mc1], normalize<span class="pl-k">=</span><span class="pl-c1">true</span>, bins <span class="pl-k">=</span> <span class="pl-c1">100</span>, fill<span class="pl-k">=</span><span class="pl-c1">:slategray</span>, layout <span class="pl-k">=</span> (<span class="pl-c1">1</span>,<span class="pl-c1">2</span>), lab <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>draws<span class="pl-pds">"</span></span>)
<span class="pl-c1">title!</span>(<span class="pl-s"><span class="pl-pds">"</span>Incorrect sampler<span class="pl-pds">"</span></span>, subplot <span class="pl-k">=</span> <span class="pl-c1">1</span>)
<span class="pl-c1">title!</span>(<span class="pl-s"><span class="pl-pds">"</span>Correct sampler<span class="pl-pds">"</span></span>, subplot <span class="pl-k">=</span> <span class="pl-c1">2</span>)
<span class="pl-c1">plot!</span>(x<span class="pl-k">-&gt;</span><span class="pl-c1">pdf</span>(<span class="pl-c1">Gamma</span>(<span class="pl-c1">2</span>,<span class="pl-c1">1</span>),x), w <span class="pl-k">=</span> <span class="pl-c1">2.6</span>, color <span class="pl-k">=</span> <span class="pl-c1">:darkred</span>, subplot <span class="pl-k">=</span> <span class="pl-c1">1</span>, lab <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>Gamma(2,1) density<span class="pl-pds">"</span></span>)
<span class="pl-c1">plot!</span>(x<span class="pl-k">-&gt;</span><span class="pl-c1">pdf</span>(<span class="pl-c1">Gamma</span>(<span class="pl-c1">2</span>,<span class="pl-c1">1</span>),x), w <span class="pl-k">=</span> <span class="pl-c1">2.6</span>, color <span class="pl-k">=</span> <span class="pl-c1">:darkred</span>, subplot <span class="pl-k">=</span> <span class="pl-c1">2</span>, lab <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>Gamma(2,1) density<span class="pl-pds">"</span></span>))
<span class="pl-c1">png</span>(<span class="pl-s"><span class="pl-pds">"</span>sampler<span class="pl-pds">"</span></span>)</pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="docs/images/sampler.png"><img src="docs/images/sampler.png" alt="histogram" style="max-width:100%;"></a></p>
</article></div>