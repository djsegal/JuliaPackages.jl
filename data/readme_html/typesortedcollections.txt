<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-typesortedcollections" class="anchor" aria-hidden="true" href="#typesortedcollections"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>TypeSortedCollections</h1>
<p><a href="https://travis-ci.org/tkoolen/TypeSortedCollections.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/411155358cecfad128f56df95094bf1280f2b111/68747470733a2f2f7472617669732d63692e6f72672f746b6f6f6c656e2f54797065536f72746564436f6c6c656374696f6e732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/tkoolen/TypeSortedCollections.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="http://codecov.io/github/tkoolen/TypeSortedCollections.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/1a02429f2f73a389fa2de304dd1b6b0e6d7e710a/687474703a2f2f636f6465636f762e696f2f6769746875622f746b6f6f6c656e2f54797065536f72746564436f6c6c656374696f6e732e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/tkoolen/TypeSortedCollections.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
<p>TypeSortedCollections provides the <code>TypeSortedCollection</code> type, which can be used to store type-heterogeneous data in a way that allows operations on the data to be performed in a type-stable manner. It does so by sorting a type-heterogeneous input collection by type upon construction, and storing these elements in a <code>Tuple</code> of concretely typed <code>Vector</code>s, one for each type. TypeSortedCollections provides type stable methods for <code>map!</code>, <code>foreach</code>, <code>broadcast!</code>, and <code>mapreduce</code> that take at least one <code>TypeSortedCollection</code>.</p>
<p>An example:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> TypeSortedCollections

julia<span class="pl-k">&gt;</span> <span class="pl-en">f</span>(x<span class="pl-k">::</span><span class="pl-c1">Int64</span>, y<span class="pl-k">::</span><span class="pl-c1">Float64</span>) <span class="pl-k">=</span> x <span class="pl-k">*</span> y
f (generic <span class="pl-k">function</span> with <span class="pl-c1">2</span> methods)

julia<span class="pl-k">&gt;</span> <span class="pl-en">f</span>(x<span class="pl-k">::</span><span class="pl-c1">Float64</span>, y<span class="pl-k">::</span><span class="pl-c1">Float64</span>) <span class="pl-k">=</span> <span class="pl-c1">round</span>(Int64, <span class="pl-k">-</span>x <span class="pl-k">*</span> y)
f (generic <span class="pl-k">function</span> with <span class="pl-c1">2</span> methods)

julia<span class="pl-k">&gt;</span> xs <span class="pl-k">=</span> Number[<span class="pl-c1">1.</span>; <span class="pl-c1">2</span>; <span class="pl-c1">3</span>];

julia<span class="pl-k">&gt;</span> sortedxs <span class="pl-k">=</span> <span class="pl-c1">TypeSortedCollection</span>(xs);

julia<span class="pl-k">&gt;</span> ys <span class="pl-k">=</span> [<span class="pl-c1">1.</span>; <span class="pl-c1">2.</span>; <span class="pl-c1">3.</span>];

julia<span class="pl-k">&gt;</span> results <span class="pl-k">=</span> <span class="pl-c1">Vector</span><span class="pl-c1">{Int64}</span>(<span class="pl-c1">length</span>(xs));

julia<span class="pl-k">&gt;</span> <span class="pl-c1">map!</span>(f, results, sortedxs, ys)
<span class="pl-c1">3</span><span class="pl-k">-</span>element Array{Int64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-k">-</span><span class="pl-c1">1</span>
  <span class="pl-c1">4</span>
  <span class="pl-c1">9</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@allocated</span> <span class="pl-c1">map!</span>(f, results, sortedxs, ys)
<span class="pl-c1">0</span></pre></div>
<h1><a id="user-content-use-cases" class="anchor" aria-hidden="true" href="#use-cases"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Use cases</h1>
<p><code>TypeSortedCollection</code>s are appropriate when the number of different types in a heterogeneous collection is (much) smaller than the number of elements of the collection. If the number of types is approximately the same as the number of elements, a plain <code>Tuple</code> may be a better choice.</p>
<p>Note that construction of a <code>TypeSortedCollection</code> is of course not type stable, so the intended usage is not to construct <code>TypeSortedCollection</code>s in tight loops.</p>
<p>See also <a href="https://github.com/yuyichao/FunctionWrappers.jl">FunctionWrappers.jl</a> for a solution to the related problem of storing and calling multiple callables in a type-stable manner, and <a href="https://github.com/cstjean/Unrolled.jl">Unrolled.jl</a> for a macro-based solution.</p>
<h1><a id="user-content-iteration-order" class="anchor" aria-hidden="true" href="#iteration-order"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Iteration order</h1>
<p>By default, <code>TypeSortedCollection</code>s do not preserve iteration order, in the sense that the order in which elements are processed in <code>map!</code>, <code>foreach</code>, <code>broadcast!</code>, and <code>mapreduce</code> will not be the same as if these functions were called on the original type-heterogeneous vector:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> xs <span class="pl-k">=</span> Number[<span class="pl-c1">1.</span>; <span class="pl-c1">2</span>; <span class="pl-c1">3.</span>];

julia<span class="pl-k">&gt;</span> sortedxs <span class="pl-k">=</span> <span class="pl-c1">TypeSortedCollection</span>(xs);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">foreach</span>(println, sortedxs)
<span class="pl-c1">1.0</span>
<span class="pl-c1">3.0</span>
<span class="pl-c1">2</span></pre></div>
<p>If this is not desired, a <code>TypeSortedCollection</code> that <em>does</em> preserve iteration order can be constructed by passing in an additional constructor argument:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> xs <span class="pl-k">=</span> Number[<span class="pl-c1">1.</span>; <span class="pl-c1">2</span>; <span class="pl-c1">3.</span>];

julia<span class="pl-k">&gt;</span> sortedxs <span class="pl-k">=</span> <span class="pl-c1">TypeSortedCollection</span>(xs, <span class="pl-c1">true</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">foreach</span>(println, sortedxs)
<span class="pl-c1">1.0</span>
<span class="pl-c1">2</span>
<span class="pl-c1">3.0</span></pre></div>
<p>The cost of preserving iteration order is that the number of <code>Vector</code>s stored in the <code>TypeSortedCollection</code> becomes equal to the number of contiguous subsequences of the input collection that have the same type, as opposed to simply the number of different types in the input collection. Note that calls to <code>map!</code> and <code>foreach</code> with both <code>TypeSortedCollection</code> and <code>AbstractVector</code> arguments are correctly indexed, regardless of whether iteration order is preserved:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> xs <span class="pl-k">=</span> Number[<span class="pl-c1">1.</span>; <span class="pl-c1">2</span>; <span class="pl-c1">3.</span>];

julia<span class="pl-k">&gt;</span> sortedxs <span class="pl-k">=</span> <span class="pl-c1">TypeSortedCollection</span>(xs); <span class="pl-c"><span class="pl-c">#</span> doesn't preserve iteration order</span>

julia<span class="pl-k">&gt;</span> results <span class="pl-k">=</span> <span class="pl-c1">similar</span>(xs);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">map!</span>(identity, results, sortedxs) <span class="pl-c"><span class="pl-c">#</span> results of applying `identity` end up in the right location</span>
<span class="pl-c1">3</span><span class="pl-k">-</span>element Array{Number,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">1.0</span>
 <span class="pl-c1">2</span>
 <span class="pl-c1">3.0</span></pre></div>
<h1><a id="user-content-working-with-multiple-typesortedcollections" class="anchor" aria-hidden="true" href="#working-with-multiple-typesortedcollections"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Working with multiple <code>TypeSortedCollections</code></h1>
<p>Consider the following example:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> xs <span class="pl-k">=</span> Number[<span class="pl-c1">Float32</span>(<span class="pl-c1">1</span>); <span class="pl-c1">2</span>; <span class="pl-c1">3.</span>; <span class="pl-c1">4.</span>];

julia<span class="pl-k">&gt;</span> ys <span class="pl-k">=</span> Number[<span class="pl-c1">1.</span>; <span class="pl-c1">2.</span>; <span class="pl-c1">3</span>; <span class="pl-c1">4</span>];

julia<span class="pl-k">&gt;</span> results <span class="pl-k">=</span> <span class="pl-c1">Vector</span><span class="pl-c1">{Float64}</span>(<span class="pl-c1">length</span>(xs));

julia<span class="pl-k">&gt;</span> sortedxs <span class="pl-k">=</span> <span class="pl-c1">TypeSortedCollection</span>(xs);

julia<span class="pl-k">&gt;</span> sortedys <span class="pl-k">=</span> <span class="pl-c1">TypeSortedCollection</span>(ys);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">map!</span>(<span class="pl-k">*</span>, results, sortedxs, sortedys) <span class="pl-c"><span class="pl-c">#</span> Error!</span></pre></div>
<p>The error happens because <code>xs</code> and <code>ys</code> don't have the same number of different element types. This problem can be solved by aligning the indices of <code>sortedys</code> with those of <code>sortedxs</code>:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> sortedys <span class="pl-k">=</span> <span class="pl-c1">TypeSortedCollection</span>(ys, TypeSortedCollections<span class="pl-k">.</span><span class="pl-c1">indices</span>(sortedxs));

julia<span class="pl-k">&gt;</span> <span class="pl-c1">map!</span>(<span class="pl-k">*</span>, results, sortedxs, sortedys)
<span class="pl-c1">4</span><span class="pl-k">-</span>element Array{Float64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
  <span class="pl-c1">1.0</span>
  <span class="pl-c1">4.0</span>
  <span class="pl-c1">9.0</span>
 <span class="pl-c1">16.0</span></pre></div>
<h1><a id="user-content-broadcasting" class="anchor" aria-hidden="true" href="#broadcasting"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Broadcasting</h1>
<p>Broadcasting (in place) is implemented for <code>AbstractVector</code> return types:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> x <span class="pl-k">=</span> <span class="pl-c1">4</span>;

julia<span class="pl-k">&gt;</span> ys <span class="pl-k">=</span> Number[<span class="pl-c1">1.</span>; <span class="pl-c1">2</span>; <span class="pl-c1">3</span>];

julia<span class="pl-k">&gt;</span> sortedys <span class="pl-k">=</span> <span class="pl-c1">TypeSortedCollection</span>(ys);

julia<span class="pl-k">&gt;</span> results <span class="pl-k">=</span> <span class="pl-c1">similar</span>(ys, Float64);

julia<span class="pl-k">&gt;</span> results <span class="pl-k">.=</span> x <span class="pl-k">.*</span> sortedys
<span class="pl-c1">3</span><span class="pl-k">-</span>element Array{Float64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
  <span class="pl-c1">4.0</span>
  <span class="pl-c1">8.0</span>
 <span class="pl-c1">12.0</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@allocated</span> results <span class="pl-k">.=</span> x <span class="pl-k">.*</span> sortedys
<span class="pl-c1">0</span></pre></div>
</article></div>