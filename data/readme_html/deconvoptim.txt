<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-deconvoptimjl" class="anchor" aria-hidden="true" href="#deconvoptimjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>DeconvOptim.jl</h1>
<br>
<a name="user-content-logo">
</a><div align="left"><a name="user-content-logo">
</a><a href="https://roflmaostc.github.io/DeconvOptim.jl/stable/" rel="nofollow">
<img src="docs/src/assets/logo.svg" alt="DeconvOptim Logo" width="150" style="max-width:100%;">
</a>
</div>
<br>
A package for microscopy image based deconvolution via Optim.jl. This package works with N dimensional Point Spread Functions and images.
The package was created with microscopy in mind but since the code base is quite general it should be possible to deconvolve different kernels as well. 
<p>We would be happy to deconvolve <em>real</em> data! File an issue if we can help deconvolving an image/stack. We would be also excited to adapt DeconvOptim.jl to your special needs!
<br></p>
<table>
<thead>
<tr>
<th align="center"><strong>Documentation</strong></th>
<th align="center"><strong>Build Status</strong></th>
<th align="center"><strong>Code Coverage</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><a href="https://roflmaostc.github.io/DeconvOptim.jl/stable/" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a> <a href="https://roflmaostc.github.io/DeconvOptim.jl/dev/" rel="nofollow"><img src="https://camo.githubusercontent.com/4e4191f8fc26756bffd045a14b2994414f3b67b600ddc3ef9360d3f2ade09dbf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d6f72616e67652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-dev-orange.svg" style="max-width:100%;"></a></td>
<td align="center"><a href="https://github.com/roflmaostc/DeconvOptim.jl/actions?query=workflow%3ACI"><img src="https://github.com/roflmaostc/DeconvOptim.jl/workflows/CI/badge.svg" alt="" style="max-width:100%;"></a></td>
<td align="center"><a href="https://codecov.io/gh/roflmaostc/DeconvOptim.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/ec7ca6a8c7dcc1321c9426ab79f51c774e79f05eb20f88fe1aaed6a81dff9c17/68747470733a2f2f636f6465636f762e696f2f67682f726f666c6d616f7374632f4465636f6e764f7074696d2e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="" data-canonical-src="https://codecov.io/gh/roflmaostc/DeconvOptim.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></td>
</tr>
</tbody>
</table>
<h2><a id="user-content-documentation" class="anchor" aria-hidden="true" href="#documentation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Documentation</h2>
<p>The documentation of the latest release is <a href="docs-stable-url">here</a>.
The documentation of current master is <a href="docs-dev-url">here</a>.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>Type <code>]</code>in the REPL to get to the package manager:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; ] add DeconvOptim
"><pre>julia<span class="pl-k">&gt;</span> ] add DeconvOptim</pre></div>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<p>A quick example is shown below.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Revise # for development useful
using DeconvOptim, TestImages, Colors, FFTW, Noise, ImageShow

# load test image
img = Float32.(testimage(&quot;resolution_test_512&quot;))

# generate simple Point Spread Function of aperture radius 30
psf = Float32.(generate_psf(size(img), 30))

# create a blurred, noisy version of that image
img_b = conv_psf(img, psf)
img_n = poisson(img_b, 300)

# deconvolve 2D with default options
@time res, o = deconvolution(img_n, psf)

# show final results next to original and blurred version
Gray.([img img_n res])
"><pre><span class="pl-k">using</span> Revise <span class="pl-c"><span class="pl-c">#</span> for development useful</span>
<span class="pl-k">using</span> DeconvOptim, TestImages, Colors, FFTW, Noise, ImageShow

<span class="pl-c"><span class="pl-c">#</span> load test image</span>
img <span class="pl-k">=</span> <span class="pl-c1">Float32</span>.(<span class="pl-c1">testimage</span>(<span class="pl-s"><span class="pl-pds">"</span>resolution_test_512<span class="pl-pds">"</span></span>))

<span class="pl-c"><span class="pl-c">#</span> generate simple Point Spread Function of aperture radius 30</span>
psf <span class="pl-k">=</span> <span class="pl-c1">Float32</span>.(<span class="pl-c1">generate_psf</span>(<span class="pl-c1">size</span>(img), <span class="pl-c1">30</span>))

<span class="pl-c"><span class="pl-c">#</span> create a blurred, noisy version of that image</span>
img_b <span class="pl-k">=</span> <span class="pl-c1">conv_psf</span>(img, psf)
img_n <span class="pl-k">=</span> <span class="pl-c1">poisson</span>(img_b, <span class="pl-c1">300</span>)

<span class="pl-c"><span class="pl-c">#</span> deconvolve 2D with default options</span>
<span class="pl-c1">@time</span> res, o <span class="pl-k">=</span> <span class="pl-c1">deconvolution</span>(img_n, psf)

<span class="pl-c"><span class="pl-c">#</span> show final results next to original and blurred version</span>
<span class="pl-c1">Gray</span>.([img img_n res])</pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="docs/src/assets/quick_example_results.png"><img src="docs/src/assets/quick_example_results.png" alt="Results Quick Example" style="max-width:100%;"></a></p>
<h2><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Examples</h2>
<p>Have a quick look into the <a href="examples">examples folder</a>.
We demonstrate the effect of different regularizers. There is also a <a href="examples/cuda_2D.ipynb">CUDA example</a>.
Using regularizers together with a CUDA GPU is faster but unfortunately only a factor of ~5-10.
For <a href="examples/cuda_3D.ipynb">3D</a> the speed-up is larger.</p>
<h2><a id="user-content-cuda" class="anchor" aria-hidden="true" href="#cuda"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>CUDA</h2>
<p>For CUDA we only provide a Total variation regularizer via <code>TV_cuda</code>. The reason is that Tullio.jl is currently not very fast with <code>CuArray</code>s.</p>
<h2><a id="user-content-performance-tips" class="anchor" aria-hidden="true" href="#performance-tips"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Performance Tips</h2>
<h3><a id="user-content-regularizers" class="anchor" aria-hidden="true" href="#regularizers"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Regularizers</h3>
<p>The regularizers are generated when <code>TV()</code> or similar is called. To prevent compilation every time, define the regularizer once and use it multiple times without newly defining it:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="reg = TV()
"><pre>reg <span class="pl-k">=</span> <span class="pl-c1">TV</span>()</pre></div>
<p>And in the new cell then use:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="res, o = deconvolution(img_n, psf, regularizer=reg)
"><pre>res, o <span class="pl-k">=</span> <span class="pl-c1">deconvolution</span>(img_n, psf, regularizer<span class="pl-k">=</span>reg)</pre></div>
<h2><a id="user-content-contributions" class="anchor" aria-hidden="true" href="#contributions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Contributions</h2>
<p>I would like to thank <a href="https://nanoimaging.de/" rel="nofollow">Rainer Heintzmann</a> for the great support and discussions during development.
Furthermore without <a href="https://github.com/mcabbott/Tullio.jl">Tullio.jl</a> and <a href="https://github.com/mcabbott/">@mcabbott</a> this package wouldn't be as fast as it is. His package and ideas are the basis for the implementations of the regularizers.</p>
</article></div>