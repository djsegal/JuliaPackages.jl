<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/dbd703a6dac339a0b21d3ee69e710ca22ce3e98520daedbe4f96a5e7c6b2613b/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f6362726e722f486561727442656174732e6a6c"><img src="https://camo.githubusercontent.com/dbd703a6dac339a0b21d3ee69e710ca22ce3e98520daedbe4f96a5e7c6b2613b/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f6362726e722f486561727442656174732e6a6c" alt="License" data-canonical-src="https://img.shields.io/github/license/cbrnr/HeartBeats.jl" style="max-width: 100%;"></a></p>
<h1 dir="auto"><a id="user-content-heartbeatsjl" class="anchor" aria-hidden="true" href="#heartbeatsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>HeartBeats.jl</h1>
<p dir="auto">HeartBeats.jl provides a heartbeat detector based on the approach described by <a href="https://ieeexplore.ieee.org/document/4122029" rel="nofollow">Pan &amp; Tompkins (1985)</a>. It is based on the implementation available in the Python package <a href="https://github.com/cbrnr/sleepecg">SleepECG</a>.</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">Use the package manager to add HeartBeats.jl by typing <code>] add HeartBeats</code> in the Julia REPL.</p>
<h2 dir="auto"><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example</h2>
<p dir="auto">HeartBeats.jl contains a short example ECG dataset taken from <a href="https://docs.scipy.org/doc/scipy/reference/generated/scipy.misc.electrocardiogram.html" rel="nofollow"><code>scipy.misc.electrocardiogram()</code></a>. The function <code>example_ecg()</code> returns this data, which was sampled with a sampling frequency of 360 Hz, as a <code>Vector{Float64}</code>. We can use this dataset to showcase the <code>detect_heartbeats()</code> function:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using HeartBeats

ecg = example_ecg()
fs = 360  # sampling frequency

beats = detect_heartbeats(ecg, fs)"><pre><span class="pl-k">using</span> HeartBeats

ecg <span class="pl-k">=</span> <span class="pl-c1">example_ecg</span>()
fs <span class="pl-k">=</span> <span class="pl-c1">360</span>  <span class="pl-c"><span class="pl-c">#</span> sampling frequency</span>

beats <span class="pl-k">=</span> <span class="pl-c1">detect_heartbeats</span>(ecg, fs)</pre></div>
<p dir="auto">The <code>beats</code> array will contain all detected R peak locations.</p>
<h2 dir="auto"><a id="user-content-benchmark" class="anchor" aria-hidden="true" href="#benchmark"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Benchmark</h2>
<p dir="auto">The detector is based on the Python implementation available in <a href="https://github.com/cbrnr/sleepecg">SleepECG</a>. It is about 18× faster than the Python implementation and only 2× slower than the C implementation. Follow these steps to reproduce the benchmark:</p>
<ol dir="auto">
<li>Export all data records used in the <code>'runtime'</code> benchmark by including <code>export_records = True</code> in <code>config.yml</code> (refer to the <a href="https://sleepecg.readthedocs.io/en/stable/heartbeat_detection.html" rel="nofollow">SleepECG documentation</a> for details on how to set up and run the benchmarks). This will generate 15 text files.</li>
<li>Move those text files to a folder that you can access from Julia (i.e. set the Julia working directory accordingly).</li>
<li>Run the following code snippet to benchmark the runtime for 60 minute data segments (note that you need to add the <code>CSV</code> package):</li>
</ol>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using CSV, HeartBeats

function run_benchmark()
    total = 0
    fs = 128
    files = filter(x -&gt; endswith(x, &quot;.txt&quot;), readdir(&quot;.&quot;, join=true))
    for file in files
        println(file)
        data = CSV.File(file, comment=&quot;#&quot;)
        ecg = view(data[:ecg], 1:60*60*fs)  # 60 minutes
        stats = @timed detect_heartbeats(ecg, fs)
        total += stats.time
    end
    println(&quot;Total: $total, Average: $(total / length(files))&quot;)
    total
end

run_benchmark()"><pre><span class="pl-k">using</span> CSV, HeartBeats

<span class="pl-k">function</span> <span class="pl-en">run_benchmark</span>()
    total <span class="pl-k">=</span> <span class="pl-c1">0</span>
    fs <span class="pl-k">=</span> <span class="pl-c1">128</span>
    files <span class="pl-k">=</span> <span class="pl-c1">filter</span>(x <span class="pl-k">-&gt;</span> <span class="pl-c1">endswith</span>(x, <span class="pl-s"><span class="pl-pds">"</span>.txt<span class="pl-pds">"</span></span>), <span class="pl-c1">readdir</span>(<span class="pl-s"><span class="pl-pds">"</span>.<span class="pl-pds">"</span></span>, join<span class="pl-k">=</span><span class="pl-c1">true</span>))
    <span class="pl-k">for</span> file <span class="pl-k">in</span> files
        <span class="pl-c1">println</span>(file)
        data <span class="pl-k">=</span> CSV<span class="pl-k">.</span><span class="pl-c1">File</span>(file, comment<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>#<span class="pl-pds">"</span></span>)
        ecg <span class="pl-k">=</span> <span class="pl-c1">view</span>(data[<span class="pl-c1">:ecg</span>], <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">60</span><span class="pl-k">*</span><span class="pl-c1">60</span><span class="pl-k">*</span>fs)  <span class="pl-c"><span class="pl-c">#</span> 60 minutes</span>
        stats <span class="pl-k">=</span> <span class="pl-c1">@timed</span> <span class="pl-c1">detect_heartbeats</span>(ecg, fs)
        total <span class="pl-k">+=</span> stats<span class="pl-k">.</span>time
    <span class="pl-k">end</span>
    <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>Total: <span class="pl-v">$total</span>, Average: <span class="pl-v">$(total <span class="pl-k">/</span> <span class="pl-c1">length</span>(files))</span><span class="pl-pds">"</span></span>)
    total
<span class="pl-k">end</span>

<span class="pl-c1">run_benchmark</span>()</pre></div>
</article></div>