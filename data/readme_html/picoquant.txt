<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-picoquant" class="anchor" aria-hidden="true" href="#picoquant"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>PicoQuant</h1>
<p dir="auto"><a href="https://ICHEC.github.io/PicoQuant.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/56f8252ba8e9d3f0b810769543f77823d2fe031ce560d4c2d69fb1fcad800383/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6c61746573742d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-latest-blue.svg" style="max-width: 100%;"></a>
<a href="https://travis-ci.org/ICHEC/PicoQuant.jl.svg?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/427d684663649dd22443da84f69b79e7882cb69e3fbaba0959f8333e7d62fc4d/68747470733a2f2f7472617669732d63692e6f72672f49434845432f5069636f5175616e742e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/ICHEC/PicoQuant.jl.svg?branch=master" style="max-width: 100%;"></a></p>
<p dir="auto">PicoQuant is a quantum circuit simulation framework being developed as part of the <a href="https://git.ichec.ie/quantex/quantex" rel="nofollow">QuantEx</a> project. This is a <a href="https://prace-ri.eu/" rel="nofollow">PRACE</a> funded project to develop quantum circuit simulation tools capable of running on the classical exa-scale compute clusters expected to be deployed in the coming years. This package is a prototype to test out ideas and approaches that we hope to improve on in subsequent iterations.</p>
<p dir="auto">The best way to get started is to:</p>
<ul dir="auto">
<li>Install the prototype locally by following the instructions below</li>
<li>Follow the series of tutorial notebooks in the <a href="nb/">notebooks folder</a></li>
<li>For more details on function interfaces read the <a href="https://ICHEC.github.io/PicoQuant.jl/dev" rel="nofollow">online docs</a></li>
<li>Get involved by posting an issue or submitting a pull request</li>
</ul>
<h2 dir="auto"><a id="user-content-install-and-example" class="anchor" aria-hidden="true" href="#install-and-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Install and example</h2>
<p dir="auto">PicoQuant can be installed from the Julia REPL with the following commands</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="import Pkg
Pkg.add(&quot;PicoQuant)"><pre class="notranslate"><code>import Pkg
Pkg.add("PicoQuant)
</code></pre></div>
<p dir="auto">Tests can be run with</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="import Pkg
Pkg.test()"><pre class="notranslate"><code>import Pkg
Pkg.test()
</code></pre></div>
<p dir="auto">A simple script to use PicoQuant to simulate a 3 qubit GHZ circuit consists of the following</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="using PicoQuant

tn = TensorNetworkCircuit(3)
add_gate!(tn, gate_tensor(:H), [1])
add_gate!(tn, gate_tensor(:CX), [1, 2])
add_gate!(tn, gate_tensor(:CX), [2, 3])
add_input!(tn, &quot;000&quot;)
full_wavefunction_contraction!(tn, &quot;vector&quot;)
output = load_tensor_data(tn, :result)"><pre class="notranslate"><code>using PicoQuant

tn = TensorNetworkCircuit(3)
add_gate!(tn, gate_tensor(:H), [1])
add_gate!(tn, gate_tensor(:CX), [1, 2])
add_gate!(tn, gate_tensor(:CX), [2, 3])
add_input!(tn, "000")
full_wavefunction_contraction!(tn, "vector")
output = load_tensor_data(tn, :result)
</code></pre></div>
<h2 dir="auto"><a id="user-content-detailed-installation-instructions" class="anchor" aria-hidden="true" href="#detailed-installation-instructions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Detailed installation instructions</h2>
<p dir="auto">The version of PicoQuant that the above methods installs is the version that is registered with
the Julia repository. These instructions show how to clone from the repository and install this version.</p>
<ol dir="auto">
<li>If Julia is not already installed, download and install Julia from the <a href="https://julialang.org/downloads/" rel="nofollow">Julialang website</a></li>
<li>Clone this repository using
<code>git clone https://github.com/ICHEC/PicoQuant.jl.git</code></li>
<li>Start the Julia REPL and navigate to the PicoQuant folder, activate and instantiate
the environment and then build PicoQuant.</li>
</ol>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="import Pkg
Pkg.activate(&quot;.&quot;)
Pkg.instantiate()
Pkg.build(&quot;PicoQuant&quot;)"><pre class="notranslate"><code>import Pkg
Pkg.activate(".")
Pkg.instantiate()
Pkg.build("PicoQuant")
</code></pre></div>
<p dir="auto">This should install dependencies specified in the <code>Project.toml</code> file
and carry out any package specific build tasks (detailed in <code>deps/build.jl</code> file).
Currently PicoQuant uses some functionality from <a href="https://qiskit.org" rel="nofollow">qiskit</a>. This is
installed in the python environment used by <a href="https://github.com/JuliaPy/PyCall.jl">PyCall</a>
during the build. See below for details about using different python environments.</p>
<h2 dir="auto"><a id="user-content-running-the-unittests" class="anchor" aria-hidden="true" href="#running-the-unittests"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Running the unittests</h2>
<p dir="auto">Unittests can be run from the PicoQuant root folder with</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia --project=. test/runtests.jl"><pre class="notranslate"><code>julia --project=. test/runtests.jl
</code></pre></div>
<p dir="auto">This will run all the unittests. It's possible to run a subset of the unittests
by passing the name of the testset. For example to run the layer3 tests contained
in the <code>test/layer3_tests.jl</code> script one would run</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia --project=. test/runtests.jl layer3_tests"><pre class="notranslate"><code>julia --project=. test/runtests.jl layer3_tests
</code></pre></div>
<h2 dir="auto"><a id="user-content-running-standalone-scripts" class="anchor" aria-hidden="true" href="#running-standalone-scripts"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Running standalone scripts</h2>
<p dir="auto">Standalone executable scripts are located in the <code>bin/</code> folder. As an example
we show how to run the <code>qasm2tng.jl</code> script to convert the <code>qft_3.qasm</code> file
to json format.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia --project=. bin/qasm2tng.jl --qasm qft_3.qasm --output qft_3.json"><pre class="notranslate"><code>julia --project=. bin/qasm2tng.jl --qasm qft_3.qasm --output qft_3.json
</code></pre></div>
<h2 dir="auto"><a id="user-content-starting-a-notebook-server" class="anchor" aria-hidden="true" href="#starting-a-notebook-server"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Starting a notebook server</h2>
<p dir="auto">Much of the prototyping and development is done in jupyter notebooks which
provides instant feedback and speeds development. To start a jupyer notebook
from the Julia REPL, enter</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="using IJulia
notebook()"><pre class="notranslate"><code>using IJulia
notebook()
</code></pre></div>
<p dir="auto">This should open a browser window showing the home folder.</p>
<h2 dir="auto"><a id="user-content-using-different-python-environments" class="anchor" aria-hidden="true" href="#using-different-python-environments"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Using different python environments</h2>
<p dir="auto">Note that PicoQuant makes use of python libraries via the PyCall.jl package.
On Linux systems this will use the python3 binary in the path (or python if there
is no python3 binary found). On windows and macOS systems it will create a
dedicated conda environment which will reside at <code>${HOME}/.julia/conda/3</code>.
The required python packages are installed as part of the build of PicoQuant.
To use a different python environment, the <code>PYTHON</code> environment variable must
be set to point to the python binary and PyCall needs to be (re)built. For example
to create a new conda environment at <code>~/.julia/conda/picoquant_env</code>, one would
follow the steps</p>
<p dir="auto">Use conda to create the environment from the command line</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="conda -p ~/.julia/conda/picoquant_env python=3.7"><pre class="notranslate"><code>conda -p ~/.julia/conda/picoquant_env python=3.7
</code></pre></div>
<p dir="auto">Then from the Julia REPL</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="ENV[&quot;PYTHON&quot;] = &quot;~/.julia/conda/picoquant_env&quot;
]build PyCall"><pre class="notranslate"><code>ENV["PYTHON"] = "~/.julia/conda/picoquant_env"
]build PyCall
</code></pre></div>
<h2 dir="auto"><a id="user-content-building-the-documentation" class="anchor" aria-hidden="true" href="#building-the-documentation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Building the documentation</h2>
<p dir="auto">The package uses Documenter.jl to  generate html documentation from the sources.
To build the documentation, run the make.jl script from the docs folder.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia --project=docs docs/make.jl"><pre class="notranslate"><code>julia --project=docs docs/make.jl
</code></pre></div>
<p dir="auto">The documentation will be placed in the build folder and can be hosted locally
by starting a local http server with</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="cd docs/build &amp;&amp; python3 -m http.server"><pre class="notranslate"><code>cd docs/build &amp;&amp; python3 -m http.server
</code></pre></div>
<p dir="auto">As part of the CI this documentation is automatically built and hosted via github
pages at <a href="https://ICHEC.github.io/PicoQuant.jl/dev" rel="nofollow">https://ICHEC.github.io/PicoQuant.jl/dev</a></p>
</article></div>