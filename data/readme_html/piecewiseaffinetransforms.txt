<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-piecewise-affine-transformations" class="anchor" aria-hidden="true" href="#piecewise-affine-transformations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Piecewise Affine Transformations</h1>
<p><a href="https://travis-ci.org/dfdx/PiecewiseAffineTransforms.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/7bb58352ab9364f254cc7b7aa709560f53c25cd062a8c2e67861910974ca4b64/68747470733a2f2f7472617669732d63692e6f72672f646664782f506965636577697365416666696e655472616e73666f726d732e6a6c2e737667" alt="Build Status" data-canonical-src="https://travis-ci.org/dfdx/PiecewiseAffineTransforms.jl.svg" style="max-width:100%;"></a></p>
<p>Package for smooth deformation of complex shapes.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="Pkg.add(&quot;PiecewiseAffineTransforms&quot;)
"><pre><code>Pkg.add("PiecewiseAffineTransforms")
</code></pre></div>
<h2><a id="user-content-usage-overview" class="anchor" aria-hidden="true" href="#usage-overview"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage Overview</h2>
<p>Piecewise affine transformation resembles ordinary affine transformation, but instead of warping single region linearly, it splits down area under the question into a set of triangles and warps each such triangle separately.</p>
<p>Let's say, we have an image of a face and want to warp it to have different expression (destination image is here only for demonstration, we will not use it):</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="using PiecewiseAffineTransforms

src_img = ...
dst_img = ...
"><pre><code>using PiecewiseAffineTransforms

src_img = ...
dst_img = ...
</code></pre></div>
<p>(full version of code is available in <code>examples/ex.jl</code>)</p>
<table>
  <thead>
    <tr><td>Source image</td><td>Destination image</td></tr>
  </thead>
  <tbody>
    <tr>
      <td>
        <a target="_blank" rel="noopener noreferrer" href="https://raw.githubusercontent.com/dfdx/PiecewiseAffineTransforms.jl/master/examples/cootes/107_0764.bmp"><img src="https://raw.githubusercontent.com/dfdx/PiecewiseAffineTransforms.jl/master/examples/cootes/107_0764.bmp" style="max-width:100%;"></a>
      </td>
      <td>
        <a target="_blank" rel="noopener noreferrer" href="https://raw.githubusercontent.com/dfdx/PiecewiseAffineTransforms.jl/master/examples/cootes/107_0779.bmp"><img src="https://raw.githubusercontent.com/dfdx/PiecewiseAffineTransforms.jl/master/examples/cootes/107_0779.bmp" style="max-width:100%;"></a>
      </td>
    </tr>
  </tbody>
</table>
<p>We will also assume that both faces are annotated with corresponding shape landmarks:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="src_shape = ... # should be a Nx2 matrix of Float64,
                #  where N is a number of landmarks
dst_shape = ...
"><pre><code>src_shape = ... # should be a Nx2 matrix of Float64,
                #  where N is a number of landmarks
dst_shape = ...
</code></pre></div>
<p>First of all, we need to split the shapes into triangles, i.e. triangulate them:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="trigs = delaunayindexes(src_shape)  # Tx3 matrix of Int, where T is
                                    #  a number of resuling triangles
# needs ImageView installed (Pkg.add(&quot;ImageView&quot;))
triplot(src_img, src_shape, trigs)
triplot(dst_img, dst_shape, trigs)
"><pre><code>trigs = delaunayindexes(src_shape)  # Tx3 matrix of Int, where T is
                                    #  a number of resuling triangles
# needs ImageView installed (Pkg.add("ImageView"))
triplot(src_img, src_shape, trigs)
triplot(dst_img, dst_shape, trigs)
</code></pre></div>
<p><strong>WARNING:</strong> Triangulation is based on <a href="https://github.com/JuliaGeometry/VoronoiDelaunay.jl/">VoronoiDelaunay.jl</a>, which currently has a <a href="https://github.com/JuliaGeometry/VoronoiDelaunay.jl/issues/6">bug</a> resulting in one lost triangle from time to time. To overcome this, just get good sample of triangulation and save it for future use.</p>
<table>
  <thead>
    <tr><td>Source shape</td><td>Destination shape</td></tr>
  </thead>
  <tbody>
    <tr>
      <td>
        <a target="_blank" rel="noopener noreferrer" href="https://raw.githubusercontent.com/dfdx/PiecewiseAffineTransforms.jl/master/examples/processed/triplot_src.png"><img src="https://raw.githubusercontent.com/dfdx/PiecewiseAffineTransforms.jl/master/examples/processed/triplot_src.png" style="max-width:100%;"></a>
      </td>
      <td>
        <a target="_blank" rel="noopener noreferrer" href="https://raw.githubusercontent.com/dfdx/PiecewiseAffineTransforms.jl/master/examples/processed/triplot_dst.png"><img src="https://raw.githubusercontent.com/dfdx/PiecewiseAffineTransforms.jl/master/examples/processed/triplot_dst.png" style="max-width:100%;"></a>
      </td>
    </tr>
  </tbody>
</table>
<p>Warping <code>src_image</code> from <code>src_shape</code> to <code>dst_shape</code> may be as simple as calling this:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="@time warped = pa_warp(src_img, src_shape, dst_shape, trigs)
# 1.44 seconds
"><pre><code>@time warped = pa_warp(src_img, src_shape, dst_shape, trigs)
# 1.44 seconds
</code></pre></div>
<p>But if you are going to repeat warping to <code>dst_shape</code> for many source images or just many times, it's worth to prepare warp by creating <code>PAWarpParams</code> object and using it for all future transformation to <code>dst_shape</code>:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="@time pa_params = pa_warp_params(dst_shape, trigs, (480, 640))
# 5.92 seconds
@time warped = pa_warp(pa_params, src_img, src_shape)
# 0.075 seconds
"><pre><code>@time pa_params = pa_warp_params(dst_shape, trigs, (480, 640))
# 5.92 seconds
@time warped = pa_warp(pa_params, src_img, src_shape)
# 0.075 seconds
</code></pre></div>
<p>But anyway, they both give (almost) the same result:</p>
<table>
  <thead>
    <tr><td>Original image</td><td>Warped image</td></tr>
  </thead>
  <tbody>
    <tr>
      <td>
        <a target="_blank" rel="noopener noreferrer" href="https://raw.githubusercontent.com/dfdx/PiecewiseAffineTransforms.jl/master/examples/cootes/107_0764.bmp"><img src="https://raw.githubusercontent.com/dfdx/PiecewiseAffineTransforms.jl/master/examples/cootes/107_0764.bmp" style="max-width:100%;"></a>
      </td>
      <td>
        <a target="_blank" rel="noopener noreferrer" href="https://raw.githubusercontent.com/dfdx/PiecewiseAffineTransforms.jl/master/examples/processed/warped_prepared.png"><img src="https://raw.githubusercontent.com/dfdx/PiecewiseAffineTransforms.jl/master/examples/processed/warped_prepared.png" style="max-width:100%;"></a>
      </td>
    </tr>
  </tbody>
</table>
<h2><a id="user-content-acknowledgement" class="anchor" aria-hidden="true" href="#acknowledgement"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Acknowledgement</h2>
<p>Code for prepared warp was mostly extracted from ICAAM project by Luca Vezzaro.</p>
</article></div>