<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-junojl" class="anchor" aria-hidden="true" href="#junojl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Juno.jl</h1>
<p><a href="https://travis-ci.org/JunoLab/Juno.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/1813475576687782a31fed1e12d143895bcfd8e4/68747470733a2f2f7472617669732d63692e6f72672f4a756e6f4c61622f4a756e6f2e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JunoLab/Juno.jl.svg?branch=master" style="max-width:100%;"></a> <a href="https://JunoLab.github.io/JunoDocs.jl/latest" rel="nofollow"><img src="https://camo.githubusercontent.com/57bae07ecd50a99519ad0516d91f4ec8f0f48e12/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6c61746573742d626c75652e737667" alt="Docs" data-canonical-src="https://img.shields.io/badge/docs-latest-blue.svg" style="max-width:100%;"></a></p>
<p>This package defines <a href="http://junolab.org/" rel="nofollow">Juno</a>'s frontend API (to install Juno, follow the instructions <a href="http://docs.junolab.org/latest/man/installation" rel="nofollow">here</a>). It is aimed primarily at allowing package authors to:</p>
<ul>
<li>Integrate with Juno's display system to define custom output for graphics and data structures</li>
<li>Take advantage of frontend features (like showing progress metres or asking for user input) with appropriate fallbacks in other environments</li>
</ul>
<p>All while having only a small, pure Julia dependency (this package) as opposed to the entire Atom.jl tree.</p>
<h2><a id="user-content-note-for-developers" class="anchor" aria-hidden="true" href="#note-for-developers"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Note for developers</h2>
<p>If any method signature has been added/changed after you modify the code base,
it's better to add test cases against it and then update <a href="./src/precompile.jl">the precompilation file</a>
using <a href="https://github.com/timholy/SnoopCompile.jl">SnoopCompile.jl</a> against the test script,
so that we can obtain better first time invocation of those methods.</p>
<p>To update the precompilation file, you just need to run the following command:</p>
<blockquote>
<p>at the root of this package directory</p>
</blockquote>
<div class="highlight highlight-source-shell"><pre>Î» julia --project=. --color=yes scripts/generate_precompile.jl</pre></div>
</article></div>