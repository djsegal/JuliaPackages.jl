<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h2><a id="user-content-finitestatemachine" class="anchor" aria-hidden="true" href="#finitestatemachine"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>FiniteStateMachine</h2>
<p><a href="https://travis-ci.org/tinybike/FiniteStateMachine.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/fb0546b2c8bc1e19541290a427d204120776076bd42727ebaa6d7eb3af47bc62/68747470733a2f2f7472617669732d63692e6f72672f74696e7962696b652f46696e69746553746174654d616368696e652e6a6c2e737667" alt="Build Status" data-canonical-src="https://travis-ci.org/tinybike/FiniteStateMachine.jl.svg" style="max-width:100%;"></a> <a href="https://coveralls.io/github/tinybike/FiniteStateMachine.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/d3afc0baca91a53267787288fd474a85e4e6a6d5d924b132d25ce00ef399b173/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f74696e7962696b652f46696e69746553746174654d616368696e652e6a6c2f62616467652e7376673f6272616e63683d6d617374657226736572766963653d676974687562" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/tinybike/FiniteStateMachine.jl/badge.svg?branch=master&amp;service=github" style="max-width:100%;"></a> <a href="http://pkg.julialang.org/?pkg=FiniteStateMachine" rel="nofollow"><img src="https://camo.githubusercontent.com/5b191cae1e83cf4ab0c9642bb677f6025e49cb665a5b532625ab169d0eb83f1c/687474703a2f2f706b672e6a756c69616c616e672e6f72672f6261646765732f46696e69746553746174654d616368696e655f302e342e737667" alt="FiniteStateMachine" data-canonical-src="http://pkg.julialang.org/badges/FiniteStateMachine_0.4.svg" style="max-width:100%;"></a> <a href="http://pkg.julialang.org/?pkg=FiniteStateMachine" rel="nofollow"><img src="https://camo.githubusercontent.com/0839fbc1ebb0ce67c696c09fc70bf408bf399a0c2e61a5c6cd9eea34529a920c/687474703a2f2f706b672e6a756c69616c616e672e6f72672f6261646765732f46696e69746553746174654d616368696e655f302e352e737667" alt="FiniteStateMachine" data-canonical-src="http://pkg.julialang.org/badges/FiniteStateMachine_0.5.svg" style="max-width:100%;"></a></p>
<p>A simple finite state machine library for Julia, based on Jake Gordon's <a href="https://github.com/jakesgordon/javascript-state-machine">javascript-state-machine</a>.</p>
<h3><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h3>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt; Pkg.add(&quot;FiniteStateMachine&quot;)
"><pre><code>julia&gt; Pkg.add("FiniteStateMachine")
</code></pre></div>
<h3><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h3>
<p><code>StateMachine</code> objects are set up using the <code>state_machine</code> function, which takes a "model" describing your state machine's layout as input.</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt; using FiniteStateMachine

julia&gt; fsm = state_machine({
    &quot;initial&quot; =&gt; &quot;first&quot;,
    &quot;final&quot; =&gt; &quot;fourth&quot;,
    &quot;events&quot; =&gt; [{
            &quot;name&quot; =&gt; &quot;hop&quot;,
            &quot;from&quot; =&gt; &quot;first&quot;,
            &quot;to&quot; =&gt; &quot;second&quot;,
        }, {
            &quot;name&quot; =&gt; &quot;skip&quot;,
            &quot;from&quot; =&gt; &quot;second&quot;,
            &quot;to&quot; =&gt; &quot;third&quot;,
        }, {
            &quot;name&quot; =&gt; &quot;jump&quot;,
            &quot;from&quot; =&gt; &quot;third&quot;,
            &quot;to&quot; =&gt; &quot;fourth&quot;,
        },
    ],
    &quot;callbacks&quot; =&gt; {
        &quot;onbeforeevent&quot; =&gt; (fsm::StateMachine, args...) -&gt; 1+1,
    },
})
"><pre><code>julia&gt; using FiniteStateMachine

julia&gt; fsm = state_machine({
    "initial" =&gt; "first",
    "final" =&gt; "fourth",
    "events" =&gt; [{
            "name" =&gt; "hop",
            "from" =&gt; "first",
            "to" =&gt; "second",
        }, {
            "name" =&gt; "skip",
            "from" =&gt; "second",
            "to" =&gt; "third",
        }, {
            "name" =&gt; "jump",
            "from" =&gt; "third",
            "to" =&gt; "fourth",
        },
    ],
    "callbacks" =&gt; {
        "onbeforeevent" =&gt; (fsm::StateMachine, args...) -&gt; 1+1,
    },
})
</code></pre></div>
<p>Events are called using the <code>fire</code> function:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt; fsm.current
&quot;first&quot;

julia&gt; fire(fsm, &quot;hop&quot;)

julia&gt; fsm.current
&quot;second&quot;

julia&gt; fire(fsm, &quot;skip&quot;)

julia&gt; fsm.current
&quot;third&quot;

julia&gt; fire(fsm, &quot;jump&quot;)

julia&gt; fsm.current
&quot;fourth&quot;

julia&gt; fire(fsm, &quot;finished&quot;)
true
"><pre><code>julia&gt; fsm.current
"first"

julia&gt; fire(fsm, "hop")

julia&gt; fsm.current
"second"

julia&gt; fire(fsm, "skip")

julia&gt; fsm.current
"third"

julia&gt; fire(fsm, "jump")

julia&gt; fsm.current
"fourth"

julia&gt; fire(fsm, "finished")
true
</code></pre></div>
<p>Unless other specified, a special "startup" event fires automatically when the state machine is created.</p>
<p>The "initial" field can be either a string, or a dict specifying: <code>state</code> (the name of the state in which to start), <code>event</code> (the startup event), and/or <code>defer</code> (set to <code>true</code> if the startup event should <em>not</em> be fired automatically when the state machine is created).</p>
<p>Supports multiple source states, for example, the following code allows "hop" to take place from either the "first" or "third" states:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="&quot;events&quot; =&gt; [{
    &quot;name&quot; =&gt; &quot;hop&quot;,
    &quot;from&quot; =&gt; [&quot;first&quot;, &quot;third&quot;],
    &quot;to&quot; =&gt; &quot;second&quot;,
},
"><pre><code>"events" =&gt; [{
    "name" =&gt; "hop",
    "from" =&gt; ["first", "third"],
    "to" =&gt; "second",
},
</code></pre></div>
<h3><a id="user-content-tests" class="anchor" aria-hidden="true" href="#tests"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Tests</h3>
<p>Unit tests are located in <code>test/</code>.  To run the tests:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="$ julia test/runtests.jl
"><pre><code>$ julia test/runtests.jl
</code></pre></div>
</article></div>