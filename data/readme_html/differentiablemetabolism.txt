<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-differentiablemetabolismjl" class="anchor" aria-hidden="true" href="#differentiablemetabolismjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>DifferentiableMetabolism.jl</h1>
<p dir="auto">This package extends <a href="https://github.com/LCSB-BioCore/COBREXA.jl">COBREXA.jl</a>
with the ability to differentiate an optimal solution of an enzyme constrained
metabolic model.</p>
<p dir="auto">Currently, there is support for differentiating both <code>SMomentModel</code> and
<code>GeckoModel</code>, where both turnover numbers and/or intracellular metabolite
concentrations can be taken as parameters. If the latter are parameters, then
generalized Michaelis-Menten kinetics (saturation and thermodynamic) are
assumed.</p>
<p dir="auto">Note, this package is under active development. Only non-degenerate models can
be differentiated. This means that you will only be able to differentiate the
model if you find an active solution, prune the inactive reactions from the
model, and then differentiate the resulting model. Work is planned to drop this
restriction.</p>
<p dir="auto">To use this package, <a href="https://julialang.org/downloads/" rel="nofollow">download and install Julia</a>, and add
the following packages using the built in package manager:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="] add COBREXA, DifferentiableMetabolism, Tulip"><pre>] add COBREXA, DifferentiableMetabolism, Tulip</pre></div>
<p dir="auto">Note, any optimization solver that is compatible with <a href="https://jump.dev/" rel="nofollow">JuMP</a>
can be used. Here we have opted to use
<a href="https://github.com/ds4dm/Tulip.jl">Tulip.jl</a>. To run the tests,
<a href="https://github.com/jump-dev/Ipopt.jl">Ipopt</a> is also required.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="] test DifferentiableMetabolism"><pre>] test DifferentiableMetabolism</pre></div>
<h2 dir="auto"><a id="user-content-differentiating-a-simple-model" class="anchor" aria-hidden="true" href="#differentiating-a-simple-model"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Differentiating a simple model</h2>
<p dir="auto">In this example, a simple model will be differentiated.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using DifferentiableMetabolism
using Tulip
using COBREXA

# Create model
model = StandardModel(&quot;SmallModel&quot;)
m1 = Metabolite(&quot;m1&quot;)
m2 = Metabolite(&quot;m2&quot;)
m3 = Metabolite(&quot;m3&quot;)
m4 = Metabolite(&quot;m4&quot;)
m5 = Metabolite(&quot;m5&quot;)
m6 = Metabolite(&quot;m6&quot;)

@add_reactions! model begin
    &quot;r1&quot;, nothing → m1, 0, 100
    &quot;r2&quot;, nothing → m2, 0, 100
    &quot;r3&quot;, m1 + m2 → m3, 0, 100
    &quot;r4&quot;, m3 → m4 + m5, 0, 100
    &quot;r5&quot;, m2 → m4 + m6, 0, 100
    &quot;r6&quot;, m4 → nothing, 0, 100
    &quot;r7&quot;, m2 → m4 + m6, 0, 100
    &quot;biomass&quot;, m6 + m5 → nothing, 0, 100
end

gs = [Gene(&quot;g$i&quot;) for i = 1:5]

model.reactions[&quot;biomass&quot;].objective_coefficient = 1.0

add_genes!(model, gs)
add_metabolites!(model, [m1, m2, m3, m4, m5, m6])

reaction_isozymes = Dict(
    &quot;r3&quot; =&gt; [Isozyme(Dict(&quot;g1&quot; =&gt; 1), 10.0, 10.0)],
    &quot;r4&quot; =&gt; [Isozyme(Dict(&quot;g2&quot; =&gt; 1, &quot;g3&quot; =&gt; 3), 30.0, 20.0)],
    &quot;r5&quot; =&gt; [Isozyme(Dict(&quot;g3&quot; =&gt; 1, &quot;g4&quot; =&gt; 2), 70.0, 30.0)],
    &quot;r7&quot; =&gt; [Isozyme(Dict(&quot;g5&quot; =&gt; 1), 50.0, 20.0)],
)
gene_product_bounds = Dict(
    &quot;g1&quot; =&gt; (0.0, 0.2),
    &quot;g2&quot; =&gt; (0.0, 0.1),
    &quot;g3&quot; =&gt; (0.0, 10.0),
    &quot;g4&quot; =&gt; (0.0, 1000.0),
    &quot;g5&quot; =&gt; (0.0, 1000.0),
)

gene_product_molar_mass = Dict(&quot;g1&quot; =&gt; 1.0, &quot;g2&quot; =&gt; 2.0, &quot;g3&quot; =&gt; 3.0, &quot;g4&quot; =&gt; 4.0, &quot;g5&quot; =&gt; 5.0)

gene_product_mass_group_bound = Dict(&quot;uncategorized&quot; =&gt; 1.0)

model

# Construct and simulate a GECKO model
gecko_model = make_gecko_model(
    model;
    reaction_isozymes,
    gene_product_bounds,
    gene_product_molar_mass,
    gene_product_mass_group_bound,
)

# Get classic GECKO solution
optimized_model = flux_balance_analysis(
    gecko_model,
    Tulip.Optimizer;
)
gecko_fluxes = flux_dict(gecko_model, optimized_model) # notice that r5 is inactive!

# Prune away inactive reactions
pruned_model = prune_model(model, gecko_fluxes)

# Differentiate an optimal solution
pruned_gecko_model = make_gecko_model(
    pruned_model;
    reaction_isozymes,
    gene_product_bounds,
    gene_product_molar_mass,
    gene_product_mass_group_bound,
)

rid_enzyme = Dict(
    k =&gt; isozyme_to_enzyme(first(v), gene_product_molar_mass; direction = :forward)
    for (k, v) in reaction_isozymes
)

diffmodel = with_parameters(gecko_model, rid_enzyme)

x, dx = differentiate(
    diffmodel,
    Tulip.Optimizer
)"><pre><span class="pl-k">using</span> DifferentiableMetabolism
<span class="pl-k">using</span> Tulip
<span class="pl-k">using</span> COBREXA

<span class="pl-c"><span class="pl-c">#</span> Create model</span>
model <span class="pl-k">=</span> <span class="pl-c1">StandardModel</span>(<span class="pl-s"><span class="pl-pds">"</span>SmallModel<span class="pl-pds">"</span></span>)
m1 <span class="pl-k">=</span> <span class="pl-c1">Metabolite</span>(<span class="pl-s"><span class="pl-pds">"</span>m1<span class="pl-pds">"</span></span>)
m2 <span class="pl-k">=</span> <span class="pl-c1">Metabolite</span>(<span class="pl-s"><span class="pl-pds">"</span>m2<span class="pl-pds">"</span></span>)
m3 <span class="pl-k">=</span> <span class="pl-c1">Metabolite</span>(<span class="pl-s"><span class="pl-pds">"</span>m3<span class="pl-pds">"</span></span>)
m4 <span class="pl-k">=</span> <span class="pl-c1">Metabolite</span>(<span class="pl-s"><span class="pl-pds">"</span>m4<span class="pl-pds">"</span></span>)
m5 <span class="pl-k">=</span> <span class="pl-c1">Metabolite</span>(<span class="pl-s"><span class="pl-pds">"</span>m5<span class="pl-pds">"</span></span>)
m6 <span class="pl-k">=</span> <span class="pl-c1">Metabolite</span>(<span class="pl-s"><span class="pl-pds">"</span>m6<span class="pl-pds">"</span></span>)

<span class="pl-c1">@add_reactions!</span> model <span class="pl-k">begin</span>
    <span class="pl-s"><span class="pl-pds">"</span>r1<span class="pl-pds">"</span></span>, <span class="pl-c1">nothing</span> → m1, <span class="pl-c1">0</span>, <span class="pl-c1">100</span>
    <span class="pl-s"><span class="pl-pds">"</span>r2<span class="pl-pds">"</span></span>, <span class="pl-c1">nothing</span> → m2, <span class="pl-c1">0</span>, <span class="pl-c1">100</span>
    <span class="pl-s"><span class="pl-pds">"</span>r3<span class="pl-pds">"</span></span>, m1 <span class="pl-k">+</span> m2 → m3, <span class="pl-c1">0</span>, <span class="pl-c1">100</span>
    <span class="pl-s"><span class="pl-pds">"</span>r4<span class="pl-pds">"</span></span>, m3 → m4 <span class="pl-k">+</span> m5, <span class="pl-c1">0</span>, <span class="pl-c1">100</span>
    <span class="pl-s"><span class="pl-pds">"</span>r5<span class="pl-pds">"</span></span>, m2 → m4 <span class="pl-k">+</span> m6, <span class="pl-c1">0</span>, <span class="pl-c1">100</span>
    <span class="pl-s"><span class="pl-pds">"</span>r6<span class="pl-pds">"</span></span>, m4 → <span class="pl-c1">nothing</span>, <span class="pl-c1">0</span>, <span class="pl-c1">100</span>
    <span class="pl-s"><span class="pl-pds">"</span>r7<span class="pl-pds">"</span></span>, m2 → m4 <span class="pl-k">+</span> m6, <span class="pl-c1">0</span>, <span class="pl-c1">100</span>
    <span class="pl-s"><span class="pl-pds">"</span>biomass<span class="pl-pds">"</span></span>, m6 <span class="pl-k">+</span> m5 → <span class="pl-c1">nothing</span>, <span class="pl-c1">0</span>, <span class="pl-c1">100</span>
<span class="pl-k">end</span>

gs <span class="pl-k">=</span> [<span class="pl-c1">Gene</span>(<span class="pl-s"><span class="pl-pds">"</span>g<span class="pl-v">$i</span><span class="pl-pds">"</span></span>) <span class="pl-k">for</span> i <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">5</span>]

model<span class="pl-k">.</span>reactions[<span class="pl-s"><span class="pl-pds">"</span>biomass<span class="pl-pds">"</span></span>]<span class="pl-k">.</span>objective_coefficient <span class="pl-k">=</span> <span class="pl-c1">1.0</span>

<span class="pl-c1">add_genes!</span>(model, gs)
<span class="pl-c1">add_metabolites!</span>(model, [m1, m2, m3, m4, m5, m6])

reaction_isozymes <span class="pl-k">=</span> <span class="pl-c1">Dict</span>(
    <span class="pl-s"><span class="pl-pds">"</span>r3<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> [<span class="pl-c1">Isozyme</span>(<span class="pl-c1">Dict</span>(<span class="pl-s"><span class="pl-pds">"</span>g1<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1</span>), <span class="pl-c1">10.0</span>, <span class="pl-c1">10.0</span>)],
    <span class="pl-s"><span class="pl-pds">"</span>r4<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> [<span class="pl-c1">Isozyme</span>(<span class="pl-c1">Dict</span>(<span class="pl-s"><span class="pl-pds">"</span>g2<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1</span>, <span class="pl-s"><span class="pl-pds">"</span>g3<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">3</span>), <span class="pl-c1">30.0</span>, <span class="pl-c1">20.0</span>)],
    <span class="pl-s"><span class="pl-pds">"</span>r5<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> [<span class="pl-c1">Isozyme</span>(<span class="pl-c1">Dict</span>(<span class="pl-s"><span class="pl-pds">"</span>g3<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1</span>, <span class="pl-s"><span class="pl-pds">"</span>g4<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">2</span>), <span class="pl-c1">70.0</span>, <span class="pl-c1">30.0</span>)],
    <span class="pl-s"><span class="pl-pds">"</span>r7<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> [<span class="pl-c1">Isozyme</span>(<span class="pl-c1">Dict</span>(<span class="pl-s"><span class="pl-pds">"</span>g5<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1</span>), <span class="pl-c1">50.0</span>, <span class="pl-c1">20.0</span>)],
)
gene_product_bounds <span class="pl-k">=</span> <span class="pl-c1">Dict</span>(
    <span class="pl-s"><span class="pl-pds">"</span>g1<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> (<span class="pl-c1">0.0</span>, <span class="pl-c1">0.2</span>),
    <span class="pl-s"><span class="pl-pds">"</span>g2<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> (<span class="pl-c1">0.0</span>, <span class="pl-c1">0.1</span>),
    <span class="pl-s"><span class="pl-pds">"</span>g3<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> (<span class="pl-c1">0.0</span>, <span class="pl-c1">10.0</span>),
    <span class="pl-s"><span class="pl-pds">"</span>g4<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> (<span class="pl-c1">0.0</span>, <span class="pl-c1">1000.0</span>),
    <span class="pl-s"><span class="pl-pds">"</span>g5<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> (<span class="pl-c1">0.0</span>, <span class="pl-c1">1000.0</span>),
)

gene_product_molar_mass <span class="pl-k">=</span> <span class="pl-c1">Dict</span>(<span class="pl-s"><span class="pl-pds">"</span>g1<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1.0</span>, <span class="pl-s"><span class="pl-pds">"</span>g2<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">2.0</span>, <span class="pl-s"><span class="pl-pds">"</span>g3<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">3.0</span>, <span class="pl-s"><span class="pl-pds">"</span>g4<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">4.0</span>, <span class="pl-s"><span class="pl-pds">"</span>g5<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">5.0</span>)

gene_product_mass_group_bound <span class="pl-k">=</span> <span class="pl-c1">Dict</span>(<span class="pl-s"><span class="pl-pds">"</span>uncategorized<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1.0</span>)

model

<span class="pl-c"><span class="pl-c">#</span> Construct and simulate a GECKO model</span>
gecko_model <span class="pl-k">=</span> <span class="pl-c1">make_gecko_model</span>(
    model;
    reaction_isozymes,
    gene_product_bounds,
    gene_product_molar_mass,
    gene_product_mass_group_bound,
)

<span class="pl-c"><span class="pl-c">#</span> Get classic GECKO solution</span>
optimized_model <span class="pl-k">=</span> <span class="pl-c1">flux_balance_analysis</span>(
    gecko_model,
    Tulip<span class="pl-k">.</span>Optimizer;
)
gecko_fluxes <span class="pl-k">=</span> <span class="pl-c1">flux_dict</span>(gecko_model, optimized_model) <span class="pl-c"><span class="pl-c">#</span> notice that r5 is inactive!</span>

<span class="pl-c"><span class="pl-c">#</span> Prune away inactive reactions</span>
pruned_model <span class="pl-k">=</span> <span class="pl-c1">prune_model</span>(model, gecko_fluxes)

<span class="pl-c"><span class="pl-c">#</span> Differentiate an optimal solution</span>
pruned_gecko_model <span class="pl-k">=</span> <span class="pl-c1">make_gecko_model</span>(
    pruned_model;
    reaction_isozymes,
    gene_product_bounds,
    gene_product_molar_mass,
    gene_product_mass_group_bound,
)

rid_enzyme <span class="pl-k">=</span> <span class="pl-c1">Dict</span>(
    k <span class="pl-k">=&gt;</span> <span class="pl-c1">isozyme_to_enzyme</span>(<span class="pl-c1">first</span>(v), gene_product_molar_mass; direction <span class="pl-k">=</span> <span class="pl-c1">:forward</span>)
    <span class="pl-k">for</span> (k, v) <span class="pl-k">in</span> reaction_isozymes
)

diffmodel <span class="pl-k">=</span> <span class="pl-c1">with_parameters</span>(gecko_model, rid_enzyme)

x, dx <span class="pl-k">=</span> <span class="pl-c1">differentiate</span>(
    diffmodel,
    Tulip<span class="pl-k">.</span>Optimizer
)</pre></div>
<p dir="auto">Here, <code>x</code> are the variables, corresponding to <code>diffmodel.var_ids</code>, and <code>dx</code> are
the derivatives, where rows correspond to <code>diffmodel.param_ids</code>, and columns
correspond to <code>diffmodel.var_ids</code>.</p>
<p dir="auto">While this package is under development, you can already use more advanced
functionality. Look at the tests to see how to incorporate thermodynamic and/or
saturation effects these differentiable models.</p>
</article></div>