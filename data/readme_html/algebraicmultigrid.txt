<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-algebraic-multigrid-amg" class="anchor" aria-hidden="true" href="#algebraic-multigrid-amg"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Algebraic Multigrid (AMG)</h1>
<p><a href="https://travis-ci.org/JuliaLinearAlgebra/AlgebraicMultigrid.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/c9c775011a8cf4560a47354fbc6230c5d48c54f8f65f2a4b3f4847fb26ab6282/68747470733a2f2f7472617669732d63692e6f72672f4a756c69614c696e656172416c67656272612f416c676562726169634d756c7469677269642e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaLinearAlgebra/AlgebraicMultigrid.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/JuliaLinearAlgebra/AlgebraicMultigrid.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/52ecc0781a1a1e73eef6261c13e13305617c3a293f5943668eac09f7cf21f02a/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f4a756c69614c696e656172416c67656272612f416c676562726169634d756c7469677269642e6a6c2f62616467652e7376673f6272616e63683d6d617374657226736572766963653d676974687562" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/JuliaLinearAlgebra/AlgebraicMultigrid.jl/badge.svg?branch=master&amp;service=github" style="max-width:100%;"></a>
<a href="http://codecov.io/github/JuliaLinearAlgebra/AlgebraicMultigrid.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/4c87a762c4b7f46f442ba3e77e6c958c8495d423d213c59ec031c11ce9fa7ce5/687474703a2f2f636f6465636f762e696f2f6769746875622f4a756c69614c696e656172416c67656272612f416c676562726169634d756c7469677269642e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/JuliaLinearAlgebra/AlgebraicMultigrid.jl/coverage.svg?branch=master" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/ranjanan/algebraicmultigrid-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/3b0563a259221bbbb8b9341fa426517e87d9c1b35cd230c897e340ff0483f6d6/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f30776e6a346c686b3172766c35706a703f7376673d74727565" alt="Build status" data-canonical-src="https://ci.appveyor.com/api/projects/status/0wnj4lhk1rvl5pjp?svg=true" style="max-width:100%;"></a></p>
<p>This package lets you solve sparse linear systems using Algebraic Multigrid (AMG). This works especially well for symmetric positive definite matrices.</p>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using AlgebraicMultigrid

A = poisson(1000) # Creates a sample symmetric positive definite sparse matrix
ml = ruge_stuben(A) # Construct a Ruge-Stuben solver
# Multilevel Solver
# -----------------
# Operator Complexity: 1.9859906604402935
# Grid Complexity: 1.99
# No. of Levels: 8
# Coarse Solver: AMG.Pinv()
# Level     Unknowns     NonZeros
# -----     --------     --------
#     1         1000         2998 [50.35%]
#     2          500         1498 [25.16%]
#     3          250          748 [12.56%]
#     4          125          373 [ 6.26%]
#     5           62          184 [ 3.09%]
#     6           31           91 [ 1.53%]
#     7           15           43 [ 0.72%]
#     8            7           19 [ 0.32%]


solve(ml, A * ones(1000)) # should return ones(1000)
"><pre><span class="pl-k">using</span> AlgebraicMultigrid

A <span class="pl-k">=</span> <span class="pl-c1">poisson</span>(<span class="pl-c1">1000</span>) <span class="pl-c"><span class="pl-c">#</span> Creates a sample symmetric positive definite sparse matrix</span>
ml <span class="pl-k">=</span> <span class="pl-c1">ruge_stuben</span>(A) <span class="pl-c"><span class="pl-c">#</span> Construct a Ruge-Stuben solver</span>
<span class="pl-c"><span class="pl-c">#</span> Multilevel Solver</span>
<span class="pl-c"><span class="pl-c">#</span> -----------------</span>
<span class="pl-c"><span class="pl-c">#</span> Operator Complexity: 1.9859906604402935</span>
<span class="pl-c"><span class="pl-c">#</span> Grid Complexity: 1.99</span>
<span class="pl-c"><span class="pl-c">#</span> No. of Levels: 8</span>
<span class="pl-c"><span class="pl-c">#</span> Coarse Solver: AMG.Pinv()</span>
<span class="pl-c"><span class="pl-c">#</span> Level     Unknowns     NonZeros</span>
<span class="pl-c"><span class="pl-c">#</span> -----     --------     --------</span>
<span class="pl-c"><span class="pl-c">#</span>     1         1000         2998 [50.35%]</span>
<span class="pl-c"><span class="pl-c">#</span>     2          500         1498 [25.16%]</span>
<span class="pl-c"><span class="pl-c">#</span>     3          250          748 [12.56%]</span>
<span class="pl-c"><span class="pl-c">#</span>     4          125          373 [ 6.26%]</span>
<span class="pl-c"><span class="pl-c">#</span>     5           62          184 [ 3.09%]</span>
<span class="pl-c"><span class="pl-c">#</span>     6           31           91 [ 1.53%]</span>
<span class="pl-c"><span class="pl-c">#</span>     7           15           43 [ 0.72%]</span>
<span class="pl-c"><span class="pl-c">#</span>     8            7           19 [ 0.32%]</span>


<span class="pl-c1">solve</span>(ml, A <span class="pl-k">*</span> <span class="pl-c1">ones</span>(<span class="pl-c1">1000</span>)) <span class="pl-c"><span class="pl-c">#</span> should return ones(1000)</span></pre></div>
<h3><a id="user-content-as-a-preconditioner" class="anchor" aria-hidden="true" href="#as-a-preconditioner"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>As a Preconditioner</h3>
<p>You can use AMG as a preconditioner for Krylov methods such as Conjugate Gradients.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="import IterativeSolvers: cg
p = aspreconditioner(ml)
c = cg(A, A*ones(1000), Pl = p)
"><pre><span class="pl-k">import</span> IterativeSolvers<span class="pl-k">:</span> cg
p <span class="pl-k">=</span> <span class="pl-c1">aspreconditioner</span>(ml)
c <span class="pl-k">=</span> <span class="pl-c1">cg</span>(A, A<span class="pl-k">*</span><span class="pl-c1">ones</span>(<span class="pl-c1">1000</span>), Pl <span class="pl-k">=</span> p)</pre></div>
<h2><a id="user-content-features-and-roadmap" class="anchor" aria-hidden="true" href="#features-and-roadmap"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Features and Roadmap</h2>
<p>This package currently supports:</p>
<p>AMG Styles:</p>
<ul>
<li>Ruge-Stuben Solver</li>
<li>Smoothed Aggregation (SA)</li>
</ul>
<p>Strength of Connection:</p>
<ul>
<li>Classical Strength of Connection</li>
<li>Symmetric Strength of Connection</li>
</ul>
<p>Smoothers:</p>
<ul>
<li>Gauss Seidel (Symmetric, Forward, Backward)</li>
<li>Damped Jacobi</li>
</ul>
<p>Cycling:</p>
<ul>
<li>V, W and F cycles</li>
</ul>
<p>In the future, this package will support:</p>
<ol>
<li>Other splitting methods (like CLJP)</li>
<li>SOR smoother</li>
<li>AMLI cycles</li>
</ol>
<h4><a id="user-content-acknowledgements" class="anchor" aria-hidden="true" href="#acknowledgements"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Acknowledgements</h4>
<p>This package has been heavily inspired by the <a href="http://github.com/pyamg/pyamg"><code>PyAMG</code></a> project.</p>
</article></div>