<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-algebraic-multigrid-amg" class="anchor" aria-hidden="true" href="#algebraic-multigrid-amg"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Algebraic Multigrid (AMG)</h1>
<table>
<thead>
<tr>
<th align="center"><strong>Build Status</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><a href="https://github.com/JuliaLinearAlgebra/AlgebraicMultigrid.jl/actions?query=workflow%3ACI"><img src="https://github.com/JuliaLinearAlgebra/AlgebraicMultigrid.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a></td>
</tr>
</tbody>
</table>
<p dir="auto">This package lets you solve sparse linear systems using Algebraic Multigrid (AMG). This works especially well for symmetric positive definite matrices.</p>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<h3 dir="auto"><a id="user-content-using-the-commonsolve-interface" class="anchor" aria-hidden="true" href="#using-the-commonsolve-interface"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Using the CommonSolve interface</h3>
<p dir="auto">This is highest level API. It internally creates the multilevel object
and calls the multigrid cycling <code>_solve</code>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="A = poisson(100); 
b = rand(100);
solve(A, b, RugeStubenAMG(), maxiter = 1, abstol = 1e-6)"><pre>A <span class="pl-k">=</span> <span class="pl-c1">poisson</span>(<span class="pl-c1">100</span>); 
b <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">100</span>);
<span class="pl-c1">solve</span>(A, b, <span class="pl-c1">RugeStubenAMG</span>(), maxiter <span class="pl-k">=</span> <span class="pl-c1">1</span>, abstol <span class="pl-k">=</span> <span class="pl-c1">1e-6</span>)</pre></div>
<h3 dir="auto"><a id="user-content-multigrid-cycling" class="anchor" aria-hidden="true" href="#multigrid-cycling"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Multigrid cycling</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using AlgebraicMultigrid

A = poisson(1000) # Creates a sample symmetric positive definite sparse matrix
ml = ruge_stuben(A) # Construct a Ruge-Stuben solver
# Multilevel Solver
# -----------------
# Operator Complexity: 1.9859906604402935
# Grid Complexity: 1.99
# No. of Levels: 8
# Coarse Solver: AMG.Pinv()
# Level     Unknowns     NonZeros
# -----     --------     --------
#     1         1000         2998 [50.35%]
#     2          500         1498 [25.16%]
#     3          250          748 [12.56%]
#     4          125          373 [ 6.26%]
#     5           62          184 [ 3.09%]
#     6           31           91 [ 1.53%]
#     7           15           43 [ 0.72%]
#     8            7           19 [ 0.32%]


AlgebraicMultigrid._solve(ml, A * ones(1000)) # should return ones(1000)"><pre><span class="pl-k">using</span> AlgebraicMultigrid

A <span class="pl-k">=</span> <span class="pl-c1">poisson</span>(<span class="pl-c1">1000</span>) <span class="pl-c"><span class="pl-c">#</span> Creates a sample symmetric positive definite sparse matrix</span>
ml <span class="pl-k">=</span> <span class="pl-c1">ruge_stuben</span>(A) <span class="pl-c"><span class="pl-c">#</span> Construct a Ruge-Stuben solver</span>
<span class="pl-c"><span class="pl-c">#</span> Multilevel Solver</span>
<span class="pl-c"><span class="pl-c">#</span> -----------------</span>
<span class="pl-c"><span class="pl-c">#</span> Operator Complexity: 1.9859906604402935</span>
<span class="pl-c"><span class="pl-c">#</span> Grid Complexity: 1.99</span>
<span class="pl-c"><span class="pl-c">#</span> No. of Levels: 8</span>
<span class="pl-c"><span class="pl-c">#</span> Coarse Solver: AMG.Pinv()</span>
<span class="pl-c"><span class="pl-c">#</span> Level     Unknowns     NonZeros</span>
<span class="pl-c"><span class="pl-c">#</span> -----     --------     --------</span>
<span class="pl-c"><span class="pl-c">#</span>     1         1000         2998 [50.35%]</span>
<span class="pl-c"><span class="pl-c">#</span>     2          500         1498 [25.16%]</span>
<span class="pl-c"><span class="pl-c">#</span>     3          250          748 [12.56%]</span>
<span class="pl-c"><span class="pl-c">#</span>     4          125          373 [ 6.26%]</span>
<span class="pl-c"><span class="pl-c">#</span>     5           62          184 [ 3.09%]</span>
<span class="pl-c"><span class="pl-c">#</span>     6           31           91 [ 1.53%]</span>
<span class="pl-c"><span class="pl-c">#</span>     7           15           43 [ 0.72%]</span>
<span class="pl-c"><span class="pl-c">#</span>     8            7           19 [ 0.32%]</span>


AlgebraicMultigrid<span class="pl-k">.</span><span class="pl-c1">_solve</span>(ml, A <span class="pl-k">*</span> <span class="pl-c1">ones</span>(<span class="pl-c1">1000</span>)) <span class="pl-c"><span class="pl-c">#</span> should return ones(1000)</span></pre></div>
<h3 dir="auto"><a id="user-content-as-a-preconditioner" class="anchor" aria-hidden="true" href="#as-a-preconditioner"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>As a Preconditioner</h3>
<p dir="auto">You can use AMG as a preconditioner for Krylov methods such as Conjugate Gradients.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="import IterativeSolvers: cg
p = aspreconditioner(ml)
c = cg(A, A*ones(1000), Pl = p)"><pre><span class="pl-k">import</span> IterativeSolvers<span class="pl-k">:</span> cg
p <span class="pl-k">=</span> <span class="pl-c1">aspreconditioner</span>(ml)
c <span class="pl-k">=</span> <span class="pl-c1">cg</span>(A, A<span class="pl-k">*</span><span class="pl-c1">ones</span>(<span class="pl-c1">1000</span>), Pl <span class="pl-k">=</span> p)</pre></div>
<h2 dir="auto"><a id="user-content-features-and-roadmap" class="anchor" aria-hidden="true" href="#features-and-roadmap"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Features and Roadmap</h2>
<p dir="auto">This package currently supports:</p>
<p dir="auto">AMG Styles:</p>
<ul dir="auto">
<li>Ruge-Stuben Solver</li>
<li>Smoothed Aggregation (SA)</li>
</ul>
<p dir="auto">Strength of Connection:</p>
<ul dir="auto">
<li>Classical Strength of Connection</li>
<li>Symmetric Strength of Connection</li>
</ul>
<p dir="auto">Smoothers:</p>
<ul dir="auto">
<li>Gauss Seidel (Symmetric, Forward, Backward)</li>
<li>Damped Jacobi</li>
</ul>
<p dir="auto">Cycling:</p>
<ul dir="auto">
<li>V, W and F cycles</li>
</ul>
<p dir="auto">In the future, this package will support:</p>
<ol dir="auto">
<li>Other splitting methods (like CLJP)</li>
<li>SOR smoother</li>
<li>AMLI cycles</li>
</ol>
<h4 dir="auto"><a id="user-content-acknowledgements" class="anchor" aria-hidden="true" href="#acknowledgements"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Acknowledgements</h4>
<p dir="auto">This package has been heavily inspired by the <a href="http://github.com/pyamg/pyamg"><code>PyAMG</code></a> project.</p>
</article></div>