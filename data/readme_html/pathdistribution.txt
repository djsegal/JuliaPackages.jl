<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-pathdistributionjl" class="anchor" aria-hidden="true" href="#pathdistributionjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>PathDistribution.jl</h1>
<p dir="auto"><a href="https://github.com/chkwon/PathDistribution.jl/actions?query=workflow%3ACI"><img src="https://github.com/chkwon/PathDistribution.jl/workflows/CI/badge.svg?branch=master" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/chkwon/PathDistribution.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/6546cd11679ecedf6e3b1cecd2f348103dcd62971c060ad22577f661ebd601aa/68747470733a2f2f636f6465636f762e696f2f67682f63686b776f6e2f50617468446973747269627574696f6e2e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/chkwon/PathDistribution.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">This Julia package implements the Monte Carlo path generation method to estimate the number of simple paths between a pair of nodes in a graph, proposed by Roberts and Kroese (2007).</p>
<ul dir="auto">
<li><a href="http://dx.doi.org/10.7155/jgaa.00142" rel="nofollow">Roberts, B., &amp; Kroese, D. P. (2007). Estimating the Number of <em>s</em>-<em>t</em> Paths in a Graph. <em>Journal of Graph Algorithms and Applications</em>, 11(1), 195-214.</a></li>
</ul>
<p dir="auto">Extending the same idea, this package also estimate the path-length distribution. That is, we can estimate the number of paths whose length is no greater than a certain number. This idea was used in the following paper:</p>
<ul dir="auto">
<li><a href="http://www.chkwon.net/papers/sun_gbr.pdf" rel="nofollow">Sun, L., Karwan, M, &amp; Kwon, C. Generalized Bounded Rationality and Robust Multi-Commodity Network Design.</a></li>
</ul>
<p dir="auto">This package can also be used to fully enumerate all paths.</p>
<h1 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h1>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Pkg.add(&quot;PathDistribution&quot;)"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>PathDistribution<span class="pl-pds">"</span></span>)</pre></div>
<h1 dir="auto"><a id="user-content-basic-usage-with-an-adjacency-matrix" class="anchor" aria-hidden="true" href="#basic-usage-with-an-adjacency-matrix"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Basic Usage with an Adjacency Matrix</h1>
<p dir="auto">First import the package:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using PathDistribution"><pre><span class="pl-k">using</span> PathDistribution</pre></div>
<p dir="auto">Suppose we have an adjacency matrix of the form:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="adj_mtx = [ 0 1 1 1 0 1 1 1 ;
            1 0 0 0 1 1 1 0 ;
            1 0 0 1 1 1 1 1 ;
            1 0 1 0 1 1 1 1 ;
            0 1 1 1 0 1 0 0 ;
            1 1 1 1 1 0 1 1 ;
            1 1 1 1 0 1 0 1 ;
            1 0 1 1 0 1 1 0 ]"><pre>adj_mtx <span class="pl-k">=</span> [ <span class="pl-c1">0</span> <span class="pl-c1">1</span> <span class="pl-c1">1</span> <span class="pl-c1">1</span> <span class="pl-c1">0</span> <span class="pl-c1">1</span> <span class="pl-c1">1</span> <span class="pl-c1">1</span> ;
            <span class="pl-c1">1</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">1</span> <span class="pl-c1">1</span> <span class="pl-c1">1</span> <span class="pl-c1">0</span> ;
            <span class="pl-c1">1</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">1</span> <span class="pl-c1">1</span> <span class="pl-c1">1</span> <span class="pl-c1">1</span> <span class="pl-c1">1</span> ;
            <span class="pl-c1">1</span> <span class="pl-c1">0</span> <span class="pl-c1">1</span> <span class="pl-c1">0</span> <span class="pl-c1">1</span> <span class="pl-c1">1</span> <span class="pl-c1">1</span> <span class="pl-c1">1</span> ;
            <span class="pl-c1">0</span> <span class="pl-c1">1</span> <span class="pl-c1">1</span> <span class="pl-c1">1</span> <span class="pl-c1">0</span> <span class="pl-c1">1</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span> ;
            <span class="pl-c1">1</span> <span class="pl-c1">1</span> <span class="pl-c1">1</span> <span class="pl-c1">1</span> <span class="pl-c1">1</span> <span class="pl-c1">0</span> <span class="pl-c1">1</span> <span class="pl-c1">1</span> ;
            <span class="pl-c1">1</span> <span class="pl-c1">1</span> <span class="pl-c1">1</span> <span class="pl-c1">1</span> <span class="pl-c1">0</span> <span class="pl-c1">1</span> <span class="pl-c1">0</span> <span class="pl-c1">1</span> ;
            <span class="pl-c1">1</span> <span class="pl-c1">0</span> <span class="pl-c1">1</span> <span class="pl-c1">1</span> <span class="pl-c1">0</span> <span class="pl-c1">1</span> <span class="pl-c1">1</span> <span class="pl-c1">0</span> ]</pre></div>
<p dir="auto">and the origin node is 1 the destination node is 8.</p>
<h2 dir="auto"><a id="user-content-monte-carlo-simulation" class="anchor" aria-hidden="true" href="#monte-carlo-simulation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Monte-Carlo Simulation</h2>
<p dir="auto">To estimate the total number of paths from the origin to the destination, we can do the following:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# N1: number of samples in the first stage (default=5000)
# N2: number of samples in the second stage (default=10000)
no_path_est = monte_carlo_path_number(1, 8, adj_mtx)
no_path_est = monte_carlo_path_number(1, 8, adj_mtx, N1, N2)"><pre><span class="pl-c"><span class="pl-c">#</span> N1: number of samples in the first stage (default=5000)</span>
<span class="pl-c"><span class="pl-c">#</span> N2: number of samples in the second stage (default=10000)</span>
no_path_est <span class="pl-k">=</span> <span class="pl-c1">monte_carlo_path_number</span>(<span class="pl-c1">1</span>, <span class="pl-c1">8</span>, adj_mtx)
no_path_est <span class="pl-k">=</span> <span class="pl-c1">monte_carlo_path_number</span>(<span class="pl-c1">1</span>, <span class="pl-c1">8</span>, adj_mtx, N1, N2)</pre></div>
<p dir="auto">To estimate the path-length distribution:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="samples = monte_carlo_path_sampling(1, size(adj_mtx,1), adj_mtx)
x_data_est, y_data_est = estimate_cumulative_count(samples)"><pre>samples <span class="pl-k">=</span> <span class="pl-c1">monte_carlo_path_sampling</span>(<span class="pl-c1">1</span>, <span class="pl-c1">size</span>(adj_mtx,<span class="pl-c1">1</span>), adj_mtx)
x_data_est, y_data_est <span class="pl-k">=</span> <span class="pl-c1">estimate_cumulative_count</span>(samples)</pre></div>
<p dir="auto">where <code>x_data_est</code> and <code>y_data_est</code> are for estimating the cumulative count of paths by path length. That is,
<code>y_data_est[i]</code> is an estimate for the number of simple paths whose length is no greater than <code>x_data_est[i]</code> between the origin and destination nodes. Note that <code>y_data_est[end]</code> is the estimated number of total paths.</p>
<h2 dir="auto"><a id="user-content-full-enumeration" class="anchor" aria-hidden="true" href="#full-enumeration"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Full Enumeration</h2>
<p dir="auto">This package can also enumerate all paths explicitly. (<strong>CAUTION:</strong> It may take "forever" to enumerate all paths for a large network.)</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="path_enums = path_enumeration(1, size(adj_mtx,1), adj_mtx)
x_data, y_data = actual_cumulative_count(path_enums)"><pre>path_enums <span class="pl-k">=</span> <span class="pl-c1">path_enumeration</span>(<span class="pl-c1">1</span>, <span class="pl-c1">size</span>(adj_mtx,<span class="pl-c1">1</span>), adj_mtx)
x_data, y_data <span class="pl-k">=</span> <span class="pl-c1">actual_cumulative_count</span>(path_enums)</pre></div>
<p dir="auto">You can access each enumerated path as follows:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="for enum in path_enums
    println(&quot;Length = $(enum.length) : $(enum.path)&quot;)
end
println(&quot;The total number of paths is $(length(path_enums))&quot;)"><pre><span class="pl-k">for</span> enum <span class="pl-k">in</span> path_enums
    <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>Length = <span class="pl-v">$(enum<span class="pl-k">.</span>length)</span> : <span class="pl-v">$(enum<span class="pl-k">.</span>path)</span><span class="pl-pds">"</span></span>)
<span class="pl-k">end</span>
<span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>The total number of paths is <span class="pl-v">$(<span class="pl-c1">length</span>(path_enums))</span><span class="pl-pds">"</span></span>)</pre></div>
<h2 dir="auto"><a id="user-content-results" class="anchor" aria-hidden="true" href="#results"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Results</h2>
<p dir="auto">One obtains results similar to the following:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="The total number of paths:
- Full enumeration      : 397
- Monte Carlo estimation: 395.6732706634341"><pre class="notranslate"><code>The total number of paths:
- Full enumeration      : 397
- Monte Carlo estimation: 395.6732706634341
</code></pre></div>
<h1 dir="auto"><a id="user-content-another-form" class="anchor" aria-hidden="true" href="#another-form"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Another Form</h1>
<p dir="auto">When you have the following form data:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="data = [
 1   4  79.0 ;
 1   2  59.0 ;
 2   4  31.0 ;
 2   3  90.0 ;
 2   5   9.0 ;
 2   6  32.0 ;
 3   9  89.0 ;
 3   8  66.0 ;
 3   6  68.0 ;
 3   7  47.0 ;
 4   3  14.0 ;
 4   9  95.0 ;
 4   8  88.0 ;
 5   3  44.0 ;
 5   6  83.0 ;
 6   7  33.0 ;
 6   8  37.0 ;
 7  11  79.0 ;
 7  12  10.0 ;
 8   7  95.0 ;
 8  10   0.0 ;
 8  12  30.0 ;
 9  10   5.0 ;
 9  11  44.0 ;
10  13  79.0 ;
10  14  91.0 ;
11  14  53.0 ;
11  15  80.0 ;
11  13  56.0 ;
12  15  75.0 ;
12  14   1.0 ;
13  14  48.0 ;
14  15  25.0 ;
]

st = round(Int, data[:,1]) #first column of data
en = round(Int, data[:,2]) #second column of data
len = data[:,3] #third

# Double them for two-ways.
start_node = [st; en]
end_node = [en; st]
link_length = [len; len]

origin = 1
destination = 15"><pre>data <span class="pl-k">=</span> [
 <span class="pl-c1">1</span>   <span class="pl-c1">4</span>  <span class="pl-c1">79.0</span> ;
 <span class="pl-c1">1</span>   <span class="pl-c1">2</span>  <span class="pl-c1">59.0</span> ;
 <span class="pl-c1">2</span>   <span class="pl-c1">4</span>  <span class="pl-c1">31.0</span> ;
 <span class="pl-c1">2</span>   <span class="pl-c1">3</span>  <span class="pl-c1">90.0</span> ;
 <span class="pl-c1">2</span>   <span class="pl-c1">5</span>   <span class="pl-c1">9.0</span> ;
 <span class="pl-c1">2</span>   <span class="pl-c1">6</span>  <span class="pl-c1">32.0</span> ;
 <span class="pl-c1">3</span>   <span class="pl-c1">9</span>  <span class="pl-c1">89.0</span> ;
 <span class="pl-c1">3</span>   <span class="pl-c1">8</span>  <span class="pl-c1">66.0</span> ;
 <span class="pl-c1">3</span>   <span class="pl-c1">6</span>  <span class="pl-c1">68.0</span> ;
 <span class="pl-c1">3</span>   <span class="pl-c1">7</span>  <span class="pl-c1">47.0</span> ;
 <span class="pl-c1">4</span>   <span class="pl-c1">3</span>  <span class="pl-c1">14.0</span> ;
 <span class="pl-c1">4</span>   <span class="pl-c1">9</span>  <span class="pl-c1">95.0</span> ;
 <span class="pl-c1">4</span>   <span class="pl-c1">8</span>  <span class="pl-c1">88.0</span> ;
 <span class="pl-c1">5</span>   <span class="pl-c1">3</span>  <span class="pl-c1">44.0</span> ;
 <span class="pl-c1">5</span>   <span class="pl-c1">6</span>  <span class="pl-c1">83.0</span> ;
 <span class="pl-c1">6</span>   <span class="pl-c1">7</span>  <span class="pl-c1">33.0</span> ;
 <span class="pl-c1">6</span>   <span class="pl-c1">8</span>  <span class="pl-c1">37.0</span> ;
 <span class="pl-c1">7</span>  <span class="pl-c1">11</span>  <span class="pl-c1">79.0</span> ;
 <span class="pl-c1">7</span>  <span class="pl-c1">12</span>  <span class="pl-c1">10.0</span> ;
 <span class="pl-c1">8</span>   <span class="pl-c1">7</span>  <span class="pl-c1">95.0</span> ;
 <span class="pl-c1">8</span>  <span class="pl-c1">10</span>   <span class="pl-c1">0.0</span> ;
 <span class="pl-c1">8</span>  <span class="pl-c1">12</span>  <span class="pl-c1">30.0</span> ;
 <span class="pl-c1">9</span>  <span class="pl-c1">10</span>   <span class="pl-c1">5.0</span> ;
 <span class="pl-c1">9</span>  <span class="pl-c1">11</span>  <span class="pl-c1">44.0</span> ;
<span class="pl-c1">10</span>  <span class="pl-c1">13</span>  <span class="pl-c1">79.0</span> ;
<span class="pl-c1">10</span>  <span class="pl-c1">14</span>  <span class="pl-c1">91.0</span> ;
<span class="pl-c1">11</span>  <span class="pl-c1">14</span>  <span class="pl-c1">53.0</span> ;
<span class="pl-c1">11</span>  <span class="pl-c1">15</span>  <span class="pl-c1">80.0</span> ;
<span class="pl-c1">11</span>  <span class="pl-c1">13</span>  <span class="pl-c1">56.0</span> ;
<span class="pl-c1">12</span>  <span class="pl-c1">15</span>  <span class="pl-c1">75.0</span> ;
<span class="pl-c1">12</span>  <span class="pl-c1">14</span>   <span class="pl-c1">1.0</span> ;
<span class="pl-c1">13</span>  <span class="pl-c1">14</span>  <span class="pl-c1">48.0</span> ;
<span class="pl-c1">14</span>  <span class="pl-c1">15</span>  <span class="pl-c1">25.0</span> ;
]

st <span class="pl-k">=</span> <span class="pl-c1">round</span>(Int, data[:,<span class="pl-c1">1</span>]) <span class="pl-c"><span class="pl-c">#</span>first column of data</span>
en <span class="pl-k">=</span> <span class="pl-c1">round</span>(Int, data[:,<span class="pl-c1">2</span>]) <span class="pl-c"><span class="pl-c">#</span>second column of data</span>
len <span class="pl-k">=</span> data[:,<span class="pl-c1">3</span>] <span class="pl-c"><span class="pl-c">#</span>third</span>

<span class="pl-c"><span class="pl-c">#</span> Double them for two-ways.</span>
start_node <span class="pl-k">=</span> [st; en]
end_node <span class="pl-k">=</span> [en; st]
link_length <span class="pl-k">=</span> [len; len]

origin <span class="pl-k">=</span> <span class="pl-c1">1</span>
destination <span class="pl-k">=</span> <span class="pl-c1">15</span></pre></div>
<h2 dir="auto"><a id="user-content-monte-carlo-simulation-1" class="anchor" aria-hidden="true" href="#monte-carlo-simulation-1"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Monte-Carlo Simulation</h2>
<p dir="auto">The similar tasks as above can be done as follows:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# Full Enumeration
path_enums = path_enumeration(origin, destination, start_node, end_node, link_length)
x_data, y_data = actual_cumulative_count(path_enums)

# Monte-Carlo estimation
N1 = 5000
N2 = 10000
samples = monte_carlo_path_sampling(origin, destination, start_node, end_node, link_length)
samples = monte_carlo_path_sampling(origin, destination, start_node, end_node, link_length, N1, N2)
x_data_est, y_data_est = estimate_cumulative_count(samples)

println(&quot;===== Another Example =====&quot;)
println(&quot;The total number of paths:&quot;)
println(&quot;- Full enumeration      : $(length(path_enums))&quot;)
println(&quot;- Monte Carlo estimation: $(y_data_est[end])&quot;)"><pre><span class="pl-c"><span class="pl-c">#</span> Full Enumeration</span>
path_enums <span class="pl-k">=</span> <span class="pl-c1">path_enumeration</span>(origin, destination, start_node, end_node, link_length)
x_data, y_data <span class="pl-k">=</span> <span class="pl-c1">actual_cumulative_count</span>(path_enums)

<span class="pl-c"><span class="pl-c">#</span> Monte-Carlo estimation</span>
N1 <span class="pl-k">=</span> <span class="pl-c1">5000</span>
N2 <span class="pl-k">=</span> <span class="pl-c1">10000</span>
samples <span class="pl-k">=</span> <span class="pl-c1">monte_carlo_path_sampling</span>(origin, destination, start_node, end_node, link_length)
samples <span class="pl-k">=</span> <span class="pl-c1">monte_carlo_path_sampling</span>(origin, destination, start_node, end_node, link_length, N1, N2)
x_data_est, y_data_est <span class="pl-k">=</span> <span class="pl-c1">estimate_cumulative_count</span>(samples)

<span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>===== Another Example =====<span class="pl-pds">"</span></span>)
<span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>The total number of paths:<span class="pl-pds">"</span></span>)
<span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>- Full enumeration      : <span class="pl-v">$(<span class="pl-c1">length</span>(path_enums))</span><span class="pl-pds">"</span></span>)
<span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>- Monte Carlo estimation: <span class="pl-v">$(y_data_est[<span class="pl-c1">end</span>])</span><span class="pl-pds">"</span></span>)</pre></div>
<h2 dir="auto"><a id="user-content-results-1" class="anchor" aria-hidden="true" href="#results-1"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Results</h2>
<p dir="auto">Results would look like:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="===== Another Example =====
The total number of paths:
- Full enumeration      : 9851
- Monte Carlo estimation: 9742.908561771697"><pre class="notranslate"><code>===== Another Example =====
The total number of paths:
- Full enumeration      : 9851
- Monte Carlo estimation: 9742.908561771697
</code></pre></div>
</article></div>