<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h2><a id="user-content-awsjl" class="anchor" aria-hidden="true" href="#awsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>AWS.jl</h2>
<p><a href="https://github.com/JuliaCloud/AWS.jl/actions?query=workflow%3ACI"><img src="https://github.com/JuliaCloud/AWS.jl/workflows/CI/badge.svg" alt="CI" style="max-width:100%;"></a>
<a href="https://app.bors.tech/repositories/6778" rel="nofollow"><img src="https://camo.githubusercontent.com/0974fbc63eeb2ed86d518ed0afaafe112e9e907ffa1c459396b0be2434c4f83b/68747470733a2f2f626f72732e746563682f696d616765732f62616467655f736d616c6c2e737667" alt="Bors: enabled" data-canonical-src="https://bors.tech/images/badge_small.svg" style="max-width:100%;"></a>
<a href="https://github.com/invenia/BlueStyle"><img src="https://camo.githubusercontent.com/c18fbaa52d94d16b90b19701fc90d289b8a5bb920c74c79bab200b14e75420a4/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c75652d3434393564312e737667" alt="Code Style: Blue" data-canonical-src="https://img.shields.io/badge/code%20style-blue-4495d1.svg" style="max-width:100%;"></a>
<a href="https://github.com/SciML/ColPrac"><img src="https://camo.githubusercontent.com/a6c1efcb19a957860ecb25966a730260b03d6e05380d0c27992ee7f9e3b1feb3/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f436f6c507261632d436f6e7472696275746f72277325323047756964652d626c756576696f6c6574" alt="ColPrac: Contributor's Guide on Collaborative Practices for Community Packages" data-canonical-src="https://img.shields.io/badge/ColPrac-Contributor's%20Guide-blueviolet" style="max-width:100%;"></a></p>
<p><a href="https://juliacloud.github.io/AWS.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Docs: stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://juliacloud.github.io/AWS.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Docs: dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a></p>
<h2><a id="user-content-overview" class="anchor" aria-hidden="true" href="#overview"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Overview</h2>
<p>A Julia interface for <a href="https://aws.amazon.com" rel="nofollow">Amazon Web Services</a>.</p>
<p>This package replaces <a href="https://github.com/JuliaCloud/AWSCore.jl">AWSCore.jl</a> and <a href="https://github.com/JuliaCloud/AWSSDK.jl">AWSSDK.jl</a> which previously provided low-level and high-level APIs respectively.
It includes automated code generation to ensure all new AWS services are available, as well as keeping existing services up to date.</p>
<p>To see an overview of the architecture see the <a href="https://github.com/JuliaCloud/AWS.jl/wiki/v1-Design-Document">design document</a>.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; Pkg.add(&quot;AWS&quot;)
"><pre>julia<span class="pl-k">&gt;</span> Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>AWS<span class="pl-pds">"</span></span>)</pre></div>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<p><code>AWS.jl</code> can be used with low-level and high-level API requests.
Please note when passing parameters for a request they must be a subtype of <code>AbstractDict{String, &lt;:Any}</code>.</p>
<h3><a id="user-content-low-level" class="anchor" aria-hidden="true" href="#low-level"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Low-Level</h3>
<p>To use the low-level API, you must know how to perform the request you are making.
If you do not know how to perform a request you can reference the <a href="https://docs.aws.amazon.com/" rel="nofollow">AWS Documentation</a>.
Alternatively you can look at <code>/src/services/{Service}.jl</code> to find a list of available requests, as well as their required and optional parameters.</p>
<p>For example, to list the objects in an S3 bucket you must pass in the request method (<code>"GET"</code>) and the endpoint (<code>"/${bucket}"</code>):</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using AWS.AWSServices: s3

s3(&quot;GET&quot;, &quot;/your-bucket&quot;)
"><pre><span class="pl-k">using</span> AWS<span class="pl-k">.</span>AWSServices<span class="pl-k">:</span> s3

<span class="pl-c1">s3</span>(<span class="pl-s"><span class="pl-pds">"</span>GET<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>/your-bucket<span class="pl-pds">"</span></span>)</pre></div>
<h3><a id="user-content-high-level" class="anchor" aria-hidden="true" href="#high-level"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>High-Level</h3>
<p>To use the high-level API, you only need to know the name of the request you wish to make.
For example again, to list the objects in an S3 bucket:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using AWS: @service
@service S3

S3.list_objects(&quot;/your-bucket&quot;)
"><pre><span class="pl-k">using</span> AWS<span class="pl-k">:</span> <span class="pl-c1">@service</span>
<span class="pl-c1">@service</span> S3

S3<span class="pl-k">.</span><span class="pl-c1">list_objects</span>(<span class="pl-s"><span class="pl-pds">"</span>/your-bucket<span class="pl-pds">"</span></span>)</pre></div>
<p><strong>Note:</strong> When calling the <code>@service</code> macro you <strong>CANNOT</strong> match the predefined constant for the low level API. The low level API constants are named in all lowercase, and spaces are replaced with underscores.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using AWS.AWSServices: secrets_manager
using AWS: @service

# This matches the constant and will error!
@service secrets_manager
&gt; ERROR: cannot assign a value to variable AWSServices.secrets_manager from module Main

# This does NOT match the filename structure and will error!
@service secretsmanager
&gt; ERROR: could not open file /.julia/dev/AWS.jl/src/services/secretsmanager.jl

# All of the examples below are valid!
@service Secrets_Manager
@service SECRETS_MANAGER
@service sECRETS_MANAGER
"><pre><span class="pl-k">using</span> AWS<span class="pl-k">.</span>AWSServices<span class="pl-k">:</span> secrets_manager
<span class="pl-k">using</span> AWS<span class="pl-k">:</span> <span class="pl-c1">@service</span>

<span class="pl-c"><span class="pl-c">#</span> This matches the constant and will error!</span>
<span class="pl-c1">@service</span> secrets_manager
<span class="pl-k">&gt;</span> ERROR<span class="pl-k">:</span> cannot assign a value to variable AWSServices<span class="pl-k">.</span>secrets_manager from <span class="pl-k">module</span> Main

<span class="pl-c"><span class="pl-c">#</span> This does NOT match the filename structure and will error!</span>
<span class="pl-c1">@service</span> secretsmanager
<span class="pl-k">&gt;</span> ERROR<span class="pl-k">:</span> could not open file <span class="pl-k">/</span><span class="pl-k">.</span>julia<span class="pl-k">/</span>dev<span class="pl-k">/</span>AWS<span class="pl-k">.</span>jl<span class="pl-k">/</span>src<span class="pl-k">/</span>services<span class="pl-k">/</span>secretsmanager<span class="pl-k">.</span>jl

<span class="pl-c"><span class="pl-c">#</span> All of the examples below are valid!</span>
<span class="pl-c1">@service</span> Secrets_Manager
<span class="pl-c1">@service</span> SECRETS_MANAGER
<span class="pl-c1">@service</span> sECRETS_MANAGER</pre></div>
<h2><a id="user-content-limitations" class="anchor" aria-hidden="true" href="#limitations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Limitations</h2>
<p>Currently there are a few limitations with the high-level APIs.
For example, with S3's DeleteMultipleObjects call.
To remove multiple objects you must pass in an XML string (see below) in the body of the request.</p>
<p>Low-Level API Example:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using AWS.AWSServices: s3

body = &quot;&quot;&quot;
    &lt;Delete xmlns=&quot;http://s3.amazonaws.com/doc/2006-03-01/&quot;&gt;
        &lt;Object&gt;
            &lt;Key&gt;test.txt&lt;/Key&gt;
        &lt;/Object&gt;
    &lt;/Delete&gt;
    &quot;&quot;&quot;
bucket_name = &quot;example-bucket&quot;

s3(&quot;POST&quot;, &quot;/$bucket_name?delete&quot;, Dict(&quot;body&quot; =&gt; body))  # Delete multiple objects
"><pre><span class="pl-k">using</span> AWS<span class="pl-k">.</span>AWSServices<span class="pl-k">:</span> s3

body <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"""</span></span>
<span class="pl-s">    &lt;Delete xmlns="http://s3.amazonaws.com/doc/2006-03-01/"&gt;</span>
<span class="pl-s">        &lt;Object&gt;</span>
<span class="pl-s">            &lt;Key&gt;test.txt&lt;/Key&gt;</span>
<span class="pl-s">        &lt;/Object&gt;</span>
<span class="pl-s">    &lt;/Delete&gt;</span>
<span class="pl-s">    <span class="pl-pds">"""</span></span>
bucket_name <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>example-bucket<span class="pl-pds">"</span></span>

<span class="pl-c1">s3</span>(<span class="pl-s"><span class="pl-pds">"</span>POST<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>/<span class="pl-v">$bucket_name</span>?delete<span class="pl-pds">"</span></span>, <span class="pl-c1">Dict</span>(<span class="pl-s"><span class="pl-pds">"</span>body<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> body))  <span class="pl-c"><span class="pl-c">#</span> Delete multiple objects</span></pre></div>
<p>There is no-programatic way to see this from the <a href="https://github.com/aws/aws-sdk-js/blob/master/apis/s3-2006-03-01.normal.json">aws-sdk-js</a>, so the high-level function will not work.</p>
<p>High-Level API Example:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using AWS: @service
@service S3

body = &quot;&quot;&quot;
    &lt;Delete xmlns=&quot;http://s3.amazonaws.com/doc/2006-03-01/&quot;&gt;
        &lt;Object&gt;
            &lt;Key&gt;test.txt&lt;/Key&gt;
        &lt;/Object&gt;
    &lt;/Delete&gt;
    &quot;&quot;&quot;
bucket_name = &quot;example-bucket&quot;

S3.DeleteObjects(bucket_name, body)  # Delete multiple objects
&gt; ERROR: AWS.AWSExceptions.AWSException(&quot;MissingRequestBodyError&quot;, &quot;Request Body is empty&quot;)
"><pre><span class="pl-k">using</span> AWS<span class="pl-k">:</span> <span class="pl-c1">@service</span>
<span class="pl-c1">@service</span> S3

body <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"""</span></span>
<span class="pl-s">    &lt;Delete xmlns="http://s3.amazonaws.com/doc/2006-03-01/"&gt;</span>
<span class="pl-s">        &lt;Object&gt;</span>
<span class="pl-s">            &lt;Key&gt;test.txt&lt;/Key&gt;</span>
<span class="pl-s">        &lt;/Object&gt;</span>
<span class="pl-s">    &lt;/Delete&gt;</span>
<span class="pl-s">    <span class="pl-pds">"""</span></span>
bucket_name <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>example-bucket<span class="pl-pds">"</span></span>

S3<span class="pl-k">.</span><span class="pl-c1">DeleteObjects</span>(bucket_name, body)  <span class="pl-c"><span class="pl-c">#</span> Delete multiple objects</span>
<span class="pl-k">&gt;</span> ERROR<span class="pl-k">:</span> AWS<span class="pl-k">.</span>AWSExceptions<span class="pl-k">.</span><span class="pl-c1">AWSException</span>(<span class="pl-s"><span class="pl-pds">"</span>MissingRequestBodyError<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Request Body is empty<span class="pl-pds">"</span></span>)</pre></div>
<p>There are most likely other similar functions which require more intricate details in how the requests are performed, both in the S3 definitions and in other services.</p>
<h2><a id="user-content-modifying-functionality" class="anchor" aria-hidden="true" href="#modifying-functionality"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Modifying Functionality</h2>
<p>There are sometimes situations, in which default behavior of AWS.jl might be overridden, for example when this package is used to access S3-compatible object storage of a different cloud service provider, which might have different ways of joining the endpoint url, encoding the region in the signature etc.
In many cases this can be achieved by creating a user-defined subtype of <code>AbstractAWSConfig</code> where some of the default methods are overwritten.
For example, if you want to use the S3 high-level interface to access public data from GCS without authorisation, you could define:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="struct AnonymousGCS &lt;:AbstractAWSConfig end
struct NoCredentials end
AWS.region(aws::AnonymousGCS) = &quot;&quot; # No region
AWS.credentials(aws::AnonymousGCS) = NoCredentials() # No credentials
AWS.check_credentials(c::NoCredentials) = c # Skip credentials check
AWS.sign!(aws::AnonymousGCS, ::AWS.Request) = nothing # Don't sign request
function AWS.generate_service_url(aws::AnonymousGCS, service::String, resource::String)
    service == &quot;s3&quot; || throw(ArgumentError(&quot;Can only handle s3 requests to GCS&quot;))
    return string(&quot;https://storage.googleapis.com.&quot;, resource)
end
AWS.global_aws_config(AnonymousGCS())
"><pre><span class="pl-k">struct</span> AnonymousGCS <span class="pl-k">&lt;:</span><span class="pl-c1">AbstractAWSConfig</span> <span class="pl-k">end</span>
<span class="pl-k">struct</span> NoCredentials <span class="pl-k">end</span>
AWS<span class="pl-k">.</span><span class="pl-en">region</span>(aws<span class="pl-k">::</span><span class="pl-c1">AnonymousGCS</span>) <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span> <span class="pl-c"><span class="pl-c">#</span> No region</span>
AWS<span class="pl-k">.</span><span class="pl-en">credentials</span>(aws<span class="pl-k">::</span><span class="pl-c1">AnonymousGCS</span>) <span class="pl-k">=</span> <span class="pl-c1">NoCredentials</span>() <span class="pl-c"><span class="pl-c">#</span> No credentials</span>
AWS<span class="pl-k">.</span><span class="pl-en">check_credentials</span>(c<span class="pl-k">::</span><span class="pl-c1">NoCredentials</span>) <span class="pl-k">=</span> c <span class="pl-c"><span class="pl-c">#</span> Skip credentials check</span>
AWS<span class="pl-k">.</span><span class="pl-en">sign!</span>(aws<span class="pl-k">::</span><span class="pl-c1">AnonymousGCS</span>, <span class="pl-k">::</span><span class="pl-c1">AWS.Request</span>) <span class="pl-k">=</span> <span class="pl-c1">nothing</span> <span class="pl-c"><span class="pl-c">#</span> Don't sign request</span>
<span class="pl-k">function</span> AWS<span class="pl-k">.</span><span class="pl-en">generate_service_url</span>(aws<span class="pl-k">::</span><span class="pl-c1">AnonymousGCS</span>, service<span class="pl-k">::</span><span class="pl-c1">String</span>, resource<span class="pl-k">::</span><span class="pl-c1">String</span>)
    service <span class="pl-k">==</span> <span class="pl-s"><span class="pl-pds">"</span>s3<span class="pl-pds">"</span></span> <span class="pl-k">||</span> <span class="pl-c1">throw</span>(<span class="pl-c1">ArgumentError</span>(<span class="pl-s"><span class="pl-pds">"</span>Can only handle s3 requests to GCS<span class="pl-pds">"</span></span>))
    <span class="pl-k">return</span> <span class="pl-c1">string</span>(<span class="pl-s"><span class="pl-pds">"</span>https://storage.googleapis.com.<span class="pl-pds">"</span></span>, resource)
<span class="pl-k">end</span>
AWS<span class="pl-k">.</span><span class="pl-c1">global_aws_config</span>(<span class="pl-c1">AnonymousGCS</span>())</pre></div>
<p>which skips some of the signature and credentials checking and modifies the generation of the endpoint url.
A more extended example would be to use this package to access a custom minio server, we can define:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="struct MinioConfig &lt;: AbstractAWSConfig
   endpoint::String
   region::String
   creds
end
AWS.region(c::MinioConfig) = c.region
AWS.credentials(c::MinioConfig) = c.creds
"><pre><span class="pl-k">struct</span> MinioConfig <span class="pl-k">&lt;:</span> <span class="pl-c1">AbstractAWSConfig</span>
   endpoint<span class="pl-k">::</span><span class="pl-c1">String</span>
   region<span class="pl-k">::</span><span class="pl-c1">String</span>
   creds
<span class="pl-k">end</span>
AWS<span class="pl-k">.</span><span class="pl-en">region</span>(c<span class="pl-k">::</span><span class="pl-c1">MinioConfig</span>) <span class="pl-k">=</span> c<span class="pl-k">.</span>region
AWS<span class="pl-k">.</span><span class="pl-en">credentials</span>(c<span class="pl-k">::</span><span class="pl-c1">MinioConfig</span>) <span class="pl-k">=</span> c<span class="pl-k">.</span>creds</pre></div>
<p>and we define our own credentials type:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="struct SimpleCredentials
    access_key_id::String
    secret_key::String
    token::String
end
AWS.check_credentials(c::SimpleCredentials) = c
"><pre><span class="pl-k">struct</span> SimpleCredentials
    access_key_id<span class="pl-k">::</span><span class="pl-c1">String</span>
    secret_key<span class="pl-k">::</span><span class="pl-c1">String</span>
    token<span class="pl-k">::</span><span class="pl-c1">String</span>
<span class="pl-k">end</span>
AWS<span class="pl-k">.</span><span class="pl-en">check_credentials</span>(c<span class="pl-k">::</span><span class="pl-c1">SimpleCredentials</span>) <span class="pl-k">=</span> c</pre></div>
<p>as well as a custom url generator:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="function AWS.generate_service_url(aws::MinioConfig, service::String, resource::String)
    service == &quot;s3&quot; || throw(ArgumentError(&quot;Can only handle s3 requests to Minio&quot;))
    return string(aws.endpoint, resource)
end
AWS.global_aws_config(MinioConfig(&quot;http://127.0.0.1:9000&quot;, &quot;aregion&quot;, SimpleCredentials(&quot;minio&quot;, &quot;minio123&quot;, &quot;&quot;)))
"><pre><span class="pl-k">function</span> AWS<span class="pl-k">.</span><span class="pl-en">generate_service_url</span>(aws<span class="pl-k">::</span><span class="pl-c1">MinioConfig</span>, service<span class="pl-k">::</span><span class="pl-c1">String</span>, resource<span class="pl-k">::</span><span class="pl-c1">String</span>)
    service <span class="pl-k">==</span> <span class="pl-s"><span class="pl-pds">"</span>s3<span class="pl-pds">"</span></span> <span class="pl-k">||</span> <span class="pl-c1">throw</span>(<span class="pl-c1">ArgumentError</span>(<span class="pl-s"><span class="pl-pds">"</span>Can only handle s3 requests to Minio<span class="pl-pds">"</span></span>))
    <span class="pl-k">return</span> <span class="pl-c1">string</span>(aws<span class="pl-k">.</span>endpoint, resource)
<span class="pl-k">end</span>
AWS<span class="pl-k">.</span><span class="pl-c1">global_aws_config</span>(<span class="pl-c1">MinioConfig</span>(<span class="pl-s"><span class="pl-pds">"</span>http://127.0.0.1:9000<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>aregion<span class="pl-pds">"</span></span>, <span class="pl-c1">SimpleCredentials</span>(<span class="pl-s"><span class="pl-pds">"</span>minio<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>minio123<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>)))</pre></div>
<p>Now we are ready to use AWS.jl to do S3-compatible requests to a minio server.</p>
<h2><a id="user-content-alternative-solutions" class="anchor" aria-hidden="true" href="#alternative-solutions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Alternative Solutions</h2>
<p>There are a few alternatives to this package, the two below are being deprecated in favour of this package:</p>
<ul>
<li><a href="https://github.com/JuliaCloud/AWSCore.jl">AWSCore.jl</a> - Low-level AWS interface</li>
<li><a href="https://github.com/JuliaCloud/AWSSDK.jl">AWSSDK.jl</a> - High-level AWS interface</li>
</ul>
<p>As well as some hand-written packages for specific AWS services:</p>
<ul>
<li><a href="https://github.com/JuliaCloud/AWSS3.jl">AWSS3.jl</a> - Julia 1.0+</li>
<li><a href="https://github.com/JuliaCloud/AWSSQS.jl">AWSSQS.jl</a> - Julia 1.0+</li>
<li><a href="https://github.com/samoconnor/AWSSNS.jl">AWSSNS.jl</a> - Julia 0.7</li>
<li><a href="https://github.com/samoconnor/AWSIAM.jl">AWSIAM.jl</a> - Julia 0.6</li>
<li><a href="https://github.com/samoconnor/AWSEC2.jl">AWSEC2.jl</a> - Julia 0.6</li>
<li><a href="https://github.com/samoconnor/AWSLambda.jl">AWSLambda.jl</a> - Julia 0.6</li>
<li><a href="https://github.com/samoconnor/AWSSES.jl">AWSSES.jl</a> - Julia 0.6</li>
<li><a href="https://github.com/samoconnor/AWSSDB.jl">AWSSDB.jl</a> - Julia 0.6</li>
</ul>
</article></div>