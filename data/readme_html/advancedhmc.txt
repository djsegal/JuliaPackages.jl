<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-advancedhmcjl" class="anchor" aria-hidden="true" href="#advancedhmcjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>AdvancedHMC.jl</h1>
<p><a href="https://travis-ci.org/TuringLang/AdvancedHMC.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/9d2f7b96cc044fb481b11c7b10ac7954ed1ca98f/68747470733a2f2f7472617669732d63692e6f72672f547572696e674c616e672f416476616e636564484d432e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/TuringLang/AdvancedHMC.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://zenodo.org/badge/latestdoi/72657907" rel="nofollow"><img src="https://camo.githubusercontent.com/2b4364328874f90e6e3c6b08aabd68e6d0f8cc64/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f37323635373930372e737667" alt="DOI" data-canonical-src="https://zenodo.org/badge/72657907.svg" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/TuringLang/AdvancedHMC.jl?branch=kx%2Fbug-fix" rel="nofollow"><img src="https://camo.githubusercontent.com/e9275cc96750e7a727283ba95bd06eaf2bbbb04f/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f547572696e674c616e672f416476616e636564484d432e6a6c2f62616467652e7376673f6272616e63683d6b782532466275672d666978" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/TuringLang/AdvancedHMC.jl/badge.svg?branch=kx%2Fbug-fix" style="max-width:100%;"></a></p>
<p>AdvancedHMC.jl provides a robust, modular and efficient implementation of advanced HMC algorithms. An illustrative example for AdvancedHMC's usage is given below. AdvancedHMC.jl is part of <a href="https://github.com/TuringLang/Turing.jl">Turing.jl</a>, a probabilistic programming library in Julia.
If you are interested in using AdvancedHMC.jl through a probabilistic programming language, please check it out!</p>
<p><strong>Interfaces</strong></p>
<ul>
<li><a href="https://github.com/salilab/hmc">Python interface</a> for AdvancedHMC</li>
</ul>
<p><strong>NEWS</strong></p>
<ul>
<li>We presented a paper for AdvancedHMC.jl at <a href="http://approximateinference.org/" rel="nofollow">AABI</a> 2019 in Vancouver, Canada. (<a href="http://proceedings.mlr.press/v118/xu20a.html" rel="nofollow">abs</a>, <a href="http://proceedings.mlr.press/v118/xu20a/xu20a.pdf" rel="nofollow">pdf</a>, <a href="https://openreview.net/forum?id=rJgzckn4tH" rel="nofollow">OpenReview</a>)</li>
<li>We presented a poster for AdvancedHMC.jl at <a href="https://mc-stan.org/events/stancon2019Cambridge/" rel="nofollow">StanCon 2019</a> in Cambridge, UK. (<a href="https://github.com/TuringLang/AdvancedHMC.jl/files/3730367/StanCon-AHMC.pdf">pdf</a>)</li>
</ul>
<p><strong>API CHANGES</strong></p>
<ul>
<li>[v0.2.22] Three functions are renamed.
<ul>
<li><code>Preconditioner(metric::AbstractMetric)</code> -&gt; <code>MassMatrixAdaptor(metric)</code> and</li>
<li><code>NesterovDualAveraging(δ, integrator::AbstractIntegrator)</code> -&gt; <code>StepSizeAdaptor(δ, integrator)</code></li>
<li><code>find_good_eps</code> -&gt; <code>find_good_stepsize</code></li>
</ul>
</li>
<li>[v0.2.15] <code>n_adapts</code> is no longer needed to construct <code>StanHMCAdaptor</code>; the old constructor is deprecated.</li>
<li>[v0.2.8] Two Hamiltonian trajectory sampling methods are renamed to avoid a name clash with Distributions.
<ul>
<li><code>Multinomial</code> -&gt; <code>MultinomialTS</code></li>
<li><code>Slice</code> -&gt; <code>SliceTS</code></li>
</ul>
</li>
<li>[v0.2.0] The gradient function passed to <code>Hamiltonian</code> is supposed to return a value-gradient tuple now.</li>
</ul>
<h2><a id="user-content-a-minimal-example---sampling-from-a-multivariate-gaussian-using-nuts" class="anchor" aria-hidden="true" href="#a-minimal-example---sampling-from-a-multivariate-gaussian-using-nuts"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>A minimal example - sampling from a multivariate Gaussian using NUTS</h2>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> AdvancedHMC, Distributions, ForwardDiff

<span class="pl-c"><span class="pl-c">#</span> Choose parameter dimensionality and initial parameter value</span>
D <span class="pl-k">=</span> <span class="pl-c1">10</span>; initial_θ <span class="pl-k">=</span> <span class="pl-c1">rand</span>(D)

<span class="pl-c"><span class="pl-c">#</span> Define the target distribution</span>
ℓπ(θ) <span class="pl-k">=</span> <span class="pl-c1">logpdf</span>(<span class="pl-c1">MvNormal</span>(<span class="pl-c1">zeros</span>(D), <span class="pl-c1">ones</span>(D)), θ)

<span class="pl-c"><span class="pl-c">#</span> Set the number of samples to draw and warmup iterations</span>
n_samples, n_adapts <span class="pl-k">=</span> <span class="pl-c1">2_000</span>, <span class="pl-c1">1_000</span>

<span class="pl-c"><span class="pl-c">#</span> Define a Hamiltonian system</span>
metric <span class="pl-k">=</span> <span class="pl-c1">DiagEuclideanMetric</span>(D)
hamiltonian <span class="pl-k">=</span> <span class="pl-c1">Hamiltonian</span>(metric, ℓπ, ForwardDiff)

<span class="pl-c"><span class="pl-c">#</span> Define a leapfrog solver, with initial step size chosen heuristically</span>
initial_ϵ <span class="pl-k">=</span> <span class="pl-c1">find_good_stepsize</span>(hamiltonian, initial_θ)
integrator <span class="pl-k">=</span> <span class="pl-c1">Leapfrog</span>(initial_ϵ)

<span class="pl-c"><span class="pl-c">#</span> Define an HMC sampler, with the following components</span>
<span class="pl-c"><span class="pl-c">#</span>   - multinomial sampling scheme,</span>
<span class="pl-c"><span class="pl-c">#</span>   - generalised No-U-Turn criteria, and</span>
<span class="pl-c"><span class="pl-c">#</span>   - windowed adaption for step-size and diagonal mass matrix</span>
proposal <span class="pl-k">=</span> <span class="pl-c1">NUTS</span><span class="pl-c1">{MultinomialTS, GeneralisedNoUTurn}</span>(integrator)
adaptor <span class="pl-k">=</span> <span class="pl-c1">StanHMCAdaptor</span>(<span class="pl-c1">MassMatrixAdaptor</span>(metric), <span class="pl-c1">StepSizeAdaptor</span>(<span class="pl-c1">0.8</span>, integrator))

<span class="pl-c"><span class="pl-c">#</span> Run the sampler to draw samples from the specified Gaussian, where</span>
<span class="pl-c"><span class="pl-c">#</span>   - `samples` will store the samples</span>
<span class="pl-c"><span class="pl-c">#</span>   - `stats` will store diagnostic statistics for each sample</span>
samples, stats <span class="pl-k">=</span> <span class="pl-c1">sample</span>(hamiltonian, proposal, initial_θ, n_samples, adaptor, n_adapts; progress<span class="pl-k">=</span><span class="pl-c1">true</span>)</pre></div>
<h2><a id="user-content-api-and-supported-hmc-algorithms" class="anchor" aria-hidden="true" href="#api-and-supported-hmc-algorithms"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>API and supported HMC algorithms</h2>
<p>An important design goal of AdvancedHMC.jl is modularity; we would like to support algorithmic research on HMC.
This modularity means that different HMC variants can be easily constructed by composing various components, such as preconditioning metric (i.e. mass matrix), leapfrog integrators,  trajectories (static or dynamic), and adaption schemes etc.
The minimal example above can be modified to suit particular inference problems by picking components from the list below.</p>
<h3><a id="user-content-hamiltonian-mass-matrix-metric" class="anchor" aria-hidden="true" href="#hamiltonian-mass-matrix-metric"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Hamiltonian mass matrix (<code>metric</code>)</h3>
<ul>
<li>Unit metric: <code>UnitEuclideanMetric(dim)</code></li>
<li>Diagonal metric: <code>DiagEuclideanMetric(dim)</code></li>
<li>Dense metric: <code>DenseEuclideanMetric(dim)</code></li>
</ul>
<p>where <code>dim</code> is the dimensionality of the sampling space.</p>
<h3><a id="user-content-integrator-integrator" class="anchor" aria-hidden="true" href="#integrator-integrator"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Integrator (<code>integrator</code>)</h3>
<ul>
<li>Ordinary leapfrog integrator: <code>Leapfrog(ϵ)</code></li>
<li>Jittered leapfrog integrator with jitter rate <code>n</code>: <code>JitteredLeapfrog(ϵ, n)</code></li>
<li>Tempered leapfrog integrator with tempering rate <code>a</code>: <code>TemperedLeapfrog(ϵ, a)</code></li>
</ul>
<p>where <code>ϵ</code> is the step size of leapfrog integration.</p>
<h3><a id="user-content-proposal-proposal" class="anchor" aria-hidden="true" href="#proposal-proposal"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Proposal (<code>proposal</code>)</h3>
<ul>
<li>Static HMC with a fixed number of steps (<code>n_steps</code>) (Neal, R. M. (2011)): <code>StaticTrajectory(integrator, n_steps)</code></li>
<li>HMC with a fixed total trajectory length (<code>trajectory_length</code>) (Neal, R. M. (2011)): <code>HMCDA(integrator, trajectory_length)</code></li>
<li>Original NUTS with slice sampling (Hoffman, M. D., &amp; Gelman, A. (2014)): <code>NUTS{SliceTS,ClassicNoUTurn}(integrator)</code></li>
<li>Generalised NUTS with slice sampling (Betancourt, M. (2017)): <code>NUTS{SliceTS,GeneralisedNoUTurn}(integrator)</code></li>
<li>Original NUTS with multinomial sampling (Betancourt, M. (2017)): <code>NUTS{MultinomialTS,ClassicNoUTurn}(integrator)</code></li>
<li>Generalised NUTS with multinomial sampling (Betancourt, M. (2017)): <code>NUTS{MultinomialTS,GeneralisedNoUTurn}(integrator)</code></li>
</ul>
<h3><a id="user-content-adaptor-adaptor" class="anchor" aria-hidden="true" href="#adaptor-adaptor"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Adaptor (<code>adaptor</code>)</h3>
<ul>
<li>Adapt the mass matrix <code>metric</code> of the Hamiltonian dynamics: <code>mma = MassMatrixAdaptor(metric)</code>
<ul>
<li>This is lowered to <code>UnitMassMatrix</code>, <code>WelfordVar</code> or <code>WelfordCov</code> based on the type of the mass matrix <code>metric</code></li>
</ul>
</li>
<li>Adapt the step size of the leapfrog integrator <code>integrator</code>: <code>ssa = StepSizeAdaptor(δ, integrator)</code>
<ul>
<li>It uses Nesterov's dual averaging with <code>δ</code> as the target acceptance rate.</li>
</ul>
</li>
<li>Combine the two above <em>naively</em>: <code>NaiveHMCAdaptor(mma, ssa)</code></li>
<li>Combine the first two using Stan's windowed adaptation: <code>StanHMCAdaptor(mma, ssa)</code></li>
</ul>
<h3><a id="user-content-gradients" class="anchor" aria-hidden="true" href="#gradients"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Gradients</h3>
<p><code>AdvancedHMC</code> supports both AD-based (<code>Zygote</code>, <code>Tracker</code> and <code>ForwardDiff</code>) and user-specified gradients. In order to use user-specified gradients, please replace <code>ForwardDiff</code> with <code>ℓπ_grad</code> in the <code>Hamiltonian</code>  constructor, where the gradient function <code>ℓπ_grad</code> should return a tuple containing both the log-posterior and its gradient.</p>
<p>All the combinations are tested in <a href="https://github.com/TuringLang/AdvancedHMC.jl/blob/master/test/sampler.jl">this file</a> except from using tempered leapfrog integrator together with adaptation, which we found unstable empirically.</p>
<h2><a id="user-content-the-sample-function-signature-in-detail" class="anchor" aria-hidden="true" href="#the-sample-function-signature-in-detail"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>The <code>sample</code> function signature in detail</h2>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">function</span> <span class="pl-en">sample</span>(
    rng<span class="pl-k">::</span><span class="pl-c1">Union{AbstractRNG, AbstractVector{&lt;:AbstractRNG}}</span>,
    h<span class="pl-k">::</span><span class="pl-c1">Hamiltonian</span>,
    τ<span class="pl-k">::</span><span class="pl-c1">AbstractProposal</span>,
    θ<span class="pl-k">::</span><span class="pl-c1">AbstractVector{&lt;:AbstractFloat}</span>,
    n_samples<span class="pl-k">::</span><span class="pl-c1">Int</span>,
    adaptor<span class="pl-k">::</span><span class="pl-c1">AbstractAdaptor</span><span class="pl-k">=</span><span class="pl-c1">NoAdaptation</span>(),
    n_adapts<span class="pl-k">::</span><span class="pl-c1">Int</span><span class="pl-k">=</span><span class="pl-c1">min</span>(<span class="pl-c1">div</span>(n_samples, <span class="pl-c1">10</span>), <span class="pl-c1">1_000</span>);
    drop_warmup<span class="pl-k">=</span><span class="pl-c1">false</span>,
    verbose<span class="pl-k">::</span><span class="pl-c1">Bool</span><span class="pl-k">=</span><span class="pl-c1">true</span>,
    progress<span class="pl-k">::</span><span class="pl-c1">Bool</span><span class="pl-k">=</span><span class="pl-c1">false</span>,
)</pre></div>
<p>Draw <code>n_samples</code> samples using the proposal <code>τ</code> under the Hamiltonian system <code>h</code></p>
<ul>
<li>The randomness is controlled by <code>rng</code>.
<ul>
<li>If <code>rng</code> is not provided, <code>GLOBAL_RNG</code> will be used.</li>
</ul>
</li>
<li>The initial point is given by <code>θ</code>.</li>
<li>The adaptor is set by <code>adaptor</code>, for which the default is no adaptation.
<ul>
<li>It will perform <code>n_adapts</code> steps of adaptation, for which the default is <code>1_000</code> or 10% of <code>n_samples</code>, whichever is lower.</li>
</ul>
</li>
<li><code>drop_warmup</code> specifies whether to drop samples.</li>
<li><code>verbose</code> controls the verbosity.</li>
<li><code>progress</code> controls whether to show the progress meter or not.</li>
</ul>
<h2><a id="user-content-citing-advancedhmcjl" class="anchor" aria-hidden="true" href="#citing-advancedhmcjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Citing AdvancedHMC.jl</h2>
<p>If you use AdvancedHMC.jl for your own research, please consider citing the following publication:</p>
<p>Hong Ge, Kai Xu, and Zoubin Ghahramani: "Turing: a language for flexible probabilistic inference.", <em>International Conference on Artificial Intelligence and Statistics</em>, 2018. (<a href="http://proceedings.mlr.press/v84/ge18b.html" rel="nofollow">abs</a>, <a href="http://proceedings.mlr.press/v84/ge18b/ge18b.pdf" rel="nofollow">pdf</a>, <a href="https://github.com/TuringLang/Turing.jl/blob/master/CITATION.bib">BibTeX</a>)</p>
<h2><a id="user-content-references" class="anchor" aria-hidden="true" href="#references"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>References</h2>
<ol>
<li>
<p>Neal, R. M. (2011). MCMC using Hamiltonian dynamics. Handbook of Markov chain Monte Carlo, 2(11), 2. (<a href="https://arxiv.org/pdf/1206.1901" rel="nofollow">arXiv</a>)</p>
</li>
<li>
<p>Betancourt, M. (2017). A Conceptual Introduction to Hamiltonian Monte Carlo. <a href="https://arxiv.org/abs/1701.02434" rel="nofollow">arXiv preprint arXiv:1701.02434</a>.</p>
</li>
<li>
<p>Girolami, M., &amp; Calderhead, B. (2011). Riemann manifold Langevin and Hamiltonian Monte Carlo methods. Journal of the Royal Statistical Society: Series B (Statistical Methodology), 73(2), 123-214. (<a href="https://rss.onlinelibrary.wiley.com/doi/full/10.1111/j.1467-9868.2010.00765.x" rel="nofollow">arXiv</a>)</p>
</li>
<li>
<p>Betancourt, M. J., Byrne, S., &amp; Girolami, M. (2014). Optimizing the integrator step size for Hamiltonian Monte Carlo. <a href="https://arxiv.org/pdf/1411.6669" rel="nofollow">arXiv preprint arXiv:1411.6669</a>.</p>
</li>
<li>
<p>Betancourt, M. (2016). Identifying the optimal integration time in Hamiltonian Monte Carlo. <a href="https://arxiv.org/abs/1601.00225" rel="nofollow">arXiv preprint arXiv:1601.00225</a>.</p>
</li>
<li>
<p>Hoffman, M. D., &amp; Gelman, A. (2014). The No-U-Turn Sampler: adaptively setting path lengths in Hamiltonian Monte Carlo. Journal of Machine Learning Research, 15(1), 1593-1623. (<a href="http://arxiv.org/abs/1111.4246" rel="nofollow">arXiv</a>)</p>
</li>
</ol>
</article></div>