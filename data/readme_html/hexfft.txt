<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-hexfft" class="anchor" aria-hidden="true" href="#hexfft"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>HexFFT</h1>
<p>This package implements <a href="http://ieeexplore.ieee.org/document/7532670/" rel="nofollow">Birdsong and Rummelt's 2016 algorithm</a> for fast Fourier transforms on hexagonal lattices.</p>
<p>The module <code>HexFFT</code> currently exports four functions: <code>hfft2()</code> and <code>ihfft2()</code> which compute the FFT and its inverse, respectively.
Alternatively, you can wrap your data in the <code>OffsetHexData</code> type and use the standard <code>fft()</code> and <code>ifft()</code> methods.
Note that transforms along individual dimensions (i.e. <code>fft(data, dim)</code>) are not implemented.</p>
<p>The current implementation is ca. 10 times slower than <code>Base.fft()</code> for comparable rectangular grids. However significant optimization should be possible by preallocating and reusing temporary arrays.</p>
</article></div>