<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-hexfft" class="anchor" aria-hidden="true" href="#hexfft"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>HexFFT</h1>
<p>This package implements <a href="http://ieeexplore.ieee.org/document/7532670/" rel="nofollow">Birdsong and Rummelt's 2016 algorithm</a> for fast Fourier transforms on hexagonal lattices.</p>
<p>The module <code>HexFFT</code> currently exports four functions: <code>hfft2()</code> and <code>ihfft2()</code> which compute the FFT and its inverse, respectively.
Alternatively, you can wrap your data in the <code>OffsetHexData</code> type and use the standard <code>fft()</code> and <code>ifft()</code> methods.
Note that transforms along individual dimensions (i.e. <code>fft(data, dim)</code>) are not implemented.</p>
<p>The current implementation is ca. 10 times slower than <code>Base.fft()</code> for comparable rectangular grids. However significant optimization should be possible by preallocating and reusing temporary arrays.</p>
</article></div>