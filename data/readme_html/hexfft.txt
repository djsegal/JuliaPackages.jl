<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-hexfft" class="anchor" aria-hidden="true" href="#hexfft"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>HexFFT</h1>
<p dir="auto">This package implements <a href="http://ieeexplore.ieee.org/document/7532670/" rel="nofollow">Birdsong and Rummelt's 2016 algorithm</a> for fast Fourier transforms on hexagonal lattices.</p>
<p dir="auto">The module <code>HexFFT</code> currently exports four functions: <code>hfft2()</code> and <code>ihfft2()</code> which compute the FFT and its inverse, respectively.
Alternatively, you can wrap your data in the <code>OffsetHexData</code> type and use the standard <code>fft()</code> and <code>ifft()</code> methods.
Note that transforms along individual dimensions (i.e. <code>fft(data, dim)</code>) are not implemented.</p>
<p dir="auto">The current implementation is ca. 10 times slower than <code>Base.fft()</code> for comparable rectangular grids. However significant optimization should be possible by preallocating and reusing temporary arrays.</p>
</article></div>