<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-fastgaussquadraturejl" class="anchor" aria-hidden="true" href="#fastgaussquadraturejl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>FastGaussQuadrature.jl</h1>
<p><a href="https://travis-ci.org/ajt60gaibb/FastGaussQuadrature.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/4326815cd3b801ae1b0cf17c3d1a175c1ff1b46e/68747470733a2f2f7472617669732d63692e6f72672f616a74363067616962622f466173744761757373517561647261747572652e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/ajt60gaibb/FastGaussQuadrature.jl.svg?branch=master" style="max-width:100%;"></a> <a href="https://codecov.io/gh/ajt60gaibb/FastGaussQuadrature.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/dc24875a82ebe9cfcc33648141e87ee51846cf43/68747470733a2f2f636f6465636f762e696f2f67682f616a74363067616962622f466173744761757373517561647261747572652e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/ajt60gaibb/FastGaussQuadrature.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p>A Julia package to compute <code>n</code>-point Gauss quadrature nodes and weights to 16-digit accuracy and in <code>O(n)</code> time. So far the package includes <code>gausschebyshev()</code>, <code>gausslegendre()</code>, <code>gaussjacobi()</code>, <code>gaussradau()</code>, <code>gausslobatto()</code>, <code>gausslaguerre()</code>, and <code>gausshermite()</code>. This package is heavily influenced by <a href="http://www.chebfun.org" rel="nofollow">Chebfun</a>.</p>
<p>An introduction to Gauss quadrature can be found <a href="http://en.wikipedia.org/wiki/Gaussian_quadrature" rel="nofollow">here</a>. For a quirky account on the history of computing Gauss-Legendre quadrature, see <a href="http://pi.math.cornell.edu/~ajt/papers/QuadratureEssay.pdf" rel="nofollow">[6]</a>.</p>
<h2><a id="user-content-our-aims" class="anchor" aria-hidden="true" href="#our-aims"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Our Aims</h2>
<ul>
<li>
<p>The fastest Julia code for Gauss quadrature nodes and weights (without tabulation).</p>
</li>
<li>
<p>Change the perception that Gauss quadrature rules are expensive to compute.</p>
</li>
</ul>
<h2><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Examples</h2>
<p>Here we compute <code>100000</code> nodes and weights of the Gauss rules. Try a million or ten million.</p>
<pre><code>@time gausschebyshev( 100000 );
0.002681 seconds (9 allocations: 1.526 MB, 228.45% gc time)

@time gausslegendre( 100000 ); 
0.007110 seconds (17 allocations: 2.671 MB)

@time gaussjacobi( 100000, .9, -.1 );
1.782347 seconds (20.84 k allocations: 1.611 GB, 22.89% gc time)

@time gaussradau( 100000 );
1.849520 seconds (741.84 k allocations: 1.625 GB, 22.59% gc time)

@time gausslobatto( 100000 );
1.905083 seconds (819.73 k allocations: 1.626 GB, 23.45% gc time)

@time gausslaguerre( 100000 )
.891567 seconds (115.19 M allocations: 3.540 GB, 3.05% gc time)

@time gausshermite( 100000 );
0.249756 seconds (201.22 k allocations: 131.643 MB, 4.92% gc time)
</code></pre>
<p>The paper <a href="http://epubs.siam.org/doi/abs/10.1137/140954969" rel="nofollow">[1]</a> computed a billion Gauss-Legendre nodes. So here we will do a billion + 1.</p>
<pre><code>@time gausslegendre( 1000000001 );
131.392154 seconds (17 allocations: 26.077 GB, 1.17% gc time)
</code></pre>
<p>(The nodes near the endpoints coalesce in 16-digits of precision.)</p>
<h2><a id="user-content-the-algorithm-for-gauss-chebyshev" class="anchor" aria-hidden="true" href="#the-algorithm-for-gauss-chebyshev"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>The algorithm for Gauss-Chebyshev</h2>
<p>There are four kinds of Gauss-Chebyshev quadrature rules, corresponding to four weight functions:</p>
<ol>
<li>
<p>1st kind, weight function <code>w(x) = 1/sqrt(1-x^2)</code></p>
</li>
<li>
<p>2nd kind, weight function <code>w(x) = sqrt(1-x^2)</code></p>
</li>
<li>
<p>3rd kind, weight function <code>w(x) = sqrt((1+x)/(1-x))</code></p>
</li>
<li>
<p>4th kind, weight function <code>w(x) = sqrt((1-x)/(1+x))</code></p>
</li>
</ol>
<p>They are all have explicit simple formulas for the nodes and weights <a href="http://books.google.com/books?id=8FHf0P3to0UC&amp;lpg=PP1&amp;pg=PA180#v=onepage&amp;q&amp;f=false" rel="nofollow">[4]</a>.</p>
<h2><a id="user-content-the-algorithm-for-gauss-legendre" class="anchor" aria-hidden="true" href="#the-algorithm-for-gauss-legendre"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>The algorithm for Gauss-Legendre</h2>
<p>Gauss quadrature for the weight function <code>w(x) = 1</code>.</p>
<ul>
<li>
<p>For <code>n&lt;=5</code>: Use an analytic expression.</p>
</li>
<li>
<p>For <code>n&lt;=60</code>: Use Newton's method to solve <code>Pn(x)=0</code>. Evaluate <code>Pn</code> and <code>Pn'</code> by 3-term recurrence. Weights are related to <code>Pn'</code>.</p>
</li>
<li>
<p>For <code>n&gt;60</code>: Use asymptotic expansions for the Legendre nodes and weights <a href="http://epubs.siam.org/doi/abs/10.1137/140954969" rel="nofollow">[1]</a>.</p>
</li>
</ul>
<h2><a id="user-content-the-algorithm-for-gauss-jacobi" class="anchor" aria-hidden="true" href="#the-algorithm-for-gauss-jacobi"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>The algorithm for Gauss-Jacobi</h2>
<p>Gauss quadrature for the weight functions <code>w(x) = (1-x)^a(1+x)^b</code>, <code>a,b&gt;-1</code>.</p>
<ul>
<li>
<p>For <code>n&lt;=100</code>: Use Newton's method to solve <code>Pn(x)=0</code>. Evaluate <code>Pn</code> and <code>Pn'</code> by three-term recurrence.</p>
</li>
<li>
<p>For <code>n&gt;100</code>: Use Newton's method to solve <code>Pn(x)=0</code>. Evaluate <code>Pn</code> and <code>Pn'</code> by an asymptotic expansion (in the interior of <code>[-1,1]</code>) and the three-term recurrence <code>O(n^-2)</code> close to the endpoints. (This is a small modification to the algorithm described in <a href="http://epubs.siam.org/doi/abs/10.1137/120889873" rel="nofollow">[3]</a>.)</p>
</li>
<li>
<p>For <code>max(a,b)&gt;5</code>: Use the Golub-Welsch algorithm requiring <code>O(n^2)</code> operations.</p>
</li>
</ul>
<h2><a id="user-content-the-algorithm-for-gauss-radau" class="anchor" aria-hidden="true" href="#the-algorithm-for-gauss-radau"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>The algorithm for Gauss-Radau</h2>
<p>Gauss quadrature for the weight function <code>w(x)=1</code>, except the endpoint <code>-1</code> is included as a quadrature node.</p>
<p>The Gauss-Radau nodes and weights can be computed via the <code>(0,1)</code> Gauss-Jacobi nodes and weights <a href="http://epubs.siam.org/doi/abs/10.1137/120889873" rel="nofollow">[3]</a>.</p>
<h2><a id="user-content-the-algorithm-for-gauss-lobatto" class="anchor" aria-hidden="true" href="#the-algorithm-for-gauss-lobatto"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>The algorithm for Gauss-Lobatto</h2>
<p>Gauss quadrature for the weight function <code>w(x)=1</code>, except the endpoints <code>-1</code> and <code>1</code> are included as nodes.</p>
<p>The Gauss-Lobatto nodes and weights can be computed via the <code>(1,1)</code> Gauss-Jacobi nodes and weights <a href="http://epubs.siam.org/doi/abs/10.1137/120889873" rel="nofollow">[3]</a>.</p>
<h2><a id="user-content-the-algorithm-for-gauss-laguerre" class="anchor" aria-hidden="true" href="#the-algorithm-for-gauss-laguerre"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>The algorithm for Gauss-Laguerre</h2>
<p>Gauss quadrature for the weight function <code>w(x) = exp(-x)</code> on <code>[0,Inf)</code></p>
<ul>
<li>
<p>For <code>n&lt;128</code>: Use the Golub-Welsch algorithm.</p>
</li>
<li>
<p>For <code>method=GLR</code>: Use the Glaser-Lui-Rohklin algorithm. Evaluate <code>Ln</code> and <code>Ln'</code> by using Taylor series expansions near roots generated by solving the second-order differential equation that <code>Ln</code> satisfies, see <a href="http://epubs.siam.org/doi/pdf/10.1137/06067016X" rel="nofollow">[2]</a>.</p>
</li>
<li>
<p>For <code>n&gt;=128</code>: Use a Newton procedure on Riemann-Hilbert asymptotics of Laguerre polynomials, see [5], based on [8]. There are some heuristics to decide which expression to use, it allows a general weight <code>w(x) = x^alpha exp(-q_m x^m)</code> and this is O(sqrt(n)) when allowed to stop when the weights are below the smallest positive floating point number.</p>
</li>
</ul>
<h2><a id="user-content-the-algorithm-for-gauss-hermite" class="anchor" aria-hidden="true" href="#the-algorithm-for-gauss-hermite"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>The algorithm for Gauss-Hermite</h2>
<p>Gauss quadrature for the weight function <code>w(x) = exp(-x^2)</code> on the real line.</p>
<ul>
<li>
<p>For <code>n&lt;200</code>: Use Newton's method to solve <code>Hn(x)=0</code>. Evaluate <code>Hn</code> and <code>Hn'</code> by three-term recurrence.</p>
</li>
<li>
<p>For <code>n&gt;=200</code>: Use Newton's method to solve <code>Hn(x)=0</code>. Evaluate <code>Hn</code> and <code>Hn'</code> by a uniform asymptotic expansion, see <a href="http://arxiv.org/abs/1410.5286" rel="nofollow">[7]</a>.</p>
</li>
<li></li>
</ul>
<p>The paper <a href="http://arxiv.org/abs/1410.5286" rel="nofollow">[7]</a> also derives an <code>O(n)</code> algorithm for generalized Gauss-Hermite nodes and weights associated to weight functions of the form <code>exp(-V(x))</code>, where <code>V(x)</code> is a real polynomial.</p>
<h2><a id="user-content-example-usage" class="anchor" aria-hidden="true" href="#example-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Example usage</h2>
<pre><code>@time nodes, weights = gausslegendre( 100000 );
0.007890 seconds (19 allocations: 2.671 MB)

# integrates f(x) = x^2 from -1 to 1
@time dot( weights, nodes.^2 )
0.004264 seconds (7 allocations: 781.484 KB)
0.666666666666666
</code></pre>
<h2><a id="user-content-references" class="anchor" aria-hidden="true" href="#references"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>References:</h2>
<p>[1] I. Bogaert, <a href="http://epubs.siam.org/doi/abs/10.1137/140954969" rel="nofollow">"Iteration-free computation of Gauss-Legendre quadrature nodes and weights"</a>, SIAM J. Sci. Comput., 36(3), A1008-A1026, 2014.</p>
<p>[2] A. Glaser, X. Liu, and V. Rokhlin. <a href="http://epubs.siam.org/doi/pdf/10.1137/06067016X" rel="nofollow">"A fast algorithm for the calculation of the roots of special functions."</a> SIAM J. Sci. Comput., 29 (2007), 1420-1438.</p>
<p>[3] N. Hale and A. Townsend, <a href="http://epubs.siam.org/doi/abs/10.1137/120889873" rel="nofollow">"Fast and accurate computation of Gauss-Legendre and Gauss-Jacobi quadrature
nodes and weights"</a>, SIAM J. Sci. Comput., 2012.</p>
<p>[4] J. C. Mason and D. C. Handscomb, <a href="http://books.google.com/books?id=8FHf0P3to0UC&amp;lpg=PP1&amp;dq=Mason%20and%20Handscomb&amp;pg=PP1#v=onepage&amp;q=Mason%20and%20Handscomb&amp;f=false" rel="nofollow">"Chebyshev Polynomials"</a>, CRC Press, 2002.</p>
<p>[5] P. Opsomer, (in preparation).</p>
<p>[6] A. Townsend, <a href="http://pi.math.cornell.edu/~ajt/papers/QuadratureEssay.pdf" rel="nofollow"> The race for high order Gauss-Legendre quadrature</a>, in SIAM News, March 2015.</p>
<p>[7] A. Townsend, T. Trogdon, and S. Olver, <a href="http://arxiv.org/abs/1410.5286" rel="nofollow">"Fast computation of Gauss quadrature nodes and weights on the whole real line"</a>, to appear in IMA Numer. Anal., 2014.</p>
<p>[8] M. Vanlessen, "Strong asymptotics of Laguerre-Type orthogonal polynomials and applications in Random Matrix Theory", Constr. Approx., 25:125-175, 2007.</p>
</article></div>