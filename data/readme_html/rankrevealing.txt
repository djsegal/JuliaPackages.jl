<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-rank-revealing-decompositions" class="anchor" aria-hidden="true" href="#rank-revealing-decompositions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Rank Revealing Decompositions</h1>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://user-images.githubusercontent.com/5944492/160865394-2dae48fa-1200-4215-8706-a63055ee0ab7.svg"><img src="https://user-images.githubusercontent.com/5944492/160865394-2dae48fa-1200-4215-8706-a63055ee0ab7.svg" width="100%" height="100" style="max-width: 100%;"></a></p>
<p dir="auto">This package defines methods for exact linear algebra
over any numerical field.
Our focus is on matrix decompositions that are <em>rank-sensitive</em>.
That is, faster for low-rank matrices.</p>
<table>
<thead>
<tr>
<th align="center"><strong>Documentation</strong></th>
<th align="center"><strong>Build Status</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><a href="https://iagoleal.github.io/RankRevealing.jl/" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable Docs" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a> <a href="https://iagoleal.github.io/RankRevealing.jl/latest/" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Latest Docs" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a></td>
<td align="center"><a href="https://github.com/iagoleal/RankRevealing.jl/actions/workflows/ci.yml"><img src="https://github.com/iagoleal/RankRevealing.jl/actions/workflows/ci.yml/badge.svg?branch=master" alt="Build Status" style="max-width: 100%;"></a>  <a href="https://codecov.io/github/iagoleal/RankRevealing.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/7d14627bcdccbc21d15ae5fb7ab8c4c1d57e18e392f9402adb28920de89f2e8f/68747470733a2f2f636f6465636f762e696f2f6769746875622f6961676f6c65616c2f52616e6b52657665616c696e672e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="Code Coverage" data-canonical-src="https://codecov.io/github/iagoleal/RankRevealing.jl/coverage.svg?branch=master" style="max-width: 100%;"></a></td>
</tr>
</tbody>
</table>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">This package is not registered on Julia's general registry yet.
But you can install it by passing the repositories' url to the package manager.</p>
<p dir="auto">To instal, you have to enter <code>]</code> on the Julia REPL and write</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="pkg&gt; add https://github.com/iagoleal/RankRevealing.jl"><pre class="notranslate"><code>pkg&gt; add https://github.com/iagoleal/RankRevealing.jl
</code></pre></div>
<h2 dir="auto"><a id="user-content-main-algorithms" class="anchor" aria-hidden="true" href="#main-algorithms"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Main algorithms</h2>
<h3 dir="auto"><a id="user-content-pluq---for-a-single-matrix" class="anchor" aria-hidden="true" href="#pluq---for-a-single-matrix"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>PLUQ - For a single matrix</h3>
<p dir="auto">This a version of the <a href="https://en.wikipedia.org/wiki/LU_decomposition" rel="nofollow">LU decomposition</a>
that works for <strong>rectangular</strong> and possible <strong>singular</strong> matrices.
In block notation, it turns a matrix <code>A</code> into</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="A = P * |L| * | U V | * Q
        |M|"><pre class="notranslate"><code>A = P * |L| * | U V | * Q
        |M|
</code></pre></div>
<p dir="auto">where <code>P</code>, <code>Q</code> are permutations,
<code>L</code> is non-singular unit lower triangular,
and <code>U</code> is non-singular upper triangular.
Also, the dimensions of <code>L</code> and <code>U</code> are equal
to the rank of <code>A</code>.</p>
<p dir="auto">If <code>A</code> is <code>m x n</code> and has rank <code>r</code>,
the PLUQ takes <code>O(m n r^(ω-2))</code> steps,
where <code>ω</code> is the exponent for
the square matrix multiplication algorithm used by Julia.</p>
<p dir="auto">See <a href="#1">[1]</a> for the paper this implementation is based.</p>
<h3 dir="auto"><a id="user-content-grr---for-a-pair-of-matrices" class="anchor" aria-hidden="true" href="#grr---for-a-pair-of-matrices"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>GRR - For a pair of matrices</h3>
<p dir="auto">Given two matrices <code>A</code> and <code>B</code> with the same number of columns,
this decomposition divides the space based on how their row spaces interact.
In block notation, it decomposes the matrices as</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="                | I 0 0 |
| A | = | X 0 | | 0 0 I |
| B |   | 0 Y | | 0 I 0 | H
                | 0 0 I |"><pre class="notranslate"><code>                | I 0 0 |
| A | = | X 0 | | 0 0 I |
| B |   | 0 Y | | 0 I 0 | H
                | 0 0 I |
</code></pre></div>
<p dir="auto">Also, the rows of <code>H</code> form bases for</p>
<ul dir="auto">
<li><code>R(A)</code>, the row space of <code>A</code>,</li>
<li><code>R(B)</code>, the row space of <code>B</code>,</li>
<li><code>R(B) ∩ R(B)</code>, the row spaces intersection,</li>
<li><code>R(B) + R(B)</code>, the sum of their row spaces,</li>
</ul>
<p dir="auto">with the additional property that
whenever one of those spaces is contained in another,
the calculated bases share the necessary vectors.</p>
<p dir="auto">If <code>A</code> is <code>m_A x n</code>,
<code>B</code> is <code>m_B x n</code>
and <code>d</code> is the dimension of their images' sum space
(<code>{ a + b | ∃x, y, a = xA, b = yB }</code>),
then the GRR decomposition takes <code>O((m_A + m_B) n d^(ω-2))</code> steps,
where <code>ω</code> is the exponent for
the square matrix multiplication algorithm used by Julia.</p>
<h2 dir="auto"><a id="user-content-references" class="anchor" aria-hidden="true" href="#references"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>References</h2>
<ul dir="auto">
<li>
<p dir="auto"><a id="user-content-1">[1]</a> Jean-Guillaume Dumas, Clément Pernet, Ziad Sultan.
<a href="https://hal.archives-ouvertes.fr/file/index/docid/778136/filename/pluq_report.pdf" rel="nofollow">"Simultaneous computation of the row and column rank profiles"</a>.
In: <em>Proceedings of the 38th International Symposium on Symbolic and Algebraic Computation</em>.
2013, pp. 181–188.</p>
</li>
<li>
<p dir="auto"><a id="user-content-2">[2]</a> Iago Leal de Freitas, João Paixão, Lucas Rufino, and Pawelł Sobocínski.
"Rank sensitive complexity to find the intersection between two subspaces".
2022 (upcoming)</p>
</li>
</ul>
</article></div>