<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-drwatsonsim" class="anchor" aria-hidden="true" href="#drwatsonsim"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>DrWatsonSim</h1>
<p dir="auto"><a href="https://travis-ci.com/sebastianpech/DrWatsonSim.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/d53617924c43e8fb11258ec0975721300f5fd728529c16719f24ddb5bde60b10/68747470733a2f2f7472617669732d63692e636f6d2f73656261737469616e706563682f4472576174736f6e53696d2e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/sebastianpech/DrWatsonSim.jl.svg?branch=master" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">The package relies heavily on <code>DrWatson</code>, so the sensible method for using <code>DrWatsonSim</code> is</p>
<ol dir="auto">
<li>Create a <code>DrWatson</code> project with <code>initialize_project</code></li>
<li><code>add DrWatsonSim</code> as a dependency</li>
</ol>
<p dir="auto">Upon first use of any metadata related function, a directory <code>projectdir(".metadata")</code> for storing the additional data is initialized.</p>
<h2 dir="auto"><a id="user-content-adding-metadata" class="anchor" aria-hidden="true" href="#adding-metadata"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Adding Metadata</h2>
<p dir="auto">Metadata functions are centered around files (or folders) in the <code>DrWatson</code> project.
Paths are always stored relative to <code>projectdir()</code>.
Adding data to a file is as simple as:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# Some parameters
a = 10
b = 12

# Creating or loading the metadata entry for the file
m = Metadata(datadir(&quot;somefile&quot;))

# Tagging with git info
@tag! m

# Adding some info about the used parameters
m[&quot;parameters&quot;] = @dict a b"><pre><span class="pl-c"><span class="pl-c">#</span> Some parameters</span>
a <span class="pl-k">=</span> <span class="pl-c1">10</span>
b <span class="pl-k">=</span> <span class="pl-c1">12</span>

<span class="pl-c"><span class="pl-c">#</span> Creating or loading the metadata entry for the file</span>
m <span class="pl-k">=</span> <span class="pl-c1">Metadata</span>(<span class="pl-c1">datadir</span>(<span class="pl-s"><span class="pl-pds">"</span>somefile<span class="pl-pds">"</span></span>))

<span class="pl-c"><span class="pl-c">#</span> Tagging with git info</span>
<span class="pl-c1">@tag!</span> m

<span class="pl-c"><span class="pl-c">#</span> Adding some info about the used parameters</span>
m[<span class="pl-s"><span class="pl-pds">"</span>parameters<span class="pl-pds">"</span></span>] <span class="pl-k">=</span> <span class="pl-c1">@dict</span> a b</pre></div>
<p dir="auto">This gives the following entry:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="Metadata with 4 entries:
  &quot;parameters&quot; =&gt; Dict(:a=&gt;10,:b=&gt;12)
  &quot;gitcommit&quot;  =&gt; &quot;fbb09d2ee3c5711ff559c296c0033b7331679871_dirty&quot;
  &quot;script&quot;     =&gt; &quot;scripts/REPL[9]#1&quot;
  &quot;gitpatch&quot;   =&gt; &quot;&quot;"><pre class="notranslate"><code>Metadata with 4 entries:
  "parameters" =&gt; Dict(:a=&gt;10,:b=&gt;12)
  "gitcommit"  =&gt; "fbb09d2ee3c5711ff559c296c0033b7331679871_dirty"
  "script"     =&gt; "scripts/REPL[9]#1"
  "gitpatch"   =&gt; ""
</code></pre></div>
<p dir="auto">There is no need for an additional call to actually save the metadata, it's done automatically on every change.</p>
<p dir="auto">The data can be retrieved using the same call as during creating eg. <code>Metadata(datadir("somefile"))</code>.
Besides the <code>path</code>, the <code>mtime</code> of the files is used for recognition.
If the current <code>mtime</code> is newer than the stored one, <code>DrWatsonSim</code> issues a warning, that the metadata might not reflect the actual file content.</p>
<p dir="auto">There is an additional method <code>Metadata!</code> that overwrites any existing entry for the given path.</p>
<h2 dir="auto"><a id="user-content-running-simulations" class="anchor" aria-hidden="true" href="#running-simulations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Running Simulations</h2>
<p dir="auto">The following example is taken from the <a href="https://juliadynamics.github.io/DrWatson.jl/dev/workflow/" rel="nofollow">DrWatson workflow tutorial</a>.
Instead of calling <code>makesim</code> from a loop over all parameters, the macro <code>@run</code> is used.
Also to justify usage of the simulation methods, the <code>makesim</code> function now writes data to a folder.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using DrWatson
@quickactivate
using DrWatsonSim
using BSON

function fakesim(a, b, v, method = &quot;linear&quot;)
    if method == &quot;linear&quot;
        r = @. a + b * v
    elseif method == &quot;cubic&quot;
        r = @. a*b*v^3
    end
    y = sqrt(b)
    return r, y
end

function makesim(d::Dict)
    @unpack a, b, v, method = d
    r, y = fakesim(a, b, v, method)
    fulld = copy(d)
    fulld[:r] = r
    fulld[:y] = y
    BSON.bson(simdir(&quot;output.bson&quot;))
end

allparams = Dict(
    :a =&gt; [1, 2], 
    :b =&gt; [3, 4],
    :v =&gt; [rand(5)], 
    :method =&gt; &quot;linear&quot;,
)

dicts = dict_list(allparams)

@run makesim dicts datadir(&quot;sims&quot;)"><pre><span class="pl-k">using</span> DrWatson
<span class="pl-c1">@quickactivate</span>
<span class="pl-k">using</span> DrWatsonSim
<span class="pl-k">using</span> BSON

<span class="pl-k">function</span> <span class="pl-en">fakesim</span>(a, b, v, method <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>linear<span class="pl-pds">"</span></span>)
    <span class="pl-k">if</span> method <span class="pl-k">==</span> <span class="pl-s"><span class="pl-pds">"</span>linear<span class="pl-pds">"</span></span>
        r <span class="pl-k">=</span> <span class="pl-c1">@.</span> a <span class="pl-k">+</span> b <span class="pl-k">*</span> v
    <span class="pl-k">elseif</span> method <span class="pl-k">==</span> <span class="pl-s"><span class="pl-pds">"</span>cubic<span class="pl-pds">"</span></span>
        r <span class="pl-k">=</span> <span class="pl-c1">@.</span> a<span class="pl-k">*</span>b<span class="pl-k">*</span>v<span class="pl-k">^</span><span class="pl-c1">3</span>
    <span class="pl-k">end</span>
    y <span class="pl-k">=</span> <span class="pl-c1">sqrt</span>(b)
    <span class="pl-k">return</span> r, y
<span class="pl-k">end</span>

<span class="pl-k">function</span> <span class="pl-en">makesim</span>(d<span class="pl-k">::</span><span class="pl-c1">Dict</span>)
    <span class="pl-c1">@unpack</span> a, b, v, method <span class="pl-k">=</span> d
    r, y <span class="pl-k">=</span> <span class="pl-c1">fakesim</span>(a, b, v, method)
    fulld <span class="pl-k">=</span> <span class="pl-c1">copy</span>(d)
    fulld[<span class="pl-c1">:r</span>] <span class="pl-k">=</span> r
    fulld[<span class="pl-c1">:y</span>] <span class="pl-k">=</span> y
    BSON<span class="pl-k">.</span><span class="pl-c1">bson</span>(<span class="pl-c1">simdir</span>(<span class="pl-s"><span class="pl-pds">"</span>output.bson<span class="pl-pds">"</span></span>))
<span class="pl-k">end</span>

allparams <span class="pl-k">=</span> <span class="pl-c1">Dict</span>(
    <span class="pl-c1">:a</span> <span class="pl-k">=&gt;</span> [<span class="pl-c1">1</span>, <span class="pl-c1">2</span>], 
    <span class="pl-c1">:b</span> <span class="pl-k">=&gt;</span> [<span class="pl-c1">3</span>, <span class="pl-c1">4</span>],
    <span class="pl-c1">:v</span> <span class="pl-k">=&gt;</span> [<span class="pl-c1">rand</span>(<span class="pl-c1">5</span>)], 
    <span class="pl-c1">:method</span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>linear<span class="pl-pds">"</span></span>,
)

dicts <span class="pl-k">=</span> <span class="pl-c1">dict_list</span>(allparams)

<span class="pl-c1">@run</span> makesim dicts <span class="pl-c1">datadir</span>(<span class="pl-s"><span class="pl-pds">"</span>sims<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto"><code>@run</code> calls <code>makesim</code> on all elements from <code>dicts</code> and provides <code>datadir("sims")</code> as an output folder.
However, the actual call to <code>makesim</code> is done in new Julia processes, that matches the original call to the script above.
The distinction between the two modes, the initialization and the actual simulation is done using environmental variables.</p>
<p dir="auto">The simulation id is generated based on the directory that is passed in the <code>@run</code> call.
It's the smallest possible positive integer for which no folder in the provided directory exists.</p>
<ol dir="auto">
<li>Run <code>julia script_from_above.jl</code></li>
<li>Scan the provided folder for the next available simulation id and created the simulation directory (<code>simdir()</code>)</li>
<li>Metadata for the generated folder is written containing information about the calling environment and the parameters</li>
<li>For every parameter a new detached Julia process is spawned with the same calling configuration as in (1), except additional environmental variables are set containing the simulation id of this run.</li>
<li>With this variables set, the script now behaves differently. The function <code>simdir()</code> is now provided which gives the path to the assigned simulation directory (In the above configuration <code>simdir("output.bson")</code> equal <code>datadir("sims",id,"output.bson")</code>), and instead of looping over all configuration now the one configuration identified by the id runs by loading the associated metadata.</li>
</ol>
<p dir="auto">For adding additional metadata while in simulation mode, one can place eg. this</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="if in_simulation_mode()
    m = Metadata(simdir())
    m[&quot;extra&quot;] = &quot;Some more info here&quot;
end"><pre><span class="pl-k">if</span> <span class="pl-c1">in_simulation_mode</span>()
    m <span class="pl-k">=</span> <span class="pl-c1">Metadata</span>(<span class="pl-c1">simdir</span>())
    m[<span class="pl-s"><span class="pl-pds">"</span>extra<span class="pl-pds">"</span></span>] <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>Some more info here<span class="pl-pds">"</span></span>
<span class="pl-k">end</span></pre></div>
<p dir="auto">before the <code>@run</code> call</p>
<h3 dir="auto"><a id="user-content-waiting-for-simulations" class="anchor" aria-hidden="true" href="#waiting-for-simulations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Waiting for simulations</h3>
<p dir="auto">By default simulations run asynchronous, so the calling script doesn't wait for the simulations to finish.
In order to wait for the sub processes, one can use <code>@runsync</code> inplace of <code>@run</code>.</p>
<h3 dir="auto"><a id="user-content-rerunning-simulations" class="anchor" aria-hidden="true" href="#rerunning-simulations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Rerunning simulations</h3>
<p dir="auto">Sometimes it's necessary to rerun a simulation with the same parameters.
This can be done by using <code>@rerun</code> or its synchronous counterpart <code>@rerunsync</code>.
The only arguments needed, are the function and the simulation directory.
So to rerun the simulation in simulation folder 3 from the above script, one just replaces</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@run makesim dicts datadir(&quot;sims&quot;)"><pre><span class="pl-c1">@run</span> makesim dicts <span class="pl-c1">datadir</span>(<span class="pl-s"><span class="pl-pds">"</span>sims<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">with</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@rerun makesim datadir(&quot;sims&quot;,&quot;3&quot;)"><pre><span class="pl-c1">@rerun</span> makesim <span class="pl-c1">datadir</span>(<span class="pl-s"><span class="pl-pds">"</span>sims<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>3<span class="pl-pds">"</span></span>)</pre></div>
<h3 dir="auto"><a id="user-content-running-simulations-in-custom-simulation-environments" class="anchor" aria-hidden="true" href="#running-simulations-in-custom-simulation-environments"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Running simulations in custom simulation environments</h3>
<p dir="auto">DrWatsonSim allows implementation of custom simulation environments to run parameter configurations in.
This is done by subtyping <code>AbstractSimulationEnvironment</code>, which then allows a custom definition of the function <code>DrWatsonSim.submit_command(&lt;:AbstractSimulationEnvironment, id, env)</code>.
The default environment is defined a singleton type and is configured to just use julia:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="submit_command(::AbstractSimulationEnvironment,id,env) = `$(Base.julia_cmd()) $(PROGRAM_FILE)`"><pre><span class="pl-en">submit_command</span>(<span class="pl-k">::</span><span class="pl-c1">AbstractSimulationEnvironment</span>,id,env) <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">`</span>$(Base.julia_cmd()) $(PROGRAM_FILE)<span class="pl-pds">`</span></span></pre></div>
<p dir="auto">For running jobs using a custom scheduler command (eg. <code>qsub</code>) one can use the following code.
First define a new type. Here, additionally, the number of cpus must be defined, as they are required for the scheduler:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="struct GridEngine &lt;: DrWatsonSim.AbstractSimulationEnvironment
    cpus
end"><pre><span class="pl-k">struct</span> GridEngine <span class="pl-k">&lt;:</span> <span class="pl-c1">DrWatsonSim.AbstractSimulationEnvironment</span>
    cpus
<span class="pl-k">end</span></pre></div>
<p dir="auto">Then define the actual command for submitting:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="function DrWatsonSim.submit_command(conf::GridEngine, id, env)
    wd = env[DrWatsonSim.ENV_SIM_FOLDER] # Simulation folder is stored in environment variable
    log_out = joinpath(wd,&quot;output.log&quot;)
    log_err = joinpath(wd,&quot;error.log&quot;)
    `qsub -b y -cwd -q nodes.q -V -pe openmpi_fill $(conf.cpus) -N test-$(id) -o $(log_out) -e $(log_err) $(Base.julia_cmd()) $(PROGRAM_FILE)`
end"><pre><span class="pl-k">function</span> DrWatsonSim<span class="pl-k">.</span><span class="pl-en">submit_command</span>(conf<span class="pl-k">::</span><span class="pl-c1">GridEngine</span>, id, env)
    wd <span class="pl-k">=</span> env[DrWatsonSim<span class="pl-k">.</span>ENV_SIM_FOLDER] <span class="pl-c"><span class="pl-c">#</span> Simulation folder is stored in environment variable</span>
    log_out <span class="pl-k">=</span> <span class="pl-c1">joinpath</span>(wd,<span class="pl-s"><span class="pl-pds">"</span>output.log<span class="pl-pds">"</span></span>)
    log_err <span class="pl-k">=</span> <span class="pl-c1">joinpath</span>(wd,<span class="pl-s"><span class="pl-pds">"</span>error.log<span class="pl-pds">"</span></span>)
    <span class="pl-s"><span class="pl-pds">`</span>qsub -b y -cwd -q nodes.q -V -pe openmpi_fill $(conf.cpus) -N test-$(id) -o $(log_out) -e $(log_err) $(Base.julia_cmd()) $(PROGRAM_FILE)<span class="pl-pds">`</span></span>
<span class="pl-k">end</span></pre></div>
<p dir="auto">The only further change required, is defining which environment should be used during running the simulation.
This is done in the final run call:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@runsync GridEngine(4) f parameters datadir(&quot;sims&quot;)"><pre><span class="pl-c1">@runsync</span> <span class="pl-c1">GridEngine</span>(<span class="pl-c1">4</span>) f parameters <span class="pl-c1">datadir</span>(<span class="pl-s"><span class="pl-pds">"</span>sims<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">Similarly, one can define a custom command for Slurm</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="function DrWatsonSim.submit_command(conf::Slurm, id, env)
    wd = env[DrWatsonSim.ENV_SIM_FOLDER]
    log_out = joinpath(wd,&quot;output.log&quot;)
    cmd_str = string(`$(Base.julia_cmd()) $(PROGRAM_FILE)`)[2:end-1] # remove the backticks from command interpolation
    `sbatch --export=ALL --nodes=1 --ntasks=$(conf.cpus) --job-name=test-$(id) --time=720:00:00 --output=$(log_out) --wrap=$(cmd_str)`
end"><pre><span class="pl-k">function</span> DrWatsonSim<span class="pl-k">.</span><span class="pl-en">submit_command</span>(conf<span class="pl-k">::</span><span class="pl-c1">Slurm</span>, id, env)
    wd <span class="pl-k">=</span> env[DrWatsonSim<span class="pl-k">.</span>ENV_SIM_FOLDER]
    log_out <span class="pl-k">=</span> <span class="pl-c1">joinpath</span>(wd,<span class="pl-s"><span class="pl-pds">"</span>output.log<span class="pl-pds">"</span></span>)
    cmd_str <span class="pl-k">=</span> <span class="pl-c1">string</span>(<span class="pl-s"><span class="pl-pds">`</span>$(Base.julia_cmd()) $(PROGRAM_FILE)<span class="pl-pds">`</span></span>)[<span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">end</span><span class="pl-k">-</span><span class="pl-c1">1</span>] <span class="pl-c"><span class="pl-c">#</span> remove the backticks from command interpolation</span>
    <span class="pl-s"><span class="pl-pds">`</span>sbatch --export=ALL --nodes=1 --ntasks=$(conf.cpus) --job-name=test-$(id) --time=720:00:00 --output=$(log_out) --wrap=$(cmd_str)<span class="pl-pds">`</span></span>
<span class="pl-k">end</span></pre></div>
<h3 dir="auto"><a id="user-content-metadata-stored-for-simulations" class="anchor" aria-hidden="true" href="#metadata-stored-for-simulations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Metadata stored for simulations</h3>
<table>
<thead>
<tr>
<th>key</th>
<th>description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>"simulation_submit_time"</code></td>
<td><code>Dates.now()</code> when <code>@run</code>, and others, were called</td>
</tr>
<tr>
<td><code>"simulation_submit_group"</code></td>
<td>Project directory relative paths to simulation folders of jobs that were started in parallel</td>
</tr>
<tr>
<td><code>"simulation_id"</code></td>
<td>Unique id of this simulation run. Is equal to the name of the simulation folder</td>
</tr>
<tr>
<td><code>"parameters"</code></td>
<td>Parameters for this simulation run ie. <code>p</code> in <code>f(p)</code></td>
</tr>
<tr>
<td><code>"mtime_scriptfile"</code></td>
<td><code>mtime</code> of the sending script file</td>
</tr>
<tr>
<td><code>"julia_command"</code></td>
<td>Full julia command that was used for calling the script file</td>
</tr>
<tr>
<td><code>"ENV"</code></td>
<td>Current environment variables</td>
</tr>
</tbody>
</table>
<h2 dir="auto"><a id="user-content-retrieving-metadata" class="anchor" aria-hidden="true" href="#retrieving-metadata"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Retrieving Metadata</h2>
<p dir="auto">The function <code>get_metadata</code> is provided for faster and simpler querying of the metadata database:</p>
<ul dir="auto">
<li><code>get_metadata()</code> Return all stored entries</li>
<li><code>get_metadata(path::String)</code> Return the entry for <code>path</code>, if none found, search parent folders for data</li>
<li><code>get_metadata(f::Function)</code> Return all entries <code>m</code> for which <code>f(m) == true</code></li>
<li><code>get_metadata(field::String,value)</code> Return all entries where <code>field</code> has the value <code>value</code></li>
</ul>
<h2 dir="auto"><a id="user-content-design" class="anchor" aria-hidden="true" href="#design"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Design</h2>
<p dir="auto">Metadata is stored in a separated folder <code>.metadata</code> inside the project directory.
The filenames are generated based on a file path <code>p</code> as follows:</p>
<ol dir="auto">
<li>If <code>p</code> is a relative path, make it absolute using <code>abspath</code>, otherwise leave <code>p</code> as it is</li>
<li>Make <code>p</code> relative to the project directory (<code>projectdir()</code>). This way metadata can be retrieved independent of the location of the project directory.</li>
<li>Replace the file separators with <code>/</code>. This way metadata can be retrieved on any OS.</li>
<li>Use <code>hash</code> to generated the final metadata filename for <code>p</code></li>
</ol>
</article></div>