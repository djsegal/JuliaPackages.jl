<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-diskcaches" class="anchor" aria-hidden="true" href="#diskcaches"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>DiskCaches</h1>

<p dir="auto"><a href="https://github.com/peterahrens/DiskCaches.jl/actions"><img src="https://github.com/peterahrens/DiskCaches.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/peterahrens/DiskCaches.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/2bc2f998722dc4cfb8c31a2e7f50a6a448e259a3a4e6e0577d7932a6b8d072d0/68747470733a2f2f636f6465636f762e696f2f67682f7065746572616872656e732f4469736b4361636865732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/peterahrens/DiskCaches.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">Basic Julia implementation of a cache mapped to the filesystem, for persistence across multiple Julia sessions. This implementation is intended to be thread and process safe, and files are formatted with <code>Serialization</code>.</p>
<p dir="auto">A <code>DiskCache</code> can associate keys with values, but cannot modify existing associations. Reading entries already on chip is fast, but writing values to disk is quite slow. The cache follows the <code>AbstractDict</code> interface, but methods which modify existing associations in the dictionary will error.</p>
<p dir="auto">This package was designed with memoization in mind via <a href="https://github.com/peterahrens/MemoizedMethods.jl">MemoizedMethods.jl</a>.</p>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using DiskCaches

julia&gt; c = DiskCache(&quot;path_to_cache.jls&quot;)
DiskCache{Any,Any,Dict{Any,Any}}()

julia&gt; c[1] = 2
2

julia&gt; c[2] = 3
3

julia&gt; c[1]
2

julia&gt; c[1] = 0
ERROR: To ensure the validity of the on-chip cache, DiskCaches do not support value modification."><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> DiskCaches

julia<span class="pl-k">&gt;</span> c <span class="pl-k">=</span> <span class="pl-c1">DiskCache</span>(<span class="pl-s"><span class="pl-pds">"</span>path_to_cache.jls<span class="pl-pds">"</span></span>)
<span class="pl-c1">DiskCache</span><span class="pl-c1">{Any,Any,Dict{Any,Any}}</span>()

julia<span class="pl-k">&gt;</span> c[<span class="pl-c1">1</span>] <span class="pl-k">=</span> <span class="pl-c1">2</span>
<span class="pl-c1">2</span>

julia<span class="pl-k">&gt;</span> c[<span class="pl-c1">2</span>] <span class="pl-k">=</span> <span class="pl-c1">3</span>
<span class="pl-c1">3</span>

julia<span class="pl-k">&gt;</span> c[<span class="pl-c1">1</span>]
<span class="pl-c1">2</span>

julia<span class="pl-k">&gt;</span> c[<span class="pl-c1">1</span>] <span class="pl-k">=</span> <span class="pl-c1">0</span>
ERROR<span class="pl-k">:</span> To ensure the validity of the on<span class="pl-k">-</span>chip cache, DiskCaches <span class="pl-k">do</span> not support value modification.</pre></div>
<p dir="auto">Again, these caches don't support modifications to existing key-value pairs. It's easiest to atomically "add a value if the key doesn't exist yet" with the <code>get!</code> functions.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; get!(c, 1, 42)
2

julia&gt; get!(c, 3) do 4 end
4"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">get!</span>(c, <span class="pl-c1">1</span>, <span class="pl-c1">42</span>)
<span class="pl-c1">2</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">get!</span>(c, <span class="pl-c1">3</span>) <span class="pl-k">do</span> <span class="pl-c1">4</span> <span class="pl-k">end</span>
<span class="pl-c1">4</span></pre></div>
<p dir="auto">Multiple caches pointed at the same file will shadow each other.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; c_shadow = DiskCache(&quot;path_to_cache.jls&quot;)
DiskCache{Any,Any,Dict{Any,Any}} with 3 entries:
  2 =&gt; 3
  3 =&gt; 4
  1 =&gt; 2

julia&gt; c_shadow[4] = 5
5

julia&gt; c
DiskCache{Any,Any,Dict{Any,Any}} with 3 entries:
  2 =&gt; 3
  3 =&gt; 4
  4 =&gt; 5
  1 =&gt; 2"><pre>julia<span class="pl-k">&gt;</span> c_shadow <span class="pl-k">=</span> <span class="pl-c1">DiskCache</span>(<span class="pl-s"><span class="pl-pds">"</span>path_to_cache.jls<span class="pl-pds">"</span></span>)
DiskCache{Any,Any,Dict{Any,Any}} with <span class="pl-c1">3</span> entries<span class="pl-k">:</span>
  <span class="pl-c1">2</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">3</span>
  <span class="pl-c1">3</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">4</span>
  <span class="pl-c1">1</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">2</span>

julia<span class="pl-k">&gt;</span> c_shadow[<span class="pl-c1">4</span>] <span class="pl-k">=</span> <span class="pl-c1">5</span>
<span class="pl-c1">5</span>

julia<span class="pl-k">&gt;</span> c
DiskCache{Any,Any,Dict{Any,Any}} with <span class="pl-c1">3</span> entries<span class="pl-k">:</span>
  <span class="pl-c1">2</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">3</span>
  <span class="pl-c1">3</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">4</span>
  <span class="pl-c1">4</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">5</span>
  <span class="pl-c1">1</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">2</span></pre></div>
<p dir="auto">... in a separate Julia session ...</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using DiskCaches

julia&gt; c = DiskCache(&quot;path_to_cache.jls&quot;)
DiskCache{Any,Any,Dict{Any,Any}} with 3 entries:
  2 =&gt; 3
  3 =&gt; 4
  4 =&gt; 5
  1 =&gt; 2"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> DiskCaches

julia<span class="pl-k">&gt;</span> c <span class="pl-k">=</span> <span class="pl-c1">DiskCache</span>(<span class="pl-s"><span class="pl-pds">"</span>path_to_cache.jls<span class="pl-pds">"</span></span>)
DiskCache{Any,Any,Dict{Any,Any}} with <span class="pl-c1">3</span> entries<span class="pl-k">:</span>
  <span class="pl-c1">2</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">3</span>
  <span class="pl-c1">3</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">4</span>
  <span class="pl-c1">4</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">5</span>
  <span class="pl-c1">1</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">2</span></pre></div>
<p dir="auto">DiskCaches use an on-chip cache which also defines the behavior (e.g. <code>==</code> vs. <code>===</code>) of the associative collection. By default, DiskCaches use <code>Dict</code> (not <code>IdDict</code>) as the on-chip cache. You may provide a specialized AbstractDict type to be used by DiskCaches, as long as it may be serialized, does not delete its values, and supports a no-argument constructor. Nesting DiskCaches with the same file will result in deadlock.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; c = DiskCache{Int,Int,IdDict{Int,Int}}(&quot;path_to_special_cache.jls&quot;)
DiskCache{Int64,Int64,IdDict{Int64,Int64}}()"><pre>julia<span class="pl-k">&gt;</span> c <span class="pl-k">=</span> <span class="pl-c1">DiskCache</span><span class="pl-c1">{Int,Int,IdDict{Int,Int}}</span>(<span class="pl-s"><span class="pl-pds">"</span>path_to_special_cache.jls<span class="pl-pds">"</span></span>)
<span class="pl-c1">DiskCache</span><span class="pl-c1">{Int64,Int64,IdDict{Int64,Int64}}</span>()</pre></div>
<p dir="auto">If you want to delete a <code>DiskCache</code> and are sure that no other caches with the same path will be used in the future, <code>rm</code> the file and make a new <code>DiskCache</code> with the same filename. This is a relatively unsafe operation.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; c = DiskCache(&quot;path_to_cache.jls&quot;)
DiskCache{Any,Any,Dict{Any,Any}} with 3 entries:
  2 =&gt; 3
  3 =&gt; 4
  4 =&gt; 5
  1 =&gt; 2

julia&gt; rm(&quot;path_to_cache.jls&quot;)

julia&gt; c = DiskCache(&quot;path_to_cache.jls&quot;)
DiskCache{Any,Any,Dict{Any,Any}}()"><pre>julia<span class="pl-k">&gt;</span> c <span class="pl-k">=</span> <span class="pl-c1">DiskCache</span>(<span class="pl-s"><span class="pl-pds">"</span>path_to_cache.jls<span class="pl-pds">"</span></span>)
DiskCache{Any,Any,Dict{Any,Any}} with <span class="pl-c1">3</span> entries<span class="pl-k">:</span>
  <span class="pl-c1">2</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">3</span>
  <span class="pl-c1">3</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">4</span>
  <span class="pl-c1">4</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">5</span>
  <span class="pl-c1">1</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">2</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">rm</span>(<span class="pl-s"><span class="pl-pds">"</span>path_to_cache.jls<span class="pl-pds">"</span></span>)

julia<span class="pl-k">&gt;</span> c <span class="pl-k">=</span> <span class="pl-c1">DiskCache</span>(<span class="pl-s"><span class="pl-pds">"</span>path_to_cache.jls<span class="pl-pds">"</span></span>)
<span class="pl-c1">DiskCache</span><span class="pl-c1">{Any,Any,Dict{Any,Any}}</span>()</pre></div>
</article></div>