<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-rationalroots" class="anchor" aria-hidden="true" href="#rationalroots"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>RationalRoots</h1>
<p><a href="https://travis-ci.org/Jutho/RationalRoots.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/842b69bf35e368d8093d28d7db5e95afcef21694/68747470733a2f2f7472617669732d63692e6f72672f4a7574686f2f526174696f6e616c526f6f74732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/Jutho/RationalRoots.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="LICENSE.md"><img src="https://camo.githubusercontent.com/4440d5deb3a53c4f8661ee765378e6071e7878e8/687474703a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d627269676874677265656e2e7376673f7374796c653d666c6174" alt="License" data-canonical-src="http://img.shields.io/badge/license-MIT-brightgreen.svg?style=flat" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/Jutho/RationalRoots.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/b2b1feb3a9727c8f9b88d082e845ef7909f43a4f/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f4a7574686f2f526174696f6e616c526f6f74732e6a6c2f62616467652e7376673f6272616e63683d6d617374657226736572766963653d676974687562" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/Jutho/RationalRoots.jl/badge.svg?branch=master&amp;service=github" style="max-width:100%;"></a>
<a href="http://codecov.io/github/Jutho/RationalRoots.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/f11062adf82e9e93d6c16053a513e17c1a8e8311/687474703a2f2f636f6465636f762e696f2f6769746875622f4a7574686f2f526174696f6e616c526f6f74732e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/Jutho/RationalRoots.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
<p>This package provides a data type <code>RationalRoot{T&lt;:Integer}</code> to exactly represent the (positive or negative) square root of a rational number of type <code>Rational{T}</code>.</p>
<h2><a id="user-content-basic-usage" class="anchor" aria-hidden="true" href="#basic-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Basic usage</h2>
<p><code>RationalRoot</code>s can be created from any other real number type by using constructors or <code>convert</code>; if the input is not an integer or rational (i.e. a floating point number), the function <code>rationalize</code> from Julia Base is used to first approximate it by a rational number.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">RationalRoot</span>(<span class="pl-k">-</span><span class="pl-c1">2.5</span>)
<span class="pl-k">-√</span>(<span class="pl-c1">25</span><span class="pl-k">//</span><span class="pl-c1">4</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">convert</span>(RationalRoot{Int16}, <span class="pl-c1">7</span><span class="pl-k">//</span><span class="pl-c1">2</span>)
<span class="pl-k">+√</span>(<span class="pl-c1">49</span><span class="pl-k">//</span><span class="pl-c1">4</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">RationalRoot</span><span class="pl-c1">{BigInt}</span>(<span class="pl-c1">2</span>)
<span class="pl-k">+√</span>(<span class="pl-c1">4</span><span class="pl-k">//</span><span class="pl-c1">1</span>)</pre></div>
<p>Another way of creating a <code>RationalRoot</code> is using the <code>signedroot</code> function, which maps
a real number <code>x</code> to <code>sign(x)*sqrt(abs(x)) = x/sqrt(abs(x))</code>. If <code>x</code> is an <code>Integer</code> or
<code>Rational</code>, the result is represented as a <code>RationalRoot</code> type. For a floating point number,
<code>signedroot</code> will return a floating point number. A <code>RationalRoot</code> output can be forced by using <code>signedroot(&lt;:RationalRoot, x)</code>, in which case <code>rationalize</code> is to rationalize the result.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">signedroot</span>(<span class="pl-c1">3</span>)
<span class="pl-k">+√</span>(<span class="pl-c1">3</span><span class="pl-k">//</span><span class="pl-c1">1</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">signedroot</span>(<span class="pl-k">-</span><span class="pl-c1">4.0</span>)
<span class="pl-k">-</span><span class="pl-c1">2.0</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">signedroot</span>(RationalRoot, <span class="pl-c1">5.2</span>)
<span class="pl-k">+√</span>(<span class="pl-c1">26</span><span class="pl-k">//</span><span class="pl-c1">5</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">signedroot</span>(RationalRoot{Int8}, <span class="pl-c1">8</span>)
<span class="pl-k">+√</span>(<span class="pl-c1">8</span><span class="pl-k">//</span><span class="pl-c1">1</span>)</pre></div>
<p>There is also the inverse function <code>signedsquare</code>, which maps a number <code>x</code> to <code>sign(x)*x^2 = x*abs(x)</code>.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">signedsquare</span>(<span class="pl-c1">1.5</span>)
<span class="pl-c1">2.25</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">signedsquare</span>(<span class="pl-k">-</span><span class="pl-c1">2</span><span class="pl-k">//</span><span class="pl-c1">3</span>)
<span class="pl-k">-</span><span class="pl-c1">4</span><span class="pl-k">//</span><span class="pl-c1">9</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">signedsquare</span>(<span class="pl-c1">RationalRoot</span><span class="pl-c1">{BigInt}</span>(<span class="pl-c1">1.5</span>))
<span class="pl-c1">9</span><span class="pl-k">//</span><span class="pl-c1">4</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">typeof</span>(ans)
Rational{BigInt}</pre></div>
<p>The type <code>RationalRoot</code> will be maintained under multiplication and division with itself or with number of type <code>Integer</code> and <code>Rational</code>. Addition and subtraction require that the type is converted to a floating point number.</p>
</article></div>