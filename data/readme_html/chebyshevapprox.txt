<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-chebyshevapprox" class="anchor" aria-hidden="true" href="#chebyshevapprox"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>ChebyshevApprox</h1>
<p dir="auto">ChebyshevApprox.jl is a Julia package for approximating continuous functions using Chebyshev polynomials.  The package's focus is on multivariate functions that depend on an arbitrary number of variables.  Both tensor-product polynomials and complete polynomials are implemented.  Working with complete polynomials often leads to a considerable decrease in computation time with little loss of accuracy.  The package allows the nodes to be either the roots of the Chebyshev polynomial (points of the first kind), the extrema of the Chebyshev polynomial (points of the second kind), Chebyshev extended points (Chebyshev roots normalized so that the boundry nodes equal -1.0 and 1.0), the Vertesi nodes, or the Legendre nodes.  In addition to approximating functions, the package also uses the approximating polynomial to compute derivatives, gradients, and hessians.</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">ChebyshevApprox.jl is a registered package.  To install it simply type in the REPL:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Pkg
Pkg.add(&quot;ChebyshevApprox&quot;)"><pre><span class="pl-k">using</span> Pkg
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>ChebyshevApprox<span class="pl-pds">"</span></span>)</pre></div>
<h2 dir="auto"><a id="user-content-nodes" class="anchor" aria-hidden="true" href="#nodes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Nodes</h2>
<p dir="auto">The package contains functions for computing several different types of approximating points.  Which points you use may depend on your application.</p>
<p dir="auto">To compute the Chebyshev roots within the [1.0, -1.0] interval use:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="n = 11
points = nodes(n,:chebyshev_nodes)"><pre>n <span class="pl-k">=</span> <span class="pl-c1">11</span>
points <span class="pl-k">=</span> <span class="pl-c1">nodes</span>(n,<span class="pl-c1">:chebyshev_nodes</span>)</pre></div>
<p dir="auto">where <code>n</code>, an integer, is the number of nodes and <code>:chebyshev_nodes</code> is a symbol indicating the type of nodes to be produced.  Alternatives to <code>:chebyshev_nodes</code> are: <code>chebyshev_extrema</code>, <code>:chebyshev_extended</code>, <code>:vertesi_nodes</code>, and <code>:legendre_nodes</code>.</p>
<p dir="auto">To compute nodes over bounded domains other than the [1.0,-1.0] interval, the <code>nodes</code> function accepts an optional third argument containing the domain in the form of a 1D array (a vector) containing two elements, where the first element is the upper bound on the interval and the second is the lower bound.  For example,</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="domain = [3.5,0.5]
points = nodes(n,:chebyshev_extrema,domain)"><pre>domain <span class="pl-k">=</span> [<span class="pl-c1">3.5</span>,<span class="pl-c1">0.5</span>]
points <span class="pl-k">=</span> <span class="pl-c1">nodes</span>(n,<span class="pl-c1">:chebyshev_extrema</span>,domain)</pre></div>
<p dir="auto">would compute <code>n</code> extrema of the Chebyshev polynomial and scale those points to the [3.5,0.5] interval.</p>
<h2 dir="auto"><a id="user-content-grids" class="anchor" aria-hidden="true" href="#grids"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Grids</h2>
<p dir="auto">Once the approximating points have been computed, these points can be collected together in a <code>Grid</code> structure:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="p1 = nodes(11,:chebyshev_nodes)
p2 = nodes(15,:chebyshev_nodes)

g = Grid((p1,p2))"><pre>p1 <span class="pl-k">=</span> <span class="pl-c1">nodes</span>(<span class="pl-c1">11</span>,<span class="pl-c1">:chebyshev_nodes</span>)
p2 <span class="pl-k">=</span> <span class="pl-c1">nodes</span>(<span class="pl-c1">15</span>,<span class="pl-c1">:chebyshev_nodes</span>)

g <span class="pl-k">=</span> <span class="pl-c1">Grid</span>((p1,p2))</pre></div>
<h2 dir="auto"><a id="user-content-approximation-plans" class="anchor" aria-hidden="true" href="#approximation-plans"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Approximation Plans</h2>
<p dir="auto">The approximate a function the package makes use of an approximation plan, which is a stucture containing the information needed to produce an approximating function.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="A_plan = CApproxPlan(g,order,domain)"><pre>A_plan <span class="pl-k">=</span> <span class="pl-c1">CApproxPlan</span>(g,order,domain)</pre></div>
<p dir="auto">where <code>g</code> is a Grid, <code>order</code> is an integer (complete polynomial approximation) or a tuple (tensor-product approximation), and <code>domain</code> is an array containing the upper and lower limits for each variable.  For example,</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="dom_1 = [5.0,3.0]
dom_2 = [1.5,-0.5]
dom = [dom_1 dom_2]

p1 = nodes(11,:chebyshev_nodes,dom_1)
p2 = nodes(15,:chebyshev_nodes,dom_2)

g = Grid((p1,p2))
order = (6,6)
A_plan = CApproxPlan(g,order,dom)"><pre>dom_1 <span class="pl-k">=</span> [<span class="pl-c1">5.0</span>,<span class="pl-c1">3.0</span>]
dom_2 <span class="pl-k">=</span> [<span class="pl-c1">1.5</span>,<span class="pl-k">-</span><span class="pl-c1">0.5</span>]
dom <span class="pl-k">=</span> [dom_1 dom_2]

p1 <span class="pl-k">=</span> <span class="pl-c1">nodes</span>(<span class="pl-c1">11</span>,<span class="pl-c1">:chebyshev_nodes</span>,dom_1)
p2 <span class="pl-k">=</span> <span class="pl-c1">nodes</span>(<span class="pl-c1">15</span>,<span class="pl-c1">:chebyshev_nodes</span>,dom_2)

g <span class="pl-k">=</span> <span class="pl-c1">Grid</span>((p1,p2))
order <span class="pl-k">=</span> (<span class="pl-c1">6</span>,<span class="pl-c1">6</span>)
A_plan <span class="pl-k">=</span> <span class="pl-c1">CApproxPlan</span>(g,order,dom)</pre></div>
<h2 dir="auto"><a id="user-content-function-approximation" class="anchor" aria-hidden="true" href="#function-approximation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Function approximation</h2>
<p dir="auto">To approximate a function, you use the <code>chebyshev_interp</code> function, which itself returns a function.  If the data for the function you wish to approximate, sampled on the Grid, <code>g</code>, are contained in the Array, <code>y</code>, then the approximating function is generated using:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="f_approx = chebyshev_interp(y,A_plan)"><pre>f_approx <span class="pl-k">=</span> <span class="pl-c1">chebyshev_interp</span>(y,A_plan)</pre></div>
<p dir="auto">which can then be evaluated at a point, <code>x</code>, in the domain according to:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="x = [2.0,0.1]
y_hat = f_approx(x)"><pre>x <span class="pl-k">=</span> [<span class="pl-c1">2.0</span>,<span class="pl-c1">0.1</span>]
y_hat <span class="pl-k">=</span> <span class="pl-c1">f_approx</span>(x)</pre></div>
<p dir="auto">Functions to approximate gradients and hessians are produced similarly:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="f_grad = chebyshev_gradient(y,A_plan)
f_hess = chebyshev_hessian(y,A_plan)
grad_hat = f_grad(x)
hess_hat = f_hess(x)"><pre>f_grad <span class="pl-k">=</span> <span class="pl-c1">chebyshev_gradient</span>(y,A_plan)
f_hess <span class="pl-k">=</span> <span class="pl-c1">chebyshev_hessian</span>(y,A_plan)
grad_hat <span class="pl-k">=</span> <span class="pl-c1">f_grad</span>(x)
hess_hat <span class="pl-k">=</span> <span class="pl-c1">f_hess</span>(x)</pre></div>
<p dir="auto">There are multi-threaded versions of these functions: <code>chebyshev_interp_threaded()</code>, <code>chebyshev_gradient_threaded()</code>, and <code>chebyshev_hessian_threaded()</code>.</p>
<h2 dir="auto"><a id="user-content-under-the-hood" class="anchor" aria-hidden="true" href="#under-the-hood"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Under the hood</h2>
<p dir="auto">The functions documented above should cover a lot of use cases.  However, the machinery used to produce the chebyshev polynomials, find the polynomial weights, and evaluate polynomials at given points---which took center stage in releases before version 0.3.0---is still there and can be used as before.  As such this 0.3.x release is (mostly) not expected to be code-breaking (some stuctures have gone, but I don't think they were used much anyway).</p>
<h2 dir="auto"><a id="user-content-polynomials" class="anchor" aria-hidden="true" href="#polynomials"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Polynomials</h2>
<p dir="auto">Chebyshev polynomials are constructed using the <code>chebyshev_polynomial()</code> function, which takes two arguments.  The first argument is an integer representing the order of the polynomial.  The second argument is the point in the [1.0,-1.0] interval at which the polynominal is evaluated.  This second argument can be a scalar or a 1D array.  For example,</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="order = 5
x = 0.5
p = chebyshev_polynomial(order,x)"><pre>order <span class="pl-k">=</span> <span class="pl-c1">5</span>
x <span class="pl-k">=</span> <span class="pl-c1">0.5</span>
p <span class="pl-k">=</span> <span class="pl-c1">chebyshev_polynomial</span>(order,x)</pre></div>
<p dir="auto">will return a 2D array (1 <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="8e2d3e3e8f6a265d1d9bbdf1bcb7a726">$\times$</math-renderer> 6) containing the Chebyshev polynomials of orders 0---5 evaluated at the point <code>x</code>.  If <code>x</code> is a 1D array of points, as in:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="order = 5
x = chebyshev_nodes(11)
p = chebyshev_polynomial(order,x)"><pre>order <span class="pl-k">=</span> <span class="pl-c1">5</span>
x <span class="pl-k">=</span> <span class="pl-c1">chebyshev_nodes</span>(<span class="pl-c1">11</span>)
p <span class="pl-k">=</span> <span class="pl-c1">chebyshev_polynomial</span>(order,x)</pre></div>
<p dir="auto">then <code>p</code> will be a 2D array (11 <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="8e2d3e3e8f6a265d1d9bbdf1bcb7a726">$\times$</math-renderer> 6) containing the Chebyshev polynomials of orders 0---5 evaluated at each element in <code>x</code>.</p>
<h2 dir="auto">
<a id="user-content-weights" class="anchor" aria-hidden="true" href="#weights"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Weights</h2>
<p dir="auto">ChebyshevApprox.jl uses Chebyshev regression to compute the weights in the Chebyshev polynomial.  The central function for computing Chebyshev weights is the following:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="w = chebyshev_weights(y,nodes,order,domain)"><pre>w <span class="pl-k">=</span> <span class="pl-c1">chebyshev_weights</span>(y,nodes,order,domain)</pre></div>
<p dir="auto">where <code>y</code> is a nD array containing the function evaluations at <code>nodes</code>, <code>nodes</code> is a tuple of 1D arrays containing Chebyshev-roots, <code>order</code> is a tuple (tensor-product polynomial) or an integer (complete polynomial) specifying the order of the polynomial in each dimension, and <code>domain</code> is a 2D array containing the upper and lower bounds on the approximating interval in each dimension.  So,</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="order_x1  = 5
nodes_x1  = chebyshev_nodes(11)
domain_x1 = [3.5,0.5]

order_x2  = 7
nodes_x2  = chebyshev_nodes(15)
domain_x2 = [1.7,-0.3]

order  = (order_x1,order_x2)
nodes  = (nodes_x1,nodes_x2)
domain = [domain_x1 domain_x2]

w = chebyshev_weights(y,nodes,order,domain)"><pre>order_x1  <span class="pl-k">=</span> <span class="pl-c1">5</span>
nodes_x1  <span class="pl-k">=</span> <span class="pl-c1">chebyshev_nodes</span>(<span class="pl-c1">11</span>)
domain_x1 <span class="pl-k">=</span> [<span class="pl-c1">3.5</span>,<span class="pl-c1">0.5</span>]

order_x2  <span class="pl-k">=</span> <span class="pl-c1">7</span>
nodes_x2  <span class="pl-k">=</span> <span class="pl-c1">chebyshev_nodes</span>(<span class="pl-c1">15</span>)
domain_x2 <span class="pl-k">=</span> [<span class="pl-c1">1.7</span>,<span class="pl-k">-</span><span class="pl-c1">0.3</span>]

order  <span class="pl-k">=</span> (order_x1,order_x2)
nodes  <span class="pl-k">=</span> (nodes_x1,nodes_x2)
domain <span class="pl-k">=</span> [domain_x1 domain_x2]

w <span class="pl-k">=</span> <span class="pl-c1">chebyshev_weights</span>(y,nodes,order,domain)</pre></div>
<p dir="auto">would compute the weights, <code>w</code>, (a 2D array in this example) in a tensor-product polynomial.  The domain-argument is optional, needed only if one or more variable does not have domain [1.0,-1.0].  The nodes-argument can be an array-of-arrays (instead of a tuple).  Alternatively, the polynominals can be computed and entered directly into the <code>chebyshev_weights()</code> function:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="poly_1 = chebyshev_polynomial(order_x1,nodes_x1)
poly_2 = chebyshev_polynomial(order_x2,nodes_x2)
poly   = (poly_1,poly_2)

w = chebyshev_weights(y,poly,order)"><pre>poly_1 <span class="pl-k">=</span> <span class="pl-c1">chebyshev_polynomial</span>(order_x1,nodes_x1)
poly_2 <span class="pl-k">=</span> <span class="pl-c1">chebyshev_polynomial</span>(order_x2,nodes_x2)
poly   <span class="pl-k">=</span> (poly_1,poly_2)

w <span class="pl-k">=</span> <span class="pl-c1">chebyshev_weights</span>(y,poly,order)</pre></div>
<p dir="auto">The <code>poly</code>-argument can be an array-of-arrays (instead of a tuple).  The weights, <code>w</code> are returned in a (multi-dimensional) array.</p>
<p dir="auto">If the solution nodes are instead the Chebyshev-extrema, then the analogue to the above is the use the <code>chebyshev_weights_extrema()</code> function.  For example:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="order_x1  = 5
nodes_x1  = chebyshev_extrema(11)
domain_x1 = [3.5,0.5]

order_x2  = 7
nodes_x2  = chebyshev_extrema(15)
domain_x2 = [1.7,-0.3]

order  = [order_x1,order_x2]
nodes  = (nodes_x1,nodes_x2)
domain = [domain_x1 domain_x2]

w = chebyshev_weights_extrema(y,nodes,order,domain)"><pre>order_x1  <span class="pl-k">=</span> <span class="pl-c1">5</span>
nodes_x1  <span class="pl-k">=</span> <span class="pl-c1">chebyshev_extrema</span>(<span class="pl-c1">11</span>)
domain_x1 <span class="pl-k">=</span> [<span class="pl-c1">3.5</span>,<span class="pl-c1">0.5</span>]

order_x2  <span class="pl-k">=</span> <span class="pl-c1">7</span>
nodes_x2  <span class="pl-k">=</span> <span class="pl-c1">chebyshev_extrema</span>(<span class="pl-c1">15</span>)
domain_x2 <span class="pl-k">=</span> [<span class="pl-c1">1.7</span>,<span class="pl-k">-</span><span class="pl-c1">0.3</span>]

order  <span class="pl-k">=</span> [order_x1,order_x2]
nodes  <span class="pl-k">=</span> (nodes_x1,nodes_x2)
domain <span class="pl-k">=</span> [domain_x1 domain_x2]

w <span class="pl-k">=</span> <span class="pl-c1">chebyshev_weights_extrema</span>(y,nodes,order,domain)</pre></div>
<p dir="auto">Other possibilities are to use <code>chebyshev_weights_extended()</code>, <code>chebyshev_weights_vertesi()</code>, or <code>chebyshev_weights_legendre()</code>.</p>
<h2 dir="auto">
<a id="user-content-function-evaluation" class="anchor" aria-hidden="true" href="#function-evaluation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Function evaluation</h2>
<p dir="auto">ChebyshevApprox uses the <code>chebyshev_evaluate()</code> function, which accommodates several methods, to evaluate Chebyshev polynomials.  If <code>x</code> is a 1D array representing the point at which the polynomial is to be evaluated, then:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="yhat = chebyshev_evaluate(w,x,order,domain)"><pre>yhat <span class="pl-k">=</span> <span class="pl-c1">chebyshev_evaluate</span>(w,x,order,domain)</pre></div>
<p dir="auto">For the case where a complete polynomial rather than a tensor-product polynomial is to be evaluated, the <code>order</code> variable is now simply an integer rather than a tuple of integers.</p>
<h2 dir="auto">
<a id="user-content-derivatives" class="anchor" aria-hidden="true" href="#derivatives"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Derivatives</h2>
<p dir="auto">The <code>chebyshev_derivative()</code> function can be used to approximate the partial derivative of a function with respect to a designated variable.  For example, the partial derivative with respect to the 3'rd variable evaluated at point <code>x</code> can be computed by:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="deriv = chebyshev_derivative(w,x,3,order,domain)"><pre>deriv <span class="pl-k">=</span> <span class="pl-c1">chebyshev_derivative</span>(w,x,<span class="pl-c1">3</span>,order,domain)</pre></div>
<p dir="auto">where <code>deriv</code> is a floating point number.</p>
<h2 dir="auto">
<a id="user-content-gradients" class="anchor" aria-hidden="true" href="#gradients"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Gradients</h2>
<p dir="auto">Gradients are computed using the <code>chebyshev_gradient()</code> function.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="grad = chebyshev_gradient(w,x,order,domain)"><pre>grad <span class="pl-k">=</span> <span class="pl-c1">chebyshev_gradient</span>(w,x,order,domain)</pre></div>
<p dir="auto">where <code>grad</code> is a 2D array with one row.</p>
<h2 dir="auto">
<a id="user-content-multi-threading" class="anchor" aria-hidden="true" href="#multi-threading"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Multi-threading</h2>
<p dir="auto">Computing the weights in a multivariate Chebyshev polynomial can be time-consuming for functions whose dimensions are large, or where the number of nodes and/or the order of the polynomals is large.  For this reason, multi-threaded functions for computing the weights are provided.  For example, if the nodes are Chebyshev-roots:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="w = chebyshev_weights_threaded(y,nodes,order,domain)"><pre>w <span class="pl-k">=</span> <span class="pl-c1">chebyshev_weights_threaded</span>(y,nodes,order,domain)</pre></div>
<p dir="auto">etc.</p>
<p dir="auto">For completeness, there are also:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="w = chebyshev_weights_extrema_threaded(y,nodes,order,domain)
w = chebyshev_weights_extended_threaded(y,nodes,order,domain)
w = chebyshev_weights_vertesi_threaded(y,nodes,order,domain)
w = chebyshev_weights_legendre_threaded(y,nodes,order,domain)"><pre>w <span class="pl-k">=</span> <span class="pl-c1">chebyshev_weights_extrema_threaded</span>(y,nodes,order,domain)
w <span class="pl-k">=</span> <span class="pl-c1">chebyshev_weights_extended_threaded</span>(y,nodes,order,domain)
w <span class="pl-k">=</span> <span class="pl-c1">chebyshev_weights_vertesi_threaded</span>(y,nodes,order,domain)
w <span class="pl-k">=</span> <span class="pl-c1">chebyshev_weights_legendre_threaded</span>(y,nodes,order,domain)</pre></div>
<h2 dir="auto">
<a id="user-content-related-packages" class="anchor" aria-hidden="true" href="#related-packages"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Related packages</h2>
<p dir="auto">If you are looking to approximate a function of one variable, then there is:</p>
<ul dir="auto">
<li>ApproxFun.jl</li>
</ul>
<p dir="auto">For multivariate functions, there is:</p>
<ul dir="auto">
<li>SmolyakApprox.jl</li>
<li>HyperbolicCrossApprox.jl</li>
<li>PiecewiseLinearApprox.jl</li>
</ul>
<p dir="auto">Finally, if you are approximating complex-valued multivariate functions, then a package insipired by ChebyshevApprox.jl and offering similar functionality is:</p>
<ul dir="auto">
<li>FastChebInterp.jl</li>
</ul>
</article></div>