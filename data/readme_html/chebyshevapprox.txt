<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-chebyshevapprox" class="anchor" aria-hidden="true" href="#chebyshevapprox"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>ChebyshevApprox</h1>
<p>ChebyshevApprox is a Julia package for approximating continuous functions using Chebyshev polynomials.  The package's focus is on multivariate functions that depend on an arbitrary number of variables.  Both tensor-product polynomials and complete polynomials are implemented.  Working with complete polynomials often leads to a considerable decrease in computation time with little loss of accuracy.  The package allows the nodes to be either the roots of the Chebyshev polynomial (points of the first kind), the extrema of the Chebyshev polynomial (points of the second kind), or the extended roots (Chebyshev roots normalized so that the boundry nodes equal -1.0 and 1.0).  In addition to approximating functions the package also uses the approximating polynomial to compute derivatives and gradients.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>ChebyshevApprox is a registered package.  To install it simply type in the REPL:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="using Pkg
Pkg.add(&quot;ChebyshevApprox&quot;)
"><pre><code>using Pkg
Pkg.add("ChebyshevApprox")
</code></pre></div>
<h2><a id="user-content-nodes" class="anchor" aria-hidden="true" href="#nodes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Nodes</h2>
<p>The package contains functions for computing both the roots of the Chebyshev polynomial and the extrema of the Chebyshev polynominal.  Depending of the application, you may wish to use one or the other.</p>
<p>To compute the Chebyshev roots within the [1.0, -1.0] interval use:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="nodes = chebyshev_nodes(n)
"><pre><code>nodes = chebyshev_nodes(n)
</code></pre></div>
<p>where <code>n</code>, an integer, is the number of nodes.  Similarly, to compute the Chebyshev extrema within the [1.0,-1.0] interval use:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="nodes = chebyshev_extrema(n)
"><pre><code>nodes = chebyshev_extrema(n)
</code></pre></div>
<p>The extended nodes over the [1.0,-1.0] interval are obtained from:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="nodes = chebyshev_extended(n)
"><pre><code>nodes = chebyshev_extended(n)
</code></pre></div>
<p>To compute nodes over bounded domains other than the [1.0,-1.0] interval, all three functions accept a second argument containing the domain in the form of a 1D array (a vector) containing two elements, where the first element is the upper bound on the interval and the second is the lower bound.  For example,</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="domain = [3.5,0.5]
nodes = chebyshev_nodes(n,domain)
"><pre><code>domain = [3.5,0.5]
nodes = chebyshev_nodes(n,domain)
</code></pre></div>
<p>would compute <code>n</code> roots of the Chebyshev polynomial and scale those roots to the [3.5,0.5] interval.</p>
<h2><a id="user-content-polynomials" class="anchor" aria-hidden="true" href="#polynomials"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Polynomials</h2>
<p>Chebyshev polynomials are constructed using the chebyshev_polynomial() function, which takes two arguments.  The first argument is an integer representing the order of the polynomial.  The second argument is the point in the [1.0,-1.0] interval at which the polynominal is evaluated.  This second argument can be a scalar or a 1D array.  For example,</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="order = 5
x = 0.5
p = chebyshev_polynomial(order,x)
"><pre><code>order = 5
x = 0.5
p = chebyshev_polynomial(order,x)
</code></pre></div>
<p>will return a 2D array containing the Chebyshev polynomials of orders 0---5 evaluated at the point <code>x</code>.  If <code>x</code> is a 1D array of points, as in:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="order = 5
x = chebyshev_nodes(11)
p = chebyshev_polynomial(order,x)
"><pre><code>order = 5
x = chebyshev_nodes(11)
p = chebyshev_polynomial(order,x)
</code></pre></div>
<p>then <code>p</code> will be a 2D array (11*6) containing the Chebyshev polynomials of orders 0---5 evaluated at each element in <code>x</code>.</p>
<h2><a id="user-content-structures" class="anchor" aria-hidden="true" href="#structures"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Structures</h2>
<p>ChebyshevApprox contains four structures that can make your life easier.  The first contains the information needed to evaluate a polynomial at a point.  I.e.:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="chebpoly = ChebPoly(w,order,domain)
"><pre><code>chebpoly = ChebPoly(w,order,domain)
</code></pre></div>
<p>where <code>order</code> would be an integer or a 1D array of integers.</p>
<p>The remaining three structures are interpolation objects, which are created as follows:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="cheby = ChebInterpRoots(y,nodes,order,domain)
cheby = ChebInterpExtrema(y,nodes,order,domain)
cheby = ChebInterpExtended(y,nodes,order,domain)
"><pre><code>cheby = ChebInterpRoots(y,nodes,order,domain)
cheby = ChebInterpExtrema(y,nodes,order,domain)
cheby = ChebInterpExtended(y,nodes,order,domain)
</code></pre></div>
<p>where <code>y</code> is an n-D array, <code>nodes</code> is a tuple, <code>order</code> would be an integer or a 1D array of integers, and <code>nodes</code> would be Chebyshev-roots in the first, Chebyshev-extrema in the second, and Chebyshev-extended-roots in the third.</p>
<h2><a id="user-content-weights" class="anchor" aria-hidden="true" href="#weights"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Weights</h2>
<p>We focus here on the case where the solution nodes are Chebyshev-roots and cover the cases where they are Chebyshev-extrema and Chebyshev-extended-roots subsequently.</p>
<p>ChebyshevApprox uses Chebyshev regression to compute the weights in the Chebyshev polynomial.  The central function for computing Chebyshev weights is the following:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="w = chebyshev_weights(y,nodes,order,domain)
"><pre><code>w = chebyshev_weights(y,nodes,order,domain)
</code></pre></div>
<p>where <code>y</code> is a n-D array containing the function evaluations at <code>nodes</code>, <code>nodes</code> is a tuple of 1D arrays containing Chebyshev-roots, 'order' is a 1D array (tensor-product polynomial) or an integer (complete polynomial) specifying the order of the polynomial in each dimension, and <code>domain</code> is a 2D array containing the upper and lower bounds on the approximating interval in each dimension.  So,</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="order_x1  = 5
nodes_x1  = chebyshev_nodes(11)
domain_x1 = [3.5,0.5]

order_x2  = 7
nodes_x2  = chebyshev_nodes(15)
domain_x2 = [1.7,-0.3]

order  = [order_x1,order_x2]
nodes  = (nodes_x1,nodes_x2)
domain = [domain_x1 domain_x2]

w = chebyshev_weights(y,nodes,order,domain)
"><pre><code>order_x1  = 5
nodes_x1  = chebyshev_nodes(11)
domain_x1 = [3.5,0.5]

order_x2  = 7
nodes_x2  = chebyshev_nodes(15)
domain_x2 = [1.7,-0.3]

order  = [order_x1,order_x2]
nodes  = (nodes_x1,nodes_x2)
domain = [domain_x1 domain_x2]

w = chebyshev_weights(y,nodes,order,domain)
</code></pre></div>
<p>would compute the weights, <code>w</code>, (a 2D array in this example) in a tensor-product polynomial.  The domain-argument is optional, needed only if one or more variable does not have domain [1.0,-1.0].  The nodes-argument can be an array-of-arrays (instead of a tuple).  Alternatively, the polynominals can be computed and entered directly into the chebyshev_weights() function:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="p1   = chebyshev_polynomial(order_x1,nodes_x1)
p2   = chebyshev_polynomial(order_x2,nodes_x2)
poly = (p1,p2)

w = chebyshev_weights(y,poly,order)
"><pre><code>p1   = chebyshev_polynomial(order_x1,nodes_x1)
p2   = chebyshev_polynomial(order_x2,nodes_x2)
poly = (p1,p2)

w = chebyshev_weights(y,poly,order)
</code></pre></div>
<p>The poly-argument can be an array-of-arrays (instead of a tuple).  Further, using the ChebInterp structure:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="w = chebyshev_weights(cheb)
"><pre><code>w = chebyshev_weights(cheb)
</code></pre></div>
<p>For all of these functions the <code>weights</code> are returned in a (multi-dimensional) array.</p>
<p>If the solution nodes are instead the Chebyshev-extrema, then the analogue to the above is the use the chebyshev_weights_extrema() function.  For example,</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="order_x1  = 5
nodes_x1  = chebyshev_extrema(11)
domain_x1 = [3.5,0.5]

order_x2  = 7
nodes_x2  = chebyshev_extrema(15)
domain_x2 = [1.7,-0.3]

order  = [order_x1,order_x2]
nodes  = (nodes_x1,nodes_x2)
domain = [domain_x1 domain_x2]

w = chebyshev_weights_extrema(y,nodes,order,domain)
"><pre><code>order_x1  = 5
nodes_x1  = chebyshev_extrema(11)
domain_x1 = [3.5,0.5]

order_x2  = 7
nodes_x2  = chebyshev_extrema(15)
domain_x2 = [1.7,-0.3]

order  = [order_x1,order_x2]
nodes  = (nodes_x1,nodes_x2)
domain = [domain_x1 domain_x2]

w = chebyshev_weights_extrema(y,nodes,order,domain)
</code></pre></div>
<p>Finally, if the solution nodes are the Chebyshev-extended-roots, then use the chebyshev_weights_extended() function, as per:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="order_x1  = 5
nodes_x1  = chebyshev_extended(11)
domain_x1 = [3.5,0.5]

order_x2  = 7
nodes_x2  = chebyshev_extended(15)
domain_x2 = [1.7,-0.3]

order  = [order_x1,order_x2]
nodes  = (nodes_x1,nodes_x2)
domain = [domain_x1 domain_x2]

w = chebyshev_weights_extended(y,nodes,order,domain)
"><pre><code>order_x1  = 5
nodes_x1  = chebyshev_extended(11)
domain_x1 = [3.5,0.5]

order_x2  = 7
nodes_x2  = chebyshev_extended(15)
domain_x2 = [1.7,-0.3]

order  = [order_x1,order_x2]
nodes  = (nodes_x1,nodes_x2)
domain = [domain_x1 domain_x2]

w = chebyshev_weights_extended(y,nodes,order,domain)
</code></pre></div>
<h2><a id="user-content-function-evaluation" class="anchor" aria-hidden="true" href="#function-evaluation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Function evaluation</h2>
<p>ChebyshevApprox uses the chebyshev_evaluate() function, which accommodates several methods, to evaluate Chebyshev polynomials.  If <code>x</code> is a 1D array representing the point at which the polynomial is to be evaluated, then:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="yhat = chebyshev_evaluate(w,x,order,domain)
"><pre><code>yhat = chebyshev_evaluate(w,x,order,domain)
</code></pre></div>
<p>or</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="yhat = chebyshev_evaluate(chebpoly,x)
"><pre><code>yhat = chebyshev_evaluate(chebpoly,x)
</code></pre></div>
<p>or</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="yhat = chebyshev_evaluate(cheby,x)
"><pre><code>yhat = chebyshev_evaluate(cheby,x)
</code></pre></div>
<p>are equivalent.  For the case where a complete polynomial rather than a tensor-product polynomial is to be evaluated, the commands are the same as above, but the <code>order</code> variable is now simply an integer rather than a 1D array of integers.</p>
<p>ChebyshevApprox also allows the following:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="cheb = chebyshev_evaluate(w,order,domain)
"><pre><code>cheb = chebyshev_evaluate(w,order,domain)
</code></pre></div>
<p>or</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="cheb = chebyshev_evaluate(chebpoly)
"><pre><code>cheb = chebyshev_evaluate(chebpoly)
</code></pre></div>
<p>or</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="cheb = cheb_interp(cheby)
"><pre><code>cheb = cheb_interp(cheby)
</code></pre></div>
<p>followed by</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="yhat = cheb(x)
"><pre><code>yhat = cheb(x)
</code></pre></div>
<p>allowing polynomials to be easily evaluated at point <code>x</code>.</p>
<h2><a id="user-content-derivatives" class="anchor" aria-hidden="true" href="#derivatives"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Derivatives</h2>
<p>The chebyshev_derivative() function can be used to approximate the partial derivative of a function with respect to a designated variable.  For example, the partial derivative with respect to the 3'rd variable evaluated at point <code>x</code> can be computed by:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="deriv = chebyshev_derivative(w,x,3,order,domain)
"><pre><code>deriv = chebyshev_derivative(w,x,3,order,domain)
</code></pre></div>
<p>or</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="deriv = chebyshev_derivative(chebpoly,x,3)
"><pre><code>deriv = chebyshev_derivative(chebpoly,x,3)
</code></pre></div>
<p>or</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="deriv = chebyshev_derivative(cheby,x,3)
"><pre><code>deriv = chebyshev_derivative(cheby,x,3)
</code></pre></div>
<p>where <code>deriv</code> that is returned is a floating point number.</p>
<h2><a id="user-content-gradients" class="anchor" aria-hidden="true" href="#gradients"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Gradients</h2>
<p>Gradients are computed using the chebyshev_gradient() function.</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="grad = chebyshev_gradient(w,x,order,domain)
"><pre><code>grad = chebyshev_gradient(w,x,order,domain)
</code></pre></div>
<p>or</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="grad = chebyshev_gradient(chebpoly,x)
"><pre><code>grad = chebyshev_gradient(chebpoly,x)
</code></pre></div>
<p>or</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="grad = chebyshev_gradient(cheby,x)
"><pre><code>grad = chebyshev_gradient(cheby,x)
</code></pre></div>
<p>where <code>grad</code> that is returned is a 2D array with one row.</p>
<h2><a id="user-content-multi-threading" class="anchor" aria-hidden="true" href="#multi-threading"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Multi-threading</h2>
<p>Computing the weights in a multivariate Chebyshev polynomial can be time-consuming for functions whose dimensions are large, or where the number of nodes and/or the order of the polynomals is large.  For this reason, multi-threaded functions for computing the weights are provided.  If the nodes are Chebyshev-roots:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="w = chebyshev_weights_threaded(y,nodes,order,domain)
"><pre><code>w = chebyshev_weights_threaded(y,nodes,order,domain)
</code></pre></div>
<p>and</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="w = chebyshev_weights_threaded(y,poly,order)
"><pre><code>w = chebyshev_weights_threaded(y,poly,order)
</code></pre></div>
<p>and</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="w = chebyshev_weights_threaded(cheby)
"><pre><code>w = chebyshev_weights_threaded(cheby)
</code></pre></div>
<p>As earlier, these functions can be used to compute weights for either tensor-product polynomials or complete polynomials.  Threaded versions are also provided for the cases where the nodes are Chebyshev-extrema and Chebyshev-extended-roots, such as:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="w = chebyshev_weights_extrema_threaded(y,nodes,order,domain)
w = chebyshev_weights_extended_threaded(y,nodes,order,domain)
"><pre><code>w = chebyshev_weights_extrema_threaded(y,nodes,order,domain)
w = chebyshev_weights_extended_threaded(y,nodes,order,domain)
</code></pre></div>
<h2><a id="user-content-summary" class="anchor" aria-hidden="true" href="#summary"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Summary</h2>
<p>Have fun.</p>
</article></div>