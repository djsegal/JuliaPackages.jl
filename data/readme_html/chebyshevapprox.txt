<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-chebyshevapprox" class="anchor" aria-hidden="true" href="#chebyshevapprox"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>ChebyshevApprox</h1>
<p>Julia code to approximate continuous functions using Chebyshev polynomials.</p>
<p>In many applications it is important to be able to approximate accurately continuous functions of several variables.  This code can approximate functions that depend upon an arbitrary number of variables.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>To install this package simply type in the REPL:</p>
<pre><code>using Pkg
Pkg.add("ChebyshevApprox")
</code></pre>
<h2><a id="user-content-use" class="anchor" aria-hidden="true" href="#use"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Use</h2>
<p>Chebyshev nodes in the [1.0, -1.0] interval are computed using the command</p>
<pre><code>nodes = chebyshev_nodes(n)
</code></pre>
<p>where <code>n</code>, an integer, is the number of nodes.  Similarly, Chebyshev nodes scaled to a bounded interval are computed using the command</p>
<pre><code>nodes = chebyshev_nodes(n,domain)
</code></pre>
<p>where <code>domain</code> is a 1D array with two elements, the first representing the upper bound on the interval and the second the lower bound.</p>
<h1><a id="user-content-approximating-functions-of-one-variable" class="anchor" aria-hidden="true" href="#approximating-functions-of-one-variable"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Approximating functions of one variable</h1>
<p>To approximate a 1D function using a Chebyshev polynomial one first computes the Chebyshev weights.  There are several ways of doing this.  The central command is</p>
<pre><code>w = chebyshev_weights(y,nodes,order,domain)
</code></pre>
<p>where <code>y</code> is a 1D array containing function evaluations at nodes and order is an integer (or 1D integer array containing one element) representing the order of the polynomial.  <code>nodes</code> can be either a 1D array or a tuple containing a 1D array.  An alternative is the command</p>
<pre><code>w = chebyshev_weights(y,poly,order,domain)
</code></pre>
<p>where <code>poly</code> is an array containing a 2D array containing the Chebyshev polynomials evaluated at each node.  Regardless of which command is used, the Chebyshev weights are computed using Chebyshev regression.</p>
<p>Given the Chebyshev weights, the function can be approximated at a given point, <code>x</code>, within domain using either</p>
<pre><code>y_approx = chebyshev_evaluate(w,[x],order,domain)
</code></pre>
<p>or</p>
<pre><code>y_approx = clenshaw_evaluate(w,[x],order,domain)
</code></pre>
<p>The latter command evaluates the polynominal using Clenshaw's recursion.  For functions where the domain of <code>x</code> coincides with the [1.0, -1.0] interval the domain argument can be omitted, both when computing the weights and when evaluating the polynomial.</p>
<h1><a id="user-content-approximating-functions-of-several-variables" class="anchor" aria-hidden="true" href="#approximating-functions-of-several-variables"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Approximating functions of several variables</h1>
<p>The codes can approximate functions of an arbitrary number of variables.  The only real difference is that in the higher dimension cases the codes allow the polynomials to be either tensor products of 1D polynomials or complete polynomials.  When the function depends on six or fewer variables, and in the tensor-product case, to approximate a function (of three variables, say) the relevant commands are</p>
<pre><code>w = chebyshev_weights(y,nodes_1,nodes_2,nodes_3,order,domain)      --- (1)
</code></pre>
<p>where <code>order</code> is a 1D integer array whose elements represents the polynomial orders in each successive dimension, or</p>
<pre><code>w = chebyshev_weights(y,nodes,order,domain)                        --- (2)
</code></pre>
<p>where <code>nodes</code> is a tuple containing 1D arrays, or</p>
<pre><code>w = chebyshev_weights(y,poly,order,domain)                         --- (3)
</code></pre>
<p>where <code>poly</code> is a tuple containing 2D arrays of Chebyshev polynomials evaluated at each node.  To go beyond functions of six variables, commands (2) or (3) can be used, but not (1).</p>
<p>Then to evaluate the polynomial at a point <code>x</code>, the relevant commands are either</p>
<pre><code>y_approx = chebyshev_evaluate(w,x,order,domain)
</code></pre>
<p>or</p>
<pre><code>y_approx = clenshaw_evaluate(w,x,order,domain)
</code></pre>
<p>In each of these commands, the variable <code>domain</code> is a 2D array (2*3 matrix for the 3-variable case) whose columns summarize the upper- and lower-bound on each variable.</p>
<p>For the case where a complete polynomial rather than a tensor-product polynomial is desired, the commands are the same as above, but the <code>order</code> variable is now simply an integer rather than a 1D array of integers.</p>
<p>As with the 1D case, if the domain of each variable is [1.0, -1.0], then the domain variable can be omitted.</p>
<p>Working with complete polynomials rather than tensor-product polynomials often leads to a considerable decrease in computation time with little loss of accuracy.</p>
<h1><a id="user-content-summary" class="anchor" aria-hidden="true" href="#summary"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Summary</h1>
<p>Have fun.</p>
</article></div>