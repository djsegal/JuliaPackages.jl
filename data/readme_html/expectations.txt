<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p><a href="https://travis-ci.org/QuantEcon/Expectations.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/0cd735d4ea6bfeac9057410c2cef198378ff9b653852b7c02f77a2b95a55a401/68747470733a2f2f7472617669732d63692e6f72672f5175616e7445636f6e2f4578706563746174696f6e732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Travis status" data-canonical-src="https://travis-ci.org/QuantEcon/Expectations.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/arnavs/expectations-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/d92ac86ab8facf4e99d86112e30a4e7135c80b568176c9c2fa464c8e112e1b95/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f693637756372786a347966316b6478383f7376673d74727565" alt="Build status" data-canonical-src="https://ci.appveyor.com/api/projects/status/i67ucrxj4yf1kdx8?svg=true" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/QuantEcon/Expectations.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/36d7e96acd6a27be29151d080938e5a3eabebddc0a60f23ac94bee43dc364cf8/68747470733a2f2f636f6465636f762e696f2f67682f5175616e7445636f6e2f4578706563746174696f6e732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/QuantEcon/Expectations.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p><a href="https://QuantEcon.github.io/Expectations.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/56f8252ba8e9d3f0b810769543f77823d2fe031ce560d4c2d69fb1fcad800383/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6c61746573742d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-latest-blue.svg" style="max-width:100%;"></a></p>
<h1><a id="user-content-expectations" class="anchor" aria-hidden="true" href="#expectations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Expectations</h1>
<p>Installation (for Julia v1.0 and up):</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="pkg&gt; add Expectations
"><pre>pkg<span class="pl-k">&gt;</span> add Expectations</pre></div>
<p>See <a href="https://julialang.github.io/Pkg.jl/v1/managing-packages/#Adding-packages-1" rel="nofollow">Pkg docs for more details</a></p>
<p>This is a package designed to simplify the process of taking expectations of functions of random variables.</p>
<h3><a id="user-content-expectation-operator" class="anchor" aria-hidden="true" href="#expectation-operator"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Expectation Operator</h3>
<p>The key object is the <code>expectation</code> function, which returns an operator:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="dist = Normal()
E = expectation(dist)
E(x -&gt; x)
"><pre>dist <span class="pl-k">=</span> <span class="pl-c1">Normal</span>()
E <span class="pl-k">=</span> <span class="pl-c1">expectation</span>(dist)
<span class="pl-c1">E</span>(x <span class="pl-k">-&gt;</span> x)</pre></div>
<p>For convenience, the operator can be applied directly to a function instead of being cached,</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="expectation(x-&gt;x^2, dist)
"><pre><span class="pl-c1">expectation</span>(x<span class="pl-k">-&gt;</span>x<span class="pl-k">^</span><span class="pl-c1">2</span>, dist)</pre></div>
<p>As a linear operator on vectors using the nodes of the distribution</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="dist = Normal()
E = expectation(dist)
x = nodes(E)
f(x) = x^2
E * f.(x) == dot(f.(x), weights(E))
"><pre>dist <span class="pl-k">=</span> <span class="pl-c1">Normal</span>()
E <span class="pl-k">=</span> <span class="pl-c1">expectation</span>(dist)
x <span class="pl-k">=</span> <span class="pl-c1">nodes</span>(E)
<span class="pl-en">f</span>(x) <span class="pl-k">=</span> x<span class="pl-k">^</span><span class="pl-c1">2</span>
E <span class="pl-k">*</span> <span class="pl-c1">f</span>.(x) <span class="pl-k">==</span> <span class="pl-c1">dot</span>(<span class="pl-c1">f</span>.(x), <span class="pl-c1">weights</span>(E))</pre></div>
<h3><a id="user-content-random-variables" class="anchor" aria-hidden="true" href="#random-variables"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Random Variables</h3>
<p>The underlying distributions are objects from <code>Distributions.jl</code> (currently <code>&lt;:UnivariateDistribution</code>).</p>
<p><strong>Starting with 1.3.0, we also support mixture models.</strong></p>
<h3><a id="user-content-quadrature-algorithms" class="anchor" aria-hidden="true" href="#quadrature-algorithms"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Quadrature Algorithms</h3>
<p>We support different types of Gaussian quadrature (Gauss-Hermite, Gauss-Legendre, Gauss-Laguerre, etc.) based on the distribution, as well as some methods with user-defined nodes (e.g., trapezoidal integration).</p>
<p>We have rules for the following distributions:</p>
<ul>
<li>Normal</li>
<li>ChiSq</li>
<li>LogNormal</li>
<li>Exponential</li>
<li>Beta</li>
<li>Gamma/Erlang</li>
<li>Uniform</li>
<li>Continuous Univariate (compact; generic fallback)</li>
<li>Continuous Univariate (no restriction; approximates with quantile grid)</li>
<li>Discrete</li>
</ul>
<p>See docs for more info.</p>
<h3><a id="user-content-mixture-models" class="anchor" aria-hidden="true" href="#mixture-models"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Mixture Models</h3>
<p>We also support mixture models, e.g.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="d = MixtureModel([Uniform(), Normal(), Gamma()]);
E = expectation(d);
E(x -&gt; x) # 0.5000000000000016
"><pre>d <span class="pl-k">=</span> <span class="pl-c1">MixtureModel</span>([<span class="pl-c1">Uniform</span>(), <span class="pl-c1">Normal</span>(), <span class="pl-c1">Gamma</span>()]);
E <span class="pl-k">=</span> <span class="pl-c1">expectation</span>(d);
<span class="pl-c1">E</span>(x <span class="pl-k">-&gt;</span> x) <span class="pl-c"><span class="pl-c">#</span> 0.5000000000000016</span></pre></div>
<p>The <code>MixtureExpectation</code> objects support most of the same behavior as the individual <code>IterableExpectation</code>s.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="2E(x -&gt; x) # 1.000000000000003
weights(E) # [1/3, 1/3, 1/3]
expectations(E) # component expectations
"><pre><span class="pl-c1">2</span><span class="pl-c1">E</span>(x <span class="pl-k">-&gt;</span> x) <span class="pl-c"><span class="pl-c">#</span> 1.000000000000003</span>
<span class="pl-c1">weights</span>(E) <span class="pl-c"><span class="pl-c">#</span> [1/3, 1/3, 1/3]</span>
<span class="pl-c1">expectations</span>(E) <span class="pl-c"><span class="pl-c">#</span> component expectations</span></pre></div>
</article></div>