<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-julia-binding-for-kyotocabinet" class="anchor" aria-hidden="true" href="#julia-binding-for-kyotocabinet"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Julia binding for KyotoCabinet</h1>
<p><a href="https://travis-ci.org/tuzzeg/KyotoCabinet.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/335c9d61ae6166bc75794392e42bc3920932c0d6/68747470733a2f2f7472617669732d63692e6f72672f74757a7a65672f4b796f746f436162696e65742e6a6c2e737667" alt="Build Status" data-canonical-src="https://travis-ci.org/tuzzeg/KyotoCabinet.jl.svg" style="max-width:100%;"></a></p>
<p>This package provides bindings for <a href="http://fallabs.com/kyotocabinet" rel="nofollow">KyotoCabinet</a> key-value storage.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Installation</h2>
<div class="highlight highlight-source-julia"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>KyotoCabinet<span class="pl-pds">"</span></span>)</pre></div>
<h2><a id="user-content-generic-interface" class="anchor" aria-hidden="true" href="#generic-interface"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Generic interface</h2>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> KyotoCabinet</pre></div>
<p>To open database, use <code>open</code> method:</p>
<div class="highlight highlight-source-julia"><pre>db <span class="pl-k">=</span> <span class="pl-c1">open</span>(<span class="pl-s"><span class="pl-pds">"</span>db.kch<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>r<span class="pl-pds">"</span></span>)
<span class="pl-c"><span class="pl-c">#</span> db::Dict{Array{Uint8,1},Array{Uint8,1}}</span>
<span class="pl-c1">close</span>(db)</pre></div>
<p>There is also bracketed version:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">open</span>(<span class="pl-c1">Db</span><span class="pl-c1">{K,V}</span>(), <span class="pl-s"><span class="pl-pds">"</span>db.kch<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>w+<span class="pl-pds">"</span></span>) <span class="pl-k">do</span> db
  <span class="pl-c"><span class="pl-c">#</span> db::Dict{K,V}</span>
  <span class="pl-c"><span class="pl-c">#</span> do stuff...</span>
<span class="pl-k">end</span></pre></div>
<p><code>Db</code> object implements basic collections and <code>Dict</code> methods.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">open</span>(<span class="pl-c1">Db</span><span class="pl-c1">{String,String}</span>(), <span class="pl-s"><span class="pl-pds">"</span>db.kch<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>w+<span class="pl-pds">"</span></span>) <span class="pl-k">do</span> db
  <span class="pl-c"><span class="pl-c">#</span> Basic getindex, setindex! methods</span>
  db[<span class="pl-s"><span class="pl-pds">"</span>a<span class="pl-pds">"</span></span>] <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>1<span class="pl-pds">"</span></span>
  <span class="pl-c1">println</span>(db[<span class="pl-s"><span class="pl-pds">"</span>a<span class="pl-pds">"</span></span>])

  <span class="pl-c"><span class="pl-c">#</span> Dict methods also implemented:</span>
  <span class="pl-c"><span class="pl-c">#</span> haskey, getkey, get, get!, delete!, pop!</span>
  <span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-c1">haskey</span>(db, <span class="pl-s"><span class="pl-pds">"</span>x<span class="pl-pds">"</span></span>))
    x <span class="pl-k">=</span> <span class="pl-c1">get</span>(db, <span class="pl-s"><span class="pl-pds">"</span>x<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>default<span class="pl-pds">"</span></span>)
    y <span class="pl-k">=</span> <span class="pl-c1">get!</span>(db, <span class="pl-s"><span class="pl-pds">"</span>y<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>set_value_if_non_exists<span class="pl-pds">"</span></span>)
  <span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>
<p>Support iteration over records, keys and values:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">for</span> (k, v) <span class="pl-k">=</span> db
  <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>k=<span class="pl-v">$k</span> v=<span class="pl-v">$v</span><span class="pl-pds">"</span></span>)
<span class="pl-k">end</span>
<span class="pl-k">for</span> k <span class="pl-k">=</span> <span class="pl-c1">keys</span>(db)
  <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>k=<span class="pl-v">$k</span><span class="pl-pds">"</span></span>)
<span class="pl-k">end</span></pre></div>
<h2><a id="user-content-serializationdeserialization" class="anchor" aria-hidden="true" href="#serializationdeserialization"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Serialization/Deserialization</h2>
<p><a href="http://fallabs.com/kyotocabinet" rel="nofollow">KyotoCabinet</a> treats keys and values as byte arrays.
To make it work with arbitrary types, one needs to define pack/unpack methods.</p>
<div class="highlight highlight-source-julia"><pre>immutable K
  x<span class="pl-k">::</span><span class="pl-c1">Int</span>
<span class="pl-k">end</span>

immutable V
  a<span class="pl-k">::</span><span class="pl-c1">Int</span>
  b<span class="pl-k">::</span><span class="pl-c1">String</span>
<span class="pl-k">end</span>

<span class="pl-k">function</span> KyotoCabinet<span class="pl-k">.</span><span class="pl-en">pack</span>(k<span class="pl-k">::</span><span class="pl-c1">K</span>)
  io <span class="pl-k">=</span> <span class="pl-c1">IOBuffer</span>()
  <span class="pl-c1">write</span>(io, <span class="pl-c1">int32</span>(k<span class="pl-k">.</span>x))
  <span class="pl-c1">takebuf_array</span>(io)
<span class="pl-k">end</span>
<span class="pl-k">function</span> KyotoCabinet<span class="pl-k">.</span><span class="pl-en">unpack</span>(T<span class="pl-k">::</span><span class="pl-c1">Type{K}</span>, buf<span class="pl-k">::</span><span class="pl-c1">Array{Uint8,1}</span>)
  io <span class="pl-k">=</span> <span class="pl-c1">IOBuffer</span>(buf)
  x <span class="pl-k">=</span> <span class="pl-c1">read</span>(io, Int32)
  <span class="pl-c1">K</span>(<span class="pl-c1">int</span>(x))
<span class="pl-k">end</span>

<span class="pl-k">function</span> KyotoCabinet<span class="pl-k">.</span><span class="pl-en">pack</span>(v<span class="pl-k">::</span><span class="pl-c1">V</span>)
  io <span class="pl-k">=</span> <span class="pl-c1">IOBuffer</span>()
  <span class="pl-c1">write</span>(io, <span class="pl-c1">int32</span>(v<span class="pl-k">.</span>a))
  <span class="pl-c1">write</span>(io, <span class="pl-c1">int32</span>(<span class="pl-c1">length</span>(v<span class="pl-k">.</span>b)))
  <span class="pl-c1">write</span>(io, v<span class="pl-k">.</span>b)
  <span class="pl-c1">takebuf_array</span>(io)
<span class="pl-k">end</span>
<span class="pl-k">function</span> KyotoCabinet<span class="pl-k">.</span><span class="pl-en">unpack</span>(T<span class="pl-k">::</span><span class="pl-c1">Type{V}</span>, buf<span class="pl-k">::</span><span class="pl-c1">Array{Uint8,1}</span>)
  io <span class="pl-k">=</span> <span class="pl-c1">IOBuffer</span>(buf)
  a <span class="pl-k">=</span> <span class="pl-c1">read</span>(io, Int32)
  l <span class="pl-k">=</span> <span class="pl-c1">read</span>(io, Int32)
  b <span class="pl-k">=</span> <span class="pl-c1">bytestring</span>(<span class="pl-c1">read</span>(io, Uint8, l))
  <span class="pl-c1">V</span>(<span class="pl-c1">int</span>(a), b)
<span class="pl-k">end</span></pre></div>
<p>After that these types can be used as keys/values:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">open</span>(<span class="pl-c1">Db</span><span class="pl-c1">{K, V}</span>(), <span class="pl-s"><span class="pl-pds">"</span>db.kch<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>w+<span class="pl-pds">"</span></span>) <span class="pl-k">do</span> db
  db[<span class="pl-c1">K</span>(<span class="pl-c1">1</span>)] <span class="pl-k">=</span> <span class="pl-c1">V</span>(<span class="pl-c1">1</span>, <span class="pl-s"><span class="pl-pds">"</span>a<span class="pl-pds">"</span></span>)
  db[<span class="pl-c1">K</span>(<span class="pl-c1">1999999999</span>)] <span class="pl-k">=</span> <span class="pl-c1">V</span>(<span class="pl-c1">2</span>, <span class="pl-c1">repeat</span>(<span class="pl-s"><span class="pl-pds">"</span>b<span class="pl-pds">"</span></span>,<span class="pl-c1">100</span>))
<span class="pl-k">end</span>

k <span class="pl-k">=</span> <span class="pl-c1">K</span>(<span class="pl-c1">1</span>)
<span class="pl-c1">println</span>(db[k])</pre></div>
<h2><a id="user-content-kyotocabinet-specific" class="anchor" aria-hidden="true" href="#kyotocabinet-specific"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>KyotoCabinet specific</h2>
<p>There are also <a href="http://fallabs.com/kyotocabinet" rel="nofollow">KyotoCabinet</a> specific methods.</p>
<h3><a id="user-content-database-info" class="anchor" aria-hidden="true" href="#database-info"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Database info</h3>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span> Get the path of the database file</span>
p <span class="pl-k">=</span> <span class="pl-c1">path</span>(db)</pre></div>
<h3><a id="user-content-compare-and-swap" class="anchor" aria-hidden="true" href="#compare-and-swap"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Compare-and-swap</h3>
<p><code>cas(db::Db, key, old, new)</code></p>
<p>Compare-and-swap method. Update the value only if it's in the expected state.
Returns <code>true</code> if value have been updated.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">cas</span>(db, <span class="pl-s"><span class="pl-pds">"</span>k<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>old<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>new<span class="pl-pds">"</span></span>) <span class="pl-c"><span class="pl-c">#</span> update only if db["k"] == "old"</span>
<span class="pl-c1">cas</span>(db, <span class="pl-s"><span class="pl-pds">"</span>k<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>old<span class="pl-pds">"</span></span>, ())    <span class="pl-c"><span class="pl-c">#</span> remove record, only if db["k"] == "old"</span>
<span class="pl-c1">cas</span>(db, <span class="pl-s"><span class="pl-pds">"</span>k<span class="pl-pds">"</span></span>, (), <span class="pl-s"><span class="pl-pds">"</span>new<span class="pl-pds">"</span></span>)    <span class="pl-c"><span class="pl-c">#</span> add record, only if "k" not in db</span></pre></div>
<h3><a id="user-content-bulk-operations" class="anchor" aria-hidden="true" href="#bulk-operations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Bulk operations</h3>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span> Updates records in one operation, atomically if needed.</span>
<span class="pl-c1">bulkset!</span>(db, [<span class="pl-s"><span class="pl-pds">"</span>a<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>1<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>b<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>2<span class="pl-pds">"</span></span>], <span class="pl-c1">true</span>)

<span class="pl-c"><span class="pl-c">#</span> Removes records in one operation, atomically if needed.</span>
<span class="pl-c1">bulkdelete!</span>(db, [<span class="pl-s"><span class="pl-pds">"</span>a<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>b<span class="pl-pds">"</span></span>], <span class="pl-c1">true</span>)</pre></div>
</article></div>