<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-julia-binding-for-kyotocabinet" class="anchor" aria-hidden="true" href="#julia-binding-for-kyotocabinet"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Julia binding for KyotoCabinet</h1>
<p dir="auto"><a href="https://travis-ci.org/tuzzeg/KyotoCabinet.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/eb7558b5b9fd8dc702be94f25a79c4707cdd77223eb2d48cb8ce7f2ae0a565d9/68747470733a2f2f7472617669732d63692e6f72672f74757a7a65672f4b796f746f436162696e65742e6a6c2e737667" alt="Build Status" data-canonical-src="https://travis-ci.org/tuzzeg/KyotoCabinet.jl.svg" style="max-width: 100%;"></a></p>
<p dir="auto">This package provides bindings for <a href="http://fallabs.com/kyotocabinet" rel="nofollow">KyotoCabinet</a> key-value storage.</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Pkg.add(&quot;KyotoCabinet&quot;)"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>KyotoCabinet<span class="pl-pds">"</span></span>)</pre></div>
<h2 dir="auto"><a id="user-content-generic-interface" class="anchor" aria-hidden="true" href="#generic-interface"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Generic interface</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using KyotoCabinet"><pre><span class="pl-k">using</span> KyotoCabinet</pre></div>
<p dir="auto">To open database, use <code>open</code> method:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="db = open(&quot;db.kch&quot;, &quot;r&quot;)
# db::Dict{Array{Uint8,1},Array{Uint8,1}}
close(db)"><pre>db <span class="pl-k">=</span> <span class="pl-c1">open</span>(<span class="pl-s"><span class="pl-pds">"</span>db.kch<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>r<span class="pl-pds">"</span></span>)
<span class="pl-c"><span class="pl-c">#</span> db::Dict{Array{Uint8,1},Array{Uint8,1}}</span>
<span class="pl-c1">close</span>(db)</pre></div>
<p dir="auto">There is also bracketed version:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="open(Db{K,V}(), &quot;db.kch&quot;, &quot;w+&quot;) do db
  # db::Dict{K,V}
  # do stuff...
end"><pre><span class="pl-c1">open</span>(<span class="pl-c1">Db</span><span class="pl-c1">{K,V}</span>(), <span class="pl-s"><span class="pl-pds">"</span>db.kch<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>w+<span class="pl-pds">"</span></span>) <span class="pl-k">do</span> db
  <span class="pl-c"><span class="pl-c">#</span> db::Dict{K,V}</span>
  <span class="pl-c"><span class="pl-c">#</span> do stuff...</span>
<span class="pl-k">end</span></pre></div>
<p dir="auto"><code>Db</code> object implements basic collections and <code>Dict</code> methods.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="open(Db{String,String}(), &quot;db.kch&quot;, &quot;w+&quot;) do db
  # Basic getindex, setindex! methods
  db[&quot;a&quot;] = &quot;1&quot;
  println(db[&quot;a&quot;])

  # Dict methods also implemented:
  # haskey, getkey, get, get!, delete!, pop!
  if (!haskey(db, &quot;x&quot;))
    x = get(db, &quot;x&quot;, &quot;default&quot;)
    y = get!(db, &quot;y&quot;, &quot;set_value_if_non_exists&quot;)
  end
end"><pre><span class="pl-c1">open</span>(<span class="pl-c1">Db</span><span class="pl-c1">{String,String}</span>(), <span class="pl-s"><span class="pl-pds">"</span>db.kch<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>w+<span class="pl-pds">"</span></span>) <span class="pl-k">do</span> db
  <span class="pl-c"><span class="pl-c">#</span> Basic getindex, setindex! methods</span>
  db[<span class="pl-s"><span class="pl-pds">"</span>a<span class="pl-pds">"</span></span>] <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>1<span class="pl-pds">"</span></span>
  <span class="pl-c1">println</span>(db[<span class="pl-s"><span class="pl-pds">"</span>a<span class="pl-pds">"</span></span>])

  <span class="pl-c"><span class="pl-c">#</span> Dict methods also implemented:</span>
  <span class="pl-c"><span class="pl-c">#</span> haskey, getkey, get, get!, delete!, pop!</span>
  <span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-c1">haskey</span>(db, <span class="pl-s"><span class="pl-pds">"</span>x<span class="pl-pds">"</span></span>))
    x <span class="pl-k">=</span> <span class="pl-c1">get</span>(db, <span class="pl-s"><span class="pl-pds">"</span>x<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>default<span class="pl-pds">"</span></span>)
    y <span class="pl-k">=</span> <span class="pl-c1">get!</span>(db, <span class="pl-s"><span class="pl-pds">"</span>y<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>set_value_if_non_exists<span class="pl-pds">"</span></span>)
  <span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>
<p dir="auto">Support iteration over records, keys and values:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="for (k, v) = db
  println(&quot;k=$k v=$v&quot;)
end
for k = keys(db)
  println(&quot;k=$k&quot;)
end"><pre><span class="pl-k">for</span> (k, v) <span class="pl-k">=</span> db
  <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>k=<span class="pl-v">$k</span> v=<span class="pl-v">$v</span><span class="pl-pds">"</span></span>)
<span class="pl-k">end</span>
<span class="pl-k">for</span> k <span class="pl-k">=</span> <span class="pl-c1">keys</span>(db)
  <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>k=<span class="pl-v">$k</span><span class="pl-pds">"</span></span>)
<span class="pl-k">end</span></pre></div>
<h2 dir="auto"><a id="user-content-serializationdeserialization" class="anchor" aria-hidden="true" href="#serializationdeserialization"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Serialization/Deserialization</h2>
<p dir="auto"><a href="http://fallabs.com/kyotocabinet" rel="nofollow">KyotoCabinet</a> treats keys and values as byte arrays.
To make it work with arbitrary types, one needs to define pack/unpack methods.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="immutable K
  x::Int
end

immutable V
  a::Int
  b::String
end

function KyotoCabinet.pack(k::K)
  io = IOBuffer()
  write(io, int32(k.x))
  takebuf_array(io)
end
function KyotoCabinet.unpack(T::Type{K}, buf::Array{Uint8,1})
  io = IOBuffer(buf)
  x = read(io, Int32)
  K(int(x))
end

function KyotoCabinet.pack(v::V)
  io = IOBuffer()
  write(io, int32(v.a))
  write(io, int32(length(v.b)))
  write(io, v.b)
  takebuf_array(io)
end
function KyotoCabinet.unpack(T::Type{V}, buf::Array{Uint8,1})
  io = IOBuffer(buf)
  a = read(io, Int32)
  l = read(io, Int32)
  b = bytestring(read(io, Uint8, l))
  V(int(a), b)
end"><pre>immutable K
  x<span class="pl-k">::</span><span class="pl-c1">Int</span>
<span class="pl-k">end</span>

immutable V
  a<span class="pl-k">::</span><span class="pl-c1">Int</span>
  b<span class="pl-k">::</span><span class="pl-c1">String</span>
<span class="pl-k">end</span>

<span class="pl-k">function</span> KyotoCabinet<span class="pl-k">.</span><span class="pl-en">pack</span>(k<span class="pl-k">::</span><span class="pl-c1">K</span>)
  io <span class="pl-k">=</span> <span class="pl-c1">IOBuffer</span>()
  <span class="pl-c1">write</span>(io, <span class="pl-c1">int32</span>(k<span class="pl-k">.</span>x))
  <span class="pl-c1">takebuf_array</span>(io)
<span class="pl-k">end</span>
<span class="pl-k">function</span> KyotoCabinet<span class="pl-k">.</span><span class="pl-en">unpack</span>(T<span class="pl-k">::</span><span class="pl-c1">Type{K}</span>, buf<span class="pl-k">::</span><span class="pl-c1">Array{Uint8,1}</span>)
  io <span class="pl-k">=</span> <span class="pl-c1">IOBuffer</span>(buf)
  x <span class="pl-k">=</span> <span class="pl-c1">read</span>(io, Int32)
  <span class="pl-c1">K</span>(<span class="pl-c1">int</span>(x))
<span class="pl-k">end</span>

<span class="pl-k">function</span> KyotoCabinet<span class="pl-k">.</span><span class="pl-en">pack</span>(v<span class="pl-k">::</span><span class="pl-c1">V</span>)
  io <span class="pl-k">=</span> <span class="pl-c1">IOBuffer</span>()
  <span class="pl-c1">write</span>(io, <span class="pl-c1">int32</span>(v<span class="pl-k">.</span>a))
  <span class="pl-c1">write</span>(io, <span class="pl-c1">int32</span>(<span class="pl-c1">length</span>(v<span class="pl-k">.</span>b)))
  <span class="pl-c1">write</span>(io, v<span class="pl-k">.</span>b)
  <span class="pl-c1">takebuf_array</span>(io)
<span class="pl-k">end</span>
<span class="pl-k">function</span> KyotoCabinet<span class="pl-k">.</span><span class="pl-en">unpack</span>(T<span class="pl-k">::</span><span class="pl-c1">Type{V}</span>, buf<span class="pl-k">::</span><span class="pl-c1">Array{Uint8,1}</span>)
  io <span class="pl-k">=</span> <span class="pl-c1">IOBuffer</span>(buf)
  a <span class="pl-k">=</span> <span class="pl-c1">read</span>(io, Int32)
  l <span class="pl-k">=</span> <span class="pl-c1">read</span>(io, Int32)
  b <span class="pl-k">=</span> <span class="pl-c1">bytestring</span>(<span class="pl-c1">read</span>(io, Uint8, l))
  <span class="pl-c1">V</span>(<span class="pl-c1">int</span>(a), b)
<span class="pl-k">end</span></pre></div>
<p dir="auto">After that these types can be used as keys/values:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="open(Db{K, V}(), &quot;db.kch&quot;, &quot;w+&quot;) do db
  db[K(1)] = V(1, &quot;a&quot;)
  db[K(1999999999)] = V(2, repeat(&quot;b&quot;,100))
end

k = K(1)
println(db[k])"><pre><span class="pl-c1">open</span>(<span class="pl-c1">Db</span><span class="pl-c1">{K, V}</span>(), <span class="pl-s"><span class="pl-pds">"</span>db.kch<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>w+<span class="pl-pds">"</span></span>) <span class="pl-k">do</span> db
  db[<span class="pl-c1">K</span>(<span class="pl-c1">1</span>)] <span class="pl-k">=</span> <span class="pl-c1">V</span>(<span class="pl-c1">1</span>, <span class="pl-s"><span class="pl-pds">"</span>a<span class="pl-pds">"</span></span>)
  db[<span class="pl-c1">K</span>(<span class="pl-c1">1999999999</span>)] <span class="pl-k">=</span> <span class="pl-c1">V</span>(<span class="pl-c1">2</span>, <span class="pl-c1">repeat</span>(<span class="pl-s"><span class="pl-pds">"</span>b<span class="pl-pds">"</span></span>,<span class="pl-c1">100</span>))
<span class="pl-k">end</span>

k <span class="pl-k">=</span> <span class="pl-c1">K</span>(<span class="pl-c1">1</span>)
<span class="pl-c1">println</span>(db[k])</pre></div>
<h2 dir="auto"><a id="user-content-kyotocabinet-specific" class="anchor" aria-hidden="true" href="#kyotocabinet-specific"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>KyotoCabinet specific</h2>
<p dir="auto">There are also <a href="http://fallabs.com/kyotocabinet" rel="nofollow">KyotoCabinet</a> specific methods.</p>
<h3 dir="auto"><a id="user-content-database-info" class="anchor" aria-hidden="true" href="#database-info"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Database info</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# Get the path of the database file
p = path(db)"><pre><span class="pl-c"><span class="pl-c">#</span> Get the path of the database file</span>
p <span class="pl-k">=</span> <span class="pl-c1">path</span>(db)</pre></div>
<h3 dir="auto"><a id="user-content-compare-and-swap" class="anchor" aria-hidden="true" href="#compare-and-swap"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Compare-and-swap</h3>
<p dir="auto"><code>cas(db::Db, key, old, new)</code></p>
<p dir="auto">Compare-and-swap method. Update the value only if it's in the expected state.
Returns <code>true</code> if value have been updated.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="cas(db, &quot;k&quot;, &quot;old&quot;, &quot;new&quot;) # update only if db[&quot;k&quot;] == &quot;old&quot;
cas(db, &quot;k&quot;, &quot;old&quot;, ())    # remove record, only if db[&quot;k&quot;] == &quot;old&quot;
cas(db, &quot;k&quot;, (), &quot;new&quot;)    # add record, only if &quot;k&quot; not in db"><pre><span class="pl-c1">cas</span>(db, <span class="pl-s"><span class="pl-pds">"</span>k<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>old<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>new<span class="pl-pds">"</span></span>) <span class="pl-c"><span class="pl-c">#</span> update only if db["k"] == "old"</span>
<span class="pl-c1">cas</span>(db, <span class="pl-s"><span class="pl-pds">"</span>k<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>old<span class="pl-pds">"</span></span>, ())    <span class="pl-c"><span class="pl-c">#</span> remove record, only if db["k"] == "old"</span>
<span class="pl-c1">cas</span>(db, <span class="pl-s"><span class="pl-pds">"</span>k<span class="pl-pds">"</span></span>, (), <span class="pl-s"><span class="pl-pds">"</span>new<span class="pl-pds">"</span></span>)    <span class="pl-c"><span class="pl-c">#</span> add record, only if "k" not in db</span></pre></div>
<h3 dir="auto"><a id="user-content-bulk-operations" class="anchor" aria-hidden="true" href="#bulk-operations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Bulk operations</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# Updates records in one operation, atomically if needed.
bulkset!(db, [&quot;a&quot; =&gt; &quot;1&quot;, &quot;b&quot; =&gt; &quot;2&quot;], true)

# Removes records in one operation, atomically if needed.
bulkdelete!(db, [&quot;a&quot;, &quot;b&quot;], true)"><pre><span class="pl-c"><span class="pl-c">#</span> Updates records in one operation, atomically if needed.</span>
<span class="pl-c1">bulkset!</span>(db, [<span class="pl-s"><span class="pl-pds">"</span>a<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>1<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>b<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>2<span class="pl-pds">"</span></span>], <span class="pl-c1">true</span>)

<span class="pl-c"><span class="pl-c">#</span> Removes records in one operation, atomically if needed.</span>
<span class="pl-c1">bulkdelete!</span>(db, [<span class="pl-s"><span class="pl-pds">"</span>a<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>b<span class="pl-pds">"</span></span>], <span class="pl-c1">true</span>)</pre></div>
</article></div>