<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-invariants" class="anchor" aria-hidden="true" href="#invariants"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Invariants</h1>
<p dir="auto"><a href="https://lorenzoh.github.io/Invariants.jl/dev/documents/README.md" rel="nofollow">Documentation</a></p>
<p dir="auto">A Julia package for writing invariants for</p>
<ul dir="auto">
<li>providing helpful, detailed error messages to package users when they misuse the API</li>
<li>creating interface test suites (as described <a href="https://invenia.github.io/blog/2020/11/06/interfacetesting/" rel="nofollow">here</a>)</li>
</ul>
<p dir="auto">Designing the package, I focused on:</p>
<ul dir="auto">
<li>reusability: invariants are easy to define and reuse, reducing boilerplate</li>
<li>composability: invariants can be composed to create more complex invariants</li>
<li>rich error messages: to be helpful, rich error messages should be easy to create</li>
</ul>
<h2 dir="auto"><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Invariants: check, invariant, md

inv = invariant(&quot;Is negative&quot;) do n
    n &lt; 0 ? nothing : md(&quot;`n` is not negative!&quot;)
end

check(inv, 1)
check(inv, -1)"><pre><span class="pl-k">using</span> Invariants<span class="pl-k">:</span> check, invariant, md

inv <span class="pl-k">=</span> <span class="pl-c1">invariant</span>(<span class="pl-s"><span class="pl-pds">"</span>Is negative<span class="pl-pds">"</span></span>) <span class="pl-k">do</span> n
    n <span class="pl-k">&lt;</span> <span class="pl-c1">0</span> <span class="pl-k">?</span> <span class="pl-c1">nothing</span> <span class="pl-k">:</span> <span class="pl-c1">md</span>(<span class="pl-s"><span class="pl-pds">"</span>`n` is not negative!<span class="pl-pds">"</span></span>)
<span class="pl-k">end</span>

<span class="pl-c1">check</span>(inv, <span class="pl-c1">1</span>)
<span class="pl-c1">check</span>(inv, <span class="pl-k">-</span><span class="pl-c1">1</span>)</pre></div>
</article></div>