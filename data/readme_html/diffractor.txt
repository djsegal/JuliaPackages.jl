<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-diffractor---next-generation-ad" class="anchor" aria-hidden="true" href="#diffractor---next-generation-ad"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Diffractor - Next Generation AD</h1>
<p dir="auto"><a href="https://github.com/JuliaDiff/Diffractor.jl/actions?query=workflow:CI"><img src="https://github.com/JuliaDiff/Diffractor.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/JuliaDiff/Diffractor.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/d31fd980212325651fe18950c0922565bde31987c52be5d56906ac5176d20ae8/68747470733a2f2f636f6465636f762e696f2f67682f4a756c6961446966662f44696666726163746f722e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/JuliaDiff/Diffractor.jl/branch/main/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto"><strong>Docs:</strong>
<a href="https://juliadiff.org/Diffractor.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/4fbf1a0e9af715d83da2c6cb134932756a9f0a25d715cecf4c83b1437b7996eb/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6d61737465722d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-master-blue.svg" style="max-width: 100%;"></a></p>
<h1 dir="auto"><a id="user-content-general-overview" class="anchor" aria-hidden="true" href="#general-overview"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>General Overview</h1>
<p dir="auto">Diffractor is an experimental next-generation, compiler-based AD system for Julia.
Its public interface should be familiar to users, essentially matching Zygote.</p>
<p dir="auto">Design goals:</p>
<ul dir="auto">
<li>Ultra high performance for both scalar and array code</li>
<li>Efficient higher order derivatives</li>
<li>Reasonable compile times</li>
<li>High flexibility (like Zygote)</li>
<li>Support for forward/reverse/mixed modes</li>
</ul>
<p dir="auto">This is achieved through a combination of innovations:</p>
<ul dir="auto">
<li>A new lowest level interface (∂⃖ the "AD optic functor" or "diffractor"), more suited to higher order AD</li>
<li>New capabilities in Base Julia (Opaque closures, inference plugins)</li>
<li>Better integration with ChainRules.jl</li>
</ul>
<h1 dir="auto"><a id="user-content-current-status" class="anchor" aria-hidden="true" href="#current-status"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Current Status</h1>
<p dir="auto">The plan is to implement this in two stages:</p>
<ol dir="auto">
<li>Generated function based transforms, using the ChainRules, the new low level interface and Opaque closures</li>
<li>Adding inference plugins</li>
</ol>
<p dir="auto">Currently the implementation of Phase 1 is essentially complete, though mostly untested.
Experimentation is welcome, though it is probably not ready yet to be a production
AD system. The compiler parts of phase 1 are a bit "quick and dirty" as the main
point of phase 1 is to prove out that the overall scheme works. As a result, it
has known suboptimalities. I do not intend to do much work on these, since they
will be obsoleted by phase 2 anyway.</p>
<p dir="auto">A few features are still missing, e.g. chunking and I intend to do some more work
on user friendly interfaces, but it should overall be useable as an AD system.</p>
</article></div>