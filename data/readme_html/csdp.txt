<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-coin-or-semidefinite-programming-interface-csdpjl" class="anchor" aria-hidden="true" href="#coin-or-semidefinite-programming-interface-csdpjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>COIN-OR SemiDefinite Programming Interface (CSDP.jl)</h1>
<p><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/cd8e4605c574a186f0227b09e654d1b12c1d4fb2/68747470733a2f2f7777772e636f696e2d6f722e6f72672f776f726470726573732f77702d636f6e74656e742f75706c6f6164732f323031342f30382f434f494e4f522e706e67"><img src="https://camo.githubusercontent.com/cd8e4605c574a186f0227b09e654d1b12c1d4fb2/68747470733a2f2f7777772e636f696e2d6f722e6f72672f776f726470726573732f77702d636f6e74656e742f75706c6f6164732f323031342f30382f434f494e4f522e706e67" alt="" data-canonical-src="https://www.coin-or.org/wordpress/wp-content/uploads/2014/08/COINOR.png" style="max-width:100%;"></a></p>
<p><code>CSDP.jl</code> is an interface to the <strong><a href="https://projects.coin-or.org/Csdp" rel="nofollow">COIN-OR SemiDefinite
Programming</a></strong> solver. It provides a complete
interface to the low-level C API, as well as an implementation of the
solver-independent <code>MathProgBase</code> and <code>MathOptInterface</code> API's.</p>
<p><em>Note: This wrapper is maintained by the JuliaOpt community and is not a COIN-OR
project.</em></p>
<table>
<thead>
<tr>
<th align="center"><strong>Build Status</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><a href="https://travis-ci.org/JuliaOpt/CSDP.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/52061a9efd67b054b6a7470e24a83c22d3e4c2f4/68747470733a2f2f7472617669732d63692e6f72672f4a756c69614f70742f435344502e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaOpt/CSDP.jl.svg?branch=master" style="max-width:100%;"></a> <a href="https://ci.appveyor.com/project/JuliaOpt/csdp-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/d15e4221aac3c9f61d4a350e79b4281d8c0f91f3/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f76386e623079623761686e396e376f6c3f7376673d74727565" alt="Build Status" data-canonical-src="https://ci.appveyor.com/api/projects/status/v8nb0yb7ahn9n7ol?svg=true" style="max-width:100%;"></a></td>
</tr>
<tr>
<td align="center"><a href="https://coveralls.io/github/JuliaOpt/CSDP.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/dd9812aa8fd360432a06e6c750af6777fe981751/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f4a756c69614f70742f435344502e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coveralls branch" data-canonical-src="https://coveralls.io/repos/github/JuliaOpt/CSDP.jl/badge.svg?branch=master" style="max-width:100%;"></a> <a href="http://codecov.io/github/JuliaOpt/CSDP.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/06d25566c0d316fcd7c3eef82a77ae8e5a1a2593/687474703a2f2f636f6465636f762e696f2f6769746875622f4a756c69614f70742f435344502e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="Codecov branch" data-canonical-src="http://codecov.io/github/JuliaOpt/CSDP.jl/coverage.svg?branch=master" style="max-width:100%;"></a></td>
</tr>
</tbody>
</table>
<p>The original algorithm is described by
B. Borchers.
<em>CSDP, A C Library for Semidefinite Programming</em>.
Optimization Methods and Software 11(1):613-623, 1999.
DOI <a href="http://dx.doi.org/10.1080/10556789908805765" rel="nofollow">10.1080/10556789908805765</a>.
<a href="http://euler.nmt.edu/~brian/csdppaper.pdf" rel="nofollow">Preprint</a>.</p>
<h2><a id="user-content-installing-csdp" class="anchor" aria-hidden="true" href="#installing-csdp"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installing CSDP</h2>
<p>You can either use the system LAPACK and BLAS libaries or the libraries shipped with Julia.
First, make sure that you have a compiler available, e.g. on Ubuntu do</p>
<pre><code>$ sudo apt-get install build-essential
</code></pre>
<p>To use the libraries shipped by Julia, simply do</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">$</span> CSDP_USE_JULIA_LAPACK<span class="pl-k">=</span><span class="pl-c1">true</span> julia <span class="pl-k">-</span>e <span class="pl-s"><span class="pl-pds">'</span>import Pkg; Pkg.add("CSDP"); Pkg.build("CSDP")<span class="pl-pds">'</span></span></pre></div>
<p>To use the system libaries, first make sure it is installed, e.g. on Ubuntu do</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">$</span> sudo apt<span class="pl-k">-</span>get install liblapack<span class="pl-k">-</span>dev libopenblas<span class="pl-k">-</span>dev</pre></div>
<p>and then do</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">$</span> CSDP_USE_JULIA_LAPACK<span class="pl-k">=</span><span class="pl-c1">false</span> julia <span class="pl-k">-</span>e <span class="pl-s"><span class="pl-pds">'</span>import Pkg; Pkg.add("CSDP"); Pkg.build("CSDP")<span class="pl-pds">'</span></span></pre></div>
<p>Note that if the environment variable <code>CSDP_USE_JULIA_LAPACK</code> is not set, it defaults
to using the system libraries if available and the Julia libraries otherwise.</p>
<p>To use CSDP with JuMP v0.19 and later, do</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> JuMP, CSDP
model <span class="pl-k">=</span> <span class="pl-c1">Model</span>(<span class="pl-c1">with_optimizer</span>(CSDP<span class="pl-k">.</span>Optimizer))</pre></div>
<p>and with JuMP v0.18 and earlier, do</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> JuMP, CSDP
model <span class="pl-k">=</span> <span class="pl-c1">Model</span>(solver<span class="pl-k">=</span><span class="pl-c1">CSDPSolver</span>())</pre></div>
<h2><a id="user-content-csdp-problem-representation" class="anchor" aria-hidden="true" href="#csdp-problem-representation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>CSDP problem representation</h2>
<p>The primal is represented internally by CSDP as follows:</p>
<pre><code>max ⟨C, X⟩
      A(X) = a
         X ⪰ 0
</code></pre>
<p>where <code>A(X) = [⟨A_1, X⟩, ..., ⟨A_m, X⟩]</code>.
The corresponding dual is:</p>
<pre><code>min ⟨a, y⟩
     A'(y) - C = Z
             Z ⪰ 0
</code></pre>
<p>where <code>A'(y) = y_1A_1 + ... + y_mA_m</code></p>
<h2><a id="user-content-termination-criteria" class="anchor" aria-hidden="true" href="#termination-criteria"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Termination criteria</h2>
<p>CSDP will terminate successfully (or partially) in the following cases:</p>
<ul>
<li>If CSDP finds <code>y</code> and <code>Z ⪰ 0</code> such that <code>-⟨a, y⟩ / ||A'(y) - Z||_F &gt; pinftol</code>, it returns <code>1</code> with <code>y</code> such that <code>⟨a, y⟩ = -1</code>.</li>
<li>If CSDP finds <code>X ⪰ 0</code> such that <code>⟨C, X⟩ / ||A(X)||_2 &gt; dinftol</code>, it returns <code>2</code> with <code>X</code> such that <code>⟨C, X⟩ = 1</code>.</li>
<li>If CSDP finds <code>X, Z ⪰ 0</code> such that the following 3 tolerances are satisfied:
<ul>
<li>primal feasibility tolerance: <code>||A(x) - a||_2 / (1 + ||a||_2) &lt; axtol</code></li>
<li>dual feasibility tolerance: <code>||A'(y) - C - Z||_F / (1 + ||C||_F) &lt; atytol</code></li>
<li>relative duality gap tolerance: <code>gap / (1 + |⟨a, y⟩| + |⟨C, X⟩|) &lt; objtol</code>
<ul>
<li>objective duality gap: If <code>usexygap</code> is <code>0</code>, <code>gap = ⟨a, y⟩ - ⟨C, X⟩</code></li>
<li>XY duality gap: If <code>usexygap</code> is <code>1</code>, <code>gap = ⟨Z, X⟩</code>
then it returns <code>0</code>.</li>
</ul>
</li>
</ul>
</li>
<li>If CSDP finds <code>X, Z ⪰ 0</code> such that the following 3 tolerances are satisfied with <code>1000*axtol</code>, <code>1000*atytol</code> and <code>1000*objtol</code> but at least one of them is not satisfied with <code>axtol</code>, <code>atytol</code> and <code>objtol</code> and cannot make progress then it returns <code>3</code>.</li>
</ul>
<p><strong>Remark:</strong> In theory, for feasible primal and dual solutions, <code>⟨a, y⟩ - ⟨C, X⟩ = ⟨Z, X⟩</code> so the objective and XY duality gap should be equivalent. However, in practice, there are sometimes solution which satisfy primal and dual feasibility tolerances but have objective duality gap which are not close to XY duality gap. In some cases, the objective duality gap may even become negative (hence the <code>tweakgap</code> option). This is the reason <code>usexygap</code> is <code>1</code> by default.</p>
<p><strong>Remark:</strong> CSDP considers that <code>X ⪰ 0</code> (resp. <code>Z ⪰ 0</code>) is satisfied when the Cholesky factorizations can be computed.
In practice, this is somewhat more conservative than simply requiring all eigenvalues to be nonnegative.</p>
<h2><a id="user-content-status" class="anchor" aria-hidden="true" href="#status"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Status</h2>
<p>The table below shows how the different CSDP status are converted to <a href="https://github.com/JuliaOpt/MathProgBase.jl">MathProgBase</a> status.</p>
<table>
<thead>
<tr>
<th>CSDP code</th>
<th>State</th>
<th>Description</th>
<th>MathProgBase status</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>0</code></td>
<td>Success</td>
<td>SDP solved</td>
<td>Optimal</td>
</tr>
<tr>
<td><code>1</code></td>
<td>Success</td>
<td>The problem is primal infeasible, and we have a certificate</td>
<td>Infeasible</td>
</tr>
<tr>
<td><code>2</code></td>
<td>Success</td>
<td>The problem is dual infeasible, and we have a certificate</td>
<td>Unbounded</td>
</tr>
<tr>
<td><code>3</code></td>
<td>Partial Success</td>
<td>A solution has been found, but full accuracy was not achieved</td>
<td>Suboptimal</td>
</tr>
<tr>
<td><code>4</code></td>
<td>Failure</td>
<td>Maximum iterations reached</td>
<td>UserLimit</td>
</tr>
<tr>
<td><code>5</code></td>
<td>Failure</td>
<td>Stuck at edge of primal feasibility</td>
<td>Error</td>
</tr>
<tr>
<td><code>6</code></td>
<td>Failure</td>
<td>Stuck at edge of dual infeasibility</td>
<td>Error</td>
</tr>
<tr>
<td><code>7</code></td>
<td>Failure</td>
<td>Lack of progress</td>
<td>Error</td>
</tr>
<tr>
<td><code>8</code></td>
<td>Failure</td>
<td><code>X</code>, <code>Z</code>, or <code>O</code> was singular</td>
<td>Error</td>
</tr>
<tr>
<td><code>9</code></td>
<td>Failure</td>
<td>Detected <code>NaN</code> or <code>Inf</code> values</td>
<td>Error</td>
</tr>
</tbody>
</table>
<p>If the <code>printlevel</code> option is at least <code>1</code>, the following will be printed:</p>
<ul>
<li>If the return code is <code>1</code>, CSDP will print <code>⟨a, y⟩</code> and <code>||A'(y) - Z||_F</code></li>
<li>if the return code is <code>2</code>, CSDP will print <code>⟨C, X⟩</code> and <code>||A(X)||_F</code></li>
<li>otherwise, CSDP will print
<ul>
<li>the primal/dual objective value,</li>
<li>the relative primal/dual infeasibility,</li>
<li>the objective duality gap <code>⟨a, y⟩ - ⟨C, X⟩</code> and objective relative duality  gap <code>(⟨a, y⟩ - ⟨C, X⟩) / (1 + |⟨a, y⟩| + |⟨C, X⟩|)</code>,</li>
<li>the XY duality gap <code>⟨Z, X⟩</code> and XY relative duality gap <code>⟨Z, X⟩ / (1 + |⟨a, y⟩| + |⟨C, X⟩|)</code></li>
<li>and the DIMACS error measures.</li>
</ul>
</li>
</ul>
<h2><a id="user-content-options" class="anchor" aria-hidden="true" href="#options"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Options</h2>
<p>The CSDP options are listed in the table below. Their value can be specified in the constructor of the CSDP solver, e.g. <code>CSDPSolver(axtol=1e-7, printlevel=0)</code>.</p>
<table>
<thead>
<tr>
<th>Name</th>
<th></th>
<th>Default Value</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>axtol</code></td>
<td>Tolerance for primal feasibility</td>
<td><code>1.0e-8</code></td>
</tr>
<tr>
<td><code>atytol</code></td>
<td>Tolerance for dual feasibility</td>
<td><code>1.0e-8</code></td>
</tr>
<tr>
<td><code>objtol</code></td>
<td>Tolerance for relative duality gap</td>
<td><code>1.0e-8</code></td>
</tr>
<tr>
<td><code>pinftol</code></td>
<td>Tolerance for determining primal infeasibility</td>
<td><code>1.0e8</code></td>
</tr>
<tr>
<td><code>dinftol</code></td>
<td>Tolerance for determining dual infeasibility</td>
<td><code>1.0e8</code></td>
</tr>
<tr>
<td><code>maxiter</code></td>
<td>Limit for the total number of iterations</td>
<td><code>100</code></td>
</tr>
<tr>
<td><code>minstepfrac</code></td>
<td>The <code>minstepfrac</code> and <code>maxstepfrac</code> parameters determine how close to the edge of the feasible region CSDP will step</td>
<td><code>0.90</code></td>
</tr>
<tr>
<td><code>maxstepfrac</code></td>
<td>The <code>minstepfrac</code> and <code>maxstepfrac</code> parameters determine how close to the edge of the feasible region CSDP will step</td>
<td><code>0.97</code></td>
</tr>
<tr>
<td><code>minstepp</code></td>
<td>If the primal step is shorter than <code>minstepp</code> then CSDP declares a line search failure</td>
<td><code>1.0e-8</code></td>
</tr>
<tr>
<td><code>minstepd</code></td>
<td>If the dual step is shorter than <code>minstepd</code> then CSDP declares a line search failure</td>
<td><code>1.0e-8</code></td>
</tr>
<tr>
<td><code>usexzgap</code></td>
<td>If <code>usexzgap</code> is <code>0</code> then CSDP will use the objective duality gap <code>d - p</code> instead of the XY duality gap <code>⟨Z, X⟩</code></td>
<td><code>1</code></td>
</tr>
<tr>
<td><code>tweakgap</code></td>
<td>If <code>tweakgap</code> is set to <code>1</code>, and <code>usexzgap</code> is set to <code>0</code>, then CSDP will attempt to "fix" negative duality gaps</td>
<td><code>0</code></td>
</tr>
<tr>
<td><code>affine</code></td>
<td>If <code>affine</code> is set to <code>1</code>, then CSDP will take only primal-dual affine steps and not make use of the barrier term. This can be useful for some problems that do not have feasible solutions that are strictly in the interior of the cone of semidefinite matrices</td>
<td><code>0</code></td>
</tr>
<tr>
<td><code>perturbobj</code></td>
<td>The <code>perturbobj</code> parameter determines whether the objective function will be perturbed to help deal with problems that have unbounded optimal solution sets. If <code>perturbobj</code> is <code>0</code>, then the objective will not be perturbed. If <code>perturbobj</code> is <code>1</code>, then the objective function will be perturbed by a default amount. Larger values of <code>perturbobj</code> (e.g. <code>100</code>) increase the size of the perturbation. This can be helpful in solving some difficult problems.</td>
<td><code>1</code></td>
</tr>
<tr>
<td><code>fastmode</code></td>
<td>The <code>fastmode</code> parameter determines whether or not CSDP will skip certain time consuming operations that slightly improve the accuracy of the solutions. If <code>fastmode</code> is set to <code>1</code>, then CSDP may be somewhat faster, but also somewhat less accurate</td>
<td><code>0</code></td>
</tr>
<tr>
<td><code>printlevel</code></td>
<td>The <code>printlevel</code> parameter determines how much debugging information is output. Use a <code>printlevel</code> of <code>0</code> for no output and a <code>printlevel</code> of <code>1</code> for normal output. Higher values of printlevel will generate more debugging output</td>
<td><code>1</code></td>
</tr>
</tbody>
</table>
<h2><a id="user-content-getting-the-csdp-library" class="anchor" aria-hidden="true" href="#getting-the-csdp-library"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Getting the CSDP Library</h2>
<p>The original make-file build system only provides a static library.
The quite old (September 2010) <a href="https://github.com/BenjaminKern/pycsdp"><code>pycsdp</code></a> interface by <a href="http://ifatwww.et.uni-magdeburg.de/syst/about_us/people/kern/index.shtml" rel="nofollow">Benjamin Kern</a> circumvents the problem by writing some C++ <a href="https://github.com/BenjaminKern/pycsdp/tree/master/CXX">code</a> to which the static library is linked.
The Sage <a href="https://github.com/mghasemi/pycsdp">module</a> by @mghasemi is a Cython interface; I don't know how the libcsdp is installed or whether they assume that it is already available on the system.</p>
<p>That is why this package tries to parse the makefile and compiles it itself on Unix systems (so <code>gcc</code> is needed).</p>

<p>For Windows, a pre-compiled DLL is downloaded (unless you configure the <code>build.jl</code> differently).</p>

<h2><a id="user-content-next-steps-todos" class="anchor" aria-hidden="true" href="#next-steps-todos"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Next Steps (TODOs)</h2>
<ul class="contains-task-list">
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> Maybe port <code>libcsdp</code> to use 64bit Lapack, aka replace “some <code>int</code>s” by <code>long int</code> (the variables used in a Lapack call).  Started in brach <code>julias_openblas64</code></li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> Maybe think about an own array type to circumvent the 1-index problems in <code>libcsdp</code>.</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> Map Julia's sparse arrays to <code>sparsematrixblock</code>.</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> Upload <code>libcsdp.dll</code> for Windows via Appveyor deployment as described at
<a href="https://www.youtube.com/watch?v=XKdKdfHB2KM&amp;index=12&amp;list=PLP8iPy9hna6SQPwZUDtAM59-wPzCPyD_S" rel="nofollow">JuliaCon</a>.
Currently we use a <a href="https://github.com/EQt/winlapack">separate repository</a>.</li>
</ul>
</article></div>