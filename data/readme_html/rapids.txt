<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p dir="auto"><a href="https://docs.juliahub.com/RAPIDS/hxbio/0.2.0/" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/bcgov/repomountie/blob/master/doc/lifecycle-badges.md"><img src="https://camo.githubusercontent.com/8492489292e21331da4d87c84c9145fb6d25a3ff65309c5e6479eb9d34ef5cc8/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6966656379636c652d4d61747572696e672d303037454336" alt="Lifecycle:Maturing" data-canonical-src="https://img.shields.io/badge/Lifecycle-Maturing-007EC6" style="max-width: 100%;"></a>
<a href="https://github.com/tylerjthomas9/RAPIDS.jl/actions/workflows/CI.yml"><img src="https://github.com/tylerjthomas9/ScrapeSEC.jl/actions/workflows/ci.yml/badge.svg" alt="CI" style="max-width: 100%;"></a>
<a href="https://github.com/invenia/BlueStyle"><img src="https://camo.githubusercontent.com/c18fbaa52d94d16b90b19701fc90d289b8a5bb920c74c79bab200b14e75420a4/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c75652d3434393564312e737667" alt="Code Style: Blue" data-canonical-src="https://img.shields.io/badge/code%20style-blue-4495d1.svg" style="max-width: 100%;"></a></p>
<p dir="auto"><g-emoji class="g-emoji" alias="warning" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/26a0.png">⚠️</g-emoji> RAPIDS.jl is only supported on Julia 1.8.5+. For previous Julia versions, you have to manually upgrade to libraries from GCC 12.</p>
<h1 dir="auto"><a id="user-content-rapidsjl" class="anchor" aria-hidden="true" href="#rapidsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>RAPIDS.jl</h1>
<p dir="auto">Unofficial Julia wrapper for the <a href="https://rapids.ai/index.html" rel="nofollow">RAPIDS.ai</a> ecosystem.</p>
<p dir="auto">The goal of this library is to provide a simple method for accessing the GPU accelerated models withing RAPIDS from Julia, and integrating the models into MLJ. This library relies on <a href="https://github.com/cjdoris/PythonCall.jl">PythonCall.jl</a> and <a href="https://github.com/cjdoris/CondaPkg.jl">CondaPkg.jl</a> for efficient installations of the Python dependencies.</p>
<p dir="auto">This wrapper could be broken up into several libraries (<code>cuDF</code>, <code>cuML</code>, <code>cuGraph</code>, <code>cuSignal</code>, <code>cuSpatial</code>), but there would be significant overlap between these libraries. Large dependencies such as <code>cudatoolkit</code> would be repeated.</p>
<p dir="auto">Long term, directly wrapping <code>libcudf</code>, <code>libcuml</code>... would greatly improve this library, but I don't have time to tackle that at this moment.</p>
<h1 dir="auto"><a id="user-content-cudagpu-requirements" class="anchor" aria-hidden="true" href="#cudagpu-requirements"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>CUDA/GPU requirements</h1>
<p dir="auto">More information is available <a href="https://docs.rapids.ai/install" rel="nofollow">here</a>.</p>
<ul dir="auto">
<li>CUDA 11.2+</li>
<li>NVIDIA driver 460.27.03+</li>
<li>Pascal architecture or better (Compute Capability &gt;=6.0)</li>
<li>Ubuntu 20.04/22.04 or CentOS 7 / Rocky Linux 8 with gcc/++ 9.0+</li>
</ul>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">From the Julia General Registry:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; ]  # enters the pkg interface
pkg&gt; add RAPIDS"><pre>julia<span class="pl-k">&gt;</span> ]  <span class="pl-c"><span class="pl-c">#</span> enters the pkg interface</span>
pkg<span class="pl-k">&gt;</span> add RAPIDS</pre></div>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using Pkg; Pkg.add(&quot;RAPIDS&quot;)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Pkg; Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>RAPIDS<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">From source:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; ]add https://github.com/tylerjthomas9/RAPIDS.jl"><pre>julia<span class="pl-k">&gt;</span> ]add https<span class="pl-k">:</span><span class="pl-k">//</span>github<span class="pl-k">.</span>com<span class="pl-k">/</span>tylerjthomas9<span class="pl-k">/</span>RAPIDS<span class="pl-k">.</span>jl</pre></div>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using Pkg; Pkg.add(url=&quot;https://github.com/tylerjthomas9/RAPIDS.jl&quot;)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Pkg; Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(url<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>https://github.com/tylerjthomas9/RAPIDS.jl<span class="pl-pds">"</span></span>)</pre></div>
<h2 dir="auto"><a id="user-content-python-api" class="anchor" aria-hidden="true" href="#python-api"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Python API</h2>
<p dir="auto">You can access the following python libraries with their standard syntax:</p>
<ul dir="auto">
<li><code>cupy</code></li>
<li><code>cudf</code></li>
<li><code>cuml</code></li>
<li><code>cugraph</code></li>
<li><code>cusignal</code></li>
<li><code>cuspatial</code></li>
<li><code>cuxfilter</code></li>
<li><code>dask</code></li>
<li><code>dask_cuda</code></li>
<li><code>dask_cudf</code></li>
<li><code>numpy</code></li>
<li><code>pickle</code></li>
</ul>
<p dir="auto">Here is an example of using <code>LogisticRegression</code>, <code>make_classification</code> via the Python API.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using RAPIDS
const make_classification = cuml.datasets.classification.make_classification

X_py, y_py = make_classification(n_samples=200, n_features=4,
                           n_informative=2, n_classes=2)
lr = cuml.LogisticRegression(max_iter=100)
lr.fit(X_py, y_py)
preds = lr.predict(X_py)

print(lr.coef_)"><pre><span class="pl-k">using</span> RAPIDS
<span class="pl-k">const</span> make_classification <span class="pl-k">=</span> cuml<span class="pl-k">.</span>datasets<span class="pl-k">.</span>classification<span class="pl-k">.</span>make_classification

X_py, y_py <span class="pl-k">=</span> <span class="pl-c1">make_classification</span>(n_samples<span class="pl-k">=</span><span class="pl-c1">200</span>, n_features<span class="pl-k">=</span><span class="pl-c1">4</span>,
                           n_informative<span class="pl-k">=</span><span class="pl-c1">2</span>, n_classes<span class="pl-k">=</span><span class="pl-c1">2</span>)
lr <span class="pl-k">=</span> cuml<span class="pl-k">.</span><span class="pl-c1">LogisticRegression</span>(max_iter<span class="pl-k">=</span><span class="pl-c1">100</span>)
lr<span class="pl-k">.</span><span class="pl-c1">fit</span>(X_py, y_py)
preds <span class="pl-k">=</span> lr<span class="pl-k">.</span><span class="pl-c1">predict</span>(X_py)

<span class="pl-c1">print</span>(lr<span class="pl-k">.</span>coef_)</pre></div>
<h2 dir="auto"><a id="user-content-mlj-interface" class="anchor" aria-hidden="true" href="#mlj-interface"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>MLJ Interface</h2>
<p dir="auto">A MLJ interface is also available for supported models. The model hyperparameters are the same as described in the <a href="https://docs.rapids.ai/api/cuml/stable/api.html" rel="nofollow">cuML docs</a>. The only difference is that the models will always input/output numpy arrays, which will be converted back to Julia arrays (<code>output_type="input"</code>).</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using MLJBase
using RAPIDS.CuML
const make_classification = cuml.datasets.classification.make_classification

X_py, y_py = make_classification(n_samples=200, n_features=4,
                           n_informative=2, n_classes=2)
X = RAPIDS.pyconvert(Matrix{Float32}, X_py.get())
y = RAPIDS.pyconvert(Vector{Float32}, y_py.get().flatten())

lr = LogisticRegression(max_iter=100)
mach = machine(lr, X, y)
fit!(mach)
preds = predict(mach, X)

print(mach.fitresult.coef_)"><pre><span class="pl-k">using</span> MLJBase
<span class="pl-k">using</span> RAPIDS<span class="pl-k">.</span>CuML
<span class="pl-k">const</span> make_classification <span class="pl-k">=</span> cuml<span class="pl-k">.</span>datasets<span class="pl-k">.</span>classification<span class="pl-k">.</span>make_classification

X_py, y_py <span class="pl-k">=</span> <span class="pl-c1">make_classification</span>(n_samples<span class="pl-k">=</span><span class="pl-c1">200</span>, n_features<span class="pl-k">=</span><span class="pl-c1">4</span>,
                           n_informative<span class="pl-k">=</span><span class="pl-c1">2</span>, n_classes<span class="pl-k">=</span><span class="pl-c1">2</span>)
X <span class="pl-k">=</span> RAPIDS<span class="pl-k">.</span><span class="pl-c1">pyconvert</span>(Matrix{Float32}, X_py<span class="pl-k">.</span><span class="pl-c1">get</span>())
y <span class="pl-k">=</span> RAPIDS<span class="pl-k">.</span><span class="pl-c1">pyconvert</span>(Vector{Float32}, y_py<span class="pl-k">.</span><span class="pl-c1">get</span>()<span class="pl-k">.</span><span class="pl-c1">flatten</span>())

lr <span class="pl-k">=</span> <span class="pl-c1">LogisticRegression</span>(max_iter<span class="pl-k">=</span><span class="pl-c1">100</span>)
mach <span class="pl-k">=</span> <span class="pl-c1">machine</span>(lr, X, y)
<span class="pl-c1">fit!</span>(mach)
preds <span class="pl-k">=</span> <span class="pl-c1">predict</span>(mach, X)

<span class="pl-c1">print</span>(mach<span class="pl-k">.</span>fitresult<span class="pl-k">.</span>coef_)</pre></div>
<p dir="auto">MLJ Support:</p>
<ul dir="auto">
<li>Clustering
<ul dir="auto">
<li><code>KMeans</code></li>
<li><code>DBSCAN</code></li>
<li><code>AgglomerativeClustering</code></li>
<li><code>HDBSCAN</code></li>
</ul>
</li>
<li>Classification
<ul dir="auto">
<li><code>LogisticRegression</code></li>
<li><code>MBSGDClassifier</code></li>
<li><code>RandomForestClassifier</code></li>
<li><code>SVC</code></li>
<li><code>LinearSVC</code></li>
<li><code>KNeighborsClassifier</code></li>
</ul>
</li>
<li>Regression
<ul dir="auto">
<li><code>LinearRegression</code></li>
<li><code>Ridge</code></li>
<li><code>Lasso</code></li>
<li><code>ElasticNet</code></li>
<li><code>MBSGDRegressor</code></li>
<li><code>RandomForestRegressor</code></li>
<li><code>CD</code></li>
<li><code>SVR</code></li>
<li><code>LinearSVR</code></li>
<li><code>KNeighborsRegressor</code></li>
</ul>
</li>
<li>Dimensionality Reduction
<ul dir="auto">
<li><code>PCA</code></li>
<li><code>IncrementalPCA</code></li>
<li><code>TruncatedSVD</code></li>
<li><code>UMAP</code></li>
<li><code>TSNE</code></li>
<li><code>GaussianRandomProjection</code></li>
</ul>
</li>
<li>Time Series
<ul dir="auto">
<li><code>ExponentialSmoothing</code></li>
<li><code>ARIMA</code></li>
</ul>
</li>
</ul>
</article></div>