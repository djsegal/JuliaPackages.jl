<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-valuesymbols" class="anchor" aria-hidden="true" href="#valuesymbols"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>ValueSymbols</h1>
<p><a href="https://travis-ci.org/eschnett/ValueSymbols.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/006f28de4fe94ed3946f3f9e44eee9741b2ebf702e17fab0a919687580d4cb16/68747470733a2f2f7472617669732d63692e6f72672f657363686e6574742f56616c756553796d626f6c732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/eschnett/ValueSymbols.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/eschnett/valuesymbols-jl/branch/master" rel="nofollow"><img src="https://camo.githubusercontent.com/8a5f34e2b54c4c6515fd00a45a3a6f44ff3e97587436822e6ee39ea5850cfb56/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f7776693735726a6a676475657269626f2f6272616e63682f6d61737465723f7376673d74727565" alt="Build status" data-canonical-src="https://ci.appveyor.com/api/projects/status/wvi75rjjgdueribo/branch/master?svg=true" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/eschnett/ValueSymbols.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/667c2d22a18a7856b1a1d81a4efba17b142a11fd3c4e9ff284ee6fea1b167f52/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f657363686e6574742f56616c756553796d626f6c732e6a6c2f62616467652e7376673f6272616e63683d6d617374657226736572766963653d676974687562" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/eschnett/ValueSymbols.jl/badge.svg?branch=master&amp;service=github" style="max-width:100%;"></a>
<a href="http://codecov.io/github/eschnett/ValueSymbols.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/3f2ecb0ceab4a8d5900ee2fd567f168a87e2e80cdced0f9a29be8f78ea41f817/687474703a2f2f636f6465636f762e696f2f6769746875622f657363686e6574742f56616c756553796d626f6c732e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/eschnett/ValueSymbols.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
<p>The module <code>ValueSymbols</code> provides a wrapper type <code>ValueSymbol</code> for
Julia Symbols, implemented as pointerfree "bitstype". This allows
storing <code>ValueSymbol</code> objects very efficiently in immutable types or
tuples with other bitstype types. Regular <code>Symbol</code> objects are stored
as pointers, hence are not bitstypes, and hence currently require heap
allocation.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using ValueSymbols
sym = :car
isbits(sym)
vsym = ValueSymbol(sym)
isbits(vsym)
"><pre><span class="pl-k">using</span> ValueSymbols
sym <span class="pl-k">=</span> <span class="pl-c1">:car</span>
<span class="pl-c1">isbits</span>(sym)
vsym <span class="pl-k">=</span> <span class="pl-c1">ValueSymbol</span>(sym)
<span class="pl-c1">isbits</span>(vsym)</pre></div>
<p><code>ValueSymbol</code> is a bitstype, while <code>Symbol</code> is not.</p>
<p>This is the practical consequence:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="@time Pair{Symbol,Int}[:car =&gt; i for i in 1:1000000];
  0.082046 seconds (1.00 M allocations: 38.147 MB, 79.57% gc time)

@time Pair{ValueSymbol,Int}[ValueSymbol(:car) =&gt; i for i in 1:1000000];
  0.006780 seconds (2 allocations: 15.259 MB)
"><pre><span class="pl-c1">@time</span> Pair{Symbol,Int}[<span class="pl-c1">:car</span> <span class="pl-k">=&gt;</span> i <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">1000000</span>];
  <span class="pl-c1">0.082046</span> seconds (<span class="pl-c1">1.00</span> M allocations<span class="pl-k">:</span> <span class="pl-c1">38.147</span> MB, <span class="pl-c1">79.57</span><span class="pl-k">%</span> gc time)

<span class="pl-c1">@time</span> Pair{ValueSymbol,Int}[<span class="pl-c1">ValueSymbol</span>(<span class="pl-c1">:car</span>) <span class="pl-k">=&gt;</span> i <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">1000000</span>];
  <span class="pl-c1">0.006780</span> seconds (<span class="pl-c1">2</span> allocations<span class="pl-k">:</span> <span class="pl-c1">15.259</span> MB)</pre></div>
<p>Creating tuples or pairs containing symbols requires one heap
allocation per tuple or pair. If you use a <code>ValueSymbol</code> instead,
these allocations are avoided.</p>
<h2><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Examples</h2>
<p>Convert between symbols and value symbols:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using ValueSymbols
sym = :car
vsym = ValueSymbol(sym)
sym2 = Symbol(vsym)
@assert sym2 === sym
"><pre><span class="pl-k">using</span> ValueSymbols
sym <span class="pl-k">=</span> <span class="pl-c1">:car</span>
vsym <span class="pl-k">=</span> <span class="pl-c1">ValueSymbol</span>(sym)
sym2 <span class="pl-k">=</span> <span class="pl-c1">Symbol</span>(vsym)
<span class="pl-c1">@assert</span> sym2 <span class="pl-k">===</span> sym</pre></div>
<p>Converting to a value symbol and back gives the original symbol.</p>
<p>Comparisons:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using ValueSymbols
sym = :car
vsym = ValueSymbol(sym)
@assert vsym == sym
"><pre><span class="pl-k">using</span> ValueSymbols
sym <span class="pl-k">=</span> <span class="pl-c1">:car</span>
vsym <span class="pl-k">=</span> <span class="pl-c1">ValueSymbol</span>(sym)
<span class="pl-c1">@assert</span> vsym <span class="pl-k">==</span> sym</pre></div>
<p>Value symbols and symbols can be compared directly. Note that this
works only with the regular comparison operator <code>==</code>, not with the
object identity comparison <code>===</code>, as the latter is always different
for different types.</p>
<p>Value symbols also define an ordering. This ordering is based on the
symbols' name, same as for Julia's regular symbols:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="@assert :car &lt; :plane
@assert ValueSymbol(:car) &lt; ValueSymbol(:plane)
"><pre><span class="pl-c1">@assert</span> <span class="pl-c1">:car</span> <span class="pl-k">&lt;</span> <span class="pl-c1">:plane</span>
<span class="pl-c1">@assert</span> <span class="pl-c1">ValueSymbol</span>(<span class="pl-c1">:car</span>) <span class="pl-k">&lt;</span> <span class="pl-c1">ValueSymbol</span>(<span class="pl-c1">:plane</span>)</pre></div>
</article></div>