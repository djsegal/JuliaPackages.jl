<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-valuesymbols" class="anchor" aria-hidden="true" href="#valuesymbols"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>ValueSymbols</h1>
<p><a href="https://travis-ci.org/eschnett/ValueSymbols.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/f360fcb34f889d3a3594b1bf8a83a8860347bb8a/68747470733a2f2f7472617669732d63692e6f72672f657363686e6574742f56616c756553796d626f6c732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/eschnett/ValueSymbols.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/eschnett/valuesymbols-jl/branch/master" rel="nofollow"><img src="https://camo.githubusercontent.com/13f64d767c54c5527d2712872cbd203ae60a2859/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f7776693735726a6a676475657269626f2f6272616e63682f6d61737465723f7376673d74727565" alt="Build status" data-canonical-src="https://ci.appveyor.com/api/projects/status/wvi75rjjgdueribo/branch/master?svg=true" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/eschnett/ValueSymbols.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/5335790e254fe210484348f9c3e17d98ece4fc40/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f657363686e6574742f56616c756553796d626f6c732e6a6c2f62616467652e7376673f6272616e63683d6d617374657226736572766963653d676974687562" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/eschnett/ValueSymbols.jl/badge.svg?branch=master&amp;service=github" style="max-width:100%;"></a>
<a href="http://codecov.io/github/eschnett/ValueSymbols.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/4c6cded8f9b82f0b9f36be1278c3baacb9740a1d/687474703a2f2f636f6465636f762e696f2f6769746875622f657363686e6574742f56616c756553796d626f6c732e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/eschnett/ValueSymbols.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
<p>The module <code>ValueSymbols</code> provides a wrapper type <code>ValueSymbol</code> for
Julia Symbols, implemented as pointerfree "bitstype". This allows
storing <code>ValueSymbol</code> objects very efficiently in immutable types or
tuples with other bitstype types. Regular <code>Symbol</code> objects are stored
as pointers, hence are not bitstypes, and hence currently require heap
allocation.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> ValueSymbols
sym <span class="pl-k">=</span> <span class="pl-c1">:car</span>
<span class="pl-c1">isbits</span>(sym)
vsym <span class="pl-k">=</span> <span class="pl-c1">ValueSymbol</span>(sym)
<span class="pl-c1">isbits</span>(vsym)</pre></div>
<p><code>ValueSymbol</code> is a bitstype, while <code>Symbol</code> is not.</p>
<p>This is the practical consequence:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">@time</span> Pair{Symbol,Int}[<span class="pl-c1">:car</span> <span class="pl-k">=&gt;</span> i <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">1000000</span>];
  <span class="pl-c1">0.082046</span> seconds (<span class="pl-c1">1.00</span> M allocations<span class="pl-k">:</span> <span class="pl-c1">38.147</span> MB, <span class="pl-c1">79.57</span><span class="pl-k">%</span> gc time)

<span class="pl-c1">@time</span> Pair{ValueSymbol,Int}[<span class="pl-c1">ValueSymbol</span>(<span class="pl-c1">:car</span>) <span class="pl-k">=&gt;</span> i <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">1000000</span>];
  <span class="pl-c1">0.006780</span> seconds (<span class="pl-c1">2</span> allocations<span class="pl-k">:</span> <span class="pl-c1">15.259</span> MB)</pre></div>
<p>Creating tuples or pairs containing symbols requires one heap
allocation per tuple or pair. If you use a <code>ValueSymbol</code> instead,
these allocations are avoided.</p>
<h2><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Examples</h2>
<p>Convert between symbols and value symbols:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> ValueSymbols
sym <span class="pl-k">=</span> <span class="pl-c1">:car</span>
vsym <span class="pl-k">=</span> <span class="pl-c1">ValueSymbol</span>(sym)
sym2 <span class="pl-k">=</span> <span class="pl-c1">Symbol</span>(vsym)
<span class="pl-c1">@assert</span> sym2 <span class="pl-k">===</span> sym</pre></div>
<p>Converting to a value symbol and back gives the original symbol.</p>
<p>Comparisons:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> ValueSymbols
sym <span class="pl-k">=</span> <span class="pl-c1">:car</span>
vsym <span class="pl-k">=</span> <span class="pl-c1">ValueSymbol</span>(sym)
<span class="pl-c1">@assert</span> vsym <span class="pl-k">==</span> sym</pre></div>
<p>Value symbols and symbols can be compared directly. Note that this
works only with the regular comparison operator <code>==</code>, not with the
object identity comparison <code>===</code>, as the latter is always different
for different types.</p>
<p>Value symbols also define an ordering. This ordering is based on the
symbols' name, same as for Julia's regular symbols:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">@assert</span> <span class="pl-c1">:car</span> <span class="pl-k">&lt;</span> <span class="pl-c1">:plane</span>
<span class="pl-c1">@assert</span> <span class="pl-c1">ValueSymbol</span>(<span class="pl-c1">:car</span>) <span class="pl-k">&lt;</span> <span class="pl-c1">ValueSymbol</span>(<span class="pl-c1">:plane</span>)</pre></div>
</article></div>