<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-layeredarrays" class="anchor" aria-hidden="true" href="#layeredarrays"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>LayeredArrays</h1>
<p><em>Layer-wise array computation for Julia</em></p>
<p><a href="https://KeitaNakamura.github.io/LayeredArrays.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://KeitaNakamura.github.io/LayeredArrays.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a>
<a href="https://github.com/KeitaNakamura/LayeredArrays.jl/actions"><img src="https://github.com/KeitaNakamura/LayeredArrays.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/KeitaNakamura/LayeredArrays.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/4150d4ef8b642303579cdee4611135b0ad5029f1ab93f02ba9fd101540032673/68747470733a2f2f636f6465636f762e696f2f67682f4b656974614e616b616d7572612f4c6179657265644172726179732e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e7376673f746f6b656e3d4b584c4a504437453049" alt="codecov" data-canonical-src="https://codecov.io/gh/KeitaNakamura/LayeredArrays.jl/branch/main/graph/badge.svg?token=KXLJPD7E0I" style="max-width:100%;"></a></p>
<p>LayeredArrays provides layer-wise array computation written in the <a href="https://julialang.org" rel="nofollow">Julia programming language</a>.
The layers have hierarchical structure, and lower layers can be accessed by using <code>getindex</code> in <code>AbstractLayeredArray</code>.
All types except subtypes of <code>AbstractLayeredArray</code> are on bottom layer <code>0</code>.
The layer-wise operations are simply available by using <a href="https://docs.julialang.org/en/v1/manual/arrays/#Broadcasting" rel="nofollow"><code>broadcast operations</code></a>, where operations are performed in order from the highest to the lowest layer.
For example, we have three vectors on layer 1 and 2:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; x = @layered 1 [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]
3-element LayeredVector{1, String, Vector{String}}:
 &quot;a&quot;
 &quot;b&quot;
 &quot;c&quot;

julia&gt; y = @layered 1 [&quot;d&quot;, &quot;e&quot;, &quot;f&quot;]
3-element LayeredVector{1, String, Vector{String}}:
 &quot;d&quot;
 &quot;e&quot;
 &quot;f&quot;

julia&gt; z = @layered 2 [&quot;g&quot;, &quot;h&quot;, &quot;i&quot;]
3-element LayeredVector{2, String, Vector{String}}:
 &quot;g&quot;
 &quot;h&quot;
 &quot;i&quot;
"><pre>julia<span class="pl-k">&gt;</span> x <span class="pl-k">=</span> <span class="pl-c1">@layered</span> <span class="pl-c1">1</span> [<span class="pl-s"><span class="pl-pds">"</span>a<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>b<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>c<span class="pl-pds">"</span></span>]
<span class="pl-c1">3</span><span class="pl-k">-</span>element LayeredVector{<span class="pl-c1">1</span>, String, Vector{String}}<span class="pl-k">:</span>
 <span class="pl-s"><span class="pl-pds">"</span>a<span class="pl-pds">"</span></span>
 <span class="pl-s"><span class="pl-pds">"</span>b<span class="pl-pds">"</span></span>
 <span class="pl-s"><span class="pl-pds">"</span>c<span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> y <span class="pl-k">=</span> <span class="pl-c1">@layered</span> <span class="pl-c1">1</span> [<span class="pl-s"><span class="pl-pds">"</span>d<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>e<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>f<span class="pl-pds">"</span></span>]
<span class="pl-c1">3</span><span class="pl-k">-</span>element LayeredVector{<span class="pl-c1">1</span>, String, Vector{String}}<span class="pl-k">:</span>
 <span class="pl-s"><span class="pl-pds">"</span>d<span class="pl-pds">"</span></span>
 <span class="pl-s"><span class="pl-pds">"</span>e<span class="pl-pds">"</span></span>
 <span class="pl-s"><span class="pl-pds">"</span>f<span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> z <span class="pl-k">=</span> <span class="pl-c1">@layered</span> <span class="pl-c1">2</span> [<span class="pl-s"><span class="pl-pds">"</span>g<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>h<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>i<span class="pl-pds">"</span></span>]
<span class="pl-c1">3</span><span class="pl-k">-</span>element LayeredVector{<span class="pl-c1">2</span>, String, Vector{String}}<span class="pl-k">:</span>
 <span class="pl-s"><span class="pl-pds">"</span>g<span class="pl-pds">"</span></span>
 <span class="pl-s"><span class="pl-pds">"</span>h<span class="pl-pds">"</span></span>
 <span class="pl-s"><span class="pl-pds">"</span>i<span class="pl-pds">"</span></span></pre></div>
<p>The broadcasting vector multiplication for those vectors are then computed as</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; @. x * y # equal to built-in Array for operations on the same layers
3-element LazyLayeredVector{1, String, Base.Broadcast.Broadcasted{LayeredArrays.LayeredArrayStyle{1}, Nothing, typeof(*), Tuple{LayeredVector{1, String, Vector{String}}, LayeredVector{1, String, Vector{String}}}}}:
 &quot;ad&quot;
 &quot;be&quot;
 &quot;cf&quot;

julia&gt; @. x * z # broadcasting operations on each layer
3-element LazyLayeredVector{2, LazyLayeredVector{1, String, Base.Broadcast.Broadcasted{LayeredArrays.LayeredArrayStyle{1}, Nothing, typeof(*), Tuple{LayeredVector{1, String, Vector{String}}, Base.RefValue{String}}}}, Base.Broadcast.Broadcasted{LayeredArrays.LayeredArrayStyle{1}, Nothing, typeof(*), Tuple{Base.RefValue{LayeredVector{1, String, Vector{String}}}, LayeredVector{2, String, Vector{String}}}}}:
 [&quot;ag&quot;, &quot;bg&quot;, &quot;cg&quot;]
 [&quot;ah&quot;, &quot;bh&quot;, &quot;ch&quot;]
 [&quot;ai&quot;, &quot;bi&quot;, &quot;ci&quot;]

julia&gt; @. x * y * z
3-element LazyLayeredVector{2, LazyLayeredVector{1, String, Base.Broadcast.Broadcasted{LayeredArrays.LayeredArrayStyle{1}, Nothing, typeof(*), Tuple{LayeredVector{1, String, Vector{String}}, LayeredVector{1, String, Vector{String}}, Base.RefValue{String}}}}, Base.Broadcast.Broadcasted{LayeredArrays.LayeredArrayStyle{1}, Nothing, typeof(*), Tuple{Base.RefValue{LayeredVector{1, String, Vector{String}}}, Base.RefValue{LayeredVector{1, String, Vector{String}}}, LayeredVector{2, String, Vector{String}}}}}:
 [&quot;adg&quot;, &quot;beg&quot;, &quot;cfg&quot;]
 [&quot;adh&quot;, &quot;beh&quot;, &quot;cfh&quot;]
 [&quot;adi&quot;, &quot;bei&quot;, &quot;cfi&quot;]
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">@.</span> x <span class="pl-k">*</span> y <span class="pl-c"><span class="pl-c">#</span> equal to built-in Array for operations on the same layers</span>
<span class="pl-c1">3</span><span class="pl-k">-</span>element LazyLayeredVector{<span class="pl-c1">1</span>, String, Base<span class="pl-k">.</span>Broadcast<span class="pl-k">.</span>Broadcasted{LayeredArrays<span class="pl-k">.</span>LayeredArrayStyle{<span class="pl-c1">1</span>}, Nothing, <span class="pl-c1">typeof</span>(<span class="pl-k">*</span>), Tuple{LayeredVector{<span class="pl-c1">1</span>, String, Vector{String}}, LayeredVector{<span class="pl-c1">1</span>, String, Vector{String}}}}}<span class="pl-k">:</span>
 <span class="pl-s"><span class="pl-pds">"</span>ad<span class="pl-pds">"</span></span>
 <span class="pl-s"><span class="pl-pds">"</span>be<span class="pl-pds">"</span></span>
 <span class="pl-s"><span class="pl-pds">"</span>cf<span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@.</span> x <span class="pl-k">*</span> z <span class="pl-c"><span class="pl-c">#</span> broadcasting operations on each layer</span>
<span class="pl-c1">3</span><span class="pl-k">-</span>element LazyLayeredVector{<span class="pl-c1">2</span>, LazyLayeredVector{<span class="pl-c1">1</span>, String, Base<span class="pl-k">.</span>Broadcast<span class="pl-k">.</span>Broadcasted{LayeredArrays<span class="pl-k">.</span>LayeredArrayStyle{<span class="pl-c1">1</span>}, Nothing, <span class="pl-c1">typeof</span>(<span class="pl-k">*</span>), Tuple{LayeredVector{<span class="pl-c1">1</span>, String, Vector{String}}, Base<span class="pl-k">.</span>RefValue{String}}}}, Base<span class="pl-k">.</span>Broadcast<span class="pl-k">.</span>Broadcasted{LayeredArrays<span class="pl-k">.</span>LayeredArrayStyle{<span class="pl-c1">1</span>}, Nothing, <span class="pl-c1">typeof</span>(<span class="pl-k">*</span>), Tuple{Base<span class="pl-k">.</span>RefValue{LayeredVector{<span class="pl-c1">1</span>, String, Vector{String}}}, LayeredVector{<span class="pl-c1">2</span>, String, Vector{String}}}}}<span class="pl-k">:</span>
 [<span class="pl-s"><span class="pl-pds">"</span>ag<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>bg<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>cg<span class="pl-pds">"</span></span>]
 [<span class="pl-s"><span class="pl-pds">"</span>ah<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>bh<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>ch<span class="pl-pds">"</span></span>]
 [<span class="pl-s"><span class="pl-pds">"</span>ai<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>bi<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>ci<span class="pl-pds">"</span></span>]

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@.</span> x <span class="pl-k">*</span> y <span class="pl-k">*</span> z
<span class="pl-c1">3</span><span class="pl-k">-</span>element LazyLayeredVector{<span class="pl-c1">2</span>, LazyLayeredVector{<span class="pl-c1">1</span>, String, Base<span class="pl-k">.</span>Broadcast<span class="pl-k">.</span>Broadcasted{LayeredArrays<span class="pl-k">.</span>LayeredArrayStyle{<span class="pl-c1">1</span>}, Nothing, <span class="pl-c1">typeof</span>(<span class="pl-k">*</span>), Tuple{LayeredVector{<span class="pl-c1">1</span>, String, Vector{String}}, LayeredVector{<span class="pl-c1">1</span>, String, Vector{String}}, Base<span class="pl-k">.</span>RefValue{String}}}}, Base<span class="pl-k">.</span>Broadcast<span class="pl-k">.</span>Broadcasted{LayeredArrays<span class="pl-k">.</span>LayeredArrayStyle{<span class="pl-c1">1</span>}, Nothing, <span class="pl-c1">typeof</span>(<span class="pl-k">*</span>), Tuple{Base<span class="pl-k">.</span>RefValue{LayeredVector{<span class="pl-c1">1</span>, String, Vector{String}}}, Base<span class="pl-k">.</span>RefValue{LayeredVector{<span class="pl-c1">1</span>, String, Vector{String}}}, LayeredVector{<span class="pl-c1">2</span>, String, Vector{String}}}}}<span class="pl-k">:</span>
 [<span class="pl-s"><span class="pl-pds">"</span>adg<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>beg<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>cfg<span class="pl-pds">"</span></span>]
 [<span class="pl-s"><span class="pl-pds">"</span>adh<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>beh<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>cfh<span class="pl-pds">"</span></span>]
 [<span class="pl-s"><span class="pl-pds">"</span>adi<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>bei<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>cfi<span class="pl-pds">"</span></span>]</pre></div>
<p>Note that the layer-wise broadcasting operations are always lazily evaluated.</p>
</article></div>