<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-layeredarrays" class="anchor" aria-hidden="true" href="#layeredarrays"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>LayeredArrays</h1>
<p dir="auto"><em>Layer-wise array computation for Julia</em></p>
<p dir="auto"><a href="https://KeitaNakamura.github.io/LayeredArrays.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://KeitaNakamura.github.io/LayeredArrays.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/KeitaNakamura/LayeredArrays.jl/actions"><img src="https://github.com/KeitaNakamura/LayeredArrays.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/KeitaNakamura/LayeredArrays.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/4150d4ef8b642303579cdee4611135b0ad5029f1ab93f02ba9fd101540032673/68747470733a2f2f636f6465636f762e696f2f67682f4b656974614e616b616d7572612f4c6179657265644172726179732e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e7376673f746f6b656e3d4b584c4a504437453049" alt="codecov" data-canonical-src="https://codecov.io/gh/KeitaNakamura/LayeredArrays.jl/branch/main/graph/badge.svg?token=KXLJPD7E0I" style="max-width: 100%;"></a></p>
<p dir="auto">LayeredArrays provides layer-wise array computation written in the <a href="https://julialang.org" rel="nofollow">Julia programming language</a>.
The layers have hierarchical structure, and lower layers can be accessed by using <code>getindex</code> in <code>AbstractLayeredArray</code>.
All types except subtypes of <code>AbstractLayeredArray</code> are on bottom layer <code>0</code>.
The layer-wise operations are simply available by using <a href="https://docs.julialang.org/en/v1/manual/arrays/#Broadcasting" rel="nofollow"><code>broadcast operations</code></a>.
This framework is useful for following index notation.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; xᵢ = @layered 3 [1,2,3]
3-element LayeredVector{3, Int64, Vector{Int64}}:
 1
 2
 3

julia&gt; yⱼ = @layered 2 [4,5,6]
3-element LayeredVector{2, Int64, Vector{Int64}}:
 4
 5
 6

julia&gt; zₖ = @layered 1 [7,8,9]
3-element LayeredVector{1, Int64, Vector{Int64}}:
 7
 8
 9

julia&gt; Aᵢⱼₖ = @. xᵢ * yⱼ + zₖ * yⱼ;                   # layerof(Aᵢⱼₖ) == 3

julia&gt; Aᵢⱼₖ[1] == @. xᵢ[1] * yⱼ + zₖ * yⱼ             # layerof(Aᵢⱼₖ[1]) == 2
true

julia&gt; Aᵢⱼₖ[1][2] == @. xᵢ[1] * yⱼ[2] + zₖ * yⱼ[2]    # layerof(Aᵢⱼₖ[1][2]) == 1
true

julia&gt; Aᵢⱼₖ[1][2][3] == xᵢ[1] * yⱼ[2] + zₖ[3] * yⱼ[2] # layerof(Aᵢⱼₖ[1][2][3]) == 0
true"><pre>julia<span class="pl-k">&gt;</span> xᵢ <span class="pl-k">=</span> <span class="pl-c1">@layered</span> <span class="pl-c1">3</span> [<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>]
<span class="pl-c1">3</span><span class="pl-k">-</span>element LayeredVector{<span class="pl-c1">3</span>, Int64, Vector{Int64}}<span class="pl-k">:</span>
 <span class="pl-c1">1</span>
 <span class="pl-c1">2</span>
 <span class="pl-c1">3</span>

julia<span class="pl-k">&gt;</span> yⱼ <span class="pl-k">=</span> <span class="pl-c1">@layered</span> <span class="pl-c1">2</span> [<span class="pl-c1">4</span>,<span class="pl-c1">5</span>,<span class="pl-c1">6</span>]
<span class="pl-c1">3</span><span class="pl-k">-</span>element LayeredVector{<span class="pl-c1">2</span>, Int64, Vector{Int64}}<span class="pl-k">:</span>
 <span class="pl-c1">4</span>
 <span class="pl-c1">5</span>
 <span class="pl-c1">6</span>

julia<span class="pl-k">&gt;</span> zₖ <span class="pl-k">=</span> <span class="pl-c1">@layered</span> <span class="pl-c1">1</span> [<span class="pl-c1">7</span>,<span class="pl-c1">8</span>,<span class="pl-c1">9</span>]
<span class="pl-c1">3</span><span class="pl-k">-</span>element LayeredVector{<span class="pl-c1">1</span>, Int64, Vector{Int64}}<span class="pl-k">:</span>
 <span class="pl-c1">7</span>
 <span class="pl-c1">8</span>
 <span class="pl-c1">9</span>

julia<span class="pl-k">&gt;</span> Aᵢⱼₖ <span class="pl-k">=</span> <span class="pl-c1">@.</span> xᵢ <span class="pl-k">*</span> yⱼ <span class="pl-k">+</span> zₖ <span class="pl-k">*</span> yⱼ;                   <span class="pl-c"><span class="pl-c">#</span> layerof(Aᵢⱼₖ) == 3</span>

julia<span class="pl-k">&gt;</span> Aᵢⱼₖ[<span class="pl-c1">1</span>] <span class="pl-k">==</span> <span class="pl-c1">@.</span> xᵢ[<span class="pl-c1">1</span>] <span class="pl-k">*</span> yⱼ <span class="pl-k">+</span> zₖ <span class="pl-k">*</span> yⱼ             <span class="pl-c"><span class="pl-c">#</span> layerof(Aᵢⱼₖ[1]) == 2</span>
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> Aᵢⱼₖ[<span class="pl-c1">1</span>][<span class="pl-c1">2</span>] <span class="pl-k">==</span> <span class="pl-c1">@.</span> xᵢ[<span class="pl-c1">1</span>] <span class="pl-k">*</span> yⱼ[<span class="pl-c1">2</span>] <span class="pl-k">+</span> zₖ <span class="pl-k">*</span> yⱼ[<span class="pl-c1">2</span>]    <span class="pl-c"><span class="pl-c">#</span> layerof(Aᵢⱼₖ[1][2]) == 1</span>
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> Aᵢⱼₖ[<span class="pl-c1">1</span>][<span class="pl-c1">2</span>][<span class="pl-c1">3</span>] <span class="pl-k">==</span> xᵢ[<span class="pl-c1">1</span>] <span class="pl-k">*</span> yⱼ[<span class="pl-c1">2</span>] <span class="pl-k">+</span> zₖ[<span class="pl-c1">3</span>] <span class="pl-k">*</span> yⱼ[<span class="pl-c1">2</span>] <span class="pl-c"><span class="pl-c">#</span> layerof(Aᵢⱼₖ[1][2][3]) == 0</span>
<span class="pl-c1">true</span></pre></div>
<p dir="auto">Note that the layer-wise broadcasting operations are always lazily evaluated.</p>
</article></div>