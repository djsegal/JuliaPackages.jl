<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-fileio2jl" class="anchor" aria-hidden="true" href="#fileio2jl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>FileIO2.jl</h1>
<h2><a id="user-content-description" class="anchor" aria-hidden="true" href="#description"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Description</h2>
<p>A very Julian way of describing files leveraging the built-in type system.  FileIO2.jl simply provides tools/patterns to register data types with Julia type system.</p>
<p>FileIO2.jl therefore competes with the solution found at: <a href="http://github.com/JuliaIO/FileIO.jl">http://github.com/JuliaIO/FileIO.jl</a>.</p>
<h3><a id="user-content-advantages-wrt-fileiojl" class="anchor" aria-hidden="true" href="#advantages-wrt-fileiojl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Advantages (wrt FileIO.jl)</h3>
<ul>
<li>FileIO2.jl is a more lightweight module than FileIO.jl (Should probably have been named better).</li>
<li>New file/data format types do not have to be registered with the FileIO2.jl module.</li>
<li>Only types of imported (used) modules are made available (including those provided with FileIO2.jl).</li>
</ul>
<h3><a id="user-content-disadvantages-wrt-fileiojl" class="anchor" aria-hidden="true" href="#disadvantages-wrt-fileiojl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Disadvantages (wrt FileIO.jl)</h3>
<ul>
<li>No facilities to perform dynamic loading of IO module.</li>
<li>No ability to auto-detect filetype by extension.</li>
<li>No ability to auto-detect filetype by magic bytes.</li>
</ul>
<h3><a id="user-content-points-of-consideration" class="anchor" aria-hidden="true" href="#points-of-consideration"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Points of Consideration</h3>
<p>It might be a good idea to consolidate/re-organize the FileIO.jl and FileIO2.jl modules.</p>
<ul>
<li><strong>A base module</strong> could provide the base File object hierarchies and manipulation tools.</li>
<li>This module should be relatively static (unchanging).</li>
<li><strong>A registration module</strong> could provide a repository of IO modules to that read/write different files.</li>
<li>This module would demonstrate how to register all the PNG readers, the MP3 readers, etc.</li>
<li>Users could then create a stripped-down version of the module to meet the needs of their application - thus avoiding complex dependencies.</li>
</ul>
<h3><a id="user-content-mime-support" class="anchor" aria-hidden="true" href="#mime-support"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>MIME Support</h3>
<p>FileIO2.jl includes simple MIME support for images.  As a result, *IJulia notebook users can display <em>IJulia-supported</em> images with very little code:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="display(File(:jpeg, &quot;myfile.jpeg&quot;))
"><pre><code>display(File(:jpeg, "myfile.jpeg"))
</code></pre></div>
<p>Supported image formats include:</p>
<ul>
<li>Pixel formats: <code>:bmp</code>, <code>:png</code>, <code>:gif</code>, <code>:jpeg</code>, <code>:tiff</code></li>
<li>Vector formats: <code>:svg</code>, <code>:cgm</code>, <code>:eps</code>, <code>:emf</code></li>
</ul>
<h3><a id="user-content-more-sample-code" class="anchor" aria-hidden="true" href="#more-sample-code"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>More Sample Code</h3>
<p>Sample code is provided under the <a href="test/">test directory</a>.</p>
<h3><a id="user-content-philosophy" class="anchor" aria-hidden="true" href="#philosophy"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Philosophy</h3>
<h4><a id="user-content-open-read-write-load-and-save" class="anchor" aria-hidden="true" href="#open-read-write-load-and-save"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><code>open</code>, <code>read</code>, <code>write</code>, <code>load</code>, and <code>save</code></h4>
<ul>
<li><strong><code>open</code></strong>: Opens a file, and read sufficient header data to return an object of <code>T&lt;:AbstractReader</code> / <code>T&lt;:AbstractWriter</code>.  These objects are basically higher-level versions of IO streams.</li>
<li><strong><code>read</code></strong>: Reads data with whatever granularity the module developper desires (ex: individual <code>Int</code>/<code>String</code>/..., a large data block, or even an entire file).</li>
<li><code>read(::Type{TIO&lt;:AbstractReader}, ::File{T&lt;:FileIO2.DataFormat}, ...)</code>: Equivalent to <code>load</code> for user-defined reader-only state machines.</li>
<li><code>read(::Type{TIO&lt;:AbstractDataIORW}, ::File{T&lt;:FileIO2.DataFormat}, ...)</code>: Equivalent to <code>load</code> for user-defined read/write-capable state machines.</li>
<li><code>read(r::TIO&lt;:{AbstractReader/AbstractDataIORW}, ::Type{T&lt;:DataType})</code>: Reads a value of type <code>T</code>, using <code>r</code>.  Example: <code>val = read(myreader, Float64)</code>.</li>
<li><strong><code>write</code></strong>: Writes data with whatever granularity the module developper desires (ex: individual <code>Int</code>/<code>String</code>/..., a large data block, or even an entire file).</li>
<li><code>write(::TIO&lt;:AbstractWriter, ::File{T&lt;:FileIO2.DataFormat}, ...)</code>: Equivalent to <code>save</code> for user-defined writer-only state machines.</li>
<li><code>write(::TIO&lt;:AbstractDataIORW, ::File{T&lt;:FileIO2.DataFormat}, ...)</code>: Equivalent to <code>save</code> for user-defined read/write-capable state machines.</li>
<li><strong><code>load</code></strong>: The simplest interface to reading in data.  Performs <code>open</code>/<code>read</code>*/<code>close</code> in one convenient function.</li>
<li><strong>DEPRECATED</strong> Please overload the <code>read()</code> function as described above.</li>
<li><strong><code>save</code></strong>: The simplest interface to writing data.  Performs <code>open</code>/<code>write</code>*/<code>close</code> in one convenient function.</li>
<li><strong>DEPRECATED</strong> Please overload the <code>write()</code> function as described above.</li>
</ul>
<h4><a id="user-content-principal-types" class="anchor" aria-hidden="true" href="#principal-types"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Principal Types</h4>
<ul>
<li><strong><code>FileIO2.DataFormat</code></strong>: (abstract) Identifies a data format, as opposed to a file.</li>
<li><strong><code>FileIO2.DataEncoding</code></strong>: (abstract) Identifies the type of data encoding used.  Can be used to specialize a type <code>T&lt;:DataFormat</code>.</li>
<li>Can use <code>UnknownTextEncoding</code> to describe "generic" versions of a type.  For example: <code>const TextFmt = TextFormat{UnknownTextEncoding}</code> defines <code>TextFmt</code> to represent any text data format (irrespective of the data encoding used).</li>
<li>TODO: Does anybody really need to specialize a <code>DataFormat</code> with a particular encoding?</li>
<li><strong><code>AbstractReader{DataFormat}</code></strong>: (abstract) Used to define an object for reading from a stream formatted with <code>DataFormat</code>.</li>
<li><strong><code>AbstractWriter{DataFormat}</code></strong>: (abstract) Used to define an object for writing to a stream formatted with <code>DataFormat</code>.</li>
<li><strong><code>AbstractDataIORW{DataFormat}</code></strong>: (abstract) Used to define an object for reading/writing to a stream formatted with <code>DataFormat</code>.</li>
<li><strong><code>File{DataFormat}</code></strong>: An object used to dispatch to the appropriate <code>open</code>/<code>load</code>/<code>save</code>/... functions.</li>
</ul>
<h4><a id="user-content-constructing-file-objects-shorthand" class="anchor" aria-hidden="true" href="#constructing-file-objects-shorthand"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Constructing <code>File</code> Objects (Shorthand)</h4>
<p>The simplest way to construct a <code>File</code> object is to call the "shorthand" method: <code>File(::Symbol, ::String)</code>.  For example:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="	f1 = File(:text, &quot;myfile.txt&quot;)
	f2 = File(:png, &quot;myimage.png&quot;)
	f3 = File(:html, &quot;myfile.html&quot;)
	
	#When html files need to be recognized as simple text files:
	f3 = File(:text, &quot;myfile.html&quot;)
"><pre><code>	f1 = File(:text, "myfile.txt")
	f2 = File(:png, "myimage.png")
	f3 = File(:html, "myfile.html")
	
	#When html files need to be recognized as simple text files:
	f3 = File(:text, "myfile.html")
</code></pre></div>
<p>This method allows different <code>File</code> specializations to be constructed without exporting different <code>DataFormat</code> type identifiers (namespace pollution).</p>
<h5><a id="user-content-user-defined-file-constructors-shorthand" class="anchor" aria-hidden="true" href="#user-defined-file-constructors-shorthand"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>User-Defined <code>File</code> Constructors (Shorthand)</h5>
<p>To register a user-defined <code>File</code> constructor with this shorthand notation, simply add the following method declaration:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="	FileIO2.File(::FileIO2.Shorthand{[NEWFMTSYMBOL]}, path::String) = File{[NEWFMT&lt;:DataFormat]}(path)
"><pre><code>	FileIO2.File(::FileIO2.Shorthand{[NEWFMTSYMBOL]}, path::String) = File{[NEWFMT&lt;:DataFormat]}(path)
</code></pre></div>
<p>For example, the "text" format can be registered using:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="	FileIO2.File(::FileIO2.Shorthand{:text}, path::String) = File{FileIO2.TextFmt}(path)
"><pre><code>	FileIO2.File(::FileIO2.Shorthand{:text}, path::String) = File{FileIO2.TextFmt}(path)
</code></pre></div>
<h4><a id="user-content-opening-file-for-readwrite" class="anchor" aria-hidden="true" href="#opening-file-for-readwrite"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Opening <code>File</code> for read/write</h4>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="	file = File(:png, &quot;myfile.png&quot;)
	reader = open(file, read=true) #Default is read=true
"><pre><code>	file = File(:png, "myfile.png")
	reader = open(file, read=true) #Default is read=true
</code></pre></div>
<p>NOTE: A module developper must have first defined a .png reader object:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="	type MyPNGReader &lt;: AbstractReader{PNGFmt}; end
	Base.open(r::Type{MyPNGReader}, f::File{PNGFmt}, ...) = ...
"><pre><code>	type MyPNGReader &lt;: AbstractReader{PNGFmt}; end
	Base.open(r::Type{MyPNGReader}, f::File{PNGFmt}, ...) = ...
</code></pre></div>
<p>A user can therefore call <code>open</code> with this specific reader:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="	open(MyPNGReader, file, read=true)
"><pre><code>	open(MyPNGReader, file, read=true)
</code></pre></div>
<h2><a id="user-content-known-limitations" class="anchor" aria-hidden="true" href="#known-limitations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Known Limitations</h2>
<p>FileIO2.jl tries to minimize the set of exported types/aliases until a better way is found for the user to import them.  At the moment, exporting too much pollutes the symbol namespace - making collisions between modules highly likely.</p>
<h3><a id="user-content-compatibility" class="anchor" aria-hidden="true" href="#compatibility"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Compatibility</h3>
<p>Extensive compatibility testing of FileIO2.jl has not been performed.  The module has been tested using the following environment(s):</p>
<ul>
<li>Linux / Julia-1.1.1 (64-bit).</li>
</ul>
<h2><a id="user-content-disclaimer" class="anchor" aria-hidden="true" href="#disclaimer"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Disclaimer</h2>
<p>The FileIO2.jl module is not yet mature.  Expect significant changes.</p>
<p>This software is provided "as is", with no guarantee of correctness.  Use at own risk.</p>
</article></div>