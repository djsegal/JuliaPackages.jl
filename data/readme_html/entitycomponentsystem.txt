<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-entitycomponentsystemjl-" class="anchor" aria-hidden="true" href="#entitycomponentsystemjl-"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>EntityComponentSystem.jl <g-emoji class="g-emoji" alias="bento" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f371.png">üç±</g-emoji></h1>
<p dir="auto">An entity component system written for Julia for video games and other simulations.</p>
<div class="highlight highlight-text-shell-session notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="add EntityComponentSystem"><pre><span class="pl-c1">add EntityComponentSystem</span></pre></div>
<p dir="auto">Documentation is <a href="https://richardanaya.github.io/EntityComponentSystem.jl/build/index.html" rel="nofollow">here</a></p>
<h2 dir="auto"><a id="user-content-simple-example" class="anchor" aria-hidden="true" href="#simple-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Simple Example</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using EntityComponentSystem

mutable struct Position &lt;: ECSComponent
  x::Float32
  y::Float32
end

mutable struct Velocity &lt;: ECSComponent
  x::Float32
  y::Float32
end

# Create a world for entities
world = World()

# Register memory storage for components
register!(world,Position)
register!(world,Velocity)

# Create entities
player = createentity!(world)
addcomponent!(world,player,Position(0,0))
addcomponent!(world,player,Velocity(1,2))

FPS = 60.0

function runphysics!()
  while true
    global world
    # Run systems on entities with specific sets of components
    runsystem!(world,[Position,Velocity]) do entity,components
        # Components are given in order they are requested
        pos,vel = components
        # Modify components
        pos.x += vel.x
        pos.y += vel.y
    end
    sleep(1.0/FPS)
  end
end

@async runphysics!()"><pre><span class="pl-k">using</span> EntityComponentSystem

<span class="pl-k">mutable struct</span> Position <span class="pl-k">&lt;:</span> <span class="pl-c1">ECSComponent</span>
  x<span class="pl-k">::</span><span class="pl-c1">Float32</span>
  y<span class="pl-k">::</span><span class="pl-c1">Float32</span>
<span class="pl-k">end</span>

<span class="pl-k">mutable struct</span> Velocity <span class="pl-k">&lt;:</span> <span class="pl-c1">ECSComponent</span>
  x<span class="pl-k">::</span><span class="pl-c1">Float32</span>
  y<span class="pl-k">::</span><span class="pl-c1">Float32</span>
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> Create a world for entities</span>
world <span class="pl-k">=</span> <span class="pl-c1">World</span>()

<span class="pl-c"><span class="pl-c">#</span> Register memory storage for components</span>
<span class="pl-c1">register!</span>(world,Position)
<span class="pl-c1">register!</span>(world,Velocity)

<span class="pl-c"><span class="pl-c">#</span> Create entities</span>
player <span class="pl-k">=</span> <span class="pl-c1">createentity!</span>(world)
<span class="pl-c1">addcomponent!</span>(world,player,<span class="pl-c1">Position</span>(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>))
<span class="pl-c1">addcomponent!</span>(world,player,<span class="pl-c1">Velocity</span>(<span class="pl-c1">1</span>,<span class="pl-c1">2</span>))

FPS <span class="pl-k">=</span> <span class="pl-c1">60.0</span>

<span class="pl-k">function</span> <span class="pl-en">runphysics!</span>()
  <span class="pl-k">while</span> <span class="pl-c1">true</span>
    <span class="pl-k">global</span> world
    <span class="pl-c"><span class="pl-c">#</span> Run systems on entities with specific sets of components</span>
    <span class="pl-c1">runsystem!</span>(world,[Position,Velocity]) <span class="pl-k">do</span> entity,components
        <span class="pl-c"><span class="pl-c">#</span> Components are given in order they are requested</span>
        pos,vel <span class="pl-k">=</span> components
        <span class="pl-c"><span class="pl-c">#</span> Modify components</span>
        pos<span class="pl-k">.</span>x <span class="pl-k">+=</span> vel<span class="pl-k">.</span>x
        pos<span class="pl-k">.</span>y <span class="pl-k">+=</span> vel<span class="pl-k">.</span>y
    <span class="pl-k">end</span>
    <span class="pl-c1">sleep</span>(<span class="pl-c1">1.0</span><span class="pl-k">/</span>FPS)
  <span class="pl-k">end</span>
<span class="pl-k">end</span>

<span class="pl-c1">@async</span> <span class="pl-c1">runphysics!</span>()</pre></div>
</article></div>