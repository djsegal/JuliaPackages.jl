<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-slurmmanagers" class="anchor" aria-hidden="true" href="#slurmmanagers"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>SlurmManagers</h1>
<p dir="auto">This repository is mostly forked from <a href="https://github.com/JuliaParallel/ClusterManagers.jl"><code>ClusterManagers.jl</code></a> for using Julia interactively on a <code>Slurm</code> cluster. I made some hacky changes.</p>
<h2 dir="auto"><a id="user-content-changes" class="anchor" aria-hidden="true" href="#changes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Changes</h2>
<ol dir="auto">
<li>
<p dir="auto">The <code>addprocs_slurm</code> function now properly deals with <code>cpus_per_task</code> argument, and set the environment variable <code>JULIA_NUM_THREADS</code> accordingly. Further more, threaded BLAS can also be enabled!</p>
</li>
<li>
<p dir="auto">Add some default slurm arguments:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Slurm parameter  =&gt; default value
ntasks           =&gt; 1                  # how many process
cpus_per_task    =&gt; 1                  # threads per process
threads_per_core =&gt; 1                  # disable hyper-threading
topology         =&gt; :master_worker     # architecture hint
job_file_loc     =&gt; pwd() * &quot;/output&quot;  # log output (relative path)
t                =&gt; &quot;1000&quot;             # unit: min"><pre>Slurm parameter  <span class="pl-k">=&gt;</span> default value
ntasks           <span class="pl-k">=&gt;</span> <span class="pl-c1">1</span>                  <span class="pl-c"><span class="pl-c">#</span> how many process</span>
cpus_per_task    <span class="pl-k">=&gt;</span> <span class="pl-c1">1</span>                  <span class="pl-c"><span class="pl-c">#</span> threads per process</span>
threads_per_core <span class="pl-k">=&gt;</span> <span class="pl-c1">1</span>                  <span class="pl-c"><span class="pl-c">#</span> disable hyper-threading</span>
topology         <span class="pl-k">=&gt;</span> <span class="pl-c1">:master_worker</span>     <span class="pl-c"><span class="pl-c">#</span> architecture hint</span>
job_file_loc     <span class="pl-k">=&gt;</span> <span class="pl-c1">pwd</span>() <span class="pl-k">*</span> <span class="pl-s"><span class="pl-pds">"</span>/output<span class="pl-pds">"</span></span>  <span class="pl-c"><span class="pl-c">#</span> log output (relative path)</span>
t                <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>1000<span class="pl-pds">"</span></span>             <span class="pl-c"><span class="pl-c">#</span> unit: min</span></pre></div>
</li>
</ol>
<h2 dir="auto"><a id="user-content-extra-functionalities" class="anchor" aria-hidden="true" href="#extra-functionalities"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Extra functionalities</h2>
<ol dir="auto">
<li>Now, <code>Base.Threads</code> and <code>LinearAlgebra</code> are loaded the first when <code>addprocs_slurm</code> successful has connected all the required nodes. They are using <strong>everywhere</strong> which is equivalent to a statement in global scope.
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@everywhere using LinearAlgebra, Base.Threads"><pre><span class="pl-c1">@everywhere</span> <span class="pl-k">using</span> LinearAlgebra, Base<span class="pl-k">.</span>Threads</pre></div>
</li>
<li>The <code>worker_info</code> can show the information of workers (with the package <code>Hwloc</code>) as a dictionary.
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="&quot;worker_id&quot;    =&gt; myid(),                     # worker ID
&quot;cpu&quot;          =&gt; Sys.cpu_info()[1].model,    # CPU model
&quot;hwinfo&quot;       =&gt; getinfo(),                  # architecture info
&quot;nthreads&quot;     =&gt; Threads.nthreads(),         # Julia threads
&quot;blas_threads&quot; =&gt; BLAS.get_num_threads(),     # BLAS threads
&quot;blas_config&quot;  =&gt; BLAS.get_config(),          # BLAS configuration
&quot;mem_free_GB&quot;  =&gt; Sys.free_memory() / (2^30)  # free memory in GB"><pre><span class="pl-s"><span class="pl-pds">"</span>worker_id<span class="pl-pds">"</span></span>    <span class="pl-k">=&gt;</span> <span class="pl-c1">myid</span>(),                     <span class="pl-c"><span class="pl-c">#</span> worker ID</span>
<span class="pl-s"><span class="pl-pds">"</span>cpu<span class="pl-pds">"</span></span>          <span class="pl-k">=&gt;</span> Sys<span class="pl-k">.</span><span class="pl-c1">cpu_info</span>()[<span class="pl-c1">1</span>]<span class="pl-k">.</span>model,    <span class="pl-c"><span class="pl-c">#</span> CPU model</span>
<span class="pl-s"><span class="pl-pds">"</span>hwinfo<span class="pl-pds">"</span></span>       <span class="pl-k">=&gt;</span> <span class="pl-c1">getinfo</span>(),                  <span class="pl-c"><span class="pl-c">#</span> architecture info</span>
<span class="pl-s"><span class="pl-pds">"</span>nthreads<span class="pl-pds">"</span></span>     <span class="pl-k">=&gt;</span> Threads<span class="pl-k">.</span><span class="pl-c1">nthreads</span>(),         <span class="pl-c"><span class="pl-c">#</span> Julia threads</span>
<span class="pl-s"><span class="pl-pds">"</span>blas_threads<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> BLAS<span class="pl-k">.</span><span class="pl-c1">get_num_threads</span>(),     <span class="pl-c"><span class="pl-c">#</span> BLAS threads</span>
<span class="pl-s"><span class="pl-pds">"</span>blas_config<span class="pl-pds">"</span></span>  <span class="pl-k">=&gt;</span> BLAS<span class="pl-k">.</span><span class="pl-c1">get_config</span>(),          <span class="pl-c"><span class="pl-c">#</span> BLAS configuration</span>
<span class="pl-s"><span class="pl-pds">"</span>mem_free_GB<span class="pl-pds">"</span></span>  <span class="pl-k">=&gt;</span> Sys<span class="pl-k">.</span><span class="pl-c1">free_memory</span>() <span class="pl-k">/</span> (<span class="pl-c1">2</span><span class="pl-k">^</span><span class="pl-c1">30</span>)  <span class="pl-c"><span class="pl-c">#</span> free memory in GB</span></pre></div>
This can be done by a <code>remotecall_fetch</code> :
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="worker_info_i = remotecall_fetch(worker_info, i)"><pre>worker_info_i <span class="pl-k">=</span> <span class="pl-c1">remotecall_fetch</span>(worker_info, i)</pre></div>
</li>
</ol>
<h2 dir="auto"><a id="user-content-test-and-reliability" class="anchor" aria-hidden="true" href="#test-and-reliability"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Test and reliability</h2>
<p dir="auto">The functionalities are tests on a slurm cluster with Intel Xeon CPUs. We assume that <code>MKL.jl</code> is being used and by default <code>enable_MKL=true</code>. If you use open-blas, or you want to use it on a cluster with AMD CPUs, it is recommended to set <code>enable_MKL=false</code>.</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">You can install the package by running</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Pkg
Pkg.add(&quot;https://github.com/PDE2718/SlurmManagers.jl&quot;)"><pre><span class="pl-k">using</span> Pkg
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>https://github.com/PDE2718/SlurmManagers.jl<span class="pl-pds">"</span></span>)</pre></div>
<h2 dir="auto"><a id="user-content-example-of-usage" class="anchor" aria-hidden="true" href="#example-of-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example of usage</h2>
<h4 dir="auto"><a id="user-content-worker-setup" class="anchor" aria-hidden="true" href="#worker-setup"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Worker setup</h4>
<p dir="auto">First let's import some package. Please note that <code>MKL/LinearAlgebra</code> are imported everywhere implicitly when you use <code>SlurmManagers</code>. Other packages should be decorated by a <code>@everywhere</code> macro.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using MKL, LinearAlgebra
using Distributed
using SlurmManagers"><pre><span class="pl-k">using</span> MKL, LinearAlgebra
<span class="pl-k">using</span> Distributed
<span class="pl-k">using</span> SlurmManagers</pre></div>
<p dir="auto">Now, add the processes and set up the worker pool <code>wpool</code> by</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="addprocs_slurm(&quot;yourPartition&quot;; ntasks=8, cpus_per_task=12)
wpool = WorkerPool(workers())"><pre><span class="pl-c1">addprocs_slurm</span>(<span class="pl-s"><span class="pl-pds">"</span>yourPartition<span class="pl-pds">"</span></span>; ntasks<span class="pl-k">=</span><span class="pl-c1">8</span>, cpus_per_task<span class="pl-k">=</span><span class="pl-c1">12</span>)
wpool <span class="pl-k">=</span> <span class="pl-c1">WorkerPool</span>(<span class="pl-c1">workers</span>())</pre></div>
<p dir="auto">The test is done on a cluster where each node has two sockets <strong>Intel Xeon Gold 6240R × 2</strong>, <strong>24</strong> cores each, <strong>48</strong> cores in total. The slurm system automatically assigned 2 nodes, each running 4 tasks with 12 physical cores.</p>
<h4 dir="auto"><a id="user-content-check-the-workers" class="anchor" aria-hidden="true" href="#check-the-workers"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Check the workers</h4>
<p dir="auto">We can now interact with the master node and distribute our jobs dynamically! First let's check some information:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="remotecall_fetch(myid, 2) # return 2
remotecall_fetch(worker_info, 3) # return a Dict"><pre><span class="pl-c1">remotecall_fetch</span>(myid, <span class="pl-c1">2</span>) <span class="pl-c"><span class="pl-c">#</span> return 2</span>
<span class="pl-c1">remotecall_fetch</span>(worker_info, <span class="pl-c1">3</span>) <span class="pl-c"><span class="pl-c">#</span> return a Dict</span></pre></div>
<h4 dir="auto"><a id="user-content-define-a-job" class="anchor" aria-hidden="true" href="#define-a-job"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Define a job</h4>
<p dir="auto">Let's define a job <code>myfun</code> that requires some input arguments, let's say <code>x</code>. We just need to include it on each worker.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@everywhere begin
    function myfun(x::Real)
        N = 1000
        A = rand(N,N) + x*I |&gt; Symmetric
        t = @elapsed eigvals(A)
        return t
    end
end"><pre><span class="pl-c1">@everywhere</span> <span class="pl-k">begin</span>
    <span class="pl-k">function</span> <span class="pl-en">myfun</span>(x<span class="pl-k">::</span><span class="pl-c1">Real</span>)
        N <span class="pl-k">=</span> <span class="pl-c1">1000</span>
        A <span class="pl-k">=</span> <span class="pl-c1">rand</span>(N,N) <span class="pl-k">+</span> x<span class="pl-k">*</span>I <span class="pl-k">|&gt;</span> Symmetric
        t <span class="pl-k">=</span> <span class="pl-c1">@elapsed</span> <span class="pl-c1">eigvals</span>(A)
        <span class="pl-k">return</span> t
    <span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>
<h4 dir="auto"><a id="user-content-assign-a-job-to-a-worker" class="anchor" aria-hidden="true" href="#assign-a-job-to-a-worker"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Assign a job to a worker</h4>
<p dir="auto">Now we can get it down on any worker by <code>remotecall</code> and <code>fetch</code>. Or more simply by a <code>remotecall_fetch</code>. For example, we pass <code>x=5.</code> to worker 4 and wait it until it finishes its job and return the result:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="remotecall_fetch(myfun, 4, 5.) # return t, on the remote worker"><pre><span class="pl-c1">remotecall_fetch</span>(myfun, <span class="pl-c1">4</span>, <span class="pl-c1">5.</span>) <span class="pl-c"><span class="pl-c">#</span> return t, on the remote worker</span></pre></div>
<h4 dir="auto"><a id="user-content-assign-multiple-jobs-to-all-workers-pmap" class="anchor" aria-hidden="true" href="#assign-multiple-jobs-to-all-workers-pmap"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Assign multiple jobs to all workers. (<code>pmap</code>)</h4>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="xs = rand(200)

# 20 core local machine, limited to memory bridge
@elapsed myfun.(xs) # 14.27 s

# 8 worker / 12 cores each. =&gt; 96 cores in total
@elapsed @sync pmap(myfun, wpool, xs; batch_size=2) # 1.18 s"><pre>xs <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">200</span>)

<span class="pl-c"><span class="pl-c">#</span> 20 core local machine, limited to memory bridge</span>
<span class="pl-c1">@elapsed</span> <span class="pl-c1">myfun</span>.(xs) <span class="pl-c"><span class="pl-c">#</span> 14.27 s</span>

<span class="pl-c"><span class="pl-c">#</span> 8 worker / 12 cores each. =&gt; 96 cores in total</span>
<span class="pl-c1">@elapsed</span> <span class="pl-c1">@sync</span> <span class="pl-c1">pmap</span>(myfun, wpool, xs; batch_size<span class="pl-k">=</span><span class="pl-c1">2</span>) <span class="pl-c"><span class="pl-c">#</span> 1.18 s</span></pre></div>
</article></div>