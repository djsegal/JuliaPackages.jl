<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-forwarddiffchainrulesjl" class="anchor" aria-hidden="true" href="#forwarddiffchainrulesjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>ForwardDiffChainRules.jl</h1>
<p dir="auto"><a href="https://github.com/ThummeTo/ForwardDiffChainRules.jl/actions/workflows/Test.yml"><img src="https://github.com/ThummeTo/ForwardDiffChainRules.jl/actions/workflows/Test.yml/badge.svg" alt="Run Tests" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/ThummeTo/ForwardDiffChainRules.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/c108a2116486ec1f89b39820c635721fdd29af7c3360ea9f153464657ad5902b/68747470733a2f2f636f6465636f762e696f2f67682f5468756d6d65546f2f466f727761726444696666436861696e52756c65732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/ThummeTo/ForwardDiffChainRules.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a>
<a href="https://github.com/SciML/ColPrac"><img src="https://camo.githubusercontent.com/a6c1efcb19a957860ecb25966a730260b03d6e05380d0c27992ee7f9e3b1feb3/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f436f6c507261632d436f6e7472696275746f72277325323047756964652d626c756576696f6c6574" alt="ColPrac: Contributor's Guide on Collaborative Practices for Community Packages" data-canonical-src="https://img.shields.io/badge/ColPrac-Contributor's%20Guide-blueviolet" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-what-is-forwarddiffchainrulesjl" class="anchor" aria-hidden="true" href="#what-is-forwarddiffchainrulesjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>What is ForwardDiffChainRules.jl?</h2>
<p dir="auto"><a href="https://github.com/JuliaDiff/ForwardDiff.jl">ForwardDiff.jl</a> does not support <code>frule</code>s from <a href="https://github.com/JuliaDiff/ChainRulesCore.jl">ChainRulesCore.jl</a> by default. As a result, if you are creating custom AD-rules and want support for the most common AD-tools in Julia, you need to define three differentiation rules:</p>
<ul dir="auto">
<li><code>ChainRulesCore.rrule</code></li>
<li><code>ChainRulesCore.frule</code></li>
<li>an additional dispatch of your function for values of type <code>ForwardDiff.Dual</code>
Technically, the last two candidates aim both for forward sensitivities, so include the same differentiation rules. This is redundant code and an error prone coding task... and not necessary anymore!</li>
</ul>
<p dir="auto"><a href="https://github.com/ThummeTo/ForwardDiffChainRules.jl">ForwardDiffChainRules.jl</a> allows you to re-use the differentiation code defined in an existing <code>ChainRulesCore.frule</code> with only a few lines of code and without re-coding your differentiation rules.</p>
<h2 dir="auto"><a id="user-content-how-can-i-use-forwarddiffchainrulesjl" class="anchor" aria-hidden="true" href="#how-can-i-use-forwarddiffchainrulesjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>How can I use ForwardDiffChainRules.jl?</h2>
<p dir="auto">1. Open a Julia-REPL, switch to package mode using <code>]</code>, activate your preferred environment.</p>
<p dir="auto">2. Install <a href="https://github.com/ThummeTo/ForwardDiffChainRules.jl"><em>ForwardDiffChainRules.jl</em></a>:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="(@v1.6) pkg&gt; add ForwardDiffChainRules"><pre lang="julia-repl" class="notranslate"><code>(@v1.6) pkg&gt; add ForwardDiffChainRules
</code></pre></div>
<p dir="auto">3. If you want to check that everything works correctly, you can run the tests bundled with <a href="https://github.com/ThummeTo/ForwardDiffChainRules.jl"><em>ForwardDiffChainRules.jl</em></a>:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="(@v1.6) pkg&gt; test ForwardDiffChainRules"><pre lang="julia-repl" class="notranslate"><code>(@v1.6) pkg&gt; test ForwardDiffChainRules
</code></pre></div>
<p dir="auto">4. Have a look inside the <a href="https://github.com/ThummeTo/ForwardDiffChainRules.jl/tree/main/examples">examples folder</a>.</p>
<h2 dir="auto"><a id="user-content-how-can-i-add-a-dispatch-for-forwarddiff-based-on-an-existing-frule" class="anchor" aria-hidden="true" href="#how-can-i-add-a-dispatch-for-forwarddiff-based-on-an-existing-frule"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>How can I add a dispatch for ForwardDiff based on an existing <code>frule</code>?</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using ForwardDiffChainRules

function f1(x1, x2)
   # do whatever you want to do in your function
   return (x + 2y).^2
end

# define your frule for function f1 as usual
function ChainRulesCore.frule((_, Δx1, Δx2), ::typeof(f1), x1, x2)
   # this could be any code you want of course
   return f1(x1, x2), Δx1 + Δx2
end

# create a ForwardDiff-dispatch for scalar type `x1` and `x2`
@ForwardDiff_frule f1(x1::ForwardDiff.Dual, x2::ForwardDiff.Dual)

# create a ForwardDiff-dispatch for vector type `x1` and `x2`
@ForwardDiff_frule f1(x1::AbstractVector{&lt;:ForwardDiff.Dual}, x2::AbstractVector{&lt;:ForwardDiff.Dual})

# create a ForwardDiff-dispatch for matrix type `x1` and `x2`
@ForwardDiff_frule f1(x1::AbstractMatrix{&lt;:ForwardDiff.Dual}, x2::AbstractMatrix{&lt;:ForwardDiff.Dual})"><pre><span class="pl-k">using</span> ForwardDiffChainRules

<span class="pl-k">function</span> <span class="pl-en">f1</span>(x1, x2)
   <span class="pl-c"><span class="pl-c">#</span> do whatever you want to do in your function</span>
   <span class="pl-k">return</span> (x <span class="pl-k">+</span> <span class="pl-c1">2</span>y)<span class="pl-k">.</span><span class="pl-k">^</span><span class="pl-c1">2</span>
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> define your frule for function f1 as usual</span>
<span class="pl-k">function</span> ChainRulesCore<span class="pl-k">.</span><span class="pl-en">frule</span>((_, Δx1, Δx2), <span class="pl-k">::</span><span class="pl-c1">typeof</span>(f1), x1, x2)
   <span class="pl-c"><span class="pl-c">#</span> this could be any code you want of course</span>
   <span class="pl-k">return</span> <span class="pl-c1">f1</span>(x1, x2), Δx1 <span class="pl-k">+</span> Δx2
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> create a ForwardDiff-dispatch for scalar type `x1` and `x2`</span>
<span class="pl-c1">@ForwardDiff_frule</span> <span class="pl-c1">f1</span>(x1<span class="pl-k">::</span><span class="pl-c1">ForwardDiff.Dual</span>, x2<span class="pl-k">::</span><span class="pl-c1">ForwardDiff.Dual</span>)

<span class="pl-c"><span class="pl-c">#</span> create a ForwardDiff-dispatch for vector type `x1` and `x2`</span>
<span class="pl-c1">@ForwardDiff_frule</span> <span class="pl-c1">f1</span>(x1<span class="pl-k">::</span><span class="pl-c1">AbstractVector{&lt;:ForwardDiff.Dual}</span>, x2<span class="pl-k">::</span><span class="pl-c1">AbstractVector{&lt;:ForwardDiff.Dual}</span>)

<span class="pl-c"><span class="pl-c">#</span> create a ForwardDiff-dispatch for matrix type `x1` and `x2`</span>
<span class="pl-c1">@ForwardDiff_frule</span> <span class="pl-c1">f1</span>(x1<span class="pl-k">::</span><span class="pl-c1">AbstractMatrix{&lt;:ForwardDiff.Dual}</span>, x2<span class="pl-k">::</span><span class="pl-c1">AbstractMatrix{&lt;:ForwardDiff.Dual}</span>)</pre></div>
<h2 dir="auto"><a id="user-content-acknowledgement" class="anchor" aria-hidden="true" href="#acknowledgement"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Acknowledgement</h2>
<p dir="auto">This package is based on code from Mohamed Tarek (@mohamed82008) in his package <a href="https://github.com/JuliaNonconvex/NonconvexUtils.jl">NonconvexUtils.jl</a>. The initial discussion started on <a href="https://discourse.julialang.org/t/chainrulescore-and-forwarddiff/61705" rel="nofollow">discourse.julialang.org</a>. With the aim of providing this functionality as light-weigth as possible, this package was created.</p>
</article></div>