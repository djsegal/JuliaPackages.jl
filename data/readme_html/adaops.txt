<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-adaops" class="anchor" aria-hidden="true" href="#adaops"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>AdaOPS</h1>
<p><a href="https://travis-ci.com/LAMDA-POMDP/AdaOPS.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/0db52c725cd14de4830d03dd595f2ac35a7b00bb17b031ff4d3ee49c3c4f6e84/68747470733a2f2f7472617669732d63692e636f6d2f4c414d44412d504f4d44502f4164614f50532e6a6c2e7376673f6272616e63683d6d61696e" alt="Build Status" data-canonical-src="https://travis-ci.com/LAMDA-POMDP/AdaOPS.jl.svg?branch=main" style="max-width:100%;"></a></p>
<p><a href="https://coveralls.io/github/LAMDA-POMDP/AdaOPS.jl?branch=main" rel="nofollow"><img src="https://camo.githubusercontent.com/f3136e5f141977517642d5f61b374a073ca9a5aefc4032402ca1dfaf862a1edc/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f4c414d44412d504f4d44502f4164614f50532e6a6c2f62616467652e7376673f6272616e63683d6d61696e26736572766963653d676974687562" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/LAMDA-POMDP/AdaOPS.jl/badge.svg?branch=main&amp;service=github" style="max-width:100%;"></a></p>
<p><a href="http://codecov.io/github/LAMDA-POMDP/AdaOPS.jl?branch=main" rel="nofollow"><img src="https://camo.githubusercontent.com/badabcd85314eae71e6ff641694127ca5027b40df6e59e0868d9c1a8cc918486/687474703a2f2f636f6465636f762e696f2f6769746875622f4c414d44412d504f4d44502f4164614f50532e6a6c2f636f7665726167652e7376673f6272616e63683d6d61696e" alt="codecov.io" data-canonical-src="http://codecov.io/github/LAMDA-POMDP/AdaOPS.jl/coverage.svg?branch=main" style="max-width:100%;"></a></p>
<p>An implementation of the AdaOPS (Adaptive Online Packing-guided Search), which is an online POMDP Solver used to solve problems defined with the <a href="https://github.com/JuliaPOMDP/POMDPs.jl">POMDPs.jl generative interface</a>.</p>
<p>If you are trying to use this package and require more documentation, please file an issue!</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Pkg
pkg&gt; add &quot;POMDPs&quot;
pkg&gt; registry add &quot;https://github.com/JuliaPOMDP/Registry.git&quot;
pkg&gt; add AdaOPS
"><pre><span class="pl-k">using</span> Pkg
pkg<span class="pl-k">&gt;</span> add <span class="pl-s"><span class="pl-pds">"</span>POMDPs<span class="pl-pds">"</span></span>
pkg<span class="pl-k">&gt;</span> registry add <span class="pl-s"><span class="pl-pds">"</span>https://github.com/JuliaPOMDP/Registry.git<span class="pl-pds">"</span></span>
pkg<span class="pl-k">&gt;</span> add AdaOPS</pre></div>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using POMDPs, POMDPModels, POMDPSimulators, AdaOPS

pomdp = TigerPOMDP()

solver = AdaOPSSolver(bounds=IndependentBounds(-20.0, 0.0))
planner = solve(solver, pomdp)

for (s, a, o) in stepthrough(pomdp, planner, &quot;s,a,o&quot;, max_steps=10)
    println(&quot;State was $s,&quot;)
    println(&quot;action $a was taken,&quot;)
    println(&quot;and observation $o was received.\n&quot;)
end
"><pre><span class="pl-k">using</span> POMDPs, POMDPModels, POMDPSimulators, AdaOPS

pomdp <span class="pl-k">=</span> <span class="pl-c1">TigerPOMDP</span>()

solver <span class="pl-k">=</span> <span class="pl-c1">AdaOPSSolver</span>(bounds<span class="pl-k">=</span><span class="pl-c1">IndependentBounds</span>(<span class="pl-k">-</span><span class="pl-c1">20.0</span>, <span class="pl-c1">0.0</span>))
planner <span class="pl-k">=</span> <span class="pl-c1">solve</span>(solver, pomdp)

<span class="pl-k">for</span> (s, a, o) <span class="pl-k">in</span> <span class="pl-c1">stepthrough</span>(pomdp, planner, <span class="pl-s"><span class="pl-pds">"</span>s,a,o<span class="pl-pds">"</span></span>, max_steps<span class="pl-k">=</span><span class="pl-c1">10</span>)
    <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>State was <span class="pl-v">$s</span>,<span class="pl-pds">"</span></span>)
    <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>action <span class="pl-v">$a</span> was taken,<span class="pl-pds">"</span></span>)
    <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>and observation <span class="pl-v">$o</span> was received.<span class="pl-cce">\n</span><span class="pl-pds">"</span></span>)
<span class="pl-k">end</span></pre></div>
<p>For minimal examples of problem implementations, see <a href="https://github.com/JuliaPOMDP/BasicPOMCP.jl/blob/master/notebooks/Minimal_Example.ipynb">this notebook</a> and <a href="http://juliapomdp.github.io/POMDPs.jl/latest/generative/" rel="nofollow">the POMDPs.jl generative docs</a>.</p>
<h2><a id="user-content-solver-options" class="anchor" aria-hidden="true" href="#solver-options"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Solver Options</h2>
<p>Solver options can be found in the <code>AdaOPSSolver</code> docstring and accessed using <a href="https://docs.julialang.org/en/v1/manual/documentation/#Accessing-Documentation-1" rel="nofollow">Julia's built in documentation system</a> (or directly in the <a href="/src/AdaOPS.jl">Solver source code</a>). Each option has its own docstring and can be set with a keyword argument in the <code>AdaOPSSolver</code> constructor.</p>
<h3><a id="user-content-belief-packing" class="anchor" aria-hidden="true" href="#belief-packing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Belief Packing</h3>
<h4><a id="user-content-delta" class="anchor" aria-hidden="true" href="#delta"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>delta</h4>
<p>A Î´-packing of observation branches will be generated, i.e., the belief nodes with L1 distance less than delta are merged.</p>
<h3><a id="user-content-adaptive-particle-filter" class="anchor" aria-hidden="true" href="#adaptive-particle-filter"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Adaptive Particle Filter</h3>
<p>The core idea of the adaptive particle filter is that it can change the number of particles adaptively and use more particles to estimate the belief when needed.</p>
<h4><a id="user-content-grid" class="anchor" aria-hidden="true" href="#grid"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>grid</h4>
<p><code>grid</code> is used to split the state space into multidimensional bins, so that KLD-Sampling can estimate the particle numbers according to the number of bins occupied.
First, a function for converting a state to a multidimensional vector should be implemented, i.e., <code>Base.convert(::Type{SVector{D, Float64}},::S)</code>, where <code>D</code> is the dimension of the resulted vector.
Then, we define a StateGrid to discretize or split the state space.
A StateGrid is consist of a vector of cutpoints in each dimension. These cutpoints divide the whole space into small tiles. In each dimension, a number of intervals constitute the grid, and each of these intervals is left-closed and right-open with the endpoints be cutpoints with the exception of the left-most interval.
For example, a StateGrid can be defined as <code>StateGrid([dim1_cutpoints], [dim2_cutpoints], [dim3_cutpoints])</code>.
All states lie in one tile will be taken as the same.
With the number of tiles (bins) occupied, we can estimate the number of particles using KLD-Sampling.</p>
<h5><a id="user-content-max_occupied_bins" class="anchor" aria-hidden="true" href="#max_occupied_bins"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>max_occupied_bins</h5>
<p><code>max_occupied_bins</code> is the maximum number of bins occupied by a belief. Normally, it is exactly the grid size. However, in some domains, such as Roomba, only states within the room is accessible, and the corresponding bins will never be occupied.</p>
<h5><a id="user-content-min_occupied_bins" class="anchor" aria-hidden="true" href="#min_occupied_bins"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>min_occupied_bins</h5>
<p><code>min_occupied_bins</code> is the minimum number of bins occupied by a belief. Normally, it default to 2. A belief occupying <code>min_occupied_bins</code> tiles will be estimated with <code>m_min</code> particles. Increasing <code>min_occupied_bins</code> indicates that a belief need to occupy more bins so as to be estimated by the same amount of particles.</p>
<h4><a id="user-content-m_min" class="anchor" aria-hidden="true" href="#m_min"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>m_min</h4>
<p><code>m_min</code> is the minimum number of particles used for approximating beliefs.</p>
<h4><a id="user-content-m_max" class="anchor" aria-hidden="true" href="#m_max"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>m_max</h4>
<p><code>m_max</code> is the maximum number of particles used for approximating a belief. Normally, <code>m_max</code> is set to be big enough so that KLD-Sampling determines the number of particles used. When the KLD-Sampling is disabled, i.e. <code>grid=StateGrid{0}([])</code>, <code>m_max</code> will be sampled during the resampling.</p>
<h4><a id="user-content-zeta" class="anchor" aria-hidden="true" href="#zeta"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>zeta</h4>
<p><code>zeta</code> is the target error when estimating a belief. Spcifically, we use KLD Sampling to calculate the number of particles needed, where <code>zeta</code> is the targe Kullback-Leibler divergence between the estimated belief and the true belief. In AdaOPS, <code>zeta</code> is automatically adjusted according to the minimum number of bins occupied such that the minimum number of particles KLD-Sampling method suggests is exactly <code>m_min</code>.</p>
<h3><a id="user-content-bounds" class="anchor" aria-hidden="true" href="#bounds"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Bounds</h3>
<h4><a id="user-content-dependent-bounds" class="anchor" aria-hidden="true" href="#dependent-bounds"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Dependent bounds</h4>
<p>The bound passed into <code>AdaOPSSolver</code> can be a function in the form of <code>lower_bound, upper_bound = f(pomdp, wpf_belief)</code>, or any other objects for which a <code>AdaOPS.bounds(obj::OBJECT, pomdp::POMDP, b::WPFBelief, max_depth::Int, bounds_warning::Bool)</code> function is implemented.</p>
<h4><a id="user-content-independent-bounds" class="anchor" aria-hidden="true" href="#independent-bounds"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Independent bounds</h4>
<p>In most cases, the recommended way to specify bounds is with an <code>IndependentBounds</code> object, i.e.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="AdaOPSSolver(bounds=IndependentBounds(lower, upper))
"><pre><span class="pl-c1">AdaOPSSolver</span>(bounds<span class="pl-k">=</span><span class="pl-c1">IndependentBounds</span>(lower, upper))</pre></div>
<p>where <code>lower</code> and <code>upper</code> are either a number, a function or some other objects (see below).</p>
<p>Often, the lower bound is calculated with a default policy, this can be accomplished using a <code>PORollout</code>, <code>FORollout</code> or <code>RolloutEstimator</code>. For the in-depth details, please refer to <a href="https://github.com/JuliaPOMDP/BasicPOMCP.jl/blob/master/src/rollout.jl">BasicPOMCP</a>. Note that when mixing the <code>Rollout</code> structs from this package with those from <code>BasicPOMCP</code>, you should prefix the struct name with module name.</p>
<p>Both the lower and upper bounds can be initialized with value estimations using a <code>FOValue</code> or <code>POValue</code>.
<code>FOValue</code> support any <code>offline MDP</code> <code>Solver</code> or <code>Policy</code>. <code>POValue</code> support any <code>offline POMDP</code> <code>Solver</code> or <code>Policy</code>.</p>
<p>If <code>lower</code> or <code>upper</code> is a function, it should handle two arguments. The first is the <code>POMDP</code> object and the second is the <code>WPFBelief</code>. To access the state particles in a <code>WPFBelief</code> <code>b</code>, use <code>particles(b)</code>. To access the corresponding weights of particles in a <code>WPFBelief</code> <code>b</code>, use <code>weights(b)</code>. All <code>AbstractParticleBelief</code> APIs are supported for <code>WPFBelief</code>. More details can be found in the <a href="/src/wpf_belief.jl">solver source code</a>.</p>
<p>If an object <code>o</code> is passed in, <code>AdaOPS.bound(o, pomdp::POMDP, b::WPFBelief, max_depth::Int)</code> will be called.</p>
<p>In most cases, the <code>check_terminal</code> and <code>consistency_fix_thresh</code> keyword arguments of <code>IndependentBounds</code> should be used to add robustness (see the <code>IndependentBounds</code> docstring for more info).
When using rollout-base bounds, you can specify <code>max_depth</code> keyword argument to set the max depth of rollout.</p>
<h5><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example</h5>
<p>For the <code>BabyPOMDP</code> from <code>POMDPModels</code>, bounds setup might look like this:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using POMDPModels
using POMDPPolicies
using BasicPOMCP

always_feed = FunctionPolicy(b-&gt;true)
lower = FORollout(always_feed)

function upper(pomdp::BabyPOMDP, b::WPFBelief)
    if all(s==true for s in particles(b)) # all particles are hungry
        return pomdp.r_hungry # the baby is hungry this time, but then becomes full magically and stays that way forever
    else
        return 0.0 # the baby magically stays full forever
    end
end

solver = AdaOPSSolver(bounds=IndependentBounds(lower, upper))
"><pre><span class="pl-k">using</span> POMDPModels
<span class="pl-k">using</span> POMDPPolicies
<span class="pl-k">using</span> BasicPOMCP

always_feed <span class="pl-k">=</span> <span class="pl-c1">FunctionPolicy</span>(b<span class="pl-k">-&gt;</span><span class="pl-c1">true</span>)
lower <span class="pl-k">=</span> <span class="pl-c1">FORollout</span>(always_feed)

<span class="pl-k">function</span> <span class="pl-en">upper</span>(pomdp<span class="pl-k">::</span><span class="pl-c1">BabyPOMDP</span>, b<span class="pl-k">::</span><span class="pl-c1">WPFBelief</span>)
    <span class="pl-k">if</span> <span class="pl-c1">all</span>(s<span class="pl-k">==</span><span class="pl-c1">true</span> <span class="pl-k">for</span> s <span class="pl-k">in</span> <span class="pl-c1">particles</span>(b)) <span class="pl-c"><span class="pl-c">#</span> all particles are hungry</span>
        <span class="pl-k">return</span> pomdp<span class="pl-k">.</span>r_hungry <span class="pl-c"><span class="pl-c">#</span> the baby is hungry this time, but then becomes full magically and stays that way forever</span>
    <span class="pl-k">else</span>
        <span class="pl-k">return</span> <span class="pl-c1">0.0</span> <span class="pl-c"><span class="pl-c">#</span> the baby magically stays full forever</span>
    <span class="pl-k">end</span>
<span class="pl-k">end</span>

solver <span class="pl-k">=</span> <span class="pl-c1">AdaOPSSolver</span>(bounds<span class="pl-k">=</span><span class="pl-c1">IndependentBounds</span>(lower, upper))</pre></div>
<h2><a id="user-content-visualization" class="anchor" aria-hidden="true" href="#visualization"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Visualization</h2>
<p><a href="https://github.com/sisl/D3Trees.jl">D3Trees.jl</a> can be used to visualize the search tree, for example</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using POMDPs, POMDPModels, POMDPModelTools, D3Trees, AdaOPS

pomdp = TigerPOMDP()

solver = AdaOPSSolver(bounds=(-20.0, 0.0), tree_in_info=true)
planner = solve(solver, pomdp)
b0 = initialstate(pomdp)

a, info = action_info(planner, b0)
inchrome(D3Tree(info[:tree], init_expand=5))
"><pre><span class="pl-k">using</span> POMDPs, POMDPModels, POMDPModelTools, D3Trees, AdaOPS

pomdp <span class="pl-k">=</span> <span class="pl-c1">TigerPOMDP</span>()

solver <span class="pl-k">=</span> <span class="pl-c1">AdaOPSSolver</span>(bounds<span class="pl-k">=</span>(<span class="pl-k">-</span><span class="pl-c1">20.0</span>, <span class="pl-c1">0.0</span>), tree_in_info<span class="pl-k">=</span><span class="pl-c1">true</span>)
planner <span class="pl-k">=</span> <span class="pl-c1">solve</span>(solver, pomdp)
b0 <span class="pl-k">=</span> <span class="pl-c1">initialstate</span>(pomdp)

a, info <span class="pl-k">=</span> <span class="pl-c1">action_info</span>(planner, b0)
<span class="pl-c1">inchrome</span>(<span class="pl-c1">D3Tree</span>(info[<span class="pl-c1">:tree</span>], init_expand<span class="pl-k">=</span><span class="pl-c1">5</span>))</pre></div>
<p>will create an interactive tree.</p>
<h2><a id="user-content-analysis" class="anchor" aria-hidden="true" href="#analysis"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Analysis</h2>
<p>Two utilities, namely <code>info_analysis</code> and <code>hist_analysis</code>, are provided for getting a sense of how the algorithm is working.
<code>info_analysis</code> takes the infomation returned from <code>action_info(planner, b0)</code>. It will first visualize the tree if the <code>tree_in_info</code> option is turned on. Then it will show stats such as number nodes expanded, total explorations, average observation branches, and so on. <code>hist_analysis</code> takes the <code>hist</code> from <code>HistoryRecorder</code> simulator. It will show similar stats as <code>info_analysis</code> but in the form of figures. It should be noted that <code>HistoryRecoder</code> will store the tree of each single step, which makes it memory-intensive. An example is shown as follows.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using POMDPs, AdaOPS, RockSample, POMDPSimulators, ParticleFilters, POMDPModelTools

m = RockSamplePOMDP(11, 11)

b0 = initialstate(m)
s0 = rand(b0)

bound = AdaOPS.IndependentBounds(FORollout(RSExitSolver()), FOValue(RSMDPSolver()), check_terminal=true, consistency_fix_thresh=1e-5)

solver = AdaOPSSolver(bounds=bound,
                        delta=0.3,
                        m_min=30,
                        m_max=200,
                        tree_in_info=true,
                        num_b=10_000
                        )

adaops = solve(solver, m)
a, info = action_info(adaops, b0)
info_analysis(info)

num_particles = 30000
@time hist = simulate(HistoryRecorder(max_steps=90), m, adaops, SIRParticleFilter(m, num_particles), b0, s0)
hist_analysis(hist)
@show undiscounted_reward(hist)
"><pre><span class="pl-k">using</span> POMDPs, AdaOPS, RockSample, POMDPSimulators, ParticleFilters, POMDPModelTools

m <span class="pl-k">=</span> <span class="pl-c1">RockSamplePOMDP</span>(<span class="pl-c1">11</span>, <span class="pl-c1">11</span>)

b0 <span class="pl-k">=</span> <span class="pl-c1">initialstate</span>(m)
s0 <span class="pl-k">=</span> <span class="pl-c1">rand</span>(b0)

bound <span class="pl-k">=</span> AdaOPS<span class="pl-k">.</span><span class="pl-c1">IndependentBounds</span>(<span class="pl-c1">FORollout</span>(<span class="pl-c1">RSExitSolver</span>()), <span class="pl-c1">FOValue</span>(<span class="pl-c1">RSMDPSolver</span>()), check_terminal<span class="pl-k">=</span><span class="pl-c1">true</span>, consistency_fix_thresh<span class="pl-k">=</span><span class="pl-c1">1e-5</span>)

solver <span class="pl-k">=</span> <span class="pl-c1">AdaOPSSolver</span>(bounds<span class="pl-k">=</span>bound,
                        delta<span class="pl-k">=</span><span class="pl-c1">0.3</span>,
                        m_min<span class="pl-k">=</span><span class="pl-c1">30</span>,
                        m_max<span class="pl-k">=</span><span class="pl-c1">200</span>,
                        tree_in_info<span class="pl-k">=</span><span class="pl-c1">true</span>,
                        num_b<span class="pl-k">=</span><span class="pl-c1">10_000</span>
                        )

adaops <span class="pl-k">=</span> <span class="pl-c1">solve</span>(solver, m)
a, info <span class="pl-k">=</span> <span class="pl-c1">action_info</span>(adaops, b0)
<span class="pl-c1">info_analysis</span>(info)

num_particles <span class="pl-k">=</span> <span class="pl-c1">30000</span>
<span class="pl-c1">@time</span> hist <span class="pl-k">=</span> <span class="pl-c1">simulate</span>(<span class="pl-c1">HistoryRecorder</span>(max_steps<span class="pl-k">=</span><span class="pl-c1">90</span>), m, adaops, <span class="pl-c1">SIRParticleFilter</span>(m, num_particles), b0, s0)
<span class="pl-c1">hist_analysis</span>(hist)
<span class="pl-c1">@show</span> <span class="pl-c1">undiscounted_reward</span>(hist)</pre></div>
</article></div>