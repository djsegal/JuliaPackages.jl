<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-arnoldimethodtransformations" class="anchor" aria-hidden="true" href="#arnoldimethodtransformations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>ArnoldiMethodTransformations</h1>
<p dir="auto">A package for easily interfacing with <a href="https://github.com/haampie/ArnoldiMethod.jl">ArnoldiMethod</a>, using the suggested <a href="https://haampie.github.io/ArnoldiMethod.jl/stable/usage/02_spectral_transformations.html" rel="nofollow">transformations</a> suggested in the <a href="https://haampie.github.io/ArnoldiMethod.jl/stable/index.html" rel="nofollow">documentation</a>.</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">In REPL, type either <code>] add ArnoldiMethodTransformations</code> or</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Pkg
Pkg.add(&quot;ArnoldiMethodTransformations&quot;)"><pre><span class="pl-k">using</span> Pkg
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>ArnoldiMethodTransformations<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">This package mainly extends some methods of <a href="https://github.com/haampie/ArnoldiMethod.jl">ArnoldiMethod</a>, which needs to be separately installed.
It exports three constants: <code>USOLVER</code>, <code>PSOLVER</code>, and <code>MSOLVER</code>, used to indicate whether to use UMFPACK, Pardiso, or MUMPS.</p>
<h2 dir="auto"><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example</h2>
<p dir="auto">Ordinary eigenvalue problem <code>Ax=λx</code></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using LinearAlgebra
using ArnoldiMethod
using ArnoldiMethodTransformations

# construct fixed eval matrix in random basis
D = diagm(0=&gt;[0,1,2,3,4,5,6,7,8,9])
S = randn(10,10)
A = S\D*S

# find eigenpairs closest to 5.001 (cannot be 5 as algorithm is unstable if σ is exactly an eval)
σ = 5.001
decomp, hist = partialschur(A,σ)

# get evecs
λ, v = partialeigen(decomp,σ)

display(λ)
norm(A*v-v*diagm(0=&gt;λ))
# should be ~1e-11 or smaller"><pre><span class="pl-k">using</span> LinearAlgebra
<span class="pl-k">using</span> ArnoldiMethod
<span class="pl-k">using</span> ArnoldiMethodTransformations

<span class="pl-c"><span class="pl-c">#</span> construct fixed eval matrix in random basis</span>
D <span class="pl-k">=</span> <span class="pl-c1">diagm</span>(<span class="pl-c1">0</span><span class="pl-k">=&gt;</span>[<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>,<span class="pl-c1">4</span>,<span class="pl-c1">5</span>,<span class="pl-c1">6</span>,<span class="pl-c1">7</span>,<span class="pl-c1">8</span>,<span class="pl-c1">9</span>])
S <span class="pl-k">=</span> <span class="pl-c1">randn</span>(<span class="pl-c1">10</span>,<span class="pl-c1">10</span>)
A <span class="pl-k">=</span> S<span class="pl-k">\</span>D<span class="pl-k">*</span>S

<span class="pl-c"><span class="pl-c">#</span> find eigenpairs closest to 5.001 (cannot be 5 as algorithm is unstable if σ is exactly an eval)</span>
σ <span class="pl-k">=</span> <span class="pl-c1">5.001</span>
decomp, hist <span class="pl-k">=</span> <span class="pl-c1">partialschur</span>(A,σ)

<span class="pl-c"><span class="pl-c">#</span> get evecs</span>
λ, v <span class="pl-k">=</span> <span class="pl-c1">partialeigen</span>(decomp,σ)

<span class="pl-c1">display</span>(λ)
<span class="pl-c1">norm</span>(A<span class="pl-k">*</span>v<span class="pl-k">-</span>v<span class="pl-k">*</span><span class="pl-c1">diagm</span>(<span class="pl-c1">0</span><span class="pl-k">=&gt;</span>λ))
<span class="pl-c"><span class="pl-c">#</span> should be ~1e-11 or smaller</span></pre></div>
<p dir="auto">Generalized eigenvalue problem <code>Ax=λBx</code></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using LinearAlgebra
using ArnoldiMethod
using ArnoldiMethodTransformations

# construct fixed eval matrix in random basis
A = rand(ComplexF64,10,10)
B = rand(ComplexF64,10,10)

# find eigenpairs closest to .5
σ = .5
decomp, hist = partialschur(A,B,σ)

# get evecs
λ, v = partialeigen(decomp,σ)

display(λ)
norm(A*v-B*v*diagm(0=&gt;λ))
# should be ~1e-14 or smaller"><pre><span class="pl-k">using</span> LinearAlgebra
<span class="pl-k">using</span> ArnoldiMethod
<span class="pl-k">using</span> ArnoldiMethodTransformations

<span class="pl-c"><span class="pl-c">#</span> construct fixed eval matrix in random basis</span>
A <span class="pl-k">=</span> <span class="pl-c1">rand</span>(ComplexF64,<span class="pl-c1">10</span>,<span class="pl-c1">10</span>)
B <span class="pl-k">=</span> <span class="pl-c1">rand</span>(ComplexF64,<span class="pl-c1">10</span>,<span class="pl-c1">10</span>)

<span class="pl-c"><span class="pl-c">#</span> find eigenpairs closest to .5</span>
σ <span class="pl-k">=</span> .<span class="pl-c1">5</span>
decomp, hist <span class="pl-k">=</span> <span class="pl-c1">partialschur</span>(A,B,σ)

<span class="pl-c"><span class="pl-c">#</span> get evecs</span>
λ, v <span class="pl-k">=</span> <span class="pl-c1">partialeigen</span>(decomp,σ)

<span class="pl-c1">display</span>(λ)
<span class="pl-c1">norm</span>(A<span class="pl-k">*</span>v<span class="pl-k">-</span>B<span class="pl-k">*</span>v<span class="pl-k">*</span><span class="pl-c1">diagm</span>(<span class="pl-c1">0</span><span class="pl-k">=&gt;</span>λ))
<span class="pl-c"><span class="pl-c">#</span> should be ~1e-14 or smaller</span></pre></div>
<p dir="auto">Note that in both cases, <code>ArnoldiMethod</code> needed to be explicitly brought into scope with <code>using</code>.</p>
<h2 dir="auto"><a id="user-content-methods" class="anchor" aria-hidden="true" href="#methods"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Methods</h2>
<p dir="auto">This package exports none of its own methods, but extends <code>partialschur</code>  and <code>partialeigen</code> from <a href="https://github.com/haampie/ArnoldiMethod.jl">ArnoldiMethod</a>.</p>
<p dir="auto">It does export three constants: <code>USOLVER</code>, <code>PSOLVER</code>, <code>MSOLVER</code>.</p>
<hr>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="`partialschur(A, [B], σ; [diag_inv_B, lupack=USOLVER, kwargs...]) -&gt; decomp, history`"><pre class="notranslate"><code>`partialschur(A, [B], σ; [diag_inv_B, lupack=USOLVER, kwargs...]) -&gt; decomp, history`
</code></pre></div>
<p dir="auto">Partial Schur decomposition of <code>A</code>, with shift <code>σ</code> and mass matrix <code>B</code>, solving <code>A*v=(λ-σ)*B*v</code> for its smallest eigenvalues.</p>
<p dir="auto">Keyword <code>diag_inv_B</code> defaults to <code>true</code> if <code>B</code> is both diagonal and invertible. This enables
a simplified shift-and-invert scheme.</p>
<p dir="auto">Keyword <code>lupack</code> determines what linear algebra library to use. Options are <code>USOLVER</code> (UMFPACK, the default), <code>PSOLVER</code> (Pardiso), and the default <code>MSOLVER</code> (MUMPS).</p>
<p dir="auto">The relevant solver must be explicitly loaded at the top level to use it (e.g., <code>using Pardiso</code> must be called before <code>lupack=PSOLVER</code> can be used).</p>
<p dir="auto">For other keywords, see <code>ArnoldiMethod.partialschur</code></p>
<hr>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="partialeigen(decomp, σ) -&gt; λ, v"><pre class="notranslate"><code>partialeigen(decomp, σ) -&gt; λ, v
</code></pre></div>
<p dir="auto">Transforms a partial Schur decomposition into an eigendecomposition, outputting evals <code>λ</code> and evecs <code>v</code>.
It undoes the shift-and-invert of the eigenvalues by <code>σ</code>.</p>
<hr>
<p dir="auto">Note that the shifting to an exact eigenvalue poses a problem, see note on <a href="https://haampie.github.io/ArnoldiMethod.jl/stable/theory.html#Purification-1" rel="nofollow">purification</a>.</p>
<h2 dir="auto"><a id="user-content-linear-solvers" class="anchor" aria-hidden="true" href="#linear-solvers"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Linear Solvers</h2>
<p dir="auto">There are two solvers currently available for use in this package: UMFPACK (via <code>Base.LinAlg</code>), and <a href="https://pardiso-project.org" rel="nofollow">Pardiso</a> (via <a href="https://github.com/JuliaSparse/Pardiso.jl"><code>Pardiso</code></a>).</p>
<p dir="auto"><del>Pardiso is often faster, and uses significantly less memory, but require separate installation, which not all users will want to do. This optional dependency is implemented with <a href="https://github.com/MikeInnes/Requires.jl">Requires.jl</a>.</del></p>
<p dir="auto">The default solver is UMFPACK. To use another solver, such as Pardiso (assuming it is installed), use the keyword <code>:lupack=PSOLVER</code> in <code>partialschur</code>.</p>
<p dir="auto">To do: add <a href="http://mumps.enseeiht.fr" rel="nofollow">MUMPS</a> to the available solvers.</p>
</article></div>