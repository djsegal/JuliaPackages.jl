<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-wignerfamilies" class="anchor" aria-hidden="true" href="#wignerfamilies"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>WignerFamilies</h1>
<p dir="auto"><a href="https://xzackli.github.io/WignerFamilies.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/xzackli/WignerFamilies.jl/actions"><img src="https://github.com/xzackli/WignerFamilies.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/xzackli/WignerFamilies.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/00099dfae72c2d85d2620622ba6c0e0d887755d8b090fd7f3fe200386e888ff5/68747470733a2f2f636f6465636f762e696f2f67682f787a61636b6c692f5769676e657246616d696c6965732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/xzackli/WignerFamilies.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>


<p dir="auto">This package implements methods described in <a href="https://journals.aps.org/pre/abstract/10.1103/PhysRevE.57.7274" rel="nofollow">Luscombe and Luban 1998</a>, based on the work of <a href="https://aip.scitation.org/doi/10.1063/1.522426" rel="nofollow">Schulten and Gordon 1961</a>, for generating families of Wigner 3j and 6j symbols by recurrence relation. These exact methods are orders of magnitude more efficient than strategies like <a href="https://github.com/Jutho/WignerSymbols.jl">prime factorization</a> for problems which require every non-trivial symbol in a family, and really shine for large quantum numbers. WignerFamilies.jl is thread-safe and <strong>very fast</strong>, beating the standard Fortran routine DRC3JJ from SLATEC by a factor of 2-4 (see <a href="https://nbviewer.jupyter.org/github/xzackli/WignerFamilies.jl/blob/master/test/benchmarks.ipynb" rel="nofollow">notebook</a>).</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Pkg
Pkg.add(&quot;WignerFamilies&quot;)"><pre><span class="pl-k">using</span> Pkg
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>WignerFamilies<span class="pl-pds">"</span></span>)</pre></div>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<p dir="auto">WignerFamilies.jl currently computes the nontrivial 3j symbols over <code>j</code> with the other
quantum numbers fixed, in the family of symbols,</p>
<p align="center" dir="auto">
<a target="_blank" rel="noopener noreferrer" href="docs/src/assets/fsymbol.png"><img width="40%" src="docs/src/assets/fsymbol.png" style="max-width: 100%;"></a>
</p>
<p dir="auto">It exposes <code>wigner3j_f(j₂, j₃, m₂, m₃)</code> which returns a simple wrapper around a vector of
the type<code>WignerSymbolVector</code>. This vector contains the computed symbols, indexed by the
quantum number <code>j</code>. The type supports
<a href="https://github.com/sostock/HalfIntegers.jl">half-integer</a> quantum numbers as indices.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using WignerFamilies

# wigner3j for all j fixing j₂=100, j₃=60, m₂=70, m₃=-55, m₁=-m₂-m₃
w3j = wigner3j_f(100, 60, 70, -55) 
js = collect(eachindex(w3j))  # indices are the quantum numbers
plot(js, w3j.symbols)   # you can get the underlying array with w3j.symbols"><pre><span class="pl-k">using</span> WignerFamilies

<span class="pl-c"><span class="pl-c">#</span> wigner3j for all j fixing j₂=100, j₃=60, m₂=70, m₃=-55, m₁=-m₂-m₃</span>
w3j <span class="pl-k">=</span> <span class="pl-c1">wigner3j_f</span>(<span class="pl-c1">100</span>, <span class="pl-c1">60</span>, <span class="pl-c1">70</span>, <span class="pl-k">-</span><span class="pl-c1">55</span>) 
js <span class="pl-k">=</span> <span class="pl-c1">collect</span>(<span class="pl-c1">eachindex</span>(w3j))  <span class="pl-c"><span class="pl-c">#</span> indices are the quantum numbers</span>
<span class="pl-c1">plot</span>(js, w3j<span class="pl-k">.</span>symbols)   <span class="pl-c"><span class="pl-c">#</span> you can get the underlying array with w3j.symbols</span></pre></div>
<p dir="auto">This generates the symbols in Figure 1 of Luscombe and Luban 1998.</p>
<p align="center" dir="auto">
<a target="_blank" rel="noopener noreferrer" href="docs/src/assets/luscombe_and_luban_1998.svg"><img width="90%" src="docs/src/assets/luscombe_and_luban_1998.svg" style="max-width: 100%;"></a>
</p>
<h2 dir="auto"><a id="user-content-advanced-use" class="anchor" aria-hidden="true" href="#advanced-use"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Advanced Use</h2>
<p dir="auto">One can compute symbols in a fully non-allocating way by using the mutating <code>wigner3j_f!</code>. This requires
one to initialize a <code>WignerF</code> struct describing the problem, put a wrapper around the piece of memory
you want to deposit the symbols using WignerSymbolVector, and then calling the mutating method.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="j₂, j₃, m₂, m₃ = 100, 100, -2, 2
w = WignerF(Float64, j₂, j₃, m₂, m₃)
buffer = zeros(Float64, length(w.nₘᵢₙ:w.nₘₐₓ))
w3j = WignerSymbolVector(buffer, w.nₘᵢₙ:w.nₘₐₓ)
WignerFamilies.wigner3j_f!(w, w3j)"><pre>j₂, j₃, m₂, m₃ <span class="pl-k">=</span> <span class="pl-c1">100</span>, <span class="pl-c1">100</span>, <span class="pl-k">-</span><span class="pl-c1">2</span>, <span class="pl-c1">2</span>
w <span class="pl-k">=</span> <span class="pl-c1">WignerF</span>(Float64, j₂, j₃, m₂, m₃)
buffer <span class="pl-k">=</span> <span class="pl-c1">zeros</span>(Float64, <span class="pl-c1">length</span>(w<span class="pl-k">.</span>nₘᵢₙ<span class="pl-k">:</span>w<span class="pl-k">.</span>nₘₐₓ))
w3j <span class="pl-k">=</span> <span class="pl-c1">WignerSymbolVector</span>(buffer, w<span class="pl-k">.</span>nₘᵢₙ<span class="pl-k">:</span>w<span class="pl-k">.</span>nₘₐₓ)
WignerFamilies<span class="pl-k">.</span><span class="pl-c1">wigner3j_f!</span>(w, w3j)</pre></div>
<p dir="auto">This is the best way to get symbols if you're using them in a tight loop, since allocations really hurt in those cases. Typically you would preallocate a buffer and then give this package a <code>view</code> into it.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using BenchmarkTools
@btime WignerFamilies.wigner3j_f!(w, w3j)"><pre><span class="pl-k">using</span> BenchmarkTools
<span class="pl-c1">@btime</span> WignerFamilies<span class="pl-k">.</span><span class="pl-c1">wigner3j_f!</span>(w, w3j)</pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="1.660 μs (0 allocations: 0 bytes)"><pre class="notranslate"><code>1.660 μs (0 allocations: 0 bytes)
</code></pre></div>
</article></div>