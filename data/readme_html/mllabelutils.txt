<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-mllabelutils" class="anchor" aria-hidden="true" href="#mllabelutils"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>MLLabelUtils</h1>
<p><em>Utility package for working with classification targets. As such, this package provides the necessary functionality for interpreting class-predictions, as well as converting classification targets from one encoding to another.</em></p>
<table>
<thead>
<tr>
<th align="center"><strong>Package Status</strong></th>
<th align="center"><strong>Package Evaluator</strong></th>
<th align="center"><strong>Build Status</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><a href="LICENSE.md"><img src="https://camo.githubusercontent.com/c9414bd5708e8b65ba4384fe4d1f6779a11df3fcec79d3a818cff8a99478f7cd/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d627269676874677265656e2e7376673f7374796c653d666c6174" alt="License" data-canonical-src="https://img.shields.io/badge/license-MIT-brightgreen.svg?style=flat" style="max-width:100%;"></a> <a href="https://mllabelutilsjl.readthedocs.io/en/latest/?badge=latest" rel="nofollow"><img src="https://camo.githubusercontent.com/74470ac8796bb7bd7587878d5718e133dcaef33dc18f7aa33b1d2acb3a34d545/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6c61746573742d626c75652e7376673f7374796c653d666c6174" alt="Documentation Status" data-canonical-src="https://img.shields.io/badge/docs-latest-blue.svg?style=flat" style="max-width:100%;"></a></td>
<td align="center"><a href="https://juliaci.github.io/NanosoldierReports/pkgeval_badges/report.html" rel="nofollow"><img src="https://camo.githubusercontent.com/2173784e0a68ccf66eea10ddb2840082f44f03c65f3a96adb8dffc993a48c6ba/68747470733a2f2f6a756c696163692e6769746875622e696f2f4e616e6f736f6c646965725265706f7274732f706b676576616c5f6261646765732f4d2f4d4c4c6162656c5574696c732e737667" alt="PkgEval" data-canonical-src="https://juliaci.github.io/NanosoldierReports/pkgeval_badges/M/MLLabelUtils.svg" style="max-width:100%;"></a></td>
<td align="center"><a href="https://github.com/JuliaML/MLLabelUtils.jl/actions/workflows/CI.yml"><img src="https://github.com/JuliaML/MLLabelUtils.jl/actions/workflows/CI.yml/badge.svg" alt="CI" style="max-width:100%;"></a> <a href="https://coveralls.io/github/JuliaML/MLLabelUtils.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/7903b50bc4a1d6a758766f1ff33b9b64b736f1f98e1bfe69633ea26576475988/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f4a756c69614d4c2f4d4c4c6162656c5574696c732e6a6c2f62616467652e7376673f6272616e63683d6d617374657226736572766963653d676974687562" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/JuliaML/MLLabelUtils.jl/badge.svg?branch=master&amp;service=github" style="max-width:100%;"></a></td>
</tr>
</tbody>
</table>
<h2><a id="user-content-introduction" class="anchor" aria-hidden="true" href="#introduction"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Introduction</h2>
<p>In a classification setting, one usually treats the desired
output variable (also called <em>ground truths</em>, or <em>targets</em>) as a
discrete categorical variable. That is true even if the values
themself are of numerical type, which they often are for
practical reasons.</p>
<p>In fact, it is a common requirement in Machine Learning related
experiments to encode the classification targets of some
supervised dataset in a very specific way.
There are multiple conventions that all have their own merits
and reasons to exist. Some models, such as the probabilistic
version of logistic regression, require the targets in the form
of numbers in the set {1,0}. On the other hand, margin-based
classifier, such as SVMs, expect the targets to be in the set
{1,âˆ’1}.</p>
<p>This package provides the functionality needed to deal will these
different scenarios in an efficient, consistent, and convenient
manner. In particular, this library is designed with package
developers in mind, that require their classification-targets to
be in a specific format. To that end, the core focus of this
package is to provide all the tools needed to deal with
classification targets of arbitrary format. This includes
asserting if the targets are of a desired encoding, inferring the
concrete encoding the targets are in and how many classes they
represent, and converting from their native encoding to the
desired one.</p>
<h2><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example</h2>
<p>The following code snippets show a simple "hello world" scenario
of how this package can be used to work with classification targets.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using MLLabelUtils
"><pre><span class="pl-k">using</span> MLLabelUtils</pre></div>
<p>We can automatically derive the used encoding from the targets using
<code>labelenc</code>. This function looks at all elements and tries to determine
which specific encoding best describes the target array.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; true_targets = Int8[0, 1, 0, 1, 1];

julia&gt; le = labelenc(true_targets)
# MLLabelUtils.LabelEnc.ZeroOne{Int8,Float64}(0.5)
"><pre>julia<span class="pl-k">&gt;</span> true_targets <span class="pl-k">=</span> Int8[<span class="pl-c1">0</span>, <span class="pl-c1">1</span>, <span class="pl-c1">0</span>, <span class="pl-c1">1</span>, <span class="pl-c1">1</span>];

julia<span class="pl-k">&gt;</span> le <span class="pl-k">=</span> <span class="pl-c1">labelenc</span>(true_targets)
<span class="pl-c"><span class="pl-c">#</span> MLLabelUtils.LabelEnc.ZeroOne{Int8,Float64}(0.5)</span></pre></div>
<p>To just determine if a specific encoding is approriate one can use
the function <code>islabelenc</code>.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; islabelenc(true_targets, LabelEnc.ZeroOne)
# true

julia&gt; islabelenc(true_targets, LabelEnc.MarginBased)
# false
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">islabelenc</span>(true_targets, LabelEnc<span class="pl-k">.</span>ZeroOne)
<span class="pl-c"><span class="pl-c">#</span> true</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">islabelenc</span>(true_targets, LabelEnc<span class="pl-k">.</span>MarginBased)
<span class="pl-c"><span class="pl-c">#</span> false</span></pre></div>
<p>Furthermore we can compute a label map, which computes the indices
of all elements that belong to each class. This information is useful
for resampling strategies, such as stratified sampling</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; true_targets = [:yes,:no,:maybe,:yes];

julia&gt; labelmap(true_targets)
# Dict{Symbol,Array{Int64,1}} with 3 entries:
#   :yes   =&gt; [1,4]
#   :maybe =&gt; [3]
#   :no    =&gt; [2]
"><pre>julia<span class="pl-k">&gt;</span> true_targets <span class="pl-k">=</span> [<span class="pl-c1">:yes</span>,<span class="pl-c1">:no</span>,<span class="pl-c1">:maybe</span>,<span class="pl-c1">:yes</span>];

julia<span class="pl-k">&gt;</span> <span class="pl-c1">labelmap</span>(true_targets)
<span class="pl-c"><span class="pl-c">#</span> Dict{Symbol,Array{Int64,1}} with 3 entries:</span>
<span class="pl-c"><span class="pl-c">#</span>   :yes   =&gt; [1,4]</span>
<span class="pl-c"><span class="pl-c">#</span>   :maybe =&gt; [3]</span>
<span class="pl-c"><span class="pl-c">#</span>   :no    =&gt; [2]</span></pre></div>
<p>If need be we can convert to other encodings. Note that unless
explicitly specified, we try to preserve the <code>eltype</code> of the
input. However, this behaviour only comes to play in the case of
numbers.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; true_targets = Int8[0, 1, 0, 1, 1];

julia&gt; convertlabel([:yes,:no], true_targets) # Equivalent to LabelEnc.NativeLabels([:yes,:no])
# 5-element Array{Symbol,1}:
#  :no
#  :yes
#  :no
#  :yes
#  :yes

julia&gt; convertlabel(LabelEnc.MarginBased, true_targets) # Preserves eltype
# 5-element Array{Int8,1}:
#  -1
#   1
#  -1
#   1
#   1

julia&gt; convertlabel(LabelEnc.MarginBased(Float32), true_targets) # Force new eltype
# 5-element Array{Float32,1}:
#  -1.0
#   1.0
#  -1.0
#   1.0
#   1.0
"><pre>julia<span class="pl-k">&gt;</span> true_targets <span class="pl-k">=</span> Int8[<span class="pl-c1">0</span>, <span class="pl-c1">1</span>, <span class="pl-c1">0</span>, <span class="pl-c1">1</span>, <span class="pl-c1">1</span>];

julia<span class="pl-k">&gt;</span> <span class="pl-c1">convertlabel</span>([<span class="pl-c1">:yes</span>,<span class="pl-c1">:no</span>], true_targets) <span class="pl-c"><span class="pl-c">#</span> Equivalent to LabelEnc.NativeLabels([:yes,:no])</span>
<span class="pl-c"><span class="pl-c">#</span> 5-element Array{Symbol,1}:</span>
<span class="pl-c"><span class="pl-c">#</span>  :no</span>
<span class="pl-c"><span class="pl-c">#</span>  :yes</span>
<span class="pl-c"><span class="pl-c">#</span>  :no</span>
<span class="pl-c"><span class="pl-c">#</span>  :yes</span>
<span class="pl-c"><span class="pl-c">#</span>  :yes</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">convertlabel</span>(LabelEnc<span class="pl-k">.</span>MarginBased, true_targets) <span class="pl-c"><span class="pl-c">#</span> Preserves eltype</span>
<span class="pl-c"><span class="pl-c">#</span> 5-element Array{Int8,1}:</span>
<span class="pl-c"><span class="pl-c">#</span>  -1</span>
<span class="pl-c"><span class="pl-c">#</span>   1</span>
<span class="pl-c"><span class="pl-c">#</span>  -1</span>
<span class="pl-c"><span class="pl-c">#</span>   1</span>
<span class="pl-c"><span class="pl-c">#</span>   1</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">convertlabel</span>(LabelEnc<span class="pl-k">.</span><span class="pl-c1">MarginBased</span>(Float32), true_targets) <span class="pl-c"><span class="pl-c">#</span> Force new eltype</span>
<span class="pl-c"><span class="pl-c">#</span> 5-element Array{Float32,1}:</span>
<span class="pl-c"><span class="pl-c">#</span>  -1.0</span>
<span class="pl-c"><span class="pl-c">#</span>   1.0</span>
<span class="pl-c"><span class="pl-c">#</span>  -1.0</span>
<span class="pl-c"><span class="pl-c">#</span>   1.0</span>
<span class="pl-c"><span class="pl-c">#</span>   1.0</span></pre></div>
<p>For encodings that can be multiclass, the number of classes can
be inferred from the targets, or specified explicitly.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; convertlabel(LabelEnc.Indices{Int}, true_targets) # number of classes inferred
# 5-element Array{Int64,1}:
#  2
#  1
#  2
#  1
#  1

julia&gt; convertlabel(LabelEnc.Indices(Int,2), true_targets)
# 5-element Array{Int64,1}:
#  2
#  1
#  2
#  1
#  1

julia&gt; convertlabel(LabelEnc.OneOfK{Bool}, true_targets)
# 2Ã—5 Array{Bool,2}:
#  false   true  false   true   true
#   true  false   true  false  false
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">convertlabel</span>(LabelEnc<span class="pl-k">.</span>Indices{Int}, true_targets) <span class="pl-c"><span class="pl-c">#</span> number of classes inferred</span>
<span class="pl-c"><span class="pl-c">#</span> 5-element Array{Int64,1}:</span>
<span class="pl-c"><span class="pl-c">#</span>  2</span>
<span class="pl-c"><span class="pl-c">#</span>  1</span>
<span class="pl-c"><span class="pl-c">#</span>  2</span>
<span class="pl-c"><span class="pl-c">#</span>  1</span>
<span class="pl-c"><span class="pl-c">#</span>  1</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">convertlabel</span>(LabelEnc<span class="pl-k">.</span><span class="pl-c1">Indices</span>(Int,<span class="pl-c1">2</span>), true_targets)
<span class="pl-c"><span class="pl-c">#</span> 5-element Array{Int64,1}:</span>
<span class="pl-c"><span class="pl-c">#</span>  2</span>
<span class="pl-c"><span class="pl-c">#</span>  1</span>
<span class="pl-c"><span class="pl-c">#</span>  2</span>
<span class="pl-c"><span class="pl-c">#</span>  1</span>
<span class="pl-c"><span class="pl-c">#</span>  1</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">convertlabel</span>(LabelEnc<span class="pl-k">.</span>OneOfK{Bool}, true_targets)
<span class="pl-c"><span class="pl-c">#</span> 2Ã—5 Array{Bool,2}:</span>
<span class="pl-c"><span class="pl-c">#</span>  false   true  false   true   true</span>
<span class="pl-c"><span class="pl-c">#</span>   true  false   true  false  false</span></pre></div>
<p>Note that the <code>OneOfK</code> encoding is special in that as a matrix-based
encoding it supports <code>ObsDim</code>, which can be used to specify which
dimension of the array denotes the observations.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; convertlabel(LabelEnc.OneOfK{Int}, true_targets, obsdim = 1)
# 5Ã—2 Array{Int64,2}:
#  0  1
#  1  0
#  0  1
#  1  0
#  1  0
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">convertlabel</span>(LabelEnc<span class="pl-k">.</span>OneOfK{Int}, true_targets, obsdim <span class="pl-k">=</span> <span class="pl-c1">1</span>)
<span class="pl-c"><span class="pl-c">#</span> 5Ã—2 Array{Int64,2}:</span>
<span class="pl-c"><span class="pl-c">#</span>  0  1</span>
<span class="pl-c"><span class="pl-c">#</span>  1  0</span>
<span class="pl-c"><span class="pl-c">#</span>  0  1</span>
<span class="pl-c"><span class="pl-c">#</span>  1  0</span>
<span class="pl-c"><span class="pl-c">#</span>  1  0</span></pre></div>
<p>We also provide a <code>OneVsRest</code> encoding, which allows to transform
a multiclass problem into a binary one</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; true_targets = [:yes,:no,:maybe,:yes];

julia&gt; convertlabel(LabelEnc.OneVsRest(:yes), true_targets)
# 4-element Array{Symbol,1}:
#  :yes
#  :not_yes
#  :not_yes
#  :yes

julia&gt; convertlabel(LabelEnc.TrueFalse, true_targets, LabelEnc.OneVsRest(:yes))
# 4-element Array{Bool,1}:
#   true
#  false
#  false
#   true
"><pre>julia<span class="pl-k">&gt;</span> true_targets <span class="pl-k">=</span> [<span class="pl-c1">:yes</span>,<span class="pl-c1">:no</span>,<span class="pl-c1">:maybe</span>,<span class="pl-c1">:yes</span>];

julia<span class="pl-k">&gt;</span> <span class="pl-c1">convertlabel</span>(LabelEnc<span class="pl-k">.</span><span class="pl-c1">OneVsRest</span>(<span class="pl-c1">:yes</span>), true_targets)
<span class="pl-c"><span class="pl-c">#</span> 4-element Array{Symbol,1}:</span>
<span class="pl-c"><span class="pl-c">#</span>  :yes</span>
<span class="pl-c"><span class="pl-c">#</span>  :not_yes</span>
<span class="pl-c"><span class="pl-c">#</span>  :not_yes</span>
<span class="pl-c"><span class="pl-c">#</span>  :yes</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">convertlabel</span>(LabelEnc<span class="pl-k">.</span>TrueFalse, true_targets, LabelEnc<span class="pl-k">.</span><span class="pl-c1">OneVsRest</span>(<span class="pl-c1">:yes</span>))
<span class="pl-c"><span class="pl-c">#</span> 4-element Array{Bool,1}:</span>
<span class="pl-c"><span class="pl-c">#</span>   true</span>
<span class="pl-c"><span class="pl-c">#</span>  false</span>
<span class="pl-c"><span class="pl-c">#</span>  false</span>
<span class="pl-c"><span class="pl-c">#</span>   true</span></pre></div>
<p><code>NativeLabels</code> maps between data of an arbitary type (e.g. Strings) and
the other label types (Normally <code>LabelEnc.Indices{Int}</code> for an integer index).
When using it, you should always save the encoding in a variable,
and pass it as an argument to <code>convertlabel</code>; as otherwise the encoding will
be inferred each time, so will normally encode differently for different inputs.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; enc = LabelEnc.NativeLabels([&quot;copper&quot;, &quot;tin&quot;, &quot;gold&quot;])
# MLLabelUtils.LabelEnc.NativeLabels{String,3}(...)

julia&gt; convertlabel(LabelEnc.Indices, [&quot;gold&quot;, &quot;copper&quot;], enc)
# 2-element Array{Int64,1}:
#  3
#  1
"><pre>julia<span class="pl-k">&gt;</span> enc <span class="pl-k">=</span> LabelEnc<span class="pl-k">.</span><span class="pl-c1">NativeLabels</span>([<span class="pl-s"><span class="pl-pds">"</span>copper<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>tin<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>gold<span class="pl-pds">"</span></span>])
<span class="pl-c"><span class="pl-c">#</span> MLLabelUtils.LabelEnc.NativeLabels{String,3}(...)</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">convertlabel</span>(LabelEnc<span class="pl-k">.</span>Indices, [<span class="pl-s"><span class="pl-pds">"</span>gold<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>copper<span class="pl-pds">"</span></span>], enc)
<span class="pl-c"><span class="pl-c">#</span> 2-element Array{Int64,1}:</span>
<span class="pl-c"><span class="pl-c">#</span>  3</span>
<span class="pl-c"><span class="pl-c">#</span>  1</span></pre></div>
<p>Encodings such as <code>ZeroOne</code>, <code>MarginBased</code>, and <code>OneOfK</code> also provide
a <code>classify</code> function.</p>
<p><code>ZeroOne</code> has a threshold parameter which represents the decision
boundary.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; classify(0.3, 0.5)
# 0.0

julia&gt; classify(0.3, LabelEnc.ZeroOne) # equivalent to before
# 0.0

julia&gt; classify(0.3, LabelEnc.ZeroOne(0.2)) # custom threshold
# 1.0

julia&gt; classify(0.3, LabelEnc.ZeroOne(Int,0.2)) # custom type
# 1

julia&gt; classify.([0.3,0.5], LabelEnc.ZeroOne(Int,0.4)) # broadcast support
# 2-element Array{Int64,1}:
#  0
#  1
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">classify</span>(<span class="pl-c1">0.3</span>, <span class="pl-c1">0.5</span>)
<span class="pl-c"><span class="pl-c">#</span> 0.0</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">classify</span>(<span class="pl-c1">0.3</span>, LabelEnc<span class="pl-k">.</span>ZeroOne) <span class="pl-c"><span class="pl-c">#</span> equivalent to before</span>
<span class="pl-c"><span class="pl-c">#</span> 0.0</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">classify</span>(<span class="pl-c1">0.3</span>, LabelEnc<span class="pl-k">.</span><span class="pl-c1">ZeroOne</span>(<span class="pl-c1">0.2</span>)) <span class="pl-c"><span class="pl-c">#</span> custom threshold</span>
<span class="pl-c"><span class="pl-c">#</span> 1.0</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">classify</span>(<span class="pl-c1">0.3</span>, LabelEnc<span class="pl-k">.</span><span class="pl-c1">ZeroOne</span>(Int,<span class="pl-c1">0.2</span>)) <span class="pl-c"><span class="pl-c">#</span> custom type</span>
<span class="pl-c"><span class="pl-c">#</span> 1</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">classify</span>.([<span class="pl-c1">0.3</span>,<span class="pl-c1">0.5</span>], LabelEnc<span class="pl-k">.</span><span class="pl-c1">ZeroOne</span>(Int,<span class="pl-c1">0.4</span>)) <span class="pl-c"><span class="pl-c">#</span> broadcast support</span>
<span class="pl-c"><span class="pl-c">#</span> 2-element Array{Int64,1}:</span>
<span class="pl-c"><span class="pl-c">#</span>  0</span>
<span class="pl-c"><span class="pl-c">#</span>  1</span></pre></div>
<p><code>MarginBased</code> uses the sign to determine the class.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; classify(-5, LabelEnc.MarginBased)
# -1

julia&gt; classify(0.2, LabelEnc.MarginBased)
# 1.0

julia&gt; classify(-5, LabelEnc.MarginBased(Float64))
# -1.0

julia&gt; classify.([-5,5], LabelEnc.MarginBased(Float64))
# 2-element Array{Float64,1}:
#  -1.0
#   1.0
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">classify</span>(<span class="pl-k">-</span><span class="pl-c1">5</span>, LabelEnc<span class="pl-k">.</span>MarginBased)
<span class="pl-c"><span class="pl-c">#</span> -1</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">classify</span>(<span class="pl-c1">0.2</span>, LabelEnc<span class="pl-k">.</span>MarginBased)
<span class="pl-c"><span class="pl-c">#</span> 1.0</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">classify</span>(<span class="pl-k">-</span><span class="pl-c1">5</span>, LabelEnc<span class="pl-k">.</span><span class="pl-c1">MarginBased</span>(Float64))
<span class="pl-c"><span class="pl-c">#</span> -1.0</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">classify</span>.([<span class="pl-k">-</span><span class="pl-c1">5</span>,<span class="pl-c1">5</span>], LabelEnc<span class="pl-k">.</span><span class="pl-c1">MarginBased</span>(Float64))
<span class="pl-c"><span class="pl-c">#</span> 2-element Array{Float64,1}:</span>
<span class="pl-c"><span class="pl-c">#</span>  -1.0</span>
<span class="pl-c"><span class="pl-c">#</span>   1.0</span></pre></div>
<p><code>OneOfK</code> determines which index is the largest element.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; pred_output = [0.1 0.4 0.3 0.2; 0.8 0.3 0.6 0.2; 0.1 0.3 0.1 0.6]
# 3Ã—4 Array{Float64,2}:
#  0.1  0.4  0.3  0.2
#  0.8  0.3  0.6  0.2
#  0.1  0.3  0.1  0.6

julia&gt; classify(pred_output, LabelEnc.OneOfK)
# 4-element Array{Int64,1}:
#  2
#  1
#  2
#  3

julia&gt; classify(pred_output', LabelEnc.OneOfK, obsdim = 1) # note the transpose
# 4-element Array{Int64,1}:
#  2
#  1
#  2
#  3

julia&gt; classify([0.1,0.2,0.6,0.1], LabelEnc.OneOfK) # single observation
# 3
"><pre>julia<span class="pl-k">&gt;</span> pred_output <span class="pl-k">=</span> [<span class="pl-c1">0.1</span> <span class="pl-c1">0.4</span> <span class="pl-c1">0.3</span> <span class="pl-c1">0.2</span>; <span class="pl-c1">0.8</span> <span class="pl-c1">0.3</span> <span class="pl-c1">0.6</span> <span class="pl-c1">0.2</span>; <span class="pl-c1">0.1</span> <span class="pl-c1">0.3</span> <span class="pl-c1">0.1</span> <span class="pl-c1">0.6</span>]
<span class="pl-c"><span class="pl-c">#</span> 3Ã—4 Array{Float64,2}:</span>
<span class="pl-c"><span class="pl-c">#</span>  0.1  0.4  0.3  0.2</span>
<span class="pl-c"><span class="pl-c">#</span>  0.8  0.3  0.6  0.2</span>
<span class="pl-c"><span class="pl-c">#</span>  0.1  0.3  0.1  0.6</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">classify</span>(pred_output, LabelEnc<span class="pl-k">.</span>OneOfK)
<span class="pl-c"><span class="pl-c">#</span> 4-element Array{Int64,1}:</span>
<span class="pl-c"><span class="pl-c">#</span>  2</span>
<span class="pl-c"><span class="pl-c">#</span>  1</span>
<span class="pl-c"><span class="pl-c">#</span>  2</span>
<span class="pl-c"><span class="pl-c">#</span>  3</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">classify</span>(pred_output<span class="pl-k">'</span>, LabelEnc<span class="pl-k">.</span>OneOfK, obsdim <span class="pl-k">=</span> <span class="pl-c1">1</span>) <span class="pl-c"><span class="pl-c">#</span> note the transpose</span>
<span class="pl-c"><span class="pl-c">#</span> 4-element Array{Int64,1}:</span>
<span class="pl-c"><span class="pl-c">#</span>  2</span>
<span class="pl-c"><span class="pl-c">#</span>  1</span>
<span class="pl-c"><span class="pl-c">#</span>  2</span>
<span class="pl-c"><span class="pl-c">#</span>  3</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">classify</span>([<span class="pl-c1">0.1</span>,<span class="pl-c1">0.2</span>,<span class="pl-c1">0.6</span>,<span class="pl-c1">0.1</span>], LabelEnc<span class="pl-k">.</span>OneOfK) <span class="pl-c"><span class="pl-c">#</span> single observation</span>
<span class="pl-c"><span class="pl-c">#</span> 3</span></pre></div>
<h2><a id="user-content-documentation" class="anchor" aria-hidden="true" href="#documentation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Documentation</h2>
<p>For a much more detailed treatment check out the
<a href="http://mllabelutilsjl.readthedocs.io/en/latest/" rel="nofollow">latest documentation</a></p>
<p>Additionally, you can make use of Julia's native docsystem. The
following example shows how to get additional information on
<code>convertlabel</code> within Julia's REPL:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="?convertlabel
"><pre><code>?convertlabel
</code></pre></div>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>This package is registered in <code>METADATA.jl</code> and can be installed
as usual. Just start up Julia and type the following code-snipped
into the REPL. It makes use of the native Julia package manger.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="Pkg.add(&quot;MLLabelUtils&quot;)
"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>MLLabelUtils<span class="pl-pds">"</span></span>)</pre></div>
<p>Additionally, for example if you encounter any sudden issues, or
in the case you would like to contribute to the package, you can
manually choose to be on the latest (untagged) version.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="Pkg.checkout(&quot;MLLabelUtils&quot;)
"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">checkout</span>(<span class="pl-s"><span class="pl-pds">"</span>MLLabelUtils<span class="pl-pds">"</span></span>)</pre></div>
<h2><a id="user-content-license" class="anchor" aria-hidden="true" href="#license"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>License</h2>
<p>This code is free to use under the terms of the MIT license</p>
</article></div>