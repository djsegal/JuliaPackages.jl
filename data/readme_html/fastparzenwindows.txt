<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-fastparzenwindowsjl" class="anchor" aria-hidden="true" href="#fastparzenwindowsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>FastParzenWindows.jl</h1>
<p dir="auto"><a href="https://www.repostatus.org/#active" rel="nofollow"><img src="https://camo.githubusercontent.com/2261082c77808ea734741b12e535d02d23c4101f6b8dfec807f4ddc5ef2eeec0/68747470733a2f2f7777772e7265706f7374617475732e6f72672f6261646765732f6c61746573742f6163746976652e737667" alt="Project Status: Active â€“ The project has reached a stable, usable state and is being actively developed." data-canonical-src="https://www.repostatus.org/badges/latest/active.svg" style="max-width: 100%;"></a>
<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/ba58940b875e7476a674ea6ea2f503cfe31d5f86b8f9051c0e5b52f742282d81/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f6e6769616e6e2f466173745061727a656e57696e646f77732e6a6c"><img src="https://camo.githubusercontent.com/ba58940b875e7476a674ea6ea2f503cfe31d5f86b8f9051c0e5b52f742282d81/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f6e6769616e6e2f466173745061727a656e57696e646f77732e6a6c" alt="GitHub" data-canonical-src="https://img.shields.io/github/license/ngiann/FastParzenWindows.jl" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-â„¹-what-is-this" class="anchor" aria-hidden="true" href="#â„¹-what-is-this"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><g-emoji class="g-emoji" alias="information_source" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2139.png">â„¹</g-emoji> What is this?</h2>
<p dir="auto">This is a Julia implementation of the Fast Parzen Window Density Estimator described in</p>
<p dir="auto"><em>X. Wang, P. Tino, M. A. Fardal, S. Raychaudhury and A. Babul, "Fast parzen window density estimator," 2009 International Joint Conference on Neural Networks, 2009, pp. 3267-3274.</em></p>
<p dir="auto">This is a technique for estimating a probability density from an observed set of data points. The data space is partitioned in hyper-discs of fixed radii <code>r</code> and each partition is modelled with a Gaussian density.  The final model is a mixture of Gaussians with each Gaussian fitted locally to a partition.</p>
<p dir="auto">The algorithm presented in the paper has two versions called 'hard' and 'soft'.  This repository only provides the 'soft' version.</p>
<h2 dir="auto"><a id="user-content--how-to-install" class="anchor" aria-hidden="true" href="#-how-to-install"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><g-emoji class="g-emoji" alias="floppy_disk" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4be.png">ðŸ’¾</g-emoji> How to install</h2>
<p dir="auto">Apart from cloning, an easy way of using the package is to switch into "package mode" with <code>]</code> in the Julia REPL and use <code>add FastParzenWindows</code>.</p>
<p dir="auto">In case you are installing <code>FastParzenWindows</code> to an existing Julia environment, there is a chance one may run into dependency problems that prevent installation. In this case, it is advisable to work in a new <a href="https://pkgdocs.julialang.org/v1/environments/" rel="nofollow">environment</a>. That is:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="mkdir(&quot;MyFastParzenWindows&quot;) # example name, can be different
cd(&quot;MyFastParzenWindows&quot;)
# press `]` to enter package mode:
(@v1.6) pkg&gt; activate ."><pre class="notranslate"><code>mkdir("MyFastParzenWindows") # example name, can be different
cd("MyFastParzenWindows")
# press `]` to enter package mode:
(@v1.6) pkg&gt; activate .
</code></pre></div>
<p dir="auto">and use this environment for installing and working with the package.
Having exited Julia, one can enter the created environment again by simply starting Julia in the respective folder and using <code>activate .</code> in package mode.</p>
<h2 dir="auto"><a id="user-content--how-to-use" class="anchor" aria-hidden="true" href="#-how-to-use"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><g-emoji class="g-emoji" alias="arrow_forward" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/25b6.png">â–¶</g-emoji> How to use</h2>
<p dir="auto">There are two functions of interest: <code>fpw</code> and <code>cvfpw</code>.</p>
<ul dir="auto">
<li><code>fpw</code> takes two arguments, a NÃ—D data matrix <code>X</code> and a scalar <code>r</code> which expresses the radius of the hyper-discs in which the data space is partitioned. The output is an object of the type <code>Distributions.MixtureModel</code>.</li>
<li><code>cvfpw</code> takes two arguments, a NÃ—D data matrix <code>X</code> and a range of candidate radii of the hyper-discs. It performs cross-validation for each candidate <code>r</code> and returns a matrix of out-of-sample log-likelihoods of dimensions (number of <code>r</code> candidates)Ã—(number of folds).</li>
</ul>
<h2 dir="auto"><a id="user-content--example" class="anchor" aria-hidden="true" href="#-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><g-emoji class="g-emoji" alias="arrow_forward" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/25b6.png">â–¶</g-emoji> Example</h2>
<p dir="auto">We use a dataset taken from the paper. We generate 300 data points using:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="using FastParzenWindows
using PyPlot # must be independently installed, needed only for plotting present example
using Statistics

X = spiraldata(300)

plot(X[:,1], X[:,2], &quot;bo&quot;, label=&quot;dataset&quot;)"><pre class="notranslate"><code>using FastParzenWindows
using PyPlot # must be independently installed, needed only for plotting present example
using Statistics

X = spiraldata(300)

plot(X[:,1], X[:,2], "bo", label="dataset")
</code></pre></div>
<p dir="auto">We want to find out which <code>r</code> works well for this dataset:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="# define range of 100 candidate radii
r_range = LinRange(0.01, 2.0, 100)

# perform cross-validation
cvresults = cvfpw(X, r_range)

# which is the best r?
r_perf = mean(cvresults, dims=2)
best_index = argmax(r_perf)

r_best = r_range[best_index]"><pre class="notranslate"><code># define range of 100 candidate radii
r_range = LinRange(0.01, 2.0, 100)

# perform cross-validation
cvresults = cvfpw(X, r_range)

# which is the best r?
r_perf = mean(cvresults, dims=2)
best_index = argmax(r_perf)

r_best = r_range[best_index]
</code></pre></div>
<p dir="auto">Estimate final model:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="mix = fpw(X, r_best)

# generate observations and plot them
x = rand(mix, 1000)'
plot(x[:,1], x[:,2], &quot;r.&quot;, label=&quot;generated&quot;)
legend()
"><pre class="notranslate"><code>mix = fpw(X, r_best)

# generate observations and plot them
x = rand(mix, 1000)'
plot(x[:,1], x[:,2], "r.", label="generated")
legend()

</code></pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="spiral.png"><img src="spiral.png" alt="Spiral example" style="max-width: 100%;"></a></p>
</article></div>