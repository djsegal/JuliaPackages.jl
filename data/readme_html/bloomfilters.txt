<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-bloomfiltersjl" class="anchor" aria-hidden="true" href="#bloomfiltersjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>BloomFilters.jl</h1>
<p><a href="https://travis-ci.org/johnmyleswhite/BloomFilters.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/433fdff03b2f0873f5ebc9d9c9fb316851cfdb49/68747470733a2f2f7472617669732d63692e6f72672f6a6f686e6d796c657377686974652f426c6f6f6d46696c746572732e6a6c2e706e67" alt="Build Status" data-canonical-src="https://travis-ci.org/johnmyleswhite/BloomFilters.jl.png" style="max-width:100%;"></a></p>
<p><em>Please note: The API for version 0.1.0 of this package has changed substantially from version 0.0.1. Please review the below README and accompanying library documentation.</em></p>
<p><a href="https://en.wikipedia.org/wiki/Bloom_filter" rel="nofollow">Bloom filter</a> implementation in <a href="https://julialang.org" rel="nofollow">Julia</a>. Supports insertion (<code>add!</code>) and probabilistic membership queries (<code>in</code>) for sets using an in-memory or mmap'd bit array. When an element <code>x</code> is inserted into a Bloom filter, set membership queries will always correctly return <code>true</code> for <code>x</code> (i.e., there are no false negatives). Bloom filter membership queries do, however, occassionally return <code>true</code> for a <code>y</code> not inserted into the data structure (i.e., false positives are possible). With this cost comes remarkable space efficiency: Bloom filters can store set membership using only 10 bits per element at a 1.00% error rate or 20 bits per element at a 0.01% error rate. This space requirement is irrespective of the size or length of the inserted elements (e.g., one can store a set of URLs using only a handful of bits per URL).</p>
<p>Forthcoming features include:</p>
<ul>
<li>Better persistence (only the bit array is automatically saved when using the mmap-backed version; parameters must be separately stored or hard-coded)</li>
<li>Support for arbitrary numbers of hash functions (<em>k</em> &gt; 12)</li>
</ul>
<h2><a id="user-content-quickstart" class="anchor" aria-hidden="true" href="#quickstart"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Quickstart</h2>
<p>Quick functionality demo:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> BloomFilters


bf <span class="pl-k">=</span> <span class="pl-c1">BloomFilter</span>(<span class="pl-c1">1000</span>, <span class="pl-c1">0.001</span>)  <span class="pl-c"><span class="pl-c">#</span> Create an in-memory Bloom filter</span>
							   <span class="pl-c"><span class="pl-c">#</span> with a capacity of 1K elements and</span>
							   <span class="pl-c"><span class="pl-c">#</span> expected error rate of 0.1%</span>

<span class="pl-c1">add!</span>(bf, <span class="pl-s"><span class="pl-pds">"</span>My first element.<span class="pl-pds">"</span></span>)
<span class="pl-c1">in</span>(<span class="pl-s"><span class="pl-pds">"</span>My first element.<span class="pl-pds">"</span></span>, bf)   <span class="pl-c"><span class="pl-c">#</span> Returns true</span>
<span class="pl-c1">in</span>(<span class="pl-s"><span class="pl-pds">"</span>My second element.<span class="pl-pds">"</span></span>, bf)  <span class="pl-c"><span class="pl-c">#</span> Returns false</span>
<span class="pl-s"><span class="pl-pds">"</span>My first element.<span class="pl-pds">"</span></span> <span class="pl-k">in</span> bf           <span class="pl-c"><span class="pl-c">#</span> Returns true</span>
<span class="pl-c1">show</span>(bf)

<span class="pl-c"><span class="pl-c">#</span> Prints:</span>
<span class="pl-c"><span class="pl-c">#</span> Bloom filter with capacity 1000, error rate of 0.10, and k of 10.</span>
<span class="pl-c"><span class="pl-c">#</span> Total bits required: 15000 (15.0 / element).</span>
<span class="pl-c"><span class="pl-c">#</span> Bloom filter is in-memory.</span>
</pre></div>
<p>By default, the Bloom filter will be constructed using an optimal number of k hash functions, which minimizes the expected false positive rate per required bit of storage. In many cases, however, it may be advantegous to specify a smaller value of k in order to save time hashing and performing subsequent memory accesses. Alternatively, one may want to explicitly set the number of bits to use per element <em>and</em> k, rather than constructing the filter by passing a target error rate.</p>
<p>The <code>BloomFilters</code> module supports all 3 of these patterns:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span> Constructor pattern #1: Pass capacity and error rate</span>
bf1 <span class="pl-k">=</span> <span class="pl-c1">BloomFilter</span>(<span class="pl-c1">1000</span>, <span class="pl-c1">0.001</span>)

<span class="pl-c"><span class="pl-c">#</span> Constructor pattern #2: Pass capacity, error rate, and k</span>
bf2 <span class="pl-k">=</span> <span class="pl-c1">BloomFilter</span>(<span class="pl-c1">1000</span>, <span class="pl-c1">0.001</span>, <span class="pl-c1">6</span>)  <span class="pl-c"><span class="pl-c">#</span> vs. the optimal number of 10 if not specified as in bf1</span>

<span class="pl-c"><span class="pl-c">#</span> Constructor pattern #3: Pass capacity, bits per element, and k, but not the error rate</span>
bf3 <span class="pl-k">=</span> <span class="pl-c1">BloomFilter</span>(<span class="pl-c1">1000</span>, <span class="pl-c1">16</span>, <span class="pl-c1">6</span>)  <span class="pl-c"><span class="pl-c">#</span> Same as bf2, but will *not* compute the error rate and display NaN when show() is called</span></pre></div>
<p>In addition to this, basic persistence support is provided via optionally using an mmap-backed bit array. This works with each of the above methods by either passing a string of the mmap filepath or an <code>IOStream</code>:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span>## With an IOStream</span>
<span class="pl-c"><span class="pl-c">#</span> Note that "w+" needs to be passed as the second argument to open() if creating</span>
<span class="pl-c"><span class="pl-c">#</span> a new mmap-backed Bloom filter, or "r+" if opening an already created one</span>
bf4 <span class="pl-k">=</span> <span class="pl-c1">BloomFilter</span>(<span class="pl-c1">open</span>(<span class="pl-s"><span class="pl-pds">"</span>/tmp/small_bloom_filter.array<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>w+<span class="pl-pds">"</span></span>), <span class="pl-c1">1000</span>, <span class="pl-c1">0.001</span>)

<span class="pl-c"><span class="pl-c">#</span>## With a string filepath</span>
<span class="pl-c"><span class="pl-c">#</span> Note this creates the bit array if it doesn't exist or opens it if previously created</span>
bf5 <span class="pl-k">=</span> <span class="pl-c1">BloomFilter</span>(<span class="pl-s"><span class="pl-pds">"</span>/tmp/small_bloom_filter_two.array<span class="pl-pds">"</span></span>, <span class="pl-c1">1000</span>, <span class="pl-c1">0.001</span>)

<span class="pl-c1">show</span>(bf5)

<span class="pl-c"><span class="pl-c">#</span> Prints:</span>
<span class="pl-c"><span class="pl-c">#</span> Bloom filter with capacity 1000, error rate of 0.10, and k of 10.</span>
<span class="pl-c"><span class="pl-c">#</span> Total bits required: 15000 (15.0 / element).</span>
<span class="pl-c"><span class="pl-c">#</span> Bloom filter is backed by mmap at &lt;file /tmp/small_bloom_filter_two.array&gt;.</span></pre></div>
</article></div>