<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-libmodbusjl" class="anchor" aria-hidden="true" href="#libmodbusjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>LibModbus.jl</h1>
<p dir="auto"><a href="https://github.com/kagalenko-m-b/LibModbus.jl/actions"><img src="https://github.com/kagalenko-m-b/LibModbus.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/kagalenko-m-b/LibModbus.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/684951d5a36ed1727bf2872a9638f3ab1b96062c75e233d4fc234ff0aa9c76fb/68747470733a2f2f636f6465636f762e696f2f67682f6b6167616c656e6b6f2d6d2d622f4c69624d6f646275732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/kagalenko-m-b/LibModbus.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">Julia wrapper for <a href="http://libmodbus.org/" rel="nofollow">Libmodbus</a> library</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">Within julia, execute</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Pkg; Pkg.add(&quot;LibModbus&quot;)"><pre><span class="pl-k">using</span> Pkg; Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>LibModbus<span class="pl-pds">"</span></span>)</pre></div>
<h2 dir="auto"><a id="user-content-usage-example" class="anchor" aria-hidden="true" href="#usage-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage example</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; ctx = RtuContext(raw&quot;\\.\COM10&quot;, 9600, :even, 8, 1)
RtuContext(serial_port \\.\COM10, baud 9600, parity even, data_bits 8, stop_bits 1)

julia&gt; connect(ctx)
0

julia&gt; ctx.slave_address=1
1

julia&gt; res=read_input_registers(ctx, 0, 15)
read input registers:
15-element Vector{UInt16}:
 0xd9f6
 0x00fc
 0xded1
 0x806a
 0xbe81
 0xcf72
 0xbfae
 0x7487
 0xb42d
 0xe370
 0xc9d8
 0x67a9
 0xeb4f
 0xc288
 0xd686

julia&gt; disconnect(ctx)"><pre>julia<span class="pl-k">&gt;</span> ctx <span class="pl-k">=</span> <span class="pl-c1">RtuContext</span>(<span class="pl-s"><span class="pl-c1">raw</span><span class="pl-pds">"</span>\\.\COM10<span class="pl-pds">"</span></span>, <span class="pl-c1">9600</span>, <span class="pl-c1">:even</span>, <span class="pl-c1">8</span>, <span class="pl-c1">1</span>)
<span class="pl-c1">RtuContext</span>(serial_port <span class="pl-k">\\.\</span>COM10, baud <span class="pl-c1">9600</span>, parity even, data_bits <span class="pl-c1">8</span>, stop_bits <span class="pl-c1">1</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">connect</span>(ctx)
<span class="pl-c1">0</span>

julia<span class="pl-k">&gt;</span> ctx<span class="pl-k">.</span>slave_address<span class="pl-k">=</span><span class="pl-c1">1</span>
<span class="pl-c1">1</span>

julia<span class="pl-k">&gt;</span> res<span class="pl-k">=</span><span class="pl-c1">read_input_registers</span>(ctx, <span class="pl-c1">0</span>, <span class="pl-c1">15</span>)
read input registers<span class="pl-k">:</span>
<span class="pl-c1">15</span><span class="pl-k">-</span>element Vector{UInt16}<span class="pl-k">:</span>
 <span class="pl-c1">0xd9f6</span>
 <span class="pl-c1">0x00fc</span>
 <span class="pl-c1">0xded1</span>
 <span class="pl-c1">0x806a</span>
 <span class="pl-c1">0xbe81</span>
 <span class="pl-c1">0xcf72</span>
 <span class="pl-c1">0xbfae</span>
 <span class="pl-c1">0x7487</span>
 <span class="pl-c1">0xb42d</span>
 <span class="pl-c1">0xe370</span>
 <span class="pl-c1">0xc9d8</span>
 <span class="pl-c1">0x67a9</span>
 <span class="pl-c1">0xeb4f</span>
 <span class="pl-c1">0xc288</span>
 <span class="pl-c1">0xd686</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">disconnect</span>(ctx)</pre></div>
<p dir="auto">If you reassigned <code>ctx</code> while the serial port is still connected,
call <code>GC.gc()</code> to trigger the finalizer on <code>ModbusContext</code>.</p>
<p dir="auto">See the test directory for more usage examples.</p>
</article></div>