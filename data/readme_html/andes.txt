<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-andesjl" class="anchor" aria-hidden="true" href="#andesjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Andes.jl</h1>
<p>The Julia interface for ANDES.</p>
<p><a href="https://travis-ci.com/cuihantao/Andes.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/4867047386dcedf769c9bc774302843200b2870b/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f636f6d2f63756968616e74616f2f416e6465732e6a6c2f6d61737465722e737667" alt="Build Status" data-canonical-src="https://img.shields.io/travis/com/cuihantao/Andes.jl/master.svg" style="max-width:100%;"></a></p>
<h2><a id="user-content-introduction" class="anchor" aria-hidden="true" href="#introduction"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Introduction</h2>
<p><code>Andes.jl</code> is the Julia interface for ANDES, a power system simulation tool for symbolic modeling and numerical simulation.</p>
<p><code>Andes.jl</code> provides APIs through <code>PyCall</code> and <code>Conda</code> for calling ANDES from Julia.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Installation</h2>
<p>Install <code>Andes.jl</code> with</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> Pkg
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>Andes<span class="pl-pds">"</span></span>)</pre></div>
<h3><a id="user-content-customize-python-environment" class="anchor" aria-hidden="true" href="#customize-python-environment"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Customize Python Environment</h3>
<p>If you have installed andes in an existing Python environment and do not want to reinstall it from conda, you can configure it in Pycall.</p>
<p>You can manually set the Python path with the following commands in Julia:</p>
<pre><code>ENV["PYTHON"] = "... path of the python executable ..."
# ENV["PYTHON"] = "C:\\Python37-x64\\python.exe"        # example for Windows
# ENV["PYTHON"] = "/usr/bin/python3.7"                  # example for *nix
# ENV["PYTHON"] = "/home/name/miniconda3/envs/andes"    # example for conda
Pkg.build("PyCall")
</code></pre>
<p>Check out the <a href="https://github.com/JuliaPy/PyCall.jl#specifying-the-python-version">documentation</a> of <code>PyCall.jl</code> for more details.</p>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Usage</h2>
<p><code>Andes.jl</code> exposes all Python APIs under <code>andes.py</code>. Use the package with</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> Andes
[ Info<span class="pl-k">:</span> Precompiling andes [<span class="pl-c1">93</span>a26e3f<span class="pl-k">-</span><span class="pl-c1">343</span>a<span class="pl-k">-</span><span class="pl-c1">4</span>ab9<span class="pl-k">-</span>b467<span class="pl-k">-</span>a68c67574964]</pre></div>
<p>All subsequent usages can be made to <code>andes.py</code> in the same way as in Python.</p>
<p>For example, to run power flow for <code>kundur_full.xlsx</code> (assume exists in the current directory), run</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> system <span class="pl-k">=</span> Andes<span class="pl-k">.</span>py<span class="pl-k">.</span><span class="pl-c1">run</span>(<span class="pl-s"><span class="pl-pds">"</span>kundur_full.xlsx<span class="pl-pds">"</span></span>)
Parsing input file <span class="pl-k">&lt;</span>kundur_full<span class="pl-k">.</span>xlsx<span class="pl-k">&gt;</span>
Input file kundur_full<span class="pl-k">.</span>xlsx parsed <span class="pl-k">in</span> <span class="pl-c1">0.0768</span> second.
<span class="pl-k">-&gt;</span> Power flow calculation with Newton Raphson method<span class="pl-k">:</span>
Power flow initialized.
<span class="pl-c1">0</span><span class="pl-k">:</span> <span class="pl-k">|</span><span class="pl-c1">F</span>(x)<span class="pl-k">|</span> <span class="pl-k">=</span> <span class="pl-c1">14.9283</span>
<span class="pl-c1">1</span><span class="pl-k">:</span> <span class="pl-k">|</span><span class="pl-c1">F</span>(x)<span class="pl-k">|</span> <span class="pl-k">=</span> <span class="pl-c1">3.60859</span>
<span class="pl-c1">2</span><span class="pl-k">:</span> <span class="pl-k">|</span><span class="pl-c1">F</span>(x)<span class="pl-k">|</span> <span class="pl-k">=</span> <span class="pl-c1">0.170093</span>
<span class="pl-c1">3</span><span class="pl-k">:</span> <span class="pl-k">|</span><span class="pl-c1">F</span>(x)<span class="pl-k">|</span> <span class="pl-k">=</span> <span class="pl-c1">0.00203827</span>
<span class="pl-c1">4</span><span class="pl-k">:</span> <span class="pl-k">|</span><span class="pl-c1">F</span>(x)<span class="pl-k">|</span> <span class="pl-k">=</span> <span class="pl-c1">3.76414e-07</span>
Converged <span class="pl-k">in</span> <span class="pl-c1">5</span> iterations <span class="pl-k">in</span> <span class="pl-c1">0.0063</span> second.
Report saved to <span class="pl-k">&lt;</span>kundur_full_out<span class="pl-k">.</span>txt<span class="pl-k">&gt;</span> <span class="pl-k">in</span> <span class="pl-c1">0.0007</span> second.
<span class="pl-k">-&gt;</span> Single process finished <span class="pl-k">in</span> <span class="pl-c1">0.1666</span> second.
PyObject <span class="pl-k">&lt;</span>andes<span class="pl-k">.</span>system<span class="pl-k">.</span>System object at <span class="pl-c1">0x1522910b8</span><span class="pl-k">&gt;</span></pre></div>
<p>Visit <a href="https://andes.readthedocs.io" rel="nofollow">ANDES Documentation</a> for tutorial and API details</p>
<h2><a id="user-content-development" class="anchor" aria-hidden="true" href="#development"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Development</h2>
<p>Contributions to Andes.jl are welcome. Please see <a href="https://github.com/cuihantao/Andes.jl/blob/master/CONTRIBUTING.md">CONTRIBUTING.md</a> for code contribution guidelines.</p>
<h2><a id="user-content-license" class="anchor" aria-hidden="true" href="#license"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>License</h2>
<p><code>Andes.jl</code> (the ANDES Julia interface only) is released under <a href="https://github.com/cuihantao/Andes.jl/blob/master/LICENSE">MIT license</a>.</p>
<p>Andes.jl has been developed as part of the Large Scale Testbed (LTB)
project at the Center for Ultra-Wide-Area Resilient Electric Energy Transmission Networks (<a href="https://curent.utk.edu/" rel="nofollow">CURENT</a>), a National Science Foundation Engineering Research Center that is jointly supported by NSF (National Science Foundation) and the DoE (Department of Energy) of the United States.</p>
</article></div>