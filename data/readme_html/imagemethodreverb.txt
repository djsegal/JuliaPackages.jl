<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-image-method-reverb" class="anchor" aria-hidden="true" href="#image-method-reverb"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Image Method Reverb</h1>
<p><a href="https://zenodo.org/badge/latestdoi/31613348" rel="nofollow"><img src="https://camo.githubusercontent.com/9ac25b568f296606cbba649764617d31982f80aba3cb1a5042f2fec84de15121/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f33313631333334382e737667" alt="DOI" data-canonical-src="https://zenodo.org/badge/31613348.svg" style="max-width:100%;"></a>
<a href="https://github.com/nantonel/ImageMethodReverb.jl/actions?query=workflow%3ACI"><img src="https://github.com/nantonel/ImageMethodReverb.jl/workflows/CI/badge.svg" alt="Build status" style="max-width:100%;"></a>
<a href="http://codecov.io/github/nantonel/ImageMethodReverb.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/f14fd9a577903eb96751563c498e30e82944a631d8a9f26810d9c6620b600def/687474703a2f2f636f6465636f762e696f2f6769746875622f6e616e746f6e656c2f496d6167654d6574686f645265766572622e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/nantonel/ImageMethodReverb.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
<p>Acoustic Room Impulse Response (RIR) generator using the (Randomized) Image Method for rectangular rooms.
Can be used to make audio signals reverberant.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>To install the package, hit <code>]</code> from the Julia command line to enter the package manager, then</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="pkg&gt; add ImageMethodReverb
"><pre>pkg<span class="pl-k">&gt;</span> add ImageMethodReverb</pre></div>
<h2><a id="user-content-tutorial" class="anchor" aria-hidden="true" href="#tutorial"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Tutorial</h2>
<p>Import the package by typing <code>using ImageMethodReverb</code> and specify properties of
the room of interest:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using ImageMethodReverb, Random
Fs = 8e3          # sampling frequency
L = 4.,5.,3.      # room dimensions in meters 
T60 = 0.7         # reverberation time
"><pre><span class="pl-k">using</span> ImageMethodReverb, Random
Fs <span class="pl-k">=</span> <span class="pl-c1">8e3</span>          <span class="pl-c"><span class="pl-c">#</span> sampling frequency</span>
L <span class="pl-k">=</span> <span class="pl-c1">4.</span>,<span class="pl-c1">5.</span>,<span class="pl-c1">3.</span>      <span class="pl-c"><span class="pl-c">#</span> room dimensions in meters </span>
T60 <span class="pl-k">=</span> <span class="pl-c1">0.7</span>         <span class="pl-c"><span class="pl-c">#</span> reverberation time</span></pre></div>
<p>If the reverberation time is given, all the walls will
have the same reflection coefficient.
Alternatively it is possible to manually change this<br>
using a six element <code>Tuple</code>:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="β = (0.9,0.9,0.7,0.7,0.8,0.8) 
#(  βx1     ,    βx2   ,    βy1   ,    βy2    ,  βz1 ,   βz2  )
#(front wall, rear wall, left wall, right wall, floor, ceiling)
"><pre>β <span class="pl-k">=</span> (<span class="pl-c1">0.9</span>,<span class="pl-c1">0.9</span>,<span class="pl-c1">0.7</span>,<span class="pl-c1">0.7</span>,<span class="pl-c1">0.8</span>,<span class="pl-c1">0.8</span>) 
<span class="pl-c"><span class="pl-c">#</span>(  βx1     ,    βx2   ,    βy1   ,    βy2    ,  βz1 ,   βz2  )</span>
<span class="pl-c"><span class="pl-c">#</span>(front wall, rear wall, left wall, right wall, floor, ceiling)</span></pre></div>
<p>Once the properties of the room are given,
select your source and
microphone position:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="xs = (0.5, 0.5, 0.5)          #src pos (in meters)
xr = (Lx-0.1, Ly-0.3, Lz-0.2) #mic pos
Nt = round(Int,Fs/2)          #time samples (1/5 sec)
"><pre>xs <span class="pl-k">=</span> (<span class="pl-c1">0.5</span>, <span class="pl-c1">0.5</span>, <span class="pl-c1">0.5</span>)          <span class="pl-c"><span class="pl-c">#</span>src pos (in meters)</span>
xr <span class="pl-k">=</span> (Lx<span class="pl-k">-</span><span class="pl-c1">0.1</span>, Ly<span class="pl-k">-</span><span class="pl-c1">0.3</span>, Lz<span class="pl-k">-</span><span class="pl-c1">0.2</span>) <span class="pl-c"><span class="pl-c">#</span>mic pos</span>
Nt <span class="pl-k">=</span> <span class="pl-c1">round</span>(Int,Fs<span class="pl-k">/</span><span class="pl-c1">2</span>)          <span class="pl-c"><span class="pl-c">#</span>time samples (1/5 sec)</span></pre></div>
<p>Now type:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="h, = rim(xs,xr,L,T60,Nt,Fs)
"><pre>h, <span class="pl-k">=</span> <span class="pl-c1">rim</span>(xs,xr,L,T60,Nt,Fs)</pre></div>
<p>to obtain your room impulse response.</p>
<p>You can also use multiple microphone position by providing
an array of <code>Tuple</code>s containing the microphone coordinates.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="h, = rim(xs,[(1,1,1),(1,1.5,1)],L,T60,Nt,Fs)
"><pre>h, <span class="pl-k">=</span> <span class="pl-c1">rim</span>(xs,[(<span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-c1">1</span>),(<span class="pl-c1">1</span>,<span class="pl-c1">1.5</span>,<span class="pl-c1">1</span>)],L,T60,Nt,Fs)</pre></div>
<p>Here <code>h</code> will consist of a matrix: <code>h[:,1]</code> will be the RIR
relative to the microphone in <code>(1,1,1)</code> etc.
It is also possible to specify the source signal
to directly obtain the sound pressure at the microphones:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="s = randn(Nt)   #src signal 
"><pre>s <span class="pl-k">=</span> <span class="pl-c1">randn</span>(Nt)   <span class="pl-c"><span class="pl-c">#</span>src signal </span></pre></div>
<p>and type:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="p, = rim(s,xs,[(1,1,1),(1,1.5,1)],L,T60,Nt,Fs)
"><pre>p, <span class="pl-k">=</span> <span class="pl-c1">rim</span>(s,xs,[(<span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-c1">1</span>),(<span class="pl-c1">1</span>,<span class="pl-c1">1.5</span>,<span class="pl-c1">1</span>)],L,T60,Nt,Fs)</pre></div>
<p>Type <code>?rim</code> for more details. By default the randomized image method from [1] is used. The original image method proposed in [2] can be reproduced as well by turining off the randomization and fractional delays.</p>
<h2><a id="user-content-other-languages-implementations" class="anchor" aria-hidden="true" href="#other-languages-implementations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Other languages implementations</h2>
<p>A MATLAB implementation of the Randomized Image Method can be found <a href="https://github.com/enzodesena/rim">here</a>.</p>
<h2><a id="user-content-references" class="anchor" aria-hidden="true" href="#references"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>References</h2>
<ul>
<li>[1] <a href="http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=7045580" rel="nofollow">E. De Sena, N. Antonello, M. Moonen, and T. van Waterschoot, "On the Modeling of
Rectangular Geometries in Room Acoustic Simulations", IEEE Transactions of Audio, Speech
Language Processing, vol. 21, no. 4, 2015.</a></li>
<li>[2] Allen, Jont B., and David A. Berkley. "Image method for efficiently simulating small‐room acoustics." The Journal of the Acoustical Society of America vol. 65 no. 4, 1979.</li>
</ul>
</article></div>