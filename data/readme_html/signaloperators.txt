<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-signaloperators" class="anchor" aria-hidden="true" href="#signaloperators"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>SignalOperators</h1>
<p dir="auto"><a href="https://www.repostatus.org/#active" rel="nofollow"><img src="https://camo.githubusercontent.com/2261082c77808ea734741b12e535d02d23c4101f6b8dfec807f4ddc5ef2eeec0/68747470733a2f2f7777772e7265706f7374617475732e6f72672f6261646765732f6c61746573742f6163746976652e737667" alt="Project Status: Active – The project has reached a stable, usable state and is being actively developed." data-canonical-src="https://www.repostatus.org/badges/latest/active.svg" style="max-width: 100%;"></a>
<a href="https://haberdashPI.github.io/SignalOperators.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://haberdashPI.github.io/SignalOperators.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/haberdashPI/SignalOperators.jl/actions?query=workflow%3ACI"><img src="https://github.com/haberdashPI/SignalOperators.jl/workflows/CI/badge.svg" alt="GitHub Actions" style="max-width: 100%;"></a>
<a href="https://juliaci.github.io/NanosoldierReports/pkgeval_badges/report.html" rel="nofollow"><img src="https://camo.githubusercontent.com/230f62d3bff0b2203c5bc597cb543c84992916b2c4ee64b64a56350cc57e9c8a/68747470733a2f2f6a756c696163692e6769746875622e696f2f4e616e6f736f6c646965725265706f7274732f706b676576616c5f6261646765732f532f5369676e616c4f70657261746f72732e737667" alt="PkgEval" data-canonical-src="https://juliaci.github.io/NanosoldierReports/pkgeval_badges/S/SignalOperators.svg" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/haberdashPI/SignalOperators.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/ccfb7fefc7ed699d244b1ed836468d3dc0ef828013e401ae4e43491fba3ca6ef/68747470733a2f2f636f6465636f762e696f2f67682f68616265726461736850492f5369676e616c4f70657261746f72732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/haberdashPI/SignalOperators.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">SignalOperators is a <a href="https://julialang.org/" rel="nofollow">Julia</a> package that aims to provide a clean interface for generating and manipulating signals: typically sounds, but any signal regularly sampled in time can be manipulated.</p>
<p dir="auto"><strong>NOTE</strong>: It's come to my attention that folks have encountered some poor performance with SignalOperators (<a href="https://github.com/haberdashPI/SignalOperators.jl/issues/65" data-hovercard-type="issue" data-hovercard-url="/haberdashPI/SignalOperators.jl/issues/65/hovercard">#65</a>). You may be able to solve some problems by making liberal use of <code>sink</code>. However, I am in the (slow) process of re-implementing this package to avoid those issues. Fair warning, this package is low priority for me, as it is not the thrust of my current work.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using WAV
using SignalOperators
using SignalOperators.Units # allows the use of dB, Hz, s etc... as unitful values

# a pure tone 20 dB below a power 1 signal, with on and off ramps (for
# a smooth onset/offset)
sound1 = Signal(sin,ω=1kHz) |&gt; Until(5s) |&gt; Ramp |&gt; Normpower |&gt; Amplify(-20dB)

# a sound defined by a file, matching the overall power to that of sound1
sound2 = &quot;example.wav&quot; |&gt; Normpower |&gt; Amplify(-20dB)

# a 1kHz sawtooth wave
sound3 = Signal(ϕ -&gt; ϕ-π,ω=1kHz) |&gt; Ramp |&gt; Normpower |&gt; Amplify(-20dB)

# a 5 Hz amplitude modulated noise
sound4 = randn |&gt;
    Amplify(Signal(ϕ -&gt; 0.5sin(ϕ) + 0.5,ω=5Hz)) |&gt;
    Until(5s) |&gt; Normpower |&gt; Amplify(-20dB)

# a 1kHz tone surrounded by a notch noise
SNR = 5dB
x = Signal(sin,ω=1kHz) |&gt; Until(1s) |&gt; Ramp |&gt; Normpower |&gt; Amplify(-20dB + SNR)
y = Signal(randn) |&gt; Until(1s) |&gt; Filt(Bandstop,0.5kHz,2kHz) |&gt; Normpower |&gt;
  Amplify(-20dB)
scene = Mix(x,y)

# write all of the signals to a single file, at 44.1 kHz
Append(sound1,sound2,sound3,sound4,scene) |&gt; ToFramerate(44.1kHz) |&gt; sink(&quot;examples.wav&quot;)
"><pre><span class="pl-k">using</span> WAV
<span class="pl-k">using</span> SignalOperators
<span class="pl-k">using</span> SignalOperators<span class="pl-k">.</span>Units <span class="pl-c"><span class="pl-c">#</span> allows the use of dB, Hz, s etc... as unitful values</span>

<span class="pl-c"><span class="pl-c">#</span> a pure tone 20 dB below a power 1 signal, with on and off ramps (for</span>
<span class="pl-c"><span class="pl-c">#</span> a smooth onset/offset)</span>
sound1 <span class="pl-k">=</span> <span class="pl-c1">Signal</span>(sin,ω<span class="pl-k">=</span><span class="pl-c1">1</span>kHz) <span class="pl-k">|&gt;</span> <span class="pl-c1">Until</span>(<span class="pl-c1">5</span>s) <span class="pl-k">|&gt;</span> Ramp <span class="pl-k">|&gt;</span> Normpower <span class="pl-k">|&gt;</span> <span class="pl-c1">Amplify</span>(<span class="pl-k">-</span><span class="pl-c1">20</span>dB)

<span class="pl-c"><span class="pl-c">#</span> a sound defined by a file, matching the overall power to that of sound1</span>
sound2 <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>example.wav<span class="pl-pds">"</span></span> <span class="pl-k">|&gt;</span> Normpower <span class="pl-k">|&gt;</span> <span class="pl-c1">Amplify</span>(<span class="pl-k">-</span><span class="pl-c1">20</span>dB)

<span class="pl-c"><span class="pl-c">#</span> a 1kHz sawtooth wave</span>
sound3 <span class="pl-k">=</span> <span class="pl-c1">Signal</span>(ϕ <span class="pl-k">-&gt;</span> ϕ<span class="pl-k">-</span>π,ω<span class="pl-k">=</span><span class="pl-c1">1</span>kHz) <span class="pl-k">|&gt;</span> Ramp <span class="pl-k">|&gt;</span> Normpower <span class="pl-k">|&gt;</span> <span class="pl-c1">Amplify</span>(<span class="pl-k">-</span><span class="pl-c1">20</span>dB)

<span class="pl-c"><span class="pl-c">#</span> a 5 Hz amplitude modulated noise</span>
sound4 <span class="pl-k">=</span> randn <span class="pl-k">|&gt;</span>
    <span class="pl-c1">Amplify</span>(<span class="pl-c1">Signal</span>(ϕ <span class="pl-k">-&gt;</span> <span class="pl-c1">0.5</span><span class="pl-c1">sin</span>(ϕ) <span class="pl-k">+</span> <span class="pl-c1">0.5</span>,ω<span class="pl-k">=</span><span class="pl-c1">5</span>Hz)) <span class="pl-k">|&gt;</span>
    <span class="pl-c1">Until</span>(<span class="pl-c1">5</span>s) <span class="pl-k">|&gt;</span> Normpower <span class="pl-k">|&gt;</span> <span class="pl-c1">Amplify</span>(<span class="pl-k">-</span><span class="pl-c1">20</span>dB)

<span class="pl-c"><span class="pl-c">#</span> a 1kHz tone surrounded by a notch noise</span>
SNR <span class="pl-k">=</span> <span class="pl-c1">5</span>dB
x <span class="pl-k">=</span> <span class="pl-c1">Signal</span>(sin,ω<span class="pl-k">=</span><span class="pl-c1">1</span>kHz) <span class="pl-k">|&gt;</span> <span class="pl-c1">Until</span>(<span class="pl-c1">1</span>s) <span class="pl-k">|&gt;</span> Ramp <span class="pl-k">|&gt;</span> Normpower <span class="pl-k">|&gt;</span> <span class="pl-c1">Amplify</span>(<span class="pl-k">-</span><span class="pl-c1">20</span>dB <span class="pl-k">+</span> SNR)
y <span class="pl-k">=</span> <span class="pl-c1">Signal</span>(randn) <span class="pl-k">|&gt;</span> <span class="pl-c1">Until</span>(<span class="pl-c1">1</span>s) <span class="pl-k">|&gt;</span> <span class="pl-c1">Filt</span>(Bandstop,<span class="pl-c1">0.5</span>kHz,<span class="pl-c1">2</span>kHz) <span class="pl-k">|&gt;</span> Normpower <span class="pl-k">|&gt;</span>
  <span class="pl-c1">Amplify</span>(<span class="pl-k">-</span><span class="pl-c1">20</span>dB)
scene <span class="pl-k">=</span> <span class="pl-c1">Mix</span>(x,y)

<span class="pl-c"><span class="pl-c">#</span> write all of the signals to a single file, at 44.1 kHz</span>
<span class="pl-c1">Append</span>(sound1,sound2,sound3,sound4,scene) <span class="pl-k">|&gt;</span> <span class="pl-c1">ToFramerate</span>(<span class="pl-c1">44.1</span>kHz) <span class="pl-k">|&gt;</span> <span class="pl-c1">sink</span>(<span class="pl-s"><span class="pl-pds">"</span>examples.wav<span class="pl-pds">"</span></span>)
</pre></div>
<p dir="auto">The interface is relatively generic and can be used to operate on or produce
a number of different signal representations, including
<a href="https://github.com/JuliaArrays/AxisArrays.jl"><code>AxisArrays</code></a>,
<a href="https://github.com/rafaqz/DimensionalData.jl"><code>DimensionalData</code></a> and
<code>SampleBuf</code> objects from
<a href="https://github.com/JuliaAudio/SampledSignals.jl"><code>SampledSignals</code></a>. It
should also be straightforward to extend the operators to <a href="https://haberdashpi.github.io/SignalOperators.jl/stable/custom_signal/" rel="nofollow">new signal
representations</a>.
Operators generally produce signals that match the type input values, when these are uniform.</p>
<p dir="auto">In many cases, operators are designed to create efficient, lazy
representations of signals, and will only generate data on a call to <a href="https://haberdashpi.github.io/SignalOperators.jl/stable/reference/#SignalOperators.sink" rel="nofollow"><code>sink</code></a>;
however, there are non-lazy versions of the operators as well, for quick,
one-off usage.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using SampledSignals: SampleBuf

a = SampleBuf(rand(100,2),100)
b = SampleBuf(ones(100,2),100)

using SignalOperators

c = mix(a,b)
c == sink(Mix(a,b))"><pre><span class="pl-k">using</span> SampledSignals<span class="pl-k">:</span> SampleBuf

a <span class="pl-k">=</span> <span class="pl-c1">SampleBuf</span>(<span class="pl-c1">rand</span>(<span class="pl-c1">100</span>,<span class="pl-c1">2</span>),<span class="pl-c1">100</span>)
b <span class="pl-k">=</span> <span class="pl-c1">SampleBuf</span>(<span class="pl-c1">ones</span>(<span class="pl-c1">100</span>,<span class="pl-c1">2</span>),<span class="pl-c1">100</span>)

<span class="pl-k">using</span> SignalOperators

c <span class="pl-k">=</span> <span class="pl-c1">mix</span>(a,b)
c <span class="pl-k">==</span> <span class="pl-c1">sink</span>(<span class="pl-c1">Mix</span>(a,b))</pre></div>
<p dir="auto">Because of the smarts in the operators, the resulting value <code>c</code> will also be a <code>SampleBuf</code> object.</p>
<p dir="auto">Read more about how to use the operators in the <a href="https://haberdashPI.github.io/SignalOperators.jl/stable" rel="nofollow">documentation</a>.</p>
<h2 dir="auto"><a id="user-content-status" class="anchor" aria-hidden="true" href="#status"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Status</h2>
<p dir="auto">The functions are relatively bug-free and thoroughly documented.</p>
<p dir="auto">Everything here will run pretty fast. All calls should fall within the same
order of magnitude of equivalent "raw" julia code (e.g. loops and
broadcasting over arrays).</p>
<p dir="auto">I'm the only person I know who has made thorough use of this package: it's obviously possible there are still some bugs or performance issues lurking about. (I welcome new issues or PRs!!!)</p>
<h2 dir="auto"><a id="user-content-acknowledgements" class="anchor" aria-hidden="true" href="#acknowledgements"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Acknowledgements</h2>
<p dir="auto">Many thanks to @ssfrr for some great discussions during this <a href="https://github.com/JuliaAudio/SampledSignals.jl/pull/44" data-hovercard-type="pull_request" data-hovercard-url="/JuliaAudio/SampledSignals.jl/pull/44/hovercard">PR</a>, and related issues on the <a href="https://github.com/JuliaAudio/SampledSignals.jl">SampledSignals</a> package. Those interactions definitely influenced my final design here.</p>
</article></div>