<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-signaloperators" class="anchor" aria-hidden="true" href="#signaloperators"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>SignalOperators</h1>
<p><a href="https://www.repostatus.org/#active" rel="nofollow"><img src="https://camo.githubusercontent.com/fd7a93e9eedafe6205ebee65c9e3579f44df25b7/68747470733a2f2f7777772e7265706f7374617475732e6f72672f6261646765732f6c61746573742f6163746976652e737667" alt="Project Status: Active – The project has reached a stable, usable state and is being actively developed." data-canonical-src="https://www.repostatus.org/badges/latest/active.svg" style="max-width:100%;"></a>
<a href="https://haberdashPI.github.io/SignalOperators.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/f7b92a177c912c1cc007fc9b40f17ff3ee3bb414/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://haberdashPI.github.io/SignalOperators.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/3e353c26ddfe819150acbc732248f4f2a37f5175/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a>
<a href="https://travis-ci.com/haberdashPI/SignalOperators.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/2b039a6d4ea4d9a4216b6fee2e16a694a6def87b/68747470733a2f2f7472617669732d63692e636f6d2f68616265726461736850492f5369676e616c4f70657261746f72732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/haberdashPI/SignalOperators.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://juliaci.github.io/NanosoldierReports/pkgeval_badges/report.html" rel="nofollow"><img src="https://camo.githubusercontent.com/ac145eb28abb981fc7ad6e2a533c68be06d9ad36/68747470733a2f2f6a756c696163692e6769746875622e696f2f4e616e6f736f6c646965725265706f7274732f706b676576616c5f6261646765732f532f5369676e616c4f70657261746f72732e737667" alt="PkgEval" data-canonical-src="https://juliaci.github.io/NanosoldierReports/pkgeval_badges/S/SignalOperators.svg" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/haberdashPI/SignalOperators.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/72e33d6d6efa9e7ba8875705e4d907be76d50048/68747470733a2f2f636f6465636f762e696f2f67682f68616265726461736850492f5369676e616c4f70657261746f72732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/haberdashPI/SignalOperators.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p>SignalOperators is a <a href="https://julialang.org/" rel="nofollow">Julia</a> package that aims to provide a clean interface for generating and manipulating signals: typically sounds, but any signal regularly sampled in time can be manipulated.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> WAV
<span class="pl-k">using</span> SignalOperators
<span class="pl-k">using</span> SignalOperators<span class="pl-k">.</span>Units <span class="pl-c"><span class="pl-c">#</span> allows the use of dB, Hz, s etc... as unitful values</span>

<span class="pl-c"><span class="pl-c">#</span> a pure tone 20 dB below a power 1 signal, with on and off ramps (for</span>
<span class="pl-c"><span class="pl-c">#</span> a smooth onset/offset)</span>
sound1 <span class="pl-k">=</span> <span class="pl-c1">Signal</span>(sin,ω<span class="pl-k">=</span><span class="pl-c1">1</span>kHz) <span class="pl-k">|&gt;</span> <span class="pl-c1">Until</span>(<span class="pl-c1">5</span>s) <span class="pl-k">|&gt;</span> Ramp <span class="pl-k">|&gt;</span> Normpower <span class="pl-k">|&gt;</span> <span class="pl-c1">Amplify</span>(<span class="pl-k">-</span><span class="pl-c1">20</span>dB)

<span class="pl-c"><span class="pl-c">#</span> a sound defined by a file, matching the overall power to that of sound1</span>
sound2 <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>example.wav<span class="pl-pds">"</span></span> <span class="pl-k">|&gt;</span> Normpower <span class="pl-k">|&gt;</span> <span class="pl-c1">Amplify</span>(<span class="pl-k">-</span><span class="pl-c1">20</span>dB)

<span class="pl-c"><span class="pl-c">#</span> a 1kHz sawtooth wave</span>
sound3 <span class="pl-k">=</span> <span class="pl-c1">Signal</span>(ϕ <span class="pl-k">-&gt;</span> ϕ<span class="pl-k">-</span>π,ω<span class="pl-k">=</span><span class="pl-c1">1</span>kHz) <span class="pl-k">|&gt;</span> Ramp <span class="pl-k">|&gt;</span> Normpower <span class="pl-k">|&gt;</span> <span class="pl-c1">Amplify</span>(<span class="pl-k">-</span><span class="pl-c1">20</span>dB)

<span class="pl-c"><span class="pl-c">#</span> a 5 Hz amplitude modulated noise</span>
sound4 <span class="pl-k">=</span> randn <span class="pl-k">|&gt;</span>
    <span class="pl-c1">Amplify</span>(<span class="pl-c1">Signal</span>(ϕ <span class="pl-k">-&gt;</span> <span class="pl-c1">0.5</span><span class="pl-c1">sin</span>(ϕ) <span class="pl-k">+</span> <span class="pl-c1">0.5</span>,ω<span class="pl-k">=</span><span class="pl-c1">5</span>Hz)) <span class="pl-k">|&gt;</span>
    <span class="pl-c1">Until</span>(<span class="pl-c1">5</span>s) <span class="pl-k">|&gt;</span> Normpower <span class="pl-k">|&gt;</span> <span class="pl-c1">Amplify</span>(<span class="pl-k">-</span><span class="pl-c1">20</span>dB)

<span class="pl-c"><span class="pl-c">#</span> a 1kHz tone surrounded by a notch noise</span>
SNR <span class="pl-k">=</span> <span class="pl-c1">5</span>dB
x <span class="pl-k">=</span> <span class="pl-c1">Signal</span>(sin,ω<span class="pl-k">=</span><span class="pl-c1">1</span>kHz) <span class="pl-k">|&gt;</span> <span class="pl-c1">Until</span>(<span class="pl-c1">1</span>s) <span class="pl-k">|&gt;</span> Ramp <span class="pl-k">|&gt;</span> Normpower <span class="pl-k">|&gt;</span> <span class="pl-c1">Amplify</span>(<span class="pl-k">-</span><span class="pl-c1">20</span>dB <span class="pl-k">+</span> SNR)
y <span class="pl-k">=</span> <span class="pl-c1">Signal</span>(randn) <span class="pl-k">|&gt;</span> <span class="pl-c1">Until</span>(<span class="pl-c1">1</span>s) <span class="pl-k">|&gt;</span> <span class="pl-c1">Filt</span>(Bandstop,<span class="pl-c1">0.5</span>kHz,<span class="pl-c1">2</span>kHz) <span class="pl-k">|&gt;</span> Normpower <span class="pl-k">|&gt;</span>
  <span class="pl-c1">Amplify</span>(<span class="pl-k">-</span><span class="pl-c1">20</span>dB)
scene <span class="pl-k">=</span> <span class="pl-c1">Mix</span>(x,y)

<span class="pl-c"><span class="pl-c">#</span> write all of the signals to a single file, at 44.1 kHz</span>
<span class="pl-c1">Append</span>(sound1,sound2,sound3,sound4,scene) <span class="pl-k">|&gt;</span> <span class="pl-c1">ToFramerate</span>(<span class="pl-c1">44.1</span>kHz) <span class="pl-k">|&gt;</span> <span class="pl-c1">sink</span>(<span class="pl-s"><span class="pl-pds">"</span>examples.wav<span class="pl-pds">"</span></span>)
</pre></div>
<p>The interface is relatively generic and can be used to operate on or produce
a number of different signal representations, including
<a href="https://github.com/JuliaArrays/AxisArrays.jl"><code>AxisArrays</code></a>,
<a href="https://github.com/rafaqz/DimensionalData.jl"><code>DimensionalData</code></a> and
<code>SampleBuf</code> objects from
<a href="https://github.com/JuliaAudio/SampledSignals.jl"><code>SampledSignals</code></a>. It
should also be straightforward to extend the operators to <a href="https://haberdashpi.github.io/SignalOperators.jl/stable/custom_signal/" rel="nofollow">new signal
representations</a>.
Operators generally produce signals that match the type input values, when these are uniform.</p>
<p>In many cases, operators are designed to create efficient, lazy
representations of signals, and will only generate data on a call to <a href="https://haberdashpi.github.io/SignalOperators.jl/stable/reference/#SignalOperators.sink" rel="nofollow"><code>sink</code></a>;
however, there are non-lazy versions of the operators as well, for quick,
one-off usage.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> SampledSignals<span class="pl-k">:</span> SampleBuf

a <span class="pl-k">=</span> <span class="pl-c1">SampleBuf</span>(<span class="pl-c1">rand</span>(<span class="pl-c1">100</span>,<span class="pl-c1">2</span>),<span class="pl-c1">100</span>)
b <span class="pl-k">=</span> <span class="pl-c1">SampleBuf</span>(<span class="pl-c1">ones</span>(<span class="pl-c1">100</span>,<span class="pl-c1">2</span>),<span class="pl-c1">100</span>)

<span class="pl-k">using</span> SignalOperators

c <span class="pl-k">=</span> <span class="pl-c1">mix</span>(a,b)
c <span class="pl-k">==</span> <span class="pl-c1">sink</span>(<span class="pl-c1">Mix</span>(a,b))</pre></div>
<p>Because of the smarts in the operators, the resulting value <code>c</code> will also be a <code>SampleBuf</code> object.</p>
<p>Read more about how to use the operators in the <a href="https://haberdashPI.github.io/SignalOperators.jl/stable" rel="nofollow">documentation</a>.</p>
<h2><a id="user-content-status" class="anchor" aria-hidden="true" href="#status"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Status</h2>
<p>The functions are relatively bug-free and thoroughly documented.</p>
<p>Everything here will run pretty fast. All calls should fall within the same
order of magnitude of equivalent "raw" julia code (e.g. loops and
broadcasting over arrays).</p>
<p>I'm the only person I know who has made thorough use of this package: it's obviously possible there are still some bugs or performance issues lurking about. (I welcome new issues or PRs!!!)</p>
<h2><a id="user-content-acknowledgements" class="anchor" aria-hidden="true" href="#acknowledgements"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Acknowledgements</h2>
<p>Many thanks to @ssfrr for some great discussions during this <a href="https://github.com/JuliaAudio/SampledSignals.jl/pull/44">PR</a>, and related issues on the <a href="https://github.com/JuliaAudio/SampledSignals.jl">SampledSignals</a> package. Those interactions definitely influenced my final design here.</p>
</article></div>