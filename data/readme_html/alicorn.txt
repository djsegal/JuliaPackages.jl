<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-alicorn" class="anchor" aria-hidden="true" href="#alicorn"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Alicorn</h1>
<p dir="auto"><em>Dynamically define and manipulate physical units and quantities in Julia</em></p>
<p dir="auto"><strong>Build Status:</strong>
<a href="https://github.com/Huemmer-Daniel/Alicorn/actions"><img src="https://github.com/Huemmer-Daniel/Alicorn/workflows/build/badge.svg" alt="Build status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/Huemmer-Daniel/Alicorn" rel="nofollow"><img src="https://camo.githubusercontent.com/2fba6870eaf49ed2aa3824518d163c7c95a3c154a5febe8649f94b9e0cf31585/68747470733a2f2f636f6465636f762e696f2f67682f4875656d6d65722d44616e69656c2f416c69636f726e2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov status" data-canonical-src="https://codecov.io/gh/Huemmer-Daniel/Alicorn/branch/master/graph/badge.svg" style="max-width: 100%;"></a>
<a href="https://coveralls.io/github/Huemmer-Daniel/Alicorn?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/36cc3cf26f0deb3331849d331578ff00414bc5147b365207dfcb458fbca9add5/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f4875656d6d65722d44616e69656c2f416c69636f726e2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverall status" data-canonical-src="https://coveralls.io/repos/github/Huemmer-Daniel/Alicorn/badge.svg?branch=master" style="max-width: 100%;"></a></p>
<p dir="auto"><strong>Documentation:</strong>
<a href="https://huemmer-daniel.github.io/Alicorn/stable/" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Documentation stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://huemmer-daniel.github.io/Alicorn/dev/" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Documentation development" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a></p>
<p dir="auto">The <code>Alicorn.jl</code> package serves a dual purpose:</p>
<ol dir="auto">
<li>Dynamically define and combine physical units based on the
<a href="https://www.bipm.org/en/publications/si-brochure/" rel="nofollow">International System of Units (SI)</a>.
This functionality is provided by the <code>Units</code> submodule.</li>
<li>Handle physical quantities and correctly treat their units. This
functionality is provided by the <code>Quantities</code> submodule.</li>
</ol>
<h2 dir="auto"><a id="user-content-features" class="anchor" aria-hidden="true" href="#features"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Features</h2>
<ul dir="auto">
<li>Alicorn represents units as objects of type <code>AbstractUnit</code> with
suitable methods to create and manipulate them</li>
<li>Alicorn represents quantities as objects of type <code>AbstractQuantity</code> for scalars and <code>AbstractQuantityArray</code> for vectors and matrices, with suitable methods to create and manipulate them</li>
<li>Units can be combined and quantities formed using <strong>intuitive arithmetic syntax</strong>,
no parsing of strings representing units is required</li>
<li>New units can be <strong>dynamically defined during runtime</strong>, no manipulation of
source files or configuration files is required</li>
<li>Alicorn provides two concrete implementations of <code>AbstractQuantity</code> and <code>AbstractQuantityArray</code>:
<ul dir="auto">
<li><code>SimpleQuantity</code> and <code>SimpleQuantityArray</code>, which explicitly contain a physical unit and is therefore easy to read and interpret.</li>
<li><code>Quantity</code> and <code>QuantityArray</code>, which store only the physical dimension and reference a common set of <code>InternalUnits</code>. This structure reduces the need for unit conversions and is therefore particularly useful in larger numerical operations.</li>
</ul>
</li>
<li>Both kinds of quantities can be freely combined to allow intuitive manipulation of quantities.</li>
</ul>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">The <code>Alicorn.jl</code> package is registered in the <a href="https://github.com/JuliaRegistries/General">General Julia registry</a> and can be installed using Julia's package manager <a href="https://julialang.github.io/Pkg.jl/" rel="nofollow"><code>Pkg.jl</code></a>: In the Julia REPL, add Alicorn to your default Julia environment by running</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; ]

pkg&gt; add Alicorn"><pre class="notranslate"><code>julia&gt; ]

pkg&gt; add Alicorn
</code></pre></div>
<h2 dir="auto"><a id="user-content-quick-start" class="anchor" aria-hidden="true" href="#quick-start"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Quick Start</h2>
<p dir="auto">The listing below shows a minimal example of how to use Alicorn. Refer to the <a href="https://huemmer-daniel.github.io/Alicorn/stable/manual/basic_usage/" rel="nofollow">Basic Usage</a> section for more details.</p>
<p dir="auto">First, let us calculate a force as a <code>SimpleQuantity</code>:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; using Alicorn

julia&gt; ucat = UnitCatalogue() ;

julia&gt; mass = 2 * (ucat.kilo * ucat.gram)
2 kg

julia&gt; acceleration = 10 * ucat.meter * ucat.second^-2
10 m s^-2

julia&gt; force = mass * acceleration
20 kg m s^-2

julia&gt; inUnitsOf(force, ucat.kilo * ucat.newton)
0.02 kN"><pre lang="jldoctest" class="notranslate"><code>julia&gt; using Alicorn

julia&gt; ucat = UnitCatalogue() ;

julia&gt; mass = 2 * (ucat.kilo * ucat.gram)
2 kg

julia&gt; acceleration = 10 * ucat.meter * ucat.second^-2
10 m s^-2

julia&gt; force = mass * acceleration
20 kg m s^-2

julia&gt; inUnitsOf(force, ucat.kilo * ucat.newton)
0.02 kN
</code></pre></div>
<p dir="auto">We can perform the same caluclation using <code>Quantity</code>, choosing a set of <code>InternalUnits</code> first:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; using Alicorn

julia&gt; ucat = UnitCatalogue() ;

julia&gt; intu = InternalUnits(mass = 2 * ucat.gram ) ;

julia&gt; mass = Quantity(2 * (ucat.kilo * ucat.gram), intu)
Quantity{Int64} of dimension M^1 in units of (2 g):
 1000

julia&gt; acceleration = Quantity(10 * ucat.meter * ucat.second^-2, intu)
Quantity{Int64} of dimension L^1 T^-2 in units of (1 m, 1 s):
 10

julia&gt; force = mass * acceleration
Quantity{Int64} of dimension M^1 L^1 T^-2 in units of (2 g, 1 m, 1 s):
 10000

julia&gt; inUnitsOf(force, ucat.kilo * ucat.newton)
0.02 kN"><pre lang="jldoctest" class="notranslate"><code>julia&gt; using Alicorn

julia&gt; ucat = UnitCatalogue() ;

julia&gt; intu = InternalUnits(mass = 2 * ucat.gram ) ;

julia&gt; mass = Quantity(2 * (ucat.kilo * ucat.gram), intu)
Quantity{Int64} of dimension M^1 in units of (2 g):
 1000

julia&gt; acceleration = Quantity(10 * ucat.meter * ucat.second^-2, intu)
Quantity{Int64} of dimension L^1 T^-2 in units of (1 m, 1 s):
 10

julia&gt; force = mass * acceleration
Quantity{Int64} of dimension M^1 L^1 T^-2 in units of (2 g, 1 m, 1 s):
 10000

julia&gt; inUnitsOf(force, ucat.kilo * ucat.newton)
0.02 kN
</code></pre></div>
<h2 dir="auto"><a id="user-content-alternative" class="anchor" aria-hidden="true" href="#alternative"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Alternative</h2>
<p dir="auto">If you are interested in Alicorn, also have a look at the mature <a href="https://github.com/PainterQubits/Unitful.jl"><code>Unitful.jl</code></a> package. <code>Unitful.jl</code> offers functionalities similar to <code>Alicorn.jl</code>, and more.</p>
</article></div>