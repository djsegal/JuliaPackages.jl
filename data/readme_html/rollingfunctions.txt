<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-rollingfunctionsjl" class="anchor" aria-hidden="true" href="#rollingfunctionsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>RollingFunctions.jl</h1>
<h3 dir="auto"><a id="user-content-roll-a-weighted-function-or-run-a-statistic-along-windowed-data" class="anchor" aria-hidden="true" href="#roll-a-weighted-function-or-run-a-statistic-along-windowed-data"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Roll a [weighted] function or run a statistic along windowed data.</h3>
<h4 dir="auto"><a id="user-content-copyright--2017-2023-by-jeffrey-sarnoff--released-under-the-mit-license" class="anchor" aria-hidden="true" href="#copyright--2017-2023-by-jeffrey-sarnoff--released-under-the-mit-license"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Copyright © 2017-2023 by Jeffrey Sarnoff.  Released under the MIT License.</h4>
<hr>
<p dir="auto"><a href="https://JeffreySarnoff.github.io/RollingFunctions.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Dev Documentation" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>   
<a href="https://pkgs.genieframework.com?packages=RollingFunctions&amp;startdate=2015-12-30&amp;enddate=2040-12-31" rel="nofollow"><img src="https://camo.githubusercontent.com/f5e4409dbe8d3b8d1ec2ab66abfb955055f71167bf3b7829148bc811caac2792/68747470733a2f2f736869656c64732e696f2f656e64706f696e743f75726c3d68747470733a2f2f706b67732e67656e69656672616d65776f726b2e636f6d2f6170692f76312f62616467652f526f6c6c696e6746756e6374696f6e73" alt="Package Downloads" data-canonical-src="https://shields.io/endpoint?url=https://pkgs.genieframework.com/api/v1/badge/RollingFunctions" style="max-width: 100%;"></a></p>
<hr>
<h3 dir="auto"><a id="user-content-works-with-integers-floats-and-missings" class="anchor" aria-hidden="true" href="#works-with-integers-floats-and-missings"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>works with integers, floats, and missings</h3>
<h3 dir="auto"><a id="user-content-works-with-unweighted-data" class="anchor" aria-hidden="true" href="#works-with-unweighted-data"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>works with unweighted data</h3>
<ul dir="auto">
<li>data that is a simple vector</li>
<li>data that is a CartesianIndexed vector</li>
</ul>
<h3 dir="auto"><a id="user-content-works-with-weights" class="anchor" aria-hidden="true" href="#works-with-weights"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>works with weights</h3>
<ul dir="auto">
<li>weights given as a simple vector</li>
<li>weights given as a kind of StatsBase.AbstractWeights</li>
</ul>
<h3 dir="auto"><a id="user-content-applies-functions-1-arg--4-args" class="anchor" aria-hidden="true" href="#applies-functions-1-arg--4-args"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>applies functions (1-arg, .., 4-args)</h3>
<ul dir="auto">
<li>applied over unweighted or weighted data</li>
</ul>
<h3 dir="auto"><a id="user-content-works-with-data-matrices" class="anchor" aria-hidden="true" href="#works-with-data-matrices"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>works with data matrices</h3>
<ul dir="auto">
<li>same 1-arg function applied to each column</li>
</ul>
<h3 dir="auto"><a id="user-content-reasonable-uses" class="anchor" aria-hidden="true" href="#reasonable-uses"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>reasonable uses</h3>
<ul dir="auto">
<li>with a simple vector</li>
<li>with a DataFrame column</li>
<li>with a TimeSeries column</li>
<li>with your own function</li>
</ul>
<hr>
<h2 dir="auto"><a id="user-content-rolling-a-function-over-data" class="anchor" aria-hidden="true" href="#rolling-a-function-over-data"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Rolling a function over data</h2>
<p dir="auto">With <code>ndata = length(data)</code>, using a window of length <code>windowsize</code>, rolling a function results in a vector of <code>ndata - windowsize + 1</code> elements.  So there will be obtained <code>windowsize - 1</code> fewer values than there are data values. All exported functions named with the prefix <strong><code>roll</code></strong> behave this way <strong>unless</strong> the keyword <code>padding</code> is given with the value to use for padding (e.g. <code>missing</code>).  Using <code>padding</code> will fill the initial <code>windowsize - 1</code> values with that padding value; the result will match the length of the data.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; data = collect(1.0f0:5.0f0); print(data)
Float32[1.0, 2.0, 3.0, 4.0, 5.0]
julia&gt; windowsize = 3;

julia&gt; result = rollmean(data, windowsize); print(result)
Float32[2.0, 3.0, 4.0]

julia&gt; result = rollmean(data, windowsize; padding=missing); print(result)
Union{Missing, Float32}[missing, missing, 2.0, 3.0, 4.0]"><pre>julia<span class="pl-k">&gt;</span> data <span class="pl-k">=</span> <span class="pl-c1">collect</span>(<span class="pl-c1">1.0f0</span><span class="pl-k">:</span><span class="pl-c1">5.0f0</span>); <span class="pl-c1">print</span>(data)
Float32[<span class="pl-c1">1.0</span>, <span class="pl-c1">2.0</span>, <span class="pl-c1">3.0</span>, <span class="pl-c1">4.0</span>, <span class="pl-c1">5.0</span>]
julia<span class="pl-k">&gt;</span> windowsize <span class="pl-k">=</span> <span class="pl-c1">3</span>;

julia<span class="pl-k">&gt;</span> result <span class="pl-k">=</span> <span class="pl-c1">rollmean</span>(data, windowsize); <span class="pl-c1">print</span>(result)
Float32[<span class="pl-c1">2.0</span>, <span class="pl-c1">3.0</span>, <span class="pl-c1">4.0</span>]

julia<span class="pl-k">&gt;</span> result <span class="pl-k">=</span> <span class="pl-c1">rollmean</span>(data, windowsize; padding<span class="pl-k">=</span><span class="pl-c1">missing</span>); <span class="pl-c1">print</span>(result)
Union{Missing, Float32}[<span class="pl-c1">missing</span>, <span class="pl-c1">missing</span>, <span class="pl-c1">2.0</span>, <span class="pl-c1">3.0</span>, <span class="pl-c1">4.0</span>]</pre></div>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; weights = normalize([1.0f0, 2.0f0, 4.0f0])
3-element Array{Float32,1}:
 0.21821788
 0.43643576
 0.8728715 
 
julia&gt; result = rollmean(data, windowsize, weights); print(result)
Float32[1.23657, 1.74574, 2.25492]

julia&gt; result = rollmean(data, windowsize, weights; padding=missing); print(result)
Union{Missing,Float32}[missing, missing, 1.23657, 1.74574, 2.25492]"><pre>julia<span class="pl-k">&gt;</span> weights <span class="pl-k">=</span> <span class="pl-c1">normalize</span>([<span class="pl-c1">1.0f0</span>, <span class="pl-c1">2.0f0</span>, <span class="pl-c1">4.0f0</span>])
<span class="pl-c1">3</span><span class="pl-k">-</span>element Array{Float32,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">0.21821788</span>
 <span class="pl-c1">0.43643576</span>
 <span class="pl-c1">0.8728715</span> 
 
julia<span class="pl-k">&gt;</span> result <span class="pl-k">=</span> <span class="pl-c1">rollmean</span>(data, windowsize, weights); <span class="pl-c1">print</span>(result)
Float32[<span class="pl-c1">1.23657</span>, <span class="pl-c1">1.74574</span>, <span class="pl-c1">2.25492</span>]

julia<span class="pl-k">&gt;</span> result <span class="pl-k">=</span> <span class="pl-c1">rollmean</span>(data, windowsize, weights; padding<span class="pl-k">=</span><span class="pl-c1">missing</span>); <span class="pl-c1">print</span>(result)
Union{Missing,Float32}[<span class="pl-c1">missing</span>, <span class="pl-c1">missing</span>, <span class="pl-c1">1.23657</span>, <span class="pl-c1">1.74574</span>, <span class="pl-c1">2.25492</span>]</pre></div>
<h2 dir="auto"><a id="user-content-running-a-function-over-data" class="anchor" aria-hidden="true" href="#running-a-function-over-data"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Running a function over data</h2>
<p dir="auto">To obtain the same number of output data values as are given, the initial <code>windowsize - 1</code> values output must be generated outside of the rolling behavior.  This is accomplished by tapering the needed values -- using the same function, rolling it over successively smaller window sizes.  All exported functions named with the prefix <strong><code>run</code></strong> behave this way.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using RollingFunctions
julia&gt; data = collect(1.0f0:5.0f0); print(data)
Float32[1.0, 2.0, 3.0, 4.0, 5.0]
julia&gt; windowsize = 3;

julia&gt; result = runmean(data, windowsize); print(result)
Float32[1.0, 1.5, 2.0, 3.0, 4.0]"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> RollingFunctions
julia<span class="pl-k">&gt;</span> data <span class="pl-k">=</span> <span class="pl-c1">collect</span>(<span class="pl-c1">1.0f0</span><span class="pl-k">:</span><span class="pl-c1">5.0f0</span>); <span class="pl-c1">print</span>(data)
Float32[<span class="pl-c1">1.0</span>, <span class="pl-c1">2.0</span>, <span class="pl-c1">3.0</span>, <span class="pl-c1">4.0</span>, <span class="pl-c1">5.0</span>]
julia<span class="pl-k">&gt;</span> windowsize <span class="pl-k">=</span> <span class="pl-c1">3</span>;

julia<span class="pl-k">&gt;</span> result <span class="pl-k">=</span> <span class="pl-c1">runmean</span>(data, windowsize); <span class="pl-c1">print</span>(result)
Float32[<span class="pl-c1">1.0</span>, <span class="pl-c1">1.5</span>, <span class="pl-c1">2.0</span>, <span class="pl-c1">3.0</span>, <span class="pl-c1">4.0</span>]</pre></div>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using RollingFunctions
julia&gt; using LinearAlgebra: normalize

julia&gt; weights = normalize([1.0f0, 2.0f0, 4.0f0]);
 
julia&gt; result = runmean(data, windowsize, weights); print(result)
Float32[1.0, 1.11803, 1.23657, 1.74574, 2.25492]"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> RollingFunctions
julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> LinearAlgebra<span class="pl-k">:</span> normalize

julia<span class="pl-k">&gt;</span> weights <span class="pl-k">=</span> <span class="pl-c1">normalize</span>([<span class="pl-c1">1.0f0</span>, <span class="pl-c1">2.0f0</span>, <span class="pl-c1">4.0f0</span>]);
 
julia<span class="pl-k">&gt;</span> result <span class="pl-k">=</span> <span class="pl-c1">runmean</span>(data, windowsize, weights); <span class="pl-c1">print</span>(result)
Float32[<span class="pl-c1">1.0</span>, <span class="pl-c1">1.11803</span>, <span class="pl-c1">1.23657</span>, <span class="pl-c1">1.74574</span>, <span class="pl-c1">2.25492</span>]</pre></div>
<h3 dir="auto"><a id="user-content-rolling-stats" class="anchor" aria-hidden="true" href="#rolling-stats"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>rolling stats</h3>
<ul dir="auto">
<li><code>rollmin</code>, <code>rollmax</code>, <code>rollmean</code>, <code>rollmedian</code></li>
<li><code>rollvar</code>, <code>rollstd</code>, <code>rollsem</code>, <code>rollmad</code>, <code>rollmad_normalized</code></li>
<li><code>rollskewness</code>, <code>rollkurtosis</code>, <code>rollvariation</code></li>
<li><code>rollcor</code>, <code>rollcov</code> (over two data vectors)</li>
</ul>
<h3 dir="auto"><a id="user-content-running-stats" class="anchor" aria-hidden="true" href="#running-stats"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>running stats</h3>
<ul dir="auto">
<li><code>runmin</code>, <code>runmax</code>, <code>runmean</code>, <code>runmedian</code></li>
<li><code>runvar</code>, <code>runstd</code>, <code>runsem</code>, <code>runmad</code>, <code>runmad_normalized</code></li>
<li><code>runskewness</code>, <code>runkurtosis</code>, <code>runvariation</code></li>
<li><code>runcor</code>, <code>runcov</code> (over two data vectors)</li>
</ul>
<p dir="auto">Some of these use a limit value for running over vec of length 1.</p>
<h3 dir="auto"><a id="user-content-works-with-functions-over-1-2-3-or-4-data-vectors" class="anchor" aria-hidden="true" href="#works-with-functions-over-1-2-3-or-4-data-vectors"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>works with functions over 1, 2, 3 or 4 data vectors</h3>
<ul dir="auto">
<li>
<p dir="auto"><code>rolling(function, data1, data2, windowsize)</code></p>
</li>
<li>
<p dir="auto"><code>rolling(function, data1, data2, windowsize, weights)</code>  (weights apply to both data vectors)</p>
</li>
<li>
<p dir="auto"><code>rolling(function, data1, data2, windowsize, weights1, weights2)</code></p>
</li>
<li>
<p dir="auto"><code>rolling(function, data1, data2, data3, windowsize)</code></p>
</li>
<li>
<p dir="auto"><code>rolling(function, data1, data2, data3, windowsize, weights)</code>  (weights apply to all data vectors)</p>
</li>
<li>
<p dir="auto"><code>rolling(function, data1, data2, data3, windowsize, weights1, weights2, weights3)</code></p>
</li>
<li>
<p dir="auto"><code>running(function, data1, data2, data3, data4, windowsize)</code></p>
</li>
<li>
<p dir="auto"><code>running(function, data1, data2, data3, data4, windowsize, weights)</code>  (weights apply to all data vectors)</p>
</li>
<li>
<p dir="auto"><code>running(function, data1, data2, data3, data4, windowsize, weights1, weights2, weights3, weights4)</code></p>
</li>
</ul>
<p dir="auto">!! CHANGE ME !!
Many statistical functions of two or more vector variables are not well defined for vectors of length 1.
To run these functions and get an initial tapered value that is well defined, supply the desired value as <code>firstresult</code>.</p>
<ul dir="auto">
<li><code>running(function, data1, data2, windowsize, firstresult)</code></li>
<li><code>running(function, data1, data2, windowsize, weights, firstresult)</code>  (weights apply to both data vectors)</li>
</ul>
<h2 dir="auto"><a id="user-content-philosophy-and-purpose" class="anchor" aria-hidden="true" href="#philosophy-and-purpose"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Philosophy and Purpose</h2>
<p dir="auto">This package provides a way for rolling and for running a functional window over data.  Data is conveyed either as a vector or as a means of obtaining a vector from a matrix or 3D array or other data structure (e.g. dataframes, timeseries).  Windows move over the data.  One may use unweighted windows or windows wherein each position carries weight. Weighted windows apply the weight sequence through the window as it moves over the data.</p>
<p dir="auto">When a window is provided with weights, the weights <del>should</del> must be normalized. We provide an algorithmically safe normalizing function that you may rely upon. Adding the sequence of normalized values one to the next obtains 1.0 or a value very slightly less than 1.0 -- their sum will not exceed unity.
<em>I do not know how to augment something already whole while respecting its integrity.</em></p>
<p dir="auto">When running with a weighted window, the initial (first, second ..) values are determined using a tapering of the weighted window's span.  This requires that the weights themselves be tapered along with the determinative function that is rolled.  In this case, the weight subsequence is normalized (sums to one(T)), and that reweighting is used with the foreshortened window to taper that which rolls.</p>
<p dir="auto">This software exists to simpilfy some of what you create and to faciliate some of the work you do.</p>
<p dir="auto">Some who use it insightfully share the best of that. Others write words that smile.</p>
<p dir="auto">All of this is expressed through the design of RollingFunctions.</p>
<h2 dir="auto"><a id="user-content-also-consider" class="anchor" aria-hidden="true" href="#also-consider"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Also Consider</h2>
<ul dir="auto">
<li>The mapwindow function from <a href="https://github.com/JuliaImages/ImageFiltering.jl">ImageFiltering</a>
supports multidimensional window indexing and different maps.</li>
</ul>
</article></div>