<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-rollingfunctionsjl" class="anchor" aria-hidden="true" href="#rollingfunctionsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>RollingFunctions.jl</h1>
<h3><a id="user-content-roll-a-function-over-data-run-a-statistic-along-a-weighted-data-window" class="anchor" aria-hidden="true" href="#roll-a-function-over-data-run-a-statistic-along-a-weighted-data-window"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Roll a function over data, run a statistic along a [weighted] data window.</h3>
<h4><a id="user-content-copyright--2017-2018-by-jeffrey-sarnoff--released-under-the-mit-license" class="anchor" aria-hidden="true" href="#copyright--2017-2018-by-jeffrey-sarnoff--released-under-the-mit-license"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Copyright Â© 2017-2018 by Jeffrey Sarnoff.  Released under the MIT License.</h4>
<hr>
<p><a href="https://travis-ci.org/JeffreySarnoff/RollingFunctions.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/be57d2de5619070c8a79a8f94d641f978f7facfd/68747470733a2f2f7472617669732d63692e6f72672f4a6566667265795361726e6f66662f526f6c6c696e6746756e6374696f6e732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JeffreySarnoff/RollingFunctions.jl.svg?branch=master" style="max-width:100%;"></a></p>
<hr>
<h3><a id="user-content-works-with-integers-floats-and-missings" class="anchor" aria-hidden="true" href="#works-with-integers-floats-and-missings"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>works with integers, floats, and missings</h3>
<h3><a id="user-content-works-with-unweighted-data" class="anchor" aria-hidden="true" href="#works-with-unweighted-data"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>works with unweighted data</h3>
<ul>
<li>data that is a simple vector</li>
<li>data that is a CartesianIndexed vector</li>
</ul>
<h3><a id="user-content-works-with-weights" class="anchor" aria-hidden="true" href="#works-with-weights"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>works with weights</h3>
<ul>
<li>weights given as a simple vector</li>
<li>weights given as a kind of StatsBase.AbstractWeights</li>
</ul>
<h3><a id="user-content-examples-of-use" class="anchor" aria-hidden="true" href="#examples-of-use"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>examples of use</h3>
<ul>
<li>with a simple vector</li>
<li>with a DataFrame column</li>
<li>with a TimeSeries column</li>
<li>with your own function</li>
</ul>
<hr>
<h2><a id="user-content-rolling-a-function-over-data" class="anchor" aria-hidden="true" href="#rolling-a-function-over-data"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Rolling a function over data</h2>
<p>With <code>ndata = length(data)</code>, using a window of length <code>windowsize</code>, rolling a function results in a vector of <code>ndata - windowsize + 1</code> elements.  So there will be obtained <code>windowsize - 1</code> fewer values than there are data values. All exported functions named with the prefix <strong><code>roll</code></strong> behave this way.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> data <span class="pl-k">=</span> <span class="pl-c1">collect</span>(<span class="pl-c1">1.0</span>f0<span class="pl-k">:</span><span class="pl-c1">5.0</span>f0); <span class="pl-c1">print</span>(data)
Float32[<span class="pl-c1">1.0</span>, <span class="pl-c1">2.0</span>, <span class="pl-c1">3.0</span>, <span class="pl-c1">4.0</span>, <span class="pl-c1">5.0</span>]
julia<span class="pl-k">&gt;</span> windowsize <span class="pl-k">=</span> <span class="pl-c1">3</span>;

julia<span class="pl-k">&gt;</span> result <span class="pl-k">=</span> <span class="pl-c1">rollmean</span>(data, windowsize); <span class="pl-c1">print</span>(result)
Float32[<span class="pl-c1">2.0</span>, <span class="pl-c1">3.0</span>, <span class="pl-c1">4.0</span>]</pre></div>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> weights <span class="pl-k">=</span> <span class="pl-c1">normalize</span>([<span class="pl-c1">1.0</span>f0, <span class="pl-c1">2.0</span>f0, <span class="pl-c1">4.0</span>f0])
<span class="pl-c1">3</span><span class="pl-k">-</span>element Array{Float32,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">0.21821788</span>
 <span class="pl-c1">0.43643576</span>
 <span class="pl-c1">0.8728715</span> 
 
julia<span class="pl-k">&gt;</span> result <span class="pl-k">=</span> <span class="pl-c1">rollmean</span>(data, windowsize, weights); <span class="pl-c1">print</span>(result)
Float32[<span class="pl-c1">1.23657</span>, <span class="pl-c1">1.74574</span>, <span class="pl-c1">2.25492</span>]</pre></div>
<h2><a id="user-content-running-a-function-over-data" class="anchor" aria-hidden="true" href="#running-a-function-over-data"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Running a function over data</h2>
<p>To obtain the same number of output data values as are given, the initial <code>windowsize - 1</code> values output must be generated outside of the rolling behavior.  This is accomplished by tapering the needed values -- using the same function, rolling it over successively smaller window sizes.  All exported functions named with the prefix <strong><code>run</code></strong> behave this way.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> RollingFunctions
julia<span class="pl-k">&gt;</span> data <span class="pl-k">=</span> <span class="pl-c1">collect</span>(<span class="pl-c1">1.0</span>f0<span class="pl-k">:</span><span class="pl-c1">5.0</span>f0); <span class="pl-c1">print</span>(data)
Float32[<span class="pl-c1">1.0</span>, <span class="pl-c1">2.0</span>, <span class="pl-c1">3.0</span>, <span class="pl-c1">4.0</span>, <span class="pl-c1">5.0</span>]
julia<span class="pl-k">&gt;</span> windowsize <span class="pl-k">=</span> <span class="pl-c1">3</span>;

julia<span class="pl-k">&gt;</span> result <span class="pl-k">=</span> <span class="pl-c1">runmean</span>(data, windowsize); <span class="pl-c1">print</span>(result)
Float32[<span class="pl-c1">1.0</span>, <span class="pl-c1">1.5</span>, <span class="pl-c1">2.0</span>, <span class="pl-c1">3.0</span>, <span class="pl-c1">4.0</span>]</pre></div>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> RollingFunctions
julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> LinearAlgebra<span class="pl-k">:</span> normalized

julia<span class="pl-k">&gt;</span> weights <span class="pl-k">=</span> <span class="pl-c1">normalize</span>([<span class="pl-c1">1.0</span>f0, <span class="pl-c1">2.0</span>f0, <span class="pl-c1">4.0</span>f0]);
 
julia<span class="pl-k">&gt;</span> result <span class="pl-k">=</span> <span class="pl-c1">runmean</span>(data, windowsize, weights); <span class="pl-c1">print</span>(result)
Float32[<span class="pl-c1">1.0</span>, <span class="pl-c1">1.11803</span>, <span class="pl-c1">1.23657</span>, <span class="pl-c1">1.74574</span>, <span class="pl-c1">2.25492</span>]</pre></div>
<h3><a id="user-content-rolling-stats" class="anchor" aria-hidden="true" href="#rolling-stats"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>rolling stats</h3>
<ul>
<li><code>rollmin</code>, <code>rollmax</code>, <code>rollmean</code>, <code>rollmedian</code></li>
<li><code>rollvar</code>, <code>rollstd</code>, <code>rollsem</code>, <code>rollmad</code>, <code>rollmad_normalized</code></li>
<li><code>rollskewness</code>, <code>rollkurtosis</code>, <code>rollvariation</code></li>
<li><code>rollcor</code>, <code>rollcov</code> (over two data vectors)</li>
</ul>
<h3><a id="user-content-running-stats" class="anchor" aria-hidden="true" href="#running-stats"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>running stats</h3>
<ul>
<li><code>runmin</code>, <code>runmax</code>, <code>runmean</code>, <code>runmedian</code></li>
<li><code>runvar</code>, <code>runstd</code>, <code>runsem</code>, <code>runmad</code>, <code>runmad_normalized</code></li>
<li><code>runskewness</code>, <code>runkurtosis</code>, <code>runvariation</code></li>
<li><code>runcor</code>, <code>runcov</code> (over two data vectors)</li>
</ul>
<p>Some of these use a limit value for running over vec of length 1.</p>
<h3><a id="user-content-works-with-your-functions" class="anchor" aria-hidden="true" href="#works-with-your-functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>works with your functions</h3>
<ul>
<li><code>rolling(function, data, windowsize)</code></li>
<li><code>rolling(function, data, windowsize, weights)</code></li>
<li><code>running(function, data, windowsize)</code></li>
<li><code>running(function, data, windowsize, weights)</code></li>
</ul>
<h3><a id="user-content-works-with-two-data-vectors" class="anchor" aria-hidden="true" href="#works-with-two-data-vectors"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>works with two data vectors</h3>
<ul>
<li>
<p><code>rolling(function, data1, data2, windowsize)</code></p>
</li>
<li>
<p><code>rolling(function, data1, data2, windowsize, weights)</code>  (weights apply to both data vectors)</p>
</li>
<li>
<p><code>rolling(function, data1, data2, windowsize, weights1, weights2)</code></p>
</li>
<li>
<p><code>running(function, data1, data2, windowsize)</code></p>
</li>
<li>
<p><code>running(function, data1, data2, windowsize, weights)</code>  (weights apply to both data vectors)</p>
</li>
<li>
<p><code>running(function, data1, data2, windowsize, weights1, weights2)</code></p>
</li>
</ul>
<p>Many statistical functions of two (vector) variables are not well defined for vectors of length 1. To run these functions and get an initial tapered value that is well defined, supply the desired value as <code>firstresult</code>.</p>
<ul>
<li><code>running(function, data1, data2, windowsize, firstresult)</code></li>
<li><code>running(function, data1, data2, windowsize, weights, firstresult)</code>  (weights apply to both data vectors)</li>
</ul>
<h2><a id="user-content-philosophy-and-purpose" class="anchor" aria-hidden="true" href="#philosophy-and-purpose"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Philosophy and Purpose</h2>
<p>This package provides a way for rolling and for running a functional window over data.  Data is conveyed either as a vector or as a means of obtaining a vector from a matrix or 3D array or other data structure (e.g. dataframes, timeseries).  Windows move over the data.  One may use unweighted windows or windows that are position weighted.  Weighted windows apply the weight sequence to the window as it moves over the data.</p>
<p>When running with a weighted window, the initial (first, second ..) values are determined using a tapering of the weighted window's span.  This requires that the weights themselves be tapered along with the determinative function that is rolled.  In this case, the weight subsequence is normalized (sums to one(T)), and that reweighting is used with the foreshortened window to taper that which rolls.</p>
<p>This work, and its upkeep (or its replacement by other's work), is offered as an appropriate and reliable scaffold. The work here is to be crisp, precise, accurate, and ever simplifying.  There is no desire to repletify manners of handling here.</p>
<p>Some additional, small, purpose driven and providentially focused packages provide the meta-synthesis and enfolding dispatches that bring the more to the here.</p>
<h2><a id="user-content-also-consider" class="anchor" aria-hidden="true" href="#also-consider"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Also Consider</h2>
<ul>
<li>The mapwindow function from <a href="https://github.com/JuliaImages/ImageFiltering.jl">ImageFiltering</a>
supports multidimensional window indexing and different maps.</li>
</ul>
</article></div>