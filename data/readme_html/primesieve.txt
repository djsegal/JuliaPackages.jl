<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-primesieve" class="anchor" aria-hidden="true" href="#primesieve"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>PrimeSieve</h1>
<p dir="auto"><em>Prime number and factoring functions</em></p>
<p dir="auto">This package provides functions related to prime numbers and factoring,
mostly for generating and counting primes and factoring integers. This package
uses some of the fastest open-source libraries for these functions.
The name <code>Primes</code> would be better, but that might cause collisions.</p>
<p dir="auto">Note: Dec 5, 2016.  Bitrot rests for no man.  Quite a bit still works, but quite a bit not.
Broken tests are commented out, so tests suite should pass. If you want to fix something and
make a PR, please do. The most challenging problem is the C wrapper to make <code>libsmsieve.so</code>
from a standalone program no longer works for all inputs.</p>
<p dir="auto">See <a href="../master/LICENSE.md">LICENSE.md</a> for links to the authors of the tables and the libraries
used in this package.</p>
<p dir="auto">I am unaware of binaries of libprimesieve and libprimecount for Windows and OSX, so there
is no easy installation for these platforms.</p>
<p dir="auto">This is not a registered package, and it has a non-registered dependency. You can install it
(at least on Unix) with</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Pkg.clone(&quot;https://github.com/jlapeyre/DeepConvert.jl&quot;)
Pkg.clone(&quot;https://github.com/jlapeyre/PrimeSieve.jl&quot;)
Pkg.build(&quot;PrimeSieve&quot;)"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">clone</span>(<span class="pl-s"><span class="pl-pds">"</span>https://github.com/jlapeyre/DeepConvert.jl<span class="pl-pds">"</span></span>)
Pkg<span class="pl-k">.</span><span class="pl-c1">clone</span>(<span class="pl-s"><span class="pl-pds">"</span>https://github.com/jlapeyre/PrimeSieve.jl<span class="pl-pds">"</span></span>)
Pkg<span class="pl-k">.</span><span class="pl-c1">build</span>(<span class="pl-s"><span class="pl-pds">"</span>PrimeSieve<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">Some functions in this package</p>
<ul dir="auto">
<li><code>genprimes(a,b)</code>               generate array of primes between <code>a</code> and <code>b</code>, inclusive</li>
<li><code>genprimes(b)</code>               generate array of primes between 2 and <code>b</code></li>
<li><code>mfactor(n)</code>                factor integers up to about 100 decimal digits.</li>
<li><code>primepi(n)</code>               the prime counting function: number of primes &lt; n</li>
<li><code>countprimes(a,b)</code>         number of primes between a and b</li>
<li><code>nextprime(n)</code>, <code>prevprime(n)</code>   first prime greater (or smaller) than n</li>
<li><code>someprimes(n1,n2)</code>  iterator. all primes from n1 through n2</li>
<li><code>someprimes(n2)</code>     all primes from 2 through n2</li>
<li><code>allprimes(n)</code>   iterator. all primes &gt;= n</li>
<li><code>allprimes()</code>    all primes</li>
<li><code>nthprime(n)</code>   the nth prime</li>
<li><code>nprimes(n,start)</code>   generate array of the first n primes &gt; start</li>
<li><code>isprime(z)</code>  primality test for Gaussian integers</li>
<li><code>randprime(a,b)</code> random prime between <code>a</code> and <code>b</code></li>
</ul>
<p dir="auto">This package uses the following tables and libraries.</p>
<p dir="auto">[T. Oliveira's tables of the prime counting function] (<a href="http://www.ieeta.pt/~tos/primes.html" rel="nofollow">http://www.ieeta.pt/~tos/primes.html</a>)</p>
<p dir="auto">Prime number sieve library [libprimesieve] (<a href="http://primesieve.org/" rel="nofollow">http://primesieve.org/</a>) and
prime counting function library <a href="https://github.com/kimwalisch/primecount">libprimecount</a></p>
<p dir="auto">Integer factoring libraries <a href="http://sourceforge.net/projects/msieve/" rel="nofollow">msieve</a> and
<a href="http://ecm.gforge.inria.fr/" rel="nofollow">gmp-ecm</a></p>
<h3 dir="auto"><a id="user-content-data-types" class="anchor" aria-hidden="true" href="#data-types"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Data types</h3>
<p dir="auto">The tables are encoded in Int128. The native type of the sieve (libprimesieve) is
Uint64. The input/output type of the fastest primepi algorithm in libprimecount, the Deleglise Rivat
algorithm, is Int128. There is a risk of overflow when constructing and giving
arguments to functions in this package. The easiest way to avoid this
is to put arguments in quotes: eg <code>countprimes("10^19","10^19+100")</code>.
Also available are <code>@bigint</code> and <code>@int128</code> from DeepConvert.</p>
<h2 dir="auto"><a id="user-content-functions" class="anchor" aria-hidden="true" href="#functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Functions</h2>
<p dir="auto">Most of the following functions are vectorized.</p>
<h3 dir="auto"><a id="user-content-genprimes" class="anchor" aria-hidden="true" href="#genprimes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>genprimes</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="genprimes(start,stop)"><pre><span class="pl-c1">genprimes</span>(start,stop)</pre></div>
<p dir="auto">Return an array of all primes <code>&gt;= start</code> and <code>&lt;= stop</code>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="genprimes(stop)"><pre><span class="pl-c1">genprimes</span>(stop)</pre></div>
<p dir="auto">Return an array of all primes between 1 and <code>stop</code></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="genprimes(start,stop; alg = algorithm)"><pre><span class="pl-c1">genprimes</span>(start,stop; alg <span class="pl-k">=</span> algorithm)</pre></div>
<p dir="auto">Generate primes using a specified algorithm. The algorithm must be
one of <code>:auto</code> (the default), <code>:sieve</code>, or <code>:next</code>.  Which algorithm is
more efficient depends on the parameters. In general, <code>:sieve</code> is
better for larger intervals, and <code>:next</code> is better for larger values
of <code>start</code>. The keyword <code>:sieve</code> uses a very fast sieve (libprimesieve), and
<code>:next</code> uses the function <code>nextprime</code>.</p>
<p dir="auto">If you exceed the upper limit for argument to the sieve, then <code>:next</code>
is chosen automatically.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; @bigint genprimes(10^20, 10^20+1000)
24-element Array{BigInt,1}:
 100000000000000000039 ..."><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">@bigint</span> <span class="pl-c1">genprimes</span>(<span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">20</span>, <span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">20</span><span class="pl-k">+</span><span class="pl-c1">1000</span>)
<span class="pl-c1">24</span><span class="pl-k">-</span>element Array{BigInt,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">100000000000000000039</span> <span class="pl-k">...</span></pre></div>
<p dir="auto">This could also have been written <code>genprimes(bi"10^20", bi"10^20+1000")</code></p>
<h3 dir="auto"><a id="user-content-primepi" class="anchor" aria-hidden="true" href="#primepi"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>primepi</h3>
<p dir="auto">Computes the <a href="http://en.wikipedia.org/wiki/Prime-counting_function" rel="nofollow">prime counting function</a>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="primepi(x; alg = algorithm)"><pre><span class="pl-c1">primepi</span>(x; alg <span class="pl-k">=</span> algorithm)</pre></div>
<p dir="auto">The efficient algorithms (or methods) are :auto (the default), :dr,
and :tabsieve. The default, :auto, tries to choose the faster between
:dr and :tabsieve (see Notes below). The other algorithms are
slower in all cases. They are: <a href="http://mathworld.wolfram.com/LegendresFormula.html" rel="nofollow">:legendre</a>,
<a href="http://mathworld.wolfram.com/LehmersFormula.html" rel="nofollow">:lehmer</a>,
<a href="http://mathworld.wolfram.com/MeisselsFormula.html" rel="nofollow">:meissel</a>,
<a href="http://en.wikipedia.org/wiki/Prime-counting_function" rel="nofollow">:lmo</a>,
:sieve.  The algorithm :dr uses an efficient parallel Deleglise Rivat
method. The algorithm :tabsieve uses a combination of tables and a
sieve and is more efficient when x is not too much greater than a
table entry. (Note: Below, 10^14+10^8 is not too much greater than
10^14.) For example</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; @time primepi(10^14+10^10; alg = :tabsieve)
elapsed time: 6.622672664 seconds (216 bytes allocated)
3205251958942

julia&gt; @time primepi(10^14+10^10; alg = :dr)            # Deleglise Rivat is faster
elapsed time: 0.495413145 seconds (208 bytes allocated)
3205251958942

julia&gt; @time primepi(10^14+10^8; alg = :dr)
elapsed time: 0.505796298 seconds (208 bytes allocated)
3204944853481

julia&gt; @time primepi(10^14+10^8; alg = :tabsieve)       # Table and sieve is faster
elapsed time: 0.08235147 seconds (216 bytes allocated)
3204944853481"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">@time</span> <span class="pl-c1">primepi</span>(<span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">14</span><span class="pl-k">+</span><span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">10</span>; alg <span class="pl-k">=</span> <span class="pl-c1">:tabsieve</span>)
elapsed time<span class="pl-k">:</span> <span class="pl-c1">6.622672664</span> seconds (<span class="pl-c1">216</span> bytes allocated)
<span class="pl-c1">3205251958942</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@time</span> <span class="pl-c1">primepi</span>(<span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">14</span><span class="pl-k">+</span><span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">10</span>; alg <span class="pl-k">=</span> <span class="pl-c1">:dr</span>)            <span class="pl-c"><span class="pl-c">#</span> Deleglise Rivat is faster</span>
elapsed time<span class="pl-k">:</span> <span class="pl-c1">0.495413145</span> seconds (<span class="pl-c1">208</span> bytes allocated)
<span class="pl-c1">3205251958942</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@time</span> <span class="pl-c1">primepi</span>(<span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">14</span><span class="pl-k">+</span><span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">8</span>; alg <span class="pl-k">=</span> <span class="pl-c1">:dr</span>)
elapsed time<span class="pl-k">:</span> <span class="pl-c1">0.505796298</span> seconds (<span class="pl-c1">208</span> bytes allocated)
<span class="pl-c1">3204944853481</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@time</span> <span class="pl-c1">primepi</span>(<span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">14</span><span class="pl-k">+</span><span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">8</span>; alg <span class="pl-k">=</span> <span class="pl-c1">:tabsieve</span>)       <span class="pl-c"><span class="pl-c">#</span> Table and sieve is faster</span>
elapsed time<span class="pl-k">:</span> <span class="pl-c1">0.08235147</span> seconds (<span class="pl-c1">216</span> bytes allocated)
<span class="pl-c1">3204944853481</span></pre></div>
<h3 dir="auto"><a id="user-content-mfactor" class="anchor" aria-hidden="true" href="#mfactor"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>mfactor</h3>
<p dir="auto">Factor an integer.</p>
<p dir="auto">Example:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; @time mfactor(&quot;2^251-1&quot;)
elapsed time: 29.709989827 seconds (13283880 bytes allocated)
Dict{Int128,Int64} with 5 entries:
  12070396178249893039969681 =&gt; 1
  178230287214063289511      =&gt; 1
  61676882198695257501367    =&gt; 1
  503                        =&gt; 1
  54217                      =&gt; 1"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">@time</span> <span class="pl-c1">mfactor</span>(<span class="pl-s"><span class="pl-pds">"</span>2^251-1<span class="pl-pds">"</span></span>)
elapsed time<span class="pl-k">:</span> <span class="pl-c1">29.709989827</span> seconds (<span class="pl-c1">13283880</span> bytes allocated)
Dict{Int128,Int64} with <span class="pl-c1">5</span> entries<span class="pl-k">:</span>
  <span class="pl-c1">12070396178249893039969681</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1</span>
  <span class="pl-c1">178230287214063289511</span>      <span class="pl-k">=&gt;</span> <span class="pl-c1">1</span>
  <span class="pl-c1">61676882198695257501367</span>    <span class="pl-k">=&gt;</span> <span class="pl-c1">1</span>
  <span class="pl-c1">503</span>                        <span class="pl-k">=&gt;</span> <span class="pl-c1">1</span>
  <span class="pl-c1">54217</span>                      <span class="pl-k">=&gt;</span> <span class="pl-c1">1</span></pre></div>
<p dir="auto"><code>mfactor(n; ecm = true)</code> uses <a href="http://en.wikipedia.org/wiki/Lenstra_elliptic_curve_factorization" rel="nofollow">ecm</a>
to search for factors larger than 15 digits, rather than less than 15 digits.</p>
<p dir="auto"><code>mfactor(n; deadline = m)</code> aborts the factoring after <code>m</code> minutes.</p>
<p dir="auto"><code>mfactor(n; logfile = "filename.log")</code> writes information to a log file.</p>
<p dir="auto"><code>mfactor(n; info = true)</code> prints log information to the terminal.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="mfactor( @bigint [ 2^100 + i for i in -5:5] )  # returns an array of factorizations."><pre><span class="pl-c1">mfactor</span>( <span class="pl-c1">@bigint</span> [ <span class="pl-c1">2</span><span class="pl-k">^</span><span class="pl-c1">100</span> <span class="pl-k">+</span> i <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-k">-</span><span class="pl-c1">5</span><span class="pl-k">:</span><span class="pl-c1">5</span>] )  <span class="pl-c"><span class="pl-c">#</span> returns an array of factorizations.</span></pre></div>
<p dir="auto"><code>mfactor</code> calls libmsieve and libecm.</p>
<h3 dir="auto"><a id="user-content-countprimes" class="anchor" aria-hidden="true" href="#countprimes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>countprimes</h3>
<p dir="auto">Count the number of primes (or
<a href="http://en.wikipedia.org/wiki/Prime_k-tuple" rel="nofollow">prime tuplets</a> in an interval. This
looks up the largest value in the table that is smaller than the
requested value and computes the remaining values. Note that <code>primepi</code> is
logically equivalent to countprimes with <code>start=1</code>. For <code>start=1</code>,
The function <code>primepi</code> is often much faster than, and is never slower than <code>countprimes</code></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="countprimes(stop)            # count the number of primes less than or equal to stop
countprimes(start,stop)      # count the number of primes &gt;= start and &lt;= stop
countprimes([start], stop, tuplet=n) # Count prime n-tuplets
countprimes(start, stop, alg = algorithm) # Count prime n-tuplets"><pre><span class="pl-c1">countprimes</span>(stop)            <span class="pl-c"><span class="pl-c">#</span> count the number of primes less than or equal to stop</span>
<span class="pl-c1">countprimes</span>(start,stop)      <span class="pl-c"><span class="pl-c">#</span> count the number of primes &gt;= start and &lt;= stop</span>
<span class="pl-c1">countprimes</span>([start], stop, tuplet<span class="pl-k">=</span>n) <span class="pl-c"><span class="pl-c">#</span> Count prime n-tuplets</span>
<span class="pl-c1">countprimes</span>(start, stop, alg <span class="pl-k">=</span> algorithm) <span class="pl-c"><span class="pl-c">#</span> Count prime n-tuplets</span></pre></div>
<p dir="auto">The default value of start is 1.  The optional keyword argument
'tuplet' may take values between 1 and 6, that is primes, through
prime sextuplets. Tables are implemented only for 'tuplet' equal to
one, that is for primes, but not tuplets.</p>
<p dir="auto">The optional keyword argument alg may be one of :tabsieve (the default),
:next, :nexta, or :sieve (:sieve will always be slower than :tabsieve).
As above, <code>:tabsieve</code> uses a combination of tables and a fast sieve.
:next and :nexta are two different variants of <code>next_prime</code>.</p>
<p dir="auto">Examples</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="countprimes(100,1000)  # the number of primes x satisfying  100 &lt;= x &lt;= 1000
143
countprimes(100,tuplet=3)  # the number of prime triplets between 1 and 100
8
countprimes(10,1000,tuplet=6)  # the number of prime sextuplets between 100 and 1000
1     "><pre><span class="pl-c1">countprimes</span>(<span class="pl-c1">100</span>,<span class="pl-c1">1000</span>)  <span class="pl-c"><span class="pl-c">#</span> the number of primes x satisfying  100 &lt;= x &lt;= 1000</span>
<span class="pl-c1">143</span>
<span class="pl-c1">countprimes</span>(<span class="pl-c1">100</span>,tuplet<span class="pl-k">=</span><span class="pl-c1">3</span>)  <span class="pl-c"><span class="pl-c">#</span> the number of prime triplets between 1 and 100</span>
<span class="pl-c1">8</span>
<span class="pl-c1">countprimes</span>(<span class="pl-c1">10</span>,<span class="pl-c1">1000</span>,tuplet<span class="pl-k">=</span><span class="pl-c1">6</span>)  <span class="pl-c"><span class="pl-c">#</span> the number of prime sextuplets between 100 and 1000</span>
<span class="pl-c1">1</span>     </pre></div>
<p dir="auto">If you quote the arguments (either as an expression or a string),
they will be converted to Int128. This prevents overflow.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="countprimes(&quot;10^19+10^9&quot;)
234057667299198865"><pre class="notranslate"><code>countprimes("10^19+10^9")
234057667299198865
</code></pre></div>
<p dir="auto">If you use BigInt's, then the method :nexta will be chosen automatically. For example</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; @bigint countprimes(10^50, 10^50+1000)
7"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">@bigint</span> <span class="pl-c1">countprimes</span>(<span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">50</span>, <span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">50</span><span class="pl-k">+</span><span class="pl-c1">1000</span>)
<span class="pl-c1">7</span></pre></div>
<h3 dir="auto"><a id="user-content-nextprime-prevprime" class="anchor" aria-hidden="true" href="#nextprime-prevprime"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>nextprime, prevprime</h3>
<p dir="auto"><code>nextprime(n)</code> returns the smallest prime greater than n.</p>
<p dir="auto"><code>prevprime(n)</code> returns the largest prime less than n.</p>
<p dir="auto"><code>nextprime(n,k)</code> returns the kth prime following n.</p>
<p dir="auto"><code>prevprime(n,k)</code> returns the kth prime preceeding n.</p>
<p dir="auto">Several algorithms are used. Finding the optimal one (of the
available) is partially automated. nextprime1 and prevprime1 use an
alternate algorithm coded by H W Borcher.</p>
<h3 dir="auto"><a id="user-content-iterators" class="anchor" aria-hidden="true" href="#iterators"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Iterators</h3>
<p dir="auto"><code>someprimes(n2)</code> All primes n, 2 &lt;= n &lt;= n2</p>
<p dir="auto"><code>someprimes(n1,n2)</code> All primes n, n1 &lt;= n &lt;= n2</p>
<p dir="auto"><code>allprimes(n1)</code> All primes n, n &gt; n1</p>
<p dir="auto"><code>allprimes()</code> All primes</p>
<p dir="auto">For example, here is the <a href="http://en.wikipedia.org/wiki/Primorial" rel="nofollow">primorial</a> function defined using an iterator:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; primorial(n) = prod(someprimes(n))
julia&gt; @bigint primorial(100)
2305567963945518424753102147331756070"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-en">primorial</span>(n) <span class="pl-k">=</span> <span class="pl-c1">prod</span>(<span class="pl-c1">someprimes</span>(n))
julia<span class="pl-k">&gt;</span> <span class="pl-c1">@bigint</span> <span class="pl-c1">primorial</span>(<span class="pl-c1">100</span>)
<span class="pl-c1">2305567963945518424753102147331756070</span></pre></div>
<h3 dir="auto"><a id="user-content-nthprime" class="anchor" aria-hidden="true" href="#nthprime"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>nthprime()</h3>
<p dir="auto">Returns the nth prime using a fast algorithm from libprimecount.
The argument is converted to Int64.</p>
<p dir="auto"><code>nthprime(n; alg = :sieve)</code> uses the older algorithm from
libprimesieve, which is much slower.</p>
<h3 dir="auto"><a id="user-content-nprimes" class="anchor" aria-hidden="true" href="#nprimes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>nprimes</h3>
<p dir="auto">Return an array of the first <code>n</code> primes <code>&gt;= start</code>.</p>
<p dir="auto">Usage</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="nprimes(n,[start=1])"><pre><span class="pl-c1">nprimes</span>(n,[start<span class="pl-k">=</span><span class="pl-c1">1</span>])</pre></div>
<h3 dir="auto"><a id="user-content-single-threaded-versions" class="anchor" aria-hidden="true" href="#single-threaded-versions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>single threaded versions</h3>
<p dir="auto">Usage</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="scountprimes([start],stop, tuplets=1)"><pre><span class="pl-c1">scountprimes</span>([start],stop, tuplets<span class="pl-k">=</span><span class="pl-c1">1</span>)</pre></div>
<h3 dir="auto"><a id="user-content-printprimes" class="anchor" aria-hidden="true" href="#printprimes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>printprimes</h3>
<p dir="auto">Print all primes (or prime n-tuplets) that are <code>&gt;= start</code> and <code>&lt;= stop</code></p>
<p dir="auto">Usage</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="printprimes([start],stop, [tuplet=1])"><pre><span class="pl-c1">printprimes</span>([start],stop, [tuplet<span class="pl-k">=</span><span class="pl-c1">1</span>])</pre></div>
<p dir="auto">The default value of 'start' is 1.
The optional keyword argument 'tuplet' may take values between 1 and 6.</p>
<h3 dir="auto"><a id="user-content-legendrephi" class="anchor" aria-hidden="true" href="#legendrephi"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>legendrephi</h3>
<p dir="auto">The <a href="http://mathworld.wolfram.com/LegendresFormula.html" rel="nofollow">legendre sum or phi function</a></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="legendre(x,a)"><pre><span class="pl-c1">legendre</span>(x,a)</pre></div>
<p dir="auto">The arguments are converted to Int64.</p>
<h3 dir="auto"><a id="user-content-primeli" class="anchor" aria-hidden="true" href="#primeli"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>primeLi</h3>
<p dir="auto">The <a href="http://en.wikipedia.org/wiki/Logarithmic_integral_function" rel="nofollow">offset logarithmic integral</a>.
The argument is converted to Int64.</p>
<h3 dir="auto"><a id="user-content-primeliinv" class="anchor" aria-hidden="true" href="#primeliinv"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>PrimeLiinv</h3>
<p dir="auto">The inverse Li function.
The argument is converted to Int64.</p>
<h3 dir="auto"><a id="user-content-randprime" class="anchor" aria-hidden="true" href="#randprime"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>randprime</h3>
<p dir="auto"><code>randprime(a,b)</code> choose a random prime between <code>a</code> and <code>b</code>. All primes in the range
are equally likely to be chosen.</p>
<p dir="auto"><code>randprime(b)</code> choose a random prime between 2 and <code>b</code>.</p>
<p dir="auto"><code>randprime(a,b; lim=n)</code> find a maximum of <code>n</code> random composite numbers
before giving up.</p>
<p dir="auto"><code>randprime(a,b,n1,n2,...)</code> return a n1xn2x... array of random primes</p>
<h3 dir="auto"><a id="user-content-isprimez" class="anchor" aria-hidden="true" href="#isprimez"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>isprime(z)</h3>
<p dir="auto">Returns <code>true</code> if the
<a href="http://en.wikipedia.org/wiki/Gaussian_integer" rel="nofollow">Gaussian integer</a> <code>z</code> is prime.</p>
<h2 dir="auto"><a id="user-content-sieve-parameters" class="anchor" aria-hidden="true" href="#sieve-parameters"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Sieve Parameters</h2>
<h3 dir="auto"><a id="user-content-primesievesize" class="anchor" aria-hidden="true" href="#primesievesize"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>primesievesize</h3>
<p dir="auto">Get, set the sieve size in kilobytes. (setting does not seem to work)
<code>sz</code> must satisfy  <code>1 &lt;= sz &lt;= 2048</code></p>
<p dir="auto">Usage</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="primesievesize()
primesievesize(sz)"><pre><span class="pl-c1">primesievesize</span>()
<span class="pl-c1">primesievesize</span>(sz)</pre></div>
<h3 dir="auto"><a id="user-content-primesieve_num_threads" class="anchor" aria-hidden="true" href="#primesieve_num_threads"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>primesieve_num_threads</h3>
<p dir="auto">Get, set the number of threads used in the parallel sieve. By default, the
number of cores is used.</p>
<p dir="auto">Usage</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="primesieve_num_threads()
primesieve_num_threads(numthreads)"><pre><span class="pl-c1">primesieve_num_threads</span>()
<span class="pl-c1">primesieve_num_threads</span>(numthreads)</pre></div>
<h3 dir="auto"><a id="user-content-primepi_num_threads" class="anchor" aria-hidden="true" href="#primepi_num_threads"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>primepi_num_threads</h3>
<p dir="auto">Get, set the number of threads used in the parallel primepi. By default, the
number of cores is used.</p>
<p dir="auto">Usage</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="primepi_num_threads()
primepi_num_threads(numthreads)"><pre><span class="pl-c1">primepi_num_threads</span>()
<span class="pl-c1">primepi_num_threads</span>(numthreads)</pre></div>
<h3 dir="auto"><a id="user-content-primemaxstop" class="anchor" aria-hidden="true" href="#primemaxstop"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>primemaxstop</h3>
<p dir="auto">Return the largest value (as a <code>Uint64</code>) that can be passed as the parameter
stop in the sieve.</p>
<p dir="auto">Usage</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="primemaxstop()"><pre><span class="pl-c1">primemaxstop</span>()</pre></div>
<h3 dir="auto"><a id="user-content-primepi_xmax" class="anchor" aria-hidden="true" href="#primepi_xmax"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>primepi_xmax()</h3>
<p dir="auto">Function that returns the largest allowed argument to <code>primepi</code> when using the :dr algorithm.</p>
<h3 dir="auto"><a id="user-content-primetest" class="anchor" aria-hidden="true" href="#primetest"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>primetest</h3>
<p dir="auto">Run a test of the sieve algorithm.</p>
<p dir="auto">Usage</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="primetest()"><pre><span class="pl-c1">primetest</span>()</pre></div>
<h3 dir="auto"><a id="user-content-primepi_test" class="anchor" aria-hidden="true" href="#primepi_test"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>primepi_test</h3>
<p dir="auto">Run a test of the primepi algorithms</p>
<h2 dir="auto"><a id="user-content-tables-of-prime-pi-function" class="anchor" aria-hidden="true" href="#tables-of-prime-pi-function"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Tables of prime pi function</h2>
<p dir="auto">Some of the above functions use tables, but this is completley hidden
from the user. But it is also possible to access them directly.  The
tables work like this:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; @time countprimes(10^17 + 10^14 + 10^10)
elapsed time: 3.729049749 seconds (168 bytes allocated)
2626112053757377"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">@time</span> <span class="pl-c1">countprimes</span>(<span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">17</span> <span class="pl-k">+</span> <span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">14</span> <span class="pl-k">+</span> <span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">10</span>)
elapsed time<span class="pl-k">:</span> <span class="pl-c1">3.729049749</span> seconds (<span class="pl-c1">168</span> bytes allocated)
<span class="pl-c1">2626112053757377</span></pre></div>
<p dir="auto">To see what happened, we can look in the tables:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; primelookup(10^17 + 10^14 + 10^10)
(14,(2626111798288135,100100000000000000,10000000000))"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">primelookup</span>(<span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">17</span> <span class="pl-k">+</span> <span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">14</span> <span class="pl-k">+</span> <span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">10</span>)
(<span class="pl-c1">14</span>,(<span class="pl-c1">2626111798288135</span>,<span class="pl-c1">100100000000000000</span>,<span class="pl-c1">10000000000</span>))</pre></div>
<p dir="auto">The 14th table was used. The value of prime pi for <code>10^17+10^14</code>,
<code>2626111798288135</code> is in the table, and the primes in an
interval of length <code>10^10</code> must be found with the sieves.</p>
<h3 dir="auto"><a id="user-content-primetableinfo" class="anchor" aria-hidden="true" href="#primetableinfo"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>primetableinfo</h3>
<p dir="auto">Print information about the prime pi tables.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; primetableinfo()
Tables of π(x). Listed are: table number, increment in x (and first value of x),
number of entries in the table, largest x in table.

table  incr    tab len  max x
1      10^1    10^4     10^5
2      10^2    10^4     10^6
3      10^3    10^4     10^7
4      10^4    10^4     10^8
5      10^5    10^4     10^9
6      10^6    10^4     10^10
7      10^7    10^4     10^11
8      10^8    10^4     10^12
9      10^9    10^4     10^13
10     10^10   10^4     10^14
11     10^11   10^4     10^15
12     10^12   10^4     10^16
13     10^13   10^4     10^17
14     10^14   10^4     10^18
15     10^15   10^4     10^19
16     10^16   10^4     10^20
17     10^17   10^3     10^20
18     10^18   10^2     10^20
19     10^19   10^2     10^21
20     10^20   10^2     10^22
21     10^21   10^2     10^23
22     10^22   10^1     10^23"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">primetableinfo</span>()
Tables of <span class="pl-c1">π</span>(x). Listed are<span class="pl-k">:</span> table number, increment <span class="pl-k">in</span> x (and first value of x),
number of entries <span class="pl-k">in</span> the table, largest x <span class="pl-k">in</span> table.

table  incr    tab len  max x
<span class="pl-c1">1</span>      <span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">1</span>    <span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">4</span>     <span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">5</span>
<span class="pl-c1">2</span>      <span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">2</span>    <span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">4</span>     <span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">6</span>
<span class="pl-c1">3</span>      <span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">3</span>    <span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">4</span>     <span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">7</span>
<span class="pl-c1">4</span>      <span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">4</span>    <span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">4</span>     <span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">8</span>
<span class="pl-c1">5</span>      <span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">5</span>    <span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">4</span>     <span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">9</span>
<span class="pl-c1">6</span>      <span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">6</span>    <span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">4</span>     <span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">10</span>
<span class="pl-c1">7</span>      <span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">7</span>    <span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">4</span>     <span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">11</span>
<span class="pl-c1">8</span>      <span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">8</span>    <span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">4</span>     <span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">12</span>
<span class="pl-c1">9</span>      <span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">9</span>    <span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">4</span>     <span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">13</span>
<span class="pl-c1">10</span>     <span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">10</span>   <span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">4</span>     <span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">14</span>
<span class="pl-c1">11</span>     <span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">11</span>   <span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">4</span>     <span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">15</span>
<span class="pl-c1">12</span>     <span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">12</span>   <span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">4</span>     <span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">16</span>
<span class="pl-c1">13</span>     <span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">13</span>   <span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">4</span>     <span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">17</span>
<span class="pl-c1">14</span>     <span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">14</span>   <span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">4</span>     <span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">18</span>
<span class="pl-c1">15</span>     <span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">15</span>   <span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">4</span>     <span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">19</span>
<span class="pl-c1">16</span>     <span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">16</span>   <span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">4</span>     <span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">20</span>
<span class="pl-c1">17</span>     <span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">17</span>   <span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">3</span>     <span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">20</span>
<span class="pl-c1">18</span>     <span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">18</span>   <span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">2</span>     <span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">20</span>
<span class="pl-c1">19</span>     <span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">19</span>   <span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">2</span>     <span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">21</span>
<span class="pl-c1">20</span>     <span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">20</span>   <span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">2</span>     <span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">22</span>
<span class="pl-c1">21</span>     <span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">21</span>   <span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">2</span>     <span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">23</span>
<span class="pl-c1">22</span>     <span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">22</span>   <span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">1</span>     <span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">23</span></pre></div>
<h3 dir="auto"><a id="user-content-primelookup" class="anchor" aria-hidden="true" href="#primelookup"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>primelookup</h3>
<p dir="auto">Look up a value of the prime pi function in the tables. This is only provided
to aid in understanding the behavior of <code>countprimes</code>.</p>
<p dir="auto">Usage</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="primelookup(x)"><pre><span class="pl-c1">primelookup</span>(x)</pre></div>
<p dir="auto">A tuple of a single element and another tuple of three elements is returned:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="(j,(p,y,rem))"><pre>(j,(p,y,rem))</pre></div>
<ul dir="auto">
<li><code>j</code> is the number of the best table found</li>
<li><code>y</code> is the largest index satisfying <code>y&lt;x</code> found.</li>
<li><code>p</code> is the value of prime pi at <code>y</code></li>
<li><code>rem</code> is <code>x-y</code></li>
</ul>
<h3 dir="auto"><a id="user-content-primetables" class="anchor" aria-hidden="true" href="#primetables"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>primetables</h3>
<p dir="auto">The array of type <code>Array{PrimeTable,1}</code> containing the prime tables.
See tables.jl for the format.</p>
<p dir="auto">Example</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="show(map(length,primetables)) # see the number of tables and their lengths"><pre><span class="pl-c1">show</span>(<span class="pl-c1">map</span>(length,primetables)) <span class="pl-c"><span class="pl-c">#</span> see the number of tables and their lengths</span></pre></div>
<h3 dir="auto"><a id="user-content-primetablefilename" class="anchor" aria-hidden="true" href="#primetablefilename"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>primetablefilename</h3>
<p dir="auto">Function returning the path to the file containing the prime pi tables.
The tables are loaded when the package is loaded.</p>
<h2 dir="auto"><a id="user-content-other-details" class="anchor" aria-hidden="true" href="#other-details"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Other details</h2>
<p dir="auto">For <code>x&gt;typemax(Int)</code>, you need to explicitly ask for a bigger data type.
For instance,</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; countprimes(int128(10)^23)
1925320391606803968923"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">countprimes</span>(<span class="pl-c1">int128</span>(<span class="pl-c1">10</span>)<span class="pl-k">^</span><span class="pl-c1">23</span>)
<span class="pl-c1">1925320391606803968923</span></pre></div>
<p dir="auto">This example returned a value from the table.
The argument was larger than than primemaxstop().</p>
<p dir="auto">With any of the routines, you can quote the arguments and they will be converted
to the appropriate type.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; countprimes(:(10^23))
1925320391606803968923
julia&gt; countprimes(&quot;10^19 + 10^9&quot;)
234057667299198865"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">countprimes</span>(:(<span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">23</span>))
<span class="pl-c1">1925320391606803968923</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">countprimes</span>(<span class="pl-s"><span class="pl-pds">"</span>10^19 + 10^9<span class="pl-pds">"</span></span>)
<span class="pl-c1">234057667299198865</span></pre></div>
<p dir="auto">Routines that use the tables will convert the arguments to Int128. This is because
some indices in the tables are greater than <code>typemax(Uint64)</code>.  Routines that
only use the sieve will be converted to <code>Uint64</code>, which is the data type that
the sieve routines use.</p>
<p dir="auto">The largest stop value that may be given is <code>2^64 - 10 * 2^32</code>.
The largest start value that may be given is <code>2^64 - 11 * 2^32</code>.
The sieve works with the <code>Uint64</code> data type. But conversions are done depending
on the types of start, stop, and n.</p>
<p dir="auto"><code>countprimes</code> returns <code>Int128</code>, because it uses tables and sieves
The other routines only support smaller data types.</p>
<h3 dir="auto"><a id="user-content-primetabletype" class="anchor" aria-hidden="true" href="#primetabletype"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>primetabletype()</h3>
<p dir="auto">Return data type of tables. This should be Int128. The largest values cannot
be used together with the sieve.</p>
<h3 dir="auto"><a id="user-content-primesievetype" class="anchor" aria-hidden="true" href="#primesievetype"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>primesievetype()</h3>
<p dir="auto">Return the native prime sieve type. This should be Uint64. libprimesieve
returns the data in various integer formats. These are chosen by the Julia
interface by the type of the <code>start</code> parameter.</p>
<h3 dir="auto"><a id="user-content-eltypetprimetable" class="anchor" aria-hidden="true" href="#eltypetprimetable"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>eltype(t::PrimeTable)</h3>
<p dir="auto">Return element type of values in table.</p>
<h2 dir="auto"><a id="user-content-other-functions" class="anchor" aria-hidden="true" href="#other-functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Other functions</h2>
<h3 dir="auto"><a id="user-content-apopcount" class="anchor" aria-hidden="true" href="#apopcount"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>apopcount</h3>
<p dir="auto">This is a only curiosity. It is supposed to be an optimized C (C++) function,
but doing the same thing in a Julia loop is much faster.</p>
<p dir="auto"><code>apopcount(arr)</code> gives the number of 1's in the binary representation of
the array <code>arr</code>. The length of the array is truncated to a multiple of 8.</p>
<p dir="auto">Note that this treats the contents of the array as a bits type. In
particular, if <code>arr</code> is not an array of bits type, then the number of 1's
in the pointers in the array are counted.</p>
<p dir="auto">In the comments, Kim Walisch says this about the algorithm,</p>
<blockquote>
<p dir="auto">This algorithm counts the number of 1 bits (population count) in
an array using 64-bit tree merging. To the best of my knowledge
this is the fastest integer arithmetic bit population count
algorithm, it uses only 8 operations for 8 bytes on 64-bit CPUs</p>
</blockquote>
<p dir="auto">Example:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; aa = Array(Uint64,100000000);
julia&gt; fill!(aa,typemax(Uint64));

julia&gt; @time apopcount(aa)
elapsed time: 0.140950344 seconds (96 bytes allocated)  # test shows overhead is negligible
6400000000

julia&gt; lpopcount(x) = ( s = 0; for i in 1:length(x) s += count_ones(x[i]) end; s)

julia&gt; @time lpopcount(aa)
elapsed time: 0.106306266 seconds (96 bytes allocated)  # Julia version is faster !
6400000000"><pre>julia<span class="pl-k">&gt;</span> aa <span class="pl-k">=</span> <span class="pl-c1">Array</span>(Uint64,<span class="pl-c1">100000000</span>);
julia<span class="pl-k">&gt;</span> <span class="pl-c1">fill!</span>(aa,<span class="pl-c1">typemax</span>(Uint64));

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@time</span> <span class="pl-c1">apopcount</span>(aa)
elapsed time<span class="pl-k">:</span> <span class="pl-c1">0.140950344</span> seconds (<span class="pl-c1">96</span> bytes allocated)  <span class="pl-c"><span class="pl-c">#</span> test shows overhead is negligible</span>
<span class="pl-c1">6400000000</span>

julia<span class="pl-k">&gt;</span> <span class="pl-en">lpopcount</span>(x) <span class="pl-k">=</span> ( s <span class="pl-k">=</span> <span class="pl-c1">0</span>; <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">length</span>(x) s <span class="pl-k">+=</span> <span class="pl-c1">count_ones</span>(x[i]) <span class="pl-k">end</span>; s)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@time</span> <span class="pl-c1">lpopcount</span>(aa)
elapsed time<span class="pl-k">:</span> <span class="pl-c1">0.106306266</span> seconds (<span class="pl-c1">96</span> bytes allocated)  <span class="pl-c"><span class="pl-c">#</span> Julia version is faster !</span>
<span class="pl-c1">6400000000</span></pre></div>
<p dir="auto">The algorithm is by <a href="http://planete.inrialpes.fr/~lauradou/" rel="nofollow">Cédric Lauradoux</a></p>
<h3 dir="auto"><a id="user-content-notes" class="anchor" aria-hidden="true" href="#notes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Notes</h3>
<p dir="auto">The algorithms used by <code>:auto</code> in <code>genprimes</code> and <code>primepi</code> are
simple and do not always choose the best method. They could be improved.
However, the routines are still fast. In the worst case, <code>genprimes</code>
is more than an order of magnitude faster than <code>Base.primes</code>.</p>
<h3 dir="auto"><a id="user-content-bugs" class="anchor" aria-hidden="true" href="#bugs"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Bugs</h3>
<p dir="auto">Interrupting a call to the sieves usually does not cause a memory error.
But, libprimesieve apparently has some static state, such that,
after the interrupt, subsequent sieving runs much slower, and may not
give correct results.</p>
<p dir="auto">Interrupting a call to libprimecount, results in a segfault. We could
<code>disable_sigint</code>, but there appear to be memory leaks in libprimecount.
Better to crash Julia than the whole system.</p>
<p dir="auto">msieve interrupt handler is installed, then all c code uses it. We need
to install and then uninstall it on every call.</p>







</article></div>