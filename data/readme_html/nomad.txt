<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-nomadjl" class="anchor" aria-hidden="true" href="#nomadjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>NOMAD.jl</h1>
<table>
<thead>
<tr>
<th align="center"><strong>Documentation</strong></th>
<th align="center"><strong>Linux, MacOS and FreeBSD build statuses</strong></th>
<th align="center"><strong>Coverage</strong></th>
<th align="center"><strong>DOI</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><a href="https://bbopt.github.io/NOMAD.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/3e353c26ddfe819150acbc732248f4f2a37f5175/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a></td>
<td align="center"><a href="https://travis-ci.com/bbopt/NOMAD.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/895e2f26b45d80e87938de68061ffed37a78c397/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f62626f70742f4e4f4d41442e6a6c3f6c6f676f3d747261766973" alt="Build Status" data-canonical-src="https://img.shields.io/travis/bbopt/NOMAD.jl?logo=travis" style="max-width:100%;"></a> <a href="https://cirrus-ci.com/github/bbopt/NOMAD.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/97dc276cc6c3faeff05fee48c720a61eb5b10dc8/68747470733a2f2f696d672e736869656c64732e696f2f6369727275732f6769746875622f62626f70742f4e4f4d41442e6a6c3f6c6f676f3d4369727275732532304349" alt="Build Status" data-canonical-src="https://img.shields.io/cirrus/github/bbopt/NOMAD.jl?logo=Cirrus%20CI" style="max-width:100%;"></a></td>
<td align="center"><a href="https://coveralls.io/github/bbopt/NOMAD.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/8710aa4c94efb0c9072b6e48cb714875d943fc20/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f62626f70742f4e4f4d41442e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/bbopt/NOMAD.jl/badge.svg?branch=master" style="max-width:100%;"></a></td>
<td align="center"><a href="https://doi.org/10.5281/zenodo.3700167" rel="nofollow"><img src="https://camo.githubusercontent.com/e72212985728b1f1a03a7ff482b99d74ac90ac1b/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f444f492f31302e353238312f7a656e6f646f2e333730303136372e737667" alt="DOI" data-canonical-src="https://zenodo.org/badge/DOI/10.5281/zenodo.3700167.svg" style="max-width:100%;"></a></td>
</tr>
</tbody>
</table>
<p>This package provides a Julia interface for NOMAD, which is a C++ implementation of the Mesh Adaptive Direct Search algorithm (MADS), designed for difficult blackbox optimization problems. These problems occur when the functions defining the objective and constraints are the result of costly computer simulations.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>NOMAD can be installed and tested through the Julia package manager:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> ]
pkg<span class="pl-k">&gt;</span> add NOMAD
pkg<span class="pl-k">&gt;</span> test NOMAD</pre></div>
<h2><a id="user-content-quick-start" class="anchor" aria-hidden="true" href="#quick-start"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Quick start</h2>
<p>Let's say you want to minimize some objective function :</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">function</span> <span class="pl-en">f</span>(x)
  <span class="pl-k">return</span> x[<span class="pl-c1">1</span>]<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">+</span> x[<span class="pl-c1">2</span>]<span class="pl-k">^</span><span class="pl-c1">2</span>
<span class="pl-k">end</span></pre></div>
<p>while keeping some constraint inferior to 0 :</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">function</span> <span class="pl-en">c</span>(x)
  <span class="pl-k">return</span> <span class="pl-c1">1</span> <span class="pl-k">-</span> x[<span class="pl-c1">1</span>]
<span class="pl-k">end</span></pre></div>
<p>You first need to declare a function <code>eval(x::Vector{Float64})</code> that returns a <em>Vector{Float64}</em> containing the objective function and the constraint evaluated for <code>x</code>, along with two booleans.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">function</span> <span class="pl-en">eval</span>(x)
  bb_outputs <span class="pl-k">=</span> [<span class="pl-c1">f</span>(x), <span class="pl-c1">c</span>(x)]
  success <span class="pl-k">=</span> <span class="pl-c1">true</span>
  count_eval <span class="pl-k">=</span> <span class="pl-c1">true</span>
  <span class="pl-k">return</span> (success, count_eval, bb_outputs)
<span class="pl-k">end</span></pre></div>
<p><code>success</code> is a boolean set to false if the evaluation should not be taken into account by NOMAD. Here, every evaluation will be considered as a success. <code>count_eval</code> is also a boolean, it decides weather the evaluation's counter will be incremented. Here, it is always equal to true so every evaluation will be counted.</p>
<p>Then, create an object of type <em>nomadParameters</em> that will contain settings for the optimization. The classic constructor takes as arguments the initial point <em>x0</em> and the types of the outputs contained in <code>bb_outputs</code> (as a <em>Vector{String}</em>).</p>
<div class="highlight highlight-source-julia"><pre>param <span class="pl-k">=</span> <span class="pl-c1">nomadParameters</span>([<span class="pl-c1">3</span>, <span class="pl-c1">3</span>], [<span class="pl-s"><span class="pl-pds">"</span>OBJ<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>EB<span class="pl-pds">"</span></span>])
param<span class="pl-k">.</span>lower_bound <span class="pl-k">=</span> [<span class="pl-k">-</span><span class="pl-c1">5</span>, <span class="pl-k">-</span><span class="pl-c1">5</span>]
param<span class="pl-k">.</span>upper_bound <span class="pl-k">=</span> [<span class="pl-c1">5</span>, <span class="pl-c1">5</span>]</pre></div>
<p>Here, first element of bb_outputs is the objective function (<code>f(x)</code>), second is a constraint treated with the Extreme Barrier method (<code>c(x)</code>). In this example, lower and upper bounds have been added but it is not compulsory.</p>
<p>Now call the function <code>nomad()</code> with these arguments to launch a NOMAD optimization process.</p>
<div class="highlight highlight-source-julia"><pre>result <span class="pl-k">=</span> <span class="pl-c1">nomad</span>(eval, param)</pre></div>
<p>The object of type <em>nomadResults</em> returned by <code>nomad()</code> contains information about the run.</p>
</article></div>