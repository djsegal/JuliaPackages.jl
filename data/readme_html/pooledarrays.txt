<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-pooledarraysjl" class="anchor" aria-hidden="true" href="#pooledarraysjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>PooledArrays.jl</h1>
<p dir="auto"><a href="https://github.com/JuliaData/PooledArrays.jl/actions?query=workflow%3ACI"><img src="https://github.com/JuliaData/PooledArrays.jl/workflows/CI/badge.svg" alt="CI" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/JuliaData/PooledArrays.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/86e783216de1c537b1c48d22e8842734695e3086532c10abef6155abdc72e505/68747470733a2f2f636f6465636f762e696f2f67682f4a756c6961446174612f506f6f6c65644172726179732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/JuliaData/PooledArrays.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a>
<a href="https://juliahub.com/ui/Packages/PooledArrays/vi11X?t=2" rel="nofollow"><img src="https://camo.githubusercontent.com/a11f5370a094fd5c1cad8822133d2f41a773373def8ee6d63d0960ae15124283/68747470733a2f2f6a756c69616875622e636f6d2f646f63732f506f6f6c65644172726179732f646570732e737667" alt="deps" data-canonical-src="https://juliahub.com/docs/PooledArrays/deps.svg" style="max-width: 100%;"></a>
<a href="https://juliahub.com/ui/Packages/PooledArrays/vi11X" rel="nofollow"><img src="https://camo.githubusercontent.com/b29f60bd61636e38e248e1848c78b5314eaec87f85dfe33c10f1465ab2c722fd/68747470733a2f2f6a756c69616875622e636f6d2f646f63732f506f6f6c65644172726179732f76657273696f6e2e737667" alt="version" data-canonical-src="https://juliahub.com/docs/PooledArrays/version.svg" style="max-width: 100%;"></a>
<a href="https://juliahub.com/ui/Packages/PooledArrays/vi11X" rel="nofollow"><img src="https://camo.githubusercontent.com/52c73bba70a006e26e4c9db56f04807aa44c873d5bad26fdd4d5aa43fe34491e/68747470733a2f2f6a756c69616875622e636f6d2f646f63732f506f6f6c65644172726179732f706b676576616c2e737667" alt="pkgeval" data-canonical-src="https://juliahub.com/docs/PooledArrays/pkgeval.svg" style="max-width: 100%;"></a></p>
<p dir="auto">A pooled representation of arrays for purposes of compression when there are few unique elements.</p>
<p dir="auto"><strong>Installation</strong>: at the Julia REPL, <code>import Pkg; Pkg.add("PooledArrays")</code></p>
<p dir="auto"><strong>Usage</strong>:</p>
<p dir="auto">Working with <code>PooledArray</code> objects does not differ from working with general
<code>AbstractArray</code> objects, with two exceptions:</p>
<ul dir="auto">
<li>If you hold mutable objects in <code>PooledArray</code> it is not allowed to modify them
after they are stored in it.</li>
<li>In multi-threaded context it is not safe to assign values that are not already
present in a <code>PooledArray</code>'s pool from one thread while either reading or
writing to the same array from another thread.</li>
</ul>
<p dir="auto">Keeping in mind these two restrictions, as a user, the only thing you need to
learn is how to create <code>PooledArray</code> objects. This is accomplished by passing
an <code>AbstractArray</code> to the <code>PooledArray</code> constructor:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; using PooledArrays

julia&gt; PooledArray([&quot;a&quot; &quot;b&quot;; &quot;c&quot; &quot;d&quot;])
2×2 PooledMatrix{String, UInt32, Matrix{UInt32}}:
 &quot;a&quot;  &quot;b&quot;
 &quot;c&quot;  &quot;d&quot;"><pre class="notranslate"><code>julia&gt; using PooledArrays

julia&gt; PooledArray(["a" "b"; "c" "d"])
2×2 PooledMatrix{String, UInt32, Matrix{UInt32}}:
 "a"  "b"
 "c"  "d"
</code></pre></div>
<p dir="auto"><code>PooledArray</code> performs compression by storing an array of reference integers and
a mapping from integers to its elements in a dictionary. In this way, if the
size of the reference integer is smaller than the size of the actual elements
the resulting <code>PooledArray</code> has a smaller memory footprint than the equivalent
<code>Array</code>. By default <code>UInt32</code> is used as a type of reference integers. However,
you can specify the reference integer type you want to use by passing it as a
second argument to the constructor. This is usually done when you know that you
will have only a few unique elements in the <code>PooledArray</code>.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; PooledArray([&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;], UInt8)
4-element PooledVector{String, UInt8, Vector{UInt8}}:
 &quot;a&quot;
 &quot;b&quot;
 &quot;c&quot;
 &quot;d&quot;"><pre class="notranslate"><code>julia&gt; PooledArray(["a", "b", "c", "d"], UInt8)
4-element PooledVector{String, UInt8, Vector{UInt8}}:
 "a"
 "b"
 "c"
 "d"
</code></pre></div>
<p dir="auto">Alternatively you can pass the <code>compress</code> and <code>signed</code> keyword arguments to the
<code>PooledArray</code> constructor to automatically select the reference integer type.
When you pass <code>compress=true</code> then the reference integer type is chosen to be
the smallest type that is large enough to hold all unique values in array. When
you pass <code>signed=true</code> the reference type is signed (by default it is unsigned).</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; PooledArray([&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;]; compress=true, signed=true)
4-element PooledVector{String, Int8, Vector{Int8}}:
 &quot;a&quot;
 &quot;b&quot;
 &quot;c&quot;
 &quot;d&quot;"><pre class="notranslate"><code>julia&gt; PooledArray(["a", "b", "c", "d"]; compress=true, signed=true)
4-element PooledVector{String, Int8, Vector{Int8}}:
 "a"
 "b"
 "c"
 "d"
</code></pre></div>
<p dir="auto"><strong>Maintenance</strong>: PooledArrays is maintained collectively by the
<a href="https://github.com/orgs/JuliaData/people">JuliaData collaborators</a>.
Responsiveness to pull requests and issues can vary,
depending on the availability of key collaborators.</p>
<h2 dir="auto"><a id="user-content-related-packages" class="anchor" aria-hidden="true" href="#related-packages"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Related Packages</h2>
<ul dir="auto">
<li><a href="https://github.com/JuliaArrays/IndirectArrays.jl">IndirectArrays</a></li>
<li><a href="https://github.com/JuliaData/CategoricalArrays.jl">CategoricalArrays</a></li>
</ul>
</article></div>