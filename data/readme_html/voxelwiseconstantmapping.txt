<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-voxelwiseconstantmappingjl" class="anchor" aria-hidden="true" href="#voxelwiseconstantmappingjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>VoxelwiseConstantMapping.jl</h1>
<p dir="auto"><a href="https://github.com/wsshin/VoxelwiseConstantMapping.jl/actions"><img src="https://github.com/wsshin/VoxelwiseConstantMapping.jl/workflows/CI/badge.svg" alt="CI" style="max-width: 100%;"></a>
<a href="http://codecov.io/github/wsshin/VoxelwiseConstantMapping.jl?branch=main" rel="nofollow"><img src="https://camo.githubusercontent.com/3abd40630b52e073c4f4e6bcce717e8d7cdbd78ffc2458087b12313f516ca3af/687474703a2f2f636f6465636f762e696f2f6769746875622f77737368696e2f566f78656c77697365436f6e7374616e744d617070696e672e6a6c2f636f7665726167652e7376673f6272616e63683d6d61696e" alt="Codecov" data-canonical-src="http://codecov.io/github/wsshin/VoxelwiseConstantMapping.jl/coverage.svg?branch=main" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-introduction" class="anchor" aria-hidden="true" href="#introduction"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Introduction</h2>
<p dir="auto"><strong>VoxelwiseConstantMapping</strong> is a simple Julia package that generalizes piecewise-constant functions to higher dimensions.  In the numerical implementation of a piecewise-constant function, the main subtlety occurs at the transition point˜˜.  For example, the <a href="https://en.wikipedia.org/wiki/Heaviside_step_function" rel="nofollow">Heaviside step function</a> is defined as <code>H(x) = 0</code> for <code>x &lt; 0</code> and <code>H(x) = 1</code> for <code>x &gt; 0</code>, but its value at the transition point <code>x = 0</code> is ambiguous.  One popular choice is to assign the average of the values on the two sides of the transition point (i.e., <code>H(0) = 0.5</code> for the Heaviside step function), because such a choice reduces the discontinuity at the transition point.</p>
<p dir="auto"><strong>VoxelwiseConstantMapping</strong> extends this concept to an arbitrary dimension.  For example, consider a function <code>f(x,y)</code> defined on R².  Suppose that we have pixel boundaries at <code>x = 0</code> and <code>y = 0</code>.  In other words,</p>
<ul dir="auto">
<li><code>f(x&gt;0, y&gt;0) = v₁</code></li>
<li><code>f(x&lt;0, y&gt;0) = v₂</code></li>
<li><code>f(x&lt;0, y&lt;0) = v₃</code></li>
<li><code>f(x&gt;0, y&lt;0) = v₄</code></li>
</ul>
<p dir="auto">Then, <strong>VoxelwiseConstantMapping</strong> defines the values of <code>f</code> at the transition lines as follows:</p>
<ul dir="auto">
<li><code>f(x=0, y&gt;0) = (v₁+v₂)/2</code></li>
<li><code>f(x=0, y&lt;0) = (v₃+v₄)/2</code></li>
<li><code>f(x&gt;0, y=0) = (v₁+v₄)/2</code></li>
<li><code>f(x&lt;0, y=0) = (v₂+v₃)/2</code></li>
<li><code>f(x=0, y=0) = (v₁+v₂+v₃+v₄)/4</code></li>
</ul>
<h2 dir="auto"><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example</h2>
<p dir="auto">The main constructor to use is <code>VoxelwiseConstant(...)</code>.  The voxels are assumed having rectangular faces, and you can have as many voxels as you want.  The voxel sizes can be nonuniform.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using VoxelwiseConstantMapping

vals = rand(3,4)  # 3 × 4 pixels (= 2D voxels)
xbounds = [-1, 0, 0.5, 0.6]  # 4 boundaries of 3 pixels in x-direction
ybounds = [-0.1, -0.05, 0, 4, 10]  # 5 boundaries of 4 pixels in y-direction
vc = VoxelwiseConstant(vals, (xbounds, ybounds))

v₀₀  = vc([0,0])  # returns value at (x,y) = (0,0)"><pre><span class="pl-k">using</span> VoxelwiseConstantMapping

vals <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">3</span>,<span class="pl-c1">4</span>)  <span class="pl-c"><span class="pl-c">#</span> 3 × 4 pixels (= 2D voxels)</span>
xbounds <span class="pl-k">=</span> [<span class="pl-k">-</span><span class="pl-c1">1</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0.5</span>, <span class="pl-c1">0.6</span>]  <span class="pl-c"><span class="pl-c">#</span> 4 boundaries of 3 pixels in x-direction</span>
ybounds <span class="pl-k">=</span> [<span class="pl-k">-</span><span class="pl-c1">0.1</span>, <span class="pl-k">-</span><span class="pl-c1">0.05</span>, <span class="pl-c1">0</span>, <span class="pl-c1">4</span>, <span class="pl-c1">10</span>]  <span class="pl-c"><span class="pl-c">#</span> 5 boundaries of 4 pixels in y-direction</span>
vc <span class="pl-k">=</span> <span class="pl-c1">VoxelwiseConstant</span>(vals, (xbounds, ybounds))

v₀₀  <span class="pl-k">=</span> <span class="pl-c1">vc</span>([<span class="pl-c1">0</span>,<span class="pl-c1">0</span>])  <span class="pl-c"><span class="pl-c">#</span> returns value at (x,y) = (0,0)</span></pre></div>
</article></div>