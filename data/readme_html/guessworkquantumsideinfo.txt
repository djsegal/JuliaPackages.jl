<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-guessworkquantumsideinfo" class="anchor" aria-hidden="true" href="#guessworkquantumsideinfo"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>GuessworkQuantumSideInfo</h1>
<p dir="auto"><a href="https://github.com/ericphanson/GuessworkQuantumSideInfo.jl/actions"><img src="https://github.com/ericphanson/GuessworkQuantumSideInfo.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/ericphanson/GuessworkQuantumSideInfo.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/0b8276bc86b46ad738f3f82192083f8bedcc037f7f582cfa2c7c14591e972888/68747470733a2f2f636f6465636f762e696f2f67682f657269637068616e736f6e2f4775657373776f726b5175616e74756d53696465496e666f2e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/ericphanson/GuessworkQuantumSideInfo.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a>
<a href="https://ericphanson.github.io/GuessworkQuantumSideInfo.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/ce767b3816248c8ee6de2b50678477d880d34f40489cfeee2446193f78f02402/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63756d656e746174696f6e2d737461626c652d626c75652e737667" alt="Stable documentation" data-canonical-src="https://img.shields.io/badge/documentation-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://ericphanson.github.io/GuessworkQuantumSideInfo.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/4aa9731f6173b081e1f7a291be7a9d2ef23c46025cf48bc1bd984708a4fb85d0/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63756d656e746174696f6e2d6465762d626c75652e737667" alt="Dev documentation" data-canonical-src="https://img.shields.io/badge/documentation-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://arxiv.org/abs/2001.03598" rel="nofollow"><img src="https://camo.githubusercontent.com/298c8935ba5a812005ba2190b7a8aee7d847fc7b3736b57fe1688179aaadac5d/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f61727469636c652d6172586976253341323030312e30333539382d423331423142" alt="arXiv article" data-canonical-src="https://img.shields.io/badge/article-arXiv%3A2001.03598-B31B1B" style="max-width: 100%;"></a>
<a href="https://zenodo.org/badge/latestdoi/236524092" rel="nofollow"><img src="https://camo.githubusercontent.com/3994a87a0c4158198aff8e3021946855631beb2e28e1f0ee9354c5dd24d80056/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f3233363532343039322e737667" alt="DOI" data-canonical-src="https://zenodo.org/badge/236524092.svg" style="max-width: 100%;"></a></p>
<p dir="auto">This is a package accompanying the preprint <a href="https://arxiv.org/abs/2001.03598" rel="nofollow"><em>Guesswork with Quantum Side Information</em></a>.</p>
<h2 dir="auto"><a id="user-content-quick-example" class="anchor" aria-hidden="true" href="#quick-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Quick example</h2>
<p dir="auto">Consider one party Alice who draws a random number in the set <code>[1,2,3,4]</code>
uniformly at random. If she draws <code>1</code> she sends another party, Bob, the quantum
state <code>|0⟩</code>; if she draws <code>2</code>, she sends <code>|1⟩</code>, if she draws <code>3</code> she sends
<code>|-⟩</code>, and finally if she draws <code>4</code>, she sends <code>|+⟩</code>. Bob, knowing this general
procedure but not which number Alice drew, aims to guess the value Alice drew by
performing experiments on the quantum state he was given. The average number of
guesses Bob needs in order to get the right answer, minimized over all quantum
strategies, is the so-called <em>guesswork with quantum side information</em>. This
package provides a means to compute this.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using GuessworkQuantumSideInfo, SCS

julia&gt; p = [0.25, 0.25, 0.25, 0.25];

julia&gt; ketzero = ket(1, 2);

julia&gt; ketone = ket(2, 2);

julia&gt; ketminus = (ket(1, 2) - ket(2,2))/sqrt(2);

julia&gt; ketplus = (ket(1, 2) + ket(2,2))/sqrt(2);

julia&gt; ρBs = dm.([ ketzero, ketone, ketminus, ketplus  ])
4-element Array{Array{Complex{Float64},2},1}:
 [1.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im]                                                              
 [0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 1.0 + 0.0im]                                                              
 [0.4999999999999999 + 0.0im -0.4999999999999999 - 0.0im; -0.4999999999999999 + 0.0im 0.4999999999999999 + 0.0im]
 [0.4999999999999999 + 0.0im 0.4999999999999999 + 0.0im; 0.4999999999999999 + 0.0im 0.4999999999999999 + 0.0im]  

julia&gt; output = guesswork(p, ρBs; solver = SCSSolver(verbose=false));

julia&gt; output.optval
1.709431078700102
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> GuessworkQuantumSideInfo, SCS

julia<span class="pl-k">&gt;</span> p <span class="pl-k">=</span> [<span class="pl-c1">0.25</span>, <span class="pl-c1">0.25</span>, <span class="pl-c1">0.25</span>, <span class="pl-c1">0.25</span>];

julia<span class="pl-k">&gt;</span> ketzero <span class="pl-k">=</span> <span class="pl-c1">ket</span>(<span class="pl-c1">1</span>, <span class="pl-c1">2</span>);

julia<span class="pl-k">&gt;</span> ketone <span class="pl-k">=</span> <span class="pl-c1">ket</span>(<span class="pl-c1">2</span>, <span class="pl-c1">2</span>);

julia<span class="pl-k">&gt;</span> ketminus <span class="pl-k">=</span> (<span class="pl-c1">ket</span>(<span class="pl-c1">1</span>, <span class="pl-c1">2</span>) <span class="pl-k">-</span> <span class="pl-c1">ket</span>(<span class="pl-c1">2</span>,<span class="pl-c1">2</span>))<span class="pl-k">/</span><span class="pl-c1">sqrt</span>(<span class="pl-c1">2</span>);

julia<span class="pl-k">&gt;</span> ketplus <span class="pl-k">=</span> (<span class="pl-c1">ket</span>(<span class="pl-c1">1</span>, <span class="pl-c1">2</span>) <span class="pl-k">+</span> <span class="pl-c1">ket</span>(<span class="pl-c1">2</span>,<span class="pl-c1">2</span>))<span class="pl-k">/</span><span class="pl-c1">sqrt</span>(<span class="pl-c1">2</span>);

julia<span class="pl-k">&gt;</span> ρBs <span class="pl-k">=</span> <span class="pl-c1">dm</span>.([ ketzero, ketone, ketminus, ketplus  ])
<span class="pl-c1">4</span><span class="pl-k">-</span>element Array{Array{Complex{Float64},<span class="pl-c1">2</span>},<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 [<span class="pl-c1">1.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span> <span class="pl-c1">0.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span>; <span class="pl-c1">0.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span> <span class="pl-c1">0.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span>]                                                              
 [<span class="pl-c1">0.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span> <span class="pl-c1">0.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span>; <span class="pl-c1">0.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span> <span class="pl-c1">1.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span>]                                                              
 [<span class="pl-c1">0.4999999999999999</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span> <span class="pl-k">-</span><span class="pl-c1">0.4999999999999999</span> <span class="pl-k">-</span> <span class="pl-c1">0.0im</span>; <span class="pl-k">-</span><span class="pl-c1">0.4999999999999999</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span> <span class="pl-c1">0.4999999999999999</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span>]
 [<span class="pl-c1">0.4999999999999999</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span> <span class="pl-c1">0.4999999999999999</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span>; <span class="pl-c1">0.4999999999999999</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span> <span class="pl-c1">0.4999999999999999</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span>]  

julia<span class="pl-k">&gt;</span> output <span class="pl-k">=</span> <span class="pl-c1">guesswork</span>(p, ρBs; solver <span class="pl-k">=</span> <span class="pl-c1">SCSSolver</span>(verbose<span class="pl-k">=</span><span class="pl-c1">false</span>));

julia<span class="pl-k">&gt;</span> output<span class="pl-k">.</span>optval
<span class="pl-c1">1.709431078700102</span>
</pre></div>
<p dir="auto">It turns out it takes <code>(1/4)*(10 - sqrt(10)) ≈ 1.71</code> guesses on average.</p>
</article></div>