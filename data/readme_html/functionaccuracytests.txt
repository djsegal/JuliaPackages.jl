<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-functionaccuracytestsjl" class="anchor" aria-hidden="true" href="#functionaccuracytestsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>FunctionAccuracyTests.jl</h1>
<p dir="auto">ULP testing for Floating Point special functions.</p>
<p dir="auto">This package provides 2 useful things for testing the accuracy of functions. A <code>FloatIterator</code> type, and a function <code>test_acc</code>.</p>
<ul dir="auto">
<li><code>FloatIterator{T}(min, max)</code></li>
</ul>
<p dir="auto">Construct an indexable iterator over all floating point values between min and max. This is useful for testing <code>Float16</code> and <code>Float32</code> implimentations of functions. For relatively cheap functions, testing all <code>Float16</code> values takes about .1 second, and testing all <code>Float32</code> values takes around 90 seconds. Do not use this for testing <code>Float64</code> inputs.</p>
<p dir="auto"><code>test_acc</code> - Function</p>
<ul dir="auto">
<li><code>test_acc(Dict(test_fun=&gt;reference_fun), xs; tol=1.5)</code></li>
</ul>
<p dir="auto">This tests whether <code>test_fun</code> and <code>reference_fun</code> produce the same result on an iterator of <code>x</code> values. <code>tol</code> is the tolerance specified in ULPs (Units in Last Place). The <code>reference_fun</code> should be the accurate "reference" function you're comparing your new "test" function with.</p>
<ul dir="auto">
<li><code>test_acc(f::Function, xx; tol = 1.5)</code></li>
</ul>
<p dir="auto">This is the same, except it tests the <code>BigFloat</code> method of a function against the method for <code>eltype(xx)</code>.</p>
<ul dir="auto">
<li><code>test_acc(f::Function, min, max; tol = 1.5)</code></li>
</ul>
<p dir="auto">This tests whether all floating point values between <code>min</code> and <code>max</code> match.</p>
<ul dir="auto">
<li><code>test_acc(f::Function, T::Type; tol = 1.5)</code></li>
</ul>
<p dir="auto">This tests whether all values of a Floating Point type match.</p>
</article></div>