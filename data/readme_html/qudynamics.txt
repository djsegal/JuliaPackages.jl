<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-qudynamicsjl" class="anchor" aria-hidden="true" href="#qudynamicsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>QuDynamics.jl</h1>
<p>A <a href="http://juliaquantum.github.io/" rel="nofollow">JuliaQuantum</a> package for solving dynamical equations in quantum mechanics.</p>
<p><a href="https://travis-ci.org/JuliaQuantum/QuDynamics.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/8e67967c3dbc27dadc2620783a3eafabf620da12/68747470733a2f2f7472617669732d63692e6f72672f4a756c69615175616e74756d2f517544796e616d6963732e6a6c2e706e673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaQuantum/QuDynamics.jl.png?branch=master" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/JuliaQuantum/QuDynamics.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/bf4f37e836ebd8df918bef92a916e46e4a2a3f36/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f4a756c69615175616e74756d2f517544796e616d6963732e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/JuliaQuantum/QuDynamics.jl/badge.svg?branch=master" style="max-width:100%;"></a>
<a href="https://gitter.im/JuliaQuantum/QuDynamics.jl?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge&amp;utm_content=badge" rel="nofollow"><img src="https://camo.githubusercontent.com/0b0d58aa32a0e13e1dfbca0b7d0bd08cee9b96a0/68747470733a2f2f6261646765732e6769747465722e696d2f4a756c69615175616e74756d2f517544796e616d6963732e6a6c2e737667" alt="Join the chat at https://gitter.im/JuliaQuantum/QuDynamics.jl" data-canonical-src="https://badges.gitter.im/JuliaQuantum/QuDynamics.jl.svg" style="max-width:100%;"></a></p>
<p>Use <a href="http://mybinder.org/" rel="nofollow">Binder</a> to play around instantly, preloaded with QuDynamics, QuBase packages and PyPlot, Gadfly packages for plotting. Jupyter is the medium allowing notebooks, terminal interface. For instance checkout the notebooks in examples.</p>
<p><a href="http://mybinder.org/repo/JuliaQuantum/QuDynamics.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/70c5b4d050d4019f4f20b170d75679a9316ac5e5/687474703a2f2f6d7962696e6465722e6f72672f62616467652e737667" alt="Binder" data-canonical-src="http://mybinder.org/badge.svg" style="max-width:100%;"></a></p>
<h2><a id="user-content-background" class="anchor" aria-hidden="true" href="#background"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Background</h2>
<p>The package is aimed at providing a unified framework for solvers for solving Dynamical Equations in Quantum Mechanics. Various solvers have been integrated from packages like <a href="https://github.com/JuliaLang/ODE.jl">ODE.jl</a>, <a href="https://github.com/marcusps/ExpmV.jl">ExpmV.jl</a>,
<a href="https://github.com/acroy/Expokit.jl">Expokit.jl</a>, using base features from <a href="https://github.com/JuliaQuantum/QuBase.jl">QuBase.jl</a>. QuBase.jl is the base package which includes most of the basic type constructs and methods used in Quantum Mechanics.</p>
<h2><a id="user-content-overview" class="anchor" aria-hidden="true" href="#overview"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Overview</h2>
<p>The following Dynamical Equations can be solved using this package :</p>
<ol>
<li>Schrodinger Equation</li>
<li>Liouville von Neumann Equation</li>
<li>Lindblad Master Equation</li>
</ol>
<p>Using the following solvers :</p>
<ol>
<li>
<p>Euler Method, Crank-Nicholson Method, Krylov subspace Method</p>
</li>
<li>
<p>ode45, ode78, ode23s which have been integrated from <a href="https://github.com/JuliaLang/ODE.jl">ODE.jl</a></p>
</li>
<li>
<p>Two versions of <code>expmv</code> implementations from :</p>
<p>a. <a href="https://github.com/marcusps/ExpmV.jl">ExpmV.jl</a>
b. <a href="https://github.com/acroy/Expokit.jl">Expokit.jl</a></p>
</li>
<li>
<p>Quantum Monte-Carlo Wave Function Method has been integrated with reference from the article : Monte Carlo Simulation of the Atomic Master Equation for Spontaneous Emission, Phys. Rev. A 45, 4879 (1992)
by R. Dum, P. Zoller, and H. Ritsch.</p>
</li>
</ol>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>As the solvers have been integrated from various packages and also that QuDynamics is based on QuBase.jl, we need to install the following for using QuDynamics.</p>
<p><strong>Dependencies</strong></p>
<ul>
<li><strong>QuBase.jl</strong></li>
</ul>
<p>This has to be added using</p>
<div class="highlight highlight-source-julia"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">clone</span>(<span class="pl-s"><span class="pl-pds">"</span>https://github.com/JuliaQuantum/QuBase.jl.git<span class="pl-pds">"</span></span>)</pre></div>
<ul>
<li><strong>Expokit.jl</strong></li>
</ul>
<p>This has to be added using</p>
<div class="highlight highlight-source-julia"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">clone</span>(<span class="pl-s"><span class="pl-pds">"</span>https://github.com/acroy/Expokit.jl.git<span class="pl-pds">"</span></span>)</pre></div>
<ul>
<li><strong>ExpmV.jl</strong></li>
</ul>
<p>This has to be added using</p>
<div class="highlight highlight-source-julia"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">clone</span>(<span class="pl-s"><span class="pl-pds">"</span>https://github.com/marcusps/ExpmV.jl.git<span class="pl-pds">"</span></span>)</pre></div>
<p>The current package can be used by</p>
<div class="highlight highlight-source-julia"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">clone</span>(<span class="pl-s"><span class="pl-pds">"</span>https://github.com/JuliaQuantum/QuDynamics.jl.git<span class="pl-pds">"</span></span>)</pre></div>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<p>We could start using the package by :</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> QuBase
<span class="pl-k">using</span> QuDynamics</pre></div>
<p><code>QuPropagator</code> is the starting point in order to compute or plot, related entities like states at different time steps, expectation values of an observable and so on. <code>QuProagator</code> is the  one which takes
in the configuration of the system along with the solver which is to be used for solving.</p>
<p>For example, consider the following configuration :</p>
<div class="highlight highlight-source-julia"><pre>hamiltonian <span class="pl-k">=</span> sigmax                           <span class="pl-c"><span class="pl-c">#</span> the Hamiltonian of the system</span>
initial_state <span class="pl-k">=</span> <span class="pl-c1">statevec</span>(<span class="pl-c1">1</span>, <span class="pl-c1">FiniteBasis</span>(<span class="pl-c1">2</span>))    <span class="pl-c"><span class="pl-c">#</span> the initial state of the system</span>
tlist <span class="pl-k">=</span> <span class="pl-c1">0.</span>:<span class="pl-c1">0.1</span><span class="pl-k">:</span><span class="pl-c1">2</span><span class="pl-k">*</span>pi                            <span class="pl-c"><span class="pl-c">#</span> the time steps at each of which we have the evolved state</span></pre></div>
<p>Now we have the basic ingredients to construct the <code>QuPropagator</code>, assuming we have a solver in mind.
We construct the following :</p>
<div class="highlight highlight-source-julia"><pre>qprop_ode45 <span class="pl-k">=</span> <span class="pl-c1">QuPropagator</span>(hamiltonian, initial_state, tlist, <span class="pl-c1">QuODE45</span>())</pre></div>
<p>The general format of <code>QuPropagator</code> construct is as follows :
<code>QuPropagator(Hamiltonian_of_the_system, Collapse_operators, Initial_state, Time_step_array, Solver)</code></p>
<p>Alternatively we can also pass :
<code>QuPropagator(Type_of_Equation, Initial_state, Time_step_array, Solver)</code></p>
<p>Implying, we could do the following which is equivalent to the above construction of <code>qprop_ode45</code></p>
<div class="highlight highlight-source-julia"><pre>schrodinger_eq <span class="pl-k">=</span> <span class="pl-c1">QuSchrodingerEq</span>(hamiltonian)
qprop_ode45 <span class="pl-k">=</span> <span class="pl-c1">QuPropagator</span>(schrodinger_eq, initial_state, tlist, <span class="pl-c1">QuODE45</span>())</pre></div>
<p>A common convention for the <code>equations</code> and <code>solvers</code> types and methods is they start with a prefix <code>Qu</code>.
For example :</p>
<pre><code>`Schrodinger Equation` =&gt; `QuSchrodingerEq`
`ode45` =&gt; `QuODE45`
`expmv` =&gt; `QuExpmV` or `QuExpokit` (based on the packages)
</code></pre>
<p>Now we are all set to calculate the states at various time steps which can be achieved in the
following ways :</p>
<p><strong>Method - 1</strong>:
To get the evolved state at every time instant, we can do the following :</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">for</span> (t, psi) <span class="pl-k">in</span> qprop_ode45
    <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>t : <span class="pl-v">$t</span>, psi : <span class="pl-v">$psi</span><span class="pl-pds">"</span></span>)
<span class="pl-k">end</span></pre></div>
<p><strong>Method - 2</strong>:
To get the evolved state at the next time instant (here we get the state after the fist time-step), we can do the following :</p>
<div class="highlight highlight-source-julia"><pre>next_state <span class="pl-k">=</span> <span class="pl-c1">propagate</span>(<span class="pl-c1">QuODE45</span>(), <span class="pl-c1">QuSchrodingerEq</span>(h), t[<span class="pl-c1">2</span>], t[<span class="pl-c1">1</span>], initial_state)
<span class="pl-c1">println</span>(next_state)</pre></div>
<p>For more examples and work cases, please refer to the <a href="https://github.com/JuliaQuantum/QuDynamics.jl/tree/master/examples">examples</a> folder of the repo.</p>
<p>Note : Instances of <code>QuPropagator</code> can also be called by <code>QuStateEvolution</code>. Also the propagation of evolution operator can be
evaluated using <code>QuEvolutionOp</code>.</p>
<p>Update : Time dependence functionality has been integrated. Please refer to this <a href="https://github.com/JuliaQuantum/QuDynamics.jl/wiki/Time-Dependent-Systems">Wiki</a> for details.</p>
<h2><a id="user-content-discussions" class="anchor" aria-hidden="true" href="#discussions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Discussions</h2>
<p>The following discussions tend to provide an insight on the design of the internals :</p>
<ol>
<li><a href="http://juliaquantum.github.io/news/index.html" rel="nofollow">The GSoC blog updates</a></li>
<li>Design and implementation related discussion <a href="https://github.com/JuliaQuantum/JuliaQuantum.github.io/issues/20">a</a>, <a href="https://github.com/numfocus/gsoc/blob/7917b4fc08ce73ac74f8a2b9dd7929d994fc4282/2015/proposals/Amit.md">b</a></li>
<li><a href="https://github.com/JuliaQuantum/QuDynamics.jl/issues">Issues</a> and <a href="https://github.com/JuliaQuantum/QuDynamics.jl/pulls">Pull Requests</a> are also good references which shed light on the development of the package.</li>
<li><a href="https://github.com/JuliaQuantum/QuDynamics.jl/wiki">Wiki</a> page has a mention of the design and implementation related discussion.</li>
</ol>
<h2><a id="user-content-contributions" class="anchor" aria-hidden="true" href="#contributions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Contributions</h2>
<p>We would love to have contributors. The process is simple :</p>
<ol>
<li>Fork and clone the repo.</li>
<li>Create a local branch and implement the changes.</li>
<li>Test the changes and send in a pull request.</li>
</ol>
</article></div>