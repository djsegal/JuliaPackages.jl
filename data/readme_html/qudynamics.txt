<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-qudynamicsjl" class="anchor" aria-hidden="true" href="#qudynamicsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>QuDynamics.jl</h1>
<p dir="auto">A <a href="http://juliaquantum.github.io/" rel="nofollow">JuliaQuantum</a> package for solving dynamical equations in quantum mechanics.</p>
<p dir="auto"><a href="https://travis-ci.org/JuliaQuantum/QuDynamics.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/898be108072d1302e3ba0ddd127ef55782f532a33f00a609f5690ae65d997eb0/68747470733a2f2f7472617669732d63692e6f72672f4a756c69615175616e74756d2f517544796e616d6963732e6a6c2e706e673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaQuantum/QuDynamics.jl.png?branch=master" style="max-width: 100%;"></a>
<a href="https://coveralls.io/github/JuliaQuantum/QuDynamics.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/819de85b84835865aec5ec7fbe089e441d92838bfe24ad6769b7413dc08c02af/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f4a756c69615175616e74756d2f517544796e616d6963732e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/JuliaQuantum/QuDynamics.jl/badge.svg?branch=master" style="max-width: 100%;"></a>
<a href="https://gitter.im/JuliaQuantum/QuDynamics.jl?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge&amp;utm_content=badge" rel="nofollow"><img src="https://camo.githubusercontent.com/ecaa997c2e867919eb0e2e1434e4f52eed491bd90b0d052ecb981b7e0a1cfc28/68747470733a2f2f6261646765732e6769747465722e696d2f4a756c69615175616e74756d2f517544796e616d6963732e6a6c2e737667" alt="Join the chat at https://gitter.im/JuliaQuantum/QuDynamics.jl" data-canonical-src="https://badges.gitter.im/JuliaQuantum/QuDynamics.jl.svg" style="max-width: 100%;"></a></p>
<p dir="auto">Use <a href="http://mybinder.org/" rel="nofollow">Binder</a> to play around instantly, preloaded with QuDynamics, QuBase packages and PyPlot, Gadfly packages for plotting. Jupyter is the medium allowing notebooks, terminal interface. For instance checkout the notebooks in examples.</p>
<p dir="auto"><a href="http://mybinder.org/repo/JuliaQuantum/QuDynamics.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/2894f922b6e4d2bd927c0ad0380f1e857199ba30ed7c7af706760fd9c9cbb5aa/687474703a2f2f6d7962696e6465722e6f72672f62616467652e737667" alt="Binder" data-canonical-src="http://mybinder.org/badge.svg" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-background" class="anchor" aria-hidden="true" href="#background"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Background</h2>
<p dir="auto">The package is aimed at providing a unified framework for solvers for solving Dynamical Equations in Quantum Mechanics. Various solvers have been integrated from packages like <a href="https://github.com/JuliaLang/ODE.jl">ODE.jl</a>, <a href="https://github.com/marcusps/ExpmV.jl">ExpmV.jl</a>,
<a href="https://github.com/acroy/Expokit.jl">Expokit.jl</a>, using base features from <a href="https://github.com/JuliaQuantum/QuBase.jl">QuBase.jl</a>. QuBase.jl is the base package which includes most of the basic type constructs and methods used in Quantum Mechanics.</p>
<h2 dir="auto"><a id="user-content-overview" class="anchor" aria-hidden="true" href="#overview"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Overview</h2>
<p dir="auto">The following Dynamical Equations can be solved using this package :</p>
<ol dir="auto">
<li>Schrodinger Equation</li>
<li>Liouville von Neumann Equation</li>
<li>Lindblad Master Equation</li>
</ol>
<p dir="auto">Using the following solvers :</p>
<ol dir="auto">
<li>
<p dir="auto">Euler Method, Crank-Nicholson Method, Krylov subspace Method</p>
</li>
<li>
<p dir="auto">ode45, ode78, ode23s which have been integrated from <a href="https://github.com/JuliaLang/ODE.jl">ODE.jl</a></p>
</li>
<li>
<p dir="auto">Two versions of <code>expmv</code> implementations from :</p>
<p dir="auto">a. <a href="https://github.com/marcusps/ExpmV.jl">ExpmV.jl</a>
b. <a href="https://github.com/acroy/Expokit.jl">Expokit.jl</a></p>
</li>
<li>
<p dir="auto">Quantum Monte-Carlo Wave Function Method has been integrated with reference from the article : Monte Carlo Simulation of the Atomic Master Equation for Spontaneous Emission, Phys. Rev. A 45, 4879 (1992)
by R. Dum, P. Zoller, and H. Ritsch.</p>
</li>
</ol>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">As the solvers have been integrated from various packages and also that QuDynamics is based on QuBase.jl, we need to install the following for using QuDynamics.</p>
<p dir="auto"><strong>Dependencies</strong></p>
<ul dir="auto">
<li><strong>QuBase.jl</strong></li>
</ul>
<p dir="auto">This has to be added using</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Pkg.clone(&quot;https://github.com/JuliaQuantum/QuBase.jl.git&quot;)"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">clone</span>(<span class="pl-s"><span class="pl-pds">"</span>https://github.com/JuliaQuantum/QuBase.jl.git<span class="pl-pds">"</span></span>)</pre></div>
<ul dir="auto">
<li><strong>Expokit.jl</strong></li>
</ul>
<p dir="auto">This has to be added using</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Pkg.clone(&quot;https://github.com/acroy/Expokit.jl.git&quot;)"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">clone</span>(<span class="pl-s"><span class="pl-pds">"</span>https://github.com/acroy/Expokit.jl.git<span class="pl-pds">"</span></span>)</pre></div>
<ul dir="auto">
<li><strong>ExpmV.jl</strong></li>
</ul>
<p dir="auto">This has to be added using</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Pkg.clone(&quot;https://github.com/marcusps/ExpmV.jl.git&quot;)"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">clone</span>(<span class="pl-s"><span class="pl-pds">"</span>https://github.com/marcusps/ExpmV.jl.git<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">The current package can be used by</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Pkg.clone(&quot;https://github.com/JuliaQuantum/QuDynamics.jl.git&quot;)"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">clone</span>(<span class="pl-s"><span class="pl-pds">"</span>https://github.com/JuliaQuantum/QuDynamics.jl.git<span class="pl-pds">"</span></span>)</pre></div>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<p dir="auto">We could start using the package by :</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using QuBase
using QuDynamics"><pre><span class="pl-k">using</span> QuBase
<span class="pl-k">using</span> QuDynamics</pre></div>
<p dir="auto"><code>QuPropagator</code> is the starting point in order to compute or plot, related entities like states at different time steps, expectation values of an observable and so on. <code>QuProagator</code> is the  one which takes
in the configuration of the system along with the solver which is to be used for solving.</p>
<p dir="auto">For example, consider the following configuration :</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="hamiltonian = sigmax                           # the Hamiltonian of the system
initial_state = statevec(1, FiniteBasis(2))    # the initial state of the system
tlist = 0.:0.1:2*pi                            # the time steps at each of which we have the evolved state"><pre>hamiltonian <span class="pl-k">=</span> sigmax                           <span class="pl-c"><span class="pl-c">#</span> the Hamiltonian of the system</span>
initial_state <span class="pl-k">=</span> <span class="pl-c1">statevec</span>(<span class="pl-c1">1</span>, <span class="pl-c1">FiniteBasis</span>(<span class="pl-c1">2</span>))    <span class="pl-c"><span class="pl-c">#</span> the initial state of the system</span>
tlist <span class="pl-k">=</span> <span class="pl-c1">0.</span>:<span class="pl-c1">0.1</span><span class="pl-k">:</span><span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">pi</span>                            <span class="pl-c"><span class="pl-c">#</span> the time steps at each of which we have the evolved state</span></pre></div>
<p dir="auto">Now we have the basic ingredients to construct the <code>QuPropagator</code>, assuming we have a solver in mind.
We construct the following :</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="qprop_ode45 = QuPropagator(hamiltonian, initial_state, tlist, QuODE45())"><pre>qprop_ode45 <span class="pl-k">=</span> <span class="pl-c1">QuPropagator</span>(hamiltonian, initial_state, tlist, <span class="pl-c1">QuODE45</span>())</pre></div>
<p dir="auto">The general format of <code>QuPropagator</code> construct is as follows :
<code>QuPropagator(Hamiltonian_of_the_system, Collapse_operators, Initial_state, Time_step_array, Solver)</code></p>
<p dir="auto">Alternatively we can also pass :
<code>QuPropagator(Type_of_Equation, Initial_state, Time_step_array, Solver)</code></p>
<p dir="auto">Implying, we could do the following which is equivalent to the above construction of <code>qprop_ode45</code></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="schrodinger_eq = QuSchrodingerEq(hamiltonian)
qprop_ode45 = QuPropagator(schrodinger_eq, initial_state, tlist, QuODE45())"><pre>schrodinger_eq <span class="pl-k">=</span> <span class="pl-c1">QuSchrodingerEq</span>(hamiltonian)
qprop_ode45 <span class="pl-k">=</span> <span class="pl-c1">QuPropagator</span>(schrodinger_eq, initial_state, tlist, <span class="pl-c1">QuODE45</span>())</pre></div>
<p dir="auto">A common convention for the <code>equations</code> and <code>solvers</code> types and methods is they start with a prefix <code>Qu</code>.
For example :</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="`Schrodinger Equation` =&gt; `QuSchrodingerEq`
`ode45` =&gt; `QuODE45`
`expmv` =&gt; `QuExpmV` or `QuExpokit` (based on the packages)"><pre class="notranslate"><code>`Schrodinger Equation` =&gt; `QuSchrodingerEq`
`ode45` =&gt; `QuODE45`
`expmv` =&gt; `QuExpmV` or `QuExpokit` (based on the packages)
</code></pre></div>
<p dir="auto">Now we are all set to calculate the states at various time steps which can be achieved in the
following ways :</p>
<p dir="auto"><strong>Method - 1</strong>:
To get the evolved state at every time instant, we can do the following :</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="for (t, psi) in qprop_ode45
    println(&quot;t : $t, psi : $psi&quot;)
end"><pre><span class="pl-k">for</span> (t, psi) <span class="pl-k">in</span> qprop_ode45
    <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>t : <span class="pl-v">$t</span>, psi : <span class="pl-v">$psi</span><span class="pl-pds">"</span></span>)
<span class="pl-k">end</span></pre></div>
<p dir="auto"><strong>Method - 2</strong>:
To get the evolved state at the next time instant (here we get the state after the fist time-step), we can do the following :</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="next_state = propagate(QuODE45(), QuSchrodingerEq(h), t[2], t[1], initial_state)
println(next_state)"><pre>next_state <span class="pl-k">=</span> <span class="pl-c1">propagate</span>(<span class="pl-c1">QuODE45</span>(), <span class="pl-c1">QuSchrodingerEq</span>(h), t[<span class="pl-c1">2</span>], t[<span class="pl-c1">1</span>], initial_state)
<span class="pl-c1">println</span>(next_state)</pre></div>
<p dir="auto">For more examples and work cases, please refer to the <a href="https://github.com/JuliaQuantum/QuDynamics.jl/tree/master/examples">examples</a> folder of the repo.</p>
<p dir="auto">Note : Instances of <code>QuPropagator</code> can also be called by <code>QuStateEvolution</code>. Also the propagation of evolution operator can be
evaluated using <code>QuEvolutionOp</code>.</p>
<p dir="auto">Update : Time dependence functionality has been integrated. Please refer to this <a href="https://github.com/JuliaQuantum/QuDynamics.jl/wiki/Time-Dependent-Systems">Wiki</a> for details.</p>
<h2 dir="auto"><a id="user-content-discussions" class="anchor" aria-hidden="true" href="#discussions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Discussions</h2>
<p dir="auto">The following discussions tend to provide an insight on the design of the internals :</p>
<ol dir="auto">
<li><a href="http://juliaquantum.github.io/news/index.html" rel="nofollow">The GSoC blog updates</a></li>
<li>Design and implementation related discussion <a href="https://github.com/JuliaQuantum/JuliaQuantum.github.io/issues/20" data-hovercard-type="issue" data-hovercard-url="/JuliaQuantum/JuliaQuantum.github.io/issues/20/hovercard">a</a>, <a href="https://github.com/numfocus/gsoc/blob/7917b4fc08ce73ac74f8a2b9dd7929d994fc4282/2015/proposals/Amit.md">b</a></li>
<li><a href="https://github.com/JuliaQuantum/QuDynamics.jl/issues">Issues</a> and <a href="https://github.com/JuliaQuantum/QuDynamics.jl/pulls">Pull Requests</a> are also good references which shed light on the development of the package.</li>
<li><a href="https://github.com/JuliaQuantum/QuDynamics.jl/wiki">Wiki</a> page has a mention of the design and implementation related discussion.</li>
</ol>
<h2 dir="auto"><a id="user-content-contributions" class="anchor" aria-hidden="true" href="#contributions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Contributions</h2>
<p dir="auto">We would love to have contributors. The process is simple :</p>
<ol dir="auto">
<li>Fork and clone the repo.</li>
<li>Create a local branch and implement the changes.</li>
<li>Test the changes and send in a pull request.</li>
</ol>
</article></div>