<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/58b57fe0ff6153df61bf0ff2f057ffa2a234bf23a4e0c5c029b8a64a4dc78e41/68747470733a2f2f7472617669732d63692e636f6d2f6b61696c6169782f416446656d2e6a6c2e7376673f746f6b656e3d7443524b346e70627857514e53364b5665427673266272616e63683d6d6173746572"><img src="https://camo.githubusercontent.com/58b57fe0ff6153df61bf0ff2f057ffa2a234bf23a4e0c5c029b8a64a4dc78e41/68747470733a2f2f7472617669732d63692e636f6d2f6b61696c6169782f416446656d2e6a6c2e7376673f746f6b656e3d7443524b346e70627857514e53364b5665427673266272616e63683d6d6173746572" alt="" data-canonical-src="https://travis-ci.com/kailaix/AdFem.jl.svg?token=tCRK4npbxWQNS6KVeBvs&amp;branch=master" style="max-width:100%;"></a><a target="_blank" rel="noopener noreferrer" href="https://github.com/kailaix/AdFem.jl/workflows/Documentation/badge.svg"><img src="https://github.com/kailaix/AdFem.jl/workflows/Documentation/badge.svg" alt="Documentation" style="max-width:100%;"></a></p>
<p align="center">
<a target="_blank" rel="noopener noreferrer" href="https://github.com/ADCMEMarket/ADCMEImages/blob/master/AdFem/logo.png"><img src="https://github.com/ADCMEMarket/ADCMEImages/raw/master/AdFem/logo.png" width="500" style="max-width:100%;"></a>
</p>
<table>
<thead>
<tr>
<th>Documentation</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://kailaix.github.io/AdFem.jl/dev/" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a></td>
</tr>
</tbody>
</table>
<p>AdFem is a finite element method open source library for inverse modeling in computational and mathematical engineering. It provides a set of reusable, flexible, and differentiable operators for building scalable and efficient simulators for partial differential equations.</p>
<p>AdFem is built on <a href="https://github.com/kailaix/ADCME.jl">ADCME</a>, an automatic differentiation library for computational and mathematical engineering. It was originally developed for prototyping inverse modeling algorithms using structured meshes but later evolved into a general and powerful tool with a scalable FEM backend <a href="https://mfem.org/" rel="nofollow">MFEM</a>.</p>
<p><code>Ad</code> in AdFem stands for "automatic differentiation" or "adjoint".</p>
<h2><a id="user-content-forward-computation-in-adfem" class="anchor" aria-hidden="true" href="#forward-computation-in-adfem"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Forward Computation in AdFem</h2>
<p>As an example, we consider solving the Poisson's equation in AdFem</p>
<p><a target="_blank" rel="noopener noreferrer" href="https://raw.githubusercontent.com/ADCMEMarket/ADCMEImages/master/AdFem/eq1.svg"><img src="https://raw.githubusercontent.com/ADCMEMarket/ADCMEImages/master/AdFem/eq1.svg" alt="" style="max-width:100%;"></a></p>
<p>Here</p>
<p><a target="_blank" rel="noopener noreferrer" href="https://raw.githubusercontent.com/ADCMEMarket/ADCMEImages/master/AdFem/eq2.svg"><img src="https://raw.githubusercontent.com/ADCMEMarket/ADCMEImages/master/AdFem/eq2.svg" alt="" style="max-width:100%;"></a></p>
<p>The weak form for the Poisson's equation is to solve a variational equation</p>
<p><a target="_blank" rel="noopener noreferrer" href="https://raw.githubusercontent.com/ADCMEMarket/ADCMEImages/master/AdFem/eq3.svg"><img src="https://raw.githubusercontent.com/ADCMEMarket/ADCMEImages/master/AdFem/eq3.svg" alt="" style="max-width:100%;"></a></p>
<p>The problem is easily translated in AdFem:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using AdFem
using PyPlot 

# forward computation
mmesh = Mesh(joinpath(PDATA, &quot;twoholes_large.stl&quot;))
xy = gauss_nodes(mmesh)
κ = @. sin(xy[:,1]) * (1+xy[:,2]^2) + 1.0
f = 1e5 * @. xy[:,1] + xy[:,2]
K = compute_fem_laplace_matrix1(κ, mmesh)
F = compute_fem_source_term1(f, mmesh)
bdnode = bcnode(mmesh)
K, F = impose_Dirichlet_boundary_conditions(K, F, bdnode, zeros(length(bdnode)))
sol = K\F
"><pre><span class="pl-k">using</span> AdFem
<span class="pl-k">using</span> PyPlot 

<span class="pl-c"><span class="pl-c">#</span> forward computation</span>
mmesh <span class="pl-k">=</span> <span class="pl-c1">Mesh</span>(<span class="pl-c1">joinpath</span>(PDATA, <span class="pl-s"><span class="pl-pds">"</span>twoholes_large.stl<span class="pl-pds">"</span></span>))
xy <span class="pl-k">=</span> <span class="pl-c1">gauss_nodes</span>(mmesh)
κ <span class="pl-k">=</span> <span class="pl-c1">@.</span> <span class="pl-c1">sin</span>(xy[:,<span class="pl-c1">1</span>]) <span class="pl-k">*</span> (<span class="pl-c1">1</span><span class="pl-k">+</span>xy[:,<span class="pl-c1">2</span>]<span class="pl-k">^</span><span class="pl-c1">2</span>) <span class="pl-k">+</span> <span class="pl-c1">1.0</span>
f <span class="pl-k">=</span> <span class="pl-c1">1e5</span> <span class="pl-k">*</span> <span class="pl-c1">@.</span> xy[:,<span class="pl-c1">1</span>] <span class="pl-k">+</span> xy[:,<span class="pl-c1">2</span>]
K <span class="pl-k">=</span> <span class="pl-c1">compute_fem_laplace_matrix1</span>(κ, mmesh)
F <span class="pl-k">=</span> <span class="pl-c1">compute_fem_source_term1</span>(f, mmesh)
bdnode <span class="pl-k">=</span> <span class="pl-c1">bcnode</span>(mmesh)
K, F <span class="pl-k">=</span> <span class="pl-c1">impose_Dirichlet_boundary_conditions</span>(K, F, bdnode, <span class="pl-c1">zeros</span>(<span class="pl-c1">length</span>(bdnode)))
sol <span class="pl-k">=</span> K<span class="pl-k">\</span>F</pre></div>
<p align="center">
<a target="_blank" rel="noopener noreferrer" href="https://raw.githubusercontent.com/ADCMEMarket/ADCMEImages/master/AdFem/poisson_solution.png"><img src="https://raw.githubusercontent.com/ADCMEMarket/ADCMEImages/master/AdFem/poisson_solution.png" width="500" style="max-width:100%;"></a>
</p>
<p>The above code shows how to use a linear finite element space to approximate the state variable on a given mesh, define boundary conditions, and construct the linear system.</p>
<h2><a id="user-content-inverse-modeling" class="anchor" aria-hidden="true" href="#inverse-modeling"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Inverse Modeling</h2>
<p>Most functions of AdFem, such as <code>compute_fem_laplace_matrix1</code>, <code>compute_fem_source_term1</code>, and <code>impose_Dirichlet_boundary_conditions</code>, are AD-capable, meaning that you can back-propagate gradients from their outputs to inputs. This enables you to conduct inverse modeling without writing extra substantial effort once the forward computation codes are implemented. AdFem constructs a static computational graph for finite element simulators: the computational graph is optimized before executation, and all computations are delegated to efficient C++ kernels.</p>
<p>Here we use a deep neural network to approximate κ(x) (<code>fc</code> is an ADCME function and stands for fully-connected):</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="nn_κ = squeeze(fc(xy, [20,20,20,1])) + 1
K = compute_fem_laplace_matrix1(nn_κ, mmesh)
F = compute_fem_source_term1(f, mmesh)
bdnode = bcnode(mmesh)
K, F = impose_Dirichlet_boundary_conditions(K, F, bdnode, zeros(length(bdnode)))
nn_sol = K\F
loss = sum((nn_sol - sol)^2)

sess = Session(); init(sess)
BFGS!(sess, loss)
"><pre>nn_κ <span class="pl-k">=</span> <span class="pl-c1">squeeze</span>(<span class="pl-c1">fc</span>(xy, [<span class="pl-c1">20</span>,<span class="pl-c1">20</span>,<span class="pl-c1">20</span>,<span class="pl-c1">1</span>])) <span class="pl-k">+</span> <span class="pl-c1">1</span>
K <span class="pl-k">=</span> <span class="pl-c1">compute_fem_laplace_matrix1</span>(nn_κ, mmesh)
F <span class="pl-k">=</span> <span class="pl-c1">compute_fem_source_term1</span>(f, mmesh)
bdnode <span class="pl-k">=</span> <span class="pl-c1">bcnode</span>(mmesh)
K, F <span class="pl-k">=</span> <span class="pl-c1">impose_Dirichlet_boundary_conditions</span>(K, F, bdnode, <span class="pl-c1">zeros</span>(<span class="pl-c1">length</span>(bdnode)))
nn_sol <span class="pl-k">=</span> K<span class="pl-k">\</span>F
loss <span class="pl-k">=</span> <span class="pl-c1">sum</span>((nn_sol <span class="pl-k">-</span> sol)<span class="pl-k">^</span><span class="pl-c1">2</span>)

sess <span class="pl-k">=</span> <span class="pl-c1">Session</span>(); <span class="pl-c1">init</span>(sess)
<span class="pl-c1">BFGS!</span>(sess, loss)</pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="https://raw.githubusercontent.com/ADCMEMarket/ADCMEImages/master/AdFem/poisson_kappa.png"><img src="https://raw.githubusercontent.com/ADCMEMarket/ADCMEImages/master/AdFem/poisson_kappa.png" alt="" style="max-width:100%;"></a></p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>AdFem is tested on Unix platform (Linux and Mac). To install the stable release:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Pkg
Pkg.add(&quot;ADCME&quot;) # dependency
Pkg.add(&quot;AdFem&quot;)
"><pre><span class="pl-k">using</span> Pkg
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>ADCME<span class="pl-pds">"</span></span>) <span class="pl-c"><span class="pl-c">#</span> dependency</span>
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>AdFem<span class="pl-pds">"</span></span>)</pre></div>
<p>To install the latest version:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Pkg 
Pkg.add(PackageSpec(url=&quot;https://github.com/kailaix/AdFem.jl&quot;, rev=&quot;master&quot;)) 
"><pre><span class="pl-k">using</span> Pkg 
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-c1">PackageSpec</span>(url<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>https://github.com/kailaix/AdFem.jl<span class="pl-pds">"</span></span>, rev<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>master<span class="pl-pds">"</span></span>)) </pre></div>
<p>To install with docker, here is the  <a href="https://hub.docker.com/r/zhehaoli/julia_adfem" rel="nofollow">built docker image</a> provided by @Ricahrd-Li, and please see <a href="./docs/src/docker_install_guide.md">docker install guide</a>.</p>
<h2><a id="user-content-research" class="anchor" aria-hidden="true" href="#research"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Research</h2>
<p>AdFem is an open-source package that accompanies ADCME.jl for solving inverse problems involving partial differential equations (PDEs). AdFem provides users a rich collection of operators, which users can use to quickly build finite element/volumn codes for forward computation. More importantly, these operators can back-propagate gradients, and therefore users can calculate the gradients using the ideas of adjoint methods and reverse-mode automatic differention (these two concepts overlap). The advanced physics constrained learning (PCL) approach enables users to back-propagate gradients through iterative and nonlinear solvers efficiently. AdFem offers a flexible interface for experienced researchers to develop their own operators.</p>
<p>Some related research works can be found here:</p>
<ol>
<li><a href="https://arxiv.org/abs/2002.10521" rel="nofollow">Physics constrained learning for data-driven inverse modeling from sparse observations</a></li>
<li><a href="https://arxiv.org/abs/2008.13074" rel="nofollow">Solving Inverse Problems in Steady State Navier-Stokes Equations using Deep Neural Networks</a></li>
<li><a href="https://arxiv.org/abs/2005.04384" rel="nofollow">Inverse Modeling of Viscoelasticity Materials using Physics Constrained Learning</a></li>
</ol>
<h2><a id="user-content-license" class="anchor" aria-hidden="true" href="#license"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>License</h2>
<p>AdFem is licensed under MIT License. See <a href="https://github.com/kailaix/AdFem.jl/blob/master/LICENSE">LICENSE</a> for details.</p>
</article></div>