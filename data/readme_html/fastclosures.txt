<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-fastclosures" class="anchor" aria-hidden="true" href="#fastclosures"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>FastClosures</h1>
<p><a href="https://github.com/c42f/FastClosures.jl/actions"><img src="https://github.com/c42f/FastClosures.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width:100%;"></a></p>
<p>A workaround for <a href="https://github.com/JuliaLang/julia/issues/15276">https://github.com/JuliaLang/julia/issues/15276</a>, for julia-1.x,
somewhat in the spirit of FastAnonymous.jl.  Provides the <code>@closure</code> macro,
which wraps a closure in a <code>let</code> block to make reading variable bindings private
to the closure.  In certain cases, this make using the closure - and the code
surrouding it - much faster.  Note that it's not clear that the <code>let</code> block
trick implemented in this package helps at all in julia-0.5.  However, julia-0.5
compatibility is provided for backward compatibility convenience.</p>
<h2><a id="user-content-interface" class="anchor" aria-hidden="true" href="#interface"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Interface</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="    @closure closure_expression
"><pre>    <span class="pl-c1">@closure</span> closure_expression</pre></div>
<p>Wrap the closure definition <code>closure_expression</code> in a let block to encourage
the julia compiler to generate improved type information.  For example:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="callfunc(f) = f()

function foo(n)
   for i=1:n
       if i &gt;= n
           # Unlikely event - should be fast.  However, capture of `i` inside
           # the closure confuses the julia-0.6 compiler and causes it to box
           # the variable `i`, leading to a 100x performance hit if you remove
           # the `@closure`.
           callfunc(@closure ()-&gt;println(&quot;Hello \$i&quot;))
       end
   end
end
"><pre><span class="pl-en">callfunc</span>(f) <span class="pl-k">=</span> <span class="pl-c1">f</span>()

<span class="pl-k">function</span> <span class="pl-en">foo</span>(n)
   <span class="pl-k">for</span> i<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">:</span>n
       <span class="pl-k">if</span> i <span class="pl-k">&gt;=</span> n
           <span class="pl-c"><span class="pl-c">#</span> Unlikely event - should be fast.  However, capture of `i` inside</span>
           <span class="pl-c"><span class="pl-c">#</span> the closure confuses the julia-0.6 compiler and causes it to box</span>
           <span class="pl-c"><span class="pl-c">#</span> the variable `i`, leading to a 100x performance hit if you remove</span>
           <span class="pl-c"><span class="pl-c">#</span> the `@closure`.</span>
           <span class="pl-c1">callfunc</span>(<span class="pl-c1">@closure</span> ()<span class="pl-k">-&gt;</span><span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>Hello <span class="pl-cce">\$</span>i<span class="pl-pds">"</span></span>))
       <span class="pl-k">end</span>
   <span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>
<p>Here's a further example of where this helps:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using FastClosures

# code_warntype problem
function f1()
    if true
    end
    r = 1
    cb = ()-&gt;r
    identity(cb)
end

# code_warntype clean
function f2()
    if true
    end
    r = 1
    cb = @closure ()-&gt;r
    identity(cb)
end

@code_warntype f1()
@code_warntype f2()
"><pre><span class="pl-k">using</span> FastClosures

<span class="pl-c"><span class="pl-c">#</span> code_warntype problem</span>
<span class="pl-k">function</span> <span class="pl-en">f1</span>()
    <span class="pl-k">if</span> <span class="pl-c1">true</span>
    <span class="pl-k">end</span>
    r <span class="pl-k">=</span> <span class="pl-c1">1</span>
    cb <span class="pl-k">=</span> ()<span class="pl-k">-&gt;</span>r
    <span class="pl-c1">identity</span>(cb)
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> code_warntype clean</span>
<span class="pl-k">function</span> <span class="pl-en">f2</span>()
    <span class="pl-k">if</span> <span class="pl-c1">true</span>
    <span class="pl-k">end</span>
    r <span class="pl-k">=</span> <span class="pl-c1">1</span>
    cb <span class="pl-k">=</span> <span class="pl-c1">@closure</span> ()<span class="pl-k">-&gt;</span>r
    <span class="pl-c1">identity</span>(cb)
<span class="pl-k">end</span>

<span class="pl-c1">@code_warntype</span> <span class="pl-c1">f1</span>()
<span class="pl-c1">@code_warntype</span> <span class="pl-c1">f2</span>()</pre></div>
</article></div>