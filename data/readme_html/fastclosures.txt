<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-fastclosures" class="anchor" aria-hidden="true" href="#fastclosures"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>FastClosures</h1>
<table>
<thead>
<tr>
<th align="center"><strong>Releases - PackageEvaluator</strong></th>
<th align="center"><strong>Development - Build Status</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><a href="http://pkg.julialang.org/detail/FastClosures" rel="nofollow"><img src="https://camo.githubusercontent.com/3e99904c5865219633ac4f3fd20d833f3d498aaf/687474703a2f2f706b672e6a756c69616c616e672e6f72672f6261646765732f46617374436c6f73757265735f302e352e737667" alt="FastClosures" data-canonical-src="http://pkg.julialang.org/badges/FastClosures_0.5.svg" style="max-width:100%;"></a>    <a href="http://pkg.julialang.org/detail/FastClosures" rel="nofollow"><img src="https://camo.githubusercontent.com/cd99490d71c6b2dc80bba970537ee45d4feefd4c/687474703a2f2f706b672e6a756c69616c616e672e6f72672f6261646765732f46617374436c6f73757265735f302e362e737667" alt="FastClosures" data-canonical-src="http://pkg.julialang.org/badges/FastClosures_0.6.svg" style="max-width:100%;"></a></td>
<td align="center"><a href="https://travis-ci.org/c42f/FastClosures.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/a1d20c4c997ffa70d2f6c1cb29d282bd5a909348/68747470733a2f2f7472617669732d63692e6f72672f633432662f46617374436c6f73757265732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/c42f/FastClosures.jl.svg?branch=master" style="max-width:100%;"></a>   <a href="http://codecov.io/github/c42f/FastClosures.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/472a56c63951577bd024ceeb71dbefad9c467f55/687474703a2f2f636f6465636f762e696f2f6769746875622f633432662f46617374436c6f73757265732e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/c42f/FastClosures.jl/coverage.svg?branch=master" style="max-width:100%;"></a></td>
</tr>
</tbody>
</table>
<p>A workaround for <a href="https://github.com/JuliaLang/julia/issues/15276">https://github.com/JuliaLang/julia/issues/15276</a>, for julia-0.6,
somewhat in the spirit of FastAnonymous.jl.  Provides the <code>@closure</code> macro,
which wraps a closure in a <code>let</code> block to make reading variable bindings private
to the closure.  In certain cases, this make using the closure - and the code
surrouding it - much faster.  Note that it's not clear that the <code>let</code> block
trick implemented in this package helps at all in julia-0.5.  However, julia-0.5
compatibility is provided for backward compatibility convenience.</p>
<h2><a id="user-content-interface" class="anchor" aria-hidden="true" href="#interface"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Interface</h2>
<div class="highlight highlight-source-julia"><pre>    <span class="pl-c1">@closure</span> closure_expression</pre></div>
<p>Wrap the closure definition <code>closure_expression</code> in a let block to encourage
the julia compiler to generate improved type information.  For example:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-en">callfunc</span>(f) <span class="pl-k">=</span> <span class="pl-c1">f</span>()

<span class="pl-k">function</span> <span class="pl-en">foo</span>(n)
   <span class="pl-k">for</span> i<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">:</span>n
       <span class="pl-k">if</span> i <span class="pl-k">&gt;=</span> n
           <span class="pl-c"><span class="pl-c">#</span> Unlikely event - should be fast.  However, capture of `i` inside</span>
           <span class="pl-c"><span class="pl-c">#</span> the closure confuses the julia-0.6 compiler and causes it to box</span>
           <span class="pl-c"><span class="pl-c">#</span> the variable `i`, leading to a 100x performance hit if you remove</span>
           <span class="pl-c"><span class="pl-c">#</span> the `@closure`.</span>
           <span class="pl-c1">callfunc</span>(<span class="pl-c1">@closure</span> ()<span class="pl-k">-&gt;</span><span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>Hello <span class="pl-cce">\$</span>i<span class="pl-pds">"</span></span>))
       <span class="pl-k">end</span>
   <span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>
<p>Here's a further example of where this helps:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> FastClosures

<span class="pl-c"><span class="pl-c">#</span> code_warntype problem</span>
<span class="pl-k">function</span> <span class="pl-en">f1</span>()
    <span class="pl-k">if</span> <span class="pl-c1">true</span>
    <span class="pl-k">end</span>
    r <span class="pl-k">=</span> <span class="pl-c1">1</span>
    cb <span class="pl-k">=</span> ()<span class="pl-k">-&gt;</span>r
    <span class="pl-c1">identity</span>(cb)
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> code_warntype clean</span>
<span class="pl-k">function</span> <span class="pl-en">f2</span>()
    <span class="pl-k">if</span> <span class="pl-c1">true</span>
    <span class="pl-k">end</span>
    r <span class="pl-k">=</span> <span class="pl-c1">1</span>
    cb <span class="pl-k">=</span> <span class="pl-c1">@closure</span> ()<span class="pl-k">-&gt;</span>r
    <span class="pl-c1">identity</span>(cb)
<span class="pl-k">end</span>

<span class="pl-c1">@code_warntype</span> <span class="pl-c1">f1</span>()
<span class="pl-c1">@code_warntype</span> <span class="pl-c1">f2</span>()</pre></div>
</article></div>