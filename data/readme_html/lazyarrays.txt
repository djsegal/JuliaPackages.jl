<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-lazyarraysjl" class="anchor" aria-hidden="true" href="#lazyarraysjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>LazyArrays.jl</h1>
<p><a href="https://juliaarrays.github.io/LazyArrays.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/3e353c26ddfe819150acbc732248f4f2a37f5175/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a>
<a href="https://travis-ci.org/JuliaArrays/LazyArrays.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/51653037beb368e879e12d49f4a67b676ffcfb80/68747470733a2f2f7472617669732d63692e6f72672f4a756c69614172726179732f4c617a794172726179732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Travis" data-canonical-src="https://travis-ci.org/JuliaArrays/LazyArrays.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/JuliaArrays/LazyArrays.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/2d3e80d8f62aa70251de5b97cdde0ddf469fd686/68747470733a2f2f636f6465636f762e696f2f67682f4a756c69614172726179732f4c617a794172726179732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/JuliaArrays/LazyArrays.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p>Lazy arrays and linear algebra in Julia</p>
<p>This package supports lazy analogues of array operations like <code>vcat</code>, <code>hcat</code>,
and multiplication. This helps with the implementation of matrix-free methods
for iterative solvers.</p>
<p>The package has been designed with high-performance in mind, so should outperform
the non-lazy analogues from Base for many operations like <code>copyto!</code> and broadcasting.
Some operations will be inherently slower due to extra computation, like <code>getindex</code>.
Please file an issue for any examples that are significantly slower than their
the analogue in Base.</p>
<h2><a id="user-content-lazy-operations" class="anchor" aria-hidden="true" href="#lazy-operations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Lazy operations</h2>
<p>To construct a lazy representation of a function call <code>f(x,y,z...)</code>, use the command
<code>applied(f, x, y, z...)</code>. This will return an unmaterialized object typically of type <code>Applied</code>
that represents the operation. To realize that object, call <code>materialize</code>, which
will typically be equivalent to calling <code>f(x,y,z...)</code>. A macro <code>@~</code> is available as a shorthand:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> LazyArrays, LinearAlgebra

julia<span class="pl-k">&gt;</span> <span class="pl-c1">applied</span>(exp, <span class="pl-c1">1</span>)
<span class="pl-c1">Applied</span>(exp,<span class="pl-c1">1</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">materialize</span>(<span class="pl-c1">applied</span>(exp, <span class="pl-c1">1</span>))
<span class="pl-c1">2.718281828459045</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">materialize</span>(@<span class="pl-k">~</span> <span class="pl-c1">exp</span>(<span class="pl-c1">1</span>))
<span class="pl-c1">2.718281828459045</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">exp</span>(<span class="pl-c1">1</span>)
<span class="pl-c1">2.718281828459045</span></pre></div>
<p>The benefit of lazy operations is that they can be materialized in-place,
possible using simplifications. For example, it is possible to
do BLAS-like Matrix-Vector operations of the form <code>α*A*x + β*y</code> as
implemented in <code>BLAS.gemv!</code> using a lazy applied object:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> A <span class="pl-k">=</span> <span class="pl-c1">randn</span>(<span class="pl-c1">5</span>,<span class="pl-c1">5</span>); b <span class="pl-k">=</span> <span class="pl-c1">randn</span>(<span class="pl-c1">5</span>); c <span class="pl-k">=</span> <span class="pl-c1">randn</span>(<span class="pl-c1">5</span>); d <span class="pl-k">=</span> <span class="pl-c1">similar</span>(c);

julia<span class="pl-k">&gt;</span> d <span class="pl-k">.=</span> @<span class="pl-k">~</span> <span class="pl-c1">2.0</span> <span class="pl-k">*</span> A <span class="pl-k">*</span> b <span class="pl-k">+</span> <span class="pl-c1">3.0</span> <span class="pl-k">*</span> c <span class="pl-c"><span class="pl-c">#</span> Calls gemv!</span>
<span class="pl-c1">5</span><span class="pl-k">-</span>element Array{Float64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-k">-</span><span class="pl-c1">2.5366335879717514</span>
 <span class="pl-k">-</span><span class="pl-c1">5.305097174484744</span>  
 <span class="pl-k">-</span><span class="pl-c1">9.818431932350942</span>  
  <span class="pl-c1">2.421562605495651</span>  
  <span class="pl-c1">0.26792916096572983</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">2</span><span class="pl-k">*</span>(A<span class="pl-k">*</span>b) <span class="pl-k">+</span> <span class="pl-c1">3</span>c
<span class="pl-c1">5</span><span class="pl-k">-</span>element Array{Float64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-k">-</span><span class="pl-c1">2.5366335879717514</span>
 <span class="pl-k">-</span><span class="pl-c1">5.305097174484744</span>  
 <span class="pl-k">-</span><span class="pl-c1">9.818431932350942</span>  
  <span class="pl-c1">2.421562605495651</span>  
  <span class="pl-c1">0.26792916096572983</span>

julia<span class="pl-k">&gt;</span> <span class="pl-k">function</span> <span class="pl-en">mymul</span>(A, b, c, d) <span class="pl-c"><span class="pl-c">#</span> need to put in function for benchmarking</span>
       d <span class="pl-k">.=</span> @<span class="pl-k">~</span> <span class="pl-c1">2.0</span> <span class="pl-k">*</span> A <span class="pl-k">*</span> b <span class="pl-k">+</span> <span class="pl-c1">3.0</span> <span class="pl-k">*</span> c
       <span class="pl-k">end</span>
mymul (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">mymul</span>(A, b, c, d) <span class="pl-c"><span class="pl-c">#</span> calls gemv!</span>
  <span class="pl-c1">77.444</span> ns (<span class="pl-c1">0</span> allocations<span class="pl-k">:</span> <span class="pl-c1">0</span> bytes)
<span class="pl-c1">5</span><span class="pl-k">-</span>element Array{Float64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-k">-</span><span class="pl-c1">2.5366335879717514</span>
 <span class="pl-k">-</span><span class="pl-c1">5.305097174484744</span>  
 <span class="pl-k">-</span><span class="pl-c1">9.818431932350942</span>  
  <span class="pl-c1">2.421562605495651</span>  
  <span class="pl-c1">0.26792916096572983</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">2</span><span class="pl-k">*</span>(A<span class="pl-k">*</span>b) <span class="pl-k">+</span> <span class="pl-c1">3</span>c; <span class="pl-c"><span class="pl-c">#</span> does not call gemv!</span>
  <span class="pl-c1">241.659</span> ns (<span class="pl-c1">4</span> allocations<span class="pl-k">:</span> <span class="pl-c1">512</span> bytes)</pre></div>
<p>This also works for inverses, which lower to BLAS calls whenever possible:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> A <span class="pl-k">=</span> <span class="pl-c1">randn</span>(<span class="pl-c1">5</span>,<span class="pl-c1">5</span>); b <span class="pl-k">=</span> <span class="pl-c1">randn</span>(<span class="pl-c1">5</span>); c <span class="pl-k">=</span> <span class="pl-c1">similar</span>(b);

julia<span class="pl-k">&gt;</span> c <span class="pl-k">.=</span> @<span class="pl-k">~</span> A <span class="pl-k">\</span> b
<span class="pl-c1">5</span><span class="pl-k">-</span>element Array{Float64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-k">-</span><span class="pl-c1">2.5366335879717514</span>
 <span class="pl-k">-</span><span class="pl-c1">5.305097174484744</span>  
 <span class="pl-k">-</span><span class="pl-c1">9.818431932350942</span>  
  <span class="pl-c1">2.421562605495651</span>  
  <span class="pl-c1">0.26792916096572983</span></pre></div>
<h2><a id="user-content-lazy-arrays" class="anchor" aria-hidden="true" href="#lazy-arrays"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Lazy arrays</h2>
<p>Often we want lazy realizations of matrices, which are supported via <code>ApplyArray</code>.
For example, the following creates a lazy matrix exponential:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> E <span class="pl-k">=</span> <span class="pl-c1">ApplyArray</span>(exp, [<span class="pl-c1">1</span> <span class="pl-c1">2</span>; <span class="pl-c1">3</span> <span class="pl-c1">4</span>])
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">2</span> ApplyArray{Float64,<span class="pl-c1">2</span>,<span class="pl-c1">typeof</span>(exp),Tuple{Array{Int64,<span class="pl-c1">2</span>}}}<span class="pl-k">:</span>
  <span class="pl-c1">51.969</span>   <span class="pl-c1">74.7366</span>
 <span class="pl-c1">112.105</span>  <span class="pl-c1">164.074</span> </pre></div>
<p>A lazy matrix exponential is useful for, say, in-place matrix-exponetial*vector:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> b <span class="pl-k">=</span> <span class="pl-c1">Vector</span><span class="pl-c1">{Float64}</span>(undef, <span class="pl-c1">2</span>); b <span class="pl-k">.=</span> @<span class="pl-k">~</span> E<span class="pl-k">*</span>[<span class="pl-c1">4</span>,<span class="pl-c1">4</span>]
<span class="pl-c1">2</span><span class="pl-k">-</span>element Array{Float64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
  <span class="pl-c1">506.8220830628333</span>
 <span class="pl-c1">1104.7145995988594</span></pre></div>
<p>While this works, it is not actually optimised (yet).</p>
<p>Other options do have special implementations that make them fast. We
now give some examples.</p>
<h3><a id="user-content-concatenation" class="anchor" aria-hidden="true" href="#concatenation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Concatenation</h3>
<p>Lazy <code>vcat</code> and <code>hcat</code> allow for representing the concatenation of
vectors without actually allocating memory, and support a fast
<code>copyto!</code>  for allocation-free population of a vector.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> BenchmarkTools

julia<span class="pl-k">&gt;</span> A <span class="pl-k">=</span> <span class="pl-c1">ApplyArray</span>(vcat,<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">5</span>,<span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">3</span>) <span class="pl-c"><span class="pl-c">#</span> allocation-free</span>
<span class="pl-c1">7</span><span class="pl-k">-</span>element ApplyArray{Int64,<span class="pl-c1">1</span>,<span class="pl-c1">typeof</span>(vcat),Tuple{UnitRange{Int64},UnitRange{Int64}}}<span class="pl-k">:</span>
 <span class="pl-c1">1</span>
 <span class="pl-c1">2</span>
 <span class="pl-c1">3</span>
 <span class="pl-c1">4</span>
 <span class="pl-c1">5</span>
 <span class="pl-c1">2</span>
 <span class="pl-c1">3</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">Vector</span>(A) <span class="pl-k">==</span> <span class="pl-c1">vcat</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">5</span>, <span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">3</span>)
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> b <span class="pl-k">=</span> <span class="pl-c1">Array</span><span class="pl-c1">{Int}</span>(undef, <span class="pl-c1">length</span>(A)); <span class="pl-c1">@btime</span> <span class="pl-c1">copyto!</span>(b, A);
  <span class="pl-c1">26.670</span> ns (<span class="pl-c1">0</span> allocations<span class="pl-k">:</span> <span class="pl-c1">0</span> bytes)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">vcat</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">5</span>, <span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">3</span>); <span class="pl-c"><span class="pl-c">#</span> takes twice as long due to memory creation</span>
  <span class="pl-c1">43.336</span> ns (<span class="pl-c1">1</span> allocation<span class="pl-k">:</span> <span class="pl-c1">144</span> bytes)</pre></div>
<p>Similar is the lazy analogue of <code>hcat</code>:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> A <span class="pl-k">=</span> <span class="pl-c1">ApplyArray</span>(hcat, <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">3</span>, <span class="pl-c1">randn</span>(<span class="pl-c1">3</span>,<span class="pl-c1">10</span>))
<span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">11</span> ApplyArray{Float64,<span class="pl-c1">2</span>,<span class="pl-c1">typeof</span>(hcat),Tuple{UnitRange{Int64},Array{Float64,<span class="pl-c1">2</span>}}}<span class="pl-k">:</span>
 <span class="pl-c1">1.0</span>   <span class="pl-c1">1.16561</span>    <span class="pl-c1">0.224871</span>  <span class="pl-k">-</span><span class="pl-c1">1.36416</span>   <span class="pl-k">-</span><span class="pl-c1">0.30675</span>    <span class="pl-c1">0.103714</span>    <span class="pl-c1">0.590141</span>   <span class="pl-c1">0.982382</span>  <span class="pl-k">-</span><span class="pl-c1">1.50045</span>    <span class="pl-c1">0.323747</span>  <span class="pl-k">-</span><span class="pl-c1">1.28173</span>  
 <span class="pl-c1">2.0</span>   <span class="pl-c1">1.04648</span>    <span class="pl-c1">1.35506</span>   <span class="pl-k">-</span><span class="pl-c1">0.147157</span>   <span class="pl-c1">0.995657</span>  <span class="pl-k">-</span><span class="pl-c1">0.616321</span>   <span class="pl-k">-</span><span class="pl-c1">0.128672</span>  <span class="pl-k">-</span><span class="pl-c1">0.671445</span>  <span class="pl-k">-</span><span class="pl-c1">0.563587</span>  <span class="pl-k">-</span><span class="pl-c1">0.268389</span>  <span class="pl-k">-</span><span class="pl-c1">1.71004</span>  
 <span class="pl-c1">3.0</span>  <span class="pl-k">-</span><span class="pl-c1">0.433093</span>  <span class="pl-k">-</span><span class="pl-c1">0.325207</span>  <span class="pl-k">-</span><span class="pl-c1">1.38496</span>   <span class="pl-k">-</span><span class="pl-c1">0.391113</span>  <span class="pl-k">-</span><span class="pl-c1">0.0568739</span>  <span class="pl-k">-</span><span class="pl-c1">1.55796</span>   <span class="pl-k">-</span><span class="pl-c1">1.00747</span>    <span class="pl-c1">0.473686</span>  <span class="pl-k">-</span><span class="pl-c1">1.2113</span>     <span class="pl-c1">0.0119156</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">Matrix</span>(A) <span class="pl-k">==</span> <span class="pl-c1">hcat</span>(A<span class="pl-k">.</span>args<span class="pl-k">...</span>)
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> B <span class="pl-k">=</span> <span class="pl-c1">Array</span><span class="pl-c1">{Float64}</span>(undef, <span class="pl-c1">size</span>(A)<span class="pl-k">...</span>); <span class="pl-c1">@btime</span> <span class="pl-c1">copyto!</span>(B, A);
  <span class="pl-c1">109.625</span> ns (<span class="pl-c1">1</span> allocation<span class="pl-k">:</span> <span class="pl-c1">32</span> bytes)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">hcat</span>(A<span class="pl-k">.</span>args<span class="pl-k">...</span>); <span class="pl-c"><span class="pl-c">#</span> takes twice as long due to memory creation</span>
  <span class="pl-c1">274.620</span> ns (<span class="pl-c1">6</span> allocations<span class="pl-k">:</span> <span class="pl-c1">560</span> bytes)</pre></div>
<h3><a id="user-content-kronecker-products" class="anchor" aria-hidden="true" href="#kronecker-products"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Kronecker products</h3>
<p>We can represent Kronecker products of arrays without constructing the full
array:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> A <span class="pl-k">=</span> <span class="pl-c1">randn</span>(<span class="pl-c1">2</span>,<span class="pl-c1">2</span>); B <span class="pl-k">=</span> <span class="pl-c1">randn</span>(<span class="pl-c1">3</span>,<span class="pl-c1">3</span>);

julia<span class="pl-k">&gt;</span> K <span class="pl-k">=</span> <span class="pl-c1">ApplyArray</span>(kron,A,B)
<span class="pl-c1">6</span><span class="pl-k">×</span><span class="pl-c1">6</span> ApplyArray{Float64,<span class="pl-c1">2</span>,<span class="pl-c1">typeof</span>(kron),Tuple{Array{Float64,<span class="pl-c1">2</span>},Array{Float64,<span class="pl-c1">2</span>}}}<span class="pl-k">:</span>
 <span class="pl-k">-</span><span class="pl-c1">1.08736</span>   <span class="pl-k">-</span><span class="pl-c1">0.19547</span>   <span class="pl-k">-</span><span class="pl-c1">0.132824</span>   <span class="pl-c1">1.60531</span>    <span class="pl-c1">0.288579</span>    <span class="pl-c1">0.196093</span> 
  <span class="pl-c1">0.353898</span>   <span class="pl-c1">0.445557</span>  <span class="pl-k">-</span><span class="pl-c1">0.257776</span>  <span class="pl-k">-</span><span class="pl-c1">0.522472</span>  <span class="pl-k">-</span><span class="pl-c1">0.657791</span>    <span class="pl-c1">0.380564</span> 
 <span class="pl-k">-</span><span class="pl-c1">0.723707</span>   <span class="pl-c1">0.911737</span>  <span class="pl-k">-</span><span class="pl-c1">0.710378</span>   <span class="pl-c1">1.06843</span>   <span class="pl-k">-</span><span class="pl-c1">1.34603</span>     <span class="pl-c1">1.04876</span>  
  <span class="pl-c1">1.40606</span>    <span class="pl-c1">0.252761</span>   <span class="pl-c1">0.171754</span>  <span class="pl-k">-</span><span class="pl-c1">0.403809</span>  <span class="pl-k">-</span><span class="pl-c1">0.0725908</span>  <span class="pl-k">-</span><span class="pl-c1">0.0493262</span>
 <span class="pl-k">-</span><span class="pl-c1">0.457623</span>  <span class="pl-k">-</span><span class="pl-c1">0.576146</span>   <span class="pl-c1">0.333329</span>   <span class="pl-c1">0.131426</span>   <span class="pl-c1">0.165464</span>   <span class="pl-k">-</span><span class="pl-c1">0.0957293</span>
  <span class="pl-c1">0.935821</span>  <span class="pl-k">-</span><span class="pl-c1">1.17896</span>    <span class="pl-c1">0.918584</span>  <span class="pl-k">-</span><span class="pl-c1">0.26876</span>    <span class="pl-c1">0.338588</span>   <span class="pl-k">-</span><span class="pl-c1">0.26381</span>  

julia<span class="pl-k">&gt;</span> C <span class="pl-k">=</span> <span class="pl-c1">Matrix</span><span class="pl-c1">{Float64}</span>(undef, <span class="pl-c1">6</span>, <span class="pl-c1">6</span>); <span class="pl-c1">@btime</span> <span class="pl-c1">copyto!</span>(C, K);
  <span class="pl-c1">61.528</span> ns (<span class="pl-c1">0</span> allocations<span class="pl-k">:</span> <span class="pl-c1">0</span> bytes)

julia<span class="pl-k">&gt;</span> C <span class="pl-k">==</span> <span class="pl-c1">kron</span>(A,B)
<span class="pl-c1">true</span></pre></div>
<h2><a id="user-content-broadcasting" class="anchor" aria-hidden="true" href="#broadcasting"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Broadcasting</h2>
<p>Base includes a lazy broadcast object called <code>Broadcasting</code>, but this is
not a subtype of <code>AbstractArray</code>. Here we have <code>BroadcastArray</code> which replicates
the functionality of <code>Broadcasting</code> while supporting the array interface.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> A <span class="pl-k">=</span> <span class="pl-c1">randn</span>(<span class="pl-c1">6</span>,<span class="pl-c1">6</span>);

julia<span class="pl-k">&gt;</span> B <span class="pl-k">=</span> <span class="pl-c1">BroadcastArray</span>(exp, A);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">Matrix</span>(B) <span class="pl-k">==</span> <span class="pl-c1">exp</span>.(A)
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> B <span class="pl-k">=</span> <span class="pl-c1">BroadcastArray</span>(<span class="pl-k">+</span>, A, <span class="pl-c1">2</span>);

julia<span class="pl-k">&gt;</span> B <span class="pl-k">==</span> A <span class="pl-k">.+</span> <span class="pl-c1">2</span>
<span class="pl-c1">true</span></pre></div>
<p>Such arrays can also be created using the macro <code>@~</code> which acts on ordinary
broadcasting expressions combined with <code>LazyArray</code>:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> C <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">1000</span>)<span class="pl-k">'</span>;

julia<span class="pl-k">&gt;</span> D <span class="pl-k">=</span> <span class="pl-c1">LazyArray</span>(@<span class="pl-k">~</span> <span class="pl-c1">exp</span>.(C))

julia<span class="pl-k">&gt;</span> E <span class="pl-k">=</span> <span class="pl-c1">LazyArray</span>(@<span class="pl-k">~</span> <span class="pl-c1">@.</span> <span class="pl-c1">2</span> <span class="pl-k">+</span> <span class="pl-c1">log</span>(C))

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">sum</span>(<span class="pl-c1">LazyArray</span>(@<span class="pl-k">~</span> C <span class="pl-k">.*</span> C<span class="pl-k">'</span>); dims<span class="pl-k">=</span><span class="pl-c1">1</span>) <span class="pl-c"><span class="pl-c">#</span> without `@~`, 1.438 ms (5 allocations: 7.64 MiB)</span>
  <span class="pl-c1">74.425</span> μs (<span class="pl-c1">7</span> allocations<span class="pl-k">:</span> <span class="pl-c1">8.08</span> KiB)</pre></div>
</article></div>