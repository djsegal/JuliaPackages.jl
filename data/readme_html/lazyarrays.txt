<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-lazyarraysjl" class="anchor" aria-hidden="true" href="#lazyarraysjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>LazyArrays.jl</h1>
<p dir="auto"><a href="https://juliaarrays.github.io/LazyArrays.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/JuliaArrays/LazyArrays.jl/actions"><img src="https://github.com/JuliaArrays/LazyArrays.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/JuliaArrays/LazyArrays.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/0a3899ee74ce8cf40361ef038eca65c5129f750551cb26f2350eec486890e636/68747470733a2f2f636f6465636f762e696f2f67682f4a756c69614172726179732f4c617a794172726179732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/JuliaArrays/LazyArrays.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">Lazy arrays and linear algebra in Julia</p>
<p dir="auto">This package supports lazy analogues of array operations like <code>vcat</code>, <code>hcat</code>,
and multiplication. This helps with the implementation of matrix-free methods
for iterative solvers.</p>
<p dir="auto">The package has been designed with high-performance in mind, so should outperform
the non-lazy analogues from Base for many operations like <code>copyto!</code> and broadcasting.
Some operations will be inherently slower due to extra computation, like <code>getindex</code>.
Please file an issue for any examples that are significantly slower than their
the analogue in Base.</p>
<h2 dir="auto"><a id="user-content-lazy-operations" class="anchor" aria-hidden="true" href="#lazy-operations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Lazy operations</h2>
<p dir="auto">To construct a lazy representation of a function call <code>f(x,y,z...)</code>, use the command
<code>applied(f, x, y, z...)</code>. This will return an unmaterialized object typically of type <code>Applied</code>
that represents the operation. To realize that object, call <code>materialize</code>, which
will typically be equivalent to calling <code>f(x,y,z...)</code>. A macro <code>@~</code> is available as a shorthand:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using LazyArrays, LinearAlgebra

julia&gt; applied(exp, 1)
Applied(exp,1)

julia&gt; materialize(applied(exp, 1))
2.718281828459045

julia&gt; materialize(@~ exp(1))
2.718281828459045

julia&gt; exp(1)
2.718281828459045"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> LazyArrays, LinearAlgebra

julia<span class="pl-k">&gt;</span> <span class="pl-c1">applied</span>(exp, <span class="pl-c1">1</span>)
<span class="pl-c1">Applied</span>(exp,<span class="pl-c1">1</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">materialize</span>(<span class="pl-c1">applied</span>(exp, <span class="pl-c1">1</span>))
<span class="pl-c1">2.718281828459045</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">materialize</span>(@<span class="pl-k">~</span> <span class="pl-c1">exp</span>(<span class="pl-c1">1</span>))
<span class="pl-c1">2.718281828459045</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">exp</span>(<span class="pl-c1">1</span>)
<span class="pl-c1">2.718281828459045</span></pre></div>
<p dir="auto">Note that <code>@~</code> causes sub-expressions to be wrapped in an <code>applied</code> call, not
just the top-level expression. This can lead to <code>MethodError</code>s when lazy
application of sub-expressions is not yet implemented. For example,</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; @~ Vector(1:10) .* ones(10)'
ERROR: MethodError: ...

julia&gt; A = Vector(1:10); B = ones(10); (@~ sum(A .* B')) |&gt; materialize
550.0"><pre>julia<span class="pl-k">&gt;</span> @<span class="pl-k">~</span> <span class="pl-c1">Vector</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>) <span class="pl-k">.*</span> <span class="pl-c1">ones</span>(<span class="pl-c1">10</span>)<span class="pl-k">'</span>
ERROR<span class="pl-k">:</span> MethodError<span class="pl-k">:</span> <span class="pl-k">...</span>

julia<span class="pl-k">&gt;</span> A <span class="pl-k">=</span> <span class="pl-c1">Vector</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>); B <span class="pl-k">=</span> <span class="pl-c1">ones</span>(<span class="pl-c1">10</span>); (@<span class="pl-k">~</span> <span class="pl-c1">sum</span>(A <span class="pl-k">.*</span> B<span class="pl-k">'</span>)) <span class="pl-k">|&gt;</span> materialize
<span class="pl-c1">550.0</span></pre></div>
<p dir="auto">The benefit of lazy operations is that they can be materialized in-place,
possible using simplifications. For example, it is possible to
do BLAS-like Matrix-Vector operations of the form <code>α*A*x + β*y</code> as
implemented in <code>BLAS.gemv!</code> using a lazy applied object:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; A = randn(5,5); b = randn(5); c = randn(5); d = similar(c);

julia&gt; d .= @~ 2.0 * A * b + 3.0 * c # Calls gemv!
5-element Array{Float64,1}:
 -2.5366335879717514
 -5.305097174484744  
 -9.818431932350942  
  2.421562605495651  
  0.26792916096572983

julia&gt; 2*(A*b) + 3c
5-element Array{Float64,1}:
 -2.5366335879717514
 -5.305097174484744  
 -9.818431932350942  
  2.421562605495651  
  0.26792916096572983

julia&gt; function mymul(A, b, c, d) # need to put in function for benchmarking
       d .= @~ 2.0 * A * b + 3.0 * c
       end
mymul (generic function with 1 method)

julia&gt; @btime mymul(A, b, c, d) # calls gemv!
  77.444 ns (0 allocations: 0 bytes)
5-element Array{Float64,1}:
 -2.5366335879717514
 -5.305097174484744  
 -9.818431932350942  
  2.421562605495651  
  0.26792916096572983

julia&gt; @btime 2*(A*b) + 3c; # does not call gemv!
  241.659 ns (4 allocations: 512 bytes)"><pre>julia<span class="pl-k">&gt;</span> A <span class="pl-k">=</span> <span class="pl-c1">randn</span>(<span class="pl-c1">5</span>,<span class="pl-c1">5</span>); b <span class="pl-k">=</span> <span class="pl-c1">randn</span>(<span class="pl-c1">5</span>); c <span class="pl-k">=</span> <span class="pl-c1">randn</span>(<span class="pl-c1">5</span>); d <span class="pl-k">=</span> <span class="pl-c1">similar</span>(c);

julia<span class="pl-k">&gt;</span> d <span class="pl-k">.=</span> @<span class="pl-k">~</span> <span class="pl-c1">2.0</span> <span class="pl-k">*</span> A <span class="pl-k">*</span> b <span class="pl-k">+</span> <span class="pl-c1">3.0</span> <span class="pl-k">*</span> c <span class="pl-c"><span class="pl-c">#</span> Calls gemv!</span>
<span class="pl-c1">5</span><span class="pl-k">-</span>element Array{Float64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-k">-</span><span class="pl-c1">2.5366335879717514</span>
 <span class="pl-k">-</span><span class="pl-c1">5.305097174484744</span>  
 <span class="pl-k">-</span><span class="pl-c1">9.818431932350942</span>  
  <span class="pl-c1">2.421562605495651</span>  
  <span class="pl-c1">0.26792916096572983</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">2</span><span class="pl-k">*</span>(A<span class="pl-k">*</span>b) <span class="pl-k">+</span> <span class="pl-c1">3</span>c
<span class="pl-c1">5</span><span class="pl-k">-</span>element Array{Float64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-k">-</span><span class="pl-c1">2.5366335879717514</span>
 <span class="pl-k">-</span><span class="pl-c1">5.305097174484744</span>  
 <span class="pl-k">-</span><span class="pl-c1">9.818431932350942</span>  
  <span class="pl-c1">2.421562605495651</span>  
  <span class="pl-c1">0.26792916096572983</span>

julia<span class="pl-k">&gt;</span> <span class="pl-k">function</span> <span class="pl-en">mymul</span>(A, b, c, d) <span class="pl-c"><span class="pl-c">#</span> need to put in function for benchmarking</span>
       d <span class="pl-k">.=</span> @<span class="pl-k">~</span> <span class="pl-c1">2.0</span> <span class="pl-k">*</span> A <span class="pl-k">*</span> b <span class="pl-k">+</span> <span class="pl-c1">3.0</span> <span class="pl-k">*</span> c
       <span class="pl-k">end</span>
mymul (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">mymul</span>(A, b, c, d) <span class="pl-c"><span class="pl-c">#</span> calls gemv!</span>
  <span class="pl-c1">77.444</span> ns (<span class="pl-c1">0</span> allocations<span class="pl-k">:</span> <span class="pl-c1">0</span> bytes)
<span class="pl-c1">5</span><span class="pl-k">-</span>element Array{Float64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-k">-</span><span class="pl-c1">2.5366335879717514</span>
 <span class="pl-k">-</span><span class="pl-c1">5.305097174484744</span>  
 <span class="pl-k">-</span><span class="pl-c1">9.818431932350942</span>  
  <span class="pl-c1">2.421562605495651</span>  
  <span class="pl-c1">0.26792916096572983</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">2</span><span class="pl-k">*</span>(A<span class="pl-k">*</span>b) <span class="pl-k">+</span> <span class="pl-c1">3</span>c; <span class="pl-c"><span class="pl-c">#</span> does not call gemv!</span>
  <span class="pl-c1">241.659</span> ns (<span class="pl-c1">4</span> allocations<span class="pl-k">:</span> <span class="pl-c1">512</span> bytes)</pre></div>
<p dir="auto">This also works for inverses, which lower to BLAS calls whenever possible:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; A = randn(5,5); b = randn(5); c = similar(b);

julia&gt; c .= @~ A \ b
5-element Array{Float64,1}:
 -2.5366335879717514
 -5.305097174484744  
 -9.818431932350942  
  2.421562605495651  
  0.26792916096572983"><pre>julia<span class="pl-k">&gt;</span> A <span class="pl-k">=</span> <span class="pl-c1">randn</span>(<span class="pl-c1">5</span>,<span class="pl-c1">5</span>); b <span class="pl-k">=</span> <span class="pl-c1">randn</span>(<span class="pl-c1">5</span>); c <span class="pl-k">=</span> <span class="pl-c1">similar</span>(b);

julia<span class="pl-k">&gt;</span> c <span class="pl-k">.=</span> @<span class="pl-k">~</span> A <span class="pl-k">\</span> b
<span class="pl-c1">5</span><span class="pl-k">-</span>element Array{Float64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-k">-</span><span class="pl-c1">2.5366335879717514</span>
 <span class="pl-k">-</span><span class="pl-c1">5.305097174484744</span>  
 <span class="pl-k">-</span><span class="pl-c1">9.818431932350942</span>  
  <span class="pl-c1">2.421562605495651</span>  
  <span class="pl-c1">0.26792916096572983</span></pre></div>
<h2 dir="auto"><a id="user-content-lazy-arrays" class="anchor" aria-hidden="true" href="#lazy-arrays"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Lazy arrays</h2>
<p dir="auto">Often we want lazy realizations of matrices, which are supported via <code>ApplyArray</code>.
For example, the following creates a lazy matrix exponential:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; E = ApplyArray(exp, [1 2; 3 4])
2×2 ApplyArray{Float64,2,typeof(exp),Tuple{Array{Int64,2}}}:
  51.969   74.7366
 112.105  164.074 "><pre>julia<span class="pl-k">&gt;</span> E <span class="pl-k">=</span> <span class="pl-c1">ApplyArray</span>(exp, [<span class="pl-c1">1</span> <span class="pl-c1">2</span>; <span class="pl-c1">3</span> <span class="pl-c1">4</span>])
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">2</span> ApplyArray{Float64,<span class="pl-c1">2</span>,<span class="pl-c1">typeof</span>(exp),Tuple{Array{Int64,<span class="pl-c1">2</span>}}}<span class="pl-k">:</span>
  <span class="pl-c1">51.969</span>   <span class="pl-c1">74.7366</span>
 <span class="pl-c1">112.105</span>  <span class="pl-c1">164.074</span> </pre></div>
<p dir="auto">A lazy matrix exponential is useful for, say, in-place matrix-exponential*vector:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; b = Vector{Float64}(undef, 2); b .= @~ E*[4,4]
2-element Array{Float64,1}:
  506.8220830628333
 1104.7145995988594"><pre>julia<span class="pl-k">&gt;</span> b <span class="pl-k">=</span> <span class="pl-c1">Vector</span><span class="pl-c1">{Float64}</span>(undef, <span class="pl-c1">2</span>); b <span class="pl-k">.=</span> @<span class="pl-k">~</span> E<span class="pl-k">*</span>[<span class="pl-c1">4</span>,<span class="pl-c1">4</span>]
<span class="pl-c1">2</span><span class="pl-k">-</span>element Array{Float64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
  <span class="pl-c1">506.8220830628333</span>
 <span class="pl-c1">1104.7145995988594</span></pre></div>
<p dir="auto">While this works, it is not actually optimised (yet).</p>
<p dir="auto">Other options do have special implementations that make them fast. We
now give some examples.</p>
<h3 dir="auto"><a id="user-content-concatenation" class="anchor" aria-hidden="true" href="#concatenation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Concatenation</h3>
<p dir="auto">Lazy <code>vcat</code> and <code>hcat</code> allow for representing the concatenation of
vectors without actually allocating memory, and support a fast
<code>copyto!</code>  for allocation-free population of a vector.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using BenchmarkTools

julia&gt; A = ApplyArray(vcat,1:5,2:3) # allocation-free
7-element ApplyArray{Int64,1,typeof(vcat),Tuple{UnitRange{Int64},UnitRange{Int64}}}:
 1
 2
 3
 4
 5
 2
 3

julia&gt; Vector(A) == vcat(1:5, 2:3)
true

julia&gt; b = Array{Int}(undef, length(A)); @btime copyto!(b, A);
  26.670 ns (0 allocations: 0 bytes)

julia&gt; @btime vcat(1:5, 2:3); # takes twice as long due to memory creation
  43.336 ns (1 allocation: 144 bytes)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> BenchmarkTools

julia<span class="pl-k">&gt;</span> A <span class="pl-k">=</span> <span class="pl-c1">ApplyArray</span>(vcat,<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">5</span>,<span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">3</span>) <span class="pl-c"><span class="pl-c">#</span> allocation-free</span>
<span class="pl-c1">7</span><span class="pl-k">-</span>element ApplyArray{Int64,<span class="pl-c1">1</span>,<span class="pl-c1">typeof</span>(vcat),Tuple{UnitRange{Int64},UnitRange{Int64}}}<span class="pl-k">:</span>
 <span class="pl-c1">1</span>
 <span class="pl-c1">2</span>
 <span class="pl-c1">3</span>
 <span class="pl-c1">4</span>
 <span class="pl-c1">5</span>
 <span class="pl-c1">2</span>
 <span class="pl-c1">3</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">Vector</span>(A) <span class="pl-k">==</span> <span class="pl-c1">vcat</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">5</span>, <span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">3</span>)
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> b <span class="pl-k">=</span> <span class="pl-c1">Array</span><span class="pl-c1">{Int}</span>(undef, <span class="pl-c1">length</span>(A)); <span class="pl-c1">@btime</span> <span class="pl-c1">copyto!</span>(b, A);
  <span class="pl-c1">26.670</span> ns (<span class="pl-c1">0</span> allocations<span class="pl-k">:</span> <span class="pl-c1">0</span> bytes)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">vcat</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">5</span>, <span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">3</span>); <span class="pl-c"><span class="pl-c">#</span> takes twice as long due to memory creation</span>
  <span class="pl-c1">43.336</span> ns (<span class="pl-c1">1</span> allocation<span class="pl-k">:</span> <span class="pl-c1">144</span> bytes)</pre></div>
<p dir="auto">Similar is the lazy analogue of <code>hcat</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; A = ApplyArray(hcat, 1:3, randn(3,10))
3×11 ApplyArray{Float64,2,typeof(hcat),Tuple{UnitRange{Int64},Array{Float64,2}}}:
 1.0   1.16561    0.224871  -1.36416   -0.30675    0.103714    0.590141   0.982382  -1.50045    0.323747  -1.28173  
 2.0   1.04648    1.35506   -0.147157   0.995657  -0.616321   -0.128672  -0.671445  -0.563587  -0.268389  -1.71004  
 3.0  -0.433093  -0.325207  -1.38496   -0.391113  -0.0568739  -1.55796   -1.00747    0.473686  -1.2113     0.0119156

julia&gt; Matrix(A) == hcat(A.args...)
true

julia&gt; B = Array{Float64}(undef, size(A)...); @btime copyto!(B, A);
  109.625 ns (1 allocation: 32 bytes)

julia&gt; @btime hcat(A.args...); # takes twice as long due to memory creation
  274.620 ns (6 allocations: 560 bytes)"><pre>julia<span class="pl-k">&gt;</span> A <span class="pl-k">=</span> <span class="pl-c1">ApplyArray</span>(hcat, <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">3</span>, <span class="pl-c1">randn</span>(<span class="pl-c1">3</span>,<span class="pl-c1">10</span>))
<span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">11</span> ApplyArray{Float64,<span class="pl-c1">2</span>,<span class="pl-c1">typeof</span>(hcat),Tuple{UnitRange{Int64},Array{Float64,<span class="pl-c1">2</span>}}}<span class="pl-k">:</span>
 <span class="pl-c1">1.0</span>   <span class="pl-c1">1.16561</span>    <span class="pl-c1">0.224871</span>  <span class="pl-k">-</span><span class="pl-c1">1.36416</span>   <span class="pl-k">-</span><span class="pl-c1">0.30675</span>    <span class="pl-c1">0.103714</span>    <span class="pl-c1">0.590141</span>   <span class="pl-c1">0.982382</span>  <span class="pl-k">-</span><span class="pl-c1">1.50045</span>    <span class="pl-c1">0.323747</span>  <span class="pl-k">-</span><span class="pl-c1">1.28173</span>  
 <span class="pl-c1">2.0</span>   <span class="pl-c1">1.04648</span>    <span class="pl-c1">1.35506</span>   <span class="pl-k">-</span><span class="pl-c1">0.147157</span>   <span class="pl-c1">0.995657</span>  <span class="pl-k">-</span><span class="pl-c1">0.616321</span>   <span class="pl-k">-</span><span class="pl-c1">0.128672</span>  <span class="pl-k">-</span><span class="pl-c1">0.671445</span>  <span class="pl-k">-</span><span class="pl-c1">0.563587</span>  <span class="pl-k">-</span><span class="pl-c1">0.268389</span>  <span class="pl-k">-</span><span class="pl-c1">1.71004</span>  
 <span class="pl-c1">3.0</span>  <span class="pl-k">-</span><span class="pl-c1">0.433093</span>  <span class="pl-k">-</span><span class="pl-c1">0.325207</span>  <span class="pl-k">-</span><span class="pl-c1">1.38496</span>   <span class="pl-k">-</span><span class="pl-c1">0.391113</span>  <span class="pl-k">-</span><span class="pl-c1">0.0568739</span>  <span class="pl-k">-</span><span class="pl-c1">1.55796</span>   <span class="pl-k">-</span><span class="pl-c1">1.00747</span>    <span class="pl-c1">0.473686</span>  <span class="pl-k">-</span><span class="pl-c1">1.2113</span>     <span class="pl-c1">0.0119156</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">Matrix</span>(A) <span class="pl-k">==</span> <span class="pl-c1">hcat</span>(A<span class="pl-k">.</span>args<span class="pl-k">...</span>)
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> B <span class="pl-k">=</span> <span class="pl-c1">Array</span><span class="pl-c1">{Float64}</span>(undef, <span class="pl-c1">size</span>(A)<span class="pl-k">...</span>); <span class="pl-c1">@btime</span> <span class="pl-c1">copyto!</span>(B, A);
  <span class="pl-c1">109.625</span> ns (<span class="pl-c1">1</span> allocation<span class="pl-k">:</span> <span class="pl-c1">32</span> bytes)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">hcat</span>(A<span class="pl-k">.</span>args<span class="pl-k">...</span>); <span class="pl-c"><span class="pl-c">#</span> takes twice as long due to memory creation</span>
  <span class="pl-c1">274.620</span> ns (<span class="pl-c1">6</span> allocations<span class="pl-k">:</span> <span class="pl-c1">560</span> bytes)</pre></div>
<h3 dir="auto"><a id="user-content-kronecker-products" class="anchor" aria-hidden="true" href="#kronecker-products"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Kronecker products</h3>
<p dir="auto">We can represent Kronecker products of arrays without constructing the full
array:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; A = randn(2,2); B = randn(3,3);

julia&gt; K = ApplyArray(kron,A,B)
6×6 ApplyArray{Float64,2,typeof(kron),Tuple{Array{Float64,2},Array{Float64,2}}}:
 -1.08736   -0.19547   -0.132824   1.60531    0.288579    0.196093 
  0.353898   0.445557  -0.257776  -0.522472  -0.657791    0.380564 
 -0.723707   0.911737  -0.710378   1.06843   -1.34603     1.04876  
  1.40606    0.252761   0.171754  -0.403809  -0.0725908  -0.0493262
 -0.457623  -0.576146   0.333329   0.131426   0.165464   -0.0957293
  0.935821  -1.17896    0.918584  -0.26876    0.338588   -0.26381  

julia&gt; C = Matrix{Float64}(undef, 6, 6); @btime copyto!(C, K);
  61.528 ns (0 allocations: 0 bytes)

julia&gt; C == kron(A,B)
true"><pre>julia<span class="pl-k">&gt;</span> A <span class="pl-k">=</span> <span class="pl-c1">randn</span>(<span class="pl-c1">2</span>,<span class="pl-c1">2</span>); B <span class="pl-k">=</span> <span class="pl-c1">randn</span>(<span class="pl-c1">3</span>,<span class="pl-c1">3</span>);

julia<span class="pl-k">&gt;</span> K <span class="pl-k">=</span> <span class="pl-c1">ApplyArray</span>(kron,A,B)
<span class="pl-c1">6</span><span class="pl-k">×</span><span class="pl-c1">6</span> ApplyArray{Float64,<span class="pl-c1">2</span>,<span class="pl-c1">typeof</span>(kron),Tuple{Array{Float64,<span class="pl-c1">2</span>},Array{Float64,<span class="pl-c1">2</span>}}}<span class="pl-k">:</span>
 <span class="pl-k">-</span><span class="pl-c1">1.08736</span>   <span class="pl-k">-</span><span class="pl-c1">0.19547</span>   <span class="pl-k">-</span><span class="pl-c1">0.132824</span>   <span class="pl-c1">1.60531</span>    <span class="pl-c1">0.288579</span>    <span class="pl-c1">0.196093</span> 
  <span class="pl-c1">0.353898</span>   <span class="pl-c1">0.445557</span>  <span class="pl-k">-</span><span class="pl-c1">0.257776</span>  <span class="pl-k">-</span><span class="pl-c1">0.522472</span>  <span class="pl-k">-</span><span class="pl-c1">0.657791</span>    <span class="pl-c1">0.380564</span> 
 <span class="pl-k">-</span><span class="pl-c1">0.723707</span>   <span class="pl-c1">0.911737</span>  <span class="pl-k">-</span><span class="pl-c1">0.710378</span>   <span class="pl-c1">1.06843</span>   <span class="pl-k">-</span><span class="pl-c1">1.34603</span>     <span class="pl-c1">1.04876</span>  
  <span class="pl-c1">1.40606</span>    <span class="pl-c1">0.252761</span>   <span class="pl-c1">0.171754</span>  <span class="pl-k">-</span><span class="pl-c1">0.403809</span>  <span class="pl-k">-</span><span class="pl-c1">0.0725908</span>  <span class="pl-k">-</span><span class="pl-c1">0.0493262</span>
 <span class="pl-k">-</span><span class="pl-c1">0.457623</span>  <span class="pl-k">-</span><span class="pl-c1">0.576146</span>   <span class="pl-c1">0.333329</span>   <span class="pl-c1">0.131426</span>   <span class="pl-c1">0.165464</span>   <span class="pl-k">-</span><span class="pl-c1">0.0957293</span>
  <span class="pl-c1">0.935821</span>  <span class="pl-k">-</span><span class="pl-c1">1.17896</span>    <span class="pl-c1">0.918584</span>  <span class="pl-k">-</span><span class="pl-c1">0.26876</span>    <span class="pl-c1">0.338588</span>   <span class="pl-k">-</span><span class="pl-c1">0.26381</span>  

julia<span class="pl-k">&gt;</span> C <span class="pl-k">=</span> <span class="pl-c1">Matrix</span><span class="pl-c1">{Float64}</span>(undef, <span class="pl-c1">6</span>, <span class="pl-c1">6</span>); <span class="pl-c1">@btime</span> <span class="pl-c1">copyto!</span>(C, K);
  <span class="pl-c1">61.528</span> ns (<span class="pl-c1">0</span> allocations<span class="pl-k">:</span> <span class="pl-c1">0</span> bytes)

julia<span class="pl-k">&gt;</span> C <span class="pl-k">==</span> <span class="pl-c1">kron</span>(A,B)
<span class="pl-c1">true</span></pre></div>
<h2 dir="auto"><a id="user-content-broadcasting" class="anchor" aria-hidden="true" href="#broadcasting"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Broadcasting</h2>
<p dir="auto">Base includes a lazy broadcast object called <code>Broadcasting</code>, but this is
not a subtype of <code>AbstractArray</code>. Here we have <code>BroadcastArray</code> which replicates
the functionality of <code>Broadcasting</code> while supporting the array interface.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; A = randn(6,6);

julia&gt; B = BroadcastArray(exp, A);

julia&gt; Matrix(B) == exp.(A)
true

julia&gt; B = BroadcastArray(+, A, 2);

julia&gt; B == A .+ 2
true"><pre>julia<span class="pl-k">&gt;</span> A <span class="pl-k">=</span> <span class="pl-c1">randn</span>(<span class="pl-c1">6</span>,<span class="pl-c1">6</span>);

julia<span class="pl-k">&gt;</span> B <span class="pl-k">=</span> <span class="pl-c1">BroadcastArray</span>(exp, A);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">Matrix</span>(B) <span class="pl-k">==</span> <span class="pl-c1">exp</span>.(A)
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> B <span class="pl-k">=</span> <span class="pl-c1">BroadcastArray</span>(<span class="pl-k">+</span>, A, <span class="pl-c1">2</span>);

julia<span class="pl-k">&gt;</span> B <span class="pl-k">==</span> A <span class="pl-k">.+</span> <span class="pl-c1">2</span>
<span class="pl-c1">true</span></pre></div>
<p dir="auto">Such arrays can also be created using the macro <code>@~</code> which acts on ordinary
broadcasting expressions combined with <code>LazyArray</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; C = rand(1000)';

julia&gt; D = LazyArray(@~ exp.(C))

julia&gt; E = LazyArray(@~ @. 2 + log(C))

julia&gt; @btime sum(LazyArray(@~ C .* C'); dims=1) # without `@~`, 1.438 ms (5 allocations: 7.64 MiB)
  74.425 μs (7 allocations: 8.08 KiB)"><pre>julia<span class="pl-k">&gt;</span> C <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">1000</span>)<span class="pl-k">'</span>;

julia<span class="pl-k">&gt;</span> D <span class="pl-k">=</span> <span class="pl-c1">LazyArray</span>(@<span class="pl-k">~</span> <span class="pl-c1">exp</span>.(C))

julia<span class="pl-k">&gt;</span> E <span class="pl-k">=</span> <span class="pl-c1">LazyArray</span>(@<span class="pl-k">~</span> <span class="pl-c1">@.</span> <span class="pl-c1">2</span> <span class="pl-k">+</span> <span class="pl-c1">log</span>(C))

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">sum</span>(<span class="pl-c1">LazyArray</span>(@<span class="pl-k">~</span> C <span class="pl-k">.*</span> C<span class="pl-k">'</span>); dims<span class="pl-k">=</span><span class="pl-c1">1</span>) <span class="pl-c"><span class="pl-c">#</span> without `@~`, 1.438 ms (5 allocations: 7.64 MiB)</span>
  <span class="pl-c1">74.425</span> μs (<span class="pl-c1">7</span> allocations<span class="pl-k">:</span> <span class="pl-c1">8.08</span> KiB)</pre></div>
</article></div>