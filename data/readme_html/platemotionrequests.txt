<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-platemotionrequests" class="anchor" aria-hidden="true" href="#platemotionrequests"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>PlateMotionRequests</h1>
<p dir="auto">A Julia package for plate motion data requests using the <a href="https://www.unavco.org/software/geodetic-utilities/plate-motion-calculator/plate-motion-calculator.html" rel="nofollow">UNAVCO Plate Motion Calculator</a>.</p>
<p dir="auto">The package is open source, and the <a href="https://git.sr.ht/~adigitoleo/PlateMotionRequests.jl" rel="nofollow">code is available</a>
under the <a href="https://git.sr.ht/~adigitoleo/PlateMotionRequests.jl/blob/main/LICENSE" rel="nofollow">Zero-Clause BSD license</a>.
There is also a website with <a href="https://adigitoleo.github.io/PlateMotionRequests.jl/" rel="nofollow">online documentation</a>.</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">From the Julia shell, switch to package mode with <code>]</code> and run</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="add PlateMotionRequests"><pre class="notranslate"><code>add PlateMotionRequests
</code></pre></div>
<p dir="auto">For advanced packaging instructions,
refer to the <a href="https://docs.julialang.org/en/v1/stdlib/Pkg/" rel="nofollow">Julia Pkg docs</a>.</p>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<p dir="auto"><strong>Save data whenever possible to avoid repeating requests to the UNAVCO server.</strong>
<strong>Note that the provided methods do not implement any network limits.</strong></p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; using PlateMotionRequests
julia&gt; latitudes = -20:10:20
julia&gt; longitudes = 160:10:200
julia&gt; GSRMdata = platemotion(
           repeat(latitudes, length(longitudes)),
           repeat(longitudes, inner = length(latitudes)),
       )"><pre class="notranslate"><code>julia&gt; using PlateMotionRequests
julia&gt; latitudes = -20:10:20
julia&gt; longitudes = 160:10:200
julia&gt; GSRMdata = platemotion(
           repeat(latitudes, length(longitudes)),
           repeat(longitudes, inner = length(latitudes)),
       )
</code></pre></div>
<p dir="auto">Data can be written to/read from storage using <code>write_platemotion</code> and <code>read_platemotion</code>.
These functions write/read simple tab-delimited text files.
By using the <code>.nc</code> file extension, you can tell <code>write_platemotion</code> to use
an experimental NetCDF output format (NetCDF tests currently fail on Windows).
To store binary representations,
the <code>Serialization</code> module from Julia's standard library may prove useful.
Other formats like HDF5 or ASDF may be preferred,
depending on your requirements.</p>
<p dir="auto">Responses are tabulated using <a href="https://typedtables.juliadata.org/latest/" rel="nofollow">TypedTables.jl</a>,
e.g.:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="Table with 6 columns and 25 rows:
      lon    lat    velocity_east  velocity_north  plate_and_reference  model
    ┌────────────────────────────────────────────────────────────────────────────
 1  │ 160.0  -20.0  25.53          49.46           AU(NNR)              GSRM v2.1
 2  │ 160.0  -10.0  -61.14         25.72           PA(NNR)              GSRM v2.1
 3  │ 160.0  0.0    -65.81         25.72           PA(NNR)              GSRM v2.1
 4  │ 160.0  10.0   -68.49         25.72           PA(NNR)              GSRM v2.1
 5  │ 160.0  20.0   -69.1          25.71           PA(NNR)              GSRM v2.1
 6  │ 170.0  -20.0  -56.25         29.02           PA(NNR)              GSRM v2.1
 7  │ 170.0  -10.0  -61.97         29.02           PA(NNR)              GSRM v2.1
 8  │ 170.0  0.0    -65.81         29.03           PA(NNR)              GSRM v2.1
 9  │ 170.0  10.0   -67.66         29.02           PA(NNR)              GSRM v2.1
 10 │ 170.0  20.0   -67.48         29.02           PA(NNR)              GSRM v2.1
 11 │ 180.0  -20.0  20.45          35.23           AU(NNR)              GSRM v2.1
 12 │ 180.0  -10.0  -62.88         31.45           PA(NNR)              GSRM v2.1
 ⋮  │   ⋮      ⋮          ⋮              ⋮                  ⋮               ⋮"><pre class="notranslate"><code>Table with 6 columns and 25 rows:
      lon    lat    velocity_east  velocity_north  plate_and_reference  model
    ┌────────────────────────────────────────────────────────────────────────────
 1  │ 160.0  -20.0  25.53          49.46           AU(NNR)              GSRM v2.1
 2  │ 160.0  -10.0  -61.14         25.72           PA(NNR)              GSRM v2.1
 3  │ 160.0  0.0    -65.81         25.72           PA(NNR)              GSRM v2.1
 4  │ 160.0  10.0   -68.49         25.72           PA(NNR)              GSRM v2.1
 5  │ 160.0  20.0   -69.1          25.71           PA(NNR)              GSRM v2.1
 6  │ 170.0  -20.0  -56.25         29.02           PA(NNR)              GSRM v2.1
 7  │ 170.0  -10.0  -61.97         29.02           PA(NNR)              GSRM v2.1
 8  │ 170.0  0.0    -65.81         29.03           PA(NNR)              GSRM v2.1
 9  │ 170.0  10.0   -67.66         29.02           PA(NNR)              GSRM v2.1
 10 │ 170.0  20.0   -67.48         29.02           PA(NNR)              GSRM v2.1
 11 │ 180.0  -20.0  20.45          35.23           AU(NNR)              GSRM v2.1
 12 │ 180.0  -10.0  -62.88         31.45           PA(NNR)              GSRM v2.1
 ⋮  │   ⋮      ⋮          ⋮              ⋮                  ⋮               ⋮
</code></pre></div>
<p dir="auto">Change the model and reference frame using the <code>model</code> and <code>reference</code> keywords,
respectively. For a no-net-rotation frame, use the value <code>"NNR"</code> (default).
The <code>model</code> argument accepts the value <code>"all"</code>, to query all available models for the data.</p>
<p dir="auto">Change output formats using the <code>format</code> keyword.
The supported output formats are <code>"ascii"</code> (default),
<code>"ascii_xyz"</code> (WGS-84 coordinates) and <code>"psvelo"</code> (GMT 'psvelo' format).</p>
<p dir="auto">For the full list of options, see <code>?platemotion</code>.
You may also want to refer to the UNAVCO website linked above.</p>
<p dir="auto"><strong>The author is not affiliated with UNAVCO and cannot guarantee stability of the server.</strong></p>
<h2 dir="auto"><a id="user-content-feedback-and-contributions" class="anchor" aria-hidden="true" href="#feedback-and-contributions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Feedback and contributions</h2>
<p dir="auto">Please use the public mailing list for feedback and discussion:</p>
<p dir="auto"><a href="mailto:~adigitoleo/platemotionrequests.jl-devel@lists.sr.ht">~adigitoleo/platemotionrequests.jl-devel@lists.sr.ht</a></p>
<p dir="auto">Contributions are handled via patches sent to the same mailing list (preferred)
or pull requests at the <a href="https://github.com/adigitoleo/PlateMotionRequests.jl">GitHub mirror</a>.
Contributor guidelines are provided with the source code repository (in the file <code>CONTRIBUTING.md</code>).
The file <code>TODO.md</code> lists some ideas for planned features.
If you want to work on one of them,
send an email first to check if an implementation is already underway.</p>
<p dir="auto">CI is set up for commits pushed to <code>main</code>, <code>next</code> or <code>dev</code>.
The CI manifests are in <code>.build.yml</code> and <code>.github/workflows/ci.yml</code>.
Logs of test runs are available:</p>
<ul dir="auto">
<li>Linux CI (latest release) <a href="https://builds.sr.ht/~adigitoleo/PlateMotionRequests.jl?search=release" rel="nofollow"><img src="https://camo.githubusercontent.com/d63784fe4f77856c9989cd4c4c6c2bf2b7e0333ef922ee441a1567fbb041a482/68747470733a2f2f6275696c64732e73722e68742f7e6164696769746f6c656f2f506c6174654d6f74696f6e52657175657374732e6a6c2e737667" alt="builds.sr.ht status" data-canonical-src="https://builds.sr.ht/~adigitoleo/PlateMotionRequests.jl.svg" style="max-width: 100%;"></a></li>
<li>Windows CI (<a href="https://github.com/adigitoleo/PlateMotionRequests.jl/actions/workflows/ci.yml"><img src="https://github.com/adigitoleo/PlateMotionRequests.jl/actions/workflows/ci.yml/badge.svg" alt="GitHub status" style="max-width: 100%;"></a></li>
</ul>
</article></div>