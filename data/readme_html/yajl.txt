<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-yajljl-" class="anchor" aria-hidden="true" href="#yajljl-"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>YAJL.jl <a href="https://travis-ci.com/christopher-dG/YAJL.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/742dcdb8abff95894d32baac9df42d06a6a22df41723e215dbdf4e0c9c761dd3/68747470733a2f2f7472617669732d63692e636f6d2f6368726973746f706865722d64472f59414a4c2e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/christopher-dG/YAJL.jl.svg?branch=master" style="max-width: 100%;"></a></h1>
<p dir="auto">A Julia wrapper around the <a href="http://lloyd.github.io/yajl" rel="nofollow">YAJL JSON library</a>.</p>
<h2 dir="auto"><a id="user-content-use-case" class="anchor" aria-hidden="true" href="#use-case"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Use Case</h2>
<p dir="auto">YAJL.jl is pretty niche since there are already very good JSON libraries in pure Julia <a href="https://github.com/JuliaIO/JSON.jl">such</a> <a href="https://github.com/samoconnor/LazyJSON.jl">as</a> <a href="https://github.com/quinnj/JSON2.jl">these</a>.
However, YAJL makes it possible to write highly custom JSON processors that never need to hold the entirety of the data in memory.</p>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<p dir="auto">It's quite easy to write your own custom JSON context.
You get to choose your data representation, and you only need to implement what you'll use.</p>
<p dir="auto">Suppose that we had a massive list of numbers that we wanted to count.
Code for this task would look like this:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using YAJL

mutable struct Counter &lt;: YAJL.Context
    n::BigInt
    Counter() = new(0)
end

YAJL.collect(ctx::Counter) = ctx.n
@yajl number(ctx::Counter, ::Ptr{UInt8}, ::Int) = ctx.n += 1

n = open(io -&gt; YAJL.run(io, Counter()), &quot;big_list.json&quot;)"><pre><span class="pl-k">using</span> YAJL

<span class="pl-k">mutable struct</span> Counter <span class="pl-k">&lt;:</span> <span class="pl-c1">YAJL.Context</span>
    n<span class="pl-k">::</span><span class="pl-c1">BigInt</span>
    <span class="pl-en">Counter</span>() <span class="pl-k">=</span> <span class="pl-c1">new</span>(<span class="pl-c1">0</span>)
<span class="pl-k">end</span>

YAJL<span class="pl-k">.</span><span class="pl-en">collect</span>(ctx<span class="pl-k">::</span><span class="pl-c1">Counter</span>) <span class="pl-k">=</span> ctx<span class="pl-k">.</span>n
<span class="pl-c1">@yajl</span> <span class="pl-en">number</span>(ctx<span class="pl-k">::</span><span class="pl-c1">Counter</span>, <span class="pl-k">::</span><span class="pl-c1">Ptr{UInt8}</span>, <span class="pl-k">::</span><span class="pl-c1">Int</span>) <span class="pl-k">=</span> ctx<span class="pl-k">.</span>n <span class="pl-k">+=</span> <span class="pl-c1">1</span>

n <span class="pl-k">=</span> <span class="pl-c1">open</span>(io <span class="pl-k">-&gt;</span> YAJL<span class="pl-k">.</span><span class="pl-c1">run</span>(io, <span class="pl-c1">Counter</span>()), <span class="pl-s"><span class="pl-pds">"</span>big_list.json<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">Counting this list uses a constant amount of memory, regardless of the list length.</p>
<p dir="auto">There are more basic examples in <a href="test/runtests.jl"><code>runtests.jl</code></a>.
For a more complete example, see <a href="src/minifier.jl"><code>minifier.jl</code></a>.</p>
</article></div>