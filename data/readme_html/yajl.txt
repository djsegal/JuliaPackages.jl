<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-yajljl-" class="anchor" aria-hidden="true" href="#yajljl-"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>YAJL.jl <a href="https://travis-ci.com/christopher-dG/YAJL.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/b7ef099c15b620f403966b50680980bd1adcadae/68747470733a2f2f7472617669732d63692e636f6d2f6368726973746f706865722d64472f59414a4c2e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/christopher-dG/YAJL.jl.svg?branch=master" style="max-width:100%;"></a></h1>
<p>A Julia wrapper around the <a href="http://lloyd.github.io/yajl" rel="nofollow">YAJL JSON library</a>.</p>
<h2><a id="user-content-use-case" class="anchor" aria-hidden="true" href="#use-case"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Use Case</h2>
<p>YAJL.jl is pretty niche since there are already very good JSON libraries in pure Julia <a href="https://github.com/JuliaIO/JSON.jl">such</a> <a href="https://github.com/samoconnor/LazyJSON.jl">as</a> <a href="https://github.com/quinnj/JSON2.jl">these</a>.
However, YAJL makes it possible to write highly custom JSON processors that never need to hold the entirety of the data in memory.</p>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Usage</h2>
<p>It's quite easy to write your own custom JSON context.
You get to choose your data representation, and you only need to implement what you'll use.</p>
<p>Suppose that we had a massive list of numbers that we wanted to count.
Code for this task would look like this:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> YAJL

<span class="pl-k">mutable struct</span> Counter <span class="pl-k">&lt;:</span> <span class="pl-c1">YAJL.Context</span>
    n<span class="pl-k">::</span><span class="pl-c1">BigInt</span>
    <span class="pl-en">Counter</span>() <span class="pl-k">=</span> <span class="pl-c1">new</span>(<span class="pl-c1">0</span>)
<span class="pl-k">end</span>

YAJL<span class="pl-k">.</span><span class="pl-en">collect</span>(ctx<span class="pl-k">::</span><span class="pl-c1">Counter</span>) <span class="pl-k">=</span> ctx<span class="pl-k">.</span>n
<span class="pl-c1">@yajl</span> <span class="pl-en">number</span>(ctx<span class="pl-k">::</span><span class="pl-c1">Counter</span>, <span class="pl-k">::</span><span class="pl-c1">Ptr{UInt8}</span>, <span class="pl-k">::</span><span class="pl-c1">Int</span>) <span class="pl-k">=</span> ctx<span class="pl-k">.</span>n <span class="pl-k">+=</span> <span class="pl-c1">1</span>

n <span class="pl-k">=</span> <span class="pl-c1">open</span>(io <span class="pl-k">-&gt;</span> YAJL<span class="pl-k">.</span><span class="pl-c1">run</span>(io, <span class="pl-c1">Counter</span>()), <span class="pl-s"><span class="pl-pds">"</span>big_list.json<span class="pl-pds">"</span></span>)</pre></div>
<p>Counting this list uses a constant amount of memory, regardless of the list length.</p>
<p>There are more basic examples in <a href="test/runtests.jl"><code>runtests.jl</code></a>.
For a more complete example, see <a href="src/minifier.jl"><code>minifier.jl</code></a>.</p>
</article></div>